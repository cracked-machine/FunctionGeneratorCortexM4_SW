
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e90  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  08009070  08009070  00019070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093f8  080093f8  00020440  2**0
                  CONTENTS
  4 .ARM          00000000  080093f8  080093f8  00020440  2**0
                  CONTENTS
  5 .preinit_array 00000000  080093f8  080093f8  00020440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093f8  080093f8  000193f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093fc  080093fc  000193fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000440  20000000  08009400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000044c  20000440  08009840  00020440  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000088c  08009840  0002088c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020440  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022001  00000000  00000000  00020470  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004603  00000000  00000000  00042471  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ae8  00000000  00000000  00046a78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000018b0  00000000  00000000  00048560  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002eb44  00000000  00000000  00049e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001a37f  00000000  00000000  00078954  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00123659  00000000  00000000  00092cd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b632c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007728  00000000  00000000  001b63a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000440 	.word	0x20000440
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009058 	.word	0x08009058

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000444 	.word	0x20000444
 800021c:	08009058 	.word	0x08009058

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <dm_update_display>:
//uint16_t button_x_positions[1] = { (BUTTON_WIDTH) };



void dm_update_display()
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af02      	add	r7, sp, #8




	//ILI9341_Draw_Filled_Circle(50, 50, 50, BLUE);
	ILI9341_Draw_Text("ONE", 30, 210, BLACK, 2, DARKCYAN);
 80002c6:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80002ca:	9301      	str	r3, [sp, #4]
 80002cc:	2302      	movs	r3, #2
 80002ce:	9300      	str	r3, [sp, #0]
 80002d0:	2300      	movs	r3, #0
 80002d2:	22d2      	movs	r2, #210	; 0xd2
 80002d4:	211e      	movs	r1, #30
 80002d6:	4829      	ldr	r0, [pc, #164]	; (800037c <dm_update_display+0xbc>)
 80002d8:	f007 fa30 	bl	800773c <ILI9341_Draw_Text>

	ILI9341_Draw_Bordered_Hollow_Rectangle_Coord(	button_x_positions[0],
 80002dc:	4b28      	ldr	r3, [pc, #160]	; (8000380 <dm_update_display+0xc0>)
 80002de:	8818      	ldrh	r0, [r3, #0]
 80002e0:	2300      	movs	r3, #0
 80002e2:	9301      	str	r3, [sp, #4]
 80002e4:	2303      	movs	r3, #3
 80002e6:	9300      	str	r3, [sp, #0]
 80002e8:	2332      	movs	r3, #50	; 0x32
 80002ea:	2250      	movs	r2, #80	; 0x50
 80002ec:	21be      	movs	r1, #190	; 0xbe
 80002ee:	f007 f8fb 	bl	80074e8 <ILI9341_Draw_Bordered_Hollow_Rectangle_Coord>
													50,
													3,
													BLACK);


	ILI9341_Draw_Text("TWO", 110, 210, BLACK, 2, DARKGREEN);
 80002f2:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80002f6:	9301      	str	r3, [sp, #4]
 80002f8:	2302      	movs	r3, #2
 80002fa:	9300      	str	r3, [sp, #0]
 80002fc:	2300      	movs	r3, #0
 80002fe:	22d2      	movs	r2, #210	; 0xd2
 8000300:	216e      	movs	r1, #110	; 0x6e
 8000302:	4820      	ldr	r0, [pc, #128]	; (8000384 <dm_update_display+0xc4>)
 8000304:	f007 fa1a 	bl	800773c <ILI9341_Draw_Text>

	ILI9341_Draw_Bordered_Hollow_Rectangle_Coord(	button_x_positions[1],
 8000308:	4b1d      	ldr	r3, [pc, #116]	; (8000380 <dm_update_display+0xc0>)
 800030a:	8858      	ldrh	r0, [r3, #2]
 800030c:	2300      	movs	r3, #0
 800030e:	9301      	str	r3, [sp, #4]
 8000310:	2303      	movs	r3, #3
 8000312:	9300      	str	r3, [sp, #0]
 8000314:	2332      	movs	r3, #50	; 0x32
 8000316:	2250      	movs	r2, #80	; 0x50
 8000318:	21be      	movs	r1, #190	; 0xbe
 800031a:	f007 f8e5 	bl	80074e8 <ILI9341_Draw_Bordered_Hollow_Rectangle_Coord>
													BUTTON_WIDTH,
													50,
													3,
													BLACK);

	ILI9341_Draw_Text("THREE", 170, 210, BLACK, 2, YELLOW);
 800031e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000322:	9301      	str	r3, [sp, #4]
 8000324:	2302      	movs	r3, #2
 8000326:	9300      	str	r3, [sp, #0]
 8000328:	2300      	movs	r3, #0
 800032a:	22d2      	movs	r2, #210	; 0xd2
 800032c:	21aa      	movs	r1, #170	; 0xaa
 800032e:	4816      	ldr	r0, [pc, #88]	; (8000388 <dm_update_display+0xc8>)
 8000330:	f007 fa04 	bl	800773c <ILI9341_Draw_Text>

	ILI9341_Draw_Bordered_Hollow_Rectangle_Coord(	button_x_positions[2],
 8000334:	4b12      	ldr	r3, [pc, #72]	; (8000380 <dm_update_display+0xc0>)
 8000336:	8898      	ldrh	r0, [r3, #4]
 8000338:	2300      	movs	r3, #0
 800033a:	9301      	str	r3, [sp, #4]
 800033c:	2303      	movs	r3, #3
 800033e:	9300      	str	r3, [sp, #0]
 8000340:	2332      	movs	r3, #50	; 0x32
 8000342:	2250      	movs	r2, #80	; 0x50
 8000344:	21be      	movs	r1, #190	; 0xbe
 8000346:	f007 f8cf 	bl	80074e8 <ILI9341_Draw_Bordered_Hollow_Rectangle_Coord>
													BUTTON_WIDTH,
													50,
													3,
													BLACK);

	ILI9341_Draw_Text("FOUR", 250, 210, BLACK, 2, RED);
 800034a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	2302      	movs	r3, #2
 8000352:	9300      	str	r3, [sp, #0]
 8000354:	2300      	movs	r3, #0
 8000356:	22d2      	movs	r2, #210	; 0xd2
 8000358:	21fa      	movs	r1, #250	; 0xfa
 800035a:	480c      	ldr	r0, [pc, #48]	; (800038c <dm_update_display+0xcc>)
 800035c:	f007 f9ee 	bl	800773c <ILI9341_Draw_Text>

	ILI9341_Draw_Bordered_Hollow_Rectangle_Coord(	button_x_positions[3],
 8000360:	4b07      	ldr	r3, [pc, #28]	; (8000380 <dm_update_display+0xc0>)
 8000362:	88d8      	ldrh	r0, [r3, #6]
 8000364:	2300      	movs	r3, #0
 8000366:	9301      	str	r3, [sp, #4]
 8000368:	2303      	movs	r3, #3
 800036a:	9300      	str	r3, [sp, #0]
 800036c:	2332      	movs	r3, #50	; 0x32
 800036e:	2250      	movs	r2, #80	; 0x50
 8000370:	21be      	movs	r1, #190	; 0xbe
 8000372:	f007 f8b9 	bl	80074e8 <ILI9341_Draw_Bordered_Hollow_Rectangle_Coord>
													BLACK);



	//dm_test_screen();
}
 8000376:	bf00      	nop
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	08009070 	.word	0x08009070
 8000380:	20000000 	.word	0x20000000
 8000384:	08009074 	.word	0x08009074
 8000388:	08009078 	.word	0x08009078
 800038c:	08009080 	.word	0x08009080

08000390 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b08c      	sub	sp, #48	; 0x30
 8000394:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8000396:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	2220      	movs	r2, #32
 80003a6:	2100      	movs	r1, #0
 80003a8:	4618      	mov	r0, r3
 80003aa:	f007 ff05 	bl	80081b8 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80003ae:	4b32      	ldr	r3, [pc, #200]	; (8000478 <MX_ADC1_Init+0xe8>)
 80003b0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80003b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003b6:	4b30      	ldr	r3, [pc, #192]	; (8000478 <MX_ADC1_Init+0xe8>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003bc:	4b2e      	ldr	r3, [pc, #184]	; (8000478 <MX_ADC1_Init+0xe8>)
 80003be:	2200      	movs	r2, #0
 80003c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003c2:	4b2d      	ldr	r3, [pc, #180]	; (8000478 <MX_ADC1_Init+0xe8>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80003c8:	4b2b      	ldr	r3, [pc, #172]	; (8000478 <MX_ADC1_Init+0xe8>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003ce:	4b2a      	ldr	r3, [pc, #168]	; (8000478 <MX_ADC1_Init+0xe8>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003d4:	4b28      	ldr	r3, [pc, #160]	; (8000478 <MX_ADC1_Init+0xe8>)
 80003d6:	2204      	movs	r2, #4
 80003d8:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003da:	4b27      	ldr	r3, [pc, #156]	; (8000478 <MX_ADC1_Init+0xe8>)
 80003dc:	2200      	movs	r2, #0
 80003de:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003e0:	4b25      	ldr	r3, [pc, #148]	; (8000478 <MX_ADC1_Init+0xe8>)
 80003e2:	2201      	movs	r2, #1
 80003e4:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80003e6:	4b24      	ldr	r3, [pc, #144]	; (8000478 <MX_ADC1_Init+0xe8>)
 80003e8:	2201      	movs	r2, #1
 80003ea:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003ec:	4b22      	ldr	r3, [pc, #136]	; (8000478 <MX_ADC1_Init+0xe8>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003f4:	4b20      	ldr	r3, [pc, #128]	; (8000478 <MX_ADC1_Init+0xe8>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003fa:	4b1f      	ldr	r3, [pc, #124]	; (8000478 <MX_ADC1_Init+0xe8>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000400:	4b1d      	ldr	r3, [pc, #116]	; (8000478 <MX_ADC1_Init+0xe8>)
 8000402:	2201      	movs	r2, #1
 8000404:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000408:	4b1b      	ldr	r3, [pc, #108]	; (8000478 <MX_ADC1_Init+0xe8>)
 800040a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800040e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000410:	4b19      	ldr	r3, [pc, #100]	; (8000478 <MX_ADC1_Init+0xe8>)
 8000412:	2200      	movs	r2, #0
 8000414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000418:	4817      	ldr	r0, [pc, #92]	; (8000478 <MX_ADC1_Init+0xe8>)
 800041a:	f001 ff8f 	bl	800233c <HAL_ADC_Init>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000424:	f000 ff26 	bl	8001274 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000428:	2300      	movs	r3, #0
 800042a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800042c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000430:	4619      	mov	r1, r3
 8000432:	4811      	ldr	r0, [pc, #68]	; (8000478 <MX_ADC1_Init+0xe8>)
 8000434:	f002 fd18 	bl	8002e68 <HAL_ADCEx_MultiModeConfigChannel>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800043e:	f000 ff19 	bl	8001274 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000442:	4b0e      	ldr	r3, [pc, #56]	; (800047c <MX_ADC1_Init+0xec>)
 8000444:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000446:	2306      	movs	r3, #6
 8000448:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800044a:	2300      	movs	r3, #0
 800044c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800044e:	237f      	movs	r3, #127	; 0x7f
 8000450:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000452:	2304      	movs	r3, #4
 8000454:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000456:	2300      	movs	r3, #0
 8000458:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800045a:	1d3b      	adds	r3, r7, #4
 800045c:	4619      	mov	r1, r3
 800045e:	4806      	ldr	r0, [pc, #24]	; (8000478 <MX_ADC1_Init+0xe8>)
 8000460:	f002 f92c 	bl	80026bc <HAL_ADC_ConfigChannel>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800046a:	f000 ff03 	bl	8001274 <Error_Handler>
  }

}
 800046e:	bf00      	nop
 8000470:	3730      	adds	r7, #48	; 0x30
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	20000480 	.word	0x20000480
 800047c:	0c900008 	.word	0x0c900008

08000480 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b08a      	sub	sp, #40	; 0x28
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000488:	f107 0314 	add.w	r3, r7, #20
 800048c:	2200      	movs	r2, #0
 800048e:	601a      	str	r2, [r3, #0]
 8000490:	605a      	str	r2, [r3, #4]
 8000492:	609a      	str	r2, [r3, #8]
 8000494:	60da      	str	r2, [r3, #12]
 8000496:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80004a0:	d14f      	bne.n	8000542 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80004a2:	4b2a      	ldr	r3, [pc, #168]	; (800054c <HAL_ADC_MspInit+0xcc>)
 80004a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004a6:	4a29      	ldr	r2, [pc, #164]	; (800054c <HAL_ADC_MspInit+0xcc>)
 80004a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ae:	4b27      	ldr	r3, [pc, #156]	; (800054c <HAL_ADC_MspInit+0xcc>)
 80004b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004b6:	613b      	str	r3, [r7, #16]
 80004b8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ba:	4b24      	ldr	r3, [pc, #144]	; (800054c <HAL_ADC_MspInit+0xcc>)
 80004bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004be:	4a23      	ldr	r2, [pc, #140]	; (800054c <HAL_ADC_MspInit+0xcc>)
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004c6:	4b21      	ldr	r3, [pc, #132]	; (800054c <HAL_ADC_MspInit+0xcc>)
 80004c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	60fb      	str	r3, [r7, #12]
 80004d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80004d2:	2304      	movs	r3, #4
 80004d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004d6:	2303      	movs	r3, #3
 80004d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004da:	2300      	movs	r3, #0
 80004dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004de:	f107 0314 	add.w	r3, r7, #20
 80004e2:	4619      	mov	r1, r3
 80004e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e8:	f003 ffda 	bl	80044a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80004ec:	4b18      	ldr	r3, [pc, #96]	; (8000550 <HAL_ADC_MspInit+0xd0>)
 80004ee:	4a19      	ldr	r2, [pc, #100]	; (8000554 <HAL_ADC_MspInit+0xd4>)
 80004f0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80004f2:	4b17      	ldr	r3, [pc, #92]	; (8000550 <HAL_ADC_MspInit+0xd0>)
 80004f4:	2205      	movs	r2, #5
 80004f6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80004f8:	4b15      	ldr	r3, [pc, #84]	; (8000550 <HAL_ADC_MspInit+0xd0>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80004fe:	4b14      	ldr	r3, [pc, #80]	; (8000550 <HAL_ADC_MspInit+0xd0>)
 8000500:	2200      	movs	r2, #0
 8000502:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000504:	4b12      	ldr	r3, [pc, #72]	; (8000550 <HAL_ADC_MspInit+0xd0>)
 8000506:	2280      	movs	r2, #128	; 0x80
 8000508:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800050a:	4b11      	ldr	r3, [pc, #68]	; (8000550 <HAL_ADC_MspInit+0xd0>)
 800050c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000510:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000512:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <HAL_ADC_MspInit+0xd0>)
 8000514:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000518:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800051a:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <HAL_ADC_MspInit+0xd0>)
 800051c:	2220      	movs	r2, #32
 800051e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000520:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <HAL_ADC_MspInit+0xd0>)
 8000522:	2200      	movs	r2, #0
 8000524:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000526:	480a      	ldr	r0, [pc, #40]	; (8000550 <HAL_ADC_MspInit+0xd0>)
 8000528:	f003 fd48 	bl	8003fbc <HAL_DMA_Init>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8000532:	f000 fe9f 	bl	8001274 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4a05      	ldr	r2, [pc, #20]	; (8000550 <HAL_ADC_MspInit+0xd0>)
 800053a:	655a      	str	r2, [r3, #84]	; 0x54
 800053c:	4a04      	ldr	r2, [pc, #16]	; (8000550 <HAL_ADC_MspInit+0xd0>)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000542:	bf00      	nop
 8000544:	3728      	adds	r7, #40	; 0x28
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	40021000 	.word	0x40021000
 8000550:	200004ec 	.word	0x200004ec
 8000554:	40020008 	.word	0x40020008

08000558 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 800055c:	4b0f      	ldr	r3, [pc, #60]	; (800059c <MX_COMP1_Init+0x44>)
 800055e:	4a10      	ldr	r2, [pc, #64]	; (80005a0 <MX_COMP1_Init+0x48>)
 8000560:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000562:	4b0e      	ldr	r3, [pc, #56]	; (800059c <MX_COMP1_Init+0x44>)
 8000564:	2200      	movs	r2, #0
 8000566:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8000568:	4b0c      	ldr	r3, [pc, #48]	; (800059c <MX_COMP1_Init+0x44>)
 800056a:	4a0e      	ldr	r2, [pc, #56]	; (80005a4 <MX_COMP1_Init+0x4c>)
 800056c:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800056e:	4b0b      	ldr	r3, [pc, #44]	; (800059c <MX_COMP1_Init+0x44>)
 8000570:	2200      	movs	r2, #0
 8000572:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000574:	4b09      	ldr	r3, [pc, #36]	; (800059c <MX_COMP1_Init+0x44>)
 8000576:	2200      	movs	r2, #0
 8000578:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800057a:	4b08      	ldr	r3, [pc, #32]	; (800059c <MX_COMP1_Init+0x44>)
 800057c:	2200      	movs	r2, #0
 800057e:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <MX_COMP1_Init+0x44>)
 8000582:	2200      	movs	r2, #0
 8000584:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000586:	4805      	ldr	r0, [pc, #20]	; (800059c <MX_COMP1_Init+0x44>)
 8000588:	f002 fec2 	bl	8003310 <HAL_COMP_Init>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 8000592:	f000 fe6f 	bl	8001274 <Error_Handler>
  }

}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	2000054c 	.word	0x2000054c
 80005a0:	40010200 	.word	0x40010200
 80005a4:	00800030 	.word	0x00800030

080005a8 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b088      	sub	sp, #32
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b0:	f107 030c 	add.w	r3, r7, #12
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a0f      	ldr	r2, [pc, #60]	; (8000604 <HAL_COMP_MspInit+0x5c>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d118      	bne.n	80005fc <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <HAL_COMP_MspInit+0x60>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ce:	4a0e      	ldr	r2, [pc, #56]	; (8000608 <HAL_COMP_MspInit+0x60>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005d6:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <HAL_COMP_MspInit+0x60>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80005e2:	2302      	movs	r3, #2
 80005e4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005e6:	2303      	movs	r3, #3
 80005e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	4619      	mov	r1, r3
 80005f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f8:	f003 ff52 	bl	80044a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 80005fc:	bf00      	nop
 80005fe:	3720      	adds	r7, #32
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40010200 	.word	0x40010200
 8000608:	40021000 	.word	0x40021000

0800060c <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08c      	sub	sp, #48	; 0x30
 8000610:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000612:	463b      	mov	r3, r7
 8000614:	2230      	movs	r2, #48	; 0x30
 8000616:	2100      	movs	r1, #0
 8000618:	4618      	mov	r0, r3
 800061a:	f007 fdcd 	bl	80081b8 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 800061e:	4b1e      	ldr	r3, [pc, #120]	; (8000698 <MX_DAC1_Init+0x8c>)
 8000620:	4a1e      	ldr	r2, [pc, #120]	; (800069c <MX_DAC1_Init+0x90>)
 8000622:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000624:	481c      	ldr	r0, [pc, #112]	; (8000698 <MX_DAC1_Init+0x8c>)
 8000626:	f003 f916 	bl	8003856 <HAL_DAC_Init>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000630:	f000 fe20 	bl	8001274 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8000634:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000638:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800063a:	2300      	movs	r3, #0
 800063c:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800063e:	2300      	movs	r3, #0
 8000640:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000642:	2300      	movs	r3, #0
 8000644:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8000646:	2306      	movs	r3, #6
 8000648:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800064a:	2300      	movs	r3, #0
 800064c:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800064e:	2300      	movs	r3, #0
 8000650:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000652:	2301      	movs	r3, #1
 8000654:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000656:	2300      	movs	r3, #0
 8000658:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800065a:	463b      	mov	r3, r7
 800065c:	2200      	movs	r2, #0
 800065e:	4619      	mov	r1, r3
 8000660:	480d      	ldr	r0, [pc, #52]	; (8000698 <MX_DAC1_Init+0x8c>)
 8000662:	f003 fa75 	bl	8003b50 <HAL_DAC_ConfigChannel>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 800066c:	f000 fe02 	bl	8001274 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000670:	2300      	movs	r3, #0
 8000672:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000674:	2301      	movs	r3, #1
 8000676:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000678:	463b      	mov	r3, r7
 800067a:	2210      	movs	r2, #16
 800067c:	4619      	mov	r1, r3
 800067e:	4806      	ldr	r0, [pc, #24]	; (8000698 <MX_DAC1_Init+0x8c>)
 8000680:	f003 fa66 	bl	8003b50 <HAL_DAC_ConfigChannel>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 800068a:	f000 fdf3 	bl	8001274 <Error_Handler>
  }

}
 800068e:	bf00      	nop
 8000690:	3730      	adds	r7, #48	; 0x30
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000584 	.word	0x20000584
 800069c:	50000800 	.word	0x50000800

080006a0 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08c      	sub	sp, #48	; 0x30
 80006a4:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80006a6:	463b      	mov	r3, r7
 80006a8:	2230      	movs	r2, #48	; 0x30
 80006aa:	2100      	movs	r1, #0
 80006ac:	4618      	mov	r0, r3
 80006ae:	f007 fd83 	bl	80081b8 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 80006b2:	4b16      	ldr	r3, [pc, #88]	; (800070c <MX_DAC2_Init+0x6c>)
 80006b4:	4a16      	ldr	r2, [pc, #88]	; (8000710 <MX_DAC2_Init+0x70>)
 80006b6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80006b8:	4814      	ldr	r0, [pc, #80]	; (800070c <MX_DAC2_Init+0x6c>)
 80006ba:	f003 f8cc 	bl	8003856 <HAL_DAC_Init>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 80006c4:	f000 fdd6 	bl	8001274 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80006c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006cc:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80006ce:	2300      	movs	r3, #0
 80006d0:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80006d2:	2300      	movs	r3, #0
 80006d4:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80006da:	2306      	movs	r3, #6
 80006dc:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80006e2:	2300      	movs	r3, #0
 80006e4:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80006e6:	2301      	movs	r3, #1
 80006e8:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80006ee:	463b      	mov	r3, r7
 80006f0:	2200      	movs	r2, #0
 80006f2:	4619      	mov	r1, r3
 80006f4:	4805      	ldr	r0, [pc, #20]	; (800070c <MX_DAC2_Init+0x6c>)
 80006f6:	f003 fa2b 	bl	8003b50 <HAL_DAC_ConfigChannel>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 8000700:	f000 fdb8 	bl	8001274 <Error_Handler>
  }

}
 8000704:	bf00      	nop
 8000706:	3730      	adds	r7, #48	; 0x30
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000570 	.word	0x20000570
 8000710:	50000c00 	.word	0x50000c00

08000714 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08c      	sub	sp, #48	; 0x30
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071c:	f107 031c 	add.w	r3, r7, #28
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a56      	ldr	r2, [pc, #344]	; (800088c <HAL_DAC_MspInit+0x178>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d150      	bne.n	80007d8 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000736:	4b56      	ldr	r3, [pc, #344]	; (8000890 <HAL_DAC_MspInit+0x17c>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	4a55      	ldr	r2, [pc, #340]	; (8000890 <HAL_DAC_MspInit+0x17c>)
 800073c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000742:	4b53      	ldr	r3, [pc, #332]	; (8000890 <HAL_DAC_MspInit+0x17c>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800074a:	61bb      	str	r3, [r7, #24]
 800074c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	4b50      	ldr	r3, [pc, #320]	; (8000890 <HAL_DAC_MspInit+0x17c>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	4a4f      	ldr	r2, [pc, #316]	; (8000890 <HAL_DAC_MspInit+0x17c>)
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075a:	4b4d      	ldr	r3, [pc, #308]	; (8000890 <HAL_DAC_MspInit+0x17c>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	617b      	str	r3, [r7, #20]
 8000764:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000766:	2330      	movs	r3, #48	; 0x30
 8000768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800076a:	2303      	movs	r3, #3
 800076c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000772:	f107 031c 	add.w	r3, r7, #28
 8000776:	4619      	mov	r1, r3
 8000778:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800077c:	f003 fe90 	bl	80044a0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8000780:	4b44      	ldr	r3, [pc, #272]	; (8000894 <HAL_DAC_MspInit+0x180>)
 8000782:	4a45      	ldr	r2, [pc, #276]	; (8000898 <HAL_DAC_MspInit+0x184>)
 8000784:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8000786:	4b43      	ldr	r3, [pc, #268]	; (8000894 <HAL_DAC_MspInit+0x180>)
 8000788:	2206      	movs	r2, #6
 800078a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800078c:	4b41      	ldr	r3, [pc, #260]	; (8000894 <HAL_DAC_MspInit+0x180>)
 800078e:	2210      	movs	r2, #16
 8000790:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000792:	4b40      	ldr	r3, [pc, #256]	; (8000894 <HAL_DAC_MspInit+0x180>)
 8000794:	2200      	movs	r2, #0
 8000796:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000798:	4b3e      	ldr	r3, [pc, #248]	; (8000894 <HAL_DAC_MspInit+0x180>)
 800079a:	2280      	movs	r2, #128	; 0x80
 800079c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800079e:	4b3d      	ldr	r3, [pc, #244]	; (8000894 <HAL_DAC_MspInit+0x180>)
 80007a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007a4:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80007a6:	4b3b      	ldr	r3, [pc, #236]	; (8000894 <HAL_DAC_MspInit+0x180>)
 80007a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007ac:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80007ae:	4b39      	ldr	r3, [pc, #228]	; (8000894 <HAL_DAC_MspInit+0x180>)
 80007b0:	2220      	movs	r2, #32
 80007b2:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80007b4:	4b37      	ldr	r3, [pc, #220]	; (8000894 <HAL_DAC_MspInit+0x180>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80007ba:	4836      	ldr	r0, [pc, #216]	; (8000894 <HAL_DAC_MspInit+0x180>)
 80007bc:	f003 fbfe 	bl	8003fbc <HAL_DMA_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80007c6:	f000 fd55 	bl	8001274 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4a31      	ldr	r2, [pc, #196]	; (8000894 <HAL_DAC_MspInit+0x180>)
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	4a30      	ldr	r2, [pc, #192]	; (8000894 <HAL_DAC_MspInit+0x180>)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 80007d6:	e054      	b.n	8000882 <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a2f      	ldr	r2, [pc, #188]	; (800089c <HAL_DAC_MspInit+0x188>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d14f      	bne.n	8000882 <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 80007e2:	4b2b      	ldr	r3, [pc, #172]	; (8000890 <HAL_DAC_MspInit+0x17c>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e6:	4a2a      	ldr	r2, [pc, #168]	; (8000890 <HAL_DAC_MspInit+0x17c>)
 80007e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ee:	4b28      	ldr	r3, [pc, #160]	; (8000890 <HAL_DAC_MspInit+0x17c>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	4b25      	ldr	r3, [pc, #148]	; (8000890 <HAL_DAC_MspInit+0x17c>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	4a24      	ldr	r2, [pc, #144]	; (8000890 <HAL_DAC_MspInit+0x17c>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000806:	4b22      	ldr	r3, [pc, #136]	; (8000890 <HAL_DAC_MspInit+0x17c>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000812:	2340      	movs	r3, #64	; 0x40
 8000814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000816:	2303      	movs	r3, #3
 8000818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	4619      	mov	r1, r3
 8000824:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000828:	f003 fe3a 	bl	80044a0 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 800082c:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <HAL_DAC_MspInit+0x18c>)
 800082e:	4a1d      	ldr	r2, [pc, #116]	; (80008a4 <HAL_DAC_MspInit+0x190>)
 8000830:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8000832:	4b1b      	ldr	r3, [pc, #108]	; (80008a0 <HAL_DAC_MspInit+0x18c>)
 8000834:	2229      	movs	r2, #41	; 0x29
 8000836:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000838:	4b19      	ldr	r3, [pc, #100]	; (80008a0 <HAL_DAC_MspInit+0x18c>)
 800083a:	2210      	movs	r2, #16
 800083c:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800083e:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <HAL_DAC_MspInit+0x18c>)
 8000840:	2200      	movs	r2, #0
 8000842:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000844:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <HAL_DAC_MspInit+0x18c>)
 8000846:	2280      	movs	r2, #128	; 0x80
 8000848:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800084a:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <HAL_DAC_MspInit+0x18c>)
 800084c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000850:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000852:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <HAL_DAC_MspInit+0x18c>)
 8000854:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000858:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <HAL_DAC_MspInit+0x18c>)
 800085c:	2220      	movs	r2, #32
 800085e:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <HAL_DAC_MspInit+0x18c>)
 8000862:	2200      	movs	r2, #0
 8000864:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8000866:	480e      	ldr	r0, [pc, #56]	; (80008a0 <HAL_DAC_MspInit+0x18c>)
 8000868:	f003 fba8 	bl	8003fbc <HAL_DMA_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <HAL_DAC_MspInit+0x162>
      Error_Handler();
 8000872:	f000 fcff 	bl	8001274 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4a09      	ldr	r2, [pc, #36]	; (80008a0 <HAL_DAC_MspInit+0x18c>)
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	4a08      	ldr	r2, [pc, #32]	; (80008a0 <HAL_DAC_MspInit+0x18c>)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000882:	bf00      	nop
 8000884:	3730      	adds	r7, #48	; 0x30
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	50000800 	.word	0x50000800
 8000890:	40021000 	.word	0x40021000
 8000894:	20000598 	.word	0x20000598
 8000898:	4002001c 	.word	0x4002001c
 800089c:	50000c00 	.word	0x50000c00
 80008a0:	200005f8 	.word	0x200005f8
 80008a4:	40020030 	.word	0x40020030

080008a8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80008ae:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <MX_DMA_Init+0x70>)
 80008b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008b2:	4a19      	ldr	r2, [pc, #100]	; (8000918 <MX_DMA_Init+0x70>)
 80008b4:	f043 0304 	orr.w	r3, r3, #4
 80008b8:	6493      	str	r3, [r2, #72]	; 0x48
 80008ba:	4b17      	ldr	r3, [pc, #92]	; (8000918 <MX_DMA_Init+0x70>)
 80008bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008be:	f003 0304 	and.w	r3, r3, #4
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008c6:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_DMA_Init+0x70>)
 80008c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008ca:	4a13      	ldr	r2, [pc, #76]	; (8000918 <MX_DMA_Init+0x70>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	6493      	str	r3, [r2, #72]	; 0x48
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_DMA_Init+0x70>)
 80008d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	2101      	movs	r1, #1
 80008e2:	200b      	movs	r0, #11
 80008e4:	f002 ff83 	bl	80037ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008e8:	200b      	movs	r0, #11
 80008ea:	f002 ff9a 	bl	8003822 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2100      	movs	r1, #0
 80008f2:	200c      	movs	r0, #12
 80008f4:	f002 ff7b 	bl	80037ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80008f8:	200c      	movs	r0, #12
 80008fa:	f002 ff92 	bl	8003822 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	2100      	movs	r1, #0
 8000902:	200d      	movs	r0, #13
 8000904:	f002 ff73 	bl	80037ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000908:	200d      	movs	r0, #13
 800090a:	f002 ff8a 	bl	8003822 <HAL_NVIC_EnableIRQ>

}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40021000 	.word	0x40021000

0800091c <update_dc_bias_sweep>:
uint16_t dcbias = 0;
int dcbias_dir = 1;
int dcinverted = 0;

void update_dc_bias_sweep()
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
	  // up=1, down=0
	  (dcbias_dir) ? (dcbias++) : (dcbias--);
 8000920:	4b20      	ldr	r3, [pc, #128]	; (80009a4 <update_dc_bias_sweep+0x88>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d006      	beq.n	8000936 <update_dc_bias_sweep+0x1a>
 8000928:	4b1f      	ldr	r3, [pc, #124]	; (80009a8 <update_dc_bias_sweep+0x8c>)
 800092a:	881b      	ldrh	r3, [r3, #0]
 800092c:	3301      	adds	r3, #1
 800092e:	b29a      	uxth	r2, r3
 8000930:	4b1d      	ldr	r3, [pc, #116]	; (80009a8 <update_dc_bias_sweep+0x8c>)
 8000932:	801a      	strh	r2, [r3, #0]
 8000934:	e005      	b.n	8000942 <update_dc_bias_sweep+0x26>
 8000936:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <update_dc_bias_sweep+0x8c>)
 8000938:	881b      	ldrh	r3, [r3, #0]
 800093a:	3b01      	subs	r3, #1
 800093c:	b29a      	uxth	r2, r3
 800093e:	4b1a      	ldr	r3, [pc, #104]	; (80009a8 <update_dc_bias_sweep+0x8c>)
 8000940:	801a      	strh	r2, [r3, #0]

	  // invert the bias signal at zero crossing
	  if(dcbias < 1) {
 8000942:	4b19      	ldr	r3, [pc, #100]	; (80009a8 <update_dc_bias_sweep+0x8c>)
 8000944:	881b      	ldrh	r3, [r3, #0]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d10a      	bne.n	8000960 <update_dc_bias_sweep+0x44>
		(dcinverted) ? (dcinverted=0) : (dcinverted=1);
 800094a:	4b18      	ldr	r3, [pc, #96]	; (80009ac <update_dc_bias_sweep+0x90>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d003      	beq.n	800095a <update_dc_bias_sweep+0x3e>
 8000952:	4b16      	ldr	r3, [pc, #88]	; (80009ac <update_dc_bias_sweep+0x90>)
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	e002      	b.n	8000960 <update_dc_bias_sweep+0x44>
 800095a:	4b14      	ldr	r3, [pc, #80]	; (80009ac <update_dc_bias_sweep+0x90>)
 800095c:	2201      	movs	r2, #1
 800095e:	601a      	str	r2, [r3, #0]
	  }

	  // change direction if dac limits are reached
	  if(dcbias < 1) 	{ dcbias_dir = 1; }
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <update_dc_bias_sweep+0x8c>)
 8000962:	881b      	ldrh	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d102      	bne.n	800096e <update_dc_bias_sweep+0x52>
 8000968:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <update_dc_bias_sweep+0x88>)
 800096a:	2201      	movs	r2, #1
 800096c:	601a      	str	r2, [r3, #0]
	  if(dcbias > 4095) { dcbias_dir = 0; }
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <update_dc_bias_sweep+0x8c>)
 8000970:	881b      	ldrh	r3, [r3, #0]
 8000972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000976:	d302      	bcc.n	800097e <update_dc_bias_sweep+0x62>
 8000978:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <update_dc_bias_sweep+0x88>)
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]


	  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, dcinverted);
 800097e:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <update_dc_bias_sweep+0x90>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	b2db      	uxtb	r3, r3
 8000984:	461a      	mov	r2, r3
 8000986:	2108      	movs	r1, #8
 8000988:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800098c:	f003 ff22 	bl	80047d4 <HAL_GPIO_WritePin>
	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, dcbias);
 8000990:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <update_dc_bias_sweep+0x8c>)
 8000992:	881b      	ldrh	r3, [r3, #0]
 8000994:	2200      	movs	r2, #0
 8000996:	2110      	movs	r1, #16
 8000998:	4805      	ldr	r0, [pc, #20]	; (80009b0 <update_dc_bias_sweep+0x94>)
 800099a:	f003 f893 	bl	8003ac4 <HAL_DAC_SetValue>
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000008 	.word	0x20000008
 80009a8:	2000045c 	.word	0x2000045c
 80009ac:	20000460 	.word	0x20000460
 80009b0:	20000584 	.word	0x20000584

080009b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b8:	4b04      	ldr	r3, [pc, #16]	; (80009cc <__NVIC_GetPriorityGrouping+0x18>)
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	0a1b      	lsrs	r3, r3, #8
 80009be:	f003 0307 	and.w	r3, r3, #7
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	db0b      	blt.n	80009fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	f003 021f 	and.w	r2, r3, #31
 80009e8:	4907      	ldr	r1, [pc, #28]	; (8000a08 <__NVIC_EnableIRQ+0x38>)
 80009ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ee:	095b      	lsrs	r3, r3, #5
 80009f0:	2001      	movs	r0, #1
 80009f2:	fa00 f202 	lsl.w	r2, r0, r2
 80009f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000e100 	.word	0xe000e100

08000a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	6039      	str	r1, [r7, #0]
 8000a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	db0a      	blt.n	8000a36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	490c      	ldr	r1, [pc, #48]	; (8000a58 <__NVIC_SetPriority+0x4c>)
 8000a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2a:	0112      	lsls	r2, r2, #4
 8000a2c:	b2d2      	uxtb	r2, r2
 8000a2e:	440b      	add	r3, r1
 8000a30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a34:	e00a      	b.n	8000a4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	4908      	ldr	r1, [pc, #32]	; (8000a5c <__NVIC_SetPriority+0x50>)
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
 8000a3e:	f003 030f 	and.w	r3, r3, #15
 8000a42:	3b04      	subs	r3, #4
 8000a44:	0112      	lsls	r2, r2, #4
 8000a46:	b2d2      	uxtb	r2, r2
 8000a48:	440b      	add	r3, r1
 8000a4a:	761a      	strb	r2, [r3, #24]
}
 8000a4c:	bf00      	nop
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	e000e100 	.word	0xe000e100
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b089      	sub	sp, #36	; 0x24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60f8      	str	r0, [r7, #12]
 8000a68:	60b9      	str	r1, [r7, #8]
 8000a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	f003 0307 	and.w	r3, r3, #7
 8000a72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	f1c3 0307 	rsb	r3, r3, #7
 8000a7a:	2b04      	cmp	r3, #4
 8000a7c:	bf28      	it	cs
 8000a7e:	2304      	movcs	r3, #4
 8000a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	3304      	adds	r3, #4
 8000a86:	2b06      	cmp	r3, #6
 8000a88:	d902      	bls.n	8000a90 <NVIC_EncodePriority+0x30>
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	3b03      	subs	r3, #3
 8000a8e:	e000      	b.n	8000a92 <NVIC_EncodePriority+0x32>
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	43da      	mvns	r2, r3
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	401a      	ands	r2, r3
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aa8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab2:	43d9      	mvns	r1, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab8:	4313      	orrs	r3, r2
         );
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3724      	adds	r7, #36	; 0x24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
	...

08000ac8 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 8000ad2:	4a14      	ldr	r2, [pc, #80]	; (8000b24 <LL_SYSCFG_SetEXTISource+0x5c>)
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	f003 0303 	and.w	r3, r3, #3
 8000ada:	3302      	adds	r3, #2
 8000adc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	0c1b      	lsrs	r3, r3, #16
 8000ae4:	43db      	mvns	r3, r3
 8000ae6:	ea02 0103 	and.w	r1, r2, r3
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	0c1b      	lsrs	r3, r3, #16
 8000aee:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	fa93 f3a3 	rbit	r3, r3
 8000af6:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	fab3 f383 	clz	r3, r3
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	f003 031f 	and.w	r3, r3, #31
 8000b04:	687a      	ldr	r2, [r7, #4]
 8000b06:	409a      	lsls	r2, r3
 8000b08:	4806      	ldr	r0, [pc, #24]	; (8000b24 <LL_SYSCFG_SetEXTISource+0x5c>)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	f003 0303 	and.w	r3, r3, #3
 8000b10:	430a      	orrs	r2, r1
 8000b12:	3302      	adds	r3, #2
 8000b14:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000b18:	bf00      	nop
 8000b1a:	3714      	adds	r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	40010000 	.word	0x40010000

08000b28 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b089      	sub	sp, #36	; 0x24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	fa93 f3a3 	rbit	r3, r3
 8000b42:	613b      	str	r3, [r7, #16]
  return result;
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	fab3 f383 	clz	r3, r3
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	2103      	movs	r1, #3
 8000b50:	fa01 f303 	lsl.w	r3, r1, r3
 8000b54:	43db      	mvns	r3, r3
 8000b56:	401a      	ands	r2, r3
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	fa93 f3a3 	rbit	r3, r3
 8000b62:	61bb      	str	r3, [r7, #24]
  return result;
 8000b64:	69bb      	ldr	r3, [r7, #24]
 8000b66:	fab3 f383 	clz	r3, r3
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	6879      	ldr	r1, [r7, #4]
 8000b70:	fa01 f303 	lsl.w	r3, r1, r3
 8000b74:	431a      	orrs	r2, r3
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	601a      	str	r2, [r3, #0]
}
 8000b7a:	bf00      	nop
 8000b7c:	3724      	adds	r7, #36	; 0x24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000b86:	b480      	push	{r7}
 8000b88:	b089      	sub	sp, #36	; 0x24
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	60f8      	str	r0, [r7, #12]
 8000b8e:	60b9      	str	r1, [r7, #8]
 8000b90:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	68da      	ldr	r2, [r3, #12]
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	fa93 f3a3 	rbit	r3, r3
 8000ba0:	613b      	str	r3, [r7, #16]
  return result;
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	fab3 f383 	clz	r3, r3
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	2103      	movs	r1, #3
 8000bae:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb2:	43db      	mvns	r3, r3
 8000bb4:	401a      	ands	r2, r3
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	fa93 f3a3 	rbit	r3, r3
 8000bc0:	61bb      	str	r3, [r7, #24]
  return result;
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	fab3 f383 	clz	r3, r3
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	6879      	ldr	r1, [r7, #4]
 8000bce:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd2:	431a      	orrs	r2, r3
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	60da      	str	r2, [r3, #12]
}
 8000bd8:	bf00      	nop
 8000bda:	3724      	adds	r7, #36	; 0x24
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	683a      	ldr	r2, [r7, #0]
 8000bf2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000c0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c0c:	4907      	ldr	r1, [pc, #28]	; (8000c2c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c14:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000c16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
}
 8000c20:	bf00      	nop
 8000c22:	3714      	adds	r7, #20
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	40021000 	.word	0x40021000

08000c30 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	; 0x28
 8000c34:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000c36:	f107 031c 	add.w	r3, r7, #28
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
 8000c50:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000c52:	2004      	movs	r0, #4
 8000c54:	f7ff ffd4 	bl	8000c00 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8000c58:	2020      	movs	r0, #32
 8000c5a:	f7ff ffd1 	bl	8000c00 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000c5e:	2001      	movs	r0, #1
 8000c60:	f7ff ffce 	bl	8000c00 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000c64:	2002      	movs	r0, #2
 8000c66:	f7ff ffcb 	bl	8000c00 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 8000c6a:	2108      	movs	r1, #8
 8000c6c:	48d3      	ldr	r0, [pc, #844]	; (8000fbc <MX_GPIO_Init+0x38c>)
 8000c6e:	f7ff ffb9 	bl	8000be4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 8000c72:	2108      	movs	r1, #8
 8000c74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c78:	f7ff ffb4 	bl	8000be4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 8000c7c:	2110      	movs	r1, #16
 8000c7e:	48cf      	ldr	r0, [pc, #828]	; (8000fbc <MX_GPIO_Init+0x38c>)
 8000c80:	f7ff ffb0 	bl	8000be4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 8000c84:	2120      	movs	r1, #32
 8000c86:	48cd      	ldr	r0, [pc, #820]	; (8000fbc <MX_GPIO_Init+0x38c>)
 8000c88:	f7ff ffac 	bl	8000be4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	48cc      	ldr	r0, [pc, #816]	; (8000fc0 <MX_GPIO_Init+0x390>)
 8000c90:	f7ff ffa8 	bl	8000be4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 8000c94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c98:	48c8      	ldr	r0, [pc, #800]	; (8000fbc <MX_GPIO_Init+0x38c>)
 8000c9a:	f7ff ffa3 	bl	8000be4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 8000c9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ca2:	48c6      	ldr	r0, [pc, #792]	; (8000fbc <MX_GPIO_Init+0x38c>)
 8000ca4:	f7ff ff9e 	bl	8000be4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 8000ca8:	2140      	movs	r1, #64	; 0x40
 8000caa:	48c5      	ldr	r0, [pc, #788]	; (8000fc0 <MX_GPIO_Init+0x390>)
 8000cac:	f7ff ff9a 	bl	8000be4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 8000cb0:	2180      	movs	r1, #128	; 0x80
 8000cb2:	48c3      	ldr	r0, [pc, #780]	; (8000fc0 <MX_GPIO_Init+0x390>)
 8000cb4:	f7ff ff96 	bl	8000be4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 8000cb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cbc:	48c0      	ldr	r0, [pc, #768]	; (8000fc0 <MX_GPIO_Init+0x390>)
 8000cbe:	f7ff ff91 	bl	8000be4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 8000cc2:	49c0      	ldr	r1, [pc, #768]	; (8000fc4 <MX_GPIO_Init+0x394>)
 8000cc4:	2002      	movs	r0, #2
 8000cc6:	f7ff feff 	bl	8000ac8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 8000cca:	49bf      	ldr	r1, [pc, #764]	; (8000fc8 <MX_GPIO_Init+0x398>)
 8000ccc:	2002      	movs	r0, #2
 8000cce:	f7ff fefb 	bl	8000ac8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 8000cd2:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8000cd6:	2005      	movs	r0, #5
 8000cd8:	f7ff fef6 	bl	8000ac8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 8000cdc:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8000ce0:	2005      	movs	r0, #5
 8000ce2:	f7ff fef1 	bl	8000ac8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 8000ce6:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8000cea:	2002      	movs	r0, #2
 8000cec:	f7ff feec 	bl	8000ac8 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8000cf0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cf4:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000d02:	2302      	movs	r3, #2
 8000d04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000d08:	f107 031c 	add.w	r3, r7, #28
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f006 f989 	bl	8007024 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8000d12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d16:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000d24:	2302      	movs	r3, #2
 8000d26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000d2a:	f107 031c 	add.w	r3, r7, #28
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f006 f978 	bl	8007024 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8000d34:	2301      	movs	r3, #1
 8000d36:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000d44:	2302      	movs	r3, #2
 8000d46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000d4a:	f107 031c 	add.w	r3, r7, #28
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f006 f968 	bl	8007024 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8000d54:	2302      	movs	r3, #2
 8000d56:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000d64:	2302      	movs	r3, #2
 8000d66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000d6a:	f107 031c 	add.w	r3, r7, #28
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f006 f958 	bl	8007024 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8000d74:	2304      	movs	r3, #4
 8000d76:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000d84:	2302      	movs	r3, #2
 8000d86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000d8a:	f107 031c 	add.w	r3, r7, #28
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f006 f948 	bl	8007024 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 8000d94:	2201      	movs	r2, #1
 8000d96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d9a:	4888      	ldr	r0, [pc, #544]	; (8000fbc <MX_GPIO_Init+0x38c>)
 8000d9c:	f7ff fef3 	bl	8000b86 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 8000da0:	2201      	movs	r2, #1
 8000da2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000da6:	4885      	ldr	r0, [pc, #532]	; (8000fbc <MX_GPIO_Init+0x38c>)
 8000da8:	f7ff feed 	bl	8000b86 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 8000dac:	2201      	movs	r2, #1
 8000dae:	2101      	movs	r1, #1
 8000db0:	4886      	ldr	r0, [pc, #536]	; (8000fcc <MX_GPIO_Init+0x39c>)
 8000db2:	f7ff fee8 	bl	8000b86 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 8000db6:	2201      	movs	r2, #1
 8000db8:	2102      	movs	r1, #2
 8000dba:	4884      	ldr	r0, [pc, #528]	; (8000fcc <MX_GPIO_Init+0x39c>)
 8000dbc:	f7ff fee3 	bl	8000b86 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	2104      	movs	r1, #4
 8000dc4:	487d      	ldr	r0, [pc, #500]	; (8000fbc <MX_GPIO_Init+0x38c>)
 8000dc6:	f7ff fede 	bl	8000b86 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dd0:	487a      	ldr	r0, [pc, #488]	; (8000fbc <MX_GPIO_Init+0x38c>)
 8000dd2:	f7ff fea9 	bl	8000b28 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ddc:	4877      	ldr	r0, [pc, #476]	; (8000fbc <MX_GPIO_Init+0x38c>)
 8000dde:	f7ff fea3 	bl	8000b28 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2101      	movs	r1, #1
 8000de6:	4879      	ldr	r0, [pc, #484]	; (8000fcc <MX_GPIO_Init+0x39c>)
 8000de8:	f7ff fe9e 	bl	8000b28 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2102      	movs	r1, #2
 8000df0:	4876      	ldr	r0, [pc, #472]	; (8000fcc <MX_GPIO_Init+0x39c>)
 8000df2:	f7ff fe99 	bl	8000b28 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2104      	movs	r1, #4
 8000dfa:	4870      	ldr	r0, [pc, #448]	; (8000fbc <MX_GPIO_Init+0x38c>)
 8000dfc:	f7ff fe94 	bl	8000b28 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8000e00:	2308      	movs	r3, #8
 8000e02:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e04:	2301      	movs	r3, #1
 8000e06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000e10:	2302      	movs	r3, #2
 8000e12:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	4619      	mov	r1, r3
 8000e18:	4868      	ldr	r0, [pc, #416]	; (8000fbc <MX_GPIO_Init+0x38c>)
 8000e1a:	f006 faf6 	bl	800740a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 8000e1e:	2308      	movs	r3, #8
 8000e20:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e22:	2301      	movs	r3, #1
 8000e24:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	4619      	mov	r1, r3
 8000e36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e3a:	f006 fae6 	bl	800740a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 8000e3e:	2310      	movs	r3, #16
 8000e40:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e42:	2301      	movs	r3, #1
 8000e44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	4619      	mov	r1, r3
 8000e56:	4859      	ldr	r0, [pc, #356]	; (8000fbc <MX_GPIO_Init+0x38c>)
 8000e58:	f006 fad7 	bl	800740a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 8000e5c:	2320      	movs	r3, #32
 8000e5e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e60:	2301      	movs	r3, #1
 8000e62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e64:	2300      	movs	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	4619      	mov	r1, r3
 8000e74:	4851      	ldr	r0, [pc, #324]	; (8000fbc <MX_GPIO_Init+0x38c>)
 8000e76:	f006 fac8 	bl	800740a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	4619      	mov	r1, r3
 8000e92:	484b      	ldr	r0, [pc, #300]	; (8000fc0 <MX_GPIO_Init+0x390>)
 8000e94:	f006 fab9 	bl	800740a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8000e98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e9c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4842      	ldr	r0, [pc, #264]	; (8000fbc <MX_GPIO_Init+0x38c>)
 8000eb4:	f006 faa9 	bl	800740a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 8000eb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ebc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	483a      	ldr	r0, [pc, #232]	; (8000fbc <MX_GPIO_Init+0x38c>)
 8000ed4:	f006 fa99 	bl	800740a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 8000ed8:	2340      	movs	r3, #64	; 0x40
 8000eda:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000edc:	2301      	movs	r3, #1
 8000ede:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4833      	ldr	r0, [pc, #204]	; (8000fc0 <MX_GPIO_Init+0x390>)
 8000ef2:	f006 fa8a 	bl	800740a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 8000ef6:	2380      	movs	r3, #128	; 0x80
 8000ef8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000efa:	2301      	movs	r3, #1
 8000efc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000efe:	2303      	movs	r3, #3
 8000f00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	482c      	ldr	r0, [pc, #176]	; (8000fc0 <MX_GPIO_Init+0x390>)
 8000f10:	f006 fa7b 	bl	800740a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 8000f14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f18:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4824      	ldr	r0, [pc, #144]	; (8000fc0 <MX_GPIO_Init+0x390>)
 8000f30:	f006 fa6b 	bl	800740a <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000f34:	f7ff fd3e 	bl	80009b4 <__NVIC_GetPriorityGrouping>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fd8e 	bl	8000a60 <NVIC_EncodePriority>
 8000f44:	4603      	mov	r3, r0
 8000f46:	4619      	mov	r1, r3
 8000f48:	2006      	movs	r0, #6
 8000f4a:	f7ff fd5f 	bl	8000a0c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8000f4e:	2006      	movs	r0, #6
 8000f50:	f7ff fd3e 	bl	80009d0 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000f54:	f7ff fd2e 	bl	80009b4 <__NVIC_GetPriorityGrouping>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff fd7e 	bl	8000a60 <NVIC_EncodePriority>
 8000f64:	4603      	mov	r3, r0
 8000f66:	4619      	mov	r1, r3
 8000f68:	2007      	movs	r0, #7
 8000f6a:	f7ff fd4f 	bl	8000a0c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 8000f6e:	2007      	movs	r0, #7
 8000f70:	f7ff fd2e 	bl	80009d0 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000f74:	f7ff fd1e 	bl	80009b4 <__NVIC_GetPriorityGrouping>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff fd6e 	bl	8000a60 <NVIC_EncodePriority>
 8000f84:	4603      	mov	r3, r0
 8000f86:	4619      	mov	r1, r3
 8000f88:	2008      	movs	r0, #8
 8000f8a:	f7ff fd3f 	bl	8000a0c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 8000f8e:	2008      	movs	r0, #8
 8000f90:	f7ff fd1e 	bl	80009d0 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000f94:	f7ff fd0e 	bl	80009b4 <__NVIC_GetPriorityGrouping>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff fd5e 	bl	8000a60 <NVIC_EncodePriority>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	2028      	movs	r0, #40	; 0x28
 8000faa:	f7ff fd2f 	bl	8000a0c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fae:	2028      	movs	r0, #40	; 0x28
 8000fb0:	f7ff fd0e 	bl	80009d0 <__NVIC_EnableIRQ>

}
 8000fb4:	bf00      	nop
 8000fb6:	3728      	adds	r7, #40	; 0x28
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	e009      	b.n	8000fd0 <MX_GPIO_Init+0x3a0>
 8000fbc:	48000800 	.word	0x48000800
 8000fc0:	48000400 	.word	0x48000400
 8000fc4:	0f000003 	.word	0x0f000003
 8000fc8:	f0000003 	.word	0xf0000003
 8000fcc:	48001400 	.word	0x48001400
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop

08000fd4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fdc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fe0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000fe4:	f003 0301 	and.w	r3, r3, #1
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d013      	beq.n	8001014 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000fec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ff0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000ff4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d00b      	beq.n	8001014 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ffc:	e000      	b.n	8001000 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000ffe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001000:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d0f9      	beq.n	8000ffe <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800100a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	b2d2      	uxtb	r2, r2
 8001012:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001014:	687b      	ldr	r3, [r7, #4]
}
 8001016:	4618      	mov	r0, r3
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b086      	sub	sp, #24
 8001026:	af00      	add	r7, sp, #0
 8001028:	60f8      	str	r0, [r7, #12]
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
 8001036:	e009      	b.n	800104c <_write+0x2a>
    ITM_SendChar((*ptr++));
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	1c5a      	adds	r2, r3, #1
 800103c:	60ba      	str	r2, [r7, #8]
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ffc7 	bl	8000fd4 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	3301      	adds	r3, #1
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	697a      	ldr	r2, [r7, #20]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	429a      	cmp	r2, r3
 8001052:	dbf1      	blt.n	8001038 <_write+0x16>
  return len;
 8001054:	687b      	ldr	r3, [r7, #4]
}
 8001056:	4618      	mov	r0, r3
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001066:	f000 ff14 	bl	8001e92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800106a:	f000 f895 	bl	8001198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800106e:	f7ff fddf 	bl	8000c30 <MX_GPIO_Init>
  MX_DMA_Init();
 8001072:	f7ff fc19 	bl	80008a8 <MX_DMA_Init>
  MX_DAC1_Init();
 8001076:	f7ff fac9 	bl	800060c <MX_DAC1_Init>
  MX_DAC2_Init();
 800107a:	f7ff fb11 	bl	80006a0 <MX_DAC2_Init>
  MX_ADC1_Init();
 800107e:	f7ff f987 	bl	8000390 <MX_ADC1_Init>
  MX_COMP1_Init();
 8001082:	f7ff fa69 	bl	8000558 <MX_COMP1_Init>
  MX_TIM2_Init();
 8001086:	f000 fc5f 	bl	8001948 <MX_TIM2_Init>
  MX_TIM17_Init();
 800108a:	f000 fda7 	bl	8001bdc <MX_TIM17_Init>
  MX_SPI3_Init();
 800108e:	f000 f92f 	bl	80012f0 <MX_SPI3_Init>
  MX_RNG_Init();
 8001092:	f000 f91f 	bl	80012d4 <MX_RNG_Init>
  MX_TIM1_Init();
 8001096:	f000 fbe7 	bl	8001868 <MX_TIM1_Init>
  MX_TIM8_Init();
 800109a:	f000 fcbf 	bl	8001a1c <MX_TIM8_Init>
  MX_TIM16_Init();
 800109e:	f000 fd77 	bl	8001b90 <MX_TIM16_Init>
  MX_TIM15_Init();
 80010a2:	f000 fd23 	bl	8001aec <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  // main signal function output (external)
  HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80010a6:	2300      	movs	r3, #0
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2378      	movs	r3, #120	; 0x78
 80010ac:	4a2f      	ldr	r2, [pc, #188]	; (800116c <main+0x10c>)
 80010ae:	2100      	movs	r1, #0
 80010b0:	482f      	ldr	r0, [pc, #188]	; (8001170 <main+0x110>)
 80010b2:	f002 fc45 	bl	8003940 <HAL_DAC_Start_DMA>
  //TIM8->ARR = sin1_max_arr;

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 80010b6:	2110      	movs	r1, #16
 80010b8:	482d      	ldr	r0, [pc, #180]	; (8001170 <main+0x110>)
 80010ba:	f002 fbee 	bl	800389a <HAL_DAC_Start>
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
  HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, triangle_data_table, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 80010be:	2300      	movs	r3, #0
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	2378      	movs	r3, #120	; 0x78
 80010c4:	4a2b      	ldr	r2, [pc, #172]	; (8001174 <main+0x114>)
 80010c6:	2100      	movs	r1, #0
 80010c8:	482b      	ldr	r0, [pc, #172]	; (8001178 <main+0x118>)
 80010ca:	f002 fc39 	bl	8003940 <HAL_DAC_Start_DMA>

  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);
#ifndef DISABLE_ALL_TIMERS
  // single clock to run all DAC channels. TODO add independent clocks
  HAL_TIM_Base_Start(&htim8);
 80010ce:	482b      	ldr	r0, [pc, #172]	; (800117c <main+0x11c>)
 80010d0:	f004 fefc 	bl	8005ecc <HAL_TIM_Base_Start>
#endif //DISABLE_ALL_TIMERS

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 80010d4:	2201      	movs	r2, #1
 80010d6:	2108      	movs	r1, #8
 80010d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010dc:	f003 fb7a 	bl	80047d4 <HAL_GPIO_WritePin>

  // PGA gain
  HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80010e0:	2201      	movs	r2, #1
 80010e2:	2101      	movs	r1, #1
 80010e4:	4826      	ldr	r0, [pc, #152]	; (8001180 <main+0x120>)
 80010e6:	f003 fb75 	bl	80047d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80010ea:	2201      	movs	r2, #1
 80010ec:	2120      	movs	r1, #32
 80010ee:	4825      	ldr	r0, [pc, #148]	; (8001184 <main+0x124>)
 80010f0:	f003 fb70 	bl	80047d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80010f4:	2201      	movs	r2, #1
 80010f6:	2110      	movs	r1, #16
 80010f8:	4822      	ldr	r0, [pc, #136]	; (8001184 <main+0x124>)
 80010fa:	f003 fb6b 	bl	80047d4 <HAL_GPIO_WritePin>

#ifndef DISABLE_ALL_TIMERS
  // start test routine (update_dc_bias_sweep())
  HAL_TIM_Base_Start_IT(&htim17);
 80010fe:	4822      	ldr	r0, [pc, #136]	; (8001188 <main+0x128>)
 8001100:	f004 ff12 	bl	8005f28 <HAL_TIM_Base_Start_IT>
#endif	//DISABLE_ALL_TIMERS


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 8001104:	2200      	movs	r2, #0
 8001106:	f44f 7180 	mov.w	r1, #256	; 0x100
 800110a:	481e      	ldr	r0, [pc, #120]	; (8001184 <main+0x124>)
 800110c:	f003 fb62 	bl	80047d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 8001110:	2200      	movs	r2, #0
 8001112:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001116:	481b      	ldr	r0, [pc, #108]	; (8001184 <main+0x124>)
 8001118:	f003 fb5c 	bl	80047d4 <HAL_GPIO_WritePin>

#ifdef TIM_TRIGGER_MODE
  // input capture on in TIM2 slave-mode TF1FP1

  // set HW switch to direct ext. trigger input to TIM pin
  HAL_GPIO_WritePin(TRIGMODE_GPIO_Port, TRIGMODE_Pin, GPIO_PIN_SET);
 800111c:	2201      	movs	r2, #1
 800111e:	2108      	movs	r1, #8
 8001120:	4818      	ldr	r0, [pc, #96]	; (8001184 <main+0x124>)
 8001122:	f003 fb57 	bl	80047d4 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);	// TS5A3357 Pin6
  //HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); // TS5A3357 Pin5

  // clear slave mode select reg
  TIM2->SMCR &= ~(TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2);
 8001126:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001130:	f023 0307 	bic.w	r3, r3, #7
 8001134:	6093      	str	r3, [r2, #8]

  // slave mode
  //TIM2->SMCR |= TIM_SMCR_SMS_2;						// SLAVE MODE: RESET
  TIM2->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_2;	// SLAVE MODE: GATED
 8001136:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001140:	f043 0305 	orr.w	r3, r3, #5
 8001144:	6093      	str	r3, [r2, #8]
  //TIM2->SMCR |= TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;	// SLAVE MODE: TRIGGER

#ifndef DISABLE_ALL_TIMERS
  HAL_TIM_Base_Start_IT(&htim2);
 8001146:	4811      	ldr	r0, [pc, #68]	; (800118c <main+0x12c>)
 8001148:	f004 feee 	bl	8005f28 <HAL_TIM_Base_Start_IT>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);
 800114c:	4810      	ldr	r0, [pc, #64]	; (8001190 <main+0x130>)
 800114e:	f004 febd 	bl	8005ecc <HAL_TIM_Base_Start>
  //HAL_TIM_Base_Start_IT(&htim16);
#endif	//DISABLE_ALL_TIMERS

  // TFT lib enable
  ILI9341_Init();
 8001152:	f006 fc51 	bl	80079f8 <ILI9341_Init>
/*	ILI9341_Fill_Screen(WHITE);

	ILI9341_Draw_Text("Initialising", 10, 10, BLACK, 1, WHITE);
	HAL_Delay(2000);
*/
	ILI9341_Fill_Screen(WHITE);
 8001156:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800115a:	f006 fdf9 	bl	8007d50 <ILI9341_Fill_Screen>
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 800115e:	2003      	movs	r0, #3
 8001160:	f006 fbec 	bl	800793c <ILI9341_Set_Rotation>
	HAL_TIM_Base_Start_IT(&htim15);
 8001164:	480b      	ldr	r0, [pc, #44]	; (8001194 <main+0x134>)
 8001166:	f004 fedf 	bl	8005f28 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800116a:	e7fe      	b.n	800116a <main+0x10a>
 800116c:	2000000c 	.word	0x2000000c
 8001170:	20000584 	.word	0x20000584
 8001174:	200001ec 	.word	0x200001ec
 8001178:	20000570 	.word	0x20000570
 800117c:	200006bc 	.word	0x200006bc
 8001180:	48000400 	.word	0x48000400
 8001184:	48000800 	.word	0x48000800
 8001188:	20000754 	.word	0x20000754
 800118c:	200007ec 	.word	0x200007ec
 8001190:	200007a0 	.word	0x200007a0
 8001194:	20000708 	.word	0x20000708

08001198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b0a8      	sub	sp, #160	; 0xa0
 800119c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80011a2:	2238      	movs	r2, #56	; 0x38
 80011a4:	2100      	movs	r1, #0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f007 f806 	bl	80081b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011bc:	463b      	mov	r3, r7
 80011be:	2254      	movs	r2, #84	; 0x54
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f006 fff8 	bl	80081b8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80011c8:	2000      	movs	r0, #0
 80011ca:	f003 fb1b 	bl	8004804 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80011ce:	2322      	movs	r3, #34	; 0x22
 80011d0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011d6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011d8:	2340      	movs	r3, #64	; 0x40
 80011da:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80011dc:	2301      	movs	r3, #1
 80011de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e2:	2302      	movs	r3, #2
 80011e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011e8:	2302      	movs	r3, #2
 80011ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80011ee:	2302      	movs	r3, #2
 80011f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 80011f4:	232a      	movs	r3, #42	; 0x2a
 80011f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011fa:	2302      	movs	r3, #2
 80011fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001200:	2304      	movs	r3, #4
 8001202:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001206:	2302      	movs	r3, #2
 8001208:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800120c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001210:	4618      	mov	r0, r3
 8001212:	f003 fb9b 	bl	800494c <HAL_RCC_OscConfig>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800121c:	f000 f82a 	bl	8001274 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001220:	230f      	movs	r3, #15
 8001222:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001224:	2303      	movs	r3, #3
 8001226:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001228:	2300      	movs	r3, #0
 800122a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800122c:	2300      	movs	r3, #0
 800122e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001230:	2300      	movs	r3, #0
 8001232:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8001234:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001238:	2108      	movs	r1, #8
 800123a:	4618      	mov	r0, r3
 800123c:	f003 fe9e 	bl	8004f7c <HAL_RCC_ClockConfig>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001246:	f000 f815 	bl	8001274 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 800124a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800124e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8001250:	2300      	movs	r3, #0
 8001252:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001254:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001258:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800125a:	463b      	mov	r3, r7
 800125c:	4618      	mov	r0, r3
 800125e:	f004 f87d 	bl	800535c <HAL_RCCEx_PeriphCLKConfig>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001268:	f000 f804 	bl	8001274 <Error_Handler>
  }
}
 800126c:	bf00      	nop
 800126e:	37a0      	adds	r7, #160	; 0xa0
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 8001282:	b480      	push	{r7}
 8001284:	b083      	sub	sp, #12
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f043 0204 	orr.w	r2, r3, #4
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	601a      	str	r2, [r3, #0]
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <LL_AHB2_GRP1_EnableClock>:
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80012ac:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80012ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012b0:	4907      	ldr	r1, [pc, #28]	; (80012d0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80012ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4013      	ands	r3, r2
 80012c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012c2:	68fb      	ldr	r3, [r7, #12]
}
 80012c4:	bf00      	nop
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	40021000 	.word	0x40021000

080012d4 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 80012d8:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80012dc:	f7ff ffe2 	bl	80012a4 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 80012e0:	4802      	ldr	r0, [pc, #8]	; (80012ec <MX_RNG_Init+0x18>)
 80012e2:	f7ff ffce 	bl	8001282 <LL_RNG_Enable>

}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	50060800 	.word	0x50060800

080012f0 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 80012f4:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <MX_SPI3_Init+0x74>)
 80012f6:	4a1c      	ldr	r2, [pc, #112]	; (8001368 <MX_SPI3_Init+0x78>)
 80012f8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80012fa:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <MX_SPI3_Init+0x74>)
 80012fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001300:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001302:	4b18      	ldr	r3, [pc, #96]	; (8001364 <MX_SPI3_Init+0x74>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001308:	4b16      	ldr	r3, [pc, #88]	; (8001364 <MX_SPI3_Init+0x74>)
 800130a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800130e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001310:	4b14      	ldr	r3, [pc, #80]	; (8001364 <MX_SPI3_Init+0x74>)
 8001312:	2200      	movs	r2, #0
 8001314:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001316:	4b13      	ldr	r3, [pc, #76]	; (8001364 <MX_SPI3_Init+0x74>)
 8001318:	2200      	movs	r2, #0
 800131a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800131c:	4b11      	ldr	r3, [pc, #68]	; (8001364 <MX_SPI3_Init+0x74>)
 800131e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001322:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001324:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <MX_SPI3_Init+0x74>)
 8001326:	2210      	movs	r2, #16
 8001328:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800132a:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <MX_SPI3_Init+0x74>)
 800132c:	2200      	movs	r2, #0
 800132e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <MX_SPI3_Init+0x74>)
 8001332:	2200      	movs	r2, #0
 8001334:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001336:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <MX_SPI3_Init+0x74>)
 8001338:	2200      	movs	r2, #0
 800133a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800133c:	4b09      	ldr	r3, [pc, #36]	; (8001364 <MX_SPI3_Init+0x74>)
 800133e:	2207      	movs	r2, #7
 8001340:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001342:	4b08      	ldr	r3, [pc, #32]	; (8001364 <MX_SPI3_Init+0x74>)
 8001344:	2200      	movs	r2, #0
 8001346:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <MX_SPI3_Init+0x74>)
 800134a:	2208      	movs	r2, #8
 800134c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800134e:	4805      	ldr	r0, [pc, #20]	; (8001364 <MX_SPI3_Init+0x74>)
 8001350:	f004 fa50 	bl	80057f4 <HAL_SPI_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800135a:	f7ff ff8b 	bl	8001274 <Error_Handler>
  }

}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000658 	.word	0x20000658
 8001368:	40003c00 	.word	0x40003c00

0800136c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08a      	sub	sp, #40	; 0x28
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a17      	ldr	r2, [pc, #92]	; (80013e8 <HAL_SPI_MspInit+0x7c>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d128      	bne.n	80013e0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800138e:	4b17      	ldr	r3, [pc, #92]	; (80013ec <HAL_SPI_MspInit+0x80>)
 8001390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001392:	4a16      	ldr	r2, [pc, #88]	; (80013ec <HAL_SPI_MspInit+0x80>)
 8001394:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001398:	6593      	str	r3, [r2, #88]	; 0x58
 800139a:	4b14      	ldr	r3, [pc, #80]	; (80013ec <HAL_SPI_MspInit+0x80>)
 800139c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013a2:	613b      	str	r3, [r7, #16]
 80013a4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a6:	4b11      	ldr	r3, [pc, #68]	; (80013ec <HAL_SPI_MspInit+0x80>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013aa:	4a10      	ldr	r2, [pc, #64]	; (80013ec <HAL_SPI_MspInit+0x80>)
 80013ac:	f043 0304 	orr.w	r3, r3, #4
 80013b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <HAL_SPI_MspInit+0x80>)
 80013b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b6:	f003 0304 	and.w	r3, r3, #4
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80013be:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80013c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c4:	2302      	movs	r3, #2
 80013c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013cc:	2300      	movs	r3, #0
 80013ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013d0:	2306      	movs	r3, #6
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	4619      	mov	r1, r3
 80013da:	4805      	ldr	r0, [pc, #20]	; (80013f0 <HAL_SPI_MspInit+0x84>)
 80013dc:	f003 f860 	bl	80044a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80013e0:	bf00      	nop
 80013e2:	3728      	adds	r7, #40	; 0x28
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40003c00 	.word	0x40003c00
 80013ec:	40021000 	.word	0x40021000
 80013f0:	48000800 	.word	0x48000800

080013f4 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	4a04      	ldr	r2, [pc, #16]	; (8001410 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80013fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001402:	6093      	str	r3, [r2, #8]
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	40007000 	.word	0x40007000

08001414 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141a:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <HAL_MspInit+0x44>)
 800141c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800141e:	4a0e      	ldr	r2, [pc, #56]	; (8001458 <HAL_MspInit+0x44>)
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	6613      	str	r3, [r2, #96]	; 0x60
 8001426:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <HAL_MspInit+0x44>)
 8001428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001432:	4b09      	ldr	r3, [pc, #36]	; (8001458 <HAL_MspInit+0x44>)
 8001434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001436:	4a08      	ldr	r2, [pc, #32]	; (8001458 <HAL_MspInit+0x44>)
 8001438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800143c:	6593      	str	r3, [r2, #88]	; 0x58
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <HAL_MspInit+0x44>)
 8001440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001446:	603b      	str	r3, [r7, #0]
 8001448:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 800144a:	f7ff ffd3 	bl	80013f4 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40021000 	.word	0x40021000

0800145c <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8001464:	4b07      	ldr	r3, [pc, #28]	; (8001484 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8001466:	695a      	ldr	r2, [r3, #20]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4013      	ands	r3, r2
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	429a      	cmp	r2, r3
 8001470:	d101      	bne.n	8001476 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8001472:	2301      	movs	r3, #1
 8001474:	e000      	b.n	8001478 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	40010400 	.word	0x40010400

08001488 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001490:	4a04      	ldr	r2, [pc, #16]	; (80014a4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6153      	str	r3, [r2, #20]
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	40010400 	.word	0x40010400

080014a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ba:	e7fe      	b.n	80014ba <HardFault_Handler+0x4>

080014bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <MemManage_Handler+0x4>

080014c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c6:	e7fe      	b.n	80014c6 <BusFault_Handler+0x4>

080014c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <UsageFault_Handler+0x4>

080014ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014fc:	f000 fd1c 	bl	8001f38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}

08001504 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

//	if(HAL_GPIO_ReadPin(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin))
//	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN3");
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <EXTI0_IRQHandler+0x2c>)
 800150a:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <EXTI0_IRQHandler+0x30>)
 800150c:	6810      	ldr	r0, [r2, #0]
 800150e:	6018      	str	r0, [r3, #0]
 8001510:	7912      	ldrb	r2, [r2, #4]
 8001512:	711a      	strb	r2, [r3, #4]
 		printf("BTN3_EXTI0_Pin\n");
 8001514:	4808      	ldr	r0, [pc, #32]	; (8001538 <EXTI0_IRQHandler+0x34>)
 8001516:	f006 fecb 	bl	80082b0 <puts>
//	}

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 800151a:	2001      	movs	r0, #1
 800151c:	f7ff ff9e 	bl	800145c <LL_EXTI_IsActiveFlag_0_31>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d002      	beq.n	800152c <EXTI0_IRQHandler+0x28>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8001526:	2001      	movs	r0, #1
 8001528:	f7ff ffae 	bl	8001488 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000474 	.word	0x20000474
 8001534:	0800908c 	.word	0x0800908c
 8001538:	08009094 	.word	0x08009094

0800153c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

//	if(HAL_GPIO_ReadPin(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin))
//	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN4");
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <EXTI1_IRQHandler+0x2c>)
 8001542:	4a0a      	ldr	r2, [pc, #40]	; (800156c <EXTI1_IRQHandler+0x30>)
 8001544:	6810      	ldr	r0, [r2, #0]
 8001546:	6018      	str	r0, [r3, #0]
 8001548:	7912      	ldrb	r2, [r2, #4]
 800154a:	711a      	strb	r2, [r3, #4]
		printf("BTN4_EXTI1_Pin\n");
 800154c:	4808      	ldr	r0, [pc, #32]	; (8001570 <EXTI1_IRQHandler+0x34>)
 800154e:	f006 feaf 	bl	80082b0 <puts>
//	}

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 8001552:	2002      	movs	r0, #2
 8001554:	f7ff ff82 	bl	800145c <LL_EXTI_IsActiveFlag_0_31>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d002      	beq.n	8001564 <EXTI1_IRQHandler+0x28>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 800155e:	2002      	movs	r0, #2
 8001560:	f7ff ff92 	bl	8001488 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000474 	.word	0x20000474
 800156c:	080090a4 	.word	0x080090a4
 8001570:	080090ac 	.word	0x080090ac

08001574 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */


		snprintf(control_pressed, sizeof(control_pressed), "ENC_BTN");
 8001578:	4a09      	ldr	r2, [pc, #36]	; (80015a0 <EXTI2_IRQHandler+0x2c>)
 800157a:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <EXTI2_IRQHandler+0x30>)
 800157c:	cb03      	ldmia	r3!, {r0, r1}
 800157e:	6010      	str	r0, [r2, #0]
 8001580:	6051      	str	r1, [r2, #4]
		printf("ENC_EXTI2_Pin\n");
 8001582:	4809      	ldr	r0, [pc, #36]	; (80015a8 <EXTI2_IRQHandler+0x34>)
 8001584:	f006 fe94 	bl	80082b0 <puts>


  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8001588:	2004      	movs	r0, #4
 800158a:	f7ff ff67 	bl	800145c <LL_EXTI_IsActiveFlag_0_31>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d002      	beq.n	800159a <EXTI2_IRQHandler+0x26>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 8001594:	2004      	movs	r0, #4
 8001596:	f7ff ff77 	bl	8001488 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000474 	.word	0x20000474
 80015a4:	080090bc 	.word	0x080090bc
 80015a8:	080090c4 	.word	0x080090c4

080015ac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	//printf("Test\n");
	//printf("%lu\n", trigger_input[0]);
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015b0:	4802      	ldr	r0, [pc, #8]	; (80015bc <DMA1_Channel1_IRQHandler+0x10>)
 80015b2:	f002 fe26 	bl	8004202 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	200004ec 	.word	0x200004ec

080015c0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80015c4:	4802      	ldr	r0, [pc, #8]	; (80015d0 <DMA1_Channel2_IRQHandler+0x10>)
 80015c6:	f002 fe1c 	bl	8004202 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000598 	.word	0x20000598

080015d4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 80015d8:	4802      	ldr	r0, [pc, #8]	; (80015e4 <DMA1_Channel3_IRQHandler+0x10>)
 80015da:	f002 fe12 	bl	8004202 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	200005f8 	.word	0x200005f8

080015e8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	dm_update_display();
 80015ec:	f7fe fe68 	bl	80002c0 <dm_update_display>
  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015f0:	4803      	ldr	r0, [pc, #12]	; (8001600 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 80015f2:	f004 fd75 	bl	80060e0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 80015f6:	4803      	ldr	r0, [pc, #12]	; (8001604 <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 80015f8:	f004 fd72 	bl	80060e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	200007a0 	.word	0x200007a0
 8001604:	20000708 	.word	0x20000708

08001608 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	snprintf(control_pressed, sizeof(control_pressed), " ");
 800160c:	4a05      	ldr	r2, [pc, #20]	; (8001624 <TIM1_UP_TIM16_IRQHandler+0x1c>)
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <TIM1_UP_TIM16_IRQHandler+0x20>)
 8001610:	881b      	ldrh	r3, [r3, #0]
 8001612:	8013      	strh	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001614:	4805      	ldr	r0, [pc, #20]	; (800162c <TIM1_UP_TIM16_IRQHandler+0x24>)
 8001616:	f004 fd63 	bl	80060e0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800161a:	4805      	ldr	r0, [pc, #20]	; (8001630 <TIM1_UP_TIM16_IRQHandler+0x28>)
 800161c:	f004 fd60 	bl	80060e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000474 	.word	0x20000474
 8001628:	080090d4 	.word	0x080090d4
 800162c:	200007a0 	.word	0x200007a0
 8001630:	20000838 	.word	0x20000838

08001634 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	update_dc_bias_sweep();
 8001638:	f7ff f970 	bl	800091c <update_dc_bias_sweep>
	if((TIM1->CNT < last_enc_value) || (TIM1->CNT > last_enc_value))
 800163c:	4b11      	ldr	r3, [pc, #68]	; (8001684 <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 800163e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001640:	4a11      	ldr	r2, [pc, #68]	; (8001688 <TIM1_TRG_COM_TIM17_IRQHandler+0x54>)
 8001642:	8812      	ldrh	r2, [r2, #0]
 8001644:	4293      	cmp	r3, r2
 8001646:	d305      	bcc.n	8001654 <TIM1_TRG_COM_TIM17_IRQHandler+0x20>
 8001648:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 800164a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164c:	4a0e      	ldr	r2, [pc, #56]	; (8001688 <TIM1_TRG_COM_TIM17_IRQHandler+0x54>)
 800164e:	8812      	ldrh	r2, [r2, #0]
 8001650:	4293      	cmp	r3, r2
 8001652:	d90a      	bls.n	800166a <TIM1_TRG_COM_TIM17_IRQHandler+0x36>
	{
		printf("%lu\n",TIM1->CNT);
 8001654:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 8001656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001658:	4619      	mov	r1, r3
 800165a:	480c      	ldr	r0, [pc, #48]	; (800168c <TIM1_TRG_COM_TIM17_IRQHandler+0x58>)
 800165c:	f006 fdb4 	bl	80081c8 <iprintf>
		new_enc_value = TIM1->CNT;
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 8001662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001664:	b29a      	uxth	r2, r3
 8001666:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <TIM1_TRG_COM_TIM17_IRQHandler+0x5c>)
 8001668:	801a      	strh	r2, [r3, #0]
	}


	last_enc_value = TIM1->CNT;
 800166a:	4b06      	ldr	r3, [pc, #24]	; (8001684 <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 800166c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166e:	b29a      	uxth	r2, r3
 8001670:	4b05      	ldr	r3, [pc, #20]	; (8001688 <TIM1_TRG_COM_TIM17_IRQHandler+0x54>)
 8001672:	801a      	strh	r2, [r3, #0]


  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001674:	4807      	ldr	r0, [pc, #28]	; (8001694 <TIM1_TRG_COM_TIM17_IRQHandler+0x60>)
 8001676:	f004 fd33 	bl	80060e0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 800167a:	4807      	ldr	r0, [pc, #28]	; (8001698 <TIM1_TRG_COM_TIM17_IRQHandler+0x64>)
 800167c:	f004 fd30 	bl	80060e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40012c00 	.word	0x40012c00
 8001688:	20000464 	.word	0x20000464
 800168c:	080090d8 	.word	0x080090d8
 8001690:	20000466 	.word	0x20000466
 8001694:	200007a0 	.word	0x200007a0
 8001698:	20000754 	.word	0x20000754

0800169c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016a0:	4802      	ldr	r0, [pc, #8]	; (80016ac <TIM2_IRQHandler+0x10>)
 80016a2:	f004 fd1d 	bl	80060e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	200007ec 	.word	0x200007ec

080016b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	if(HAL_GPIO_ReadPin(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin))
 80016b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016b8:	481b      	ldr	r0, [pc, #108]	; (8001728 <EXTI15_10_IRQHandler+0x78>)
 80016ba:	f003 f873 	bl	80047a4 <HAL_GPIO_ReadPin>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d008      	beq.n	80016d6 <EXTI15_10_IRQHandler+0x26>
	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN1");
 80016c4:	4b19      	ldr	r3, [pc, #100]	; (800172c <EXTI15_10_IRQHandler+0x7c>)
 80016c6:	4a1a      	ldr	r2, [pc, #104]	; (8001730 <EXTI15_10_IRQHandler+0x80>)
 80016c8:	6810      	ldr	r0, [r2, #0]
 80016ca:	6018      	str	r0, [r3, #0]
 80016cc:	7912      	ldrb	r2, [r2, #4]
 80016ce:	711a      	strb	r2, [r3, #4]
		printf("BTN1_EXTI14_Pin\n");
 80016d0:	4818      	ldr	r0, [pc, #96]	; (8001734 <EXTI15_10_IRQHandler+0x84>)
 80016d2:	f006 fded 	bl	80082b0 <puts>
	}
	if(HAL_GPIO_ReadPin(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin))
 80016d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016da:	4813      	ldr	r0, [pc, #76]	; (8001728 <EXTI15_10_IRQHandler+0x78>)
 80016dc:	f003 f862 	bl	80047a4 <HAL_GPIO_ReadPin>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d008      	beq.n	80016f8 <EXTI15_10_IRQHandler+0x48>
	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN2");
 80016e6:	4b11      	ldr	r3, [pc, #68]	; (800172c <EXTI15_10_IRQHandler+0x7c>)
 80016e8:	4a13      	ldr	r2, [pc, #76]	; (8001738 <EXTI15_10_IRQHandler+0x88>)
 80016ea:	6810      	ldr	r0, [r2, #0]
 80016ec:	6018      	str	r0, [r3, #0]
 80016ee:	7912      	ldrb	r2, [r2, #4]
 80016f0:	711a      	strb	r2, [r3, #4]
		printf("BTN2_EXTI15_Pin\n");
 80016f2:	4812      	ldr	r0, [pc, #72]	; (800173c <EXTI15_10_IRQHandler+0x8c>)
 80016f4:	f006 fddc 	bl	80082b0 <puts>
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 80016f8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80016fc:	f7ff feae 	bl	800145c <LL_EXTI_IsActiveFlag_0_31>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <EXTI15_10_IRQHandler+0x5e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8001706:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800170a:	f7ff febd 	bl	8001488 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 800170e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001712:	f7ff fea3 	bl	800145c <LL_EXTI_IsActiveFlag_0_31>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d003      	beq.n	8001724 <EXTI15_10_IRQHandler+0x74>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 800171c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001720:	f7ff feb2 	bl	8001488 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}
 8001728:	48000800 	.word	0x48000800
 800172c:	20000474 	.word	0x20000474
 8001730:	080090e0 	.word	0x080090e0
 8001734:	080090e8 	.word	0x080090e8
 8001738:	080090f8 	.word	0x080090f8
 800173c:	08009100 	.word	0x08009100

08001740 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	e00a      	b.n	8001768 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001752:	f3af 8000 	nop.w
 8001756:	4601      	mov	r1, r0
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	1c5a      	adds	r2, r3, #1
 800175c:	60ba      	str	r2, [r7, #8]
 800175e:	b2ca      	uxtb	r2, r1
 8001760:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	3301      	adds	r3, #1
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	429a      	cmp	r2, r3
 800176e:	dbf0      	blt.n	8001752 <_read+0x12>
	}

return len;
 8001770:	687b      	ldr	r3, [r7, #4]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <_close>:
	}
	return len;
}

int _close(int file)
{
 800177a:	b480      	push	{r7}
 800177c:	b083      	sub	sp, #12
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
	return -1;
 8001782:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001786:	4618      	mov	r0, r3
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017a2:	605a      	str	r2, [r3, #4]
	return 0;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <_isatty>:

int _isatty(int file)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b083      	sub	sp, #12
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
	return 1;
 80017ba:	2301      	movs	r3, #1
}
 80017bc:	4618      	mov	r0, r3
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
	return 0;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80017ec:	4b11      	ldr	r3, [pc, #68]	; (8001834 <_sbrk+0x50>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d102      	bne.n	80017fa <_sbrk+0x16>
		heap_end = &end;
 80017f4:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <_sbrk+0x50>)
 80017f6:	4a10      	ldr	r2, [pc, #64]	; (8001838 <_sbrk+0x54>)
 80017f8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80017fa:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <_sbrk+0x50>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001800:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <_sbrk+0x50>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4413      	add	r3, r2
 8001808:	466a      	mov	r2, sp
 800180a:	4293      	cmp	r3, r2
 800180c:	d907      	bls.n	800181e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800180e:	f006 fca9 	bl	8008164 <__errno>
 8001812:	4602      	mov	r2, r0
 8001814:	230c      	movs	r3, #12
 8001816:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001818:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800181c:	e006      	b.n	800182c <_sbrk+0x48>
	}

	heap_end += incr;
 800181e:	4b05      	ldr	r3, [pc, #20]	; (8001834 <_sbrk+0x50>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	4a03      	ldr	r2, [pc, #12]	; (8001834 <_sbrk+0x50>)
 8001828:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800182a:	68fb      	ldr	r3, [r7, #12]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000468 	.word	0x20000468
 8001838:	20000890 	.word	0x20000890

0800183c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <SystemInit+0x28>)
 8001842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001846:	4a07      	ldr	r2, [pc, #28]	; (8001864 <SystemInit+0x28>)
 8001848:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800184c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001850:	4b04      	ldr	r3, [pc, #16]	; (8001864 <SystemInit+0x28>)
 8001852:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001856:	609a      	str	r2, [r3, #8]
#endif
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b09a      	sub	sp, #104	; 0x68
 800186c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800186e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001872:	2224      	movs	r2, #36	; 0x24
 8001874:	2100      	movs	r1, #0
 8001876:	4618      	mov	r0, r3
 8001878:	f006 fc9e 	bl	80081b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800187c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001888:	1d3b      	adds	r3, r7, #4
 800188a:	2234      	movs	r2, #52	; 0x34
 800188c:	2100      	movs	r1, #0
 800188e:	4618      	mov	r0, r3
 8001890:	f006 fc92 	bl	80081b8 <memset>

  htim1.Instance = TIM1;
 8001894:	4b2a      	ldr	r3, [pc, #168]	; (8001940 <MX_TIM1_Init+0xd8>)
 8001896:	4a2b      	ldr	r2, [pc, #172]	; (8001944 <MX_TIM1_Init+0xdc>)
 8001898:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800189a:	4b29      	ldr	r3, [pc, #164]	; (8001940 <MX_TIM1_Init+0xd8>)
 800189c:	2200      	movs	r2, #0
 800189e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 80018a0:	4b27      	ldr	r3, [pc, #156]	; (8001940 <MX_TIM1_Init+0xd8>)
 80018a2:	2240      	movs	r2, #64	; 0x40
 80018a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 80018a6:	4b26      	ldr	r3, [pc, #152]	; (8001940 <MX_TIM1_Init+0xd8>)
 80018a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ae:	4b24      	ldr	r3, [pc, #144]	; (8001940 <MX_TIM1_Init+0xd8>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018b4:	4b22      	ldr	r3, [pc, #136]	; (8001940 <MX_TIM1_Init+0xd8>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ba:	4b21      	ldr	r3, [pc, #132]	; (8001940 <MX_TIM1_Init+0xd8>)
 80018bc:	2200      	movs	r2, #0
 80018be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80018c0:	2303      	movs	r3, #3
 80018c2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018c4:	2300      	movs	r3, #0
 80018c6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018c8:	2301      	movs	r3, #1
 80018ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018cc:	2300      	movs	r3, #0
 80018ce:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018d4:	2300      	movs	r3, #0
 80018d6:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018d8:	2301      	movs	r3, #1
 80018da:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018dc:	2300      	movs	r3, #0
 80018de:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80018e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018e8:	4619      	mov	r1, r3
 80018ea:	4815      	ldr	r0, [pc, #84]	; (8001940 <MX_TIM1_Init+0xd8>)
 80018ec:	f004 fb52 	bl	8005f94 <HAL_TIM_Encoder_Init>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80018f6:	f7ff fcbd 	bl	8001274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018fa:	2300      	movs	r3, #0
 80018fc:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018fe:	2300      	movs	r3, #0
 8001900:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001902:	2300      	movs	r3, #0
 8001904:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001906:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800190a:	4619      	mov	r1, r3
 800190c:	480c      	ldr	r0, [pc, #48]	; (8001940 <MX_TIM1_Init+0xd8>)
 800190e:	f005 f8cb 	bl	8006aa8 <HAL_TIMEx_MasterConfigSynchronization>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8001918:	f7ff fcac 	bl	8001274 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800191c:	2300      	movs	r3, #0
 800191e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001920:	2300      	movs	r3, #0
 8001922:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001924:	1d3b      	adds	r3, r7, #4
 8001926:	4619      	mov	r1, r3
 8001928:	4805      	ldr	r0, [pc, #20]	; (8001940 <MX_TIM1_Init+0xd8>)
 800192a:	f005 f953 	bl	8006bd4 <HAL_TIMEx_ConfigBreakDeadTime>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8001934:	f7ff fc9e 	bl	8001274 <Error_Handler>
  }

}
 8001938:	bf00      	nop
 800193a:	3768      	adds	r7, #104	; 0x68
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	200007a0 	.word	0x200007a0
 8001944:	40012c00 	.word	0x40012c00

08001948 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08c      	sub	sp, #48	; 0x30
 800194c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800194e:	f107 0320 	add.w	r3, r7, #32
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	609a      	str	r2, [r3, #8]
 800195a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800195c:	f107 030c 	add.w	r3, r7, #12
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800196c:	463b      	mov	r3, r7
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]
 8001974:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8001976:	4b28      	ldr	r3, [pc, #160]	; (8001a18 <MX_TIM2_Init+0xd0>)
 8001978:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800197c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2047;
 800197e:	4b26      	ldr	r3, [pc, #152]	; (8001a18 <MX_TIM2_Init+0xd0>)
 8001980:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001984:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001986:	4b24      	ldr	r3, [pc, #144]	; (8001a18 <MX_TIM2_Init+0xd0>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 800198c:	4b22      	ldr	r3, [pc, #136]	; (8001a18 <MX_TIM2_Init+0xd0>)
 800198e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001992:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001994:	4b20      	ldr	r3, [pc, #128]	; (8001a18 <MX_TIM2_Init+0xd0>)
 8001996:	2200      	movs	r2, #0
 8001998:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800199a:	4b1f      	ldr	r3, [pc, #124]	; (8001a18 <MX_TIM2_Init+0xd0>)
 800199c:	2200      	movs	r2, #0
 800199e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019a0:	481d      	ldr	r0, [pc, #116]	; (8001a18 <MX_TIM2_Init+0xd0>)
 80019a2:	f004 fa3c 	bl	8005e1e <HAL_TIM_Base_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80019ac:	f7ff fc62 	bl	8001274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019b4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019b6:	f107 0320 	add.w	r3, r7, #32
 80019ba:	4619      	mov	r1, r3
 80019bc:	4816      	ldr	r0, [pc, #88]	; (8001a18 <MX_TIM2_Init+0xd0>)
 80019be:	f004 fd0f 	bl	80063e0 <HAL_TIM_ConfigClockSource>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80019c8:	f7ff fc54 	bl	8001274 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 80019cc:	2305      	movs	r3, #5
 80019ce:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80019d0:	2350      	movs	r3, #80	; 0x50
 80019d2:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80019dc:	f107 030c 	add.w	r3, r7, #12
 80019e0:	4619      	mov	r1, r3
 80019e2:	480d      	ldr	r0, [pc, #52]	; (8001a18 <MX_TIM2_Init+0xd0>)
 80019e4:	f004 fdec 	bl	80065c0 <HAL_TIM_SlaveConfigSynchro>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 80019ee:	f7ff fc41 	bl	8001274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f2:	2300      	movs	r3, #0
 80019f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f6:	2300      	movs	r3, #0
 80019f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019fa:	463b      	mov	r3, r7
 80019fc:	4619      	mov	r1, r3
 80019fe:	4806      	ldr	r0, [pc, #24]	; (8001a18 <MX_TIM2_Init+0xd0>)
 8001a00:	f005 f852 	bl	8006aa8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8001a0a:	f7ff fc33 	bl	8001274 <Error_Handler>
  }

}
 8001a0e:	bf00      	nop
 8001a10:	3730      	adds	r7, #48	; 0x30
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	200007ec 	.word	0x200007ec

08001a1c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b094      	sub	sp, #80	; 0x50
 8001a20:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a22:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]
 8001a2c:	609a      	str	r2, [r3, #8]
 8001a2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a30:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a3c:	463b      	mov	r3, r7
 8001a3e:	2234      	movs	r2, #52	; 0x34
 8001a40:	2100      	movs	r1, #0
 8001a42:	4618      	mov	r0, r3
 8001a44:	f006 fbb8 	bl	80081b8 <memset>

  htim8.Instance = TIM8;
 8001a48:	4b26      	ldr	r3, [pc, #152]	; (8001ae4 <MX_TIM8_Init+0xc8>)
 8001a4a:	4a27      	ldr	r2, [pc, #156]	; (8001ae8 <MX_TIM8_Init+0xcc>)
 8001a4c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001a4e:	4b25      	ldr	r3, [pc, #148]	; (8001ae4 <MX_TIM8_Init+0xc8>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a54:	4b23      	ldr	r3, [pc, #140]	; (8001ae4 <MX_TIM8_Init+0xc8>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 8001a5a:	4b22      	ldr	r3, [pc, #136]	; (8001ae4 <MX_TIM8_Init+0xc8>)
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a60:	4b20      	ldr	r3, [pc, #128]	; (8001ae4 <MX_TIM8_Init+0xc8>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001a66:	4b1f      	ldr	r3, [pc, #124]	; (8001ae4 <MX_TIM8_Init+0xc8>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <MX_TIM8_Init+0xc8>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001a72:	481c      	ldr	r0, [pc, #112]	; (8001ae4 <MX_TIM8_Init+0xc8>)
 8001a74:	f004 f9d3 	bl	8005e1e <HAL_TIM_Base_Init>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8001a7e:	f7ff fbf9 	bl	8001274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a86:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001a88:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4815      	ldr	r0, [pc, #84]	; (8001ae4 <MX_TIM8_Init+0xc8>)
 8001a90:	f004 fca6 	bl	80063e0 <HAL_TIM_ConfigClockSource>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001a9a:	f7ff fbeb 	bl	8001274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a9e:	2320      	movs	r3, #32
 8001aa0:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001aaa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001aae:	4619      	mov	r1, r3
 8001ab0:	480c      	ldr	r0, [pc, #48]	; (8001ae4 <MX_TIM8_Init+0xc8>)
 8001ab2:	f004 fff9 	bl	8006aa8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001abc:	f7ff fbda 	bl	8001274 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001ac8:	463b      	mov	r3, r7
 8001aca:	4619      	mov	r1, r3
 8001acc:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <MX_TIM8_Init+0xc8>)
 8001ace:	f005 f881 	bl	8006bd4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8001ad8:	f7ff fbcc 	bl	8001274 <Error_Handler>
  }

}
 8001adc:	bf00      	nop
 8001ade:	3750      	adds	r7, #80	; 0x50
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	200006bc 	.word	0x200006bc
 8001ae8:	40013400 	.word	0x40013400

08001aec <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b088      	sub	sp, #32
 8001af0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001af2:	f107 0310 	add.w	r3, r7, #16
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	605a      	str	r2, [r3, #4]
 8001afc:	609a      	str	r2, [r3, #8]
 8001afe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b00:	1d3b      	adds	r3, r7, #4
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	605a      	str	r2, [r3, #4]
 8001b08:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 8001b0a:	4b1f      	ldr	r3, [pc, #124]	; (8001b88 <MX_TIM15_Init+0x9c>)
 8001b0c:	4a1f      	ldr	r2, [pc, #124]	; (8001b8c <MX_TIM15_Init+0xa0>)
 8001b0e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 8001b10:	4b1d      	ldr	r3, [pc, #116]	; (8001b88 <MX_TIM15_Init+0x9c>)
 8001b12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b16:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b18:	4b1b      	ldr	r3, [pc, #108]	; (8001b88 <MX_TIM15_Init+0x9c>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 8001b1e:	4b1a      	ldr	r3, [pc, #104]	; (8001b88 <MX_TIM15_Init+0x9c>)
 8001b20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b24:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b26:	4b18      	ldr	r3, [pc, #96]	; (8001b88 <MX_TIM15_Init+0x9c>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001b2c:	4b16      	ldr	r3, [pc, #88]	; (8001b88 <MX_TIM15_Init+0x9c>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b32:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <MX_TIM15_Init+0x9c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001b38:	4813      	ldr	r0, [pc, #76]	; (8001b88 <MX_TIM15_Init+0x9c>)
 8001b3a:	f004 f970 	bl	8005e1e <HAL_TIM_Base_Init>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8001b44:	f7ff fb96 	bl	8001274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001b4e:	f107 0310 	add.w	r3, r7, #16
 8001b52:	4619      	mov	r1, r3
 8001b54:	480c      	ldr	r0, [pc, #48]	; (8001b88 <MX_TIM15_Init+0x9c>)
 8001b56:	f004 fc43 	bl	80063e0 <HAL_TIM_ConfigClockSource>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8001b60:	f7ff fb88 	bl	8001274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b64:	2300      	movs	r3, #0
 8001b66:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001b6c:	1d3b      	adds	r3, r7, #4
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4805      	ldr	r0, [pc, #20]	; (8001b88 <MX_TIM15_Init+0x9c>)
 8001b72:	f004 ff99 	bl	8006aa8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8001b7c:	f7ff fb7a 	bl	8001274 <Error_Handler>
  }

}
 8001b80:	bf00      	nop
 8001b82:	3720      	adds	r7, #32
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20000708 	.word	0x20000708
 8001b8c:	40014000 	.word	0x40014000

08001b90 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8001b94:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <MX_TIM16_Init+0x44>)
 8001b96:	4a10      	ldr	r2, [pc, #64]	; (8001bd8 <MX_TIM16_Init+0x48>)
 8001b98:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001b9a:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <MX_TIM16_Init+0x44>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <MX_TIM16_Init+0x44>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 8191;
 8001ba6:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <MX_TIM16_Init+0x44>)
 8001ba8:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8001bac:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bae:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <MX_TIM16_Init+0x44>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001bb4:	4b07      	ldr	r3, [pc, #28]	; (8001bd4 <MX_TIM16_Init+0x44>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <MX_TIM16_Init+0x44>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001bc0:	4804      	ldr	r0, [pc, #16]	; (8001bd4 <MX_TIM16_Init+0x44>)
 8001bc2:	f004 f92c 	bl	8005e1e <HAL_TIM_Base_Init>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001bcc:	f7ff fb52 	bl	8001274 <Error_Handler>
  }

}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	20000838 	.word	0x20000838
 8001bd8:	40014400 	.word	0x40014400

08001bdc <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8001be0:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <MX_TIM17_Init+0x44>)
 8001be2:	4a10      	ldr	r2, [pc, #64]	; (8001c24 <MX_TIM17_Init+0x48>)
 8001be4:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1023;
 8001be6:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <MX_TIM17_Init+0x44>)
 8001be8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001bec:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bee:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <MX_TIM17_Init+0x44>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 64;
 8001bf4:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <MX_TIM17_Init+0x44>)
 8001bf6:	2240      	movs	r2, #64	; 0x40
 8001bf8:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bfa:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <MX_TIM17_Init+0x44>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001c00:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <MX_TIM17_Init+0x44>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c06:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <MX_TIM17_Init+0x44>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001c0c:	4804      	ldr	r0, [pc, #16]	; (8001c20 <MX_TIM17_Init+0x44>)
 8001c0e:	f004 f906 	bl	8005e1e <HAL_TIM_Base_Init>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8001c18:	f7ff fb2c 	bl	8001274 <Error_Handler>
  }

}
 8001c1c:	bf00      	nop
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20000754 	.word	0x20000754
 8001c24:	40014800 	.word	0x40014800

08001c28 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08a      	sub	sp, #40	; 0x28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a23      	ldr	r2, [pc, #140]	; (8001cd4 <HAL_TIM_Encoder_MspInit+0xac>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d13f      	bne.n	8001cca <HAL_TIM_Encoder_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c4a:	4b23      	ldr	r3, [pc, #140]	; (8001cd8 <HAL_TIM_Encoder_MspInit+0xb0>)
 8001c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c4e:	4a22      	ldr	r2, [pc, #136]	; (8001cd8 <HAL_TIM_Encoder_MspInit+0xb0>)
 8001c50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c54:	6613      	str	r3, [r2, #96]	; 0x60
 8001c56:	4b20      	ldr	r3, [pc, #128]	; (8001cd8 <HAL_TIM_Encoder_MspInit+0xb0>)
 8001c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c62:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <HAL_TIM_Encoder_MspInit+0xb0>)
 8001c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c66:	4a1c      	ldr	r2, [pc, #112]	; (8001cd8 <HAL_TIM_Encoder_MspInit+0xb0>)
 8001c68:	f043 0304 	orr.w	r3, r3, #4
 8001c6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c6e:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <HAL_TIM_Encoder_MspInit+0xb0>)
 8001c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c72:	f003 0304 	and.w	r3, r3, #4
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c86:	2300      	movs	r3, #0
 8001c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c8e:	f107 0314 	add.w	r3, r7, #20
 8001c92:	4619      	mov	r1, r3
 8001c94:	4811      	ldr	r0, [pc, #68]	; (8001cdc <HAL_TIM_Encoder_MspInit+0xb4>)
 8001c96:	f002 fc03 	bl	80044a0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 1, 0);
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	2018      	movs	r0, #24
 8001ca0:	f001 fda5 	bl	80037ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001ca4:	2018      	movs	r0, #24
 8001ca6:	f001 fdbc 	bl	8003822 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8001caa:	2200      	movs	r2, #0
 8001cac:	2101      	movs	r1, #1
 8001cae:	2019      	movs	r0, #25
 8001cb0:	f001 fd9d 	bl	80037ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001cb4:	2019      	movs	r0, #25
 8001cb6:	f001 fdb4 	bl	8003822 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	201a      	movs	r0, #26
 8001cc0:	f001 fd95 	bl	80037ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001cc4:	201a      	movs	r0, #26
 8001cc6:	f001 fdac 	bl	8003822 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001cca:	bf00      	nop
 8001ccc:	3728      	adds	r7, #40	; 0x28
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40012c00 	.word	0x40012c00
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	48000800 	.word	0x48000800

08001ce0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08e      	sub	sp, #56	; 0x38
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d00:	d131      	bne.n	8001d66 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d02:	4b4a      	ldr	r3, [pc, #296]	; (8001e2c <HAL_TIM_Base_MspInit+0x14c>)
 8001d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d06:	4a49      	ldr	r2, [pc, #292]	; (8001e2c <HAL_TIM_Base_MspInit+0x14c>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	6593      	str	r3, [r2, #88]	; 0x58
 8001d0e:	4b47      	ldr	r3, [pc, #284]	; (8001e2c <HAL_TIM_Base_MspInit+0x14c>)
 8001d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	623b      	str	r3, [r7, #32]
 8001d18:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1a:	4b44      	ldr	r3, [pc, #272]	; (8001e2c <HAL_TIM_Base_MspInit+0x14c>)
 8001d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1e:	4a43      	ldr	r2, [pc, #268]	; (8001e2c <HAL_TIM_Base_MspInit+0x14c>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d26:	4b41      	ldr	r3, [pc, #260]	; (8001e2c <HAL_TIM_Base_MspInit+0x14c>)
 8001d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	61fb      	str	r3, [r7, #28]
 8001d30:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d32:	2301      	movs	r3, #1
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d36:	2302      	movs	r3, #2
 8001d38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d42:	2301      	movs	r3, #1
 8001d44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d50:	f002 fba6 	bl	80044a0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001d54:	2200      	movs	r2, #0
 8001d56:	2101      	movs	r1, #1
 8001d58:	201c      	movs	r0, #28
 8001d5a:	f001 fd48 	bl	80037ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d5e:	201c      	movs	r0, #28
 8001d60:	f001 fd5f 	bl	8003822 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001d64:	e05e      	b.n	8001e24 <HAL_TIM_Base_MspInit+0x144>
  else if(tim_baseHandle->Instance==TIM8)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a31      	ldr	r2, [pc, #196]	; (8001e30 <HAL_TIM_Base_MspInit+0x150>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d10c      	bne.n	8001d8a <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001d70:	4b2e      	ldr	r3, [pc, #184]	; (8001e2c <HAL_TIM_Base_MspInit+0x14c>)
 8001d72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d74:	4a2d      	ldr	r2, [pc, #180]	; (8001e2c <HAL_TIM_Base_MspInit+0x14c>)
 8001d76:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d7a:	6613      	str	r3, [r2, #96]	; 0x60
 8001d7c:	4b2b      	ldr	r3, [pc, #172]	; (8001e2c <HAL_TIM_Base_MspInit+0x14c>)
 8001d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d84:	61bb      	str	r3, [r7, #24]
 8001d86:	69bb      	ldr	r3, [r7, #24]
}
 8001d88:	e04c      	b.n	8001e24 <HAL_TIM_Base_MspInit+0x144>
  else if(tim_baseHandle->Instance==TIM15)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a29      	ldr	r2, [pc, #164]	; (8001e34 <HAL_TIM_Base_MspInit+0x154>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d114      	bne.n	8001dbe <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001d94:	4b25      	ldr	r3, [pc, #148]	; (8001e2c <HAL_TIM_Base_MspInit+0x14c>)
 8001d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d98:	4a24      	ldr	r2, [pc, #144]	; (8001e2c <HAL_TIM_Base_MspInit+0x14c>)
 8001d9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d9e:	6613      	str	r3, [r2, #96]	; 0x60
 8001da0:	4b22      	ldr	r3, [pc, #136]	; (8001e2c <HAL_TIM_Base_MspInit+0x14c>)
 8001da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 1, 0);
 8001dac:	2200      	movs	r2, #0
 8001dae:	2101      	movs	r1, #1
 8001db0:	2018      	movs	r0, #24
 8001db2:	f001 fd1c 	bl	80037ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001db6:	2018      	movs	r0, #24
 8001db8:	f001 fd33 	bl	8003822 <HAL_NVIC_EnableIRQ>
}
 8001dbc:	e032      	b.n	8001e24 <HAL_TIM_Base_MspInit+0x144>
  else if(tim_baseHandle->Instance==TIM16)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a1d      	ldr	r2, [pc, #116]	; (8001e38 <HAL_TIM_Base_MspInit+0x158>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d114      	bne.n	8001df2 <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001dc8:	4b18      	ldr	r3, [pc, #96]	; (8001e2c <HAL_TIM_Base_MspInit+0x14c>)
 8001dca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dcc:	4a17      	ldr	r2, [pc, #92]	; (8001e2c <HAL_TIM_Base_MspInit+0x14c>)
 8001dce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dd2:	6613      	str	r3, [r2, #96]	; 0x60
 8001dd4:	4b15      	ldr	r3, [pc, #84]	; (8001e2c <HAL_TIM_Base_MspInit+0x14c>)
 8001dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ddc:	613b      	str	r3, [r7, #16]
 8001dde:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8001de0:	2200      	movs	r2, #0
 8001de2:	2101      	movs	r1, #1
 8001de4:	2019      	movs	r0, #25
 8001de6:	f001 fd02 	bl	80037ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001dea:	2019      	movs	r0, #25
 8001dec:	f001 fd19 	bl	8003822 <HAL_NVIC_EnableIRQ>
}
 8001df0:	e018      	b.n	8001e24 <HAL_TIM_Base_MspInit+0x144>
  else if(tim_baseHandle->Instance==TIM17)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a11      	ldr	r2, [pc, #68]	; (8001e3c <HAL_TIM_Base_MspInit+0x15c>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d113      	bne.n	8001e24 <HAL_TIM_Base_MspInit+0x144>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <HAL_TIM_Base_MspInit+0x14c>)
 8001dfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e00:	4a0a      	ldr	r2, [pc, #40]	; (8001e2c <HAL_TIM_Base_MspInit+0x14c>)
 8001e02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e06:	6613      	str	r3, [r2, #96]	; 0x60
 8001e08:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <HAL_TIM_Base_MspInit+0x14c>)
 8001e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001e14:	2200      	movs	r2, #0
 8001e16:	2100      	movs	r1, #0
 8001e18:	201a      	movs	r0, #26
 8001e1a:	f001 fce8 	bl	80037ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001e1e:	201a      	movs	r0, #26
 8001e20:	f001 fcff 	bl	8003822 <HAL_NVIC_EnableIRQ>
}
 8001e24:	bf00      	nop
 8001e26:	3738      	adds	r7, #56	; 0x38
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	40013400 	.word	0x40013400
 8001e34:	40014000 	.word	0x40014000
 8001e38:	40014400 	.word	0x40014400
 8001e3c:	40014800 	.word	0x40014800

08001e40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e40:	480d      	ldr	r0, [pc, #52]	; (8001e78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e42:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e44:	480d      	ldr	r0, [pc, #52]	; (8001e7c <LoopForever+0x6>)
  ldr r1, =_edata
 8001e46:	490e      	ldr	r1, [pc, #56]	; (8001e80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e48:	4a0e      	ldr	r2, [pc, #56]	; (8001e84 <LoopForever+0xe>)
  movs r3, #0
 8001e4a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001e4c:	e002      	b.n	8001e54 <LoopCopyDataInit>

08001e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e52:	3304      	adds	r3, #4

08001e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e58:	d3f9      	bcc.n	8001e4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e5a:	4a0b      	ldr	r2, [pc, #44]	; (8001e88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e5c:	4c0b      	ldr	r4, [pc, #44]	; (8001e8c <LoopForever+0x16>)
  movs r3, #0
 8001e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e60:	e001      	b.n	8001e66 <LoopFillZerobss>

08001e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e64:	3204      	adds	r2, #4

08001e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e68:	d3fb      	bcc.n	8001e62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e6a:	f7ff fce7 	bl	800183c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e6e:	f006 f97f 	bl	8008170 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e72:	f7ff f8f5 	bl	8001060 <main>

08001e76 <LoopForever>:

LoopForever:
    b LoopForever
 8001e76:	e7fe      	b.n	8001e76 <LoopForever>
  ldr   r0, =_estack
 8001e78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e80:	20000440 	.word	0x20000440
  ldr r2, =_sidata
 8001e84:	08009400 	.word	0x08009400
  ldr r2, =_sbss
 8001e88:	20000440 	.word	0x20000440
  ldr r4, =_ebss
 8001e8c:	2000088c 	.word	0x2000088c

08001e90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e90:	e7fe      	b.n	8001e90 <ADC1_2_IRQHandler>

08001e92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e9c:	2003      	movs	r0, #3
 8001e9e:	f001 fc9b 	bl	80037d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	f000 f80e 	bl	8001ec4 <HAL_InitTick>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d002      	beq.n	8001eb4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	71fb      	strb	r3, [r7, #7]
 8001eb2:	e001      	b.n	8001eb8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001eb4:	f7ff faae 	bl	8001414 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001eb8:	79fb      	ldrb	r3, [r7, #7]

}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
	...

08001ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001ed0:	4b16      	ldr	r3, [pc, #88]	; (8001f2c <HAL_InitTick+0x68>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d022      	beq.n	8001f1e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ed8:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <HAL_InitTick+0x6c>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	4b13      	ldr	r3, [pc, #76]	; (8001f2c <HAL_InitTick+0x68>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ee4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eec:	4618      	mov	r0, r3
 8001eee:	f001 fca6 	bl	800383e <HAL_SYSTICK_Config>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d10f      	bne.n	8001f18 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b0f      	cmp	r3, #15
 8001efc:	d809      	bhi.n	8001f12 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001efe:	2200      	movs	r2, #0
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f06:	f001 fc72 	bl	80037ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f0a:	4a0a      	ldr	r2, [pc, #40]	; (8001f34 <HAL_InitTick+0x70>)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6013      	str	r3, [r2, #0]
 8001f10:	e007      	b.n	8001f22 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	73fb      	strb	r3, [r7, #15]
 8001f16:	e004      	b.n	8001f22 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	73fb      	strb	r3, [r7, #15]
 8001f1c:	e001      	b.n	8001f22 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	200003d4 	.word	0x200003d4
 8001f30:	200003cc 	.word	0x200003cc
 8001f34:	200003d0 	.word	0x200003d0

08001f38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f3c:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <HAL_IncTick+0x1c>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <HAL_IncTick+0x20>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4413      	add	r3, r2
 8001f46:	4a03      	ldr	r2, [pc, #12]	; (8001f54 <HAL_IncTick+0x1c>)
 8001f48:	6013      	str	r3, [r2, #0]
}
 8001f4a:	bf00      	nop
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	20000884 	.word	0x20000884
 8001f58:	200003d4 	.word	0x200003d4

08001f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f60:	4b03      	ldr	r3, [pc, #12]	; (8001f70 <HAL_GetTick+0x14>)
 8001f62:	681b      	ldr	r3, [r3, #0]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	20000884 	.word	0x20000884

08001f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f7c:	f7ff ffee 	bl	8001f5c <HAL_GetTick>
 8001f80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f8c:	d004      	beq.n	8001f98 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f8e:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <HAL_Delay+0x40>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	4413      	add	r3, r2
 8001f96:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f98:	bf00      	nop
 8001f9a:	f7ff ffdf 	bl	8001f5c <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d8f7      	bhi.n	8001f9a <HAL_Delay+0x26>
  {
  }
}
 8001faa:	bf00      	nop
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	200003d4 	.word	0x200003d4

08001fb8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	609a      	str	r2, [r3, #8]
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
 8001fe6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002014:	4618      	mov	r0, r3
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002020:	b490      	push	{r4, r7}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
 800202c:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	3360      	adds	r3, #96	; 0x60
 8002032:	461a      	mov	r2, r3
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800203c:	6822      	ldr	r2, [r4, #0]
 800203e:	4b08      	ldr	r3, [pc, #32]	; (8002060 <LL_ADC_SetOffset+0x40>)
 8002040:	4013      	ands	r3, r2
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	430a      	orrs	r2, r1
 800204c:	4313      	orrs	r3, r2
 800204e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002052:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002054:	bf00      	nop
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bc90      	pop	{r4, r7}
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	03fff000 	.word	0x03fff000

08002064 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002064:	b490      	push	{r4, r7}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3360      	adds	r3, #96	; 0x60
 8002072:	461a      	mov	r2, r3
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4413      	add	r3, r2
 800207a:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800207c:	6823      	ldr	r3, [r4, #0]
 800207e:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002082:	4618      	mov	r0, r3
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bc90      	pop	{r4, r7}
 800208a:	4770      	bx	lr

0800208c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800208c:	b490      	push	{r4, r7}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	3360      	adds	r3, #96	; 0x60
 800209c:	461a      	mov	r2, r3
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80020a6:	6823      	ldr	r3, [r4, #0]
 80020a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80020b2:	bf00      	nop
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc90      	pop	{r4, r7}
 80020ba:	4770      	bx	lr

080020bc <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80020bc:	b490      	push	{r4, r7}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	3360      	adds	r3, #96	; 0x60
 80020cc:	461a      	mov	r2, r3
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80020d6:	6823      	ldr	r3, [r4, #0]
 80020d8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4313      	orrs	r3, r2
 80020e0:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80020e2:	bf00      	nop
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc90      	pop	{r4, r7}
 80020ea:	4770      	bx	lr

080020ec <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80020ec:	b490      	push	{r4, r7}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	3360      	adds	r3, #96	; 0x60
 80020fc:	461a      	mov	r2, r3
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4413      	add	r3, r2
 8002104:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002106:	6823      	ldr	r3, [r4, #0]
 8002108:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4313      	orrs	r3, r2
 8002110:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002112:	bf00      	nop
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bc90      	pop	{r4, r7}
 800211a:	4770      	bx	lr

0800211c <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	431a      	orrs	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	615a      	str	r2, [r3, #20]
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002142:	b490      	push	{r4, r7}
 8002144:	b084      	sub	sp, #16
 8002146:	af00      	add	r7, sp, #0
 8002148:	60f8      	str	r0, [r7, #12]
 800214a:	60b9      	str	r1, [r7, #8]
 800214c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	3330      	adds	r3, #48	; 0x30
 8002152:	461a      	mov	r2, r3
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	0a1b      	lsrs	r3, r3, #8
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	f003 030c 	and.w	r3, r3, #12
 800215e:	4413      	add	r3, r2
 8002160:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002162:	6822      	ldr	r2, [r4, #0]
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	f003 031f 	and.w	r3, r3, #31
 800216a:	211f      	movs	r1, #31
 800216c:	fa01 f303 	lsl.w	r3, r1, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	401a      	ands	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	0e9b      	lsrs	r3, r3, #26
 8002178:	f003 011f 	and.w	r1, r3, #31
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	f003 031f 	and.w	r3, r3, #31
 8002182:	fa01 f303 	lsl.w	r3, r1, r3
 8002186:	4313      	orrs	r3, r2
 8002188:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800218a:	bf00      	nop
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bc90      	pop	{r4, r7}
 8002192:	4770      	bx	lr

08002194 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002194:	b490      	push	{r4, r7}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	3314      	adds	r3, #20
 80021a4:	461a      	mov	r2, r3
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	0e5b      	lsrs	r3, r3, #25
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	4413      	add	r3, r2
 80021b2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80021b4:	6822      	ldr	r2, [r4, #0]
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	0d1b      	lsrs	r3, r3, #20
 80021ba:	f003 031f 	and.w	r3, r3, #31
 80021be:	2107      	movs	r1, #7
 80021c0:	fa01 f303 	lsl.w	r3, r1, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	401a      	ands	r2, r3
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	0d1b      	lsrs	r3, r3, #20
 80021cc:	f003 031f 	and.w	r3, r3, #31
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	fa01 f303 	lsl.w	r3, r1, r3
 80021d6:	4313      	orrs	r3, r2
 80021d8:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80021da:	bf00      	nop
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc90      	pop	{r4, r7}
 80021e2:	4770      	bx	lr

080021e4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021fc:	43db      	mvns	r3, r3
 80021fe:	401a      	ands	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f003 0318 	and.w	r3, r3, #24
 8002206:	4908      	ldr	r1, [pc, #32]	; (8002228 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002208:	40d9      	lsrs	r1, r3
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	400b      	ands	r3, r1
 800220e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002212:	431a      	orrs	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800221a:	bf00      	nop
 800221c:	3714      	adds	r7, #20
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	0007ffff 	.word	0x0007ffff

0800222c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800223c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6093      	str	r3, [r2, #8]
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002260:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002264:	d101      	bne.n	800226a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002266:	2301      	movs	r3, #1
 8002268:	e000      	b.n	800226c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002288:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800228c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022b4:	d101      	bne.n	80022ba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80022b6:	2301      	movs	r3, #1
 80022b8:	e000      	b.n	80022bc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d101      	bne.n	80022e0 <LL_ADC_IsEnabled+0x18>
 80022dc:	2301      	movs	r3, #1
 80022de:	e000      	b.n	80022e2 <LL_ADC_IsEnabled+0x1a>
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 0304 	and.w	r3, r3, #4
 80022fe:	2b04      	cmp	r3, #4
 8002300:	d101      	bne.n	8002306 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002302:	2301      	movs	r3, #1
 8002304:	e000      	b.n	8002308 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f003 0308 	and.w	r3, r3, #8
 8002324:	2b08      	cmp	r3, #8
 8002326:	d101      	bne.n	800232c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002328:	2301      	movs	r3, #1
 800232a:	e000      	b.n	800232e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
	...

0800233c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800233c:	b590      	push	{r4, r7, lr}
 800233e:	b089      	sub	sp, #36	; 0x24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002344:	2300      	movs	r3, #0
 8002346:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002348:	2300      	movs	r3, #0
 800234a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e1ad      	b.n	80026b2 <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002360:	2b00      	cmp	r3, #0
 8002362:	d109      	bne.n	8002378 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f7fe f88b 	bl	8000480 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff ff67 	bl	8002250 <LL_ADC_IsDeepPowerDownEnabled>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d004      	beq.n	8002392 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff ff4d 	bl	800222c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff ff82 	bl	80022a0 <LL_ADC_IsInternalRegulatorEnabled>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d113      	bne.n	80023ca <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff ff66 	bl	8002278 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80023ac:	4b9e      	ldr	r3, [pc, #632]	; (8002628 <HAL_ADC_Init+0x2ec>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	099b      	lsrs	r3, r3, #6
 80023b2:	4a9e      	ldr	r2, [pc, #632]	; (800262c <HAL_ADC_Init+0x2f0>)
 80023b4:	fba2 2303 	umull	r2, r3, r2, r3
 80023b8:	099b      	lsrs	r3, r3, #6
 80023ba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80023bc:	e002      	b.n	80023c4 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	3b01      	subs	r3, #1
 80023c2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1f9      	bne.n	80023be <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff ff66 	bl	80022a0 <LL_ADC_IsInternalRegulatorEnabled>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10d      	bne.n	80023f6 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023de:	f043 0210 	orr.w	r2, r3, #16
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ea:	f043 0201 	orr.w	r2, r3, #1
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff ff77 	bl	80022ee <LL_ADC_REG_IsConversionOngoing>
 8002400:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002406:	f003 0310 	and.w	r3, r3, #16
 800240a:	2b00      	cmp	r3, #0
 800240c:	f040 8148 	bne.w	80026a0 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	2b00      	cmp	r3, #0
 8002414:	f040 8144 	bne.w	80026a0 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002420:	f043 0202 	orr.w	r2, r3, #2
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff ff4b 	bl	80022c8 <LL_ADC_IsEnabled>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d141      	bne.n	80024bc <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002440:	d004      	beq.n	800244c <HAL_ADC_Init+0x110>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a7a      	ldr	r2, [pc, #488]	; (8002630 <HAL_ADC_Init+0x2f4>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d10f      	bne.n	800246c <HAL_ADC_Init+0x130>
 800244c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002450:	f7ff ff3a 	bl	80022c8 <LL_ADC_IsEnabled>
 8002454:	4604      	mov	r4, r0
 8002456:	4876      	ldr	r0, [pc, #472]	; (8002630 <HAL_ADC_Init+0x2f4>)
 8002458:	f7ff ff36 	bl	80022c8 <LL_ADC_IsEnabled>
 800245c:	4603      	mov	r3, r0
 800245e:	4323      	orrs	r3, r4
 8002460:	2b00      	cmp	r3, #0
 8002462:	bf0c      	ite	eq
 8002464:	2301      	moveq	r3, #1
 8002466:	2300      	movne	r3, #0
 8002468:	b2db      	uxtb	r3, r3
 800246a:	e012      	b.n	8002492 <HAL_ADC_Init+0x156>
 800246c:	4871      	ldr	r0, [pc, #452]	; (8002634 <HAL_ADC_Init+0x2f8>)
 800246e:	f7ff ff2b 	bl	80022c8 <LL_ADC_IsEnabled>
 8002472:	4604      	mov	r4, r0
 8002474:	4870      	ldr	r0, [pc, #448]	; (8002638 <HAL_ADC_Init+0x2fc>)
 8002476:	f7ff ff27 	bl	80022c8 <LL_ADC_IsEnabled>
 800247a:	4603      	mov	r3, r0
 800247c:	431c      	orrs	r4, r3
 800247e:	486f      	ldr	r0, [pc, #444]	; (800263c <HAL_ADC_Init+0x300>)
 8002480:	f7ff ff22 	bl	80022c8 <LL_ADC_IsEnabled>
 8002484:	4603      	mov	r3, r0
 8002486:	4323      	orrs	r3, r4
 8002488:	2b00      	cmp	r3, #0
 800248a:	bf0c      	ite	eq
 800248c:	2301      	moveq	r3, #1
 800248e:	2300      	movne	r3, #0
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d012      	beq.n	80024bc <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800249e:	d004      	beq.n	80024aa <HAL_ADC_Init+0x16e>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a62      	ldr	r2, [pc, #392]	; (8002630 <HAL_ADC_Init+0x2f4>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d101      	bne.n	80024ae <HAL_ADC_Init+0x172>
 80024aa:	4a65      	ldr	r2, [pc, #404]	; (8002640 <HAL_ADC_Init+0x304>)
 80024ac:	e000      	b.n	80024b0 <HAL_ADC_Init+0x174>
 80024ae:	4a65      	ldr	r2, [pc, #404]	; (8002644 <HAL_ADC_Init+0x308>)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	4619      	mov	r1, r3
 80024b6:	4610      	mov	r0, r2
 80024b8:	f7ff fd7e 	bl	8001fb8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	7f5b      	ldrb	r3, [r3, #29]
 80024c0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024c6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80024cc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80024d2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024da:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024dc:	4313      	orrs	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d106      	bne.n	80024f8 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ee:	3b01      	subs	r3, #1
 80024f0:	045b      	lsls	r3, r3, #17
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d009      	beq.n	8002514 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002504:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4313      	orrs	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	4b4b      	ldr	r3, [pc, #300]	; (8002648 <HAL_ADC_Init+0x30c>)
 800251c:	4013      	ands	r3, r2
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6812      	ldr	r2, [r2, #0]
 8002522:	69b9      	ldr	r1, [r7, #24]
 8002524:	430b      	orrs	r3, r1
 8002526:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	430a      	orrs	r2, r1
 800253c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff fed3 	bl	80022ee <LL_ADC_REG_IsConversionOngoing>
 8002548:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff fee0 	bl	8002314 <LL_ADC_INJ_IsConversionOngoing>
 8002554:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d17f      	bne.n	800265c <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d17c      	bne.n	800265c <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002566:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800256e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002570:	4313      	orrs	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800257e:	f023 0302 	bic.w	r3, r3, #2
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	6812      	ldr	r2, [r2, #0]
 8002586:	69b9      	ldr	r1, [r7, #24]
 8002588:	430b      	orrs	r3, r1
 800258a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d017      	beq.n	80025c4 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	691a      	ldr	r2, [r3, #16]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80025a2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80025ac:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80025b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6911      	ldr	r1, [r2, #16]
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	6812      	ldr	r2, [r2, #0]
 80025bc:	430b      	orrs	r3, r1
 80025be:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80025c2:	e013      	b.n	80025ec <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	691a      	ldr	r2, [r3, #16]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80025d2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	6812      	ldr	r2, [r2, #0]
 80025e0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80025e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025e8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d12a      	bne.n	800264c <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002600:	f023 0304 	bic.w	r3, r3, #4
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800260c:	4311      	orrs	r1, r2
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002612:	4311      	orrs	r1, r2
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002618:	430a      	orrs	r2, r1
 800261a:	431a      	orrs	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f042 0201 	orr.w	r2, r2, #1
 8002624:	611a      	str	r2, [r3, #16]
 8002626:	e019      	b.n	800265c <HAL_ADC_Init+0x320>
 8002628:	200003cc 	.word	0x200003cc
 800262c:	053e2d63 	.word	0x053e2d63
 8002630:	50000100 	.word	0x50000100
 8002634:	50000400 	.word	0x50000400
 8002638:	50000500 	.word	0x50000500
 800263c:	50000600 	.word	0x50000600
 8002640:	50000300 	.word	0x50000300
 8002644:	50000700 	.word	0x50000700
 8002648:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	691a      	ldr	r2, [r3, #16]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 0201 	bic.w	r2, r2, #1
 800265a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d10c      	bne.n	800267e <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	f023 010f 	bic.w	r1, r3, #15
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	1e5a      	subs	r2, r3, #1
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	631a      	str	r2, [r3, #48]	; 0x30
 800267c:	e007      	b.n	800268e <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 020f 	bic.w	r2, r2, #15
 800268c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002692:	f023 0303 	bic.w	r3, r3, #3
 8002696:	f043 0201 	orr.w	r2, r3, #1
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	65da      	str	r2, [r3, #92]	; 0x5c
 800269e:	e007      	b.n	80026b0 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a4:	f043 0210 	orr.w	r2, r3, #16
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80026b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3724      	adds	r7, #36	; 0x24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd90      	pop	{r4, r7, pc}
 80026ba:	bf00      	nop

080026bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b0a6      	sub	sp, #152	; 0x98
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026c6:	2300      	movs	r3, #0
 80026c8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80026cc:	2300      	movs	r3, #0
 80026ce:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d101      	bne.n	80026de <HAL_ADC_ConfigChannel+0x22>
 80026da:	2302      	movs	r3, #2
 80026dc:	e38e      	b.n	8002dfc <HAL_ADC_ConfigChannel+0x740>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff fdff 	bl	80022ee <LL_ADC_REG_IsConversionOngoing>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f040 836f 	bne.w	8002dd6 <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6818      	ldr	r0, [r3, #0]
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	6859      	ldr	r1, [r3, #4]
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	461a      	mov	r2, r3
 8002706:	f7ff fd1c 	bl	8002142 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff fded 	bl	80022ee <LL_ADC_REG_IsConversionOngoing>
 8002714:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff fdf9 	bl	8002314 <LL_ADC_INJ_IsConversionOngoing>
 8002722:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002726:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800272a:	2b00      	cmp	r3, #0
 800272c:	f040 817b 	bne.w	8002a26 <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002730:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002734:	2b00      	cmp	r3, #0
 8002736:	f040 8176 	bne.w	8002a26 <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002742:	d10f      	bne.n	8002764 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6818      	ldr	r0, [r3, #0]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2200      	movs	r2, #0
 800274e:	4619      	mov	r1, r3
 8002750:	f7ff fd20 	bl	8002194 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff fcdd 	bl	800211c <LL_ADC_SetSamplingTimeCommonConfig>
 8002762:	e00e      	b.n	8002782 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6818      	ldr	r0, [r3, #0]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	6819      	ldr	r1, [r3, #0]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	461a      	mov	r2, r3
 8002772:	f7ff fd0f 	bl	8002194 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2100      	movs	r1, #0
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff fccd 	bl	800211c <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	695a      	ldr	r2, [r3, #20]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	08db      	lsrs	r3, r3, #3
 800278e:	f003 0303 	and.w	r3, r3, #3
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	d022      	beq.n	80027ea <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6818      	ldr	r0, [r3, #0]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	6919      	ldr	r1, [r3, #16]
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027b4:	f7ff fc34 	bl	8002020 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6818      	ldr	r0, [r3, #0]
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	6919      	ldr	r1, [r3, #16]
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	461a      	mov	r2, r3
 80027c6:	f7ff fc79 	bl	80020bc <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6818      	ldr	r0, [r3, #0]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	6919      	ldr	r1, [r3, #16]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	7f1b      	ldrb	r3, [r3, #28]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d102      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x124>
 80027da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027de:	e000      	b.n	80027e2 <HAL_ADC_ConfigChannel+0x126>
 80027e0:	2300      	movs	r3, #0
 80027e2:	461a      	mov	r2, r3
 80027e4:	f7ff fc82 	bl	80020ec <LL_ADC_SetOffsetSaturation>
 80027e8:	e11d      	b.n	8002a26 <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2100      	movs	r1, #0
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff fc37 	bl	8002064 <LL_ADC_GetOffsetChannel>
 80027f6:	4603      	mov	r3, r0
 80027f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10a      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x15a>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2100      	movs	r1, #0
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff fc2c 	bl	8002064 <LL_ADC_GetOffsetChannel>
 800280c:	4603      	mov	r3, r0
 800280e:	0e9b      	lsrs	r3, r3, #26
 8002810:	f003 021f 	and.w	r2, r3, #31
 8002814:	e012      	b.n	800283c <HAL_ADC_ConfigChannel+0x180>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2100      	movs	r1, #0
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff fc21 	bl	8002064 <LL_ADC_GetOffsetChannel>
 8002822:	4603      	mov	r3, r0
 8002824:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002828:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800282c:	fa93 f3a3 	rbit	r3, r3
 8002830:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002832:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002834:	fab3 f383 	clz	r3, r3
 8002838:	b2db      	uxtb	r3, r3
 800283a:	461a      	mov	r2, r3
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002844:	2b00      	cmp	r3, #0
 8002846:	d105      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x198>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	0e9b      	lsrs	r3, r3, #26
 800284e:	f003 031f 	and.w	r3, r3, #31
 8002852:	e00a      	b.n	800286a <HAL_ADC_ConfigChannel+0x1ae>
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800285c:	fa93 f3a3 	rbit	r3, r3
 8002860:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8002862:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002864:	fab3 f383 	clz	r3, r3
 8002868:	b2db      	uxtb	r3, r3
 800286a:	429a      	cmp	r2, r3
 800286c:	d106      	bne.n	800287c <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2200      	movs	r2, #0
 8002874:	2100      	movs	r1, #0
 8002876:	4618      	mov	r0, r3
 8002878:	f7ff fc08 	bl	800208c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2101      	movs	r1, #1
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff fbee 	bl	8002064 <LL_ADC_GetOffsetChannel>
 8002888:	4603      	mov	r3, r0
 800288a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10a      	bne.n	80028a8 <HAL_ADC_ConfigChannel+0x1ec>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2101      	movs	r1, #1
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff fbe3 	bl	8002064 <LL_ADC_GetOffsetChannel>
 800289e:	4603      	mov	r3, r0
 80028a0:	0e9b      	lsrs	r3, r3, #26
 80028a2:	f003 021f 	and.w	r2, r3, #31
 80028a6:	e010      	b.n	80028ca <HAL_ADC_ConfigChannel+0x20e>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2101      	movs	r1, #1
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff fbd8 	bl	8002064 <LL_ADC_GetOffsetChannel>
 80028b4:	4603      	mov	r3, r0
 80028b6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028ba:	fa93 f3a3 	rbit	r3, r3
 80028be:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80028c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028c2:	fab3 f383 	clz	r3, r3
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	461a      	mov	r2, r3
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d105      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x226>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	0e9b      	lsrs	r3, r3, #26
 80028dc:	f003 031f 	and.w	r3, r3, #31
 80028e0:	e00a      	b.n	80028f8 <HAL_ADC_ConfigChannel+0x23c>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028ea:	fa93 f3a3 	rbit	r3, r3
 80028ee:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80028f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028f2:	fab3 f383 	clz	r3, r3
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d106      	bne.n	800290a <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2200      	movs	r2, #0
 8002902:	2101      	movs	r1, #1
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff fbc1 	bl	800208c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2102      	movs	r1, #2
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff fba7 	bl	8002064 <LL_ADC_GetOffsetChannel>
 8002916:	4603      	mov	r3, r0
 8002918:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800291c:	2b00      	cmp	r3, #0
 800291e:	d10a      	bne.n	8002936 <HAL_ADC_ConfigChannel+0x27a>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2102      	movs	r1, #2
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff fb9c 	bl	8002064 <LL_ADC_GetOffsetChannel>
 800292c:	4603      	mov	r3, r0
 800292e:	0e9b      	lsrs	r3, r3, #26
 8002930:	f003 021f 	and.w	r2, r3, #31
 8002934:	e010      	b.n	8002958 <HAL_ADC_ConfigChannel+0x29c>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2102      	movs	r1, #2
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff fb91 	bl	8002064 <LL_ADC_GetOffsetChannel>
 8002942:	4603      	mov	r3, r0
 8002944:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002946:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002948:	fa93 f3a3 	rbit	r3, r3
 800294c:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 800294e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002950:	fab3 f383 	clz	r3, r3
 8002954:	b2db      	uxtb	r3, r3
 8002956:	461a      	mov	r2, r3
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002960:	2b00      	cmp	r3, #0
 8002962:	d105      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x2b4>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	0e9b      	lsrs	r3, r3, #26
 800296a:	f003 031f 	and.w	r3, r3, #31
 800296e:	e00a      	b.n	8002986 <HAL_ADC_ConfigChannel+0x2ca>
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002976:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002978:	fa93 f3a3 	rbit	r3, r3
 800297c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800297e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002980:	fab3 f383 	clz	r3, r3
 8002984:	b2db      	uxtb	r3, r3
 8002986:	429a      	cmp	r2, r3
 8002988:	d106      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2200      	movs	r2, #0
 8002990:	2102      	movs	r1, #2
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff fb7a 	bl	800208c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2103      	movs	r1, #3
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff fb60 	bl	8002064 <LL_ADC_GetOffsetChannel>
 80029a4:	4603      	mov	r3, r0
 80029a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10a      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x308>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2103      	movs	r1, #3
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff fb55 	bl	8002064 <LL_ADC_GetOffsetChannel>
 80029ba:	4603      	mov	r3, r0
 80029bc:	0e9b      	lsrs	r3, r3, #26
 80029be:	f003 021f 	and.w	r2, r3, #31
 80029c2:	e010      	b.n	80029e6 <HAL_ADC_ConfigChannel+0x32a>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2103      	movs	r1, #3
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff fb4a 	bl	8002064 <LL_ADC_GetOffsetChannel>
 80029d0:	4603      	mov	r3, r0
 80029d2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029d6:	fa93 f3a3 	rbit	r3, r3
 80029da:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80029dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029de:	fab3 f383 	clz	r3, r3
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	461a      	mov	r2, r3
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d105      	bne.n	80029fe <HAL_ADC_ConfigChannel+0x342>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	0e9b      	lsrs	r3, r3, #26
 80029f8:	f003 031f 	and.w	r3, r3, #31
 80029fc:	e00a      	b.n	8002a14 <HAL_ADC_ConfigChannel+0x358>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a06:	fa93 f3a3 	rbit	r3, r3
 8002a0a:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8002a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a0e:	fab3 f383 	clz	r3, r3
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d106      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	2103      	movs	r1, #3
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff fb33 	bl	800208c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff fc4c 	bl	80022c8 <LL_ADC_IsEnabled>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f040 810c 	bne.w	8002c50 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6818      	ldr	r0, [r3, #0]
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	6819      	ldr	r1, [r3, #0]
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	461a      	mov	r2, r3
 8002a46:	f7ff fbcd 	bl	80021e4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	4aaf      	ldr	r2, [pc, #700]	; (8002d0c <HAL_ADC_ConfigChannel+0x650>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	f040 80fd 	bne.w	8002c50 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10b      	bne.n	8002a7e <HAL_ADC_ConfigChannel+0x3c2>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	0e9b      	lsrs	r3, r3, #26
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	f003 031f 	and.w	r3, r3, #31
 8002a72:	2b09      	cmp	r3, #9
 8002a74:	bf94      	ite	ls
 8002a76:	2301      	movls	r3, #1
 8002a78:	2300      	movhi	r3, #0
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	e012      	b.n	8002aa4 <HAL_ADC_ConfigChannel+0x3e8>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a86:	fa93 f3a3 	rbit	r3, r3
 8002a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a8e:	fab3 f383 	clz	r3, r3
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	3301      	adds	r3, #1
 8002a96:	f003 031f 	and.w	r3, r3, #31
 8002a9a:	2b09      	cmp	r3, #9
 8002a9c:	bf94      	ite	ls
 8002a9e:	2301      	movls	r3, #1
 8002aa0:	2300      	movhi	r3, #0
 8002aa2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d064      	beq.n	8002b72 <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d107      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x408>
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	0e9b      	lsrs	r3, r3, #26
 8002aba:	3301      	adds	r3, #1
 8002abc:	069b      	lsls	r3, r3, #26
 8002abe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ac2:	e00e      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x426>
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002acc:	fa93 f3a3 	rbit	r3, r3
 8002ad0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad4:	fab3 f383 	clz	r3, r3
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	3301      	adds	r3, #1
 8002adc:	069b      	lsls	r3, r3, #26
 8002ade:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d109      	bne.n	8002b02 <HAL_ADC_ConfigChannel+0x446>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	0e9b      	lsrs	r3, r3, #26
 8002af4:	3301      	adds	r3, #1
 8002af6:	f003 031f 	and.w	r3, r3, #31
 8002afa:	2101      	movs	r1, #1
 8002afc:	fa01 f303 	lsl.w	r3, r1, r3
 8002b00:	e010      	b.n	8002b24 <HAL_ADC_ConfigChannel+0x468>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0a:	fa93 f3a3 	rbit	r3, r3
 8002b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b12:	fab3 f383 	clz	r3, r3
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	3301      	adds	r3, #1
 8002b1a:	f003 031f 	and.w	r3, r3, #31
 8002b1e:	2101      	movs	r1, #1
 8002b20:	fa01 f303 	lsl.w	r3, r1, r3
 8002b24:	ea42 0103 	orr.w	r1, r2, r3
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10a      	bne.n	8002b4a <HAL_ADC_ConfigChannel+0x48e>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	0e9b      	lsrs	r3, r3, #26
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	f003 021f 	and.w	r2, r3, #31
 8002b40:	4613      	mov	r3, r2
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	4413      	add	r3, r2
 8002b46:	051b      	lsls	r3, r3, #20
 8002b48:	e011      	b.n	8002b6e <HAL_ADC_ConfigChannel+0x4b2>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b52:	fa93 f3a3 	rbit	r3, r3
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5a:	fab3 f383 	clz	r3, r3
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	3301      	adds	r3, #1
 8002b62:	f003 021f 	and.w	r2, r3, #31
 8002b66:	4613      	mov	r3, r2
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	4413      	add	r3, r2
 8002b6c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b6e:	430b      	orrs	r3, r1
 8002b70:	e069      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d107      	bne.n	8002b8e <HAL_ADC_ConfigChannel+0x4d2>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	0e9b      	lsrs	r3, r3, #26
 8002b84:	3301      	adds	r3, #1
 8002b86:	069b      	lsls	r3, r3, #26
 8002b88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b8c:	e00e      	b.n	8002bac <HAL_ADC_ConfigChannel+0x4f0>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b94:	6a3b      	ldr	r3, [r7, #32]
 8002b96:	fa93 f3a3 	rbit	r3, r3
 8002b9a:	61fb      	str	r3, [r7, #28]
  return result;
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	fab3 f383 	clz	r3, r3
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	069b      	lsls	r3, r3, #26
 8002ba8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d109      	bne.n	8002bcc <HAL_ADC_ConfigChannel+0x510>
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	0e9b      	lsrs	r3, r3, #26
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	f003 031f 	and.w	r3, r3, #31
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bca:	e010      	b.n	8002bee <HAL_ADC_ConfigChannel+0x532>
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	fa93 f3a3 	rbit	r3, r3
 8002bd8:	617b      	str	r3, [r7, #20]
  return result;
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	fab3 f383 	clz	r3, r3
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	3301      	adds	r3, #1
 8002be4:	f003 031f 	and.w	r3, r3, #31
 8002be8:	2101      	movs	r1, #1
 8002bea:	fa01 f303 	lsl.w	r3, r1, r3
 8002bee:	ea42 0103 	orr.w	r1, r2, r3
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10d      	bne.n	8002c1a <HAL_ADC_ConfigChannel+0x55e>
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	0e9b      	lsrs	r3, r3, #26
 8002c04:	3301      	adds	r3, #1
 8002c06:	f003 021f 	and.w	r2, r3, #31
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	4413      	add	r3, r2
 8002c10:	3b1e      	subs	r3, #30
 8002c12:	051b      	lsls	r3, r3, #20
 8002c14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c18:	e014      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x588>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	fa93 f3a3 	rbit	r3, r3
 8002c26:	60fb      	str	r3, [r7, #12]
  return result;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	fab3 f383 	clz	r3, r3
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	3301      	adds	r3, #1
 8002c32:	f003 021f 	and.w	r2, r3, #31
 8002c36:	4613      	mov	r3, r2
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	4413      	add	r3, r2
 8002c3c:	3b1e      	subs	r3, #30
 8002c3e:	051b      	lsls	r3, r3, #20
 8002c40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c44:	430b      	orrs	r3, r1
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	6892      	ldr	r2, [r2, #8]
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	f7ff faa2 	bl	8002194 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	4b2e      	ldr	r3, [pc, #184]	; (8002d10 <HAL_ADC_ConfigChannel+0x654>)
 8002c56:	4013      	ands	r3, r2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 80c9 	beq.w	8002df0 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c66:	d004      	beq.n	8002c72 <HAL_ADC_ConfigChannel+0x5b6>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a29      	ldr	r2, [pc, #164]	; (8002d14 <HAL_ADC_ConfigChannel+0x658>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d101      	bne.n	8002c76 <HAL_ADC_ConfigChannel+0x5ba>
 8002c72:	4b29      	ldr	r3, [pc, #164]	; (8002d18 <HAL_ADC_ConfigChannel+0x65c>)
 8002c74:	e000      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x5bc>
 8002c76:	4b29      	ldr	r3, [pc, #164]	; (8002d1c <HAL_ADC_ConfigChannel+0x660>)
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff f9c3 	bl	8002004 <LL_ADC_GetCommonPathInternalCh>
 8002c7e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a26      	ldr	r2, [pc, #152]	; (8002d20 <HAL_ADC_ConfigChannel+0x664>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d004      	beq.n	8002c96 <HAL_ADC_ConfigChannel+0x5da>
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a24      	ldr	r2, [pc, #144]	; (8002d24 <HAL_ADC_ConfigChannel+0x668>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d14e      	bne.n	8002d34 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d148      	bne.n	8002d34 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002caa:	d005      	beq.n	8002cb8 <HAL_ADC_ConfigChannel+0x5fc>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a1d      	ldr	r2, [pc, #116]	; (8002d28 <HAL_ADC_ConfigChannel+0x66c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	f040 8099 	bne.w	8002dea <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cc0:	d004      	beq.n	8002ccc <HAL_ADC_ConfigChannel+0x610>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a13      	ldr	r2, [pc, #76]	; (8002d14 <HAL_ADC_ConfigChannel+0x658>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d101      	bne.n	8002cd0 <HAL_ADC_ConfigChannel+0x614>
 8002ccc:	4a12      	ldr	r2, [pc, #72]	; (8002d18 <HAL_ADC_ConfigChannel+0x65c>)
 8002cce:	e000      	b.n	8002cd2 <HAL_ADC_ConfigChannel+0x616>
 8002cd0:	4a12      	ldr	r2, [pc, #72]	; (8002d1c <HAL_ADC_ConfigChannel+0x660>)
 8002cd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cd6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cda:	4619      	mov	r1, r3
 8002cdc:	4610      	mov	r0, r2
 8002cde:	f7ff f97e 	bl	8001fde <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002ce2:	4b12      	ldr	r3, [pc, #72]	; (8002d2c <HAL_ADC_ConfigChannel+0x670>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	099b      	lsrs	r3, r3, #6
 8002ce8:	4a11      	ldr	r2, [pc, #68]	; (8002d30 <HAL_ADC_ConfigChannel+0x674>)
 8002cea:	fba2 2303 	umull	r2, r3, r2, r3
 8002cee:	099a      	lsrs	r2, r3, #6
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	4413      	add	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002cfa:	e002      	b.n	8002d02 <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1f9      	bne.n	8002cfc <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d08:	e06f      	b.n	8002dea <HAL_ADC_ConfigChannel+0x72e>
 8002d0a:	bf00      	nop
 8002d0c:	407f0000 	.word	0x407f0000
 8002d10:	80080000 	.word	0x80080000
 8002d14:	50000100 	.word	0x50000100
 8002d18:	50000300 	.word	0x50000300
 8002d1c:	50000700 	.word	0x50000700
 8002d20:	c3210000 	.word	0xc3210000
 8002d24:	90c00010 	.word	0x90c00010
 8002d28:	50000600 	.word	0x50000600
 8002d2c:	200003cc 	.word	0x200003cc
 8002d30:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a32      	ldr	r2, [pc, #200]	; (8002e04 <HAL_ADC_ConfigChannel+0x748>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d125      	bne.n	8002d8a <HAL_ADC_ConfigChannel+0x6ce>
 8002d3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d11f      	bne.n	8002d8a <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a2e      	ldr	r2, [pc, #184]	; (8002e08 <HAL_ADC_ConfigChannel+0x74c>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d104      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x6a2>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a2c      	ldr	r2, [pc, #176]	; (8002e0c <HAL_ADC_ConfigChannel+0x750>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d047      	beq.n	8002dee <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d66:	d004      	beq.n	8002d72 <HAL_ADC_ConfigChannel+0x6b6>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a26      	ldr	r2, [pc, #152]	; (8002e08 <HAL_ADC_ConfigChannel+0x74c>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d101      	bne.n	8002d76 <HAL_ADC_ConfigChannel+0x6ba>
 8002d72:	4a27      	ldr	r2, [pc, #156]	; (8002e10 <HAL_ADC_ConfigChannel+0x754>)
 8002d74:	e000      	b.n	8002d78 <HAL_ADC_ConfigChannel+0x6bc>
 8002d76:	4a27      	ldr	r2, [pc, #156]	; (8002e14 <HAL_ADC_ConfigChannel+0x758>)
 8002d78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d80:	4619      	mov	r1, r3
 8002d82:	4610      	mov	r0, r2
 8002d84:	f7ff f92b 	bl	8001fde <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d88:	e031      	b.n	8002dee <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a22      	ldr	r2, [pc, #136]	; (8002e18 <HAL_ADC_ConfigChannel+0x75c>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d12d      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d127      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a18      	ldr	r2, [pc, #96]	; (8002e08 <HAL_ADC_ConfigChannel+0x74c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d022      	beq.n	8002df0 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002db2:	d004      	beq.n	8002dbe <HAL_ADC_ConfigChannel+0x702>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a13      	ldr	r2, [pc, #76]	; (8002e08 <HAL_ADC_ConfigChannel+0x74c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d101      	bne.n	8002dc2 <HAL_ADC_ConfigChannel+0x706>
 8002dbe:	4a14      	ldr	r2, [pc, #80]	; (8002e10 <HAL_ADC_ConfigChannel+0x754>)
 8002dc0:	e000      	b.n	8002dc4 <HAL_ADC_ConfigChannel+0x708>
 8002dc2:	4a14      	ldr	r2, [pc, #80]	; (8002e14 <HAL_ADC_ConfigChannel+0x758>)
 8002dc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dc8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4610      	mov	r0, r2
 8002dd0:	f7ff f905 	bl	8001fde <LL_ADC_SetCommonPathInternalCh>
 8002dd4:	e00c      	b.n	8002df0 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dda:	f043 0220 	orr.w	r2, r3, #32
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8002de8:	e002      	b.n	8002df0 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dea:	bf00      	nop
 8002dec:	e000      	b.n	8002df0 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002dee:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002df8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3798      	adds	r7, #152	; 0x98
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	c7520000 	.word	0xc7520000
 8002e08:	50000100 	.word	0x50000100
 8002e0c:	50000500 	.word	0x50000500
 8002e10:	50000300 	.word	0x50000300
 8002e14:	50000700 	.word	0x50000700
 8002e18:	cb840000 	.word	0xcb840000

08002e1c <LL_ADC_IsEnabled>:
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d101      	bne.n	8002e34 <LL_ADC_IsEnabled+0x18>
 8002e30:	2301      	movs	r3, #1
 8002e32:	e000      	b.n	8002e36 <LL_ADC_IsEnabled+0x1a>
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <LL_ADC_REG_IsConversionOngoing>:
{
 8002e42:	b480      	push	{r7}
 8002e44:	b083      	sub	sp, #12
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f003 0304 	and.w	r3, r3, #4
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	d101      	bne.n	8002e5a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e56:	2301      	movs	r3, #1
 8002e58:	e000      	b.n	8002e5c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002e68:	b590      	push	{r4, r7, lr}
 8002e6a:	b0a1      	sub	sp, #132	; 0x84
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e72:	2300      	movs	r3, #0
 8002e74:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d101      	bne.n	8002e86 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002e82:	2302      	movs	r3, #2
 8002e84:	e0e3      	b.n	800304e <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e96:	d102      	bne.n	8002e9e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002e98:	4b6f      	ldr	r3, [pc, #444]	; (8003058 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002e9a:	60bb      	str	r3, [r7, #8]
 8002e9c:	e009      	b.n	8002eb2 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a6e      	ldr	r2, [pc, #440]	; (800305c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d102      	bne.n	8002eae <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8002ea8:	4b6d      	ldr	r3, [pc, #436]	; (8003060 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002eaa:	60bb      	str	r3, [r7, #8]
 8002eac:	e001      	b.n	8002eb2 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10b      	bne.n	8002ed0 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ebc:	f043 0220 	orr.w	r2, r3, #32
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e0be      	b.n	800304e <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff ffb5 	bl	8002e42 <LL_ADC_REG_IsConversionOngoing>
 8002ed8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff ffaf 	bl	8002e42 <LL_ADC_REG_IsConversionOngoing>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f040 80a0 	bne.w	800302c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002eec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f040 809c 	bne.w	800302c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002efc:	d004      	beq.n	8002f08 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a55      	ldr	r2, [pc, #340]	; (8003058 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d101      	bne.n	8002f0c <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8002f08:	4b56      	ldr	r3, [pc, #344]	; (8003064 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002f0a:	e000      	b.n	8002f0e <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8002f0c:	4b56      	ldr	r3, [pc, #344]	; (8003068 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002f0e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d04b      	beq.n	8002fb0 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002f18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	6859      	ldr	r1, [r3, #4]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f2a:	035b      	lsls	r3, r3, #13
 8002f2c:	430b      	orrs	r3, r1
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f32:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f3c:	d004      	beq.n	8002f48 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a45      	ldr	r2, [pc, #276]	; (8003058 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d10f      	bne.n	8002f68 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8002f48:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002f4c:	f7ff ff66 	bl	8002e1c <LL_ADC_IsEnabled>
 8002f50:	4604      	mov	r4, r0
 8002f52:	4841      	ldr	r0, [pc, #260]	; (8003058 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002f54:	f7ff ff62 	bl	8002e1c <LL_ADC_IsEnabled>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	4323      	orrs	r3, r4
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	bf0c      	ite	eq
 8002f60:	2301      	moveq	r3, #1
 8002f62:	2300      	movne	r3, #0
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	e012      	b.n	8002f8e <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8002f68:	483c      	ldr	r0, [pc, #240]	; (800305c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8002f6a:	f7ff ff57 	bl	8002e1c <LL_ADC_IsEnabled>
 8002f6e:	4604      	mov	r4, r0
 8002f70:	483b      	ldr	r0, [pc, #236]	; (8003060 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002f72:	f7ff ff53 	bl	8002e1c <LL_ADC_IsEnabled>
 8002f76:	4603      	mov	r3, r0
 8002f78:	431c      	orrs	r4, r3
 8002f7a:	483c      	ldr	r0, [pc, #240]	; (800306c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002f7c:	f7ff ff4e 	bl	8002e1c <LL_ADC_IsEnabled>
 8002f80:	4603      	mov	r3, r0
 8002f82:	4323      	orrs	r3, r4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	bf0c      	ite	eq
 8002f88:	2301      	moveq	r3, #1
 8002f8a:	2300      	movne	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d056      	beq.n	8003040 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f9a:	f023 030f 	bic.w	r3, r3, #15
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	6811      	ldr	r1, [r2, #0]
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	6892      	ldr	r2, [r2, #8]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fac:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fae:	e047      	b.n	8003040 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002fb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fba:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fc4:	d004      	beq.n	8002fd0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a23      	ldr	r2, [pc, #140]	; (8003058 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d10f      	bne.n	8002ff0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002fd0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002fd4:	f7ff ff22 	bl	8002e1c <LL_ADC_IsEnabled>
 8002fd8:	4604      	mov	r4, r0
 8002fda:	481f      	ldr	r0, [pc, #124]	; (8003058 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002fdc:	f7ff ff1e 	bl	8002e1c <LL_ADC_IsEnabled>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	4323      	orrs	r3, r4
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	bf0c      	ite	eq
 8002fe8:	2301      	moveq	r3, #1
 8002fea:	2300      	movne	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	e012      	b.n	8003016 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8002ff0:	481a      	ldr	r0, [pc, #104]	; (800305c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8002ff2:	f7ff ff13 	bl	8002e1c <LL_ADC_IsEnabled>
 8002ff6:	4604      	mov	r4, r0
 8002ff8:	4819      	ldr	r0, [pc, #100]	; (8003060 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ffa:	f7ff ff0f 	bl	8002e1c <LL_ADC_IsEnabled>
 8002ffe:	4603      	mov	r3, r0
 8003000:	431c      	orrs	r4, r3
 8003002:	481a      	ldr	r0, [pc, #104]	; (800306c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003004:	f7ff ff0a 	bl	8002e1c <LL_ADC_IsEnabled>
 8003008:	4603      	mov	r3, r0
 800300a:	4323      	orrs	r3, r4
 800300c:	2b00      	cmp	r3, #0
 800300e:	bf0c      	ite	eq
 8003010:	2301      	moveq	r3, #1
 8003012:	2300      	movne	r3, #0
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d012      	beq.n	8003040 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800301a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003022:	f023 030f 	bic.w	r3, r3, #15
 8003026:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003028:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800302a:	e009      	b.n	8003040 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003030:	f043 0220 	orr.w	r2, r3, #32
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800303e:	e000      	b.n	8003042 <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003040:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800304a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800304e:	4618      	mov	r0, r3
 8003050:	3784      	adds	r7, #132	; 0x84
 8003052:	46bd      	mov	sp, r7
 8003054:	bd90      	pop	{r4, r7, pc}
 8003056:	bf00      	nop
 8003058:	50000100 	.word	0x50000100
 800305c:	50000400 	.word	0x50000400
 8003060:	50000500 	.word	0x50000500
 8003064:	50000300 	.word	0x50000300
 8003068:	50000700 	.word	0x50000700
 800306c:	50000600 	.word	0x50000600

08003070 <LL_EXTI_EnableIT_0_31>:
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003078:	4b05      	ldr	r3, [pc, #20]	; (8003090 <LL_EXTI_EnableIT_0_31+0x20>)
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	4904      	ldr	r1, [pc, #16]	; (8003090 <LL_EXTI_EnableIT_0_31+0x20>)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4313      	orrs	r3, r2
 8003082:	600b      	str	r3, [r1, #0]
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr
 8003090:	40010400 	.word	0x40010400

08003094 <LL_EXTI_EnableIT_32_63>:
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800309c:	4b05      	ldr	r3, [pc, #20]	; (80030b4 <LL_EXTI_EnableIT_32_63+0x20>)
 800309e:	6a1a      	ldr	r2, [r3, #32]
 80030a0:	4904      	ldr	r1, [pc, #16]	; (80030b4 <LL_EXTI_EnableIT_32_63+0x20>)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	620b      	str	r3, [r1, #32]
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	40010400 	.word	0x40010400

080030b8 <LL_EXTI_DisableIT_0_31>:
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80030c0:	4b06      	ldr	r3, [pc, #24]	; (80030dc <LL_EXTI_DisableIT_0_31+0x24>)
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	43db      	mvns	r3, r3
 80030c8:	4904      	ldr	r1, [pc, #16]	; (80030dc <LL_EXTI_DisableIT_0_31+0x24>)
 80030ca:	4013      	ands	r3, r2
 80030cc:	600b      	str	r3, [r1, #0]
}
 80030ce:	bf00      	nop
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	40010400 	.word	0x40010400

080030e0 <LL_EXTI_DisableIT_32_63>:
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80030e8:	4b06      	ldr	r3, [pc, #24]	; (8003104 <LL_EXTI_DisableIT_32_63+0x24>)
 80030ea:	6a1a      	ldr	r2, [r3, #32]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	43db      	mvns	r3, r3
 80030f0:	4904      	ldr	r1, [pc, #16]	; (8003104 <LL_EXTI_DisableIT_32_63+0x24>)
 80030f2:	4013      	ands	r3, r2
 80030f4:	620b      	str	r3, [r1, #32]
}
 80030f6:	bf00      	nop
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	40010400 	.word	0x40010400

08003108 <LL_EXTI_EnableEvent_0_31>:
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8003110:	4b05      	ldr	r3, [pc, #20]	; (8003128 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	4904      	ldr	r1, [pc, #16]	; (8003128 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4313      	orrs	r3, r2
 800311a:	604b      	str	r3, [r1, #4]
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	40010400 	.word	0x40010400

0800312c <LL_EXTI_EnableEvent_32_63>:
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8003134:	4b05      	ldr	r3, [pc, #20]	; (800314c <LL_EXTI_EnableEvent_32_63+0x20>)
 8003136:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003138:	4904      	ldr	r1, [pc, #16]	; (800314c <LL_EXTI_EnableEvent_32_63+0x20>)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4313      	orrs	r3, r2
 800313e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	40010400 	.word	0x40010400

08003150 <LL_EXTI_DisableEvent_0_31>:
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8003158:	4b06      	ldr	r3, [pc, #24]	; (8003174 <LL_EXTI_DisableEvent_0_31+0x24>)
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	43db      	mvns	r3, r3
 8003160:	4904      	ldr	r1, [pc, #16]	; (8003174 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003162:	4013      	ands	r3, r2
 8003164:	604b      	str	r3, [r1, #4]
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	40010400 	.word	0x40010400

08003178 <LL_EXTI_DisableEvent_32_63>:
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8003180:	4b06      	ldr	r3, [pc, #24]	; (800319c <LL_EXTI_DisableEvent_32_63+0x24>)
 8003182:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	43db      	mvns	r3, r3
 8003188:	4904      	ldr	r1, [pc, #16]	; (800319c <LL_EXTI_DisableEvent_32_63+0x24>)
 800318a:	4013      	ands	r3, r2
 800318c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	40010400 	.word	0x40010400

080031a0 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80031a8:	4b05      	ldr	r3, [pc, #20]	; (80031c0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	4904      	ldr	r1, [pc, #16]	; (80031c0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	608b      	str	r3, [r1, #8]
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr
 80031c0:	40010400 	.word	0x40010400

080031c4 <LL_EXTI_EnableRisingTrig_32_63>:
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80031cc:	4b05      	ldr	r3, [pc, #20]	; (80031e4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80031ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031d0:	4904      	ldr	r1, [pc, #16]	; (80031e4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	628b      	str	r3, [r1, #40]	; 0x28
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	40010400 	.word	0x40010400

080031e8 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80031f0:	4b06      	ldr	r3, [pc, #24]	; (800320c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	43db      	mvns	r3, r3
 80031f8:	4904      	ldr	r1, [pc, #16]	; (800320c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80031fa:	4013      	ands	r3, r2
 80031fc:	608b      	str	r3, [r1, #8]
}
 80031fe:	bf00      	nop
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	40010400 	.word	0x40010400

08003210 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8003218:	4b06      	ldr	r3, [pc, #24]	; (8003234 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800321a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	43db      	mvns	r3, r3
 8003220:	4904      	ldr	r1, [pc, #16]	; (8003234 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8003222:	4013      	ands	r3, r2
 8003224:	628b      	str	r3, [r1, #40]	; 0x28
}
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	40010400 	.word	0x40010400

08003238 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8003240:	4b05      	ldr	r3, [pc, #20]	; (8003258 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003242:	68da      	ldr	r2, [r3, #12]
 8003244:	4904      	ldr	r1, [pc, #16]	; (8003258 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4313      	orrs	r3, r2
 800324a:	60cb      	str	r3, [r1, #12]
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	40010400 	.word	0x40010400

0800325c <LL_EXTI_EnableFallingTrig_32_63>:
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8003264:	4b05      	ldr	r3, [pc, #20]	; (800327c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8003266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003268:	4904      	ldr	r1, [pc, #16]	; (800327c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4313      	orrs	r3, r2
 800326e:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	40010400 	.word	0x40010400

08003280 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8003288:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800328a:	68da      	ldr	r2, [r3, #12]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	43db      	mvns	r3, r3
 8003290:	4904      	ldr	r1, [pc, #16]	; (80032a4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003292:	4013      	ands	r3, r2
 8003294:	60cb      	str	r3, [r1, #12]
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	40010400 	.word	0x40010400

080032a8 <LL_EXTI_DisableFallingTrig_32_63>:
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80032b0:	4b06      	ldr	r3, [pc, #24]	; (80032cc <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80032b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	43db      	mvns	r3, r3
 80032b8:	4904      	ldr	r1, [pc, #16]	; (80032cc <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80032ba:	4013      	ands	r3, r2
 80032bc:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80032be:	bf00      	nop
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	40010400 	.word	0x40010400

080032d0 <LL_EXTI_ClearFlag_0_31>:
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80032d8:	4a04      	ldr	r2, [pc, #16]	; (80032ec <LL_EXTI_ClearFlag_0_31+0x1c>)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6153      	str	r3, [r2, #20]
}
 80032de:	bf00      	nop
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	40010400 	.word	0x40010400

080032f0 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 80032f8:	4a04      	ldr	r2, [pc, #16]	; (800330c <LL_EXTI_ClearFlag_32_63+0x1c>)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6353      	str	r3, [r2, #52]	; 0x34
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	40010400 	.word	0x40010400

08003310 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b088      	sub	sp, #32
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8003318:	2300      	movs	r3, #0
 800331a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800331c:	2300      	movs	r3, #0
 800331e:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d102      	bne.n	800332c <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	77fb      	strb	r3, [r7, #31]
 800332a:	e180      	b.n	800362e <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003336:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800333a:	d102      	bne.n	8003342 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	77fb      	strb	r3, [r7, #31]
 8003340:	e175      	b.n	800362e <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	7f5b      	ldrb	r3, [r3, #29]
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	d108      	bne.n	800335e <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f7fd f925 	bl	80005a8 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003368:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8003384:	4313      	orrs	r3, r2
 8003386:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	4b98      	ldr	r3, [pc, #608]	; (80035f0 <HAL_COMP_Init+0x2e0>)
 8003390:	4013      	ands	r3, r2
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	6812      	ldr	r2, [r2, #0]
 8003396:	6979      	ldr	r1, [r7, #20]
 8003398:	430b      	orrs	r3, r1
 800339a:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d015      	beq.n	80033d6 <HAL_COMP_Init+0xc6>
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d112      	bne.n	80033d6 <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80033b0:	4b90      	ldr	r3, [pc, #576]	; (80035f4 <HAL_COMP_Init+0x2e4>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	099b      	lsrs	r3, r3, #6
 80033b6:	4a90      	ldr	r2, [pc, #576]	; (80035f8 <HAL_COMP_Init+0x2e8>)
 80033b8:	fba2 2303 	umull	r2, r3, r2, r3
 80033bc:	099a      	lsrs	r2, r3, #6
 80033be:	4613      	mov	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80033c8:	e002      	b.n	80033d0 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	3b01      	subs	r3, #1
 80033ce:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1f9      	bne.n	80033ca <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a88      	ldr	r2, [pc, #544]	; (80035fc <HAL_COMP_Init+0x2ec>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d028      	beq.n	8003432 <HAL_COMP_Init+0x122>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a86      	ldr	r2, [pc, #536]	; (8003600 <HAL_COMP_Init+0x2f0>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d020      	beq.n	800342c <HAL_COMP_Init+0x11c>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a85      	ldr	r2, [pc, #532]	; (8003604 <HAL_COMP_Init+0x2f4>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d018      	beq.n	8003426 <HAL_COMP_Init+0x116>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a83      	ldr	r2, [pc, #524]	; (8003608 <HAL_COMP_Init+0x2f8>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d010      	beq.n	8003420 <HAL_COMP_Init+0x110>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a82      	ldr	r2, [pc, #520]	; (800360c <HAL_COMP_Init+0x2fc>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d008      	beq.n	800341a <HAL_COMP_Init+0x10a>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a80      	ldr	r2, [pc, #512]	; (8003610 <HAL_COMP_Init+0x300>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d101      	bne.n	8003416 <HAL_COMP_Init+0x106>
 8003412:	2301      	movs	r3, #1
 8003414:	e00f      	b.n	8003436 <HAL_COMP_Init+0x126>
 8003416:	2302      	movs	r3, #2
 8003418:	e00d      	b.n	8003436 <HAL_COMP_Init+0x126>
 800341a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800341e:	e00a      	b.n	8003436 <HAL_COMP_Init+0x126>
 8003420:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003424:	e007      	b.n	8003436 <HAL_COMP_Init+0x126>
 8003426:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800342a:	e004      	b.n	8003436 <HAL_COMP_Init+0x126>
 800342c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003430:	e001      	b.n	8003436 <HAL_COMP_Init+0x126>
 8003432:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003436:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	f003 0303 	and.w	r3, r3, #3
 8003440:	2b00      	cmp	r3, #0
 8003442:	f000 80b6 	beq.w	80035b2 <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	f003 0310 	and.w	r3, r3, #16
 800344e:	2b00      	cmp	r3, #0
 8003450:	d011      	beq.n	8003476 <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a6e      	ldr	r2, [pc, #440]	; (8003610 <HAL_COMP_Init+0x300>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d004      	beq.n	8003466 <HAL_COMP_Init+0x156>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a6c      	ldr	r2, [pc, #432]	; (8003614 <HAL_COMP_Init+0x304>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d103      	bne.n	800346e <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8003466:	6938      	ldr	r0, [r7, #16]
 8003468:	f7ff feac 	bl	80031c4 <LL_EXTI_EnableRisingTrig_32_63>
 800346c:	e014      	b.n	8003498 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800346e:	6938      	ldr	r0, [r7, #16]
 8003470:	f7ff fe96 	bl	80031a0 <LL_EXTI_EnableRisingTrig_0_31>
 8003474:	e010      	b.n	8003498 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a65      	ldr	r2, [pc, #404]	; (8003610 <HAL_COMP_Init+0x300>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d004      	beq.n	800348a <HAL_COMP_Init+0x17a>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a63      	ldr	r2, [pc, #396]	; (8003614 <HAL_COMP_Init+0x304>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d103      	bne.n	8003492 <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 800348a:	6938      	ldr	r0, [r7, #16]
 800348c:	f7ff fec0 	bl	8003210 <LL_EXTI_DisableRisingTrig_32_63>
 8003490:	e002      	b.n	8003498 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8003492:	6938      	ldr	r0, [r7, #16]
 8003494:	f7ff fea8 	bl	80031e8 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	f003 0320 	and.w	r3, r3, #32
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d011      	beq.n	80034c8 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a59      	ldr	r2, [pc, #356]	; (8003610 <HAL_COMP_Init+0x300>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d004      	beq.n	80034b8 <HAL_COMP_Init+0x1a8>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a58      	ldr	r2, [pc, #352]	; (8003614 <HAL_COMP_Init+0x304>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d103      	bne.n	80034c0 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 80034b8:	6938      	ldr	r0, [r7, #16]
 80034ba:	f7ff fecf 	bl	800325c <LL_EXTI_EnableFallingTrig_32_63>
 80034be:	e014      	b.n	80034ea <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80034c0:	6938      	ldr	r0, [r7, #16]
 80034c2:	f7ff feb9 	bl	8003238 <LL_EXTI_EnableFallingTrig_0_31>
 80034c6:	e010      	b.n	80034ea <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a50      	ldr	r2, [pc, #320]	; (8003610 <HAL_COMP_Init+0x300>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d004      	beq.n	80034dc <HAL_COMP_Init+0x1cc>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a4f      	ldr	r2, [pc, #316]	; (8003614 <HAL_COMP_Init+0x304>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d103      	bne.n	80034e4 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 80034dc:	6938      	ldr	r0, [r7, #16]
 80034de:	f7ff fee3 	bl	80032a8 <LL_EXTI_DisableFallingTrig_32_63>
 80034e2:	e002      	b.n	80034ea <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80034e4:	6938      	ldr	r0, [r7, #16]
 80034e6:	f7ff fecb 	bl	8003280 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a48      	ldr	r2, [pc, #288]	; (8003610 <HAL_COMP_Init+0x300>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d004      	beq.n	80034fe <HAL_COMP_Init+0x1ee>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a46      	ldr	r2, [pc, #280]	; (8003614 <HAL_COMP_Init+0x304>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d103      	bne.n	8003506 <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 80034fe:	6938      	ldr	r0, [r7, #16]
 8003500:	f7ff fef6 	bl	80032f0 <LL_EXTI_ClearFlag_32_63>
 8003504:	e002      	b.n	800350c <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8003506:	6938      	ldr	r0, [r7, #16]
 8003508:	f7ff fee2 	bl	80032d0 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d011      	beq.n	800353c <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a3c      	ldr	r2, [pc, #240]	; (8003610 <HAL_COMP_Init+0x300>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d004      	beq.n	800352c <HAL_COMP_Init+0x21c>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a3b      	ldr	r2, [pc, #236]	; (8003614 <HAL_COMP_Init+0x304>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d103      	bne.n	8003534 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 800352c:	6938      	ldr	r0, [r7, #16]
 800352e:	f7ff fdfd 	bl	800312c <LL_EXTI_EnableEvent_32_63>
 8003532:	e014      	b.n	800355e <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8003534:	6938      	ldr	r0, [r7, #16]
 8003536:	f7ff fde7 	bl	8003108 <LL_EXTI_EnableEvent_0_31>
 800353a:	e010      	b.n	800355e <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a33      	ldr	r2, [pc, #204]	; (8003610 <HAL_COMP_Init+0x300>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d004      	beq.n	8003550 <HAL_COMP_Init+0x240>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a32      	ldr	r2, [pc, #200]	; (8003614 <HAL_COMP_Init+0x304>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d103      	bne.n	8003558 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8003550:	6938      	ldr	r0, [r7, #16]
 8003552:	f7ff fe11 	bl	8003178 <LL_EXTI_DisableEvent_32_63>
 8003556:	e002      	b.n	800355e <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8003558:	6938      	ldr	r0, [r7, #16]
 800355a:	f7ff fdf9 	bl	8003150 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	d011      	beq.n	800358e <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a28      	ldr	r2, [pc, #160]	; (8003610 <HAL_COMP_Init+0x300>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d004      	beq.n	800357e <HAL_COMP_Init+0x26e>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a26      	ldr	r2, [pc, #152]	; (8003614 <HAL_COMP_Init+0x304>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d103      	bne.n	8003586 <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 800357e:	6938      	ldr	r0, [r7, #16]
 8003580:	f7ff fd88 	bl	8003094 <LL_EXTI_EnableIT_32_63>
 8003584:	e04b      	b.n	800361e <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8003586:	6938      	ldr	r0, [r7, #16]
 8003588:	f7ff fd72 	bl	8003070 <LL_EXTI_EnableIT_0_31>
 800358c:	e047      	b.n	800361e <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a1f      	ldr	r2, [pc, #124]	; (8003610 <HAL_COMP_Init+0x300>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d004      	beq.n	80035a2 <HAL_COMP_Init+0x292>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a1d      	ldr	r2, [pc, #116]	; (8003614 <HAL_COMP_Init+0x304>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d103      	bne.n	80035aa <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 80035a2:	6938      	ldr	r0, [r7, #16]
 80035a4:	f7ff fd9c 	bl	80030e0 <LL_EXTI_DisableIT_32_63>
 80035a8:	e039      	b.n	800361e <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 80035aa:	6938      	ldr	r0, [r7, #16]
 80035ac:	f7ff fd84 	bl	80030b8 <LL_EXTI_DisableIT_0_31>
 80035b0:	e035      	b.n	800361e <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a16      	ldr	r2, [pc, #88]	; (8003610 <HAL_COMP_Init+0x300>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d004      	beq.n	80035c6 <HAL_COMP_Init+0x2b6>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a14      	ldr	r2, [pc, #80]	; (8003614 <HAL_COMP_Init+0x304>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d103      	bne.n	80035ce <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 80035c6:	6938      	ldr	r0, [r7, #16]
 80035c8:	f7ff fdd6 	bl	8003178 <LL_EXTI_DisableEvent_32_63>
 80035cc:	e002      	b.n	80035d4 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80035ce:	6938      	ldr	r0, [r7, #16]
 80035d0:	f7ff fdbe 	bl	8003150 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a0d      	ldr	r2, [pc, #52]	; (8003610 <HAL_COMP_Init+0x300>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d004      	beq.n	80035e8 <HAL_COMP_Init+0x2d8>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a0c      	ldr	r2, [pc, #48]	; (8003614 <HAL_COMP_Init+0x304>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d117      	bne.n	8003618 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 80035e8:	6938      	ldr	r0, [r7, #16]
 80035ea:	f7ff fd79 	bl	80030e0 <LL_EXTI_DisableIT_32_63>
 80035ee:	e016      	b.n	800361e <HAL_COMP_Init+0x30e>
 80035f0:	ff007e0f 	.word	0xff007e0f
 80035f4:	200003cc 	.word	0x200003cc
 80035f8:	053e2d63 	.word	0x053e2d63
 80035fc:	40010200 	.word	0x40010200
 8003600:	40010204 	.word	0x40010204
 8003604:	40010208 	.word	0x40010208
 8003608:	4001020c 	.word	0x4001020c
 800360c:	40010210 	.word	0x40010210
 8003610:	40010214 	.word	0x40010214
 8003614:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8003618:	6938      	ldr	r0, [r7, #16]
 800361a:	f7ff fd4d 	bl	80030b8 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	7f5b      	ldrb	r3, [r3, #29]
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b00      	cmp	r3, #0
 8003626:	d102      	bne.n	800362e <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 800362e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003630:	4618      	mov	r0, r3
 8003632:	3720      	adds	r7, #32
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <__NVIC_SetPriorityGrouping>:
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003648:	4b0c      	ldr	r3, [pc, #48]	; (800367c <__NVIC_SetPriorityGrouping+0x44>)
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800364e:	68ba      	ldr	r2, [r7, #8]
 8003650:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003654:	4013      	ands	r3, r2
 8003656:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003660:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800366a:	4a04      	ldr	r2, [pc, #16]	; (800367c <__NVIC_SetPriorityGrouping+0x44>)
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	60d3      	str	r3, [r2, #12]
}
 8003670:	bf00      	nop
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	e000ed00 	.word	0xe000ed00

08003680 <__NVIC_GetPriorityGrouping>:
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003684:	4b04      	ldr	r3, [pc, #16]	; (8003698 <__NVIC_GetPriorityGrouping+0x18>)
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	0a1b      	lsrs	r3, r3, #8
 800368a:	f003 0307 	and.w	r3, r3, #7
}
 800368e:	4618      	mov	r0, r3
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	e000ed00 	.word	0xe000ed00

0800369c <__NVIC_EnableIRQ>:
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	4603      	mov	r3, r0
 80036a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	db0b      	blt.n	80036c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ae:	79fb      	ldrb	r3, [r7, #7]
 80036b0:	f003 021f 	and.w	r2, r3, #31
 80036b4:	4907      	ldr	r1, [pc, #28]	; (80036d4 <__NVIC_EnableIRQ+0x38>)
 80036b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ba:	095b      	lsrs	r3, r3, #5
 80036bc:	2001      	movs	r0, #1
 80036be:	fa00 f202 	lsl.w	r2, r0, r2
 80036c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80036c6:	bf00      	nop
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	e000e100 	.word	0xe000e100

080036d8 <__NVIC_SetPriority>:
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	4603      	mov	r3, r0
 80036e0:	6039      	str	r1, [r7, #0]
 80036e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	db0a      	blt.n	8003702 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	490c      	ldr	r1, [pc, #48]	; (8003724 <__NVIC_SetPriority+0x4c>)
 80036f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f6:	0112      	lsls	r2, r2, #4
 80036f8:	b2d2      	uxtb	r2, r2
 80036fa:	440b      	add	r3, r1
 80036fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003700:	e00a      	b.n	8003718 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	b2da      	uxtb	r2, r3
 8003706:	4908      	ldr	r1, [pc, #32]	; (8003728 <__NVIC_SetPriority+0x50>)
 8003708:	79fb      	ldrb	r3, [r7, #7]
 800370a:	f003 030f 	and.w	r3, r3, #15
 800370e:	3b04      	subs	r3, #4
 8003710:	0112      	lsls	r2, r2, #4
 8003712:	b2d2      	uxtb	r2, r2
 8003714:	440b      	add	r3, r1
 8003716:	761a      	strb	r2, [r3, #24]
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	e000e100 	.word	0xe000e100
 8003728:	e000ed00 	.word	0xe000ed00

0800372c <NVIC_EncodePriority>:
{
 800372c:	b480      	push	{r7}
 800372e:	b089      	sub	sp, #36	; 0x24
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f003 0307 	and.w	r3, r3, #7
 800373e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	f1c3 0307 	rsb	r3, r3, #7
 8003746:	2b04      	cmp	r3, #4
 8003748:	bf28      	it	cs
 800374a:	2304      	movcs	r3, #4
 800374c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	3304      	adds	r3, #4
 8003752:	2b06      	cmp	r3, #6
 8003754:	d902      	bls.n	800375c <NVIC_EncodePriority+0x30>
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	3b03      	subs	r3, #3
 800375a:	e000      	b.n	800375e <NVIC_EncodePriority+0x32>
 800375c:	2300      	movs	r3, #0
 800375e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003760:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	fa02 f303 	lsl.w	r3, r2, r3
 800376a:	43da      	mvns	r2, r3
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	401a      	ands	r2, r3
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003774:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	fa01 f303 	lsl.w	r3, r1, r3
 800377e:	43d9      	mvns	r1, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003784:	4313      	orrs	r3, r2
}
 8003786:	4618      	mov	r0, r3
 8003788:	3724      	adds	r7, #36	; 0x24
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
	...

08003794 <SysTick_Config>:
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	3b01      	subs	r3, #1
 80037a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037a4:	d301      	bcc.n	80037aa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80037a6:	2301      	movs	r3, #1
 80037a8:	e00f      	b.n	80037ca <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037aa:	4a0a      	ldr	r2, [pc, #40]	; (80037d4 <SysTick_Config+0x40>)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3b01      	subs	r3, #1
 80037b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037b2:	210f      	movs	r1, #15
 80037b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037b8:	f7ff ff8e 	bl	80036d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037bc:	4b05      	ldr	r3, [pc, #20]	; (80037d4 <SysTick_Config+0x40>)
 80037be:	2200      	movs	r2, #0
 80037c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037c2:	4b04      	ldr	r3, [pc, #16]	; (80037d4 <SysTick_Config+0x40>)
 80037c4:	2207      	movs	r2, #7
 80037c6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	e000e010 	.word	0xe000e010

080037d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f7ff ff29 	bl	8003638 <__NVIC_SetPriorityGrouping>
}
 80037e6:	bf00      	nop
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b086      	sub	sp, #24
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	4603      	mov	r3, r0
 80037f6:	60b9      	str	r1, [r7, #8]
 80037f8:	607a      	str	r2, [r7, #4]
 80037fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80037fc:	f7ff ff40 	bl	8003680 <__NVIC_GetPriorityGrouping>
 8003800:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	68b9      	ldr	r1, [r7, #8]
 8003806:	6978      	ldr	r0, [r7, #20]
 8003808:	f7ff ff90 	bl	800372c <NVIC_EncodePriority>
 800380c:	4602      	mov	r2, r0
 800380e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003812:	4611      	mov	r1, r2
 8003814:	4618      	mov	r0, r3
 8003816:	f7ff ff5f 	bl	80036d8 <__NVIC_SetPriority>
}
 800381a:	bf00      	nop
 800381c:	3718      	adds	r7, #24
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b082      	sub	sp, #8
 8003826:	af00      	add	r7, sp, #0
 8003828:	4603      	mov	r3, r0
 800382a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800382c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff ff33 	bl	800369c <__NVIC_EnableIRQ>
}
 8003836:	bf00      	nop
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b082      	sub	sp, #8
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7ff ffa4 	bl	8003794 <SysTick_Config>
 800384c:	4603      	mov	r3, r0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b082      	sub	sp, #8
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e014      	b.n	8003892 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	791b      	ldrb	r3, [r3, #4]
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d105      	bne.n	800387e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f7fc ff4b 	bl	8000714 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2202      	movs	r2, #2
 8003882:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b082      	sub	sp, #8
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
 80038a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	795b      	ldrb	r3, [r3, #5]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d101      	bne.n	80038b0 <HAL_DAC_Start+0x16>
 80038ac:	2302      	movs	r3, #2
 80038ae:	e043      	b.n	8003938 <HAL_DAC_Start+0x9e>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2202      	movs	r2, #2
 80038ba:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6819      	ldr	r1, [r3, #0]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	f003 0310 	and.w	r3, r3, #16
 80038c8:	2201      	movs	r2, #1
 80038ca:	409a      	lsls	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	430a      	orrs	r2, r1
 80038d2:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 80038d4:	2001      	movs	r0, #1
 80038d6:	f7fe fb4d 	bl	8001f74 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d10f      	bne.n	8003900 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d11d      	bne.n	800392a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f042 0201 	orr.w	r2, r2, #1
 80038fc:	605a      	str	r2, [r3, #4]
 80038fe:	e014      	b.n	800392a <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	f003 0310 	and.w	r3, r3, #16
 8003910:	2102      	movs	r1, #2
 8003912:	fa01 f303 	lsl.w	r3, r1, r3
 8003916:	429a      	cmp	r2, r3
 8003918:	d107      	bne.n	800392a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f042 0202 	orr.w	r2, r2, #2
 8003928:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
 800394c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800394e:	2300      	movs	r3, #0
 8003950:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	795b      	ldrb	r3, [r3, #5]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d101      	bne.n	800395e <HAL_DAC_Start_DMA+0x1e>
 800395a:	2302      	movs	r3, #2
 800395c:	e0a1      	b.n	8003aa2 <HAL_DAC_Start_DMA+0x162>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2201      	movs	r2, #1
 8003962:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2202      	movs	r2, #2
 8003968:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d12a      	bne.n	80039c6 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	4a4d      	ldr	r2, [pc, #308]	; (8003aac <HAL_DAC_Start_DMA+0x16c>)
 8003976:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	4a4c      	ldr	r2, [pc, #304]	; (8003ab0 <HAL_DAC_Start_DMA+0x170>)
 800397e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	4a4b      	ldr	r2, [pc, #300]	; (8003ab4 <HAL_DAC_Start_DMA+0x174>)
 8003986:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003996:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003998:	6a3b      	ldr	r3, [r7, #32]
 800399a:	2b04      	cmp	r3, #4
 800399c:	d009      	beq.n	80039b2 <HAL_DAC_Start_DMA+0x72>
 800399e:	2b08      	cmp	r3, #8
 80039a0:	d00c      	beq.n	80039bc <HAL_DAC_Start_DMA+0x7c>
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d000      	beq.n	80039a8 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80039a6:	e039      	b.n	8003a1c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	3308      	adds	r3, #8
 80039ae:	613b      	str	r3, [r7, #16]
        break;
 80039b0:	e034      	b.n	8003a1c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	330c      	adds	r3, #12
 80039b8:	613b      	str	r3, [r7, #16]
        break;
 80039ba:	e02f      	b.n	8003a1c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	3310      	adds	r3, #16
 80039c2:	613b      	str	r3, [r7, #16]
        break;
 80039c4:	e02a      	b.n	8003a1c <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	4a3b      	ldr	r2, [pc, #236]	; (8003ab8 <HAL_DAC_Start_DMA+0x178>)
 80039cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	4a3a      	ldr	r2, [pc, #232]	; (8003abc <HAL_DAC_Start_DMA+0x17c>)
 80039d4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	4a39      	ldr	r2, [pc, #228]	; (8003ac0 <HAL_DAC_Start_DMA+0x180>)
 80039dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80039ec:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80039ee:	6a3b      	ldr	r3, [r7, #32]
 80039f0:	2b04      	cmp	r3, #4
 80039f2:	d009      	beq.n	8003a08 <HAL_DAC_Start_DMA+0xc8>
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	d00c      	beq.n	8003a12 <HAL_DAC_Start_DMA+0xd2>
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d000      	beq.n	80039fe <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80039fc:	e00e      	b.n	8003a1c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	3314      	adds	r3, #20
 8003a04:	613b      	str	r3, [r7, #16]
        break;
 8003a06:	e009      	b.n	8003a1c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	3318      	adds	r3, #24
 8003a0e:	613b      	str	r3, [r7, #16]
        break;
 8003a10:	e004      	b.n	8003a1c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	331c      	adds	r3, #28
 8003a18:	613b      	str	r3, [r7, #16]
        break;
 8003a1a:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d111      	bne.n	8003a46 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a30:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6898      	ldr	r0, [r3, #8]
 8003a36:	6879      	ldr	r1, [r7, #4]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	f000 fb66 	bl	800410c <HAL_DMA_Start_IT>
 8003a40:	4603      	mov	r3, r0
 8003a42:	75fb      	strb	r3, [r7, #23]
 8003a44:	e010      	b.n	8003a68 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003a54:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	68d8      	ldr	r0, [r3, #12]
 8003a5a:	6879      	ldr	r1, [r7, #4]
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	f000 fb54 	bl	800410c <HAL_DMA_Start_IT>
 8003a64:	4603      	mov	r3, r0
 8003a66:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003a6e:	7dfb      	ldrb	r3, [r7, #23]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10f      	bne.n	8003a94 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6819      	ldr	r1, [r3, #0]
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	f003 0310 	and.w	r3, r3, #16
 8003a80:	2201      	movs	r2, #1
 8003a82:	409a      	lsls	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8003a8c:	2001      	movs	r0, #1
 8003a8e:	f7fe fa71 	bl	8001f74 <HAL_Delay>
 8003a92:	e005      	b.n	8003aa0 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	f043 0204 	orr.w	r2, r3, #4
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003aa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3718      	adds	r7, #24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	08003ea9 	.word	0x08003ea9
 8003ab0:	08003ecb 	.word	0x08003ecb
 8003ab4:	08003ee7 	.word	0x08003ee7
 8003ab8:	08003f51 	.word	0x08003f51
 8003abc:	08003f73 	.word	0x08003f73
 8003ac0:	08003f8f 	.word	0x08003f8f

08003ac4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b087      	sub	sp, #28
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
 8003ad0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d105      	bne.n	8003af4 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4413      	add	r3, r2
 8003aee:	3308      	adds	r3, #8
 8003af0:	617b      	str	r3, [r7, #20]
 8003af2:	e004      	b.n	8003afe <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4413      	add	r3, r2
 8003afa:	3314      	adds	r3, #20
 8003afc:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	461a      	mov	r2, r3
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	371c      	adds	r7, #28
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b08a      	sub	sp, #40	; 0x28
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	795b      	ldrb	r3, [r3, #5]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d101      	bne.n	8003b6c <HAL_DAC_ConfigChannel+0x1c>
 8003b68:	2302      	movs	r3, #2
 8003b6a:	e194      	b.n	8003e96 <HAL_DAC_ConfigChannel+0x346>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2202      	movs	r2, #2
 8003b76:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	2b04      	cmp	r3, #4
 8003b7e:	d174      	bne.n	8003c6a <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d137      	bne.n	8003bf6 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8003b86:	f7fe f9e9 	bl	8001f5c <HAL_GetTick>
 8003b8a:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003b8c:	e011      	b.n	8003bb2 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003b8e:	f7fe f9e5 	bl	8001f5c <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d90a      	bls.n	8003bb2 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	f043 0208 	orr.w	r2, r3, #8
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2203      	movs	r2, #3
 8003bac:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e171      	b.n	8003e96 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1e6      	bne.n	8003b8e <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8003bc0:	2001      	movs	r0, #1
 8003bc2:	f7fe f9d7 	bl	8001f74 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68ba      	ldr	r2, [r7, #8]
 8003bcc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bce:	641a      	str	r2, [r3, #64]	; 0x40
 8003bd0:	e01e      	b.n	8003c10 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003bd2:	f7fe f9c3 	bl	8001f5c <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d90a      	bls.n	8003bf6 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	f043 0208 	orr.w	r2, r3, #8
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2203      	movs	r2, #3
 8003bf0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e14f      	b.n	8003e96 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	dbe8      	blt.n	8003bd2 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8003c00:	2001      	movs	r0, #1
 8003c02:	f7fe f9b7 	bl	8001f74 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68ba      	ldr	r2, [r7, #8]
 8003c0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c0e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f003 0310 	and.w	r3, r3, #16
 8003c1c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003c20:	fa01 f303 	lsl.w	r3, r1, r3
 8003c24:	43db      	mvns	r3, r3
 8003c26:	ea02 0103 	and.w	r1, r2, r3
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f003 0310 	and.w	r3, r3, #16
 8003c34:	409a      	lsls	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f003 0310 	and.w	r3, r3, #16
 8003c4a:	21ff      	movs	r1, #255	; 0xff
 8003c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c50:	43db      	mvns	r3, r3
 8003c52:	ea02 0103 	and.w	r1, r2, r3
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f003 0310 	and.w	r3, r3, #16
 8003c60:	409a      	lsls	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	69db      	ldr	r3, [r3, #28]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d11d      	bne.n	8003cae <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c78:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f003 0310 	and.w	r3, r3, #16
 8003c80:	221f      	movs	r2, #31
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	43db      	mvns	r3, r3
 8003c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f003 0310 	and.w	r3, r3, #16
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cac:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f003 0310 	and.w	r3, r3, #16
 8003cbc:	2207      	movs	r2, #7
 8003cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc2:	43db      	mvns	r3, r3
 8003cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d002      	beq.n	8003cdc <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	623b      	str	r3, [r7, #32]
 8003cda:	e011      	b.n	8003d00 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d002      	beq.n	8003cee <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	623b      	str	r3, [r7, #32]
 8003cec:	e008      	b.n	8003d00 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d102      	bne.n	8003cfc <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	623b      	str	r3, [r7, #32]
 8003cfa:	e001      	b.n	8003d00 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	689a      	ldr	r2, [r3, #8]
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	6a3a      	ldr	r2, [r7, #32]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f003 0310 	and.w	r3, r3, #16
 8003d16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1e:	43db      	mvns	r3, r3
 8003d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d22:	4013      	ands	r3, r2
 8003d24:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	791b      	ldrb	r3, [r3, #4]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d102      	bne.n	8003d34 <HAL_DAC_ConfigChannel+0x1e4>
 8003d2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d32:	e000      	b.n	8003d36 <HAL_DAC_ConfigChannel+0x1e6>
 8003d34:	2300      	movs	r3, #0
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f003 0310 	and.w	r3, r3, #16
 8003d42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d46:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4a:	43db      	mvns	r3, r3
 8003d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d4e:	4013      	ands	r3, r2
 8003d50:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	795b      	ldrb	r3, [r3, #5]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d102      	bne.n	8003d60 <HAL_DAC_ConfigChannel+0x210>
 8003d5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d5e:	e000      	b.n	8003d62 <HAL_DAC_ConfigChannel+0x212>
 8003d60:	2300      	movs	r3, #0
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003d6e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d114      	bne.n	8003da2 <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003d78:	f001 fa9e 	bl	80052b8 <HAL_RCC_GetHCLKFreq>
 8003d7c:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	4a47      	ldr	r2, [pc, #284]	; (8003ea0 <HAL_DAC_ConfigChannel+0x350>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d904      	bls.n	8003d90 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d8e:	e00d      	b.n	8003dac <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	4a44      	ldr	r2, [pc, #272]	; (8003ea4 <HAL_DAC_ConfigChannel+0x354>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d909      	bls.n	8003dac <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8003da0:	e004      	b.n	8003dac <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da8:	4313      	orrs	r3, r2
 8003daa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f003 0310 	and.w	r3, r3, #16
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	fa02 f303 	lsl.w	r3, r2, r3
 8003db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6819      	ldr	r1, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f003 0310 	and.w	r3, r3, #16
 8003dd2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dda:	43da      	mvns	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	400a      	ands	r2, r1
 8003de2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f003 0310 	and.w	r3, r3, #16
 8003df2:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003df6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfa:	43db      	mvns	r3, r3
 8003dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dfe:	4013      	ands	r3, r2
 8003e00:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f003 0310 	and.w	r3, r3, #16
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	fa02 f303 	lsl.w	r3, r2, r3
 8003e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e16:	4313      	orrs	r3, r2
 8003e18:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e20:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	6819      	ldr	r1, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f003 0310 	and.w	r3, r3, #16
 8003e2e:	22c0      	movs	r2, #192	; 0xc0
 8003e30:	fa02 f303 	lsl.w	r3, r2, r3
 8003e34:	43da      	mvns	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	400a      	ands	r2, r1
 8003e3c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	089b      	lsrs	r3, r3, #2
 8003e44:	f003 030f 	and.w	r3, r3, #15
 8003e48:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	089b      	lsrs	r3, r3, #2
 8003e50:	021b      	lsls	r3, r3, #8
 8003e52:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003e56:	69ba      	ldr	r2, [r7, #24]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f003 0310 	and.w	r3, r3, #16
 8003e68:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e70:	43db      	mvns	r3, r3
 8003e72:	ea02 0103 	and.w	r1, r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f003 0310 	and.w	r3, r3, #16
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	409a      	lsls	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	430a      	orrs	r2, r1
 8003e86:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3728      	adds	r7, #40	; 0x28
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	09896800 	.word	0x09896800
 8003ea4:	04c4b400 	.word	0x04c4b400

08003ea8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f7ff fe2c 	bl	8003b14 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	711a      	strb	r2, [r3, #4]
}
 8003ec2:	bf00      	nop
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b084      	sub	sp, #16
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f7ff fe25 	bl	8003b28 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003ede:	bf00      	nop
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b084      	sub	sp, #16
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	f043 0204 	orr.w	r2, r3, #4
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f7ff fe1b 	bl	8003b3c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	711a      	strb	r2, [r3, #4]
}
 8003f0c:	bf00      	nop
 8003f0e:	3710      	adds	r7, #16
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f7ff ffd8 	bl	8003f14 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2201      	movs	r2, #1
 8003f68:	711a      	strb	r2, [r3, #4]
}
 8003f6a:	bf00      	nop
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b084      	sub	sp, #16
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f7ff ffd1 	bl	8003f28 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003f86:	bf00      	nop
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b084      	sub	sp, #16
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	f043 0204 	orr.w	r2, r3, #4
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f7ff ffc7 	bl	8003f3c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	711a      	strb	r2, [r3, #4]
}
 8003fb4:	bf00      	nop
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e08d      	b.n	80040ea <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	4b47      	ldr	r3, [pc, #284]	; (80040f4 <HAL_DMA_Init+0x138>)
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d80f      	bhi.n	8003ffa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	4b45      	ldr	r3, [pc, #276]	; (80040f8 <HAL_DMA_Init+0x13c>)
 8003fe2:	4413      	add	r3, r2
 8003fe4:	4a45      	ldr	r2, [pc, #276]	; (80040fc <HAL_DMA_Init+0x140>)
 8003fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fea:	091b      	lsrs	r3, r3, #4
 8003fec:	009a      	lsls	r2, r3, #2
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a42      	ldr	r2, [pc, #264]	; (8004100 <HAL_DMA_Init+0x144>)
 8003ff6:	641a      	str	r2, [r3, #64]	; 0x40
 8003ff8:	e00e      	b.n	8004018 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	461a      	mov	r2, r3
 8004000:	4b40      	ldr	r3, [pc, #256]	; (8004104 <HAL_DMA_Init+0x148>)
 8004002:	4413      	add	r3, r2
 8004004:	4a3d      	ldr	r2, [pc, #244]	; (80040fc <HAL_DMA_Init+0x140>)
 8004006:	fba2 2303 	umull	r2, r3, r2, r3
 800400a:	091b      	lsrs	r3, r3, #4
 800400c:	009a      	lsls	r2, r3, #2
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a3c      	ldr	r2, [pc, #240]	; (8004108 <HAL_DMA_Init+0x14c>)
 8004016:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2202      	movs	r2, #2
 800401c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800402e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004032:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800403c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004048:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004054:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	4313      	orrs	r3, r2
 8004060:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f9b6 	bl	80043dc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004078:	d102      	bne.n	8004080 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004088:	b2d2      	uxtb	r2, r2
 800408a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004094:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d010      	beq.n	80040c0 <HAL_DMA_Init+0x104>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	2b04      	cmp	r3, #4
 80040a4:	d80c      	bhi.n	80040c0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f9d6 	bl	8004458 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b0:	2200      	movs	r2, #0
 80040b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80040bc:	605a      	str	r2, [r3, #4]
 80040be:	e008      	b.n	80040d2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	40020407 	.word	0x40020407
 80040f8:	bffdfff8 	.word	0xbffdfff8
 80040fc:	cccccccd 	.word	0xcccccccd
 8004100:	40020000 	.word	0x40020000
 8004104:	bffdfbf8 	.word	0xbffdfbf8
 8004108:	40020400 	.word	0x40020400

0800410c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
 8004118:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800411a:	2300      	movs	r3, #0
 800411c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004124:	2b01      	cmp	r3, #1
 8004126:	d101      	bne.n	800412c <HAL_DMA_Start_IT+0x20>
 8004128:	2302      	movs	r3, #2
 800412a:	e066      	b.n	80041fa <HAL_DMA_Start_IT+0xee>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b01      	cmp	r3, #1
 800413e:	d155      	bne.n	80041ec <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2202      	movs	r2, #2
 8004144:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0201 	bic.w	r2, r2, #1
 800415c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	68b9      	ldr	r1, [r7, #8]
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f000 f8fb 	bl	8004360 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416e:	2b00      	cmp	r3, #0
 8004170:	d008      	beq.n	8004184 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f042 020e 	orr.w	r2, r2, #14
 8004180:	601a      	str	r2, [r3, #0]
 8004182:	e00f      	b.n	80041a4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 0204 	bic.w	r2, r2, #4
 8004192:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f042 020a 	orr.w	r2, r2, #10
 80041a2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d007      	beq.n	80041c2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041c0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d007      	beq.n	80041da <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041d8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f042 0201 	orr.w	r2, r2, #1
 80041e8:	601a      	str	r2, [r3, #0]
 80041ea:	e005      	b.n	80041f8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80041f4:	2302      	movs	r3, #2
 80041f6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80041f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3718      	adds	r7, #24
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b084      	sub	sp, #16
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421e:	f003 031f 	and.w	r3, r3, #31
 8004222:	2204      	movs	r2, #4
 8004224:	409a      	lsls	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	4013      	ands	r3, r2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d026      	beq.n	800427c <HAL_DMA_IRQHandler+0x7a>
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	2b00      	cmp	r3, #0
 8004236:	d021      	beq.n	800427c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0320 	and.w	r3, r3, #32
 8004242:	2b00      	cmp	r3, #0
 8004244:	d107      	bne.n	8004256 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 0204 	bic.w	r2, r2, #4
 8004254:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425a:	f003 021f 	and.w	r2, r3, #31
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	2104      	movs	r1, #4
 8004264:	fa01 f202 	lsl.w	r2, r1, r2
 8004268:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426e:	2b00      	cmp	r3, #0
 8004270:	d071      	beq.n	8004356 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800427a:	e06c      	b.n	8004356 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004280:	f003 031f 	and.w	r3, r3, #31
 8004284:	2202      	movs	r2, #2
 8004286:	409a      	lsls	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	4013      	ands	r3, r2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d02e      	beq.n	80042ee <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d029      	beq.n	80042ee <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0320 	and.w	r3, r3, #32
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10b      	bne.n	80042c0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f022 020a 	bic.w	r2, r2, #10
 80042b6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c4:	f003 021f 	and.w	r2, r3, #31
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042cc:	2102      	movs	r1, #2
 80042ce:	fa01 f202 	lsl.w	r2, r1, r2
 80042d2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d038      	beq.n	8004356 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80042ec:	e033      	b.n	8004356 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f2:	f003 031f 	and.w	r3, r3, #31
 80042f6:	2208      	movs	r2, #8
 80042f8:	409a      	lsls	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	4013      	ands	r3, r2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d02a      	beq.n	8004358 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	f003 0308 	and.w	r3, r3, #8
 8004308:	2b00      	cmp	r3, #0
 800430a:	d025      	beq.n	8004358 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 020e 	bic.w	r2, r2, #14
 800431a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004320:	f003 021f 	and.w	r2, r3, #31
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004328:	2101      	movs	r1, #1
 800432a:	fa01 f202 	lsl.w	r2, r1, r2
 800432e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800434a:	2b00      	cmp	r3, #0
 800434c:	d004      	beq.n	8004358 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004356:	bf00      	nop
 8004358:	bf00      	nop
}
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
 800436c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004376:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800437c:	2b00      	cmp	r3, #0
 800437e:	d004      	beq.n	800438a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004388:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438e:	f003 021f 	and.w	r2, r3, #31
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	2101      	movs	r1, #1
 8004398:	fa01 f202 	lsl.w	r2, r1, r2
 800439c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	2b10      	cmp	r3, #16
 80043ac:	d108      	bne.n	80043c0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68ba      	ldr	r2, [r7, #8]
 80043bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80043be:	e007      	b.n	80043d0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68ba      	ldr	r2, [r7, #8]
 80043c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	60da      	str	r2, [r3, #12]
}
 80043d0:	bf00      	nop
 80043d2:	3714      	adds	r7, #20
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80043dc:	b480      	push	{r7}
 80043de:	b087      	sub	sp, #28
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	461a      	mov	r2, r3
 80043ea:	4b16      	ldr	r3, [pc, #88]	; (8004444 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d802      	bhi.n	80043f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80043f0:	4b15      	ldr	r3, [pc, #84]	; (8004448 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80043f2:	617b      	str	r3, [r7, #20]
 80043f4:	e001      	b.n	80043fa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80043f6:	4b15      	ldr	r3, [pc, #84]	; (800444c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80043f8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	b2db      	uxtb	r3, r3
 8004404:	3b08      	subs	r3, #8
 8004406:	4a12      	ldr	r2, [pc, #72]	; (8004450 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004408:	fba2 2303 	umull	r2, r3, r2, r3
 800440c:	091b      	lsrs	r3, r3, #4
 800440e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004414:	089b      	lsrs	r3, r3, #2
 8004416:	009a      	lsls	r2, r3, #2
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	4413      	add	r3, r2
 800441c:	461a      	mov	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a0b      	ldr	r2, [pc, #44]	; (8004454 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004426:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f003 031f 	and.w	r3, r3, #31
 800442e:	2201      	movs	r2, #1
 8004430:	409a      	lsls	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004436:	bf00      	nop
 8004438:	371c      	adds	r7, #28
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	40020407 	.word	0x40020407
 8004448:	40020800 	.word	0x40020800
 800444c:	40020820 	.word	0x40020820
 8004450:	cccccccd 	.word	0xcccccccd
 8004454:	40020880 	.word	0x40020880

08004458 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	b2db      	uxtb	r3, r3
 8004466:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	4b0b      	ldr	r3, [pc, #44]	; (8004498 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800446c:	4413      	add	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	461a      	mov	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a08      	ldr	r2, [pc, #32]	; (800449c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800447a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	3b01      	subs	r3, #1
 8004480:	f003 031f 	and.w	r3, r3, #31
 8004484:	2201      	movs	r2, #1
 8004486:	409a      	lsls	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800448c:	bf00      	nop
 800448e:	3714      	adds	r7, #20
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr
 8004498:	1000823f 	.word	0x1000823f
 800449c:	40020940 	.word	0x40020940

080044a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b087      	sub	sp, #28
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80044ae:	e15a      	b.n	8004766 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	2101      	movs	r1, #1
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	fa01 f303 	lsl.w	r3, r1, r3
 80044bc:	4013      	ands	r3, r2
 80044be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f000 814c 	beq.w	8004760 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d00b      	beq.n	80044e8 <HAL_GPIO_Init+0x48>
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d007      	beq.n	80044e8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044dc:	2b11      	cmp	r3, #17
 80044de:	d003      	beq.n	80044e8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	2b12      	cmp	r3, #18
 80044e6:	d130      	bne.n	800454a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	005b      	lsls	r3, r3, #1
 80044f2:	2203      	movs	r2, #3
 80044f4:	fa02 f303 	lsl.w	r3, r2, r3
 80044f8:	43db      	mvns	r3, r3
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	4013      	ands	r3, r2
 80044fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	68da      	ldr	r2, [r3, #12]
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	005b      	lsls	r3, r3, #1
 8004508:	fa02 f303 	lsl.w	r3, r2, r3
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	4313      	orrs	r3, r2
 8004510:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800451e:	2201      	movs	r2, #1
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	fa02 f303 	lsl.w	r3, r2, r3
 8004526:	43db      	mvns	r3, r3
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	4013      	ands	r3, r2
 800452c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	091b      	lsrs	r3, r3, #4
 8004534:	f003 0201 	and.w	r2, r3, #1
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	fa02 f303 	lsl.w	r3, r2, r3
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	4313      	orrs	r3, r2
 8004542:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	005b      	lsls	r3, r3, #1
 8004554:	2203      	movs	r2, #3
 8004556:	fa02 f303 	lsl.w	r3, r2, r3
 800455a:	43db      	mvns	r3, r3
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	4013      	ands	r3, r2
 8004560:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	689a      	ldr	r2, [r3, #8]
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	fa02 f303 	lsl.w	r3, r2, r3
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	4313      	orrs	r3, r2
 8004572:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	2b02      	cmp	r3, #2
 8004580:	d003      	beq.n	800458a <HAL_GPIO_Init+0xea>
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	2b12      	cmp	r3, #18
 8004588:	d123      	bne.n	80045d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	08da      	lsrs	r2, r3, #3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	3208      	adds	r2, #8
 8004592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004596:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	f003 0307 	and.w	r3, r3, #7
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	220f      	movs	r2, #15
 80045a2:	fa02 f303 	lsl.w	r3, r2, r3
 80045a6:	43db      	mvns	r3, r3
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	4013      	ands	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	691a      	ldr	r2, [r3, #16]
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	f003 0307 	and.w	r3, r3, #7
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	fa02 f303 	lsl.w	r3, r2, r3
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	08da      	lsrs	r2, r3, #3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	3208      	adds	r2, #8
 80045cc:	6939      	ldr	r1, [r7, #16]
 80045ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	2203      	movs	r2, #3
 80045de:	fa02 f303 	lsl.w	r3, r2, r3
 80045e2:	43db      	mvns	r3, r3
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	4013      	ands	r3, r2
 80045e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f003 0203 	and.w	r2, r3, #3
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	fa02 f303 	lsl.w	r3, r2, r3
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 80a6 	beq.w	8004760 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004614:	4b5b      	ldr	r3, [pc, #364]	; (8004784 <HAL_GPIO_Init+0x2e4>)
 8004616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004618:	4a5a      	ldr	r2, [pc, #360]	; (8004784 <HAL_GPIO_Init+0x2e4>)
 800461a:	f043 0301 	orr.w	r3, r3, #1
 800461e:	6613      	str	r3, [r2, #96]	; 0x60
 8004620:	4b58      	ldr	r3, [pc, #352]	; (8004784 <HAL_GPIO_Init+0x2e4>)
 8004622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	60bb      	str	r3, [r7, #8]
 800462a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800462c:	4a56      	ldr	r2, [pc, #344]	; (8004788 <HAL_GPIO_Init+0x2e8>)
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	089b      	lsrs	r3, r3, #2
 8004632:	3302      	adds	r3, #2
 8004634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004638:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f003 0303 	and.w	r3, r3, #3
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	220f      	movs	r2, #15
 8004644:	fa02 f303 	lsl.w	r3, r2, r3
 8004648:	43db      	mvns	r3, r3
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	4013      	ands	r3, r2
 800464e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004656:	d01f      	beq.n	8004698 <HAL_GPIO_Init+0x1f8>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a4c      	ldr	r2, [pc, #304]	; (800478c <HAL_GPIO_Init+0x2ec>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d019      	beq.n	8004694 <HAL_GPIO_Init+0x1f4>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a4b      	ldr	r2, [pc, #300]	; (8004790 <HAL_GPIO_Init+0x2f0>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d013      	beq.n	8004690 <HAL_GPIO_Init+0x1f0>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a4a      	ldr	r2, [pc, #296]	; (8004794 <HAL_GPIO_Init+0x2f4>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d00d      	beq.n	800468c <HAL_GPIO_Init+0x1ec>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a49      	ldr	r2, [pc, #292]	; (8004798 <HAL_GPIO_Init+0x2f8>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d007      	beq.n	8004688 <HAL_GPIO_Init+0x1e8>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a48      	ldr	r2, [pc, #288]	; (800479c <HAL_GPIO_Init+0x2fc>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d101      	bne.n	8004684 <HAL_GPIO_Init+0x1e4>
 8004680:	2305      	movs	r3, #5
 8004682:	e00a      	b.n	800469a <HAL_GPIO_Init+0x1fa>
 8004684:	2306      	movs	r3, #6
 8004686:	e008      	b.n	800469a <HAL_GPIO_Init+0x1fa>
 8004688:	2304      	movs	r3, #4
 800468a:	e006      	b.n	800469a <HAL_GPIO_Init+0x1fa>
 800468c:	2303      	movs	r3, #3
 800468e:	e004      	b.n	800469a <HAL_GPIO_Init+0x1fa>
 8004690:	2302      	movs	r3, #2
 8004692:	e002      	b.n	800469a <HAL_GPIO_Init+0x1fa>
 8004694:	2301      	movs	r3, #1
 8004696:	e000      	b.n	800469a <HAL_GPIO_Init+0x1fa>
 8004698:	2300      	movs	r3, #0
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	f002 0203 	and.w	r2, r2, #3
 80046a0:	0092      	lsls	r2, r2, #2
 80046a2:	4093      	lsls	r3, r2
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046aa:	4937      	ldr	r1, [pc, #220]	; (8004788 <HAL_GPIO_Init+0x2e8>)
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	089b      	lsrs	r3, r3, #2
 80046b0:	3302      	adds	r3, #2
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80046b8:	4b39      	ldr	r3, [pc, #228]	; (80047a0 <HAL_GPIO_Init+0x300>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	43db      	mvns	r3, r3
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	4013      	ands	r3, r2
 80046c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d003      	beq.n	80046dc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	4313      	orrs	r3, r2
 80046da:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80046dc:	4a30      	ldr	r2, [pc, #192]	; (80047a0 <HAL_GPIO_Init+0x300>)
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80046e2:	4b2f      	ldr	r3, [pc, #188]	; (80047a0 <HAL_GPIO_Init+0x300>)
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	43db      	mvns	r3, r3
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	4013      	ands	r3, r2
 80046f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d003      	beq.n	8004706 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	4313      	orrs	r3, r2
 8004704:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004706:	4a26      	ldr	r2, [pc, #152]	; (80047a0 <HAL_GPIO_Init+0x300>)
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800470c:	4b24      	ldr	r3, [pc, #144]	; (80047a0 <HAL_GPIO_Init+0x300>)
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	43db      	mvns	r3, r3
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	4013      	ands	r3, r2
 800471a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d003      	beq.n	8004730 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	4313      	orrs	r3, r2
 800472e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004730:	4a1b      	ldr	r2, [pc, #108]	; (80047a0 <HAL_GPIO_Init+0x300>)
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004736:	4b1a      	ldr	r3, [pc, #104]	; (80047a0 <HAL_GPIO_Init+0x300>)
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	43db      	mvns	r3, r3
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	4013      	ands	r3, r2
 8004744:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d003      	beq.n	800475a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	4313      	orrs	r3, r2
 8004758:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800475a:	4a11      	ldr	r2, [pc, #68]	; (80047a0 <HAL_GPIO_Init+0x300>)
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	3301      	adds	r3, #1
 8004764:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	fa22 f303 	lsr.w	r3, r2, r3
 8004770:	2b00      	cmp	r3, #0
 8004772:	f47f ae9d 	bne.w	80044b0 <HAL_GPIO_Init+0x10>
  }
}
 8004776:	bf00      	nop
 8004778:	371c      	adds	r7, #28
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	40021000 	.word	0x40021000
 8004788:	40010000 	.word	0x40010000
 800478c:	48000400 	.word	0x48000400
 8004790:	48000800 	.word	0x48000800
 8004794:	48000c00 	.word	0x48000c00
 8004798:	48001000 	.word	0x48001000
 800479c:	48001400 	.word	0x48001400
 80047a0:	40010400 	.word	0x40010400

080047a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	460b      	mov	r3, r1
 80047ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	691a      	ldr	r2, [r3, #16]
 80047b4:	887b      	ldrh	r3, [r7, #2]
 80047b6:	4013      	ands	r3, r2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d002      	beq.n	80047c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80047bc:	2301      	movs	r3, #1
 80047be:	73fb      	strb	r3, [r7, #15]
 80047c0:	e001      	b.n	80047c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80047c2:	2300      	movs	r3, #0
 80047c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80047c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3714      	adds	r7, #20
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	460b      	mov	r3, r1
 80047de:	807b      	strh	r3, [r7, #2]
 80047e0:	4613      	mov	r3, r2
 80047e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047e4:	787b      	ldrb	r3, [r7, #1]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d003      	beq.n	80047f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80047ea:	887a      	ldrh	r2, [r7, #2]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80047f0:	e002      	b.n	80047f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80047f2:	887a      	ldrh	r2, [r7, #2]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d141      	bne.n	8004896 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004812:	4b4b      	ldr	r3, [pc, #300]	; (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800481a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800481e:	d131      	bne.n	8004884 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004820:	4b47      	ldr	r3, [pc, #284]	; (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004822:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004826:	4a46      	ldr	r2, [pc, #280]	; (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004828:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800482c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004830:	4b43      	ldr	r3, [pc, #268]	; (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004838:	4a41      	ldr	r2, [pc, #260]	; (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800483a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800483e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004840:	4b40      	ldr	r3, [pc, #256]	; (8004944 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2232      	movs	r2, #50	; 0x32
 8004846:	fb02 f303 	mul.w	r3, r2, r3
 800484a:	4a3f      	ldr	r2, [pc, #252]	; (8004948 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800484c:	fba2 2303 	umull	r2, r3, r2, r3
 8004850:	0c9b      	lsrs	r3, r3, #18
 8004852:	3301      	adds	r3, #1
 8004854:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004856:	e002      	b.n	800485e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	3b01      	subs	r3, #1
 800485c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800485e:	4b38      	ldr	r3, [pc, #224]	; (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800486a:	d102      	bne.n	8004872 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1f2      	bne.n	8004858 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004872:	4b33      	ldr	r3, [pc, #204]	; (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800487a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800487e:	d158      	bne.n	8004932 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e057      	b.n	8004934 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004884:	4b2e      	ldr	r3, [pc, #184]	; (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004886:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800488a:	4a2d      	ldr	r2, [pc, #180]	; (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800488c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004890:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004894:	e04d      	b.n	8004932 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800489c:	d141      	bne.n	8004922 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800489e:	4b28      	ldr	r3, [pc, #160]	; (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80048a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048aa:	d131      	bne.n	8004910 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048ac:	4b24      	ldr	r3, [pc, #144]	; (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048b2:	4a23      	ldr	r2, [pc, #140]	; (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80048bc:	4b20      	ldr	r3, [pc, #128]	; (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80048c4:	4a1e      	ldr	r2, [pc, #120]	; (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80048cc:	4b1d      	ldr	r3, [pc, #116]	; (8004944 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2232      	movs	r2, #50	; 0x32
 80048d2:	fb02 f303 	mul.w	r3, r2, r3
 80048d6:	4a1c      	ldr	r2, [pc, #112]	; (8004948 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80048d8:	fba2 2303 	umull	r2, r3, r2, r3
 80048dc:	0c9b      	lsrs	r3, r3, #18
 80048de:	3301      	adds	r3, #1
 80048e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048e2:	e002      	b.n	80048ea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	3b01      	subs	r3, #1
 80048e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048ea:	4b15      	ldr	r3, [pc, #84]	; (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048f6:	d102      	bne.n	80048fe <HAL_PWREx_ControlVoltageScaling+0xfa>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1f2      	bne.n	80048e4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048fe:	4b10      	ldr	r3, [pc, #64]	; (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800490a:	d112      	bne.n	8004932 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e011      	b.n	8004934 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004910:	4b0b      	ldr	r3, [pc, #44]	; (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004912:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004916:	4a0a      	ldr	r2, [pc, #40]	; (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800491c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004920:	e007      	b.n	8004932 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004922:	4b07      	ldr	r3, [pc, #28]	; (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800492a:	4a05      	ldr	r2, [pc, #20]	; (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800492c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004930:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3714      	adds	r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr
 8004940:	40007000 	.word	0x40007000
 8004944:	200003cc 	.word	0x200003cc
 8004948:	431bde83 	.word	0x431bde83

0800494c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b088      	sub	sp, #32
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e308      	b.n	8004f70 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b00      	cmp	r3, #0
 8004968:	d075      	beq.n	8004a56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800496a:	4ba3      	ldr	r3, [pc, #652]	; (8004bf8 <HAL_RCC_OscConfig+0x2ac>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f003 030c 	and.w	r3, r3, #12
 8004972:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004974:	4ba0      	ldr	r3, [pc, #640]	; (8004bf8 <HAL_RCC_OscConfig+0x2ac>)
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f003 0303 	and.w	r3, r3, #3
 800497c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	2b0c      	cmp	r3, #12
 8004982:	d102      	bne.n	800498a <HAL_RCC_OscConfig+0x3e>
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	2b03      	cmp	r3, #3
 8004988:	d002      	beq.n	8004990 <HAL_RCC_OscConfig+0x44>
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	2b08      	cmp	r3, #8
 800498e:	d10b      	bne.n	80049a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004990:	4b99      	ldr	r3, [pc, #612]	; (8004bf8 <HAL_RCC_OscConfig+0x2ac>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d05b      	beq.n	8004a54 <HAL_RCC_OscConfig+0x108>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d157      	bne.n	8004a54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e2e3      	b.n	8004f70 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b0:	d106      	bne.n	80049c0 <HAL_RCC_OscConfig+0x74>
 80049b2:	4b91      	ldr	r3, [pc, #580]	; (8004bf8 <HAL_RCC_OscConfig+0x2ac>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a90      	ldr	r2, [pc, #576]	; (8004bf8 <HAL_RCC_OscConfig+0x2ac>)
 80049b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049bc:	6013      	str	r3, [r2, #0]
 80049be:	e01d      	b.n	80049fc <HAL_RCC_OscConfig+0xb0>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049c8:	d10c      	bne.n	80049e4 <HAL_RCC_OscConfig+0x98>
 80049ca:	4b8b      	ldr	r3, [pc, #556]	; (8004bf8 <HAL_RCC_OscConfig+0x2ac>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a8a      	ldr	r2, [pc, #552]	; (8004bf8 <HAL_RCC_OscConfig+0x2ac>)
 80049d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049d4:	6013      	str	r3, [r2, #0]
 80049d6:	4b88      	ldr	r3, [pc, #544]	; (8004bf8 <HAL_RCC_OscConfig+0x2ac>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a87      	ldr	r2, [pc, #540]	; (8004bf8 <HAL_RCC_OscConfig+0x2ac>)
 80049dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049e0:	6013      	str	r3, [r2, #0]
 80049e2:	e00b      	b.n	80049fc <HAL_RCC_OscConfig+0xb0>
 80049e4:	4b84      	ldr	r3, [pc, #528]	; (8004bf8 <HAL_RCC_OscConfig+0x2ac>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a83      	ldr	r2, [pc, #524]	; (8004bf8 <HAL_RCC_OscConfig+0x2ac>)
 80049ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ee:	6013      	str	r3, [r2, #0]
 80049f0:	4b81      	ldr	r3, [pc, #516]	; (8004bf8 <HAL_RCC_OscConfig+0x2ac>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a80      	ldr	r2, [pc, #512]	; (8004bf8 <HAL_RCC_OscConfig+0x2ac>)
 80049f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d013      	beq.n	8004a2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a04:	f7fd faaa 	bl	8001f5c <HAL_GetTick>
 8004a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a0a:	e008      	b.n	8004a1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a0c:	f7fd faa6 	bl	8001f5c <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b64      	cmp	r3, #100	; 0x64
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e2a8      	b.n	8004f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a1e:	4b76      	ldr	r3, [pc, #472]	; (8004bf8 <HAL_RCC_OscConfig+0x2ac>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d0f0      	beq.n	8004a0c <HAL_RCC_OscConfig+0xc0>
 8004a2a:	e014      	b.n	8004a56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a2c:	f7fd fa96 	bl	8001f5c <HAL_GetTick>
 8004a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a32:	e008      	b.n	8004a46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a34:	f7fd fa92 	bl	8001f5c <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b64      	cmp	r3, #100	; 0x64
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e294      	b.n	8004f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a46:	4b6c      	ldr	r3, [pc, #432]	; (8004bf8 <HAL_RCC_OscConfig+0x2ac>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1f0      	bne.n	8004a34 <HAL_RCC_OscConfig+0xe8>
 8004a52:	e000      	b.n	8004a56 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d075      	beq.n	8004b4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a62:	4b65      	ldr	r3, [pc, #404]	; (8004bf8 <HAL_RCC_OscConfig+0x2ac>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f003 030c 	and.w	r3, r3, #12
 8004a6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a6c:	4b62      	ldr	r3, [pc, #392]	; (8004bf8 <HAL_RCC_OscConfig+0x2ac>)
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	f003 0303 	and.w	r3, r3, #3
 8004a74:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	2b0c      	cmp	r3, #12
 8004a7a:	d102      	bne.n	8004a82 <HAL_RCC_OscConfig+0x136>
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d002      	beq.n	8004a88 <HAL_RCC_OscConfig+0x13c>
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	2b04      	cmp	r3, #4
 8004a86:	d11f      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a88:	4b5b      	ldr	r3, [pc, #364]	; (8004bf8 <HAL_RCC_OscConfig+0x2ac>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d005      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x154>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d101      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e267      	b.n	8004f70 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aa0:	4b55      	ldr	r3, [pc, #340]	; (8004bf8 <HAL_RCC_OscConfig+0x2ac>)
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	061b      	lsls	r3, r3, #24
 8004aae:	4952      	ldr	r1, [pc, #328]	; (8004bf8 <HAL_RCC_OscConfig+0x2ac>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004ab4:	4b51      	ldr	r3, [pc, #324]	; (8004bfc <HAL_RCC_OscConfig+0x2b0>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7fd fa03 	bl	8001ec4 <HAL_InitTick>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d043      	beq.n	8004b4c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e253      	b.n	8004f70 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d023      	beq.n	8004b18 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ad0:	4b49      	ldr	r3, [pc, #292]	; (8004bf8 <HAL_RCC_OscConfig+0x2ac>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a48      	ldr	r2, [pc, #288]	; (8004bf8 <HAL_RCC_OscConfig+0x2ac>)
 8004ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004adc:	f7fd fa3e 	bl	8001f5c <HAL_GetTick>
 8004ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ae2:	e008      	b.n	8004af6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ae4:	f7fd fa3a 	bl	8001f5c <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e23c      	b.n	8004f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004af6:	4b40      	ldr	r3, [pc, #256]	; (8004bf8 <HAL_RCC_OscConfig+0x2ac>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d0f0      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b02:	4b3d      	ldr	r3, [pc, #244]	; (8004bf8 <HAL_RCC_OscConfig+0x2ac>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	061b      	lsls	r3, r3, #24
 8004b10:	4939      	ldr	r1, [pc, #228]	; (8004bf8 <HAL_RCC_OscConfig+0x2ac>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	604b      	str	r3, [r1, #4]
 8004b16:	e01a      	b.n	8004b4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b18:	4b37      	ldr	r3, [pc, #220]	; (8004bf8 <HAL_RCC_OscConfig+0x2ac>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a36      	ldr	r2, [pc, #216]	; (8004bf8 <HAL_RCC_OscConfig+0x2ac>)
 8004b1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b24:	f7fd fa1a 	bl	8001f5c <HAL_GetTick>
 8004b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b2a:	e008      	b.n	8004b3e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b2c:	f7fd fa16 	bl	8001f5c <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e218      	b.n	8004f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b3e:	4b2e      	ldr	r3, [pc, #184]	; (8004bf8 <HAL_RCC_OscConfig+0x2ac>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1f0      	bne.n	8004b2c <HAL_RCC_OscConfig+0x1e0>
 8004b4a:	e000      	b.n	8004b4e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0308 	and.w	r3, r3, #8
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d03c      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d01c      	beq.n	8004b9c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b62:	4b25      	ldr	r3, [pc, #148]	; (8004bf8 <HAL_RCC_OscConfig+0x2ac>)
 8004b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b68:	4a23      	ldr	r2, [pc, #140]	; (8004bf8 <HAL_RCC_OscConfig+0x2ac>)
 8004b6a:	f043 0301 	orr.w	r3, r3, #1
 8004b6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b72:	f7fd f9f3 	bl	8001f5c <HAL_GetTick>
 8004b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b78:	e008      	b.n	8004b8c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b7a:	f7fd f9ef 	bl	8001f5c <HAL_GetTick>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d901      	bls.n	8004b8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e1f1      	b.n	8004f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b8c:	4b1a      	ldr	r3, [pc, #104]	; (8004bf8 <HAL_RCC_OscConfig+0x2ac>)
 8004b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d0ef      	beq.n	8004b7a <HAL_RCC_OscConfig+0x22e>
 8004b9a:	e01b      	b.n	8004bd4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b9c:	4b16      	ldr	r3, [pc, #88]	; (8004bf8 <HAL_RCC_OscConfig+0x2ac>)
 8004b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ba2:	4a15      	ldr	r2, [pc, #84]	; (8004bf8 <HAL_RCC_OscConfig+0x2ac>)
 8004ba4:	f023 0301 	bic.w	r3, r3, #1
 8004ba8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bac:	f7fd f9d6 	bl	8001f5c <HAL_GetTick>
 8004bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bb2:	e008      	b.n	8004bc6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bb4:	f7fd f9d2 	bl	8001f5c <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e1d4      	b.n	8004f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bc6:	4b0c      	ldr	r3, [pc, #48]	; (8004bf8 <HAL_RCC_OscConfig+0x2ac>)
 8004bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bcc:	f003 0302 	and.w	r3, r3, #2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1ef      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f000 80ab 	beq.w	8004d38 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004be2:	2300      	movs	r3, #0
 8004be4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004be6:	4b04      	ldr	r3, [pc, #16]	; (8004bf8 <HAL_RCC_OscConfig+0x2ac>)
 8004be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d106      	bne.n	8004c00 <HAL_RCC_OscConfig+0x2b4>
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e005      	b.n	8004c02 <HAL_RCC_OscConfig+0x2b6>
 8004bf6:	bf00      	nop
 8004bf8:	40021000 	.word	0x40021000
 8004bfc:	200003d0 	.word	0x200003d0
 8004c00:	2300      	movs	r3, #0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00d      	beq.n	8004c22 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c06:	4baf      	ldr	r3, [pc, #700]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c0a:	4aae      	ldr	r2, [pc, #696]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c10:	6593      	str	r3, [r2, #88]	; 0x58
 8004c12:	4bac      	ldr	r3, [pc, #688]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c1a:	60fb      	str	r3, [r7, #12]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c22:	4ba9      	ldr	r3, [pc, #676]	; (8004ec8 <HAL_RCC_OscConfig+0x57c>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d118      	bne.n	8004c60 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c2e:	4ba6      	ldr	r3, [pc, #664]	; (8004ec8 <HAL_RCC_OscConfig+0x57c>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4aa5      	ldr	r2, [pc, #660]	; (8004ec8 <HAL_RCC_OscConfig+0x57c>)
 8004c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c3a:	f7fd f98f 	bl	8001f5c <HAL_GetTick>
 8004c3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c40:	e008      	b.n	8004c54 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c42:	f7fd f98b 	bl	8001f5c <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d901      	bls.n	8004c54 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e18d      	b.n	8004f70 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c54:	4b9c      	ldr	r3, [pc, #624]	; (8004ec8 <HAL_RCC_OscConfig+0x57c>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d0f0      	beq.n	8004c42 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d108      	bne.n	8004c7a <HAL_RCC_OscConfig+0x32e>
 8004c68:	4b96      	ldr	r3, [pc, #600]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c6e:	4a95      	ldr	r2, [pc, #596]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004c70:	f043 0301 	orr.w	r3, r3, #1
 8004c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c78:	e024      	b.n	8004cc4 <HAL_RCC_OscConfig+0x378>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	2b05      	cmp	r3, #5
 8004c80:	d110      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x358>
 8004c82:	4b90      	ldr	r3, [pc, #576]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c88:	4a8e      	ldr	r2, [pc, #568]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004c8a:	f043 0304 	orr.w	r3, r3, #4
 8004c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c92:	4b8c      	ldr	r3, [pc, #560]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c98:	4a8a      	ldr	r2, [pc, #552]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004c9a:	f043 0301 	orr.w	r3, r3, #1
 8004c9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ca2:	e00f      	b.n	8004cc4 <HAL_RCC_OscConfig+0x378>
 8004ca4:	4b87      	ldr	r3, [pc, #540]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004caa:	4a86      	ldr	r2, [pc, #536]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004cac:	f023 0301 	bic.w	r3, r3, #1
 8004cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004cb4:	4b83      	ldr	r3, [pc, #524]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cba:	4a82      	ldr	r2, [pc, #520]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004cbc:	f023 0304 	bic.w	r3, r3, #4
 8004cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d016      	beq.n	8004cfa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ccc:	f7fd f946 	bl	8001f5c <HAL_GetTick>
 8004cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cd2:	e00a      	b.n	8004cea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cd4:	f7fd f942 	bl	8001f5c <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d901      	bls.n	8004cea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e142      	b.n	8004f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cea:	4b76      	ldr	r3, [pc, #472]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0ed      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x388>
 8004cf8:	e015      	b.n	8004d26 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cfa:	f7fd f92f 	bl	8001f5c <HAL_GetTick>
 8004cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d00:	e00a      	b.n	8004d18 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d02:	f7fd f92b 	bl	8001f5c <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d901      	bls.n	8004d18 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e12b      	b.n	8004f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d18:	4b6a      	ldr	r3, [pc, #424]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1ed      	bne.n	8004d02 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d26:	7ffb      	ldrb	r3, [r7, #31]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d105      	bne.n	8004d38 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d2c:	4b65      	ldr	r3, [pc, #404]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d30:	4a64      	ldr	r2, [pc, #400]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d36:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0320 	and.w	r3, r3, #32
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d03c      	beq.n	8004dbe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	699b      	ldr	r3, [r3, #24]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d01c      	beq.n	8004d86 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d4c:	4b5d      	ldr	r3, [pc, #372]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004d4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d52:	4a5c      	ldr	r2, [pc, #368]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004d54:	f043 0301 	orr.w	r3, r3, #1
 8004d58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d5c:	f7fd f8fe 	bl	8001f5c <HAL_GetTick>
 8004d60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d62:	e008      	b.n	8004d76 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d64:	f7fd f8fa 	bl	8001f5c <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e0fc      	b.n	8004f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d76:	4b53      	ldr	r3, [pc, #332]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004d78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0ef      	beq.n	8004d64 <HAL_RCC_OscConfig+0x418>
 8004d84:	e01b      	b.n	8004dbe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d86:	4b4f      	ldr	r3, [pc, #316]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004d88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d8c:	4a4d      	ldr	r2, [pc, #308]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004d8e:	f023 0301 	bic.w	r3, r3, #1
 8004d92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d96:	f7fd f8e1 	bl	8001f5c <HAL_GetTick>
 8004d9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d9c:	e008      	b.n	8004db0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d9e:	f7fd f8dd 	bl	8001f5c <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d901      	bls.n	8004db0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e0df      	b.n	8004f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004db0:	4b44      	ldr	r3, [pc, #272]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004db2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1ef      	bne.n	8004d9e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	69db      	ldr	r3, [r3, #28]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f000 80d3 	beq.w	8004f6e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004dc8:	4b3e      	ldr	r3, [pc, #248]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f003 030c 	and.w	r3, r3, #12
 8004dd0:	2b0c      	cmp	r3, #12
 8004dd2:	f000 808d 	beq.w	8004ef0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	69db      	ldr	r3, [r3, #28]
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d15a      	bne.n	8004e94 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dde:	4b39      	ldr	r3, [pc, #228]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a38      	ldr	r2, [pc, #224]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004de4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dea:	f7fd f8b7 	bl	8001f5c <HAL_GetTick>
 8004dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004df0:	e008      	b.n	8004e04 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004df2:	f7fd f8b3 	bl	8001f5c <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d901      	bls.n	8004e04 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e0b5      	b.n	8004f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e04:	4b2f      	ldr	r3, [pc, #188]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1f0      	bne.n	8004df2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e10:	4b2c      	ldr	r3, [pc, #176]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004e12:	68da      	ldr	r2, [r3, #12]
 8004e14:	4b2d      	ldr	r3, [pc, #180]	; (8004ecc <HAL_RCC_OscConfig+0x580>)
 8004e16:	4013      	ands	r3, r2
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	6a11      	ldr	r1, [r2, #32]
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e20:	3a01      	subs	r2, #1
 8004e22:	0112      	lsls	r2, r2, #4
 8004e24:	4311      	orrs	r1, r2
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004e2a:	0212      	lsls	r2, r2, #8
 8004e2c:	4311      	orrs	r1, r2
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004e32:	0852      	lsrs	r2, r2, #1
 8004e34:	3a01      	subs	r2, #1
 8004e36:	0552      	lsls	r2, r2, #21
 8004e38:	4311      	orrs	r1, r2
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e3e:	0852      	lsrs	r2, r2, #1
 8004e40:	3a01      	subs	r2, #1
 8004e42:	0652      	lsls	r2, r2, #25
 8004e44:	4311      	orrs	r1, r2
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004e4a:	06d2      	lsls	r2, r2, #27
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	491d      	ldr	r1, [pc, #116]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e54:	4b1b      	ldr	r3, [pc, #108]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a1a      	ldr	r2, [pc, #104]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e5e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e60:	4b18      	ldr	r3, [pc, #96]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	4a17      	ldr	r2, [pc, #92]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004e66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e6a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e6c:	f7fd f876 	bl	8001f5c <HAL_GetTick>
 8004e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e72:	e008      	b.n	8004e86 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e74:	f7fd f872 	bl	8001f5c <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d901      	bls.n	8004e86 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e074      	b.n	8004f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e86:	4b0f      	ldr	r3, [pc, #60]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d0f0      	beq.n	8004e74 <HAL_RCC_OscConfig+0x528>
 8004e92:	e06c      	b.n	8004f6e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e94:	4b0b      	ldr	r3, [pc, #44]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a0a      	ldr	r2, [pc, #40]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004e9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e9e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004ea0:	4b08      	ldr	r3, [pc, #32]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	4a07      	ldr	r2, [pc, #28]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004ea6:	f023 0303 	bic.w	r3, r3, #3
 8004eaa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004eac:	4b05      	ldr	r3, [pc, #20]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	4a04      	ldr	r2, [pc, #16]	; (8004ec4 <HAL_RCC_OscConfig+0x578>)
 8004eb2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ebc:	f7fd f84e 	bl	8001f5c <HAL_GetTick>
 8004ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ec2:	e00e      	b.n	8004ee2 <HAL_RCC_OscConfig+0x596>
 8004ec4:	40021000 	.word	0x40021000
 8004ec8:	40007000 	.word	0x40007000
 8004ecc:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ed0:	f7fd f844 	bl	8001f5c <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e046      	b.n	8004f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ee2:	4b25      	ldr	r3, [pc, #148]	; (8004f78 <HAL_RCC_OscConfig+0x62c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1f0      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x584>
 8004eee:	e03e      	b.n	8004f6e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	69db      	ldr	r3, [r3, #28]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d101      	bne.n	8004efc <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e039      	b.n	8004f70 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004efc:	4b1e      	ldr	r3, [pc, #120]	; (8004f78 <HAL_RCC_OscConfig+0x62c>)
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f003 0203 	and.w	r2, r3, #3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a1b      	ldr	r3, [r3, #32]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d12c      	bne.n	8004f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d123      	bne.n	8004f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d11b      	bne.n	8004f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d113      	bne.n	8004f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4c:	085b      	lsrs	r3, r3, #1
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d109      	bne.n	8004f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f60:	085b      	lsrs	r3, r3, #1
 8004f62:	3b01      	subs	r3, #1
 8004f64:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d001      	beq.n	8004f6e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e000      	b.n	8004f70 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3720      	adds	r7, #32
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	40021000 	.word	0x40021000

08004f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004f86:	2300      	movs	r3, #0
 8004f88:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d101      	bne.n	8004f94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e11e      	b.n	80051d2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f94:	4b91      	ldr	r3, [pc, #580]	; (80051dc <HAL_RCC_ClockConfig+0x260>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 030f 	and.w	r3, r3, #15
 8004f9c:	683a      	ldr	r2, [r7, #0]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d910      	bls.n	8004fc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fa2:	4b8e      	ldr	r3, [pc, #568]	; (80051dc <HAL_RCC_ClockConfig+0x260>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f023 020f 	bic.w	r2, r3, #15
 8004faa:	498c      	ldr	r1, [pc, #560]	; (80051dc <HAL_RCC_ClockConfig+0x260>)
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fb2:	4b8a      	ldr	r3, [pc, #552]	; (80051dc <HAL_RCC_ClockConfig+0x260>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 030f 	and.w	r3, r3, #15
 8004fba:	683a      	ldr	r2, [r7, #0]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d001      	beq.n	8004fc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e106      	b.n	80051d2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0301 	and.w	r3, r3, #1
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d073      	beq.n	80050b8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	2b03      	cmp	r3, #3
 8004fd6:	d129      	bne.n	800502c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fd8:	4b81      	ldr	r3, [pc, #516]	; (80051e0 <HAL_RCC_ClockConfig+0x264>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d101      	bne.n	8004fe8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e0f4      	b.n	80051d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004fe8:	f000 f972 	bl	80052d0 <RCC_GetSysClockFreqFromPLLSource>
 8004fec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	4a7c      	ldr	r2, [pc, #496]	; (80051e4 <HAL_RCC_ClockConfig+0x268>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d93f      	bls.n	8005076 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004ff6:	4b7a      	ldr	r3, [pc, #488]	; (80051e0 <HAL_RCC_ClockConfig+0x264>)
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d009      	beq.n	8005016 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800500a:	2b00      	cmp	r3, #0
 800500c:	d033      	beq.n	8005076 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005012:	2b00      	cmp	r3, #0
 8005014:	d12f      	bne.n	8005076 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005016:	4b72      	ldr	r3, [pc, #456]	; (80051e0 <HAL_RCC_ClockConfig+0x264>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800501e:	4a70      	ldr	r2, [pc, #448]	; (80051e0 <HAL_RCC_ClockConfig+0x264>)
 8005020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005024:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005026:	2380      	movs	r3, #128	; 0x80
 8005028:	617b      	str	r3, [r7, #20]
 800502a:	e024      	b.n	8005076 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	2b02      	cmp	r3, #2
 8005032:	d107      	bne.n	8005044 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005034:	4b6a      	ldr	r3, [pc, #424]	; (80051e0 <HAL_RCC_ClockConfig+0x264>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d109      	bne.n	8005054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e0c6      	b.n	80051d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005044:	4b66      	ldr	r3, [pc, #408]	; (80051e0 <HAL_RCC_ClockConfig+0x264>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800504c:	2b00      	cmp	r3, #0
 800504e:	d101      	bne.n	8005054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e0be      	b.n	80051d2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005054:	f000 f8ce 	bl	80051f4 <HAL_RCC_GetSysClockFreq>
 8005058:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	4a61      	ldr	r2, [pc, #388]	; (80051e4 <HAL_RCC_ClockConfig+0x268>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d909      	bls.n	8005076 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005062:	4b5f      	ldr	r3, [pc, #380]	; (80051e0 <HAL_RCC_ClockConfig+0x264>)
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800506a:	4a5d      	ldr	r2, [pc, #372]	; (80051e0 <HAL_RCC_ClockConfig+0x264>)
 800506c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005070:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005072:	2380      	movs	r3, #128	; 0x80
 8005074:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005076:	4b5a      	ldr	r3, [pc, #360]	; (80051e0 <HAL_RCC_ClockConfig+0x264>)
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f023 0203 	bic.w	r2, r3, #3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	4957      	ldr	r1, [pc, #348]	; (80051e0 <HAL_RCC_ClockConfig+0x264>)
 8005084:	4313      	orrs	r3, r2
 8005086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005088:	f7fc ff68 	bl	8001f5c <HAL_GetTick>
 800508c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800508e:	e00a      	b.n	80050a6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005090:	f7fc ff64 	bl	8001f5c <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	f241 3288 	movw	r2, #5000	; 0x1388
 800509e:	4293      	cmp	r3, r2
 80050a0:	d901      	bls.n	80050a6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e095      	b.n	80051d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050a6:	4b4e      	ldr	r3, [pc, #312]	; (80051e0 <HAL_RCC_ClockConfig+0x264>)
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f003 020c 	and.w	r2, r3, #12
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d1eb      	bne.n	8005090 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0302 	and.w	r3, r3, #2
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d023      	beq.n	800510c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0304 	and.w	r3, r3, #4
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d005      	beq.n	80050dc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050d0:	4b43      	ldr	r3, [pc, #268]	; (80051e0 <HAL_RCC_ClockConfig+0x264>)
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	4a42      	ldr	r2, [pc, #264]	; (80051e0 <HAL_RCC_ClockConfig+0x264>)
 80050d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80050da:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0308 	and.w	r3, r3, #8
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d007      	beq.n	80050f8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80050e8:	4b3d      	ldr	r3, [pc, #244]	; (80051e0 <HAL_RCC_ClockConfig+0x264>)
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80050f0:	4a3b      	ldr	r2, [pc, #236]	; (80051e0 <HAL_RCC_ClockConfig+0x264>)
 80050f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80050f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050f8:	4b39      	ldr	r3, [pc, #228]	; (80051e0 <HAL_RCC_ClockConfig+0x264>)
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	4936      	ldr	r1, [pc, #216]	; (80051e0 <HAL_RCC_ClockConfig+0x264>)
 8005106:	4313      	orrs	r3, r2
 8005108:	608b      	str	r3, [r1, #8]
 800510a:	e008      	b.n	800511e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	2b80      	cmp	r3, #128	; 0x80
 8005110:	d105      	bne.n	800511e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005112:	4b33      	ldr	r3, [pc, #204]	; (80051e0 <HAL_RCC_ClockConfig+0x264>)
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	4a32      	ldr	r2, [pc, #200]	; (80051e0 <HAL_RCC_ClockConfig+0x264>)
 8005118:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800511c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800511e:	4b2f      	ldr	r3, [pc, #188]	; (80051dc <HAL_RCC_ClockConfig+0x260>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 030f 	and.w	r3, r3, #15
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	429a      	cmp	r2, r3
 800512a:	d21d      	bcs.n	8005168 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800512c:	4b2b      	ldr	r3, [pc, #172]	; (80051dc <HAL_RCC_ClockConfig+0x260>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f023 020f 	bic.w	r2, r3, #15
 8005134:	4929      	ldr	r1, [pc, #164]	; (80051dc <HAL_RCC_ClockConfig+0x260>)
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	4313      	orrs	r3, r2
 800513a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800513c:	f7fc ff0e 	bl	8001f5c <HAL_GetTick>
 8005140:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005142:	e00a      	b.n	800515a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005144:	f7fc ff0a 	bl	8001f5c <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005152:	4293      	cmp	r3, r2
 8005154:	d901      	bls.n	800515a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e03b      	b.n	80051d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800515a:	4b20      	ldr	r3, [pc, #128]	; (80051dc <HAL_RCC_ClockConfig+0x260>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 030f 	and.w	r3, r3, #15
 8005162:	683a      	ldr	r2, [r7, #0]
 8005164:	429a      	cmp	r2, r3
 8005166:	d1ed      	bne.n	8005144 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0304 	and.w	r3, r3, #4
 8005170:	2b00      	cmp	r3, #0
 8005172:	d008      	beq.n	8005186 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005174:	4b1a      	ldr	r3, [pc, #104]	; (80051e0 <HAL_RCC_ClockConfig+0x264>)
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	4917      	ldr	r1, [pc, #92]	; (80051e0 <HAL_RCC_ClockConfig+0x264>)
 8005182:	4313      	orrs	r3, r2
 8005184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0308 	and.w	r3, r3, #8
 800518e:	2b00      	cmp	r3, #0
 8005190:	d009      	beq.n	80051a6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005192:	4b13      	ldr	r3, [pc, #76]	; (80051e0 <HAL_RCC_ClockConfig+0x264>)
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	00db      	lsls	r3, r3, #3
 80051a0:	490f      	ldr	r1, [pc, #60]	; (80051e0 <HAL_RCC_ClockConfig+0x264>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80051a6:	f000 f825 	bl	80051f4 <HAL_RCC_GetSysClockFreq>
 80051aa:	4601      	mov	r1, r0
 80051ac:	4b0c      	ldr	r3, [pc, #48]	; (80051e0 <HAL_RCC_ClockConfig+0x264>)
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	091b      	lsrs	r3, r3, #4
 80051b2:	f003 030f 	and.w	r3, r3, #15
 80051b6:	4a0c      	ldr	r2, [pc, #48]	; (80051e8 <HAL_RCC_ClockConfig+0x26c>)
 80051b8:	5cd3      	ldrb	r3, [r2, r3]
 80051ba:	f003 031f 	and.w	r3, r3, #31
 80051be:	fa21 f303 	lsr.w	r3, r1, r3
 80051c2:	4a0a      	ldr	r2, [pc, #40]	; (80051ec <HAL_RCC_ClockConfig+0x270>)
 80051c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80051c6:	4b0a      	ldr	r3, [pc, #40]	; (80051f0 <HAL_RCC_ClockConfig+0x274>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7fc fe7a 	bl	8001ec4 <HAL_InitTick>
 80051d0:	4603      	mov	r3, r0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3718      	adds	r7, #24
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	40022000 	.word	0x40022000
 80051e0:	40021000 	.word	0x40021000
 80051e4:	04c4b400 	.word	0x04c4b400
 80051e8:	08009110 	.word	0x08009110
 80051ec:	200003cc 	.word	0x200003cc
 80051f0:	200003d0 	.word	0x200003d0

080051f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b087      	sub	sp, #28
 80051f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80051fa:	4b2c      	ldr	r3, [pc, #176]	; (80052ac <HAL_RCC_GetSysClockFreq+0xb8>)
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f003 030c 	and.w	r3, r3, #12
 8005202:	2b04      	cmp	r3, #4
 8005204:	d102      	bne.n	800520c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005206:	4b2a      	ldr	r3, [pc, #168]	; (80052b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005208:	613b      	str	r3, [r7, #16]
 800520a:	e047      	b.n	800529c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800520c:	4b27      	ldr	r3, [pc, #156]	; (80052ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f003 030c 	and.w	r3, r3, #12
 8005214:	2b08      	cmp	r3, #8
 8005216:	d102      	bne.n	800521e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005218:	4b26      	ldr	r3, [pc, #152]	; (80052b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800521a:	613b      	str	r3, [r7, #16]
 800521c:	e03e      	b.n	800529c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800521e:	4b23      	ldr	r3, [pc, #140]	; (80052ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	f003 030c 	and.w	r3, r3, #12
 8005226:	2b0c      	cmp	r3, #12
 8005228:	d136      	bne.n	8005298 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800522a:	4b20      	ldr	r3, [pc, #128]	; (80052ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	f003 0303 	and.w	r3, r3, #3
 8005232:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005234:	4b1d      	ldr	r3, [pc, #116]	; (80052ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	091b      	lsrs	r3, r3, #4
 800523a:	f003 030f 	and.w	r3, r3, #15
 800523e:	3301      	adds	r3, #1
 8005240:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2b03      	cmp	r3, #3
 8005246:	d10c      	bne.n	8005262 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005248:	4a1a      	ldr	r2, [pc, #104]	; (80052b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005250:	4a16      	ldr	r2, [pc, #88]	; (80052ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8005252:	68d2      	ldr	r2, [r2, #12]
 8005254:	0a12      	lsrs	r2, r2, #8
 8005256:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800525a:	fb02 f303 	mul.w	r3, r2, r3
 800525e:	617b      	str	r3, [r7, #20]
      break;
 8005260:	e00c      	b.n	800527c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005262:	4a13      	ldr	r2, [pc, #76]	; (80052b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	fbb2 f3f3 	udiv	r3, r2, r3
 800526a:	4a10      	ldr	r2, [pc, #64]	; (80052ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800526c:	68d2      	ldr	r2, [r2, #12]
 800526e:	0a12      	lsrs	r2, r2, #8
 8005270:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005274:	fb02 f303 	mul.w	r3, r2, r3
 8005278:	617b      	str	r3, [r7, #20]
      break;
 800527a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800527c:	4b0b      	ldr	r3, [pc, #44]	; (80052ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	0e5b      	lsrs	r3, r3, #25
 8005282:	f003 0303 	and.w	r3, r3, #3
 8005286:	3301      	adds	r3, #1
 8005288:	005b      	lsls	r3, r3, #1
 800528a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800528c:	697a      	ldr	r2, [r7, #20]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	fbb2 f3f3 	udiv	r3, r2, r3
 8005294:	613b      	str	r3, [r7, #16]
 8005296:	e001      	b.n	800529c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005298:	2300      	movs	r3, #0
 800529a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800529c:	693b      	ldr	r3, [r7, #16]
}
 800529e:	4618      	mov	r0, r3
 80052a0:	371c      	adds	r7, #28
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	40021000 	.word	0x40021000
 80052b0:	00f42400 	.word	0x00f42400
 80052b4:	007a1200 	.word	0x007a1200

080052b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052b8:	b480      	push	{r7}
 80052ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052bc:	4b03      	ldr	r3, [pc, #12]	; (80052cc <HAL_RCC_GetHCLKFreq+0x14>)
 80052be:	681b      	ldr	r3, [r3, #0]
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	200003cc 	.word	0x200003cc

080052d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b087      	sub	sp, #28
 80052d4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052d6:	4b1e      	ldr	r3, [pc, #120]	; (8005350 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	f003 0303 	and.w	r3, r3, #3
 80052de:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052e0:	4b1b      	ldr	r3, [pc, #108]	; (8005350 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	091b      	lsrs	r3, r3, #4
 80052e6:	f003 030f 	and.w	r3, r3, #15
 80052ea:	3301      	adds	r3, #1
 80052ec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	2b03      	cmp	r3, #3
 80052f2:	d10c      	bne.n	800530e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052f4:	4a17      	ldr	r2, [pc, #92]	; (8005354 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052fc:	4a14      	ldr	r2, [pc, #80]	; (8005350 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052fe:	68d2      	ldr	r2, [r2, #12]
 8005300:	0a12      	lsrs	r2, r2, #8
 8005302:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005306:	fb02 f303 	mul.w	r3, r2, r3
 800530a:	617b      	str	r3, [r7, #20]
    break;
 800530c:	e00c      	b.n	8005328 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800530e:	4a12      	ldr	r2, [pc, #72]	; (8005358 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	fbb2 f3f3 	udiv	r3, r2, r3
 8005316:	4a0e      	ldr	r2, [pc, #56]	; (8005350 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005318:	68d2      	ldr	r2, [r2, #12]
 800531a:	0a12      	lsrs	r2, r2, #8
 800531c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005320:	fb02 f303 	mul.w	r3, r2, r3
 8005324:	617b      	str	r3, [r7, #20]
    break;
 8005326:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005328:	4b09      	ldr	r3, [pc, #36]	; (8005350 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	0e5b      	lsrs	r3, r3, #25
 800532e:	f003 0303 	and.w	r3, r3, #3
 8005332:	3301      	adds	r3, #1
 8005334:	005b      	lsls	r3, r3, #1
 8005336:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005340:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005342:	687b      	ldr	r3, [r7, #4]
}
 8005344:	4618      	mov	r0, r3
 8005346:	371c      	adds	r7, #28
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr
 8005350:	40021000 	.word	0x40021000
 8005354:	007a1200 	.word	0x007a1200
 8005358:	00f42400 	.word	0x00f42400

0800535c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005364:	2300      	movs	r3, #0
 8005366:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005368:	2300      	movs	r3, #0
 800536a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005374:	2b00      	cmp	r3, #0
 8005376:	f000 8098 	beq.w	80054aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800537a:	2300      	movs	r3, #0
 800537c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800537e:	4b43      	ldr	r3, [pc, #268]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10d      	bne.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800538a:	4b40      	ldr	r3, [pc, #256]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800538c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800538e:	4a3f      	ldr	r2, [pc, #252]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005394:	6593      	str	r3, [r2, #88]	; 0x58
 8005396:	4b3d      	ldr	r3, [pc, #244]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800539a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800539e:	60bb      	str	r3, [r7, #8]
 80053a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053a2:	2301      	movs	r3, #1
 80053a4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053a6:	4b3a      	ldr	r3, [pc, #232]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a39      	ldr	r2, [pc, #228]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80053ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053b2:	f7fc fdd3 	bl	8001f5c <HAL_GetTick>
 80053b6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053b8:	e009      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053ba:	f7fc fdcf 	bl	8001f5c <HAL_GetTick>
 80053be:	4602      	mov	r2, r0
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d902      	bls.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	74fb      	strb	r3, [r7, #19]
        break;
 80053cc:	e005      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053ce:	4b30      	ldr	r3, [pc, #192]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d0ef      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80053da:	7cfb      	ldrb	r3, [r7, #19]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d159      	bne.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80053e0:	4b2a      	ldr	r3, [pc, #168]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053ea:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d01e      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d019      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80053fc:	4b23      	ldr	r3, [pc, #140]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005406:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005408:	4b20      	ldr	r3, [pc, #128]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800540a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540e:	4a1f      	ldr	r2, [pc, #124]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005414:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005418:	4b1c      	ldr	r3, [pc, #112]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800541a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800541e:	4a1b      	ldr	r2, [pc, #108]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005420:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005424:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005428:	4a18      	ldr	r2, [pc, #96]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b00      	cmp	r3, #0
 8005438:	d016      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800543a:	f7fc fd8f 	bl	8001f5c <HAL_GetTick>
 800543e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005440:	e00b      	b.n	800545a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005442:	f7fc fd8b 	bl	8001f5c <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005450:	4293      	cmp	r3, r2
 8005452:	d902      	bls.n	800545a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	74fb      	strb	r3, [r7, #19]
            break;
 8005458:	e006      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800545a:	4b0c      	ldr	r3, [pc, #48]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800545c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005460:	f003 0302 	and.w	r3, r3, #2
 8005464:	2b00      	cmp	r3, #0
 8005466:	d0ec      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005468:	7cfb      	ldrb	r3, [r7, #19]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10b      	bne.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800546e:	4b07      	ldr	r3, [pc, #28]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005474:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800547c:	4903      	ldr	r1, [pc, #12]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800547e:	4313      	orrs	r3, r2
 8005480:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005484:	e008      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005486:	7cfb      	ldrb	r3, [r7, #19]
 8005488:	74bb      	strb	r3, [r7, #18]
 800548a:	e005      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800548c:	40021000 	.word	0x40021000
 8005490:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005494:	7cfb      	ldrb	r3, [r7, #19]
 8005496:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005498:	7c7b      	ldrb	r3, [r7, #17]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d105      	bne.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800549e:	4baf      	ldr	r3, [pc, #700]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80054a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a2:	4aae      	ldr	r2, [pc, #696]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80054a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00a      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054b6:	4ba9      	ldr	r3, [pc, #676]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80054b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054bc:	f023 0203 	bic.w	r2, r3, #3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	49a5      	ldr	r1, [pc, #660]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0302 	and.w	r3, r3, #2
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00a      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80054d8:	4ba0      	ldr	r3, [pc, #640]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80054da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054de:	f023 020c 	bic.w	r2, r3, #12
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	499d      	ldr	r1, [pc, #628]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0304 	and.w	r3, r3, #4
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00a      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80054fa:	4b98      	ldr	r3, [pc, #608]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80054fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005500:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	4994      	ldr	r1, [pc, #592]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800550a:	4313      	orrs	r3, r2
 800550c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0308 	and.w	r3, r3, #8
 8005518:	2b00      	cmp	r3, #0
 800551a:	d00a      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800551c:	4b8f      	ldr	r3, [pc, #572]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800551e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005522:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	498c      	ldr	r1, [pc, #560]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800552c:	4313      	orrs	r3, r2
 800552e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0310 	and.w	r3, r3, #16
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00a      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800553e:	4b87      	ldr	r3, [pc, #540]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005544:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	695b      	ldr	r3, [r3, #20]
 800554c:	4983      	ldr	r1, [pc, #524]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800554e:	4313      	orrs	r3, r2
 8005550:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0320 	and.w	r3, r3, #32
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00a      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005560:	4b7e      	ldr	r3, [pc, #504]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005566:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	497b      	ldr	r1, [pc, #492]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005570:	4313      	orrs	r3, r2
 8005572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00a      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005582:	4b76      	ldr	r3, [pc, #472]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005588:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	69db      	ldr	r3, [r3, #28]
 8005590:	4972      	ldr	r1, [pc, #456]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005592:	4313      	orrs	r3, r2
 8005594:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00a      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80055a4:	4b6d      	ldr	r3, [pc, #436]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055aa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	496a      	ldr	r1, [pc, #424]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00a      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80055c6:	4b65      	ldr	r3, [pc, #404]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d4:	4961      	ldr	r1, [pc, #388]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00a      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80055e8:	4b5c      	ldr	r3, [pc, #368]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055ee:	f023 0203 	bic.w	r2, r3, #3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f6:	4959      	ldr	r1, [pc, #356]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00a      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800560a:	4b54      	ldr	r3, [pc, #336]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800560c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005610:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005618:	4950      	ldr	r1, [pc, #320]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800561a:	4313      	orrs	r3, r2
 800561c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005628:	2b00      	cmp	r3, #0
 800562a:	d015      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800562c:	4b4b      	ldr	r3, [pc, #300]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800562e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005632:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800563a:	4948      	ldr	r1, [pc, #288]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800563c:	4313      	orrs	r3, r2
 800563e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005646:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800564a:	d105      	bne.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800564c:	4b43      	ldr	r3, [pc, #268]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	4a42      	ldr	r2, [pc, #264]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005652:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005656:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005660:	2b00      	cmp	r3, #0
 8005662:	d015      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005664:	4b3d      	ldr	r3, [pc, #244]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800566a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005672:	493a      	ldr	r1, [pc, #232]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005674:	4313      	orrs	r3, r2
 8005676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800567e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005682:	d105      	bne.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005684:	4b35      	ldr	r3, [pc, #212]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	4a34      	ldr	r2, [pc, #208]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800568a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800568e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d015      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800569c:	4b2f      	ldr	r3, [pc, #188]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800569e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056aa:	492c      	ldr	r1, [pc, #176]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056ba:	d105      	bne.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056bc:	4b27      	ldr	r3, [pc, #156]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	4a26      	ldr	r2, [pc, #152]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056c6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d015      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056d4:	4b21      	ldr	r3, [pc, #132]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e2:	491e      	ldr	r1, [pc, #120]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056e4:	4313      	orrs	r3, r2
 80056e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056f2:	d105      	bne.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056f4:	4b19      	ldr	r3, [pc, #100]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	4a18      	ldr	r2, [pc, #96]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056fe:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d015      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800570c:	4b13      	ldr	r3, [pc, #76]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800570e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005712:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571a:	4910      	ldr	r1, [pc, #64]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800571c:	4313      	orrs	r3, r2
 800571e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005726:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800572a:	d105      	bne.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800572c:	4b0b      	ldr	r3, [pc, #44]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	4a0a      	ldr	r2, [pc, #40]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005732:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005736:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d018      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005744:	4b05      	ldr	r3, [pc, #20]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800574a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005752:	4902      	ldr	r1, [pc, #8]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005754:	4313      	orrs	r3, r2
 8005756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800575a:	e001      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800575c:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005764:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005768:	d105      	bne.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800576a:	4b21      	ldr	r3, [pc, #132]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	4a20      	ldr	r2, [pc, #128]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005774:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d015      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005782:	4b1b      	ldr	r3, [pc, #108]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005788:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005790:	4917      	ldr	r1, [pc, #92]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005792:	4313      	orrs	r3, r2
 8005794:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800579c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057a0:	d105      	bne.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80057a2:	4b13      	ldr	r3, [pc, #76]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	4a12      	ldr	r2, [pc, #72]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80057a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057ac:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d015      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80057ba:	4b0d      	ldr	r3, [pc, #52]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80057bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057c8:	4909      	ldr	r1, [pc, #36]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80057ca:	4313      	orrs	r3, r2
 80057cc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057d8:	d105      	bne.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057da:	4b05      	ldr	r3, [pc, #20]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	4a04      	ldr	r2, [pc, #16]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80057e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057e4:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80057e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3718      	adds	r7, #24
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	40021000 	.word	0x40021000

080057f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e084      	b.n	8005910 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b00      	cmp	r3, #0
 8005816:	d106      	bne.n	8005826 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f7fb fda3 	bl	800136c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2202      	movs	r2, #2
 800582a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800583c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005846:	d902      	bls.n	800584e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005848:	2300      	movs	r3, #0
 800584a:	60fb      	str	r3, [r7, #12]
 800584c:	e002      	b.n	8005854 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800584e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005852:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800585c:	d007      	beq.n	800586e <HAL_SPI_Init+0x7a>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005866:	d002      	beq.n	800586e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10b      	bne.n	800588e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800587e:	d903      	bls.n	8005888 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2202      	movs	r2, #2
 8005884:	631a      	str	r2, [r3, #48]	; 0x30
 8005886:	e002      	b.n	800588e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	685a      	ldr	r2, [r3, #4]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	431a      	orrs	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	431a      	orrs	r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	431a      	orrs	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058ac:	431a      	orrs	r2, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	431a      	orrs	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a1b      	ldr	r3, [r3, #32]
 80058b8:	ea42 0103 	orr.w	r1, r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	430a      	orrs	r2, r1
 80058c6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	0c1b      	lsrs	r3, r3, #16
 80058ce:	f003 0204 	and.w	r2, r3, #4
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d6:	431a      	orrs	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058dc:	431a      	orrs	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	ea42 0103 	orr.w	r1, r2, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	430a      	orrs	r2, r1
 80058ee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	69da      	ldr	r2, [r3, #28]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058fe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2201      	movs	r2, #1
 800590a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	3710      	adds	r7, #16
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b088      	sub	sp, #32
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	603b      	str	r3, [r7, #0]
 8005924:	4613      	mov	r3, r2
 8005926:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005928:	2300      	movs	r3, #0
 800592a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005932:	2b01      	cmp	r3, #1
 8005934:	d101      	bne.n	800593a <HAL_SPI_Transmit+0x22>
 8005936:	2302      	movs	r3, #2
 8005938:	e150      	b.n	8005bdc <HAL_SPI_Transmit+0x2c4>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005942:	f7fc fb0b 	bl	8001f5c <HAL_GetTick>
 8005946:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005948:	88fb      	ldrh	r3, [r7, #6]
 800594a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b01      	cmp	r3, #1
 8005956:	d002      	beq.n	800595e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005958:	2302      	movs	r3, #2
 800595a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800595c:	e135      	b.n	8005bca <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d002      	beq.n	800596a <HAL_SPI_Transmit+0x52>
 8005964:	88fb      	ldrh	r3, [r7, #6]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d102      	bne.n	8005970 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800596e:	e12c      	b.n	8005bca <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2203      	movs	r2, #3
 8005974:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	68ba      	ldr	r2, [r7, #8]
 8005982:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	88fa      	ldrh	r2, [r7, #6]
 8005988:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	88fa      	ldrh	r2, [r7, #6]
 800598e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2200      	movs	r2, #0
 8005994:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2200      	movs	r2, #0
 80059b0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059ba:	d107      	bne.n	80059cc <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059ca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d6:	2b40      	cmp	r3, #64	; 0x40
 80059d8:	d007      	beq.n	80059ea <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059f2:	d94b      	bls.n	8005a8c <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d002      	beq.n	8005a02 <HAL_SPI_Transmit+0xea>
 80059fc:	8afb      	ldrh	r3, [r7, #22]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d13e      	bne.n	8005a80 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a06:	881a      	ldrh	r2, [r3, #0]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a12:	1c9a      	adds	r2, r3, #2
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a26:	e02b      	b.n	8005a80 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f003 0302 	and.w	r3, r3, #2
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d112      	bne.n	8005a5c <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3a:	881a      	ldrh	r2, [r3, #0]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a46:	1c9a      	adds	r2, r3, #2
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	3b01      	subs	r3, #1
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a5a:	e011      	b.n	8005a80 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a5c:	f7fc fa7e 	bl	8001f5c <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	683a      	ldr	r2, [r7, #0]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d803      	bhi.n	8005a74 <HAL_SPI_Transmit+0x15c>
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a72:	d102      	bne.n	8005a7a <HAL_SPI_Transmit+0x162>
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d102      	bne.n	8005a80 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a7e:	e0a4      	b.n	8005bca <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1ce      	bne.n	8005a28 <HAL_SPI_Transmit+0x110>
 8005a8a:	e07c      	b.n	8005b86 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d002      	beq.n	8005a9a <HAL_SPI_Transmit+0x182>
 8005a94:	8afb      	ldrh	r3, [r7, #22]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d170      	bne.n	8005b7c <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d912      	bls.n	8005aca <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa8:	881a      	ldrh	r2, [r3, #0]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab4:	1c9a      	adds	r2, r3, #2
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	3b02      	subs	r3, #2
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ac8:	e058      	b.n	8005b7c <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	330c      	adds	r3, #12
 8005ad4:	7812      	ldrb	r2, [r2, #0]
 8005ad6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005adc:	1c5a      	adds	r2, r3, #1
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	b29a      	uxth	r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005af0:	e044      	b.n	8005b7c <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f003 0302 	and.w	r3, r3, #2
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d12b      	bne.n	8005b58 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d912      	bls.n	8005b30 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0e:	881a      	ldrh	r2, [r3, #0]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1a:	1c9a      	adds	r2, r3, #2
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	3b02      	subs	r3, #2
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b2e:	e025      	b.n	8005b7c <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	330c      	adds	r3, #12
 8005b3a:	7812      	ldrb	r2, [r2, #0]
 8005b3c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b42:	1c5a      	adds	r2, r3, #1
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b56:	e011      	b.n	8005b7c <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b58:	f7fc fa00 	bl	8001f5c <HAL_GetTick>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	683a      	ldr	r2, [r7, #0]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d803      	bhi.n	8005b70 <HAL_SPI_Transmit+0x258>
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b6e:	d102      	bne.n	8005b76 <HAL_SPI_Transmit+0x25e>
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d102      	bne.n	8005b7c <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b7a:	e026      	b.n	8005bca <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1b5      	bne.n	8005af2 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b86:	69ba      	ldr	r2, [r7, #24]
 8005b88:	6839      	ldr	r1, [r7, #0]
 8005b8a:	68f8      	ldr	r0, [r7, #12]
 8005b8c:	f000 f901 	bl	8005d92 <SPI_EndRxTxTransaction>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d002      	beq.n	8005b9c <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2220      	movs	r2, #32
 8005b9a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d10a      	bne.n	8005bba <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	613b      	str	r3, [r7, #16]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	613b      	str	r3, [r7, #16]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	613b      	str	r3, [r7, #16]
 8005bb8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d002      	beq.n	8005bc8 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	77fb      	strb	r3, [r7, #31]
 8005bc6:	e000      	b.n	8005bca <HAL_SPI_Transmit+0x2b2>
  }

error:
 8005bc8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005bda:	7ffb      	ldrb	r3, [r7, #31]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3720      	adds	r7, #32
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	603b      	str	r3, [r7, #0]
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bf4:	e04c      	b.n	8005c90 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bfc:	d048      	beq.n	8005c90 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005bfe:	f7fc f9ad 	bl	8001f5c <HAL_GetTick>
 8005c02:	4602      	mov	r2, r0
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	683a      	ldr	r2, [r7, #0]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d902      	bls.n	8005c14 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d13d      	bne.n	8005c90 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	685a      	ldr	r2, [r3, #4]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c22:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c2c:	d111      	bne.n	8005c52 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c36:	d004      	beq.n	8005c42 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c40:	d107      	bne.n	8005c52 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c50:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c5a:	d10f      	bne.n	8005c7c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c6a:	601a      	str	r2, [r3, #0]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c7a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e00f      	b.n	8005cb0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	689a      	ldr	r2, [r3, #8]
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	4013      	ands	r3, r2
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	bf0c      	ite	eq
 8005ca0:	2301      	moveq	r3, #1
 8005ca2:	2300      	movne	r3, #0
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	79fb      	ldrb	r3, [r7, #7]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d1a3      	bne.n	8005bf6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3710      	adds	r7, #16
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
 8005cc4:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8005cc6:	e057      	b.n	8005d78 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005cce:	d106      	bne.n	8005cde <SPI_WaitFifoStateUntilTimeout+0x26>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d103      	bne.n	8005cde <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	330c      	adds	r3, #12
 8005cdc:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ce4:	d048      	beq.n	8005d78 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005ce6:	f7fc f939 	bl	8001f5c <HAL_GetTick>
 8005cea:	4602      	mov	r2, r0
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	683a      	ldr	r2, [r7, #0]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d902      	bls.n	8005cfc <SPI_WaitFifoStateUntilTimeout+0x44>
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d13d      	bne.n	8005d78 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d0a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d14:	d111      	bne.n	8005d3a <SPI_WaitFifoStateUntilTimeout+0x82>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d1e:	d004      	beq.n	8005d2a <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d28:	d107      	bne.n	8005d3a <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d38:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d42:	d10f      	bne.n	8005d64 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d52:	601a      	str	r2, [r3, #0]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d62:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005d74:	2303      	movs	r3, #3
 8005d76:	e008      	b.n	8005d8a <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	689a      	ldr	r2, [r3, #8]
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	4013      	ands	r3, r2
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d19f      	bne.n	8005cc8 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}

08005d92 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b086      	sub	sp, #24
 8005d96:	af02      	add	r7, sp, #8
 8005d98:	60f8      	str	r0, [r7, #12]
 8005d9a:	60b9      	str	r1, [r7, #8]
 8005d9c:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	9300      	str	r3, [sp, #0]
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	f7ff ff84 	bl	8005cb8 <SPI_WaitFifoStateUntilTimeout>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d007      	beq.n	8005dc6 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dba:	f043 0220 	orr.w	r2, r3, #32
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e027      	b.n	8005e16 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	2180      	movs	r1, #128	; 0x80
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f7ff ff07 	bl	8005be4 <SPI_WaitFlagStateUntilTimeout>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d007      	beq.n	8005dec <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005de0:	f043 0220 	orr.w	r2, r3, #32
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e014      	b.n	8005e16 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	9300      	str	r3, [sp, #0]
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f7ff ff5d 	bl	8005cb8 <SPI_WaitFifoStateUntilTimeout>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d007      	beq.n	8005e14 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e08:	f043 0220 	orr.w	r2, r3, #32
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005e10:	2303      	movs	r3, #3
 8005e12:	e000      	b.n	8005e16 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3710      	adds	r7, #16
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b082      	sub	sp, #8
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d101      	bne.n	8005e30 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e049      	b.n	8005ec4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d106      	bne.n	8005e4a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f7fb ff4b 	bl	8001ce0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2202      	movs	r2, #2
 8005e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	3304      	adds	r3, #4
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	4610      	mov	r0, r2
 8005e5e:	f000 fc23 	bl	80066a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2201      	movs	r2, #1
 8005e66:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3708      	adds	r7, #8
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d001      	beq.n	8005ee4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e019      	b.n	8005f18 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2202      	movs	r2, #2
 8005ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	689a      	ldr	r2, [r3, #8]
 8005ef2:	4b0c      	ldr	r3, [pc, #48]	; (8005f24 <HAL_TIM_Base_Start+0x58>)
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2b06      	cmp	r3, #6
 8005efc:	d00b      	beq.n	8005f16 <HAL_TIM_Base_Start+0x4a>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f04:	d007      	beq.n	8005f16 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f042 0201 	orr.w	r2, r2, #1
 8005f14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3714      	adds	r7, #20
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr
 8005f24:	00010007 	.word	0x00010007

08005f28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d001      	beq.n	8005f40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e021      	b.n	8005f84 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2202      	movs	r2, #2
 8005f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68da      	ldr	r2, [r3, #12]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f042 0201 	orr.w	r2, r2, #1
 8005f56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	689a      	ldr	r2, [r3, #8]
 8005f5e:	4b0c      	ldr	r3, [pc, #48]	; (8005f90 <HAL_TIM_Base_Start_IT+0x68>)
 8005f60:	4013      	ands	r3, r2
 8005f62:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2b06      	cmp	r3, #6
 8005f68:	d00b      	beq.n	8005f82 <HAL_TIM_Base_Start_IT+0x5a>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f70:	d007      	beq.n	8005f82 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f042 0201 	orr.w	r2, r2, #1
 8005f80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3714      	adds	r7, #20
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr
 8005f90:	00010007 	.word	0x00010007

08005f94 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d101      	bne.n	8005fa8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e097      	b.n	80060d8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d106      	bne.n	8005fc2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f7fb fe33 	bl	8001c28 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2202      	movs	r2, #2
 8005fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	6812      	ldr	r2, [r2, #0]
 8005fd4:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005fd8:	f023 0307 	bic.w	r3, r3, #7
 8005fdc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	3304      	adds	r3, #4
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	4610      	mov	r0, r2
 8005fea:	f000 fb5d 	bl	80066a8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	6a1b      	ldr	r3, [r3, #32]
 8006004:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	4313      	orrs	r3, r2
 800600e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006016:	f023 0303 	bic.w	r3, r3, #3
 800601a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	689a      	ldr	r2, [r3, #8]
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	021b      	lsls	r3, r3, #8
 8006026:	4313      	orrs	r3, r2
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	4313      	orrs	r3, r2
 800602c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006034:	f023 030c 	bic.w	r3, r3, #12
 8006038:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006040:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006044:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	68da      	ldr	r2, [r3, #12]
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	69db      	ldr	r3, [r3, #28]
 800604e:	021b      	lsls	r3, r3, #8
 8006050:	4313      	orrs	r3, r2
 8006052:	693a      	ldr	r2, [r7, #16]
 8006054:	4313      	orrs	r3, r2
 8006056:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	011a      	lsls	r2, r3, #4
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	031b      	lsls	r3, r3, #12
 8006064:	4313      	orrs	r3, r2
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	4313      	orrs	r3, r2
 800606a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006072:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800607a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	685a      	ldr	r2, [r3, #4]
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	695b      	ldr	r3, [r3, #20]
 8006084:	011b      	lsls	r3, r3, #4
 8006086:	4313      	orrs	r3, r2
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	4313      	orrs	r3, r2
 800608c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3718      	adds	r7, #24
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	f003 0302 	and.w	r3, r3, #2
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d122      	bne.n	800613c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	f003 0302 	and.w	r3, r3, #2
 8006100:	2b02      	cmp	r3, #2
 8006102:	d11b      	bne.n	800613c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f06f 0202 	mvn.w	r2, #2
 800610c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2201      	movs	r2, #1
 8006112:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	f003 0303 	and.w	r3, r3, #3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d003      	beq.n	800612a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 faa2 	bl	800666c <HAL_TIM_IC_CaptureCallback>
 8006128:	e005      	b.n	8006136 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 fa94 	bl	8006658 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 faa5 	bl	8006680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	f003 0304 	and.w	r3, r3, #4
 8006146:	2b04      	cmp	r3, #4
 8006148:	d122      	bne.n	8006190 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	f003 0304 	and.w	r3, r3, #4
 8006154:	2b04      	cmp	r3, #4
 8006156:	d11b      	bne.n	8006190 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f06f 0204 	mvn.w	r2, #4
 8006160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2202      	movs	r2, #2
 8006166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006172:	2b00      	cmp	r3, #0
 8006174:	d003      	beq.n	800617e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 fa78 	bl	800666c <HAL_TIM_IC_CaptureCallback>
 800617c:	e005      	b.n	800618a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 fa6a 	bl	8006658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 fa7b 	bl	8006680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	f003 0308 	and.w	r3, r3, #8
 800619a:	2b08      	cmp	r3, #8
 800619c:	d122      	bne.n	80061e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	f003 0308 	and.w	r3, r3, #8
 80061a8:	2b08      	cmp	r3, #8
 80061aa:	d11b      	bne.n	80061e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f06f 0208 	mvn.w	r2, #8
 80061b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2204      	movs	r2, #4
 80061ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	69db      	ldr	r3, [r3, #28]
 80061c2:	f003 0303 	and.w	r3, r3, #3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d003      	beq.n	80061d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 fa4e 	bl	800666c <HAL_TIM_IC_CaptureCallback>
 80061d0:	e005      	b.n	80061de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 fa40 	bl	8006658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 fa51 	bl	8006680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	f003 0310 	and.w	r3, r3, #16
 80061ee:	2b10      	cmp	r3, #16
 80061f0:	d122      	bne.n	8006238 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	f003 0310 	and.w	r3, r3, #16
 80061fc:	2b10      	cmp	r3, #16
 80061fe:	d11b      	bne.n	8006238 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f06f 0210 	mvn.w	r2, #16
 8006208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2208      	movs	r2, #8
 800620e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	69db      	ldr	r3, [r3, #28]
 8006216:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800621a:	2b00      	cmp	r3, #0
 800621c:	d003      	beq.n	8006226 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 fa24 	bl	800666c <HAL_TIM_IC_CaptureCallback>
 8006224:	e005      	b.n	8006232 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 fa16 	bl	8006658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 fa27 	bl	8006680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	f003 0301 	and.w	r3, r3, #1
 8006242:	2b01      	cmp	r3, #1
 8006244:	d10e      	bne.n	8006264 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	f003 0301 	and.w	r3, r3, #1
 8006250:	2b01      	cmp	r3, #1
 8006252:	d107      	bne.n	8006264 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f06f 0201 	mvn.w	r2, #1
 800625c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f9f0 	bl	8006644 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800626e:	2b80      	cmp	r3, #128	; 0x80
 8006270:	d10e      	bne.n	8006290 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800627c:	2b80      	cmp	r3, #128	; 0x80
 800627e:	d107      	bne.n	8006290 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 fd5e 	bl	8006d4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800629a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800629e:	d10e      	bne.n	80062be <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062aa:	2b80      	cmp	r3, #128	; 0x80
 80062ac:	d107      	bne.n	80062be <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80062b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 fd51 	bl	8006d60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c8:	2b40      	cmp	r3, #64	; 0x40
 80062ca:	d10e      	bne.n	80062ea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d6:	2b40      	cmp	r3, #64	; 0x40
 80062d8:	d107      	bne.n	80062ea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 f9d5 	bl	8006694 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	f003 0320 	and.w	r3, r3, #32
 80062f4:	2b20      	cmp	r3, #32
 80062f6:	d10e      	bne.n	8006316 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	f003 0320 	and.w	r3, r3, #32
 8006302:	2b20      	cmp	r3, #32
 8006304:	d107      	bne.n	8006316 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f06f 0220 	mvn.w	r2, #32
 800630e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 fd11 	bl	8006d38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006320:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006324:	d10f      	bne.n	8006346 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006330:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006334:	d107      	bne.n	8006346 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800633e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 fd17 	bl	8006d74 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006350:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006354:	d10f      	bne.n	8006376 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006360:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006364:	d107      	bne.n	8006376 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800636e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 fd09 	bl	8006d88 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006380:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006384:	d10f      	bne.n	80063a6 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006390:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006394:	d107      	bne.n	80063a6 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800639e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 fcfb 	bl	8006d9c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80063b4:	d10f      	bne.n	80063d6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80063c4:	d107      	bne.n	80063d6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80063ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 fced 	bl	8006db0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063d6:	bf00      	nop
 80063d8:	3708      	adds	r7, #8
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
	...

080063e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d101      	bne.n	80063f8 <HAL_TIM_ConfigClockSource+0x18>
 80063f4:	2302      	movs	r3, #2
 80063f6:	e0d2      	b.n	800659e <HAL_TIM_ConfigClockSource+0x1be>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2202      	movs	r2, #2
 8006404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006416:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800641a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006422:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006434:	f000 80a9 	beq.w	800658a <HAL_TIM_ConfigClockSource+0x1aa>
 8006438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800643c:	d81a      	bhi.n	8006474 <HAL_TIM_ConfigClockSource+0x94>
 800643e:	2b30      	cmp	r3, #48	; 0x30
 8006440:	f000 809a 	beq.w	8006578 <HAL_TIM_ConfigClockSource+0x198>
 8006444:	2b30      	cmp	r3, #48	; 0x30
 8006446:	d809      	bhi.n	800645c <HAL_TIM_ConfigClockSource+0x7c>
 8006448:	2b10      	cmp	r3, #16
 800644a:	f000 8095 	beq.w	8006578 <HAL_TIM_ConfigClockSource+0x198>
 800644e:	2b20      	cmp	r3, #32
 8006450:	f000 8092 	beq.w	8006578 <HAL_TIM_ConfigClockSource+0x198>
 8006454:	2b00      	cmp	r3, #0
 8006456:	f000 808f 	beq.w	8006578 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800645a:	e097      	b.n	800658c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800645c:	2b50      	cmp	r3, #80	; 0x50
 800645e:	d05b      	beq.n	8006518 <HAL_TIM_ConfigClockSource+0x138>
 8006460:	2b50      	cmp	r3, #80	; 0x50
 8006462:	d802      	bhi.n	800646a <HAL_TIM_ConfigClockSource+0x8a>
 8006464:	2b40      	cmp	r3, #64	; 0x40
 8006466:	d077      	beq.n	8006558 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006468:	e090      	b.n	800658c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800646a:	2b60      	cmp	r3, #96	; 0x60
 800646c:	d064      	beq.n	8006538 <HAL_TIM_ConfigClockSource+0x158>
 800646e:	2b70      	cmp	r3, #112	; 0x70
 8006470:	d028      	beq.n	80064c4 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 8006472:	e08b      	b.n	800658c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8006474:	4a4c      	ldr	r2, [pc, #304]	; (80065a8 <HAL_TIM_ConfigClockSource+0x1c8>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d07e      	beq.n	8006578 <HAL_TIM_ConfigClockSource+0x198>
 800647a:	4a4b      	ldr	r2, [pc, #300]	; (80065a8 <HAL_TIM_ConfigClockSource+0x1c8>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d810      	bhi.n	80064a2 <HAL_TIM_ConfigClockSource+0xc2>
 8006480:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006484:	d078      	beq.n	8006578 <HAL_TIM_ConfigClockSource+0x198>
 8006486:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800648a:	d803      	bhi.n	8006494 <HAL_TIM_ConfigClockSource+0xb4>
 800648c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006490:	d02f      	beq.n	80064f2 <HAL_TIM_ConfigClockSource+0x112>
      break;
 8006492:	e07b      	b.n	800658c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8006494:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006498:	d06e      	beq.n	8006578 <HAL_TIM_ConfigClockSource+0x198>
 800649a:	4a44      	ldr	r2, [pc, #272]	; (80065ac <HAL_TIM_ConfigClockSource+0x1cc>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d06b      	beq.n	8006578 <HAL_TIM_ConfigClockSource+0x198>
      break;
 80064a0:	e074      	b.n	800658c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80064a2:	4a43      	ldr	r2, [pc, #268]	; (80065b0 <HAL_TIM_ConfigClockSource+0x1d0>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d067      	beq.n	8006578 <HAL_TIM_ConfigClockSource+0x198>
 80064a8:	4a41      	ldr	r2, [pc, #260]	; (80065b0 <HAL_TIM_ConfigClockSource+0x1d0>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d803      	bhi.n	80064b6 <HAL_TIM_ConfigClockSource+0xd6>
 80064ae:	4a41      	ldr	r2, [pc, #260]	; (80065b4 <HAL_TIM_ConfigClockSource+0x1d4>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d061      	beq.n	8006578 <HAL_TIM_ConfigClockSource+0x198>
      break;
 80064b4:	e06a      	b.n	800658c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80064b6:	4a40      	ldr	r2, [pc, #256]	; (80065b8 <HAL_TIM_ConfigClockSource+0x1d8>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d05d      	beq.n	8006578 <HAL_TIM_ConfigClockSource+0x198>
 80064bc:	4a3f      	ldr	r2, [pc, #252]	; (80065bc <HAL_TIM_ConfigClockSource+0x1dc>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d05a      	beq.n	8006578 <HAL_TIM_ConfigClockSource+0x198>
      break;
 80064c2:	e063      	b.n	800658c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6818      	ldr	r0, [r3, #0]
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	6899      	ldr	r1, [r3, #8]
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	685a      	ldr	r2, [r3, #4]
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	f000 fac8 	bl	8006a68 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80064e6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	609a      	str	r2, [r3, #8]
      break;
 80064f0:	e04c      	b.n	800658c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6818      	ldr	r0, [r3, #0]
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	6899      	ldr	r1, [r3, #8]
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	685a      	ldr	r2, [r3, #4]
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	f000 fab1 	bl	8006a68 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	689a      	ldr	r2, [r3, #8]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006514:	609a      	str	r2, [r3, #8]
      break;
 8006516:	e039      	b.n	800658c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6818      	ldr	r0, [r3, #0]
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	6859      	ldr	r1, [r3, #4]
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	461a      	mov	r2, r3
 8006526:	f000 fa23 	bl	8006970 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2150      	movs	r1, #80	; 0x50
 8006530:	4618      	mov	r0, r3
 8006532:	f000 fa7c 	bl	8006a2e <TIM_ITRx_SetConfig>
      break;
 8006536:	e029      	b.n	800658c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6818      	ldr	r0, [r3, #0]
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	6859      	ldr	r1, [r3, #4]
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	461a      	mov	r2, r3
 8006546:	f000 fa42 	bl	80069ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2160      	movs	r1, #96	; 0x60
 8006550:	4618      	mov	r0, r3
 8006552:	f000 fa6c 	bl	8006a2e <TIM_ITRx_SetConfig>
      break;
 8006556:	e019      	b.n	800658c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6818      	ldr	r0, [r3, #0]
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	6859      	ldr	r1, [r3, #4]
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	461a      	mov	r2, r3
 8006566:	f000 fa03 	bl	8006970 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2140      	movs	r1, #64	; 0x40
 8006570:	4618      	mov	r0, r3
 8006572:	f000 fa5c 	bl	8006a2e <TIM_ITRx_SetConfig>
      break;
 8006576:	e009      	b.n	800658c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4619      	mov	r1, r3
 8006582:	4610      	mov	r0, r2
 8006584:	f000 fa53 	bl	8006a2e <TIM_ITRx_SetConfig>
      break;
 8006588:	e000      	b.n	800658c <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800658a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	00100030 	.word	0x00100030
 80065ac:	00100020 	.word	0x00100020
 80065b0:	00100050 	.word	0x00100050
 80065b4:	00100040 	.word	0x00100040
 80065b8:	00100060 	.word	0x00100060
 80065bc:	00100070 	.word	0x00100070

080065c0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d101      	bne.n	80065d8 <HAL_TIM_SlaveConfigSynchro+0x18>
 80065d4:	2302      	movs	r3, #2
 80065d6:	e031      	b.n	800663c <HAL_TIM_SlaveConfigSynchro+0x7c>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2202      	movs	r2, #2
 80065e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80065e8:	6839      	ldr	r1, [r7, #0]
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f904 	bl	80067f8 <TIM_SlaveTimer_SetConfig>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d009      	beq.n	800660a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e018      	b.n	800663c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68da      	ldr	r2, [r3, #12]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006618:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68da      	ldr	r2, [r3, #12]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006628:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2201      	movs	r2, #1
 800662e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3708      	adds	r7, #8
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800664c:	bf00      	nop
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006660:	bf00      	nop
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006674:	bf00      	nop
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800669c:	bf00      	nop
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b085      	sub	sp, #20
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a46      	ldr	r2, [pc, #280]	; (80067d4 <TIM_Base_SetConfig+0x12c>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d017      	beq.n	80066f0 <TIM_Base_SetConfig+0x48>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066c6:	d013      	beq.n	80066f0 <TIM_Base_SetConfig+0x48>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a43      	ldr	r2, [pc, #268]	; (80067d8 <TIM_Base_SetConfig+0x130>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d00f      	beq.n	80066f0 <TIM_Base_SetConfig+0x48>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a42      	ldr	r2, [pc, #264]	; (80067dc <TIM_Base_SetConfig+0x134>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d00b      	beq.n	80066f0 <TIM_Base_SetConfig+0x48>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a41      	ldr	r2, [pc, #260]	; (80067e0 <TIM_Base_SetConfig+0x138>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d007      	beq.n	80066f0 <TIM_Base_SetConfig+0x48>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a40      	ldr	r2, [pc, #256]	; (80067e4 <TIM_Base_SetConfig+0x13c>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d003      	beq.n	80066f0 <TIM_Base_SetConfig+0x48>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a3f      	ldr	r2, [pc, #252]	; (80067e8 <TIM_Base_SetConfig+0x140>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d108      	bne.n	8006702 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	4313      	orrs	r3, r2
 8006700:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4a33      	ldr	r2, [pc, #204]	; (80067d4 <TIM_Base_SetConfig+0x12c>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d023      	beq.n	8006752 <TIM_Base_SetConfig+0xaa>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006710:	d01f      	beq.n	8006752 <TIM_Base_SetConfig+0xaa>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a30      	ldr	r2, [pc, #192]	; (80067d8 <TIM_Base_SetConfig+0x130>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d01b      	beq.n	8006752 <TIM_Base_SetConfig+0xaa>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a2f      	ldr	r2, [pc, #188]	; (80067dc <TIM_Base_SetConfig+0x134>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d017      	beq.n	8006752 <TIM_Base_SetConfig+0xaa>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a2e      	ldr	r2, [pc, #184]	; (80067e0 <TIM_Base_SetConfig+0x138>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d013      	beq.n	8006752 <TIM_Base_SetConfig+0xaa>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a2d      	ldr	r2, [pc, #180]	; (80067e4 <TIM_Base_SetConfig+0x13c>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d00f      	beq.n	8006752 <TIM_Base_SetConfig+0xaa>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a2d      	ldr	r2, [pc, #180]	; (80067ec <TIM_Base_SetConfig+0x144>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d00b      	beq.n	8006752 <TIM_Base_SetConfig+0xaa>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a2c      	ldr	r2, [pc, #176]	; (80067f0 <TIM_Base_SetConfig+0x148>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d007      	beq.n	8006752 <TIM_Base_SetConfig+0xaa>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a2b      	ldr	r2, [pc, #172]	; (80067f4 <TIM_Base_SetConfig+0x14c>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d003      	beq.n	8006752 <TIM_Base_SetConfig+0xaa>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a26      	ldr	r2, [pc, #152]	; (80067e8 <TIM_Base_SetConfig+0x140>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d108      	bne.n	8006764 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006758:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	4313      	orrs	r3, r2
 8006762:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	695b      	ldr	r3, [r3, #20]
 800676e:	4313      	orrs	r3, r2
 8006770:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	689a      	ldr	r2, [r3, #8]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a12      	ldr	r2, [pc, #72]	; (80067d4 <TIM_Base_SetConfig+0x12c>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d013      	beq.n	80067b8 <TIM_Base_SetConfig+0x110>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a14      	ldr	r2, [pc, #80]	; (80067e4 <TIM_Base_SetConfig+0x13c>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d00f      	beq.n	80067b8 <TIM_Base_SetConfig+0x110>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a14      	ldr	r2, [pc, #80]	; (80067ec <TIM_Base_SetConfig+0x144>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d00b      	beq.n	80067b8 <TIM_Base_SetConfig+0x110>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a13      	ldr	r2, [pc, #76]	; (80067f0 <TIM_Base_SetConfig+0x148>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d007      	beq.n	80067b8 <TIM_Base_SetConfig+0x110>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a12      	ldr	r2, [pc, #72]	; (80067f4 <TIM_Base_SetConfig+0x14c>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d003      	beq.n	80067b8 <TIM_Base_SetConfig+0x110>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a0d      	ldr	r2, [pc, #52]	; (80067e8 <TIM_Base_SetConfig+0x140>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d103      	bne.n	80067c0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	691a      	ldr	r2, [r3, #16]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	615a      	str	r2, [r3, #20]
}
 80067c6:	bf00      	nop
 80067c8:	3714      	adds	r7, #20
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	40012c00 	.word	0x40012c00
 80067d8:	40000400 	.word	0x40000400
 80067dc:	40000800 	.word	0x40000800
 80067e0:	40000c00 	.word	0x40000c00
 80067e4:	40013400 	.word	0x40013400
 80067e8:	40015000 	.word	0x40015000
 80067ec:	40014000 	.word	0x40014000
 80067f0:	40014400 	.word	0x40014400
 80067f4:	40014800 	.word	0x40014800

080067f8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b086      	sub	sp, #24
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006814:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	697a      	ldr	r2, [r7, #20]
 800681c:	4313      	orrs	r3, r2
 800681e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006826:	f023 0307 	bic.w	r3, r3, #7
 800682a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	697a      	ldr	r2, [r7, #20]
 8006832:	4313      	orrs	r3, r2
 8006834:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	2b70      	cmp	r3, #112	; 0x70
 8006844:	d034      	beq.n	80068b0 <TIM_SlaveTimer_SetConfig+0xb8>
 8006846:	2b70      	cmp	r3, #112	; 0x70
 8006848:	d811      	bhi.n	800686e <TIM_SlaveTimer_SetConfig+0x76>
 800684a:	2b30      	cmp	r3, #48	; 0x30
 800684c:	d07d      	beq.n	800694a <TIM_SlaveTimer_SetConfig+0x152>
 800684e:	2b30      	cmp	r3, #48	; 0x30
 8006850:	d806      	bhi.n	8006860 <TIM_SlaveTimer_SetConfig+0x68>
 8006852:	2b10      	cmp	r3, #16
 8006854:	d079      	beq.n	800694a <TIM_SlaveTimer_SetConfig+0x152>
 8006856:	2b20      	cmp	r3, #32
 8006858:	d077      	beq.n	800694a <TIM_SlaveTimer_SetConfig+0x152>
 800685a:	2b00      	cmp	r3, #0
 800685c:	d075      	beq.n	800694a <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 800685e:	e075      	b.n	800694c <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8006860:	2b50      	cmp	r3, #80	; 0x50
 8006862:	d05e      	beq.n	8006922 <TIM_SlaveTimer_SetConfig+0x12a>
 8006864:	2b60      	cmp	r3, #96	; 0x60
 8006866:	d066      	beq.n	8006936 <TIM_SlaveTimer_SetConfig+0x13e>
 8006868:	2b40      	cmp	r3, #64	; 0x40
 800686a:	d02c      	beq.n	80068c6 <TIM_SlaveTimer_SetConfig+0xce>
      break;
 800686c:	e06e      	b.n	800694c <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800686e:	4a3a      	ldr	r2, [pc, #232]	; (8006958 <TIM_SlaveTimer_SetConfig+0x160>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d06a      	beq.n	800694a <TIM_SlaveTimer_SetConfig+0x152>
 8006874:	4a38      	ldr	r2, [pc, #224]	; (8006958 <TIM_SlaveTimer_SetConfig+0x160>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d809      	bhi.n	800688e <TIM_SlaveTimer_SetConfig+0x96>
 800687a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800687e:	d064      	beq.n	800694a <TIM_SlaveTimer_SetConfig+0x152>
 8006880:	4a36      	ldr	r2, [pc, #216]	; (800695c <TIM_SlaveTimer_SetConfig+0x164>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d061      	beq.n	800694a <TIM_SlaveTimer_SetConfig+0x152>
 8006886:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800688a:	d05e      	beq.n	800694a <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800688c:	e05e      	b.n	800694c <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800688e:	4a34      	ldr	r2, [pc, #208]	; (8006960 <TIM_SlaveTimer_SetConfig+0x168>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d05a      	beq.n	800694a <TIM_SlaveTimer_SetConfig+0x152>
 8006894:	4a32      	ldr	r2, [pc, #200]	; (8006960 <TIM_SlaveTimer_SetConfig+0x168>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d803      	bhi.n	80068a2 <TIM_SlaveTimer_SetConfig+0xaa>
 800689a:	4a32      	ldr	r2, [pc, #200]	; (8006964 <TIM_SlaveTimer_SetConfig+0x16c>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d054      	beq.n	800694a <TIM_SlaveTimer_SetConfig+0x152>
      break;
 80068a0:	e054      	b.n	800694c <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 80068a2:	4a31      	ldr	r2, [pc, #196]	; (8006968 <TIM_SlaveTimer_SetConfig+0x170>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d050      	beq.n	800694a <TIM_SlaveTimer_SetConfig+0x152>
 80068a8:	4a30      	ldr	r2, [pc, #192]	; (800696c <TIM_SlaveTimer_SetConfig+0x174>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d04d      	beq.n	800694a <TIM_SlaveTimer_SetConfig+0x152>
      break;
 80068ae:	e04d      	b.n	800694c <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6818      	ldr	r0, [r3, #0]
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	68d9      	ldr	r1, [r3, #12]
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	689a      	ldr	r2, [r3, #8]
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	f000 f8d2 	bl	8006a68 <TIM_ETR_SetConfig>
      break;
 80068c4:	e042      	b.n	800694c <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2b05      	cmp	r3, #5
 80068cc:	d004      	beq.n	80068d8 <TIM_SlaveTimer_SetConfig+0xe0>
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 80068d6:	d101      	bne.n	80068dc <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	e038      	b.n	800694e <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	6a1b      	ldr	r3, [r3, #32]
 80068e2:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	6a1a      	ldr	r2, [r3, #32]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f022 0201 	bic.w	r2, r2, #1
 80068f2:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006902:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	011b      	lsls	r3, r3, #4
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	4313      	orrs	r3, r2
 800690e:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	693a      	ldr	r2, [r7, #16]
 800691e:	621a      	str	r2, [r3, #32]
      break;
 8006920:	e014      	b.n	800694c <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6818      	ldr	r0, [r3, #0]
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	6899      	ldr	r1, [r3, #8]
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	461a      	mov	r2, r3
 8006930:	f000 f81e 	bl	8006970 <TIM_TI1_ConfigInputStage>
      break;
 8006934:	e00a      	b.n	800694c <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6818      	ldr	r0, [r3, #0]
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	6899      	ldr	r1, [r3, #8]
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	461a      	mov	r2, r3
 8006944:	f000 f843 	bl	80069ce <TIM_TI2_ConfigInputStage>
      break;
 8006948:	e000      	b.n	800694c <TIM_SlaveTimer_SetConfig+0x154>
      break;
 800694a:	bf00      	nop
  }
  return HAL_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	3718      	adds	r7, #24
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	00100030 	.word	0x00100030
 800695c:	00100020 	.word	0x00100020
 8006960:	00100050 	.word	0x00100050
 8006964:	00100040 	.word	0x00100040
 8006968:	00100060 	.word	0x00100060
 800696c:	00100070 	.word	0x00100070

08006970 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006970:	b480      	push	{r7}
 8006972:	b087      	sub	sp, #28
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6a1b      	ldr	r3, [r3, #32]
 8006980:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6a1b      	ldr	r3, [r3, #32]
 8006986:	f023 0201 	bic.w	r2, r3, #1
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	699b      	ldr	r3, [r3, #24]
 8006992:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800699a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	011b      	lsls	r3, r3, #4
 80069a0:	693a      	ldr	r2, [r7, #16]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	f023 030a 	bic.w	r3, r3, #10
 80069ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069ae:	697a      	ldr	r2, [r7, #20]
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	693a      	ldr	r2, [r7, #16]
 80069ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	697a      	ldr	r2, [r7, #20]
 80069c0:	621a      	str	r2, [r3, #32]
}
 80069c2:	bf00      	nop
 80069c4:	371c      	adds	r7, #28
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr

080069ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069ce:	b480      	push	{r7}
 80069d0:	b087      	sub	sp, #28
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	60f8      	str	r0, [r7, #12]
 80069d6:	60b9      	str	r1, [r7, #8]
 80069d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	f023 0210 	bic.w	r2, r3, #16
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	699b      	ldr	r3, [r3, #24]
 80069ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6a1b      	ldr	r3, [r3, #32]
 80069f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	031b      	lsls	r3, r3, #12
 80069fe:	697a      	ldr	r2, [r7, #20]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	011b      	lsls	r3, r3, #4
 8006a10:	693a      	ldr	r2, [r7, #16]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	697a      	ldr	r2, [r7, #20]
 8006a1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	621a      	str	r2, [r3, #32]
}
 8006a22:	bf00      	nop
 8006a24:	371c      	adds	r7, #28
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b085      	sub	sp, #20
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
 8006a36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006a44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a4a:	683a      	ldr	r2, [r7, #0]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	f043 0307 	orr.w	r3, r3, #7
 8006a54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	609a      	str	r2, [r3, #8]
}
 8006a5c:	bf00      	nop
 8006a5e:	3714      	adds	r7, #20
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b087      	sub	sp, #28
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	607a      	str	r2, [r7, #4]
 8006a74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	021a      	lsls	r2, r3, #8
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	431a      	orrs	r2, r3
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	697a      	ldr	r2, [r7, #20]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	697a      	ldr	r2, [r7, #20]
 8006a9a:	609a      	str	r2, [r3, #8]
}
 8006a9c:	bf00      	nop
 8006a9e:	371c      	adds	r7, #28
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d101      	bne.n	8006ac0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006abc:	2302      	movs	r3, #2
 8006abe:	e074      	b.n	8006baa <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2202      	movs	r2, #2
 8006acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a34      	ldr	r2, [pc, #208]	; (8006bb8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d009      	beq.n	8006afe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a33      	ldr	r2, [pc, #204]	; (8006bbc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d004      	beq.n	8006afe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a31      	ldr	r2, [pc, #196]	; (8006bc0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d108      	bne.n	8006b10 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006b04:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a21      	ldr	r2, [pc, #132]	; (8006bb8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d022      	beq.n	8006b7e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b40:	d01d      	beq.n	8006b7e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a1f      	ldr	r2, [pc, #124]	; (8006bc4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d018      	beq.n	8006b7e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a1d      	ldr	r2, [pc, #116]	; (8006bc8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d013      	beq.n	8006b7e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a1c      	ldr	r2, [pc, #112]	; (8006bcc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d00e      	beq.n	8006b7e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a15      	ldr	r2, [pc, #84]	; (8006bbc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d009      	beq.n	8006b7e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a18      	ldr	r2, [pc, #96]	; (8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d004      	beq.n	8006b7e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a11      	ldr	r2, [pc, #68]	; (8006bc0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d10c      	bne.n	8006b98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	68ba      	ldr	r2, [r7, #8]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68ba      	ldr	r2, [r7, #8]
 8006b96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3714      	adds	r7, #20
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop
 8006bb8:	40012c00 	.word	0x40012c00
 8006bbc:	40013400 	.word	0x40013400
 8006bc0:	40015000 	.word	0x40015000
 8006bc4:	40000400 	.word	0x40000400
 8006bc8:	40000800 	.word	0x40000800
 8006bcc:	40000c00 	.word	0x40000c00
 8006bd0:	40014000 	.word	0x40014000

08006bd4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b085      	sub	sp, #20
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006bde:	2300      	movs	r3, #0
 8006be0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d101      	bne.n	8006bf0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006bec:	2302      	movs	r3, #2
 8006bee:	e096      	b.n	8006d1e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	695b      	ldr	r3, [r3, #20]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c56:	4313      	orrs	r3, r2
 8006c58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	699b      	ldr	r3, [r3, #24]
 8006c64:	041b      	lsls	r3, r3, #16
 8006c66:	4313      	orrs	r3, r2
 8006c68:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a2f      	ldr	r2, [pc, #188]	; (8006d2c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d009      	beq.n	8006c88 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a2d      	ldr	r2, [pc, #180]	; (8006d30 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d004      	beq.n	8006c88 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a2c      	ldr	r2, [pc, #176]	; (8006d34 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d106      	bne.n	8006c96 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	69db      	ldr	r3, [r3, #28]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a24      	ldr	r2, [pc, #144]	; (8006d2c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d009      	beq.n	8006cb4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a22      	ldr	r2, [pc, #136]	; (8006d30 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d004      	beq.n	8006cb4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a21      	ldr	r2, [pc, #132]	; (8006d34 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d12b      	bne.n	8006d0c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cbe:	051b      	lsls	r3, r3, #20
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	6a1b      	ldr	r3, [r3, #32]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a11      	ldr	r2, [pc, #68]	; (8006d2c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d009      	beq.n	8006cfe <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a10      	ldr	r2, [pc, #64]	; (8006d30 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d004      	beq.n	8006cfe <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a0e      	ldr	r2, [pc, #56]	; (8006d34 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d106      	bne.n	8006d0c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3714      	adds	r7, #20
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	40012c00 	.word	0x40012c00
 8006d30:	40013400 	.word	0x40013400
 8006d34:	40015000 	.word	0x40015000

08006d38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d40:	bf00      	nop
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d54:	bf00      	nop
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d68:	bf00      	nop
 8006d6a:	370c      	adds	r7, #12
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006d7c:	bf00      	nop
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006d90:	bf00      	nop
 8006d92:	370c      	adds	r7, #12
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006da4:	bf00      	nop
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006db8:	bf00      	nop
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <LL_EXTI_EnableIT_0_31>:
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8006dcc:	4b05      	ldr	r3, [pc, #20]	; (8006de4 <LL_EXTI_EnableIT_0_31+0x20>)
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	4904      	ldr	r1, [pc, #16]	; (8006de4 <LL_EXTI_EnableIT_0_31+0x20>)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	600b      	str	r3, [r1, #0]
}
 8006dd8:	bf00      	nop
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr
 8006de4:	40010400 	.word	0x40010400

08006de8 <LL_EXTI_EnableIT_32_63>:
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006df0:	4b05      	ldr	r3, [pc, #20]	; (8006e08 <LL_EXTI_EnableIT_32_63+0x20>)
 8006df2:	6a1a      	ldr	r2, [r3, #32]
 8006df4:	4904      	ldr	r1, [pc, #16]	; (8006e08 <LL_EXTI_EnableIT_32_63+0x20>)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	620b      	str	r3, [r1, #32]
}
 8006dfc:	bf00      	nop
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr
 8006e08:	40010400 	.word	0x40010400

08006e0c <LL_EXTI_DisableIT_0_31>:
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8006e14:	4b06      	ldr	r3, [pc, #24]	; (8006e30 <LL_EXTI_DisableIT_0_31+0x24>)
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	43db      	mvns	r3, r3
 8006e1c:	4904      	ldr	r1, [pc, #16]	; (8006e30 <LL_EXTI_DisableIT_0_31+0x24>)
 8006e1e:	4013      	ands	r3, r2
 8006e20:	600b      	str	r3, [r1, #0]
}
 8006e22:	bf00      	nop
 8006e24:	370c      	adds	r7, #12
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	40010400 	.word	0x40010400

08006e34 <LL_EXTI_DisableIT_32_63>:
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8006e3c:	4b06      	ldr	r3, [pc, #24]	; (8006e58 <LL_EXTI_DisableIT_32_63+0x24>)
 8006e3e:	6a1a      	ldr	r2, [r3, #32]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	43db      	mvns	r3, r3
 8006e44:	4904      	ldr	r1, [pc, #16]	; (8006e58 <LL_EXTI_DisableIT_32_63+0x24>)
 8006e46:	4013      	ands	r3, r2
 8006e48:	620b      	str	r3, [r1, #32]
}
 8006e4a:	bf00      	nop
 8006e4c:	370c      	adds	r7, #12
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr
 8006e56:	bf00      	nop
 8006e58:	40010400 	.word	0x40010400

08006e5c <LL_EXTI_EnableEvent_0_31>:
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8006e64:	4b05      	ldr	r3, [pc, #20]	; (8006e7c <LL_EXTI_EnableEvent_0_31+0x20>)
 8006e66:	685a      	ldr	r2, [r3, #4]
 8006e68:	4904      	ldr	r1, [pc, #16]	; (8006e7c <LL_EXTI_EnableEvent_0_31+0x20>)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	604b      	str	r3, [r1, #4]
}
 8006e70:	bf00      	nop
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr
 8006e7c:	40010400 	.word	0x40010400

08006e80 <LL_EXTI_EnableEvent_32_63>:
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8006e88:	4b05      	ldr	r3, [pc, #20]	; (8006ea0 <LL_EXTI_EnableEvent_32_63+0x20>)
 8006e8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e8c:	4904      	ldr	r1, [pc, #16]	; (8006ea0 <LL_EXTI_EnableEvent_32_63+0x20>)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006e94:	bf00      	nop
 8006e96:	370c      	adds	r7, #12
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr
 8006ea0:	40010400 	.word	0x40010400

08006ea4 <LL_EXTI_DisableEvent_0_31>:
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8006eac:	4b06      	ldr	r3, [pc, #24]	; (8006ec8 <LL_EXTI_DisableEvent_0_31+0x24>)
 8006eae:	685a      	ldr	r2, [r3, #4]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	43db      	mvns	r3, r3
 8006eb4:	4904      	ldr	r1, [pc, #16]	; (8006ec8 <LL_EXTI_DisableEvent_0_31+0x24>)
 8006eb6:	4013      	ands	r3, r2
 8006eb8:	604b      	str	r3, [r1, #4]
}
 8006eba:	bf00      	nop
 8006ebc:	370c      	adds	r7, #12
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr
 8006ec6:	bf00      	nop
 8006ec8:	40010400 	.word	0x40010400

08006ecc <LL_EXTI_DisableEvent_32_63>:
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8006ed4:	4b06      	ldr	r3, [pc, #24]	; (8006ef0 <LL_EXTI_DisableEvent_32_63+0x24>)
 8006ed6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	43db      	mvns	r3, r3
 8006edc:	4904      	ldr	r1, [pc, #16]	; (8006ef0 <LL_EXTI_DisableEvent_32_63+0x24>)
 8006ede:	4013      	ands	r3, r2
 8006ee0:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006ee2:	bf00      	nop
 8006ee4:	370c      	adds	r7, #12
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop
 8006ef0:	40010400 	.word	0x40010400

08006ef4 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8006efc:	4b05      	ldr	r3, [pc, #20]	; (8006f14 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006efe:	689a      	ldr	r2, [r3, #8]
 8006f00:	4904      	ldr	r1, [pc, #16]	; (8006f14 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4313      	orrs	r3, r2
 8006f06:	608b      	str	r3, [r1, #8]
}
 8006f08:	bf00      	nop
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr
 8006f14:	40010400 	.word	0x40010400

08006f18 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8006f20:	4b05      	ldr	r3, [pc, #20]	; (8006f38 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8006f22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f24:	4904      	ldr	r1, [pc, #16]	; (8006f38 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	628b      	str	r3, [r1, #40]	; 0x28
}
 8006f2c:	bf00      	nop
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr
 8006f38:	40010400 	.word	0x40010400

08006f3c <LL_EXTI_DisableRisingTrig_0_31>:
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8006f44:	4b06      	ldr	r3, [pc, #24]	; (8006f60 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006f46:	689a      	ldr	r2, [r3, #8]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	43db      	mvns	r3, r3
 8006f4c:	4904      	ldr	r1, [pc, #16]	; (8006f60 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006f4e:	4013      	ands	r3, r2
 8006f50:	608b      	str	r3, [r1, #8]
}
 8006f52:	bf00      	nop
 8006f54:	370c      	adds	r7, #12
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr
 8006f5e:	bf00      	nop
 8006f60:	40010400 	.word	0x40010400

08006f64 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8006f6c:	4b06      	ldr	r3, [pc, #24]	; (8006f88 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8006f6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	43db      	mvns	r3, r3
 8006f74:	4904      	ldr	r1, [pc, #16]	; (8006f88 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8006f76:	4013      	ands	r3, r2
 8006f78:	628b      	str	r3, [r1, #40]	; 0x28
}
 8006f7a:	bf00      	nop
 8006f7c:	370c      	adds	r7, #12
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	40010400 	.word	0x40010400

08006f8c <LL_EXTI_EnableFallingTrig_0_31>:
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8006f94:	4b05      	ldr	r3, [pc, #20]	; (8006fac <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006f96:	68da      	ldr	r2, [r3, #12]
 8006f98:	4904      	ldr	r1, [pc, #16]	; (8006fac <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	60cb      	str	r3, [r1, #12]
}
 8006fa0:	bf00      	nop
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr
 8006fac:	40010400 	.word	0x40010400

08006fb0 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8006fb8:	4b05      	ldr	r3, [pc, #20]	; (8006fd0 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8006fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fbc:	4904      	ldr	r1, [pc, #16]	; (8006fd0 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8006fc4:	bf00      	nop
 8006fc6:	370c      	adds	r7, #12
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr
 8006fd0:	40010400 	.word	0x40010400

08006fd4 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8006fdc:	4b06      	ldr	r3, [pc, #24]	; (8006ff8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006fde:	68da      	ldr	r2, [r3, #12]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	43db      	mvns	r3, r3
 8006fe4:	4904      	ldr	r1, [pc, #16]	; (8006ff8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006fe6:	4013      	ands	r3, r2
 8006fe8:	60cb      	str	r3, [r1, #12]
}
 8006fea:	bf00      	nop
 8006fec:	370c      	adds	r7, #12
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr
 8006ff6:	bf00      	nop
 8006ff8:	40010400 	.word	0x40010400

08006ffc <LL_EXTI_DisableFallingTrig_32_63>:
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8007004:	4b06      	ldr	r3, [pc, #24]	; (8007020 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8007006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	43db      	mvns	r3, r3
 800700c:	4904      	ldr	r1, [pc, #16]	; (8007020 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800700e:	4013      	ands	r3, r2
 8007010:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8007012:	bf00      	nop
 8007014:	370c      	adds	r7, #12
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	40010400 	.word	0x40010400

08007024 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 800702c:	2300      	movs	r3, #0
 800702e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	7a1b      	ldrb	r3, [r3, #8]
 8007034:	2b00      	cmp	r3, #0
 8007036:	f000 80c8 	beq.w	80071ca <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d05d      	beq.n	80070fe <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	7a5b      	ldrb	r3, [r3, #9]
 8007046:	2b01      	cmp	r3, #1
 8007048:	d00e      	beq.n	8007068 <LL_EXTI_Init+0x44>
 800704a:	2b02      	cmp	r3, #2
 800704c:	d017      	beq.n	800707e <LL_EXTI_Init+0x5a>
 800704e:	2b00      	cmp	r3, #0
 8007050:	d120      	bne.n	8007094 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4618      	mov	r0, r3
 8007058:	f7ff ff24 	bl	8006ea4 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4618      	mov	r0, r3
 8007062:	f7ff feaf 	bl	8006dc4 <LL_EXTI_EnableIT_0_31>
          break;
 8007066:	e018      	b.n	800709a <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4618      	mov	r0, r3
 800706e:	f7ff fecd 	bl	8006e0c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4618      	mov	r0, r3
 8007078:	f7ff fef0 	bl	8006e5c <LL_EXTI_EnableEvent_0_31>
          break;
 800707c:	e00d      	b.n	800709a <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4618      	mov	r0, r3
 8007084:	f7ff fe9e 	bl	8006dc4 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4618      	mov	r0, r3
 800708e:	f7ff fee5 	bl	8006e5c <LL_EXTI_EnableEvent_0_31>
          break;
 8007092:	e002      	b.n	800709a <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 8007094:	2301      	movs	r3, #1
 8007096:	60fb      	str	r3, [r7, #12]
          break;
 8007098:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	7a9b      	ldrb	r3, [r3, #10]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d02d      	beq.n	80070fe <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	7a9b      	ldrb	r3, [r3, #10]
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d00e      	beq.n	80070c8 <LL_EXTI_Init+0xa4>
 80070aa:	2b03      	cmp	r3, #3
 80070ac:	d017      	beq.n	80070de <LL_EXTI_Init+0xba>
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d120      	bne.n	80070f4 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7ff ff8c 	bl	8006fd4 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7ff ff17 	bl	8006ef4 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80070c6:	e01b      	b.n	8007100 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4618      	mov	r0, r3
 80070ce:	f7ff ff35 	bl	8006f3c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4618      	mov	r0, r3
 80070d8:	f7ff ff58 	bl	8006f8c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80070dc:	e010      	b.n	8007100 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4618      	mov	r0, r3
 80070e4:	f7ff ff06 	bl	8006ef4 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4618      	mov	r0, r3
 80070ee:	f7ff ff4d 	bl	8006f8c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80070f2:	e005      	b.n	8007100 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f043 0302 	orr.w	r3, r3, #2
 80070fa:	60fb      	str	r3, [r7, #12]
            break;
 80070fc:	e000      	b.n	8007100 <LL_EXTI_Init+0xdc>
        }
      }
 80070fe:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d075      	beq.n	80071f4 <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	7a5b      	ldrb	r3, [r3, #9]
 800710c:	2b01      	cmp	r3, #1
 800710e:	d00e      	beq.n	800712e <LL_EXTI_Init+0x10a>
 8007110:	2b02      	cmp	r3, #2
 8007112:	d017      	beq.n	8007144 <LL_EXTI_Init+0x120>
 8007114:	2b00      	cmp	r3, #0
 8007116:	d120      	bne.n	800715a <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	4618      	mov	r0, r3
 800711e:	f7ff fed5 	bl	8006ecc <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	4618      	mov	r0, r3
 8007128:	f7ff fe5e 	bl	8006de8 <LL_EXTI_EnableIT_32_63>
          break;
 800712c:	e01a      	b.n	8007164 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	4618      	mov	r0, r3
 8007134:	f7ff fe7e 	bl	8006e34 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	4618      	mov	r0, r3
 800713e:	f7ff fe9f 	bl	8006e80 <LL_EXTI_EnableEvent_32_63>
          break;
 8007142:	e00f      	b.n	8007164 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	4618      	mov	r0, r3
 800714a:	f7ff fe4d 	bl	8006de8 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	4618      	mov	r0, r3
 8007154:	f7ff fe94 	bl	8006e80 <LL_EXTI_EnableEvent_32_63>
          break;
 8007158:	e004      	b.n	8007164 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f043 0304 	orr.w	r3, r3, #4
 8007160:	60fb      	str	r3, [r7, #12]
          break;
 8007162:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	7a9b      	ldrb	r3, [r3, #10]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d043      	beq.n	80071f4 <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	7a9b      	ldrb	r3, [r3, #10]
 8007170:	2b02      	cmp	r3, #2
 8007172:	d00e      	beq.n	8007192 <LL_EXTI_Init+0x16e>
 8007174:	2b03      	cmp	r3, #3
 8007176:	d017      	beq.n	80071a8 <LL_EXTI_Init+0x184>
 8007178:	2b01      	cmp	r3, #1
 800717a:	d120      	bne.n	80071be <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	4618      	mov	r0, r3
 8007182:	f7ff ff3b 	bl	8006ffc <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	4618      	mov	r0, r3
 800718c:	f7ff fec4 	bl	8006f18 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8007190:	e031      	b.n	80071f6 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	4618      	mov	r0, r3
 8007198:	f7ff fee4 	bl	8006f64 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7ff ff05 	bl	8006fb0 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80071a6:	e026      	b.n	80071f6 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	4618      	mov	r0, r3
 80071ae:	f7ff feb3 	bl	8006f18 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	4618      	mov	r0, r3
 80071b8:	f7ff fefa 	bl	8006fb0 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80071bc:	e01b      	b.n	80071f6 <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f043 0305 	orr.w	r3, r3, #5
 80071c4:	60fb      	str	r3, [r7, #12]
            break;
 80071c6:	bf00      	nop
 80071c8:	e015      	b.n	80071f6 <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7ff fe1c 	bl	8006e0c <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4618      	mov	r0, r3
 80071da:	f7ff fe63 	bl	8006ea4 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	4618      	mov	r0, r3
 80071e4:	f7ff fe26 	bl	8006e34 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	4618      	mov	r0, r3
 80071ee:	f7ff fe6d 	bl	8006ecc <LL_EXTI_DisableEvent_32_63>
 80071f2:	e000      	b.n	80071f6 <LL_EXTI_Init+0x1d2>
      }
 80071f4:	bf00      	nop
  }

  return status;
 80071f6:	68fb      	ldr	r3, [r7, #12]
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3710      	adds	r7, #16
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <LL_GPIO_SetPinMode>:
{
 8007200:	b480      	push	{r7}
 8007202:	b089      	sub	sp, #36	; 0x24
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	fa93 f3a3 	rbit	r3, r3
 800721a:	613b      	str	r3, [r7, #16]
  return result;
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	fab3 f383 	clz	r3, r3
 8007222:	b2db      	uxtb	r3, r3
 8007224:	005b      	lsls	r3, r3, #1
 8007226:	2103      	movs	r1, #3
 8007228:	fa01 f303 	lsl.w	r3, r1, r3
 800722c:	43db      	mvns	r3, r3
 800722e:	401a      	ands	r2, r3
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	fa93 f3a3 	rbit	r3, r3
 800723a:	61bb      	str	r3, [r7, #24]
  return result;
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	fab3 f383 	clz	r3, r3
 8007242:	b2db      	uxtb	r3, r3
 8007244:	005b      	lsls	r3, r3, #1
 8007246:	6879      	ldr	r1, [r7, #4]
 8007248:	fa01 f303 	lsl.w	r3, r1, r3
 800724c:	431a      	orrs	r2, r3
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	601a      	str	r2, [r3, #0]
}
 8007252:	bf00      	nop
 8007254:	3724      	adds	r7, #36	; 0x24
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr

0800725e <LL_GPIO_SetPinOutputType>:
{
 800725e:	b480      	push	{r7}
 8007260:	b085      	sub	sp, #20
 8007262:	af00      	add	r7, sp, #0
 8007264:	60f8      	str	r0, [r7, #12]
 8007266:	60b9      	str	r1, [r7, #8]
 8007268:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	685a      	ldr	r2, [r3, #4]
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	43db      	mvns	r3, r3
 8007272:	401a      	ands	r2, r3
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	6879      	ldr	r1, [r7, #4]
 8007278:	fb01 f303 	mul.w	r3, r1, r3
 800727c:	431a      	orrs	r2, r3
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	605a      	str	r2, [r3, #4]
}
 8007282:	bf00      	nop
 8007284:	3714      	adds	r7, #20
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr

0800728e <LL_GPIO_SetPinSpeed>:
{
 800728e:	b480      	push	{r7}
 8007290:	b089      	sub	sp, #36	; 0x24
 8007292:	af00      	add	r7, sp, #0
 8007294:	60f8      	str	r0, [r7, #12]
 8007296:	60b9      	str	r1, [r7, #8]
 8007298:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	689a      	ldr	r2, [r3, #8]
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	fa93 f3a3 	rbit	r3, r3
 80072a8:	613b      	str	r3, [r7, #16]
  return result;
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	fab3 f383 	clz	r3, r3
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	005b      	lsls	r3, r3, #1
 80072b4:	2103      	movs	r1, #3
 80072b6:	fa01 f303 	lsl.w	r3, r1, r3
 80072ba:	43db      	mvns	r3, r3
 80072bc:	401a      	ands	r2, r3
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	fa93 f3a3 	rbit	r3, r3
 80072c8:	61bb      	str	r3, [r7, #24]
  return result;
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	fab3 f383 	clz	r3, r3
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	005b      	lsls	r3, r3, #1
 80072d4:	6879      	ldr	r1, [r7, #4]
 80072d6:	fa01 f303 	lsl.w	r3, r1, r3
 80072da:	431a      	orrs	r2, r3
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	609a      	str	r2, [r3, #8]
}
 80072e0:	bf00      	nop
 80072e2:	3724      	adds	r7, #36	; 0x24
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <LL_GPIO_SetPinPull>:
{
 80072ec:	b480      	push	{r7}
 80072ee:	b089      	sub	sp, #36	; 0x24
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	68da      	ldr	r2, [r3, #12]
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	fa93 f3a3 	rbit	r3, r3
 8007306:	613b      	str	r3, [r7, #16]
  return result;
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	fab3 f383 	clz	r3, r3
 800730e:	b2db      	uxtb	r3, r3
 8007310:	005b      	lsls	r3, r3, #1
 8007312:	2103      	movs	r1, #3
 8007314:	fa01 f303 	lsl.w	r3, r1, r3
 8007318:	43db      	mvns	r3, r3
 800731a:	401a      	ands	r2, r3
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	fa93 f3a3 	rbit	r3, r3
 8007326:	61bb      	str	r3, [r7, #24]
  return result;
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	fab3 f383 	clz	r3, r3
 800732e:	b2db      	uxtb	r3, r3
 8007330:	005b      	lsls	r3, r3, #1
 8007332:	6879      	ldr	r1, [r7, #4]
 8007334:	fa01 f303 	lsl.w	r3, r1, r3
 8007338:	431a      	orrs	r2, r3
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	60da      	str	r2, [r3, #12]
}
 800733e:	bf00      	nop
 8007340:	3724      	adds	r7, #36	; 0x24
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr

0800734a <LL_GPIO_SetAFPin_0_7>:
{
 800734a:	b480      	push	{r7}
 800734c:	b089      	sub	sp, #36	; 0x24
 800734e:	af00      	add	r7, sp, #0
 8007350:	60f8      	str	r0, [r7, #12]
 8007352:	60b9      	str	r1, [r7, #8]
 8007354:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6a1a      	ldr	r2, [r3, #32]
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	fa93 f3a3 	rbit	r3, r3
 8007364:	613b      	str	r3, [r7, #16]
  return result;
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	fab3 f383 	clz	r3, r3
 800736c:	b2db      	uxtb	r3, r3
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	210f      	movs	r1, #15
 8007372:	fa01 f303 	lsl.w	r3, r1, r3
 8007376:	43db      	mvns	r3, r3
 8007378:	401a      	ands	r2, r3
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	fa93 f3a3 	rbit	r3, r3
 8007384:	61bb      	str	r3, [r7, #24]
  return result;
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	fab3 f383 	clz	r3, r3
 800738c:	b2db      	uxtb	r3, r3
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	6879      	ldr	r1, [r7, #4]
 8007392:	fa01 f303 	lsl.w	r3, r1, r3
 8007396:	431a      	orrs	r2, r3
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	621a      	str	r2, [r3, #32]
}
 800739c:	bf00      	nop
 800739e:	3724      	adds	r7, #36	; 0x24
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <LL_GPIO_SetAFPin_8_15>:
{
 80073a8:	b480      	push	{r7}
 80073aa:	b089      	sub	sp, #36	; 0x24
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	60b9      	str	r1, [r7, #8]
 80073b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	0a1b      	lsrs	r3, r3, #8
 80073bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	fa93 f3a3 	rbit	r3, r3
 80073c4:	613b      	str	r3, [r7, #16]
  return result;
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	fab3 f383 	clz	r3, r3
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	210f      	movs	r1, #15
 80073d2:	fa01 f303 	lsl.w	r3, r1, r3
 80073d6:	43db      	mvns	r3, r3
 80073d8:	401a      	ands	r2, r3
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	0a1b      	lsrs	r3, r3, #8
 80073de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	fa93 f3a3 	rbit	r3, r3
 80073e6:	61bb      	str	r3, [r7, #24]
  return result;
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	fab3 f383 	clz	r3, r3
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	6879      	ldr	r1, [r7, #4]
 80073f4:	fa01 f303 	lsl.w	r3, r1, r3
 80073f8:	431a      	orrs	r2, r3
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80073fe:	bf00      	nop
 8007400:	3724      	adds	r7, #36	; 0x24
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr

0800740a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b086      	sub	sp, #24
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
 8007412:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	fa93 f3a3 	rbit	r3, r3
 8007420:	60bb      	str	r3, [r7, #8]
  return result;
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	fab3 f383 	clz	r3, r3
 8007428:	b2db      	uxtb	r3, r3
 800742a:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800742c:	e040      	b.n	80074b0 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	2101      	movs	r1, #1
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	fa01 f303 	lsl.w	r3, r1, r3
 800743a:	4013      	ands	r3, r2
 800743c:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d032      	beq.n	80074aa <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	461a      	mov	r2, r3
 800744a:	6939      	ldr	r1, [r7, #16]
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f7ff fed7 	bl	8007200 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	2b01      	cmp	r3, #1
 8007458:	d003      	beq.n	8007462 <LL_GPIO_Init+0x58>
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	2b02      	cmp	r3, #2
 8007460:	d106      	bne.n	8007470 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	461a      	mov	r2, r3
 8007468:	6939      	ldr	r1, [r7, #16]
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f7ff ff0f 	bl	800728e <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	461a      	mov	r2, r3
 8007476:	6939      	ldr	r1, [r7, #16]
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f7ff ff37 	bl	80072ec <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	2b02      	cmp	r3, #2
 8007484:	d111      	bne.n	80074aa <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	2bff      	cmp	r3, #255	; 0xff
 800748a:	d807      	bhi.n	800749c <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	695b      	ldr	r3, [r3, #20]
 8007490:	461a      	mov	r2, r3
 8007492:	6939      	ldr	r1, [r7, #16]
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f7ff ff58 	bl	800734a <LL_GPIO_SetAFPin_0_7>
 800749a:	e006      	b.n	80074aa <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	695b      	ldr	r3, [r3, #20]
 80074a0:	461a      	mov	r2, r3
 80074a2:	6939      	ldr	r1, [r7, #16]
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f7ff ff7f 	bl	80073a8 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	3301      	adds	r3, #1
 80074ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	fa22 f303 	lsr.w	r3, r2, r3
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d1b7      	bne.n	800742e <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d003      	beq.n	80074ce <LL_GPIO_Init+0xc4>
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	d107      	bne.n	80074de <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	6819      	ldr	r1, [r3, #0]
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	461a      	mov	r2, r3
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f7ff fec0 	bl	800725e <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3718      	adds	r7, #24
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <ILI9341_Draw_Bordered_Hollow_Rectangle_Coord>:
 *
 *
 */

void ILI9341_Draw_Bordered_Hollow_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t border_weight, uint8_t border_colour)
{
 80074e8:	b590      	push	{r4, r7, lr}
 80074ea:	b085      	sub	sp, #20
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	4604      	mov	r4, r0
 80074f0:	4608      	mov	r0, r1
 80074f2:	4611      	mov	r1, r2
 80074f4:	461a      	mov	r2, r3
 80074f6:	4623      	mov	r3, r4
 80074f8:	80fb      	strh	r3, [r7, #6]
 80074fa:	4603      	mov	r3, r0
 80074fc:	80bb      	strh	r3, [r7, #4]
 80074fe:	460b      	mov	r3, r1
 8007500:	807b      	strh	r3, [r7, #2]
 8007502:	4613      	mov	r3, r2
 8007504:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; b < border_weight; b++)
 8007506:	2300      	movs	r3, #0
 8007508:	73fb      	strb	r3, [r7, #15]
 800750a:	e05e      	b.n	80075ca <ILI9341_Draw_Bordered_Hollow_Rectangle_Coord+0xe2>
	{



		// Horizontal lines
		ILI9341_Draw_Horizontal_Line(	x + b,
 800750c:	7bfb      	ldrb	r3, [r7, #15]
 800750e:	b29a      	uxth	r2, r3
 8007510:	88fb      	ldrh	r3, [r7, #6]
 8007512:	4413      	add	r3, r2
 8007514:	b298      	uxth	r0, r3
 8007516:	7bfb      	ldrb	r3, [r7, #15]
 8007518:	b29a      	uxth	r2, r3
 800751a:	88bb      	ldrh	r3, [r7, #4]
 800751c:	4413      	add	r3, r2
 800751e:	b299      	uxth	r1, r3
 8007520:	7bfb      	ldrb	r3, [r7, #15]
 8007522:	b29b      	uxth	r3, r3
 8007524:	005b      	lsls	r3, r3, #1
 8007526:	b29b      	uxth	r3, r3
 8007528:	887a      	ldrh	r2, [r7, #2]
 800752a:	1ad3      	subs	r3, r2, r3
 800752c:	b29a      	uxth	r2, r3
 800752e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007532:	b29b      	uxth	r3, r3
 8007534:	f000 fd8e 	bl	8008054 <ILI9341_Draw_Horizontal_Line>
										y + b,
										w - (2*b),
										border_colour);

		ILI9341_Draw_Horizontal_Line(	x + b,
 8007538:	7bfb      	ldrb	r3, [r7, #15]
 800753a:	b29a      	uxth	r2, r3
 800753c:	88fb      	ldrh	r3, [r7, #6]
 800753e:	4413      	add	r3, r2
 8007540:	b298      	uxth	r0, r3
										(y + h) - b,
 8007542:	88ba      	ldrh	r2, [r7, #4]
 8007544:	883b      	ldrh	r3, [r7, #0]
 8007546:	4413      	add	r3, r2
 8007548:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800754a:	7bfb      	ldrb	r3, [r7, #15]
 800754c:	b29b      	uxth	r3, r3
 800754e:	1ad3      	subs	r3, r2, r3
 8007550:	b299      	uxth	r1, r3
 8007552:	7bfb      	ldrb	r3, [r7, #15]
 8007554:	b29b      	uxth	r3, r3
 8007556:	887a      	ldrh	r2, [r7, #2]
 8007558:	1ad3      	subs	r3, r2, r3
 800755a:	b29a      	uxth	r2, r3
 800755c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007560:	b29b      	uxth	r3, r3
 8007562:	f000 fd77 	bl	8008054 <ILI9341_Draw_Horizontal_Line>
										w - (b),
										border_colour);


		// Vertical lines
		ILI9341_Draw_Vertical_Line(		x + b,
 8007566:	7bfb      	ldrb	r3, [r7, #15]
 8007568:	b29a      	uxth	r2, r3
 800756a:	88fb      	ldrh	r3, [r7, #6]
 800756c:	4413      	add	r3, r2
 800756e:	b298      	uxth	r0, r3
 8007570:	7bfb      	ldrb	r3, [r7, #15]
 8007572:	b29a      	uxth	r2, r3
 8007574:	88bb      	ldrh	r3, [r7, #4]
 8007576:	4413      	add	r3, r2
 8007578:	b299      	uxth	r1, r3
 800757a:	7bfb      	ldrb	r3, [r7, #15]
 800757c:	b29b      	uxth	r3, r3
 800757e:	005b      	lsls	r3, r3, #1
 8007580:	b29b      	uxth	r3, r3
 8007582:	883a      	ldrh	r2, [r7, #0]
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	b29a      	uxth	r2, r3
 8007588:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800758c:	b29b      	uxth	r3, r3
 800758e:	f000 fda5 	bl	80080dc <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);

		ILI9341_Draw_Vertical_Line(		(x + w) - b,
 8007592:	88fa      	ldrh	r2, [r7, #6]
 8007594:	887b      	ldrh	r3, [r7, #2]
 8007596:	4413      	add	r3, r2
 8007598:	b29a      	uxth	r2, r3
 800759a:	7bfb      	ldrb	r3, [r7, #15]
 800759c:	b29b      	uxth	r3, r3
 800759e:	1ad3      	subs	r3, r2, r3
 80075a0:	b298      	uxth	r0, r3
 80075a2:	7bfb      	ldrb	r3, [r7, #15]
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	88bb      	ldrh	r3, [r7, #4]
 80075a8:	4413      	add	r3, r2
 80075aa:	b299      	uxth	r1, r3
 80075ac:	7bfb      	ldrb	r3, [r7, #15]
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	005b      	lsls	r3, r3, #1
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	883a      	ldrh	r2, [r7, #0]
 80075b6:	1ad3      	subs	r3, r2, r3
 80075b8:	b29a      	uxth	r2, r3
 80075ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80075be:	b29b      	uxth	r3, r3
 80075c0:	f000 fd8c 	bl	80080dc <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; b < border_weight; b++)
 80075c4:	7bfb      	ldrb	r3, [r7, #15]
 80075c6:	3301      	adds	r3, #1
 80075c8:	73fb      	strb	r3, [r7, #15]
 80075ca:	7bfa      	ldrb	r2, [r7, #15]
 80075cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d39b      	bcc.n	800750c <ILI9341_Draw_Bordered_Hollow_Rectangle_Coord+0x24>
										border_colour);

	}


}
 80075d4:	bf00      	nop
 80075d6:	3714      	adds	r7, #20
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd90      	pop	{r4, r7, pc}

080075dc <ILI9341_Draw_Char>:

/*Draws a character (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 80075dc:	b590      	push	{r4, r7, lr}
 80075de:	b089      	sub	sp, #36	; 0x24
 80075e0:	af02      	add	r7, sp, #8
 80075e2:	4604      	mov	r4, r0
 80075e4:	4608      	mov	r0, r1
 80075e6:	4611      	mov	r1, r2
 80075e8:	461a      	mov	r2, r3
 80075ea:	4623      	mov	r3, r4
 80075ec:	71fb      	strb	r3, [r7, #7]
 80075ee:	4603      	mov	r3, r0
 80075f0:	80bb      	strh	r3, [r7, #4]
 80075f2:	460b      	mov	r3, r1
 80075f4:	807b      	strh	r3, [r7, #2]
 80075f6:	4613      	mov	r3, r2
 80075f8:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 80075fa:	79fb      	ldrb	r3, [r7, #7]
 80075fc:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 80075fe:	7dfb      	ldrb	r3, [r7, #23]
 8007600:	2b1f      	cmp	r3, #31
 8007602:	d802      	bhi.n	800760a <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 8007604:	2300      	movs	r3, #0
 8007606:	71fb      	strb	r3, [r7, #7]
 8007608:	e002      	b.n	8007610 <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 800760a:	7dfb      	ldrb	r3, [r7, #23]
 800760c:	3b20      	subs	r3, #32
 800760e:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8007610:	2300      	movs	r3, #0
 8007612:	753b      	strb	r3, [r7, #20]
 8007614:	e012      	b.n	800763c <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 8007616:	7dfa      	ldrb	r2, [r7, #23]
 8007618:	7d38      	ldrb	r0, [r7, #20]
 800761a:	7d39      	ldrb	r1, [r7, #20]
 800761c:	4c46      	ldr	r4, [pc, #280]	; (8007738 <ILI9341_Draw_Char+0x15c>)
 800761e:	4613      	mov	r3, r2
 8007620:	005b      	lsls	r3, r3, #1
 8007622:	4413      	add	r3, r2
 8007624:	005b      	lsls	r3, r3, #1
 8007626:	4423      	add	r3, r4
 8007628:	4403      	add	r3, r0
 800762a:	781a      	ldrb	r2, [r3, #0]
 800762c:	f107 0318 	add.w	r3, r7, #24
 8007630:	440b      	add	r3, r1
 8007632:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8007636:	7d3b      	ldrb	r3, [r7, #20]
 8007638:	3301      	adds	r3, #1
 800763a:	753b      	strb	r3, [r7, #20]
 800763c:	7d3b      	ldrb	r3, [r7, #20]
 800763e:	2b05      	cmp	r3, #5
 8007640:	d9e9      	bls.n	8007616 <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 8007642:	2300      	movs	r3, #0
 8007644:	757b      	strb	r3, [r7, #21]
 8007646:	e070      	b.n	800772a <ILI9341_Draw_Char+0x14e>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 8007648:	2300      	movs	r3, #0
 800764a:	75bb      	strb	r3, [r7, #22]
 800764c:	e067      	b.n	800771e <ILI9341_Draw_Char+0x142>
        {
            if (temp[j] & (1<<i))
 800764e:	7d7b      	ldrb	r3, [r7, #21]
 8007650:	f107 0218 	add.w	r2, r7, #24
 8007654:	4413      	add	r3, r2
 8007656:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800765a:	461a      	mov	r2, r3
 800765c:	7dbb      	ldrb	r3, [r7, #22]
 800765e:	fa42 f303 	asr.w	r3, r2, r3
 8007662:	f003 0301 	and.w	r3, r3, #1
 8007666:	2b00      	cmp	r3, #0
 8007668:	d02b      	beq.n	80076c2 <ILI9341_Draw_Char+0xe6>
            {
            	if(size == 1)
 800766a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800766c:	2b01      	cmp	r3, #1
 800766e:	d10e      	bne.n	800768e <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 8007670:	7d7b      	ldrb	r3, [r7, #21]
 8007672:	b29a      	uxth	r2, r3
 8007674:	88bb      	ldrh	r3, [r7, #4]
 8007676:	4413      	add	r3, r2
 8007678:	b298      	uxth	r0, r3
 800767a:	7dbb      	ldrb	r3, [r7, #22]
 800767c:	b29a      	uxth	r2, r3
 800767e:	887b      	ldrh	r3, [r7, #2]
 8007680:	4413      	add	r3, r2
 8007682:	b29b      	uxth	r3, r3
 8007684:	883a      	ldrh	r2, [r7, #0]
 8007686:	4619      	mov	r1, r3
 8007688:	f000 fb88 	bl	8007d9c <ILI9341_Draw_Pixel>
 800768c:	e044      	b.n	8007718 <ILI9341_Draw_Char+0x13c>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour);
 800768e:	7d7b      	ldrb	r3, [r7, #21]
 8007690:	b29b      	uxth	r3, r3
 8007692:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007694:	fb12 f303 	smulbb	r3, r2, r3
 8007698:	b29a      	uxth	r2, r3
 800769a:	88bb      	ldrh	r3, [r7, #4]
 800769c:	4413      	add	r3, r2
 800769e:	b298      	uxth	r0, r3
 80076a0:	7dbb      	ldrb	r3, [r7, #22]
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80076a6:	fb12 f303 	smulbb	r3, r2, r3
 80076aa:	b29a      	uxth	r2, r3
 80076ac:	887b      	ldrh	r3, [r7, #2]
 80076ae:	4413      	add	r3, r2
 80076b0:	b299      	uxth	r1, r3
 80076b2:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 80076b4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80076b6:	883b      	ldrh	r3, [r7, #0]
 80076b8:	9300      	str	r3, [sp, #0]
 80076ba:	4623      	mov	r3, r4
 80076bc:	f000 fc48 	bl	8007f50 <ILI9341_Draw_Rectangle>
 80076c0:	e02a      	b.n	8007718 <ILI9341_Draw_Char+0x13c>
				}
            }
            else
            {
               	if(size == 1)
 80076c2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d10e      	bne.n	80076e6 <ILI9341_Draw_Char+0x10a>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 80076c8:	7d7b      	ldrb	r3, [r7, #21]
 80076ca:	b29a      	uxth	r2, r3
 80076cc:	88bb      	ldrh	r3, [r7, #4]
 80076ce:	4413      	add	r3, r2
 80076d0:	b298      	uxth	r0, r3
 80076d2:	7dbb      	ldrb	r3, [r7, #22]
 80076d4:	b29a      	uxth	r2, r3
 80076d6:	887b      	ldrh	r3, [r7, #2]
 80076d8:	4413      	add	r3, r2
 80076da:	b29b      	uxth	r3, r3
 80076dc:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80076de:	4619      	mov	r1, r3
 80076e0:	f000 fb5c 	bl	8007d9c <ILI9341_Draw_Pixel>
 80076e4:	e018      	b.n	8007718 <ILI9341_Draw_Char+0x13c>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour);
 80076e6:	7d7b      	ldrb	r3, [r7, #21]
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80076ec:	fb12 f303 	smulbb	r3, r2, r3
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	88bb      	ldrh	r3, [r7, #4]
 80076f4:	4413      	add	r3, r2
 80076f6:	b298      	uxth	r0, r3
 80076f8:	7dbb      	ldrb	r3, [r7, #22]
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80076fe:	fb12 f303 	smulbb	r3, r2, r3
 8007702:	b29a      	uxth	r2, r3
 8007704:	887b      	ldrh	r3, [r7, #2]
 8007706:	4413      	add	r3, r2
 8007708:	b299      	uxth	r1, r3
 800770a:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800770c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800770e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007710:	9300      	str	r3, [sp, #0]
 8007712:	4623      	mov	r3, r4
 8007714:	f000 fc1c 	bl	8007f50 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 8007718:	7dbb      	ldrb	r3, [r7, #22]
 800771a:	3301      	adds	r3, #1
 800771c:	75bb      	strb	r3, [r7, #22]
 800771e:	7dbb      	ldrb	r3, [r7, #22]
 8007720:	2b07      	cmp	r3, #7
 8007722:	d994      	bls.n	800764e <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 8007724:	7d7b      	ldrb	r3, [r7, #21]
 8007726:	3301      	adds	r3, #1
 8007728:	757b      	strb	r3, [r7, #21]
 800772a:	7d7b      	ldrb	r3, [r7, #21]
 800772c:	2b05      	cmp	r3, #5
 800772e:	d98b      	bls.n	8007648 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 8007730:	bf00      	nop
 8007732:	371c      	adds	r7, #28
 8007734:	46bd      	mov	sp, r7
 8007736:	bd90      	pop	{r4, r7, pc}
 8007738:	08009120 	.word	0x08009120

0800773c <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800773c:	b590      	push	{r4, r7, lr}
 800773e:	b087      	sub	sp, #28
 8007740:	af02      	add	r7, sp, #8
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	4608      	mov	r0, r1
 8007746:	4611      	mov	r1, r2
 8007748:	461a      	mov	r2, r3
 800774a:	4603      	mov	r3, r0
 800774c:	817b      	strh	r3, [r7, #10]
 800774e:	460b      	mov	r3, r1
 8007750:	813b      	strh	r3, [r7, #8]
 8007752:	4613      	mov	r3, r2
 8007754:	80fb      	strh	r3, [r7, #6]
    /*if(size & 1)
    {
    	size = ((size >> 1) * 2);
    }*/

    while (*Text) {
 8007756:	e016      	b.n	8007786 <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	1c5a      	adds	r2, r3, #1
 800775c:	60fa      	str	r2, [r7, #12]
 800775e:	7818      	ldrb	r0, [r3, #0]
 8007760:	88fc      	ldrh	r4, [r7, #6]
 8007762:	893a      	ldrh	r2, [r7, #8]
 8007764:	8979      	ldrh	r1, [r7, #10]
 8007766:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007768:	9301      	str	r3, [sp, #4]
 800776a:	8c3b      	ldrh	r3, [r7, #32]
 800776c:	9300      	str	r3, [sp, #0]
 800776e:	4623      	mov	r3, r4
 8007770:	f7ff ff34 	bl	80075dc <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 8007774:	8c3b      	ldrh	r3, [r7, #32]
 8007776:	461a      	mov	r2, r3
 8007778:	0052      	lsls	r2, r2, #1
 800777a:	4413      	add	r3, r2
 800777c:	005b      	lsls	r3, r3, #1
 800777e:	b29a      	uxth	r2, r3
 8007780:	897b      	ldrh	r3, [r7, #10]
 8007782:	4413      	add	r3, r2
 8007784:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1e4      	bne.n	8007758 <ILI9341_Draw_Text+0x1c>
    }


}
 800778e:	bf00      	nop
 8007790:	3714      	adds	r7, #20
 8007792:	46bd      	mov	sp, r7
 8007794:	bd90      	pop	{r4, r7, pc}
	...

08007798 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8007798:	b480      	push	{r7}
 800779a:	af00      	add	r7, sp, #0

	//GPIO INIT
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800779c:	4b05      	ldr	r3, [pc, #20]	; (80077b4 <ILI9341_SPI_Init+0x1c>)
 800779e:	695b      	ldr	r3, [r3, #20]
 80077a0:	4a04      	ldr	r2, [pc, #16]	; (80077b4 <ILI9341_SPI_Init+0x1c>)
 80077a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077a6:	6153      	str	r3, [r2, #20]
}
 80077a8:	bf00      	nop
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr
 80077b2:	bf00      	nop
 80077b4:	48000400 	.word	0x48000400

080077b8 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	4603      	mov	r3, r0
 80077c0:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef res;

		if( ((res = HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1)) != HAL_OK) )
 80077c2:	1df9      	adds	r1, r7, #7
 80077c4:	2301      	movs	r3, #1
 80077c6:	2201      	movs	r2, #1
 80077c8:	4804      	ldr	r0, [pc, #16]	; (80077dc <ILI9341_SPI_Send+0x24>)
 80077ca:	f7fe f8a5 	bl	8005918 <HAL_SPI_Transmit>
 80077ce:	4603      	mov	r3, r0
 80077d0:	73fb      	strb	r3, [r7, #15]
		{
			//printf("HAL_SPI_Transmit Error #%u, ", res);
		}


}
 80077d2:	bf00      	nop
 80077d4:	3710      	adds	r7, #16
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop
 80077dc:	20000658 	.word	0x20000658

080077e0 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	4603      	mov	r3, r0
 80077e8:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80077ea:	4b0d      	ldr	r3, [pc, #52]	; (8007820 <ILI9341_Write_Command+0x40>)
 80077ec:	695b      	ldr	r3, [r3, #20]
 80077ee:	4a0c      	ldr	r2, [pc, #48]	; (8007820 <ILI9341_Write_Command+0x40>)
 80077f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077f4:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 80077f6:	4b0a      	ldr	r3, [pc, #40]	; (8007820 <ILI9341_Write_Command+0x40>)
 80077f8:	695b      	ldr	r3, [r3, #20]
 80077fa:	4a09      	ldr	r2, [pc, #36]	; (8007820 <ILI9341_Write_Command+0x40>)
 80077fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007800:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(Command);
 8007802:	79fb      	ldrb	r3, [r7, #7]
 8007804:	4618      	mov	r0, r3
 8007806:	f7ff ffd7 	bl	80077b8 <ILI9341_SPI_Send>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800780a:	4b05      	ldr	r3, [pc, #20]	; (8007820 <ILI9341_Write_Command+0x40>)
 800780c:	695b      	ldr	r3, [r3, #20]
 800780e:	4a04      	ldr	r2, [pc, #16]	; (8007820 <ILI9341_Write_Command+0x40>)
 8007810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007814:	6153      	str	r3, [r2, #20]
}
 8007816:	bf00      	nop
 8007818:	3708      	adds	r7, #8
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	48000400 	.word	0x48000400

08007824 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af00      	add	r7, sp, #0
 800782a:	4603      	mov	r3, r0
 800782c:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800782e:	4b0d      	ldr	r3, [pc, #52]	; (8007864 <ILI9341_Write_Data+0x40>)
 8007830:	695b      	ldr	r3, [r3, #20]
 8007832:	4a0c      	ldr	r2, [pc, #48]	; (8007864 <ILI9341_Write_Data+0x40>)
 8007834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007838:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800783a:	4b0a      	ldr	r3, [pc, #40]	; (8007864 <ILI9341_Write_Data+0x40>)
 800783c:	695b      	ldr	r3, [r3, #20]
 800783e:	4a09      	ldr	r2, [pc, #36]	; (8007864 <ILI9341_Write_Data+0x40>)
 8007840:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007844:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(Data);
 8007846:	79fb      	ldrb	r3, [r7, #7]
 8007848:	4618      	mov	r0, r3
 800784a:	f7ff ffb5 	bl	80077b8 <ILI9341_SPI_Send>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800784e:	4b05      	ldr	r3, [pc, #20]	; (8007864 <ILI9341_Write_Data+0x40>)
 8007850:	695b      	ldr	r3, [r3, #20]
 8007852:	4a04      	ldr	r2, [pc, #16]	; (8007864 <ILI9341_Write_Data+0x40>)
 8007854:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007858:	6153      	str	r3, [r2, #20]
}
 800785a:	bf00      	nop
 800785c:	3708      	adds	r7, #8
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	48000400 	.word	0x48000400

08007868 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8007868:	b590      	push	{r4, r7, lr}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	4604      	mov	r4, r0
 8007870:	4608      	mov	r0, r1
 8007872:	4611      	mov	r1, r2
 8007874:	461a      	mov	r2, r3
 8007876:	4623      	mov	r3, r4
 8007878:	80fb      	strh	r3, [r7, #6]
 800787a:	4603      	mov	r3, r0
 800787c:	80bb      	strh	r3, [r7, #4]
 800787e:	460b      	mov	r3, r1
 8007880:	807b      	strh	r3, [r7, #2]
 8007882:	4613      	mov	r3, r2
 8007884:	803b      	strh	r3, [r7, #0]
	ILI9341_Write_Command(0x2A);
 8007886:	202a      	movs	r0, #42	; 0x2a
 8007888:	f7ff ffaa 	bl	80077e0 <ILI9341_Write_Command>
	ILI9341_Write_Data(X1>>8);
 800788c:	88fb      	ldrh	r3, [r7, #6]
 800788e:	0a1b      	lsrs	r3, r3, #8
 8007890:	b29b      	uxth	r3, r3
 8007892:	b2db      	uxtb	r3, r3
 8007894:	4618      	mov	r0, r3
 8007896:	f7ff ffc5 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(X1);
 800789a:	88fb      	ldrh	r3, [r7, #6]
 800789c:	b2db      	uxtb	r3, r3
 800789e:	4618      	mov	r0, r3
 80078a0:	f7ff ffc0 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(X2>>8);
 80078a4:	887b      	ldrh	r3, [r7, #2]
 80078a6:	0a1b      	lsrs	r3, r3, #8
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7ff ffb9 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(X2);
 80078b2:	887b      	ldrh	r3, [r7, #2]
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7ff ffb4 	bl	8007824 <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2B);
 80078bc:	202b      	movs	r0, #43	; 0x2b
 80078be:	f7ff ff8f 	bl	80077e0 <ILI9341_Write_Command>
	ILI9341_Write_Data(Y1>>8);
 80078c2:	88bb      	ldrh	r3, [r7, #4]
 80078c4:	0a1b      	lsrs	r3, r3, #8
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7ff ffaa 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y1);
 80078d0:	88bb      	ldrh	r3, [r7, #4]
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	4618      	mov	r0, r3
 80078d6:	f7ff ffa5 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2>>8);
 80078da:	883b      	ldrh	r3, [r7, #0]
 80078dc:	0a1b      	lsrs	r3, r3, #8
 80078de:	b29b      	uxth	r3, r3
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	4618      	mov	r0, r3
 80078e4:	f7ff ff9e 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2);
 80078e8:	883b      	ldrh	r3, [r7, #0]
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	4618      	mov	r0, r3
 80078ee:	f7ff ff99 	bl	8007824 <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2C);
 80078f2:	202c      	movs	r0, #44	; 0x2c
 80078f4:	f7ff ff74 	bl	80077e0 <ILI9341_Write_Command>
}
 80078f8:	bf00      	nop
 80078fa:	370c      	adds	r7, #12
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd90      	pop	{r4, r7, pc}

08007900 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 8007904:	4b0c      	ldr	r3, [pc, #48]	; (8007938 <ILI9341_Reset+0x38>)
 8007906:	695b      	ldr	r3, [r3, #20]
 8007908:	4a0b      	ldr	r2, [pc, #44]	; (8007938 <ILI9341_Reset+0x38>)
 800790a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800790e:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 8007910:	20c8      	movs	r0, #200	; 0xc8
 8007912:	f7fa fb2f 	bl	8001f74 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007916:	4b08      	ldr	r3, [pc, #32]	; (8007938 <ILI9341_Reset+0x38>)
 8007918:	695b      	ldr	r3, [r3, #20]
 800791a:	4a07      	ldr	r2, [pc, #28]	; (8007938 <ILI9341_Reset+0x38>)
 800791c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007920:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 8007922:	20c8      	movs	r0, #200	; 0xc8
 8007924:	f7fa fb26 	bl	8001f74 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8007928:	4b03      	ldr	r3, [pc, #12]	; (8007938 <ILI9341_Reset+0x38>)
 800792a:	695b      	ldr	r3, [r3, #20]
 800792c:	4a02      	ldr	r2, [pc, #8]	; (8007938 <ILI9341_Reset+0x38>)
 800792e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007932:	6153      	str	r3, [r2, #20]
}
 8007934:	bf00      	nop
 8007936:	bd80      	pop	{r7, pc}
 8007938:	48000400 	.word	0x48000400

0800793c <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	4603      	mov	r3, r0
 8007944:	71fb      	strb	r3, [r7, #7]
	
	uint8_t screen_rotation = Rotation;
 8007946:	79fb      	ldrb	r3, [r7, #7]
 8007948:	73fb      	strb	r3, [r7, #15]
	
	ILI9341_Write_Command(0x36);
 800794a:	2036      	movs	r0, #54	; 0x36
 800794c:	f7ff ff48 	bl	80077e0 <ILI9341_Write_Command>
	//HAL_Delay(1);

	switch(screen_rotation)
 8007950:	7bfb      	ldrb	r3, [r7, #15]
 8007952:	2b03      	cmp	r3, #3
 8007954:	d836      	bhi.n	80079c4 <ILI9341_Set_Rotation+0x88>
 8007956:	a201      	add	r2, pc, #4	; (adr r2, 800795c <ILI9341_Set_Rotation+0x20>)
 8007958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800795c:	0800796d 	.word	0x0800796d
 8007960:	08007983 	.word	0x08007983
 8007964:	08007999 	.word	0x08007999
 8007968:	080079af 	.word	0x080079af
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 800796c:	2048      	movs	r0, #72	; 0x48
 800796e:	f7ff ff59 	bl	8007824 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8007972:	4b17      	ldr	r3, [pc, #92]	; (80079d0 <ILI9341_Set_Rotation+0x94>)
 8007974:	22f0      	movs	r2, #240	; 0xf0
 8007976:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8007978:	4b16      	ldr	r3, [pc, #88]	; (80079d4 <ILI9341_Set_Rotation+0x98>)
 800797a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800797e:	801a      	strh	r2, [r3, #0]
			break;
 8007980:	e021      	b.n	80079c6 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8007982:	2028      	movs	r0, #40	; 0x28
 8007984:	f7ff ff4e 	bl	8007824 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8007988:	4b11      	ldr	r3, [pc, #68]	; (80079d0 <ILI9341_Set_Rotation+0x94>)
 800798a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800798e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8007990:	4b10      	ldr	r3, [pc, #64]	; (80079d4 <ILI9341_Set_Rotation+0x98>)
 8007992:	22f0      	movs	r2, #240	; 0xf0
 8007994:	801a      	strh	r2, [r3, #0]
			break;
 8007996:	e016      	b.n	80079c6 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8007998:	2088      	movs	r0, #136	; 0x88
 800799a:	f7ff ff43 	bl	8007824 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 800799e:	4b0c      	ldr	r3, [pc, #48]	; (80079d0 <ILI9341_Set_Rotation+0x94>)
 80079a0:	22f0      	movs	r2, #240	; 0xf0
 80079a2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80079a4:	4b0b      	ldr	r3, [pc, #44]	; (80079d4 <ILI9341_Set_Rotation+0x98>)
 80079a6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80079aa:	801a      	strh	r2, [r3, #0]
			break;
 80079ac:	e00b      	b.n	80079c6 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 80079ae:	20e8      	movs	r0, #232	; 0xe8
 80079b0:	f7ff ff38 	bl	8007824 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80079b4:	4b06      	ldr	r3, [pc, #24]	; (80079d0 <ILI9341_Set_Rotation+0x94>)
 80079b6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80079ba:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80079bc:	4b05      	ldr	r3, [pc, #20]	; (80079d4 <ILI9341_Set_Rotation+0x98>)
 80079be:	22f0      	movs	r2, #240	; 0xf0
 80079c0:	801a      	strh	r2, [r3, #0]
			break;
 80079c2:	e000      	b.n	80079c6 <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 80079c4:	bf00      	nop
	}
}
 80079c6:	bf00      	nop
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	200003da 	.word	0x200003da
 80079d4:	200003d8 	.word	0x200003d8

080079d8 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 80079d8:	b480      	push	{r7}
 80079da:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 80079dc:	4b05      	ldr	r3, [pc, #20]	; (80079f4 <ILI9341_Enable+0x1c>)
 80079de:	695b      	ldr	r3, [r3, #20]
 80079e0:	4a04      	ldr	r2, [pc, #16]	; (80079f4 <ILI9341_Enable+0x1c>)
 80079e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80079e6:	6153      	str	r3, [r2, #20]
}
 80079e8:	bf00      	nop
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr
 80079f2:	bf00      	nop
 80079f4:	48000400 	.word	0x48000400

080079f8 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	af00      	add	r7, sp, #0

	ILI9341_Enable();
 80079fc:	f7ff ffec 	bl	80079d8 <ILI9341_Enable>
	ILI9341_SPI_Init();
 8007a00:	f7ff feca 	bl	8007798 <ILI9341_SPI_Init>
	ILI9341_Reset();
 8007a04:	f7ff ff7c 	bl	8007900 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_Write_Command(0x01);
 8007a08:	2001      	movs	r0, #1
 8007a0a:	f7ff fee9 	bl	80077e0 <ILI9341_Write_Command>
	HAL_Delay(2000);
 8007a0e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007a12:	f7fa faaf 	bl	8001f74 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_Write_Command(0xCB);
 8007a16:	20cb      	movs	r0, #203	; 0xcb
 8007a18:	f7ff fee2 	bl	80077e0 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x39);
 8007a1c:	2039      	movs	r0, #57	; 0x39
 8007a1e:	f7ff ff01 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2C);
 8007a22:	202c      	movs	r0, #44	; 0x2c
 8007a24:	f7ff fefe 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8007a28:	2000      	movs	r0, #0
 8007a2a:	f7ff fefb 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x34);
 8007a2e:	2034      	movs	r0, #52	; 0x34
 8007a30:	f7ff fef8 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x02);
 8007a34:	2002      	movs	r0, #2
 8007a36:	f7ff fef5 	bl	8007824 <ILI9341_Write_Data>

	//POWER CONTROL B
	ILI9341_Write_Command(0xCF);
 8007a3a:	20cf      	movs	r0, #207	; 0xcf
 8007a3c:	f7ff fed0 	bl	80077e0 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8007a40:	2000      	movs	r0, #0
 8007a42:	f7ff feef 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 8007a46:	20c1      	movs	r0, #193	; 0xc1
 8007a48:	f7ff feec 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x30);
 8007a4c:	2030      	movs	r0, #48	; 0x30
 8007a4e:	f7ff fee9 	bl	8007824 <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL A
	ILI9341_Write_Command(0xE8);
 8007a52:	20e8      	movs	r0, #232	; 0xe8
 8007a54:	f7ff fec4 	bl	80077e0 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x85);
 8007a58:	2085      	movs	r0, #133	; 0x85
 8007a5a:	f7ff fee3 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8007a5e:	2000      	movs	r0, #0
 8007a60:	f7ff fee0 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x78);
 8007a64:	2078      	movs	r0, #120	; 0x78
 8007a66:	f7ff fedd 	bl	8007824 <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL B
	ILI9341_Write_Command(0xEA);
 8007a6a:	20ea      	movs	r0, #234	; 0xea
 8007a6c:	f7ff feb8 	bl	80077e0 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8007a70:	2000      	movs	r0, #0
 8007a72:	f7ff fed7 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8007a76:	2000      	movs	r0, #0
 8007a78:	f7ff fed4 	bl	8007824 <ILI9341_Write_Data>

	//POWER ON SEQUENCE CONTROL
	ILI9341_Write_Command(0xED);
 8007a7c:	20ed      	movs	r0, #237	; 0xed
 8007a7e:	f7ff feaf 	bl	80077e0 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x64);
 8007a82:	2064      	movs	r0, #100	; 0x64
 8007a84:	f7ff fece 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8007a88:	2003      	movs	r0, #3
 8007a8a:	f7ff fecb 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x12);
 8007a8e:	2012      	movs	r0, #18
 8007a90:	f7ff fec8 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x81);
 8007a94:	2081      	movs	r0, #129	; 0x81
 8007a96:	f7ff fec5 	bl	8007824 <ILI9341_Write_Data>

	//PUMP RATIO CONTROL
	ILI9341_Write_Command(0xF7);
 8007a9a:	20f7      	movs	r0, #247	; 0xf7
 8007a9c:	f7ff fea0 	bl	80077e0 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x20);
 8007aa0:	2020      	movs	r0, #32
 8007aa2:	f7ff febf 	bl	8007824 <ILI9341_Write_Data>

	//POWER CONTROL,VRH[5:0]
	ILI9341_Write_Command(0xC0);
 8007aa6:	20c0      	movs	r0, #192	; 0xc0
 8007aa8:	f7ff fe9a 	bl	80077e0 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x23);
 8007aac:	2023      	movs	r0, #35	; 0x23
 8007aae:	f7ff feb9 	bl	8007824 <ILI9341_Write_Data>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_Write_Command(0xC1);
 8007ab2:	20c1      	movs	r0, #193	; 0xc1
 8007ab4:	f7ff fe94 	bl	80077e0 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x10);
 8007ab8:	2010      	movs	r0, #16
 8007aba:	f7ff feb3 	bl	8007824 <ILI9341_Write_Data>

	//VCM CONTROL
	ILI9341_Write_Command(0xC5);
 8007abe:	20c5      	movs	r0, #197	; 0xc5
 8007ac0:	f7ff fe8e 	bl	80077e0 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x3E);
 8007ac4:	203e      	movs	r0, #62	; 0x3e
 8007ac6:	f7ff fead 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x28);
 8007aca:	2028      	movs	r0, #40	; 0x28
 8007acc:	f7ff feaa 	bl	8007824 <ILI9341_Write_Data>

	//VCM CONTROL 2
	ILI9341_Write_Command(0xC7);
 8007ad0:	20c7      	movs	r0, #199	; 0xc7
 8007ad2:	f7ff fe85 	bl	80077e0 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x86);
 8007ad6:	2086      	movs	r0, #134	; 0x86
 8007ad8:	f7ff fea4 	bl	8007824 <ILI9341_Write_Data>

	//MEMORY ACCESS CONTROL
	ILI9341_Write_Command(0x36);
 8007adc:	2036      	movs	r0, #54	; 0x36
 8007ade:	f7ff fe7f 	bl	80077e0 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x48);
 8007ae2:	2048      	movs	r0, #72	; 0x48
 8007ae4:	f7ff fe9e 	bl	8007824 <ILI9341_Write_Data>


	//PIXEL FORMAT
	ILI9341_Write_Command(0x3A);
 8007ae8:	203a      	movs	r0, #58	; 0x3a
 8007aea:	f7ff fe79 	bl	80077e0 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x55);
 8007aee:	2055      	movs	r0, #85	; 0x55
 8007af0:	f7ff fe98 	bl	8007824 <ILI9341_Write_Data>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_Write_Command(0xB1);
 8007af4:	20b1      	movs	r0, #177	; 0xb1
 8007af6:	f7ff fe73 	bl	80077e0 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8007afa:	2000      	movs	r0, #0
 8007afc:	f7ff fe92 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x18);
 8007b00:	2018      	movs	r0, #24
 8007b02:	f7ff fe8f 	bl	8007824 <ILI9341_Write_Data>

	//DISPLAY FUNCTION CONTROL
	ILI9341_Write_Command(0xB6);
 8007b06:	20b6      	movs	r0, #182	; 0xb6
 8007b08:	f7ff fe6a 	bl	80077e0 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x08);
 8007b0c:	2008      	movs	r0, #8
 8007b0e:	f7ff fe89 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x82);
 8007b12:	2082      	movs	r0, #130	; 0x82
 8007b14:	f7ff fe86 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x27);
 8007b18:	2027      	movs	r0, #39	; 0x27
 8007b1a:	f7ff fe83 	bl	8007824 <ILI9341_Write_Data>


	//3GAMMA FUNCTION DISABLE
	ILI9341_Write_Command(0xF2);
 8007b1e:	20f2      	movs	r0, #242	; 0xf2
 8007b20:	f7ff fe5e 	bl	80077e0 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8007b24:	2000      	movs	r0, #0
 8007b26:	f7ff fe7d 	bl	8007824 <ILI9341_Write_Data>

	//GAMMA CURVE SELECTED
	ILI9341_Write_Command(0x26);
 8007b2a:	2026      	movs	r0, #38	; 0x26
 8007b2c:	f7ff fe58 	bl	80077e0 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x01);
 8007b30:	2001      	movs	r0, #1
 8007b32:	f7ff fe77 	bl	8007824 <ILI9341_Write_Data>

	//POSITIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE0);
 8007b36:	20e0      	movs	r0, #224	; 0xe0
 8007b38:	f7ff fe52 	bl	80077e0 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x0F);
 8007b3c:	200f      	movs	r0, #15
 8007b3e:	f7ff fe71 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8007b42:	2031      	movs	r0, #49	; 0x31
 8007b44:	f7ff fe6e 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2B);
 8007b48:	202b      	movs	r0, #43	; 0x2b
 8007b4a:	f7ff fe6b 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8007b4e:	200c      	movs	r0, #12
 8007b50:	f7ff fe68 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8007b54:	200e      	movs	r0, #14
 8007b56:	f7ff fe65 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 8007b5a:	2008      	movs	r0, #8
 8007b5c:	f7ff fe62 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x4E);
 8007b60:	204e      	movs	r0, #78	; 0x4e
 8007b62:	f7ff fe5f 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xF1);
 8007b66:	20f1      	movs	r0, #241	; 0xf1
 8007b68:	f7ff fe5c 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x37);
 8007b6c:	2037      	movs	r0, #55	; 0x37
 8007b6e:	f7ff fe59 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 8007b72:	2007      	movs	r0, #7
 8007b74:	f7ff fe56 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x10);
 8007b78:	2010      	movs	r0, #16
 8007b7a:	f7ff fe53 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8007b7e:	2003      	movs	r0, #3
 8007b80:	f7ff fe50 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8007b84:	200e      	movs	r0, #14
 8007b86:	f7ff fe4d 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x09);
 8007b8a:	2009      	movs	r0, #9
 8007b8c:	f7ff fe4a 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8007b90:	2000      	movs	r0, #0
 8007b92:	f7ff fe47 	bl	8007824 <ILI9341_Write_Data>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE1);
 8007b96:	20e1      	movs	r0, #225	; 0xe1
 8007b98:	f7ff fe22 	bl	80077e0 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8007b9c:	2000      	movs	r0, #0
 8007b9e:	f7ff fe41 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8007ba2:	200e      	movs	r0, #14
 8007ba4:	f7ff fe3e 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x14);
 8007ba8:	2014      	movs	r0, #20
 8007baa:	f7ff fe3b 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8007bae:	2003      	movs	r0, #3
 8007bb0:	f7ff fe38 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x11);
 8007bb4:	2011      	movs	r0, #17
 8007bb6:	f7ff fe35 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 8007bba:	2007      	movs	r0, #7
 8007bbc:	f7ff fe32 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8007bc0:	2031      	movs	r0, #49	; 0x31
 8007bc2:	f7ff fe2f 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 8007bc6:	20c1      	movs	r0, #193	; 0xc1
 8007bc8:	f7ff fe2c 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x48);
 8007bcc:	2048      	movs	r0, #72	; 0x48
 8007bce:	f7ff fe29 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 8007bd2:	2008      	movs	r0, #8
 8007bd4:	f7ff fe26 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8007bd8:	200f      	movs	r0, #15
 8007bda:	f7ff fe23 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8007bde:	200c      	movs	r0, #12
 8007be0:	f7ff fe20 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8007be4:	2031      	movs	r0, #49	; 0x31
 8007be6:	f7ff fe1d 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x36);
 8007bea:	2036      	movs	r0, #54	; 0x36
 8007bec:	f7ff fe1a 	bl	8007824 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8007bf0:	200f      	movs	r0, #15
 8007bf2:	f7ff fe17 	bl	8007824 <ILI9341_Write_Data>

	//EXIT SLEEP
	ILI9341_Write_Command(0x11);
 8007bf6:	2011      	movs	r0, #17
 8007bf8:	f7ff fdf2 	bl	80077e0 <ILI9341_Write_Command>
	HAL_Delay(240);
 8007bfc:	20f0      	movs	r0, #240	; 0xf0
 8007bfe:	f7fa f9b9 	bl	8001f74 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_Write_Command(0x29);
 8007c02:	2029      	movs	r0, #41	; 0x29
 8007c04:	f7ff fdec 	bl	80077e0 <ILI9341_Write_Command>
	
	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8007c08:	2000      	movs	r0, #0
 8007c0a:	f7ff fe97 	bl	800793c <ILI9341_Set_Rotation>
}
 8007c0e:	bf00      	nop
 8007c10:	bd80      	pop	{r7, pc}
	...

08007c14 <ILI9341_Draw_colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_colour_Burst(uint16_t colour, uint32_t size)
{
 8007c14:	b5b0      	push	{r4, r5, r7, lr}
 8007c16:	b08c      	sub	sp, #48	; 0x30
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	6039      	str	r1, [r7, #0]
 8007c1e:	80fb      	strh	r3, [r7, #6]
 8007c20:	466b      	mov	r3, sp
 8007c22:	461d      	mov	r5, r3

	//SENDS COLOUR

	uint32_t buffer_size = 0;
 8007c24:	2300      	movs	r3, #0
 8007c26:	627b      	str	r3, [r7, #36]	; 0x24
	if((size*2) < BURST_MAX_SIZE)
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	005b      	lsls	r3, r3, #1
 8007c2c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007c30:	d202      	bcs.n	8007c38 <ILI9341_Draw_colour_Burst+0x24>
	{
		buffer_size = size;
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	627b      	str	r3, [r7, #36]	; 0x24
 8007c36:	e002      	b.n	8007c3e <ILI9341_Draw_colour_Burst+0x2a>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 8007c38:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007c3c:	627b      	str	r3, [r7, #36]	; 0x24
	}

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8007c3e:	4b42      	ldr	r3, [pc, #264]	; (8007d48 <ILI9341_Draw_colour_Burst+0x134>)
 8007c40:	695b      	ldr	r3, [r3, #20]
 8007c42:	4a41      	ldr	r2, [pc, #260]	; (8007d48 <ILI9341_Draw_colour_Burst+0x134>)
 8007c44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c48:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007c4a:	4b3f      	ldr	r3, [pc, #252]	; (8007d48 <ILI9341_Draw_colour_Burst+0x134>)
 8007c4c:	695b      	ldr	r3, [r3, #20]
 8007c4e:	4a3e      	ldr	r2, [pc, #248]	; (8007d48 <ILI9341_Draw_colour_Burst+0x134>)
 8007c50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c54:	6153      	str	r3, [r2, #20]

	unsigned char chifted = 	colour>>8;;
 8007c56:	88fb      	ldrh	r3, [r7, #6]
 8007c58:	0a1b      	lsrs	r3, r3, #8
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	76fb      	strb	r3, [r7, #27]
	unsigned char burst_buffer[buffer_size];
 8007c5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c60:	4603      	mov	r3, r0
 8007c62:	3b01      	subs	r3, #1
 8007c64:	617b      	str	r3, [r7, #20]
 8007c66:	4601      	mov	r1, r0
 8007c68:	f04f 0200 	mov.w	r2, #0
 8007c6c:	f04f 0300 	mov.w	r3, #0
 8007c70:	f04f 0400 	mov.w	r4, #0
 8007c74:	00d4      	lsls	r4, r2, #3
 8007c76:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8007c7a:	00cb      	lsls	r3, r1, #3
 8007c7c:	4601      	mov	r1, r0
 8007c7e:	f04f 0200 	mov.w	r2, #0
 8007c82:	f04f 0300 	mov.w	r3, #0
 8007c86:	f04f 0400 	mov.w	r4, #0
 8007c8a:	00d4      	lsls	r4, r2, #3
 8007c8c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8007c90:	00cb      	lsls	r3, r1, #3
 8007c92:	1dc3      	adds	r3, r0, #7
 8007c94:	08db      	lsrs	r3, r3, #3
 8007c96:	00db      	lsls	r3, r3, #3
 8007c98:	ebad 0d03 	sub.w	sp, sp, r3
 8007c9c:	466b      	mov	r3, sp
 8007c9e:	3300      	adds	r3, #0
 8007ca0:	613b      	str	r3, [r7, #16]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ca6:	e00d      	b.n	8007cc4 <ILI9341_Draw_colour_Burst+0xb0>
	{
			burst_buffer[j] = 	chifted;
 8007ca8:	693a      	ldr	r2, [r7, #16]
 8007caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cac:	4413      	add	r3, r2
 8007cae:	7efa      	ldrb	r2, [r7, #27]
 8007cb0:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 8007cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	88fa      	ldrh	r2, [r7, #6]
 8007cb8:	b2d1      	uxtb	r1, r2
 8007cba:	693a      	ldr	r2, [r7, #16]
 8007cbc:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8007cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc0:	3302      	adds	r3, #2
 8007cc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8007cc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d3ed      	bcc.n	8007ca8 <ILI9341_Draw_colour_Burst+0x94>
	}
	
	uint32_t Sending_size = size*2;
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	005b      	lsls	r3, r3, #1
 8007cd0:	60fb      	str	r3, [r7, #12]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t Remainder_from_block = 0;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	623b      	str	r3, [r7, #32]
	if(size > 0)
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00d      	beq.n	8007cfc <ILI9341_Draw_colour_Burst+0xe8>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 8007ce0:	68fa      	ldr	r2, [r7, #12]
 8007ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
			Remainder_from_block 	= Sending_size%buffer_size;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cee:	fbb3 f2f2 	udiv	r2, r3, r2
 8007cf2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007cf4:	fb01 f202 	mul.w	r2, r1, r2
 8007cf8:	1a9b      	subs	r3, r3, r2
 8007cfa:	623b      	str	r3, [r7, #32]
	}


	if(Sending_in_Block != 0)
 8007cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d010      	beq.n	8007d24 <ILI9341_Draw_colour_Burst+0x110>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8007d02:	2300      	movs	r3, #0
 8007d04:	61fb      	str	r3, [r7, #28]
 8007d06:	e009      	b.n	8007d1c <ILI9341_Draw_colour_Burst+0x108>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, buffer_size, 10);
 8007d08:	6939      	ldr	r1, [r7, #16]
 8007d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0c:	b29a      	uxth	r2, r3
 8007d0e:	230a      	movs	r3, #10
 8007d10:	480e      	ldr	r0, [pc, #56]	; (8007d4c <ILI9341_Draw_colour_Burst+0x138>)
 8007d12:	f7fd fe01 	bl	8005918 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8007d16:	69fb      	ldr	r3, [r7, #28]
 8007d18:	3301      	adds	r3, #1
 8007d1a:	61fb      	str	r3, [r7, #28]
 8007d1c:	69fa      	ldr	r2, [r7, #28]
 8007d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d3f1      	bcc.n	8007d08 <ILI9341_Draw_colour_Burst+0xf4>
		}
	}

	//REMAINDER!
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);
 8007d24:	6939      	ldr	r1, [r7, #16]
 8007d26:	6a3b      	ldr	r3, [r7, #32]
 8007d28:	b29a      	uxth	r2, r3
 8007d2a:	230a      	movs	r3, #10
 8007d2c:	4807      	ldr	r0, [pc, #28]	; (8007d4c <ILI9341_Draw_colour_Burst+0x138>)
 8007d2e:	f7fd fdf3 	bl	8005918 <HAL_SPI_Transmit>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8007d32:	4b05      	ldr	r3, [pc, #20]	; (8007d48 <ILI9341_Draw_colour_Burst+0x134>)
 8007d34:	695b      	ldr	r3, [r3, #20]
 8007d36:	4a04      	ldr	r2, [pc, #16]	; (8007d48 <ILI9341_Draw_colour_Burst+0x134>)
 8007d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d3c:	6153      	str	r3, [r2, #20]
 8007d3e:	46ad      	mov	sp, r5


}
 8007d40:	bf00      	nop
 8007d42:	3730      	adds	r7, #48	; 0x30
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bdb0      	pop	{r4, r5, r7, pc}
 8007d48:	48000400 	.word	0x48000400
 8007d4c:	20000658 	.word	0x20000658

08007d50 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends height*width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t colour)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	4603      	mov	r3, r0
 8007d58:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);
 8007d5a:	4b0e      	ldr	r3, [pc, #56]	; (8007d94 <ILI9341_Fill_Screen+0x44>)
 8007d5c:	881b      	ldrh	r3, [r3, #0]
 8007d5e:	b29a      	uxth	r2, r3
 8007d60:	4b0d      	ldr	r3, [pc, #52]	; (8007d98 <ILI9341_Fill_Screen+0x48>)
 8007d62:	881b      	ldrh	r3, [r3, #0]
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	2100      	movs	r1, #0
 8007d68:	2000      	movs	r0, #0
 8007d6a:	f7ff fd7d 	bl	8007868 <ILI9341_Set_Address>
	ILI9341_Draw_colour_Burst(colour, LCD_WIDTH*LCD_HEIGHT);
 8007d6e:	4b09      	ldr	r3, [pc, #36]	; (8007d94 <ILI9341_Fill_Screen+0x44>)
 8007d70:	881b      	ldrh	r3, [r3, #0]
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	461a      	mov	r2, r3
 8007d76:	4b08      	ldr	r3, [pc, #32]	; (8007d98 <ILI9341_Fill_Screen+0x48>)
 8007d78:	881b      	ldrh	r3, [r3, #0]
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	fb03 f302 	mul.w	r3, r3, r2
 8007d80:	461a      	mov	r2, r3
 8007d82:	88fb      	ldrh	r3, [r7, #6]
 8007d84:	4611      	mov	r1, r2
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7ff ff44 	bl	8007c14 <ILI9341_Draw_colour_Burst>
}
 8007d8c:	bf00      	nop
 8007d8e:	3708      	adds	r7, #8
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	200003da 	.word	0x200003da
 8007d98:	200003d8 	.word	0x200003d8

08007d9c <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t colour)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b086      	sub	sp, #24
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	4603      	mov	r3, r0
 8007da4:	80fb      	strh	r3, [r7, #6]
 8007da6:	460b      	mov	r3, r1
 8007da8:	80bb      	strh	r3, [r7, #4]
 8007daa:	4613      	mov	r3, r2
 8007dac:	807b      	strh	r3, [r7, #2]
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8007dae:	4b64      	ldr	r3, [pc, #400]	; (8007f40 <ILI9341_Draw_Pixel+0x1a4>)
 8007db0:	881b      	ldrh	r3, [r3, #0]
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	88fa      	ldrh	r2, [r7, #6]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	f080 80be 	bcs.w	8007f38 <ILI9341_Draw_Pixel+0x19c>
 8007dbc:	4b61      	ldr	r3, [pc, #388]	; (8007f44 <ILI9341_Draw_Pixel+0x1a8>)
 8007dbe:	881b      	ldrh	r3, [r3, #0]
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	88ba      	ldrh	r2, [r7, #4]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	f080 80b7 	bcs.w	8007f38 <ILI9341_Draw_Pixel+0x19c>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8007dca:	4b5f      	ldr	r3, [pc, #380]	; (8007f48 <ILI9341_Draw_Pixel+0x1ac>)
 8007dcc:	695b      	ldr	r3, [r3, #20]
 8007dce:	4a5e      	ldr	r2, [pc, #376]	; (8007f48 <ILI9341_Draw_Pixel+0x1ac>)
 8007dd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dd4:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007dd6:	4b5c      	ldr	r3, [pc, #368]	; (8007f48 <ILI9341_Draw_Pixel+0x1ac>)
 8007dd8:	695b      	ldr	r3, [r3, #20]
 8007dda:	4a5b      	ldr	r2, [pc, #364]	; (8007f48 <ILI9341_Draw_Pixel+0x1ac>)
 8007ddc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007de0:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(0x2A);
 8007de2:	202a      	movs	r0, #42	; 0x2a
 8007de4:	f7ff fce8 	bl	80077b8 <ILI9341_SPI_Send>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8007de8:	4b57      	ldr	r3, [pc, #348]	; (8007f48 <ILI9341_Draw_Pixel+0x1ac>)
 8007dea:	695b      	ldr	r3, [r3, #20]
 8007dec:	4a56      	ldr	r2, [pc, #344]	; (8007f48 <ILI9341_Draw_Pixel+0x1ac>)
 8007dee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007df2:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8007df4:	4b54      	ldr	r3, [pc, #336]	; (8007f48 <ILI9341_Draw_Pixel+0x1ac>)
 8007df6:	695b      	ldr	r3, [r3, #20]
 8007df8:	4a53      	ldr	r2, [pc, #332]	; (8007f48 <ILI9341_Draw_Pixel+0x1ac>)
 8007dfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dfe:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007e00:	4b51      	ldr	r3, [pc, #324]	; (8007f48 <ILI9341_Draw_Pixel+0x1ac>)
 8007e02:	695b      	ldr	r3, [r3, #20]
 8007e04:	4a50      	ldr	r2, [pc, #320]	; (8007f48 <ILI9341_Draw_Pixel+0x1ac>)
 8007e06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e0a:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8007e0c:	88fb      	ldrh	r3, [r7, #6]
 8007e0e:	0a1b      	lsrs	r3, r3, #8
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	753b      	strb	r3, [r7, #20]
 8007e16:	88fb      	ldrh	r3, [r7, #6]
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	757b      	strb	r3, [r7, #21]
 8007e1c:	88fb      	ldrh	r3, [r7, #6]
 8007e1e:	3301      	adds	r3, #1
 8007e20:	121b      	asrs	r3, r3, #8
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	75bb      	strb	r3, [r7, #22]
 8007e26:	88fb      	ldrh	r3, [r7, #6]
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8007e30:	f107 0114 	add.w	r1, r7, #20
 8007e34:	2301      	movs	r3, #1
 8007e36:	2204      	movs	r2, #4
 8007e38:	4844      	ldr	r0, [pc, #272]	; (8007f4c <ILI9341_Draw_Pixel+0x1b0>)
 8007e3a:	f7fd fd6d 	bl	8005918 <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8007e3e:	4b42      	ldr	r3, [pc, #264]	; (8007f48 <ILI9341_Draw_Pixel+0x1ac>)
 8007e40:	695b      	ldr	r3, [r3, #20]
 8007e42:	4a41      	ldr	r2, [pc, #260]	; (8007f48 <ILI9341_Draw_Pixel+0x1ac>)
 8007e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e48:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8007e4a:	4b3f      	ldr	r3, [pc, #252]	; (8007f48 <ILI9341_Draw_Pixel+0x1ac>)
 8007e4c:	695b      	ldr	r3, [r3, #20]
 8007e4e:	4a3e      	ldr	r2, [pc, #248]	; (8007f48 <ILI9341_Draw_Pixel+0x1ac>)
 8007e50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e54:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007e56:	4b3c      	ldr	r3, [pc, #240]	; (8007f48 <ILI9341_Draw_Pixel+0x1ac>)
 8007e58:	695b      	ldr	r3, [r3, #20]
 8007e5a:	4a3b      	ldr	r2, [pc, #236]	; (8007f48 <ILI9341_Draw_Pixel+0x1ac>)
 8007e5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e60:	6153      	str	r3, [r2, #20]

	ILI9341_SPI_Send(0x2B);
 8007e62:	202b      	movs	r0, #43	; 0x2b
 8007e64:	f7ff fca8 	bl	80077b8 <ILI9341_SPI_Send>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8007e68:	4b37      	ldr	r3, [pc, #220]	; (8007f48 <ILI9341_Draw_Pixel+0x1ac>)
 8007e6a:	695b      	ldr	r3, [r3, #20]
 8007e6c:	4a36      	ldr	r2, [pc, #216]	; (8007f48 <ILI9341_Draw_Pixel+0x1ac>)
 8007e6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e72:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8007e74:	4b34      	ldr	r3, [pc, #208]	; (8007f48 <ILI9341_Draw_Pixel+0x1ac>)
 8007e76:	695b      	ldr	r3, [r3, #20]
 8007e78:	4a33      	ldr	r2, [pc, #204]	; (8007f48 <ILI9341_Draw_Pixel+0x1ac>)
 8007e7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e7e:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007e80:	4b31      	ldr	r3, [pc, #196]	; (8007f48 <ILI9341_Draw_Pixel+0x1ac>)
 8007e82:	695b      	ldr	r3, [r3, #20]
 8007e84:	4a30      	ldr	r2, [pc, #192]	; (8007f48 <ILI9341_Draw_Pixel+0x1ac>)
 8007e86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e8a:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8007e8c:	88bb      	ldrh	r3, [r7, #4]
 8007e8e:	0a1b      	lsrs	r3, r3, #8
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	743b      	strb	r3, [r7, #16]
 8007e96:	88bb      	ldrh	r3, [r7, #4]
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	747b      	strb	r3, [r7, #17]
 8007e9c:	88bb      	ldrh	r3, [r7, #4]
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	121b      	asrs	r3, r3, #8
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	74bb      	strb	r3, [r7, #18]
 8007ea6:	88bb      	ldrh	r3, [r7, #4]
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	3301      	adds	r3, #1
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	74fb      	strb	r3, [r7, #19]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8007eb0:	f107 0110 	add.w	r1, r7, #16
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	2204      	movs	r2, #4
 8007eb8:	4824      	ldr	r0, [pc, #144]	; (8007f4c <ILI9341_Draw_Pixel+0x1b0>)
 8007eba:	f7fd fd2d 	bl	8005918 <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8007ebe:	4b22      	ldr	r3, [pc, #136]	; (8007f48 <ILI9341_Draw_Pixel+0x1ac>)
 8007ec0:	695b      	ldr	r3, [r3, #20]
 8007ec2:	4a21      	ldr	r2, [pc, #132]	; (8007f48 <ILI9341_Draw_Pixel+0x1ac>)
 8007ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ec8:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8007eca:	4b1f      	ldr	r3, [pc, #124]	; (8007f48 <ILI9341_Draw_Pixel+0x1ac>)
 8007ecc:	695b      	ldr	r3, [r3, #20]
 8007ece:	4a1e      	ldr	r2, [pc, #120]	; (8007f48 <ILI9341_Draw_Pixel+0x1ac>)
 8007ed0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ed4:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007ed6:	4b1c      	ldr	r3, [pc, #112]	; (8007f48 <ILI9341_Draw_Pixel+0x1ac>)
 8007ed8:	695b      	ldr	r3, [r3, #20]
 8007eda:	4a1b      	ldr	r2, [pc, #108]	; (8007f48 <ILI9341_Draw_Pixel+0x1ac>)
 8007edc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ee0:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(0x2C);
 8007ee2:	202c      	movs	r0, #44	; 0x2c
 8007ee4:	f7ff fc68 	bl	80077b8 <ILI9341_SPI_Send>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8007ee8:	4b17      	ldr	r3, [pc, #92]	; (8007f48 <ILI9341_Draw_Pixel+0x1ac>)
 8007eea:	695b      	ldr	r3, [r3, #20]
 8007eec:	4a16      	ldr	r2, [pc, #88]	; (8007f48 <ILI9341_Draw_Pixel+0x1ac>)
 8007eee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ef2:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8007ef4:	4b14      	ldr	r3, [pc, #80]	; (8007f48 <ILI9341_Draw_Pixel+0x1ac>)
 8007ef6:	695b      	ldr	r3, [r3, #20]
 8007ef8:	4a13      	ldr	r2, [pc, #76]	; (8007f48 <ILI9341_Draw_Pixel+0x1ac>)
 8007efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007efe:	6153      	str	r3, [r2, #20]
	
	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007f00:	4b11      	ldr	r3, [pc, #68]	; (8007f48 <ILI9341_Draw_Pixel+0x1ac>)
 8007f02:	695b      	ldr	r3, [r3, #20]
 8007f04:	4a10      	ldr	r2, [pc, #64]	; (8007f48 <ILI9341_Draw_Pixel+0x1ac>)
 8007f06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f0a:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 8007f0c:	887b      	ldrh	r3, [r7, #2]
 8007f0e:	0a1b      	lsrs	r3, r3, #8
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	733b      	strb	r3, [r7, #12]
 8007f16:	887b      	ldrh	r3, [r7, #2]
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8007f1c:	f107 010c 	add.w	r1, r7, #12
 8007f20:	2301      	movs	r3, #1
 8007f22:	2202      	movs	r2, #2
 8007f24:	4809      	ldr	r0, [pc, #36]	; (8007f4c <ILI9341_Draw_Pixel+0x1b0>)
 8007f26:	f7fd fcf7 	bl	8005918 <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8007f2a:	4b07      	ldr	r3, [pc, #28]	; (8007f48 <ILI9341_Draw_Pixel+0x1ac>)
 8007f2c:	695b      	ldr	r3, [r3, #20]
 8007f2e:	4a06      	ldr	r2, [pc, #24]	; (8007f48 <ILI9341_Draw_Pixel+0x1ac>)
 8007f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f34:	6153      	str	r3, [r2, #20]
 8007f36:	e000      	b.n	8007f3a <ILI9341_Draw_Pixel+0x19e>
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8007f38:	bf00      	nop

	
}
 8007f3a:	3718      	adds	r7, #24
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	200003da 	.word	0x200003da
 8007f44:	200003d8 	.word	0x200003d8
 8007f48:	48000400 	.word	0x48000400
 8007f4c:	20000658 	.word	0x20000658

08007f50 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t width, uint16_t height, uint16_t colour)
{
 8007f50:	b590      	push	{r4, r7, lr}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	4604      	mov	r4, r0
 8007f58:	4608      	mov	r0, r1
 8007f5a:	4611      	mov	r1, r2
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	4623      	mov	r3, r4
 8007f60:	80fb      	strh	r3, [r7, #6]
 8007f62:	4603      	mov	r3, r0
 8007f64:	80bb      	strh	r3, [r7, #4]
 8007f66:	460b      	mov	r3, r1
 8007f68:	807b      	strh	r3, [r7, #2]
 8007f6a:	4613      	mov	r3, r2
 8007f6c:	803b      	strh	r3, [r7, #0]
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8007f6e:	4b37      	ldr	r3, [pc, #220]	; (800804c <ILI9341_Draw_Rectangle+0xfc>)
 8007f70:	881b      	ldrh	r3, [r3, #0]
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	88fa      	ldrh	r2, [r7, #6]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d264      	bcs.n	8008044 <ILI9341_Draw_Rectangle+0xf4>
 8007f7a:	4b35      	ldr	r3, [pc, #212]	; (8008050 <ILI9341_Draw_Rectangle+0x100>)
 8007f7c:	881b      	ldrh	r3, [r3, #0]
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	88ba      	ldrh	r2, [r7, #4]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d25e      	bcs.n	8008044 <ILI9341_Draw_Rectangle+0xf4>
	if((X+width-1)>=LCD_WIDTH)
 8007f86:	88fa      	ldrh	r2, [r7, #6]
 8007f88:	887b      	ldrh	r3, [r7, #2]
 8007f8a:	4413      	add	r3, r2
 8007f8c:	3b01      	subs	r3, #1
 8007f8e:	4a2f      	ldr	r2, [pc, #188]	; (800804c <ILI9341_Draw_Rectangle+0xfc>)
 8007f90:	8812      	ldrh	r2, [r2, #0]
 8007f92:	b292      	uxth	r2, r2
 8007f94:	4293      	cmp	r3, r2
 8007f96:	db05      	blt.n	8007fa4 <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-X;
 8007f98:	4b2c      	ldr	r3, [pc, #176]	; (800804c <ILI9341_Draw_Rectangle+0xfc>)
 8007f9a:	881b      	ldrh	r3, [r3, #0]
 8007f9c:	b29a      	uxth	r2, r3
 8007f9e:	88fb      	ldrh	r3, [r7, #6]
 8007fa0:	1ad3      	subs	r3, r2, r3
 8007fa2:	807b      	strh	r3, [r7, #2]
		}
	if((Y+height-1)>=LCD_HEIGHT)
 8007fa4:	88ba      	ldrh	r2, [r7, #4]
 8007fa6:	883b      	ldrh	r3, [r7, #0]
 8007fa8:	4413      	add	r3, r2
 8007faa:	3b01      	subs	r3, #1
 8007fac:	4a28      	ldr	r2, [pc, #160]	; (8008050 <ILI9341_Draw_Rectangle+0x100>)
 8007fae:	8812      	ldrh	r2, [r2, #0]
 8007fb0:	b292      	uxth	r2, r2
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	db05      	blt.n	8007fc2 <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-Y;
 8007fb6:	4b26      	ldr	r3, [pc, #152]	; (8008050 <ILI9341_Draw_Rectangle+0x100>)
 8007fb8:	881b      	ldrh	r3, [r3, #0]
 8007fba:	b29a      	uxth	r2, r3
 8007fbc:	88bb      	ldrh	r3, [r7, #4]
 8007fbe:	1ad3      	subs	r3, r2, r3
 8007fc0:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Address(X, Y, X+width-1, Y+height-1);
 8007fc2:	88fa      	ldrh	r2, [r7, #6]
 8007fc4:	887b      	ldrh	r3, [r7, #2]
 8007fc6:	4413      	add	r3, r2
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	3b01      	subs	r3, #1
 8007fcc:	b29c      	uxth	r4, r3
 8007fce:	88ba      	ldrh	r2, [r7, #4]
 8007fd0:	883b      	ldrh	r3, [r7, #0]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	3b01      	subs	r3, #1
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	88b9      	ldrh	r1, [r7, #4]
 8007fdc:	88f8      	ldrh	r0, [r7, #6]
 8007fde:	4622      	mov	r2, r4
 8007fe0:	f7ff fc42 	bl	8007868 <ILI9341_Set_Address>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep ILI9341_Draw_colour_Burst() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 8007fe4:	883a      	ldrh	r2, [r7, #0]
 8007fe6:	887b      	ldrh	r3, [r7, #2]
 8007fe8:	fb12 f303 	smulbb	r3, r2, r3
 8007fec:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 8007ff2:	89fb      	ldrh	r3, [r7, #14]
 8007ff4:	f003 0301 	and.w	r3, r3, #1
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d009      	beq.n	8008010 <ILI9341_Draw_Rectangle+0xc0>
 8007ffc:	89fb      	ldrh	r3, [r7, #14]
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d906      	bls.n	8008010 <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 8008002:	2301      	movs	r3, #1
 8008004:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 8008006:	89fb      	ldrh	r3, [r7, #14]
 8008008:	085b      	lsrs	r3, r3, #1
 800800a:	b29b      	uxth	r3, r3
 800800c:	005b      	lsls	r3, r3, #1
 800800e:	81fb      	strh	r3, [r7, #14]
	}

	ILI9341_Draw_colour_Burst(colour, size);
 8008010:	89fa      	ldrh	r2, [r7, #14]
 8008012:	8c3b      	ldrh	r3, [r7, #32]
 8008014:	4611      	mov	r1, r2
 8008016:	4618      	mov	r0, r3
 8008018:	f7ff fdfc 	bl	8007c14 <ILI9341_Draw_colour_Burst>

	// add the truncated pixel now
	if(truncated)
 800801c:	7b7b      	ldrb	r3, [r7, #13]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d011      	beq.n	8008046 <ILI9341_Draw_Rectangle+0xf6>
		ILI9341_Draw_Pixel(X+width-1, Y+height-1, colour);
 8008022:	88fa      	ldrh	r2, [r7, #6]
 8008024:	887b      	ldrh	r3, [r7, #2]
 8008026:	4413      	add	r3, r2
 8008028:	b29b      	uxth	r3, r3
 800802a:	3b01      	subs	r3, #1
 800802c:	b298      	uxth	r0, r3
 800802e:	88ba      	ldrh	r2, [r7, #4]
 8008030:	883b      	ldrh	r3, [r7, #0]
 8008032:	4413      	add	r3, r2
 8008034:	b29b      	uxth	r3, r3
 8008036:	3b01      	subs	r3, #1
 8008038:	b29b      	uxth	r3, r3
 800803a:	8c3a      	ldrh	r2, [r7, #32]
 800803c:	4619      	mov	r1, r3
 800803e:	f7ff fead 	bl	8007d9c <ILI9341_Draw_Pixel>
 8008042:	e000      	b.n	8008046 <ILI9341_Draw_Rectangle+0xf6>
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8008044:	bf00      	nop

}
 8008046:	3714      	adds	r7, #20
 8008048:	46bd      	mov	sp, r7
 800804a:	bd90      	pop	{r4, r7, pc}
 800804c:	200003da 	.word	0x200003da
 8008050:	200003d8 	.word	0x200003d8

08008054 <ILI9341_Draw_Horizontal_Line>:
 *
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t width, uint16_t colour)
{
 8008054:	b590      	push	{r4, r7, lr}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
 800805a:	4604      	mov	r4, r0
 800805c:	4608      	mov	r0, r1
 800805e:	4611      	mov	r1, r2
 8008060:	461a      	mov	r2, r3
 8008062:	4623      	mov	r3, r4
 8008064:	80fb      	strh	r3, [r7, #6]
 8008066:	4603      	mov	r3, r0
 8008068:	80bb      	strh	r3, [r7, #4]
 800806a:	460b      	mov	r3, r1
 800806c:	807b      	strh	r3, [r7, #2]
 800806e:	4613      	mov	r3, r2
 8008070:	803b      	strh	r3, [r7, #0]
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8008072:	4b18      	ldr	r3, [pc, #96]	; (80080d4 <ILI9341_Draw_Horizontal_Line+0x80>)
 8008074:	881b      	ldrh	r3, [r3, #0]
 8008076:	b29b      	uxth	r3, r3
 8008078:	88fa      	ldrh	r2, [r7, #6]
 800807a:	429a      	cmp	r2, r3
 800807c:	d226      	bcs.n	80080cc <ILI9341_Draw_Horizontal_Line+0x78>
 800807e:	4b16      	ldr	r3, [pc, #88]	; (80080d8 <ILI9341_Draw_Horizontal_Line+0x84>)
 8008080:	881b      	ldrh	r3, [r3, #0]
 8008082:	b29b      	uxth	r3, r3
 8008084:	88ba      	ldrh	r2, [r7, #4]
 8008086:	429a      	cmp	r2, r3
 8008088:	d220      	bcs.n	80080cc <ILI9341_Draw_Horizontal_Line+0x78>
	if((X+width-1)>=LCD_WIDTH)
 800808a:	88fa      	ldrh	r2, [r7, #6]
 800808c:	887b      	ldrh	r3, [r7, #2]
 800808e:	4413      	add	r3, r2
 8008090:	3b01      	subs	r3, #1
 8008092:	4a10      	ldr	r2, [pc, #64]	; (80080d4 <ILI9341_Draw_Horizontal_Line+0x80>)
 8008094:	8812      	ldrh	r2, [r2, #0]
 8008096:	b292      	uxth	r2, r2
 8008098:	4293      	cmp	r3, r2
 800809a:	db05      	blt.n	80080a8 <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width=LCD_WIDTH-X;
 800809c:	4b0d      	ldr	r3, [pc, #52]	; (80080d4 <ILI9341_Draw_Horizontal_Line+0x80>)
 800809e:	881b      	ldrh	r3, [r3, #0]
 80080a0:	b29a      	uxth	r2, r3
 80080a2:	88fb      	ldrh	r3, [r7, #6]
 80080a4:	1ad3      	subs	r3, r2, r3
 80080a6:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Address(X, Y, X+width-1, Y);
 80080a8:	88fa      	ldrh	r2, [r7, #6]
 80080aa:	887b      	ldrh	r3, [r7, #2]
 80080ac:	4413      	add	r3, r2
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	3b01      	subs	r3, #1
 80080b2:	b29a      	uxth	r2, r3
 80080b4:	88bb      	ldrh	r3, [r7, #4]
 80080b6:	88b9      	ldrh	r1, [r7, #4]
 80080b8:	88f8      	ldrh	r0, [r7, #6]
 80080ba:	f7ff fbd5 	bl	8007868 <ILI9341_Set_Address>
	ILI9341_Draw_colour_Burst(colour, width);
 80080be:	887a      	ldrh	r2, [r7, #2]
 80080c0:	883b      	ldrh	r3, [r7, #0]
 80080c2:	4611      	mov	r1, r2
 80080c4:	4618      	mov	r0, r3
 80080c6:	f7ff fda5 	bl	8007c14 <ILI9341_Draw_colour_Burst>
 80080ca:	e000      	b.n	80080ce <ILI9341_Draw_Horizontal_Line+0x7a>
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80080cc:	bf00      	nop
}
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd90      	pop	{r4, r7, pc}
 80080d4:	200003da 	.word	0x200003da
 80080d8:	200003d8 	.word	0x200003d8

080080dc <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t height, uint16_t colour)
{
 80080dc:	b590      	push	{r4, r7, lr}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	4604      	mov	r4, r0
 80080e4:	4608      	mov	r0, r1
 80080e6:	4611      	mov	r1, r2
 80080e8:	461a      	mov	r2, r3
 80080ea:	4623      	mov	r3, r4
 80080ec:	80fb      	strh	r3, [r7, #6]
 80080ee:	4603      	mov	r3, r0
 80080f0:	80bb      	strh	r3, [r7, #4]
 80080f2:	460b      	mov	r3, r1
 80080f4:	807b      	strh	r3, [r7, #2]
 80080f6:	4613      	mov	r3, r2
 80080f8:	803b      	strh	r3, [r7, #0]
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80080fa:	4b18      	ldr	r3, [pc, #96]	; (800815c <ILI9341_Draw_Vertical_Line+0x80>)
 80080fc:	881b      	ldrh	r3, [r3, #0]
 80080fe:	b29b      	uxth	r3, r3
 8008100:	88fa      	ldrh	r2, [r7, #6]
 8008102:	429a      	cmp	r2, r3
 8008104:	d226      	bcs.n	8008154 <ILI9341_Draw_Vertical_Line+0x78>
 8008106:	4b16      	ldr	r3, [pc, #88]	; (8008160 <ILI9341_Draw_Vertical_Line+0x84>)
 8008108:	881b      	ldrh	r3, [r3, #0]
 800810a:	b29b      	uxth	r3, r3
 800810c:	88ba      	ldrh	r2, [r7, #4]
 800810e:	429a      	cmp	r2, r3
 8008110:	d220      	bcs.n	8008154 <ILI9341_Draw_Vertical_Line+0x78>
	if((Y+height-1)>=LCD_HEIGHT)
 8008112:	88ba      	ldrh	r2, [r7, #4]
 8008114:	887b      	ldrh	r3, [r7, #2]
 8008116:	4413      	add	r3, r2
 8008118:	3b01      	subs	r3, #1
 800811a:	4a11      	ldr	r2, [pc, #68]	; (8008160 <ILI9341_Draw_Vertical_Line+0x84>)
 800811c:	8812      	ldrh	r2, [r2, #0]
 800811e:	b292      	uxth	r2, r2
 8008120:	4293      	cmp	r3, r2
 8008122:	db05      	blt.n	8008130 <ILI9341_Draw_Vertical_Line+0x54>
		{
			height=LCD_HEIGHT-Y;
 8008124:	4b0e      	ldr	r3, [pc, #56]	; (8008160 <ILI9341_Draw_Vertical_Line+0x84>)
 8008126:	881b      	ldrh	r3, [r3, #0]
 8008128:	b29a      	uxth	r2, r3
 800812a:	88bb      	ldrh	r3, [r7, #4]
 800812c:	1ad3      	subs	r3, r2, r3
 800812e:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Address(X, Y, X, Y+height-1);
 8008130:	88ba      	ldrh	r2, [r7, #4]
 8008132:	887b      	ldrh	r3, [r7, #2]
 8008134:	4413      	add	r3, r2
 8008136:	b29b      	uxth	r3, r3
 8008138:	3b01      	subs	r3, #1
 800813a:	b29b      	uxth	r3, r3
 800813c:	88fa      	ldrh	r2, [r7, #6]
 800813e:	88b9      	ldrh	r1, [r7, #4]
 8008140:	88f8      	ldrh	r0, [r7, #6]
 8008142:	f7ff fb91 	bl	8007868 <ILI9341_Set_Address>
	ILI9341_Draw_colour_Burst(colour, height);
 8008146:	887a      	ldrh	r2, [r7, #2]
 8008148:	883b      	ldrh	r3, [r7, #0]
 800814a:	4611      	mov	r1, r2
 800814c:	4618      	mov	r0, r3
 800814e:	f7ff fd61 	bl	8007c14 <ILI9341_Draw_colour_Burst>
 8008152:	e000      	b.n	8008156 <ILI9341_Draw_Vertical_Line+0x7a>
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8008154:	bf00      	nop
}
 8008156:	370c      	adds	r7, #12
 8008158:	46bd      	mov	sp, r7
 800815a:	bd90      	pop	{r4, r7, pc}
 800815c:	200003da 	.word	0x200003da
 8008160:	200003d8 	.word	0x200003d8

08008164 <__errno>:
 8008164:	4b01      	ldr	r3, [pc, #4]	; (800816c <__errno+0x8>)
 8008166:	6818      	ldr	r0, [r3, #0]
 8008168:	4770      	bx	lr
 800816a:	bf00      	nop
 800816c:	200003dc 	.word	0x200003dc

08008170 <__libc_init_array>:
 8008170:	b570      	push	{r4, r5, r6, lr}
 8008172:	4e0d      	ldr	r6, [pc, #52]	; (80081a8 <__libc_init_array+0x38>)
 8008174:	4c0d      	ldr	r4, [pc, #52]	; (80081ac <__libc_init_array+0x3c>)
 8008176:	1ba4      	subs	r4, r4, r6
 8008178:	10a4      	asrs	r4, r4, #2
 800817a:	2500      	movs	r5, #0
 800817c:	42a5      	cmp	r5, r4
 800817e:	d109      	bne.n	8008194 <__libc_init_array+0x24>
 8008180:	4e0b      	ldr	r6, [pc, #44]	; (80081b0 <__libc_init_array+0x40>)
 8008182:	4c0c      	ldr	r4, [pc, #48]	; (80081b4 <__libc_init_array+0x44>)
 8008184:	f000 ff68 	bl	8009058 <_init>
 8008188:	1ba4      	subs	r4, r4, r6
 800818a:	10a4      	asrs	r4, r4, #2
 800818c:	2500      	movs	r5, #0
 800818e:	42a5      	cmp	r5, r4
 8008190:	d105      	bne.n	800819e <__libc_init_array+0x2e>
 8008192:	bd70      	pop	{r4, r5, r6, pc}
 8008194:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008198:	4798      	blx	r3
 800819a:	3501      	adds	r5, #1
 800819c:	e7ee      	b.n	800817c <__libc_init_array+0xc>
 800819e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80081a2:	4798      	blx	r3
 80081a4:	3501      	adds	r5, #1
 80081a6:	e7f2      	b.n	800818e <__libc_init_array+0x1e>
 80081a8:	080093f8 	.word	0x080093f8
 80081ac:	080093f8 	.word	0x080093f8
 80081b0:	080093f8 	.word	0x080093f8
 80081b4:	080093fc 	.word	0x080093fc

080081b8 <memset>:
 80081b8:	4402      	add	r2, r0
 80081ba:	4603      	mov	r3, r0
 80081bc:	4293      	cmp	r3, r2
 80081be:	d100      	bne.n	80081c2 <memset+0xa>
 80081c0:	4770      	bx	lr
 80081c2:	f803 1b01 	strb.w	r1, [r3], #1
 80081c6:	e7f9      	b.n	80081bc <memset+0x4>

080081c8 <iprintf>:
 80081c8:	b40f      	push	{r0, r1, r2, r3}
 80081ca:	4b0a      	ldr	r3, [pc, #40]	; (80081f4 <iprintf+0x2c>)
 80081cc:	b513      	push	{r0, r1, r4, lr}
 80081ce:	681c      	ldr	r4, [r3, #0]
 80081d0:	b124      	cbz	r4, 80081dc <iprintf+0x14>
 80081d2:	69a3      	ldr	r3, [r4, #24]
 80081d4:	b913      	cbnz	r3, 80081dc <iprintf+0x14>
 80081d6:	4620      	mov	r0, r4
 80081d8:	f000 fa22 	bl	8008620 <__sinit>
 80081dc:	ab05      	add	r3, sp, #20
 80081de:	9a04      	ldr	r2, [sp, #16]
 80081e0:	68a1      	ldr	r1, [r4, #8]
 80081e2:	9301      	str	r3, [sp, #4]
 80081e4:	4620      	mov	r0, r4
 80081e6:	f000 fbdb 	bl	80089a0 <_vfiprintf_r>
 80081ea:	b002      	add	sp, #8
 80081ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081f0:	b004      	add	sp, #16
 80081f2:	4770      	bx	lr
 80081f4:	200003dc 	.word	0x200003dc

080081f8 <_puts_r>:
 80081f8:	b570      	push	{r4, r5, r6, lr}
 80081fa:	460e      	mov	r6, r1
 80081fc:	4605      	mov	r5, r0
 80081fe:	b118      	cbz	r0, 8008208 <_puts_r+0x10>
 8008200:	6983      	ldr	r3, [r0, #24]
 8008202:	b90b      	cbnz	r3, 8008208 <_puts_r+0x10>
 8008204:	f000 fa0c 	bl	8008620 <__sinit>
 8008208:	69ab      	ldr	r3, [r5, #24]
 800820a:	68ac      	ldr	r4, [r5, #8]
 800820c:	b913      	cbnz	r3, 8008214 <_puts_r+0x1c>
 800820e:	4628      	mov	r0, r5
 8008210:	f000 fa06 	bl	8008620 <__sinit>
 8008214:	4b23      	ldr	r3, [pc, #140]	; (80082a4 <_puts_r+0xac>)
 8008216:	429c      	cmp	r4, r3
 8008218:	d117      	bne.n	800824a <_puts_r+0x52>
 800821a:	686c      	ldr	r4, [r5, #4]
 800821c:	89a3      	ldrh	r3, [r4, #12]
 800821e:	071b      	lsls	r3, r3, #28
 8008220:	d51d      	bpl.n	800825e <_puts_r+0x66>
 8008222:	6923      	ldr	r3, [r4, #16]
 8008224:	b1db      	cbz	r3, 800825e <_puts_r+0x66>
 8008226:	3e01      	subs	r6, #1
 8008228:	68a3      	ldr	r3, [r4, #8]
 800822a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800822e:	3b01      	subs	r3, #1
 8008230:	60a3      	str	r3, [r4, #8]
 8008232:	b9e9      	cbnz	r1, 8008270 <_puts_r+0x78>
 8008234:	2b00      	cmp	r3, #0
 8008236:	da2e      	bge.n	8008296 <_puts_r+0x9e>
 8008238:	4622      	mov	r2, r4
 800823a:	210a      	movs	r1, #10
 800823c:	4628      	mov	r0, r5
 800823e:	f000 f83f 	bl	80082c0 <__swbuf_r>
 8008242:	3001      	adds	r0, #1
 8008244:	d011      	beq.n	800826a <_puts_r+0x72>
 8008246:	200a      	movs	r0, #10
 8008248:	e011      	b.n	800826e <_puts_r+0x76>
 800824a:	4b17      	ldr	r3, [pc, #92]	; (80082a8 <_puts_r+0xb0>)
 800824c:	429c      	cmp	r4, r3
 800824e:	d101      	bne.n	8008254 <_puts_r+0x5c>
 8008250:	68ac      	ldr	r4, [r5, #8]
 8008252:	e7e3      	b.n	800821c <_puts_r+0x24>
 8008254:	4b15      	ldr	r3, [pc, #84]	; (80082ac <_puts_r+0xb4>)
 8008256:	429c      	cmp	r4, r3
 8008258:	bf08      	it	eq
 800825a:	68ec      	ldreq	r4, [r5, #12]
 800825c:	e7de      	b.n	800821c <_puts_r+0x24>
 800825e:	4621      	mov	r1, r4
 8008260:	4628      	mov	r0, r5
 8008262:	f000 f87f 	bl	8008364 <__swsetup_r>
 8008266:	2800      	cmp	r0, #0
 8008268:	d0dd      	beq.n	8008226 <_puts_r+0x2e>
 800826a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800826e:	bd70      	pop	{r4, r5, r6, pc}
 8008270:	2b00      	cmp	r3, #0
 8008272:	da04      	bge.n	800827e <_puts_r+0x86>
 8008274:	69a2      	ldr	r2, [r4, #24]
 8008276:	429a      	cmp	r2, r3
 8008278:	dc06      	bgt.n	8008288 <_puts_r+0x90>
 800827a:	290a      	cmp	r1, #10
 800827c:	d004      	beq.n	8008288 <_puts_r+0x90>
 800827e:	6823      	ldr	r3, [r4, #0]
 8008280:	1c5a      	adds	r2, r3, #1
 8008282:	6022      	str	r2, [r4, #0]
 8008284:	7019      	strb	r1, [r3, #0]
 8008286:	e7cf      	b.n	8008228 <_puts_r+0x30>
 8008288:	4622      	mov	r2, r4
 800828a:	4628      	mov	r0, r5
 800828c:	f000 f818 	bl	80082c0 <__swbuf_r>
 8008290:	3001      	adds	r0, #1
 8008292:	d1c9      	bne.n	8008228 <_puts_r+0x30>
 8008294:	e7e9      	b.n	800826a <_puts_r+0x72>
 8008296:	6823      	ldr	r3, [r4, #0]
 8008298:	200a      	movs	r0, #10
 800829a:	1c5a      	adds	r2, r3, #1
 800829c:	6022      	str	r2, [r4, #0]
 800829e:	7018      	strb	r0, [r3, #0]
 80082a0:	e7e5      	b.n	800826e <_puts_r+0x76>
 80082a2:	bf00      	nop
 80082a4:	08009384 	.word	0x08009384
 80082a8:	080093a4 	.word	0x080093a4
 80082ac:	08009364 	.word	0x08009364

080082b0 <puts>:
 80082b0:	4b02      	ldr	r3, [pc, #8]	; (80082bc <puts+0xc>)
 80082b2:	4601      	mov	r1, r0
 80082b4:	6818      	ldr	r0, [r3, #0]
 80082b6:	f7ff bf9f 	b.w	80081f8 <_puts_r>
 80082ba:	bf00      	nop
 80082bc:	200003dc 	.word	0x200003dc

080082c0 <__swbuf_r>:
 80082c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082c2:	460e      	mov	r6, r1
 80082c4:	4614      	mov	r4, r2
 80082c6:	4605      	mov	r5, r0
 80082c8:	b118      	cbz	r0, 80082d2 <__swbuf_r+0x12>
 80082ca:	6983      	ldr	r3, [r0, #24]
 80082cc:	b90b      	cbnz	r3, 80082d2 <__swbuf_r+0x12>
 80082ce:	f000 f9a7 	bl	8008620 <__sinit>
 80082d2:	4b21      	ldr	r3, [pc, #132]	; (8008358 <__swbuf_r+0x98>)
 80082d4:	429c      	cmp	r4, r3
 80082d6:	d12a      	bne.n	800832e <__swbuf_r+0x6e>
 80082d8:	686c      	ldr	r4, [r5, #4]
 80082da:	69a3      	ldr	r3, [r4, #24]
 80082dc:	60a3      	str	r3, [r4, #8]
 80082de:	89a3      	ldrh	r3, [r4, #12]
 80082e0:	071a      	lsls	r2, r3, #28
 80082e2:	d52e      	bpl.n	8008342 <__swbuf_r+0x82>
 80082e4:	6923      	ldr	r3, [r4, #16]
 80082e6:	b363      	cbz	r3, 8008342 <__swbuf_r+0x82>
 80082e8:	6923      	ldr	r3, [r4, #16]
 80082ea:	6820      	ldr	r0, [r4, #0]
 80082ec:	1ac0      	subs	r0, r0, r3
 80082ee:	6963      	ldr	r3, [r4, #20]
 80082f0:	b2f6      	uxtb	r6, r6
 80082f2:	4283      	cmp	r3, r0
 80082f4:	4637      	mov	r7, r6
 80082f6:	dc04      	bgt.n	8008302 <__swbuf_r+0x42>
 80082f8:	4621      	mov	r1, r4
 80082fa:	4628      	mov	r0, r5
 80082fc:	f000 f926 	bl	800854c <_fflush_r>
 8008300:	bb28      	cbnz	r0, 800834e <__swbuf_r+0x8e>
 8008302:	68a3      	ldr	r3, [r4, #8]
 8008304:	3b01      	subs	r3, #1
 8008306:	60a3      	str	r3, [r4, #8]
 8008308:	6823      	ldr	r3, [r4, #0]
 800830a:	1c5a      	adds	r2, r3, #1
 800830c:	6022      	str	r2, [r4, #0]
 800830e:	701e      	strb	r6, [r3, #0]
 8008310:	6963      	ldr	r3, [r4, #20]
 8008312:	3001      	adds	r0, #1
 8008314:	4283      	cmp	r3, r0
 8008316:	d004      	beq.n	8008322 <__swbuf_r+0x62>
 8008318:	89a3      	ldrh	r3, [r4, #12]
 800831a:	07db      	lsls	r3, r3, #31
 800831c:	d519      	bpl.n	8008352 <__swbuf_r+0x92>
 800831e:	2e0a      	cmp	r6, #10
 8008320:	d117      	bne.n	8008352 <__swbuf_r+0x92>
 8008322:	4621      	mov	r1, r4
 8008324:	4628      	mov	r0, r5
 8008326:	f000 f911 	bl	800854c <_fflush_r>
 800832a:	b190      	cbz	r0, 8008352 <__swbuf_r+0x92>
 800832c:	e00f      	b.n	800834e <__swbuf_r+0x8e>
 800832e:	4b0b      	ldr	r3, [pc, #44]	; (800835c <__swbuf_r+0x9c>)
 8008330:	429c      	cmp	r4, r3
 8008332:	d101      	bne.n	8008338 <__swbuf_r+0x78>
 8008334:	68ac      	ldr	r4, [r5, #8]
 8008336:	e7d0      	b.n	80082da <__swbuf_r+0x1a>
 8008338:	4b09      	ldr	r3, [pc, #36]	; (8008360 <__swbuf_r+0xa0>)
 800833a:	429c      	cmp	r4, r3
 800833c:	bf08      	it	eq
 800833e:	68ec      	ldreq	r4, [r5, #12]
 8008340:	e7cb      	b.n	80082da <__swbuf_r+0x1a>
 8008342:	4621      	mov	r1, r4
 8008344:	4628      	mov	r0, r5
 8008346:	f000 f80d 	bl	8008364 <__swsetup_r>
 800834a:	2800      	cmp	r0, #0
 800834c:	d0cc      	beq.n	80082e8 <__swbuf_r+0x28>
 800834e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008352:	4638      	mov	r0, r7
 8008354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008356:	bf00      	nop
 8008358:	08009384 	.word	0x08009384
 800835c:	080093a4 	.word	0x080093a4
 8008360:	08009364 	.word	0x08009364

08008364 <__swsetup_r>:
 8008364:	4b32      	ldr	r3, [pc, #200]	; (8008430 <__swsetup_r+0xcc>)
 8008366:	b570      	push	{r4, r5, r6, lr}
 8008368:	681d      	ldr	r5, [r3, #0]
 800836a:	4606      	mov	r6, r0
 800836c:	460c      	mov	r4, r1
 800836e:	b125      	cbz	r5, 800837a <__swsetup_r+0x16>
 8008370:	69ab      	ldr	r3, [r5, #24]
 8008372:	b913      	cbnz	r3, 800837a <__swsetup_r+0x16>
 8008374:	4628      	mov	r0, r5
 8008376:	f000 f953 	bl	8008620 <__sinit>
 800837a:	4b2e      	ldr	r3, [pc, #184]	; (8008434 <__swsetup_r+0xd0>)
 800837c:	429c      	cmp	r4, r3
 800837e:	d10f      	bne.n	80083a0 <__swsetup_r+0x3c>
 8008380:	686c      	ldr	r4, [r5, #4]
 8008382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008386:	b29a      	uxth	r2, r3
 8008388:	0715      	lsls	r5, r2, #28
 800838a:	d42c      	bmi.n	80083e6 <__swsetup_r+0x82>
 800838c:	06d0      	lsls	r0, r2, #27
 800838e:	d411      	bmi.n	80083b4 <__swsetup_r+0x50>
 8008390:	2209      	movs	r2, #9
 8008392:	6032      	str	r2, [r6, #0]
 8008394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008398:	81a3      	strh	r3, [r4, #12]
 800839a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800839e:	e03e      	b.n	800841e <__swsetup_r+0xba>
 80083a0:	4b25      	ldr	r3, [pc, #148]	; (8008438 <__swsetup_r+0xd4>)
 80083a2:	429c      	cmp	r4, r3
 80083a4:	d101      	bne.n	80083aa <__swsetup_r+0x46>
 80083a6:	68ac      	ldr	r4, [r5, #8]
 80083a8:	e7eb      	b.n	8008382 <__swsetup_r+0x1e>
 80083aa:	4b24      	ldr	r3, [pc, #144]	; (800843c <__swsetup_r+0xd8>)
 80083ac:	429c      	cmp	r4, r3
 80083ae:	bf08      	it	eq
 80083b0:	68ec      	ldreq	r4, [r5, #12]
 80083b2:	e7e6      	b.n	8008382 <__swsetup_r+0x1e>
 80083b4:	0751      	lsls	r1, r2, #29
 80083b6:	d512      	bpl.n	80083de <__swsetup_r+0x7a>
 80083b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083ba:	b141      	cbz	r1, 80083ce <__swsetup_r+0x6a>
 80083bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083c0:	4299      	cmp	r1, r3
 80083c2:	d002      	beq.n	80083ca <__swsetup_r+0x66>
 80083c4:	4630      	mov	r0, r6
 80083c6:	f000 fa19 	bl	80087fc <_free_r>
 80083ca:	2300      	movs	r3, #0
 80083cc:	6363      	str	r3, [r4, #52]	; 0x34
 80083ce:	89a3      	ldrh	r3, [r4, #12]
 80083d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80083d4:	81a3      	strh	r3, [r4, #12]
 80083d6:	2300      	movs	r3, #0
 80083d8:	6063      	str	r3, [r4, #4]
 80083da:	6923      	ldr	r3, [r4, #16]
 80083dc:	6023      	str	r3, [r4, #0]
 80083de:	89a3      	ldrh	r3, [r4, #12]
 80083e0:	f043 0308 	orr.w	r3, r3, #8
 80083e4:	81a3      	strh	r3, [r4, #12]
 80083e6:	6923      	ldr	r3, [r4, #16]
 80083e8:	b94b      	cbnz	r3, 80083fe <__swsetup_r+0x9a>
 80083ea:	89a3      	ldrh	r3, [r4, #12]
 80083ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80083f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083f4:	d003      	beq.n	80083fe <__swsetup_r+0x9a>
 80083f6:	4621      	mov	r1, r4
 80083f8:	4630      	mov	r0, r6
 80083fa:	f000 f9bf 	bl	800877c <__smakebuf_r>
 80083fe:	89a2      	ldrh	r2, [r4, #12]
 8008400:	f012 0301 	ands.w	r3, r2, #1
 8008404:	d00c      	beq.n	8008420 <__swsetup_r+0xbc>
 8008406:	2300      	movs	r3, #0
 8008408:	60a3      	str	r3, [r4, #8]
 800840a:	6963      	ldr	r3, [r4, #20]
 800840c:	425b      	negs	r3, r3
 800840e:	61a3      	str	r3, [r4, #24]
 8008410:	6923      	ldr	r3, [r4, #16]
 8008412:	b953      	cbnz	r3, 800842a <__swsetup_r+0xc6>
 8008414:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008418:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800841c:	d1ba      	bne.n	8008394 <__swsetup_r+0x30>
 800841e:	bd70      	pop	{r4, r5, r6, pc}
 8008420:	0792      	lsls	r2, r2, #30
 8008422:	bf58      	it	pl
 8008424:	6963      	ldrpl	r3, [r4, #20]
 8008426:	60a3      	str	r3, [r4, #8]
 8008428:	e7f2      	b.n	8008410 <__swsetup_r+0xac>
 800842a:	2000      	movs	r0, #0
 800842c:	e7f7      	b.n	800841e <__swsetup_r+0xba>
 800842e:	bf00      	nop
 8008430:	200003dc 	.word	0x200003dc
 8008434:	08009384 	.word	0x08009384
 8008438:	080093a4 	.word	0x080093a4
 800843c:	08009364 	.word	0x08009364

08008440 <__sflush_r>:
 8008440:	898a      	ldrh	r2, [r1, #12]
 8008442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008446:	4605      	mov	r5, r0
 8008448:	0710      	lsls	r0, r2, #28
 800844a:	460c      	mov	r4, r1
 800844c:	d458      	bmi.n	8008500 <__sflush_r+0xc0>
 800844e:	684b      	ldr	r3, [r1, #4]
 8008450:	2b00      	cmp	r3, #0
 8008452:	dc05      	bgt.n	8008460 <__sflush_r+0x20>
 8008454:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008456:	2b00      	cmp	r3, #0
 8008458:	dc02      	bgt.n	8008460 <__sflush_r+0x20>
 800845a:	2000      	movs	r0, #0
 800845c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008460:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008462:	2e00      	cmp	r6, #0
 8008464:	d0f9      	beq.n	800845a <__sflush_r+0x1a>
 8008466:	2300      	movs	r3, #0
 8008468:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800846c:	682f      	ldr	r7, [r5, #0]
 800846e:	6a21      	ldr	r1, [r4, #32]
 8008470:	602b      	str	r3, [r5, #0]
 8008472:	d032      	beq.n	80084da <__sflush_r+0x9a>
 8008474:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008476:	89a3      	ldrh	r3, [r4, #12]
 8008478:	075a      	lsls	r2, r3, #29
 800847a:	d505      	bpl.n	8008488 <__sflush_r+0x48>
 800847c:	6863      	ldr	r3, [r4, #4]
 800847e:	1ac0      	subs	r0, r0, r3
 8008480:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008482:	b10b      	cbz	r3, 8008488 <__sflush_r+0x48>
 8008484:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008486:	1ac0      	subs	r0, r0, r3
 8008488:	2300      	movs	r3, #0
 800848a:	4602      	mov	r2, r0
 800848c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800848e:	6a21      	ldr	r1, [r4, #32]
 8008490:	4628      	mov	r0, r5
 8008492:	47b0      	blx	r6
 8008494:	1c43      	adds	r3, r0, #1
 8008496:	89a3      	ldrh	r3, [r4, #12]
 8008498:	d106      	bne.n	80084a8 <__sflush_r+0x68>
 800849a:	6829      	ldr	r1, [r5, #0]
 800849c:	291d      	cmp	r1, #29
 800849e:	d848      	bhi.n	8008532 <__sflush_r+0xf2>
 80084a0:	4a29      	ldr	r2, [pc, #164]	; (8008548 <__sflush_r+0x108>)
 80084a2:	40ca      	lsrs	r2, r1
 80084a4:	07d6      	lsls	r6, r2, #31
 80084a6:	d544      	bpl.n	8008532 <__sflush_r+0xf2>
 80084a8:	2200      	movs	r2, #0
 80084aa:	6062      	str	r2, [r4, #4]
 80084ac:	04d9      	lsls	r1, r3, #19
 80084ae:	6922      	ldr	r2, [r4, #16]
 80084b0:	6022      	str	r2, [r4, #0]
 80084b2:	d504      	bpl.n	80084be <__sflush_r+0x7e>
 80084b4:	1c42      	adds	r2, r0, #1
 80084b6:	d101      	bne.n	80084bc <__sflush_r+0x7c>
 80084b8:	682b      	ldr	r3, [r5, #0]
 80084ba:	b903      	cbnz	r3, 80084be <__sflush_r+0x7e>
 80084bc:	6560      	str	r0, [r4, #84]	; 0x54
 80084be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084c0:	602f      	str	r7, [r5, #0]
 80084c2:	2900      	cmp	r1, #0
 80084c4:	d0c9      	beq.n	800845a <__sflush_r+0x1a>
 80084c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084ca:	4299      	cmp	r1, r3
 80084cc:	d002      	beq.n	80084d4 <__sflush_r+0x94>
 80084ce:	4628      	mov	r0, r5
 80084d0:	f000 f994 	bl	80087fc <_free_r>
 80084d4:	2000      	movs	r0, #0
 80084d6:	6360      	str	r0, [r4, #52]	; 0x34
 80084d8:	e7c0      	b.n	800845c <__sflush_r+0x1c>
 80084da:	2301      	movs	r3, #1
 80084dc:	4628      	mov	r0, r5
 80084de:	47b0      	blx	r6
 80084e0:	1c41      	adds	r1, r0, #1
 80084e2:	d1c8      	bne.n	8008476 <__sflush_r+0x36>
 80084e4:	682b      	ldr	r3, [r5, #0]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d0c5      	beq.n	8008476 <__sflush_r+0x36>
 80084ea:	2b1d      	cmp	r3, #29
 80084ec:	d001      	beq.n	80084f2 <__sflush_r+0xb2>
 80084ee:	2b16      	cmp	r3, #22
 80084f0:	d101      	bne.n	80084f6 <__sflush_r+0xb6>
 80084f2:	602f      	str	r7, [r5, #0]
 80084f4:	e7b1      	b.n	800845a <__sflush_r+0x1a>
 80084f6:	89a3      	ldrh	r3, [r4, #12]
 80084f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084fc:	81a3      	strh	r3, [r4, #12]
 80084fe:	e7ad      	b.n	800845c <__sflush_r+0x1c>
 8008500:	690f      	ldr	r7, [r1, #16]
 8008502:	2f00      	cmp	r7, #0
 8008504:	d0a9      	beq.n	800845a <__sflush_r+0x1a>
 8008506:	0793      	lsls	r3, r2, #30
 8008508:	680e      	ldr	r6, [r1, #0]
 800850a:	bf08      	it	eq
 800850c:	694b      	ldreq	r3, [r1, #20]
 800850e:	600f      	str	r7, [r1, #0]
 8008510:	bf18      	it	ne
 8008512:	2300      	movne	r3, #0
 8008514:	eba6 0807 	sub.w	r8, r6, r7
 8008518:	608b      	str	r3, [r1, #8]
 800851a:	f1b8 0f00 	cmp.w	r8, #0
 800851e:	dd9c      	ble.n	800845a <__sflush_r+0x1a>
 8008520:	4643      	mov	r3, r8
 8008522:	463a      	mov	r2, r7
 8008524:	6a21      	ldr	r1, [r4, #32]
 8008526:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008528:	4628      	mov	r0, r5
 800852a:	47b0      	blx	r6
 800852c:	2800      	cmp	r0, #0
 800852e:	dc06      	bgt.n	800853e <__sflush_r+0xfe>
 8008530:	89a3      	ldrh	r3, [r4, #12]
 8008532:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008536:	81a3      	strh	r3, [r4, #12]
 8008538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800853c:	e78e      	b.n	800845c <__sflush_r+0x1c>
 800853e:	4407      	add	r7, r0
 8008540:	eba8 0800 	sub.w	r8, r8, r0
 8008544:	e7e9      	b.n	800851a <__sflush_r+0xda>
 8008546:	bf00      	nop
 8008548:	20400001 	.word	0x20400001

0800854c <_fflush_r>:
 800854c:	b538      	push	{r3, r4, r5, lr}
 800854e:	690b      	ldr	r3, [r1, #16]
 8008550:	4605      	mov	r5, r0
 8008552:	460c      	mov	r4, r1
 8008554:	b1db      	cbz	r3, 800858e <_fflush_r+0x42>
 8008556:	b118      	cbz	r0, 8008560 <_fflush_r+0x14>
 8008558:	6983      	ldr	r3, [r0, #24]
 800855a:	b90b      	cbnz	r3, 8008560 <_fflush_r+0x14>
 800855c:	f000 f860 	bl	8008620 <__sinit>
 8008560:	4b0c      	ldr	r3, [pc, #48]	; (8008594 <_fflush_r+0x48>)
 8008562:	429c      	cmp	r4, r3
 8008564:	d109      	bne.n	800857a <_fflush_r+0x2e>
 8008566:	686c      	ldr	r4, [r5, #4]
 8008568:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800856c:	b17b      	cbz	r3, 800858e <_fflush_r+0x42>
 800856e:	4621      	mov	r1, r4
 8008570:	4628      	mov	r0, r5
 8008572:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008576:	f7ff bf63 	b.w	8008440 <__sflush_r>
 800857a:	4b07      	ldr	r3, [pc, #28]	; (8008598 <_fflush_r+0x4c>)
 800857c:	429c      	cmp	r4, r3
 800857e:	d101      	bne.n	8008584 <_fflush_r+0x38>
 8008580:	68ac      	ldr	r4, [r5, #8]
 8008582:	e7f1      	b.n	8008568 <_fflush_r+0x1c>
 8008584:	4b05      	ldr	r3, [pc, #20]	; (800859c <_fflush_r+0x50>)
 8008586:	429c      	cmp	r4, r3
 8008588:	bf08      	it	eq
 800858a:	68ec      	ldreq	r4, [r5, #12]
 800858c:	e7ec      	b.n	8008568 <_fflush_r+0x1c>
 800858e:	2000      	movs	r0, #0
 8008590:	bd38      	pop	{r3, r4, r5, pc}
 8008592:	bf00      	nop
 8008594:	08009384 	.word	0x08009384
 8008598:	080093a4 	.word	0x080093a4
 800859c:	08009364 	.word	0x08009364

080085a0 <std>:
 80085a0:	2300      	movs	r3, #0
 80085a2:	b510      	push	{r4, lr}
 80085a4:	4604      	mov	r4, r0
 80085a6:	e9c0 3300 	strd	r3, r3, [r0]
 80085aa:	6083      	str	r3, [r0, #8]
 80085ac:	8181      	strh	r1, [r0, #12]
 80085ae:	6643      	str	r3, [r0, #100]	; 0x64
 80085b0:	81c2      	strh	r2, [r0, #14]
 80085b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80085b6:	6183      	str	r3, [r0, #24]
 80085b8:	4619      	mov	r1, r3
 80085ba:	2208      	movs	r2, #8
 80085bc:	305c      	adds	r0, #92	; 0x5c
 80085be:	f7ff fdfb 	bl	80081b8 <memset>
 80085c2:	4b05      	ldr	r3, [pc, #20]	; (80085d8 <std+0x38>)
 80085c4:	6263      	str	r3, [r4, #36]	; 0x24
 80085c6:	4b05      	ldr	r3, [pc, #20]	; (80085dc <std+0x3c>)
 80085c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80085ca:	4b05      	ldr	r3, [pc, #20]	; (80085e0 <std+0x40>)
 80085cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80085ce:	4b05      	ldr	r3, [pc, #20]	; (80085e4 <std+0x44>)
 80085d0:	6224      	str	r4, [r4, #32]
 80085d2:	6323      	str	r3, [r4, #48]	; 0x30
 80085d4:	bd10      	pop	{r4, pc}
 80085d6:	bf00      	nop
 80085d8:	08008efd 	.word	0x08008efd
 80085dc:	08008f1f 	.word	0x08008f1f
 80085e0:	08008f57 	.word	0x08008f57
 80085e4:	08008f7b 	.word	0x08008f7b

080085e8 <_cleanup_r>:
 80085e8:	4901      	ldr	r1, [pc, #4]	; (80085f0 <_cleanup_r+0x8>)
 80085ea:	f000 b885 	b.w	80086f8 <_fwalk_reent>
 80085ee:	bf00      	nop
 80085f0:	0800854d 	.word	0x0800854d

080085f4 <__sfmoreglue>:
 80085f4:	b570      	push	{r4, r5, r6, lr}
 80085f6:	1e4a      	subs	r2, r1, #1
 80085f8:	2568      	movs	r5, #104	; 0x68
 80085fa:	4355      	muls	r5, r2
 80085fc:	460e      	mov	r6, r1
 80085fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008602:	f000 f949 	bl	8008898 <_malloc_r>
 8008606:	4604      	mov	r4, r0
 8008608:	b140      	cbz	r0, 800861c <__sfmoreglue+0x28>
 800860a:	2100      	movs	r1, #0
 800860c:	e9c0 1600 	strd	r1, r6, [r0]
 8008610:	300c      	adds	r0, #12
 8008612:	60a0      	str	r0, [r4, #8]
 8008614:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008618:	f7ff fdce 	bl	80081b8 <memset>
 800861c:	4620      	mov	r0, r4
 800861e:	bd70      	pop	{r4, r5, r6, pc}

08008620 <__sinit>:
 8008620:	6983      	ldr	r3, [r0, #24]
 8008622:	b510      	push	{r4, lr}
 8008624:	4604      	mov	r4, r0
 8008626:	bb33      	cbnz	r3, 8008676 <__sinit+0x56>
 8008628:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800862c:	6503      	str	r3, [r0, #80]	; 0x50
 800862e:	4b12      	ldr	r3, [pc, #72]	; (8008678 <__sinit+0x58>)
 8008630:	4a12      	ldr	r2, [pc, #72]	; (800867c <__sinit+0x5c>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	6282      	str	r2, [r0, #40]	; 0x28
 8008636:	4298      	cmp	r0, r3
 8008638:	bf04      	itt	eq
 800863a:	2301      	moveq	r3, #1
 800863c:	6183      	streq	r3, [r0, #24]
 800863e:	f000 f81f 	bl	8008680 <__sfp>
 8008642:	6060      	str	r0, [r4, #4]
 8008644:	4620      	mov	r0, r4
 8008646:	f000 f81b 	bl	8008680 <__sfp>
 800864a:	60a0      	str	r0, [r4, #8]
 800864c:	4620      	mov	r0, r4
 800864e:	f000 f817 	bl	8008680 <__sfp>
 8008652:	2200      	movs	r2, #0
 8008654:	60e0      	str	r0, [r4, #12]
 8008656:	2104      	movs	r1, #4
 8008658:	6860      	ldr	r0, [r4, #4]
 800865a:	f7ff ffa1 	bl	80085a0 <std>
 800865e:	2201      	movs	r2, #1
 8008660:	2109      	movs	r1, #9
 8008662:	68a0      	ldr	r0, [r4, #8]
 8008664:	f7ff ff9c 	bl	80085a0 <std>
 8008668:	2202      	movs	r2, #2
 800866a:	2112      	movs	r1, #18
 800866c:	68e0      	ldr	r0, [r4, #12]
 800866e:	f7ff ff97 	bl	80085a0 <std>
 8008672:	2301      	movs	r3, #1
 8008674:	61a3      	str	r3, [r4, #24]
 8008676:	bd10      	pop	{r4, pc}
 8008678:	08009360 	.word	0x08009360
 800867c:	080085e9 	.word	0x080085e9

08008680 <__sfp>:
 8008680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008682:	4b1b      	ldr	r3, [pc, #108]	; (80086f0 <__sfp+0x70>)
 8008684:	681e      	ldr	r6, [r3, #0]
 8008686:	69b3      	ldr	r3, [r6, #24]
 8008688:	4607      	mov	r7, r0
 800868a:	b913      	cbnz	r3, 8008692 <__sfp+0x12>
 800868c:	4630      	mov	r0, r6
 800868e:	f7ff ffc7 	bl	8008620 <__sinit>
 8008692:	3648      	adds	r6, #72	; 0x48
 8008694:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008698:	3b01      	subs	r3, #1
 800869a:	d503      	bpl.n	80086a4 <__sfp+0x24>
 800869c:	6833      	ldr	r3, [r6, #0]
 800869e:	b133      	cbz	r3, 80086ae <__sfp+0x2e>
 80086a0:	6836      	ldr	r6, [r6, #0]
 80086a2:	e7f7      	b.n	8008694 <__sfp+0x14>
 80086a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80086a8:	b16d      	cbz	r5, 80086c6 <__sfp+0x46>
 80086aa:	3468      	adds	r4, #104	; 0x68
 80086ac:	e7f4      	b.n	8008698 <__sfp+0x18>
 80086ae:	2104      	movs	r1, #4
 80086b0:	4638      	mov	r0, r7
 80086b2:	f7ff ff9f 	bl	80085f4 <__sfmoreglue>
 80086b6:	6030      	str	r0, [r6, #0]
 80086b8:	2800      	cmp	r0, #0
 80086ba:	d1f1      	bne.n	80086a0 <__sfp+0x20>
 80086bc:	230c      	movs	r3, #12
 80086be:	603b      	str	r3, [r7, #0]
 80086c0:	4604      	mov	r4, r0
 80086c2:	4620      	mov	r0, r4
 80086c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086c6:	4b0b      	ldr	r3, [pc, #44]	; (80086f4 <__sfp+0x74>)
 80086c8:	6665      	str	r5, [r4, #100]	; 0x64
 80086ca:	e9c4 5500 	strd	r5, r5, [r4]
 80086ce:	60a5      	str	r5, [r4, #8]
 80086d0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80086d4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80086d8:	2208      	movs	r2, #8
 80086da:	4629      	mov	r1, r5
 80086dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80086e0:	f7ff fd6a 	bl	80081b8 <memset>
 80086e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80086e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80086ec:	e7e9      	b.n	80086c2 <__sfp+0x42>
 80086ee:	bf00      	nop
 80086f0:	08009360 	.word	0x08009360
 80086f4:	ffff0001 	.word	0xffff0001

080086f8 <_fwalk_reent>:
 80086f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086fc:	4680      	mov	r8, r0
 80086fe:	4689      	mov	r9, r1
 8008700:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008704:	2600      	movs	r6, #0
 8008706:	b914      	cbnz	r4, 800870e <_fwalk_reent+0x16>
 8008708:	4630      	mov	r0, r6
 800870a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800870e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008712:	3f01      	subs	r7, #1
 8008714:	d501      	bpl.n	800871a <_fwalk_reent+0x22>
 8008716:	6824      	ldr	r4, [r4, #0]
 8008718:	e7f5      	b.n	8008706 <_fwalk_reent+0xe>
 800871a:	89ab      	ldrh	r3, [r5, #12]
 800871c:	2b01      	cmp	r3, #1
 800871e:	d907      	bls.n	8008730 <_fwalk_reent+0x38>
 8008720:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008724:	3301      	adds	r3, #1
 8008726:	d003      	beq.n	8008730 <_fwalk_reent+0x38>
 8008728:	4629      	mov	r1, r5
 800872a:	4640      	mov	r0, r8
 800872c:	47c8      	blx	r9
 800872e:	4306      	orrs	r6, r0
 8008730:	3568      	adds	r5, #104	; 0x68
 8008732:	e7ee      	b.n	8008712 <_fwalk_reent+0x1a>

08008734 <__swhatbuf_r>:
 8008734:	b570      	push	{r4, r5, r6, lr}
 8008736:	460e      	mov	r6, r1
 8008738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800873c:	2900      	cmp	r1, #0
 800873e:	b096      	sub	sp, #88	; 0x58
 8008740:	4614      	mov	r4, r2
 8008742:	461d      	mov	r5, r3
 8008744:	da07      	bge.n	8008756 <__swhatbuf_r+0x22>
 8008746:	2300      	movs	r3, #0
 8008748:	602b      	str	r3, [r5, #0]
 800874a:	89b3      	ldrh	r3, [r6, #12]
 800874c:	061a      	lsls	r2, r3, #24
 800874e:	d410      	bmi.n	8008772 <__swhatbuf_r+0x3e>
 8008750:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008754:	e00e      	b.n	8008774 <__swhatbuf_r+0x40>
 8008756:	466a      	mov	r2, sp
 8008758:	f000 fc36 	bl	8008fc8 <_fstat_r>
 800875c:	2800      	cmp	r0, #0
 800875e:	dbf2      	blt.n	8008746 <__swhatbuf_r+0x12>
 8008760:	9a01      	ldr	r2, [sp, #4]
 8008762:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008766:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800876a:	425a      	negs	r2, r3
 800876c:	415a      	adcs	r2, r3
 800876e:	602a      	str	r2, [r5, #0]
 8008770:	e7ee      	b.n	8008750 <__swhatbuf_r+0x1c>
 8008772:	2340      	movs	r3, #64	; 0x40
 8008774:	2000      	movs	r0, #0
 8008776:	6023      	str	r3, [r4, #0]
 8008778:	b016      	add	sp, #88	; 0x58
 800877a:	bd70      	pop	{r4, r5, r6, pc}

0800877c <__smakebuf_r>:
 800877c:	898b      	ldrh	r3, [r1, #12]
 800877e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008780:	079d      	lsls	r5, r3, #30
 8008782:	4606      	mov	r6, r0
 8008784:	460c      	mov	r4, r1
 8008786:	d507      	bpl.n	8008798 <__smakebuf_r+0x1c>
 8008788:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800878c:	6023      	str	r3, [r4, #0]
 800878e:	6123      	str	r3, [r4, #16]
 8008790:	2301      	movs	r3, #1
 8008792:	6163      	str	r3, [r4, #20]
 8008794:	b002      	add	sp, #8
 8008796:	bd70      	pop	{r4, r5, r6, pc}
 8008798:	ab01      	add	r3, sp, #4
 800879a:	466a      	mov	r2, sp
 800879c:	f7ff ffca 	bl	8008734 <__swhatbuf_r>
 80087a0:	9900      	ldr	r1, [sp, #0]
 80087a2:	4605      	mov	r5, r0
 80087a4:	4630      	mov	r0, r6
 80087a6:	f000 f877 	bl	8008898 <_malloc_r>
 80087aa:	b948      	cbnz	r0, 80087c0 <__smakebuf_r+0x44>
 80087ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087b0:	059a      	lsls	r2, r3, #22
 80087b2:	d4ef      	bmi.n	8008794 <__smakebuf_r+0x18>
 80087b4:	f023 0303 	bic.w	r3, r3, #3
 80087b8:	f043 0302 	orr.w	r3, r3, #2
 80087bc:	81a3      	strh	r3, [r4, #12]
 80087be:	e7e3      	b.n	8008788 <__smakebuf_r+0xc>
 80087c0:	4b0d      	ldr	r3, [pc, #52]	; (80087f8 <__smakebuf_r+0x7c>)
 80087c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80087c4:	89a3      	ldrh	r3, [r4, #12]
 80087c6:	6020      	str	r0, [r4, #0]
 80087c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087cc:	81a3      	strh	r3, [r4, #12]
 80087ce:	9b00      	ldr	r3, [sp, #0]
 80087d0:	6163      	str	r3, [r4, #20]
 80087d2:	9b01      	ldr	r3, [sp, #4]
 80087d4:	6120      	str	r0, [r4, #16]
 80087d6:	b15b      	cbz	r3, 80087f0 <__smakebuf_r+0x74>
 80087d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087dc:	4630      	mov	r0, r6
 80087de:	f000 fc05 	bl	8008fec <_isatty_r>
 80087e2:	b128      	cbz	r0, 80087f0 <__smakebuf_r+0x74>
 80087e4:	89a3      	ldrh	r3, [r4, #12]
 80087e6:	f023 0303 	bic.w	r3, r3, #3
 80087ea:	f043 0301 	orr.w	r3, r3, #1
 80087ee:	81a3      	strh	r3, [r4, #12]
 80087f0:	89a3      	ldrh	r3, [r4, #12]
 80087f2:	431d      	orrs	r5, r3
 80087f4:	81a5      	strh	r5, [r4, #12]
 80087f6:	e7cd      	b.n	8008794 <__smakebuf_r+0x18>
 80087f8:	080085e9 	.word	0x080085e9

080087fc <_free_r>:
 80087fc:	b538      	push	{r3, r4, r5, lr}
 80087fe:	4605      	mov	r5, r0
 8008800:	2900      	cmp	r1, #0
 8008802:	d045      	beq.n	8008890 <_free_r+0x94>
 8008804:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008808:	1f0c      	subs	r4, r1, #4
 800880a:	2b00      	cmp	r3, #0
 800880c:	bfb8      	it	lt
 800880e:	18e4      	addlt	r4, r4, r3
 8008810:	f000 fc0e 	bl	8009030 <__malloc_lock>
 8008814:	4a1f      	ldr	r2, [pc, #124]	; (8008894 <_free_r+0x98>)
 8008816:	6813      	ldr	r3, [r2, #0]
 8008818:	4610      	mov	r0, r2
 800881a:	b933      	cbnz	r3, 800882a <_free_r+0x2e>
 800881c:	6063      	str	r3, [r4, #4]
 800881e:	6014      	str	r4, [r2, #0]
 8008820:	4628      	mov	r0, r5
 8008822:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008826:	f000 bc04 	b.w	8009032 <__malloc_unlock>
 800882a:	42a3      	cmp	r3, r4
 800882c:	d90c      	bls.n	8008848 <_free_r+0x4c>
 800882e:	6821      	ldr	r1, [r4, #0]
 8008830:	1862      	adds	r2, r4, r1
 8008832:	4293      	cmp	r3, r2
 8008834:	bf04      	itt	eq
 8008836:	681a      	ldreq	r2, [r3, #0]
 8008838:	685b      	ldreq	r3, [r3, #4]
 800883a:	6063      	str	r3, [r4, #4]
 800883c:	bf04      	itt	eq
 800883e:	1852      	addeq	r2, r2, r1
 8008840:	6022      	streq	r2, [r4, #0]
 8008842:	6004      	str	r4, [r0, #0]
 8008844:	e7ec      	b.n	8008820 <_free_r+0x24>
 8008846:	4613      	mov	r3, r2
 8008848:	685a      	ldr	r2, [r3, #4]
 800884a:	b10a      	cbz	r2, 8008850 <_free_r+0x54>
 800884c:	42a2      	cmp	r2, r4
 800884e:	d9fa      	bls.n	8008846 <_free_r+0x4a>
 8008850:	6819      	ldr	r1, [r3, #0]
 8008852:	1858      	adds	r0, r3, r1
 8008854:	42a0      	cmp	r0, r4
 8008856:	d10b      	bne.n	8008870 <_free_r+0x74>
 8008858:	6820      	ldr	r0, [r4, #0]
 800885a:	4401      	add	r1, r0
 800885c:	1858      	adds	r0, r3, r1
 800885e:	4282      	cmp	r2, r0
 8008860:	6019      	str	r1, [r3, #0]
 8008862:	d1dd      	bne.n	8008820 <_free_r+0x24>
 8008864:	6810      	ldr	r0, [r2, #0]
 8008866:	6852      	ldr	r2, [r2, #4]
 8008868:	605a      	str	r2, [r3, #4]
 800886a:	4401      	add	r1, r0
 800886c:	6019      	str	r1, [r3, #0]
 800886e:	e7d7      	b.n	8008820 <_free_r+0x24>
 8008870:	d902      	bls.n	8008878 <_free_r+0x7c>
 8008872:	230c      	movs	r3, #12
 8008874:	602b      	str	r3, [r5, #0]
 8008876:	e7d3      	b.n	8008820 <_free_r+0x24>
 8008878:	6820      	ldr	r0, [r4, #0]
 800887a:	1821      	adds	r1, r4, r0
 800887c:	428a      	cmp	r2, r1
 800887e:	bf04      	itt	eq
 8008880:	6811      	ldreq	r1, [r2, #0]
 8008882:	6852      	ldreq	r2, [r2, #4]
 8008884:	6062      	str	r2, [r4, #4]
 8008886:	bf04      	itt	eq
 8008888:	1809      	addeq	r1, r1, r0
 800888a:	6021      	streq	r1, [r4, #0]
 800888c:	605c      	str	r4, [r3, #4]
 800888e:	e7c7      	b.n	8008820 <_free_r+0x24>
 8008890:	bd38      	pop	{r3, r4, r5, pc}
 8008892:	bf00      	nop
 8008894:	2000046c 	.word	0x2000046c

08008898 <_malloc_r>:
 8008898:	b570      	push	{r4, r5, r6, lr}
 800889a:	1ccd      	adds	r5, r1, #3
 800889c:	f025 0503 	bic.w	r5, r5, #3
 80088a0:	3508      	adds	r5, #8
 80088a2:	2d0c      	cmp	r5, #12
 80088a4:	bf38      	it	cc
 80088a6:	250c      	movcc	r5, #12
 80088a8:	2d00      	cmp	r5, #0
 80088aa:	4606      	mov	r6, r0
 80088ac:	db01      	blt.n	80088b2 <_malloc_r+0x1a>
 80088ae:	42a9      	cmp	r1, r5
 80088b0:	d903      	bls.n	80088ba <_malloc_r+0x22>
 80088b2:	230c      	movs	r3, #12
 80088b4:	6033      	str	r3, [r6, #0]
 80088b6:	2000      	movs	r0, #0
 80088b8:	bd70      	pop	{r4, r5, r6, pc}
 80088ba:	f000 fbb9 	bl	8009030 <__malloc_lock>
 80088be:	4a21      	ldr	r2, [pc, #132]	; (8008944 <_malloc_r+0xac>)
 80088c0:	6814      	ldr	r4, [r2, #0]
 80088c2:	4621      	mov	r1, r4
 80088c4:	b991      	cbnz	r1, 80088ec <_malloc_r+0x54>
 80088c6:	4c20      	ldr	r4, [pc, #128]	; (8008948 <_malloc_r+0xb0>)
 80088c8:	6823      	ldr	r3, [r4, #0]
 80088ca:	b91b      	cbnz	r3, 80088d4 <_malloc_r+0x3c>
 80088cc:	4630      	mov	r0, r6
 80088ce:	f000 fb05 	bl	8008edc <_sbrk_r>
 80088d2:	6020      	str	r0, [r4, #0]
 80088d4:	4629      	mov	r1, r5
 80088d6:	4630      	mov	r0, r6
 80088d8:	f000 fb00 	bl	8008edc <_sbrk_r>
 80088dc:	1c43      	adds	r3, r0, #1
 80088de:	d124      	bne.n	800892a <_malloc_r+0x92>
 80088e0:	230c      	movs	r3, #12
 80088e2:	6033      	str	r3, [r6, #0]
 80088e4:	4630      	mov	r0, r6
 80088e6:	f000 fba4 	bl	8009032 <__malloc_unlock>
 80088ea:	e7e4      	b.n	80088b6 <_malloc_r+0x1e>
 80088ec:	680b      	ldr	r3, [r1, #0]
 80088ee:	1b5b      	subs	r3, r3, r5
 80088f0:	d418      	bmi.n	8008924 <_malloc_r+0x8c>
 80088f2:	2b0b      	cmp	r3, #11
 80088f4:	d90f      	bls.n	8008916 <_malloc_r+0x7e>
 80088f6:	600b      	str	r3, [r1, #0]
 80088f8:	50cd      	str	r5, [r1, r3]
 80088fa:	18cc      	adds	r4, r1, r3
 80088fc:	4630      	mov	r0, r6
 80088fe:	f000 fb98 	bl	8009032 <__malloc_unlock>
 8008902:	f104 000b 	add.w	r0, r4, #11
 8008906:	1d23      	adds	r3, r4, #4
 8008908:	f020 0007 	bic.w	r0, r0, #7
 800890c:	1ac3      	subs	r3, r0, r3
 800890e:	d0d3      	beq.n	80088b8 <_malloc_r+0x20>
 8008910:	425a      	negs	r2, r3
 8008912:	50e2      	str	r2, [r4, r3]
 8008914:	e7d0      	b.n	80088b8 <_malloc_r+0x20>
 8008916:	428c      	cmp	r4, r1
 8008918:	684b      	ldr	r3, [r1, #4]
 800891a:	bf16      	itet	ne
 800891c:	6063      	strne	r3, [r4, #4]
 800891e:	6013      	streq	r3, [r2, #0]
 8008920:	460c      	movne	r4, r1
 8008922:	e7eb      	b.n	80088fc <_malloc_r+0x64>
 8008924:	460c      	mov	r4, r1
 8008926:	6849      	ldr	r1, [r1, #4]
 8008928:	e7cc      	b.n	80088c4 <_malloc_r+0x2c>
 800892a:	1cc4      	adds	r4, r0, #3
 800892c:	f024 0403 	bic.w	r4, r4, #3
 8008930:	42a0      	cmp	r0, r4
 8008932:	d005      	beq.n	8008940 <_malloc_r+0xa8>
 8008934:	1a21      	subs	r1, r4, r0
 8008936:	4630      	mov	r0, r6
 8008938:	f000 fad0 	bl	8008edc <_sbrk_r>
 800893c:	3001      	adds	r0, #1
 800893e:	d0cf      	beq.n	80088e0 <_malloc_r+0x48>
 8008940:	6025      	str	r5, [r4, #0]
 8008942:	e7db      	b.n	80088fc <_malloc_r+0x64>
 8008944:	2000046c 	.word	0x2000046c
 8008948:	20000470 	.word	0x20000470

0800894c <__sfputc_r>:
 800894c:	6893      	ldr	r3, [r2, #8]
 800894e:	3b01      	subs	r3, #1
 8008950:	2b00      	cmp	r3, #0
 8008952:	b410      	push	{r4}
 8008954:	6093      	str	r3, [r2, #8]
 8008956:	da08      	bge.n	800896a <__sfputc_r+0x1e>
 8008958:	6994      	ldr	r4, [r2, #24]
 800895a:	42a3      	cmp	r3, r4
 800895c:	db01      	blt.n	8008962 <__sfputc_r+0x16>
 800895e:	290a      	cmp	r1, #10
 8008960:	d103      	bne.n	800896a <__sfputc_r+0x1e>
 8008962:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008966:	f7ff bcab 	b.w	80082c0 <__swbuf_r>
 800896a:	6813      	ldr	r3, [r2, #0]
 800896c:	1c58      	adds	r0, r3, #1
 800896e:	6010      	str	r0, [r2, #0]
 8008970:	7019      	strb	r1, [r3, #0]
 8008972:	4608      	mov	r0, r1
 8008974:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008978:	4770      	bx	lr

0800897a <__sfputs_r>:
 800897a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800897c:	4606      	mov	r6, r0
 800897e:	460f      	mov	r7, r1
 8008980:	4614      	mov	r4, r2
 8008982:	18d5      	adds	r5, r2, r3
 8008984:	42ac      	cmp	r4, r5
 8008986:	d101      	bne.n	800898c <__sfputs_r+0x12>
 8008988:	2000      	movs	r0, #0
 800898a:	e007      	b.n	800899c <__sfputs_r+0x22>
 800898c:	463a      	mov	r2, r7
 800898e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008992:	4630      	mov	r0, r6
 8008994:	f7ff ffda 	bl	800894c <__sfputc_r>
 8008998:	1c43      	adds	r3, r0, #1
 800899a:	d1f3      	bne.n	8008984 <__sfputs_r+0xa>
 800899c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080089a0 <_vfiprintf_r>:
 80089a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a4:	460c      	mov	r4, r1
 80089a6:	b09d      	sub	sp, #116	; 0x74
 80089a8:	4617      	mov	r7, r2
 80089aa:	461d      	mov	r5, r3
 80089ac:	4606      	mov	r6, r0
 80089ae:	b118      	cbz	r0, 80089b8 <_vfiprintf_r+0x18>
 80089b0:	6983      	ldr	r3, [r0, #24]
 80089b2:	b90b      	cbnz	r3, 80089b8 <_vfiprintf_r+0x18>
 80089b4:	f7ff fe34 	bl	8008620 <__sinit>
 80089b8:	4b7c      	ldr	r3, [pc, #496]	; (8008bac <_vfiprintf_r+0x20c>)
 80089ba:	429c      	cmp	r4, r3
 80089bc:	d158      	bne.n	8008a70 <_vfiprintf_r+0xd0>
 80089be:	6874      	ldr	r4, [r6, #4]
 80089c0:	89a3      	ldrh	r3, [r4, #12]
 80089c2:	0718      	lsls	r0, r3, #28
 80089c4:	d55e      	bpl.n	8008a84 <_vfiprintf_r+0xe4>
 80089c6:	6923      	ldr	r3, [r4, #16]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d05b      	beq.n	8008a84 <_vfiprintf_r+0xe4>
 80089cc:	2300      	movs	r3, #0
 80089ce:	9309      	str	r3, [sp, #36]	; 0x24
 80089d0:	2320      	movs	r3, #32
 80089d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089d6:	2330      	movs	r3, #48	; 0x30
 80089d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089dc:	9503      	str	r5, [sp, #12]
 80089de:	f04f 0b01 	mov.w	fp, #1
 80089e2:	46b8      	mov	r8, r7
 80089e4:	4645      	mov	r5, r8
 80089e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80089ea:	b10b      	cbz	r3, 80089f0 <_vfiprintf_r+0x50>
 80089ec:	2b25      	cmp	r3, #37	; 0x25
 80089ee:	d154      	bne.n	8008a9a <_vfiprintf_r+0xfa>
 80089f0:	ebb8 0a07 	subs.w	sl, r8, r7
 80089f4:	d00b      	beq.n	8008a0e <_vfiprintf_r+0x6e>
 80089f6:	4653      	mov	r3, sl
 80089f8:	463a      	mov	r2, r7
 80089fa:	4621      	mov	r1, r4
 80089fc:	4630      	mov	r0, r6
 80089fe:	f7ff ffbc 	bl	800897a <__sfputs_r>
 8008a02:	3001      	adds	r0, #1
 8008a04:	f000 80c2 	beq.w	8008b8c <_vfiprintf_r+0x1ec>
 8008a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a0a:	4453      	add	r3, sl
 8008a0c:	9309      	str	r3, [sp, #36]	; 0x24
 8008a0e:	f898 3000 	ldrb.w	r3, [r8]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	f000 80ba 	beq.w	8008b8c <_vfiprintf_r+0x1ec>
 8008a18:	2300      	movs	r3, #0
 8008a1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a22:	9304      	str	r3, [sp, #16]
 8008a24:	9307      	str	r3, [sp, #28]
 8008a26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a2a:	931a      	str	r3, [sp, #104]	; 0x68
 8008a2c:	46a8      	mov	r8, r5
 8008a2e:	2205      	movs	r2, #5
 8008a30:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008a34:	485e      	ldr	r0, [pc, #376]	; (8008bb0 <_vfiprintf_r+0x210>)
 8008a36:	f7f7 fbf3 	bl	8000220 <memchr>
 8008a3a:	9b04      	ldr	r3, [sp, #16]
 8008a3c:	bb78      	cbnz	r0, 8008a9e <_vfiprintf_r+0xfe>
 8008a3e:	06d9      	lsls	r1, r3, #27
 8008a40:	bf44      	itt	mi
 8008a42:	2220      	movmi	r2, #32
 8008a44:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008a48:	071a      	lsls	r2, r3, #28
 8008a4a:	bf44      	itt	mi
 8008a4c:	222b      	movmi	r2, #43	; 0x2b
 8008a4e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008a52:	782a      	ldrb	r2, [r5, #0]
 8008a54:	2a2a      	cmp	r2, #42	; 0x2a
 8008a56:	d02a      	beq.n	8008aae <_vfiprintf_r+0x10e>
 8008a58:	9a07      	ldr	r2, [sp, #28]
 8008a5a:	46a8      	mov	r8, r5
 8008a5c:	2000      	movs	r0, #0
 8008a5e:	250a      	movs	r5, #10
 8008a60:	4641      	mov	r1, r8
 8008a62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a66:	3b30      	subs	r3, #48	; 0x30
 8008a68:	2b09      	cmp	r3, #9
 8008a6a:	d969      	bls.n	8008b40 <_vfiprintf_r+0x1a0>
 8008a6c:	b360      	cbz	r0, 8008ac8 <_vfiprintf_r+0x128>
 8008a6e:	e024      	b.n	8008aba <_vfiprintf_r+0x11a>
 8008a70:	4b50      	ldr	r3, [pc, #320]	; (8008bb4 <_vfiprintf_r+0x214>)
 8008a72:	429c      	cmp	r4, r3
 8008a74:	d101      	bne.n	8008a7a <_vfiprintf_r+0xda>
 8008a76:	68b4      	ldr	r4, [r6, #8]
 8008a78:	e7a2      	b.n	80089c0 <_vfiprintf_r+0x20>
 8008a7a:	4b4f      	ldr	r3, [pc, #316]	; (8008bb8 <_vfiprintf_r+0x218>)
 8008a7c:	429c      	cmp	r4, r3
 8008a7e:	bf08      	it	eq
 8008a80:	68f4      	ldreq	r4, [r6, #12]
 8008a82:	e79d      	b.n	80089c0 <_vfiprintf_r+0x20>
 8008a84:	4621      	mov	r1, r4
 8008a86:	4630      	mov	r0, r6
 8008a88:	f7ff fc6c 	bl	8008364 <__swsetup_r>
 8008a8c:	2800      	cmp	r0, #0
 8008a8e:	d09d      	beq.n	80089cc <_vfiprintf_r+0x2c>
 8008a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a94:	b01d      	add	sp, #116	; 0x74
 8008a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a9a:	46a8      	mov	r8, r5
 8008a9c:	e7a2      	b.n	80089e4 <_vfiprintf_r+0x44>
 8008a9e:	4a44      	ldr	r2, [pc, #272]	; (8008bb0 <_vfiprintf_r+0x210>)
 8008aa0:	1a80      	subs	r0, r0, r2
 8008aa2:	fa0b f000 	lsl.w	r0, fp, r0
 8008aa6:	4318      	orrs	r0, r3
 8008aa8:	9004      	str	r0, [sp, #16]
 8008aaa:	4645      	mov	r5, r8
 8008aac:	e7be      	b.n	8008a2c <_vfiprintf_r+0x8c>
 8008aae:	9a03      	ldr	r2, [sp, #12]
 8008ab0:	1d11      	adds	r1, r2, #4
 8008ab2:	6812      	ldr	r2, [r2, #0]
 8008ab4:	9103      	str	r1, [sp, #12]
 8008ab6:	2a00      	cmp	r2, #0
 8008ab8:	db01      	blt.n	8008abe <_vfiprintf_r+0x11e>
 8008aba:	9207      	str	r2, [sp, #28]
 8008abc:	e004      	b.n	8008ac8 <_vfiprintf_r+0x128>
 8008abe:	4252      	negs	r2, r2
 8008ac0:	f043 0302 	orr.w	r3, r3, #2
 8008ac4:	9207      	str	r2, [sp, #28]
 8008ac6:	9304      	str	r3, [sp, #16]
 8008ac8:	f898 3000 	ldrb.w	r3, [r8]
 8008acc:	2b2e      	cmp	r3, #46	; 0x2e
 8008ace:	d10e      	bne.n	8008aee <_vfiprintf_r+0x14e>
 8008ad0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008ad4:	2b2a      	cmp	r3, #42	; 0x2a
 8008ad6:	d138      	bne.n	8008b4a <_vfiprintf_r+0x1aa>
 8008ad8:	9b03      	ldr	r3, [sp, #12]
 8008ada:	1d1a      	adds	r2, r3, #4
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	9203      	str	r2, [sp, #12]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	bfb8      	it	lt
 8008ae4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008ae8:	f108 0802 	add.w	r8, r8, #2
 8008aec:	9305      	str	r3, [sp, #20]
 8008aee:	4d33      	ldr	r5, [pc, #204]	; (8008bbc <_vfiprintf_r+0x21c>)
 8008af0:	f898 1000 	ldrb.w	r1, [r8]
 8008af4:	2203      	movs	r2, #3
 8008af6:	4628      	mov	r0, r5
 8008af8:	f7f7 fb92 	bl	8000220 <memchr>
 8008afc:	b140      	cbz	r0, 8008b10 <_vfiprintf_r+0x170>
 8008afe:	2340      	movs	r3, #64	; 0x40
 8008b00:	1b40      	subs	r0, r0, r5
 8008b02:	fa03 f000 	lsl.w	r0, r3, r0
 8008b06:	9b04      	ldr	r3, [sp, #16]
 8008b08:	4303      	orrs	r3, r0
 8008b0a:	f108 0801 	add.w	r8, r8, #1
 8008b0e:	9304      	str	r3, [sp, #16]
 8008b10:	f898 1000 	ldrb.w	r1, [r8]
 8008b14:	482a      	ldr	r0, [pc, #168]	; (8008bc0 <_vfiprintf_r+0x220>)
 8008b16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b1a:	2206      	movs	r2, #6
 8008b1c:	f108 0701 	add.w	r7, r8, #1
 8008b20:	f7f7 fb7e 	bl	8000220 <memchr>
 8008b24:	2800      	cmp	r0, #0
 8008b26:	d037      	beq.n	8008b98 <_vfiprintf_r+0x1f8>
 8008b28:	4b26      	ldr	r3, [pc, #152]	; (8008bc4 <_vfiprintf_r+0x224>)
 8008b2a:	bb1b      	cbnz	r3, 8008b74 <_vfiprintf_r+0x1d4>
 8008b2c:	9b03      	ldr	r3, [sp, #12]
 8008b2e:	3307      	adds	r3, #7
 8008b30:	f023 0307 	bic.w	r3, r3, #7
 8008b34:	3308      	adds	r3, #8
 8008b36:	9303      	str	r3, [sp, #12]
 8008b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b3a:	444b      	add	r3, r9
 8008b3c:	9309      	str	r3, [sp, #36]	; 0x24
 8008b3e:	e750      	b.n	80089e2 <_vfiprintf_r+0x42>
 8008b40:	fb05 3202 	mla	r2, r5, r2, r3
 8008b44:	2001      	movs	r0, #1
 8008b46:	4688      	mov	r8, r1
 8008b48:	e78a      	b.n	8008a60 <_vfiprintf_r+0xc0>
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	f108 0801 	add.w	r8, r8, #1
 8008b50:	9305      	str	r3, [sp, #20]
 8008b52:	4619      	mov	r1, r3
 8008b54:	250a      	movs	r5, #10
 8008b56:	4640      	mov	r0, r8
 8008b58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b5c:	3a30      	subs	r2, #48	; 0x30
 8008b5e:	2a09      	cmp	r2, #9
 8008b60:	d903      	bls.n	8008b6a <_vfiprintf_r+0x1ca>
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d0c3      	beq.n	8008aee <_vfiprintf_r+0x14e>
 8008b66:	9105      	str	r1, [sp, #20]
 8008b68:	e7c1      	b.n	8008aee <_vfiprintf_r+0x14e>
 8008b6a:	fb05 2101 	mla	r1, r5, r1, r2
 8008b6e:	2301      	movs	r3, #1
 8008b70:	4680      	mov	r8, r0
 8008b72:	e7f0      	b.n	8008b56 <_vfiprintf_r+0x1b6>
 8008b74:	ab03      	add	r3, sp, #12
 8008b76:	9300      	str	r3, [sp, #0]
 8008b78:	4622      	mov	r2, r4
 8008b7a:	4b13      	ldr	r3, [pc, #76]	; (8008bc8 <_vfiprintf_r+0x228>)
 8008b7c:	a904      	add	r1, sp, #16
 8008b7e:	4630      	mov	r0, r6
 8008b80:	f3af 8000 	nop.w
 8008b84:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008b88:	4681      	mov	r9, r0
 8008b8a:	d1d5      	bne.n	8008b38 <_vfiprintf_r+0x198>
 8008b8c:	89a3      	ldrh	r3, [r4, #12]
 8008b8e:	065b      	lsls	r3, r3, #25
 8008b90:	f53f af7e 	bmi.w	8008a90 <_vfiprintf_r+0xf0>
 8008b94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b96:	e77d      	b.n	8008a94 <_vfiprintf_r+0xf4>
 8008b98:	ab03      	add	r3, sp, #12
 8008b9a:	9300      	str	r3, [sp, #0]
 8008b9c:	4622      	mov	r2, r4
 8008b9e:	4b0a      	ldr	r3, [pc, #40]	; (8008bc8 <_vfiprintf_r+0x228>)
 8008ba0:	a904      	add	r1, sp, #16
 8008ba2:	4630      	mov	r0, r6
 8008ba4:	f000 f888 	bl	8008cb8 <_printf_i>
 8008ba8:	e7ec      	b.n	8008b84 <_vfiprintf_r+0x1e4>
 8008baa:	bf00      	nop
 8008bac:	08009384 	.word	0x08009384
 8008bb0:	080093c4 	.word	0x080093c4
 8008bb4:	080093a4 	.word	0x080093a4
 8008bb8:	08009364 	.word	0x08009364
 8008bbc:	080093ca 	.word	0x080093ca
 8008bc0:	080093ce 	.word	0x080093ce
 8008bc4:	00000000 	.word	0x00000000
 8008bc8:	0800897b 	.word	0x0800897b

08008bcc <_printf_common>:
 8008bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bd0:	4691      	mov	r9, r2
 8008bd2:	461f      	mov	r7, r3
 8008bd4:	688a      	ldr	r2, [r1, #8]
 8008bd6:	690b      	ldr	r3, [r1, #16]
 8008bd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	bfb8      	it	lt
 8008be0:	4613      	movlt	r3, r2
 8008be2:	f8c9 3000 	str.w	r3, [r9]
 8008be6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008bea:	4606      	mov	r6, r0
 8008bec:	460c      	mov	r4, r1
 8008bee:	b112      	cbz	r2, 8008bf6 <_printf_common+0x2a>
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	f8c9 3000 	str.w	r3, [r9]
 8008bf6:	6823      	ldr	r3, [r4, #0]
 8008bf8:	0699      	lsls	r1, r3, #26
 8008bfa:	bf42      	ittt	mi
 8008bfc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008c00:	3302      	addmi	r3, #2
 8008c02:	f8c9 3000 	strmi.w	r3, [r9]
 8008c06:	6825      	ldr	r5, [r4, #0]
 8008c08:	f015 0506 	ands.w	r5, r5, #6
 8008c0c:	d107      	bne.n	8008c1e <_printf_common+0x52>
 8008c0e:	f104 0a19 	add.w	sl, r4, #25
 8008c12:	68e3      	ldr	r3, [r4, #12]
 8008c14:	f8d9 2000 	ldr.w	r2, [r9]
 8008c18:	1a9b      	subs	r3, r3, r2
 8008c1a:	42ab      	cmp	r3, r5
 8008c1c:	dc28      	bgt.n	8008c70 <_printf_common+0xa4>
 8008c1e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008c22:	6822      	ldr	r2, [r4, #0]
 8008c24:	3300      	adds	r3, #0
 8008c26:	bf18      	it	ne
 8008c28:	2301      	movne	r3, #1
 8008c2a:	0692      	lsls	r2, r2, #26
 8008c2c:	d42d      	bmi.n	8008c8a <_printf_common+0xbe>
 8008c2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c32:	4639      	mov	r1, r7
 8008c34:	4630      	mov	r0, r6
 8008c36:	47c0      	blx	r8
 8008c38:	3001      	adds	r0, #1
 8008c3a:	d020      	beq.n	8008c7e <_printf_common+0xb2>
 8008c3c:	6823      	ldr	r3, [r4, #0]
 8008c3e:	68e5      	ldr	r5, [r4, #12]
 8008c40:	f8d9 2000 	ldr.w	r2, [r9]
 8008c44:	f003 0306 	and.w	r3, r3, #6
 8008c48:	2b04      	cmp	r3, #4
 8008c4a:	bf08      	it	eq
 8008c4c:	1aad      	subeq	r5, r5, r2
 8008c4e:	68a3      	ldr	r3, [r4, #8]
 8008c50:	6922      	ldr	r2, [r4, #16]
 8008c52:	bf0c      	ite	eq
 8008c54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c58:	2500      	movne	r5, #0
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	bfc4      	itt	gt
 8008c5e:	1a9b      	subgt	r3, r3, r2
 8008c60:	18ed      	addgt	r5, r5, r3
 8008c62:	f04f 0900 	mov.w	r9, #0
 8008c66:	341a      	adds	r4, #26
 8008c68:	454d      	cmp	r5, r9
 8008c6a:	d11a      	bne.n	8008ca2 <_printf_common+0xd6>
 8008c6c:	2000      	movs	r0, #0
 8008c6e:	e008      	b.n	8008c82 <_printf_common+0xb6>
 8008c70:	2301      	movs	r3, #1
 8008c72:	4652      	mov	r2, sl
 8008c74:	4639      	mov	r1, r7
 8008c76:	4630      	mov	r0, r6
 8008c78:	47c0      	blx	r8
 8008c7a:	3001      	adds	r0, #1
 8008c7c:	d103      	bne.n	8008c86 <_printf_common+0xba>
 8008c7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c86:	3501      	adds	r5, #1
 8008c88:	e7c3      	b.n	8008c12 <_printf_common+0x46>
 8008c8a:	18e1      	adds	r1, r4, r3
 8008c8c:	1c5a      	adds	r2, r3, #1
 8008c8e:	2030      	movs	r0, #48	; 0x30
 8008c90:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c94:	4422      	add	r2, r4
 8008c96:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c9e:	3302      	adds	r3, #2
 8008ca0:	e7c5      	b.n	8008c2e <_printf_common+0x62>
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	4622      	mov	r2, r4
 8008ca6:	4639      	mov	r1, r7
 8008ca8:	4630      	mov	r0, r6
 8008caa:	47c0      	blx	r8
 8008cac:	3001      	adds	r0, #1
 8008cae:	d0e6      	beq.n	8008c7e <_printf_common+0xb2>
 8008cb0:	f109 0901 	add.w	r9, r9, #1
 8008cb4:	e7d8      	b.n	8008c68 <_printf_common+0x9c>
	...

08008cb8 <_printf_i>:
 8008cb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008cbc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008cc0:	460c      	mov	r4, r1
 8008cc2:	7e09      	ldrb	r1, [r1, #24]
 8008cc4:	b085      	sub	sp, #20
 8008cc6:	296e      	cmp	r1, #110	; 0x6e
 8008cc8:	4617      	mov	r7, r2
 8008cca:	4606      	mov	r6, r0
 8008ccc:	4698      	mov	r8, r3
 8008cce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008cd0:	f000 80b3 	beq.w	8008e3a <_printf_i+0x182>
 8008cd4:	d822      	bhi.n	8008d1c <_printf_i+0x64>
 8008cd6:	2963      	cmp	r1, #99	; 0x63
 8008cd8:	d036      	beq.n	8008d48 <_printf_i+0x90>
 8008cda:	d80a      	bhi.n	8008cf2 <_printf_i+0x3a>
 8008cdc:	2900      	cmp	r1, #0
 8008cde:	f000 80b9 	beq.w	8008e54 <_printf_i+0x19c>
 8008ce2:	2958      	cmp	r1, #88	; 0x58
 8008ce4:	f000 8083 	beq.w	8008dee <_printf_i+0x136>
 8008ce8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008cf0:	e032      	b.n	8008d58 <_printf_i+0xa0>
 8008cf2:	2964      	cmp	r1, #100	; 0x64
 8008cf4:	d001      	beq.n	8008cfa <_printf_i+0x42>
 8008cf6:	2969      	cmp	r1, #105	; 0x69
 8008cf8:	d1f6      	bne.n	8008ce8 <_printf_i+0x30>
 8008cfa:	6820      	ldr	r0, [r4, #0]
 8008cfc:	6813      	ldr	r3, [r2, #0]
 8008cfe:	0605      	lsls	r5, r0, #24
 8008d00:	f103 0104 	add.w	r1, r3, #4
 8008d04:	d52a      	bpl.n	8008d5c <_printf_i+0xa4>
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	6011      	str	r1, [r2, #0]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	da03      	bge.n	8008d16 <_printf_i+0x5e>
 8008d0e:	222d      	movs	r2, #45	; 0x2d
 8008d10:	425b      	negs	r3, r3
 8008d12:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008d16:	486f      	ldr	r0, [pc, #444]	; (8008ed4 <_printf_i+0x21c>)
 8008d18:	220a      	movs	r2, #10
 8008d1a:	e039      	b.n	8008d90 <_printf_i+0xd8>
 8008d1c:	2973      	cmp	r1, #115	; 0x73
 8008d1e:	f000 809d 	beq.w	8008e5c <_printf_i+0x1a4>
 8008d22:	d808      	bhi.n	8008d36 <_printf_i+0x7e>
 8008d24:	296f      	cmp	r1, #111	; 0x6f
 8008d26:	d020      	beq.n	8008d6a <_printf_i+0xb2>
 8008d28:	2970      	cmp	r1, #112	; 0x70
 8008d2a:	d1dd      	bne.n	8008ce8 <_printf_i+0x30>
 8008d2c:	6823      	ldr	r3, [r4, #0]
 8008d2e:	f043 0320 	orr.w	r3, r3, #32
 8008d32:	6023      	str	r3, [r4, #0]
 8008d34:	e003      	b.n	8008d3e <_printf_i+0x86>
 8008d36:	2975      	cmp	r1, #117	; 0x75
 8008d38:	d017      	beq.n	8008d6a <_printf_i+0xb2>
 8008d3a:	2978      	cmp	r1, #120	; 0x78
 8008d3c:	d1d4      	bne.n	8008ce8 <_printf_i+0x30>
 8008d3e:	2378      	movs	r3, #120	; 0x78
 8008d40:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d44:	4864      	ldr	r0, [pc, #400]	; (8008ed8 <_printf_i+0x220>)
 8008d46:	e055      	b.n	8008df4 <_printf_i+0x13c>
 8008d48:	6813      	ldr	r3, [r2, #0]
 8008d4a:	1d19      	adds	r1, r3, #4
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	6011      	str	r1, [r2, #0]
 8008d50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d58:	2301      	movs	r3, #1
 8008d5a:	e08c      	b.n	8008e76 <_printf_i+0x1be>
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	6011      	str	r1, [r2, #0]
 8008d60:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008d64:	bf18      	it	ne
 8008d66:	b21b      	sxthne	r3, r3
 8008d68:	e7cf      	b.n	8008d0a <_printf_i+0x52>
 8008d6a:	6813      	ldr	r3, [r2, #0]
 8008d6c:	6825      	ldr	r5, [r4, #0]
 8008d6e:	1d18      	adds	r0, r3, #4
 8008d70:	6010      	str	r0, [r2, #0]
 8008d72:	0628      	lsls	r0, r5, #24
 8008d74:	d501      	bpl.n	8008d7a <_printf_i+0xc2>
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	e002      	b.n	8008d80 <_printf_i+0xc8>
 8008d7a:	0668      	lsls	r0, r5, #25
 8008d7c:	d5fb      	bpl.n	8008d76 <_printf_i+0xbe>
 8008d7e:	881b      	ldrh	r3, [r3, #0]
 8008d80:	4854      	ldr	r0, [pc, #336]	; (8008ed4 <_printf_i+0x21c>)
 8008d82:	296f      	cmp	r1, #111	; 0x6f
 8008d84:	bf14      	ite	ne
 8008d86:	220a      	movne	r2, #10
 8008d88:	2208      	moveq	r2, #8
 8008d8a:	2100      	movs	r1, #0
 8008d8c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d90:	6865      	ldr	r5, [r4, #4]
 8008d92:	60a5      	str	r5, [r4, #8]
 8008d94:	2d00      	cmp	r5, #0
 8008d96:	f2c0 8095 	blt.w	8008ec4 <_printf_i+0x20c>
 8008d9a:	6821      	ldr	r1, [r4, #0]
 8008d9c:	f021 0104 	bic.w	r1, r1, #4
 8008da0:	6021      	str	r1, [r4, #0]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d13d      	bne.n	8008e22 <_printf_i+0x16a>
 8008da6:	2d00      	cmp	r5, #0
 8008da8:	f040 808e 	bne.w	8008ec8 <_printf_i+0x210>
 8008dac:	4665      	mov	r5, ip
 8008dae:	2a08      	cmp	r2, #8
 8008db0:	d10b      	bne.n	8008dca <_printf_i+0x112>
 8008db2:	6823      	ldr	r3, [r4, #0]
 8008db4:	07db      	lsls	r3, r3, #31
 8008db6:	d508      	bpl.n	8008dca <_printf_i+0x112>
 8008db8:	6923      	ldr	r3, [r4, #16]
 8008dba:	6862      	ldr	r2, [r4, #4]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	bfde      	ittt	le
 8008dc0:	2330      	movle	r3, #48	; 0x30
 8008dc2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008dc6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008dca:	ebac 0305 	sub.w	r3, ip, r5
 8008dce:	6123      	str	r3, [r4, #16]
 8008dd0:	f8cd 8000 	str.w	r8, [sp]
 8008dd4:	463b      	mov	r3, r7
 8008dd6:	aa03      	add	r2, sp, #12
 8008dd8:	4621      	mov	r1, r4
 8008dda:	4630      	mov	r0, r6
 8008ddc:	f7ff fef6 	bl	8008bcc <_printf_common>
 8008de0:	3001      	adds	r0, #1
 8008de2:	d14d      	bne.n	8008e80 <_printf_i+0x1c8>
 8008de4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008de8:	b005      	add	sp, #20
 8008dea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008dee:	4839      	ldr	r0, [pc, #228]	; (8008ed4 <_printf_i+0x21c>)
 8008df0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008df4:	6813      	ldr	r3, [r2, #0]
 8008df6:	6821      	ldr	r1, [r4, #0]
 8008df8:	1d1d      	adds	r5, r3, #4
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	6015      	str	r5, [r2, #0]
 8008dfe:	060a      	lsls	r2, r1, #24
 8008e00:	d50b      	bpl.n	8008e1a <_printf_i+0x162>
 8008e02:	07ca      	lsls	r2, r1, #31
 8008e04:	bf44      	itt	mi
 8008e06:	f041 0120 	orrmi.w	r1, r1, #32
 8008e0a:	6021      	strmi	r1, [r4, #0]
 8008e0c:	b91b      	cbnz	r3, 8008e16 <_printf_i+0x15e>
 8008e0e:	6822      	ldr	r2, [r4, #0]
 8008e10:	f022 0220 	bic.w	r2, r2, #32
 8008e14:	6022      	str	r2, [r4, #0]
 8008e16:	2210      	movs	r2, #16
 8008e18:	e7b7      	b.n	8008d8a <_printf_i+0xd2>
 8008e1a:	064d      	lsls	r5, r1, #25
 8008e1c:	bf48      	it	mi
 8008e1e:	b29b      	uxthmi	r3, r3
 8008e20:	e7ef      	b.n	8008e02 <_printf_i+0x14a>
 8008e22:	4665      	mov	r5, ip
 8008e24:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e28:	fb02 3311 	mls	r3, r2, r1, r3
 8008e2c:	5cc3      	ldrb	r3, [r0, r3]
 8008e2e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008e32:	460b      	mov	r3, r1
 8008e34:	2900      	cmp	r1, #0
 8008e36:	d1f5      	bne.n	8008e24 <_printf_i+0x16c>
 8008e38:	e7b9      	b.n	8008dae <_printf_i+0xf6>
 8008e3a:	6813      	ldr	r3, [r2, #0]
 8008e3c:	6825      	ldr	r5, [r4, #0]
 8008e3e:	6961      	ldr	r1, [r4, #20]
 8008e40:	1d18      	adds	r0, r3, #4
 8008e42:	6010      	str	r0, [r2, #0]
 8008e44:	0628      	lsls	r0, r5, #24
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	d501      	bpl.n	8008e4e <_printf_i+0x196>
 8008e4a:	6019      	str	r1, [r3, #0]
 8008e4c:	e002      	b.n	8008e54 <_printf_i+0x19c>
 8008e4e:	066a      	lsls	r2, r5, #25
 8008e50:	d5fb      	bpl.n	8008e4a <_printf_i+0x192>
 8008e52:	8019      	strh	r1, [r3, #0]
 8008e54:	2300      	movs	r3, #0
 8008e56:	6123      	str	r3, [r4, #16]
 8008e58:	4665      	mov	r5, ip
 8008e5a:	e7b9      	b.n	8008dd0 <_printf_i+0x118>
 8008e5c:	6813      	ldr	r3, [r2, #0]
 8008e5e:	1d19      	adds	r1, r3, #4
 8008e60:	6011      	str	r1, [r2, #0]
 8008e62:	681d      	ldr	r5, [r3, #0]
 8008e64:	6862      	ldr	r2, [r4, #4]
 8008e66:	2100      	movs	r1, #0
 8008e68:	4628      	mov	r0, r5
 8008e6a:	f7f7 f9d9 	bl	8000220 <memchr>
 8008e6e:	b108      	cbz	r0, 8008e74 <_printf_i+0x1bc>
 8008e70:	1b40      	subs	r0, r0, r5
 8008e72:	6060      	str	r0, [r4, #4]
 8008e74:	6863      	ldr	r3, [r4, #4]
 8008e76:	6123      	str	r3, [r4, #16]
 8008e78:	2300      	movs	r3, #0
 8008e7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e7e:	e7a7      	b.n	8008dd0 <_printf_i+0x118>
 8008e80:	6923      	ldr	r3, [r4, #16]
 8008e82:	462a      	mov	r2, r5
 8008e84:	4639      	mov	r1, r7
 8008e86:	4630      	mov	r0, r6
 8008e88:	47c0      	blx	r8
 8008e8a:	3001      	adds	r0, #1
 8008e8c:	d0aa      	beq.n	8008de4 <_printf_i+0x12c>
 8008e8e:	6823      	ldr	r3, [r4, #0]
 8008e90:	079b      	lsls	r3, r3, #30
 8008e92:	d413      	bmi.n	8008ebc <_printf_i+0x204>
 8008e94:	68e0      	ldr	r0, [r4, #12]
 8008e96:	9b03      	ldr	r3, [sp, #12]
 8008e98:	4298      	cmp	r0, r3
 8008e9a:	bfb8      	it	lt
 8008e9c:	4618      	movlt	r0, r3
 8008e9e:	e7a3      	b.n	8008de8 <_printf_i+0x130>
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	464a      	mov	r2, r9
 8008ea4:	4639      	mov	r1, r7
 8008ea6:	4630      	mov	r0, r6
 8008ea8:	47c0      	blx	r8
 8008eaa:	3001      	adds	r0, #1
 8008eac:	d09a      	beq.n	8008de4 <_printf_i+0x12c>
 8008eae:	3501      	adds	r5, #1
 8008eb0:	68e3      	ldr	r3, [r4, #12]
 8008eb2:	9a03      	ldr	r2, [sp, #12]
 8008eb4:	1a9b      	subs	r3, r3, r2
 8008eb6:	42ab      	cmp	r3, r5
 8008eb8:	dcf2      	bgt.n	8008ea0 <_printf_i+0x1e8>
 8008eba:	e7eb      	b.n	8008e94 <_printf_i+0x1dc>
 8008ebc:	2500      	movs	r5, #0
 8008ebe:	f104 0919 	add.w	r9, r4, #25
 8008ec2:	e7f5      	b.n	8008eb0 <_printf_i+0x1f8>
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d1ac      	bne.n	8008e22 <_printf_i+0x16a>
 8008ec8:	7803      	ldrb	r3, [r0, #0]
 8008eca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ece:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ed2:	e76c      	b.n	8008dae <_printf_i+0xf6>
 8008ed4:	080093d5 	.word	0x080093d5
 8008ed8:	080093e6 	.word	0x080093e6

08008edc <_sbrk_r>:
 8008edc:	b538      	push	{r3, r4, r5, lr}
 8008ede:	4c06      	ldr	r4, [pc, #24]	; (8008ef8 <_sbrk_r+0x1c>)
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	4605      	mov	r5, r0
 8008ee4:	4608      	mov	r0, r1
 8008ee6:	6023      	str	r3, [r4, #0]
 8008ee8:	f7f8 fc7c 	bl	80017e4 <_sbrk>
 8008eec:	1c43      	adds	r3, r0, #1
 8008eee:	d102      	bne.n	8008ef6 <_sbrk_r+0x1a>
 8008ef0:	6823      	ldr	r3, [r4, #0]
 8008ef2:	b103      	cbz	r3, 8008ef6 <_sbrk_r+0x1a>
 8008ef4:	602b      	str	r3, [r5, #0]
 8008ef6:	bd38      	pop	{r3, r4, r5, pc}
 8008ef8:	20000888 	.word	0x20000888

08008efc <__sread>:
 8008efc:	b510      	push	{r4, lr}
 8008efe:	460c      	mov	r4, r1
 8008f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f04:	f000 f896 	bl	8009034 <_read_r>
 8008f08:	2800      	cmp	r0, #0
 8008f0a:	bfab      	itete	ge
 8008f0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008f0e:	89a3      	ldrhlt	r3, [r4, #12]
 8008f10:	181b      	addge	r3, r3, r0
 8008f12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008f16:	bfac      	ite	ge
 8008f18:	6563      	strge	r3, [r4, #84]	; 0x54
 8008f1a:	81a3      	strhlt	r3, [r4, #12]
 8008f1c:	bd10      	pop	{r4, pc}

08008f1e <__swrite>:
 8008f1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f22:	461f      	mov	r7, r3
 8008f24:	898b      	ldrh	r3, [r1, #12]
 8008f26:	05db      	lsls	r3, r3, #23
 8008f28:	4605      	mov	r5, r0
 8008f2a:	460c      	mov	r4, r1
 8008f2c:	4616      	mov	r6, r2
 8008f2e:	d505      	bpl.n	8008f3c <__swrite+0x1e>
 8008f30:	2302      	movs	r3, #2
 8008f32:	2200      	movs	r2, #0
 8008f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f38:	f000 f868 	bl	800900c <_lseek_r>
 8008f3c:	89a3      	ldrh	r3, [r4, #12]
 8008f3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f46:	81a3      	strh	r3, [r4, #12]
 8008f48:	4632      	mov	r2, r6
 8008f4a:	463b      	mov	r3, r7
 8008f4c:	4628      	mov	r0, r5
 8008f4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f52:	f000 b817 	b.w	8008f84 <_write_r>

08008f56 <__sseek>:
 8008f56:	b510      	push	{r4, lr}
 8008f58:	460c      	mov	r4, r1
 8008f5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f5e:	f000 f855 	bl	800900c <_lseek_r>
 8008f62:	1c43      	adds	r3, r0, #1
 8008f64:	89a3      	ldrh	r3, [r4, #12]
 8008f66:	bf15      	itete	ne
 8008f68:	6560      	strne	r0, [r4, #84]	; 0x54
 8008f6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008f6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008f72:	81a3      	strheq	r3, [r4, #12]
 8008f74:	bf18      	it	ne
 8008f76:	81a3      	strhne	r3, [r4, #12]
 8008f78:	bd10      	pop	{r4, pc}

08008f7a <__sclose>:
 8008f7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f7e:	f000 b813 	b.w	8008fa8 <_close_r>
	...

08008f84 <_write_r>:
 8008f84:	b538      	push	{r3, r4, r5, lr}
 8008f86:	4c07      	ldr	r4, [pc, #28]	; (8008fa4 <_write_r+0x20>)
 8008f88:	4605      	mov	r5, r0
 8008f8a:	4608      	mov	r0, r1
 8008f8c:	4611      	mov	r1, r2
 8008f8e:	2200      	movs	r2, #0
 8008f90:	6022      	str	r2, [r4, #0]
 8008f92:	461a      	mov	r2, r3
 8008f94:	f7f8 f845 	bl	8001022 <_write>
 8008f98:	1c43      	adds	r3, r0, #1
 8008f9a:	d102      	bne.n	8008fa2 <_write_r+0x1e>
 8008f9c:	6823      	ldr	r3, [r4, #0]
 8008f9e:	b103      	cbz	r3, 8008fa2 <_write_r+0x1e>
 8008fa0:	602b      	str	r3, [r5, #0]
 8008fa2:	bd38      	pop	{r3, r4, r5, pc}
 8008fa4:	20000888 	.word	0x20000888

08008fa8 <_close_r>:
 8008fa8:	b538      	push	{r3, r4, r5, lr}
 8008faa:	4c06      	ldr	r4, [pc, #24]	; (8008fc4 <_close_r+0x1c>)
 8008fac:	2300      	movs	r3, #0
 8008fae:	4605      	mov	r5, r0
 8008fb0:	4608      	mov	r0, r1
 8008fb2:	6023      	str	r3, [r4, #0]
 8008fb4:	f7f8 fbe1 	bl	800177a <_close>
 8008fb8:	1c43      	adds	r3, r0, #1
 8008fba:	d102      	bne.n	8008fc2 <_close_r+0x1a>
 8008fbc:	6823      	ldr	r3, [r4, #0]
 8008fbe:	b103      	cbz	r3, 8008fc2 <_close_r+0x1a>
 8008fc0:	602b      	str	r3, [r5, #0]
 8008fc2:	bd38      	pop	{r3, r4, r5, pc}
 8008fc4:	20000888 	.word	0x20000888

08008fc8 <_fstat_r>:
 8008fc8:	b538      	push	{r3, r4, r5, lr}
 8008fca:	4c07      	ldr	r4, [pc, #28]	; (8008fe8 <_fstat_r+0x20>)
 8008fcc:	2300      	movs	r3, #0
 8008fce:	4605      	mov	r5, r0
 8008fd0:	4608      	mov	r0, r1
 8008fd2:	4611      	mov	r1, r2
 8008fd4:	6023      	str	r3, [r4, #0]
 8008fd6:	f7f8 fbdc 	bl	8001792 <_fstat>
 8008fda:	1c43      	adds	r3, r0, #1
 8008fdc:	d102      	bne.n	8008fe4 <_fstat_r+0x1c>
 8008fde:	6823      	ldr	r3, [r4, #0]
 8008fe0:	b103      	cbz	r3, 8008fe4 <_fstat_r+0x1c>
 8008fe2:	602b      	str	r3, [r5, #0]
 8008fe4:	bd38      	pop	{r3, r4, r5, pc}
 8008fe6:	bf00      	nop
 8008fe8:	20000888 	.word	0x20000888

08008fec <_isatty_r>:
 8008fec:	b538      	push	{r3, r4, r5, lr}
 8008fee:	4c06      	ldr	r4, [pc, #24]	; (8009008 <_isatty_r+0x1c>)
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	4605      	mov	r5, r0
 8008ff4:	4608      	mov	r0, r1
 8008ff6:	6023      	str	r3, [r4, #0]
 8008ff8:	f7f8 fbdb 	bl	80017b2 <_isatty>
 8008ffc:	1c43      	adds	r3, r0, #1
 8008ffe:	d102      	bne.n	8009006 <_isatty_r+0x1a>
 8009000:	6823      	ldr	r3, [r4, #0]
 8009002:	b103      	cbz	r3, 8009006 <_isatty_r+0x1a>
 8009004:	602b      	str	r3, [r5, #0]
 8009006:	bd38      	pop	{r3, r4, r5, pc}
 8009008:	20000888 	.word	0x20000888

0800900c <_lseek_r>:
 800900c:	b538      	push	{r3, r4, r5, lr}
 800900e:	4c07      	ldr	r4, [pc, #28]	; (800902c <_lseek_r+0x20>)
 8009010:	4605      	mov	r5, r0
 8009012:	4608      	mov	r0, r1
 8009014:	4611      	mov	r1, r2
 8009016:	2200      	movs	r2, #0
 8009018:	6022      	str	r2, [r4, #0]
 800901a:	461a      	mov	r2, r3
 800901c:	f7f8 fbd4 	bl	80017c8 <_lseek>
 8009020:	1c43      	adds	r3, r0, #1
 8009022:	d102      	bne.n	800902a <_lseek_r+0x1e>
 8009024:	6823      	ldr	r3, [r4, #0]
 8009026:	b103      	cbz	r3, 800902a <_lseek_r+0x1e>
 8009028:	602b      	str	r3, [r5, #0]
 800902a:	bd38      	pop	{r3, r4, r5, pc}
 800902c:	20000888 	.word	0x20000888

08009030 <__malloc_lock>:
 8009030:	4770      	bx	lr

08009032 <__malloc_unlock>:
 8009032:	4770      	bx	lr

08009034 <_read_r>:
 8009034:	b538      	push	{r3, r4, r5, lr}
 8009036:	4c07      	ldr	r4, [pc, #28]	; (8009054 <_read_r+0x20>)
 8009038:	4605      	mov	r5, r0
 800903a:	4608      	mov	r0, r1
 800903c:	4611      	mov	r1, r2
 800903e:	2200      	movs	r2, #0
 8009040:	6022      	str	r2, [r4, #0]
 8009042:	461a      	mov	r2, r3
 8009044:	f7f8 fb7c 	bl	8001740 <_read>
 8009048:	1c43      	adds	r3, r0, #1
 800904a:	d102      	bne.n	8009052 <_read_r+0x1e>
 800904c:	6823      	ldr	r3, [r4, #0]
 800904e:	b103      	cbz	r3, 8009052 <_read_r+0x1e>
 8009050:	602b      	str	r3, [r5, #0]
 8009052:	bd38      	pop	{r3, r4, r5, pc}
 8009054:	20000888 	.word	0x20000888

08009058 <_init>:
 8009058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800905a:	bf00      	nop
 800905c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800905e:	bc08      	pop	{r3}
 8009060:	469e      	mov	lr, r3
 8009062:	4770      	bx	lr

08009064 <_fini>:
 8009064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009066:	bf00      	nop
 8009068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800906a:	bc08      	pop	{r3}
 800906c:	469e      	mov	lr, r3
 800906e:	4770      	bx	lr
