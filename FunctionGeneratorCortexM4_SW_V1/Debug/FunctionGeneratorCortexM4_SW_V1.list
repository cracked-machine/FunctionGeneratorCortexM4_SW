
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000106b8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001680  08010898  08010898  00020898  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011f18  08011f18  00031ed0  2**0
                  CONTENTS
  4 .ARM          00000000  08011f18  08011f18  00031ed0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08011f18  08011f18  00031ed0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011f18  08011f18  00021f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011f1c  08011f1c  00021f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001ed0  20000000  08011f20  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a98  20001ed0  08013df0  00031ed0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002968  08013df0  00032968  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031ed0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b48f  00000000  00000000  00031f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006d79  00000000  00000000  0006d38f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002060  00000000  00000000  00074108  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001c98  00000000  00000000  00076168  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003350b  00000000  00000000  00077e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00029d73  00000000  00000000  000ab30b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001257ed  00000000  00000000  000d507e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001fa86b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008de8  00000000  00000000  001fa8e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001ed0 	.word	0x20001ed0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08010880 	.word	0x08010880

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001ed4 	.word	0x20001ed4
 800021c:	08010880 	.word	0x08010880

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <BiasMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMenu(eBiasMenu_Status pMenu)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d000      	beq.n	8000c0a <BiasMenu_DrawMenu+0x12>
		case ENABLE_BIAS_MENU:
			BiasMenu_DrawMainMenu();
			break;

		default:
			break;
 8000c08:	e002      	b.n	8000c10 <BiasMenu_DrawMenu+0x18>
			BiasMenu_DrawMainMenu();
 8000c0a:	f000 f805 	bl	8000c18 <BiasMenu_DrawMainMenu>
			break;
 8000c0e:	bf00      	nop

	}
}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <BiasMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMainMenu()
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("ADJUST DC BIAS", 	30, 10, WHITE, 3, BLACK);
 8000c1e:	2300      	movs	r3, #0
 8000c20:	9301      	str	r3, [sp, #4]
 8000c22:	2303      	movs	r3, #3
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c2a:	220a      	movs	r2, #10
 8000c2c:	211e      	movs	r1, #30
 8000c2e:	4803      	ldr	r0, [pc, #12]	; (8000c3c <BiasMenu_DrawMainMenu+0x24>)
 8000c30:	f00c fb88 	bl	800d344 <ILI9341_Draw_Text>

}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	08010898 	.word	0x08010898

08000c40 <DM_Init>:
 *	@param None
 *	@retval None
 *
 */
void DM_Init()
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 8000c44:	f00c fbd0 	bl	800d3e8 <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000c48:	2003      	movs	r0, #3
 8000c4a:	f00c ffbd 	bl	800dbc8 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 8000c4e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000c52:	f00c fdd1 	bl	800d7f8 <ILI9341_Fill_Screen>

}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <DM_PostInit>:
 *	@param None
 *	@retval None
 *
 */
void DM_PostInit()
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af02      	add	r7, sp, #8

	  ILI9341_Draw_Text("Initialising", 10, 10, BLACK, 1, WHITE);
 8000c62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c66:	9301      	str	r3, [sp, #4]
 8000c68:	2301      	movs	r3, #1
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	220a      	movs	r2, #10
 8000c70:	210a      	movs	r1, #10
 8000c72:	4807      	ldr	r0, [pc, #28]	; (8000c90 <DM_PostInit+0x34>)
 8000c74:	f00c fb66 	bl	800d344 <ILI9341_Draw_Text>
	  HAL_Delay(500);
 8000c78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c7c:	f007 f8bc 	bl	8007df8 <HAL_Delay>

	  DM_RefreshScreen();
 8000c80:	f000 fa22 	bl	80010c8 <DM_RefreshScreen>
#ifdef SWV_DEBUG_ENABLED
	  printf("Init Completed\n");
 8000c84:	4803      	ldr	r0, [pc, #12]	; (8000c94 <DM_PostInit+0x38>)
 8000c86:	f00d fea1 	bl	800e9cc <puts>
#endif


}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	080108a8 	.word	0x080108a8
 8000c94:	080108b8 	.word	0x080108b8

08000c98 <_DisplayFormattedOutput>:
 *	@param None
 *	@retval None
 *
 */
void _DisplayFormattedOutput()
{
 8000c98:	b590      	push	{r4, r7, lr}
 8000c9a:	b099      	sub	sp, #100	; 0x64
 8000c9c:	af02      	add	r7, sp, #8
	char out_hertz[13] = "";
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	633b      	str	r3, [r7, #48]	; 0x30
 8000ca2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	721a      	strb	r2, [r3, #8]
	uint8_t out_hertz_x = 70;
 8000cae:	2346      	movs	r3, #70	; 0x46
 8000cb0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	uint8_t out_hertz_y = 40;
 8000cb4:	2328      	movs	r3, #40	; 0x28
 8000cb6:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

	char out_vpp[16] = "";
 8000cba:	2300      	movs	r3, #0
 8000cbc:	623b      	str	r3, [r7, #32]
 8000cbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
	uint8_t out_vpp_x = 70;
 8000cca:	2346      	movs	r3, #70	; 0x46
 8000ccc:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	uint8_t out_vpp_y = 70;
 8000cd0:	2346      	movs	r3, #70	; 0x46
 8000cd2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

	char out_decibels[11] = "";
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	f107 0318 	add.w	r3, r7, #24
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	f8c3 2003 	str.w	r2, [r3, #3]
	uint8_t out_decibels_x = 70;
 8000ce6:	2346      	movs	r3, #70	; 0x46
 8000ce8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t out_decibels_y = 100;
 8000cec:	2364      	movs	r3, #100	; 0x64
 8000cee:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e


	float volts_per_thou = 0.00075;
 8000cf2:	4b66      	ldr	r3, [pc, #408]	; (8000e8c <_DisplayFormattedOutput+0x1f4>)
 8000cf4:	64bb      	str	r3, [r7, #72]	; 0x48
	char out_dcvolts[10] = "";
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	f107 030c 	add.w	r3, r7, #12
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	809a      	strh	r2, [r3, #4]
	uint8_t out_dcvolts_x = 70;
 8000d04:	2346      	movs	r3, #70	; 0x46
 8000d06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t out_dcvolts_y = 130;
 8000d0a:	2382      	movs	r3, #130	; 0x82
 8000d0c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

	// display output in hertz
	snprintf(out_hertz, sizeof(out_hertz), "%4.2f Hz", SM_GetOutputInHertz());
 8000d10:	f004 f820 	bl	8004d54 <SM_GetOutputInHertz>
 8000d14:	ee10 3a10 	vmov	r3, s0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff fc3d 	bl	8000598 <__aeabi_f2d>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	460c      	mov	r4, r1
 8000d22:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000d26:	e9cd 3400 	strd	r3, r4, [sp]
 8000d2a:	4a59      	ldr	r2, [pc, #356]	; (8000e90 <_DisplayFormattedOutput+0x1f8>)
 8000d2c:	210d      	movs	r1, #13
 8000d2e:	f00d fe55 	bl	800e9dc <sniprintf>
	ILI9341_Draw_Text(out_hertz, out_hertz_x, out_hertz_y, BLACK, 3, WHITE);
 8000d32:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000d36:	b299      	uxth	r1, r3
 8000d38:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8000d3c:	b29a      	uxth	r2, r3
 8000d3e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000d42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d46:	9301      	str	r3, [sp, #4]
 8000d48:	2303      	movs	r3, #3
 8000d4a:	9300      	str	r3, [sp, #0]
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f00c faf9 	bl	800d344 <ILI9341_Draw_Text>

	// display output in volts peak-to-peak and decibels
	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 8000d52:	2000      	movs	r0, #0
 8000d54:	f003 ffcc 	bl	8004cf0 <SM_GetOutputChannel>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8000d5e:	643b      	str	r3, [r7, #64]	; 0x40

	if(pTmpVppPreset)
 8000d60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d016      	beq.n	8000d94 <_DisplayFormattedOutput+0xfc>
	{
		snprintf(out_vpp, sizeof(out_vpp), "%2.2f Vpp", pTmpVppPreset->amp_value);
 8000d66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff fc14 	bl	8000598 <__aeabi_f2d>
 8000d70:	4603      	mov	r3, r0
 8000d72:	460c      	mov	r4, r1
 8000d74:	f107 0020 	add.w	r0, r7, #32
 8000d78:	e9cd 3400 	strd	r3, r4, [sp]
 8000d7c:	4a45      	ldr	r2, [pc, #276]	; (8000e94 <_DisplayFormattedOutput+0x1fc>)
 8000d7e:	2110      	movs	r1, #16
 8000d80:	f00d fe2c 	bl	800e9dc <sniprintf>
		snprintf(out_decibels, sizeof(out_decibels), "%s", pTmpVppPreset->gain_decibels);
 8000d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	f107 0014 	add.w	r0, r7, #20
 8000d8c:	4a42      	ldr	r2, [pc, #264]	; (8000e98 <_DisplayFormattedOutput+0x200>)
 8000d8e:	210b      	movs	r1, #11
 8000d90:	f00d fe24 	bl	800e9dc <sniprintf>
	}
	ILI9341_Draw_Text(out_vpp, out_vpp_x, out_vpp_y, BLACK, 3, WHITE);
 8000d94:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8000d98:	b299      	uxth	r1, r3
 8000d9a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000d9e:	b29a      	uxth	r2, r3
 8000da0:	f107 0020 	add.w	r0, r7, #32
 8000da4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000da8:	9301      	str	r3, [sp, #4]
 8000daa:	2303      	movs	r3, #3
 8000dac:	9300      	str	r3, [sp, #0]
 8000dae:	2300      	movs	r3, #0
 8000db0:	f00c fac8 	bl	800d344 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(out_decibels, out_decibels_x, out_decibels_y, BLACK, 3, WHITE);
 8000db4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000db8:	b299      	uxth	r1, r3
 8000dba:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000dbe:	b29a      	uxth	r2, r3
 8000dc0:	f107 0014 	add.w	r0, r7, #20
 8000dc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dc8:	9301      	str	r3, [sp, #4]
 8000dca:	2303      	movs	r3, #3
 8000dcc:	9300      	str	r3, [sp, #0]
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f00c fab8 	bl	800d344 <ILI9341_Draw_Text>



	// display output bias in +/- Volts
	float dc_volts;
	(BO_GetOutputBias() == 0) ? (dc_volts = 0) : (dc_volts = volts_per_thou * (float)BO_GetOutputBias());
 8000dd4:	f003 fa5c 	bl	8004290 <BO_GetOutputBias>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d103      	bne.n	8000de6 <_DisplayFormattedOutput+0x14e>
 8000dde:	f04f 0300 	mov.w	r3, #0
 8000de2:	657b      	str	r3, [r7, #84]	; 0x54
 8000de4:	e00b      	b.n	8000dfe <_DisplayFormattedOutput+0x166>
 8000de6:	f003 fa53 	bl	8004290 <BO_GetOutputBias>
 8000dea:	ee07 0a90 	vmov	s15, r0
 8000dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000df2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dfa:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

	snprintf(out_dcvolts, sizeof(out_dcvolts), "%1.4f v", dc_volts);
 8000dfe:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000e00:	f7ff fbca 	bl	8000598 <__aeabi_f2d>
 8000e04:	4603      	mov	r3, r0
 8000e06:	460c      	mov	r4, r1
 8000e08:	f107 0008 	add.w	r0, r7, #8
 8000e0c:	e9cd 3400 	strd	r3, r4, [sp]
 8000e10:	4a22      	ldr	r2, [pc, #136]	; (8000e9c <_DisplayFormattedOutput+0x204>)
 8000e12:	210a      	movs	r1, #10
 8000e14:	f00d fde2 	bl	800e9dc <sniprintf>
	if(BO_GetBiasPolarity())
 8000e18:	f003 f9da 	bl	80041d0 <BO_GetBiasPolarity>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d018      	beq.n	8000e54 <_DisplayFormattedOutput+0x1bc>
	{
		char symbol[2] = "+\0";
 8000e22:	4b1f      	ldr	r3, [pc, #124]	; (8000ea0 <_DisplayFormattedOutput+0x208>)
 8000e24:	881b      	ldrh	r3, [r3, #0]
 8000e26:	80bb      	strh	r3, [r7, #4]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, BLACK, 3, WHITE);
 8000e28:	f107 0208 	add.w	r2, r7, #8
 8000e2c:	1d3b      	adds	r3, r7, #4
 8000e2e:	4611      	mov	r1, r2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f00d fe07 	bl	800ea44 <strcat>
 8000e36:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000e3a:	b299      	uxth	r1, r3
 8000e3c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e46:	9301      	str	r3, [sp, #4]
 8000e48:	2303      	movs	r3, #3
 8000e4a:	9300      	str	r3, [sp, #0]
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f00c fa79 	bl	800d344 <ILI9341_Draw_Text>
	{
		char symbol[2] = "-\0";
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, BLACK, 3, WHITE);
	}

}
 8000e52:	e017      	b.n	8000e84 <_DisplayFormattedOutput+0x1ec>
		char symbol[2] = "-\0";
 8000e54:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <_DisplayFormattedOutput+0x20c>)
 8000e56:	881b      	ldrh	r3, [r3, #0]
 8000e58:	803b      	strh	r3, [r7, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, BLACK, 3, WHITE);
 8000e5a:	f107 0208 	add.w	r2, r7, #8
 8000e5e:	463b      	mov	r3, r7
 8000e60:	4611      	mov	r1, r2
 8000e62:	4618      	mov	r0, r3
 8000e64:	f00d fdee 	bl	800ea44 <strcat>
 8000e68:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000e6c:	b299      	uxth	r1, r3
 8000e6e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e78:	9301      	str	r3, [sp, #4]
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	9300      	str	r3, [sp, #0]
 8000e7e:	2300      	movs	r3, #0
 8000e80:	f00c fa60 	bl	800d344 <ILI9341_Draw_Text>
}
 8000e84:	bf00      	nop
 8000e86:	375c      	adds	r7, #92	; 0x5c
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd90      	pop	{r4, r7, pc}
 8000e8c:	3a449ba6 	.word	0x3a449ba6
 8000e90:	080108c8 	.word	0x080108c8
 8000e94:	080108d4 	.word	0x080108d4
 8000e98:	080108e0 	.word	0x080108e0
 8000e9c:	080108e4 	.word	0x080108e4
 8000ea0:	080108ec 	.word	0x080108ec
 8000ea4:	080108f0 	.word	0x080108f0

08000ea8 <DM_UpdateDisplay>:
 *	@param None
 *	@retval None
 *
 */
void DM_UpdateDisplay()
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b090      	sub	sp, #64	; 0x40
 8000eac:	af02      	add	r7, sp, #8

	// Function menus
	if(FuncMenu_getStatus())		//  != DISABLE_FUNC_MENU
 8000eae:	f002 fe9b 	bl	8003be8 <FuncMenu_getStatus>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d01a      	beq.n	8000eee <DM_UpdateDisplay+0x46>
	{

#ifdef SWV_DEBUG_ENABLED
	  printf("FuncMenu_DrawMenu\n");
 8000eb8:	4875      	ldr	r0, [pc, #468]	; (8001090 <DM_UpdateDisplay+0x1e8>)
 8000eba:	f00d fd87 	bl	800e9cc <puts>
#endif

		switch(FuncMenu_getStatus())
 8000ebe:	f002 fe93 	bl	8003be8 <FuncMenu_getStatus>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d00a      	beq.n	8000ede <DM_UpdateDisplay+0x36>
 8000ec8:	2b03      	cmp	r3, #3
 8000eca:	d00c      	beq.n	8000ee6 <DM_UpdateDisplay+0x3e>
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d000      	beq.n	8000ed2 <DM_UpdateDisplay+0x2a>
				FuncMenu_DrawMenu(ENABLE_FUNC_SYNC_MENU);

				break;

			default:
				break;
 8000ed0:	e0ab      	b.n	800102a <DM_UpdateDisplay+0x182>
				_DisplayFormattedOutput();
 8000ed2:	f7ff fee1 	bl	8000c98 <_DisplayFormattedOutput>
				FuncMenu_DrawMenu(ENABLE_FUNC_MAIN_MENU);
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f001 fda2 	bl	8002a20 <FuncMenu_DrawMenu>
				break;
 8000edc:	e0a5      	b.n	800102a <DM_UpdateDisplay+0x182>
				FuncMenu_DrawMenu(ENABLE_FUNC_SIGNAL_MENU);
 8000ede:	2002      	movs	r0, #2
 8000ee0:	f001 fd9e 	bl	8002a20 <FuncMenu_DrawMenu>
				break;
 8000ee4:	e0a1      	b.n	800102a <DM_UpdateDisplay+0x182>
				FuncMenu_DrawMenu(ENABLE_FUNC_SYNC_MENU);
 8000ee6:	2003      	movs	r0, #3
 8000ee8:	f001 fd9a 	bl	8002a20 <FuncMenu_DrawMenu>
				break;
 8000eec:	e09d      	b.n	800102a <DM_UpdateDisplay+0x182>
		}

	}
	// Gain menus
	else if(GainMenu_getStatus())		//  != DISABLE_GAIN_MENU
 8000eee:	f002 ff7d 	bl	8003dec <GainMenu_getStatus>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d01e      	beq.n	8000f36 <DM_UpdateDisplay+0x8e>
	{

#ifdef SWV_DEBUG_ENABLED
	  printf("GainMenu_DrawMenu\n");
 8000ef8:	4866      	ldr	r0, [pc, #408]	; (8001094 <DM_UpdateDisplay+0x1ec>)
 8000efa:	f00d fd67 	bl	800e9cc <puts>
#endif
		switch(GainMenu_getStatus())
 8000efe:	f002 ff75 	bl	8003dec <GainMenu_getStatus>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d00a      	beq.n	8000f1e <DM_UpdateDisplay+0x76>
 8000f08:	2b03      	cmp	r3, #3
 8000f0a:	d00e      	beq.n	8000f2a <DM_UpdateDisplay+0x82>
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d000      	beq.n	8000f12 <DM_UpdateDisplay+0x6a>
				GainMenu_DrawMenu(ENABLE_GAIN_SYNC_MENU);

				break;

			default:
				break;
 8000f10:	e08b      	b.n	800102a <DM_UpdateDisplay+0x182>
				_DisplayFormattedOutput();
 8000f12:	f7ff fec1 	bl	8000c98 <_DisplayFormattedOutput>
				GainMenu_DrawMenu(ENABLE_GAIN_MAIN_MENU);
 8000f16:	2001      	movs	r0, #1
 8000f18:	f002 f9a2 	bl	8003260 <GainMenu_DrawMenu>
				break;
 8000f1c:	e085      	b.n	800102a <DM_UpdateDisplay+0x182>
				_DisplayFormattedOutput();
 8000f1e:	f7ff febb 	bl	8000c98 <_DisplayFormattedOutput>
				GainMenu_DrawMenu(ENABLE_GAIN_SIGNAL_MENU);
 8000f22:	2002      	movs	r0, #2
 8000f24:	f002 f99c 	bl	8003260 <GainMenu_DrawMenu>
				break;
 8000f28:	e07f      	b.n	800102a <DM_UpdateDisplay+0x182>
				_DisplayFormattedOutput();
 8000f2a:	f7ff feb5 	bl	8000c98 <_DisplayFormattedOutput>
				GainMenu_DrawMenu(ENABLE_GAIN_SYNC_MENU);
 8000f2e:	2003      	movs	r0, #3
 8000f30:	f002 f996 	bl	8003260 <GainMenu_DrawMenu>
				break;
 8000f34:	e079      	b.n	800102a <DM_UpdateDisplay+0x182>
		}

	}

	// Frequency menus
	else if(FreqMenu_getStatus())		//  != DISABLE_FREQ_MENU
 8000f36:	f002 fc67 	bl	8003808 <FreqMenu_getStatus>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d027      	beq.n	8000f90 <DM_UpdateDisplay+0xe8>
	{

#ifdef SWV_DEBUG_ENABLED
	  printf("FreqMenu_DrawMenu\n");
 8000f40:	4855      	ldr	r0, [pc, #340]	; (8001098 <DM_UpdateDisplay+0x1f0>)
 8000f42:	f00d fd43 	bl	800e9cc <puts>
#endif

		//ILI9341_Draw_Text("FREQUENCY MENU", 	30, 10, WHITE, 3, BLACK);

		switch(FreqMenu_getStatus())
 8000f46:	f002 fc5f 	bl	8003808 <FreqMenu_getStatus>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	2b03      	cmp	r3, #3
 8000f50:	d86a      	bhi.n	8001028 <DM_UpdateDisplay+0x180>
 8000f52:	a201      	add	r2, pc, #4	; (adr r2, 8000f58 <DM_UpdateDisplay+0xb0>)
 8000f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f58:	08000f69 	.word	0x08000f69
 8000f5c:	08000f75 	.word	0x08000f75
 8000f60:	08000f7d 	.word	0x08000f7d
 8000f64:	08000f89 	.word	0x08000f89
		{
			case ENABLE_FREQ_MAIN_MENU:

				_DisplayFormattedOutput();
 8000f68:	f7ff fe96 	bl	8000c98 <_DisplayFormattedOutput>
				FreqMenu_DrawMenu(ENABLE_FREQ_MAIN_MENU);
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	f000 f907 	bl	8001180 <FreqMenu_DrawMenu>

				break;
 8000f72:	e05a      	b.n	800102a <DM_UpdateDisplay+0x182>

			case ENABLE_FREQ_PRESET_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_PRESET_MENU);
 8000f74:	2002      	movs	r0, #2
 8000f76:	f000 f903 	bl	8001180 <FreqMenu_DrawMenu>
				break;
 8000f7a:	e056      	b.n	800102a <DM_UpdateDisplay+0x182>

			case ENABLE_FREQ_ADJUST_MENU:

				_DisplayFormattedOutput();
 8000f7c:	f7ff fe8c 	bl	8000c98 <_DisplayFormattedOutput>
				FreqMenu_DrawMenu(ENABLE_FREQ_ADJUST_MENU);
 8000f80:	2003      	movs	r0, #3
 8000f82:	f000 f8fd 	bl	8001180 <FreqMenu_DrawMenu>

				break;
 8000f86:	e050      	b.n	800102a <DM_UpdateDisplay+0x182>

			case ENABLE_FREQ_SWEEP_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_SWEEP_MENU);
 8000f88:	2004      	movs	r0, #4
 8000f8a:	f000 f8f9 	bl	8001180 <FreqMenu_DrawMenu>
				break;
 8000f8e:	e04c      	b.n	800102a <DM_UpdateDisplay+0x182>
		}

	}

	// Bias menu
	else if(BiasMenu_getStatus())		//  != DISABLE_BIAS_MENU
 8000f90:	f002 f9ee 	bl	8003370 <BiasMenu_getStatus>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d008      	beq.n	8000fac <DM_UpdateDisplay+0x104>
	{

#ifdef SWV_DEBUG_ENABLED
	  printf("BiasMenu_DrawMenu\n");
 8000f9a:	4840      	ldr	r0, [pc, #256]	; (800109c <DM_UpdateDisplay+0x1f4>)
 8000f9c:	f00d fd16 	bl	800e9cc <puts>
#endif

		_DisplayFormattedOutput();
 8000fa0:	f7ff fe7a 	bl	8000c98 <_DisplayFormattedOutput>
		BiasMenu_DrawMenu(ENABLE_BIAS_MENU);
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f7ff fe27 	bl	8000bf8 <BiasMenu_DrawMenu>
 8000faa:	e03e      	b.n	800102a <DM_UpdateDisplay+0x182>
	}
	else
	{

#ifdef SWV_DEBUG_ENABLED
	  printf("Drawing Main screen\n");
 8000fac:	483c      	ldr	r0, [pc, #240]	; (80010a0 <DM_UpdateDisplay+0x1f8>)
 8000fae:	f00d fd0d 	bl	800e9cc <puts>
#endif
		// Main screen
		ILI9341_Draw_Text("SIGNAL GENERATOR", 	10, 10, WHITE, 3, BLACK);
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	9301      	str	r3, [sp, #4]
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fbe:	220a      	movs	r2, #10
 8000fc0:	210a      	movs	r1, #10
 8000fc2:	4838      	ldr	r0, [pc, #224]	; (80010a4 <DM_UpdateDisplay+0x1fc>)
 8000fc4:	f00c f9be 	bl	800d344 <ILI9341_Draw_Text>
		_DisplayFormattedOutput();
 8000fc8:	f7ff fe66 	bl	8000c98 <_DisplayFormattedOutput>

		ILI9341_Draw_Text("FUNC", 10, 210, BLACK, 2, DARKCYAN);
 8000fcc:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8000fd0:	9301      	str	r3, [sp, #4]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	22d2      	movs	r2, #210	; 0xd2
 8000fda:	210a      	movs	r1, #10
 8000fdc:	4832      	ldr	r0, [pc, #200]	; (80010a8 <DM_UpdateDisplay+0x200>)
 8000fde:	f00c f9b1 	bl	800d344 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("FREQ", 100, 210, BLACK, 2, DARKGREEN);
 8000fe2:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000fe6:	9301      	str	r3, [sp, #4]
 8000fe8:	2302      	movs	r3, #2
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	2300      	movs	r3, #0
 8000fee:	22d2      	movs	r2, #210	; 0xd2
 8000ff0:	2164      	movs	r1, #100	; 0x64
 8000ff2:	482e      	ldr	r0, [pc, #184]	; (80010ac <DM_UpdateDisplay+0x204>)
 8000ff4:	f00c f9a6 	bl	800d344 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("GAIN", 175, 210, BLACK, 2, YELLOW);
 8000ff8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000ffc:	9301      	str	r3, [sp, #4]
 8000ffe:	2302      	movs	r3, #2
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2300      	movs	r3, #0
 8001004:	22d2      	movs	r2, #210	; 0xd2
 8001006:	21af      	movs	r1, #175	; 0xaf
 8001008:	4829      	ldr	r0, [pc, #164]	; (80010b0 <DM_UpdateDisplay+0x208>)
 800100a:	f00c f99b 	bl	800d344 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("BIAS", 260, 210, BLACK, 2, RED);
 800100e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001012:	9301      	str	r3, [sp, #4]
 8001014:	2302      	movs	r3, #2
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2300      	movs	r3, #0
 800101a:	22d2      	movs	r2, #210	; 0xd2
 800101c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001020:	4824      	ldr	r0, [pc, #144]	; (80010b4 <DM_UpdateDisplay+0x20c>)
 8001022:	f00c f98f 	bl	800d344 <ILI9341_Draw_Text>
 8001026:	e000      	b.n	800102a <DM_UpdateDisplay+0x182>
				break;
 8001028:	bf00      	nop
	}

#ifdef ENCODER_DEBUG
	char encoder_value[50] = "";
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	f107 0308 	add.w	r3, r7, #8
 8001032:	222e      	movs	r2, #46	; 0x2e
 8001034:	2100      	movs	r1, #0
 8001036:	4618      	mov	r0, r3
 8001038:	f00d f808 	bl	800e04c <memset>
	snprintf(encoder_value, sizeof(encoder_value), "TIM5->CNT: %12lu - ENCODER: %5lu", TIM5->CNT, ENCODER_TIMER->CNT);
 800103c:	4b1e      	ldr	r3, [pc, #120]	; (80010b8 <DM_UpdateDisplay+0x210>)
 800103e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001040:	4b1e      	ldr	r3, [pc, #120]	; (80010bc <DM_UpdateDisplay+0x214>)
 8001042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001044:	1d38      	adds	r0, r7, #4
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	4613      	mov	r3, r2
 800104a:	4a1d      	ldr	r2, [pc, #116]	; (80010c0 <DM_UpdateDisplay+0x218>)
 800104c:	2132      	movs	r1, #50	; 0x32
 800104e:	f00d fcc5 	bl	800e9dc <sniprintf>
	//if(DM_AddDigitPadding(ENCODER_TIMER->CNT, encoder_value, sizeof(encoder_value)) == 0)
		ILI9341_Draw_Text(encoder_value, 10, 190, BLACK, 1, RED);
 8001052:	1d38      	adds	r0, r7, #4
 8001054:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001058:	9301      	str	r3, [sp, #4]
 800105a:	2301      	movs	r3, #1
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	2300      	movs	r3, #0
 8001060:	22be      	movs	r2, #190	; 0xbe
 8001062:	210a      	movs	r1, #10
 8001064:	f00c f96e 	bl	800d344 <ILI9341_Draw_Text>
#endif //ENCODER_DEBUG

	if(*ErrorDebugMsg)
 8001068:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <DM_UpdateDisplay+0x21c>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d00a      	beq.n	8001086 <DM_UpdateDisplay+0x1de>
		ILI9341_Draw_Text(ErrorDebugMsg, 10, 190, BLACK, 1, RED);
 8001070:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001074:	9301      	str	r3, [sp, #4]
 8001076:	2301      	movs	r3, #1
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	2300      	movs	r3, #0
 800107c:	22be      	movs	r2, #190	; 0xbe
 800107e:	210a      	movs	r1, #10
 8001080:	4810      	ldr	r0, [pc, #64]	; (80010c4 <DM_UpdateDisplay+0x21c>)
 8001082:	f00c f95f 	bl	800d344 <ILI9341_Draw_Text>

}
 8001086:	bf00      	nop
 8001088:	3738      	adds	r7, #56	; 0x38
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	080108f4 	.word	0x080108f4
 8001094:	08010908 	.word	0x08010908
 8001098:	0801091c 	.word	0x0801091c
 800109c:	08010930 	.word	0x08010930
 80010a0:	08010944 	.word	0x08010944
 80010a4:	08010958 	.word	0x08010958
 80010a8:	0801096c 	.word	0x0801096c
 80010ac:	08010974 	.word	0x08010974
 80010b0:	0801097c 	.word	0x0801097c
 80010b4:	08010984 	.word	0x08010984
 80010b8:	40000c00 	.word	0x40000c00
 80010bc:	40012c00 	.word	0x40012c00
 80010c0:	0801098c 	.word	0x0801098c
 80010c4:	20001eec 	.word	0x20001eec

080010c8 <DM_RefreshScreen>:
 *	@param None
 *	@retval None
 *
 */
void DM_RefreshScreen()
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af04      	add	r7, sp, #16
	// pause display interrupts
	HAL_TIM_Base_Stop_IT(&htim15);
 80010ce:	4821      	ldr	r0, [pc, #132]	; (8001154 <DM_RefreshScreen+0x8c>)
 80010d0:	f00a fcf6 	bl	800bac0 <HAL_TIM_Base_Stop_IT>


	//ILI9341_Fill_Screen(WHITE);
	ILI9341_FillScreenGradient();
 80010d4:	f00c f964 	bl	800d3a0 <ILI9341_FillScreenGradient>

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[0],
 80010d8:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <DM_RefreshScreen+0x90>)
 80010da:	8818      	ldrh	r0, [r3, #0]
 80010dc:	2300      	movs	r3, #0
 80010de:	9302      	str	r3, [sp, #8]
 80010e0:	2302      	movs	r3, #2
 80010e2:	9301      	str	r3, [sp, #4]
 80010e4:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	2332      	movs	r3, #50	; 0x32
 80010ec:	2250      	movs	r2, #80	; 0x50
 80010ee:	21c8      	movs	r1, #200	; 0xc8
 80010f0:	f00b ffbe 	bl	800d070 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKCYAN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[1],
 80010f4:	4b18      	ldr	r3, [pc, #96]	; (8001158 <DM_RefreshScreen+0x90>)
 80010f6:	8858      	ldrh	r0, [r3, #2]
 80010f8:	2300      	movs	r3, #0
 80010fa:	9302      	str	r3, [sp, #8]
 80010fc:	2302      	movs	r3, #2
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	2332      	movs	r3, #50	; 0x32
 8001108:	2250      	movs	r2, #80	; 0x50
 800110a:	21c8      	movs	r1, #200	; 0xc8
 800110c:	f00b ffb0 	bl	800d070 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKGREEN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[2],
 8001110:	4b11      	ldr	r3, [pc, #68]	; (8001158 <DM_RefreshScreen+0x90>)
 8001112:	8898      	ldrh	r0, [r3, #4]
 8001114:	2300      	movs	r3, #0
 8001116:	9302      	str	r3, [sp, #8]
 8001118:	2302      	movs	r3, #2
 800111a:	9301      	str	r3, [sp, #4]
 800111c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2332      	movs	r3, #50	; 0x32
 8001124:	2250      	movs	r2, #80	; 0x50
 8001126:	21c8      	movs	r1, #200	; 0xc8
 8001128:	f00b ffa2 	bl	800d070 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													YELLOW,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[3],
 800112c:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <DM_RefreshScreen+0x90>)
 800112e:	88d8      	ldrh	r0, [r3, #6]
 8001130:	2300      	movs	r3, #0
 8001132:	9302      	str	r3, [sp, #8]
 8001134:	2302      	movs	r3, #2
 8001136:	9301      	str	r3, [sp, #4]
 8001138:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	2332      	movs	r3, #50	; 0x32
 8001140:	2250      	movs	r2, #80	; 0x50
 8001142:	21c8      	movs	r1, #200	; 0xc8
 8001144:	f00b ff94 	bl	800d070 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													RED,
													BORDER_SIZE,
													BLACK);
	// resume diaplay interrupts
	HAL_TIM_Base_Start_IT(&htim15);
 8001148:	4802      	ldr	r0, [pc, #8]	; (8001154 <DM_RefreshScreen+0x8c>)
 800114a:	f00a fc83 	bl	800ba54 <HAL_TIM_Base_Start_IT>
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20002798 	.word	0x20002798
 8001158:	20000000 	.word	0x20000000

0800115c <DM_SetErrorDebugMsg>:
	ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
	*/
}

void DM_SetErrorDebugMsg(char* msg)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	snprintf(ErrorDebugMsg, sizeof(ErrorDebugMsg), "%s", msg);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a04      	ldr	r2, [pc, #16]	; (8001178 <DM_SetErrorDebugMsg+0x1c>)
 8001168:	212d      	movs	r1, #45	; 0x2d
 800116a:	4804      	ldr	r0, [pc, #16]	; (800117c <DM_SetErrorDebugMsg+0x20>)
 800116c:	f00d fc36 	bl	800e9dc <sniprintf>
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	080108e0 	.word	0x080108e0
 800117c:	20001eec 	.word	0x20001eec

08001180 <FreqMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMenu(eFreqMenu_Status pMenu)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	3b01      	subs	r3, #1
 800118e:	2b03      	cmp	r3, #3
 8001190:	d816      	bhi.n	80011c0 <FreqMenu_DrawMenu+0x40>
 8001192:	a201      	add	r2, pc, #4	; (adr r2, 8001198 <FreqMenu_DrawMenu+0x18>)
 8001194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001198:	080011a9 	.word	0x080011a9
 800119c:	080011af 	.word	0x080011af
 80011a0:	080011b5 	.word	0x080011b5
 80011a4:	080011bb 	.word	0x080011bb
	{
		case ENABLE_FREQ_MAIN_MENU:
			FreqMenu_DrawMainMenu();
 80011a8:	f000 f810 	bl	80011cc <FreqMenu_DrawMainMenu>
			break;
 80011ac:	e009      	b.n	80011c2 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_PRESET_MENU:
			FreqMenu_DrawPresetMenu();
 80011ae:	f000 f855 	bl	800125c <FreqMenu_DrawPresetMenu>
			break;
 80011b2:	e006      	b.n	80011c2 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_ADJUST_MENU:
			FreqMenu_DrawAdjustMenu();
 80011b4:	f001 fb00 	bl	80027b8 <FreqMenu_DrawAdjustMenu>
			break;
 80011b8:	e003      	b.n	80011c2 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_SWEEP_MENU:
			FreqMenu_DrawSweepMenu();
 80011ba:	f001 fb11 	bl	80027e0 <FreqMenu_DrawSweepMenu>
			break;
 80011be:	e000      	b.n	80011c2 <FreqMenu_DrawMenu+0x42>

		default:
			break;
 80011c0:	bf00      	nop

	}
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop

080011cc <FreqMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMainMenu()
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af02      	add	r7, sp, #8
	// main
	ILI9341_Draw_Text("FREQUENCY MENU", 	30, 10, WHITE, 3, BLACK);
 80011d2:	2300      	movs	r3, #0
 80011d4:	9301      	str	r3, [sp, #4]
 80011d6:	2303      	movs	r3, #3
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011de:	220a      	movs	r2, #10
 80011e0:	211e      	movs	r1, #30
 80011e2:	4819      	ldr	r0, [pc, #100]	; (8001248 <FreqMenu_DrawMainMenu+0x7c>)
 80011e4:	f00c f8ae 	bl	800d344 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("Select an option below", 	30, 165, BLACK, 2, WHITE);
 80011e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011ec:	9301      	str	r3, [sp, #4]
 80011ee:	2302      	movs	r3, #2
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	2300      	movs	r3, #0
 80011f4:	22a5      	movs	r2, #165	; 0xa5
 80011f6:	211e      	movs	r1, #30
 80011f8:	4814      	ldr	r0, [pc, #80]	; (800124c <FreqMenu_DrawMainMenu+0x80>)
 80011fa:	f00c f8a3 	bl	800d344 <ILI9341_Draw_Text>

	// buttons
	ILI9341_Draw_Text("PRESET", 5, 210, BLACK, 2, DARKCYAN);
 80011fe:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8001202:	9301      	str	r3, [sp, #4]
 8001204:	2302      	movs	r3, #2
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	2300      	movs	r3, #0
 800120a:	22d2      	movs	r2, #210	; 0xd2
 800120c:	2105      	movs	r1, #5
 800120e:	4810      	ldr	r0, [pc, #64]	; (8001250 <FreqMenu_DrawMainMenu+0x84>)
 8001210:	f00c f898 	bl	800d344 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("ADJUST", 87, 210, BLACK, 2, DARKGREEN);
 8001214:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001218:	9301      	str	r3, [sp, #4]
 800121a:	2302      	movs	r3, #2
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	2300      	movs	r3, #0
 8001220:	22d2      	movs	r2, #210	; 0xd2
 8001222:	2157      	movs	r1, #87	; 0x57
 8001224:	480b      	ldr	r0, [pc, #44]	; (8001254 <FreqMenu_DrawMainMenu+0x88>)
 8001226:	f00c f88d 	bl	800d344 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SWEEP", 174, 210, BLACK, 2, YELLOW);
 800122a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800122e:	9301      	str	r3, [sp, #4]
 8001230:	2302      	movs	r3, #2
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2300      	movs	r3, #0
 8001236:	22d2      	movs	r2, #210	; 0xd2
 8001238:	21ae      	movs	r1, #174	; 0xae
 800123a:	4807      	ldr	r0, [pc, #28]	; (8001258 <FreqMenu_DrawMainMenu+0x8c>)
 800123c:	f00c f882 	bl	800d344 <ILI9341_Draw_Text>
	//ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	08010a2c 	.word	0x08010a2c
 800124c:	08010a3c 	.word	0x08010a3c
 8001250:	08010a54 	.word	0x08010a54
 8001254:	08010a5c 	.word	0x08010a5c
 8001258:	08010a64 	.word	0x08010a64

0800125c <FreqMenu_DrawPresetMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawPresetMenu()
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("FREQUENCY PRESET", 	30, 10, WHITE, 3, BLACK);
 8001262:	2300      	movs	r3, #0
 8001264:	9301      	str	r3, [sp, #4]
 8001266:	2303      	movs	r3, #3
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800126e:	220a      	movs	r2, #10
 8001270:	211e      	movs	r1, #30
 8001272:	4886      	ldr	r0, [pc, #536]	; (800148c <FreqMenu_DrawPresetMenu+0x230>)
 8001274:	f00c f866 	bl	800d344 <ILI9341_Draw_Text>
	uint8_t menu_pos_y1 = 50;
 8001278:	2332      	movs	r3, #50	; 0x32
 800127a:	73fb      	strb	r3, [r7, #15]
	uint8_t menu_pos_y2 = 70;
 800127c:	2346      	movs	r3, #70	; 0x46
 800127e:	73bb      	strb	r3, [r7, #14]
	uint8_t menu_pos_y3 = 90;
 8001280:	235a      	movs	r3, #90	; 0x5a
 8001282:	737b      	strb	r3, [r7, #13]
	uint8_t menu_pos_y4 = 110;
 8001284:	236e      	movs	r3, #110	; 0x6e
 8001286:	733b      	strb	r3, [r7, #12]
	uint8_t menu_pos_y5 = 130;
 8001288:	2382      	movs	r3, #130	; 0x82
 800128a:	72fb      	strb	r3, [r7, #11]
	uint8_t menu_pos_y6 = 150;
 800128c:	2396      	movs	r3, #150	; 0x96
 800128e:	72bb      	strb	r3, [r7, #10]
	uint8_t menu_pos_y7 = 170;
 8001290:	23aa      	movs	r3, #170	; 0xaa
 8001292:	727b      	strb	r3, [r7, #9]
	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8001294:	f003 f9b2 	bl	80045fc <FreqO_GetFPresetObject>
 8001298:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2b00      	cmp	r3, #0
 800129e:	f001 825d 	beq.w	800275c <FreqMenu_DrawPresetMenu+0x1500>
	{
		switch(pFreqPresetTmp->hertz)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f240 22ee 	movw	r2, #750	; 0x2ee
 80012aa:	4293      	cmp	r3, r2
 80012ac:	f000 849a 	beq.w	8001be4 <FreqMenu_DrawPresetMenu+0x988>
 80012b0:	f240 22ee 	movw	r2, #750	; 0x2ee
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d817      	bhi.n	80012e8 <FreqMenu_DrawPresetMenu+0x8c>
 80012b8:	2b32      	cmp	r3, #50	; 0x32
 80012ba:	f000 81b3 	beq.w	8001624 <FreqMenu_DrawPresetMenu+0x3c8>
 80012be:	2b32      	cmp	r3, #50	; 0x32
 80012c0:	d806      	bhi.n	80012d0 <FreqMenu_DrawPresetMenu+0x74>
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d038      	beq.n	8001338 <FreqMenu_DrawPresetMenu+0xdc>
 80012c6:	2b0a      	cmp	r3, #10
 80012c8:	f000 8102 	beq.w	80014d0 <FreqMenu_DrawPresetMenu+0x274>
	else
	{
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		10, 180, RED, 1, BLACK);
	}

}
 80012cc:	f001 ba52 	b.w	8002774 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 80012d0:	2bfa      	cmp	r3, #250	; 0xfa
 80012d2:	f000 8317 	beq.w	8001904 <FreqMenu_DrawPresetMenu+0x6a8>
 80012d6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012da:	f000 83d9 	beq.w	8001a90 <FreqMenu_DrawPresetMenu+0x834>
 80012de:	2b64      	cmp	r3, #100	; 0x64
 80012e0:	f000 8266 	beq.w	80017b0 <FreqMenu_DrawPresetMenu+0x554>
}
 80012e4:	f001 ba46 	b.w	8002774 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 80012e8:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80012ec:	4293      	cmp	r3, r2
 80012ee:	f000 8758 	beq.w	80021a2 <FreqMenu_DrawPresetMenu+0xf46>
 80012f2:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d80f      	bhi.n	800131a <FreqMenu_DrawPresetMenu+0xbe>
 80012fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80012fe:	4293      	cmp	r3, r2
 8001300:	f000 85e0 	beq.w	8001ec4 <FreqMenu_DrawPresetMenu+0xc68>
 8001304:	f242 7210 	movw	r2, #10000	; 0x2710
 8001308:	4293      	cmp	r3, r2
 800130a:	f000 86a1 	beq.w	8002050 <FreqMenu_DrawPresetMenu+0xdf4>
 800130e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001312:	f000 852d 	beq.w	8001d70 <FreqMenu_DrawPresetMenu+0xb14>
}
 8001316:	f001 ba2d 	b.w	8002774 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 800131a:	4a5d      	ldr	r2, [pc, #372]	; (8001490 <FreqMenu_DrawPresetMenu+0x234>)
 800131c:	4293      	cmp	r3, r2
 800131e:	f001 80ae 	beq.w	800247e <FreqMenu_DrawPresetMenu+0x1222>
 8001322:	4a5c      	ldr	r2, [pc, #368]	; (8001494 <FreqMenu_DrawPresetMenu+0x238>)
 8001324:	4293      	cmp	r3, r2
 8001326:	f001 816f 	beq.w	8002608 <FreqMenu_DrawPresetMenu+0x13ac>
 800132a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800132e:	4293      	cmp	r3, r2
 8001330:	f000 87fc 	beq.w	800232c <FreqMenu_DrawPresetMenu+0x10d0>
}
 8001334:	f001 ba1e 	b.w	8002774 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, WHITE, 2, BLACK);
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	b29a      	uxth	r2, r3
 800133c:	2300      	movs	r3, #0
 800133e:	9301      	str	r3, [sp, #4]
 8001340:	2302      	movs	r3, #2
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001348:	210a      	movs	r1, #10
 800134a:	4853      	ldr	r0, [pc, #332]	; (8001498 <FreqMenu_DrawPresetMenu+0x23c>)
 800134c:	f00b fffa 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001350:	7bbb      	ldrb	r3, [r7, #14]
 8001352:	b29a      	uxth	r2, r3
 8001354:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001358:	9301      	str	r3, [sp, #4]
 800135a:	2302      	movs	r3, #2
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	2300      	movs	r3, #0
 8001360:	210a      	movs	r1, #10
 8001362:	484e      	ldr	r0, [pc, #312]	; (800149c <FreqMenu_DrawPresetMenu+0x240>)
 8001364:	f00b ffee 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001368:	7b7b      	ldrb	r3, [r7, #13]
 800136a:	b29a      	uxth	r2, r3
 800136c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001370:	9301      	str	r3, [sp, #4]
 8001372:	2302      	movs	r3, #2
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	2300      	movs	r3, #0
 8001378:	210a      	movs	r1, #10
 800137a:	4849      	ldr	r0, [pc, #292]	; (80014a0 <FreqMenu_DrawPresetMenu+0x244>)
 800137c:	f00b ffe2 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001380:	7b3b      	ldrb	r3, [r7, #12]
 8001382:	b29a      	uxth	r2, r3
 8001384:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001388:	9301      	str	r3, [sp, #4]
 800138a:	2302      	movs	r3, #2
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	2300      	movs	r3, #0
 8001390:	210a      	movs	r1, #10
 8001392:	4844      	ldr	r0, [pc, #272]	; (80014a4 <FreqMenu_DrawPresetMenu+0x248>)
 8001394:	f00b ffd6 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001398:	7afb      	ldrb	r3, [r7, #11]
 800139a:	b29a      	uxth	r2, r3
 800139c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013a0:	9301      	str	r3, [sp, #4]
 80013a2:	2302      	movs	r3, #2
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2300      	movs	r3, #0
 80013a8:	210a      	movs	r1, #10
 80013aa:	483f      	ldr	r0, [pc, #252]	; (80014a8 <FreqMenu_DrawPresetMenu+0x24c>)
 80013ac:	f00b ffca 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 80013b0:	7abb      	ldrb	r3, [r7, #10]
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013b8:	9301      	str	r3, [sp, #4]
 80013ba:	2302      	movs	r3, #2
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	2300      	movs	r3, #0
 80013c0:	210a      	movs	r1, #10
 80013c2:	483a      	ldr	r0, [pc, #232]	; (80014ac <FreqMenu_DrawPresetMenu+0x250>)
 80013c4:	f00b ffbe 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 80013c8:	7a7b      	ldrb	r3, [r7, #9]
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013d0:	9301      	str	r3, [sp, #4]
 80013d2:	2302      	movs	r3, #2
 80013d4:	9300      	str	r3, [sp, #0]
 80013d6:	2300      	movs	r3, #0
 80013d8:	210a      	movs	r1, #10
 80013da:	4835      	ldr	r0, [pc, #212]	; (80014b0 <FreqMenu_DrawPresetMenu+0x254>)
 80013dc:	f00b ffb2 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013e8:	9301      	str	r3, [sp, #4]
 80013ea:	2302      	movs	r3, #2
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	2300      	movs	r3, #0
 80013f0:	2178      	movs	r1, #120	; 0x78
 80013f2:	4830      	ldr	r0, [pc, #192]	; (80014b4 <FreqMenu_DrawPresetMenu+0x258>)
 80013f4:	f00b ffa6 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80013f8:	7bbb      	ldrb	r3, [r7, #14]
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001400:	9301      	str	r3, [sp, #4]
 8001402:	2302      	movs	r3, #2
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	2300      	movs	r3, #0
 8001408:	2178      	movs	r1, #120	; 0x78
 800140a:	482b      	ldr	r0, [pc, #172]	; (80014b8 <FreqMenu_DrawPresetMenu+0x25c>)
 800140c:	f00b ff9a 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001410:	7b7b      	ldrb	r3, [r7, #13]
 8001412:	b29a      	uxth	r2, r3
 8001414:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001418:	9301      	str	r3, [sp, #4]
 800141a:	2302      	movs	r3, #2
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	2300      	movs	r3, #0
 8001420:	2178      	movs	r1, #120	; 0x78
 8001422:	4826      	ldr	r0, [pc, #152]	; (80014bc <FreqMenu_DrawPresetMenu+0x260>)
 8001424:	f00b ff8e 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001428:	7b3b      	ldrb	r3, [r7, #12]
 800142a:	b29a      	uxth	r2, r3
 800142c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001430:	9301      	str	r3, [sp, #4]
 8001432:	2302      	movs	r3, #2
 8001434:	9300      	str	r3, [sp, #0]
 8001436:	2300      	movs	r3, #0
 8001438:	2178      	movs	r1, #120	; 0x78
 800143a:	4821      	ldr	r0, [pc, #132]	; (80014c0 <FreqMenu_DrawPresetMenu+0x264>)
 800143c:	f00b ff82 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001440:	7afb      	ldrb	r3, [r7, #11]
 8001442:	b29a      	uxth	r2, r3
 8001444:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001448:	9301      	str	r3, [sp, #4]
 800144a:	2302      	movs	r3, #2
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	2300      	movs	r3, #0
 8001450:	2178      	movs	r1, #120	; 0x78
 8001452:	481c      	ldr	r0, [pc, #112]	; (80014c4 <FreqMenu_DrawPresetMenu+0x268>)
 8001454:	f00b ff76 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001458:	7abb      	ldrb	r3, [r7, #10]
 800145a:	b29a      	uxth	r2, r3
 800145c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001460:	9301      	str	r3, [sp, #4]
 8001462:	2302      	movs	r3, #2
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	2300      	movs	r3, #0
 8001468:	2178      	movs	r1, #120	; 0x78
 800146a:	4817      	ldr	r0, [pc, #92]	; (80014c8 <FreqMenu_DrawPresetMenu+0x26c>)
 800146c:	f00b ff6a 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001470:	7a7b      	ldrb	r3, [r7, #9]
 8001472:	b29a      	uxth	r2, r3
 8001474:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001478:	9301      	str	r3, [sp, #4]
 800147a:	2302      	movs	r3, #2
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	2300      	movs	r3, #0
 8001480:	2178      	movs	r1, #120	; 0x78
 8001482:	4812      	ldr	r0, [pc, #72]	; (80014cc <FreqMenu_DrawPresetMenu+0x270>)
 8001484:	f00b ff5e 	bl	800d344 <ILI9341_Draw_Text>
				break;
 8001488:	f001 b974 	b.w	8002774 <FreqMenu_DrawPresetMenu+0x1518>
 800148c:	08010a6c 	.word	0x08010a6c
 8001490:	000124f8 	.word	0x000124f8
 8001494:	000186a0 	.word	0x000186a0
 8001498:	08010a80 	.word	0x08010a80
 800149c:	08010a88 	.word	0x08010a88
 80014a0:	08010a90 	.word	0x08010a90
 80014a4:	08010a98 	.word	0x08010a98
 80014a8:	08010aa0 	.word	0x08010aa0
 80014ac:	08010aa8 	.word	0x08010aa8
 80014b0:	08010ab0 	.word	0x08010ab0
 80014b4:	08010ab8 	.word	0x08010ab8
 80014b8:	08010ac0 	.word	0x08010ac0
 80014bc:	08010ac8 	.word	0x08010ac8
 80014c0:	08010ad0 	.word	0x08010ad0
 80014c4:	08010ad8 	.word	0x08010ad8
 80014c8:	08010ae0 	.word	0x08010ae0
 80014cc:	08010ae8 	.word	0x08010ae8
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014d8:	9301      	str	r3, [sp, #4]
 80014da:	2302      	movs	r3, #2
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	2300      	movs	r3, #0
 80014e0:	210a      	movs	r1, #10
 80014e2:	48a5      	ldr	r0, [pc, #660]	; (8001778 <FreqMenu_DrawPresetMenu+0x51c>)
 80014e4:	f00b ff2e 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, WHITE, 2, BLACK);
 80014e8:	7bbb      	ldrb	r3, [r7, #14]
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	2300      	movs	r3, #0
 80014ee:	9301      	str	r3, [sp, #4]
 80014f0:	2302      	movs	r3, #2
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014f8:	210a      	movs	r1, #10
 80014fa:	48a0      	ldr	r0, [pc, #640]	; (800177c <FreqMenu_DrawPresetMenu+0x520>)
 80014fc:	f00b ff22 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001500:	7b7b      	ldrb	r3, [r7, #13]
 8001502:	b29a      	uxth	r2, r3
 8001504:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001508:	9301      	str	r3, [sp, #4]
 800150a:	2302      	movs	r3, #2
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	2300      	movs	r3, #0
 8001510:	210a      	movs	r1, #10
 8001512:	489b      	ldr	r0, [pc, #620]	; (8001780 <FreqMenu_DrawPresetMenu+0x524>)
 8001514:	f00b ff16 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001518:	7b3b      	ldrb	r3, [r7, #12]
 800151a:	b29a      	uxth	r2, r3
 800151c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001520:	9301      	str	r3, [sp, #4]
 8001522:	2302      	movs	r3, #2
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	2300      	movs	r3, #0
 8001528:	210a      	movs	r1, #10
 800152a:	4896      	ldr	r0, [pc, #600]	; (8001784 <FreqMenu_DrawPresetMenu+0x528>)
 800152c:	f00b ff0a 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001530:	7afb      	ldrb	r3, [r7, #11]
 8001532:	b29a      	uxth	r2, r3
 8001534:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001538:	9301      	str	r3, [sp, #4]
 800153a:	2302      	movs	r3, #2
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	2300      	movs	r3, #0
 8001540:	210a      	movs	r1, #10
 8001542:	4891      	ldr	r0, [pc, #580]	; (8001788 <FreqMenu_DrawPresetMenu+0x52c>)
 8001544:	f00b fefe 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001548:	7abb      	ldrb	r3, [r7, #10]
 800154a:	b29a      	uxth	r2, r3
 800154c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001550:	9301      	str	r3, [sp, #4]
 8001552:	2302      	movs	r3, #2
 8001554:	9300      	str	r3, [sp, #0]
 8001556:	2300      	movs	r3, #0
 8001558:	210a      	movs	r1, #10
 800155a:	488c      	ldr	r0, [pc, #560]	; (800178c <FreqMenu_DrawPresetMenu+0x530>)
 800155c:	f00b fef2 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001560:	7a7b      	ldrb	r3, [r7, #9]
 8001562:	b29a      	uxth	r2, r3
 8001564:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001568:	9301      	str	r3, [sp, #4]
 800156a:	2302      	movs	r3, #2
 800156c:	9300      	str	r3, [sp, #0]
 800156e:	2300      	movs	r3, #0
 8001570:	210a      	movs	r1, #10
 8001572:	4887      	ldr	r0, [pc, #540]	; (8001790 <FreqMenu_DrawPresetMenu+0x534>)
 8001574:	f00b fee6 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001578:	7bfb      	ldrb	r3, [r7, #15]
 800157a:	b29a      	uxth	r2, r3
 800157c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001580:	9301      	str	r3, [sp, #4]
 8001582:	2302      	movs	r3, #2
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	2300      	movs	r3, #0
 8001588:	2178      	movs	r1, #120	; 0x78
 800158a:	4882      	ldr	r0, [pc, #520]	; (8001794 <FreqMenu_DrawPresetMenu+0x538>)
 800158c:	f00b feda 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001590:	7bbb      	ldrb	r3, [r7, #14]
 8001592:	b29a      	uxth	r2, r3
 8001594:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001598:	9301      	str	r3, [sp, #4]
 800159a:	2302      	movs	r3, #2
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	2300      	movs	r3, #0
 80015a0:	2178      	movs	r1, #120	; 0x78
 80015a2:	487d      	ldr	r0, [pc, #500]	; (8001798 <FreqMenu_DrawPresetMenu+0x53c>)
 80015a4:	f00b fece 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 80015a8:	7b7b      	ldrb	r3, [r7, #13]
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015b0:	9301      	str	r3, [sp, #4]
 80015b2:	2302      	movs	r3, #2
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	2300      	movs	r3, #0
 80015b8:	2178      	movs	r1, #120	; 0x78
 80015ba:	4878      	ldr	r0, [pc, #480]	; (800179c <FreqMenu_DrawPresetMenu+0x540>)
 80015bc:	f00b fec2 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80015c0:	7b3b      	ldrb	r3, [r7, #12]
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015c8:	9301      	str	r3, [sp, #4]
 80015ca:	2302      	movs	r3, #2
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	2300      	movs	r3, #0
 80015d0:	2178      	movs	r1, #120	; 0x78
 80015d2:	4873      	ldr	r0, [pc, #460]	; (80017a0 <FreqMenu_DrawPresetMenu+0x544>)
 80015d4:	f00b feb6 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 80015d8:	7afb      	ldrb	r3, [r7, #11]
 80015da:	b29a      	uxth	r2, r3
 80015dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015e0:	9301      	str	r3, [sp, #4]
 80015e2:	2302      	movs	r3, #2
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	2300      	movs	r3, #0
 80015e8:	2178      	movs	r1, #120	; 0x78
 80015ea:	486e      	ldr	r0, [pc, #440]	; (80017a4 <FreqMenu_DrawPresetMenu+0x548>)
 80015ec:	f00b feaa 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 80015f0:	7abb      	ldrb	r3, [r7, #10]
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015f8:	9301      	str	r3, [sp, #4]
 80015fa:	2302      	movs	r3, #2
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2300      	movs	r3, #0
 8001600:	2178      	movs	r1, #120	; 0x78
 8001602:	4869      	ldr	r0, [pc, #420]	; (80017a8 <FreqMenu_DrawPresetMenu+0x54c>)
 8001604:	f00b fe9e 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001608:	7a7b      	ldrb	r3, [r7, #9]
 800160a:	b29a      	uxth	r2, r3
 800160c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001610:	9301      	str	r3, [sp, #4]
 8001612:	2302      	movs	r3, #2
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	2300      	movs	r3, #0
 8001618:	2178      	movs	r1, #120	; 0x78
 800161a:	4864      	ldr	r0, [pc, #400]	; (80017ac <FreqMenu_DrawPresetMenu+0x550>)
 800161c:	f00b fe92 	bl	800d344 <ILI9341_Draw_Text>
				break;
 8001620:	f001 b8a8 	b.w	8002774 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001624:	7bfb      	ldrb	r3, [r7, #15]
 8001626:	b29a      	uxth	r2, r3
 8001628:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800162c:	9301      	str	r3, [sp, #4]
 800162e:	2302      	movs	r3, #2
 8001630:	9300      	str	r3, [sp, #0]
 8001632:	2300      	movs	r3, #0
 8001634:	210a      	movs	r1, #10
 8001636:	4850      	ldr	r0, [pc, #320]	; (8001778 <FreqMenu_DrawPresetMenu+0x51c>)
 8001638:	f00b fe84 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 800163c:	7bbb      	ldrb	r3, [r7, #14]
 800163e:	b29a      	uxth	r2, r3
 8001640:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001644:	9301      	str	r3, [sp, #4]
 8001646:	2302      	movs	r3, #2
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	2300      	movs	r3, #0
 800164c:	210a      	movs	r1, #10
 800164e:	484b      	ldr	r0, [pc, #300]	; (800177c <FreqMenu_DrawPresetMenu+0x520>)
 8001650:	f00b fe78 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, WHITE, 2, BLACK);
 8001654:	7b7b      	ldrb	r3, [r7, #13]
 8001656:	b29a      	uxth	r2, r3
 8001658:	2300      	movs	r3, #0
 800165a:	9301      	str	r3, [sp, #4]
 800165c:	2302      	movs	r3, #2
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001664:	210a      	movs	r1, #10
 8001666:	4846      	ldr	r0, [pc, #280]	; (8001780 <FreqMenu_DrawPresetMenu+0x524>)
 8001668:	f00b fe6c 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 800166c:	7b3b      	ldrb	r3, [r7, #12]
 800166e:	b29a      	uxth	r2, r3
 8001670:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001674:	9301      	str	r3, [sp, #4]
 8001676:	2302      	movs	r3, #2
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	2300      	movs	r3, #0
 800167c:	210a      	movs	r1, #10
 800167e:	4841      	ldr	r0, [pc, #260]	; (8001784 <FreqMenu_DrawPresetMenu+0x528>)
 8001680:	f00b fe60 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001684:	7afb      	ldrb	r3, [r7, #11]
 8001686:	b29a      	uxth	r2, r3
 8001688:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800168c:	9301      	str	r3, [sp, #4]
 800168e:	2302      	movs	r3, #2
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	2300      	movs	r3, #0
 8001694:	210a      	movs	r1, #10
 8001696:	483c      	ldr	r0, [pc, #240]	; (8001788 <FreqMenu_DrawPresetMenu+0x52c>)
 8001698:	f00b fe54 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 800169c:	7abb      	ldrb	r3, [r7, #10]
 800169e:	b29a      	uxth	r2, r3
 80016a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016a4:	9301      	str	r3, [sp, #4]
 80016a6:	2302      	movs	r3, #2
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	2300      	movs	r3, #0
 80016ac:	210a      	movs	r1, #10
 80016ae:	4837      	ldr	r0, [pc, #220]	; (800178c <FreqMenu_DrawPresetMenu+0x530>)
 80016b0:	f00b fe48 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 80016b4:	7a7b      	ldrb	r3, [r7, #9]
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016bc:	9301      	str	r3, [sp, #4]
 80016be:	2302      	movs	r3, #2
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	2300      	movs	r3, #0
 80016c4:	210a      	movs	r1, #10
 80016c6:	4832      	ldr	r0, [pc, #200]	; (8001790 <FreqMenu_DrawPresetMenu+0x534>)
 80016c8:	f00b fe3c 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 80016cc:	7bfb      	ldrb	r3, [r7, #15]
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016d4:	9301      	str	r3, [sp, #4]
 80016d6:	2302      	movs	r3, #2
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	2300      	movs	r3, #0
 80016dc:	2178      	movs	r1, #120	; 0x78
 80016de:	482d      	ldr	r0, [pc, #180]	; (8001794 <FreqMenu_DrawPresetMenu+0x538>)
 80016e0:	f00b fe30 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80016e4:	7bbb      	ldrb	r3, [r7, #14]
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016ec:	9301      	str	r3, [sp, #4]
 80016ee:	2302      	movs	r3, #2
 80016f0:	9300      	str	r3, [sp, #0]
 80016f2:	2300      	movs	r3, #0
 80016f4:	2178      	movs	r1, #120	; 0x78
 80016f6:	4828      	ldr	r0, [pc, #160]	; (8001798 <FreqMenu_DrawPresetMenu+0x53c>)
 80016f8:	f00b fe24 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 80016fc:	7b7b      	ldrb	r3, [r7, #13]
 80016fe:	b29a      	uxth	r2, r3
 8001700:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001704:	9301      	str	r3, [sp, #4]
 8001706:	2302      	movs	r3, #2
 8001708:	9300      	str	r3, [sp, #0]
 800170a:	2300      	movs	r3, #0
 800170c:	2178      	movs	r1, #120	; 0x78
 800170e:	4823      	ldr	r0, [pc, #140]	; (800179c <FreqMenu_DrawPresetMenu+0x540>)
 8001710:	f00b fe18 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001714:	7b3b      	ldrb	r3, [r7, #12]
 8001716:	b29a      	uxth	r2, r3
 8001718:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800171c:	9301      	str	r3, [sp, #4]
 800171e:	2302      	movs	r3, #2
 8001720:	9300      	str	r3, [sp, #0]
 8001722:	2300      	movs	r3, #0
 8001724:	2178      	movs	r1, #120	; 0x78
 8001726:	481e      	ldr	r0, [pc, #120]	; (80017a0 <FreqMenu_DrawPresetMenu+0x544>)
 8001728:	f00b fe0c 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 800172c:	7afb      	ldrb	r3, [r7, #11]
 800172e:	b29a      	uxth	r2, r3
 8001730:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001734:	9301      	str	r3, [sp, #4]
 8001736:	2302      	movs	r3, #2
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	2300      	movs	r3, #0
 800173c:	2178      	movs	r1, #120	; 0x78
 800173e:	4819      	ldr	r0, [pc, #100]	; (80017a4 <FreqMenu_DrawPresetMenu+0x548>)
 8001740:	f00b fe00 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001744:	7abb      	ldrb	r3, [r7, #10]
 8001746:	b29a      	uxth	r2, r3
 8001748:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800174c:	9301      	str	r3, [sp, #4]
 800174e:	2302      	movs	r3, #2
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	2300      	movs	r3, #0
 8001754:	2178      	movs	r1, #120	; 0x78
 8001756:	4814      	ldr	r0, [pc, #80]	; (80017a8 <FreqMenu_DrawPresetMenu+0x54c>)
 8001758:	f00b fdf4 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 800175c:	7a7b      	ldrb	r3, [r7, #9]
 800175e:	b29a      	uxth	r2, r3
 8001760:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001764:	9301      	str	r3, [sp, #4]
 8001766:	2302      	movs	r3, #2
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	2300      	movs	r3, #0
 800176c:	2178      	movs	r1, #120	; 0x78
 800176e:	480f      	ldr	r0, [pc, #60]	; (80017ac <FreqMenu_DrawPresetMenu+0x550>)
 8001770:	f00b fde8 	bl	800d344 <ILI9341_Draw_Text>
				break;
 8001774:	f000 bffe 	b.w	8002774 <FreqMenu_DrawPresetMenu+0x1518>
 8001778:	08010a80 	.word	0x08010a80
 800177c:	08010a88 	.word	0x08010a88
 8001780:	08010a90 	.word	0x08010a90
 8001784:	08010a98 	.word	0x08010a98
 8001788:	08010aa0 	.word	0x08010aa0
 800178c:	08010aa8 	.word	0x08010aa8
 8001790:	08010ab0 	.word	0x08010ab0
 8001794:	08010ab8 	.word	0x08010ab8
 8001798:	08010ac0 	.word	0x08010ac0
 800179c:	08010ac8 	.word	0x08010ac8
 80017a0:	08010ad0 	.word	0x08010ad0
 80017a4:	08010ad8 	.word	0x08010ad8
 80017a8:	08010ae0 	.word	0x08010ae0
 80017ac:	08010ae8 	.word	0x08010ae8
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017b8:	9301      	str	r3, [sp, #4]
 80017ba:	2302      	movs	r3, #2
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	2300      	movs	r3, #0
 80017c0:	210a      	movs	r1, #10
 80017c2:	48a5      	ldr	r0, [pc, #660]	; (8001a58 <FreqMenu_DrawPresetMenu+0x7fc>)
 80017c4:	f00b fdbe 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 80017c8:	7bbb      	ldrb	r3, [r7, #14]
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017d0:	9301      	str	r3, [sp, #4]
 80017d2:	2302      	movs	r3, #2
 80017d4:	9300      	str	r3, [sp, #0]
 80017d6:	2300      	movs	r3, #0
 80017d8:	210a      	movs	r1, #10
 80017da:	48a0      	ldr	r0, [pc, #640]	; (8001a5c <FreqMenu_DrawPresetMenu+0x800>)
 80017dc:	f00b fdb2 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 80017e0:	7b7b      	ldrb	r3, [r7, #13]
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017e8:	9301      	str	r3, [sp, #4]
 80017ea:	2302      	movs	r3, #2
 80017ec:	9300      	str	r3, [sp, #0]
 80017ee:	2300      	movs	r3, #0
 80017f0:	210a      	movs	r1, #10
 80017f2:	489b      	ldr	r0, [pc, #620]	; (8001a60 <FreqMenu_DrawPresetMenu+0x804>)
 80017f4:	f00b fda6 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, WHITE, 2, BLACK);
 80017f8:	7b3b      	ldrb	r3, [r7, #12]
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	2300      	movs	r3, #0
 80017fe:	9301      	str	r3, [sp, #4]
 8001800:	2302      	movs	r3, #2
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001808:	210a      	movs	r1, #10
 800180a:	4896      	ldr	r0, [pc, #600]	; (8001a64 <FreqMenu_DrawPresetMenu+0x808>)
 800180c:	f00b fd9a 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001810:	7afb      	ldrb	r3, [r7, #11]
 8001812:	b29a      	uxth	r2, r3
 8001814:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001818:	9301      	str	r3, [sp, #4]
 800181a:	2302      	movs	r3, #2
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	2300      	movs	r3, #0
 8001820:	210a      	movs	r1, #10
 8001822:	4891      	ldr	r0, [pc, #580]	; (8001a68 <FreqMenu_DrawPresetMenu+0x80c>)
 8001824:	f00b fd8e 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001828:	7abb      	ldrb	r3, [r7, #10]
 800182a:	b29a      	uxth	r2, r3
 800182c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001830:	9301      	str	r3, [sp, #4]
 8001832:	2302      	movs	r3, #2
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	2300      	movs	r3, #0
 8001838:	210a      	movs	r1, #10
 800183a:	488c      	ldr	r0, [pc, #560]	; (8001a6c <FreqMenu_DrawPresetMenu+0x810>)
 800183c:	f00b fd82 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001840:	7a7b      	ldrb	r3, [r7, #9]
 8001842:	b29a      	uxth	r2, r3
 8001844:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001848:	9301      	str	r3, [sp, #4]
 800184a:	2302      	movs	r3, #2
 800184c:	9300      	str	r3, [sp, #0]
 800184e:	2300      	movs	r3, #0
 8001850:	210a      	movs	r1, #10
 8001852:	4887      	ldr	r0, [pc, #540]	; (8001a70 <FreqMenu_DrawPresetMenu+0x814>)
 8001854:	f00b fd76 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	b29a      	uxth	r2, r3
 800185c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001860:	9301      	str	r3, [sp, #4]
 8001862:	2302      	movs	r3, #2
 8001864:	9300      	str	r3, [sp, #0]
 8001866:	2300      	movs	r3, #0
 8001868:	2178      	movs	r1, #120	; 0x78
 800186a:	4882      	ldr	r0, [pc, #520]	; (8001a74 <FreqMenu_DrawPresetMenu+0x818>)
 800186c:	f00b fd6a 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001870:	7bbb      	ldrb	r3, [r7, #14]
 8001872:	b29a      	uxth	r2, r3
 8001874:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001878:	9301      	str	r3, [sp, #4]
 800187a:	2302      	movs	r3, #2
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	2300      	movs	r3, #0
 8001880:	2178      	movs	r1, #120	; 0x78
 8001882:	487d      	ldr	r0, [pc, #500]	; (8001a78 <FreqMenu_DrawPresetMenu+0x81c>)
 8001884:	f00b fd5e 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001888:	7b7b      	ldrb	r3, [r7, #13]
 800188a:	b29a      	uxth	r2, r3
 800188c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001890:	9301      	str	r3, [sp, #4]
 8001892:	2302      	movs	r3, #2
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	2300      	movs	r3, #0
 8001898:	2178      	movs	r1, #120	; 0x78
 800189a:	4878      	ldr	r0, [pc, #480]	; (8001a7c <FreqMenu_DrawPresetMenu+0x820>)
 800189c:	f00b fd52 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80018a0:	7b3b      	ldrb	r3, [r7, #12]
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018a8:	9301      	str	r3, [sp, #4]
 80018aa:	2302      	movs	r3, #2
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	2300      	movs	r3, #0
 80018b0:	2178      	movs	r1, #120	; 0x78
 80018b2:	4873      	ldr	r0, [pc, #460]	; (8001a80 <FreqMenu_DrawPresetMenu+0x824>)
 80018b4:	f00b fd46 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 80018b8:	7afb      	ldrb	r3, [r7, #11]
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018c0:	9301      	str	r3, [sp, #4]
 80018c2:	2302      	movs	r3, #2
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	2300      	movs	r3, #0
 80018c8:	2178      	movs	r1, #120	; 0x78
 80018ca:	486e      	ldr	r0, [pc, #440]	; (8001a84 <FreqMenu_DrawPresetMenu+0x828>)
 80018cc:	f00b fd3a 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 80018d0:	7abb      	ldrb	r3, [r7, #10]
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018d8:	9301      	str	r3, [sp, #4]
 80018da:	2302      	movs	r3, #2
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	2300      	movs	r3, #0
 80018e0:	2178      	movs	r1, #120	; 0x78
 80018e2:	4869      	ldr	r0, [pc, #420]	; (8001a88 <FreqMenu_DrawPresetMenu+0x82c>)
 80018e4:	f00b fd2e 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80018e8:	7a7b      	ldrb	r3, [r7, #9]
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018f0:	9301      	str	r3, [sp, #4]
 80018f2:	2302      	movs	r3, #2
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	2300      	movs	r3, #0
 80018f8:	2178      	movs	r1, #120	; 0x78
 80018fa:	4864      	ldr	r0, [pc, #400]	; (8001a8c <FreqMenu_DrawPresetMenu+0x830>)
 80018fc:	f00b fd22 	bl	800d344 <ILI9341_Draw_Text>
				break;
 8001900:	f000 bf38 	b.w	8002774 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001904:	7bfb      	ldrb	r3, [r7, #15]
 8001906:	b29a      	uxth	r2, r3
 8001908:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800190c:	9301      	str	r3, [sp, #4]
 800190e:	2302      	movs	r3, #2
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	2300      	movs	r3, #0
 8001914:	210a      	movs	r1, #10
 8001916:	4850      	ldr	r0, [pc, #320]	; (8001a58 <FreqMenu_DrawPresetMenu+0x7fc>)
 8001918:	f00b fd14 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 800191c:	7bbb      	ldrb	r3, [r7, #14]
 800191e:	b29a      	uxth	r2, r3
 8001920:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001924:	9301      	str	r3, [sp, #4]
 8001926:	2302      	movs	r3, #2
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	2300      	movs	r3, #0
 800192c:	210a      	movs	r1, #10
 800192e:	484b      	ldr	r0, [pc, #300]	; (8001a5c <FreqMenu_DrawPresetMenu+0x800>)
 8001930:	f00b fd08 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001934:	7b7b      	ldrb	r3, [r7, #13]
 8001936:	b29a      	uxth	r2, r3
 8001938:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800193c:	9301      	str	r3, [sp, #4]
 800193e:	2302      	movs	r3, #2
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	2300      	movs	r3, #0
 8001944:	210a      	movs	r1, #10
 8001946:	4846      	ldr	r0, [pc, #280]	; (8001a60 <FreqMenu_DrawPresetMenu+0x804>)
 8001948:	f00b fcfc 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 800194c:	7b3b      	ldrb	r3, [r7, #12]
 800194e:	b29a      	uxth	r2, r3
 8001950:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001954:	9301      	str	r3, [sp, #4]
 8001956:	2302      	movs	r3, #2
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	2300      	movs	r3, #0
 800195c:	210a      	movs	r1, #10
 800195e:	4841      	ldr	r0, [pc, #260]	; (8001a64 <FreqMenu_DrawPresetMenu+0x808>)
 8001960:	f00b fcf0 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, WHITE, 2, BLACK);
 8001964:	7afb      	ldrb	r3, [r7, #11]
 8001966:	b29a      	uxth	r2, r3
 8001968:	2300      	movs	r3, #0
 800196a:	9301      	str	r3, [sp, #4]
 800196c:	2302      	movs	r3, #2
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001974:	210a      	movs	r1, #10
 8001976:	483c      	ldr	r0, [pc, #240]	; (8001a68 <FreqMenu_DrawPresetMenu+0x80c>)
 8001978:	f00b fce4 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 800197c:	7abb      	ldrb	r3, [r7, #10]
 800197e:	b29a      	uxth	r2, r3
 8001980:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001984:	9301      	str	r3, [sp, #4]
 8001986:	2302      	movs	r3, #2
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	2300      	movs	r3, #0
 800198c:	210a      	movs	r1, #10
 800198e:	4837      	ldr	r0, [pc, #220]	; (8001a6c <FreqMenu_DrawPresetMenu+0x810>)
 8001990:	f00b fcd8 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001994:	7a7b      	ldrb	r3, [r7, #9]
 8001996:	b29a      	uxth	r2, r3
 8001998:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800199c:	9301      	str	r3, [sp, #4]
 800199e:	2302      	movs	r3, #2
 80019a0:	9300      	str	r3, [sp, #0]
 80019a2:	2300      	movs	r3, #0
 80019a4:	210a      	movs	r1, #10
 80019a6:	4832      	ldr	r0, [pc, #200]	; (8001a70 <FreqMenu_DrawPresetMenu+0x814>)
 80019a8:	f00b fccc 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019b4:	9301      	str	r3, [sp, #4]
 80019b6:	2302      	movs	r3, #2
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	2300      	movs	r3, #0
 80019bc:	2178      	movs	r1, #120	; 0x78
 80019be:	482d      	ldr	r0, [pc, #180]	; (8001a74 <FreqMenu_DrawPresetMenu+0x818>)
 80019c0:	f00b fcc0 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80019c4:	7bbb      	ldrb	r3, [r7, #14]
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019cc:	9301      	str	r3, [sp, #4]
 80019ce:	2302      	movs	r3, #2
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	2300      	movs	r3, #0
 80019d4:	2178      	movs	r1, #120	; 0x78
 80019d6:	4828      	ldr	r0, [pc, #160]	; (8001a78 <FreqMenu_DrawPresetMenu+0x81c>)
 80019d8:	f00b fcb4 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 80019dc:	7b7b      	ldrb	r3, [r7, #13]
 80019de:	b29a      	uxth	r2, r3
 80019e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019e4:	9301      	str	r3, [sp, #4]
 80019e6:	2302      	movs	r3, #2
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	2300      	movs	r3, #0
 80019ec:	2178      	movs	r1, #120	; 0x78
 80019ee:	4823      	ldr	r0, [pc, #140]	; (8001a7c <FreqMenu_DrawPresetMenu+0x820>)
 80019f0:	f00b fca8 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80019f4:	7b3b      	ldrb	r3, [r7, #12]
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019fc:	9301      	str	r3, [sp, #4]
 80019fe:	2302      	movs	r3, #2
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	2300      	movs	r3, #0
 8001a04:	2178      	movs	r1, #120	; 0x78
 8001a06:	481e      	ldr	r0, [pc, #120]	; (8001a80 <FreqMenu_DrawPresetMenu+0x824>)
 8001a08:	f00b fc9c 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001a0c:	7afb      	ldrb	r3, [r7, #11]
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a14:	9301      	str	r3, [sp, #4]
 8001a16:	2302      	movs	r3, #2
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	2178      	movs	r1, #120	; 0x78
 8001a1e:	4819      	ldr	r0, [pc, #100]	; (8001a84 <FreqMenu_DrawPresetMenu+0x828>)
 8001a20:	f00b fc90 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001a24:	7abb      	ldrb	r3, [r7, #10]
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a2c:	9301      	str	r3, [sp, #4]
 8001a2e:	2302      	movs	r3, #2
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	2300      	movs	r3, #0
 8001a34:	2178      	movs	r1, #120	; 0x78
 8001a36:	4814      	ldr	r0, [pc, #80]	; (8001a88 <FreqMenu_DrawPresetMenu+0x82c>)
 8001a38:	f00b fc84 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001a3c:	7a7b      	ldrb	r3, [r7, #9]
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a44:	9301      	str	r3, [sp, #4]
 8001a46:	2302      	movs	r3, #2
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	2178      	movs	r1, #120	; 0x78
 8001a4e:	480f      	ldr	r0, [pc, #60]	; (8001a8c <FreqMenu_DrawPresetMenu+0x830>)
 8001a50:	f00b fc78 	bl	800d344 <ILI9341_Draw_Text>
				break;
 8001a54:	f000 be8e 	b.w	8002774 <FreqMenu_DrawPresetMenu+0x1518>
 8001a58:	08010a80 	.word	0x08010a80
 8001a5c:	08010a88 	.word	0x08010a88
 8001a60:	08010a90 	.word	0x08010a90
 8001a64:	08010a98 	.word	0x08010a98
 8001a68:	08010aa0 	.word	0x08010aa0
 8001a6c:	08010aa8 	.word	0x08010aa8
 8001a70:	08010ab0 	.word	0x08010ab0
 8001a74:	08010ab8 	.word	0x08010ab8
 8001a78:	08010ac0 	.word	0x08010ac0
 8001a7c:	08010ac8 	.word	0x08010ac8
 8001a80:	08010ad0 	.word	0x08010ad0
 8001a84:	08010ad8 	.word	0x08010ad8
 8001a88:	08010ae0 	.word	0x08010ae0
 8001a8c:	08010ae8 	.word	0x08010ae8
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a98:	9301      	str	r3, [sp, #4]
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	210a      	movs	r1, #10
 8001aa2:	48a5      	ldr	r0, [pc, #660]	; (8001d38 <FreqMenu_DrawPresetMenu+0xadc>)
 8001aa4:	f00b fc4e 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001aa8:	7bbb      	ldrb	r3, [r7, #14]
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ab0:	9301      	str	r3, [sp, #4]
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	210a      	movs	r1, #10
 8001aba:	48a0      	ldr	r0, [pc, #640]	; (8001d3c <FreqMenu_DrawPresetMenu+0xae0>)
 8001abc:	f00b fc42 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001ac0:	7b7b      	ldrb	r3, [r7, #13]
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ac8:	9301      	str	r3, [sp, #4]
 8001aca:	2302      	movs	r3, #2
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	2300      	movs	r3, #0
 8001ad0:	210a      	movs	r1, #10
 8001ad2:	489b      	ldr	r0, [pc, #620]	; (8001d40 <FreqMenu_DrawPresetMenu+0xae4>)
 8001ad4:	f00b fc36 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001ad8:	7b3b      	ldrb	r3, [r7, #12]
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ae0:	9301      	str	r3, [sp, #4]
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	210a      	movs	r1, #10
 8001aea:	4896      	ldr	r0, [pc, #600]	; (8001d44 <FreqMenu_DrawPresetMenu+0xae8>)
 8001aec:	f00b fc2a 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001af0:	7afb      	ldrb	r3, [r7, #11]
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001af8:	9301      	str	r3, [sp, #4]
 8001afa:	2302      	movs	r3, #2
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	2300      	movs	r3, #0
 8001b00:	210a      	movs	r1, #10
 8001b02:	4891      	ldr	r0, [pc, #580]	; (8001d48 <FreqMenu_DrawPresetMenu+0xaec>)
 8001b04:	f00b fc1e 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, WHITE, 2, BLACK);
 8001b08:	7abb      	ldrb	r3, [r7, #10]
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	9301      	str	r3, [sp, #4]
 8001b10:	2302      	movs	r3, #2
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b18:	210a      	movs	r1, #10
 8001b1a:	488c      	ldr	r0, [pc, #560]	; (8001d4c <FreqMenu_DrawPresetMenu+0xaf0>)
 8001b1c:	f00b fc12 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001b20:	7a7b      	ldrb	r3, [r7, #9]
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b28:	9301      	str	r3, [sp, #4]
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	2300      	movs	r3, #0
 8001b30:	210a      	movs	r1, #10
 8001b32:	4887      	ldr	r0, [pc, #540]	; (8001d50 <FreqMenu_DrawPresetMenu+0xaf4>)
 8001b34:	f00b fc06 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b40:	9301      	str	r3, [sp, #4]
 8001b42:	2302      	movs	r3, #2
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	2300      	movs	r3, #0
 8001b48:	2178      	movs	r1, #120	; 0x78
 8001b4a:	4882      	ldr	r0, [pc, #520]	; (8001d54 <FreqMenu_DrawPresetMenu+0xaf8>)
 8001b4c:	f00b fbfa 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001b50:	7bbb      	ldrb	r3, [r7, #14]
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b58:	9301      	str	r3, [sp, #4]
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	2300      	movs	r3, #0
 8001b60:	2178      	movs	r1, #120	; 0x78
 8001b62:	487d      	ldr	r0, [pc, #500]	; (8001d58 <FreqMenu_DrawPresetMenu+0xafc>)
 8001b64:	f00b fbee 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001b68:	7b7b      	ldrb	r3, [r7, #13]
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b70:	9301      	str	r3, [sp, #4]
 8001b72:	2302      	movs	r3, #2
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	2300      	movs	r3, #0
 8001b78:	2178      	movs	r1, #120	; 0x78
 8001b7a:	4878      	ldr	r0, [pc, #480]	; (8001d5c <FreqMenu_DrawPresetMenu+0xb00>)
 8001b7c:	f00b fbe2 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001b80:	7b3b      	ldrb	r3, [r7, #12]
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b88:	9301      	str	r3, [sp, #4]
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	2300      	movs	r3, #0
 8001b90:	2178      	movs	r1, #120	; 0x78
 8001b92:	4873      	ldr	r0, [pc, #460]	; (8001d60 <FreqMenu_DrawPresetMenu+0xb04>)
 8001b94:	f00b fbd6 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001b98:	7afb      	ldrb	r3, [r7, #11]
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ba0:	9301      	str	r3, [sp, #4]
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	2178      	movs	r1, #120	; 0x78
 8001baa:	486e      	ldr	r0, [pc, #440]	; (8001d64 <FreqMenu_DrawPresetMenu+0xb08>)
 8001bac:	f00b fbca 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001bb0:	7abb      	ldrb	r3, [r7, #10]
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bb8:	9301      	str	r3, [sp, #4]
 8001bba:	2302      	movs	r3, #2
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	2178      	movs	r1, #120	; 0x78
 8001bc2:	4869      	ldr	r0, [pc, #420]	; (8001d68 <FreqMenu_DrawPresetMenu+0xb0c>)
 8001bc4:	f00b fbbe 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001bc8:	7a7b      	ldrb	r3, [r7, #9]
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bd0:	9301      	str	r3, [sp, #4]
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	2178      	movs	r1, #120	; 0x78
 8001bda:	4864      	ldr	r0, [pc, #400]	; (8001d6c <FreqMenu_DrawPresetMenu+0xb10>)
 8001bdc:	f00b fbb2 	bl	800d344 <ILI9341_Draw_Text>
				break;
 8001be0:	f000 bdc8 	b.w	8002774 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bec:	9301      	str	r3, [sp, #4]
 8001bee:	2302      	movs	r3, #2
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	210a      	movs	r1, #10
 8001bf6:	4850      	ldr	r0, [pc, #320]	; (8001d38 <FreqMenu_DrawPresetMenu+0xadc>)
 8001bf8:	f00b fba4 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001bfc:	7bbb      	ldrb	r3, [r7, #14]
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c04:	9301      	str	r3, [sp, #4]
 8001c06:	2302      	movs	r3, #2
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	210a      	movs	r1, #10
 8001c0e:	484b      	ldr	r0, [pc, #300]	; (8001d3c <FreqMenu_DrawPresetMenu+0xae0>)
 8001c10:	f00b fb98 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001c14:	7b7b      	ldrb	r3, [r7, #13]
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c1c:	9301      	str	r3, [sp, #4]
 8001c1e:	2302      	movs	r3, #2
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	2300      	movs	r3, #0
 8001c24:	210a      	movs	r1, #10
 8001c26:	4846      	ldr	r0, [pc, #280]	; (8001d40 <FreqMenu_DrawPresetMenu+0xae4>)
 8001c28:	f00b fb8c 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001c2c:	7b3b      	ldrb	r3, [r7, #12]
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c34:	9301      	str	r3, [sp, #4]
 8001c36:	2302      	movs	r3, #2
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	210a      	movs	r1, #10
 8001c3e:	4841      	ldr	r0, [pc, #260]	; (8001d44 <FreqMenu_DrawPresetMenu+0xae8>)
 8001c40:	f00b fb80 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001c44:	7afb      	ldrb	r3, [r7, #11]
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c4c:	9301      	str	r3, [sp, #4]
 8001c4e:	2302      	movs	r3, #2
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	2300      	movs	r3, #0
 8001c54:	210a      	movs	r1, #10
 8001c56:	483c      	ldr	r0, [pc, #240]	; (8001d48 <FreqMenu_DrawPresetMenu+0xaec>)
 8001c58:	f00b fb74 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001c5c:	7abb      	ldrb	r3, [r7, #10]
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c64:	9301      	str	r3, [sp, #4]
 8001c66:	2302      	movs	r3, #2
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	210a      	movs	r1, #10
 8001c6e:	4837      	ldr	r0, [pc, #220]	; (8001d4c <FreqMenu_DrawPresetMenu+0xaf0>)
 8001c70:	f00b fb68 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, WHITE, 2, BLACK);
 8001c74:	7a7b      	ldrb	r3, [r7, #9]
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	2300      	movs	r3, #0
 8001c7a:	9301      	str	r3, [sp, #4]
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c84:	210a      	movs	r1, #10
 8001c86:	4832      	ldr	r0, [pc, #200]	; (8001d50 <FreqMenu_DrawPresetMenu+0xaf4>)
 8001c88:	f00b fb5c 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001c8c:	7bfb      	ldrb	r3, [r7, #15]
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c94:	9301      	str	r3, [sp, #4]
 8001c96:	2302      	movs	r3, #2
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	2178      	movs	r1, #120	; 0x78
 8001c9e:	482d      	ldr	r0, [pc, #180]	; (8001d54 <FreqMenu_DrawPresetMenu+0xaf8>)
 8001ca0:	f00b fb50 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001ca4:	7bbb      	ldrb	r3, [r7, #14]
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cac:	9301      	str	r3, [sp, #4]
 8001cae:	2302      	movs	r3, #2
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	2178      	movs	r1, #120	; 0x78
 8001cb6:	4828      	ldr	r0, [pc, #160]	; (8001d58 <FreqMenu_DrawPresetMenu+0xafc>)
 8001cb8:	f00b fb44 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001cbc:	7b7b      	ldrb	r3, [r7, #13]
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cc4:	9301      	str	r3, [sp, #4]
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	2300      	movs	r3, #0
 8001ccc:	2178      	movs	r1, #120	; 0x78
 8001cce:	4823      	ldr	r0, [pc, #140]	; (8001d5c <FreqMenu_DrawPresetMenu+0xb00>)
 8001cd0:	f00b fb38 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001cd4:	7b3b      	ldrb	r3, [r7, #12]
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cdc:	9301      	str	r3, [sp, #4]
 8001cde:	2302      	movs	r3, #2
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	2178      	movs	r1, #120	; 0x78
 8001ce6:	481e      	ldr	r0, [pc, #120]	; (8001d60 <FreqMenu_DrawPresetMenu+0xb04>)
 8001ce8:	f00b fb2c 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001cec:	7afb      	ldrb	r3, [r7, #11]
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cf4:	9301      	str	r3, [sp, #4]
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	2178      	movs	r1, #120	; 0x78
 8001cfe:	4819      	ldr	r0, [pc, #100]	; (8001d64 <FreqMenu_DrawPresetMenu+0xb08>)
 8001d00:	f00b fb20 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001d04:	7abb      	ldrb	r3, [r7, #10]
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d0c:	9301      	str	r3, [sp, #4]
 8001d0e:	2302      	movs	r3, #2
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	2300      	movs	r3, #0
 8001d14:	2178      	movs	r1, #120	; 0x78
 8001d16:	4814      	ldr	r0, [pc, #80]	; (8001d68 <FreqMenu_DrawPresetMenu+0xb0c>)
 8001d18:	f00b fb14 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001d1c:	7a7b      	ldrb	r3, [r7, #9]
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d24:	9301      	str	r3, [sp, #4]
 8001d26:	2302      	movs	r3, #2
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	2178      	movs	r1, #120	; 0x78
 8001d2e:	480f      	ldr	r0, [pc, #60]	; (8001d6c <FreqMenu_DrawPresetMenu+0xb10>)
 8001d30:	f00b fb08 	bl	800d344 <ILI9341_Draw_Text>
				break;
 8001d34:	f000 bd1e 	b.w	8002774 <FreqMenu_DrawPresetMenu+0x1518>
 8001d38:	08010a80 	.word	0x08010a80
 8001d3c:	08010a88 	.word	0x08010a88
 8001d40:	08010a90 	.word	0x08010a90
 8001d44:	08010a98 	.word	0x08010a98
 8001d48:	08010aa0 	.word	0x08010aa0
 8001d4c:	08010aa8 	.word	0x08010aa8
 8001d50:	08010ab0 	.word	0x08010ab0
 8001d54:	08010ab8 	.word	0x08010ab8
 8001d58:	08010ac0 	.word	0x08010ac0
 8001d5c:	08010ac8 	.word	0x08010ac8
 8001d60:	08010ad0 	.word	0x08010ad0
 8001d64:	08010ad8 	.word	0x08010ad8
 8001d68:	08010ae0 	.word	0x08010ae0
 8001d6c:	08010ae8 	.word	0x08010ae8
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001d70:	7bfb      	ldrb	r3, [r7, #15]
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d78:	9301      	str	r3, [sp, #4]
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	2300      	movs	r3, #0
 8001d80:	210a      	movs	r1, #10
 8001d82:	48a5      	ldr	r0, [pc, #660]	; (8002018 <FreqMenu_DrawPresetMenu+0xdbc>)
 8001d84:	f00b fade 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001d88:	7bbb      	ldrb	r3, [r7, #14]
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d90:	9301      	str	r3, [sp, #4]
 8001d92:	2302      	movs	r3, #2
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	2300      	movs	r3, #0
 8001d98:	210a      	movs	r1, #10
 8001d9a:	48a0      	ldr	r0, [pc, #640]	; (800201c <FreqMenu_DrawPresetMenu+0xdc0>)
 8001d9c:	f00b fad2 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001da0:	7b7b      	ldrb	r3, [r7, #13]
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001da8:	9301      	str	r3, [sp, #4]
 8001daa:	2302      	movs	r3, #2
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	2300      	movs	r3, #0
 8001db0:	210a      	movs	r1, #10
 8001db2:	489b      	ldr	r0, [pc, #620]	; (8002020 <FreqMenu_DrawPresetMenu+0xdc4>)
 8001db4:	f00b fac6 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001db8:	7b3b      	ldrb	r3, [r7, #12]
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dc0:	9301      	str	r3, [sp, #4]
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	210a      	movs	r1, #10
 8001dca:	4896      	ldr	r0, [pc, #600]	; (8002024 <FreqMenu_DrawPresetMenu+0xdc8>)
 8001dcc:	f00b faba 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001dd0:	7afb      	ldrb	r3, [r7, #11]
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dd8:	9301      	str	r3, [sp, #4]
 8001dda:	2302      	movs	r3, #2
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	2300      	movs	r3, #0
 8001de0:	210a      	movs	r1, #10
 8001de2:	4891      	ldr	r0, [pc, #580]	; (8002028 <FreqMenu_DrawPresetMenu+0xdcc>)
 8001de4:	f00b faae 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001de8:	7abb      	ldrb	r3, [r7, #10]
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001df0:	9301      	str	r3, [sp, #4]
 8001df2:	2302      	movs	r3, #2
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	2300      	movs	r3, #0
 8001df8:	210a      	movs	r1, #10
 8001dfa:	488c      	ldr	r0, [pc, #560]	; (800202c <FreqMenu_DrawPresetMenu+0xdd0>)
 8001dfc:	f00b faa2 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001e00:	7a7b      	ldrb	r3, [r7, #9]
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e08:	9301      	str	r3, [sp, #4]
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	2300      	movs	r3, #0
 8001e10:	210a      	movs	r1, #10
 8001e12:	4887      	ldr	r0, [pc, #540]	; (8002030 <FreqMenu_DrawPresetMenu+0xdd4>)
 8001e14:	f00b fa96 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, WHITE, 2, BLACK);
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	9301      	str	r3, [sp, #4]
 8001e20:	2302      	movs	r3, #2
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e28:	2178      	movs	r1, #120	; 0x78
 8001e2a:	4882      	ldr	r0, [pc, #520]	; (8002034 <FreqMenu_DrawPresetMenu+0xdd8>)
 8001e2c:	f00b fa8a 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001e30:	7bbb      	ldrb	r3, [r7, #14]
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e38:	9301      	str	r3, [sp, #4]
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	2300      	movs	r3, #0
 8001e40:	2178      	movs	r1, #120	; 0x78
 8001e42:	487d      	ldr	r0, [pc, #500]	; (8002038 <FreqMenu_DrawPresetMenu+0xddc>)
 8001e44:	f00b fa7e 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001e48:	7b7b      	ldrb	r3, [r7, #13]
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e50:	9301      	str	r3, [sp, #4]
 8001e52:	2302      	movs	r3, #2
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	2300      	movs	r3, #0
 8001e58:	2178      	movs	r1, #120	; 0x78
 8001e5a:	4878      	ldr	r0, [pc, #480]	; (800203c <FreqMenu_DrawPresetMenu+0xde0>)
 8001e5c:	f00b fa72 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001e60:	7b3b      	ldrb	r3, [r7, #12]
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e68:	9301      	str	r3, [sp, #4]
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2178      	movs	r1, #120	; 0x78
 8001e72:	4873      	ldr	r0, [pc, #460]	; (8002040 <FreqMenu_DrawPresetMenu+0xde4>)
 8001e74:	f00b fa66 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001e78:	7afb      	ldrb	r3, [r7, #11]
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e80:	9301      	str	r3, [sp, #4]
 8001e82:	2302      	movs	r3, #2
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	2300      	movs	r3, #0
 8001e88:	2178      	movs	r1, #120	; 0x78
 8001e8a:	486e      	ldr	r0, [pc, #440]	; (8002044 <FreqMenu_DrawPresetMenu+0xde8>)
 8001e8c:	f00b fa5a 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001e90:	7abb      	ldrb	r3, [r7, #10]
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e98:	9301      	str	r3, [sp, #4]
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	2178      	movs	r1, #120	; 0x78
 8001ea2:	4869      	ldr	r0, [pc, #420]	; (8002048 <FreqMenu_DrawPresetMenu+0xdec>)
 8001ea4:	f00b fa4e 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001ea8:	7a7b      	ldrb	r3, [r7, #9]
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001eb0:	9301      	str	r3, [sp, #4]
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	2178      	movs	r1, #120	; 0x78
 8001eba:	4864      	ldr	r0, [pc, #400]	; (800204c <FreqMenu_DrawPresetMenu+0xdf0>)
 8001ebc:	f00b fa42 	bl	800d344 <ILI9341_Draw_Text>
				break;
 8001ec0:	f000 bc58 	b.w	8002774 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ecc:	9301      	str	r3, [sp, #4]
 8001ece:	2302      	movs	r3, #2
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	210a      	movs	r1, #10
 8001ed6:	4850      	ldr	r0, [pc, #320]	; (8002018 <FreqMenu_DrawPresetMenu+0xdbc>)
 8001ed8:	f00b fa34 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001edc:	7bbb      	ldrb	r3, [r7, #14]
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ee4:	9301      	str	r3, [sp, #4]
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	2300      	movs	r3, #0
 8001eec:	210a      	movs	r1, #10
 8001eee:	484b      	ldr	r0, [pc, #300]	; (800201c <FreqMenu_DrawPresetMenu+0xdc0>)
 8001ef0:	f00b fa28 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001ef4:	7b7b      	ldrb	r3, [r7, #13]
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001efc:	9301      	str	r3, [sp, #4]
 8001efe:	2302      	movs	r3, #2
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	2300      	movs	r3, #0
 8001f04:	210a      	movs	r1, #10
 8001f06:	4846      	ldr	r0, [pc, #280]	; (8002020 <FreqMenu_DrawPresetMenu+0xdc4>)
 8001f08:	f00b fa1c 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001f0c:	7b3b      	ldrb	r3, [r7, #12]
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f14:	9301      	str	r3, [sp, #4]
 8001f16:	2302      	movs	r3, #2
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	210a      	movs	r1, #10
 8001f1e:	4841      	ldr	r0, [pc, #260]	; (8002024 <FreqMenu_DrawPresetMenu+0xdc8>)
 8001f20:	f00b fa10 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001f24:	7afb      	ldrb	r3, [r7, #11]
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f2c:	9301      	str	r3, [sp, #4]
 8001f2e:	2302      	movs	r3, #2
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	2300      	movs	r3, #0
 8001f34:	210a      	movs	r1, #10
 8001f36:	483c      	ldr	r0, [pc, #240]	; (8002028 <FreqMenu_DrawPresetMenu+0xdcc>)
 8001f38:	f00b fa04 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001f3c:	7abb      	ldrb	r3, [r7, #10]
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f44:	9301      	str	r3, [sp, #4]
 8001f46:	2302      	movs	r3, #2
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	210a      	movs	r1, #10
 8001f4e:	4837      	ldr	r0, [pc, #220]	; (800202c <FreqMenu_DrawPresetMenu+0xdd0>)
 8001f50:	f00b f9f8 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001f54:	7a7b      	ldrb	r3, [r7, #9]
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f5c:	9301      	str	r3, [sp, #4]
 8001f5e:	2302      	movs	r3, #2
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	2300      	movs	r3, #0
 8001f64:	210a      	movs	r1, #10
 8001f66:	4832      	ldr	r0, [pc, #200]	; (8002030 <FreqMenu_DrawPresetMenu+0xdd4>)
 8001f68:	f00b f9ec 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f74:	9301      	str	r3, [sp, #4]
 8001f76:	2302      	movs	r3, #2
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	2178      	movs	r1, #120	; 0x78
 8001f7e:	482d      	ldr	r0, [pc, #180]	; (8002034 <FreqMenu_DrawPresetMenu+0xdd8>)
 8001f80:	f00b f9e0 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, WHITE, 2, BLACK);
 8001f84:	7bbb      	ldrb	r3, [r7, #14]
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	2300      	movs	r3, #0
 8001f8a:	9301      	str	r3, [sp, #4]
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f94:	2178      	movs	r1, #120	; 0x78
 8001f96:	4828      	ldr	r0, [pc, #160]	; (8002038 <FreqMenu_DrawPresetMenu+0xddc>)
 8001f98:	f00b f9d4 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001f9c:	7b7b      	ldrb	r3, [r7, #13]
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fa4:	9301      	str	r3, [sp, #4]
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	2300      	movs	r3, #0
 8001fac:	2178      	movs	r1, #120	; 0x78
 8001fae:	4823      	ldr	r0, [pc, #140]	; (800203c <FreqMenu_DrawPresetMenu+0xde0>)
 8001fb0:	f00b f9c8 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001fb4:	7b3b      	ldrb	r3, [r7, #12]
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fbc:	9301      	str	r3, [sp, #4]
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	2178      	movs	r1, #120	; 0x78
 8001fc6:	481e      	ldr	r0, [pc, #120]	; (8002040 <FreqMenu_DrawPresetMenu+0xde4>)
 8001fc8:	f00b f9bc 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001fcc:	7afb      	ldrb	r3, [r7, #11]
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fd4:	9301      	str	r3, [sp, #4]
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	2300      	movs	r3, #0
 8001fdc:	2178      	movs	r1, #120	; 0x78
 8001fde:	4819      	ldr	r0, [pc, #100]	; (8002044 <FreqMenu_DrawPresetMenu+0xde8>)
 8001fe0:	f00b f9b0 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001fe4:	7abb      	ldrb	r3, [r7, #10]
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fec:	9301      	str	r3, [sp, #4]
 8001fee:	2302      	movs	r3, #2
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	2178      	movs	r1, #120	; 0x78
 8001ff6:	4814      	ldr	r0, [pc, #80]	; (8002048 <FreqMenu_DrawPresetMenu+0xdec>)
 8001ff8:	f00b f9a4 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001ffc:	7a7b      	ldrb	r3, [r7, #9]
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002004:	9301      	str	r3, [sp, #4]
 8002006:	2302      	movs	r3, #2
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	2300      	movs	r3, #0
 800200c:	2178      	movs	r1, #120	; 0x78
 800200e:	480f      	ldr	r0, [pc, #60]	; (800204c <FreqMenu_DrawPresetMenu+0xdf0>)
 8002010:	f00b f998 	bl	800d344 <ILI9341_Draw_Text>
				break;
 8002014:	e3ae      	b.n	8002774 <FreqMenu_DrawPresetMenu+0x1518>
 8002016:	bf00      	nop
 8002018:	08010a80 	.word	0x08010a80
 800201c:	08010a88 	.word	0x08010a88
 8002020:	08010a90 	.word	0x08010a90
 8002024:	08010a98 	.word	0x08010a98
 8002028:	08010aa0 	.word	0x08010aa0
 800202c:	08010aa8 	.word	0x08010aa8
 8002030:	08010ab0 	.word	0x08010ab0
 8002034:	08010ab8 	.word	0x08010ab8
 8002038:	08010ac0 	.word	0x08010ac0
 800203c:	08010ac8 	.word	0x08010ac8
 8002040:	08010ad0 	.word	0x08010ad0
 8002044:	08010ad8 	.word	0x08010ad8
 8002048:	08010ae0 	.word	0x08010ae0
 800204c:	08010ae8 	.word	0x08010ae8
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8002050:	7bfb      	ldrb	r3, [r7, #15]
 8002052:	b29a      	uxth	r2, r3
 8002054:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002058:	9301      	str	r3, [sp, #4]
 800205a:	2302      	movs	r3, #2
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	2300      	movs	r3, #0
 8002060:	210a      	movs	r1, #10
 8002062:	48a4      	ldr	r0, [pc, #656]	; (80022f4 <FreqMenu_DrawPresetMenu+0x1098>)
 8002064:	f00b f96e 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8002068:	7bbb      	ldrb	r3, [r7, #14]
 800206a:	b29a      	uxth	r2, r3
 800206c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002070:	9301      	str	r3, [sp, #4]
 8002072:	2302      	movs	r3, #2
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	2300      	movs	r3, #0
 8002078:	210a      	movs	r1, #10
 800207a:	489f      	ldr	r0, [pc, #636]	; (80022f8 <FreqMenu_DrawPresetMenu+0x109c>)
 800207c:	f00b f962 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8002080:	7b7b      	ldrb	r3, [r7, #13]
 8002082:	b29a      	uxth	r2, r3
 8002084:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002088:	9301      	str	r3, [sp, #4]
 800208a:	2302      	movs	r3, #2
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	2300      	movs	r3, #0
 8002090:	210a      	movs	r1, #10
 8002092:	489a      	ldr	r0, [pc, #616]	; (80022fc <FreqMenu_DrawPresetMenu+0x10a0>)
 8002094:	f00b f956 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8002098:	7b3b      	ldrb	r3, [r7, #12]
 800209a:	b29a      	uxth	r2, r3
 800209c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020a0:	9301      	str	r3, [sp, #4]
 80020a2:	2302      	movs	r3, #2
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	2300      	movs	r3, #0
 80020a8:	210a      	movs	r1, #10
 80020aa:	4895      	ldr	r0, [pc, #596]	; (8002300 <FreqMenu_DrawPresetMenu+0x10a4>)
 80020ac:	f00b f94a 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80020b0:	7afb      	ldrb	r3, [r7, #11]
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020b8:	9301      	str	r3, [sp, #4]
 80020ba:	2302      	movs	r3, #2
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	2300      	movs	r3, #0
 80020c0:	210a      	movs	r1, #10
 80020c2:	4890      	ldr	r0, [pc, #576]	; (8002304 <FreqMenu_DrawPresetMenu+0x10a8>)
 80020c4:	f00b f93e 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 80020c8:	7abb      	ldrb	r3, [r7, #10]
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020d0:	9301      	str	r3, [sp, #4]
 80020d2:	2302      	movs	r3, #2
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	2300      	movs	r3, #0
 80020d8:	210a      	movs	r1, #10
 80020da:	488b      	ldr	r0, [pc, #556]	; (8002308 <FreqMenu_DrawPresetMenu+0x10ac>)
 80020dc:	f00b f932 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 80020e0:	7a7b      	ldrb	r3, [r7, #9]
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020e8:	9301      	str	r3, [sp, #4]
 80020ea:	2302      	movs	r3, #2
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	2300      	movs	r3, #0
 80020f0:	210a      	movs	r1, #10
 80020f2:	4886      	ldr	r0, [pc, #536]	; (800230c <FreqMenu_DrawPresetMenu+0x10b0>)
 80020f4:	f00b f926 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 80020f8:	7bfb      	ldrb	r3, [r7, #15]
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002100:	9301      	str	r3, [sp, #4]
 8002102:	2302      	movs	r3, #2
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	2300      	movs	r3, #0
 8002108:	2178      	movs	r1, #120	; 0x78
 800210a:	4881      	ldr	r0, [pc, #516]	; (8002310 <FreqMenu_DrawPresetMenu+0x10b4>)
 800210c:	f00b f91a 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8002110:	7bbb      	ldrb	r3, [r7, #14]
 8002112:	b29a      	uxth	r2, r3
 8002114:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002118:	9301      	str	r3, [sp, #4]
 800211a:	2302      	movs	r3, #2
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	2300      	movs	r3, #0
 8002120:	2178      	movs	r1, #120	; 0x78
 8002122:	487c      	ldr	r0, [pc, #496]	; (8002314 <FreqMenu_DrawPresetMenu+0x10b8>)
 8002124:	f00b f90e 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, WHITE, 2, BLACK);
 8002128:	7b7b      	ldrb	r3, [r7, #13]
 800212a:	b29a      	uxth	r2, r3
 800212c:	2300      	movs	r3, #0
 800212e:	9301      	str	r3, [sp, #4]
 8002130:	2302      	movs	r3, #2
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002138:	2178      	movs	r1, #120	; 0x78
 800213a:	4877      	ldr	r0, [pc, #476]	; (8002318 <FreqMenu_DrawPresetMenu+0x10bc>)
 800213c:	f00b f902 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8002140:	7b3b      	ldrb	r3, [r7, #12]
 8002142:	b29a      	uxth	r2, r3
 8002144:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002148:	9301      	str	r3, [sp, #4]
 800214a:	2302      	movs	r3, #2
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	2300      	movs	r3, #0
 8002150:	2178      	movs	r1, #120	; 0x78
 8002152:	4872      	ldr	r0, [pc, #456]	; (800231c <FreqMenu_DrawPresetMenu+0x10c0>)
 8002154:	f00b f8f6 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8002158:	7afb      	ldrb	r3, [r7, #11]
 800215a:	b29a      	uxth	r2, r3
 800215c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002160:	9301      	str	r3, [sp, #4]
 8002162:	2302      	movs	r3, #2
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	2300      	movs	r3, #0
 8002168:	2178      	movs	r1, #120	; 0x78
 800216a:	486d      	ldr	r0, [pc, #436]	; (8002320 <FreqMenu_DrawPresetMenu+0x10c4>)
 800216c:	f00b f8ea 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8002170:	7abb      	ldrb	r3, [r7, #10]
 8002172:	b29a      	uxth	r2, r3
 8002174:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002178:	9301      	str	r3, [sp, #4]
 800217a:	2302      	movs	r3, #2
 800217c:	9300      	str	r3, [sp, #0]
 800217e:	2300      	movs	r3, #0
 8002180:	2178      	movs	r1, #120	; 0x78
 8002182:	4868      	ldr	r0, [pc, #416]	; (8002324 <FreqMenu_DrawPresetMenu+0x10c8>)
 8002184:	f00b f8de 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8002188:	7a7b      	ldrb	r3, [r7, #9]
 800218a:	b29a      	uxth	r2, r3
 800218c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002190:	9301      	str	r3, [sp, #4]
 8002192:	2302      	movs	r3, #2
 8002194:	9300      	str	r3, [sp, #0]
 8002196:	2300      	movs	r3, #0
 8002198:	2178      	movs	r1, #120	; 0x78
 800219a:	4863      	ldr	r0, [pc, #396]	; (8002328 <FreqMenu_DrawPresetMenu+0x10cc>)
 800219c:	f00b f8d2 	bl	800d344 <ILI9341_Draw_Text>
				break;
 80021a0:	e2e8      	b.n	8002774 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 80021a2:	7bfb      	ldrb	r3, [r7, #15]
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021aa:	9301      	str	r3, [sp, #4]
 80021ac:	2302      	movs	r3, #2
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	2300      	movs	r3, #0
 80021b2:	210a      	movs	r1, #10
 80021b4:	484f      	ldr	r0, [pc, #316]	; (80022f4 <FreqMenu_DrawPresetMenu+0x1098>)
 80021b6:	f00b f8c5 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 80021ba:	7bbb      	ldrb	r3, [r7, #14]
 80021bc:	b29a      	uxth	r2, r3
 80021be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021c2:	9301      	str	r3, [sp, #4]
 80021c4:	2302      	movs	r3, #2
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	2300      	movs	r3, #0
 80021ca:	210a      	movs	r1, #10
 80021cc:	484a      	ldr	r0, [pc, #296]	; (80022f8 <FreqMenu_DrawPresetMenu+0x109c>)
 80021ce:	f00b f8b9 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 80021d2:	7b7b      	ldrb	r3, [r7, #13]
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021da:	9301      	str	r3, [sp, #4]
 80021dc:	2302      	movs	r3, #2
 80021de:	9300      	str	r3, [sp, #0]
 80021e0:	2300      	movs	r3, #0
 80021e2:	210a      	movs	r1, #10
 80021e4:	4845      	ldr	r0, [pc, #276]	; (80022fc <FreqMenu_DrawPresetMenu+0x10a0>)
 80021e6:	f00b f8ad 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 80021ea:	7b3b      	ldrb	r3, [r7, #12]
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021f2:	9301      	str	r3, [sp, #4]
 80021f4:	2302      	movs	r3, #2
 80021f6:	9300      	str	r3, [sp, #0]
 80021f8:	2300      	movs	r3, #0
 80021fa:	210a      	movs	r1, #10
 80021fc:	4840      	ldr	r0, [pc, #256]	; (8002300 <FreqMenu_DrawPresetMenu+0x10a4>)
 80021fe:	f00b f8a1 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8002202:	7afb      	ldrb	r3, [r7, #11]
 8002204:	b29a      	uxth	r2, r3
 8002206:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800220a:	9301      	str	r3, [sp, #4]
 800220c:	2302      	movs	r3, #2
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	2300      	movs	r3, #0
 8002212:	210a      	movs	r1, #10
 8002214:	483b      	ldr	r0, [pc, #236]	; (8002304 <FreqMenu_DrawPresetMenu+0x10a8>)
 8002216:	f00b f895 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 800221a:	7abb      	ldrb	r3, [r7, #10]
 800221c:	b29a      	uxth	r2, r3
 800221e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002222:	9301      	str	r3, [sp, #4]
 8002224:	2302      	movs	r3, #2
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	2300      	movs	r3, #0
 800222a:	210a      	movs	r1, #10
 800222c:	4836      	ldr	r0, [pc, #216]	; (8002308 <FreqMenu_DrawPresetMenu+0x10ac>)
 800222e:	f00b f889 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8002232:	7a7b      	ldrb	r3, [r7, #9]
 8002234:	b29a      	uxth	r2, r3
 8002236:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800223a:	9301      	str	r3, [sp, #4]
 800223c:	2302      	movs	r3, #2
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	2300      	movs	r3, #0
 8002242:	210a      	movs	r1, #10
 8002244:	4831      	ldr	r0, [pc, #196]	; (800230c <FreqMenu_DrawPresetMenu+0x10b0>)
 8002246:	f00b f87d 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	b29a      	uxth	r2, r3
 800224e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002252:	9301      	str	r3, [sp, #4]
 8002254:	2302      	movs	r3, #2
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	2300      	movs	r3, #0
 800225a:	2178      	movs	r1, #120	; 0x78
 800225c:	482c      	ldr	r0, [pc, #176]	; (8002310 <FreqMenu_DrawPresetMenu+0x10b4>)
 800225e:	f00b f871 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8002262:	7bbb      	ldrb	r3, [r7, #14]
 8002264:	b29a      	uxth	r2, r3
 8002266:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800226a:	9301      	str	r3, [sp, #4]
 800226c:	2302      	movs	r3, #2
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	2300      	movs	r3, #0
 8002272:	2178      	movs	r1, #120	; 0x78
 8002274:	4827      	ldr	r0, [pc, #156]	; (8002314 <FreqMenu_DrawPresetMenu+0x10b8>)
 8002276:	f00b f865 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 800227a:	7b7b      	ldrb	r3, [r7, #13]
 800227c:	b29a      	uxth	r2, r3
 800227e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002282:	9301      	str	r3, [sp, #4]
 8002284:	2302      	movs	r3, #2
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	2300      	movs	r3, #0
 800228a:	2178      	movs	r1, #120	; 0x78
 800228c:	4822      	ldr	r0, [pc, #136]	; (8002318 <FreqMenu_DrawPresetMenu+0x10bc>)
 800228e:	f00b f859 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, WHITE, 2, BLACK);
 8002292:	7b3b      	ldrb	r3, [r7, #12]
 8002294:	b29a      	uxth	r2, r3
 8002296:	2300      	movs	r3, #0
 8002298:	9301      	str	r3, [sp, #4]
 800229a:	2302      	movs	r3, #2
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022a2:	2178      	movs	r1, #120	; 0x78
 80022a4:	481d      	ldr	r0, [pc, #116]	; (800231c <FreqMenu_DrawPresetMenu+0x10c0>)
 80022a6:	f00b f84d 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 80022aa:	7afb      	ldrb	r3, [r7, #11]
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022b2:	9301      	str	r3, [sp, #4]
 80022b4:	2302      	movs	r3, #2
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	2300      	movs	r3, #0
 80022ba:	2178      	movs	r1, #120	; 0x78
 80022bc:	4818      	ldr	r0, [pc, #96]	; (8002320 <FreqMenu_DrawPresetMenu+0x10c4>)
 80022be:	f00b f841 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 80022c2:	7abb      	ldrb	r3, [r7, #10]
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022ca:	9301      	str	r3, [sp, #4]
 80022cc:	2302      	movs	r3, #2
 80022ce:	9300      	str	r3, [sp, #0]
 80022d0:	2300      	movs	r3, #0
 80022d2:	2178      	movs	r1, #120	; 0x78
 80022d4:	4813      	ldr	r0, [pc, #76]	; (8002324 <FreqMenu_DrawPresetMenu+0x10c8>)
 80022d6:	f00b f835 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80022da:	7a7b      	ldrb	r3, [r7, #9]
 80022dc:	b29a      	uxth	r2, r3
 80022de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022e2:	9301      	str	r3, [sp, #4]
 80022e4:	2302      	movs	r3, #2
 80022e6:	9300      	str	r3, [sp, #0]
 80022e8:	2300      	movs	r3, #0
 80022ea:	2178      	movs	r1, #120	; 0x78
 80022ec:	480e      	ldr	r0, [pc, #56]	; (8002328 <FreqMenu_DrawPresetMenu+0x10cc>)
 80022ee:	f00b f829 	bl	800d344 <ILI9341_Draw_Text>
				break;
 80022f2:	e23f      	b.n	8002774 <FreqMenu_DrawPresetMenu+0x1518>
 80022f4:	08010a80 	.word	0x08010a80
 80022f8:	08010a88 	.word	0x08010a88
 80022fc:	08010a90 	.word	0x08010a90
 8002300:	08010a98 	.word	0x08010a98
 8002304:	08010aa0 	.word	0x08010aa0
 8002308:	08010aa8 	.word	0x08010aa8
 800230c:	08010ab0 	.word	0x08010ab0
 8002310:	08010ab8 	.word	0x08010ab8
 8002314:	08010ac0 	.word	0x08010ac0
 8002318:	08010ac8 	.word	0x08010ac8
 800231c:	08010ad0 	.word	0x08010ad0
 8002320:	08010ad8 	.word	0x08010ad8
 8002324:	08010ae0 	.word	0x08010ae0
 8002328:	08010ae8 	.word	0x08010ae8
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 800232c:	7bfb      	ldrb	r3, [r7, #15]
 800232e:	b29a      	uxth	r2, r3
 8002330:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002334:	9301      	str	r3, [sp, #4]
 8002336:	2302      	movs	r3, #2
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	2300      	movs	r3, #0
 800233c:	210a      	movs	r1, #10
 800233e:	48a4      	ldr	r0, [pc, #656]	; (80025d0 <FreqMenu_DrawPresetMenu+0x1374>)
 8002340:	f00b f800 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8002344:	7bbb      	ldrb	r3, [r7, #14]
 8002346:	b29a      	uxth	r2, r3
 8002348:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800234c:	9301      	str	r3, [sp, #4]
 800234e:	2302      	movs	r3, #2
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	2300      	movs	r3, #0
 8002354:	210a      	movs	r1, #10
 8002356:	489f      	ldr	r0, [pc, #636]	; (80025d4 <FreqMenu_DrawPresetMenu+0x1378>)
 8002358:	f00a fff4 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 800235c:	7b7b      	ldrb	r3, [r7, #13]
 800235e:	b29a      	uxth	r2, r3
 8002360:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002364:	9301      	str	r3, [sp, #4]
 8002366:	2302      	movs	r3, #2
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	2300      	movs	r3, #0
 800236c:	210a      	movs	r1, #10
 800236e:	489a      	ldr	r0, [pc, #616]	; (80025d8 <FreqMenu_DrawPresetMenu+0x137c>)
 8002370:	f00a ffe8 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8002374:	7b3b      	ldrb	r3, [r7, #12]
 8002376:	b29a      	uxth	r2, r3
 8002378:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800237c:	9301      	str	r3, [sp, #4]
 800237e:	2302      	movs	r3, #2
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	2300      	movs	r3, #0
 8002384:	210a      	movs	r1, #10
 8002386:	4895      	ldr	r0, [pc, #596]	; (80025dc <FreqMenu_DrawPresetMenu+0x1380>)
 8002388:	f00a ffdc 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 800238c:	7afb      	ldrb	r3, [r7, #11]
 800238e:	b29a      	uxth	r2, r3
 8002390:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002394:	9301      	str	r3, [sp, #4]
 8002396:	2302      	movs	r3, #2
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	2300      	movs	r3, #0
 800239c:	210a      	movs	r1, #10
 800239e:	4890      	ldr	r0, [pc, #576]	; (80025e0 <FreqMenu_DrawPresetMenu+0x1384>)
 80023a0:	f00a ffd0 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 80023a4:	7abb      	ldrb	r3, [r7, #10]
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023ac:	9301      	str	r3, [sp, #4]
 80023ae:	2302      	movs	r3, #2
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	2300      	movs	r3, #0
 80023b4:	210a      	movs	r1, #10
 80023b6:	488b      	ldr	r0, [pc, #556]	; (80025e4 <FreqMenu_DrawPresetMenu+0x1388>)
 80023b8:	f00a ffc4 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 80023bc:	7a7b      	ldrb	r3, [r7, #9]
 80023be:	b29a      	uxth	r2, r3
 80023c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023c4:	9301      	str	r3, [sp, #4]
 80023c6:	2302      	movs	r3, #2
 80023c8:	9300      	str	r3, [sp, #0]
 80023ca:	2300      	movs	r3, #0
 80023cc:	210a      	movs	r1, #10
 80023ce:	4886      	ldr	r0, [pc, #536]	; (80025e8 <FreqMenu_DrawPresetMenu+0x138c>)
 80023d0:	f00a ffb8 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 80023d4:	7bfb      	ldrb	r3, [r7, #15]
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023dc:	9301      	str	r3, [sp, #4]
 80023de:	2302      	movs	r3, #2
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	2300      	movs	r3, #0
 80023e4:	2178      	movs	r1, #120	; 0x78
 80023e6:	4881      	ldr	r0, [pc, #516]	; (80025ec <FreqMenu_DrawPresetMenu+0x1390>)
 80023e8:	f00a ffac 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80023ec:	7bbb      	ldrb	r3, [r7, #14]
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023f4:	9301      	str	r3, [sp, #4]
 80023f6:	2302      	movs	r3, #2
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	2300      	movs	r3, #0
 80023fc:	2178      	movs	r1, #120	; 0x78
 80023fe:	487c      	ldr	r0, [pc, #496]	; (80025f0 <FreqMenu_DrawPresetMenu+0x1394>)
 8002400:	f00a ffa0 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8002404:	7b7b      	ldrb	r3, [r7, #13]
 8002406:	b29a      	uxth	r2, r3
 8002408:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800240c:	9301      	str	r3, [sp, #4]
 800240e:	2302      	movs	r3, #2
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	2300      	movs	r3, #0
 8002414:	2178      	movs	r1, #120	; 0x78
 8002416:	4877      	ldr	r0, [pc, #476]	; (80025f4 <FreqMenu_DrawPresetMenu+0x1398>)
 8002418:	f00a ff94 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 800241c:	7b3b      	ldrb	r3, [r7, #12]
 800241e:	b29a      	uxth	r2, r3
 8002420:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002424:	9301      	str	r3, [sp, #4]
 8002426:	2302      	movs	r3, #2
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	2300      	movs	r3, #0
 800242c:	2178      	movs	r1, #120	; 0x78
 800242e:	4872      	ldr	r0, [pc, #456]	; (80025f8 <FreqMenu_DrawPresetMenu+0x139c>)
 8002430:	f00a ff88 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, WHITE, 2, BLACK);
 8002434:	7afb      	ldrb	r3, [r7, #11]
 8002436:	b29a      	uxth	r2, r3
 8002438:	2300      	movs	r3, #0
 800243a:	9301      	str	r3, [sp, #4]
 800243c:	2302      	movs	r3, #2
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002444:	2178      	movs	r1, #120	; 0x78
 8002446:	486d      	ldr	r0, [pc, #436]	; (80025fc <FreqMenu_DrawPresetMenu+0x13a0>)
 8002448:	f00a ff7c 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 800244c:	7abb      	ldrb	r3, [r7, #10]
 800244e:	b29a      	uxth	r2, r3
 8002450:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002454:	9301      	str	r3, [sp, #4]
 8002456:	2302      	movs	r3, #2
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	2300      	movs	r3, #0
 800245c:	2178      	movs	r1, #120	; 0x78
 800245e:	4868      	ldr	r0, [pc, #416]	; (8002600 <FreqMenu_DrawPresetMenu+0x13a4>)
 8002460:	f00a ff70 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8002464:	7a7b      	ldrb	r3, [r7, #9]
 8002466:	b29a      	uxth	r2, r3
 8002468:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800246c:	9301      	str	r3, [sp, #4]
 800246e:	2302      	movs	r3, #2
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	2300      	movs	r3, #0
 8002474:	2178      	movs	r1, #120	; 0x78
 8002476:	4863      	ldr	r0, [pc, #396]	; (8002604 <FreqMenu_DrawPresetMenu+0x13a8>)
 8002478:	f00a ff64 	bl	800d344 <ILI9341_Draw_Text>
			break;
 800247c:	e17a      	b.n	8002774 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 800247e:	7bfb      	ldrb	r3, [r7, #15]
 8002480:	b29a      	uxth	r2, r3
 8002482:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002486:	9301      	str	r3, [sp, #4]
 8002488:	2302      	movs	r3, #2
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	2300      	movs	r3, #0
 800248e:	210a      	movs	r1, #10
 8002490:	484f      	ldr	r0, [pc, #316]	; (80025d0 <FreqMenu_DrawPresetMenu+0x1374>)
 8002492:	f00a ff57 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8002496:	7bbb      	ldrb	r3, [r7, #14]
 8002498:	b29a      	uxth	r2, r3
 800249a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800249e:	9301      	str	r3, [sp, #4]
 80024a0:	2302      	movs	r3, #2
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	2300      	movs	r3, #0
 80024a6:	210a      	movs	r1, #10
 80024a8:	484a      	ldr	r0, [pc, #296]	; (80025d4 <FreqMenu_DrawPresetMenu+0x1378>)
 80024aa:	f00a ff4b 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 80024ae:	7b7b      	ldrb	r3, [r7, #13]
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024b6:	9301      	str	r3, [sp, #4]
 80024b8:	2302      	movs	r3, #2
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	2300      	movs	r3, #0
 80024be:	210a      	movs	r1, #10
 80024c0:	4845      	ldr	r0, [pc, #276]	; (80025d8 <FreqMenu_DrawPresetMenu+0x137c>)
 80024c2:	f00a ff3f 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 80024c6:	7b3b      	ldrb	r3, [r7, #12]
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024ce:	9301      	str	r3, [sp, #4]
 80024d0:	2302      	movs	r3, #2
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	2300      	movs	r3, #0
 80024d6:	210a      	movs	r1, #10
 80024d8:	4840      	ldr	r0, [pc, #256]	; (80025dc <FreqMenu_DrawPresetMenu+0x1380>)
 80024da:	f00a ff33 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80024de:	7afb      	ldrb	r3, [r7, #11]
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024e6:	9301      	str	r3, [sp, #4]
 80024e8:	2302      	movs	r3, #2
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	2300      	movs	r3, #0
 80024ee:	210a      	movs	r1, #10
 80024f0:	483b      	ldr	r0, [pc, #236]	; (80025e0 <FreqMenu_DrawPresetMenu+0x1384>)
 80024f2:	f00a ff27 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 80024f6:	7abb      	ldrb	r3, [r7, #10]
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024fe:	9301      	str	r3, [sp, #4]
 8002500:	2302      	movs	r3, #2
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	2300      	movs	r3, #0
 8002506:	210a      	movs	r1, #10
 8002508:	4836      	ldr	r0, [pc, #216]	; (80025e4 <FreqMenu_DrawPresetMenu+0x1388>)
 800250a:	f00a ff1b 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 800250e:	7a7b      	ldrb	r3, [r7, #9]
 8002510:	b29a      	uxth	r2, r3
 8002512:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002516:	9301      	str	r3, [sp, #4]
 8002518:	2302      	movs	r3, #2
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	2300      	movs	r3, #0
 800251e:	210a      	movs	r1, #10
 8002520:	4831      	ldr	r0, [pc, #196]	; (80025e8 <FreqMenu_DrawPresetMenu+0x138c>)
 8002522:	f00a ff0f 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	b29a      	uxth	r2, r3
 800252a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800252e:	9301      	str	r3, [sp, #4]
 8002530:	2302      	movs	r3, #2
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	2300      	movs	r3, #0
 8002536:	2178      	movs	r1, #120	; 0x78
 8002538:	482c      	ldr	r0, [pc, #176]	; (80025ec <FreqMenu_DrawPresetMenu+0x1390>)
 800253a:	f00a ff03 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 800253e:	7bbb      	ldrb	r3, [r7, #14]
 8002540:	b29a      	uxth	r2, r3
 8002542:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002546:	9301      	str	r3, [sp, #4]
 8002548:	2302      	movs	r3, #2
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	2300      	movs	r3, #0
 800254e:	2178      	movs	r1, #120	; 0x78
 8002550:	4827      	ldr	r0, [pc, #156]	; (80025f0 <FreqMenu_DrawPresetMenu+0x1394>)
 8002552:	f00a fef7 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8002556:	7b7b      	ldrb	r3, [r7, #13]
 8002558:	b29a      	uxth	r2, r3
 800255a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800255e:	9301      	str	r3, [sp, #4]
 8002560:	2302      	movs	r3, #2
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	2300      	movs	r3, #0
 8002566:	2178      	movs	r1, #120	; 0x78
 8002568:	4822      	ldr	r0, [pc, #136]	; (80025f4 <FreqMenu_DrawPresetMenu+0x1398>)
 800256a:	f00a feeb 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 800256e:	7b3b      	ldrb	r3, [r7, #12]
 8002570:	b29a      	uxth	r2, r3
 8002572:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002576:	9301      	str	r3, [sp, #4]
 8002578:	2302      	movs	r3, #2
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	2300      	movs	r3, #0
 800257e:	2178      	movs	r1, #120	; 0x78
 8002580:	481d      	ldr	r0, [pc, #116]	; (80025f8 <FreqMenu_DrawPresetMenu+0x139c>)
 8002582:	f00a fedf 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8002586:	7afb      	ldrb	r3, [r7, #11]
 8002588:	b29a      	uxth	r2, r3
 800258a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800258e:	9301      	str	r3, [sp, #4]
 8002590:	2302      	movs	r3, #2
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	2300      	movs	r3, #0
 8002596:	2178      	movs	r1, #120	; 0x78
 8002598:	4818      	ldr	r0, [pc, #96]	; (80025fc <FreqMenu_DrawPresetMenu+0x13a0>)
 800259a:	f00a fed3 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, WHITE, 2, BLACK);
 800259e:	7abb      	ldrb	r3, [r7, #10]
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	2300      	movs	r3, #0
 80025a4:	9301      	str	r3, [sp, #4]
 80025a6:	2302      	movs	r3, #2
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025ae:	2178      	movs	r1, #120	; 0x78
 80025b0:	4813      	ldr	r0, [pc, #76]	; (8002600 <FreqMenu_DrawPresetMenu+0x13a4>)
 80025b2:	f00a fec7 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80025b6:	7a7b      	ldrb	r3, [r7, #9]
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025be:	9301      	str	r3, [sp, #4]
 80025c0:	2302      	movs	r3, #2
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	2300      	movs	r3, #0
 80025c6:	2178      	movs	r1, #120	; 0x78
 80025c8:	480e      	ldr	r0, [pc, #56]	; (8002604 <FreqMenu_DrawPresetMenu+0x13a8>)
 80025ca:	f00a febb 	bl	800d344 <ILI9341_Draw_Text>
			break;
 80025ce:	e0d1      	b.n	8002774 <FreqMenu_DrawPresetMenu+0x1518>
 80025d0:	08010a80 	.word	0x08010a80
 80025d4:	08010a88 	.word	0x08010a88
 80025d8:	08010a90 	.word	0x08010a90
 80025dc:	08010a98 	.word	0x08010a98
 80025e0:	08010aa0 	.word	0x08010aa0
 80025e4:	08010aa8 	.word	0x08010aa8
 80025e8:	08010ab0 	.word	0x08010ab0
 80025ec:	08010ab8 	.word	0x08010ab8
 80025f0:	08010ac0 	.word	0x08010ac0
 80025f4:	08010ac8 	.word	0x08010ac8
 80025f8:	08010ad0 	.word	0x08010ad0
 80025fc:	08010ad8 	.word	0x08010ad8
 8002600:	08010ae0 	.word	0x08010ae0
 8002604:	08010ae8 	.word	0x08010ae8
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8002608:	7bfb      	ldrb	r3, [r7, #15]
 800260a:	b29a      	uxth	r2, r3
 800260c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002610:	9301      	str	r3, [sp, #4]
 8002612:	2302      	movs	r3, #2
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	2300      	movs	r3, #0
 8002618:	210a      	movs	r1, #10
 800261a:	4858      	ldr	r0, [pc, #352]	; (800277c <FreqMenu_DrawPresetMenu+0x1520>)
 800261c:	f00a fe92 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8002620:	7bbb      	ldrb	r3, [r7, #14]
 8002622:	b29a      	uxth	r2, r3
 8002624:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002628:	9301      	str	r3, [sp, #4]
 800262a:	2302      	movs	r3, #2
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	2300      	movs	r3, #0
 8002630:	210a      	movs	r1, #10
 8002632:	4853      	ldr	r0, [pc, #332]	; (8002780 <FreqMenu_DrawPresetMenu+0x1524>)
 8002634:	f00a fe86 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8002638:	7b7b      	ldrb	r3, [r7, #13]
 800263a:	b29a      	uxth	r2, r3
 800263c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002640:	9301      	str	r3, [sp, #4]
 8002642:	2302      	movs	r3, #2
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	2300      	movs	r3, #0
 8002648:	210a      	movs	r1, #10
 800264a:	484e      	ldr	r0, [pc, #312]	; (8002784 <FreqMenu_DrawPresetMenu+0x1528>)
 800264c:	f00a fe7a 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8002650:	7b3b      	ldrb	r3, [r7, #12]
 8002652:	b29a      	uxth	r2, r3
 8002654:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002658:	9301      	str	r3, [sp, #4]
 800265a:	2302      	movs	r3, #2
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	2300      	movs	r3, #0
 8002660:	210a      	movs	r1, #10
 8002662:	4849      	ldr	r0, [pc, #292]	; (8002788 <FreqMenu_DrawPresetMenu+0x152c>)
 8002664:	f00a fe6e 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8002668:	7afb      	ldrb	r3, [r7, #11]
 800266a:	b29a      	uxth	r2, r3
 800266c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002670:	9301      	str	r3, [sp, #4]
 8002672:	2302      	movs	r3, #2
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	2300      	movs	r3, #0
 8002678:	210a      	movs	r1, #10
 800267a:	4844      	ldr	r0, [pc, #272]	; (800278c <FreqMenu_DrawPresetMenu+0x1530>)
 800267c:	f00a fe62 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8002680:	7abb      	ldrb	r3, [r7, #10]
 8002682:	b29a      	uxth	r2, r3
 8002684:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002688:	9301      	str	r3, [sp, #4]
 800268a:	2302      	movs	r3, #2
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	2300      	movs	r3, #0
 8002690:	210a      	movs	r1, #10
 8002692:	483f      	ldr	r0, [pc, #252]	; (8002790 <FreqMenu_DrawPresetMenu+0x1534>)
 8002694:	f00a fe56 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8002698:	7a7b      	ldrb	r3, [r7, #9]
 800269a:	b29a      	uxth	r2, r3
 800269c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026a0:	9301      	str	r3, [sp, #4]
 80026a2:	2302      	movs	r3, #2
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	2300      	movs	r3, #0
 80026a8:	210a      	movs	r1, #10
 80026aa:	483a      	ldr	r0, [pc, #232]	; (8002794 <FreqMenu_DrawPresetMenu+0x1538>)
 80026ac:	f00a fe4a 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026b8:	9301      	str	r3, [sp, #4]
 80026ba:	2302      	movs	r3, #2
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	2300      	movs	r3, #0
 80026c0:	2178      	movs	r1, #120	; 0x78
 80026c2:	4835      	ldr	r0, [pc, #212]	; (8002798 <FreqMenu_DrawPresetMenu+0x153c>)
 80026c4:	f00a fe3e 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80026c8:	7bbb      	ldrb	r3, [r7, #14]
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026d0:	9301      	str	r3, [sp, #4]
 80026d2:	2302      	movs	r3, #2
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	2300      	movs	r3, #0
 80026d8:	2178      	movs	r1, #120	; 0x78
 80026da:	4830      	ldr	r0, [pc, #192]	; (800279c <FreqMenu_DrawPresetMenu+0x1540>)
 80026dc:	f00a fe32 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 80026e0:	7b7b      	ldrb	r3, [r7, #13]
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026e8:	9301      	str	r3, [sp, #4]
 80026ea:	2302      	movs	r3, #2
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	2300      	movs	r3, #0
 80026f0:	2178      	movs	r1, #120	; 0x78
 80026f2:	482b      	ldr	r0, [pc, #172]	; (80027a0 <FreqMenu_DrawPresetMenu+0x1544>)
 80026f4:	f00a fe26 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80026f8:	7b3b      	ldrb	r3, [r7, #12]
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002700:	9301      	str	r3, [sp, #4]
 8002702:	2302      	movs	r3, #2
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	2300      	movs	r3, #0
 8002708:	2178      	movs	r1, #120	; 0x78
 800270a:	4826      	ldr	r0, [pc, #152]	; (80027a4 <FreqMenu_DrawPresetMenu+0x1548>)
 800270c:	f00a fe1a 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8002710:	7afb      	ldrb	r3, [r7, #11]
 8002712:	b29a      	uxth	r2, r3
 8002714:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002718:	9301      	str	r3, [sp, #4]
 800271a:	2302      	movs	r3, #2
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	2300      	movs	r3, #0
 8002720:	2178      	movs	r1, #120	; 0x78
 8002722:	4821      	ldr	r0, [pc, #132]	; (80027a8 <FreqMenu_DrawPresetMenu+0x154c>)
 8002724:	f00a fe0e 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8002728:	7abb      	ldrb	r3, [r7, #10]
 800272a:	b29a      	uxth	r2, r3
 800272c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002730:	9301      	str	r3, [sp, #4]
 8002732:	2302      	movs	r3, #2
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	2300      	movs	r3, #0
 8002738:	2178      	movs	r1, #120	; 0x78
 800273a:	481c      	ldr	r0, [pc, #112]	; (80027ac <FreqMenu_DrawPresetMenu+0x1550>)
 800273c:	f00a fe02 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, WHITE, 2, BLACK);
 8002740:	7a7b      	ldrb	r3, [r7, #9]
 8002742:	b29a      	uxth	r2, r3
 8002744:	2300      	movs	r3, #0
 8002746:	9301      	str	r3, [sp, #4]
 8002748:	2302      	movs	r3, #2
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002750:	2178      	movs	r1, #120	; 0x78
 8002752:	4817      	ldr	r0, [pc, #92]	; (80027b0 <FreqMenu_DrawPresetMenu+0x1554>)
 8002754:	f00a fdf6 	bl	800d344 <ILI9341_Draw_Text>
			break;
 8002758:	bf00      	nop
 800275a:	e00b      	b.n	8002774 <FreqMenu_DrawPresetMenu+0x1518>
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		10, 180, RED, 1, BLACK);
 800275c:	2300      	movs	r3, #0
 800275e:	9301      	str	r3, [sp, #4]
 8002760:	2301      	movs	r3, #1
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002768:	22b4      	movs	r2, #180	; 0xb4
 800276a:	210a      	movs	r1, #10
 800276c:	4811      	ldr	r0, [pc, #68]	; (80027b4 <FreqMenu_DrawPresetMenu+0x1558>)
 800276e:	f00a fde9 	bl	800d344 <ILI9341_Draw_Text>
}
 8002772:	e7ff      	b.n	8002774 <FreqMenu_DrawPresetMenu+0x1518>
 8002774:	bf00      	nop
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	08010a80 	.word	0x08010a80
 8002780:	08010a88 	.word	0x08010a88
 8002784:	08010a90 	.word	0x08010a90
 8002788:	08010a98 	.word	0x08010a98
 800278c:	08010aa0 	.word	0x08010aa0
 8002790:	08010aa8 	.word	0x08010aa8
 8002794:	08010ab0 	.word	0x08010ab0
 8002798:	08010ab8 	.word	0x08010ab8
 800279c:	08010ac0 	.word	0x08010ac0
 80027a0:	08010ac8 	.word	0x08010ac8
 80027a4:	08010ad0 	.word	0x08010ad0
 80027a8:	08010ad8 	.word	0x08010ad8
 80027ac:	08010ae0 	.word	0x08010ae0
 80027b0:	08010ae8 	.word	0x08010ae8
 80027b4:	08010af4 	.word	0x08010af4

080027b8 <FreqMenu_DrawAdjustMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawAdjustMenu()
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("FREQUENCY ADJUST", 	30, 10, WHITE, 3, BLACK);
 80027be:	2300      	movs	r3, #0
 80027c0:	9301      	str	r3, [sp, #4]
 80027c2:	2303      	movs	r3, #3
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027ca:	220a      	movs	r2, #10
 80027cc:	211e      	movs	r1, #30
 80027ce:	4803      	ldr	r0, [pc, #12]	; (80027dc <FreqMenu_DrawAdjustMenu+0x24>)
 80027d0:	f00a fdb8 	bl	800d344 <ILI9341_Draw_Text>
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
		ILI9341_Draw_Text(freq, 250, 150, WHITE, 1, BLACK);
*/

}
 80027d4:	bf00      	nop
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	08010b24 	.word	0x08010b24

080027e0 <FreqMenu_DrawSweepMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawSweepMenu()
{
 80027e0:	b590      	push	{r4, r7, lr}
 80027e2:	b095      	sub	sp, #84	; 0x54
 80027e4:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("FREQUENCY SWEEP", 	10, 10, BLACK, 3, WHITE);
 80027e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027ea:	9301      	str	r3, [sp, #4]
 80027ec:	2303      	movs	r3, #3
 80027ee:	9300      	str	r3, [sp, #0]
 80027f0:	2300      	movs	r3, #0
 80027f2:	220a      	movs	r2, #10
 80027f4:	210a      	movs	r1, #10
 80027f6:	487a      	ldr	r0, [pc, #488]	; (80029e0 <FreqMenu_DrawSweepMenu+0x200>)
 80027f8:	f00a fda4 	bl	800d344 <ILI9341_Draw_Text>
	TIM8->ARR = SWEEP_TIMER->CNT;
 80027fc:	4b79      	ldr	r3, [pc, #484]	; (80029e4 <FreqMenu_DrawSweepMenu+0x204>)
 80027fe:	4a7a      	ldr	r2, [pc, #488]	; (80029e8 <FreqMenu_DrawSweepMenu+0x208>)
 8002800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002802:	62d3      	str	r3, [r2, #44]	; 0x2c

	// draw enabled status
	char enabled_text[16] = "";
 8002804:	2300      	movs	r3, #0
 8002806:	63bb      	str	r3, [r7, #56]	; 0x38
 8002808:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	605a      	str	r2, [r3, #4]
 8002812:	609a      	str	r2, [r3, #8]
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8002814:	4b73      	ldr	r3, [pc, #460]	; (80029e4 <FreqMenu_DrawSweepMenu+0x204>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b01      	cmp	r3, #1
 800281e:	d10b      	bne.n	8002838 <FreqMenu_DrawSweepMenu+0x58>
	{
		snprintf(enabled_text, sizeof(enabled_text), "SWEEP  ENABLED");
 8002820:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002824:	4a71      	ldr	r2, [pc, #452]	; (80029ec <FreqMenu_DrawSweepMenu+0x20c>)
 8002826:	461c      	mov	r4, r3
 8002828:	4613      	mov	r3, r2
 800282a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800282c:	c407      	stmia	r4!, {r0, r1, r2}
 800282e:	8023      	strh	r3, [r4, #0]
 8002830:	3402      	adds	r4, #2
 8002832:	0c1b      	lsrs	r3, r3, #16
 8002834:	7023      	strb	r3, [r4, #0]
 8002836:	e00a      	b.n	800284e <FreqMenu_DrawSweepMenu+0x6e>
	}
	else
	{
		snprintf(enabled_text, sizeof(enabled_text), "SWEEP DISABLED");
 8002838:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800283c:	4a6c      	ldr	r2, [pc, #432]	; (80029f0 <FreqMenu_DrawSweepMenu+0x210>)
 800283e:	461c      	mov	r4, r3
 8002840:	4613      	mov	r3, r2
 8002842:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002844:	c407      	stmia	r4!, {r0, r1, r2}
 8002846:	8023      	strh	r3, [r4, #0]
 8002848:	3402      	adds	r4, #2
 800284a:	0c1b      	lsrs	r3, r3, #16
 800284c:	7023      	strb	r3, [r4, #0]
	}

	ILI9341_Draw_Text(enabled_text, 10, 50, BLACK, 2, WHITE);
 800284e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8002852:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002856:	9301      	str	r3, [sp, #4]
 8002858:	2302      	movs	r3, #2
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	2300      	movs	r3, #0
 800285e:	2232      	movs	r2, #50	; 0x32
 8002860:	210a      	movs	r1, #10
 8002862:	f00a fd6f 	bl	800d344 <ILI9341_Draw_Text>



	// draw mode (direction) status
	char mode_text[16] = "";
 8002866:	2300      	movs	r3, #0
 8002868:	62bb      	str	r3, [r7, #40]	; 0x28
 800286a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800286e:	2200      	movs	r2, #0
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	605a      	str	r2, [r3, #4]
 8002874:	609a      	str	r2, [r3, #8]

	if((SWEEP_TIMER->CR1 & TIM_CR1_CMS_0) == TIM_CR1_CMS_0)
 8002876:	4b5b      	ldr	r3, [pc, #364]	; (80029e4 <FreqMenu_DrawSweepMenu+0x204>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0320 	and.w	r3, r3, #32
 800287e:	2b20      	cmp	r3, #32
 8002880:	d106      	bne.n	8002890 <FreqMenu_DrawSweepMenu+0xb0>
	{
		// direction not relevant in center-alligned mode (bi-directional)
		snprintf(mode_text, sizeof(mode_text), "DIRECTION: BOTH");
 8002882:	4b5c      	ldr	r3, [pc, #368]	; (80029f4 <FreqMenu_DrawSweepMenu+0x214>)
 8002884:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002888:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800288a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800288e:	e012      	b.n	80028b6 <FreqMenu_DrawSweepMenu+0xd6>
	{
		// center-alligned mode disabled (uni-directional)


		// get direction
		if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 8002890:	4b54      	ldr	r3, [pc, #336]	; (80029e4 <FreqMenu_DrawSweepMenu+0x204>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0310 	and.w	r3, r3, #16
 8002898:	2b10      	cmp	r3, #16
 800289a:	d106      	bne.n	80028aa <FreqMenu_DrawSweepMenu+0xca>
			snprintf(mode_text, sizeof(mode_text), "DIRECTION: DOWN");
 800289c:	4b56      	ldr	r3, [pc, #344]	; (80029f8 <FreqMenu_DrawSweepMenu+0x218>)
 800289e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80028a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80028a8:	e005      	b.n	80028b6 <FreqMenu_DrawSweepMenu+0xd6>
		else
			snprintf(mode_text, sizeof(mode_text), "DIRECTION:   UP");
 80028aa:	4b54      	ldr	r3, [pc, #336]	; (80029fc <FreqMenu_DrawSweepMenu+0x21c>)
 80028ac:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80028b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	}

	ILI9341_Draw_Text(mode_text, 10, 80, BLACK, 2, WHITE);
 80028b6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80028ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028be:	9301      	str	r3, [sp, #4]
 80028c0:	2302      	movs	r3, #2
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	2300      	movs	r3, #0
 80028c6:	2250      	movs	r2, #80	; 0x50
 80028c8:	210a      	movs	r1, #10
 80028ca:	f00a fd3b 	bl	800d344 <ILI9341_Draw_Text>

	// draw rate status
	char arr_text[20] = "";
 80028ce:	2300      	movs	r3, #0
 80028d0:	617b      	str	r3, [r7, #20]
 80028d2:	f107 0318 	add.w	r3, r7, #24
 80028d6:	2200      	movs	r2, #0
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	605a      	str	r2, [r3, #4]
 80028dc:	609a      	str	r2, [r3, #8]
 80028de:	60da      	str	r2, [r3, #12]
	snprintf(arr_text, sizeof(arr_text), "RATE: %1.5f Hertz", calculated_sweep_in_hertz);
 80028e0:	4b47      	ldr	r3, [pc, #284]	; (8002a00 <FreqMenu_DrawSweepMenu+0x220>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7fd fe57 	bl	8000598 <__aeabi_f2d>
 80028ea:	4603      	mov	r3, r0
 80028ec:	460c      	mov	r4, r1
 80028ee:	f107 0014 	add.w	r0, r7, #20
 80028f2:	e9cd 3400 	strd	r3, r4, [sp]
 80028f6:	4a43      	ldr	r2, [pc, #268]	; (8002a04 <FreqMenu_DrawSweepMenu+0x224>)
 80028f8:	2114      	movs	r1, #20
 80028fa:	f00c f86f 	bl	800e9dc <sniprintf>
	ILI9341_Draw_Text(arr_text, 10, 110, BLACK, 2, WHITE);
 80028fe:	f107 0014 	add.w	r0, r7, #20
 8002902:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002906:	9301      	str	r3, [sp, #4]
 8002908:	2302      	movs	r3, #2
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	2300      	movs	r3, #0
 800290e:	226e      	movs	r2, #110	; 0x6e
 8002910:	210a      	movs	r1, #10
 8002912:	f00a fd17 	bl	800d344 <ILI9341_Draw_Text>

	// draw output freq status

	char out_hertz[20] = "";
 8002916:	2300      	movs	r3, #0
 8002918:	603b      	str	r3, [r7, #0]
 800291a:	1d3b      	adds	r3, r7, #4
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	605a      	str	r2, [r3, #4]
 8002922:	609a      	str	r2, [r3, #8]
 8002924:	60da      	str	r2, [r3, #12]
	snprintf(out_hertz, sizeof(out_hertz), "OUT: %7.2f Hertz", SM_GetOutputInHertz());
 8002926:	f002 fa15 	bl	8004d54 <SM_GetOutputInHertz>
 800292a:	ee10 3a10 	vmov	r3, s0
 800292e:	4618      	mov	r0, r3
 8002930:	f7fd fe32 	bl	8000598 <__aeabi_f2d>
 8002934:	4603      	mov	r3, r0
 8002936:	460c      	mov	r4, r1
 8002938:	4638      	mov	r0, r7
 800293a:	e9cd 3400 	strd	r3, r4, [sp]
 800293e:	4a32      	ldr	r2, [pc, #200]	; (8002a08 <FreqMenu_DrawSweepMenu+0x228>)
 8002940:	2114      	movs	r1, #20
 8002942:	f00c f84b 	bl	800e9dc <sniprintf>
	ILI9341_Draw_Text(out_hertz, 10, 140, BLACK, 2, WHITE);
 8002946:	4638      	mov	r0, r7
 8002948:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800294c:	9301      	str	r3, [sp, #4]
 800294e:	2302      	movs	r3, #2
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	2300      	movs	r3, #0
 8002954:	228c      	movs	r2, #140	; 0x8c
 8002956:	210a      	movs	r1, #10
 8002958:	f00a fcf4 	bl	800d344 <ILI9341_Draw_Text>



	// draw bottom menu button text
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 800295c:	4b21      	ldr	r3, [pc, #132]	; (80029e4 <FreqMenu_DrawSweepMenu+0x204>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	2b01      	cmp	r3, #1
 8002966:	d10b      	bne.n	8002980 <FreqMenu_DrawSweepMenu+0x1a0>
		ILI9341_Draw_Text("PAUSE ", 10, 210, BLACK, 2, DARKCYAN);
 8002968:	f240 33ef 	movw	r3, #1007	; 0x3ef
 800296c:	9301      	str	r3, [sp, #4]
 800296e:	2302      	movs	r3, #2
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	2300      	movs	r3, #0
 8002974:	22d2      	movs	r2, #210	; 0xd2
 8002976:	210a      	movs	r1, #10
 8002978:	4824      	ldr	r0, [pc, #144]	; (8002a0c <FreqMenu_DrawSweepMenu+0x22c>)
 800297a:	f00a fce3 	bl	800d344 <ILI9341_Draw_Text>
 800297e:	e00a      	b.n	8002996 <FreqMenu_DrawSweepMenu+0x1b6>
	else
		ILI9341_Draw_Text("RESUME", 5, 210, BLACK, 2, DARKCYAN);
 8002980:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8002984:	9301      	str	r3, [sp, #4]
 8002986:	2302      	movs	r3, #2
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	2300      	movs	r3, #0
 800298c:	22d2      	movs	r2, #210	; 0xd2
 800298e:	2105      	movs	r1, #5
 8002990:	481f      	ldr	r0, [pc, #124]	; (8002a10 <FreqMenu_DrawSweepMenu+0x230>)
 8002992:	f00a fcd7 	bl	800d344 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("MODE", 95, 210, BLACK, 2, DARKGREEN);
 8002996:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 800299a:	9301      	str	r3, [sp, #4]
 800299c:	2302      	movs	r3, #2
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	2300      	movs	r3, #0
 80029a2:	22d2      	movs	r2, #210	; 0xd2
 80029a4:	215f      	movs	r1, #95	; 0x5f
 80029a6:	481b      	ldr	r0, [pc, #108]	; (8002a14 <FreqMenu_DrawSweepMenu+0x234>)
 80029a8:	f00a fccc 	bl	800d344 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("LOWER", 175, 210, BLACK, 2, YELLOW);
 80029ac:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80029b0:	9301      	str	r3, [sp, #4]
 80029b2:	2302      	movs	r3, #2
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	2300      	movs	r3, #0
 80029b8:	22d2      	movs	r2, #210	; 0xd2
 80029ba:	21af      	movs	r1, #175	; 0xaf
 80029bc:	4816      	ldr	r0, [pc, #88]	; (8002a18 <FreqMenu_DrawSweepMenu+0x238>)
 80029be:	f00a fcc1 	bl	800d344 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("UPPER", 245, 210, BLACK, 2, RED);
 80029c2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80029c6:	9301      	str	r3, [sp, #4]
 80029c8:	2302      	movs	r3, #2
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	2300      	movs	r3, #0
 80029ce:	22d2      	movs	r2, #210	; 0xd2
 80029d0:	21f5      	movs	r1, #245	; 0xf5
 80029d2:	4812      	ldr	r0, [pc, #72]	; (8002a1c <FreqMenu_DrawSweepMenu+0x23c>)
 80029d4:	f00a fcb6 	bl	800d344 <ILI9341_Draw_Text>

}
 80029d8:	bf00      	nop
 80029da:	374c      	adds	r7, #76	; 0x4c
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd90      	pop	{r4, r7, pc}
 80029e0:	08010b38 	.word	0x08010b38
 80029e4:	40000400 	.word	0x40000400
 80029e8:	40013400 	.word	0x40013400
 80029ec:	08010b48 	.word	0x08010b48
 80029f0:	08010b58 	.word	0x08010b58
 80029f4:	08010b68 	.word	0x08010b68
 80029f8:	08010b78 	.word	0x08010b78
 80029fc:	08010b88 	.word	0x08010b88
 8002a00:	20001f38 	.word	0x20001f38
 8002a04:	08010b98 	.word	0x08010b98
 8002a08:	08010bac 	.word	0x08010bac
 8002a0c:	08010bc0 	.word	0x08010bc0
 8002a10:	08010bc8 	.word	0x08010bc8
 8002a14:	08010bd0 	.word	0x08010bd0
 8002a18:	08010bd8 	.word	0x08010bd8
 8002a1c:	08010be0 	.word	0x08010be0

08002a20 <FuncMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMenu(eFuncMenu_Status pMenu)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8002a2a:	79fb      	ldrb	r3, [r7, #7]
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d007      	beq.n	8002a40 <FuncMenu_DrawMenu+0x20>
 8002a30:	2b03      	cmp	r3, #3
 8002a32:	d008      	beq.n	8002a46 <FuncMenu_DrawMenu+0x26>
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d000      	beq.n	8002a3a <FuncMenu_DrawMenu+0x1a>
		case ENABLE_FUNC_SYNC_MENU:
			FuncMenu_DrawSyncMenu();
			break;

		default:
			break;
 8002a38:	e008      	b.n	8002a4c <FuncMenu_DrawMenu+0x2c>
			FuncMenu_DrawMainMenu();
 8002a3a:	f000 f80b 	bl	8002a54 <FuncMenu_DrawMainMenu>
			break;
 8002a3e:	e005      	b.n	8002a4c <FuncMenu_DrawMenu+0x2c>
			FuncMenu_DrawSignalMenu();
 8002a40:	f000 f84e 	bl	8002ae0 <FuncMenu_DrawSignalMenu>
			break;
 8002a44:	e002      	b.n	8002a4c <FuncMenu_DrawMenu+0x2c>
			FuncMenu_DrawSyncMenu();
 8002a46:	f000 fa2b 	bl	8002ea0 <FuncMenu_DrawSyncMenu>
			break;
 8002a4a:	bf00      	nop

	}
}
 8002a4c:	bf00      	nop
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <FuncMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMainMenu()
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("FUNCTION MAIN MENU", 	10, 10, WHITE, 3, BLACK);
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	9301      	str	r3, [sp, #4]
 8002a5e:	2303      	movs	r3, #3
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a66:	220a      	movs	r2, #10
 8002a68:	210a      	movs	r1, #10
 8002a6a:	4819      	ldr	r0, [pc, #100]	; (8002ad0 <FuncMenu_DrawMainMenu+0x7c>)
 8002a6c:	f00a fc6a 	bl	800d344 <ILI9341_Draw_Text>
 	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 10, 210, BLACK, 2, DARKCYAN);
 8002a70:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8002a74:	9301      	str	r3, [sp, #4]
 8002a76:	2302      	movs	r3, #2
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	22d2      	movs	r2, #210	; 0xd2
 8002a7e:	210a      	movs	r1, #10
 8002a80:	4814      	ldr	r0, [pc, #80]	; (8002ad4 <FuncMenu_DrawMainMenu+0x80>)
 8002a82:	f00a fc5f 	bl	800d344 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SYNC", 100, 210, BLACK, 2, DARKGREEN);
 8002a86:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8002a8a:	9301      	str	r3, [sp, #4]
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	2300      	movs	r3, #0
 8002a92:	22d2      	movs	r2, #210	; 0xd2
 8002a94:	2164      	movs	r1, #100	; 0x64
 8002a96:	4810      	ldr	r0, [pc, #64]	; (8002ad8 <FuncMenu_DrawMainMenu+0x84>)
 8002a98:	f00a fc54 	bl	800d344 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
 8002a9c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002aa0:	9301      	str	r3, [sp, #4]
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	22d2      	movs	r2, #210	; 0xd2
 8002aaa:	21af      	movs	r1, #175	; 0xaf
 8002aac:	480b      	ldr	r0, [pc, #44]	; (8002adc <FuncMenu_DrawMainMenu+0x88>)
 8002aae:	f00a fc49 	bl	800d344 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
 8002ab2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002ab6:	9301      	str	r3, [sp, #4]
 8002ab8:	2302      	movs	r3, #2
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	2300      	movs	r3, #0
 8002abe:	22d2      	movs	r2, #210	; 0xd2
 8002ac0:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002ac4:	4805      	ldr	r0, [pc, #20]	; (8002adc <FuncMenu_DrawMainMenu+0x88>)
 8002ac6:	f00a fc3d 	bl	800d344 <ILI9341_Draw_Text>
}
 8002aca:	bf00      	nop
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	08010be8 	.word	0x08010be8
 8002ad4:	08010bfc 	.word	0x08010bfc
 8002ad8:	08010c04 	.word	0x08010c04
 8002adc:	08010c0c 	.word	0x08010c0c

08002ae0 <FuncMenu_DrawSignalMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawSignalMenu()
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("SELECT SIGNAL FUNCTION", 	10, 10, WHITE, 3, BLACK);
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	9301      	str	r3, [sp, #4]
 8002aea:	2303      	movs	r3, #3
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002af2:	220a      	movs	r2, #10
 8002af4:	210a      	movs	r1, #10
 8002af6:	48b9      	ldr	r0, [pc, #740]	; (8002ddc <FuncMenu_DrawSignalMenu+0x2fc>)
 8002af8:	f00a fc24 	bl	800d344 <ILI9341_Draw_Text>

	//FunctionProfile_t *func_profileTmp = FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile;
 8002afc:	2000      	movs	r0, #0
 8002afe:	f002 f8f7 	bl	8004cf0 <SM_GetOutputChannel>
 8002b02:	4603      	mov	r3, r0
 8002b04:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8002b08:	607b      	str	r3, [r7, #4]
	if(func_profileTmp)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 81b6 	beq.w	8002e7e <FuncMenu_DrawSignalMenu+0x39e>
	{
		switch(func_profileTmp->func)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	2b05      	cmp	r3, #5
 8002b18:	f200 81b1 	bhi.w	8002e7e <FuncMenu_DrawSignalMenu+0x39e>
 8002b1c:	a201      	add	r2, pc, #4	; (adr r2, 8002b24 <FuncMenu_DrawSignalMenu+0x44>)
 8002b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b22:	bf00      	nop
 8002b24:	08002b3d 	.word	0x08002b3d
 8002b28:	08002bc3 	.word	0x08002bc3
 8002b2c:	08002c49 	.word	0x08002c49
 8002b30:	08002ccf 	.word	0x08002ccf
 8002b34:	08002d55 	.word	0x08002d55
 8002b38:	08002df9 	.word	0x08002df9
		{
			case SINE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, WHITE, 2, BLACK);
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	9301      	str	r3, [sp, #4]
 8002b40:	2302      	movs	r3, #2
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b48:	2232      	movs	r2, #50	; 0x32
 8002b4a:	210a      	movs	r1, #10
 8002b4c:	48a4      	ldr	r0, [pc, #656]	; (8002de0 <FuncMenu_DrawSignalMenu+0x300>)
 8002b4e:	f00a fbf9 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8002b52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b56:	9301      	str	r3, [sp, #4]
 8002b58:	2302      	movs	r3, #2
 8002b5a:	9300      	str	r3, [sp, #0]
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	2246      	movs	r2, #70	; 0x46
 8002b60:	210a      	movs	r1, #10
 8002b62:	48a0      	ldr	r0, [pc, #640]	; (8002de4 <FuncMenu_DrawSignalMenu+0x304>)
 8002b64:	f00a fbee 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8002b68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b6c:	9301      	str	r3, [sp, #4]
 8002b6e:	2302      	movs	r3, #2
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	2300      	movs	r3, #0
 8002b74:	225a      	movs	r2, #90	; 0x5a
 8002b76:	210a      	movs	r1, #10
 8002b78:	489b      	ldr	r0, [pc, #620]	; (8002de8 <FuncMenu_DrawSignalMenu+0x308>)
 8002b7a:	f00a fbe3 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8002b7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b82:	9301      	str	r3, [sp, #4]
 8002b84:	2302      	movs	r3, #2
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	2300      	movs	r3, #0
 8002b8a:	226e      	movs	r2, #110	; 0x6e
 8002b8c:	210a      	movs	r1, #10
 8002b8e:	4897      	ldr	r0, [pc, #604]	; (8002dec <FuncMenu_DrawSignalMenu+0x30c>)
 8002b90:	f00a fbd8 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8002b94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b98:	9301      	str	r3, [sp, #4]
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	2282      	movs	r2, #130	; 0x82
 8002ba2:	210a      	movs	r1, #10
 8002ba4:	4892      	ldr	r0, [pc, #584]	; (8002df0 <FuncMenu_DrawSignalMenu+0x310>)
 8002ba6:	f00a fbcd 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8002baa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bae:	9301      	str	r3, [sp, #4]
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	2296      	movs	r2, #150	; 0x96
 8002bb8:	210a      	movs	r1, #10
 8002bba:	488e      	ldr	r0, [pc, #568]	; (8002df4 <FuncMenu_DrawSignalMenu+0x314>)
 8002bbc:	f00a fbc2 	bl	800d344 <ILI9341_Draw_Text>
				break;
 8002bc0:	e15d      	b.n	8002e7e <FuncMenu_DrawSignalMenu+0x39e>
			case SQUARE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8002bc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bc6:	9301      	str	r3, [sp, #4]
 8002bc8:	2302      	movs	r3, #2
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	2300      	movs	r3, #0
 8002bce:	2232      	movs	r2, #50	; 0x32
 8002bd0:	210a      	movs	r1, #10
 8002bd2:	4883      	ldr	r0, [pc, #524]	; (8002de0 <FuncMenu_DrawSignalMenu+0x300>)
 8002bd4:	f00a fbb6 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, WHITE, 2, BLACK);
 8002bd8:	2300      	movs	r3, #0
 8002bda:	9301      	str	r3, [sp, #4]
 8002bdc:	2302      	movs	r3, #2
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002be4:	2246      	movs	r2, #70	; 0x46
 8002be6:	210a      	movs	r1, #10
 8002be8:	487e      	ldr	r0, [pc, #504]	; (8002de4 <FuncMenu_DrawSignalMenu+0x304>)
 8002bea:	f00a fbab 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8002bee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bf2:	9301      	str	r3, [sp, #4]
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	225a      	movs	r2, #90	; 0x5a
 8002bfc:	210a      	movs	r1, #10
 8002bfe:	487a      	ldr	r0, [pc, #488]	; (8002de8 <FuncMenu_DrawSignalMenu+0x308>)
 8002c00:	f00a fba0 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8002c04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c08:	9301      	str	r3, [sp, #4]
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	2300      	movs	r3, #0
 8002c10:	226e      	movs	r2, #110	; 0x6e
 8002c12:	210a      	movs	r1, #10
 8002c14:	4875      	ldr	r0, [pc, #468]	; (8002dec <FuncMenu_DrawSignalMenu+0x30c>)
 8002c16:	f00a fb95 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8002c1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c1e:	9301      	str	r3, [sp, #4]
 8002c20:	2302      	movs	r3, #2
 8002c22:	9300      	str	r3, [sp, #0]
 8002c24:	2300      	movs	r3, #0
 8002c26:	2282      	movs	r2, #130	; 0x82
 8002c28:	210a      	movs	r1, #10
 8002c2a:	4871      	ldr	r0, [pc, #452]	; (8002df0 <FuncMenu_DrawSignalMenu+0x310>)
 8002c2c:	f00a fb8a 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8002c30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c34:	9301      	str	r3, [sp, #4]
 8002c36:	2302      	movs	r3, #2
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	2296      	movs	r2, #150	; 0x96
 8002c3e:	210a      	movs	r1, #10
 8002c40:	486c      	ldr	r0, [pc, #432]	; (8002df4 <FuncMenu_DrawSignalMenu+0x314>)
 8002c42:	f00a fb7f 	bl	800d344 <ILI9341_Draw_Text>
				break;
 8002c46:	e11a      	b.n	8002e7e <FuncMenu_DrawSignalMenu+0x39e>
			case SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8002c48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c4c:	9301      	str	r3, [sp, #4]
 8002c4e:	2302      	movs	r3, #2
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	2300      	movs	r3, #0
 8002c54:	2232      	movs	r2, #50	; 0x32
 8002c56:	210a      	movs	r1, #10
 8002c58:	4861      	ldr	r0, [pc, #388]	; (8002de0 <FuncMenu_DrawSignalMenu+0x300>)
 8002c5a:	f00a fb73 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8002c5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c62:	9301      	str	r3, [sp, #4]
 8002c64:	2302      	movs	r3, #2
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	2300      	movs	r3, #0
 8002c6a:	2246      	movs	r2, #70	; 0x46
 8002c6c:	210a      	movs	r1, #10
 8002c6e:	485d      	ldr	r0, [pc, #372]	; (8002de4 <FuncMenu_DrawSignalMenu+0x304>)
 8002c70:	f00a fb68 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, WHITE, 2, BLACK);
 8002c74:	2300      	movs	r3, #0
 8002c76:	9301      	str	r3, [sp, #4]
 8002c78:	2302      	movs	r3, #2
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c80:	225a      	movs	r2, #90	; 0x5a
 8002c82:	210a      	movs	r1, #10
 8002c84:	4858      	ldr	r0, [pc, #352]	; (8002de8 <FuncMenu_DrawSignalMenu+0x308>)
 8002c86:	f00a fb5d 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8002c8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c8e:	9301      	str	r3, [sp, #4]
 8002c90:	2302      	movs	r3, #2
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	2300      	movs	r3, #0
 8002c96:	226e      	movs	r2, #110	; 0x6e
 8002c98:	210a      	movs	r1, #10
 8002c9a:	4854      	ldr	r0, [pc, #336]	; (8002dec <FuncMenu_DrawSignalMenu+0x30c>)
 8002c9c:	f00a fb52 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8002ca0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ca4:	9301      	str	r3, [sp, #4]
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	2300      	movs	r3, #0
 8002cac:	2282      	movs	r2, #130	; 0x82
 8002cae:	210a      	movs	r1, #10
 8002cb0:	484f      	ldr	r0, [pc, #316]	; (8002df0 <FuncMenu_DrawSignalMenu+0x310>)
 8002cb2:	f00a fb47 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8002cb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cba:	9301      	str	r3, [sp, #4]
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	2296      	movs	r2, #150	; 0x96
 8002cc4:	210a      	movs	r1, #10
 8002cc6:	484b      	ldr	r0, [pc, #300]	; (8002df4 <FuncMenu_DrawSignalMenu+0x314>)
 8002cc8:	f00a fb3c 	bl	800d344 <ILI9341_Draw_Text>
				break;
 8002ccc:	e0d7      	b.n	8002e7e <FuncMenu_DrawSignalMenu+0x39e>
			case REV_SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8002cce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cd2:	9301      	str	r3, [sp, #4]
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	2300      	movs	r3, #0
 8002cda:	2232      	movs	r2, #50	; 0x32
 8002cdc:	210a      	movs	r1, #10
 8002cde:	4840      	ldr	r0, [pc, #256]	; (8002de0 <FuncMenu_DrawSignalMenu+0x300>)
 8002ce0:	f00a fb30 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8002ce4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ce8:	9301      	str	r3, [sp, #4]
 8002cea:	2302      	movs	r3, #2
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	2300      	movs	r3, #0
 8002cf0:	2246      	movs	r2, #70	; 0x46
 8002cf2:	210a      	movs	r1, #10
 8002cf4:	483b      	ldr	r0, [pc, #236]	; (8002de4 <FuncMenu_DrawSignalMenu+0x304>)
 8002cf6:	f00a fb25 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8002cfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cfe:	9301      	str	r3, [sp, #4]
 8002d00:	2302      	movs	r3, #2
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	2300      	movs	r3, #0
 8002d06:	225a      	movs	r2, #90	; 0x5a
 8002d08:	210a      	movs	r1, #10
 8002d0a:	4837      	ldr	r0, [pc, #220]	; (8002de8 <FuncMenu_DrawSignalMenu+0x308>)
 8002d0c:	f00a fb1a 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, WHITE, 2, BLACK);
 8002d10:	2300      	movs	r3, #0
 8002d12:	9301      	str	r3, [sp, #4]
 8002d14:	2302      	movs	r3, #2
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d1c:	226e      	movs	r2, #110	; 0x6e
 8002d1e:	210a      	movs	r1, #10
 8002d20:	4832      	ldr	r0, [pc, #200]	; (8002dec <FuncMenu_DrawSignalMenu+0x30c>)
 8002d22:	f00a fb0f 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8002d26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d2a:	9301      	str	r3, [sp, #4]
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	9300      	str	r3, [sp, #0]
 8002d30:	2300      	movs	r3, #0
 8002d32:	2282      	movs	r2, #130	; 0x82
 8002d34:	210a      	movs	r1, #10
 8002d36:	482e      	ldr	r0, [pc, #184]	; (8002df0 <FuncMenu_DrawSignalMenu+0x310>)
 8002d38:	f00a fb04 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8002d3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d40:	9301      	str	r3, [sp, #4]
 8002d42:	2302      	movs	r3, #2
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	2300      	movs	r3, #0
 8002d48:	2296      	movs	r2, #150	; 0x96
 8002d4a:	210a      	movs	r1, #10
 8002d4c:	4829      	ldr	r0, [pc, #164]	; (8002df4 <FuncMenu_DrawSignalMenu+0x314>)
 8002d4e:	f00a faf9 	bl	800d344 <ILI9341_Draw_Text>
				break;
 8002d52:	e094      	b.n	8002e7e <FuncMenu_DrawSignalMenu+0x39e>
			case TRIANGLE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8002d54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d58:	9301      	str	r3, [sp, #4]
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	2300      	movs	r3, #0
 8002d60:	2232      	movs	r2, #50	; 0x32
 8002d62:	210a      	movs	r1, #10
 8002d64:	481e      	ldr	r0, [pc, #120]	; (8002de0 <FuncMenu_DrawSignalMenu+0x300>)
 8002d66:	f00a faed 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8002d6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d6e:	9301      	str	r3, [sp, #4]
 8002d70:	2302      	movs	r3, #2
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	2300      	movs	r3, #0
 8002d76:	2246      	movs	r2, #70	; 0x46
 8002d78:	210a      	movs	r1, #10
 8002d7a:	481a      	ldr	r0, [pc, #104]	; (8002de4 <FuncMenu_DrawSignalMenu+0x304>)
 8002d7c:	f00a fae2 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8002d80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d84:	9301      	str	r3, [sp, #4]
 8002d86:	2302      	movs	r3, #2
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	225a      	movs	r2, #90	; 0x5a
 8002d8e:	210a      	movs	r1, #10
 8002d90:	4815      	ldr	r0, [pc, #84]	; (8002de8 <FuncMenu_DrawSignalMenu+0x308>)
 8002d92:	f00a fad7 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8002d96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d9a:	9301      	str	r3, [sp, #4]
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	2300      	movs	r3, #0
 8002da2:	226e      	movs	r2, #110	; 0x6e
 8002da4:	210a      	movs	r1, #10
 8002da6:	4811      	ldr	r0, [pc, #68]	; (8002dec <FuncMenu_DrawSignalMenu+0x30c>)
 8002da8:	f00a facc 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, WHITE, 2, BLACK);
 8002dac:	2300      	movs	r3, #0
 8002dae:	9301      	str	r3, [sp, #4]
 8002db0:	2302      	movs	r3, #2
 8002db2:	9300      	str	r3, [sp, #0]
 8002db4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002db8:	2282      	movs	r2, #130	; 0x82
 8002dba:	210a      	movs	r1, #10
 8002dbc:	480c      	ldr	r0, [pc, #48]	; (8002df0 <FuncMenu_DrawSignalMenu+0x310>)
 8002dbe:	f00a fac1 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8002dc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002dc6:	9301      	str	r3, [sp, #4]
 8002dc8:	2302      	movs	r3, #2
 8002dca:	9300      	str	r3, [sp, #0]
 8002dcc:	2300      	movs	r3, #0
 8002dce:	2296      	movs	r2, #150	; 0x96
 8002dd0:	210a      	movs	r1, #10
 8002dd2:	4808      	ldr	r0, [pc, #32]	; (8002df4 <FuncMenu_DrawSignalMenu+0x314>)
 8002dd4:	f00a fab6 	bl	800d344 <ILI9341_Draw_Text>
				break;
 8002dd8:	e051      	b.n	8002e7e <FuncMenu_DrawSignalMenu+0x39e>
 8002dda:	bf00      	nop
 8002ddc:	08010c14 	.word	0x08010c14
 8002de0:	08010c2c 	.word	0x08010c2c
 8002de4:	08010c34 	.word	0x08010c34
 8002de8:	08010c40 	.word	0x08010c40
 8002dec:	08010c48 	.word	0x08010c48
 8002df0:	08010c54 	.word	0x08010c54
 8002df4:	08010c60 	.word	0x08010c60
			case IMPULSE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8002df8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002dfc:	9301      	str	r3, [sp, #4]
 8002dfe:	2302      	movs	r3, #2
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	2300      	movs	r3, #0
 8002e04:	2232      	movs	r2, #50	; 0x32
 8002e06:	210a      	movs	r1, #10
 8002e08:	481f      	ldr	r0, [pc, #124]	; (8002e88 <FuncMenu_DrawSignalMenu+0x3a8>)
 8002e0a:	f00a fa9b 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8002e0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e12:	9301      	str	r3, [sp, #4]
 8002e14:	2302      	movs	r3, #2
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	2300      	movs	r3, #0
 8002e1a:	2246      	movs	r2, #70	; 0x46
 8002e1c:	210a      	movs	r1, #10
 8002e1e:	481b      	ldr	r0, [pc, #108]	; (8002e8c <FuncMenu_DrawSignalMenu+0x3ac>)
 8002e20:	f00a fa90 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8002e24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e28:	9301      	str	r3, [sp, #4]
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	2300      	movs	r3, #0
 8002e30:	225a      	movs	r2, #90	; 0x5a
 8002e32:	210a      	movs	r1, #10
 8002e34:	4816      	ldr	r0, [pc, #88]	; (8002e90 <FuncMenu_DrawSignalMenu+0x3b0>)
 8002e36:	f00a fa85 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8002e3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e3e:	9301      	str	r3, [sp, #4]
 8002e40:	2302      	movs	r3, #2
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	2300      	movs	r3, #0
 8002e46:	226e      	movs	r2, #110	; 0x6e
 8002e48:	210a      	movs	r1, #10
 8002e4a:	4812      	ldr	r0, [pc, #72]	; (8002e94 <FuncMenu_DrawSignalMenu+0x3b4>)
 8002e4c:	f00a fa7a 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8002e50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e54:	9301      	str	r3, [sp, #4]
 8002e56:	2302      	movs	r3, #2
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	2282      	movs	r2, #130	; 0x82
 8002e5e:	210a      	movs	r1, #10
 8002e60:	480d      	ldr	r0, [pc, #52]	; (8002e98 <FuncMenu_DrawSignalMenu+0x3b8>)
 8002e62:	f00a fa6f 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, WHITE, 2, BLACK);
 8002e66:	2300      	movs	r3, #0
 8002e68:	9301      	str	r3, [sp, #4]
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e72:	2296      	movs	r2, #150	; 0x96
 8002e74:	210a      	movs	r1, #10
 8002e76:	4809      	ldr	r0, [pc, #36]	; (8002e9c <FuncMenu_DrawSignalMenu+0x3bc>)
 8002e78:	f00a fa64 	bl	800d344 <ILI9341_Draw_Text>
				break;
 8002e7c:	bf00      	nop

		}
	}


}
 8002e7e:	bf00      	nop
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	08010c2c 	.word	0x08010c2c
 8002e8c:	08010c34 	.word	0x08010c34
 8002e90:	08010c40 	.word	0x08010c40
 8002e94:	08010c48 	.word	0x08010c48
 8002e98:	08010c54 	.word	0x08010c54
 8002e9c:	08010c60 	.word	0x08010c60

08002ea0 <FuncMenu_DrawSyncMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawSyncMenu()
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("SELECT SYNC FUNCTION", 	10, 10, WHITE, 3, BLACK);
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	9301      	str	r3, [sp, #4]
 8002eaa:	2303      	movs	r3, #3
 8002eac:	9300      	str	r3, [sp, #0]
 8002eae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002eb2:	220a      	movs	r2, #10
 8002eb4:	210a      	movs	r1, #10
 8002eb6:	48b9      	ldr	r0, [pc, #740]	; (800319c <FuncMenu_DrawSyncMenu+0x2fc>)
 8002eb8:	f00a fa44 	bl	800d344 <ILI9341_Draw_Text>
	//FunctionProfile_t *func_profileTmp = FuncO_GetSyncFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(SYNC_CHANNEL)->func_profile;
 8002ebc:	2001      	movs	r0, #1
 8002ebe:	f001 ff17 	bl	8004cf0 <SM_GetOutputChannel>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8002ec8:	607b      	str	r3, [r7, #4]
	if(func_profileTmp)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f000 81b6 	beq.w	800323e <FuncMenu_DrawSyncMenu+0x39e>
	{
		switch(func_profileTmp->func)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	2b05      	cmp	r3, #5
 8002ed8:	f200 81b1 	bhi.w	800323e <FuncMenu_DrawSyncMenu+0x39e>
 8002edc:	a201      	add	r2, pc, #4	; (adr r2, 8002ee4 <FuncMenu_DrawSyncMenu+0x44>)
 8002ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee2:	bf00      	nop
 8002ee4:	08002efd 	.word	0x08002efd
 8002ee8:	08002f83 	.word	0x08002f83
 8002eec:	08003009 	.word	0x08003009
 8002ef0:	0800308f 	.word	0x0800308f
 8002ef4:	08003115 	.word	0x08003115
 8002ef8:	080031b9 	.word	0x080031b9
		{
			case SINE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, WHITE, 2, BLACK);
 8002efc:	2300      	movs	r3, #0
 8002efe:	9301      	str	r3, [sp, #4]
 8002f00:	2302      	movs	r3, #2
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f08:	2232      	movs	r2, #50	; 0x32
 8002f0a:	210a      	movs	r1, #10
 8002f0c:	48a4      	ldr	r0, [pc, #656]	; (80031a0 <FuncMenu_DrawSyncMenu+0x300>)
 8002f0e:	f00a fa19 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8002f12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f16:	9301      	str	r3, [sp, #4]
 8002f18:	2302      	movs	r3, #2
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	2246      	movs	r2, #70	; 0x46
 8002f20:	210a      	movs	r1, #10
 8002f22:	48a0      	ldr	r0, [pc, #640]	; (80031a4 <FuncMenu_DrawSyncMenu+0x304>)
 8002f24:	f00a fa0e 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8002f28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f2c:	9301      	str	r3, [sp, #4]
 8002f2e:	2302      	movs	r3, #2
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	2300      	movs	r3, #0
 8002f34:	225a      	movs	r2, #90	; 0x5a
 8002f36:	210a      	movs	r1, #10
 8002f38:	489b      	ldr	r0, [pc, #620]	; (80031a8 <FuncMenu_DrawSyncMenu+0x308>)
 8002f3a:	f00a fa03 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8002f3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f42:	9301      	str	r3, [sp, #4]
 8002f44:	2302      	movs	r3, #2
 8002f46:	9300      	str	r3, [sp, #0]
 8002f48:	2300      	movs	r3, #0
 8002f4a:	226e      	movs	r2, #110	; 0x6e
 8002f4c:	210a      	movs	r1, #10
 8002f4e:	4897      	ldr	r0, [pc, #604]	; (80031ac <FuncMenu_DrawSyncMenu+0x30c>)
 8002f50:	f00a f9f8 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8002f54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f58:	9301      	str	r3, [sp, #4]
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	9300      	str	r3, [sp, #0]
 8002f5e:	2300      	movs	r3, #0
 8002f60:	2282      	movs	r2, #130	; 0x82
 8002f62:	210a      	movs	r1, #10
 8002f64:	4892      	ldr	r0, [pc, #584]	; (80031b0 <FuncMenu_DrawSyncMenu+0x310>)
 8002f66:	f00a f9ed 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8002f6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f6e:	9301      	str	r3, [sp, #4]
 8002f70:	2302      	movs	r3, #2
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	2300      	movs	r3, #0
 8002f76:	2296      	movs	r2, #150	; 0x96
 8002f78:	210a      	movs	r1, #10
 8002f7a:	488e      	ldr	r0, [pc, #568]	; (80031b4 <FuncMenu_DrawSyncMenu+0x314>)
 8002f7c:	f00a f9e2 	bl	800d344 <ILI9341_Draw_Text>
				break;
 8002f80:	e15d      	b.n	800323e <FuncMenu_DrawSyncMenu+0x39e>
			case SQUARE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8002f82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f86:	9301      	str	r3, [sp, #4]
 8002f88:	2302      	movs	r3, #2
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	2232      	movs	r2, #50	; 0x32
 8002f90:	210a      	movs	r1, #10
 8002f92:	4883      	ldr	r0, [pc, #524]	; (80031a0 <FuncMenu_DrawSyncMenu+0x300>)
 8002f94:	f00a f9d6 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, WHITE, 2, BLACK);
 8002f98:	2300      	movs	r3, #0
 8002f9a:	9301      	str	r3, [sp, #4]
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fa4:	2246      	movs	r2, #70	; 0x46
 8002fa6:	210a      	movs	r1, #10
 8002fa8:	487e      	ldr	r0, [pc, #504]	; (80031a4 <FuncMenu_DrawSyncMenu+0x304>)
 8002faa:	f00a f9cb 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8002fae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fb2:	9301      	str	r3, [sp, #4]
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	9300      	str	r3, [sp, #0]
 8002fb8:	2300      	movs	r3, #0
 8002fba:	225a      	movs	r2, #90	; 0x5a
 8002fbc:	210a      	movs	r1, #10
 8002fbe:	487a      	ldr	r0, [pc, #488]	; (80031a8 <FuncMenu_DrawSyncMenu+0x308>)
 8002fc0:	f00a f9c0 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8002fc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fc8:	9301      	str	r3, [sp, #4]
 8002fca:	2302      	movs	r3, #2
 8002fcc:	9300      	str	r3, [sp, #0]
 8002fce:	2300      	movs	r3, #0
 8002fd0:	226e      	movs	r2, #110	; 0x6e
 8002fd2:	210a      	movs	r1, #10
 8002fd4:	4875      	ldr	r0, [pc, #468]	; (80031ac <FuncMenu_DrawSyncMenu+0x30c>)
 8002fd6:	f00a f9b5 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8002fda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fde:	9301      	str	r3, [sp, #4]
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	2282      	movs	r2, #130	; 0x82
 8002fe8:	210a      	movs	r1, #10
 8002fea:	4871      	ldr	r0, [pc, #452]	; (80031b0 <FuncMenu_DrawSyncMenu+0x310>)
 8002fec:	f00a f9aa 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8002ff0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ff4:	9301      	str	r3, [sp, #4]
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	2296      	movs	r2, #150	; 0x96
 8002ffe:	210a      	movs	r1, #10
 8003000:	486c      	ldr	r0, [pc, #432]	; (80031b4 <FuncMenu_DrawSyncMenu+0x314>)
 8003002:	f00a f99f 	bl	800d344 <ILI9341_Draw_Text>
				break;
 8003006:	e11a      	b.n	800323e <FuncMenu_DrawSyncMenu+0x39e>
			case SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8003008:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800300c:	9301      	str	r3, [sp, #4]
 800300e:	2302      	movs	r3, #2
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	2300      	movs	r3, #0
 8003014:	2232      	movs	r2, #50	; 0x32
 8003016:	210a      	movs	r1, #10
 8003018:	4861      	ldr	r0, [pc, #388]	; (80031a0 <FuncMenu_DrawSyncMenu+0x300>)
 800301a:	f00a f993 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 800301e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003022:	9301      	str	r3, [sp, #4]
 8003024:	2302      	movs	r3, #2
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	2300      	movs	r3, #0
 800302a:	2246      	movs	r2, #70	; 0x46
 800302c:	210a      	movs	r1, #10
 800302e:	485d      	ldr	r0, [pc, #372]	; (80031a4 <FuncMenu_DrawSyncMenu+0x304>)
 8003030:	f00a f988 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, WHITE, 2, BLACK);
 8003034:	2300      	movs	r3, #0
 8003036:	9301      	str	r3, [sp, #4]
 8003038:	2302      	movs	r3, #2
 800303a:	9300      	str	r3, [sp, #0]
 800303c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003040:	225a      	movs	r2, #90	; 0x5a
 8003042:	210a      	movs	r1, #10
 8003044:	4858      	ldr	r0, [pc, #352]	; (80031a8 <FuncMenu_DrawSyncMenu+0x308>)
 8003046:	f00a f97d 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 800304a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800304e:	9301      	str	r3, [sp, #4]
 8003050:	2302      	movs	r3, #2
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	2300      	movs	r3, #0
 8003056:	226e      	movs	r2, #110	; 0x6e
 8003058:	210a      	movs	r1, #10
 800305a:	4854      	ldr	r0, [pc, #336]	; (80031ac <FuncMenu_DrawSyncMenu+0x30c>)
 800305c:	f00a f972 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8003060:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003064:	9301      	str	r3, [sp, #4]
 8003066:	2302      	movs	r3, #2
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	2300      	movs	r3, #0
 800306c:	2282      	movs	r2, #130	; 0x82
 800306e:	210a      	movs	r1, #10
 8003070:	484f      	ldr	r0, [pc, #316]	; (80031b0 <FuncMenu_DrawSyncMenu+0x310>)
 8003072:	f00a f967 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8003076:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800307a:	9301      	str	r3, [sp, #4]
 800307c:	2302      	movs	r3, #2
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	2300      	movs	r3, #0
 8003082:	2296      	movs	r2, #150	; 0x96
 8003084:	210a      	movs	r1, #10
 8003086:	484b      	ldr	r0, [pc, #300]	; (80031b4 <FuncMenu_DrawSyncMenu+0x314>)
 8003088:	f00a f95c 	bl	800d344 <ILI9341_Draw_Text>
				break;
 800308c:	e0d7      	b.n	800323e <FuncMenu_DrawSyncMenu+0x39e>
			case REV_SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 800308e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003092:	9301      	str	r3, [sp, #4]
 8003094:	2302      	movs	r3, #2
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	2300      	movs	r3, #0
 800309a:	2232      	movs	r2, #50	; 0x32
 800309c:	210a      	movs	r1, #10
 800309e:	4840      	ldr	r0, [pc, #256]	; (80031a0 <FuncMenu_DrawSyncMenu+0x300>)
 80030a0:	f00a f950 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 80030a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030a8:	9301      	str	r3, [sp, #4]
 80030aa:	2302      	movs	r3, #2
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	2300      	movs	r3, #0
 80030b0:	2246      	movs	r2, #70	; 0x46
 80030b2:	210a      	movs	r1, #10
 80030b4:	483b      	ldr	r0, [pc, #236]	; (80031a4 <FuncMenu_DrawSyncMenu+0x304>)
 80030b6:	f00a f945 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 80030ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030be:	9301      	str	r3, [sp, #4]
 80030c0:	2302      	movs	r3, #2
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	2300      	movs	r3, #0
 80030c6:	225a      	movs	r2, #90	; 0x5a
 80030c8:	210a      	movs	r1, #10
 80030ca:	4837      	ldr	r0, [pc, #220]	; (80031a8 <FuncMenu_DrawSyncMenu+0x308>)
 80030cc:	f00a f93a 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, WHITE, 2, BLACK);
 80030d0:	2300      	movs	r3, #0
 80030d2:	9301      	str	r3, [sp, #4]
 80030d4:	2302      	movs	r3, #2
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030dc:	226e      	movs	r2, #110	; 0x6e
 80030de:	210a      	movs	r1, #10
 80030e0:	4832      	ldr	r0, [pc, #200]	; (80031ac <FuncMenu_DrawSyncMenu+0x30c>)
 80030e2:	f00a f92f 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 80030e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030ea:	9301      	str	r3, [sp, #4]
 80030ec:	2302      	movs	r3, #2
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	2300      	movs	r3, #0
 80030f2:	2282      	movs	r2, #130	; 0x82
 80030f4:	210a      	movs	r1, #10
 80030f6:	482e      	ldr	r0, [pc, #184]	; (80031b0 <FuncMenu_DrawSyncMenu+0x310>)
 80030f8:	f00a f924 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 80030fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003100:	9301      	str	r3, [sp, #4]
 8003102:	2302      	movs	r3, #2
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	2300      	movs	r3, #0
 8003108:	2296      	movs	r2, #150	; 0x96
 800310a:	210a      	movs	r1, #10
 800310c:	4829      	ldr	r0, [pc, #164]	; (80031b4 <FuncMenu_DrawSyncMenu+0x314>)
 800310e:	f00a f919 	bl	800d344 <ILI9341_Draw_Text>
				break;
 8003112:	e094      	b.n	800323e <FuncMenu_DrawSyncMenu+0x39e>
			case TRIANGLE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8003114:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003118:	9301      	str	r3, [sp, #4]
 800311a:	2302      	movs	r3, #2
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	2300      	movs	r3, #0
 8003120:	2232      	movs	r2, #50	; 0x32
 8003122:	210a      	movs	r1, #10
 8003124:	481e      	ldr	r0, [pc, #120]	; (80031a0 <FuncMenu_DrawSyncMenu+0x300>)
 8003126:	f00a f90d 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 800312a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800312e:	9301      	str	r3, [sp, #4]
 8003130:	2302      	movs	r3, #2
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	2300      	movs	r3, #0
 8003136:	2246      	movs	r2, #70	; 0x46
 8003138:	210a      	movs	r1, #10
 800313a:	481a      	ldr	r0, [pc, #104]	; (80031a4 <FuncMenu_DrawSyncMenu+0x304>)
 800313c:	f00a f902 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8003140:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003144:	9301      	str	r3, [sp, #4]
 8003146:	2302      	movs	r3, #2
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	2300      	movs	r3, #0
 800314c:	225a      	movs	r2, #90	; 0x5a
 800314e:	210a      	movs	r1, #10
 8003150:	4815      	ldr	r0, [pc, #84]	; (80031a8 <FuncMenu_DrawSyncMenu+0x308>)
 8003152:	f00a f8f7 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8003156:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800315a:	9301      	str	r3, [sp, #4]
 800315c:	2302      	movs	r3, #2
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	2300      	movs	r3, #0
 8003162:	226e      	movs	r2, #110	; 0x6e
 8003164:	210a      	movs	r1, #10
 8003166:	4811      	ldr	r0, [pc, #68]	; (80031ac <FuncMenu_DrawSyncMenu+0x30c>)
 8003168:	f00a f8ec 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, WHITE, 2, BLACK);
 800316c:	2300      	movs	r3, #0
 800316e:	9301      	str	r3, [sp, #4]
 8003170:	2302      	movs	r3, #2
 8003172:	9300      	str	r3, [sp, #0]
 8003174:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003178:	2282      	movs	r2, #130	; 0x82
 800317a:	210a      	movs	r1, #10
 800317c:	480c      	ldr	r0, [pc, #48]	; (80031b0 <FuncMenu_DrawSyncMenu+0x310>)
 800317e:	f00a f8e1 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8003182:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003186:	9301      	str	r3, [sp, #4]
 8003188:	2302      	movs	r3, #2
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	2300      	movs	r3, #0
 800318e:	2296      	movs	r2, #150	; 0x96
 8003190:	210a      	movs	r1, #10
 8003192:	4808      	ldr	r0, [pc, #32]	; (80031b4 <FuncMenu_DrawSyncMenu+0x314>)
 8003194:	f00a f8d6 	bl	800d344 <ILI9341_Draw_Text>
				break;
 8003198:	e051      	b.n	800323e <FuncMenu_DrawSyncMenu+0x39e>
 800319a:	bf00      	nop
 800319c:	08010c68 	.word	0x08010c68
 80031a0:	08010c2c 	.word	0x08010c2c
 80031a4:	08010c34 	.word	0x08010c34
 80031a8:	08010c40 	.word	0x08010c40
 80031ac:	08010c48 	.word	0x08010c48
 80031b0:	08010c54 	.word	0x08010c54
 80031b4:	08010c60 	.word	0x08010c60
			case IMPULSE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 80031b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031bc:	9301      	str	r3, [sp, #4]
 80031be:	2302      	movs	r3, #2
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	2300      	movs	r3, #0
 80031c4:	2232      	movs	r2, #50	; 0x32
 80031c6:	210a      	movs	r1, #10
 80031c8:	481f      	ldr	r0, [pc, #124]	; (8003248 <FuncMenu_DrawSyncMenu+0x3a8>)
 80031ca:	f00a f8bb 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 80031ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031d2:	9301      	str	r3, [sp, #4]
 80031d4:	2302      	movs	r3, #2
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	2300      	movs	r3, #0
 80031da:	2246      	movs	r2, #70	; 0x46
 80031dc:	210a      	movs	r1, #10
 80031de:	481b      	ldr	r0, [pc, #108]	; (800324c <FuncMenu_DrawSyncMenu+0x3ac>)
 80031e0:	f00a f8b0 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 80031e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031e8:	9301      	str	r3, [sp, #4]
 80031ea:	2302      	movs	r3, #2
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	2300      	movs	r3, #0
 80031f0:	225a      	movs	r2, #90	; 0x5a
 80031f2:	210a      	movs	r1, #10
 80031f4:	4816      	ldr	r0, [pc, #88]	; (8003250 <FuncMenu_DrawSyncMenu+0x3b0>)
 80031f6:	f00a f8a5 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 80031fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031fe:	9301      	str	r3, [sp, #4]
 8003200:	2302      	movs	r3, #2
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	2300      	movs	r3, #0
 8003206:	226e      	movs	r2, #110	; 0x6e
 8003208:	210a      	movs	r1, #10
 800320a:	4812      	ldr	r0, [pc, #72]	; (8003254 <FuncMenu_DrawSyncMenu+0x3b4>)
 800320c:	f00a f89a 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8003210:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003214:	9301      	str	r3, [sp, #4]
 8003216:	2302      	movs	r3, #2
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	2300      	movs	r3, #0
 800321c:	2282      	movs	r2, #130	; 0x82
 800321e:	210a      	movs	r1, #10
 8003220:	480d      	ldr	r0, [pc, #52]	; (8003258 <FuncMenu_DrawSyncMenu+0x3b8>)
 8003222:	f00a f88f 	bl	800d344 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, WHITE, 2, BLACK);
 8003226:	2300      	movs	r3, #0
 8003228:	9301      	str	r3, [sp, #4]
 800322a:	2302      	movs	r3, #2
 800322c:	9300      	str	r3, [sp, #0]
 800322e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003232:	2296      	movs	r2, #150	; 0x96
 8003234:	210a      	movs	r1, #10
 8003236:	4809      	ldr	r0, [pc, #36]	; (800325c <FuncMenu_DrawSyncMenu+0x3bc>)
 8003238:	f00a f884 	bl	800d344 <ILI9341_Draw_Text>
				break;
 800323c:	bf00      	nop

		}
	}

}
 800323e:	bf00      	nop
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	08010c2c 	.word	0x08010c2c
 800324c:	08010c34 	.word	0x08010c34
 8003250:	08010c40 	.word	0x08010c40
 8003254:	08010c48 	.word	0x08010c48
 8003258:	08010c54 	.word	0x08010c54
 800325c:	08010c60 	.word	0x08010c60

08003260 <GainMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMenu(eGainMenu_Status pMenu)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	4603      	mov	r3, r0
 8003268:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 800326a:	79fb      	ldrb	r3, [r7, #7]
 800326c:	2b02      	cmp	r3, #2
 800326e:	d007      	beq.n	8003280 <GainMenu_DrawMenu+0x20>
 8003270:	2b03      	cmp	r3, #3
 8003272:	d008      	beq.n	8003286 <GainMenu_DrawMenu+0x26>
 8003274:	2b01      	cmp	r3, #1
 8003276:	d000      	beq.n	800327a <GainMenu_DrawMenu+0x1a>
		case ENABLE_GAIN_SYNC_MENU:
			GainMenu_DrawSyncMenu();
			break;

		default:
			break;
 8003278:	e008      	b.n	800328c <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawMainMenu();
 800327a:	f000 f80b 	bl	8003294 <GainMenu_DrawMainMenu>
			break;
 800327e:	e005      	b.n	800328c <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSignalMenu();
 8003280:	f000 f84e 	bl	8003320 <GainMenu_DrawSignalMenu>
			break;
 8003284:	e002      	b.n	800328c <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSyncMenu();
 8003286:	f000 f85f 	bl	8003348 <GainMenu_DrawSyncMenu>
			break;
 800328a:	bf00      	nop

	}
}
 800328c:	bf00      	nop
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <GainMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMainMenu()
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("GAIN MAIN MENU", 	10, 10, WHITE, 3, BLACK);
 800329a:	2300      	movs	r3, #0
 800329c:	9301      	str	r3, [sp, #4]
 800329e:	2303      	movs	r3, #3
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032a6:	220a      	movs	r2, #10
 80032a8:	210a      	movs	r1, #10
 80032aa:	4819      	ldr	r0, [pc, #100]	; (8003310 <GainMenu_DrawMainMenu+0x7c>)
 80032ac:	f00a f84a 	bl	800d344 <ILI9341_Draw_Text>
 	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 10, 210, BLACK, 2, DARKCYAN);
 80032b0:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80032b4:	9301      	str	r3, [sp, #4]
 80032b6:	2302      	movs	r3, #2
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	2300      	movs	r3, #0
 80032bc:	22d2      	movs	r2, #210	; 0xd2
 80032be:	210a      	movs	r1, #10
 80032c0:	4814      	ldr	r0, [pc, #80]	; (8003314 <GainMenu_DrawMainMenu+0x80>)
 80032c2:	f00a f83f 	bl	800d344 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SYNC", 100, 210, BLACK, 2, DARKGREEN);
 80032c6:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80032ca:	9301      	str	r3, [sp, #4]
 80032cc:	2302      	movs	r3, #2
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	2300      	movs	r3, #0
 80032d2:	22d2      	movs	r2, #210	; 0xd2
 80032d4:	2164      	movs	r1, #100	; 0x64
 80032d6:	4810      	ldr	r0, [pc, #64]	; (8003318 <GainMenu_DrawMainMenu+0x84>)
 80032d8:	f00a f834 	bl	800d344 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
 80032dc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80032e0:	9301      	str	r3, [sp, #4]
 80032e2:	2302      	movs	r3, #2
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	2300      	movs	r3, #0
 80032e8:	22d2      	movs	r2, #210	; 0xd2
 80032ea:	21af      	movs	r1, #175	; 0xaf
 80032ec:	480b      	ldr	r0, [pc, #44]	; (800331c <GainMenu_DrawMainMenu+0x88>)
 80032ee:	f00a f829 	bl	800d344 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
 80032f2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80032f6:	9301      	str	r3, [sp, #4]
 80032f8:	2302      	movs	r3, #2
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	2300      	movs	r3, #0
 80032fe:	22d2      	movs	r2, #210	; 0xd2
 8003300:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003304:	4805      	ldr	r0, [pc, #20]	; (800331c <GainMenu_DrawMainMenu+0x88>)
 8003306:	f00a f81d 	bl	800d344 <ILI9341_Draw_Text>
}
 800330a:	bf00      	nop
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	08010c80 	.word	0x08010c80
 8003314:	08010c90 	.word	0x08010c90
 8003318:	08010c98 	.word	0x08010c98
 800331c:	08010ca0 	.word	0x08010ca0

08003320 <GainMenu_DrawSignalMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSignalMenu()
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("SELECT SIGNAL GAIN", 10, 10, WHITE, 3, BLACK);
 8003326:	2300      	movs	r3, #0
 8003328:	9301      	str	r3, [sp, #4]
 800332a:	2303      	movs	r3, #3
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003332:	220a      	movs	r2, #10
 8003334:	210a      	movs	r1, #10
 8003336:	4803      	ldr	r0, [pc, #12]	; (8003344 <GainMenu_DrawSignalMenu+0x24>)
 8003338:	f00a f804 	bl	800d344 <ILI9341_Draw_Text>
}
 800333c:	bf00      	nop
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	08010ca8 	.word	0x08010ca8

08003348 <GainMenu_DrawSyncMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSyncMenu()
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("SELECT SYNC GAIN", 10, 10, WHITE, 3, BLACK);
 800334e:	2300      	movs	r3, #0
 8003350:	9301      	str	r3, [sp, #4]
 8003352:	2303      	movs	r3, #3
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800335a:	220a      	movs	r2, #10
 800335c:	210a      	movs	r1, #10
 800335e:	4803      	ldr	r0, [pc, #12]	; (800336c <GainMenu_DrawSyncMenu+0x24>)
 8003360:	f009 fff0 	bl	800d344 <ILI9341_Draw_Text>
}
 8003364:	bf00      	nop
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	08010cbc 	.word	0x08010cbc

08003370 <BiasMenu_getStatus>:
#include <stdio.h>

eBiasMenu_Status eNextBiasMenuStatus =	DISABLE_BIAS_MENU;

eBiasMenu_Status BiasMenu_getStatus()
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
	return eNextBiasMenuStatus;
 8003374:	4b03      	ldr	r3, [pc, #12]	; (8003384 <BiasMenu_getStatus+0x14>)
 8003376:	781b      	ldrb	r3, [r3, #0]
}
 8003378:	4618      	mov	r0, r3
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	20001f19 	.word	0x20001f19

08003388 <BiasMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuEntryHandler()
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("BiasMenuEntryHandler Event captured\n");
 800338c:	480b      	ldr	r0, [pc, #44]	; (80033bc <BiasMenuEntryHandler+0x34>)
 800338e:	f00b fb1d 	bl	800e9cc <puts>
#endif

	DM_RefreshScreen();
 8003392:	f7fd fe99 	bl	80010c8 <DM_RefreshScreen>

	eNextBiasMenuStatus = ENABLE_BIAS_MENU;
 8003396:	4b0a      	ldr	r3, [pc, #40]	; (80033c0 <BiasMenuEntryHandler+0x38>)
 8003398:	2201      	movs	r2, #1
 800339a:	701a      	strb	r2, [r3, #0]

	ENCODER_TIMER->ARR = BIAS_MAX;
 800339c:	4b09      	ldr	r3, [pc, #36]	; (80033c4 <BiasMenuEntryHandler+0x3c>)
 800339e:	f44f 7248 	mov.w	r2, #800	; 0x320
 80033a2:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BO_GetDcBiasEncoderValue();
 80033a4:	f000 ff20 	bl	80041e8 <BO_GetDcBiasEncoderValue>
 80033a8:	4603      	mov	r3, r0
 80033aa:	461a      	mov	r2, r3
 80033ac:	4b05      	ldr	r3, [pc, #20]	; (80033c4 <BiasMenuEntryHandler+0x3c>)
 80033ae:	625a      	str	r2, [r3, #36]	; 0x24

	eNewEvent = evIdle;
 80033b0:	4b05      	ldr	r3, [pc, #20]	; (80033c8 <BiasMenuEntryHandler+0x40>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 80033b6:	230c      	movs	r3, #12
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	08010cd0 	.word	0x08010cd0
 80033c0:	20001f19 	.word	0x20001f19
 80033c4:	40012c00 	.word	0x40012c00
 80033c8:	20001f1b 	.word	0x20001f1b

080033cc <BiasMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuInputHandler()
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("BiasMenuInputHandler Event captured\n");
 80033d0:	4807      	ldr	r0, [pc, #28]	; (80033f0 <BiasMenuInputHandler+0x24>)
 80033d2:	f00b fafb 	bl	800e9cc <puts>
#endif

	BO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 80033d6:	2001      	movs	r0, #1
 80033d8:	f001 fca0 	bl	8004d1c <SM_GetEncoderValue>
 80033dc:	4603      	mov	r3, r0
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 ff0e 	bl	8004200 <BO_ModifyOutput>

	eNewEvent = evIdle;
 80033e4:	4b03      	ldr	r3, [pc, #12]	; (80033f4 <BiasMenuInputHandler+0x28>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 80033ea:	230c      	movs	r3, #12
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	08010cf4 	.word	0x08010cf4
 80033f4:	20001f1b 	.word	0x20001f1b

080033f8 <BiasMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuExitHandler()
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("BiasMenuExitHandler Event captured\n");
 80033fc:	4808      	ldr	r0, [pc, #32]	; (8003420 <BiasMenuExitHandler+0x28>)
 80033fe:	f00b fae5 	bl	800e9cc <puts>
#endif


	// disable the menu
	eNextBiasMenuStatus = DISABLE_BIAS_MENU;
 8003402:	4b08      	ldr	r3, [pc, #32]	; (8003424 <BiasMenuExitHandler+0x2c>)
 8003404:	2200      	movs	r2, #0
 8003406:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8003408:	f7fd fe5e 	bl	80010c8 <DM_RefreshScreen>

#ifdef SWV_DEBUG_ENABLED
	  printf("returning to Idle State\n");
 800340c:	4806      	ldr	r0, [pc, #24]	; (8003428 <BiasMenuExitHandler+0x30>)
 800340e:	f00b fadd 	bl	800e9cc <puts>
#endif

	eNewEvent = evIdle;
 8003412:	4b06      	ldr	r3, [pc, #24]	; (800342c <BiasMenuExitHandler+0x34>)
 8003414:	2200      	movs	r2, #0
 8003416:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	08010d18 	.word	0x08010d18
 8003424:	20001f19 	.word	0x20001f19
 8003428:	08010d3c 	.word	0x08010d3c
 800342c:	20001f1b 	.word	0x20001f1b

08003430 <EM_ProcessEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_ProcessEvent()
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0

	switch(eNextState)
 8003434:	4bab      	ldr	r3, [pc, #684]	; (80036e4 <EM_ProcessEvent+0x2b4>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b0c      	cmp	r3, #12
 800343a:	f200 81b2 	bhi.w	80037a2 <EM_ProcessEvent+0x372>
 800343e:	a201      	add	r2, pc, #4	; (adr r2, 8003444 <EM_ProcessEvent+0x14>)
 8003440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003444:	08003479 	.word	0x08003479
 8003448:	080034d3 	.word	0x080034d3
 800344c:	08003519 	.word	0x08003519
 8003450:	0800354b 	.word	0x0800354b
 8003454:	0800357d 	.word	0x0800357d
 8003458:	080035c3 	.word	0x080035c3
 800345c:	080035f5 	.word	0x080035f5
 8003460:	080037a3 	.word	0x080037a3
 8003464:	08003627 	.word	0x08003627
 8003468:	08003681 	.word	0x08003681
 800346c:	080036b3 	.word	0x080036b3
 8003470:	08003715 	.word	0x08003715
 8003474:	08003773 	.word	0x08003773
// MAIN MENU

		case Idle_State:

#ifdef SWV_DEBUG_ENABLED
	  printf("Idle_State\n");
 8003478:	489b      	ldr	r0, [pc, #620]	; (80036e8 <EM_ProcessEvent+0x2b8>)
 800347a:	f00b faa7 	bl	800e9cc <puts>
#endif

			if(eNewEvent == evBlueBtn)
 800347e:	4b9b      	ldr	r3, [pc, #620]	; (80036ec <EM_ProcessEvent+0x2bc>)
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d105      	bne.n	8003492 <EM_ProcessEvent+0x62>
			{
				eNextState = FuncMainMenuEntryHandler();
 8003486:	f000 fbbb 	bl	8003c00 <FuncMainMenuEntryHandler>
 800348a:	4603      	mov	r3, r0
 800348c:	461a      	mov	r2, r3
 800348e:	4b95      	ldr	r3, [pc, #596]	; (80036e4 <EM_ProcessEvent+0x2b4>)
 8003490:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003492:	4b96      	ldr	r3, [pc, #600]	; (80036ec <EM_ProcessEvent+0x2bc>)
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	2b02      	cmp	r3, #2
 8003498:	d105      	bne.n	80034a6 <EM_ProcessEvent+0x76>
			{
				eNextState = FreqMainMenuEntryHandler();
 800349a:	f000 f9c1 	bl	8003820 <FreqMainMenuEntryHandler>
 800349e:	4603      	mov	r3, r0
 80034a0:	461a      	mov	r2, r3
 80034a2:	4b90      	ldr	r3, [pc, #576]	; (80036e4 <EM_ProcessEvent+0x2b4>)
 80034a4:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 80034a6:	4b91      	ldr	r3, [pc, #580]	; (80036ec <EM_ProcessEvent+0x2bc>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2b03      	cmp	r3, #3
 80034ac:	d105      	bne.n	80034ba <EM_ProcessEvent+0x8a>
			{
				eNextState = GainMainMenuEntryHandler();
 80034ae:	f000 fca9 	bl	8003e04 <GainMainMenuEntryHandler>
 80034b2:	4603      	mov	r3, r0
 80034b4:	461a      	mov	r2, r3
 80034b6:	4b8b      	ldr	r3, [pc, #556]	; (80036e4 <EM_ProcessEvent+0x2b4>)
 80034b8:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 80034ba:	4b8c      	ldr	r3, [pc, #560]	; (80036ec <EM_ProcessEvent+0x2bc>)
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	2b04      	cmp	r3, #4
 80034c0:	f040 8171 	bne.w	80037a6 <EM_ProcessEvent+0x376>
			{
				eNextState = BiasMenuEntryHandler();
 80034c4:	f7ff ff60 	bl	8003388 <BiasMenuEntryHandler>
 80034c8:	4603      	mov	r3, r0
 80034ca:	461a      	mov	r2, r3
 80034cc:	4b85      	ldr	r3, [pc, #532]	; (80036e4 <EM_ProcessEvent+0x2b4>)
 80034ce:	701a      	strb	r2, [r3, #0]
			}
			break;
 80034d0:	e169      	b.n	80037a6 <EM_ProcessEvent+0x376>
// FUNC MENUS

		case Func_Main_Menu_State:

#ifdef SWV_DEBUG_ENABLED
	  printf("Func_Main_Menu_State\n");
 80034d2:	4887      	ldr	r0, [pc, #540]	; (80036f0 <EM_ProcessEvent+0x2c0>)
 80034d4:	f00b fa7a 	bl	800e9cc <puts>

			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 80034d8:	4b84      	ldr	r3, [pc, #528]	; (80036ec <EM_ProcessEvent+0x2bc>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	2b06      	cmp	r3, #6
 80034de:	d105      	bne.n	80034ec <EM_ProcessEvent+0xbc>
			{
				eNextState = FuncMainMenuExitHandler();
 80034e0:	f000 fba4 	bl	8003c2c <FuncMainMenuExitHandler>
 80034e4:	4603      	mov	r3, r0
 80034e6:	461a      	mov	r2, r3
 80034e8:	4b7e      	ldr	r3, [pc, #504]	; (80036e4 <EM_ProcessEvent+0x2b4>)
 80034ea:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 80034ec:	4b7f      	ldr	r3, [pc, #508]	; (80036ec <EM_ProcessEvent+0x2bc>)
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d105      	bne.n	8003500 <EM_ProcessEvent+0xd0>
			{
				eNextState = FuncSignalMenuEntryHandler();
 80034f4:	f000 fbb6 	bl	8003c64 <FuncSignalMenuEntryHandler>
 80034f8:	4603      	mov	r3, r0
 80034fa:	461a      	mov	r2, r3
 80034fc:	4b79      	ldr	r3, [pc, #484]	; (80036e4 <EM_ProcessEvent+0x2b4>)
 80034fe:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003500:	4b7a      	ldr	r3, [pc, #488]	; (80036ec <EM_ProcessEvent+0x2bc>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b02      	cmp	r3, #2
 8003506:	f040 8150 	bne.w	80037aa <EM_ProcessEvent+0x37a>
			{
				eNextState = FuncSyncMenuEntryHandler();
 800350a:	f000 fc0d 	bl	8003d28 <FuncSyncMenuEntryHandler>
 800350e:	4603      	mov	r3, r0
 8003510:	461a      	mov	r2, r3
 8003512:	4b74      	ldr	r3, [pc, #464]	; (80036e4 <EM_ProcessEvent+0x2b4>)
 8003514:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003516:	e148      	b.n	80037aa <EM_ProcessEvent+0x37a>

		case Func_Signal_Menu_State:

#ifdef SWV_DEBUG_ENABLED
	  printf("Func_Signal_Menu_State\n");
 8003518:	4876      	ldr	r0, [pc, #472]	; (80036f4 <EM_ProcessEvent+0x2c4>)
 800351a:	f00b fa57 	bl	800e9cc <puts>
#endif

			if(eNewEvent == evEncoderSet)
 800351e:	4b73      	ldr	r3, [pc, #460]	; (80036ec <EM_ProcessEvent+0x2bc>)
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	2b05      	cmp	r3, #5
 8003524:	d105      	bne.n	8003532 <EM_ProcessEvent+0x102>
			{
				eNextState = FuncSignalMenuInputHandler();
 8003526:	f000 fbd3 	bl	8003cd0 <FuncSignalMenuInputHandler>
 800352a:	4603      	mov	r3, r0
 800352c:	461a      	mov	r2, r3
 800352e:	4b6d      	ldr	r3, [pc, #436]	; (80036e4 <EM_ProcessEvent+0x2b4>)
 8003530:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003532:	4b6e      	ldr	r3, [pc, #440]	; (80036ec <EM_ProcessEvent+0x2bc>)
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	2b06      	cmp	r3, #6
 8003538:	f040 8139 	bne.w	80037ae <EM_ProcessEvent+0x37e>
			{
				eNextState = FuncSignalMenuExitHandler();
 800353c:	f000 fbde 	bl	8003cfc <FuncSignalMenuExitHandler>
 8003540:	4603      	mov	r3, r0
 8003542:	461a      	mov	r2, r3
 8003544:	4b67      	ldr	r3, [pc, #412]	; (80036e4 <EM_ProcessEvent+0x2b4>)
 8003546:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003548:	e131      	b.n	80037ae <EM_ProcessEvent+0x37e>

		case Func_Sync_Menu_State:

#ifdef SWV_DEBUG_ENABLED
	  printf("Func_Sync_Menu_State\n");
 800354a:	486b      	ldr	r0, [pc, #428]	; (80036f8 <EM_ProcessEvent+0x2c8>)
 800354c:	f00b fa3e 	bl	800e9cc <puts>
#endif

			if(eNewEvent == evEncoderSet)
 8003550:	4b66      	ldr	r3, [pc, #408]	; (80036ec <EM_ProcessEvent+0x2bc>)
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	2b05      	cmp	r3, #5
 8003556:	d105      	bne.n	8003564 <EM_ProcessEvent+0x134>
			{
				eNextState = FuncSyncMenuInputHandler();
 8003558:	f000 fc1c 	bl	8003d94 <FuncSyncMenuInputHandler>
 800355c:	4603      	mov	r3, r0
 800355e:	461a      	mov	r2, r3
 8003560:	4b60      	ldr	r3, [pc, #384]	; (80036e4 <EM_ProcessEvent+0x2b4>)
 8003562:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003564:	4b61      	ldr	r3, [pc, #388]	; (80036ec <EM_ProcessEvent+0x2bc>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	2b06      	cmp	r3, #6
 800356a:	f040 8122 	bne.w	80037b2 <EM_ProcessEvent+0x382>
			{
				eNextState = FuncSyncMenuExitHandler();
 800356e:	f000 fc27 	bl	8003dc0 <FuncSyncMenuExitHandler>
 8003572:	4603      	mov	r3, r0
 8003574:	461a      	mov	r2, r3
 8003576:	4b5b      	ldr	r3, [pc, #364]	; (80036e4 <EM_ProcessEvent+0x2b4>)
 8003578:	701a      	strb	r2, [r3, #0]
			}

			break;
 800357a:	e11a      	b.n	80037b2 <EM_ProcessEvent+0x382>
// GAIN MENUS

		case Gain_Main_Menu_State:

#ifdef SWV_DEBUG_ENABLED
	  printf("Gain_Main_Menu_State\n");
 800357c:	485f      	ldr	r0, [pc, #380]	; (80036fc <EM_ProcessEvent+0x2cc>)
 800357e:	f00b fa25 	bl	800e9cc <puts>
#endif
			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 8003582:	4b5a      	ldr	r3, [pc, #360]	; (80036ec <EM_ProcessEvent+0x2bc>)
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	2b06      	cmp	r3, #6
 8003588:	d105      	bne.n	8003596 <EM_ProcessEvent+0x166>
			{
				eNextState = GainMainMenuExitHandler();
 800358a:	f000 fc51 	bl	8003e30 <GainMainMenuExitHandler>
 800358e:	4603      	mov	r3, r0
 8003590:	461a      	mov	r2, r3
 8003592:	4b54      	ldr	r3, [pc, #336]	; (80036e4 <EM_ProcessEvent+0x2b4>)
 8003594:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 8003596:	4b55      	ldr	r3, [pc, #340]	; (80036ec <EM_ProcessEvent+0x2bc>)
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d105      	bne.n	80035aa <EM_ProcessEvent+0x17a>
			{
				eNextState = GainSignalMenuEntryHandler();
 800359e:	f000 fc63 	bl	8003e68 <GainSignalMenuEntryHandler>
 80035a2:	4603      	mov	r3, r0
 80035a4:	461a      	mov	r2, r3
 80035a6:	4b4f      	ldr	r3, [pc, #316]	; (80036e4 <EM_ProcessEvent+0x2b4>)
 80035a8:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 80035aa:	4b50      	ldr	r3, [pc, #320]	; (80036ec <EM_ProcessEvent+0x2bc>)
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	f040 8101 	bne.w	80037b6 <EM_ProcessEvent+0x386>
			{
				eNextState = GainSyncMenuEntryHandler();
 80035b4:	f000 fcb8 	bl	8003f28 <GainSyncMenuEntryHandler>
 80035b8:	4603      	mov	r3, r0
 80035ba:	461a      	mov	r2, r3
 80035bc:	4b49      	ldr	r3, [pc, #292]	; (80036e4 <EM_ProcessEvent+0x2b4>)
 80035be:	701a      	strb	r2, [r3, #0]
			}

			break;
 80035c0:	e0f9      	b.n	80037b6 <EM_ProcessEvent+0x386>

		case Gain_Signal_Menu_State:

#ifdef SWV_DEBUG_ENABLED
	  printf("Gain_Signal_Menu_State\n");
 80035c2:	484f      	ldr	r0, [pc, #316]	; (8003700 <EM_ProcessEvent+0x2d0>)
 80035c4:	f00b fa02 	bl	800e9cc <puts>
#endif

			if(eNewEvent == evEncoderSet)
 80035c8:	4b48      	ldr	r3, [pc, #288]	; (80036ec <EM_ProcessEvent+0x2bc>)
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	2b05      	cmp	r3, #5
 80035ce:	d105      	bne.n	80035dc <EM_ProcessEvent+0x1ac>
			{
				eNextState = GainSignalMenuInputHandler();
 80035d0:	f000 fc7e 	bl	8003ed0 <GainSignalMenuInputHandler>
 80035d4:	4603      	mov	r3, r0
 80035d6:	461a      	mov	r2, r3
 80035d8:	4b42      	ldr	r3, [pc, #264]	; (80036e4 <EM_ProcessEvent+0x2b4>)
 80035da:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 80035dc:	4b43      	ldr	r3, [pc, #268]	; (80036ec <EM_ProcessEvent+0x2bc>)
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	2b06      	cmp	r3, #6
 80035e2:	f040 80ea 	bne.w	80037ba <EM_ProcessEvent+0x38a>
			{
				eNextState = GainSignalMenuExitHandler();
 80035e6:	f000 fc89 	bl	8003efc <GainSignalMenuExitHandler>
 80035ea:	4603      	mov	r3, r0
 80035ec:	461a      	mov	r2, r3
 80035ee:	4b3d      	ldr	r3, [pc, #244]	; (80036e4 <EM_ProcessEvent+0x2b4>)
 80035f0:	701a      	strb	r2, [r3, #0]
			}

			break;
 80035f2:	e0e2      	b.n	80037ba <EM_ProcessEvent+0x38a>

		case Gain_Sync_Menu_State:

#ifdef SWV_DEBUG_ENABLED
	  printf("Gain_Sync_Menu_State\n");
 80035f4:	4843      	ldr	r0, [pc, #268]	; (8003704 <EM_ProcessEvent+0x2d4>)
 80035f6:	f00b f9e9 	bl	800e9cc <puts>
#endif

			if(eNewEvent == evEncoderSet)
 80035fa:	4b3c      	ldr	r3, [pc, #240]	; (80036ec <EM_ProcessEvent+0x2bc>)
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2b05      	cmp	r3, #5
 8003600:	d105      	bne.n	800360e <EM_ProcessEvent+0x1de>
			{
				eNextState = GainSyncMenuInputHandler();
 8003602:	f000 fcc5 	bl	8003f90 <GainSyncMenuInputHandler>
 8003606:	4603      	mov	r3, r0
 8003608:	461a      	mov	r2, r3
 800360a:	4b36      	ldr	r3, [pc, #216]	; (80036e4 <EM_ProcessEvent+0x2b4>)
 800360c:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 800360e:	4b37      	ldr	r3, [pc, #220]	; (80036ec <EM_ProcessEvent+0x2bc>)
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	2b06      	cmp	r3, #6
 8003614:	f040 80d3 	bne.w	80037be <EM_ProcessEvent+0x38e>
			{
				eNextState = GainSyncMenuExitHandler();
 8003618:	f000 fcd0 	bl	8003fbc <GainSyncMenuExitHandler>
 800361c:	4603      	mov	r3, r0
 800361e:	461a      	mov	r2, r3
 8003620:	4b30      	ldr	r3, [pc, #192]	; (80036e4 <EM_ProcessEvent+0x2b4>)
 8003622:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003624:	e0cb      	b.n	80037be <EM_ProcessEvent+0x38e>
// FREQ MENUS

		case Freq_Main_Menu_State:

#ifdef SWV_DEBUG_ENABLED
	  printf("Freq_Main_Menu_State\n");
 8003626:	4838      	ldr	r0, [pc, #224]	; (8003708 <EM_ProcessEvent+0x2d8>)
 8003628:	f00b f9d0 	bl	800e9cc <puts>
#endif

			if(eNewEvent == evEncoderPush)
 800362c:	4b2f      	ldr	r3, [pc, #188]	; (80036ec <EM_ProcessEvent+0x2bc>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	2b06      	cmp	r3, #6
 8003632:	d105      	bne.n	8003640 <EM_ProcessEvent+0x210>
			{
				eNextState = FreqMainMenuExitHandler();
 8003634:	f000 f90a 	bl	800384c <FreqMainMenuExitHandler>
 8003638:	4603      	mov	r3, r0
 800363a:	461a      	mov	r2, r3
 800363c:	4b29      	ldr	r3, [pc, #164]	; (80036e4 <EM_ProcessEvent+0x2b4>)
 800363e:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 8003640:	4b2a      	ldr	r3, [pc, #168]	; (80036ec <EM_ProcessEvent+0x2bc>)
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d105      	bne.n	8003654 <EM_ProcessEvent+0x224>
			{
				eNextState = FreqPresetMenuEntryHandler();
 8003648:	f000 f922 	bl	8003890 <FreqPresetMenuEntryHandler>
 800364c:	4603      	mov	r3, r0
 800364e:	461a      	mov	r2, r3
 8003650:	4b24      	ldr	r3, [pc, #144]	; (80036e4 <EM_ProcessEvent+0x2b4>)
 8003652:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003654:	4b25      	ldr	r3, [pc, #148]	; (80036ec <EM_ProcessEvent+0x2bc>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	2b02      	cmp	r3, #2
 800365a:	d105      	bne.n	8003668 <EM_ProcessEvent+0x238>
			{
				eNextState = FreqAdjustMenuEntryHandler();
 800365c:	f000 f974 	bl	8003948 <FreqAdjustMenuEntryHandler>
 8003660:	4603      	mov	r3, r0
 8003662:	461a      	mov	r2, r3
 8003664:	4b1f      	ldr	r3, [pc, #124]	; (80036e4 <EM_ProcessEvent+0x2b4>)
 8003666:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8003668:	4b20      	ldr	r3, [pc, #128]	; (80036ec <EM_ProcessEvent+0x2bc>)
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	2b03      	cmp	r3, #3
 800366e:	f040 80a8 	bne.w	80037c2 <EM_ProcessEvent+0x392>
			{
				eNextState = FreqSweepMenuEntryHandler();
 8003672:	f000 f9b1 	bl	80039d8 <FreqSweepMenuEntryHandler>
 8003676:	4603      	mov	r3, r0
 8003678:	461a      	mov	r2, r3
 800367a:	4b1a      	ldr	r3, [pc, #104]	; (80036e4 <EM_ProcessEvent+0x2b4>)
 800367c:	701a      	strb	r2, [r3, #0]
			}

			break;
 800367e:	e0a0      	b.n	80037c2 <EM_ProcessEvent+0x392>

		case Freq_Preset_Menu_State:

#ifdef SWV_DEBUG_ENABLED
	  printf("Freq_Preset_Menu_State\n");
 8003680:	4822      	ldr	r0, [pc, #136]	; (800370c <EM_ProcessEvent+0x2dc>)
 8003682:	f00b f9a3 	bl	800e9cc <puts>
#endif

			if(eNewEvent == evEncoderSet)
 8003686:	4b19      	ldr	r3, [pc, #100]	; (80036ec <EM_ProcessEvent+0x2bc>)
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	2b05      	cmp	r3, #5
 800368c:	d105      	bne.n	800369a <EM_ProcessEvent+0x26a>
			{
				eNextState = FreqPresetMenuInputHandler();
 800368e:	f000 f931 	bl	80038f4 <FreqPresetMenuInputHandler>
 8003692:	4603      	mov	r3, r0
 8003694:	461a      	mov	r2, r3
 8003696:	4b13      	ldr	r3, [pc, #76]	; (80036e4 <EM_ProcessEvent+0x2b4>)
 8003698:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 800369a:	4b14      	ldr	r3, [pc, #80]	; (80036ec <EM_ProcessEvent+0x2bc>)
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	2b06      	cmp	r3, #6
 80036a0:	f040 8091 	bne.w	80037c6 <EM_ProcessEvent+0x396>
			{
				eNextState = FreqPresetMenuExitHandler();
 80036a4:	f000 f93c 	bl	8003920 <FreqPresetMenuExitHandler>
 80036a8:	4603      	mov	r3, r0
 80036aa:	461a      	mov	r2, r3
 80036ac:	4b0d      	ldr	r3, [pc, #52]	; (80036e4 <EM_ProcessEvent+0x2b4>)
 80036ae:	701a      	strb	r2, [r3, #0]
			}
			break;
 80036b0:	e089      	b.n	80037c6 <EM_ProcessEvent+0x396>

		case Freq_Adjust_Menu_State:

#ifdef SWV_DEBUG_ENABLED
	  printf("Freq_Adjust_Menu_State\n");
 80036b2:	4817      	ldr	r0, [pc, #92]	; (8003710 <EM_ProcessEvent+0x2e0>)
 80036b4:	f00b f98a 	bl	800e9cc <puts>
#endif

			if(eNewEvent == evEncoderSet)
 80036b8:	4b0c      	ldr	r3, [pc, #48]	; (80036ec <EM_ProcessEvent+0x2bc>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	2b05      	cmp	r3, #5
 80036be:	d105      	bne.n	80036cc <EM_ProcessEvent+0x29c>
			{
				eNextState = FreqAdjustMenuInputHandler();
 80036c0:	f000 f964 	bl	800398c <FreqAdjustMenuInputHandler>
 80036c4:	4603      	mov	r3, r0
 80036c6:	461a      	mov	r2, r3
 80036c8:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <EM_ProcessEvent+0x2b4>)
 80036ca:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 80036cc:	4b07      	ldr	r3, [pc, #28]	; (80036ec <EM_ProcessEvent+0x2bc>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	2b06      	cmp	r3, #6
 80036d2:	d17a      	bne.n	80037ca <EM_ProcessEvent+0x39a>
			{
				eNextState = FreqAdjustMenuExitHandler();
 80036d4:	f000 f96c 	bl	80039b0 <FreqAdjustMenuExitHandler>
 80036d8:	4603      	mov	r3, r0
 80036da:	461a      	mov	r2, r3
 80036dc:	4b01      	ldr	r3, [pc, #4]	; (80036e4 <EM_ProcessEvent+0x2b4>)
 80036de:	701a      	strb	r2, [r3, #0]
			}
			break;
 80036e0:	e073      	b.n	80037ca <EM_ProcessEvent+0x39a>
 80036e2:	bf00      	nop
 80036e4:	20001f1a 	.word	0x20001f1a
 80036e8:	08010d54 	.word	0x08010d54
 80036ec:	20001f1b 	.word	0x20001f1b
 80036f0:	08010d60 	.word	0x08010d60
 80036f4:	08010d78 	.word	0x08010d78
 80036f8:	08010d90 	.word	0x08010d90
 80036fc:	08010da8 	.word	0x08010da8
 8003700:	08010dc0 	.word	0x08010dc0
 8003704:	08010dd8 	.word	0x08010dd8
 8003708:	08010df0 	.word	0x08010df0
 800370c:	08010e08 	.word	0x08010e08
 8003710:	08010e20 	.word	0x08010e20

		case Freq_Sweep_Menu_State:

#ifdef SWV_DEBUG_ENABLED
	  printf("Freq_Sweep_Menu_State\n");
 8003714:	4830      	ldr	r0, [pc, #192]	; (80037d8 <EM_ProcessEvent+0x3a8>)
 8003716:	f00b f959 	bl	800e9cc <puts>
#endif

		if(eNewEvent == evBlueBtn)
 800371a:	4b30      	ldr	r3, [pc, #192]	; (80037dc <EM_ProcessEvent+0x3ac>)
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d106      	bne.n	8003730 <EM_ProcessEvent+0x300>
		{
			// enable
			eNextState = FreqSweepMenuInputHandler(evSweepEnable);
 8003722:	2007      	movs	r0, #7
 8003724:	f000 f98a 	bl	8003a3c <FreqSweepMenuInputHandler>
 8003728:	4603      	mov	r3, r0
 800372a:	461a      	mov	r2, r3
 800372c:	4b2c      	ldr	r3, [pc, #176]	; (80037e0 <EM_ProcessEvent+0x3b0>)
 800372e:	701a      	strb	r2, [r3, #0]

		}
		if(eNewEvent == evGreenBtn)
 8003730:	4b2a      	ldr	r3, [pc, #168]	; (80037dc <EM_ProcessEvent+0x3ac>)
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	2b02      	cmp	r3, #2
 8003736:	d106      	bne.n	8003746 <EM_ProcessEvent+0x316>
		{
			// center-aligned mode
			eNextState = FreqSweepMenuInputHandler(evSweepMode);
 8003738:	2008      	movs	r0, #8
 800373a:	f000 f97f 	bl	8003a3c <FreqSweepMenuInputHandler>
 800373e:	4603      	mov	r3, r0
 8003740:	461a      	mov	r2, r3
 8003742:	4b27      	ldr	r3, [pc, #156]	; (80037e0 <EM_ProcessEvent+0x3b0>)
 8003744:	701a      	strb	r2, [r3, #0]
		}
		if(eNewEvent == evRedBtn)
		{
			// no event action
		}
		if(eNewEvent == evEncoderSet)
 8003746:	4b25      	ldr	r3, [pc, #148]	; (80037dc <EM_ProcessEvent+0x3ac>)
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	2b05      	cmp	r3, #5
 800374c:	d106      	bne.n	800375c <EM_ProcessEvent+0x32c>
		{
			eNextState = FreqSweepMenuInputHandler(evSweepSpeed);
 800374e:	2009      	movs	r0, #9
 8003750:	f000 f974 	bl	8003a3c <FreqSweepMenuInputHandler>
 8003754:	4603      	mov	r3, r0
 8003756:	461a      	mov	r2, r3
 8003758:	4b21      	ldr	r3, [pc, #132]	; (80037e0 <EM_ProcessEvent+0x3b0>)
 800375a:	701a      	strb	r2, [r3, #0]

		}
		if(eNewEvent == evEncoderPush)
 800375c:	4b1f      	ldr	r3, [pc, #124]	; (80037dc <EM_ProcessEvent+0x3ac>)
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	2b06      	cmp	r3, #6
 8003762:	d134      	bne.n	80037ce <EM_ProcessEvent+0x39e>
		{
			eNextState = FreqSweepMenuExitHandler();
 8003764:	f000 fa2a 	bl	8003bbc <FreqSweepMenuExitHandler>
 8003768:	4603      	mov	r3, r0
 800376a:	461a      	mov	r2, r3
 800376c:	4b1c      	ldr	r3, [pc, #112]	; (80037e0 <EM_ProcessEvent+0x3b0>)
 800376e:	701a      	strb	r2, [r3, #0]
		}

		break;
 8003770:	e02d      	b.n	80037ce <EM_ProcessEvent+0x39e>
// BIAS MENUS

		case Bias_Menu_State:

#ifdef SWV_DEBUG_ENABLED
	  printf("Bias_Menu_State\n");
 8003772:	481c      	ldr	r0, [pc, #112]	; (80037e4 <EM_ProcessEvent+0x3b4>)
 8003774:	f00b f92a 	bl	800e9cc <puts>
#endif

			if(eNewEvent == evEncoderSet)
 8003778:	4b18      	ldr	r3, [pc, #96]	; (80037dc <EM_ProcessEvent+0x3ac>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	2b05      	cmp	r3, #5
 800377e:	d105      	bne.n	800378c <EM_ProcessEvent+0x35c>
			{
				eNextState = BiasMenuInputHandler();
 8003780:	f7ff fe24 	bl	80033cc <BiasMenuInputHandler>
 8003784:	4603      	mov	r3, r0
 8003786:	461a      	mov	r2, r3
 8003788:	4b15      	ldr	r3, [pc, #84]	; (80037e0 <EM_ProcessEvent+0x3b0>)
 800378a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 800378c:	4b13      	ldr	r3, [pc, #76]	; (80037dc <EM_ProcessEvent+0x3ac>)
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	2b06      	cmp	r3, #6
 8003792:	d11e      	bne.n	80037d2 <EM_ProcessEvent+0x3a2>
			{
				eNextState = BiasMenuExitHandler();
 8003794:	f7ff fe30 	bl	80033f8 <BiasMenuExitHandler>
 8003798:	4603      	mov	r3, r0
 800379a:	461a      	mov	r2, r3
 800379c:	4b10      	ldr	r3, [pc, #64]	; (80037e0 <EM_ProcessEvent+0x3b0>)
 800379e:	701a      	strb	r2, [r3, #0]
			}

			break;
 80037a0:	e017      	b.n	80037d2 <EM_ProcessEvent+0x3a2>

		default:
			break;
 80037a2:	bf00      	nop
 80037a4:	e016      	b.n	80037d4 <EM_ProcessEvent+0x3a4>
			break;
 80037a6:	bf00      	nop
 80037a8:	e014      	b.n	80037d4 <EM_ProcessEvent+0x3a4>
			break;
 80037aa:	bf00      	nop
 80037ac:	e012      	b.n	80037d4 <EM_ProcessEvent+0x3a4>
			break;
 80037ae:	bf00      	nop
 80037b0:	e010      	b.n	80037d4 <EM_ProcessEvent+0x3a4>
			break;
 80037b2:	bf00      	nop
 80037b4:	e00e      	b.n	80037d4 <EM_ProcessEvent+0x3a4>
			break;
 80037b6:	bf00      	nop
 80037b8:	e00c      	b.n	80037d4 <EM_ProcessEvent+0x3a4>
			break;
 80037ba:	bf00      	nop
 80037bc:	e00a      	b.n	80037d4 <EM_ProcessEvent+0x3a4>
			break;
 80037be:	bf00      	nop
 80037c0:	e008      	b.n	80037d4 <EM_ProcessEvent+0x3a4>
			break;
 80037c2:	bf00      	nop
 80037c4:	e006      	b.n	80037d4 <EM_ProcessEvent+0x3a4>
			break;
 80037c6:	bf00      	nop
 80037c8:	e004      	b.n	80037d4 <EM_ProcessEvent+0x3a4>
			break;
 80037ca:	bf00      	nop
 80037cc:	e002      	b.n	80037d4 <EM_ProcessEvent+0x3a4>
		break;
 80037ce:	bf00      	nop
 80037d0:	e000      	b.n	80037d4 <EM_ProcessEvent+0x3a4>
			break;
 80037d2:	bf00      	nop
	}

}
 80037d4:	bf00      	nop
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	08010e38 	.word	0x08010e38
 80037dc:	20001f1b 	.word	0x20001f1b
 80037e0:	20001f1a 	.word	0x20001f1a
 80037e4:	08010e50 	.word	0x08010e50

080037e8 <EM_SetNewEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	4603      	mov	r3, r0
 80037f0:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 80037f2:	4a04      	ldr	r2, [pc, #16]	; (8003804 <EM_SetNewEvent+0x1c>)
 80037f4:	79fb      	ldrb	r3, [r7, #7]
 80037f6:	7013      	strb	r3, [r2, #0]
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	20001f1b 	.word	0x20001f1b

08003808 <FreqMenu_getStatus>:
uint16_t min_arr = 4095;
uint32_t max_arr = 0xFFFFFFFF;
float rate_coeff = 500;

eFreqMenu_Status FreqMenu_getStatus()
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
	return eNextFreqMenuStatus;
 800380c:	4b03      	ldr	r3, [pc, #12]	; (800381c <FreqMenu_getStatus+0x14>)
 800380e:	781b      	ldrb	r3, [r3, #0]
}
 8003810:	4618      	mov	r0, r3
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	20001f1d 	.word	0x20001f1d

08003820 <FreqMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuEntryHandler()
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqMainMenuEntryHandler Event captured\n");
 8003824:	4806      	ldr	r0, [pc, #24]	; (8003840 <FreqMainMenuEntryHandler+0x20>)
 8003826:	f00b f8d1 	bl	800e9cc <puts>
	#endif

	DM_RefreshScreen();
 800382a:	f7fd fc4d 	bl	80010c8 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 800382e:	4b05      	ldr	r3, [pc, #20]	; (8003844 <FreqMainMenuEntryHandler+0x24>)
 8003830:	2201      	movs	r2, #1
 8003832:	701a      	strb	r2, [r3, #0]

	// stay in this state
	eNewEvent = evIdle;
 8003834:	4b04      	ldr	r3, [pc, #16]	; (8003848 <FreqMainMenuEntryHandler+0x28>)
 8003836:	2200      	movs	r2, #0
 8003838:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 800383a:	2308      	movs	r3, #8
}
 800383c:	4618      	mov	r0, r3
 800383e:	bd80      	pop	{r7, pc}
 8003840:	08010e60 	.word	0x08010e60
 8003844:	20001f1d 	.word	0x20001f1d
 8003848:	20001f1b 	.word	0x20001f1b

0800384c <FreqMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuExitHandler()
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqMainMenuExitHandler Event captured\n");
 8003850:	480a      	ldr	r0, [pc, #40]	; (800387c <FreqMainMenuExitHandler+0x30>)
 8003852:	f00b f8bb 	bl	800e9cc <puts>
	#endif


	// disable the menu
	eNextFreqMenuStatus = DISABLE_FREQ_MENU;
 8003856:	4b0a      	ldr	r3, [pc, #40]	; (8003880 <FreqMainMenuExitHandler+0x34>)
 8003858:	2200      	movs	r2, #0
 800385a:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 800385c:	4b09      	ldr	r3, [pc, #36]	; (8003884 <FreqMainMenuExitHandler+0x38>)
 800385e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003862:	62da      	str	r2, [r3, #44]	; 0x2c

	DM_RefreshScreen();
 8003864:	f7fd fc30 	bl	80010c8 <DM_RefreshScreen>

	#ifdef SWV_DEBUG_ENABLED
		  printf("returning to Idle State\n");
 8003868:	4807      	ldr	r0, [pc, #28]	; (8003888 <FreqMainMenuExitHandler+0x3c>)
 800386a:	f00b f8af 	bl	800e9cc <puts>
	#endif

	eNewEvent = evIdle;
 800386e:	4b07      	ldr	r3, [pc, #28]	; (800388c <FreqMainMenuExitHandler+0x40>)
 8003870:	2200      	movs	r2, #0
 8003872:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	08010eb0 	.word	0x08010eb0
 8003880:	20001f1d 	.word	0x20001f1d
 8003884:	40012c00 	.word	0x40012c00
 8003888:	08010ed8 	.word	0x08010ed8
 800388c:	20001f1b 	.word	0x20001f1b

08003890 <FreqPresetMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuEntryHandler()
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuEntryHandler Event captured\n");
 8003896:	4812      	ldr	r0, [pc, #72]	; (80038e0 <FreqPresetMenuEntryHandler+0x50>)
 8003898:	f00b f898 	bl	800e9cc <puts>
	#endif

	DM_RefreshScreen();
 800389c:	f7fd fc14 	bl	80010c8 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_PRESET_MENU;
 80038a0:	4b10      	ldr	r3, [pc, #64]	; (80038e4 <FreqPresetMenuEntryHandler+0x54>)
 80038a2:	2202      	movs	r2, #2
 80038a4:	701a      	strb	r2, [r3, #0]

	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 80038a6:	f000 fea9 	bl	80045fc <FreqO_GetFPresetObject>
 80038aa:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00a      	beq.n	80038c8 <FreqPresetMenuEntryHandler+0x38>
	{
		ENCODER_TIMER->CNT = pFreqPresetTmp->epos;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	791a      	ldrb	r2, [r3, #4]
 80038b6:	4b0c      	ldr	r3, [pc, #48]	; (80038e8 <FreqPresetMenuEntryHandler+0x58>)
 80038b8:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FreqO_GetFreqPresetEncoderRange();
 80038ba:	f000 fed1 	bl	8004660 <FreqO_GetFreqPresetEncoderRange>
 80038be:	4603      	mov	r3, r0
 80038c0:	461a      	mov	r2, r3
 80038c2:	4b09      	ldr	r3, [pc, #36]	; (80038e8 <FreqPresetMenuEntryHandler+0x58>)
 80038c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80038c6:	e002      	b.n	80038ce <FreqPresetMenuEntryHandler+0x3e>
	}
	else
	{
		DM_SetErrorDebugMsg("_FreqPresetMenuEntryHandler: pFreqPresetTmp null pointer");
 80038c8:	4808      	ldr	r0, [pc, #32]	; (80038ec <FreqPresetMenuEntryHandler+0x5c>)
 80038ca:	f7fd fc47 	bl	800115c <DM_SetErrorDebugMsg>
	}


	// stay in this state
	eNewEvent = evIdle;
 80038ce:	4b08      	ldr	r3, [pc, #32]	; (80038f0 <FreqPresetMenuEntryHandler+0x60>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 80038d4:	2309      	movs	r3, #9
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	08010ef0 	.word	0x08010ef0
 80038e4:	20001f1d 	.word	0x20001f1d
 80038e8:	40012c00 	.word	0x40012c00
 80038ec:	08010f1c 	.word	0x08010f1c
 80038f0:	20001f1b 	.word	0x20001f1b

080038f4 <FreqPresetMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuInputHandler()
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuInputHandler Event captured\n");
 80038f8:	4807      	ldr	r0, [pc, #28]	; (8003918 <FreqPresetMenuInputHandler+0x24>)
 80038fa:	f00b f867 	bl	800e9cc <puts>
	#endif

	FreqO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 80038fe:	2001      	movs	r0, #1
 8003900:	f001 fa0c 	bl	8004d1c <SM_GetEncoderValue>
 8003904:	4603      	mov	r3, r0
 8003906:	4618      	mov	r0, r3
 8003908:	f000 fd86 	bl	8004418 <FreqO_ModifyOutput>

	// stay in this state
	eNewEvent = evIdle;
 800390c:	4b03      	ldr	r3, [pc, #12]	; (800391c <FreqPresetMenuInputHandler+0x28>)
 800390e:	2200      	movs	r2, #0
 8003910:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8003912:	2309      	movs	r3, #9
}
 8003914:	4618      	mov	r0, r3
 8003916:	bd80      	pop	{r7, pc}
 8003918:	08010f58 	.word	0x08010f58
 800391c:	20001f1b 	.word	0x20001f1b

08003920 <FreqPresetMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuExitHandler()
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuExitHandler Event captured\n");
 8003924:	4805      	ldr	r0, [pc, #20]	; (800393c <FreqPresetMenuExitHandler+0x1c>)
 8003926:	f00b f851 	bl	800e9cc <puts>
	#endif


	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 800392a:	4b05      	ldr	r3, [pc, #20]	; (8003940 <FreqPresetMenuExitHandler+0x20>)
 800392c:	2201      	movs	r2, #1
 800392e:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evGreenBtn;
 8003930:	4b04      	ldr	r3, [pc, #16]	; (8003944 <FreqPresetMenuExitHandler+0x24>)
 8003932:	2202      	movs	r2, #2
 8003934:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	bd80      	pop	{r7, pc}
 800393c:	08010f84 	.word	0x08010f84
 8003940:	20001f1d 	.word	0x20001f1d
 8003944:	20001f1b 	.word	0x20001f1b

08003948 <FreqAdjustMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuEntryHandler()
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuEntryHandler Event captured\n");
 800394c:	480a      	ldr	r0, [pc, #40]	; (8003978 <FreqAdjustMenuEntryHandler+0x30>)
 800394e:	f00b f83d 	bl	800e9cc <puts>
	#endif

	DM_RefreshScreen();
 8003952:	f7fd fbb9 	bl	80010c8 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_ADJUST_MENU;
 8003956:	4b09      	ldr	r3, [pc, #36]	; (800397c <FreqAdjustMenuEntryHandler+0x34>)
 8003958:	2203      	movs	r2, #3
 800395a:	701a      	strb	r2, [r3, #0]

	// set the rotary encoder limits to 0-? for this menu
	ENCODER_TIMER->CNT = TIM8->ARR;
 800395c:	4b08      	ldr	r3, [pc, #32]	; (8003980 <FreqAdjustMenuEntryHandler+0x38>)
 800395e:	4a09      	ldr	r2, [pc, #36]	; (8003984 <FreqAdjustMenuEntryHandler+0x3c>)
 8003960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003962:	6253      	str	r3, [r2, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8003964:	4b07      	ldr	r3, [pc, #28]	; (8003984 <FreqAdjustMenuEntryHandler+0x3c>)
 8003966:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800396a:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 800396c:	4b06      	ldr	r3, [pc, #24]	; (8003988 <FreqAdjustMenuEntryHandler+0x40>)
 800396e:	2200      	movs	r2, #0
 8003970:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8003972:	230a      	movs	r3, #10
}
 8003974:	4618      	mov	r0, r3
 8003976:	bd80      	pop	{r7, pc}
 8003978:	08010fb0 	.word	0x08010fb0
 800397c:	20001f1d 	.word	0x20001f1d
 8003980:	40013400 	.word	0x40013400
 8003984:	40012c00 	.word	0x40012c00
 8003988:	20001f1b 	.word	0x20001f1b

0800398c <FreqAdjustMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuInputHandler()
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuInputHandler Event captured\n");
 8003990:	4805      	ldr	r0, [pc, #20]	; (80039a8 <FreqAdjustMenuInputHandler+0x1c>)
 8003992:	f00b f81b 	bl	800e9cc <puts>
	#endif

	FreqO_AdjustFreq();
 8003996:	f000 fd31 	bl	80043fc <FreqO_AdjustFreq>

	// stay in this state
	eNewEvent = evIdle;
 800399a:	4b04      	ldr	r3, [pc, #16]	; (80039ac <FreqAdjustMenuInputHandler+0x20>)
 800399c:	2200      	movs	r2, #0
 800399e:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 80039a0:	230a      	movs	r3, #10
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	08010fdc 	.word	0x08010fdc
 80039ac:	20001f1b 	.word	0x20001f1b

080039b0 <FreqAdjustMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuExitHandler()
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuExitHandler Event captured\n");
 80039b4:	4805      	ldr	r0, [pc, #20]	; (80039cc <FreqAdjustMenuExitHandler+0x1c>)
 80039b6:	f00b f809 	bl	800e9cc <puts>
	#endif


	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 80039ba:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <FreqAdjustMenuExitHandler+0x20>)
 80039bc:	2201      	movs	r2, #1
 80039be:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evGreenBtn;
 80039c0:	4b04      	ldr	r3, [pc, #16]	; (80039d4 <FreqAdjustMenuExitHandler+0x24>)
 80039c2:	2202      	movs	r2, #2
 80039c4:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	08011008 	.word	0x08011008
 80039d0:	20001f1d 	.word	0x20001f1d
 80039d4:	20001f1b 	.word	0x20001f1b

080039d8 <FreqSweepMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuEntryHandler()
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqSweepMenuEntryHandler captured\n");
 80039dc:	4812      	ldr	r0, [pc, #72]	; (8003a28 <FreqSweepMenuEntryHandler+0x50>)
 80039de:	f00a fff5 	bl	800e9cc <puts>
	#endif

	DM_RefreshScreen();
 80039e2:	f7fd fb71 	bl	80010c8 <DM_RefreshScreen>

	// set the encoder limits and starting position (slowest possible)


	// encoder limit
	ENCODER_TIMER->CNT = 670;
 80039e6:	4b11      	ldr	r3, [pc, #68]	; (8003a2c <FreqSweepMenuEntryHandler+0x54>)
 80039e8:	f240 229e 	movw	r2, #670	; 0x29e
 80039ec:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 80039ee:	4b0f      	ldr	r3, [pc, #60]	; (8003a2c <FreqSweepMenuEntryHandler+0x54>)
 80039f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039f4:	62da      	str	r2, [r3, #44]	; 0x2c
	SWEEP_TIMER->CNT = 65535;
 80039f6:	4b0e      	ldr	r3, [pc, #56]	; (8003a30 <FreqSweepMenuEntryHandler+0x58>)
 80039f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039fc:	625a      	str	r2, [r3, #36]	; 0x24
	SWEEP_TIMER->ARR = 0xFFFFFFFF;
 80039fe:	4b0c      	ldr	r3, [pc, #48]	; (8003a30 <FreqSweepMenuEntryHandler+0x58>)
 8003a00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a04:	62da      	str	r2, [r3, #44]	; 0x2c
	SWEEP_TIMER->PSC = 65535;
 8003a06:	4b0a      	ldr	r3, [pc, #40]	; (8003a30 <FreqSweepMenuEntryHandler+0x58>)
 8003a08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a0c:	629a      	str	r2, [r3, #40]	; 0x28

	FreqSweepMenuInputHandler(evSweepSpeed);
 8003a0e:	2009      	movs	r0, #9
 8003a10:	f000 f814 	bl	8003a3c <FreqSweepMenuInputHandler>

	eNextFreqMenuStatus = ENABLE_FREQ_SWEEP_MENU;
 8003a14:	4b07      	ldr	r3, [pc, #28]	; (8003a34 <FreqSweepMenuEntryHandler+0x5c>)
 8003a16:	2204      	movs	r2, #4
 8003a18:	701a      	strb	r2, [r3, #0]


	// stay in this state
	eNewEvent = evIdle;
 8003a1a:	4b07      	ldr	r3, [pc, #28]	; (8003a38 <FreqSweepMenuEntryHandler+0x60>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 8003a20:	230b      	movs	r3, #11
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	08011034 	.word	0x08011034
 8003a2c:	40012c00 	.word	0x40012c00
 8003a30:	40000400 	.word	0x40000400
 8003a34:	20001f1d 	.word	0x20001f1d
 8003a38:	20001f1b 	.word	0x20001f1b

08003a3c <FreqSweepMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuInputHandler(eSystemEvent pEvent)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	4603      	mov	r3, r0
 8003a44:	71fb      	strb	r3, [r7, #7]
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuInputHandler Event captured\n");
 8003a46:	4850      	ldr	r0, [pc, #320]	; (8003b88 <FreqSweepMenuInputHandler+0x14c>)
 8003a48:	f00a ffc0 	bl	800e9cc <puts>
	#endif



	switch(pEvent)
 8003a4c:	79fb      	ldrb	r3, [r7, #7]
 8003a4e:	2b08      	cmp	r3, #8
 8003a50:	d00e      	beq.n	8003a70 <FreqSweepMenuInputHandler+0x34>
 8003a52:	2b09      	cmp	r3, #9
 8003a54:	d047      	beq.n	8003ae6 <FreqSweepMenuInputHandler+0xaa>
 8003a56:	2b07      	cmp	r3, #7
 8003a58:	d000      	beq.n	8003a5c <FreqSweepMenuInputHandler+0x20>

			break;

		default:
			// don't care about other eSystemEvent
			break;
 8003a5a:	e08d      	b.n	8003b78 <FreqSweepMenuInputHandler+0x13c>
				printf("evSweepEnable captured\n");
 8003a5c:	484b      	ldr	r0, [pc, #300]	; (8003b8c <FreqSweepMenuInputHandler+0x150>)
 8003a5e:	f00a ffb5 	bl	800e9cc <puts>
			SWEEP_TIMER->CR1 ^= TIM_CR1_CEN;
 8003a62:	4b4b      	ldr	r3, [pc, #300]	; (8003b90 <FreqSweepMenuInputHandler+0x154>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a4a      	ldr	r2, [pc, #296]	; (8003b90 <FreqSweepMenuInputHandler+0x154>)
 8003a68:	f083 0301 	eor.w	r3, r3, #1
 8003a6c:	6013      	str	r3, [r2, #0]
			break;
 8003a6e:	e083      	b.n	8003b78 <FreqSweepMenuInputHandler+0x13c>
				printf("evSweepMode captured\n");
 8003a70:	4848      	ldr	r0, [pc, #288]	; (8003b94 <FreqSweepMenuInputHandler+0x158>)
 8003a72:	f00a ffab 	bl	800e9cc <puts>
			active_sweep_mode++;
 8003a76:	4b48      	ldr	r3, [pc, #288]	; (8003b98 <FreqSweepMenuInputHandler+0x15c>)
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	4b46      	ldr	r3, [pc, #280]	; (8003b98 <FreqSweepMenuInputHandler+0x15c>)
 8003a80:	701a      	strb	r2, [r3, #0]
			if(active_sweep_mode > 3)
 8003a82:	4b45      	ldr	r3, [pc, #276]	; (8003b98 <FreqSweepMenuInputHandler+0x15c>)
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	2b03      	cmp	r3, #3
 8003a88:	d902      	bls.n	8003a90 <FreqSweepMenuInputHandler+0x54>
				active_sweep_mode = 0;
 8003a8a:	4b43      	ldr	r3, [pc, #268]	; (8003b98 <FreqSweepMenuInputHandler+0x15c>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	701a      	strb	r2, [r3, #0]
			switch(active_sweep_mode)
 8003a90:	4b41      	ldr	r3, [pc, #260]	; (8003b98 <FreqSweepMenuInputHandler+0x15c>)
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d011      	beq.n	8003abc <FreqSweepMenuInputHandler+0x80>
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d01c      	beq.n	8003ad6 <FreqSweepMenuInputHandler+0x9a>
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d000      	beq.n	8003aa2 <FreqSweepMenuInputHandler+0x66>
			break;
 8003aa0:	e06a      	b.n	8003b78 <FreqSweepMenuInputHandler+0x13c>
					SWEEP_TIMER->CR1 |= (TIM_CR1_DIR);
 8003aa2:	4b3b      	ldr	r3, [pc, #236]	; (8003b90 <FreqSweepMenuInputHandler+0x154>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a3a      	ldr	r2, [pc, #232]	; (8003b90 <FreqSweepMenuInputHandler+0x154>)
 8003aa8:	f043 0310 	orr.w	r3, r3, #16
 8003aac:	6013      	str	r3, [r2, #0]
					SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 8003aae:	4b38      	ldr	r3, [pc, #224]	; (8003b90 <FreqSweepMenuInputHandler+0x154>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a37      	ldr	r2, [pc, #220]	; (8003b90 <FreqSweepMenuInputHandler+0x154>)
 8003ab4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003ab8:	6013      	str	r3, [r2, #0]
					break;
 8003aba:	e013      	b.n	8003ae4 <FreqSweepMenuInputHandler+0xa8>
					SWEEP_TIMER->CR1 &= ~(TIM_CR1_DIR);
 8003abc:	4b34      	ldr	r3, [pc, #208]	; (8003b90 <FreqSweepMenuInputHandler+0x154>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a33      	ldr	r2, [pc, #204]	; (8003b90 <FreqSweepMenuInputHandler+0x154>)
 8003ac2:	f023 0310 	bic.w	r3, r3, #16
 8003ac6:	6013      	str	r3, [r2, #0]
					SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 8003ac8:	4b31      	ldr	r3, [pc, #196]	; (8003b90 <FreqSweepMenuInputHandler+0x154>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a30      	ldr	r2, [pc, #192]	; (8003b90 <FreqSweepMenuInputHandler+0x154>)
 8003ace:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003ad2:	6013      	str	r3, [r2, #0]
					break;
 8003ad4:	e006      	b.n	8003ae4 <FreqSweepMenuInputHandler+0xa8>
					SWEEP_TIMER->CR1 |= (TIM_CR1_CMS_0);
 8003ad6:	4b2e      	ldr	r3, [pc, #184]	; (8003b90 <FreqSweepMenuInputHandler+0x154>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a2d      	ldr	r2, [pc, #180]	; (8003b90 <FreqSweepMenuInputHandler+0x154>)
 8003adc:	f043 0320 	orr.w	r3, r3, #32
 8003ae0:	6013      	str	r3, [r2, #0]
					break;
 8003ae2:	bf00      	nop
			break;
 8003ae4:	e048      	b.n	8003b78 <FreqSweepMenuInputHandler+0x13c>
				printf("evSweepSpeed captured\n");
 8003ae6:	482d      	ldr	r0, [pc, #180]	; (8003b9c <FreqSweepMenuInputHandler+0x160>)
 8003ae8:	f00a ff70 	bl	800e9cc <puts>
			if(SWEEP_TIMER->ARR >= min_arr)
 8003aec:	4b28      	ldr	r3, [pc, #160]	; (8003b90 <FreqSweepMenuInputHandler+0x154>)
 8003aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af0:	4a2b      	ldr	r2, [pc, #172]	; (8003ba0 <FreqSweepMenuInputHandler+0x164>)
 8003af2:	8812      	ldrh	r2, [r2, #0]
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d325      	bcc.n	8003b44 <FreqSweepMenuInputHandler+0x108>
				uint32_t next_SWEEP_TIMER_value = min_arr + (ENCODER_TIMER->CNT * rate_coeff);
 8003af8:	4b29      	ldr	r3, [pc, #164]	; (8003ba0 <FreqSweepMenuInputHandler+0x164>)
 8003afa:	881b      	ldrh	r3, [r3, #0]
 8003afc:	ee07 3a90 	vmov	s15, r3
 8003b00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b04:	4b27      	ldr	r3, [pc, #156]	; (8003ba4 <FreqSweepMenuInputHandler+0x168>)
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	ee07 3a90 	vmov	s15, r3
 8003b0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b10:	4b25      	ldr	r3, [pc, #148]	; (8003ba8 <FreqSweepMenuInputHandler+0x16c>)
 8003b12:	edd3 7a00 	vldr	s15, [r3]
 8003b16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b22:	ee17 3a90 	vmov	r3, s15
 8003b26:	60fb      	str	r3, [r7, #12]
				if((next_SWEEP_TIMER_value) > max_arr)
 8003b28:	4b20      	ldr	r3, [pc, #128]	; (8003bac <FreqSweepMenuInputHandler+0x170>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d904      	bls.n	8003b3c <FreqSweepMenuInputHandler+0x100>
					SWEEP_TIMER->ARR = max_arr;
 8003b32:	4a17      	ldr	r2, [pc, #92]	; (8003b90 <FreqSweepMenuInputHandler+0x154>)
 8003b34:	4b1d      	ldr	r3, [pc, #116]	; (8003bac <FreqSweepMenuInputHandler+0x170>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b3a:	e007      	b.n	8003b4c <FreqSweepMenuInputHandler+0x110>
					SWEEP_TIMER->ARR = next_SWEEP_TIMER_value;
 8003b3c:	4a14      	ldr	r2, [pc, #80]	; (8003b90 <FreqSweepMenuInputHandler+0x154>)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b42:	e003      	b.n	8003b4c <FreqSweepMenuInputHandler+0x110>
				SWEEP_TIMER->ARR = min_arr;
 8003b44:	4b16      	ldr	r3, [pc, #88]	; (8003ba0 <FreqSweepMenuInputHandler+0x164>)
 8003b46:	881a      	ldrh	r2, [r3, #0]
 8003b48:	4b11      	ldr	r3, [pc, #68]	; (8003b90 <FreqSweepMenuInputHandler+0x154>)
 8003b4a:	62da      	str	r2, [r3, #44]	; 0x2c
			calculated_sweep_in_hertz = (float)SM_MCLK / ((float)SWEEP_TIMER->PSC * (float)SWEEP_TIMER->ARR);
 8003b4c:	4b10      	ldr	r3, [pc, #64]	; (8003b90 <FreqSweepMenuInputHandler+0x154>)
 8003b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b50:	ee07 3a90 	vmov	s15, r3
 8003b54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b58:	4b0d      	ldr	r3, [pc, #52]	; (8003b90 <FreqSweepMenuInputHandler+0x154>)
 8003b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5c:	ee07 3a90 	vmov	s15, r3
 8003b60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b68:	eddf 6a11 	vldr	s13, [pc, #68]	; 8003bb0 <FreqSweepMenuInputHandler+0x174>
 8003b6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b70:	4b10      	ldr	r3, [pc, #64]	; (8003bb4 <FreqSweepMenuInputHandler+0x178>)
 8003b72:	edc3 7a00 	vstr	s15, [r3]
			break;
 8003b76:	bf00      	nop
	}

	// stay in this state
	eNewEvent = evIdle;
 8003b78:	4b0f      	ldr	r3, [pc, #60]	; (8003bb8 <FreqSweepMenuInputHandler+0x17c>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 8003b7e:	230b      	movs	r3, #11
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	08010fdc 	.word	0x08010fdc
 8003b8c:	08011058 	.word	0x08011058
 8003b90:	40000400 	.word	0x40000400
 8003b94:	08011070 	.word	0x08011070
 8003b98:	20001f1c 	.word	0x20001f1c
 8003b9c:	08011088 	.word	0x08011088
 8003ba0:	20000008 	.word	0x20000008
 8003ba4:	40012c00 	.word	0x40012c00
 8003ba8:	20000010 	.word	0x20000010
 8003bac:	2000000c 	.word	0x2000000c
 8003bb0:	4d2037a0 	.word	0x4d2037a0
 8003bb4:	20001f38 	.word	0x20001f38
 8003bb8:	20001f1b 	.word	0x20001f1b

08003bbc <FreqSweepMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuExitHandler()
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqSweepMenuExitHandler Event captured\n");
 8003bc0:	4806      	ldr	r0, [pc, #24]	; (8003bdc <FreqSweepMenuExitHandler+0x20>)
 8003bc2:	f00a ff03 	bl	800e9cc <puts>
	#endif

	DM_RefreshScreen();
 8003bc6:	f7fd fa7f 	bl	80010c8 <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8003bca:	4b05      	ldr	r3, [pc, #20]	; (8003be0 <FreqSweepMenuExitHandler+0x24>)
 8003bcc:	2201      	movs	r2, #1
 8003bce:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8003bd0:	4b04      	ldr	r3, [pc, #16]	; (8003be4 <FreqSweepMenuExitHandler+0x28>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8003bd6:	2308      	movs	r3, #8
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	080110a0 	.word	0x080110a0
 8003be0:	20001f1d 	.word	0x20001f1d
 8003be4:	20001f1b 	.word	0x20001f1b

08003be8 <FuncMenu_getStatus>:
#include <stdio.h>

eFuncMenu_Status eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;

eFuncMenu_Status FuncMenu_getStatus()
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
	return eNextFuncMenuStatus;
 8003bec:	4b03      	ldr	r3, [pc, #12]	; (8003bfc <FuncMenu_getStatus+0x14>)
 8003bee:	781b      	ldrb	r3, [r3, #0]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	20001f1e 	.word	0x20001f1e

08003c00 <FuncMainMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuEntryHandler(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncMainMenuEntryHandler Event captured\n");
 8003c04:	4806      	ldr	r0, [pc, #24]	; (8003c20 <FuncMainMenuEntryHandler+0x20>)
 8003c06:	f00a fee1 	bl	800e9cc <puts>
#endif

	DM_RefreshScreen();
 8003c0a:	f7fd fa5d 	bl	80010c8 <DM_RefreshScreen>

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8003c0e:	4b05      	ldr	r3, [pc, #20]	; (8003c24 <FuncMainMenuEntryHandler+0x24>)
 8003c10:	2201      	movs	r2, #1
 8003c12:	701a      	strb	r2, [r3, #0]
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
	}
*/
	eNewEvent = evIdle;
 8003c14:	4b04      	ldr	r3, [pc, #16]	; (8003c28 <FuncMainMenuEntryHandler+0x28>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8003c1a:	2301      	movs	r3, #1
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	080110c8 	.word	0x080110c8
 8003c24:	20001f1e 	.word	0x20001f1e
 8003c28:	20001f1b 	.word	0x20001f1b

08003c2c <FuncMainMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuExitHandler()
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncMainMenuExitHandler Event captured\n");
 8003c30:	4808      	ldr	r0, [pc, #32]	; (8003c54 <FuncMainMenuExitHandler+0x28>)
 8003c32:	f00a fecb 	bl	800e9cc <puts>
#endif

	// disable the menu

	eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;
 8003c36:	4b08      	ldr	r3, [pc, #32]	; (8003c58 <FuncMainMenuExitHandler+0x2c>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8003c3c:	f7fd fa44 	bl	80010c8 <DM_RefreshScreen>

#ifdef SWV_DEBUG_ENABLED
	  printf("returning to Idle State\n");
 8003c40:	4806      	ldr	r0, [pc, #24]	; (8003c5c <FuncMainMenuExitHandler+0x30>)
 8003c42:	f00a fec3 	bl	800e9cc <puts>
#endif

	eNewEvent = evIdle;
 8003c46:	4b06      	ldr	r3, [pc, #24]	; (8003c60 <FuncMainMenuExitHandler+0x34>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	08011118 	.word	0x08011118
 8003c58:	20001f1e 	.word	0x20001f1e
 8003c5c:	08011140 	.word	0x08011140
 8003c60:	20001f1b 	.word	0x20001f1b

08003c64 <FuncSignalMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuEntryHandler(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSignalMenuEntryHandler Event captured\n");
 8003c6a:	4814      	ldr	r0, [pc, #80]	; (8003cbc <FuncSignalMenuEntryHandler+0x58>)
 8003c6c:	f00a feae 	bl	800e9cc <puts>
#endif

	DM_RefreshScreen();
 8003c70:	f7fd fa2a 	bl	80010c8 <DM_RefreshScreen>

	eNextFuncMenuStatus = 	ENABLE_FUNC_SIGNAL_MENU;
 8003c74:	4b12      	ldr	r3, [pc, #72]	; (8003cc0 <FuncSignalMenuEntryHandler+0x5c>)
 8003c76:	2202      	movs	r2, #2
 8003c78:	701a      	strb	r2, [r3, #0]

	//FunctionProfile_t *func_profileTmp =  FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile;
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	f001 f838 	bl	8004cf0 <SM_GetOutputChannel>
 8003c80:	4603      	mov	r3, r0
 8003c82:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003c86:	607b      	str	r3, [r7, #4]
	if(func_profileTmp)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00a      	beq.n	8003ca4 <FuncSignalMenuEntryHandler+0x40>
	{
		ENCODER_TIMER->CNT = func_profileTmp->epos;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	785a      	ldrb	r2, [r3, #1]
 8003c92:	4b0c      	ldr	r3, [pc, #48]	; (8003cc4 <FuncSignalMenuEntryHandler+0x60>)
 8003c94:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FuncO_GetFuncPresetEncoderRange();
 8003c96:	f000 fe5b 	bl	8004950 <FuncO_GetFuncPresetEncoderRange>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	4b09      	ldr	r3, [pc, #36]	; (8003cc4 <FuncSignalMenuEntryHandler+0x60>)
 8003ca0:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ca2:	e002      	b.n	8003caa <FuncSignalMenuEntryHandler+0x46>
	}
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
 8003ca4:	4808      	ldr	r0, [pc, #32]	; (8003cc8 <FuncSignalMenuEntryHandler+0x64>)
 8003ca6:	f7fd fa59 	bl	800115c <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8003caa:	4b08      	ldr	r3, [pc, #32]	; (8003ccc <FuncSignalMenuEntryHandler+0x68>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 8003cb0:	2302      	movs	r3, #2
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	08011158 	.word	0x08011158
 8003cc0:	20001f1e 	.word	0x20001f1e
 8003cc4:	40012c00 	.word	0x40012c00
 8003cc8:	08011184 	.word	0x08011184
 8003ccc:	20001f1b 	.word	0x20001f1b

08003cd0 <FuncSignalMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuInputHandler(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSignalMenuInputHandler Event captured\n");
 8003cd4:	4807      	ldr	r0, [pc, #28]	; (8003cf4 <FuncSignalMenuInputHandler+0x24>)
 8003cd6:	f00a fe79 	bl	800e9cc <puts>
#endif


	FuncO_ModifySignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8003cda:	2001      	movs	r0, #1
 8003cdc:	f001 f81e 	bl	8004d1c <SM_GetEncoderValue>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 fcd0 	bl	8004688 <FuncO_ModifySignalOutput>
	eNewEvent = evBlueBtn;
 8003ce8:	4b03      	ldr	r3, [pc, #12]	; (8003cf8 <FuncSignalMenuInputHandler+0x28>)
 8003cea:	2201      	movs	r2, #1
 8003cec:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 8003cee:	2302      	movs	r3, #2
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	080111b8 	.word	0x080111b8
 8003cf8:	20001f1b 	.word	0x20001f1b

08003cfc <FuncSignalMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuExitHandler()
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSignalMenuExitHandler Event captured\n");
 8003d00:	4806      	ldr	r0, [pc, #24]	; (8003d1c <FuncSignalMenuExitHandler+0x20>)
 8003d02:	f00a fe63 	bl	800e9cc <puts>
#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8003d06:	4b06      	ldr	r3, [pc, #24]	; (8003d20 <FuncSignalMenuExitHandler+0x24>)
 8003d08:	2201      	movs	r2, #1
 8003d0a:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8003d0c:	f7fd f9dc 	bl	80010c8 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8003d10:	4b04      	ldr	r3, [pc, #16]	; (8003d24 <FuncSignalMenuExitHandler+0x28>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8003d16:	2301      	movs	r3, #1
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	080111e4 	.word	0x080111e4
 8003d20:	20001f1e 	.word	0x20001f1e
 8003d24:	20001f1b 	.word	0x20001f1b

08003d28 <FuncSyncMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuEntryHandler(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSyncMenuEntryHandler Event captured\n");
 8003d2e:	4814      	ldr	r0, [pc, #80]	; (8003d80 <FuncSyncMenuEntryHandler+0x58>)
 8003d30:	f00a fe4c 	bl	800e9cc <puts>
#endif

	DM_RefreshScreen();
 8003d34:	f7fd f9c8 	bl	80010c8 <DM_RefreshScreen>

	eNextFuncMenuStatus = 	ENABLE_FUNC_SYNC_MENU;
 8003d38:	4b12      	ldr	r3, [pc, #72]	; (8003d84 <FuncSyncMenuEntryHandler+0x5c>)
 8003d3a:	2203      	movs	r2, #3
 8003d3c:	701a      	strb	r2, [r3, #0]

	//FunctionProfile_t *func_profileTmp =  FuncO_GetSyncFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(SYNC_CHANNEL)->func_profile;
 8003d3e:	2001      	movs	r0, #1
 8003d40:	f000 ffd6 	bl	8004cf0 <SM_GetOutputChannel>
 8003d44:	4603      	mov	r3, r0
 8003d46:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003d4a:	607b      	str	r3, [r7, #4]
	if(func_profileTmp)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00a      	beq.n	8003d68 <FuncSyncMenuEntryHandler+0x40>
	{
		ENCODER_TIMER->CNT = func_profileTmp->epos;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	785a      	ldrb	r2, [r3, #1]
 8003d56:	4b0c      	ldr	r3, [pc, #48]	; (8003d88 <FuncSyncMenuEntryHandler+0x60>)
 8003d58:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FuncO_GetFuncPresetEncoderRange();
 8003d5a:	f000 fdf9 	bl	8004950 <FuncO_GetFuncPresetEncoderRange>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	461a      	mov	r2, r3
 8003d62:	4b09      	ldr	r3, [pc, #36]	; (8003d88 <FuncSyncMenuEntryHandler+0x60>)
 8003d64:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d66:	e002      	b.n	8003d6e <FuncSyncMenuEntryHandler+0x46>
	}
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
 8003d68:	4808      	ldr	r0, [pc, #32]	; (8003d8c <FuncSyncMenuEntryHandler+0x64>)
 8003d6a:	f7fd f9f7 	bl	800115c <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8003d6e:	4b08      	ldr	r3, [pc, #32]	; (8003d90 <FuncSyncMenuEntryHandler+0x68>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	701a      	strb	r2, [r3, #0]
	return Func_Sync_Menu_State;
 8003d74:	2303      	movs	r3, #3
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	08011210 	.word	0x08011210
 8003d84:	20001f1e 	.word	0x20001f1e
 8003d88:	40012c00 	.word	0x40012c00
 8003d8c:	08011184 	.word	0x08011184
 8003d90:	20001f1b 	.word	0x20001f1b

08003d94 <FuncSyncMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuInputHandler(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSyncMenuInputHandler Event captured\n");
 8003d98:	4807      	ldr	r0, [pc, #28]	; (8003db8 <FuncSyncMenuInputHandler+0x24>)
 8003d9a:	f00a fe17 	bl	800e9cc <puts>
#endif


	FuncO_ModifySyncOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8003d9e:	2001      	movs	r0, #1
 8003da0:	f000 ffbc 	bl	8004d1c <SM_GetEncoderValue>
 8003da4:	4603      	mov	r3, r0
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 fcc6 	bl	8004738 <FuncO_ModifySyncOutput>
	eNewEvent = evBlueBtn;
 8003dac:	4b03      	ldr	r3, [pc, #12]	; (8003dbc <FuncSyncMenuInputHandler+0x28>)
 8003dae:	2201      	movs	r2, #1
 8003db0:	701a      	strb	r2, [r3, #0]
	return Func_Sync_Menu_State;
 8003db2:	2303      	movs	r3, #3
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	08011238 	.word	0x08011238
 8003dbc:	20001f1b 	.word	0x20001f1b

08003dc0 <FuncSyncMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuExitHandler()
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSyncMenuExitHandler Event captured\n");
 8003dc4:	4806      	ldr	r0, [pc, #24]	; (8003de0 <FuncSyncMenuExitHandler+0x20>)
 8003dc6:	f00a fe01 	bl	800e9cc <puts>
#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8003dca:	4b06      	ldr	r3, [pc, #24]	; (8003de4 <FuncSyncMenuExitHandler+0x24>)
 8003dcc:	2201      	movs	r2, #1
 8003dce:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8003dd0:	f7fd f97a 	bl	80010c8 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8003dd4:	4b04      	ldr	r3, [pc, #16]	; (8003de8 <FuncSyncMenuExitHandler+0x28>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8003dda:	2301      	movs	r3, #1
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	08011260 	.word	0x08011260
 8003de4:	20001f1e 	.word	0x20001f1e
 8003de8:	20001f1b 	.word	0x20001f1b

08003dec <GainMenu_getStatus>:
#include <stdio.h>

eGainMenu_Status eNextGainMenuStatus = 	DISABLE_GAIN_MENU;

eGainMenu_Status GainMenu_getStatus()
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
	return eNextGainMenuStatus;
 8003df0:	4b03      	ldr	r3, [pc, #12]	; (8003e00 <GainMenu_getStatus+0x14>)
 8003df2:	781b      	ldrb	r3, [r3, #0]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	20001f1f 	.word	0x20001f1f

08003e04 <GainMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuEntryHandler()
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainMainMenuEntryHandler Event captured\n");
 8003e08:	4806      	ldr	r0, [pc, #24]	; (8003e24 <GainMainMenuEntryHandler+0x20>)
 8003e0a:	f00a fddf 	bl	800e9cc <puts>
#endif

	DM_RefreshScreen();
 8003e0e:	f7fd f95b 	bl	80010c8 <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8003e12:	4b05      	ldr	r3, [pc, #20]	; (8003e28 <GainMainMenuEntryHandler+0x24>)
 8003e14:	2201      	movs	r2, #1
 8003e16:	701a      	strb	r2, [r3, #0]

	eNewEvent = evIdle;
 8003e18:	4b04      	ldr	r3, [pc, #16]	; (8003e2c <GainMainMenuEntryHandler+0x28>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8003e1e:	2304      	movs	r3, #4
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	08011288 	.word	0x08011288
 8003e28:	20001f1f 	.word	0x20001f1f
 8003e2c:	20001f1b 	.word	0x20001f1b

08003e30 <GainMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuExitHandler()
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainMainMenuExitHandler Event captured\n");
 8003e34:	4808      	ldr	r0, [pc, #32]	; (8003e58 <GainMainMenuExitHandler+0x28>)
 8003e36:	f00a fdc9 	bl	800e9cc <puts>
#endif

	eNextGainMenuStatus = DISABLE_GAIN_MENU;
 8003e3a:	4b08      	ldr	r3, [pc, #32]	; (8003e5c <GainMainMenuExitHandler+0x2c>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8003e40:	f7fd f942 	bl	80010c8 <DM_RefreshScreen>

#ifdef SWV_DEBUG_ENABLED
	  printf("returning to Idle State\n");
 8003e44:	4806      	ldr	r0, [pc, #24]	; (8003e60 <GainMainMenuExitHandler+0x30>)
 8003e46:	f00a fdc1 	bl	800e9cc <puts>
#endif

	eNewEvent = evIdle;
 8003e4a:	4b06      	ldr	r3, [pc, #24]	; (8003e64 <GainMainMenuExitHandler+0x34>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	080112d8 	.word	0x080112d8
 8003e5c:	20001f1f 	.word	0x20001f1f
 8003e60:	08011300 	.word	0x08011300
 8003e64:	20001f1b 	.word	0x20001f1b

08003e68 <GainSignalMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuEntryHandler()
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSignalMenuEntryHandler Event captured\n");
 8003e6e:	4813      	ldr	r0, [pc, #76]	; (8003ebc <GainSignalMenuEntryHandler+0x54>)
 8003e70:	f00a fdac 	bl	800e9cc <puts>
#endif

	DM_RefreshScreen();
 8003e74:	f7fd f928 	bl	80010c8 <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_SIGNAL_MENU;
 8003e78:	4b11      	ldr	r3, [pc, #68]	; (8003ec0 <GainSignalMenuEntryHandler+0x58>)
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 8003e7e:	2000      	movs	r0, #0
 8003e80:	f000 ff36 	bl	8004cf0 <SM_GetOutputChannel>
 8003e84:	4603      	mov	r3, r0
 8003e86:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8003e8a:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d008      	beq.n	8003ea4 <GainSignalMenuEntryHandler+0x3c>
	{
		ENCODER_TIMER->CNT = pTmpVppPreset->epos;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	8b1a      	ldrh	r2, [r3, #24]
 8003e96:	4b0b      	ldr	r3, [pc, #44]	; (8003ec4 <GainSignalMenuEntryHandler+0x5c>)
 8003e98:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;
 8003e9a:	4b0a      	ldr	r3, [pc, #40]	; (8003ec4 <GainSignalMenuEntryHandler+0x5c>)
 8003e9c:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 8003ea0:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ea2:	e002      	b.n	8003eaa <GainSignalMenuEntryHandler+0x42>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8003ea4:	4808      	ldr	r0, [pc, #32]	; (8003ec8 <GainSignalMenuEntryHandler+0x60>)
 8003ea6:	f7fd f959 	bl	800115c <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8003eaa:	4b08      	ldr	r3, [pc, #32]	; (8003ecc <GainSignalMenuEntryHandler+0x64>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 8003eb0:	2305      	movs	r3, #5
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	08011318 	.word	0x08011318
 8003ec0:	20001f1f 	.word	0x20001f1f
 8003ec4:	40012c00 	.word	0x40012c00
 8003ec8:	08011344 	.word	0x08011344
 8003ecc:	20001f1b 	.word	0x20001f1b

08003ed0 <GainSignalMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuInputHandler()
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSignalMenuInputHandler Event captured\n");
 8003ed4:	4807      	ldr	r0, [pc, #28]	; (8003ef4 <GainSignalMenuInputHandler+0x24>)
 8003ed6:	f00a fd79 	bl	800e9cc <puts>
#endif

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_REVERSE));
	VPP_ModifySignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8003eda:	2001      	movs	r0, #1
 8003edc:	f000 ff1e 	bl	8004d1c <SM_GetEncoderValue>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f001 f8d2 	bl	800508c <VPP_ModifySignalOutput>

	eNewEvent = evYellowBtn;
 8003ee8:	4b03      	ldr	r3, [pc, #12]	; (8003ef8 <GainSignalMenuInputHandler+0x28>)
 8003eea:	2203      	movs	r2, #3
 8003eec:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 8003eee:	2305      	movs	r3, #5
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	0801137c 	.word	0x0801137c
 8003ef8:	20001f1b 	.word	0x20001f1b

08003efc <GainSignalMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuExitHandler()
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSignalMenuExitHandler Event captured\n");
 8003f00:	4806      	ldr	r0, [pc, #24]	; (8003f1c <GainSignalMenuExitHandler+0x20>)
 8003f02:	f00a fd63 	bl	800e9cc <puts>
#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8003f06:	4b06      	ldr	r3, [pc, #24]	; (8003f20 <GainSignalMenuExitHandler+0x24>)
 8003f08:	2201      	movs	r2, #1
 8003f0a:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8003f0c:	f7fd f8dc 	bl	80010c8 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8003f10:	4b04      	ldr	r3, [pc, #16]	; (8003f24 <GainSignalMenuExitHandler+0x28>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8003f16:	2304      	movs	r3, #4
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	080113a8 	.word	0x080113a8
 8003f20:	20001f1f 	.word	0x20001f1f
 8003f24:	20001f1b 	.word	0x20001f1b

08003f28 <GainSyncMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuEntryHandler()
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSyncMenuEntryHandler Event captured\n");
 8003f2e:	4813      	ldr	r0, [pc, #76]	; (8003f7c <GainSyncMenuEntryHandler+0x54>)
 8003f30:	f00a fd4c 	bl	800e9cc <puts>
#endif

	DM_RefreshScreen();
 8003f34:	f7fd f8c8 	bl	80010c8 <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_SYNC_MENU;
 8003f38:	4b11      	ldr	r3, [pc, #68]	; (8003f80 <GainSyncMenuEntryHandler+0x58>)
 8003f3a:	2203      	movs	r2, #3
 8003f3c:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile;
 8003f3e:	2001      	movs	r0, #1
 8003f40:	f000 fed6 	bl	8004cf0 <SM_GetOutputChannel>
 8003f44:	4603      	mov	r3, r0
 8003f46:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8003f4a:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d008      	beq.n	8003f64 <GainSyncMenuEntryHandler+0x3c>
	{
		ENCODER_TIMER->CNT = pTmpVppPreset->epos;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	8b1a      	ldrh	r2, [r3, #24]
 8003f56:	4b0b      	ldr	r3, [pc, #44]	; (8003f84 <GainSyncMenuEntryHandler+0x5c>)
 8003f58:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;
 8003f5a:	4b0a      	ldr	r3, [pc, #40]	; (8003f84 <GainSyncMenuEntryHandler+0x5c>)
 8003f5c:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 8003f60:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f62:	e002      	b.n	8003f6a <GainSyncMenuEntryHandler+0x42>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8003f64:	4808      	ldr	r0, [pc, #32]	; (8003f88 <GainSyncMenuEntryHandler+0x60>)
 8003f66:	f7fd f8f9 	bl	800115c <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8003f6a:	4b08      	ldr	r3, [pc, #32]	; (8003f8c <GainSyncMenuEntryHandler+0x64>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	701a      	strb	r2, [r3, #0]
	return Gain_Sync_Menu_State;
 8003f70:	2306      	movs	r3, #6
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	080113d4 	.word	0x080113d4
 8003f80:	20001f1f 	.word	0x20001f1f
 8003f84:	40012c00 	.word	0x40012c00
 8003f88:	08011344 	.word	0x08011344
 8003f8c:	20001f1b 	.word	0x20001f1b

08003f90 <GainSyncMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuInputHandler()
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSyncMenuInputHandler Event captured\n");
 8003f94:	4807      	ldr	r0, [pc, #28]	; (8003fb4 <GainSyncMenuInputHandler+0x24>)
 8003f96:	f00a fd19 	bl	800e9cc <puts>
#endif

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_REVERSE));
	VPP_ModifySyncOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8003f9a:	2001      	movs	r0, #1
 8003f9c:	f000 febe 	bl	8004d1c <SM_GetEncoderValue>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f001 fd1c 	bl	80059e0 <VPP_ModifySyncOutput>

	eNewEvent = evYellowBtn;
 8003fa8:	4b03      	ldr	r3, [pc, #12]	; (8003fb8 <GainSyncMenuInputHandler+0x28>)
 8003faa:	2203      	movs	r2, #3
 8003fac:	701a      	strb	r2, [r3, #0]
	return Gain_Sync_Menu_State;
 8003fae:	2306      	movs	r3, #6
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	080113fc 	.word	0x080113fc
 8003fb8:	20001f1b 	.word	0x20001f1b

08003fbc <GainSyncMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuExitHandler()
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSyncMenuExitHandler Event captured\n");
 8003fc0:	4806      	ldr	r0, [pc, #24]	; (8003fdc <GainSyncMenuExitHandler+0x20>)
 8003fc2:	f00a fd03 	bl	800e9cc <puts>
#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8003fc6:	4b06      	ldr	r3, [pc, #24]	; (8003fe0 <GainSyncMenuExitHandler+0x24>)
 8003fc8:	2201      	movs	r2, #1
 8003fca:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8003fcc:	f7fd f87c 	bl	80010c8 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8003fd0:	4b04      	ldr	r3, [pc, #16]	; (8003fe4 <GainSyncMenuExitHandler+0x28>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8003fd6:	2304      	movs	r3, #4
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	08011424 	.word	0x08011424
 8003fe0:	20001f1f 	.word	0x20001f1f
 8003fe4:	20001f1b 	.word	0x20001f1b

08003fe8 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8003ff0:	4b07      	ldr	r3, [pc, #28]	; (8004010 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8003ff2:	695a      	ldr	r2, [r3, #20]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d101      	bne.n	8004002 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8003ffe:	2301      	movs	r3, #1
 8004000:	e000      	b.n	8004004 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr
 8004010:	40010400 	.word	0x40010400

08004014 <IM_BTN1_EXTI14_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN1_EXTI14_Handler()
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 800401a:	4b0f      	ldr	r3, [pc, #60]	; (8004058 <IM_BTN1_EXTI14_Handler+0x44>)
 800401c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401e:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn1_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004020:	88fb      	ldrh	r3, [r7, #6]
 8004022:	4a0e      	ldr	r2, [pc, #56]	; (800405c <IM_BTN1_EXTI14_Handler+0x48>)
 8004024:	8812      	ldrh	r2, [r2, #0]
 8004026:	1a9b      	subs	r3, r3, r2
 8004028:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800402c:	dd0c      	ble.n	8004048 <IM_BTN1_EXTI14_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14))
 800402e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004032:	f7ff ffd9 	bl	8003fe8 <LL_EXTI_IsActiveFlag_0_31>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d005      	beq.n	8004048 <IM_BTN1_EXTI14_Handler+0x34>
		{

			EM_SetNewEvent(evBlueBtn);
 800403c:	2001      	movs	r0, #1
 800403e:	f7ff fbd3 	bl	80037e8 <EM_SetNewEvent>
			printf("'Blue' BTN1_EXTI14_Pin\n");
 8004042:	4807      	ldr	r0, [pc, #28]	; (8004060 <IM_BTN1_EXTI14_Handler+0x4c>)
 8004044:	f00a fcc2 	bl	800e9cc <puts>
		}
	}
	btn1_last_interrupt_time = interrupt_time;
 8004048:	4a04      	ldr	r2, [pc, #16]	; (800405c <IM_BTN1_EXTI14_Handler+0x48>)
 800404a:	88fb      	ldrh	r3, [r7, #6]
 800404c:	8013      	strh	r3, [r2, #0]


}
 800404e:	bf00      	nop
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	40014400 	.word	0x40014400
 800405c:	20001f20 	.word	0x20001f20
 8004060:	0801144c 	.word	0x0801144c

08004064 <IM_BTN2_EXTI15_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN2_EXTI15_Handler()
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 800406a:	4b0f      	ldr	r3, [pc, #60]	; (80040a8 <IM_BTN2_EXTI15_Handler+0x44>)
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn2_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004070:	88fb      	ldrh	r3, [r7, #6]
 8004072:	4a0e      	ldr	r2, [pc, #56]	; (80040ac <IM_BTN2_EXTI15_Handler+0x48>)
 8004074:	8812      	ldrh	r2, [r2, #0]
 8004076:	1a9b      	subs	r3, r3, r2
 8004078:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800407c:	dd0c      	ble.n	8004098 <IM_BTN2_EXTI15_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15))
 800407e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004082:	f7ff ffb1 	bl	8003fe8 <LL_EXTI_IsActiveFlag_0_31>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d005      	beq.n	8004098 <IM_BTN2_EXTI15_Handler+0x34>
		{
			EM_SetNewEvent(evYellowBtn);
 800408c:	2003      	movs	r0, #3
 800408e:	f7ff fbab 	bl	80037e8 <EM_SetNewEvent>
			printf("'Yellow' BTN2_EXTI15_Pin\n");
 8004092:	4807      	ldr	r0, [pc, #28]	; (80040b0 <IM_BTN2_EXTI15_Handler+0x4c>)
 8004094:	f00a fc9a 	bl	800e9cc <puts>
		}
	}
	btn2_last_interrupt_time = interrupt_time;
 8004098:	4a04      	ldr	r2, [pc, #16]	; (80040ac <IM_BTN2_EXTI15_Handler+0x48>)
 800409a:	88fb      	ldrh	r3, [r7, #6]
 800409c:	8013      	strh	r3, [r2, #0]


}
 800409e:	bf00      	nop
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	40014400 	.word	0x40014400
 80040ac:	20001f22 	.word	0x20001f22
 80040b0:	08011464 	.word	0x08011464

080040b4 <IM_BTN3_EXTI0_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN3_EXTI0_Handler()
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 80040ba:	4b0e      	ldr	r3, [pc, #56]	; (80040f4 <IM_BTN3_EXTI0_Handler+0x40>)
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn3_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 80040c0:	88fb      	ldrh	r3, [r7, #6]
 80040c2:	4a0d      	ldr	r2, [pc, #52]	; (80040f8 <IM_BTN3_EXTI0_Handler+0x44>)
 80040c4:	8812      	ldrh	r2, [r2, #0]
 80040c6:	1a9b      	subs	r3, r3, r2
 80040c8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80040cc:	dd0b      	ble.n	80040e6 <IM_BTN3_EXTI0_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0))
 80040ce:	2001      	movs	r0, #1
 80040d0:	f7ff ff8a 	bl	8003fe8 <LL_EXTI_IsActiveFlag_0_31>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d005      	beq.n	80040e6 <IM_BTN3_EXTI0_Handler+0x32>
		{
			EM_SetNewEvent(evRedBtn);
 80040da:	2004      	movs	r0, #4
 80040dc:	f7ff fb84 	bl	80037e8 <EM_SetNewEvent>
			printf("'Red' BTN3_EXTI0_Pin\n");
 80040e0:	4806      	ldr	r0, [pc, #24]	; (80040fc <IM_BTN3_EXTI0_Handler+0x48>)
 80040e2:	f00a fc73 	bl	800e9cc <puts>
		}
	}
	btn3_last_interrupt_time = interrupt_time;
 80040e6:	4a04      	ldr	r2, [pc, #16]	; (80040f8 <IM_BTN3_EXTI0_Handler+0x44>)
 80040e8:	88fb      	ldrh	r3, [r7, #6]
 80040ea:	8013      	strh	r3, [r2, #0]


}
 80040ec:	bf00      	nop
 80040ee:	3708      	adds	r7, #8
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	40014400 	.word	0x40014400
 80040f8:	20001f24 	.word	0x20001f24
 80040fc:	08011480 	.word	0x08011480

08004100 <IM_BTN4_EXTI1_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN4_EXTI1_Handler()
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004106:	4b0e      	ldr	r3, [pc, #56]	; (8004140 <IM_BTN4_EXTI1_Handler+0x40>)
 8004108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410a:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn4_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 800410c:	88fb      	ldrh	r3, [r7, #6]
 800410e:	4a0d      	ldr	r2, [pc, #52]	; (8004144 <IM_BTN4_EXTI1_Handler+0x44>)
 8004110:	8812      	ldrh	r2, [r2, #0]
 8004112:	1a9b      	subs	r3, r3, r2
 8004114:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004118:	dd0b      	ble.n	8004132 <IM_BTN4_EXTI1_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1))
 800411a:	2002      	movs	r0, #2
 800411c:	f7ff ff64 	bl	8003fe8 <LL_EXTI_IsActiveFlag_0_31>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d005      	beq.n	8004132 <IM_BTN4_EXTI1_Handler+0x32>
		{
			EM_SetNewEvent(evGreenBtn);
 8004126:	2002      	movs	r0, #2
 8004128:	f7ff fb5e 	bl	80037e8 <EM_SetNewEvent>
			printf("'Green' BTN4_EXTI1_Pin\n");
 800412c:	4806      	ldr	r0, [pc, #24]	; (8004148 <IM_BTN4_EXTI1_Handler+0x48>)
 800412e:	f00a fc4d 	bl	800e9cc <puts>
		}
	}
	btn4_last_interrupt_time = interrupt_time;
 8004132:	4a04      	ldr	r2, [pc, #16]	; (8004144 <IM_BTN4_EXTI1_Handler+0x44>)
 8004134:	88fb      	ldrh	r3, [r7, #6]
 8004136:	8013      	strh	r3, [r2, #0]


}
 8004138:	bf00      	nop
 800413a:	3708      	adds	r7, #8
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40014400 	.word	0x40014400
 8004144:	20001f26 	.word	0x20001f26
 8004148:	08011498 	.word	0x08011498

0800414c <IM_ENC_EXTI2_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_EXTI2_Handler()
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004152:	4b0e      	ldr	r3, [pc, #56]	; (800418c <IM_ENC_EXTI2_Handler+0x40>)
 8004154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004156:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - encbtn_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004158:	88fb      	ldrh	r3, [r7, #6]
 800415a:	4a0d      	ldr	r2, [pc, #52]	; (8004190 <IM_ENC_EXTI2_Handler+0x44>)
 800415c:	8812      	ldrh	r2, [r2, #0]
 800415e:	1a9b      	subs	r3, r3, r2
 8004160:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004164:	dd0b      	ble.n	800417e <IM_ENC_EXTI2_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2))
 8004166:	2004      	movs	r0, #4
 8004168:	f7ff ff3e 	bl	8003fe8 <LL_EXTI_IsActiveFlag_0_31>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d005      	beq.n	800417e <IM_ENC_EXTI2_Handler+0x32>
		{
			EM_SetNewEvent(evEncoderPush);
 8004172:	2006      	movs	r0, #6
 8004174:	f7ff fb38 	bl	80037e8 <EM_SetNewEvent>
			printf("'EncoderPush' ENC_EXTI2_Pin\n");
 8004178:	4806      	ldr	r0, [pc, #24]	; (8004194 <IM_ENC_EXTI2_Handler+0x48>)
 800417a:	f00a fc27 	bl	800e9cc <puts>
		}
	}
	encbtn_last_interrupt_time = interrupt_time;
 800417e:	4a04      	ldr	r2, [pc, #16]	; (8004190 <IM_ENC_EXTI2_Handler+0x44>)
 8004180:	88fb      	ldrh	r3, [r7, #6]
 8004182:	8013      	strh	r3, [r2, #0]


}
 8004184:	bf00      	nop
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	40014400 	.word	0x40014400
 8004190:	20001f28 	.word	0x20001f28
 8004194:	080114b0 	.word	0x080114b0

08004198 <IM_ENC_DIRF_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_DIRF_Handler()
{
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0

	if((TIM1->SR & TIM_SR_DIRF) == TIM_SR_DIRF)
 800419c:	4b0a      	ldr	r3, [pc, #40]	; (80041c8 <IM_ENC_DIRF_Handler+0x30>)
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041a8:	d10b      	bne.n	80041c2 <IM_ENC_DIRF_Handler+0x2a>
	{
		EM_SetNewEvent(evEncoderSet);
 80041aa:	2005      	movs	r0, #5
 80041ac:	f7ff fb1c 	bl	80037e8 <EM_SetNewEvent>
		printf("Encoder new direction\n");
 80041b0:	4806      	ldr	r0, [pc, #24]	; (80041cc <IM_ENC_DIRF_Handler+0x34>)
 80041b2:	f00a fc0b 	bl	800e9cc <puts>
		TIM1->SR &= ~(TIM_SR_DIRF);
 80041b6:	4b04      	ldr	r3, [pc, #16]	; (80041c8 <IM_ENC_DIRF_Handler+0x30>)
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	4a03      	ldr	r2, [pc, #12]	; (80041c8 <IM_ENC_DIRF_Handler+0x30>)
 80041bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041c0:	6113      	str	r3, [r2, #16]

	}
}
 80041c2:	bf00      	nop
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	40012c00 	.word	0x40012c00
 80041cc:	080114cc 	.word	0x080114cc

080041d0 <BO_GetBiasPolarity>:
 *	@param None
 *	@retval None
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
	return eBiasPolarity;
 80041d4:	4b03      	ldr	r3, [pc, #12]	; (80041e4 <BO_GetBiasPolarity+0x14>)
 80041d6:	781b      	ldrb	r3, [r3, #0]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	20000014 	.word	0x20000014

080041e8 <BO_GetDcBiasEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t BO_GetDcBiasEncoderValue()
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0
	return dc_bias_encoder_value;
 80041ec:	4b03      	ldr	r3, [pc, #12]	; (80041fc <BO_GetDcBiasEncoderValue+0x14>)
 80041ee:	881b      	ldrh	r3, [r3, #0]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	20000016 	.word	0x20000016

08004200 <BO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void BO_ModifyOutput(uint16_t pEncoderValue)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	4603      	mov	r3, r0
 8004208:	80fb      	strh	r3, [r7, #6]
	// pEncoderValue is reversed for correct rotary encoder operation.
	// However, we want to retain the forward direction value to prevent polarity flip!
	dc_bias_encoder_value = SM_GetEncoderValue(ENCODER_FORWARD);
 800420a:	2000      	movs	r0, #0
 800420c:	f000 fd86 	bl	8004d1c <SM_GetEncoderValue>
 8004210:	4603      	mov	r3, r0
 8004212:	461a      	mov	r2, r3
 8004214:	4b1b      	ldr	r3, [pc, #108]	; (8004284 <BO_ModifyOutput+0x84>)
 8004216:	801a      	strh	r2, [r3, #0]

	// apply negative dc bias
	if(pEncoderValue < BIAS_CENTER) {
 8004218:	88fb      	ldrh	r3, [r7, #6]
 800421a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800421e:	d214      	bcs.n	800424a <BO_ModifyOutput+0x4a>

		eBiasPolarity = INVERSEBIAS;
 8004220:	4b19      	ldr	r3, [pc, #100]	; (8004288 <BO_ModifyOutput+0x88>)
 8004222:	2200      	movs	r2, #0
 8004224:	701a      	strb	r2, [r3, #0]


		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((BIAS_CENTER - pEncoderValue) * BIAS_MAG));
 8004226:	88fb      	ldrh	r3, [r7, #6]
 8004228:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 800422c:	4613      	mov	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4413      	add	r3, r2
 8004232:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8004234:	2200      	movs	r2, #0
 8004236:	2110      	movs	r1, #16
 8004238:	4814      	ldr	r0, [pc, #80]	; (800428c <BO_ModifyOutput+0x8c>)
 800423a:	f005 fbdb 	bl	80099f4 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 800423e:	2201      	movs	r2, #1
 8004240:	2108      	movs	r1, #8
 8004242:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004246:	f006 fab5 	bl	800a7b4 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(pEncoderValue >= BIAS_CENTER) {
 800424a:	88fb      	ldrh	r3, [r7, #6]
 800424c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004250:	d314      	bcc.n	800427c <BO_ModifyOutput+0x7c>

		eBiasPolarity = NORMALBIAS;
 8004252:	4b0d      	ldr	r3, [pc, #52]	; (8004288 <BO_ModifyOutput+0x88>)
 8004254:	2201      	movs	r2, #1
 8004256:	701a      	strb	r2, [r3, #0]
		//TIM1->CNT = pEncoderValue;

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((pEncoderValue - BIAS_CENTER) * BIAS_MAG));
 8004258:	88fb      	ldrh	r3, [r7, #6]
 800425a:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 800425e:	4613      	mov	r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4413      	add	r3, r2
 8004264:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8004266:	2200      	movs	r2, #0
 8004268:	2110      	movs	r1, #16
 800426a:	4808      	ldr	r0, [pc, #32]	; (800428c <BO_ModifyOutput+0x8c>)
 800426c:	f005 fbc2 	bl	80099f4 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 8004270:	2200      	movs	r2, #0
 8004272:	2108      	movs	r1, #8
 8004274:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004278:	f006 fa9c 	bl	800a7b4 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_RESET);
	}
}
 800427c:	bf00      	nop
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	20000016 	.word	0x20000016
 8004288:	20000014 	.word	0x20000014
 800428c:	20002614 	.word	0x20002614

08004290 <BO_GetOutputBias>:
 *	@param None
 *	@retval None
 *
 */
uint32_t BO_GetOutputBias()
{
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 8004294:	2110      	movs	r1, #16
 8004296:	4803      	ldr	r0, [pc, #12]	; (80042a4 <BO_GetOutputBias+0x14>)
 8004298:	f005 fbf2 	bl	8009a80 <HAL_DAC_GetValue>
 800429c:	4603      	mov	r3, r0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	20002614 	.word	0x20002614

080042a8 <DT_InitRegister>:
 *	@param None
 *	@retval None
 *
 */
void DT_InitRegister()
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 80042ae:	2300      	movs	r3, #0
 80042b0:	607b      	str	r3, [r7, #4]
 80042b2:	e06b      	b.n	800438c <DT_InitRegister+0xe4>
	{
		// prevent divide by zero (prescaler)
		if(DacTimerReg[i].psc == 0)
 80042b4:	493a      	ldr	r1, [pc, #232]	; (80043a0 <DT_InitRegister+0xf8>)
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	4613      	mov	r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	4413      	add	r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	440b      	add	r3, r1
 80042c2:	3308      	adds	r3, #8
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d129      	bne.n	800431e <DT_InitRegister+0x76>
			DacTimerReg[i].arr = ((SM_MCLK / DacTimerReg[i].hertz) / SM_FSAMP) * DacTimerReg[i].error;
 80042ca:	4935      	ldr	r1, [pc, #212]	; (80043a0 <DT_InitRegister+0xf8>)
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	4613      	mov	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4413      	add	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	440b      	add	r3, r1
 80042d8:	3304      	adds	r3, #4
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a31      	ldr	r2, [pc, #196]	; (80043a4 <DT_InitRegister+0xfc>)
 80042de:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e2:	ee07 3a90 	vmov	s15, r3
 80042e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80042ea:	492d      	ldr	r1, [pc, #180]	; (80043a0 <DT_InitRegister+0xf8>)
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	4613      	mov	r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	4413      	add	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	440b      	add	r3, r1
 80042f8:	3310      	adds	r3, #16
 80042fa:	edd3 7a00 	vldr	s15, [r3]
 80042fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004306:	ee17 0a90 	vmov	r0, s15
 800430a:	4925      	ldr	r1, [pc, #148]	; (80043a0 <DT_InitRegister+0xf8>)
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	4613      	mov	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4413      	add	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	440b      	add	r3, r1
 8004318:	330c      	adds	r3, #12
 800431a:	6018      	str	r0, [r3, #0]
 800431c:	e033      	b.n	8004386 <DT_InitRegister+0xde>
		else
			DacTimerReg[i].arr = (((SM_MCLK / DacTimerReg[i].hertz) / DacTimerReg[i].psc) / SM_FSAMP) * DacTimerReg[i].error;
 800431e:	4920      	ldr	r1, [pc, #128]	; (80043a0 <DT_InitRegister+0xf8>)
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	4613      	mov	r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4413      	add	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	440b      	add	r3, r1
 800432c:	3304      	adds	r3, #4
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a1c      	ldr	r2, [pc, #112]	; (80043a4 <DT_InitRegister+0xfc>)
 8004332:	fbb2 f1f3 	udiv	r1, r2, r3
 8004336:	481a      	ldr	r0, [pc, #104]	; (80043a0 <DT_InitRegister+0xf8>)
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	4613      	mov	r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	4413      	add	r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	4403      	add	r3, r0
 8004344:	3308      	adds	r3, #8
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	fbb1 f3f3 	udiv	r3, r1, r3
 800434c:	ee07 3a90 	vmov	s15, r3
 8004350:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004354:	4912      	ldr	r1, [pc, #72]	; (80043a0 <DT_InitRegister+0xf8>)
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	4613      	mov	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	4413      	add	r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	440b      	add	r3, r1
 8004362:	3310      	adds	r3, #16
 8004364:	edd3 7a00 	vldr	s15, [r3]
 8004368:	ee67 7a27 	vmul.f32	s15, s14, s15
 800436c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004370:	ee17 0a90 	vmov	r0, s15
 8004374:	490a      	ldr	r1, [pc, #40]	; (80043a0 <DT_InitRegister+0xf8>)
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	4613      	mov	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	440b      	add	r3, r1
 8004382:	330c      	adds	r3, #12
 8004384:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	3301      	adds	r3, #1
 800438a:	607b      	str	r3, [r7, #4]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b0d      	cmp	r3, #13
 8004390:	dd90      	ble.n	80042b4 <DT_InitRegister+0xc>
	}
}
 8004392:	bf00      	nop
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	20000018 	.word	0x20000018
 80043a4:	00155cc0 	.word	0x00155cc0

080043a8 <DT_GetRegisterByEnum>:
 *	@param pEnum Enummeration (eFreqSettings_t) search criteria. Not an index
 *	@retval Pointer to the found DacTimeReg_t struct. Null if no result!
 *
 */
DacTimeReg_t* DT_GetRegisterByEnum(eFreqSettings_t pEnum)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 80043b0:	2300      	movs	r3, #0
 80043b2:	60fb      	str	r3, [r7, #12]
 80043b4:	e016      	b.n	80043e4 <DT_GetRegisterByEnum+0x3c>
		if(DacTimerReg[i].hertz == pEnum)
 80043b6:	4910      	ldr	r1, [pc, #64]	; (80043f8 <DT_GetRegisterByEnum+0x50>)
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	4613      	mov	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4413      	add	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	440b      	add	r3, r1
 80043c4:	3304      	adds	r3, #4
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d107      	bne.n	80043de <DT_GetRegisterByEnum+0x36>
			return &DacTimerReg[i];
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	4613      	mov	r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4413      	add	r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4a07      	ldr	r2, [pc, #28]	; (80043f8 <DT_GetRegisterByEnum+0x50>)
 80043da:	4413      	add	r3, r2
 80043dc:	e006      	b.n	80043ec <DT_GetRegisterByEnum+0x44>
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	3301      	adds	r3, #1
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2b0d      	cmp	r3, #13
 80043e8:	dde5      	ble.n	80043b6 <DT_GetRegisterByEnum+0xe>

	return 0;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3714      	adds	r7, #20
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr
 80043f8:	20000018 	.word	0x20000018

080043fc <FreqO_AdjustFreq>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustFreq()
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	af00      	add	r7, sp, #0
		//TIM8->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_HIFREQ_MAG;
		TIM8->ARR = SM_GetEncoderValue(ENCODER_FORWARD); //* FREQ_ENCODER_MIDFREQ_MAG;
 8004400:	2000      	movs	r0, #0
 8004402:	f000 fc8b 	bl	8004d1c <SM_GetEncoderValue>
 8004406:	4603      	mov	r3, r0
 8004408:	461a      	mov	r2, r3
 800440a:	4b02      	ldr	r3, [pc, #8]	; (8004414 <FreqO_AdjustFreq+0x18>)
 800440c:	62da      	str	r2, [r3, #44]	; 0x2c
		//TIM8->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_LOFREQ_MAG;
}
 800440e:	bf00      	nop
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	40013400 	.word	0x40013400

08004418 <FreqO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_ModifyOutput(uint16_t pEncValue)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	4603      	mov	r3, r0
 8004420:	80fb      	strh	r3, [r7, #6]

	switch(pEncValue)
 8004422:	88fb      	ldrh	r3, [r7, #6]
 8004424:	2b38      	cmp	r3, #56	; 0x38
 8004426:	f200 80b4 	bhi.w	8004592 <FreqO_ModifyOutput+0x17a>
 800442a:	a201      	add	r2, pc, #4	; (adr r2, 8004430 <FreqO_ModifyOutput+0x18>)
 800442c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004430:	08004515 	.word	0x08004515
 8004434:	08004515 	.word	0x08004515
 8004438:	08004515 	.word	0x08004515
 800443c:	08004515 	.word	0x08004515
 8004440:	0800451d 	.word	0x0800451d
 8004444:	0800451d 	.word	0x0800451d
 8004448:	0800451d 	.word	0x0800451d
 800444c:	0800451d 	.word	0x0800451d
 8004450:	08004525 	.word	0x08004525
 8004454:	08004525 	.word	0x08004525
 8004458:	08004525 	.word	0x08004525
 800445c:	08004525 	.word	0x08004525
 8004460:	0800452d 	.word	0x0800452d
 8004464:	0800452d 	.word	0x0800452d
 8004468:	0800452d 	.word	0x0800452d
 800446c:	0800452d 	.word	0x0800452d
 8004470:	08004535 	.word	0x08004535
 8004474:	08004535 	.word	0x08004535
 8004478:	08004535 	.word	0x08004535
 800447c:	08004535 	.word	0x08004535
 8004480:	0800453d 	.word	0x0800453d
 8004484:	0800453d 	.word	0x0800453d
 8004488:	0800453d 	.word	0x0800453d
 800448c:	0800453d 	.word	0x0800453d
 8004490:	08004547 	.word	0x08004547
 8004494:	08004547 	.word	0x08004547
 8004498:	08004547 	.word	0x08004547
 800449c:	08004547 	.word	0x08004547
 80044a0:	08004551 	.word	0x08004551
 80044a4:	08004551 	.word	0x08004551
 80044a8:	08004551 	.word	0x08004551
 80044ac:	08004593 	.word	0x08004593
 80044b0:	08004551 	.word	0x08004551
 80044b4:	0800455b 	.word	0x0800455b
 80044b8:	0800455b 	.word	0x0800455b
 80044bc:	0800455b 	.word	0x0800455b
 80044c0:	0800455b 	.word	0x0800455b
 80044c4:	08004565 	.word	0x08004565
 80044c8:	08004565 	.word	0x08004565
 80044cc:	08004565 	.word	0x08004565
 80044d0:	08004565 	.word	0x08004565
 80044d4:	0800456f 	.word	0x0800456f
 80044d8:	0800456f 	.word	0x0800456f
 80044dc:	0800456f 	.word	0x0800456f
 80044e0:	0800456f 	.word	0x0800456f
 80044e4:	08004579 	.word	0x08004579
 80044e8:	08004579 	.word	0x08004579
 80044ec:	08004579 	.word	0x08004579
 80044f0:	08004579 	.word	0x08004579
 80044f4:	08004583 	.word	0x08004583
 80044f8:	08004583 	.word	0x08004583
 80044fc:	08004583 	.word	0x08004583
 8004500:	08004583 	.word	0x08004583
 8004504:	0800458b 	.word	0x0800458b
 8004508:	0800458b 	.word	0x0800458b
 800450c:	0800458b 	.word	0x0800458b
 8004510:	0800458b 	.word	0x0800458b
	{
		case 0:
		case 1:
		case 2:
		case 3:
			FreqO_ApplyPreset(FPRESET_1HZ);
 8004514:	2001      	movs	r0, #1
 8004516:	f000 f845 	bl	80045a4 <FreqO_ApplyPreset>
			break;
 800451a:	e03a      	b.n	8004592 <FreqO_ModifyOutput+0x17a>
		case 4:
		case 5:
		case 6:
		case 7:
			FreqO_ApplyPreset(FPRESET_10HZ);
 800451c:	200a      	movs	r0, #10
 800451e:	f000 f841 	bl	80045a4 <FreqO_ApplyPreset>
			break;
 8004522:	e036      	b.n	8004592 <FreqO_ModifyOutput+0x17a>
		case 8:
		case 9:
		case 10:
		case 11:
			FreqO_ApplyPreset(FPRESET_50HZ);
 8004524:	2032      	movs	r0, #50	; 0x32
 8004526:	f000 f83d 	bl	80045a4 <FreqO_ApplyPreset>
			break;
 800452a:	e032      	b.n	8004592 <FreqO_ModifyOutput+0x17a>
		case 12:
		case 13:
		case 14:
		case 15:
			FreqO_ApplyPreset(FPRESET_100HZ);
 800452c:	2064      	movs	r0, #100	; 0x64
 800452e:	f000 f839 	bl	80045a4 <FreqO_ApplyPreset>
			break;
 8004532:	e02e      	b.n	8004592 <FreqO_ModifyOutput+0x17a>
		case 16:
		case 17:
		case 18:
		case 19:
			FreqO_ApplyPreset(FPRESET_250HZ);
 8004534:	20fa      	movs	r0, #250	; 0xfa
 8004536:	f000 f835 	bl	80045a4 <FreqO_ApplyPreset>
			break;
 800453a:	e02a      	b.n	8004592 <FreqO_ModifyOutput+0x17a>
		case 20:
		case 21:
		case 22:
		case 23:
			FreqO_ApplyPreset(FPRESET_500HZ);
 800453c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004540:	f000 f830 	bl	80045a4 <FreqO_ApplyPreset>
			break;
 8004544:	e025      	b.n	8004592 <FreqO_ModifyOutput+0x17a>
		case 24:
		case 25:
		case 26:
		case 27:
			FreqO_ApplyPreset(FPRESET_750HZ);
 8004546:	f240 20ee 	movw	r0, #750	; 0x2ee
 800454a:	f000 f82b 	bl	80045a4 <FreqO_ApplyPreset>
			break;
 800454e:	e020      	b.n	8004592 <FreqO_ModifyOutput+0x17a>
		case 28:
		case 29:
		case 30:
		case 32:
			FreqO_ApplyPreset(FPRESET_1KHZ);
 8004550:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004554:	f000 f826 	bl	80045a4 <FreqO_ApplyPreset>
			break;
 8004558:	e01b      	b.n	8004592 <FreqO_ModifyOutput+0x17a>
		case 33:
		case 34:
		case 35:
		case 36:
			FreqO_ApplyPreset(FPRESET_5KHZ);
 800455a:	f241 3088 	movw	r0, #5000	; 0x1388
 800455e:	f000 f821 	bl	80045a4 <FreqO_ApplyPreset>
			break;
 8004562:	e016      	b.n	8004592 <FreqO_ModifyOutput+0x17a>
		case 37:
		case 38:
		case 39:
		case 40:
			FreqO_ApplyPreset(FPRESET_10KHZ);
 8004564:	f242 7010 	movw	r0, #10000	; 0x2710
 8004568:	f000 f81c 	bl	80045a4 <FreqO_ApplyPreset>
			break;
 800456c:	e011      	b.n	8004592 <FreqO_ModifyOutput+0x17a>
		case 41:
		case 42:
		case 43:
		case 44:
			FreqO_ApplyPreset(FPRESET_25KHZ);
 800456e:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8004572:	f000 f817 	bl	80045a4 <FreqO_ApplyPreset>
			break;
 8004576:	e00c      	b.n	8004592 <FreqO_ModifyOutput+0x17a>
		case 45:
		case 46:
		case 47:
		case 48:
			FreqO_ApplyPreset(FPRESET_50KHZ);
 8004578:	f24c 3050 	movw	r0, #50000	; 0xc350
 800457c:	f000 f812 	bl	80045a4 <FreqO_ApplyPreset>
			break;
 8004580:	e007      	b.n	8004592 <FreqO_ModifyOutput+0x17a>
		case 49:
		case 50:
		case 51:
		case 52:
			FreqO_ApplyPreset(FPRESET_75KHZ);
 8004582:	4806      	ldr	r0, [pc, #24]	; (800459c <FreqO_ModifyOutput+0x184>)
 8004584:	f000 f80e 	bl	80045a4 <FreqO_ApplyPreset>
			break;
 8004588:	e003      	b.n	8004592 <FreqO_ModifyOutput+0x17a>
		case 53:
		case 54:
		case 55:
		case 56:
			FreqO_ApplyPreset(FPRESET_100KHZ);
 800458a:	4805      	ldr	r0, [pc, #20]	; (80045a0 <FreqO_ModifyOutput+0x188>)
 800458c:	f000 f80a 	bl	80045a4 <FreqO_ApplyPreset>
			break;
 8004590:	bf00      	nop
	}

}
 8004592:	bf00      	nop
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	000124f8 	.word	0x000124f8
 80045a0:	000186a0 	.word	0x000186a0

080045a4 <FreqO_ApplyPreset>:

 *	@retval None
 *
 */
void FreqO_ApplyPreset(eFreqSettings_t pPresetEnum)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
	DacTimeReg_t* tmp = DT_GetRegisterByEnum(pPresetEnum);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f7ff fefb 	bl	80043a8 <DT_GetRegisterByEnum>
 80045b2:	60f8      	str	r0, [r7, #12]
	if(tmp)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d015      	beq.n	80045e6 <FreqO_ApplyPreset+0x42>
	{
		TIM8->PSC = tmp->psc;
 80045ba:	4a0d      	ldr	r2, [pc, #52]	; (80045f0 <FreqO_ApplyPreset+0x4c>)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	6293      	str	r3, [r2, #40]	; 0x28
		TIM8->ARR = tmp->arr;
 80045c2:	4a0b      	ldr	r2, [pc, #44]	; (80045f0 <FreqO_ApplyPreset+0x4c>)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	62d3      	str	r3, [r2, #44]	; 0x2c
		//eNewFreqPreset = pPresetEnum;
		FreqProfile_t * tmp = FreqO_FindFPresetObject(pPresetEnum);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f822 	bl	8004614 <FreqO_FindFPresetObject>
 80045d0:	60b8      	str	r0, [r7, #8]
		if(tmp)
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d003      	beq.n	80045e0 <FreqO_ApplyPreset+0x3c>
		{
			freq_profile = tmp;
 80045d8:	4a06      	ldr	r2, [pc, #24]	; (80045f4 <FreqO_ApplyPreset+0x50>)
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	6013      	str	r3, [r2, #0]
		{
			DM_SetErrorDebugMsg("FreqO_ApplyPreset() null pointer error");
		}

	}
}
 80045de:	e002      	b.n	80045e6 <FreqO_ApplyPreset+0x42>
			DM_SetErrorDebugMsg("FreqO_ApplyPreset() null pointer error");
 80045e0:	4805      	ldr	r0, [pc, #20]	; (80045f8 <FreqO_ApplyPreset+0x54>)
 80045e2:	f7fc fdbb 	bl	800115c <DM_SetErrorDebugMsg>
}
 80045e6:	bf00      	nop
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	40013400 	.word	0x40013400
 80045f4:	200001a4 	.word	0x200001a4
 80045f8:	080114e4 	.word	0x080114e4

080045fc <FreqO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_GetFPresetObject()
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
	return freq_profile;
 8004600:	4b03      	ldr	r3, [pc, #12]	; (8004610 <FreqO_GetFPresetObject+0x14>)
 8004602:	681b      	ldr	r3, [r3, #0]
}
 8004604:	4618      	mov	r0, r3
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	200001a4 	.word	0x200001a4

08004614 <FreqO_FindFPresetObject>:

 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_FindFPresetObject(eFreqSettings_t pEnum)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 800461c:	2300      	movs	r3, #0
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	e00e      	b.n	8004640 <FreqO_FindFPresetObject+0x2c>
	{
		if(theFreqProfiles[i].hertz == pEnum)
 8004622:	4a0d      	ldr	r2, [pc, #52]	; (8004658 <FreqO_FindFPresetObject+0x44>)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	429a      	cmp	r2, r3
 800462e:	d104      	bne.n	800463a <FreqO_FindFPresetObject+0x26>
		{
			return &theFreqProfiles[i];
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	4a08      	ldr	r2, [pc, #32]	; (8004658 <FreqO_FindFPresetObject+0x44>)
 8004636:	4413      	add	r3, r2
 8004638:	e009      	b.n	800464e <FreqO_FindFPresetObject+0x3a>
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	3301      	adds	r3, #1
 800463e:	60fb      	str	r3, [r7, #12]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2b0d      	cmp	r3, #13
 8004644:	dded      	ble.n	8004622 <FreqO_FindFPresetObject+0xe>
		}
	}
	// error!
	DM_SetErrorDebugMsg("FreqO_FindFPresetObject(): no FPreset obj found");
 8004646:	4805      	ldr	r0, [pc, #20]	; (800465c <FreqO_FindFPresetObject+0x48>)
 8004648:	f7fc fd88 	bl	800115c <DM_SetErrorDebugMsg>
	return 0;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	20000134 	.word	0x20000134
 800465c:	0801150c 	.word	0x0801150c

08004660 <FreqO_GetFreqPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FreqO_GetFreqPresetEncoderRange()
{
 8004660:	b480      	push	{r7}
 8004662:	af00      	add	r7, sp, #0
	return FreqPresetEncoderRange;
 8004664:	4b03      	ldr	r3, [pc, #12]	; (8004674 <FreqO_GetFreqPresetEncoderRange+0x14>)
 8004666:	781b      	ldrb	r3, [r3, #0]
}
 8004668:	4618      	mov	r0, r3
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	20000130 	.word	0x20000130

08004678 <FuncO_Init>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_Init()
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
		aProcessedSignalDataTable[i] = sine_data_table_3600[i];

	for(int i = 0; i < SINE_DATA_SIZE; i++)
		aProcessedSyncDataTable[i] = sine_data_table_3600[i];
		*/
}
 800467c:	bf00      	nop
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
	...

08004688 <FuncO_ModifySignalOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_ModifySignalOutput(uint16_t pEncoderValue)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	4603      	mov	r3, r0
 8004690:	80fb      	strh	r3, [r7, #6]


	switch(pEncoderValue)
 8004692:	88fb      	ldrh	r3, [r7, #6]
 8004694:	2b17      	cmp	r3, #23
 8004696:	d84b      	bhi.n	8004730 <FuncO_ModifySignalOutput+0xa8>
 8004698:	a201      	add	r2, pc, #4	; (adr r2, 80046a0 <FuncO_ModifySignalOutput+0x18>)
 800469a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800469e:	bf00      	nop
 80046a0:	08004701 	.word	0x08004701
 80046a4:	08004701 	.word	0x08004701
 80046a8:	08004701 	.word	0x08004701
 80046ac:	08004709 	.word	0x08004709
 80046b0:	08004709 	.word	0x08004709
 80046b4:	08004709 	.word	0x08004709
 80046b8:	08004709 	.word	0x08004709
 80046bc:	08004711 	.word	0x08004711
 80046c0:	08004711 	.word	0x08004711
 80046c4:	08004711 	.word	0x08004711
 80046c8:	08004711 	.word	0x08004711
 80046cc:	08004719 	.word	0x08004719
 80046d0:	08004719 	.word	0x08004719
 80046d4:	08004719 	.word	0x08004719
 80046d8:	08004719 	.word	0x08004719
 80046dc:	08004721 	.word	0x08004721
 80046e0:	08004721 	.word	0x08004721
 80046e4:	08004721 	.word	0x08004721
 80046e8:	08004721 	.word	0x08004721
 80046ec:	08004729 	.word	0x08004729
 80046f0:	08004729 	.word	0x08004729
 80046f4:	08004729 	.word	0x08004729
 80046f8:	08004729 	.word	0x08004729
 80046fc:	08004729 	.word	0x08004729
	{
		case 0: case 1: case 2:
			FuncO_ApplyPresetToSignal(SINE_FUNC_MODE);
 8004700:	2000      	movs	r0, #0
 8004702:	f000 f871 	bl	80047e8 <FuncO_ApplyPresetToSignal>
			break;
 8004706:	e013      	b.n	8004730 <FuncO_ModifySignalOutput+0xa8>

		case 3: case 4: case 5: case 6:
			FuncO_ApplyPresetToSignal(SQUARE_FUNC_MODE);
 8004708:	2001      	movs	r0, #1
 800470a:	f000 f86d 	bl	80047e8 <FuncO_ApplyPresetToSignal>
			break;
 800470e:	e00f      	b.n	8004730 <FuncO_ModifySignalOutput+0xa8>

		case 7: case 8: case 9: case 10:
			FuncO_ApplyPresetToSignal(SAW_FUNC_MODE);
 8004710:	2002      	movs	r0, #2
 8004712:	f000 f869 	bl	80047e8 <FuncO_ApplyPresetToSignal>
			break;
 8004716:	e00b      	b.n	8004730 <FuncO_ModifySignalOutput+0xa8>

		case 11: case 12: case 13: case 14:
			FuncO_ApplyPresetToSignal(REV_SAW_FUNC_MODE);
 8004718:	2003      	movs	r0, #3
 800471a:	f000 f865 	bl	80047e8 <FuncO_ApplyPresetToSignal>
			break;
 800471e:	e007      	b.n	8004730 <FuncO_ModifySignalOutput+0xa8>

		case 15: case 16: case 17: case 18:
			FuncO_ApplyPresetToSignal(TRIANGLE_FUNC_MODE);
 8004720:	2004      	movs	r0, #4
 8004722:	f000 f861 	bl	80047e8 <FuncO_ApplyPresetToSignal>
			break;
 8004726:	e003      	b.n	8004730 <FuncO_ModifySignalOutput+0xa8>

		case 19: case 20: case 21: case 22: case 23:
			FuncO_ApplyPresetToSignal(IMPULSE_FUNC_MODE);
 8004728:	2005      	movs	r0, #5
 800472a:	f000 f85d 	bl	80047e8 <FuncO_ApplyPresetToSignal>
			break;
 800472e:	bf00      	nop

	}
}
 8004730:	bf00      	nop
 8004732:	3708      	adds	r7, #8
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <FuncO_ModifySyncOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_ModifySyncOutput(uint16_t pEncoderValue)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	4603      	mov	r3, r0
 8004740:	80fb      	strh	r3, [r7, #6]


	switch(pEncoderValue)
 8004742:	88fb      	ldrh	r3, [r7, #6]
 8004744:	2b17      	cmp	r3, #23
 8004746:	d84b      	bhi.n	80047e0 <FuncO_ModifySyncOutput+0xa8>
 8004748:	a201      	add	r2, pc, #4	; (adr r2, 8004750 <FuncO_ModifySyncOutput+0x18>)
 800474a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800474e:	bf00      	nop
 8004750:	080047b1 	.word	0x080047b1
 8004754:	080047b1 	.word	0x080047b1
 8004758:	080047b1 	.word	0x080047b1
 800475c:	080047b9 	.word	0x080047b9
 8004760:	080047b9 	.word	0x080047b9
 8004764:	080047b9 	.word	0x080047b9
 8004768:	080047b9 	.word	0x080047b9
 800476c:	080047c1 	.word	0x080047c1
 8004770:	080047c1 	.word	0x080047c1
 8004774:	080047c1 	.word	0x080047c1
 8004778:	080047c1 	.word	0x080047c1
 800477c:	080047c9 	.word	0x080047c9
 8004780:	080047c9 	.word	0x080047c9
 8004784:	080047c9 	.word	0x080047c9
 8004788:	080047c9 	.word	0x080047c9
 800478c:	080047d1 	.word	0x080047d1
 8004790:	080047d1 	.word	0x080047d1
 8004794:	080047d1 	.word	0x080047d1
 8004798:	080047d1 	.word	0x080047d1
 800479c:	080047d9 	.word	0x080047d9
 80047a0:	080047d9 	.word	0x080047d9
 80047a4:	080047d9 	.word	0x080047d9
 80047a8:	080047d9 	.word	0x080047d9
 80047ac:	080047d9 	.word	0x080047d9
	{
		case 0: case 1: case 2:
			FuncO_ApplyPresetToSync(SINE_FUNC_MODE);
 80047b0:	2000      	movs	r0, #0
 80047b2:	f000 f873 	bl	800489c <FuncO_ApplyPresetToSync>
			break;
 80047b6:	e013      	b.n	80047e0 <FuncO_ModifySyncOutput+0xa8>

		case 3: case 4: case 5: case 6:
			FuncO_ApplyPresetToSync(SQUARE_FUNC_MODE);
 80047b8:	2001      	movs	r0, #1
 80047ba:	f000 f86f 	bl	800489c <FuncO_ApplyPresetToSync>
			break;
 80047be:	e00f      	b.n	80047e0 <FuncO_ModifySyncOutput+0xa8>

		case 7: case 8: case 9: case 10:
			FuncO_ApplyPresetToSync(SAW_FUNC_MODE);
 80047c0:	2002      	movs	r0, #2
 80047c2:	f000 f86b 	bl	800489c <FuncO_ApplyPresetToSync>
			break;
 80047c6:	e00b      	b.n	80047e0 <FuncO_ModifySyncOutput+0xa8>

		case 11: case 12: case 13: case 14:
			FuncO_ApplyPresetToSync(REV_SAW_FUNC_MODE);
 80047c8:	2003      	movs	r0, #3
 80047ca:	f000 f867 	bl	800489c <FuncO_ApplyPresetToSync>
			break;
 80047ce:	e007      	b.n	80047e0 <FuncO_ModifySyncOutput+0xa8>

		case 15: case 16: case 17: case 18:
			FuncO_ApplyPresetToSync(TRIANGLE_FUNC_MODE);
 80047d0:	2004      	movs	r0, #4
 80047d2:	f000 f863 	bl	800489c <FuncO_ApplyPresetToSync>
			break;
 80047d6:	e003      	b.n	80047e0 <FuncO_ModifySyncOutput+0xa8>

		case 19: case 20: case 21: case 22: case 23:
			FuncO_ApplyPresetToSync(IMPULSE_FUNC_MODE);
 80047d8:	2005      	movs	r0, #5
 80047da:	f000 f85f 	bl	800489c <FuncO_ApplyPresetToSync>
			break;
 80047de:	bf00      	nop

	}
}
 80047e0:	bf00      	nop
 80047e2:	3708      	adds	r7, #8
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <FuncO_ApplyPresetToSignal>:

 *	@retval None
 *
 */
void FuncO_ApplyPresetToSignal(eOutput_mode pPresetEnum)
{
 80047e8:	b590      	push	{r4, r7, lr}
 80047ea:	b087      	sub	sp, #28
 80047ec:	af02      	add	r7, sp, #8
 80047ee:	4603      	mov	r3, r0
 80047f0:	71fb      	strb	r3, [r7, #7]

	// copy the lookup table for the next output function in to SignalChannel object
	SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 80047f2:	79fc      	ldrb	r4, [r7, #7]
 80047f4:	2000      	movs	r0, #0
 80047f6:	f000 fa7b 	bl	8004cf0 <SM_GetOutputChannel>
 80047fa:	4601      	mov	r1, r0
 80047fc:	4a23      	ldr	r2, [pc, #140]	; (800488c <FuncO_ApplyPresetToSignal+0xa4>)
 80047fe:	00e3      	lsls	r3, r4, #3
 8004800:	4413      	add	r3, r2
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	604b      	str	r3, [r1, #4]

	// set preset for PGA gain and dsp amplitude adjustment
	eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 8004806:	2000      	movs	r0, #0
 8004808:	f000 fa72 	bl	8004cf0 <SM_GetOutputChannel>
 800480c:	4603      	mov	r3, r0
 800480e:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	73fb      	strb	r3, [r7, #15]
	VPP_ApplyPresetToSignal(eTmpVppPreset);
 8004816:	7bfb      	ldrb	r3, [r7, #15]
 8004818:	4618      	mov	r0, r3
 800481a:	f000 fadf 	bl	8004ddc <VPP_ApplyPresetToSignal>

	// set the next function output
	SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 800481e:	79fc      	ldrb	r4, [r7, #7]
 8004820:	2000      	movs	r0, #0
 8004822:	f000 fa65 	bl	8004cf0 <SM_GetOutputChannel>
 8004826:	4601      	mov	r1, r0
 8004828:	00e3      	lsls	r3, r4, #3
 800482a:	4a18      	ldr	r2, [pc, #96]	; (800488c <FuncO_ApplyPresetToSignal+0xa4>)
 800482c:	4413      	add	r3, r2
 800482e:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8

	// pause timer to resync both outputs
	HAL_TIM_Base_Stop(&htim8);
 8004832:	4817      	ldr	r0, [pc, #92]	; (8004890 <FuncO_ApplyPresetToSignal+0xa8>)
 8004834:	f007 f8e6 	bl	800ba04 <HAL_TIM_Base_Stop>

	// restart the DAC with the new data
	HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8004838:	2100      	movs	r1, #0
 800483a:	4816      	ldr	r0, [pc, #88]	; (8004894 <FuncO_ApplyPresetToSignal+0xac>)
 800483c:	f005 f884 	bl	8009948 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8004840:	2000      	movs	r0, #0
 8004842:	f000 fa55 	bl	8004cf0 <SM_GetOutputChannel>
 8004846:	4603      	mov	r3, r0
 8004848:	f103 0208 	add.w	r2, r3, #8
 800484c:	2300      	movs	r3, #0
 800484e:	9300      	str	r3, [sp, #0]
 8004850:	2378      	movs	r3, #120	; 0x78
 8004852:	2100      	movs	r1, #0
 8004854:	480f      	ldr	r0, [pc, #60]	; (8004894 <FuncO_ApplyPresetToSignal+0xac>)
 8004856:	f004 ffb5 	bl	80097c4 <HAL_DAC_Start_DMA>

	// restart the the other DAC
	HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 800485a:	2100      	movs	r1, #0
 800485c:	480e      	ldr	r0, [pc, #56]	; (8004898 <FuncO_ApplyPresetToSignal+0xb0>)
 800485e:	f005 f873 	bl	8009948 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8004862:	2001      	movs	r0, #1
 8004864:	f000 fa44 	bl	8004cf0 <SM_GetOutputChannel>
 8004868:	4603      	mov	r3, r0
 800486a:	f103 0208 	add.w	r2, r3, #8
 800486e:	2300      	movs	r3, #0
 8004870:	9300      	str	r3, [sp, #0]
 8004872:	2378      	movs	r3, #120	; 0x78
 8004874:	2100      	movs	r1, #0
 8004876:	4808      	ldr	r0, [pc, #32]	; (8004898 <FuncO_ApplyPresetToSignal+0xb0>)
 8004878:	f004 ffa4 	bl	80097c4 <HAL_DAC_Start_DMA>

	// resume timer to resync both outputs
	HAL_TIM_Base_Start(&htim8);
 800487c:	4804      	ldr	r0, [pc, #16]	; (8004890 <FuncO_ApplyPresetToSignal+0xa8>)
 800487e:	f007 f893 	bl	800b9a8 <HAL_TIM_Base_Start>
}
 8004882:	bf00      	nop
 8004884:	3714      	adds	r7, #20
 8004886:	46bd      	mov	sp, r7
 8004888:	bd90      	pop	{r4, r7, pc}
 800488a:	bf00      	nop
 800488c:	200001ac 	.word	0x200001ac
 8004890:	2000274c 	.word	0x2000274c
 8004894:	20002614 	.word	0x20002614
 8004898:	20002600 	.word	0x20002600

0800489c <FuncO_ApplyPresetToSync>:

 *	@retval None
 *
 */
void FuncO_ApplyPresetToSync(eOutput_mode pPresetEnum)
{
 800489c:	b590      	push	{r4, r7, lr}
 800489e:	b087      	sub	sp, #28
 80048a0:	af02      	add	r7, sp, #8
 80048a2:	4603      	mov	r3, r0
 80048a4:	71fb      	strb	r3, [r7, #7]
	// copy the lookup table for the next output function in to SyncChannel object
	SM_GetOutputChannel(SYNC_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 80048a6:	79fc      	ldrb	r4, [r7, #7]
 80048a8:	2001      	movs	r0, #1
 80048aa:	f000 fa21 	bl	8004cf0 <SM_GetOutputChannel>
 80048ae:	4601      	mov	r1, r0
 80048b0:	4a23      	ldr	r2, [pc, #140]	; (8004940 <FuncO_ApplyPresetToSync+0xa4>)
 80048b2:	00e3      	lsls	r3, r4, #3
 80048b4:	4413      	add	r3, r2
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	604b      	str	r3, [r1, #4]

	// set preset PGA gain and dsp amplitude adjustment
	eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile->amp_setting;
 80048ba:	2001      	movs	r0, #1
 80048bc:	f000 fa18 	bl	8004cf0 <SM_GetOutputChannel>
 80048c0:	4603      	mov	r3, r0
 80048c2:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	73fb      	strb	r3, [r7, #15]
	VPP_ApplyPresetToSync(eTmpVppPreset);
 80048ca:	7bfb      	ldrb	r3, [r7, #15]
 80048cc:	4618      	mov	r0, r3
 80048ce:	f000 fab3 	bl	8004e38 <VPP_ApplyPresetToSync>

	// set the next output function
	SM_GetOutputChannel(SYNC_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 80048d2:	79fc      	ldrb	r4, [r7, #7]
 80048d4:	2001      	movs	r0, #1
 80048d6:	f000 fa0b 	bl	8004cf0 <SM_GetOutputChannel>
 80048da:	4601      	mov	r1, r0
 80048dc:	00e3      	lsls	r3, r4, #3
 80048de:	4a18      	ldr	r2, [pc, #96]	; (8004940 <FuncO_ApplyPresetToSync+0xa4>)
 80048e0:	4413      	add	r3, r2
 80048e2:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8

	// pause timer to resync both outputs
	HAL_TIM_Base_Stop(&htim8);
 80048e6:	4817      	ldr	r0, [pc, #92]	; (8004944 <FuncO_ApplyPresetToSync+0xa8>)
 80048e8:	f007 f88c 	bl	800ba04 <HAL_TIM_Base_Stop>

	// restart the DAC with the new data
	HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 80048ec:	2100      	movs	r1, #0
 80048ee:	4816      	ldr	r0, [pc, #88]	; (8004948 <FuncO_ApplyPresetToSync+0xac>)
 80048f0:	f005 f82a 	bl	8009948 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80048f4:	2001      	movs	r0, #1
 80048f6:	f000 f9fb 	bl	8004cf0 <SM_GetOutputChannel>
 80048fa:	4603      	mov	r3, r0
 80048fc:	f103 0208 	add.w	r2, r3, #8
 8004900:	2300      	movs	r3, #0
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	2378      	movs	r3, #120	; 0x78
 8004906:	2100      	movs	r1, #0
 8004908:	480f      	ldr	r0, [pc, #60]	; (8004948 <FuncO_ApplyPresetToSync+0xac>)
 800490a:	f004 ff5b 	bl	80097c4 <HAL_DAC_Start_DMA>

	// restart the the other DAC
	HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800490e:	2100      	movs	r1, #0
 8004910:	480e      	ldr	r0, [pc, #56]	; (800494c <FuncO_ApplyPresetToSync+0xb0>)
 8004912:	f005 f819 	bl	8009948 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8004916:	2000      	movs	r0, #0
 8004918:	f000 f9ea 	bl	8004cf0 <SM_GetOutputChannel>
 800491c:	4603      	mov	r3, r0
 800491e:	f103 0208 	add.w	r2, r3, #8
 8004922:	2300      	movs	r3, #0
 8004924:	9300      	str	r3, [sp, #0]
 8004926:	2378      	movs	r3, #120	; 0x78
 8004928:	2100      	movs	r1, #0
 800492a:	4808      	ldr	r0, [pc, #32]	; (800494c <FuncO_ApplyPresetToSync+0xb0>)
 800492c:	f004 ff4a 	bl	80097c4 <HAL_DAC_Start_DMA>

	// resume timer to resync both outputs
	HAL_TIM_Base_Start(&htim8);
 8004930:	4804      	ldr	r0, [pc, #16]	; (8004944 <FuncO_ApplyPresetToSync+0xa8>)
 8004932:	f007 f839 	bl	800b9a8 <HAL_TIM_Base_Start>
}
 8004936:	bf00      	nop
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	bd90      	pop	{r4, r7, pc}
 800493e:	bf00      	nop
 8004940:	200001ac 	.word	0x200001ac
 8004944:	2000274c 	.word	0x2000274c
 8004948:	20002600 	.word	0x20002600
 800494c:	20002614 	.word	0x20002614

08004950 <FuncO_GetFuncPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FuncO_GetFuncPresetEncoderRange()
{
 8004950:	b480      	push	{r7}
 8004952:	af00      	add	r7, sp, #0
	return FuncPresetEncoderRange;
 8004954:	4b03      	ldr	r3, [pc, #12]	; (8004964 <FuncO_GetFuncPresetEncoderRange+0x14>)
 8004956:	781b      	ldrb	r3, [r3, #0]
}
 8004958:	4618      	mov	r0, r3
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	200001a8 	.word	0x200001a8

08004968 <GO_ApplyPresetToSignal>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSignal(eGainSettings_t pPresetEnum)
{
 8004968:	b590      	push	{r4, r7, lr}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	4603      	mov	r3, r0
 8004970:	71fb      	strb	r3, [r7, #7]
	SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 8004972:	79fc      	ldrb	r4, [r7, #7]
 8004974:	2000      	movs	r0, #0
 8004976:	f000 f9bb 	bl	8004cf0 <SM_GetOutputChannel>
 800497a:	4601      	mov	r1, r0
 800497c:	4623      	mov	r3, r4
 800497e:	005b      	lsls	r3, r3, #1
 8004980:	4423      	add	r3, r4
 8004982:	4a4f      	ldr	r2, [pc, #316]	; (8004ac0 <GO_ApplyPresetToSignal+0x158>)
 8004984:	4413      	add	r3, r2
 8004986:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 800498a:	79fb      	ldrb	r3, [r7, #7]
 800498c:	2b07      	cmp	r3, #7
 800498e:	f200 8093 	bhi.w	8004ab8 <GO_ApplyPresetToSignal+0x150>
 8004992:	a201      	add	r2, pc, #4	; (adr r2, 8004998 <GO_ApplyPresetToSignal+0x30>)
 8004994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004998:	080049b9 	.word	0x080049b9
 800499c:	080049d9 	.word	0x080049d9
 80049a0:	080049f9 	.word	0x080049f9
 80049a4:	08004a19 	.word	0x08004a19
 80049a8:	08004a39 	.word	0x08004a39
 80049ac:	08004a59 	.word	0x08004a59
 80049b0:	08004a79 	.word	0x08004a79
 80049b4:	08004a99 	.word	0x08004a99
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80049b8:	2200      	movs	r2, #0
 80049ba:	2101      	movs	r1, #1
 80049bc:	4841      	ldr	r0, [pc, #260]	; (8004ac4 <GO_ApplyPresetToSignal+0x15c>)
 80049be:	f005 fef9 	bl	800a7b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80049c2:	2200      	movs	r2, #0
 80049c4:	2120      	movs	r1, #32
 80049c6:	4840      	ldr	r0, [pc, #256]	; (8004ac8 <GO_ApplyPresetToSignal+0x160>)
 80049c8:	f005 fef4 	bl	800a7b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80049cc:	2200      	movs	r2, #0
 80049ce:	2110      	movs	r1, #16
 80049d0:	483d      	ldr	r0, [pc, #244]	; (8004ac8 <GO_ApplyPresetToSignal+0x160>)
 80049d2:	f005 feef 	bl	800a7b4 <HAL_GPIO_WritePin>
			break;
 80049d6:	e06f      	b.n	8004ab8 <GO_ApplyPresetToSignal+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80049d8:	2201      	movs	r2, #1
 80049da:	2101      	movs	r1, #1
 80049dc:	4839      	ldr	r0, [pc, #228]	; (8004ac4 <GO_ApplyPresetToSignal+0x15c>)
 80049de:	f005 fee9 	bl	800a7b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80049e2:	2200      	movs	r2, #0
 80049e4:	2120      	movs	r1, #32
 80049e6:	4838      	ldr	r0, [pc, #224]	; (8004ac8 <GO_ApplyPresetToSignal+0x160>)
 80049e8:	f005 fee4 	bl	800a7b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80049ec:	2200      	movs	r2, #0
 80049ee:	2110      	movs	r1, #16
 80049f0:	4835      	ldr	r0, [pc, #212]	; (8004ac8 <GO_ApplyPresetToSignal+0x160>)
 80049f2:	f005 fedf 	bl	800a7b4 <HAL_GPIO_WritePin>
			break;
 80049f6:	e05f      	b.n	8004ab8 <GO_ApplyPresetToSignal+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80049f8:	2200      	movs	r2, #0
 80049fa:	2101      	movs	r1, #1
 80049fc:	4831      	ldr	r0, [pc, #196]	; (8004ac4 <GO_ApplyPresetToSignal+0x15c>)
 80049fe:	f005 fed9 	bl	800a7b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8004a02:	2201      	movs	r2, #1
 8004a04:	2120      	movs	r1, #32
 8004a06:	4830      	ldr	r0, [pc, #192]	; (8004ac8 <GO_ApplyPresetToSignal+0x160>)
 8004a08:	f005 fed4 	bl	800a7b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	2110      	movs	r1, #16
 8004a10:	482d      	ldr	r0, [pc, #180]	; (8004ac8 <GO_ApplyPresetToSignal+0x160>)
 8004a12:	f005 fecf 	bl	800a7b4 <HAL_GPIO_WritePin>
			break;
 8004a16:	e04f      	b.n	8004ab8 <GO_ApplyPresetToSignal+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8004a18:	2201      	movs	r2, #1
 8004a1a:	2101      	movs	r1, #1
 8004a1c:	4829      	ldr	r0, [pc, #164]	; (8004ac4 <GO_ApplyPresetToSignal+0x15c>)
 8004a1e:	f005 fec9 	bl	800a7b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8004a22:	2201      	movs	r2, #1
 8004a24:	2120      	movs	r1, #32
 8004a26:	4828      	ldr	r0, [pc, #160]	; (8004ac8 <GO_ApplyPresetToSignal+0x160>)
 8004a28:	f005 fec4 	bl	800a7b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	2110      	movs	r1, #16
 8004a30:	4825      	ldr	r0, [pc, #148]	; (8004ac8 <GO_ApplyPresetToSignal+0x160>)
 8004a32:	f005 febf 	bl	800a7b4 <HAL_GPIO_WritePin>
			break;
 8004a36:	e03f      	b.n	8004ab8 <GO_ApplyPresetToSignal+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8004a38:	2200      	movs	r2, #0
 8004a3a:	2101      	movs	r1, #1
 8004a3c:	4821      	ldr	r0, [pc, #132]	; (8004ac4 <GO_ApplyPresetToSignal+0x15c>)
 8004a3e:	f005 feb9 	bl	800a7b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8004a42:	2200      	movs	r2, #0
 8004a44:	2120      	movs	r1, #32
 8004a46:	4820      	ldr	r0, [pc, #128]	; (8004ac8 <GO_ApplyPresetToSignal+0x160>)
 8004a48:	f005 feb4 	bl	800a7b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	2110      	movs	r1, #16
 8004a50:	481d      	ldr	r0, [pc, #116]	; (8004ac8 <GO_ApplyPresetToSignal+0x160>)
 8004a52:	f005 feaf 	bl	800a7b4 <HAL_GPIO_WritePin>
			break;
 8004a56:	e02f      	b.n	8004ab8 <GO_ApplyPresetToSignal+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8004a58:	2201      	movs	r2, #1
 8004a5a:	2101      	movs	r1, #1
 8004a5c:	4819      	ldr	r0, [pc, #100]	; (8004ac4 <GO_ApplyPresetToSignal+0x15c>)
 8004a5e:	f005 fea9 	bl	800a7b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8004a62:	2200      	movs	r2, #0
 8004a64:	2120      	movs	r1, #32
 8004a66:	4818      	ldr	r0, [pc, #96]	; (8004ac8 <GO_ApplyPresetToSignal+0x160>)
 8004a68:	f005 fea4 	bl	800a7b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	2110      	movs	r1, #16
 8004a70:	4815      	ldr	r0, [pc, #84]	; (8004ac8 <GO_ApplyPresetToSignal+0x160>)
 8004a72:	f005 fe9f 	bl	800a7b4 <HAL_GPIO_WritePin>
			break;
 8004a76:	e01f      	b.n	8004ab8 <GO_ApplyPresetToSignal+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8004a78:	2200      	movs	r2, #0
 8004a7a:	2101      	movs	r1, #1
 8004a7c:	4811      	ldr	r0, [pc, #68]	; (8004ac4 <GO_ApplyPresetToSignal+0x15c>)
 8004a7e:	f005 fe99 	bl	800a7b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8004a82:	2201      	movs	r2, #1
 8004a84:	2120      	movs	r1, #32
 8004a86:	4810      	ldr	r0, [pc, #64]	; (8004ac8 <GO_ApplyPresetToSignal+0x160>)
 8004a88:	f005 fe94 	bl	800a7b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	2110      	movs	r1, #16
 8004a90:	480d      	ldr	r0, [pc, #52]	; (8004ac8 <GO_ApplyPresetToSignal+0x160>)
 8004a92:	f005 fe8f 	bl	800a7b4 <HAL_GPIO_WritePin>
			break;
 8004a96:	e00f      	b.n	8004ab8 <GO_ApplyPresetToSignal+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8004a98:	2201      	movs	r2, #1
 8004a9a:	2101      	movs	r1, #1
 8004a9c:	4809      	ldr	r0, [pc, #36]	; (8004ac4 <GO_ApplyPresetToSignal+0x15c>)
 8004a9e:	f005 fe89 	bl	800a7b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	2120      	movs	r1, #32
 8004aa6:	4808      	ldr	r0, [pc, #32]	; (8004ac8 <GO_ApplyPresetToSignal+0x160>)
 8004aa8:	f005 fe84 	bl	800a7b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8004aac:	2201      	movs	r2, #1
 8004aae:	2110      	movs	r1, #16
 8004ab0:	4805      	ldr	r0, [pc, #20]	; (8004ac8 <GO_ApplyPresetToSignal+0x160>)
 8004ab2:	f005 fe7f 	bl	800a7b4 <HAL_GPIO_WritePin>
			break;
 8004ab6:	bf00      	nop
	}
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd90      	pop	{r4, r7, pc}
 8004ac0:	200001dc 	.word	0x200001dc
 8004ac4:	48000400 	.word	0x48000400
 8004ac8:	48000800 	.word	0x48000800

08004acc <GO_ApplyPresetToSync>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSync(eGainSettings_t pPresetEnum)
{
 8004acc:	b590      	push	{r4, r7, lr}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	71fb      	strb	r3, [r7, #7]
	SM_GetOutputChannel(SYNC_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 8004ad6:	79fc      	ldrb	r4, [r7, #7]
 8004ad8:	2001      	movs	r0, #1
 8004ada:	f000 f909 	bl	8004cf0 <SM_GetOutputChannel>
 8004ade:	4601      	mov	r1, r0
 8004ae0:	4623      	mov	r3, r4
 8004ae2:	005b      	lsls	r3, r3, #1
 8004ae4:	4423      	add	r3, r4
 8004ae6:	4a4f      	ldr	r2, [pc, #316]	; (8004c24 <GO_ApplyPresetToSync+0x158>)
 8004ae8:	4413      	add	r3, r2
 8004aea:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 8004aee:	79fb      	ldrb	r3, [r7, #7]
 8004af0:	2b07      	cmp	r3, #7
 8004af2:	f200 8093 	bhi.w	8004c1c <GO_ApplyPresetToSync+0x150>
 8004af6:	a201      	add	r2, pc, #4	; (adr r2, 8004afc <GO_ApplyPresetToSync+0x30>)
 8004af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afc:	08004b1d 	.word	0x08004b1d
 8004b00:	08004b3d 	.word	0x08004b3d
 8004b04:	08004b5d 	.word	0x08004b5d
 8004b08:	08004b7d 	.word	0x08004b7d
 8004b0c:	08004b9d 	.word	0x08004b9d
 8004b10:	08004bbd 	.word	0x08004bbd
 8004b14:	08004bdd 	.word	0x08004bdd
 8004b18:	08004bfd 	.word	0x08004bfd
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	2101      	movs	r1, #1
 8004b20:	4841      	ldr	r0, [pc, #260]	; (8004c28 <GO_ApplyPresetToSync+0x15c>)
 8004b22:	f005 fe47 	bl	800a7b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8004b26:	2200      	movs	r2, #0
 8004b28:	2120      	movs	r1, #32
 8004b2a:	4840      	ldr	r0, [pc, #256]	; (8004c2c <GO_ApplyPresetToSync+0x160>)
 8004b2c:	f005 fe42 	bl	800a7b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8004b30:	2200      	movs	r2, #0
 8004b32:	2110      	movs	r1, #16
 8004b34:	483d      	ldr	r0, [pc, #244]	; (8004c2c <GO_ApplyPresetToSync+0x160>)
 8004b36:	f005 fe3d 	bl	800a7b4 <HAL_GPIO_WritePin>
			break;
 8004b3a:	e06f      	b.n	8004c1c <GO_ApplyPresetToSync+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	2101      	movs	r1, #1
 8004b40:	4839      	ldr	r0, [pc, #228]	; (8004c28 <GO_ApplyPresetToSync+0x15c>)
 8004b42:	f005 fe37 	bl	800a7b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8004b46:	2200      	movs	r2, #0
 8004b48:	2120      	movs	r1, #32
 8004b4a:	4838      	ldr	r0, [pc, #224]	; (8004c2c <GO_ApplyPresetToSync+0x160>)
 8004b4c:	f005 fe32 	bl	800a7b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8004b50:	2200      	movs	r2, #0
 8004b52:	2110      	movs	r1, #16
 8004b54:	4835      	ldr	r0, [pc, #212]	; (8004c2c <GO_ApplyPresetToSync+0x160>)
 8004b56:	f005 fe2d 	bl	800a7b4 <HAL_GPIO_WritePin>
			break;
 8004b5a:	e05f      	b.n	8004c1c <GO_ApplyPresetToSync+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	2101      	movs	r1, #1
 8004b60:	4831      	ldr	r0, [pc, #196]	; (8004c28 <GO_ApplyPresetToSync+0x15c>)
 8004b62:	f005 fe27 	bl	800a7b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8004b66:	2201      	movs	r2, #1
 8004b68:	2120      	movs	r1, #32
 8004b6a:	4830      	ldr	r0, [pc, #192]	; (8004c2c <GO_ApplyPresetToSync+0x160>)
 8004b6c:	f005 fe22 	bl	800a7b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8004b70:	2200      	movs	r2, #0
 8004b72:	2110      	movs	r1, #16
 8004b74:	482d      	ldr	r0, [pc, #180]	; (8004c2c <GO_ApplyPresetToSync+0x160>)
 8004b76:	f005 fe1d 	bl	800a7b4 <HAL_GPIO_WritePin>
			break;
 8004b7a:	e04f      	b.n	8004c1c <GO_ApplyPresetToSync+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	2101      	movs	r1, #1
 8004b80:	4829      	ldr	r0, [pc, #164]	; (8004c28 <GO_ApplyPresetToSync+0x15c>)
 8004b82:	f005 fe17 	bl	800a7b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8004b86:	2201      	movs	r2, #1
 8004b88:	2120      	movs	r1, #32
 8004b8a:	4828      	ldr	r0, [pc, #160]	; (8004c2c <GO_ApplyPresetToSync+0x160>)
 8004b8c:	f005 fe12 	bl	800a7b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8004b90:	2200      	movs	r2, #0
 8004b92:	2110      	movs	r1, #16
 8004b94:	4825      	ldr	r0, [pc, #148]	; (8004c2c <GO_ApplyPresetToSync+0x160>)
 8004b96:	f005 fe0d 	bl	800a7b4 <HAL_GPIO_WritePin>
			break;
 8004b9a:	e03f      	b.n	8004c1c <GO_ApplyPresetToSync+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	2101      	movs	r1, #1
 8004ba0:	4821      	ldr	r0, [pc, #132]	; (8004c28 <GO_ApplyPresetToSync+0x15c>)
 8004ba2:	f005 fe07 	bl	800a7b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	2120      	movs	r1, #32
 8004baa:	4820      	ldr	r0, [pc, #128]	; (8004c2c <GO_ApplyPresetToSync+0x160>)
 8004bac:	f005 fe02 	bl	800a7b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	2110      	movs	r1, #16
 8004bb4:	481d      	ldr	r0, [pc, #116]	; (8004c2c <GO_ApplyPresetToSync+0x160>)
 8004bb6:	f005 fdfd 	bl	800a7b4 <HAL_GPIO_WritePin>
			break;
 8004bba:	e02f      	b.n	8004c1c <GO_ApplyPresetToSync+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	2101      	movs	r1, #1
 8004bc0:	4819      	ldr	r0, [pc, #100]	; (8004c28 <GO_ApplyPresetToSync+0x15c>)
 8004bc2:	f005 fdf7 	bl	800a7b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	2120      	movs	r1, #32
 8004bca:	4818      	ldr	r0, [pc, #96]	; (8004c2c <GO_ApplyPresetToSync+0x160>)
 8004bcc:	f005 fdf2 	bl	800a7b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	2110      	movs	r1, #16
 8004bd4:	4815      	ldr	r0, [pc, #84]	; (8004c2c <GO_ApplyPresetToSync+0x160>)
 8004bd6:	f005 fded 	bl	800a7b4 <HAL_GPIO_WritePin>
			break;
 8004bda:	e01f      	b.n	8004c1c <GO_ApplyPresetToSync+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8004bdc:	2200      	movs	r2, #0
 8004bde:	2101      	movs	r1, #1
 8004be0:	4811      	ldr	r0, [pc, #68]	; (8004c28 <GO_ApplyPresetToSync+0x15c>)
 8004be2:	f005 fde7 	bl	800a7b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8004be6:	2201      	movs	r2, #1
 8004be8:	2120      	movs	r1, #32
 8004bea:	4810      	ldr	r0, [pc, #64]	; (8004c2c <GO_ApplyPresetToSync+0x160>)
 8004bec:	f005 fde2 	bl	800a7b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	2110      	movs	r1, #16
 8004bf4:	480d      	ldr	r0, [pc, #52]	; (8004c2c <GO_ApplyPresetToSync+0x160>)
 8004bf6:	f005 fddd 	bl	800a7b4 <HAL_GPIO_WritePin>
			break;
 8004bfa:	e00f      	b.n	8004c1c <GO_ApplyPresetToSync+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	2101      	movs	r1, #1
 8004c00:	4809      	ldr	r0, [pc, #36]	; (8004c28 <GO_ApplyPresetToSync+0x15c>)
 8004c02:	f005 fdd7 	bl	800a7b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8004c06:	2201      	movs	r2, #1
 8004c08:	2120      	movs	r1, #32
 8004c0a:	4808      	ldr	r0, [pc, #32]	; (8004c2c <GO_ApplyPresetToSync+0x160>)
 8004c0c:	f005 fdd2 	bl	800a7b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8004c10:	2201      	movs	r2, #1
 8004c12:	2110      	movs	r1, #16
 8004c14:	4805      	ldr	r0, [pc, #20]	; (8004c2c <GO_ApplyPresetToSync+0x160>)
 8004c16:	f005 fdcd 	bl	800a7b4 <HAL_GPIO_WritePin>
			break;
 8004c1a:	bf00      	nop
	}
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd90      	pop	{r4, r7, pc}
 8004c24:	200001dc 	.word	0x200001dc
 8004c28:	48000400 	.word	0x48000400
 8004c2c:	48000800 	.word	0x48000800

08004c30 <SM_Init>:
sOutputChannel_t SignalChannel;
sOutputChannel_t SyncChannel;


void SM_Init()
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0

	// initialise the SIGNAL output channel
	SignalChannel.channel = SIGNAL_CHANNEL;
 8004c36:	4b28      	ldr	r3, [pc, #160]	; (8004cd8 <SM_Init+0xa8>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	701a      	strb	r2, [r3, #0]
	SignalChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 8004c3c:	4b27      	ldr	r3, [pc, #156]	; (8004cdc <SM_Init+0xac>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	4a25      	ldr	r2, [pc, #148]	; (8004cd8 <SM_Init+0xa8>)
 8004c42:	6053      	str	r3, [r2, #4]
	SignalChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 8004c44:	4b24      	ldr	r3, [pc, #144]	; (8004cd8 <SM_Init+0xa8>)
 8004c46:	4a25      	ldr	r2, [pc, #148]	; (8004cdc <SM_Init+0xac>)
 8004c48:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	607b      	str	r3, [r7, #4]
 8004c50:	e00b      	b.n	8004c6a <SM_Init+0x3a>
		SignalChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8004c52:	4a23      	ldr	r2, [pc, #140]	; (8004ce0 <SM_Init+0xb0>)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004c5a:	491f      	ldr	r1, [pc, #124]	; (8004cd8 <SM_Init+0xa8>)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	3302      	adds	r3, #2
 8004c60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	3301      	adds	r3, #1
 8004c68:	607b      	str	r3, [r7, #4]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2b77      	cmp	r3, #119	; 0x77
 8004c6e:	ddf0      	ble.n	8004c52 <SM_Init+0x22>

	SignalChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 8004c70:	4b19      	ldr	r3, [pc, #100]	; (8004cd8 <SM_Init+0xa8>)
 8004c72:	4a1c      	ldr	r2, [pc, #112]	; (8004ce4 <SM_Init+0xb4>)
 8004c74:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SignalChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 8004c78:	4b17      	ldr	r3, [pc, #92]	; (8004cd8 <SM_Init+0xa8>)
 8004c7a:	4a1b      	ldr	r2, [pc, #108]	; (8004ce8 <SM_Init+0xb8>)
 8004c7c:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0

	// initialise the SYNC output channel
	SyncChannel.channel = SYNC_CHANNEL;
 8004c80:	4b1a      	ldr	r3, [pc, #104]	; (8004cec <SM_Init+0xbc>)
 8004c82:	2201      	movs	r2, #1
 8004c84:	701a      	strb	r2, [r3, #0]
	SyncChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 8004c86:	4b15      	ldr	r3, [pc, #84]	; (8004cdc <SM_Init+0xac>)
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	4a18      	ldr	r2, [pc, #96]	; (8004cec <SM_Init+0xbc>)
 8004c8c:	6053      	str	r3, [r2, #4]
	SyncChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 8004c8e:	4b17      	ldr	r3, [pc, #92]	; (8004cec <SM_Init+0xbc>)
 8004c90:	4a12      	ldr	r2, [pc, #72]	; (8004cdc <SM_Init+0xac>)
 8004c92:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8004c96:	2300      	movs	r3, #0
 8004c98:	603b      	str	r3, [r7, #0]
 8004c9a:	e00b      	b.n	8004cb4 <SM_Init+0x84>
		SyncChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8004c9c:	4a10      	ldr	r2, [pc, #64]	; (8004ce0 <SM_Init+0xb0>)
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004ca4:	4911      	ldr	r1, [pc, #68]	; (8004cec <SM_Init+0xbc>)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	3302      	adds	r3, #2
 8004caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	603b      	str	r3, [r7, #0]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	2b77      	cmp	r3, #119	; 0x77
 8004cb8:	ddf0      	ble.n	8004c9c <SM_Init+0x6c>

	SyncChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 8004cba:	4b0c      	ldr	r3, [pc, #48]	; (8004cec <SM_Init+0xbc>)
 8004cbc:	4a09      	ldr	r2, [pc, #36]	; (8004ce4 <SM_Init+0xb4>)
 8004cbe:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SyncChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 8004cc2:	4b0a      	ldr	r3, [pc, #40]	; (8004cec <SM_Init+0xbc>)
 8004cc4:	4a08      	ldr	r2, [pc, #32]	; (8004ce8 <SM_Init+0xb8>)
 8004cc6:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 8004cca:	bf00      	nop
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	2000213c 	.word	0x2000213c
 8004cdc:	200001ac 	.word	0x200001ac
 8004ce0:	20001580 	.word	0x20001580
 8004ce4:	20000bb0 	.word	0x20000bb0
 8004ce8:	200001df 	.word	0x200001df
 8004cec:	20001f48 	.word	0x20001f48

08004cf0 <SM_GetOutputChannel>:

sOutputChannel_t * SM_GetOutputChannel(eOutputChannel_t pChannel)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	71fb      	strb	r3, [r7, #7]
	if(!pChannel)
 8004cfa:	79fb      	ldrb	r3, [r7, #7]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d101      	bne.n	8004d04 <SM_GetOutputChannel+0x14>
		return &SignalChannel;
 8004d00:	4b04      	ldr	r3, [pc, #16]	; (8004d14 <SM_GetOutputChannel+0x24>)
 8004d02:	e000      	b.n	8004d06 <SM_GetOutputChannel+0x16>
	else
		return &SyncChannel;
 8004d04:	4b04      	ldr	r3, [pc, #16]	; (8004d18 <SM_GetOutputChannel+0x28>)
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	2000213c 	.word	0x2000213c
 8004d18:	20001f48 	.word	0x20001f48

08004d1c <SM_GetEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t SM_GetEncoderValue(eEncoder_Direction direction)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	4603      	mov	r3, r0
 8004d24:	71fb      	strb	r3, [r7, #7]
	if(direction)
 8004d26:	79fb      	ldrb	r3, [r7, #7]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d008      	beq.n	8004d3e <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 8004d2c:	4b08      	ldr	r3, [pc, #32]	; (8004d50 <SM_GetEncoderValue+0x34>)
 8004d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	4b07      	ldr	r3, [pc, #28]	; (8004d50 <SM_GetEncoderValue+0x34>)
 8004d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	e002      	b.n	8004d44 <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 8004d3e:	4b04      	ldr	r3, [pc, #16]	; (8004d50 <SM_GetEncoderValue+0x34>)
 8004d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d42:	b29b      	uxth	r3, r3
	}
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr
 8004d50:	40012c00 	.word	0x40012c00

08004d54 <SM_GetOutputInHertz>:
 *	@param None
 *	@retval None
 *
 */
float SM_GetOutputInHertz()
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
	volatile float tim8_psc;
	volatile float tim8_arr;

	// safe-guard against divide by zero
	(TIM8->PSC == 0) ? (tim8_psc = 1) : (tim8_psc = TIM8->PSC);
 8004d5a:	4b1d      	ldr	r3, [pc, #116]	; (8004dd0 <SM_GetOutputInHertz+0x7c>)
 8004d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d103      	bne.n	8004d6a <SM_GetOutputInHertz+0x16>
 8004d62:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004d66:	60bb      	str	r3, [r7, #8]
 8004d68:	e007      	b.n	8004d7a <SM_GetOutputInHertz+0x26>
 8004d6a:	4b19      	ldr	r3, [pc, #100]	; (8004dd0 <SM_GetOutputInHertz+0x7c>)
 8004d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6e:	ee07 3a90 	vmov	s15, r3
 8004d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d76:	edc7 7a02 	vstr	s15, [r7, #8]
	(TIM8->ARR == 0) ? (tim8_arr = 1) : (tim8_arr = TIM8->ARR);
 8004d7a:	4b15      	ldr	r3, [pc, #84]	; (8004dd0 <SM_GetOutputInHertz+0x7c>)
 8004d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d103      	bne.n	8004d8a <SM_GetOutputInHertz+0x36>
 8004d82:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004d86:	607b      	str	r3, [r7, #4]
 8004d88:	e007      	b.n	8004d9a <SM_GetOutputInHertz+0x46>
 8004d8a:	4b11      	ldr	r3, [pc, #68]	; (8004dd0 <SM_GetOutputInHertz+0x7c>)
 8004d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8e:	ee07 3a90 	vmov	s15, r3
 8004d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d96:	edc7 7a01 	vstr	s15, [r7, #4]

	float tim8_freq = SM_MCLK / (tim8_psc * tim8_arr);
 8004d9a:	ed97 7a02 	vldr	s14, [r7, #8]
 8004d9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004da2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004da6:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8004dd4 <SM_GetOutputInHertz+0x80>
 8004daa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dae:	edc7 7a03 	vstr	s15, [r7, #12]


	return tim8_freq / SM_FSAMP;
 8004db2:	edd7 7a03 	vldr	s15, [r7, #12]
 8004db6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8004dd8 <SM_GetOutputInHertz+0x84>
 8004dba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004dbe:	eef0 7a66 	vmov.f32	s15, s13
}
 8004dc2:	eeb0 0a67 	vmov.f32	s0, s15
 8004dc6:	3714      	adds	r7, #20
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr
 8004dd0:	40013400 	.word	0x40013400
 8004dd4:	4d2037a0 	.word	0x4d2037a0
 8004dd8:	42f00000 	.word	0x42f00000

08004ddc <VPP_ApplyPresetToSignal>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyPresetToSignal(eAmpSettings_t pPresetEnum)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	4603      	mov	r3, r0
 8004de4:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 8004de6:	79fa      	ldrb	r2, [r7, #7]
 8004de8:	4613      	mov	r3, r2
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	1a9b      	subs	r3, r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	4a10      	ldr	r2, [pc, #64]	; (8004e34 <VPP_ApplyPresetToSignal+0x58>)
 8004df2:	4413      	add	r3, r2
 8004df4:	60fb      	str	r3, [r7, #12]

	// Set the new  amp profile to the SignalChannel object
	SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile = pNextEncPreset;
 8004df6:	2000      	movs	r0, #0
 8004df8:	f7ff ff7a 	bl	8004cf0 <SM_GetOutputChannel>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

    // set the gain preset
	GO_ApplyPresetToSignal(pNextEncPreset->gain_preset);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	7a1b      	ldrb	r3, [r3, #8]
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7ff fdad 	bl	8004968 <GO_ApplyPresetToSignal>

    // Apply the next amplitude setting to the SignalChannel object
    _ProcessSignalDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	edd3 7a04 	vldr	s15, [r3, #16]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	ed93 7a05 	vldr	s14, [r3, #20]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	8b1b      	ldrh	r3, [r3, #24]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	eef0 0a47 	vmov.f32	s1, s14
 8004e24:	eeb0 0a67 	vmov.f32	s0, s15
 8004e28:	f000 f834 	bl	8004e94 <_ProcessSignalDataTable>


}
 8004e2c:	bf00      	nop
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	200001f4 	.word	0x200001f4

08004e38 <VPP_ApplyPresetToSync>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyPresetToSync(eAmpSettings_t pPresetEnum)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	4603      	mov	r3, r0
 8004e40:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 8004e42:	79fa      	ldrb	r2, [r7, #7]
 8004e44:	4613      	mov	r3, r2
 8004e46:	00db      	lsls	r3, r3, #3
 8004e48:	1a9b      	subs	r3, r3, r2
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	4a10      	ldr	r2, [pc, #64]	; (8004e90 <VPP_ApplyPresetToSync+0x58>)
 8004e4e:	4413      	add	r3, r2
 8004e50:	60fb      	str	r3, [r7, #12]

	// Set the new VPP Preset to the SyncChannel object
	SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile = pNextEncPreset;
 8004e52:	2001      	movs	r0, #1
 8004e54:	f7ff ff4c 	bl	8004cf0 <SM_GetOutputChannel>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

	 // set the gain preset
	GO_ApplyPresetToSync(pNextEncPreset->gain_preset);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	7a1b      	ldrb	r3, [r3, #8]
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7ff fe31 	bl	8004acc <GO_ApplyPresetToSync>

	// Apply the next amplitude setting to the SyncChannel object
	_ProcessSyncDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	edd3 7a04 	vldr	s15, [r3, #16]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	ed93 7a05 	vldr	s14, [r3, #20]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	8b1b      	ldrh	r3, [r3, #24]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	eef0 0a47 	vmov.f32	s1, s14
 8004e80:	eeb0 0a67 	vmov.f32	s0, s15
 8004e84:	f000 f884 	bl	8004f90 <_ProcessSyncDataTable>



}
 8004e88:	bf00      	nop
 8004e8a:	3710      	adds	r7, #16
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	200001f4 	.word	0x200001f4

08004e94 <_ProcessSignalDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSignalDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b088      	sub	sp, #32
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	ed87 0a03 	vstr	s0, [r7, #12]
 8004e9e:	edc7 0a02 	vstr	s1, [r7, #8]
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	80fb      	strh	r3, [r7, #6]
	// copy refer lookup datat table from SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	61fb      	str	r3, [r7, #28]
 8004eaa:	e00f      	b.n	8004ecc <_ProcessSignalDataTable+0x38>
	{
		tmpDataTable[i] = SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data[i];
 8004eac:	2000      	movs	r0, #0
 8004eae:	f7ff ff1f 	bl	8004cf0 <SM_GetOutputChannel>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	685a      	ldr	r2, [r3, #4]
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	4413      	add	r3, r2
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	4933      	ldr	r1, [pc, #204]	; (8004f8c <_ProcessSignalDataTable+0xf8>)
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	3301      	adds	r3, #1
 8004eca:	61fb      	str	r3, [r7, #28]
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	2b77      	cmp	r3, #119	; 0x77
 8004ed0:	ddec      	ble.n	8004eac <_ProcessSignalDataTable+0x18>
	}

	// calculate positive offset coefficient from encoder position
	float pos_offset_coeff = 1;
 8004ed2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004ed6:	61bb      	str	r3, [r7, #24]
	if(_encoder_value)
 8004ed8:	88fb      	ldrh	r3, [r7, #6]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d008      	beq.n	8004ef0 <_ProcessSignalDataTable+0x5c>
	{
		pos_offset_coeff = (_encoder_value/4);
 8004ede:	88fb      	ldrh	r3, [r7, #6]
 8004ee0:	089b      	lsrs	r3, r3, #2
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	ee07 3a90 	vmov	s15, r3
 8004ee8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004eec:	edc7 7a06 	vstr	s15, [r7, #24]
	}

	// adjust amplitude and offset of lookup table copy
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	617b      	str	r3, [r7, #20]
 8004ef4:	e02e      	b.n	8004f54 <_ProcessSignalDataTable+0xc0>
	{
		tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 8004ef6:	4a25      	ldr	r2, [pc, #148]	; (8004f8c <_ProcessSignalDataTable+0xf8>)
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004efe:	ee07 3a90 	vmov	s15, r3
 8004f02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f06:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f12:	ee17 1a90 	vmov	r1, s15
 8004f16:	4a1d      	ldr	r2, [pc, #116]	; (8004f8c <_ProcessSignalDataTable+0xf8>)
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 8004f1e:	4a1b      	ldr	r2, [pc, #108]	; (8004f8c <_ProcessSignalDataTable+0xf8>)
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f26:	ee07 3a90 	vmov	s15, r3
 8004f2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f2e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004f32:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8004f36:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004f3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f42:	ee17 1a90 	vmov	r1, s15
 8004f46:	4a11      	ldr	r2, [pc, #68]	; (8004f8c <_ProcessSignalDataTable+0xf8>)
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	3301      	adds	r3, #1
 8004f52:	617b      	str	r3, [r7, #20]
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	2b77      	cmp	r3, #119	; 0x77
 8004f58:	ddcd      	ble.n	8004ef6 <_ProcessSignalDataTable+0x62>
	}

	// restore lookup table copy to active lookup table in SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	613b      	str	r3, [r7, #16]
 8004f5e:	e00e      	b.n	8004f7e <_ProcessSignalDataTable+0xea>
	{
		SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 8004f60:	2000      	movs	r0, #0
 8004f62:	f7ff fec5 	bl	8004cf0 <SM_GetOutputChannel>
 8004f66:	4601      	mov	r1, r0
 8004f68:	4a08      	ldr	r2, [pc, #32]	; (8004f8c <_ProcessSignalDataTable+0xf8>)
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	3302      	adds	r3, #2
 8004f74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	613b      	str	r3, [r7, #16]
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	2b77      	cmp	r3, #119	; 0x77
 8004f82:	dded      	ble.n	8004f60 <_ProcessSignalDataTable+0xcc>
	}
}
 8004f84:	bf00      	nop
 8004f86:	3720      	adds	r7, #32
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	20002330 	.word	0x20002330

08004f90 <_ProcessSyncDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSyncDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b088      	sub	sp, #32
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	ed87 0a03 	vstr	s0, [r7, #12]
 8004f9a:	edc7 0a02 	vstr	s1, [r7, #8]
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	80fb      	strh	r3, [r7, #6]
	// copy refer lookup datat table from SyncChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	61fb      	str	r3, [r7, #28]
 8004fa6:	e00f      	b.n	8004fc8 <_ProcessSyncDataTable+0x38>
	{
		tmpDataTable[i] = SM_GetOutputChannel(SYNC_CHANNEL)->ref_lut_data[i];
 8004fa8:	2001      	movs	r0, #1
 8004faa:	f7ff fea1 	bl	8004cf0 <SM_GetOutputChannel>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	4413      	add	r3, r2
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	4933      	ldr	r1, [pc, #204]	; (8005088 <_ProcessSyncDataTable+0xf8>)
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	61fb      	str	r3, [r7, #28]
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	2b77      	cmp	r3, #119	; 0x77
 8004fcc:	ddec      	ble.n	8004fa8 <_ProcessSyncDataTable+0x18>
	}

	// calculate positive offset coefficient from encoder position
	float pos_offset_coeff = 1;
 8004fce:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004fd2:	61bb      	str	r3, [r7, #24]
	if(_encoder_value)
 8004fd4:	88fb      	ldrh	r3, [r7, #6]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d008      	beq.n	8004fec <_ProcessSyncDataTable+0x5c>
	{
		pos_offset_coeff = (_encoder_value/4);
 8004fda:	88fb      	ldrh	r3, [r7, #6]
 8004fdc:	089b      	lsrs	r3, r3, #2
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	ee07 3a90 	vmov	s15, r3
 8004fe4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fe8:	edc7 7a06 	vstr	s15, [r7, #24]
	}

	// adjust amplitude and offset of lookup table copy
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8004fec:	2300      	movs	r3, #0
 8004fee:	617b      	str	r3, [r7, #20]
 8004ff0:	e02e      	b.n	8005050 <_ProcessSyncDataTable+0xc0>
	{

		tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 8004ff2:	4a25      	ldr	r2, [pc, #148]	; (8005088 <_ProcessSyncDataTable+0xf8>)
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ffa:	ee07 3a90 	vmov	s15, r3
 8004ffe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005002:	edd7 7a03 	vldr	s15, [r7, #12]
 8005006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800500a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800500e:	ee17 1a90 	vmov	r1, s15
 8005012:	4a1d      	ldr	r2, [pc, #116]	; (8005088 <_ProcessSyncDataTable+0xf8>)
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 800501a:	4a1b      	ldr	r2, [pc, #108]	; (8005088 <_ProcessSyncDataTable+0xf8>)
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005022:	ee07 3a90 	vmov	s15, r3
 8005026:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800502a:	edd7 7a06 	vldr	s15, [r7, #24]
 800502e:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8005032:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005036:	ee77 7a27 	vadd.f32	s15, s14, s15
 800503a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800503e:	ee17 1a90 	vmov	r1, s15
 8005042:	4a11      	ldr	r2, [pc, #68]	; (8005088 <_ProcessSyncDataTable+0xf8>)
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	3301      	adds	r3, #1
 800504e:	617b      	str	r3, [r7, #20]
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	2b77      	cmp	r3, #119	; 0x77
 8005054:	ddcd      	ble.n	8004ff2 <_ProcessSyncDataTable+0x62>
	}

	// restore lookup table copy to active lookup table in SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005056:	2300      	movs	r3, #0
 8005058:	613b      	str	r3, [r7, #16]
 800505a:	e00e      	b.n	800507a <_ProcessSyncDataTable+0xea>
	{
		SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 800505c:	2001      	movs	r0, #1
 800505e:	f7ff fe47 	bl	8004cf0 <SM_GetOutputChannel>
 8005062:	4601      	mov	r1, r0
 8005064:	4a08      	ldr	r2, [pc, #32]	; (8005088 <_ProcessSyncDataTable+0xf8>)
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	3302      	adds	r3, #2
 8005070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	3301      	adds	r3, #1
 8005078:	613b      	str	r3, [r7, #16]
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	2b77      	cmp	r3, #119	; 0x77
 800507e:	dded      	ble.n	800505c <_ProcessSyncDataTable+0xcc>
	}
}
 8005080:	bf00      	nop
 8005082:	3720      	adds	r7, #32
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	20002330 	.word	0x20002330

0800508c <VPP_ModifySignalOutput>:

 *	@retval None
 *
 */
void VPP_ModifySignalOutput(uint16_t pEncoderValue)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	4603      	mov	r3, r0
 8005094:	80fb      	strh	r3, [r7, #6]
	switch(pEncoderValue)
 8005096:	88fb      	ldrh	r3, [r7, #6]
 8005098:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 800509c:	f200 849a 	bhi.w	80059d4 <VPP_ModifySignalOutput+0x948>
 80050a0:	a201      	add	r2, pc, #4	; (adr r2, 80050a8 <VPP_ModifySignalOutput+0x1c>)
 80050a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a6:	bf00      	nop
 80050a8:	080056c5 	.word	0x080056c5
 80050ac:	080056c5 	.word	0x080056c5
 80050b0:	080056c5 	.word	0x080056c5
 80050b4:	080056cd 	.word	0x080056cd
 80050b8:	080056cd 	.word	0x080056cd
 80050bc:	080056cd 	.word	0x080056cd
 80050c0:	080056cd 	.word	0x080056cd
 80050c4:	080056d5 	.word	0x080056d5
 80050c8:	080056d5 	.word	0x080056d5
 80050cc:	080056d5 	.word	0x080056d5
 80050d0:	080056d5 	.word	0x080056d5
 80050d4:	080056dd 	.word	0x080056dd
 80050d8:	080056dd 	.word	0x080056dd
 80050dc:	080056dd 	.word	0x080056dd
 80050e0:	080056dd 	.word	0x080056dd
 80050e4:	080056e5 	.word	0x080056e5
 80050e8:	080056e5 	.word	0x080056e5
 80050ec:	080056e5 	.word	0x080056e5
 80050f0:	080056e5 	.word	0x080056e5
 80050f4:	080056ed 	.word	0x080056ed
 80050f8:	080056ed 	.word	0x080056ed
 80050fc:	080056ed 	.word	0x080056ed
 8005100:	080056ed 	.word	0x080056ed
 8005104:	080056f5 	.word	0x080056f5
 8005108:	080056f5 	.word	0x080056f5
 800510c:	080056f5 	.word	0x080056f5
 8005110:	080056f5 	.word	0x080056f5
 8005114:	080056fd 	.word	0x080056fd
 8005118:	080056fd 	.word	0x080056fd
 800511c:	080056fd 	.word	0x080056fd
 8005120:	080056fd 	.word	0x080056fd
 8005124:	08005705 	.word	0x08005705
 8005128:	08005705 	.word	0x08005705
 800512c:	08005705 	.word	0x08005705
 8005130:	08005705 	.word	0x08005705
 8005134:	0800570d 	.word	0x0800570d
 8005138:	0800570d 	.word	0x0800570d
 800513c:	0800570d 	.word	0x0800570d
 8005140:	0800570d 	.word	0x0800570d
 8005144:	08005715 	.word	0x08005715
 8005148:	08005715 	.word	0x08005715
 800514c:	08005715 	.word	0x08005715
 8005150:	08005715 	.word	0x08005715
 8005154:	0800571d 	.word	0x0800571d
 8005158:	0800571d 	.word	0x0800571d
 800515c:	0800571d 	.word	0x0800571d
 8005160:	0800571d 	.word	0x0800571d
 8005164:	08005725 	.word	0x08005725
 8005168:	08005725 	.word	0x08005725
 800516c:	08005725 	.word	0x08005725
 8005170:	08005725 	.word	0x08005725
 8005174:	0800572d 	.word	0x0800572d
 8005178:	0800572d 	.word	0x0800572d
 800517c:	0800572d 	.word	0x0800572d
 8005180:	0800572d 	.word	0x0800572d
 8005184:	08005735 	.word	0x08005735
 8005188:	08005735 	.word	0x08005735
 800518c:	08005735 	.word	0x08005735
 8005190:	08005735 	.word	0x08005735
 8005194:	0800573d 	.word	0x0800573d
 8005198:	0800573d 	.word	0x0800573d
 800519c:	0800573d 	.word	0x0800573d
 80051a0:	0800573d 	.word	0x0800573d
 80051a4:	08005745 	.word	0x08005745
 80051a8:	08005745 	.word	0x08005745
 80051ac:	08005745 	.word	0x08005745
 80051b0:	08005745 	.word	0x08005745
 80051b4:	0800574d 	.word	0x0800574d
 80051b8:	0800574d 	.word	0x0800574d
 80051bc:	0800574d 	.word	0x0800574d
 80051c0:	0800574d 	.word	0x0800574d
 80051c4:	08005755 	.word	0x08005755
 80051c8:	08005755 	.word	0x08005755
 80051cc:	08005755 	.word	0x08005755
 80051d0:	08005755 	.word	0x08005755
 80051d4:	0800575d 	.word	0x0800575d
 80051d8:	0800575d 	.word	0x0800575d
 80051dc:	0800575d 	.word	0x0800575d
 80051e0:	0800575d 	.word	0x0800575d
 80051e4:	08005765 	.word	0x08005765
 80051e8:	08005765 	.word	0x08005765
 80051ec:	08005765 	.word	0x08005765
 80051f0:	08005765 	.word	0x08005765
 80051f4:	0800576d 	.word	0x0800576d
 80051f8:	0800576d 	.word	0x0800576d
 80051fc:	0800576d 	.word	0x0800576d
 8005200:	0800576d 	.word	0x0800576d
 8005204:	08005775 	.word	0x08005775
 8005208:	08005775 	.word	0x08005775
 800520c:	08005775 	.word	0x08005775
 8005210:	08005775 	.word	0x08005775
 8005214:	0800577d 	.word	0x0800577d
 8005218:	0800577d 	.word	0x0800577d
 800521c:	0800577d 	.word	0x0800577d
 8005220:	0800577d 	.word	0x0800577d
 8005224:	08005785 	.word	0x08005785
 8005228:	08005785 	.word	0x08005785
 800522c:	08005785 	.word	0x08005785
 8005230:	08005785 	.word	0x08005785
 8005234:	0800578d 	.word	0x0800578d
 8005238:	0800578d 	.word	0x0800578d
 800523c:	0800578d 	.word	0x0800578d
 8005240:	0800578d 	.word	0x0800578d
 8005244:	08005795 	.word	0x08005795
 8005248:	08005795 	.word	0x08005795
 800524c:	08005795 	.word	0x08005795
 8005250:	08005795 	.word	0x08005795
 8005254:	0800579d 	.word	0x0800579d
 8005258:	0800579d 	.word	0x0800579d
 800525c:	0800579d 	.word	0x0800579d
 8005260:	0800579d 	.word	0x0800579d
 8005264:	080057a5 	.word	0x080057a5
 8005268:	080057a5 	.word	0x080057a5
 800526c:	080057a5 	.word	0x080057a5
 8005270:	080057a5 	.word	0x080057a5
 8005274:	080057ad 	.word	0x080057ad
 8005278:	080057ad 	.word	0x080057ad
 800527c:	080057ad 	.word	0x080057ad
 8005280:	080057ad 	.word	0x080057ad
 8005284:	080057b5 	.word	0x080057b5
 8005288:	080057b5 	.word	0x080057b5
 800528c:	080057b5 	.word	0x080057b5
 8005290:	080057b5 	.word	0x080057b5
 8005294:	080057bd 	.word	0x080057bd
 8005298:	080057bd 	.word	0x080057bd
 800529c:	080057bd 	.word	0x080057bd
 80052a0:	080057bd 	.word	0x080057bd
 80052a4:	080057c5 	.word	0x080057c5
 80052a8:	080057c5 	.word	0x080057c5
 80052ac:	080057c5 	.word	0x080057c5
 80052b0:	080057c5 	.word	0x080057c5
 80052b4:	080057cd 	.word	0x080057cd
 80052b8:	080057cd 	.word	0x080057cd
 80052bc:	080057cd 	.word	0x080057cd
 80052c0:	080057cd 	.word	0x080057cd
 80052c4:	080057d5 	.word	0x080057d5
 80052c8:	080057d5 	.word	0x080057d5
 80052cc:	080057d5 	.word	0x080057d5
 80052d0:	080057d5 	.word	0x080057d5
 80052d4:	080057dd 	.word	0x080057dd
 80052d8:	080057dd 	.word	0x080057dd
 80052dc:	080057dd 	.word	0x080057dd
 80052e0:	080057dd 	.word	0x080057dd
 80052e4:	080057e5 	.word	0x080057e5
 80052e8:	080057e5 	.word	0x080057e5
 80052ec:	080057e5 	.word	0x080057e5
 80052f0:	080057e5 	.word	0x080057e5
 80052f4:	080057ed 	.word	0x080057ed
 80052f8:	080057ed 	.word	0x080057ed
 80052fc:	080057ed 	.word	0x080057ed
 8005300:	080057ed 	.word	0x080057ed
 8005304:	080057f5 	.word	0x080057f5
 8005308:	080057f5 	.word	0x080057f5
 800530c:	080057f5 	.word	0x080057f5
 8005310:	080057f5 	.word	0x080057f5
 8005314:	080057fd 	.word	0x080057fd
 8005318:	080057fd 	.word	0x080057fd
 800531c:	080057fd 	.word	0x080057fd
 8005320:	080057fd 	.word	0x080057fd
 8005324:	08005805 	.word	0x08005805
 8005328:	08005805 	.word	0x08005805
 800532c:	08005805 	.word	0x08005805
 8005330:	08005805 	.word	0x08005805
 8005334:	0800580d 	.word	0x0800580d
 8005338:	0800580d 	.word	0x0800580d
 800533c:	0800580d 	.word	0x0800580d
 8005340:	0800580d 	.word	0x0800580d
 8005344:	08005815 	.word	0x08005815
 8005348:	08005815 	.word	0x08005815
 800534c:	08005815 	.word	0x08005815
 8005350:	08005815 	.word	0x08005815
 8005354:	0800581d 	.word	0x0800581d
 8005358:	0800581d 	.word	0x0800581d
 800535c:	0800581d 	.word	0x0800581d
 8005360:	0800581d 	.word	0x0800581d
 8005364:	08005825 	.word	0x08005825
 8005368:	08005825 	.word	0x08005825
 800536c:	08005825 	.word	0x08005825
 8005370:	08005825 	.word	0x08005825
 8005374:	0800582d 	.word	0x0800582d
 8005378:	0800582d 	.word	0x0800582d
 800537c:	0800582d 	.word	0x0800582d
 8005380:	0800582d 	.word	0x0800582d
 8005384:	08005835 	.word	0x08005835
 8005388:	08005835 	.word	0x08005835
 800538c:	08005835 	.word	0x08005835
 8005390:	08005835 	.word	0x08005835
 8005394:	0800583d 	.word	0x0800583d
 8005398:	0800583d 	.word	0x0800583d
 800539c:	0800583d 	.word	0x0800583d
 80053a0:	0800583d 	.word	0x0800583d
 80053a4:	08005845 	.word	0x08005845
 80053a8:	08005845 	.word	0x08005845
 80053ac:	08005845 	.word	0x08005845
 80053b0:	08005845 	.word	0x08005845
 80053b4:	0800584d 	.word	0x0800584d
 80053b8:	0800584d 	.word	0x0800584d
 80053bc:	0800584d 	.word	0x0800584d
 80053c0:	0800584d 	.word	0x0800584d
 80053c4:	08005855 	.word	0x08005855
 80053c8:	08005855 	.word	0x08005855
 80053cc:	08005855 	.word	0x08005855
 80053d0:	08005855 	.word	0x08005855
 80053d4:	0800585d 	.word	0x0800585d
 80053d8:	0800585d 	.word	0x0800585d
 80053dc:	0800585d 	.word	0x0800585d
 80053e0:	0800585d 	.word	0x0800585d
 80053e4:	08005865 	.word	0x08005865
 80053e8:	08005865 	.word	0x08005865
 80053ec:	08005865 	.word	0x08005865
 80053f0:	08005865 	.word	0x08005865
 80053f4:	0800586d 	.word	0x0800586d
 80053f8:	0800586d 	.word	0x0800586d
 80053fc:	0800586d 	.word	0x0800586d
 8005400:	0800586d 	.word	0x0800586d
 8005404:	08005875 	.word	0x08005875
 8005408:	08005875 	.word	0x08005875
 800540c:	08005875 	.word	0x08005875
 8005410:	08005875 	.word	0x08005875
 8005414:	0800587d 	.word	0x0800587d
 8005418:	0800587d 	.word	0x0800587d
 800541c:	0800587d 	.word	0x0800587d
 8005420:	0800587d 	.word	0x0800587d
 8005424:	08005885 	.word	0x08005885
 8005428:	08005885 	.word	0x08005885
 800542c:	08005885 	.word	0x08005885
 8005430:	08005885 	.word	0x08005885
 8005434:	0800588d 	.word	0x0800588d
 8005438:	0800588d 	.word	0x0800588d
 800543c:	0800588d 	.word	0x0800588d
 8005440:	0800588d 	.word	0x0800588d
 8005444:	08005895 	.word	0x08005895
 8005448:	08005895 	.word	0x08005895
 800544c:	08005895 	.word	0x08005895
 8005450:	08005895 	.word	0x08005895
 8005454:	0800589d 	.word	0x0800589d
 8005458:	0800589d 	.word	0x0800589d
 800545c:	0800589d 	.word	0x0800589d
 8005460:	0800589d 	.word	0x0800589d
 8005464:	080058a5 	.word	0x080058a5
 8005468:	080058a5 	.word	0x080058a5
 800546c:	080058a5 	.word	0x080058a5
 8005470:	080058a5 	.word	0x080058a5
 8005474:	080058ad 	.word	0x080058ad
 8005478:	080058ad 	.word	0x080058ad
 800547c:	080058ad 	.word	0x080058ad
 8005480:	080058ad 	.word	0x080058ad
 8005484:	080058b5 	.word	0x080058b5
 8005488:	080058b5 	.word	0x080058b5
 800548c:	080058b5 	.word	0x080058b5
 8005490:	080058b5 	.word	0x080058b5
 8005494:	080058bd 	.word	0x080058bd
 8005498:	080058bd 	.word	0x080058bd
 800549c:	080058bd 	.word	0x080058bd
 80054a0:	080058bd 	.word	0x080058bd
 80054a4:	080058c5 	.word	0x080058c5
 80054a8:	080058c5 	.word	0x080058c5
 80054ac:	080058c5 	.word	0x080058c5
 80054b0:	080058c5 	.word	0x080058c5
 80054b4:	080058cd 	.word	0x080058cd
 80054b8:	080058cd 	.word	0x080058cd
 80054bc:	080058cd 	.word	0x080058cd
 80054c0:	080058cd 	.word	0x080058cd
 80054c4:	080058d5 	.word	0x080058d5
 80054c8:	080058d5 	.word	0x080058d5
 80054cc:	080058d5 	.word	0x080058d5
 80054d0:	080058d5 	.word	0x080058d5
 80054d4:	080058dd 	.word	0x080058dd
 80054d8:	080058dd 	.word	0x080058dd
 80054dc:	080058dd 	.word	0x080058dd
 80054e0:	080058dd 	.word	0x080058dd
 80054e4:	080058e5 	.word	0x080058e5
 80054e8:	080058e5 	.word	0x080058e5
 80054ec:	080058e5 	.word	0x080058e5
 80054f0:	080058e5 	.word	0x080058e5
 80054f4:	080058ed 	.word	0x080058ed
 80054f8:	080058ed 	.word	0x080058ed
 80054fc:	080058ed 	.word	0x080058ed
 8005500:	080058ed 	.word	0x080058ed
 8005504:	080058f5 	.word	0x080058f5
 8005508:	080058f5 	.word	0x080058f5
 800550c:	080058f5 	.word	0x080058f5
 8005510:	080058f5 	.word	0x080058f5
 8005514:	080058fd 	.word	0x080058fd
 8005518:	080058fd 	.word	0x080058fd
 800551c:	080058fd 	.word	0x080058fd
 8005520:	080058fd 	.word	0x080058fd
 8005524:	08005905 	.word	0x08005905
 8005528:	08005905 	.word	0x08005905
 800552c:	08005905 	.word	0x08005905
 8005530:	08005905 	.word	0x08005905
 8005534:	0800590d 	.word	0x0800590d
 8005538:	0800590d 	.word	0x0800590d
 800553c:	0800590d 	.word	0x0800590d
 8005540:	0800590d 	.word	0x0800590d
 8005544:	08005915 	.word	0x08005915
 8005548:	08005915 	.word	0x08005915
 800554c:	08005915 	.word	0x08005915
 8005550:	08005915 	.word	0x08005915
 8005554:	0800591d 	.word	0x0800591d
 8005558:	0800591d 	.word	0x0800591d
 800555c:	0800591d 	.word	0x0800591d
 8005560:	0800591d 	.word	0x0800591d
 8005564:	08005925 	.word	0x08005925
 8005568:	08005925 	.word	0x08005925
 800556c:	08005925 	.word	0x08005925
 8005570:	08005925 	.word	0x08005925
 8005574:	0800592d 	.word	0x0800592d
 8005578:	0800592d 	.word	0x0800592d
 800557c:	0800592d 	.word	0x0800592d
 8005580:	0800592d 	.word	0x0800592d
 8005584:	08005935 	.word	0x08005935
 8005588:	08005935 	.word	0x08005935
 800558c:	08005935 	.word	0x08005935
 8005590:	08005935 	.word	0x08005935
 8005594:	0800593d 	.word	0x0800593d
 8005598:	0800593d 	.word	0x0800593d
 800559c:	0800593d 	.word	0x0800593d
 80055a0:	0800593d 	.word	0x0800593d
 80055a4:	08005945 	.word	0x08005945
 80055a8:	08005945 	.word	0x08005945
 80055ac:	08005945 	.word	0x08005945
 80055b0:	08005945 	.word	0x08005945
 80055b4:	0800594d 	.word	0x0800594d
 80055b8:	0800594d 	.word	0x0800594d
 80055bc:	0800594d 	.word	0x0800594d
 80055c0:	0800594d 	.word	0x0800594d
 80055c4:	08005955 	.word	0x08005955
 80055c8:	08005955 	.word	0x08005955
 80055cc:	08005955 	.word	0x08005955
 80055d0:	08005955 	.word	0x08005955
 80055d4:	0800595d 	.word	0x0800595d
 80055d8:	0800595d 	.word	0x0800595d
 80055dc:	0800595d 	.word	0x0800595d
 80055e0:	0800595d 	.word	0x0800595d
 80055e4:	08005965 	.word	0x08005965
 80055e8:	08005965 	.word	0x08005965
 80055ec:	08005965 	.word	0x08005965
 80055f0:	08005965 	.word	0x08005965
 80055f4:	0800596d 	.word	0x0800596d
 80055f8:	0800596d 	.word	0x0800596d
 80055fc:	0800596d 	.word	0x0800596d
 8005600:	0800596d 	.word	0x0800596d
 8005604:	08005975 	.word	0x08005975
 8005608:	08005975 	.word	0x08005975
 800560c:	08005975 	.word	0x08005975
 8005610:	08005975 	.word	0x08005975
 8005614:	0800597d 	.word	0x0800597d
 8005618:	0800597d 	.word	0x0800597d
 800561c:	0800597d 	.word	0x0800597d
 8005620:	0800597d 	.word	0x0800597d
 8005624:	08005985 	.word	0x08005985
 8005628:	08005985 	.word	0x08005985
 800562c:	08005985 	.word	0x08005985
 8005630:	08005985 	.word	0x08005985
 8005634:	0800598d 	.word	0x0800598d
 8005638:	0800598d 	.word	0x0800598d
 800563c:	0800598d 	.word	0x0800598d
 8005640:	0800598d 	.word	0x0800598d
 8005644:	08005995 	.word	0x08005995
 8005648:	08005995 	.word	0x08005995
 800564c:	08005995 	.word	0x08005995
 8005650:	08005995 	.word	0x08005995
 8005654:	0800599d 	.word	0x0800599d
 8005658:	0800599d 	.word	0x0800599d
 800565c:	0800599d 	.word	0x0800599d
 8005660:	0800599d 	.word	0x0800599d
 8005664:	080059a5 	.word	0x080059a5
 8005668:	080059a5 	.word	0x080059a5
 800566c:	080059a5 	.word	0x080059a5
 8005670:	080059a5 	.word	0x080059a5
 8005674:	080059ad 	.word	0x080059ad
 8005678:	080059ad 	.word	0x080059ad
 800567c:	080059ad 	.word	0x080059ad
 8005680:	080059ad 	.word	0x080059ad
 8005684:	080059b5 	.word	0x080059b5
 8005688:	080059b5 	.word	0x080059b5
 800568c:	080059b5 	.word	0x080059b5
 8005690:	080059b5 	.word	0x080059b5
 8005694:	080059bd 	.word	0x080059bd
 8005698:	080059bd 	.word	0x080059bd
 800569c:	080059bd 	.word	0x080059bd
 80056a0:	080059bd 	.word	0x080059bd
 80056a4:	080059c5 	.word	0x080059c5
 80056a8:	080059c5 	.word	0x080059c5
 80056ac:	080059c5 	.word	0x080059c5
 80056b0:	080059c5 	.word	0x080059c5
 80056b4:	080059cd 	.word	0x080059cd
 80056b8:	080059cd 	.word	0x080059cd
 80056bc:	080059cd 	.word	0x080059cd
 80056c0:	080059cd 	.word	0x080059cd
	{
		case 0	:
		case 1	:
		case 2	:
			VPP_ApplyPresetToSignal( VPP01 );
 80056c4:	2000      	movs	r0, #0
 80056c6:	f7ff fb89 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 80056ca:	e184      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 3	:
		case 4	:
		case 5	:
		case 6	:
			VPP_ApplyPresetToSignal( VPP02	);
 80056cc:	2001      	movs	r0, #1
 80056ce:	f7ff fb85 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 80056d2:	e180      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 7	:
		case 8	:
		case 9	:
		case 10	:
			VPP_ApplyPresetToSignal( VPP03	);
 80056d4:	2002      	movs	r0, #2
 80056d6:	f7ff fb81 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 80056da:	e17c      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 11	:
		case 12	:
		case 13	:
		case 14	:
			VPP_ApplyPresetToSignal( VPP04	);
 80056dc:	2003      	movs	r0, #3
 80056de:	f7ff fb7d 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 80056e2:	e178      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 15	:
		case 16	:
		case 17	:
		case 18	:
			VPP_ApplyPresetToSignal( VPP05	);
 80056e4:	2004      	movs	r0, #4
 80056e6:	f7ff fb79 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 80056ea:	e174      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 19	:
		case 20	:
		case 21	:
		case 22	:
			VPP_ApplyPresetToSignal( VPP06	);
 80056ec:	2005      	movs	r0, #5
 80056ee:	f7ff fb75 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 80056f2:	e170      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 23	:
		case 24	:
		case 25	:
		case 26	:
			VPP_ApplyPresetToSignal( VPP07	);
 80056f4:	2006      	movs	r0, #6
 80056f6:	f7ff fb71 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 80056fa:	e16c      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 27	:
		case 28	:
		case 29	:
		case 30	:
			VPP_ApplyPresetToSignal( VPP08	);
 80056fc:	2007      	movs	r0, #7
 80056fe:	f7ff fb6d 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 8005702:	e168      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 31	:
		case 32	:
		case 33	:
		case 34	:
			VPP_ApplyPresetToSignal( VPP09	);
 8005704:	2008      	movs	r0, #8
 8005706:	f7ff fb69 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 800570a:	e164      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 35	:
		case 36	:
		case 37	:
		case 38	:
			VPP_ApplyPresetToSignal( VPP10	);
 800570c:	2009      	movs	r0, #9
 800570e:	f7ff fb65 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 8005712:	e160      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 39	:
		case 40	:
		case 41	:
		case 42	:
			VPP_ApplyPresetToSignal( VPP11	);
 8005714:	200a      	movs	r0, #10
 8005716:	f7ff fb61 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 800571a:	e15c      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 43	:
		case 44	:
		case 45	:
		case 46	:
			VPP_ApplyPresetToSignal( VPP12	);
 800571c:	200b      	movs	r0, #11
 800571e:	f7ff fb5d 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 8005722:	e158      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 47	:
		case 48	:
		case 49	:
		case 50	:
			VPP_ApplyPresetToSignal( VPP13	);
 8005724:	200c      	movs	r0, #12
 8005726:	f7ff fb59 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 800572a:	e154      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 51	:
		case 52	:
		case 53	:
		case 54	:
			VPP_ApplyPresetToSignal( VPP14	);
 800572c:	200d      	movs	r0, #13
 800572e:	f7ff fb55 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 8005732:	e150      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 55	:
		case 56	:
		case 57	:
		case 58	:
			VPP_ApplyPresetToSignal( VPP15	);
 8005734:	200e      	movs	r0, #14
 8005736:	f7ff fb51 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 800573a:	e14c      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 59	:
		case 60	:
		case 61	:
		case 62	:
			VPP_ApplyPresetToSignal( VPP16	);
 800573c:	200f      	movs	r0, #15
 800573e:	f7ff fb4d 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 8005742:	e148      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 63	:
		case 64	:
		case 65	:
		case 66	:
			VPP_ApplyPresetToSignal( VPP17	);
 8005744:	2010      	movs	r0, #16
 8005746:	f7ff fb49 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 800574a:	e144      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 67	:
		case 68	:
		case 69	:
		case 70	:
			VPP_ApplyPresetToSignal( VPP18	);
 800574c:	2011      	movs	r0, #17
 800574e:	f7ff fb45 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 8005752:	e140      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 71	:
		case 72	:
		case 73	:
		case 74	:
			VPP_ApplyPresetToSignal( VPP19	);
 8005754:	2012      	movs	r0, #18
 8005756:	f7ff fb41 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 800575a:	e13c      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 75	:
		case 76	:
		case 77	:
		case 78	:
			VPP_ApplyPresetToSignal( VPP20	);
 800575c:	2013      	movs	r0, #19
 800575e:	f7ff fb3d 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 8005762:	e138      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 79	:
		case 80	:
		case 81	:
		case 82	:
			VPP_ApplyPresetToSignal( VPP21	);
 8005764:	2014      	movs	r0, #20
 8005766:	f7ff fb39 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 800576a:	e134      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 83	:
		case 84	:
		case 85	:
		case 86	:
			VPP_ApplyPresetToSignal( VPP22	);
 800576c:	2015      	movs	r0, #21
 800576e:	f7ff fb35 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 8005772:	e130      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 87	:
		case 88	:
		case 89	:
		case 90	:
			VPP_ApplyPresetToSignal( VPP23	);
 8005774:	2016      	movs	r0, #22
 8005776:	f7ff fb31 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 800577a:	e12c      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 91	:
		case 92	:
		case 93	:
		case 94	:
			VPP_ApplyPresetToSignal( VPP24	);
 800577c:	2017      	movs	r0, #23
 800577e:	f7ff fb2d 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 8005782:	e128      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 95	:
		case 96	:
		case 97	:
		case 98	:
			VPP_ApplyPresetToSignal( VPP25	);
 8005784:	2018      	movs	r0, #24
 8005786:	f7ff fb29 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 800578a:	e124      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 99		:
		case 100	:
		case 101	:
		case 102	:
			VPP_ApplyPresetToSignal( VPP26	);
 800578c:	2019      	movs	r0, #25
 800578e:	f7ff fb25 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 8005792:	e120      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 103	:
		case 104	:
		case 105	:
		case 106	:
			VPP_ApplyPresetToSignal( VPP27	);
 8005794:	201a      	movs	r0, #26
 8005796:	f7ff fb21 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 800579a:	e11c      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 107	:
		case 108	:
		case 109	:
		case 110	:
			VPP_ApplyPresetToSignal( VPP28	);
 800579c:	201b      	movs	r0, #27
 800579e:	f7ff fb1d 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 80057a2:	e118      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 111	:
		case 112	:
		case 113	:
		case 114	:
			VPP_ApplyPresetToSignal( VPP29	);
 80057a4:	201c      	movs	r0, #28
 80057a6:	f7ff fb19 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 80057aa:	e114      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 115	:
		case 116	:
		case 117	:
		case 118	:
			VPP_ApplyPresetToSignal( VPP30	);
 80057ac:	201d      	movs	r0, #29
 80057ae:	f7ff fb15 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 80057b2:	e110      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 119	:
		case 120	:
		case 121	:
		case 122	:
			VPP_ApplyPresetToSignal( VPP31	);
 80057b4:	201e      	movs	r0, #30
 80057b6:	f7ff fb11 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 80057ba:	e10c      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 123	:
		case 124	:
		case 125	:
		case 126	:
			VPP_ApplyPresetToSignal( VPP32	);
 80057bc:	201f      	movs	r0, #31
 80057be:	f7ff fb0d 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 80057c2:	e108      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 127	:
		case 128	:
		case 129	:
		case 130	:
			VPP_ApplyPresetToSignal( VPP33	);
 80057c4:	2020      	movs	r0, #32
 80057c6:	f7ff fb09 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 80057ca:	e104      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 131	:
		case 132	:
		case 133	:
		case 134	:
			VPP_ApplyPresetToSignal( VPP34	);
 80057cc:	2021      	movs	r0, #33	; 0x21
 80057ce:	f7ff fb05 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 80057d2:	e100      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 135	:
		case 136	:
		case 137	:
		case 138	:
			VPP_ApplyPresetToSignal( VPP35	);
 80057d4:	2022      	movs	r0, #34	; 0x22
 80057d6:	f7ff fb01 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 80057da:	e0fc      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 139	:
		case 140	:
		case 141	:
		case 142	:
			VPP_ApplyPresetToSignal( VPP36	);
 80057dc:	2023      	movs	r0, #35	; 0x23
 80057de:	f7ff fafd 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 80057e2:	e0f8      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 143	:
		case 144	:
		case 145	:
		case 146	:
			VPP_ApplyPresetToSignal( VPP37	);
 80057e4:	2024      	movs	r0, #36	; 0x24
 80057e6:	f7ff faf9 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 80057ea:	e0f4      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 147	:
		case 148	:
		case 149	:
		case 150	:
			VPP_ApplyPresetToSignal( VPP38	);
 80057ec:	2025      	movs	r0, #37	; 0x25
 80057ee:	f7ff faf5 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 80057f2:	e0f0      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 151	:
		case 152	:
		case 153	:
		case 154	:
			VPP_ApplyPresetToSignal( VPP39	);
 80057f4:	2026      	movs	r0, #38	; 0x26
 80057f6:	f7ff faf1 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 80057fa:	e0ec      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 155	:
		case 156	:
		case 157	:
		case 158	:
			VPP_ApplyPresetToSignal( VPP40	);
 80057fc:	2027      	movs	r0, #39	; 0x27
 80057fe:	f7ff faed 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 8005802:	e0e8      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 159	:
		case 160	:
		case 161	:
		case 162	:
			VPP_ApplyPresetToSignal( VPP41	);
 8005804:	2028      	movs	r0, #40	; 0x28
 8005806:	f7ff fae9 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 800580a:	e0e4      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 163	:
		case 164	:
		case 165	:
		case 166	:
			VPP_ApplyPresetToSignal( VPP42	);
 800580c:	2029      	movs	r0, #41	; 0x29
 800580e:	f7ff fae5 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 8005812:	e0e0      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 167	:
		case 168	:
		case 169	:
		case 170	:
			VPP_ApplyPresetToSignal( VPP43	);
 8005814:	202a      	movs	r0, #42	; 0x2a
 8005816:	f7ff fae1 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 800581a:	e0dc      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 171	:
		case 172	:
		case 173	:
		case 174	:
			VPP_ApplyPresetToSignal( VPP44	);
 800581c:	202b      	movs	r0, #43	; 0x2b
 800581e:	f7ff fadd 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 8005822:	e0d8      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 175	:
		case 176	:
		case 177	:
		case 178	:
			VPP_ApplyPresetToSignal( VPP45	);
 8005824:	202c      	movs	r0, #44	; 0x2c
 8005826:	f7ff fad9 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 800582a:	e0d4      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 179	:
		case 180	:
		case 181	:
		case 182	:
			VPP_ApplyPresetToSignal( VPP46	);
 800582c:	202d      	movs	r0, #45	; 0x2d
 800582e:	f7ff fad5 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 8005832:	e0d0      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 183	:
		case 184	:
		case 185	:
		case 186	:
			VPP_ApplyPresetToSignal( VPP47	);
 8005834:	202e      	movs	r0, #46	; 0x2e
 8005836:	f7ff fad1 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 800583a:	e0cc      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 187	:
		case 188	:
		case 189	:
		case 190	:
			VPP_ApplyPresetToSignal( VPP48	);
 800583c:	202f      	movs	r0, #47	; 0x2f
 800583e:	f7ff facd 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 8005842:	e0c8      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 191	:
		case 192	:
		case 193	:
		case 194	:
			VPP_ApplyPresetToSignal( VPP49	);
 8005844:	2030      	movs	r0, #48	; 0x30
 8005846:	f7ff fac9 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 800584a:	e0c4      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 195	:
		case 196	:
		case 197	:
		case 198	:
			VPP_ApplyPresetToSignal( VPP50	);
 800584c:	2031      	movs	r0, #49	; 0x31
 800584e:	f7ff fac5 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 8005852:	e0c0      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 199	:
		case 200	:
		case 201	:
		case 202	:
			VPP_ApplyPresetToSignal( VPP51	);
 8005854:	2032      	movs	r0, #50	; 0x32
 8005856:	f7ff fac1 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 800585a:	e0bc      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 203	:
		case 204	:
		case 205	:
		case 206	:
			VPP_ApplyPresetToSignal( VPP52	);
 800585c:	2033      	movs	r0, #51	; 0x33
 800585e:	f7ff fabd 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 8005862:	e0b8      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 207	:
		case 208	:
		case 209	:
		case 210	:
			VPP_ApplyPresetToSignal( VPP53	);
 8005864:	2034      	movs	r0, #52	; 0x34
 8005866:	f7ff fab9 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 800586a:	e0b4      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 211	:
		case 212	:
		case 213	:
		case 214	:
			VPP_ApplyPresetToSignal( VPP54	);
 800586c:	2035      	movs	r0, #53	; 0x35
 800586e:	f7ff fab5 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 8005872:	e0b0      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 215	:
		case 216	:
		case 217	:
		case 218	:
			VPP_ApplyPresetToSignal( VPP55	);
 8005874:	2036      	movs	r0, #54	; 0x36
 8005876:	f7ff fab1 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 800587a:	e0ac      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 219	:
		case 220	:
		case 221	:
		case 222	:
			VPP_ApplyPresetToSignal( VPP56	);
 800587c:	2037      	movs	r0, #55	; 0x37
 800587e:	f7ff faad 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 8005882:	e0a8      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 223	:
		case 224	:
		case 225	:
		case 226	:
			VPP_ApplyPresetToSignal( VPP57	);
 8005884:	2038      	movs	r0, #56	; 0x38
 8005886:	f7ff faa9 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 800588a:	e0a4      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 227	:
		case 228	:
		case 229	:
		case 230	:
			VPP_ApplyPresetToSignal( VPP58	);
 800588c:	2039      	movs	r0, #57	; 0x39
 800588e:	f7ff faa5 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 8005892:	e0a0      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 231	:
		case 232	:
		case 233	:
		case 234	:
			VPP_ApplyPresetToSignal( VPP59	);
 8005894:	203a      	movs	r0, #58	; 0x3a
 8005896:	f7ff faa1 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 800589a:	e09c      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 235	:
		case 236	:
		case 237	:
		case 238	:
			VPP_ApplyPresetToSignal( VPP60	);
 800589c:	203b      	movs	r0, #59	; 0x3b
 800589e:	f7ff fa9d 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 80058a2:	e098      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 239	:
		case 240	:
		case 241	:
		case 242	:
			VPP_ApplyPresetToSignal( VPP61	);
 80058a4:	203c      	movs	r0, #60	; 0x3c
 80058a6:	f7ff fa99 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 80058aa:	e094      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 243	:
		case 244	:
		case 245	:
		case 246	:
			VPP_ApplyPresetToSignal( VPP62	);
 80058ac:	203d      	movs	r0, #61	; 0x3d
 80058ae:	f7ff fa95 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 80058b2:	e090      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 247	:
		case 248	:
		case 249	:
		case 250	:
			VPP_ApplyPresetToSignal( VPP63	);
 80058b4:	203e      	movs	r0, #62	; 0x3e
 80058b6:	f7ff fa91 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 80058ba:	e08c      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 251	:
		case 252	:
		case 253	:
		case 254	:
			VPP_ApplyPresetToSignal( VPP64	);
 80058bc:	203f      	movs	r0, #63	; 0x3f
 80058be:	f7ff fa8d 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 80058c2:	e088      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 255	:
		case 256	:
		case 257	:
		case 258	:
			VPP_ApplyPresetToSignal( VPP65	);
 80058c4:	2040      	movs	r0, #64	; 0x40
 80058c6:	f7ff fa89 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 80058ca:	e084      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 259	:
		case 260	:
		case 261	:
		case 262	:
			VPP_ApplyPresetToSignal( VPP66	);
 80058cc:	2041      	movs	r0, #65	; 0x41
 80058ce:	f7ff fa85 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 80058d2:	e080      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 263	:
		case 264	:
		case 265	:
		case 266	:
			VPP_ApplyPresetToSignal( VPP67	);
 80058d4:	2042      	movs	r0, #66	; 0x42
 80058d6:	f7ff fa81 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 80058da:	e07c      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 267	:
		case 268	:
		case 269	:
		case 270	:
			VPP_ApplyPresetToSignal( VPP68	);
 80058dc:	2043      	movs	r0, #67	; 0x43
 80058de:	f7ff fa7d 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 80058e2:	e078      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 271	:
		case 272	:
		case 273	:
		case 274	:
			VPP_ApplyPresetToSignal( VPP69	);
 80058e4:	2044      	movs	r0, #68	; 0x44
 80058e6:	f7ff fa79 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 80058ea:	e074      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 275	:
		case 276	:
		case 277	:
		case 278	:
			VPP_ApplyPresetToSignal( VPP70	);
 80058ec:	2045      	movs	r0, #69	; 0x45
 80058ee:	f7ff fa75 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 80058f2:	e070      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 279	:
		case 280	:
		case 281	:
		case 282	:
			VPP_ApplyPresetToSignal( VPP71	);
 80058f4:	2046      	movs	r0, #70	; 0x46
 80058f6:	f7ff fa71 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 80058fa:	e06c      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 283	:
		case 284	:
		case 285	:
		case 286	:
			VPP_ApplyPresetToSignal( VPP72	);
 80058fc:	2047      	movs	r0, #71	; 0x47
 80058fe:	f7ff fa6d 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 8005902:	e068      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 287	:
		case 288	:
		case 289	:
		case 290	:
			VPP_ApplyPresetToSignal( VPP73	);
 8005904:	2048      	movs	r0, #72	; 0x48
 8005906:	f7ff fa69 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 800590a:	e064      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 291	:
		case 292	:
		case 293	:
		case 294	:
			VPP_ApplyPresetToSignal( VPP74	);
 800590c:	2049      	movs	r0, #73	; 0x49
 800590e:	f7ff fa65 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 8005912:	e060      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 295	:
		case 296	:
		case 297	:
		case 298	:
			VPP_ApplyPresetToSignal( VPP75	);
 8005914:	204a      	movs	r0, #74	; 0x4a
 8005916:	f7ff fa61 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 800591a:	e05c      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 299	:
		case 300	:
		case 301	:
		case 302	:
			VPP_ApplyPresetToSignal( VPP76	);
 800591c:	204b      	movs	r0, #75	; 0x4b
 800591e:	f7ff fa5d 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 8005922:	e058      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 303	:
		case 304	:
		case 305	:
		case 306	:
			VPP_ApplyPresetToSignal( VPP77	);
 8005924:	204c      	movs	r0, #76	; 0x4c
 8005926:	f7ff fa59 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 800592a:	e054      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 307	:
		case 308	:
		case 309	:
		case 310	:
			VPP_ApplyPresetToSignal( VPP78	);
 800592c:	204d      	movs	r0, #77	; 0x4d
 800592e:	f7ff fa55 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 8005932:	e050      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 311	:
		case 312	:
		case 313	:
		case 314	:
			VPP_ApplyPresetToSignal( VPP79	);
 8005934:	204e      	movs	r0, #78	; 0x4e
 8005936:	f7ff fa51 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 800593a:	e04c      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 315	:
		case 316	:
		case 317	:
		case 318	:
			VPP_ApplyPresetToSignal( VPP80	);
 800593c:	204f      	movs	r0, #79	; 0x4f
 800593e:	f7ff fa4d 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 8005942:	e048      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 319	:
		case 320	:
		case 321	:
		case 322	:
			VPP_ApplyPresetToSignal( VPP81	);
 8005944:	2050      	movs	r0, #80	; 0x50
 8005946:	f7ff fa49 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 800594a:	e044      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 323	:
		case 324	:
		case 325	:
		case 326	:
			VPP_ApplyPresetToSignal( VPP82	);
 800594c:	2051      	movs	r0, #81	; 0x51
 800594e:	f7ff fa45 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 8005952:	e040      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 327	:
		case 328	:
		case 329	:
		case 330	:
			VPP_ApplyPresetToSignal( VPP83	);
 8005954:	2052      	movs	r0, #82	; 0x52
 8005956:	f7ff fa41 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 800595a:	e03c      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 331	:
		case 332	:
		case 333	:
		case 334	:
			VPP_ApplyPresetToSignal( VPP84	);
 800595c:	2053      	movs	r0, #83	; 0x53
 800595e:	f7ff fa3d 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 8005962:	e038      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 335	:
		case 336	:
		case 337	:
		case 338	:
			VPP_ApplyPresetToSignal( VPP85	);
 8005964:	2054      	movs	r0, #84	; 0x54
 8005966:	f7ff fa39 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 800596a:	e034      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 339	:
		case 340	:
		case 341	:
		case 342	:
			VPP_ApplyPresetToSignal( VPP86	);
 800596c:	2055      	movs	r0, #85	; 0x55
 800596e:	f7ff fa35 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 8005972:	e030      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 343	:
		case 344	:
		case 345	:
		case 346	:
			VPP_ApplyPresetToSignal( VPP87	);
 8005974:	2056      	movs	r0, #86	; 0x56
 8005976:	f7ff fa31 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 800597a:	e02c      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 347	:
		case 348	:
		case 349	:
		case 350	:
			VPP_ApplyPresetToSignal( VPP88	);
 800597c:	2057      	movs	r0, #87	; 0x57
 800597e:	f7ff fa2d 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 8005982:	e028      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 351	:
		case 352	:
		case 353	:
		case 354	:
			VPP_ApplyPresetToSignal( VPP89	);
 8005984:	2058      	movs	r0, #88	; 0x58
 8005986:	f7ff fa29 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 800598a:	e024      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 355	:
		case 356	:
		case 357	:
		case 358	:
			VPP_ApplyPresetToSignal( VPP90	);
 800598c:	2059      	movs	r0, #89	; 0x59
 800598e:	f7ff fa25 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 8005992:	e020      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 359	:
		case 360	:
		case 361	:
		case 362	:
			VPP_ApplyPresetToSignal( VPP91	);
 8005994:	205a      	movs	r0, #90	; 0x5a
 8005996:	f7ff fa21 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 800599a:	e01c      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 363	:
		case 364	:
		case 365	:
		case 366	:
			VPP_ApplyPresetToSignal( VPP92	);
 800599c:	205b      	movs	r0, #91	; 0x5b
 800599e:	f7ff fa1d 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 80059a2:	e018      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 367	:
		case 368	:
		case 369	:
		case 370	:
			VPP_ApplyPresetToSignal( VPP93	);
 80059a4:	205c      	movs	r0, #92	; 0x5c
 80059a6:	f7ff fa19 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 80059aa:	e014      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 371	:
		case 372	:
		case 373	:
		case 374	:
			VPP_ApplyPresetToSignal( VPP94	);
 80059ac:	205d      	movs	r0, #93	; 0x5d
 80059ae:	f7ff fa15 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 80059b2:	e010      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 375	:
		case 376	:
		case 377	:
		case 378	:
			VPP_ApplyPresetToSignal( VPP95	);
 80059b4:	205e      	movs	r0, #94	; 0x5e
 80059b6:	f7ff fa11 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 80059ba:	e00c      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 379	:
		case 380	:
		case 381	:
		case 382	:
			VPP_ApplyPresetToSignal( VPP96	);
 80059bc:	205f      	movs	r0, #95	; 0x5f
 80059be:	f7ff fa0d 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 80059c2:	e008      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 383	:
		case 384	:
		case 385	:
		case 386	:
			VPP_ApplyPresetToSignal( VPP97	);
 80059c4:	2060      	movs	r0, #96	; 0x60
 80059c6:	f7ff fa09 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 80059ca:	e004      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>
		case 387	:
		case 388	:
		case 389	:
		case 390	:
			VPP_ApplyPresetToSignal( VPP98	);
 80059cc:	2061      	movs	r0, #97	; 0x61
 80059ce:	f7ff fa05 	bl	8004ddc <VPP_ApplyPresetToSignal>
			break;
 80059d2:	e000      	b.n	80059d6 <VPP_ModifySignalOutput+0x94a>

		default:
			break;
 80059d4:	bf00      	nop
	}
}
 80059d6:	bf00      	nop
 80059d8:	3708      	adds	r7, #8
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop

080059e0 <VPP_ModifySyncOutput>:

 *	@retval None
 *
 */
void VPP_ModifySyncOutput(uint16_t pEncoderValue)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	4603      	mov	r3, r0
 80059e8:	80fb      	strh	r3, [r7, #6]
	switch(pEncoderValue)
 80059ea:	88fb      	ldrh	r3, [r7, #6]
 80059ec:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 80059f0:	f200 849a 	bhi.w	8006328 <VPP_ModifySyncOutput+0x948>
 80059f4:	a201      	add	r2, pc, #4	; (adr r2, 80059fc <VPP_ModifySyncOutput+0x1c>)
 80059f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059fa:	bf00      	nop
 80059fc:	08006019 	.word	0x08006019
 8005a00:	08006019 	.word	0x08006019
 8005a04:	08006019 	.word	0x08006019
 8005a08:	08006021 	.word	0x08006021
 8005a0c:	08006021 	.word	0x08006021
 8005a10:	08006021 	.word	0x08006021
 8005a14:	08006021 	.word	0x08006021
 8005a18:	08006029 	.word	0x08006029
 8005a1c:	08006029 	.word	0x08006029
 8005a20:	08006029 	.word	0x08006029
 8005a24:	08006029 	.word	0x08006029
 8005a28:	08006031 	.word	0x08006031
 8005a2c:	08006031 	.word	0x08006031
 8005a30:	08006031 	.word	0x08006031
 8005a34:	08006031 	.word	0x08006031
 8005a38:	08006039 	.word	0x08006039
 8005a3c:	08006039 	.word	0x08006039
 8005a40:	08006039 	.word	0x08006039
 8005a44:	08006039 	.word	0x08006039
 8005a48:	08006041 	.word	0x08006041
 8005a4c:	08006041 	.word	0x08006041
 8005a50:	08006041 	.word	0x08006041
 8005a54:	08006041 	.word	0x08006041
 8005a58:	08006049 	.word	0x08006049
 8005a5c:	08006049 	.word	0x08006049
 8005a60:	08006049 	.word	0x08006049
 8005a64:	08006049 	.word	0x08006049
 8005a68:	08006051 	.word	0x08006051
 8005a6c:	08006051 	.word	0x08006051
 8005a70:	08006051 	.word	0x08006051
 8005a74:	08006051 	.word	0x08006051
 8005a78:	08006059 	.word	0x08006059
 8005a7c:	08006059 	.word	0x08006059
 8005a80:	08006059 	.word	0x08006059
 8005a84:	08006059 	.word	0x08006059
 8005a88:	08006061 	.word	0x08006061
 8005a8c:	08006061 	.word	0x08006061
 8005a90:	08006061 	.word	0x08006061
 8005a94:	08006061 	.word	0x08006061
 8005a98:	08006069 	.word	0x08006069
 8005a9c:	08006069 	.word	0x08006069
 8005aa0:	08006069 	.word	0x08006069
 8005aa4:	08006069 	.word	0x08006069
 8005aa8:	08006071 	.word	0x08006071
 8005aac:	08006071 	.word	0x08006071
 8005ab0:	08006071 	.word	0x08006071
 8005ab4:	08006071 	.word	0x08006071
 8005ab8:	08006079 	.word	0x08006079
 8005abc:	08006079 	.word	0x08006079
 8005ac0:	08006079 	.word	0x08006079
 8005ac4:	08006079 	.word	0x08006079
 8005ac8:	08006081 	.word	0x08006081
 8005acc:	08006081 	.word	0x08006081
 8005ad0:	08006081 	.word	0x08006081
 8005ad4:	08006081 	.word	0x08006081
 8005ad8:	08006089 	.word	0x08006089
 8005adc:	08006089 	.word	0x08006089
 8005ae0:	08006089 	.word	0x08006089
 8005ae4:	08006089 	.word	0x08006089
 8005ae8:	08006091 	.word	0x08006091
 8005aec:	08006091 	.word	0x08006091
 8005af0:	08006091 	.word	0x08006091
 8005af4:	08006091 	.word	0x08006091
 8005af8:	08006099 	.word	0x08006099
 8005afc:	08006099 	.word	0x08006099
 8005b00:	08006099 	.word	0x08006099
 8005b04:	08006099 	.word	0x08006099
 8005b08:	080060a1 	.word	0x080060a1
 8005b0c:	080060a1 	.word	0x080060a1
 8005b10:	080060a1 	.word	0x080060a1
 8005b14:	080060a1 	.word	0x080060a1
 8005b18:	080060a9 	.word	0x080060a9
 8005b1c:	080060a9 	.word	0x080060a9
 8005b20:	080060a9 	.word	0x080060a9
 8005b24:	080060a9 	.word	0x080060a9
 8005b28:	080060b1 	.word	0x080060b1
 8005b2c:	080060b1 	.word	0x080060b1
 8005b30:	080060b1 	.word	0x080060b1
 8005b34:	080060b1 	.word	0x080060b1
 8005b38:	080060b9 	.word	0x080060b9
 8005b3c:	080060b9 	.word	0x080060b9
 8005b40:	080060b9 	.word	0x080060b9
 8005b44:	080060b9 	.word	0x080060b9
 8005b48:	080060c1 	.word	0x080060c1
 8005b4c:	080060c1 	.word	0x080060c1
 8005b50:	080060c1 	.word	0x080060c1
 8005b54:	080060c1 	.word	0x080060c1
 8005b58:	080060c9 	.word	0x080060c9
 8005b5c:	080060c9 	.word	0x080060c9
 8005b60:	080060c9 	.word	0x080060c9
 8005b64:	080060c9 	.word	0x080060c9
 8005b68:	080060d1 	.word	0x080060d1
 8005b6c:	080060d1 	.word	0x080060d1
 8005b70:	080060d1 	.word	0x080060d1
 8005b74:	080060d1 	.word	0x080060d1
 8005b78:	080060d9 	.word	0x080060d9
 8005b7c:	080060d9 	.word	0x080060d9
 8005b80:	080060d9 	.word	0x080060d9
 8005b84:	080060d9 	.word	0x080060d9
 8005b88:	080060e1 	.word	0x080060e1
 8005b8c:	080060e1 	.word	0x080060e1
 8005b90:	080060e1 	.word	0x080060e1
 8005b94:	080060e1 	.word	0x080060e1
 8005b98:	080060e9 	.word	0x080060e9
 8005b9c:	080060e9 	.word	0x080060e9
 8005ba0:	080060e9 	.word	0x080060e9
 8005ba4:	080060e9 	.word	0x080060e9
 8005ba8:	080060f1 	.word	0x080060f1
 8005bac:	080060f1 	.word	0x080060f1
 8005bb0:	080060f1 	.word	0x080060f1
 8005bb4:	080060f1 	.word	0x080060f1
 8005bb8:	080060f9 	.word	0x080060f9
 8005bbc:	080060f9 	.word	0x080060f9
 8005bc0:	080060f9 	.word	0x080060f9
 8005bc4:	080060f9 	.word	0x080060f9
 8005bc8:	08006101 	.word	0x08006101
 8005bcc:	08006101 	.word	0x08006101
 8005bd0:	08006101 	.word	0x08006101
 8005bd4:	08006101 	.word	0x08006101
 8005bd8:	08006109 	.word	0x08006109
 8005bdc:	08006109 	.word	0x08006109
 8005be0:	08006109 	.word	0x08006109
 8005be4:	08006109 	.word	0x08006109
 8005be8:	08006111 	.word	0x08006111
 8005bec:	08006111 	.word	0x08006111
 8005bf0:	08006111 	.word	0x08006111
 8005bf4:	08006111 	.word	0x08006111
 8005bf8:	08006119 	.word	0x08006119
 8005bfc:	08006119 	.word	0x08006119
 8005c00:	08006119 	.word	0x08006119
 8005c04:	08006119 	.word	0x08006119
 8005c08:	08006121 	.word	0x08006121
 8005c0c:	08006121 	.word	0x08006121
 8005c10:	08006121 	.word	0x08006121
 8005c14:	08006121 	.word	0x08006121
 8005c18:	08006129 	.word	0x08006129
 8005c1c:	08006129 	.word	0x08006129
 8005c20:	08006129 	.word	0x08006129
 8005c24:	08006129 	.word	0x08006129
 8005c28:	08006131 	.word	0x08006131
 8005c2c:	08006131 	.word	0x08006131
 8005c30:	08006131 	.word	0x08006131
 8005c34:	08006131 	.word	0x08006131
 8005c38:	08006139 	.word	0x08006139
 8005c3c:	08006139 	.word	0x08006139
 8005c40:	08006139 	.word	0x08006139
 8005c44:	08006139 	.word	0x08006139
 8005c48:	08006141 	.word	0x08006141
 8005c4c:	08006141 	.word	0x08006141
 8005c50:	08006141 	.word	0x08006141
 8005c54:	08006141 	.word	0x08006141
 8005c58:	08006149 	.word	0x08006149
 8005c5c:	08006149 	.word	0x08006149
 8005c60:	08006149 	.word	0x08006149
 8005c64:	08006149 	.word	0x08006149
 8005c68:	08006151 	.word	0x08006151
 8005c6c:	08006151 	.word	0x08006151
 8005c70:	08006151 	.word	0x08006151
 8005c74:	08006151 	.word	0x08006151
 8005c78:	08006159 	.word	0x08006159
 8005c7c:	08006159 	.word	0x08006159
 8005c80:	08006159 	.word	0x08006159
 8005c84:	08006159 	.word	0x08006159
 8005c88:	08006161 	.word	0x08006161
 8005c8c:	08006161 	.word	0x08006161
 8005c90:	08006161 	.word	0x08006161
 8005c94:	08006161 	.word	0x08006161
 8005c98:	08006169 	.word	0x08006169
 8005c9c:	08006169 	.word	0x08006169
 8005ca0:	08006169 	.word	0x08006169
 8005ca4:	08006169 	.word	0x08006169
 8005ca8:	08006171 	.word	0x08006171
 8005cac:	08006171 	.word	0x08006171
 8005cb0:	08006171 	.word	0x08006171
 8005cb4:	08006171 	.word	0x08006171
 8005cb8:	08006179 	.word	0x08006179
 8005cbc:	08006179 	.word	0x08006179
 8005cc0:	08006179 	.word	0x08006179
 8005cc4:	08006179 	.word	0x08006179
 8005cc8:	08006181 	.word	0x08006181
 8005ccc:	08006181 	.word	0x08006181
 8005cd0:	08006181 	.word	0x08006181
 8005cd4:	08006181 	.word	0x08006181
 8005cd8:	08006189 	.word	0x08006189
 8005cdc:	08006189 	.word	0x08006189
 8005ce0:	08006189 	.word	0x08006189
 8005ce4:	08006189 	.word	0x08006189
 8005ce8:	08006191 	.word	0x08006191
 8005cec:	08006191 	.word	0x08006191
 8005cf0:	08006191 	.word	0x08006191
 8005cf4:	08006191 	.word	0x08006191
 8005cf8:	08006199 	.word	0x08006199
 8005cfc:	08006199 	.word	0x08006199
 8005d00:	08006199 	.word	0x08006199
 8005d04:	08006199 	.word	0x08006199
 8005d08:	080061a1 	.word	0x080061a1
 8005d0c:	080061a1 	.word	0x080061a1
 8005d10:	080061a1 	.word	0x080061a1
 8005d14:	080061a1 	.word	0x080061a1
 8005d18:	080061a9 	.word	0x080061a9
 8005d1c:	080061a9 	.word	0x080061a9
 8005d20:	080061a9 	.word	0x080061a9
 8005d24:	080061a9 	.word	0x080061a9
 8005d28:	080061b1 	.word	0x080061b1
 8005d2c:	080061b1 	.word	0x080061b1
 8005d30:	080061b1 	.word	0x080061b1
 8005d34:	080061b1 	.word	0x080061b1
 8005d38:	080061b9 	.word	0x080061b9
 8005d3c:	080061b9 	.word	0x080061b9
 8005d40:	080061b9 	.word	0x080061b9
 8005d44:	080061b9 	.word	0x080061b9
 8005d48:	080061c1 	.word	0x080061c1
 8005d4c:	080061c1 	.word	0x080061c1
 8005d50:	080061c1 	.word	0x080061c1
 8005d54:	080061c1 	.word	0x080061c1
 8005d58:	080061c9 	.word	0x080061c9
 8005d5c:	080061c9 	.word	0x080061c9
 8005d60:	080061c9 	.word	0x080061c9
 8005d64:	080061c9 	.word	0x080061c9
 8005d68:	080061d1 	.word	0x080061d1
 8005d6c:	080061d1 	.word	0x080061d1
 8005d70:	080061d1 	.word	0x080061d1
 8005d74:	080061d1 	.word	0x080061d1
 8005d78:	080061d9 	.word	0x080061d9
 8005d7c:	080061d9 	.word	0x080061d9
 8005d80:	080061d9 	.word	0x080061d9
 8005d84:	080061d9 	.word	0x080061d9
 8005d88:	080061e1 	.word	0x080061e1
 8005d8c:	080061e1 	.word	0x080061e1
 8005d90:	080061e1 	.word	0x080061e1
 8005d94:	080061e1 	.word	0x080061e1
 8005d98:	080061e9 	.word	0x080061e9
 8005d9c:	080061e9 	.word	0x080061e9
 8005da0:	080061e9 	.word	0x080061e9
 8005da4:	080061e9 	.word	0x080061e9
 8005da8:	080061f1 	.word	0x080061f1
 8005dac:	080061f1 	.word	0x080061f1
 8005db0:	080061f1 	.word	0x080061f1
 8005db4:	080061f1 	.word	0x080061f1
 8005db8:	080061f9 	.word	0x080061f9
 8005dbc:	080061f9 	.word	0x080061f9
 8005dc0:	080061f9 	.word	0x080061f9
 8005dc4:	080061f9 	.word	0x080061f9
 8005dc8:	08006201 	.word	0x08006201
 8005dcc:	08006201 	.word	0x08006201
 8005dd0:	08006201 	.word	0x08006201
 8005dd4:	08006201 	.word	0x08006201
 8005dd8:	08006209 	.word	0x08006209
 8005ddc:	08006209 	.word	0x08006209
 8005de0:	08006209 	.word	0x08006209
 8005de4:	08006209 	.word	0x08006209
 8005de8:	08006211 	.word	0x08006211
 8005dec:	08006211 	.word	0x08006211
 8005df0:	08006211 	.word	0x08006211
 8005df4:	08006211 	.word	0x08006211
 8005df8:	08006219 	.word	0x08006219
 8005dfc:	08006219 	.word	0x08006219
 8005e00:	08006219 	.word	0x08006219
 8005e04:	08006219 	.word	0x08006219
 8005e08:	08006221 	.word	0x08006221
 8005e0c:	08006221 	.word	0x08006221
 8005e10:	08006221 	.word	0x08006221
 8005e14:	08006221 	.word	0x08006221
 8005e18:	08006229 	.word	0x08006229
 8005e1c:	08006229 	.word	0x08006229
 8005e20:	08006229 	.word	0x08006229
 8005e24:	08006229 	.word	0x08006229
 8005e28:	08006231 	.word	0x08006231
 8005e2c:	08006231 	.word	0x08006231
 8005e30:	08006231 	.word	0x08006231
 8005e34:	08006231 	.word	0x08006231
 8005e38:	08006239 	.word	0x08006239
 8005e3c:	08006239 	.word	0x08006239
 8005e40:	08006239 	.word	0x08006239
 8005e44:	08006239 	.word	0x08006239
 8005e48:	08006241 	.word	0x08006241
 8005e4c:	08006241 	.word	0x08006241
 8005e50:	08006241 	.word	0x08006241
 8005e54:	08006241 	.word	0x08006241
 8005e58:	08006249 	.word	0x08006249
 8005e5c:	08006249 	.word	0x08006249
 8005e60:	08006249 	.word	0x08006249
 8005e64:	08006249 	.word	0x08006249
 8005e68:	08006251 	.word	0x08006251
 8005e6c:	08006251 	.word	0x08006251
 8005e70:	08006251 	.word	0x08006251
 8005e74:	08006251 	.word	0x08006251
 8005e78:	08006259 	.word	0x08006259
 8005e7c:	08006259 	.word	0x08006259
 8005e80:	08006259 	.word	0x08006259
 8005e84:	08006259 	.word	0x08006259
 8005e88:	08006261 	.word	0x08006261
 8005e8c:	08006261 	.word	0x08006261
 8005e90:	08006261 	.word	0x08006261
 8005e94:	08006261 	.word	0x08006261
 8005e98:	08006269 	.word	0x08006269
 8005e9c:	08006269 	.word	0x08006269
 8005ea0:	08006269 	.word	0x08006269
 8005ea4:	08006269 	.word	0x08006269
 8005ea8:	08006271 	.word	0x08006271
 8005eac:	08006271 	.word	0x08006271
 8005eb0:	08006271 	.word	0x08006271
 8005eb4:	08006271 	.word	0x08006271
 8005eb8:	08006279 	.word	0x08006279
 8005ebc:	08006279 	.word	0x08006279
 8005ec0:	08006279 	.word	0x08006279
 8005ec4:	08006279 	.word	0x08006279
 8005ec8:	08006281 	.word	0x08006281
 8005ecc:	08006281 	.word	0x08006281
 8005ed0:	08006281 	.word	0x08006281
 8005ed4:	08006281 	.word	0x08006281
 8005ed8:	08006289 	.word	0x08006289
 8005edc:	08006289 	.word	0x08006289
 8005ee0:	08006289 	.word	0x08006289
 8005ee4:	08006289 	.word	0x08006289
 8005ee8:	08006291 	.word	0x08006291
 8005eec:	08006291 	.word	0x08006291
 8005ef0:	08006291 	.word	0x08006291
 8005ef4:	08006291 	.word	0x08006291
 8005ef8:	08006299 	.word	0x08006299
 8005efc:	08006299 	.word	0x08006299
 8005f00:	08006299 	.word	0x08006299
 8005f04:	08006299 	.word	0x08006299
 8005f08:	080062a1 	.word	0x080062a1
 8005f0c:	080062a1 	.word	0x080062a1
 8005f10:	080062a1 	.word	0x080062a1
 8005f14:	080062a1 	.word	0x080062a1
 8005f18:	080062a9 	.word	0x080062a9
 8005f1c:	080062a9 	.word	0x080062a9
 8005f20:	080062a9 	.word	0x080062a9
 8005f24:	080062a9 	.word	0x080062a9
 8005f28:	080062b1 	.word	0x080062b1
 8005f2c:	080062b1 	.word	0x080062b1
 8005f30:	080062b1 	.word	0x080062b1
 8005f34:	080062b1 	.word	0x080062b1
 8005f38:	080062b9 	.word	0x080062b9
 8005f3c:	080062b9 	.word	0x080062b9
 8005f40:	080062b9 	.word	0x080062b9
 8005f44:	080062b9 	.word	0x080062b9
 8005f48:	080062c1 	.word	0x080062c1
 8005f4c:	080062c1 	.word	0x080062c1
 8005f50:	080062c1 	.word	0x080062c1
 8005f54:	080062c1 	.word	0x080062c1
 8005f58:	080062c9 	.word	0x080062c9
 8005f5c:	080062c9 	.word	0x080062c9
 8005f60:	080062c9 	.word	0x080062c9
 8005f64:	080062c9 	.word	0x080062c9
 8005f68:	080062d1 	.word	0x080062d1
 8005f6c:	080062d1 	.word	0x080062d1
 8005f70:	080062d1 	.word	0x080062d1
 8005f74:	080062d1 	.word	0x080062d1
 8005f78:	080062d9 	.word	0x080062d9
 8005f7c:	080062d9 	.word	0x080062d9
 8005f80:	080062d9 	.word	0x080062d9
 8005f84:	080062d9 	.word	0x080062d9
 8005f88:	080062e1 	.word	0x080062e1
 8005f8c:	080062e1 	.word	0x080062e1
 8005f90:	080062e1 	.word	0x080062e1
 8005f94:	080062e1 	.word	0x080062e1
 8005f98:	080062e9 	.word	0x080062e9
 8005f9c:	080062e9 	.word	0x080062e9
 8005fa0:	080062e9 	.word	0x080062e9
 8005fa4:	080062e9 	.word	0x080062e9
 8005fa8:	080062f1 	.word	0x080062f1
 8005fac:	080062f1 	.word	0x080062f1
 8005fb0:	080062f1 	.word	0x080062f1
 8005fb4:	080062f1 	.word	0x080062f1
 8005fb8:	080062f9 	.word	0x080062f9
 8005fbc:	080062f9 	.word	0x080062f9
 8005fc0:	080062f9 	.word	0x080062f9
 8005fc4:	080062f9 	.word	0x080062f9
 8005fc8:	08006301 	.word	0x08006301
 8005fcc:	08006301 	.word	0x08006301
 8005fd0:	08006301 	.word	0x08006301
 8005fd4:	08006301 	.word	0x08006301
 8005fd8:	08006309 	.word	0x08006309
 8005fdc:	08006309 	.word	0x08006309
 8005fe0:	08006309 	.word	0x08006309
 8005fe4:	08006309 	.word	0x08006309
 8005fe8:	08006311 	.word	0x08006311
 8005fec:	08006311 	.word	0x08006311
 8005ff0:	08006311 	.word	0x08006311
 8005ff4:	08006311 	.word	0x08006311
 8005ff8:	08006319 	.word	0x08006319
 8005ffc:	08006319 	.word	0x08006319
 8006000:	08006319 	.word	0x08006319
 8006004:	08006319 	.word	0x08006319
 8006008:	08006321 	.word	0x08006321
 800600c:	08006321 	.word	0x08006321
 8006010:	08006321 	.word	0x08006321
 8006014:	08006321 	.word	0x08006321
	{
		case 0	:
		case 1	:
		case 2	:
			VPP_ApplyPresetToSync( VPP01 );
 8006018:	2000      	movs	r0, #0
 800601a:	f7fe ff0d 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 800601e:	e184      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 3	:
		case 4	:
		case 5	:
		case 6	:
			VPP_ApplyPresetToSync( VPP02	);
 8006020:	2001      	movs	r0, #1
 8006022:	f7fe ff09 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 8006026:	e180      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 7	:
		case 8	:
		case 9	:
		case 10	:
			VPP_ApplyPresetToSync( VPP03	);
 8006028:	2002      	movs	r0, #2
 800602a:	f7fe ff05 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 800602e:	e17c      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 11	:
		case 12	:
		case 13	:
		case 14	:
			VPP_ApplyPresetToSync( VPP04	);
 8006030:	2003      	movs	r0, #3
 8006032:	f7fe ff01 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 8006036:	e178      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 15	:
		case 16	:
		case 17	:
		case 18	:
			VPP_ApplyPresetToSync( VPP05	);
 8006038:	2004      	movs	r0, #4
 800603a:	f7fe fefd 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 800603e:	e174      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 19	:
		case 20	:
		case 21	:
		case 22	:
			VPP_ApplyPresetToSync( VPP06	);
 8006040:	2005      	movs	r0, #5
 8006042:	f7fe fef9 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 8006046:	e170      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 23	:
		case 24	:
		case 25	:
		case 26	:
			VPP_ApplyPresetToSync( VPP07	);
 8006048:	2006      	movs	r0, #6
 800604a:	f7fe fef5 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 800604e:	e16c      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 27	:
		case 28	:
		case 29	:
		case 30	:
			VPP_ApplyPresetToSync( VPP08	);
 8006050:	2007      	movs	r0, #7
 8006052:	f7fe fef1 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 8006056:	e168      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 31	:
		case 32	:
		case 33	:
		case 34	:
			VPP_ApplyPresetToSync( VPP09	);
 8006058:	2008      	movs	r0, #8
 800605a:	f7fe feed 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 800605e:	e164      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 35	:
		case 36	:
		case 37	:
		case 38	:
			VPP_ApplyPresetToSync( VPP10	);
 8006060:	2009      	movs	r0, #9
 8006062:	f7fe fee9 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 8006066:	e160      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 39	:
		case 40	:
		case 41	:
		case 42	:
			VPP_ApplyPresetToSync( VPP11	);
 8006068:	200a      	movs	r0, #10
 800606a:	f7fe fee5 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 800606e:	e15c      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 43	:
		case 44	:
		case 45	:
		case 46	:
			VPP_ApplyPresetToSync( VPP12	);
 8006070:	200b      	movs	r0, #11
 8006072:	f7fe fee1 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 8006076:	e158      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 47	:
		case 48	:
		case 49	:
		case 50	:
			VPP_ApplyPresetToSync( VPP13	);
 8006078:	200c      	movs	r0, #12
 800607a:	f7fe fedd 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 800607e:	e154      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 51	:
		case 52	:
		case 53	:
		case 54	:
			VPP_ApplyPresetToSync( VPP14	);
 8006080:	200d      	movs	r0, #13
 8006082:	f7fe fed9 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 8006086:	e150      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 55	:
		case 56	:
		case 57	:
		case 58	:
			VPP_ApplyPresetToSync( VPP15	);
 8006088:	200e      	movs	r0, #14
 800608a:	f7fe fed5 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 800608e:	e14c      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 59	:
		case 60	:
		case 61	:
		case 62	:
			VPP_ApplyPresetToSync( VPP16	);
 8006090:	200f      	movs	r0, #15
 8006092:	f7fe fed1 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 8006096:	e148      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 63	:
		case 64	:
		case 65	:
		case 66	:
			VPP_ApplyPresetToSync( VPP17	);
 8006098:	2010      	movs	r0, #16
 800609a:	f7fe fecd 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 800609e:	e144      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 67	:
		case 68	:
		case 69	:
		case 70	:
			VPP_ApplyPresetToSync( VPP18	);
 80060a0:	2011      	movs	r0, #17
 80060a2:	f7fe fec9 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 80060a6:	e140      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 71	:
		case 72	:
		case 73	:
		case 74	:
			VPP_ApplyPresetToSync( VPP19	);
 80060a8:	2012      	movs	r0, #18
 80060aa:	f7fe fec5 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 80060ae:	e13c      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 75	:
		case 76	:
		case 77	:
		case 78	:
			VPP_ApplyPresetToSync( VPP20	);
 80060b0:	2013      	movs	r0, #19
 80060b2:	f7fe fec1 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 80060b6:	e138      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 79	:
		case 80	:
		case 81	:
		case 82	:
			VPP_ApplyPresetToSync( VPP21	);
 80060b8:	2014      	movs	r0, #20
 80060ba:	f7fe febd 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 80060be:	e134      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 83	:
		case 84	:
		case 85	:
		case 86	:
			VPP_ApplyPresetToSync( VPP22	);
 80060c0:	2015      	movs	r0, #21
 80060c2:	f7fe feb9 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 80060c6:	e130      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 87	:
		case 88	:
		case 89	:
		case 90	:
			VPP_ApplyPresetToSync( VPP23	);
 80060c8:	2016      	movs	r0, #22
 80060ca:	f7fe feb5 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 80060ce:	e12c      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 91	:
		case 92	:
		case 93	:
		case 94	:
			VPP_ApplyPresetToSync( VPP24	);
 80060d0:	2017      	movs	r0, #23
 80060d2:	f7fe feb1 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 80060d6:	e128      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 95	:
		case 96	:
		case 97	:
		case 98	:
			VPP_ApplyPresetToSync( VPP25	);
 80060d8:	2018      	movs	r0, #24
 80060da:	f7fe fead 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 80060de:	e124      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 99		:
		case 100	:
		case 101	:
		case 102	:
			VPP_ApplyPresetToSync( VPP26	);
 80060e0:	2019      	movs	r0, #25
 80060e2:	f7fe fea9 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 80060e6:	e120      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 103	:
		case 104	:
		case 105	:
		case 106	:
			VPP_ApplyPresetToSync( VPP27	);
 80060e8:	201a      	movs	r0, #26
 80060ea:	f7fe fea5 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 80060ee:	e11c      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 107	:
		case 108	:
		case 109	:
		case 110	:
			VPP_ApplyPresetToSync( VPP28	);
 80060f0:	201b      	movs	r0, #27
 80060f2:	f7fe fea1 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 80060f6:	e118      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 111	:
		case 112	:
		case 113	:
		case 114	:
			VPP_ApplyPresetToSync( VPP29	);
 80060f8:	201c      	movs	r0, #28
 80060fa:	f7fe fe9d 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 80060fe:	e114      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 115	:
		case 116	:
		case 117	:
		case 118	:
			VPP_ApplyPresetToSync( VPP30	);
 8006100:	201d      	movs	r0, #29
 8006102:	f7fe fe99 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 8006106:	e110      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 119	:
		case 120	:
		case 121	:
		case 122	:
			VPP_ApplyPresetToSync( VPP31	);
 8006108:	201e      	movs	r0, #30
 800610a:	f7fe fe95 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 800610e:	e10c      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 123	:
		case 124	:
		case 125	:
		case 126	:
			VPP_ApplyPresetToSync( VPP32	);
 8006110:	201f      	movs	r0, #31
 8006112:	f7fe fe91 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 8006116:	e108      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 127	:
		case 128	:
		case 129	:
		case 130	:
			VPP_ApplyPresetToSync( VPP33	);
 8006118:	2020      	movs	r0, #32
 800611a:	f7fe fe8d 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 800611e:	e104      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 131	:
		case 132	:
		case 133	:
		case 134	:
			VPP_ApplyPresetToSync( VPP34	);
 8006120:	2021      	movs	r0, #33	; 0x21
 8006122:	f7fe fe89 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 8006126:	e100      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 135	:
		case 136	:
		case 137	:
		case 138	:
			VPP_ApplyPresetToSync( VPP35	);
 8006128:	2022      	movs	r0, #34	; 0x22
 800612a:	f7fe fe85 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 800612e:	e0fc      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 139	:
		case 140	:
		case 141	:
		case 142	:
			VPP_ApplyPresetToSync( VPP36	);
 8006130:	2023      	movs	r0, #35	; 0x23
 8006132:	f7fe fe81 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 8006136:	e0f8      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 143	:
		case 144	:
		case 145	:
		case 146	:
			VPP_ApplyPresetToSync( VPP37	);
 8006138:	2024      	movs	r0, #36	; 0x24
 800613a:	f7fe fe7d 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 800613e:	e0f4      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 147	:
		case 148	:
		case 149	:
		case 150	:
			VPP_ApplyPresetToSync( VPP38	);
 8006140:	2025      	movs	r0, #37	; 0x25
 8006142:	f7fe fe79 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 8006146:	e0f0      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 151	:
		case 152	:
		case 153	:
		case 154	:
			VPP_ApplyPresetToSync( VPP39	);
 8006148:	2026      	movs	r0, #38	; 0x26
 800614a:	f7fe fe75 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 800614e:	e0ec      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 155	:
		case 156	:
		case 157	:
		case 158	:
			VPP_ApplyPresetToSync( VPP40	);
 8006150:	2027      	movs	r0, #39	; 0x27
 8006152:	f7fe fe71 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 8006156:	e0e8      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 159	:
		case 160	:
		case 161	:
		case 162	:
			VPP_ApplyPresetToSync( VPP41	);
 8006158:	2028      	movs	r0, #40	; 0x28
 800615a:	f7fe fe6d 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 800615e:	e0e4      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 163	:
		case 164	:
		case 165	:
		case 166	:
			VPP_ApplyPresetToSync( VPP42	);
 8006160:	2029      	movs	r0, #41	; 0x29
 8006162:	f7fe fe69 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 8006166:	e0e0      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 167	:
		case 168	:
		case 169	:
		case 170	:
			VPP_ApplyPresetToSync( VPP43	);
 8006168:	202a      	movs	r0, #42	; 0x2a
 800616a:	f7fe fe65 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 800616e:	e0dc      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 171	:
		case 172	:
		case 173	:
		case 174	:
			VPP_ApplyPresetToSync( VPP44	);
 8006170:	202b      	movs	r0, #43	; 0x2b
 8006172:	f7fe fe61 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 8006176:	e0d8      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 175	:
		case 176	:
		case 177	:
		case 178	:
			VPP_ApplyPresetToSync( VPP45	);
 8006178:	202c      	movs	r0, #44	; 0x2c
 800617a:	f7fe fe5d 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 800617e:	e0d4      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 179	:
		case 180	:
		case 181	:
		case 182	:
			VPP_ApplyPresetToSync( VPP46	);
 8006180:	202d      	movs	r0, #45	; 0x2d
 8006182:	f7fe fe59 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 8006186:	e0d0      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 183	:
		case 184	:
		case 185	:
		case 186	:
			VPP_ApplyPresetToSync( VPP47	);
 8006188:	202e      	movs	r0, #46	; 0x2e
 800618a:	f7fe fe55 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 800618e:	e0cc      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 187	:
		case 188	:
		case 189	:
		case 190	:
			VPP_ApplyPresetToSync( VPP48	);
 8006190:	202f      	movs	r0, #47	; 0x2f
 8006192:	f7fe fe51 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 8006196:	e0c8      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 191	:
		case 192	:
		case 193	:
		case 194	:
			VPP_ApplyPresetToSync( VPP49	);
 8006198:	2030      	movs	r0, #48	; 0x30
 800619a:	f7fe fe4d 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 800619e:	e0c4      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 195	:
		case 196	:
		case 197	:
		case 198	:
			VPP_ApplyPresetToSync( VPP50	);
 80061a0:	2031      	movs	r0, #49	; 0x31
 80061a2:	f7fe fe49 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 80061a6:	e0c0      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 199	:
		case 200	:
		case 201	:
		case 202	:
			VPP_ApplyPresetToSync( VPP51	);
 80061a8:	2032      	movs	r0, #50	; 0x32
 80061aa:	f7fe fe45 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 80061ae:	e0bc      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 203	:
		case 204	:
		case 205	:
		case 206	:
			VPP_ApplyPresetToSync( VPP52	);
 80061b0:	2033      	movs	r0, #51	; 0x33
 80061b2:	f7fe fe41 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 80061b6:	e0b8      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 207	:
		case 208	:
		case 209	:
		case 210	:
			VPP_ApplyPresetToSync( VPP53	);
 80061b8:	2034      	movs	r0, #52	; 0x34
 80061ba:	f7fe fe3d 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 80061be:	e0b4      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 211	:
		case 212	:
		case 213	:
		case 214	:
			VPP_ApplyPresetToSync( VPP54	);
 80061c0:	2035      	movs	r0, #53	; 0x35
 80061c2:	f7fe fe39 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 80061c6:	e0b0      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 215	:
		case 216	:
		case 217	:
		case 218	:
			VPP_ApplyPresetToSync( VPP55	);
 80061c8:	2036      	movs	r0, #54	; 0x36
 80061ca:	f7fe fe35 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 80061ce:	e0ac      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 219	:
		case 220	:
		case 221	:
		case 222	:
			VPP_ApplyPresetToSync( VPP56	);
 80061d0:	2037      	movs	r0, #55	; 0x37
 80061d2:	f7fe fe31 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 80061d6:	e0a8      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 223	:
		case 224	:
		case 225	:
		case 226	:
			VPP_ApplyPresetToSync( VPP57	);
 80061d8:	2038      	movs	r0, #56	; 0x38
 80061da:	f7fe fe2d 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 80061de:	e0a4      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 227	:
		case 228	:
		case 229	:
		case 230	:
			VPP_ApplyPresetToSync( VPP58	);
 80061e0:	2039      	movs	r0, #57	; 0x39
 80061e2:	f7fe fe29 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 80061e6:	e0a0      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 231	:
		case 232	:
		case 233	:
		case 234	:
			VPP_ApplyPresetToSync( VPP59	);
 80061e8:	203a      	movs	r0, #58	; 0x3a
 80061ea:	f7fe fe25 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 80061ee:	e09c      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 235	:
		case 236	:
		case 237	:
		case 238	:
			VPP_ApplyPresetToSync( VPP60	);
 80061f0:	203b      	movs	r0, #59	; 0x3b
 80061f2:	f7fe fe21 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 80061f6:	e098      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 239	:
		case 240	:
		case 241	:
		case 242	:
			VPP_ApplyPresetToSync( VPP61	);
 80061f8:	203c      	movs	r0, #60	; 0x3c
 80061fa:	f7fe fe1d 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 80061fe:	e094      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 243	:
		case 244	:
		case 245	:
		case 246	:
			VPP_ApplyPresetToSync( VPP62	);
 8006200:	203d      	movs	r0, #61	; 0x3d
 8006202:	f7fe fe19 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 8006206:	e090      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 247	:
		case 248	:
		case 249	:
		case 250	:
			VPP_ApplyPresetToSync( VPP63	);
 8006208:	203e      	movs	r0, #62	; 0x3e
 800620a:	f7fe fe15 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 800620e:	e08c      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 251	:
		case 252	:
		case 253	:
		case 254	:
			VPP_ApplyPresetToSync( VPP64	);
 8006210:	203f      	movs	r0, #63	; 0x3f
 8006212:	f7fe fe11 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 8006216:	e088      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 255	:
		case 256	:
		case 257	:
		case 258	:
			VPP_ApplyPresetToSync( VPP65	);
 8006218:	2040      	movs	r0, #64	; 0x40
 800621a:	f7fe fe0d 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 800621e:	e084      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 259	:
		case 260	:
		case 261	:
		case 262	:
			VPP_ApplyPresetToSync( VPP66	);
 8006220:	2041      	movs	r0, #65	; 0x41
 8006222:	f7fe fe09 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 8006226:	e080      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 263	:
		case 264	:
		case 265	:
		case 266	:
			VPP_ApplyPresetToSync( VPP67	);
 8006228:	2042      	movs	r0, #66	; 0x42
 800622a:	f7fe fe05 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 800622e:	e07c      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 267	:
		case 268	:
		case 269	:
		case 270	:
			VPP_ApplyPresetToSync( VPP68	);
 8006230:	2043      	movs	r0, #67	; 0x43
 8006232:	f7fe fe01 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 8006236:	e078      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 271	:
		case 272	:
		case 273	:
		case 274	:
			VPP_ApplyPresetToSync( VPP69	);
 8006238:	2044      	movs	r0, #68	; 0x44
 800623a:	f7fe fdfd 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 800623e:	e074      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 275	:
		case 276	:
		case 277	:
		case 278	:
			VPP_ApplyPresetToSync( VPP70	);
 8006240:	2045      	movs	r0, #69	; 0x45
 8006242:	f7fe fdf9 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 8006246:	e070      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 279	:
		case 280	:
		case 281	:
		case 282	:
			VPP_ApplyPresetToSync( VPP71	);
 8006248:	2046      	movs	r0, #70	; 0x46
 800624a:	f7fe fdf5 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 800624e:	e06c      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 283	:
		case 284	:
		case 285	:
		case 286	:
			VPP_ApplyPresetToSync( VPP72	);
 8006250:	2047      	movs	r0, #71	; 0x47
 8006252:	f7fe fdf1 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 8006256:	e068      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 287	:
		case 288	:
		case 289	:
		case 290	:
			VPP_ApplyPresetToSync( VPP73	);
 8006258:	2048      	movs	r0, #72	; 0x48
 800625a:	f7fe fded 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 800625e:	e064      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 291	:
		case 292	:
		case 293	:
		case 294	:
			VPP_ApplyPresetToSync( VPP74	);
 8006260:	2049      	movs	r0, #73	; 0x49
 8006262:	f7fe fde9 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 8006266:	e060      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 295	:
		case 296	:
		case 297	:
		case 298	:
			VPP_ApplyPresetToSync( VPP75	);
 8006268:	204a      	movs	r0, #74	; 0x4a
 800626a:	f7fe fde5 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 800626e:	e05c      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 299	:
		case 300	:
		case 301	:
		case 302	:
			VPP_ApplyPresetToSync( VPP76	);
 8006270:	204b      	movs	r0, #75	; 0x4b
 8006272:	f7fe fde1 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 8006276:	e058      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 303	:
		case 304	:
		case 305	:
		case 306	:
			VPP_ApplyPresetToSync( VPP77	);
 8006278:	204c      	movs	r0, #76	; 0x4c
 800627a:	f7fe fddd 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 800627e:	e054      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 307	:
		case 308	:
		case 309	:
		case 310	:
			VPP_ApplyPresetToSync( VPP78	);
 8006280:	204d      	movs	r0, #77	; 0x4d
 8006282:	f7fe fdd9 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 8006286:	e050      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 311	:
		case 312	:
		case 313	:
		case 314	:
			VPP_ApplyPresetToSync( VPP79	);
 8006288:	204e      	movs	r0, #78	; 0x4e
 800628a:	f7fe fdd5 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 800628e:	e04c      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 315	:
		case 316	:
		case 317	:
		case 318	:
			VPP_ApplyPresetToSync( VPP80	);
 8006290:	204f      	movs	r0, #79	; 0x4f
 8006292:	f7fe fdd1 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 8006296:	e048      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 319	:
		case 320	:
		case 321	:
		case 322	:
			VPP_ApplyPresetToSync( VPP81	);
 8006298:	2050      	movs	r0, #80	; 0x50
 800629a:	f7fe fdcd 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 800629e:	e044      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 323	:
		case 324	:
		case 325	:
		case 326	:
			VPP_ApplyPresetToSync( VPP82	);
 80062a0:	2051      	movs	r0, #81	; 0x51
 80062a2:	f7fe fdc9 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 80062a6:	e040      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 327	:
		case 328	:
		case 329	:
		case 330	:
			VPP_ApplyPresetToSync( VPP83	);
 80062a8:	2052      	movs	r0, #82	; 0x52
 80062aa:	f7fe fdc5 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 80062ae:	e03c      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 331	:
		case 332	:
		case 333	:
		case 334	:
			VPP_ApplyPresetToSync( VPP84	);
 80062b0:	2053      	movs	r0, #83	; 0x53
 80062b2:	f7fe fdc1 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 80062b6:	e038      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 335	:
		case 336	:
		case 337	:
		case 338	:
			VPP_ApplyPresetToSync( VPP85	);
 80062b8:	2054      	movs	r0, #84	; 0x54
 80062ba:	f7fe fdbd 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 80062be:	e034      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 339	:
		case 340	:
		case 341	:
		case 342	:
			VPP_ApplyPresetToSync( VPP86	);
 80062c0:	2055      	movs	r0, #85	; 0x55
 80062c2:	f7fe fdb9 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 80062c6:	e030      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 343	:
		case 344	:
		case 345	:
		case 346	:
			VPP_ApplyPresetToSync( VPP87	);
 80062c8:	2056      	movs	r0, #86	; 0x56
 80062ca:	f7fe fdb5 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 80062ce:	e02c      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 347	:
		case 348	:
		case 349	:
		case 350	:
			VPP_ApplyPresetToSync( VPP88	);
 80062d0:	2057      	movs	r0, #87	; 0x57
 80062d2:	f7fe fdb1 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 80062d6:	e028      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 351	:
		case 352	:
		case 353	:
		case 354	:
			VPP_ApplyPresetToSync( VPP89	);
 80062d8:	2058      	movs	r0, #88	; 0x58
 80062da:	f7fe fdad 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 80062de:	e024      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 355	:
		case 356	:
		case 357	:
		case 358	:
			VPP_ApplyPresetToSync( VPP90	);
 80062e0:	2059      	movs	r0, #89	; 0x59
 80062e2:	f7fe fda9 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 80062e6:	e020      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 359	:
		case 360	:
		case 361	:
		case 362	:
			VPP_ApplyPresetToSync( VPP91	);
 80062e8:	205a      	movs	r0, #90	; 0x5a
 80062ea:	f7fe fda5 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 80062ee:	e01c      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 363	:
		case 364	:
		case 365	:
		case 366	:
			VPP_ApplyPresetToSync( VPP92	);
 80062f0:	205b      	movs	r0, #91	; 0x5b
 80062f2:	f7fe fda1 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 80062f6:	e018      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 367	:
		case 368	:
		case 369	:
		case 370	:
			VPP_ApplyPresetToSync( VPP93	);
 80062f8:	205c      	movs	r0, #92	; 0x5c
 80062fa:	f7fe fd9d 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 80062fe:	e014      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 371	:
		case 372	:
		case 373	:
		case 374	:
			VPP_ApplyPresetToSync( VPP94	);
 8006300:	205d      	movs	r0, #93	; 0x5d
 8006302:	f7fe fd99 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 8006306:	e010      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 375	:
		case 376	:
		case 377	:
		case 378	:
			VPP_ApplyPresetToSync( VPP95	);
 8006308:	205e      	movs	r0, #94	; 0x5e
 800630a:	f7fe fd95 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 800630e:	e00c      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 379	:
		case 380	:
		case 381	:
		case 382	:
			VPP_ApplyPresetToSync( VPP96	);
 8006310:	205f      	movs	r0, #95	; 0x5f
 8006312:	f7fe fd91 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 8006316:	e008      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 383	:
		case 384	:
		case 385	:
		case 386	:
			VPP_ApplyPresetToSync( VPP97	);
 8006318:	2060      	movs	r0, #96	; 0x60
 800631a:	f7fe fd8d 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 800631e:	e004      	b.n	800632a <VPP_ModifySyncOutput+0x94a>
		case 387	:
		case 388	:
		case 389	:
		case 390	:
			VPP_ApplyPresetToSync( VPP98	);
 8006320:	2061      	movs	r0, #97	; 0x61
 8006322:	f7fe fd89 	bl	8004e38 <VPP_ApplyPresetToSync>
			break;
 8006326:	e000      	b.n	800632a <VPP_ModifySyncOutput+0x94a>

		default:
			break;
 8006328:	bf00      	nop
	}
}
 800632a:	bf00      	nop
 800632c:	3708      	adds	r7, #8
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop

08006334 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b08c      	sub	sp, #48	; 0x30
 8006338:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 800633a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800633e:	2200      	movs	r2, #0
 8006340:	601a      	str	r2, [r3, #0]
 8006342:	605a      	str	r2, [r3, #4]
 8006344:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8006346:	1d3b      	adds	r3, r7, #4
 8006348:	2220      	movs	r2, #32
 800634a:	2100      	movs	r1, #0
 800634c:	4618      	mov	r0, r3
 800634e:	f007 fe7d 	bl	800e04c <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8006352:	4b32      	ldr	r3, [pc, #200]	; (800641c <MX_ADC1_Init+0xe8>)
 8006354:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006358:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800635a:	4b30      	ldr	r3, [pc, #192]	; (800641c <MX_ADC1_Init+0xe8>)
 800635c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006360:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006362:	4b2e      	ldr	r3, [pc, #184]	; (800641c <MX_ADC1_Init+0xe8>)
 8006364:	2200      	movs	r2, #0
 8006366:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006368:	4b2c      	ldr	r3, [pc, #176]	; (800641c <MX_ADC1_Init+0xe8>)
 800636a:	2200      	movs	r2, #0
 800636c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800636e:	4b2b      	ldr	r3, [pc, #172]	; (800641c <MX_ADC1_Init+0xe8>)
 8006370:	2200      	movs	r2, #0
 8006372:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006374:	4b29      	ldr	r3, [pc, #164]	; (800641c <MX_ADC1_Init+0xe8>)
 8006376:	2200      	movs	r2, #0
 8006378:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800637a:	4b28      	ldr	r3, [pc, #160]	; (800641c <MX_ADC1_Init+0xe8>)
 800637c:	2204      	movs	r2, #4
 800637e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8006380:	4b26      	ldr	r3, [pc, #152]	; (800641c <MX_ADC1_Init+0xe8>)
 8006382:	2200      	movs	r2, #0
 8006384:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8006386:	4b25      	ldr	r3, [pc, #148]	; (800641c <MX_ADC1_Init+0xe8>)
 8006388:	2201      	movs	r2, #1
 800638a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800638c:	4b23      	ldr	r3, [pc, #140]	; (800641c <MX_ADC1_Init+0xe8>)
 800638e:	2201      	movs	r2, #1
 8006390:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006392:	4b22      	ldr	r3, [pc, #136]	; (800641c <MX_ADC1_Init+0xe8>)
 8006394:	2200      	movs	r2, #0
 8006396:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800639a:	4b20      	ldr	r3, [pc, #128]	; (800641c <MX_ADC1_Init+0xe8>)
 800639c:	2200      	movs	r2, #0
 800639e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80063a0:	4b1e      	ldr	r3, [pc, #120]	; (800641c <MX_ADC1_Init+0xe8>)
 80063a2:	2200      	movs	r2, #0
 80063a4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80063a6:	4b1d      	ldr	r3, [pc, #116]	; (800641c <MX_ADC1_Init+0xe8>)
 80063a8:	2201      	movs	r2, #1
 80063aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80063ae:	4b1b      	ldr	r3, [pc, #108]	; (800641c <MX_ADC1_Init+0xe8>)
 80063b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80063b4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80063b6:	4b19      	ldr	r3, [pc, #100]	; (800641c <MX_ADC1_Init+0xe8>)
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80063be:	4817      	ldr	r0, [pc, #92]	; (800641c <MX_ADC1_Init+0xe8>)
 80063c0:	f001 fefe 	bl	80081c0 <HAL_ADC_Init>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d001      	beq.n	80063ce <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 80063ca:	f000 febd 	bl	8007148 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80063ce:	2300      	movs	r3, #0
 80063d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80063d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063d6:	4619      	mov	r1, r3
 80063d8:	4810      	ldr	r0, [pc, #64]	; (800641c <MX_ADC1_Init+0xe8>)
 80063da:	f002 fc87 	bl	8008cec <HAL_ADCEx_MultiModeConfigChannel>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d001      	beq.n	80063e8 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80063e4:	f000 feb0 	bl	8007148 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80063e8:	4b0d      	ldr	r3, [pc, #52]	; (8006420 <MX_ADC1_Init+0xec>)
 80063ea:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80063ec:	2306      	movs	r3, #6
 80063ee:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80063f0:	2300      	movs	r3, #0
 80063f2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80063f4:	237f      	movs	r3, #127	; 0x7f
 80063f6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80063f8:	2304      	movs	r3, #4
 80063fa:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80063fc:	2300      	movs	r3, #0
 80063fe:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006400:	1d3b      	adds	r3, r7, #4
 8006402:	4619      	mov	r1, r3
 8006404:	4805      	ldr	r0, [pc, #20]	; (800641c <MX_ADC1_Init+0xe8>)
 8006406:	f002 f89b 	bl	8008540 <HAL_ADC_ConfigChannel>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d001      	beq.n	8006414 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8006410:	f000 fe9a 	bl	8007148 <Error_Handler>
  }

}
 8006414:	bf00      	nop
 8006416:	3730      	adds	r7, #48	; 0x30
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	20002510 	.word	0x20002510
 8006420:	0c900008 	.word	0x0c900008

08006424 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b08a      	sub	sp, #40	; 0x28
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800642c:	f107 0314 	add.w	r3, r7, #20
 8006430:	2200      	movs	r2, #0
 8006432:	601a      	str	r2, [r3, #0]
 8006434:	605a      	str	r2, [r3, #4]
 8006436:	609a      	str	r2, [r3, #8]
 8006438:	60da      	str	r2, [r3, #12]
 800643a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006444:	d14f      	bne.n	80064e6 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8006446:	4b2a      	ldr	r3, [pc, #168]	; (80064f0 <HAL_ADC_MspInit+0xcc>)
 8006448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800644a:	4a29      	ldr	r2, [pc, #164]	; (80064f0 <HAL_ADC_MspInit+0xcc>)
 800644c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006450:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006452:	4b27      	ldr	r3, [pc, #156]	; (80064f0 <HAL_ADC_MspInit+0xcc>)
 8006454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006456:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800645a:	613b      	str	r3, [r7, #16]
 800645c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800645e:	4b24      	ldr	r3, [pc, #144]	; (80064f0 <HAL_ADC_MspInit+0xcc>)
 8006460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006462:	4a23      	ldr	r2, [pc, #140]	; (80064f0 <HAL_ADC_MspInit+0xcc>)
 8006464:	f043 0301 	orr.w	r3, r3, #1
 8006468:	64d3      	str	r3, [r2, #76]	; 0x4c
 800646a:	4b21      	ldr	r3, [pc, #132]	; (80064f0 <HAL_ADC_MspInit+0xcc>)
 800646c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800646e:	f003 0301 	and.w	r3, r3, #1
 8006472:	60fb      	str	r3, [r7, #12]
 8006474:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006476:	2304      	movs	r3, #4
 8006478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800647a:	2303      	movs	r3, #3
 800647c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800647e:	2300      	movs	r3, #0
 8006480:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006482:	f107 0314 	add.w	r3, r7, #20
 8006486:	4619      	mov	r1, r3
 8006488:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800648c:	f004 f810 	bl	800a4b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8006490:	4b18      	ldr	r3, [pc, #96]	; (80064f4 <HAL_ADC_MspInit+0xd0>)
 8006492:	4a19      	ldr	r2, [pc, #100]	; (80064f8 <HAL_ADC_MspInit+0xd4>)
 8006494:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8006496:	4b17      	ldr	r3, [pc, #92]	; (80064f4 <HAL_ADC_MspInit+0xd0>)
 8006498:	2205      	movs	r2, #5
 800649a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800649c:	4b15      	ldr	r3, [pc, #84]	; (80064f4 <HAL_ADC_MspInit+0xd0>)
 800649e:	2200      	movs	r2, #0
 80064a0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80064a2:	4b14      	ldr	r3, [pc, #80]	; (80064f4 <HAL_ADC_MspInit+0xd0>)
 80064a4:	2200      	movs	r2, #0
 80064a6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80064a8:	4b12      	ldr	r3, [pc, #72]	; (80064f4 <HAL_ADC_MspInit+0xd0>)
 80064aa:	2280      	movs	r2, #128	; 0x80
 80064ac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80064ae:	4b11      	ldr	r3, [pc, #68]	; (80064f4 <HAL_ADC_MspInit+0xd0>)
 80064b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064b4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80064b6:	4b0f      	ldr	r3, [pc, #60]	; (80064f4 <HAL_ADC_MspInit+0xd0>)
 80064b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80064be:	4b0d      	ldr	r3, [pc, #52]	; (80064f4 <HAL_ADC_MspInit+0xd0>)
 80064c0:	2220      	movs	r2, #32
 80064c2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80064c4:	4b0b      	ldr	r3, [pc, #44]	; (80064f4 <HAL_ADC_MspInit+0xd0>)
 80064c6:	2200      	movs	r2, #0
 80064c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80064ca:	480a      	ldr	r0, [pc, #40]	; (80064f4 <HAL_ADC_MspInit+0xd0>)
 80064cc:	f003 fd24 	bl	8009f18 <HAL_DMA_Init>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d001      	beq.n	80064da <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 80064d6:	f000 fe37 	bl	8007148 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a05      	ldr	r2, [pc, #20]	; (80064f4 <HAL_ADC_MspInit+0xd0>)
 80064de:	655a      	str	r2, [r3, #84]	; 0x54
 80064e0:	4a04      	ldr	r2, [pc, #16]	; (80064f4 <HAL_ADC_MspInit+0xd0>)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80064e6:	bf00      	nop
 80064e8:	3728      	adds	r7, #40	; 0x28
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	40021000 	.word	0x40021000
 80064f4:	2000257c 	.word	0x2000257c
 80064f8:	40020008 	.word	0x40020008

080064fc <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8006500:	4b0f      	ldr	r3, [pc, #60]	; (8006540 <MX_COMP1_Init+0x44>)
 8006502:	4a10      	ldr	r2, [pc, #64]	; (8006544 <MX_COMP1_Init+0x48>)
 8006504:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8006506:	4b0e      	ldr	r3, [pc, #56]	; (8006540 <MX_COMP1_Init+0x44>)
 8006508:	2200      	movs	r2, #0
 800650a:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 800650c:	4b0c      	ldr	r3, [pc, #48]	; (8006540 <MX_COMP1_Init+0x44>)
 800650e:	4a0e      	ldr	r2, [pc, #56]	; (8006548 <MX_COMP1_Init+0x4c>)
 8006510:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8006512:	4b0b      	ldr	r3, [pc, #44]	; (8006540 <MX_COMP1_Init+0x44>)
 8006514:	2200      	movs	r2, #0
 8006516:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8006518:	4b09      	ldr	r3, [pc, #36]	; (8006540 <MX_COMP1_Init+0x44>)
 800651a:	2200      	movs	r2, #0
 800651c:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800651e:	4b08      	ldr	r3, [pc, #32]	; (8006540 <MX_COMP1_Init+0x44>)
 8006520:	2200      	movs	r2, #0
 8006522:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8006524:	4b06      	ldr	r3, [pc, #24]	; (8006540 <MX_COMP1_Init+0x44>)
 8006526:	2200      	movs	r2, #0
 8006528:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800652a:	4805      	ldr	r0, [pc, #20]	; (8006540 <MX_COMP1_Init+0x44>)
 800652c:	f002 fe32 	bl	8009194 <HAL_COMP_Init>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d001      	beq.n	800653a <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 8006536:	f000 fe07 	bl	8007148 <Error_Handler>
  }

}
 800653a:	bf00      	nop
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	200025dc 	.word	0x200025dc
 8006544:	40010200 	.word	0x40010200
 8006548:	00800030 	.word	0x00800030

0800654c <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b088      	sub	sp, #32
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006554:	f107 030c 	add.w	r3, r7, #12
 8006558:	2200      	movs	r2, #0
 800655a:	601a      	str	r2, [r3, #0]
 800655c:	605a      	str	r2, [r3, #4]
 800655e:	609a      	str	r2, [r3, #8]
 8006560:	60da      	str	r2, [r3, #12]
 8006562:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a0f      	ldr	r2, [pc, #60]	; (80065a8 <HAL_COMP_MspInit+0x5c>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d118      	bne.n	80065a0 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800656e:	4b0f      	ldr	r3, [pc, #60]	; (80065ac <HAL_COMP_MspInit+0x60>)
 8006570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006572:	4a0e      	ldr	r2, [pc, #56]	; (80065ac <HAL_COMP_MspInit+0x60>)
 8006574:	f043 0301 	orr.w	r3, r3, #1
 8006578:	64d3      	str	r3, [r2, #76]	; 0x4c
 800657a:	4b0c      	ldr	r3, [pc, #48]	; (80065ac <HAL_COMP_MspInit+0x60>)
 800657c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800657e:	f003 0301 	and.w	r3, r3, #1
 8006582:	60bb      	str	r3, [r7, #8]
 8006584:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006586:	2302      	movs	r3, #2
 8006588:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800658a:	2303      	movs	r3, #3
 800658c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800658e:	2300      	movs	r3, #0
 8006590:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006592:	f107 030c 	add.w	r3, r7, #12
 8006596:	4619      	mov	r1, r3
 8006598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800659c:	f003 ff88 	bl	800a4b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 80065a0:	bf00      	nop
 80065a2:	3720      	adds	r7, #32
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	40010200 	.word	0x40010200
 80065ac:	40021000 	.word	0x40021000

080065b0 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b08c      	sub	sp, #48	; 0x30
 80065b4:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80065b6:	463b      	mov	r3, r7
 80065b8:	2230      	movs	r2, #48	; 0x30
 80065ba:	2100      	movs	r1, #0
 80065bc:	4618      	mov	r0, r3
 80065be:	f007 fd45 	bl	800e04c <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 80065c2:	4b1e      	ldr	r3, [pc, #120]	; (800663c <MX_DAC1_Init+0x8c>)
 80065c4:	4a1e      	ldr	r2, [pc, #120]	; (8006640 <MX_DAC1_Init+0x90>)
 80065c6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80065c8:	481c      	ldr	r0, [pc, #112]	; (800663c <MX_DAC1_Init+0x8c>)
 80065ca:	f003 f886 	bl	80096da <HAL_DAC_Init>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d001      	beq.n	80065d8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80065d4:	f000 fdb8 	bl	8007148 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80065d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80065dc:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80065de:	2300      	movs	r3, #0
 80065e0:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80065e2:	2300      	movs	r3, #0
 80065e4:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80065e6:	2300      	movs	r3, #0
 80065e8:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80065ea:	2306      	movs	r3, #6
 80065ec:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80065ee:	2300      	movs	r3, #0
 80065f0:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80065f2:	2300      	movs	r3, #0
 80065f4:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80065f6:	2301      	movs	r3, #1
 80065f8:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80065fa:	2300      	movs	r3, #0
 80065fc:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80065fe:	463b      	mov	r3, r7
 8006600:	2200      	movs	r2, #0
 8006602:	4619      	mov	r1, r3
 8006604:	480d      	ldr	r0, [pc, #52]	; (800663c <MX_DAC1_Init+0x8c>)
 8006606:	f003 fa51 	bl	8009aac <HAL_DAC_ConfigChannel>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d001      	beq.n	8006614 <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 8006610:	f000 fd9a 	bl	8007148 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8006614:	2300      	movs	r3, #0
 8006616:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006618:	2301      	movs	r3, #1
 800661a:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800661c:	463b      	mov	r3, r7
 800661e:	2210      	movs	r2, #16
 8006620:	4619      	mov	r1, r3
 8006622:	4806      	ldr	r0, [pc, #24]	; (800663c <MX_DAC1_Init+0x8c>)
 8006624:	f003 fa42 	bl	8009aac <HAL_DAC_ConfigChannel>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d001      	beq.n	8006632 <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 800662e:	f000 fd8b 	bl	8007148 <Error_Handler>
  }

}
 8006632:	bf00      	nop
 8006634:	3730      	adds	r7, #48	; 0x30
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	20002614 	.word	0x20002614
 8006640:	50000800 	.word	0x50000800

08006644 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b08c      	sub	sp, #48	; 0x30
 8006648:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800664a:	463b      	mov	r3, r7
 800664c:	2230      	movs	r2, #48	; 0x30
 800664e:	2100      	movs	r1, #0
 8006650:	4618      	mov	r0, r3
 8006652:	f007 fcfb 	bl	800e04c <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 8006656:	4b16      	ldr	r3, [pc, #88]	; (80066b0 <MX_DAC2_Init+0x6c>)
 8006658:	4a16      	ldr	r2, [pc, #88]	; (80066b4 <MX_DAC2_Init+0x70>)
 800665a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 800665c:	4814      	ldr	r0, [pc, #80]	; (80066b0 <MX_DAC2_Init+0x6c>)
 800665e:	f003 f83c 	bl	80096da <HAL_DAC_Init>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d001      	beq.n	800666c <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8006668:	f000 fd6e 	bl	8007148 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800666c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006670:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8006672:	2300      	movs	r3, #0
 8006674:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8006676:	2300      	movs	r3, #0
 8006678:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800667a:	2300      	movs	r3, #0
 800667c:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 800667e:	2306      	movs	r3, #6
 8006680:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8006682:	2300      	movs	r3, #0
 8006684:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006686:	2300      	movs	r3, #0
 8006688:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800668a:	2301      	movs	r3, #1
 800668c:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800668e:	2300      	movs	r3, #0
 8006690:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8006692:	463b      	mov	r3, r7
 8006694:	2200      	movs	r2, #0
 8006696:	4619      	mov	r1, r3
 8006698:	4805      	ldr	r0, [pc, #20]	; (80066b0 <MX_DAC2_Init+0x6c>)
 800669a:	f003 fa07 	bl	8009aac <HAL_DAC_ConfigChannel>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d001      	beq.n	80066a8 <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 80066a4:	f000 fd50 	bl	8007148 <Error_Handler>
  }

}
 80066a8:	bf00      	nop
 80066aa:	3730      	adds	r7, #48	; 0x30
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	20002600 	.word	0x20002600
 80066b4:	50000c00 	.word	0x50000c00

080066b8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b08c      	sub	sp, #48	; 0x30
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066c0:	f107 031c 	add.w	r3, r7, #28
 80066c4:	2200      	movs	r2, #0
 80066c6:	601a      	str	r2, [r3, #0]
 80066c8:	605a      	str	r2, [r3, #4]
 80066ca:	609a      	str	r2, [r3, #8]
 80066cc:	60da      	str	r2, [r3, #12]
 80066ce:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a56      	ldr	r2, [pc, #344]	; (8006830 <HAL_DAC_MspInit+0x178>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d150      	bne.n	800677c <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80066da:	4b56      	ldr	r3, [pc, #344]	; (8006834 <HAL_DAC_MspInit+0x17c>)
 80066dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066de:	4a55      	ldr	r2, [pc, #340]	; (8006834 <HAL_DAC_MspInit+0x17c>)
 80066e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80066e6:	4b53      	ldr	r3, [pc, #332]	; (8006834 <HAL_DAC_MspInit+0x17c>)
 80066e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066ee:	61bb      	str	r3, [r7, #24]
 80066f0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066f2:	4b50      	ldr	r3, [pc, #320]	; (8006834 <HAL_DAC_MspInit+0x17c>)
 80066f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066f6:	4a4f      	ldr	r2, [pc, #316]	; (8006834 <HAL_DAC_MspInit+0x17c>)
 80066f8:	f043 0301 	orr.w	r3, r3, #1
 80066fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80066fe:	4b4d      	ldr	r3, [pc, #308]	; (8006834 <HAL_DAC_MspInit+0x17c>)
 8006700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006702:	f003 0301 	and.w	r3, r3, #1
 8006706:	617b      	str	r3, [r7, #20]
 8006708:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800670a:	2330      	movs	r3, #48	; 0x30
 800670c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800670e:	2303      	movs	r3, #3
 8006710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006712:	2300      	movs	r3, #0
 8006714:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006716:	f107 031c 	add.w	r3, r7, #28
 800671a:	4619      	mov	r1, r3
 800671c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006720:	f003 fec6 	bl	800a4b0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8006724:	4b44      	ldr	r3, [pc, #272]	; (8006838 <HAL_DAC_MspInit+0x180>)
 8006726:	4a45      	ldr	r2, [pc, #276]	; (800683c <HAL_DAC_MspInit+0x184>)
 8006728:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 800672a:	4b43      	ldr	r3, [pc, #268]	; (8006838 <HAL_DAC_MspInit+0x180>)
 800672c:	2206      	movs	r2, #6
 800672e:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006730:	4b41      	ldr	r3, [pc, #260]	; (8006838 <HAL_DAC_MspInit+0x180>)
 8006732:	2210      	movs	r2, #16
 8006734:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006736:	4b40      	ldr	r3, [pc, #256]	; (8006838 <HAL_DAC_MspInit+0x180>)
 8006738:	2200      	movs	r2, #0
 800673a:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800673c:	4b3e      	ldr	r3, [pc, #248]	; (8006838 <HAL_DAC_MspInit+0x180>)
 800673e:	2280      	movs	r2, #128	; 0x80
 8006740:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006742:	4b3d      	ldr	r3, [pc, #244]	; (8006838 <HAL_DAC_MspInit+0x180>)
 8006744:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006748:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800674a:	4b3b      	ldr	r3, [pc, #236]	; (8006838 <HAL_DAC_MspInit+0x180>)
 800674c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006750:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8006752:	4b39      	ldr	r3, [pc, #228]	; (8006838 <HAL_DAC_MspInit+0x180>)
 8006754:	2220      	movs	r2, #32
 8006756:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8006758:	4b37      	ldr	r3, [pc, #220]	; (8006838 <HAL_DAC_MspInit+0x180>)
 800675a:	2200      	movs	r2, #0
 800675c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800675e:	4836      	ldr	r0, [pc, #216]	; (8006838 <HAL_DAC_MspInit+0x180>)
 8006760:	f003 fbda 	bl	8009f18 <HAL_DMA_Init>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d001      	beq.n	800676e <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800676a:	f000 fced 	bl	8007148 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a31      	ldr	r2, [pc, #196]	; (8006838 <HAL_DAC_MspInit+0x180>)
 8006772:	609a      	str	r2, [r3, #8]
 8006774:	4a30      	ldr	r2, [pc, #192]	; (8006838 <HAL_DAC_MspInit+0x180>)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 800677a:	e054      	b.n	8006826 <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a2f      	ldr	r2, [pc, #188]	; (8006840 <HAL_DAC_MspInit+0x188>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d14f      	bne.n	8006826 <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8006786:	4b2b      	ldr	r3, [pc, #172]	; (8006834 <HAL_DAC_MspInit+0x17c>)
 8006788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800678a:	4a2a      	ldr	r2, [pc, #168]	; (8006834 <HAL_DAC_MspInit+0x17c>)
 800678c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006792:	4b28      	ldr	r3, [pc, #160]	; (8006834 <HAL_DAC_MspInit+0x17c>)
 8006794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800679a:	613b      	str	r3, [r7, #16]
 800679c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800679e:	4b25      	ldr	r3, [pc, #148]	; (8006834 <HAL_DAC_MspInit+0x17c>)
 80067a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067a2:	4a24      	ldr	r2, [pc, #144]	; (8006834 <HAL_DAC_MspInit+0x17c>)
 80067a4:	f043 0301 	orr.w	r3, r3, #1
 80067a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80067aa:	4b22      	ldr	r3, [pc, #136]	; (8006834 <HAL_DAC_MspInit+0x17c>)
 80067ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ae:	f003 0301 	and.w	r3, r3, #1
 80067b2:	60fb      	str	r3, [r7, #12]
 80067b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80067b6:	2340      	movs	r3, #64	; 0x40
 80067b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80067ba:	2303      	movs	r3, #3
 80067bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067be:	2300      	movs	r3, #0
 80067c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067c2:	f107 031c 	add.w	r3, r7, #28
 80067c6:	4619      	mov	r1, r3
 80067c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80067cc:	f003 fe70 	bl	800a4b0 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 80067d0:	4b1c      	ldr	r3, [pc, #112]	; (8006844 <HAL_DAC_MspInit+0x18c>)
 80067d2:	4a1d      	ldr	r2, [pc, #116]	; (8006848 <HAL_DAC_MspInit+0x190>)
 80067d4:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 80067d6:	4b1b      	ldr	r3, [pc, #108]	; (8006844 <HAL_DAC_MspInit+0x18c>)
 80067d8:	2229      	movs	r2, #41	; 0x29
 80067da:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80067dc:	4b19      	ldr	r3, [pc, #100]	; (8006844 <HAL_DAC_MspInit+0x18c>)
 80067de:	2210      	movs	r2, #16
 80067e0:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80067e2:	4b18      	ldr	r3, [pc, #96]	; (8006844 <HAL_DAC_MspInit+0x18c>)
 80067e4:	2200      	movs	r2, #0
 80067e6:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80067e8:	4b16      	ldr	r3, [pc, #88]	; (8006844 <HAL_DAC_MspInit+0x18c>)
 80067ea:	2280      	movs	r2, #128	; 0x80
 80067ec:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80067ee:	4b15      	ldr	r3, [pc, #84]	; (8006844 <HAL_DAC_MspInit+0x18c>)
 80067f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067f4:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80067f6:	4b13      	ldr	r3, [pc, #76]	; (8006844 <HAL_DAC_MspInit+0x18c>)
 80067f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067fc:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 80067fe:	4b11      	ldr	r3, [pc, #68]	; (8006844 <HAL_DAC_MspInit+0x18c>)
 8006800:	2220      	movs	r2, #32
 8006802:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8006804:	4b0f      	ldr	r3, [pc, #60]	; (8006844 <HAL_DAC_MspInit+0x18c>)
 8006806:	2200      	movs	r2, #0
 8006808:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 800680a:	480e      	ldr	r0, [pc, #56]	; (8006844 <HAL_DAC_MspInit+0x18c>)
 800680c:	f003 fb84 	bl	8009f18 <HAL_DMA_Init>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d001      	beq.n	800681a <HAL_DAC_MspInit+0x162>
      Error_Handler();
 8006816:	f000 fc97 	bl	8007148 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a09      	ldr	r2, [pc, #36]	; (8006844 <HAL_DAC_MspInit+0x18c>)
 800681e:	609a      	str	r2, [r3, #8]
 8006820:	4a08      	ldr	r2, [pc, #32]	; (8006844 <HAL_DAC_MspInit+0x18c>)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6293      	str	r3, [r2, #40]	; 0x28
}
 8006826:	bf00      	nop
 8006828:	3730      	adds	r7, #48	; 0x30
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	50000800 	.word	0x50000800
 8006834:	40021000 	.word	0x40021000
 8006838:	20002628 	.word	0x20002628
 800683c:	4002001c 	.word	0x4002001c
 8006840:	50000c00 	.word	0x50000c00
 8006844:	20002688 	.word	0x20002688
 8006848:	40020030 	.word	0x40020030

0800684c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b082      	sub	sp, #8
 8006850:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8006852:	4b1a      	ldr	r3, [pc, #104]	; (80068bc <MX_DMA_Init+0x70>)
 8006854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006856:	4a19      	ldr	r2, [pc, #100]	; (80068bc <MX_DMA_Init+0x70>)
 8006858:	f043 0304 	orr.w	r3, r3, #4
 800685c:	6493      	str	r3, [r2, #72]	; 0x48
 800685e:	4b17      	ldr	r3, [pc, #92]	; (80068bc <MX_DMA_Init+0x70>)
 8006860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006862:	f003 0304 	and.w	r3, r3, #4
 8006866:	607b      	str	r3, [r7, #4]
 8006868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800686a:	4b14      	ldr	r3, [pc, #80]	; (80068bc <MX_DMA_Init+0x70>)
 800686c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800686e:	4a13      	ldr	r2, [pc, #76]	; (80068bc <MX_DMA_Init+0x70>)
 8006870:	f043 0301 	orr.w	r3, r3, #1
 8006874:	6493      	str	r3, [r2, #72]	; 0x48
 8006876:	4b11      	ldr	r3, [pc, #68]	; (80068bc <MX_DMA_Init+0x70>)
 8006878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800687a:	f003 0301 	and.w	r3, r3, #1
 800687e:	603b      	str	r3, [r7, #0]
 8006880:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8006882:	2200      	movs	r2, #0
 8006884:	2101      	movs	r1, #1
 8006886:	200b      	movs	r0, #11
 8006888:	f002 fef3 	bl	8009672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800688c:	200b      	movs	r0, #11
 800688e:	f002 ff0a 	bl	80096a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8006892:	2200      	movs	r2, #0
 8006894:	2100      	movs	r1, #0
 8006896:	200c      	movs	r0, #12
 8006898:	f002 feeb 	bl	8009672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800689c:	200c      	movs	r0, #12
 800689e:	f002 ff02 	bl	80096a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80068a2:	2200      	movs	r2, #0
 80068a4:	2100      	movs	r1, #0
 80068a6:	200d      	movs	r0, #13
 80068a8:	f002 fee3 	bl	8009672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80068ac:	200d      	movs	r0, #13
 80068ae:	f002 fefa 	bl	80096a6 <HAL_NVIC_EnableIRQ>

}
 80068b2:	bf00      	nop
 80068b4:	3708      	adds	r7, #8
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	40021000 	.word	0x40021000

080068c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80068c0:	b480      	push	{r7}
 80068c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80068c4:	4b04      	ldr	r3, [pc, #16]	; (80068d8 <__NVIC_GetPriorityGrouping+0x18>)
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	0a1b      	lsrs	r3, r3, #8
 80068ca:	f003 0307 	and.w	r3, r3, #7
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr
 80068d8:	e000ed00 	.word	0xe000ed00

080068dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	4603      	mov	r3, r0
 80068e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80068e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	db0b      	blt.n	8006906 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80068ee:	79fb      	ldrb	r3, [r7, #7]
 80068f0:	f003 021f 	and.w	r2, r3, #31
 80068f4:	4907      	ldr	r1, [pc, #28]	; (8006914 <__NVIC_EnableIRQ+0x38>)
 80068f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068fa:	095b      	lsrs	r3, r3, #5
 80068fc:	2001      	movs	r0, #1
 80068fe:	fa00 f202 	lsl.w	r2, r0, r2
 8006902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006906:	bf00      	nop
 8006908:	370c      	adds	r7, #12
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	e000e100 	.word	0xe000e100

08006918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	4603      	mov	r3, r0
 8006920:	6039      	str	r1, [r7, #0]
 8006922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006928:	2b00      	cmp	r3, #0
 800692a:	db0a      	blt.n	8006942 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	b2da      	uxtb	r2, r3
 8006930:	490c      	ldr	r1, [pc, #48]	; (8006964 <__NVIC_SetPriority+0x4c>)
 8006932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006936:	0112      	lsls	r2, r2, #4
 8006938:	b2d2      	uxtb	r2, r2
 800693a:	440b      	add	r3, r1
 800693c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006940:	e00a      	b.n	8006958 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	b2da      	uxtb	r2, r3
 8006946:	4908      	ldr	r1, [pc, #32]	; (8006968 <__NVIC_SetPriority+0x50>)
 8006948:	79fb      	ldrb	r3, [r7, #7]
 800694a:	f003 030f 	and.w	r3, r3, #15
 800694e:	3b04      	subs	r3, #4
 8006950:	0112      	lsls	r2, r2, #4
 8006952:	b2d2      	uxtb	r2, r2
 8006954:	440b      	add	r3, r1
 8006956:	761a      	strb	r2, [r3, #24]
}
 8006958:	bf00      	nop
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr
 8006964:	e000e100 	.word	0xe000e100
 8006968:	e000ed00 	.word	0xe000ed00

0800696c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800696c:	b480      	push	{r7}
 800696e:	b089      	sub	sp, #36	; 0x24
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f003 0307 	and.w	r3, r3, #7
 800697e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	f1c3 0307 	rsb	r3, r3, #7
 8006986:	2b04      	cmp	r3, #4
 8006988:	bf28      	it	cs
 800698a:	2304      	movcs	r3, #4
 800698c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	3304      	adds	r3, #4
 8006992:	2b06      	cmp	r3, #6
 8006994:	d902      	bls.n	800699c <NVIC_EncodePriority+0x30>
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	3b03      	subs	r3, #3
 800699a:	e000      	b.n	800699e <NVIC_EncodePriority+0x32>
 800699c:	2300      	movs	r3, #0
 800699e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	fa02 f303 	lsl.w	r3, r2, r3
 80069aa:	43da      	mvns	r2, r3
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	401a      	ands	r2, r3
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80069b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	fa01 f303 	lsl.w	r3, r1, r3
 80069be:	43d9      	mvns	r1, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069c4:	4313      	orrs	r3, r2
         );
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3724      	adds	r7, #36	; 0x24
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
	...

080069d4 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 80069de:	4a14      	ldr	r2, [pc, #80]	; (8006a30 <LL_SYSCFG_SetEXTISource+0x5c>)
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	f003 0303 	and.w	r3, r3, #3
 80069e6:	3302      	adds	r3, #2
 80069e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	0c1b      	lsrs	r3, r3, #16
 80069f0:	43db      	mvns	r3, r3
 80069f2:	ea02 0103 	and.w	r1, r2, r3
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	0c1b      	lsrs	r3, r3, #16
 80069fa:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	fa93 f3a3 	rbit	r3, r3
 8006a02:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	fab3 f383 	clz	r3, r3
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	f003 031f 	and.w	r3, r3, #31
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	409a      	lsls	r2, r3
 8006a14:	4806      	ldr	r0, [pc, #24]	; (8006a30 <LL_SYSCFG_SetEXTISource+0x5c>)
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	f003 0303 	and.w	r3, r3, #3
 8006a1c:	430a      	orrs	r2, r1
 8006a1e:	3302      	adds	r3, #2
 8006a20:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8006a24:	bf00      	nop
 8006a26:	3714      	adds	r7, #20
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr
 8006a30:	40010000 	.word	0x40010000

08006a34 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b089      	sub	sp, #36	; 0x24
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	fa93 f3a3 	rbit	r3, r3
 8006a4e:	613b      	str	r3, [r7, #16]
  return result;
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	fab3 f383 	clz	r3, r3
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	005b      	lsls	r3, r3, #1
 8006a5a:	2103      	movs	r1, #3
 8006a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a60:	43db      	mvns	r3, r3
 8006a62:	401a      	ands	r2, r3
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	fa93 f3a3 	rbit	r3, r3
 8006a6e:	61bb      	str	r3, [r7, #24]
  return result;
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	fab3 f383 	clz	r3, r3
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	005b      	lsls	r3, r3, #1
 8006a7a:	6879      	ldr	r1, [r7, #4]
 8006a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a80:	431a      	orrs	r2, r3
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	601a      	str	r2, [r3, #0]
}
 8006a86:	bf00      	nop
 8006a88:	3724      	adds	r7, #36	; 0x24
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr

08006a92 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8006a92:	b480      	push	{r7}
 8006a94:	b089      	sub	sp, #36	; 0x24
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	60f8      	str	r0, [r7, #12]
 8006a9a:	60b9      	str	r1, [r7, #8]
 8006a9c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	68da      	ldr	r2, [r3, #12]
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	fa93 f3a3 	rbit	r3, r3
 8006aac:	613b      	str	r3, [r7, #16]
  return result;
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	fab3 f383 	clz	r3, r3
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	005b      	lsls	r3, r3, #1
 8006ab8:	2103      	movs	r1, #3
 8006aba:	fa01 f303 	lsl.w	r3, r1, r3
 8006abe:	43db      	mvns	r3, r3
 8006ac0:	401a      	ands	r2, r3
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	fa93 f3a3 	rbit	r3, r3
 8006acc:	61bb      	str	r3, [r7, #24]
  return result;
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	fab3 f383 	clz	r3, r3
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	005b      	lsls	r3, r3, #1
 8006ad8:	6879      	ldr	r1, [r7, #4]
 8006ada:	fa01 f303 	lsl.w	r3, r1, r3
 8006ade:	431a      	orrs	r2, r3
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	60da      	str	r2, [r3, #12]
}
 8006ae4:	bf00      	nop
 8006ae6:	3724      	adds	r7, #36	; 0x24
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	683a      	ldr	r2, [r7, #0]
 8006afe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006b00:	bf00      	nop
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006b14:	4b08      	ldr	r3, [pc, #32]	; (8006b38 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006b16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b18:	4907      	ldr	r1, [pc, #28]	; (8006b38 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006b20:	4b05      	ldr	r3, [pc, #20]	; (8006b38 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006b22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4013      	ands	r3, r2
 8006b28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
}
 8006b2c:	bf00      	nop
 8006b2e:	3714      	adds	r7, #20
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr
 8006b38:	40021000 	.word	0x40021000

08006b3c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b08a      	sub	sp, #40	; 0x28
 8006b40:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8006b42:	f107 031c 	add.w	r3, r7, #28
 8006b46:	2200      	movs	r2, #0
 8006b48:	601a      	str	r2, [r3, #0]
 8006b4a:	605a      	str	r2, [r3, #4]
 8006b4c:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b4e:	1d3b      	adds	r3, r7, #4
 8006b50:	2200      	movs	r2, #0
 8006b52:	601a      	str	r2, [r3, #0]
 8006b54:	605a      	str	r2, [r3, #4]
 8006b56:	609a      	str	r2, [r3, #8]
 8006b58:	60da      	str	r2, [r3, #12]
 8006b5a:	611a      	str	r2, [r3, #16]
 8006b5c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8006b5e:	2004      	movs	r0, #4
 8006b60:	f7ff ffd4 	bl	8006b0c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8006b64:	2020      	movs	r0, #32
 8006b66:	f7ff ffd1 	bl	8006b0c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8006b6a:	2001      	movs	r0, #1
 8006b6c:	f7ff ffce 	bl	8006b0c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8006b70:	2002      	movs	r0, #2
 8006b72:	f7ff ffcb 	bl	8006b0c <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 8006b76:	2108      	movs	r1, #8
 8006b78:	48d3      	ldr	r0, [pc, #844]	; (8006ec8 <MX_GPIO_Init+0x38c>)
 8006b7a:	f7ff ffb9 	bl	8006af0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 8006b7e:	2108      	movs	r1, #8
 8006b80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006b84:	f7ff ffb4 	bl	8006af0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 8006b88:	2110      	movs	r1, #16
 8006b8a:	48cf      	ldr	r0, [pc, #828]	; (8006ec8 <MX_GPIO_Init+0x38c>)
 8006b8c:	f7ff ffb0 	bl	8006af0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 8006b90:	2120      	movs	r1, #32
 8006b92:	48cd      	ldr	r0, [pc, #820]	; (8006ec8 <MX_GPIO_Init+0x38c>)
 8006b94:	f7ff ffac 	bl	8006af0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 8006b98:	2101      	movs	r1, #1
 8006b9a:	48cc      	ldr	r0, [pc, #816]	; (8006ecc <MX_GPIO_Init+0x390>)
 8006b9c:	f7ff ffa8 	bl	8006af0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 8006ba0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006ba4:	48c8      	ldr	r0, [pc, #800]	; (8006ec8 <MX_GPIO_Init+0x38c>)
 8006ba6:	f7ff ffa3 	bl	8006af0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 8006baa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006bae:	48c6      	ldr	r0, [pc, #792]	; (8006ec8 <MX_GPIO_Init+0x38c>)
 8006bb0:	f7ff ff9e 	bl	8006af0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 8006bb4:	2140      	movs	r1, #64	; 0x40
 8006bb6:	48c5      	ldr	r0, [pc, #788]	; (8006ecc <MX_GPIO_Init+0x390>)
 8006bb8:	f7ff ff9a 	bl	8006af0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 8006bbc:	2180      	movs	r1, #128	; 0x80
 8006bbe:	48c3      	ldr	r0, [pc, #780]	; (8006ecc <MX_GPIO_Init+0x390>)
 8006bc0:	f7ff ff96 	bl	8006af0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 8006bc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006bc8:	48c0      	ldr	r0, [pc, #768]	; (8006ecc <MX_GPIO_Init+0x390>)
 8006bca:	f7ff ff91 	bl	8006af0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 8006bce:	49c0      	ldr	r1, [pc, #768]	; (8006ed0 <MX_GPIO_Init+0x394>)
 8006bd0:	2002      	movs	r0, #2
 8006bd2:	f7ff feff 	bl	80069d4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 8006bd6:	49bf      	ldr	r1, [pc, #764]	; (8006ed4 <MX_GPIO_Init+0x398>)
 8006bd8:	2002      	movs	r0, #2
 8006bda:	f7ff fefb 	bl	80069d4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 8006bde:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8006be2:	2005      	movs	r0, #5
 8006be4:	f7ff fef6 	bl	80069d4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 8006be8:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8006bec:	2005      	movs	r0, #5
 8006bee:	f7ff fef1 	bl	80069d4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 8006bf2:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8006bf6:	2002      	movs	r0, #2
 8006bf8:	f7ff feec 	bl	80069d4 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8006bfc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006c00:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8006c02:	2301      	movs	r3, #1
 8006c04:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8006c0e:	2302      	movs	r3, #2
 8006c10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8006c14:	f107 031c 	add.w	r3, r7, #28
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f005 ffc7 	bl	800cbac <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8006c1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c22:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8006c24:	2301      	movs	r3, #1
 8006c26:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8006c30:	2302      	movs	r3, #2
 8006c32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8006c36:	f107 031c 	add.w	r3, r7, #28
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f005 ffb6 	bl	800cbac <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8006c40:	2301      	movs	r3, #1
 8006c42:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8006c44:	2301      	movs	r3, #1
 8006c46:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8006c50:	2302      	movs	r3, #2
 8006c52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8006c56:	f107 031c 	add.w	r3, r7, #28
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f005 ffa6 	bl	800cbac <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8006c60:	2302      	movs	r3, #2
 8006c62:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8006c64:	2301      	movs	r3, #1
 8006c66:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8006c70:	2302      	movs	r3, #2
 8006c72:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8006c76:	f107 031c 	add.w	r3, r7, #28
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f005 ff96 	bl	800cbac <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8006c80:	2304      	movs	r3, #4
 8006c82:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8006c84:	2301      	movs	r3, #1
 8006c86:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8006c90:	2302      	movs	r3, #2
 8006c92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8006c96:	f107 031c 	add.w	r3, r7, #28
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f005 ff86 	bl	800cbac <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006ca6:	4888      	ldr	r0, [pc, #544]	; (8006ec8 <MX_GPIO_Init+0x38c>)
 8006ca8:	f7ff fef3 	bl	8006a92 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 8006cac:	2201      	movs	r2, #1
 8006cae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006cb2:	4885      	ldr	r0, [pc, #532]	; (8006ec8 <MX_GPIO_Init+0x38c>)
 8006cb4:	f7ff feed 	bl	8006a92 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 8006cb8:	2201      	movs	r2, #1
 8006cba:	2101      	movs	r1, #1
 8006cbc:	4886      	ldr	r0, [pc, #536]	; (8006ed8 <MX_GPIO_Init+0x39c>)
 8006cbe:	f7ff fee8 	bl	8006a92 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	2102      	movs	r1, #2
 8006cc6:	4884      	ldr	r0, [pc, #528]	; (8006ed8 <MX_GPIO_Init+0x39c>)
 8006cc8:	f7ff fee3 	bl	8006a92 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 8006ccc:	2201      	movs	r2, #1
 8006cce:	2104      	movs	r1, #4
 8006cd0:	487d      	ldr	r0, [pc, #500]	; (8006ec8 <MX_GPIO_Init+0x38c>)
 8006cd2:	f7ff fede 	bl	8006a92 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006cdc:	487a      	ldr	r0, [pc, #488]	; (8006ec8 <MX_GPIO_Init+0x38c>)
 8006cde:	f7ff fea9 	bl	8006a34 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006ce8:	4877      	ldr	r0, [pc, #476]	; (8006ec8 <MX_GPIO_Init+0x38c>)
 8006cea:	f7ff fea3 	bl	8006a34 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 8006cee:	2200      	movs	r2, #0
 8006cf0:	2101      	movs	r1, #1
 8006cf2:	4879      	ldr	r0, [pc, #484]	; (8006ed8 <MX_GPIO_Init+0x39c>)
 8006cf4:	f7ff fe9e 	bl	8006a34 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	2102      	movs	r1, #2
 8006cfc:	4876      	ldr	r0, [pc, #472]	; (8006ed8 <MX_GPIO_Init+0x39c>)
 8006cfe:	f7ff fe99 	bl	8006a34 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 8006d02:	2200      	movs	r2, #0
 8006d04:	2104      	movs	r1, #4
 8006d06:	4870      	ldr	r0, [pc, #448]	; (8006ec8 <MX_GPIO_Init+0x38c>)
 8006d08:	f7ff fe94 	bl	8006a34 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8006d0c:	2308      	movs	r3, #8
 8006d0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006d10:	2301      	movs	r3, #1
 8006d12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006d14:	2300      	movs	r3, #0
 8006d16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8006d1c:	2302      	movs	r3, #2
 8006d1e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 8006d20:	1d3b      	adds	r3, r7, #4
 8006d22:	4619      	mov	r1, r3
 8006d24:	4868      	ldr	r0, [pc, #416]	; (8006ec8 <MX_GPIO_Init+0x38c>)
 8006d26:	f006 f934 	bl	800cf92 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 8006d2a:	2308      	movs	r3, #8
 8006d2c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006d32:	2300      	movs	r3, #0
 8006d34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006d36:	2300      	movs	r3, #0
 8006d38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 8006d3e:	1d3b      	adds	r3, r7, #4
 8006d40:	4619      	mov	r1, r3
 8006d42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d46:	f006 f924 	bl	800cf92 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 8006d4a:	2310      	movs	r3, #16
 8006d4c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006d52:	2300      	movs	r3, #0
 8006d54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006d56:	2300      	movs	r3, #0
 8006d58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 8006d5e:	1d3b      	adds	r3, r7, #4
 8006d60:	4619      	mov	r1, r3
 8006d62:	4859      	ldr	r0, [pc, #356]	; (8006ec8 <MX_GPIO_Init+0x38c>)
 8006d64:	f006 f915 	bl	800cf92 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 8006d68:	2320      	movs	r3, #32
 8006d6a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006d70:	2300      	movs	r3, #0
 8006d72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006d74:	2300      	movs	r3, #0
 8006d76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 8006d7c:	1d3b      	adds	r3, r7, #4
 8006d7e:	4619      	mov	r1, r3
 8006d80:	4851      	ldr	r0, [pc, #324]	; (8006ec8 <MX_GPIO_Init+0x38c>)
 8006d82:	f006 f906 	bl	800cf92 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 8006d86:	2301      	movs	r3, #1
 8006d88:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006d92:	2300      	movs	r3, #0
 8006d94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006d96:	2300      	movs	r3, #0
 8006d98:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 8006d9a:	1d3b      	adds	r3, r7, #4
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	484b      	ldr	r0, [pc, #300]	; (8006ecc <MX_GPIO_Init+0x390>)
 8006da0:	f006 f8f7 	bl	800cf92 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8006da4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006da8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006daa:	2301      	movs	r3, #1
 8006dac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006dae:	2300      	movs	r3, #0
 8006db0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006db2:	2300      	movs	r3, #0
 8006db4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006db6:	2300      	movs	r3, #0
 8006db8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 8006dba:	1d3b      	adds	r3, r7, #4
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	4842      	ldr	r0, [pc, #264]	; (8006ec8 <MX_GPIO_Init+0x38c>)
 8006dc0:	f006 f8e7 	bl	800cf92 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 8006dc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006dc8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 8006dda:	1d3b      	adds	r3, r7, #4
 8006ddc:	4619      	mov	r1, r3
 8006dde:	483a      	ldr	r0, [pc, #232]	; (8006ec8 <MX_GPIO_Init+0x38c>)
 8006de0:	f006 f8d7 	bl	800cf92 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 8006de4:	2340      	movs	r3, #64	; 0x40
 8006de6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006de8:	2301      	movs	r3, #1
 8006dea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006dec:	2303      	movs	r3, #3
 8006dee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006df0:	2300      	movs	r3, #0
 8006df2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006df4:	2300      	movs	r3, #0
 8006df6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8006df8:	1d3b      	adds	r3, r7, #4
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	4833      	ldr	r0, [pc, #204]	; (8006ecc <MX_GPIO_Init+0x390>)
 8006dfe:	f006 f8c8 	bl	800cf92 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 8006e02:	2380      	movs	r3, #128	; 0x80
 8006e04:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006e06:	2301      	movs	r3, #1
 8006e08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006e12:	2300      	movs	r3, #0
 8006e14:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8006e16:	1d3b      	adds	r3, r7, #4
 8006e18:	4619      	mov	r1, r3
 8006e1a:	482c      	ldr	r0, [pc, #176]	; (8006ecc <MX_GPIO_Init+0x390>)
 8006e1c:	f006 f8b9 	bl	800cf92 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 8006e20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e24:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006e26:	2301      	movs	r3, #1
 8006e28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006e32:	2300      	movs	r3, #0
 8006e34:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8006e36:	1d3b      	adds	r3, r7, #4
 8006e38:	4619      	mov	r1, r3
 8006e3a:	4824      	ldr	r0, [pc, #144]	; (8006ecc <MX_GPIO_Init+0x390>)
 8006e3c:	f006 f8a9 	bl	800cf92 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8006e40:	f7ff fd3e 	bl	80068c0 <__NVIC_GetPriorityGrouping>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2200      	movs	r2, #0
 8006e48:	2100      	movs	r1, #0
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7ff fd8e 	bl	800696c <NVIC_EncodePriority>
 8006e50:	4603      	mov	r3, r0
 8006e52:	4619      	mov	r1, r3
 8006e54:	2006      	movs	r0, #6
 8006e56:	f7ff fd5f 	bl	8006918 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8006e5a:	2006      	movs	r0, #6
 8006e5c:	f7ff fd3e 	bl	80068dc <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8006e60:	f7ff fd2e 	bl	80068c0 <__NVIC_GetPriorityGrouping>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2200      	movs	r2, #0
 8006e68:	2100      	movs	r1, #0
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f7ff fd7e 	bl	800696c <NVIC_EncodePriority>
 8006e70:	4603      	mov	r3, r0
 8006e72:	4619      	mov	r1, r3
 8006e74:	2007      	movs	r0, #7
 8006e76:	f7ff fd4f 	bl	8006918 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 8006e7a:	2007      	movs	r0, #7
 8006e7c:	f7ff fd2e 	bl	80068dc <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8006e80:	f7ff fd1e 	bl	80068c0 <__NVIC_GetPriorityGrouping>
 8006e84:	4603      	mov	r3, r0
 8006e86:	2200      	movs	r2, #0
 8006e88:	2100      	movs	r1, #0
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7ff fd6e 	bl	800696c <NVIC_EncodePriority>
 8006e90:	4603      	mov	r3, r0
 8006e92:	4619      	mov	r1, r3
 8006e94:	2008      	movs	r0, #8
 8006e96:	f7ff fd3f 	bl	8006918 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 8006e9a:	2008      	movs	r0, #8
 8006e9c:	f7ff fd1e 	bl	80068dc <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8006ea0:	f7ff fd0e 	bl	80068c0 <__NVIC_GetPriorityGrouping>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7ff fd5e 	bl	800696c <NVIC_EncodePriority>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	2028      	movs	r0, #40	; 0x28
 8006eb6:	f7ff fd2f 	bl	8006918 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006eba:	2028      	movs	r0, #40	; 0x28
 8006ebc:	f7ff fd0e 	bl	80068dc <__NVIC_EnableIRQ>

}
 8006ec0:	bf00      	nop
 8006ec2:	3728      	adds	r7, #40	; 0x28
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	e009      	b.n	8006edc <MX_GPIO_Init+0x3a0>
 8006ec8:	48000800 	.word	0x48000800
 8006ecc:	48000400 	.word	0x48000400
 8006ed0:	0f000003 	.word	0x0f000003
 8006ed4:	f0000003 	.word	0xf0000003
 8006ed8:	48001400 	.word	0x48001400
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop

08006ee0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8006ee8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006eec:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8006ef0:	f003 0301 	and.w	r3, r3, #1
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d013      	beq.n	8006f20 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8006ef8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006efc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8006f00:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00b      	beq.n	8006f20 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8006f08:	e000      	b.n	8006f0c <ITM_SendChar+0x2c>
    {
      __NOP();
 8006f0a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8006f0c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d0f9      	beq.n	8006f0a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8006f16:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	b2d2      	uxtb	r2, r2
 8006f1e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8006f20:	687b      	ldr	r3, [r7, #4]
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	370c      	adds	r7, #12
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr

08006f2e <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// redirect printf to SWV
int _write(int file, char *ptr, int len)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b086      	sub	sp, #24
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	60f8      	str	r0, [r7, #12]
 8006f36:	60b9      	str	r1, [r7, #8]
 8006f38:	607a      	str	r2, [r7, #4]
  int i=0;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8006f3e:	2300      	movs	r3, #0
 8006f40:	617b      	str	r3, [r7, #20]
 8006f42:	e009      	b.n	8006f58 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	1c5a      	adds	r2, r3, #1
 8006f48:	60ba      	str	r2, [r7, #8]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f7ff ffc7 	bl	8006ee0 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	3301      	adds	r3, #1
 8006f56:	617b      	str	r3, [r7, #20]
 8006f58:	697a      	ldr	r2, [r7, #20]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	dbf1      	blt.n	8006f44 <_write+0x16>
  return len;
 8006f60:	687b      	ldr	r3, [r7, #4]
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3718      	adds	r7, #24
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
	...

08006f6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006f70:	f000 fed1 	bl	8007d16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006f74:	f000 f87a 	bl	800706c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006f78:	f7ff fde0 	bl	8006b3c <MX_GPIO_Init>
  MX_DMA_Init();
 8006f7c:	f7ff fc66 	bl	800684c <MX_DMA_Init>
  MX_DAC1_Init();
 8006f80:	f7ff fb16 	bl	80065b0 <MX_DAC1_Init>
  MX_DAC2_Init();
 8006f84:	f7ff fb5e 	bl	8006644 <MX_DAC2_Init>
  MX_ADC1_Init();
 8006f88:	f7ff f9d4 	bl	8006334 <MX_ADC1_Init>
  MX_COMP1_Init();
 8006f8c:	f7ff fab6 	bl	80064fc <MX_COMP1_Init>
  MX_TIM2_Init();
 8006f90:	f000 fbac 	bl	80076ec <MX_TIM2_Init>
  MX_SPI3_Init();
 8006f94:	f000 f916 	bl	80071c4 <MX_SPI3_Init>
  MX_RNG_Init();
 8006f98:	f000 f906 	bl	80071a8 <MX_RNG_Init>
  MX_TIM1_Init();
 8006f9c:	f000 fb36 	bl	800760c <MX_TIM1_Init>
  MX_TIM8_Init();
 8006fa0:	f000 fcae 	bl	8007900 <MX_TIM8_Init>
  MX_TIM16_Init();
 8006fa4:	f000 fd66 	bl	8007a74 <MX_TIM16_Init>
  MX_TIM15_Init();
 8006fa8:	f000 fd12 	bl	80079d0 <MX_TIM15_Init>
  MX_TIM5_Init();
 8006fac:	f000 fc58 	bl	8007860 <MX_TIM5_Init>
  MX_TIM3_Init();
 8006fb0:	f000 fc06 	bl	80077c0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  DT_InitRegister();
 8006fb4:	f7fd f978 	bl	80042a8 <DT_InitRegister>

  // main signal function output (external)
  //DAC_InitDevices()
  SM_Init();
 8006fb8:	f7fd fe3a 	bl	8004c30 <SM_Init>
  FuncO_Init();
 8006fbc:	f7fd fb5c 	bl	8004678 <FuncO_Init>
  FuncO_ApplyPresetToSignal(eDefaultFuncPreset);
 8006fc0:	2000      	movs	r0, #0
 8006fc2:	f7fd fc11 	bl	80047e8 <FuncO_ApplyPresetToSignal>
  FuncO_ApplyPresetToSync(eDefaultFuncPreset);
 8006fc6:	2000      	movs	r0, #0
 8006fc8:	f7fd fc68 	bl	800489c <FuncO_ApplyPresetToSync>

  //TIM8->ARR = sin1_max_arr;

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 8006fcc:	2110      	movs	r1, #16
 8006fce:	481e      	ldr	r0, [pc, #120]	; (8007048 <main+0xdc>)
 8006fd0:	f002 fba5 	bl	800971e <HAL_DAC_Start>
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);

#ifndef DISABLE_ALL_TIMERS

  // single clock to run all DAC channels. TODO add independent clocks
  HAL_TIM_Base_Start(&htim8);
 8006fd4:	481d      	ldr	r0, [pc, #116]	; (800704c <main+0xe0>)
 8006fd6:	f004 fce7 	bl	800b9a8 <HAL_TIM_Base_Start>
  FreqO_ApplyPreset(eDefaultFreqPreset);
 8006fda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006fde:	f7fd fae1 	bl	80045a4 <FreqO_ApplyPreset>

#endif //DISABLE_ALL_TIMERS

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	2108      	movs	r1, #8
 8006fe6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006fea:	f003 fbe3 	bl	800a7b4 <HAL_GPIO_WritePin>

  // PGA gain
  //GO_ApplyPreset_Fast(eDefaultGainPreset);
  VPP_ApplyPresetToSignal(eDefaultVppPreset);
 8006fee:	2059      	movs	r0, #89	; 0x59
 8006ff0:	f7fd fef4 	bl	8004ddc <VPP_ApplyPresetToSignal>
  //HAL_TIM_Base_Start_IT(&htim3);
#endif	//DISABLE_ALL_TIMERS


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006ffa:	4815      	ldr	r0, [pc, #84]	; (8007050 <main+0xe4>)
 8006ffc:	f003 fbda 	bl	800a7b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 8007000:	2200      	movs	r2, #0
 8007002:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007006:	4812      	ldr	r0, [pc, #72]	; (8007050 <main+0xe4>)
 8007008:	f003 fbd4 	bl	800a7b4 <HAL_GPIO_WritePin>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 800700c:	4811      	ldr	r0, [pc, #68]	; (8007054 <main+0xe8>)
 800700e:	f004 fccb 	bl	800b9a8 <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 8007012:	4b11      	ldr	r3, [pc, #68]	; (8007058 <main+0xec>)
 8007014:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007018:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 800701a:	4b0f      	ldr	r3, [pc, #60]	; (8007058 <main+0xec>)
 800701c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007020:	62da      	str	r2, [r3, #44]	; 0x2c



  // TFT lib enable
  DM_Init();
 8007022:	f7f9 fe0d 	bl	8000c40 <DM_Init>
  DM_PostInit();
 8007026:	f7f9 fe19 	bl	8000c5c <DM_PostInit>

  // DM_UpdateDisplay()
  HAL_TIM_Base_Start_IT(&htim15);
 800702a:	480c      	ldr	r0, [pc, #48]	; (800705c <main+0xf0>)
 800702c:	f004 fd12 	bl	800ba54 <HAL_TIM_Base_Start_IT>

  // debounce timer
  HAL_TIM_Base_Start(&htim16);
 8007030:	480b      	ldr	r0, [pc, #44]	; (8007060 <main+0xf4>)
 8007032:	f004 fcb9 	bl	800b9a8 <HAL_TIM_Base_Start>

  // sweep timer
  HAL_TIM_Base_Start(&htim3);
 8007036:	480b      	ldr	r0, [pc, #44]	; (8007064 <main+0xf8>)
 8007038:	f004 fcb6 	bl	800b9a8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim5);
 800703c:	480a      	ldr	r0, [pc, #40]	; (8007068 <main+0xfc>)
 800703e:	f004 fcb3 	bl	800b9a8 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	EM_ProcessEvent();
 8007042:	f7fc f9f5 	bl	8003430 <EM_ProcessEvent>
 8007046:	e7fc      	b.n	8007042 <main+0xd6>
 8007048:	20002614 	.word	0x20002614
 800704c:	2000274c 	.word	0x2000274c
 8007050:	48000800 	.word	0x48000800
 8007054:	2000287c 	.word	0x2000287c
 8007058:	40001000 	.word	0x40001000
 800705c:	20002798 	.word	0x20002798
 8007060:	20002914 	.word	0x20002914
 8007064:	20002830 	.word	0x20002830
 8007068:	200027e4 	.word	0x200027e4

0800706c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b0a8      	sub	sp, #160	; 0xa0
 8007070:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007072:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007076:	2238      	movs	r2, #56	; 0x38
 8007078:	2100      	movs	r1, #0
 800707a:	4618      	mov	r0, r3
 800707c:	f006 ffe6 	bl	800e04c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007080:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007084:	2200      	movs	r2, #0
 8007086:	601a      	str	r2, [r3, #0]
 8007088:	605a      	str	r2, [r3, #4]
 800708a:	609a      	str	r2, [r3, #8]
 800708c:	60da      	str	r2, [r3, #12]
 800708e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007090:	463b      	mov	r3, r7
 8007092:	2254      	movs	r2, #84	; 0x54
 8007094:	2100      	movs	r1, #0
 8007096:	4618      	mov	r0, r3
 8007098:	f006 ffd8 	bl	800e04c <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800709c:	2000      	movs	r0, #0
 800709e:	f003 fba1 	bl	800a7e4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80070a2:	2322      	movs	r3, #34	; 0x22
 80070a4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80070a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070aa:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80070ac:	2340      	movs	r3, #64	; 0x40
 80070ae:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80070b0:	2301      	movs	r3, #1
 80070b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80070b6:	2302      	movs	r3, #2
 80070b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80070bc:	2302      	movs	r3, #2
 80070be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80070c2:	2302      	movs	r3, #2
 80070c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 80070c8:	232a      	movs	r3, #42	; 0x2a
 80070ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV30;
 80070ce:	231e      	movs	r3, #30
 80070d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80070d4:	2304      	movs	r3, #4
 80070d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80070da:	2302      	movs	r3, #2
 80070dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80070e0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80070e4:	4618      	mov	r0, r3
 80070e6:	f003 fc21 	bl	800a92c <HAL_RCC_OscConfig>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d001      	beq.n	80070f4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80070f0:	f000 f82a 	bl	8007148 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80070f4:	230f      	movs	r3, #15
 80070f6:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80070f8:	2303      	movs	r3, #3
 80070fa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80070fc:	2300      	movs	r3, #0
 80070fe:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007100:	2300      	movs	r3, #0
 8007102:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007104:	2300      	movs	r3, #0
 8007106:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8007108:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800710c:	2108      	movs	r1, #8
 800710e:	4618      	mov	r0, r3
 8007110:	f003 ff24 	bl	800af5c <HAL_RCC_ClockConfig>
 8007114:	4603      	mov	r3, r0
 8007116:	2b00      	cmp	r3, #0
 8007118:	d001      	beq.n	800711e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800711a:	f000 f815 	bl	8007148 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 800711e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007122:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8007124:	2300      	movs	r3, #0
 8007126:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8007128:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800712c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800712e:	463b      	mov	r3, r7
 8007130:	4618      	mov	r0, r3
 8007132:	f004 f903 	bl	800b33c <HAL_RCCEx_PeriphCLKConfig>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d001      	beq.n	8007140 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800713c:	f000 f804 	bl	8007148 <Error_Handler>
  }
}
 8007140:	bf00      	nop
 8007142:	37a0      	adds	r7, #160	; 0xa0
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007148:	b480      	push	{r7}
 800714a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800714c:	bf00      	nop
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr

08007156 <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 8007156:	b480      	push	{r7}
 8007158:	b083      	sub	sp, #12
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f043 0204 	orr.w	r2, r3, #4
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	601a      	str	r2, [r3, #0]
}
 800716a:	bf00      	nop
 800716c:	370c      	adds	r7, #12
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
	...

08007178 <LL_AHB2_GRP1_EnableClock>:
{
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007180:	4b08      	ldr	r3, [pc, #32]	; (80071a4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007182:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007184:	4907      	ldr	r1, [pc, #28]	; (80071a4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4313      	orrs	r3, r2
 800718a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800718c:	4b05      	ldr	r3, [pc, #20]	; (80071a4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800718e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4013      	ands	r3, r2
 8007194:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007196:	68fb      	ldr	r3, [r7, #12]
}
 8007198:	bf00      	nop
 800719a:	3714      	adds	r7, #20
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr
 80071a4:	40021000 	.word	0x40021000

080071a8 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 80071ac:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80071b0:	f7ff ffe2 	bl	8007178 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 80071b4:	4802      	ldr	r0, [pc, #8]	; (80071c0 <MX_RNG_Init+0x18>)
 80071b6:	f7ff ffce 	bl	8007156 <LL_RNG_Enable>

}
 80071ba:	bf00      	nop
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	50060800 	.word	0x50060800

080071c4 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 80071c8:	4b1b      	ldr	r3, [pc, #108]	; (8007238 <MX_SPI3_Init+0x74>)
 80071ca:	4a1c      	ldr	r2, [pc, #112]	; (800723c <MX_SPI3_Init+0x78>)
 80071cc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80071ce:	4b1a      	ldr	r3, [pc, #104]	; (8007238 <MX_SPI3_Init+0x74>)
 80071d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80071d4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80071d6:	4b18      	ldr	r3, [pc, #96]	; (8007238 <MX_SPI3_Init+0x74>)
 80071d8:	2200      	movs	r2, #0
 80071da:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80071dc:	4b16      	ldr	r3, [pc, #88]	; (8007238 <MX_SPI3_Init+0x74>)
 80071de:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80071e2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80071e4:	4b14      	ldr	r3, [pc, #80]	; (8007238 <MX_SPI3_Init+0x74>)
 80071e6:	2200      	movs	r2, #0
 80071e8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80071ea:	4b13      	ldr	r3, [pc, #76]	; (8007238 <MX_SPI3_Init+0x74>)
 80071ec:	2200      	movs	r2, #0
 80071ee:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80071f0:	4b11      	ldr	r3, [pc, #68]	; (8007238 <MX_SPI3_Init+0x74>)
 80071f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071f6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80071f8:	4b0f      	ldr	r3, [pc, #60]	; (8007238 <MX_SPI3_Init+0x74>)
 80071fa:	2210      	movs	r2, #16
 80071fc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80071fe:	4b0e      	ldr	r3, [pc, #56]	; (8007238 <MX_SPI3_Init+0x74>)
 8007200:	2200      	movs	r2, #0
 8007202:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8007204:	4b0c      	ldr	r3, [pc, #48]	; (8007238 <MX_SPI3_Init+0x74>)
 8007206:	2200      	movs	r2, #0
 8007208:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800720a:	4b0b      	ldr	r3, [pc, #44]	; (8007238 <MX_SPI3_Init+0x74>)
 800720c:	2200      	movs	r2, #0
 800720e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8007210:	4b09      	ldr	r3, [pc, #36]	; (8007238 <MX_SPI3_Init+0x74>)
 8007212:	2207      	movs	r2, #7
 8007214:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007216:	4b08      	ldr	r3, [pc, #32]	; (8007238 <MX_SPI3_Init+0x74>)
 8007218:	2200      	movs	r2, #0
 800721a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800721c:	4b06      	ldr	r3, [pc, #24]	; (8007238 <MX_SPI3_Init+0x74>)
 800721e:	2208      	movs	r2, #8
 8007220:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8007222:	4805      	ldr	r0, [pc, #20]	; (8007238 <MX_SPI3_Init+0x74>)
 8007224:	f004 fad6 	bl	800b7d4 <HAL_SPI_Init>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d001      	beq.n	8007232 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800722e:	f7ff ff8b 	bl	8007148 <Error_Handler>
  }

}
 8007232:	bf00      	nop
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	200026e8 	.word	0x200026e8
 800723c:	40003c00 	.word	0x40003c00

08007240 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b08a      	sub	sp, #40	; 0x28
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007248:	f107 0314 	add.w	r3, r7, #20
 800724c:	2200      	movs	r2, #0
 800724e:	601a      	str	r2, [r3, #0]
 8007250:	605a      	str	r2, [r3, #4]
 8007252:	609a      	str	r2, [r3, #8]
 8007254:	60da      	str	r2, [r3, #12]
 8007256:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a17      	ldr	r2, [pc, #92]	; (80072bc <HAL_SPI_MspInit+0x7c>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d128      	bne.n	80072b4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007262:	4b17      	ldr	r3, [pc, #92]	; (80072c0 <HAL_SPI_MspInit+0x80>)
 8007264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007266:	4a16      	ldr	r2, [pc, #88]	; (80072c0 <HAL_SPI_MspInit+0x80>)
 8007268:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800726c:	6593      	str	r3, [r2, #88]	; 0x58
 800726e:	4b14      	ldr	r3, [pc, #80]	; (80072c0 <HAL_SPI_MspInit+0x80>)
 8007270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007272:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007276:	613b      	str	r3, [r7, #16]
 8007278:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800727a:	4b11      	ldr	r3, [pc, #68]	; (80072c0 <HAL_SPI_MspInit+0x80>)
 800727c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800727e:	4a10      	ldr	r2, [pc, #64]	; (80072c0 <HAL_SPI_MspInit+0x80>)
 8007280:	f043 0304 	orr.w	r3, r3, #4
 8007284:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007286:	4b0e      	ldr	r3, [pc, #56]	; (80072c0 <HAL_SPI_MspInit+0x80>)
 8007288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800728a:	f003 0304 	and.w	r3, r3, #4
 800728e:	60fb      	str	r3, [r7, #12]
 8007290:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8007292:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007298:	2302      	movs	r3, #2
 800729a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800729c:	2300      	movs	r3, #0
 800729e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072a0:	2300      	movs	r3, #0
 80072a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80072a4:	2306      	movs	r3, #6
 80072a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80072a8:	f107 0314 	add.w	r3, r7, #20
 80072ac:	4619      	mov	r1, r3
 80072ae:	4805      	ldr	r0, [pc, #20]	; (80072c4 <HAL_SPI_MspInit+0x84>)
 80072b0:	f003 f8fe 	bl	800a4b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80072b4:	bf00      	nop
 80072b6:	3728      	adds	r7, #40	; 0x28
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	40003c00 	.word	0x40003c00
 80072c0:	40021000 	.word	0x40021000
 80072c4:	48000800 	.word	0x48000800

080072c8 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 80072c8:	b480      	push	{r7}
 80072ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80072cc:	4b05      	ldr	r3, [pc, #20]	; (80072e4 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	4a04      	ldr	r2, [pc, #16]	; (80072e4 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80072d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80072d6:	6093      	str	r3, [r2, #8]
}
 80072d8:	bf00      	nop
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop
 80072e4:	40007000 	.word	0x40007000

080072e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80072ee:	4b0f      	ldr	r3, [pc, #60]	; (800732c <HAL_MspInit+0x44>)
 80072f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072f2:	4a0e      	ldr	r2, [pc, #56]	; (800732c <HAL_MspInit+0x44>)
 80072f4:	f043 0301 	orr.w	r3, r3, #1
 80072f8:	6613      	str	r3, [r2, #96]	; 0x60
 80072fa:	4b0c      	ldr	r3, [pc, #48]	; (800732c <HAL_MspInit+0x44>)
 80072fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072fe:	f003 0301 	and.w	r3, r3, #1
 8007302:	607b      	str	r3, [r7, #4]
 8007304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007306:	4b09      	ldr	r3, [pc, #36]	; (800732c <HAL_MspInit+0x44>)
 8007308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800730a:	4a08      	ldr	r2, [pc, #32]	; (800732c <HAL_MspInit+0x44>)
 800730c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007310:	6593      	str	r3, [r2, #88]	; 0x58
 8007312:	4b06      	ldr	r3, [pc, #24]	; (800732c <HAL_MspInit+0x44>)
 8007314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800731a:	603b      	str	r3, [r7, #0]
 800731c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 800731e:	f7ff ffd3 	bl	80072c8 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007322:	bf00      	nop
 8007324:	3708      	adds	r7, #8
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	40021000 	.word	0x40021000

08007330 <LL_EXTI_IsActiveFlag_0_31>:
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8007338:	4b07      	ldr	r3, [pc, #28]	; (8007358 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800733a:	695a      	ldr	r2, [r3, #20]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4013      	ands	r3, r2
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	429a      	cmp	r2, r3
 8007344:	d101      	bne.n	800734a <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8007346:	2301      	movs	r3, #1
 8007348:	e000      	b.n	800734c <LL_EXTI_IsActiveFlag_0_31+0x1c>
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr
 8007358:	40010400 	.word	0x40010400

0800735c <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8007364:	4a04      	ldr	r2, [pc, #16]	; (8007378 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6153      	str	r3, [r2, #20]
}
 800736a:	bf00      	nop
 800736c:	370c      	adds	r7, #12
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr
 8007376:	bf00      	nop
 8007378:	40010400 	.word	0x40010400

0800737c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800737c:	b480      	push	{r7}
 800737e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007380:	bf00      	nop
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr

0800738a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800738a:	b480      	push	{r7}
 800738c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800738e:	e7fe      	b.n	800738e <HardFault_Handler+0x4>

08007390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007390:	b480      	push	{r7}
 8007392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007394:	e7fe      	b.n	8007394 <MemManage_Handler+0x4>

08007396 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007396:	b480      	push	{r7}
 8007398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800739a:	e7fe      	b.n	800739a <BusFault_Handler+0x4>

0800739c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800739c:	b480      	push	{r7}
 800739e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80073a0:	e7fe      	b.n	80073a0 <UsageFault_Handler+0x4>

080073a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80073a2:	b480      	push	{r7}
 80073a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80073a6:	bf00      	nop
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80073b0:	b480      	push	{r7}
 80073b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80073b4:	bf00      	nop
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr

080073be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80073be:	b480      	push	{r7}
 80073c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80073c2:	bf00      	nop
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80073d0:	f000 fcf4 	bl	8007dbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80073d4:	bf00      	nop
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	IM_BTN3_EXTI0_Handler();
 80073dc:	f7fc fe6a 	bl	80040b4 <IM_BTN3_EXTI0_Handler>

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 80073e0:	2001      	movs	r0, #1
 80073e2:	f7ff ffa5 	bl	8007330 <LL_EXTI_IsActiveFlag_0_31>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d002      	beq.n	80073f2 <EXTI0_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 80073ec:	2001      	movs	r0, #1
 80073ee:	f7ff ffb5 	bl	800735c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80073f2:	bf00      	nop
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	IM_BTN4_EXTI1_Handler();
 80073fa:	f7fc fe81 	bl	8004100 <IM_BTN4_EXTI1_Handler>

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 80073fe:	2002      	movs	r0, #2
 8007400:	f7ff ff96 	bl	8007330 <LL_EXTI_IsActiveFlag_0_31>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d002      	beq.n	8007410 <EXTI1_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 800740a:	2002      	movs	r0, #2
 800740c:	f7ff ffa6 	bl	800735c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8007410:	bf00      	nop
 8007412:	bd80      	pop	{r7, pc}

08007414 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	IM_ENC_EXTI2_Handler();
 8007418:	f7fc fe98 	bl	800414c <IM_ENC_EXTI2_Handler>

  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 800741c:	2004      	movs	r0, #4
 800741e:	f7ff ff87 	bl	8007330 <LL_EXTI_IsActiveFlag_0_31>
 8007422:	4603      	mov	r3, r0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d002      	beq.n	800742e <EXTI2_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 8007428:	2004      	movs	r0, #4
 800742a:	f7ff ff97 	bl	800735c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800742e:	bf00      	nop
 8007430:	bd80      	pop	{r7, pc}
	...

08007434 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007438:	4802      	ldr	r0, [pc, #8]	; (8007444 <DMA1_Channel1_IRQHandler+0x10>)
 800743a:	f002 fee9 	bl	800a210 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800743e:	bf00      	nop
 8007440:	bd80      	pop	{r7, pc}
 8007442:	bf00      	nop
 8007444:	2000257c 	.word	0x2000257c

08007448 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800744c:	4802      	ldr	r0, [pc, #8]	; (8007458 <DMA1_Channel2_IRQHandler+0x10>)
 800744e:	f002 fedf 	bl	800a210 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8007452:	bf00      	nop
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	20002628 	.word	0x20002628

0800745c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8007460:	4802      	ldr	r0, [pc, #8]	; (800746c <DMA1_Channel3_IRQHandler+0x10>)
 8007462:	f002 fed5 	bl	800a210 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8007466:	bf00      	nop
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	20002688 	.word	0x20002688

08007470 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

	DM_UpdateDisplay();
 8007474:	f7f9 fd18 	bl	8000ea8 <DM_UpdateDisplay>

	IM_ENC_DIRF_Handler();
 8007478:	f7fc fe8e 	bl	8004198 <IM_ENC_DIRF_Handler>

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800747c:	4803      	ldr	r0, [pc, #12]	; (800748c <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 800747e:	f004 fbf4 	bl	800bc6a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8007482:	4803      	ldr	r0, [pc, #12]	; (8007490 <TIM1_BRK_TIM15_IRQHandler+0x20>)
 8007484:	f004 fbf1 	bl	800bc6a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8007488:	bf00      	nop
 800748a:	bd80      	pop	{r7, pc}
 800748c:	2000287c 	.word	0x2000287c
 8007490:	20002798 	.word	0x20002798

08007494 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007498:	4802      	ldr	r0, [pc, #8]	; (80074a4 <TIM2_IRQHandler+0x10>)
 800749a:	f004 fbe6 	bl	800bc6a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800749e:	bf00      	nop
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop
 80074a4:	200028c8 	.word	0x200028c8

080074a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	IM_BTN1_EXTI14_Handler();
 80074ac:	f7fc fdb2 	bl	8004014 <IM_BTN1_EXTI14_Handler>
	IM_BTN2_EXTI15_Handler();
 80074b0:	f7fc fdd8 	bl	8004064 <IM_BTN2_EXTI15_Handler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 80074b4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80074b8:	f7ff ff3a 	bl	8007330 <LL_EXTI_IsActiveFlag_0_31>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d003      	beq.n	80074ca <EXTI15_10_IRQHandler+0x22>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 80074c2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80074c6:	f7ff ff49 	bl	800735c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 80074ca:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80074ce:	f7ff ff2f 	bl	8007330 <LL_EXTI_IsActiveFlag_0_31>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d003      	beq.n	80074e0 <EXTI15_10_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 80074d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80074dc:	f7ff ff3e 	bl	800735c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80074e0:	bf00      	nop
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b086      	sub	sp, #24
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80074f0:	2300      	movs	r3, #0
 80074f2:	617b      	str	r3, [r7, #20]
 80074f4:	e00a      	b.n	800750c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80074f6:	f3af 8000 	nop.w
 80074fa:	4601      	mov	r1, r0
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	1c5a      	adds	r2, r3, #1
 8007500:	60ba      	str	r2, [r7, #8]
 8007502:	b2ca      	uxtb	r2, r1
 8007504:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	3301      	adds	r3, #1
 800750a:	617b      	str	r3, [r7, #20]
 800750c:	697a      	ldr	r2, [r7, #20]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	429a      	cmp	r2, r3
 8007512:	dbf0      	blt.n	80074f6 <_read+0x12>
	}

return len;
 8007514:	687b      	ldr	r3, [r7, #4]
}
 8007516:	4618      	mov	r0, r3
 8007518:	3718      	adds	r7, #24
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <_close>:
	}
	return len;
}

int _close(int file)
{
 800751e:	b480      	push	{r7}
 8007520:	b083      	sub	sp, #12
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
	return -1;
 8007526:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800752a:	4618      	mov	r0, r3
 800752c:	370c      	adds	r7, #12
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr

08007536 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007536:	b480      	push	{r7}
 8007538:	b083      	sub	sp, #12
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
 800753e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007546:	605a      	str	r2, [r3, #4]
	return 0;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	370c      	adds	r7, #12
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr

08007556 <_isatty>:

int _isatty(int file)
{
 8007556:	b480      	push	{r7}
 8007558:	b083      	sub	sp, #12
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
	return 1;
 800755e:	2301      	movs	r3, #1
}
 8007560:	4618      	mov	r0, r3
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800756c:	b480      	push	{r7}
 800756e:	b085      	sub	sp, #20
 8007570:	af00      	add	r7, sp, #0
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	607a      	str	r2, [r7, #4]
	return 0;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3714      	adds	r7, #20
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr
	...

08007588 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007590:	4b11      	ldr	r3, [pc, #68]	; (80075d8 <_sbrk+0x50>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d102      	bne.n	800759e <_sbrk+0x16>
		heap_end = &end;
 8007598:	4b0f      	ldr	r3, [pc, #60]	; (80075d8 <_sbrk+0x50>)
 800759a:	4a10      	ldr	r2, [pc, #64]	; (80075dc <_sbrk+0x54>)
 800759c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800759e:	4b0e      	ldr	r3, [pc, #56]	; (80075d8 <_sbrk+0x50>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80075a4:	4b0c      	ldr	r3, [pc, #48]	; (80075d8 <_sbrk+0x50>)
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4413      	add	r3, r2
 80075ac:	466a      	mov	r2, sp
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d907      	bls.n	80075c2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80075b2:	f006 fd21 	bl	800dff8 <__errno>
 80075b6:	4602      	mov	r2, r0
 80075b8:	230c      	movs	r3, #12
 80075ba:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80075bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075c0:	e006      	b.n	80075d0 <_sbrk+0x48>
	}

	heap_end += incr;
 80075c2:	4b05      	ldr	r3, [pc, #20]	; (80075d8 <_sbrk+0x50>)
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4413      	add	r3, r2
 80075ca:	4a03      	ldr	r2, [pc, #12]	; (80075d8 <_sbrk+0x50>)
 80075cc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80075ce:	68fb      	ldr	r3, [r7, #12]
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	20001f2c 	.word	0x20001f2c
 80075dc:	20002968 	.word	0x20002968

080075e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80075e0:	b480      	push	{r7}
 80075e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80075e4:	4b08      	ldr	r3, [pc, #32]	; (8007608 <SystemInit+0x28>)
 80075e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075ea:	4a07      	ldr	r2, [pc, #28]	; (8007608 <SystemInit+0x28>)
 80075ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80075f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80075f4:	4b04      	ldr	r3, [pc, #16]	; (8007608 <SystemInit+0x28>)
 80075f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80075fa:	609a      	str	r2, [r3, #8]
#endif
}
 80075fc:	bf00      	nop
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr
 8007606:	bf00      	nop
 8007608:	e000ed00 	.word	0xe000ed00

0800760c <MX_TIM1_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b09a      	sub	sp, #104	; 0x68
 8007610:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8007612:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007616:	2224      	movs	r2, #36	; 0x24
 8007618:	2100      	movs	r1, #0
 800761a:	4618      	mov	r0, r3
 800761c:	f006 fd16 	bl	800e04c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007620:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007624:	2200      	movs	r2, #0
 8007626:	601a      	str	r2, [r3, #0]
 8007628:	605a      	str	r2, [r3, #4]
 800762a:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800762c:	1d3b      	adds	r3, r7, #4
 800762e:	2234      	movs	r2, #52	; 0x34
 8007630:	2100      	movs	r1, #0
 8007632:	4618      	mov	r0, r3
 8007634:	f006 fd0a 	bl	800e04c <memset>

  htim1.Instance = TIM1;
 8007638:	4b2a      	ldr	r3, [pc, #168]	; (80076e4 <MX_TIM1_Init+0xd8>)
 800763a:	4a2b      	ldr	r2, [pc, #172]	; (80076e8 <MX_TIM1_Init+0xdc>)
 800763c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800763e:	4b29      	ldr	r3, [pc, #164]	; (80076e4 <MX_TIM1_Init+0xd8>)
 8007640:	2200      	movs	r2, #0
 8007642:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8007644:	4b27      	ldr	r3, [pc, #156]	; (80076e4 <MX_TIM1_Init+0xd8>)
 8007646:	2240      	movs	r2, #64	; 0x40
 8007648:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 800764a:	4b26      	ldr	r3, [pc, #152]	; (80076e4 <MX_TIM1_Init+0xd8>)
 800764c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007650:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007652:	4b24      	ldr	r3, [pc, #144]	; (80076e4 <MX_TIM1_Init+0xd8>)
 8007654:	2200      	movs	r2, #0
 8007656:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007658:	4b22      	ldr	r3, [pc, #136]	; (80076e4 <MX_TIM1_Init+0xd8>)
 800765a:	2200      	movs	r2, #0
 800765c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800765e:	4b21      	ldr	r3, [pc, #132]	; (80076e4 <MX_TIM1_Init+0xd8>)
 8007660:	2200      	movs	r2, #0
 8007662:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8007664:	2303      	movs	r3, #3
 8007666:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8007668:	2300      	movs	r3, #0
 800766a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800766c:	2301      	movs	r3, #1
 800766e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8007670:	2300      	movs	r3, #0
 8007672:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8007674:	2300      	movs	r3, #0
 8007676:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8007678:	2300      	movs	r3, #0
 800767a:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800767c:	2301      	movs	r3, #1
 800767e:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8007680:	2300      	movs	r3, #0
 8007682:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8007684:	2300      	movs	r3, #0
 8007686:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8007688:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800768c:	4619      	mov	r1, r3
 800768e:	4815      	ldr	r0, [pc, #84]	; (80076e4 <MX_TIM1_Init+0xd8>)
 8007690:	f004 fa45 	bl	800bb1e <HAL_TIM_Encoder_Init>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d001      	beq.n	800769e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800769a:	f7ff fd55 	bl	8007148 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800769e:	2320      	movs	r3, #32
 80076a0:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80076a2:	2300      	movs	r3, #0
 80076a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80076a6:	2300      	movs	r3, #0
 80076a8:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80076aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80076ae:	4619      	mov	r1, r3
 80076b0:	480c      	ldr	r0, [pc, #48]	; (80076e4 <MX_TIM1_Init+0xd8>)
 80076b2:	f004 ffbd 	bl	800c630 <HAL_TIMEx_MasterConfigSynchronization>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d001      	beq.n	80076c0 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80076bc:	f7ff fd44 	bl	8007148 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80076c0:	2300      	movs	r3, #0
 80076c2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80076c4:	2300      	movs	r3, #0
 80076c6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80076c8:	1d3b      	adds	r3, r7, #4
 80076ca:	4619      	mov	r1, r3
 80076cc:	4805      	ldr	r0, [pc, #20]	; (80076e4 <MX_TIM1_Init+0xd8>)
 80076ce:	f005 f845 	bl	800c75c <HAL_TIMEx_ConfigBreakDeadTime>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d001      	beq.n	80076dc <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 80076d8:	f7ff fd36 	bl	8007148 <Error_Handler>
  }

}
 80076dc:	bf00      	nop
 80076de:	3768      	adds	r7, #104	; 0x68
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	2000287c 	.word	0x2000287c
 80076e8:	40012c00 	.word	0x40012c00

080076ec <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b08c      	sub	sp, #48	; 0x30
 80076f0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80076f2:	f107 0320 	add.w	r3, r7, #32
 80076f6:	2200      	movs	r2, #0
 80076f8:	601a      	str	r2, [r3, #0]
 80076fa:	605a      	str	r2, [r3, #4]
 80076fc:	609a      	str	r2, [r3, #8]
 80076fe:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8007700:	f107 030c 	add.w	r3, r7, #12
 8007704:	2200      	movs	r2, #0
 8007706:	601a      	str	r2, [r3, #0]
 8007708:	605a      	str	r2, [r3, #4]
 800770a:	609a      	str	r2, [r3, #8]
 800770c:	60da      	str	r2, [r3, #12]
 800770e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007710:	463b      	mov	r3, r7
 8007712:	2200      	movs	r2, #0
 8007714:	601a      	str	r2, [r3, #0]
 8007716:	605a      	str	r2, [r3, #4]
 8007718:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 800771a:	4b28      	ldr	r3, [pc, #160]	; (80077bc <MX_TIM2_Init+0xd0>)
 800771c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007720:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2047;
 8007722:	4b26      	ldr	r3, [pc, #152]	; (80077bc <MX_TIM2_Init+0xd0>)
 8007724:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8007728:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800772a:	4b24      	ldr	r3, [pc, #144]	; (80077bc <MX_TIM2_Init+0xd0>)
 800772c:	2200      	movs	r2, #0
 800772e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 8007730:	4b22      	ldr	r3, [pc, #136]	; (80077bc <MX_TIM2_Init+0xd0>)
 8007732:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007736:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007738:	4b20      	ldr	r3, [pc, #128]	; (80077bc <MX_TIM2_Init+0xd0>)
 800773a:	2200      	movs	r2, #0
 800773c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800773e:	4b1f      	ldr	r3, [pc, #124]	; (80077bc <MX_TIM2_Init+0xd0>)
 8007740:	2200      	movs	r2, #0
 8007742:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007744:	481d      	ldr	r0, [pc, #116]	; (80077bc <MX_TIM2_Init+0xd0>)
 8007746:	f004 f8d7 	bl	800b8f8 <HAL_TIM_Base_Init>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d001      	beq.n	8007754 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8007750:	f7ff fcfa 	bl	8007148 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007754:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007758:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800775a:	f107 0320 	add.w	r3, r7, #32
 800775e:	4619      	mov	r1, r3
 8007760:	4816      	ldr	r0, [pc, #88]	; (80077bc <MX_TIM2_Init+0xd0>)
 8007762:	f004 fc01 	bl	800bf68 <HAL_TIM_ConfigClockSource>
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d001      	beq.n	8007770 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800776c:	f7ff fcec 	bl	8007148 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8007770:	2305      	movs	r3, #5
 8007772:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8007774:	2350      	movs	r3, #80	; 0x50
 8007776:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8007778:	2300      	movs	r3, #0
 800777a:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 800777c:	2300      	movs	r3, #0
 800777e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8007780:	f107 030c 	add.w	r3, r7, #12
 8007784:	4619      	mov	r1, r3
 8007786:	480d      	ldr	r0, [pc, #52]	; (80077bc <MX_TIM2_Init+0xd0>)
 8007788:	f004 fcde 	bl	800c148 <HAL_TIM_SlaveConfigSynchro>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d001      	beq.n	8007796 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8007792:	f7ff fcd9 	bl	8007148 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007796:	2300      	movs	r3, #0
 8007798:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800779a:	2300      	movs	r3, #0
 800779c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800779e:	463b      	mov	r3, r7
 80077a0:	4619      	mov	r1, r3
 80077a2:	4806      	ldr	r0, [pc, #24]	; (80077bc <MX_TIM2_Init+0xd0>)
 80077a4:	f004 ff44 	bl	800c630 <HAL_TIMEx_MasterConfigSynchronization>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d001      	beq.n	80077b2 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 80077ae:	f7ff fccb 	bl	8007148 <Error_Handler>
  }

}
 80077b2:	bf00      	nop
 80077b4:	3730      	adds	r7, #48	; 0x30
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	200028c8 	.word	0x200028c8

080077c0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b088      	sub	sp, #32
 80077c4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80077c6:	f107 0310 	add.w	r3, r7, #16
 80077ca:	2200      	movs	r2, #0
 80077cc:	601a      	str	r2, [r3, #0]
 80077ce:	605a      	str	r2, [r3, #4]
 80077d0:	609a      	str	r2, [r3, #8]
 80077d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80077d4:	1d3b      	adds	r3, r7, #4
 80077d6:	2200      	movs	r2, #0
 80077d8:	601a      	str	r2, [r3, #0]
 80077da:	605a      	str	r2, [r3, #4]
 80077dc:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 80077de:	4b1e      	ldr	r3, [pc, #120]	; (8007858 <MX_TIM3_Init+0x98>)
 80077e0:	4a1e      	ldr	r2, [pc, #120]	; (800785c <MX_TIM3_Init+0x9c>)
 80077e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 65535;
 80077e4:	4b1c      	ldr	r3, [pc, #112]	; (8007858 <MX_TIM3_Init+0x98>)
 80077e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80077ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80077ec:	4b1a      	ldr	r3, [pc, #104]	; (8007858 <MX_TIM3_Init+0x98>)
 80077ee:	2210      	movs	r2, #16
 80077f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80077f2:	4b19      	ldr	r3, [pc, #100]	; (8007858 <MX_TIM3_Init+0x98>)
 80077f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80077f8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80077fa:	4b17      	ldr	r3, [pc, #92]	; (8007858 <MX_TIM3_Init+0x98>)
 80077fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007800:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007802:	4b15      	ldr	r3, [pc, #84]	; (8007858 <MX_TIM3_Init+0x98>)
 8007804:	2200      	movs	r2, #0
 8007806:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007808:	4813      	ldr	r0, [pc, #76]	; (8007858 <MX_TIM3_Init+0x98>)
 800780a:	f004 f875 	bl	800b8f8 <HAL_TIM_Base_Init>
 800780e:	4603      	mov	r3, r0
 8007810:	2b00      	cmp	r3, #0
 8007812:	d001      	beq.n	8007818 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8007814:	f7ff fc98 	bl	8007148 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007818:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800781c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800781e:	f107 0310 	add.w	r3, r7, #16
 8007822:	4619      	mov	r1, r3
 8007824:	480c      	ldr	r0, [pc, #48]	; (8007858 <MX_TIM3_Init+0x98>)
 8007826:	f004 fb9f 	bl	800bf68 <HAL_TIM_ConfigClockSource>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d001      	beq.n	8007834 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8007830:	f7ff fc8a 	bl	8007148 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007834:	2300      	movs	r3, #0
 8007836:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007838:	2300      	movs	r3, #0
 800783a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800783c:	1d3b      	adds	r3, r7, #4
 800783e:	4619      	mov	r1, r3
 8007840:	4805      	ldr	r0, [pc, #20]	; (8007858 <MX_TIM3_Init+0x98>)
 8007842:	f004 fef5 	bl	800c630 <HAL_TIMEx_MasterConfigSynchronization>
 8007846:	4603      	mov	r3, r0
 8007848:	2b00      	cmp	r3, #0
 800784a:	d001      	beq.n	8007850 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800784c:	f7ff fc7c 	bl	8007148 <Error_Handler>
  }

}
 8007850:	bf00      	nop
 8007852:	3720      	adds	r7, #32
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	20002830 	.word	0x20002830
 800785c:	40000400 	.word	0x40000400

08007860 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b088      	sub	sp, #32
 8007864:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007866:	f107 0310 	add.w	r3, r7, #16
 800786a:	2200      	movs	r2, #0
 800786c:	601a      	str	r2, [r3, #0]
 800786e:	605a      	str	r2, [r3, #4]
 8007870:	609a      	str	r2, [r3, #8]
 8007872:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007874:	1d3b      	adds	r3, r7, #4
 8007876:	2200      	movs	r2, #0
 8007878:	601a      	str	r2, [r3, #0]
 800787a:	605a      	str	r2, [r3, #4]
 800787c:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 800787e:	4b1e      	ldr	r3, [pc, #120]	; (80078f8 <MX_TIM5_Init+0x98>)
 8007880:	4a1e      	ldr	r2, [pc, #120]	; (80078fc <MX_TIM5_Init+0x9c>)
 8007882:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 65535;
 8007884:	4b1c      	ldr	r3, [pc, #112]	; (80078f8 <MX_TIM5_Init+0x98>)
 8007886:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800788a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800788c:	4b1a      	ldr	r3, [pc, #104]	; (80078f8 <MX_TIM5_Init+0x98>)
 800788e:	2200      	movs	r2, #0
 8007890:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4.294967295E9;
 8007892:	4b19      	ldr	r3, [pc, #100]	; (80078f8 <MX_TIM5_Init+0x98>)
 8007894:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007898:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800789a:	4b17      	ldr	r3, [pc, #92]	; (80078f8 <MX_TIM5_Init+0x98>)
 800789c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078a0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80078a2:	4b15      	ldr	r3, [pc, #84]	; (80078f8 <MX_TIM5_Init+0x98>)
 80078a4:	2200      	movs	r2, #0
 80078a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80078a8:	4813      	ldr	r0, [pc, #76]	; (80078f8 <MX_TIM5_Init+0x98>)
 80078aa:	f004 f825 	bl	800b8f8 <HAL_TIM_Base_Init>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d001      	beq.n	80078b8 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80078b4:	f7ff fc48 	bl	8007148 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80078b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80078bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80078be:	f107 0310 	add.w	r3, r7, #16
 80078c2:	4619      	mov	r1, r3
 80078c4:	480c      	ldr	r0, [pc, #48]	; (80078f8 <MX_TIM5_Init+0x98>)
 80078c6:	f004 fb4f 	bl	800bf68 <HAL_TIM_ConfigClockSource>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d001      	beq.n	80078d4 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 80078d0:	f7ff fc3a 	bl	8007148 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80078d4:	2300      	movs	r3, #0
 80078d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80078d8:	2300      	movs	r3, #0
 80078da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80078dc:	1d3b      	adds	r3, r7, #4
 80078de:	4619      	mov	r1, r3
 80078e0:	4805      	ldr	r0, [pc, #20]	; (80078f8 <MX_TIM5_Init+0x98>)
 80078e2:	f004 fea5 	bl	800c630 <HAL_TIMEx_MasterConfigSynchronization>
 80078e6:	4603      	mov	r3, r0
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d001      	beq.n	80078f0 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 80078ec:	f7ff fc2c 	bl	8007148 <Error_Handler>
  }

}
 80078f0:	bf00      	nop
 80078f2:	3720      	adds	r7, #32
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	200027e4 	.word	0x200027e4
 80078fc:	40000c00 	.word	0x40000c00

08007900 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b094      	sub	sp, #80	; 0x50
 8007904:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007906:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800790a:	2200      	movs	r2, #0
 800790c:	601a      	str	r2, [r3, #0]
 800790e:	605a      	str	r2, [r3, #4]
 8007910:	609a      	str	r2, [r3, #8]
 8007912:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007914:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007918:	2200      	movs	r2, #0
 800791a:	601a      	str	r2, [r3, #0]
 800791c:	605a      	str	r2, [r3, #4]
 800791e:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007920:	463b      	mov	r3, r7
 8007922:	2234      	movs	r2, #52	; 0x34
 8007924:	2100      	movs	r1, #0
 8007926:	4618      	mov	r0, r3
 8007928:	f006 fb90 	bl	800e04c <memset>

  htim8.Instance = TIM8;
 800792c:	4b26      	ldr	r3, [pc, #152]	; (80079c8 <MX_TIM8_Init+0xc8>)
 800792e:	4a27      	ldr	r2, [pc, #156]	; (80079cc <MX_TIM8_Init+0xcc>)
 8007930:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8007932:	4b25      	ldr	r3, [pc, #148]	; (80079c8 <MX_TIM8_Init+0xc8>)
 8007934:	2200      	movs	r2, #0
 8007936:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007938:	4b23      	ldr	r3, [pc, #140]	; (80079c8 <MX_TIM8_Init+0xc8>)
 800793a:	2200      	movs	r2, #0
 800793c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 800793e:	4b22      	ldr	r3, [pc, #136]	; (80079c8 <MX_TIM8_Init+0xc8>)
 8007940:	2201      	movs	r2, #1
 8007942:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007944:	4b20      	ldr	r3, [pc, #128]	; (80079c8 <MX_TIM8_Init+0xc8>)
 8007946:	2200      	movs	r2, #0
 8007948:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800794a:	4b1f      	ldr	r3, [pc, #124]	; (80079c8 <MX_TIM8_Init+0xc8>)
 800794c:	2200      	movs	r2, #0
 800794e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007950:	4b1d      	ldr	r3, [pc, #116]	; (80079c8 <MX_TIM8_Init+0xc8>)
 8007952:	2200      	movs	r2, #0
 8007954:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8007956:	481c      	ldr	r0, [pc, #112]	; (80079c8 <MX_TIM8_Init+0xc8>)
 8007958:	f003 ffce 	bl	800b8f8 <HAL_TIM_Base_Init>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d001      	beq.n	8007966 <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8007962:	f7ff fbf1 	bl	8007148 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007966:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800796a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800796c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007970:	4619      	mov	r1, r3
 8007972:	4815      	ldr	r0, [pc, #84]	; (80079c8 <MX_TIM8_Init+0xc8>)
 8007974:	f004 faf8 	bl	800bf68 <HAL_TIM_ConfigClockSource>
 8007978:	4603      	mov	r3, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d001      	beq.n	8007982 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800797e:	f7ff fbe3 	bl	8007148 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007982:	2320      	movs	r3, #32
 8007984:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8007986:	2300      	movs	r3, #0
 8007988:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800798a:	2300      	movs	r3, #0
 800798c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800798e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007992:	4619      	mov	r1, r3
 8007994:	480c      	ldr	r0, [pc, #48]	; (80079c8 <MX_TIM8_Init+0xc8>)
 8007996:	f004 fe4b 	bl	800c630 <HAL_TIMEx_MasterConfigSynchronization>
 800799a:	4603      	mov	r3, r0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d001      	beq.n	80079a4 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80079a0:	f7ff fbd2 	bl	8007148 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80079a4:	2300      	movs	r3, #0
 80079a6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80079a8:	2300      	movs	r3, #0
 80079aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80079ac:	463b      	mov	r3, r7
 80079ae:	4619      	mov	r1, r3
 80079b0:	4805      	ldr	r0, [pc, #20]	; (80079c8 <MX_TIM8_Init+0xc8>)
 80079b2:	f004 fed3 	bl	800c75c <HAL_TIMEx_ConfigBreakDeadTime>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d001      	beq.n	80079c0 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 80079bc:	f7ff fbc4 	bl	8007148 <Error_Handler>
  }

}
 80079c0:	bf00      	nop
 80079c2:	3750      	adds	r7, #80	; 0x50
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	2000274c 	.word	0x2000274c
 80079cc:	40013400 	.word	0x40013400

080079d0 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b088      	sub	sp, #32
 80079d4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80079d6:	f107 0310 	add.w	r3, r7, #16
 80079da:	2200      	movs	r2, #0
 80079dc:	601a      	str	r2, [r3, #0]
 80079de:	605a      	str	r2, [r3, #4]
 80079e0:	609a      	str	r2, [r3, #8]
 80079e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80079e4:	1d3b      	adds	r3, r7, #4
 80079e6:	2200      	movs	r2, #0
 80079e8:	601a      	str	r2, [r3, #0]
 80079ea:	605a      	str	r2, [r3, #4]
 80079ec:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 80079ee:	4b1f      	ldr	r3, [pc, #124]	; (8007a6c <MX_TIM15_Init+0x9c>)
 80079f0:	4a1f      	ldr	r2, [pc, #124]	; (8007a70 <MX_TIM15_Init+0xa0>)
 80079f2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 80079f4:	4b1d      	ldr	r3, [pc, #116]	; (8007a6c <MX_TIM15_Init+0x9c>)
 80079f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80079fa:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80079fc:	4b1b      	ldr	r3, [pc, #108]	; (8007a6c <MX_TIM15_Init+0x9c>)
 80079fe:	2200      	movs	r2, #0
 8007a00:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 8007a02:	4b1a      	ldr	r3, [pc, #104]	; (8007a6c <MX_TIM15_Init+0x9c>)
 8007a04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007a08:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007a0a:	4b18      	ldr	r3, [pc, #96]	; (8007a6c <MX_TIM15_Init+0x9c>)
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8007a10:	4b16      	ldr	r3, [pc, #88]	; (8007a6c <MX_TIM15_Init+0x9c>)
 8007a12:	2200      	movs	r2, #0
 8007a14:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007a16:	4b15      	ldr	r3, [pc, #84]	; (8007a6c <MX_TIM15_Init+0x9c>)
 8007a18:	2200      	movs	r2, #0
 8007a1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8007a1c:	4813      	ldr	r0, [pc, #76]	; (8007a6c <MX_TIM15_Init+0x9c>)
 8007a1e:	f003 ff6b 	bl	800b8f8 <HAL_TIM_Base_Init>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d001      	beq.n	8007a2c <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8007a28:	f7ff fb8e 	bl	8007148 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007a2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a30:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8007a32:	f107 0310 	add.w	r3, r7, #16
 8007a36:	4619      	mov	r1, r3
 8007a38:	480c      	ldr	r0, [pc, #48]	; (8007a6c <MX_TIM15_Init+0x9c>)
 8007a3a:	f004 fa95 	bl	800bf68 <HAL_TIM_ConfigClockSource>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d001      	beq.n	8007a48 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8007a44:	f7ff fb80 	bl	8007148 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8007a50:	1d3b      	adds	r3, r7, #4
 8007a52:	4619      	mov	r1, r3
 8007a54:	4805      	ldr	r0, [pc, #20]	; (8007a6c <MX_TIM15_Init+0x9c>)
 8007a56:	f004 fdeb 	bl	800c630 <HAL_TIMEx_MasterConfigSynchronization>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d001      	beq.n	8007a64 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8007a60:	f7ff fb72 	bl	8007148 <Error_Handler>
  }

}
 8007a64:	bf00      	nop
 8007a66:	3720      	adds	r7, #32
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	20002798 	.word	0x20002798
 8007a70:	40014000 	.word	0x40014000

08007a74 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8007a78:	4b10      	ldr	r3, [pc, #64]	; (8007abc <MX_TIM16_Init+0x48>)
 8007a7a:	4a11      	ldr	r2, [pc, #68]	; (8007ac0 <MX_TIM16_Init+0x4c>)
 8007a7c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 65535;
 8007a7e:	4b0f      	ldr	r3, [pc, #60]	; (8007abc <MX_TIM16_Init+0x48>)
 8007a80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007a84:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007a86:	4b0d      	ldr	r3, [pc, #52]	; (8007abc <MX_TIM16_Init+0x48>)
 8007a88:	2200      	movs	r2, #0
 8007a8a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8007a8c:	4b0b      	ldr	r3, [pc, #44]	; (8007abc <MX_TIM16_Init+0x48>)
 8007a8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007a92:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007a94:	4b09      	ldr	r3, [pc, #36]	; (8007abc <MX_TIM16_Init+0x48>)
 8007a96:	2200      	movs	r2, #0
 8007a98:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8007a9a:	4b08      	ldr	r3, [pc, #32]	; (8007abc <MX_TIM16_Init+0x48>)
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007aa0:	4b06      	ldr	r3, [pc, #24]	; (8007abc <MX_TIM16_Init+0x48>)
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8007aa6:	4805      	ldr	r0, [pc, #20]	; (8007abc <MX_TIM16_Init+0x48>)
 8007aa8:	f003 ff26 	bl	800b8f8 <HAL_TIM_Base_Init>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d001      	beq.n	8007ab6 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8007ab2:	f7ff fb49 	bl	8007148 <Error_Handler>
  }

}
 8007ab6:	bf00      	nop
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	20002914 	.word	0x20002914
 8007ac0:	40014400 	.word	0x40014400

08007ac4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b08a      	sub	sp, #40	; 0x28
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007acc:	f107 0314 	add.w	r3, r7, #20
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	601a      	str	r2, [r3, #0]
 8007ad4:	605a      	str	r2, [r3, #4]
 8007ad6:	609a      	str	r2, [r3, #8]
 8007ad8:	60da      	str	r2, [r3, #12]
 8007ada:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a1b      	ldr	r2, [pc, #108]	; (8007b50 <HAL_TIM_Encoder_MspInit+0x8c>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d12f      	bne.n	8007b46 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007ae6:	4b1b      	ldr	r3, [pc, #108]	; (8007b54 <HAL_TIM_Encoder_MspInit+0x90>)
 8007ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007aea:	4a1a      	ldr	r2, [pc, #104]	; (8007b54 <HAL_TIM_Encoder_MspInit+0x90>)
 8007aec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007af0:	6613      	str	r3, [r2, #96]	; 0x60
 8007af2:	4b18      	ldr	r3, [pc, #96]	; (8007b54 <HAL_TIM_Encoder_MspInit+0x90>)
 8007af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007af6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007afa:	613b      	str	r3, [r7, #16]
 8007afc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007afe:	4b15      	ldr	r3, [pc, #84]	; (8007b54 <HAL_TIM_Encoder_MspInit+0x90>)
 8007b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b02:	4a14      	ldr	r2, [pc, #80]	; (8007b54 <HAL_TIM_Encoder_MspInit+0x90>)
 8007b04:	f043 0304 	orr.w	r3, r3, #4
 8007b08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007b0a:	4b12      	ldr	r3, [pc, #72]	; (8007b54 <HAL_TIM_Encoder_MspInit+0x90>)
 8007b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b0e:	f003 0304 	and.w	r3, r3, #4
 8007b12:	60fb      	str	r3, [r7, #12]
 8007b14:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007b16:	2303      	movs	r3, #3
 8007b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b1a:	2302      	movs	r3, #2
 8007b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b22:	2300      	movs	r3, #0
 8007b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8007b26:	2302      	movs	r3, #2
 8007b28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007b2a:	f107 0314 	add.w	r3, r7, #20
 8007b2e:	4619      	mov	r1, r3
 8007b30:	4809      	ldr	r0, [pc, #36]	; (8007b58 <HAL_TIM_Encoder_MspInit+0x94>)
 8007b32:	f002 fcbd 	bl	800a4b0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8007b36:	2200      	movs	r2, #0
 8007b38:	2100      	movs	r1, #0
 8007b3a:	2018      	movs	r0, #24
 8007b3c:	f001 fd99 	bl	8009672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8007b40:	2018      	movs	r0, #24
 8007b42:	f001 fdb0 	bl	80096a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8007b46:	bf00      	nop
 8007b48:	3728      	adds	r7, #40	; 0x28
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	40012c00 	.word	0x40012c00
 8007b54:	40021000 	.word	0x40021000
 8007b58:	48000800 	.word	0x48000800

08007b5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b08e      	sub	sp, #56	; 0x38
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b68:	2200      	movs	r2, #0
 8007b6a:	601a      	str	r2, [r3, #0]
 8007b6c:	605a      	str	r2, [r3, #4]
 8007b6e:	609a      	str	r2, [r3, #8]
 8007b70:	60da      	str	r2, [r3, #12]
 8007b72:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b7c:	d131      	bne.n	8007be2 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007b7e:	4b4b      	ldr	r3, [pc, #300]	; (8007cac <HAL_TIM_Base_MspInit+0x150>)
 8007b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b82:	4a4a      	ldr	r2, [pc, #296]	; (8007cac <HAL_TIM_Base_MspInit+0x150>)
 8007b84:	f043 0301 	orr.w	r3, r3, #1
 8007b88:	6593      	str	r3, [r2, #88]	; 0x58
 8007b8a:	4b48      	ldr	r3, [pc, #288]	; (8007cac <HAL_TIM_Base_MspInit+0x150>)
 8007b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b8e:	f003 0301 	and.w	r3, r3, #1
 8007b92:	623b      	str	r3, [r7, #32]
 8007b94:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b96:	4b45      	ldr	r3, [pc, #276]	; (8007cac <HAL_TIM_Base_MspInit+0x150>)
 8007b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b9a:	4a44      	ldr	r2, [pc, #272]	; (8007cac <HAL_TIM_Base_MspInit+0x150>)
 8007b9c:	f043 0301 	orr.w	r3, r3, #1
 8007ba0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007ba2:	4b42      	ldr	r3, [pc, #264]	; (8007cac <HAL_TIM_Base_MspInit+0x150>)
 8007ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ba6:	f003 0301 	and.w	r3, r3, #1
 8007baa:	61fb      	str	r3, [r7, #28]
 8007bac:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bb2:	2302      	movs	r3, #2
 8007bb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007bcc:	f002 fc70 	bl	800a4b0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	2101      	movs	r1, #1
 8007bd4:	201c      	movs	r0, #28
 8007bd6:	f001 fd4c 	bl	8009672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007bda:	201c      	movs	r0, #28
 8007bdc:	f001 fd63 	bl	80096a6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8007be0:	e060      	b.n	8007ca4 <HAL_TIM_Base_MspInit+0x148>
  else if(tim_baseHandle->Instance==TIM3)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a32      	ldr	r2, [pc, #200]	; (8007cb0 <HAL_TIM_Base_MspInit+0x154>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d10c      	bne.n	8007c06 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007bec:	4b2f      	ldr	r3, [pc, #188]	; (8007cac <HAL_TIM_Base_MspInit+0x150>)
 8007bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bf0:	4a2e      	ldr	r2, [pc, #184]	; (8007cac <HAL_TIM_Base_MspInit+0x150>)
 8007bf2:	f043 0302 	orr.w	r3, r3, #2
 8007bf6:	6593      	str	r3, [r2, #88]	; 0x58
 8007bf8:	4b2c      	ldr	r3, [pc, #176]	; (8007cac <HAL_TIM_Base_MspInit+0x150>)
 8007bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bfc:	f003 0302 	and.w	r3, r3, #2
 8007c00:	61bb      	str	r3, [r7, #24]
 8007c02:	69bb      	ldr	r3, [r7, #24]
}
 8007c04:	e04e      	b.n	8007ca4 <HAL_TIM_Base_MspInit+0x148>
  else if(tim_baseHandle->Instance==TIM5)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a2a      	ldr	r2, [pc, #168]	; (8007cb4 <HAL_TIM_Base_MspInit+0x158>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d10c      	bne.n	8007c2a <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8007c10:	4b26      	ldr	r3, [pc, #152]	; (8007cac <HAL_TIM_Base_MspInit+0x150>)
 8007c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c14:	4a25      	ldr	r2, [pc, #148]	; (8007cac <HAL_TIM_Base_MspInit+0x150>)
 8007c16:	f043 0308 	orr.w	r3, r3, #8
 8007c1a:	6593      	str	r3, [r2, #88]	; 0x58
 8007c1c:	4b23      	ldr	r3, [pc, #140]	; (8007cac <HAL_TIM_Base_MspInit+0x150>)
 8007c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c20:	f003 0308 	and.w	r3, r3, #8
 8007c24:	617b      	str	r3, [r7, #20]
 8007c26:	697b      	ldr	r3, [r7, #20]
}
 8007c28:	e03c      	b.n	8007ca4 <HAL_TIM_Base_MspInit+0x148>
  else if(tim_baseHandle->Instance==TIM8)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a22      	ldr	r2, [pc, #136]	; (8007cb8 <HAL_TIM_Base_MspInit+0x15c>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d10c      	bne.n	8007c4e <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8007c34:	4b1d      	ldr	r3, [pc, #116]	; (8007cac <HAL_TIM_Base_MspInit+0x150>)
 8007c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c38:	4a1c      	ldr	r2, [pc, #112]	; (8007cac <HAL_TIM_Base_MspInit+0x150>)
 8007c3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007c3e:	6613      	str	r3, [r2, #96]	; 0x60
 8007c40:	4b1a      	ldr	r3, [pc, #104]	; (8007cac <HAL_TIM_Base_MspInit+0x150>)
 8007c42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c48:	613b      	str	r3, [r7, #16]
 8007c4a:	693b      	ldr	r3, [r7, #16]
}
 8007c4c:	e02a      	b.n	8007ca4 <HAL_TIM_Base_MspInit+0x148>
  else if(tim_baseHandle->Instance==TIM15)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a1a      	ldr	r2, [pc, #104]	; (8007cbc <HAL_TIM_Base_MspInit+0x160>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d114      	bne.n	8007c82 <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8007c58:	4b14      	ldr	r3, [pc, #80]	; (8007cac <HAL_TIM_Base_MspInit+0x150>)
 8007c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c5c:	4a13      	ldr	r2, [pc, #76]	; (8007cac <HAL_TIM_Base_MspInit+0x150>)
 8007c5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c62:	6613      	str	r3, [r2, #96]	; 0x60
 8007c64:	4b11      	ldr	r3, [pc, #68]	; (8007cac <HAL_TIM_Base_MspInit+0x150>)
 8007c66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c6c:	60fb      	str	r3, [r7, #12]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8007c70:	2200      	movs	r2, #0
 8007c72:	2100      	movs	r1, #0
 8007c74:	2018      	movs	r0, #24
 8007c76:	f001 fcfc 	bl	8009672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8007c7a:	2018      	movs	r0, #24
 8007c7c:	f001 fd13 	bl	80096a6 <HAL_NVIC_EnableIRQ>
}
 8007c80:	e010      	b.n	8007ca4 <HAL_TIM_Base_MspInit+0x148>
  else if(tim_baseHandle->Instance==TIM16)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a0e      	ldr	r2, [pc, #56]	; (8007cc0 <HAL_TIM_Base_MspInit+0x164>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d10b      	bne.n	8007ca4 <HAL_TIM_Base_MspInit+0x148>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8007c8c:	4b07      	ldr	r3, [pc, #28]	; (8007cac <HAL_TIM_Base_MspInit+0x150>)
 8007c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c90:	4a06      	ldr	r2, [pc, #24]	; (8007cac <HAL_TIM_Base_MspInit+0x150>)
 8007c92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c96:	6613      	str	r3, [r2, #96]	; 0x60
 8007c98:	4b04      	ldr	r3, [pc, #16]	; (8007cac <HAL_TIM_Base_MspInit+0x150>)
 8007c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ca0:	60bb      	str	r3, [r7, #8]
 8007ca2:	68bb      	ldr	r3, [r7, #8]
}
 8007ca4:	bf00      	nop
 8007ca6:	3738      	adds	r7, #56	; 0x38
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}
 8007cac:	40021000 	.word	0x40021000
 8007cb0:	40000400 	.word	0x40000400
 8007cb4:	40000c00 	.word	0x40000c00
 8007cb8:	40013400 	.word	0x40013400
 8007cbc:	40014000 	.word	0x40014000
 8007cc0:	40014400 	.word	0x40014400

08007cc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007cc4:	480d      	ldr	r0, [pc, #52]	; (8007cfc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007cc6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007cc8:	480d      	ldr	r0, [pc, #52]	; (8007d00 <LoopForever+0x6>)
  ldr r1, =_edata
 8007cca:	490e      	ldr	r1, [pc, #56]	; (8007d04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007ccc:	4a0e      	ldr	r2, [pc, #56]	; (8007d08 <LoopForever+0xe>)
  movs r3, #0
 8007cce:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8007cd0:	e002      	b.n	8007cd8 <LoopCopyDataInit>

08007cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007cd6:	3304      	adds	r3, #4

08007cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007cdc:	d3f9      	bcc.n	8007cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007cde:	4a0b      	ldr	r2, [pc, #44]	; (8007d0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8007ce0:	4c0b      	ldr	r4, [pc, #44]	; (8007d10 <LoopForever+0x16>)
  movs r3, #0
 8007ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007ce4:	e001      	b.n	8007cea <LoopFillZerobss>

08007ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007ce8:	3204      	adds	r2, #4

08007cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007cec:	d3fb      	bcc.n	8007ce6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007cee:	f7ff fc77 	bl	80075e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007cf2:	f006 f987 	bl	800e004 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007cf6:	f7ff f939 	bl	8006f6c <main>

08007cfa <LoopForever>:

LoopForever:
    b LoopForever
 8007cfa:	e7fe      	b.n	8007cfa <LoopForever>
  ldr   r0, =_estack
 8007cfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007d04:	20001ed0 	.word	0x20001ed0
  ldr r2, =_sidata
 8007d08:	08011f20 	.word	0x08011f20
  ldr r2, =_sbss
 8007d0c:	20001ed0 	.word	0x20001ed0
  ldr r4, =_ebss
 8007d10:	20002968 	.word	0x20002968

08007d14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007d14:	e7fe      	b.n	8007d14 <ADC1_2_IRQHandler>

08007d16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b082      	sub	sp, #8
 8007d1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007d20:	2003      	movs	r0, #3
 8007d22:	f001 fc9b 	bl	800965c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007d26:	2000      	movs	r0, #0
 8007d28:	f000 f80e 	bl	8007d48 <HAL_InitTick>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d002      	beq.n	8007d38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	71fb      	strb	r3, [r7, #7]
 8007d36:	e001      	b.n	8007d3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007d38:	f7ff fad6 	bl	80072e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007d3c:	79fb      	ldrb	r3, [r7, #7]

}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3708      	adds	r7, #8
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
	...

08007d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007d50:	2300      	movs	r3, #0
 8007d52:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8007d54:	4b16      	ldr	r3, [pc, #88]	; (8007db0 <HAL_InitTick+0x68>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d022      	beq.n	8007da2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8007d5c:	4b15      	ldr	r3, [pc, #84]	; (8007db4 <HAL_InitTick+0x6c>)
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	4b13      	ldr	r3, [pc, #76]	; (8007db0 <HAL_InitTick+0x68>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007d68:	fbb1 f3f3 	udiv	r3, r1, r3
 8007d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d70:	4618      	mov	r0, r3
 8007d72:	f001 fca6 	bl	80096c2 <HAL_SYSTICK_Config>
 8007d76:	4603      	mov	r3, r0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d10f      	bne.n	8007d9c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2b0f      	cmp	r3, #15
 8007d80:	d809      	bhi.n	8007d96 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007d82:	2200      	movs	r2, #0
 8007d84:	6879      	ldr	r1, [r7, #4]
 8007d86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d8a:	f001 fc72 	bl	8009672 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007d8e:	4a0a      	ldr	r2, [pc, #40]	; (8007db8 <HAL_InitTick+0x70>)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6013      	str	r3, [r2, #0]
 8007d94:	e007      	b.n	8007da6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	73fb      	strb	r3, [r7, #15]
 8007d9a:	e004      	b.n	8007da6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	73fb      	strb	r3, [r7, #15]
 8007da0:	e001      	b.n	8007da6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8007da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3710      	adds	r7, #16
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}
 8007db0:	20000cb4 	.word	0x20000cb4
 8007db4:	20000cac 	.word	0x20000cac
 8007db8:	20000cb0 	.word	0x20000cb0

08007dbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007dc0:	4b05      	ldr	r3, [pc, #20]	; (8007dd8 <HAL_IncTick+0x1c>)
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	4b05      	ldr	r3, [pc, #20]	; (8007ddc <HAL_IncTick+0x20>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4413      	add	r3, r2
 8007dca:	4a03      	ldr	r2, [pc, #12]	; (8007dd8 <HAL_IncTick+0x1c>)
 8007dcc:	6013      	str	r3, [r2, #0]
}
 8007dce:	bf00      	nop
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr
 8007dd8:	20002960 	.word	0x20002960
 8007ddc:	20000cb4 	.word	0x20000cb4

08007de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007de0:	b480      	push	{r7}
 8007de2:	af00      	add	r7, sp, #0
  return uwTick;
 8007de4:	4b03      	ldr	r3, [pc, #12]	; (8007df4 <HAL_GetTick+0x14>)
 8007de6:	681b      	ldr	r3, [r3, #0]
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop
 8007df4:	20002960 	.word	0x20002960

08007df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007e00:	f7ff ffee 	bl	8007de0 <HAL_GetTick>
 8007e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e10:	d004      	beq.n	8007e1c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8007e12:	4b09      	ldr	r3, [pc, #36]	; (8007e38 <HAL_Delay+0x40>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	68fa      	ldr	r2, [r7, #12]
 8007e18:	4413      	add	r3, r2
 8007e1a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007e1c:	bf00      	nop
 8007e1e:	f7ff ffdf 	bl	8007de0 <HAL_GetTick>
 8007e22:	4602      	mov	r2, r0
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	1ad3      	subs	r3, r2, r3
 8007e28:	68fa      	ldr	r2, [r7, #12]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d8f7      	bhi.n	8007e1e <HAL_Delay+0x26>
  {
  }
}
 8007e2e:	bf00      	nop
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	20000cb4 	.word	0x20000cb4

08007e3c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	431a      	orrs	r2, r3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	609a      	str	r2, [r3, #8]
}
 8007e56:	bf00      	nop
 8007e58:	370c      	adds	r7, #12
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr

08007e62 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8007e62:	b480      	push	{r7}
 8007e64:	b083      	sub	sp, #12
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
 8007e6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	431a      	orrs	r2, r3
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	609a      	str	r2, [r3, #8]
}
 8007e7c:	bf00      	nop
 8007e7e:	370c      	adds	r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	370c      	adds	r7, #12
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8007ea4:	b490      	push	{r4, r7}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	60b9      	str	r1, [r7, #8]
 8007eae:	607a      	str	r2, [r7, #4]
 8007eb0:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	3360      	adds	r3, #96	; 0x60
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	4413      	add	r3, r2
 8007ebe:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8007ec0:	6822      	ldr	r2, [r4, #0]
 8007ec2:	4b08      	ldr	r3, [pc, #32]	; (8007ee4 <LL_ADC_SetOffset+0x40>)
 8007ec4:	4013      	ands	r3, r2
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8007ecc:	683a      	ldr	r2, [r7, #0]
 8007ece:	430a      	orrs	r2, r1
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ed6:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8007ed8:	bf00      	nop
 8007eda:	3710      	adds	r7, #16
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bc90      	pop	{r4, r7}
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	03fff000 	.word	0x03fff000

08007ee8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8007ee8:	b490      	push	{r4, r7}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	3360      	adds	r3, #96	; 0x60
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	4413      	add	r3, r2
 8007efe:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007f00:	6823      	ldr	r3, [r4, #0]
 8007f02:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3708      	adds	r7, #8
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bc90      	pop	{r4, r7}
 8007f0e:	4770      	bx	lr

08007f10 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8007f10:	b490      	push	{r4, r7}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	60b9      	str	r1, [r7, #8]
 8007f1a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	3360      	adds	r3, #96	; 0x60
 8007f20:	461a      	mov	r2, r3
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	4413      	add	r3, r2
 8007f28:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8007f2a:	6823      	ldr	r3, [r4, #0]
 8007f2c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8007f36:	bf00      	nop
 8007f38:	3710      	adds	r7, #16
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bc90      	pop	{r4, r7}
 8007f3e:	4770      	bx	lr

08007f40 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8007f40:	b490      	push	{r4, r7}
 8007f42:	b084      	sub	sp, #16
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	3360      	adds	r3, #96	; 0x60
 8007f50:	461a      	mov	r2, r3
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	4413      	add	r3, r2
 8007f58:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8007f5a:	6823      	ldr	r3, [r4, #0]
 8007f5c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8007f66:	bf00      	nop
 8007f68:	3710      	adds	r7, #16
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bc90      	pop	{r4, r7}
 8007f6e:	4770      	bx	lr

08007f70 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8007f70:	b490      	push	{r4, r7}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	3360      	adds	r3, #96	; 0x60
 8007f80:	461a      	mov	r2, r3
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	4413      	add	r3, r2
 8007f88:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8007f8a:	6823      	ldr	r3, [r4, #0]
 8007f8c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4313      	orrs	r3, r2
 8007f94:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8007f96:	bf00      	nop
 8007f98:	3710      	adds	r7, #16
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bc90      	pop	{r4, r7}
 8007f9e:	4770      	bx	lr

08007fa0 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	695b      	ldr	r3, [r3, #20]
 8007fae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	431a      	orrs	r2, r3
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	615a      	str	r2, [r3, #20]
}
 8007fba:	bf00      	nop
 8007fbc:	370c      	adds	r7, #12
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr

08007fc6 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8007fc6:	b490      	push	{r4, r7}
 8007fc8:	b084      	sub	sp, #16
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	60f8      	str	r0, [r7, #12]
 8007fce:	60b9      	str	r1, [r7, #8]
 8007fd0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	3330      	adds	r3, #48	; 0x30
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	0a1b      	lsrs	r3, r3, #8
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	f003 030c 	and.w	r3, r3, #12
 8007fe2:	4413      	add	r3, r2
 8007fe4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8007fe6:	6822      	ldr	r2, [r4, #0]
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	f003 031f 	and.w	r3, r3, #31
 8007fee:	211f      	movs	r1, #31
 8007ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ff4:	43db      	mvns	r3, r3
 8007ff6:	401a      	ands	r2, r3
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	0e9b      	lsrs	r3, r3, #26
 8007ffc:	f003 011f 	and.w	r1, r3, #31
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	f003 031f 	and.w	r3, r3, #31
 8008006:	fa01 f303 	lsl.w	r3, r1, r3
 800800a:	4313      	orrs	r3, r2
 800800c:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800800e:	bf00      	nop
 8008010:	3710      	adds	r7, #16
 8008012:	46bd      	mov	sp, r7
 8008014:	bc90      	pop	{r4, r7}
 8008016:	4770      	bx	lr

08008018 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8008018:	b490      	push	{r4, r7}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	3314      	adds	r3, #20
 8008028:	461a      	mov	r2, r3
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	0e5b      	lsrs	r3, r3, #25
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	f003 0304 	and.w	r3, r3, #4
 8008034:	4413      	add	r3, r2
 8008036:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008038:	6822      	ldr	r2, [r4, #0]
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	0d1b      	lsrs	r3, r3, #20
 800803e:	f003 031f 	and.w	r3, r3, #31
 8008042:	2107      	movs	r1, #7
 8008044:	fa01 f303 	lsl.w	r3, r1, r3
 8008048:	43db      	mvns	r3, r3
 800804a:	401a      	ands	r2, r3
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	0d1b      	lsrs	r3, r3, #20
 8008050:	f003 031f 	and.w	r3, r3, #31
 8008054:	6879      	ldr	r1, [r7, #4]
 8008056:	fa01 f303 	lsl.w	r3, r1, r3
 800805a:	4313      	orrs	r3, r2
 800805c:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800805e:	bf00      	nop
 8008060:	3710      	adds	r7, #16
 8008062:	46bd      	mov	sp, r7
 8008064:	bc90      	pop	{r4, r7}
 8008066:	4770      	bx	lr

08008068 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8008068:	b480      	push	{r7}
 800806a:	b085      	sub	sp, #20
 800806c:	af00      	add	r7, sp, #0
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008080:	43db      	mvns	r3, r3
 8008082:	401a      	ands	r2, r3
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f003 0318 	and.w	r3, r3, #24
 800808a:	4908      	ldr	r1, [pc, #32]	; (80080ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800808c:	40d9      	lsrs	r1, r3
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	400b      	ands	r3, r1
 8008092:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008096:	431a      	orrs	r2, r3
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800809e:	bf00      	nop
 80080a0:	3714      	adds	r7, #20
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr
 80080aa:	bf00      	nop
 80080ac:	0007ffff 	.word	0x0007ffff

080080b0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80080c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	6093      	str	r3, [r2, #8]
}
 80080c8:	bf00      	nop
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080e8:	d101      	bne.n	80080ee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80080ea:	2301      	movs	r3, #1
 80080ec:	e000      	b.n	80080f0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80080ee:	2300      	movs	r3, #0
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	370c      	adds	r7, #12
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr

080080fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b083      	sub	sp, #12
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800810c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008110:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8008118:	bf00      	nop
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8008124:	b480      	push	{r7}
 8008126:	b083      	sub	sp, #12
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008134:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008138:	d101      	bne.n	800813e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800813a:	2301      	movs	r3, #1
 800813c:	e000      	b.n	8008140 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800813e:	2300      	movs	r3, #0
}
 8008140:	4618      	mov	r0, r3
 8008142:	370c      	adds	r7, #12
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	f003 0301 	and.w	r3, r3, #1
 800815c:	2b01      	cmp	r3, #1
 800815e:	d101      	bne.n	8008164 <LL_ADC_IsEnabled+0x18>
 8008160:	2301      	movs	r3, #1
 8008162:	e000      	b.n	8008166 <LL_ADC_IsEnabled+0x1a>
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	370c      	adds	r7, #12
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr

08008172 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8008172:	b480      	push	{r7}
 8008174:	b083      	sub	sp, #12
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	689b      	ldr	r3, [r3, #8]
 800817e:	f003 0304 	and.w	r3, r3, #4
 8008182:	2b04      	cmp	r3, #4
 8008184:	d101      	bne.n	800818a <LL_ADC_REG_IsConversionOngoing+0x18>
 8008186:	2301      	movs	r3, #1
 8008188:	e000      	b.n	800818c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800818a:	2300      	movs	r3, #0
}
 800818c:	4618      	mov	r0, r3
 800818e:	370c      	adds	r7, #12
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8008198:	b480      	push	{r7}
 800819a:	b083      	sub	sp, #12
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	f003 0308 	and.w	r3, r3, #8
 80081a8:	2b08      	cmp	r3, #8
 80081aa:	d101      	bne.n	80081b0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80081ac:	2301      	movs	r3, #1
 80081ae:	e000      	b.n	80081b2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	370c      	adds	r7, #12
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr
	...

080081c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80081c0:	b590      	push	{r4, r7, lr}
 80081c2:	b089      	sub	sp, #36	; 0x24
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80081c8:	2300      	movs	r3, #0
 80081ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80081cc:	2300      	movs	r3, #0
 80081ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d101      	bne.n	80081da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80081d6:	2301      	movs	r3, #1
 80081d8:	e1ad      	b.n	8008536 <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	695b      	ldr	r3, [r3, #20]
 80081de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d109      	bne.n	80081fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f7fe f91b 	bl	8006424 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2200      	movs	r2, #0
 80081f2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4618      	mov	r0, r3
 8008202:	f7ff ff67 	bl	80080d4 <LL_ADC_IsDeepPowerDownEnabled>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d004      	beq.n	8008216 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4618      	mov	r0, r3
 8008212:	f7ff ff4d 	bl	80080b0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4618      	mov	r0, r3
 800821c:	f7ff ff82 	bl	8008124 <LL_ADC_IsInternalRegulatorEnabled>
 8008220:	4603      	mov	r3, r0
 8008222:	2b00      	cmp	r3, #0
 8008224:	d113      	bne.n	800824e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4618      	mov	r0, r3
 800822c:	f7ff ff66 	bl	80080fc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8008230:	4b9e      	ldr	r3, [pc, #632]	; (80084ac <HAL_ADC_Init+0x2ec>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	099b      	lsrs	r3, r3, #6
 8008236:	4a9e      	ldr	r2, [pc, #632]	; (80084b0 <HAL_ADC_Init+0x2f0>)
 8008238:	fba2 2303 	umull	r2, r3, r2, r3
 800823c:	099b      	lsrs	r3, r3, #6
 800823e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008240:	e002      	b.n	8008248 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	3b01      	subs	r3, #1
 8008246:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d1f9      	bne.n	8008242 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4618      	mov	r0, r3
 8008254:	f7ff ff66 	bl	8008124 <LL_ADC_IsInternalRegulatorEnabled>
 8008258:	4603      	mov	r3, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d10d      	bne.n	800827a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008262:	f043 0210 	orr.w	r2, r3, #16
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800826e:	f043 0201 	orr.w	r2, r3, #1
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4618      	mov	r0, r3
 8008280:	f7ff ff77 	bl	8008172 <LL_ADC_REG_IsConversionOngoing>
 8008284:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800828a:	f003 0310 	and.w	r3, r3, #16
 800828e:	2b00      	cmp	r3, #0
 8008290:	f040 8148 	bne.w	8008524 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	2b00      	cmp	r3, #0
 8008298:	f040 8144 	bne.w	8008524 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082a0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80082a4:	f043 0202 	orr.w	r2, r3, #2
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4618      	mov	r0, r3
 80082b2:	f7ff ff4b 	bl	800814c <LL_ADC_IsEnabled>
 80082b6:	4603      	mov	r3, r0
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d141      	bne.n	8008340 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80082c4:	d004      	beq.n	80082d0 <HAL_ADC_Init+0x110>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a7a      	ldr	r2, [pc, #488]	; (80084b4 <HAL_ADC_Init+0x2f4>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d10f      	bne.n	80082f0 <HAL_ADC_Init+0x130>
 80082d0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80082d4:	f7ff ff3a 	bl	800814c <LL_ADC_IsEnabled>
 80082d8:	4604      	mov	r4, r0
 80082da:	4876      	ldr	r0, [pc, #472]	; (80084b4 <HAL_ADC_Init+0x2f4>)
 80082dc:	f7ff ff36 	bl	800814c <LL_ADC_IsEnabled>
 80082e0:	4603      	mov	r3, r0
 80082e2:	4323      	orrs	r3, r4
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	bf0c      	ite	eq
 80082e8:	2301      	moveq	r3, #1
 80082ea:	2300      	movne	r3, #0
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	e012      	b.n	8008316 <HAL_ADC_Init+0x156>
 80082f0:	4871      	ldr	r0, [pc, #452]	; (80084b8 <HAL_ADC_Init+0x2f8>)
 80082f2:	f7ff ff2b 	bl	800814c <LL_ADC_IsEnabled>
 80082f6:	4604      	mov	r4, r0
 80082f8:	4870      	ldr	r0, [pc, #448]	; (80084bc <HAL_ADC_Init+0x2fc>)
 80082fa:	f7ff ff27 	bl	800814c <LL_ADC_IsEnabled>
 80082fe:	4603      	mov	r3, r0
 8008300:	431c      	orrs	r4, r3
 8008302:	486f      	ldr	r0, [pc, #444]	; (80084c0 <HAL_ADC_Init+0x300>)
 8008304:	f7ff ff22 	bl	800814c <LL_ADC_IsEnabled>
 8008308:	4603      	mov	r3, r0
 800830a:	4323      	orrs	r3, r4
 800830c:	2b00      	cmp	r3, #0
 800830e:	bf0c      	ite	eq
 8008310:	2301      	moveq	r3, #1
 8008312:	2300      	movne	r3, #0
 8008314:	b2db      	uxtb	r3, r3
 8008316:	2b00      	cmp	r3, #0
 8008318:	d012      	beq.n	8008340 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008322:	d004      	beq.n	800832e <HAL_ADC_Init+0x16e>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a62      	ldr	r2, [pc, #392]	; (80084b4 <HAL_ADC_Init+0x2f4>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d101      	bne.n	8008332 <HAL_ADC_Init+0x172>
 800832e:	4a65      	ldr	r2, [pc, #404]	; (80084c4 <HAL_ADC_Init+0x304>)
 8008330:	e000      	b.n	8008334 <HAL_ADC_Init+0x174>
 8008332:	4a65      	ldr	r2, [pc, #404]	; (80084c8 <HAL_ADC_Init+0x308>)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	4619      	mov	r1, r3
 800833a:	4610      	mov	r0, r2
 800833c:	f7ff fd7e 	bl	8007e3c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	7f5b      	ldrb	r3, [r3, #29]
 8008344:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800834a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8008350:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8008356:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800835e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008360:	4313      	orrs	r3, r2
 8008362:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800836a:	2b01      	cmp	r3, #1
 800836c:	d106      	bne.n	800837c <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008372:	3b01      	subs	r3, #1
 8008374:	045b      	lsls	r3, r3, #17
 8008376:	69ba      	ldr	r2, [r7, #24]
 8008378:	4313      	orrs	r3, r2
 800837a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008380:	2b00      	cmp	r3, #0
 8008382:	d009      	beq.n	8008398 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008388:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008390:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008392:	69ba      	ldr	r2, [r7, #24]
 8008394:	4313      	orrs	r3, r2
 8008396:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	68da      	ldr	r2, [r3, #12]
 800839e:	4b4b      	ldr	r3, [pc, #300]	; (80084cc <HAL_ADC_Init+0x30c>)
 80083a0:	4013      	ands	r3, r2
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	6812      	ldr	r2, [r2, #0]
 80083a6:	69b9      	ldr	r1, [r7, #24]
 80083a8:	430b      	orrs	r3, r1
 80083aa:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	430a      	orrs	r2, r1
 80083c0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7ff fed3 	bl	8008172 <LL_ADC_REG_IsConversionOngoing>
 80083cc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4618      	mov	r0, r3
 80083d4:	f7ff fee0 	bl	8008198 <LL_ADC_INJ_IsConversionOngoing>
 80083d8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d17f      	bne.n	80084e0 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d17c      	bne.n	80084e0 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80083ea:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80083f2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80083f4:	4313      	orrs	r3, r2
 80083f6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008402:	f023 0302 	bic.w	r3, r3, #2
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	6812      	ldr	r2, [r2, #0]
 800840a:	69b9      	ldr	r1, [r7, #24]
 800840c:	430b      	orrs	r3, r1
 800840e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	691b      	ldr	r3, [r3, #16]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d017      	beq.n	8008448 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	691a      	ldr	r2, [r3, #16]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008426:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008430:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008434:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	6911      	ldr	r1, [r2, #16]
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	6812      	ldr	r2, [r2, #0]
 8008440:	430b      	orrs	r3, r1
 8008442:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8008446:	e013      	b.n	8008470 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	691a      	ldr	r2, [r3, #16]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008456:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	6812      	ldr	r2, [r2, #0]
 8008464:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008468:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800846c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008476:	2b01      	cmp	r3, #1
 8008478:	d12a      	bne.n	80084d0 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	691b      	ldr	r3, [r3, #16]
 8008480:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008484:	f023 0304 	bic.w	r3, r3, #4
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008490:	4311      	orrs	r1, r2
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008496:	4311      	orrs	r1, r2
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800849c:	430a      	orrs	r2, r1
 800849e:	431a      	orrs	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f042 0201 	orr.w	r2, r2, #1
 80084a8:	611a      	str	r2, [r3, #16]
 80084aa:	e019      	b.n	80084e0 <HAL_ADC_Init+0x320>
 80084ac:	20000cac 	.word	0x20000cac
 80084b0:	053e2d63 	.word	0x053e2d63
 80084b4:	50000100 	.word	0x50000100
 80084b8:	50000400 	.word	0x50000400
 80084bc:	50000500 	.word	0x50000500
 80084c0:	50000600 	.word	0x50000600
 80084c4:	50000300 	.word	0x50000300
 80084c8:	50000700 	.word	0x50000700
 80084cc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	691a      	ldr	r2, [r3, #16]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f022 0201 	bic.w	r2, r2, #1
 80084de:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	695b      	ldr	r3, [r3, #20]
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d10c      	bne.n	8008502 <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ee:	f023 010f 	bic.w	r1, r3, #15
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a1b      	ldr	r3, [r3, #32]
 80084f6:	1e5a      	subs	r2, r3, #1
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	430a      	orrs	r2, r1
 80084fe:	631a      	str	r2, [r3, #48]	; 0x30
 8008500:	e007      	b.n	8008512 <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f022 020f 	bic.w	r2, r2, #15
 8008510:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008516:	f023 0303 	bic.w	r3, r3, #3
 800851a:	f043 0201 	orr.w	r2, r3, #1
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	65da      	str	r2, [r3, #92]	; 0x5c
 8008522:	e007      	b.n	8008534 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008528:	f043 0210 	orr.w	r2, r3, #16
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008530:	2301      	movs	r3, #1
 8008532:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8008534:	7ffb      	ldrb	r3, [r7, #31]
}
 8008536:	4618      	mov	r0, r3
 8008538:	3724      	adds	r7, #36	; 0x24
 800853a:	46bd      	mov	sp, r7
 800853c:	bd90      	pop	{r4, r7, pc}
 800853e:	bf00      	nop

08008540 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b0a6      	sub	sp, #152	; 0x98
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800854a:	2300      	movs	r3, #0
 800854c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8008550:	2300      	movs	r3, #0
 8008552:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800855a:	2b01      	cmp	r3, #1
 800855c:	d101      	bne.n	8008562 <HAL_ADC_ConfigChannel+0x22>
 800855e:	2302      	movs	r3, #2
 8008560:	e38e      	b.n	8008c80 <HAL_ADC_ConfigChannel+0x740>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2201      	movs	r2, #1
 8008566:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4618      	mov	r0, r3
 8008570:	f7ff fdff 	bl	8008172 <LL_ADC_REG_IsConversionOngoing>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	f040 836f 	bne.w	8008c5a <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6818      	ldr	r0, [r3, #0]
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	6859      	ldr	r1, [r3, #4]
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	461a      	mov	r2, r3
 800858a:	f7ff fd1c 	bl	8007fc6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4618      	mov	r0, r3
 8008594:	f7ff fded 	bl	8008172 <LL_ADC_REG_IsConversionOngoing>
 8008598:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4618      	mov	r0, r3
 80085a2:	f7ff fdf9 	bl	8008198 <LL_ADC_INJ_IsConversionOngoing>
 80085a6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80085aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	f040 817b 	bne.w	80088aa <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80085b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	f040 8176 	bne.w	80088aa <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085c6:	d10f      	bne.n	80085e8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6818      	ldr	r0, [r3, #0]
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	2200      	movs	r2, #0
 80085d2:	4619      	mov	r1, r3
 80085d4:	f7ff fd20 	bl	8008018 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7ff fcdd 	bl	8007fa0 <LL_ADC_SetSamplingTimeCommonConfig>
 80085e6:	e00e      	b.n	8008606 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6818      	ldr	r0, [r3, #0]
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	6819      	ldr	r1, [r3, #0]
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	461a      	mov	r2, r3
 80085f6:	f7ff fd0f 	bl	8008018 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	2100      	movs	r1, #0
 8008600:	4618      	mov	r0, r3
 8008602:	f7ff fccd 	bl	8007fa0 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	695a      	ldr	r2, [r3, #20]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	08db      	lsrs	r3, r3, #3
 8008612:	f003 0303 	and.w	r3, r3, #3
 8008616:	005b      	lsls	r3, r3, #1
 8008618:	fa02 f303 	lsl.w	r3, r2, r3
 800861c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	691b      	ldr	r3, [r3, #16]
 8008624:	2b04      	cmp	r3, #4
 8008626:	d022      	beq.n	800866e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6818      	ldr	r0, [r3, #0]
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	6919      	ldr	r1, [r3, #16]
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008638:	f7ff fc34 	bl	8007ea4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6818      	ldr	r0, [r3, #0]
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	6919      	ldr	r1, [r3, #16]
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	699b      	ldr	r3, [r3, #24]
 8008648:	461a      	mov	r2, r3
 800864a:	f7ff fc79 	bl	8007f40 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6818      	ldr	r0, [r3, #0]
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	6919      	ldr	r1, [r3, #16]
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	7f1b      	ldrb	r3, [r3, #28]
 800865a:	2b01      	cmp	r3, #1
 800865c:	d102      	bne.n	8008664 <HAL_ADC_ConfigChannel+0x124>
 800865e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008662:	e000      	b.n	8008666 <HAL_ADC_ConfigChannel+0x126>
 8008664:	2300      	movs	r3, #0
 8008666:	461a      	mov	r2, r3
 8008668:	f7ff fc82 	bl	8007f70 <LL_ADC_SetOffsetSaturation>
 800866c:	e11d      	b.n	80088aa <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	2100      	movs	r1, #0
 8008674:	4618      	mov	r0, r3
 8008676:	f7ff fc37 	bl	8007ee8 <LL_ADC_GetOffsetChannel>
 800867a:	4603      	mov	r3, r0
 800867c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008680:	2b00      	cmp	r3, #0
 8008682:	d10a      	bne.n	800869a <HAL_ADC_ConfigChannel+0x15a>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2100      	movs	r1, #0
 800868a:	4618      	mov	r0, r3
 800868c:	f7ff fc2c 	bl	8007ee8 <LL_ADC_GetOffsetChannel>
 8008690:	4603      	mov	r3, r0
 8008692:	0e9b      	lsrs	r3, r3, #26
 8008694:	f003 021f 	and.w	r2, r3, #31
 8008698:	e012      	b.n	80086c0 <HAL_ADC_ConfigChannel+0x180>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	2100      	movs	r1, #0
 80086a0:	4618      	mov	r0, r3
 80086a2:	f7ff fc21 	bl	8007ee8 <LL_ADC_GetOffsetChannel>
 80086a6:	4603      	mov	r3, r0
 80086a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80086b0:	fa93 f3a3 	rbit	r3, r3
 80086b4:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80086b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80086b8:	fab3 f383 	clz	r3, r3
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	461a      	mov	r2, r3
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d105      	bne.n	80086d8 <HAL_ADC_ConfigChannel+0x198>
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	0e9b      	lsrs	r3, r3, #26
 80086d2:	f003 031f 	and.w	r3, r3, #31
 80086d6:	e00a      	b.n	80086ee <HAL_ADC_ConfigChannel+0x1ae>
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086e0:	fa93 f3a3 	rbit	r3, r3
 80086e4:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 80086e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086e8:	fab3 f383 	clz	r3, r3
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d106      	bne.n	8008700 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	2200      	movs	r2, #0
 80086f8:	2100      	movs	r1, #0
 80086fa:	4618      	mov	r0, r3
 80086fc:	f7ff fc08 	bl	8007f10 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2101      	movs	r1, #1
 8008706:	4618      	mov	r0, r3
 8008708:	f7ff fbee 	bl	8007ee8 <LL_ADC_GetOffsetChannel>
 800870c:	4603      	mov	r3, r0
 800870e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008712:	2b00      	cmp	r3, #0
 8008714:	d10a      	bne.n	800872c <HAL_ADC_ConfigChannel+0x1ec>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	2101      	movs	r1, #1
 800871c:	4618      	mov	r0, r3
 800871e:	f7ff fbe3 	bl	8007ee8 <LL_ADC_GetOffsetChannel>
 8008722:	4603      	mov	r3, r0
 8008724:	0e9b      	lsrs	r3, r3, #26
 8008726:	f003 021f 	and.w	r2, r3, #31
 800872a:	e010      	b.n	800874e <HAL_ADC_ConfigChannel+0x20e>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	2101      	movs	r1, #1
 8008732:	4618      	mov	r0, r3
 8008734:	f7ff fbd8 	bl	8007ee8 <LL_ADC_GetOffsetChannel>
 8008738:	4603      	mov	r3, r0
 800873a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800873c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800873e:	fa93 f3a3 	rbit	r3, r3
 8008742:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8008744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008746:	fab3 f383 	clz	r3, r3
 800874a:	b2db      	uxtb	r3, r3
 800874c:	461a      	mov	r2, r3
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008756:	2b00      	cmp	r3, #0
 8008758:	d105      	bne.n	8008766 <HAL_ADC_ConfigChannel+0x226>
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	0e9b      	lsrs	r3, r3, #26
 8008760:	f003 031f 	and.w	r3, r3, #31
 8008764:	e00a      	b.n	800877c <HAL_ADC_ConfigChannel+0x23c>
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800876c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800876e:	fa93 f3a3 	rbit	r3, r3
 8008772:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8008774:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008776:	fab3 f383 	clz	r3, r3
 800877a:	b2db      	uxtb	r3, r3
 800877c:	429a      	cmp	r2, r3
 800877e:	d106      	bne.n	800878e <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	2200      	movs	r2, #0
 8008786:	2101      	movs	r1, #1
 8008788:	4618      	mov	r0, r3
 800878a:	f7ff fbc1 	bl	8007f10 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	2102      	movs	r1, #2
 8008794:	4618      	mov	r0, r3
 8008796:	f7ff fba7 	bl	8007ee8 <LL_ADC_GetOffsetChannel>
 800879a:	4603      	mov	r3, r0
 800879c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d10a      	bne.n	80087ba <HAL_ADC_ConfigChannel+0x27a>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2102      	movs	r1, #2
 80087aa:	4618      	mov	r0, r3
 80087ac:	f7ff fb9c 	bl	8007ee8 <LL_ADC_GetOffsetChannel>
 80087b0:	4603      	mov	r3, r0
 80087b2:	0e9b      	lsrs	r3, r3, #26
 80087b4:	f003 021f 	and.w	r2, r3, #31
 80087b8:	e010      	b.n	80087dc <HAL_ADC_ConfigChannel+0x29c>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	2102      	movs	r1, #2
 80087c0:	4618      	mov	r0, r3
 80087c2:	f7ff fb91 	bl	8007ee8 <LL_ADC_GetOffsetChannel>
 80087c6:	4603      	mov	r3, r0
 80087c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087cc:	fa93 f3a3 	rbit	r3, r3
 80087d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 80087d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087d4:	fab3 f383 	clz	r3, r3
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	461a      	mov	r2, r3
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d105      	bne.n	80087f4 <HAL_ADC_ConfigChannel+0x2b4>
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	0e9b      	lsrs	r3, r3, #26
 80087ee:	f003 031f 	and.w	r3, r3, #31
 80087f2:	e00a      	b.n	800880a <HAL_ADC_ConfigChannel+0x2ca>
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80087fc:	fa93 f3a3 	rbit	r3, r3
 8008800:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8008802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008804:	fab3 f383 	clz	r3, r3
 8008808:	b2db      	uxtb	r3, r3
 800880a:	429a      	cmp	r2, r3
 800880c:	d106      	bne.n	800881c <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	2200      	movs	r2, #0
 8008814:	2102      	movs	r1, #2
 8008816:	4618      	mov	r0, r3
 8008818:	f7ff fb7a 	bl	8007f10 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	2103      	movs	r1, #3
 8008822:	4618      	mov	r0, r3
 8008824:	f7ff fb60 	bl	8007ee8 <LL_ADC_GetOffsetChannel>
 8008828:	4603      	mov	r3, r0
 800882a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800882e:	2b00      	cmp	r3, #0
 8008830:	d10a      	bne.n	8008848 <HAL_ADC_ConfigChannel+0x308>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	2103      	movs	r1, #3
 8008838:	4618      	mov	r0, r3
 800883a:	f7ff fb55 	bl	8007ee8 <LL_ADC_GetOffsetChannel>
 800883e:	4603      	mov	r3, r0
 8008840:	0e9b      	lsrs	r3, r3, #26
 8008842:	f003 021f 	and.w	r2, r3, #31
 8008846:	e010      	b.n	800886a <HAL_ADC_ConfigChannel+0x32a>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2103      	movs	r1, #3
 800884e:	4618      	mov	r0, r3
 8008850:	f7ff fb4a 	bl	8007ee8 <LL_ADC_GetOffsetChannel>
 8008854:	4603      	mov	r3, r0
 8008856:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800885a:	fa93 f3a3 	rbit	r3, r3
 800885e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008862:	fab3 f383 	clz	r3, r3
 8008866:	b2db      	uxtb	r3, r3
 8008868:	461a      	mov	r2, r3
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008872:	2b00      	cmp	r3, #0
 8008874:	d105      	bne.n	8008882 <HAL_ADC_ConfigChannel+0x342>
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	0e9b      	lsrs	r3, r3, #26
 800887c:	f003 031f 	and.w	r3, r3, #31
 8008880:	e00a      	b.n	8008898 <HAL_ADC_ConfigChannel+0x358>
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008888:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800888a:	fa93 f3a3 	rbit	r3, r3
 800888e:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8008890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008892:	fab3 f383 	clz	r3, r3
 8008896:	b2db      	uxtb	r3, r3
 8008898:	429a      	cmp	r2, r3
 800889a:	d106      	bne.n	80088aa <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	2200      	movs	r2, #0
 80088a2:	2103      	movs	r1, #3
 80088a4:	4618      	mov	r0, r3
 80088a6:	f7ff fb33 	bl	8007f10 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7ff fc4c 	bl	800814c <LL_ADC_IsEnabled>
 80088b4:	4603      	mov	r3, r0
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	f040 810c 	bne.w	8008ad4 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6818      	ldr	r0, [r3, #0]
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	6819      	ldr	r1, [r3, #0]
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	68db      	ldr	r3, [r3, #12]
 80088c8:	461a      	mov	r2, r3
 80088ca:	f7ff fbcd 	bl	8008068 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	68db      	ldr	r3, [r3, #12]
 80088d2:	4aaf      	ldr	r2, [pc, #700]	; (8008b90 <HAL_ADC_ConfigChannel+0x650>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	f040 80fd 	bne.w	8008ad4 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d10b      	bne.n	8008902 <HAL_ADC_ConfigChannel+0x3c2>
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	0e9b      	lsrs	r3, r3, #26
 80088f0:	3301      	adds	r3, #1
 80088f2:	f003 031f 	and.w	r3, r3, #31
 80088f6:	2b09      	cmp	r3, #9
 80088f8:	bf94      	ite	ls
 80088fa:	2301      	movls	r3, #1
 80088fc:	2300      	movhi	r3, #0
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	e012      	b.n	8008928 <HAL_ADC_ConfigChannel+0x3e8>
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800890a:	fa93 f3a3 	rbit	r3, r3
 800890e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8008910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008912:	fab3 f383 	clz	r3, r3
 8008916:	b2db      	uxtb	r3, r3
 8008918:	3301      	adds	r3, #1
 800891a:	f003 031f 	and.w	r3, r3, #31
 800891e:	2b09      	cmp	r3, #9
 8008920:	bf94      	ite	ls
 8008922:	2301      	movls	r3, #1
 8008924:	2300      	movhi	r3, #0
 8008926:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008928:	2b00      	cmp	r3, #0
 800892a:	d064      	beq.n	80089f6 <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008934:	2b00      	cmp	r3, #0
 8008936:	d107      	bne.n	8008948 <HAL_ADC_ConfigChannel+0x408>
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	0e9b      	lsrs	r3, r3, #26
 800893e:	3301      	adds	r3, #1
 8008940:	069b      	lsls	r3, r3, #26
 8008942:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008946:	e00e      	b.n	8008966 <HAL_ADC_ConfigChannel+0x426>
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800894e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008950:	fa93 f3a3 	rbit	r3, r3
 8008954:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008958:	fab3 f383 	clz	r3, r3
 800895c:	b2db      	uxtb	r3, r3
 800895e:	3301      	adds	r3, #1
 8008960:	069b      	lsls	r3, r3, #26
 8008962:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800896e:	2b00      	cmp	r3, #0
 8008970:	d109      	bne.n	8008986 <HAL_ADC_ConfigChannel+0x446>
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	0e9b      	lsrs	r3, r3, #26
 8008978:	3301      	adds	r3, #1
 800897a:	f003 031f 	and.w	r3, r3, #31
 800897e:	2101      	movs	r1, #1
 8008980:	fa01 f303 	lsl.w	r3, r1, r3
 8008984:	e010      	b.n	80089a8 <HAL_ADC_ConfigChannel+0x468>
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800898c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800898e:	fa93 f3a3 	rbit	r3, r3
 8008992:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008996:	fab3 f383 	clz	r3, r3
 800899a:	b2db      	uxtb	r3, r3
 800899c:	3301      	adds	r3, #1
 800899e:	f003 031f 	and.w	r3, r3, #31
 80089a2:	2101      	movs	r1, #1
 80089a4:	fa01 f303 	lsl.w	r3, r1, r3
 80089a8:	ea42 0103 	orr.w	r1, r2, r3
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d10a      	bne.n	80089ce <HAL_ADC_ConfigChannel+0x48e>
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	0e9b      	lsrs	r3, r3, #26
 80089be:	3301      	adds	r3, #1
 80089c0:	f003 021f 	and.w	r2, r3, #31
 80089c4:	4613      	mov	r3, r2
 80089c6:	005b      	lsls	r3, r3, #1
 80089c8:	4413      	add	r3, r2
 80089ca:	051b      	lsls	r3, r3, #20
 80089cc:	e011      	b.n	80089f2 <HAL_ADC_ConfigChannel+0x4b2>
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d6:	fa93 f3a3 	rbit	r3, r3
 80089da:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80089dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089de:	fab3 f383 	clz	r3, r3
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	3301      	adds	r3, #1
 80089e6:	f003 021f 	and.w	r2, r3, #31
 80089ea:	4613      	mov	r3, r2
 80089ec:	005b      	lsls	r3, r3, #1
 80089ee:	4413      	add	r3, r2
 80089f0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80089f2:	430b      	orrs	r3, r1
 80089f4:	e069      	b.n	8008aca <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d107      	bne.n	8008a12 <HAL_ADC_ConfigChannel+0x4d2>
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	0e9b      	lsrs	r3, r3, #26
 8008a08:	3301      	adds	r3, #1
 8008a0a:	069b      	lsls	r3, r3, #26
 8008a0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008a10:	e00e      	b.n	8008a30 <HAL_ADC_ConfigChannel+0x4f0>
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a18:	6a3b      	ldr	r3, [r7, #32]
 8008a1a:	fa93 f3a3 	rbit	r3, r3
 8008a1e:	61fb      	str	r3, [r7, #28]
  return result;
 8008a20:	69fb      	ldr	r3, [r7, #28]
 8008a22:	fab3 f383 	clz	r3, r3
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	3301      	adds	r3, #1
 8008a2a:	069b      	lsls	r3, r3, #26
 8008a2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d109      	bne.n	8008a50 <HAL_ADC_ConfigChannel+0x510>
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	0e9b      	lsrs	r3, r3, #26
 8008a42:	3301      	adds	r3, #1
 8008a44:	f003 031f 	and.w	r3, r3, #31
 8008a48:	2101      	movs	r1, #1
 8008a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8008a4e:	e010      	b.n	8008a72 <HAL_ADC_ConfigChannel+0x532>
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a56:	69bb      	ldr	r3, [r7, #24]
 8008a58:	fa93 f3a3 	rbit	r3, r3
 8008a5c:	617b      	str	r3, [r7, #20]
  return result;
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	fab3 f383 	clz	r3, r3
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	3301      	adds	r3, #1
 8008a68:	f003 031f 	and.w	r3, r3, #31
 8008a6c:	2101      	movs	r1, #1
 8008a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8008a72:	ea42 0103 	orr.w	r1, r2, r3
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d10d      	bne.n	8008a9e <HAL_ADC_ConfigChannel+0x55e>
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	0e9b      	lsrs	r3, r3, #26
 8008a88:	3301      	adds	r3, #1
 8008a8a:	f003 021f 	and.w	r2, r3, #31
 8008a8e:	4613      	mov	r3, r2
 8008a90:	005b      	lsls	r3, r3, #1
 8008a92:	4413      	add	r3, r2
 8008a94:	3b1e      	subs	r3, #30
 8008a96:	051b      	lsls	r3, r3, #20
 8008a98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008a9c:	e014      	b.n	8008ac8 <HAL_ADC_ConfigChannel+0x588>
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	fa93 f3a3 	rbit	r3, r3
 8008aaa:	60fb      	str	r3, [r7, #12]
  return result;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	fab3 f383 	clz	r3, r3
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	3301      	adds	r3, #1
 8008ab6:	f003 021f 	and.w	r2, r3, #31
 8008aba:	4613      	mov	r3, r2
 8008abc:	005b      	lsls	r3, r3, #1
 8008abe:	4413      	add	r3, r2
 8008ac0:	3b1e      	subs	r3, #30
 8008ac2:	051b      	lsls	r3, r3, #20
 8008ac4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008ac8:	430b      	orrs	r3, r1
 8008aca:	683a      	ldr	r2, [r7, #0]
 8008acc:	6892      	ldr	r2, [r2, #8]
 8008ace:	4619      	mov	r1, r3
 8008ad0:	f7ff faa2 	bl	8008018 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	681a      	ldr	r2, [r3, #0]
 8008ad8:	4b2e      	ldr	r3, [pc, #184]	; (8008b94 <HAL_ADC_ConfigChannel+0x654>)
 8008ada:	4013      	ands	r3, r2
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	f000 80c9 	beq.w	8008c74 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008aea:	d004      	beq.n	8008af6 <HAL_ADC_ConfigChannel+0x5b6>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a29      	ldr	r2, [pc, #164]	; (8008b98 <HAL_ADC_ConfigChannel+0x658>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d101      	bne.n	8008afa <HAL_ADC_ConfigChannel+0x5ba>
 8008af6:	4b29      	ldr	r3, [pc, #164]	; (8008b9c <HAL_ADC_ConfigChannel+0x65c>)
 8008af8:	e000      	b.n	8008afc <HAL_ADC_ConfigChannel+0x5bc>
 8008afa:	4b29      	ldr	r3, [pc, #164]	; (8008ba0 <HAL_ADC_ConfigChannel+0x660>)
 8008afc:	4618      	mov	r0, r3
 8008afe:	f7ff f9c3 	bl	8007e88 <LL_ADC_GetCommonPathInternalCh>
 8008b02:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a26      	ldr	r2, [pc, #152]	; (8008ba4 <HAL_ADC_ConfigChannel+0x664>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d004      	beq.n	8008b1a <HAL_ADC_ConfigChannel+0x5da>
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a24      	ldr	r2, [pc, #144]	; (8008ba8 <HAL_ADC_ConfigChannel+0x668>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d14e      	bne.n	8008bb8 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008b1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008b1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d148      	bne.n	8008bb8 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b2e:	d005      	beq.n	8008b3c <HAL_ADC_ConfigChannel+0x5fc>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a1d      	ldr	r2, [pc, #116]	; (8008bac <HAL_ADC_ConfigChannel+0x66c>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	f040 8099 	bne.w	8008c6e <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b44:	d004      	beq.n	8008b50 <HAL_ADC_ConfigChannel+0x610>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a13      	ldr	r2, [pc, #76]	; (8008b98 <HAL_ADC_ConfigChannel+0x658>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d101      	bne.n	8008b54 <HAL_ADC_ConfigChannel+0x614>
 8008b50:	4a12      	ldr	r2, [pc, #72]	; (8008b9c <HAL_ADC_ConfigChannel+0x65c>)
 8008b52:	e000      	b.n	8008b56 <HAL_ADC_ConfigChannel+0x616>
 8008b54:	4a12      	ldr	r2, [pc, #72]	; (8008ba0 <HAL_ADC_ConfigChannel+0x660>)
 8008b56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008b5a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008b5e:	4619      	mov	r1, r3
 8008b60:	4610      	mov	r0, r2
 8008b62:	f7ff f97e 	bl	8007e62 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8008b66:	4b12      	ldr	r3, [pc, #72]	; (8008bb0 <HAL_ADC_ConfigChannel+0x670>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	099b      	lsrs	r3, r3, #6
 8008b6c:	4a11      	ldr	r2, [pc, #68]	; (8008bb4 <HAL_ADC_ConfigChannel+0x674>)
 8008b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b72:	099a      	lsrs	r2, r3, #6
 8008b74:	4613      	mov	r3, r2
 8008b76:	005b      	lsls	r3, r3, #1
 8008b78:	4413      	add	r3, r2
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8008b7e:	e002      	b.n	8008b86 <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	3b01      	subs	r3, #1
 8008b84:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d1f9      	bne.n	8008b80 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008b8c:	e06f      	b.n	8008c6e <HAL_ADC_ConfigChannel+0x72e>
 8008b8e:	bf00      	nop
 8008b90:	407f0000 	.word	0x407f0000
 8008b94:	80080000 	.word	0x80080000
 8008b98:	50000100 	.word	0x50000100
 8008b9c:	50000300 	.word	0x50000300
 8008ba0:	50000700 	.word	0x50000700
 8008ba4:	c3210000 	.word	0xc3210000
 8008ba8:	90c00010 	.word	0x90c00010
 8008bac:	50000600 	.word	0x50000600
 8008bb0:	20000cac 	.word	0x20000cac
 8008bb4:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a32      	ldr	r2, [pc, #200]	; (8008c88 <HAL_ADC_ConfigChannel+0x748>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d125      	bne.n	8008c0e <HAL_ADC_ConfigChannel+0x6ce>
 8008bc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008bc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d11f      	bne.n	8008c0e <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a2e      	ldr	r2, [pc, #184]	; (8008c8c <HAL_ADC_ConfigChannel+0x74c>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d104      	bne.n	8008be2 <HAL_ADC_ConfigChannel+0x6a2>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a2c      	ldr	r2, [pc, #176]	; (8008c90 <HAL_ADC_ConfigChannel+0x750>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d047      	beq.n	8008c72 <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008bea:	d004      	beq.n	8008bf6 <HAL_ADC_ConfigChannel+0x6b6>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a26      	ldr	r2, [pc, #152]	; (8008c8c <HAL_ADC_ConfigChannel+0x74c>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d101      	bne.n	8008bfa <HAL_ADC_ConfigChannel+0x6ba>
 8008bf6:	4a27      	ldr	r2, [pc, #156]	; (8008c94 <HAL_ADC_ConfigChannel+0x754>)
 8008bf8:	e000      	b.n	8008bfc <HAL_ADC_ConfigChannel+0x6bc>
 8008bfa:	4a27      	ldr	r2, [pc, #156]	; (8008c98 <HAL_ADC_ConfigChannel+0x758>)
 8008bfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008c04:	4619      	mov	r1, r3
 8008c06:	4610      	mov	r0, r2
 8008c08:	f7ff f92b 	bl	8007e62 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008c0c:	e031      	b.n	8008c72 <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a22      	ldr	r2, [pc, #136]	; (8008c9c <HAL_ADC_ConfigChannel+0x75c>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d12d      	bne.n	8008c74 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008c18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d127      	bne.n	8008c74 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a18      	ldr	r2, [pc, #96]	; (8008c8c <HAL_ADC_ConfigChannel+0x74c>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d022      	beq.n	8008c74 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c36:	d004      	beq.n	8008c42 <HAL_ADC_ConfigChannel+0x702>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a13      	ldr	r2, [pc, #76]	; (8008c8c <HAL_ADC_ConfigChannel+0x74c>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d101      	bne.n	8008c46 <HAL_ADC_ConfigChannel+0x706>
 8008c42:	4a14      	ldr	r2, [pc, #80]	; (8008c94 <HAL_ADC_ConfigChannel+0x754>)
 8008c44:	e000      	b.n	8008c48 <HAL_ADC_ConfigChannel+0x708>
 8008c46:	4a14      	ldr	r2, [pc, #80]	; (8008c98 <HAL_ADC_ConfigChannel+0x758>)
 8008c48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008c50:	4619      	mov	r1, r3
 8008c52:	4610      	mov	r0, r2
 8008c54:	f7ff f905 	bl	8007e62 <LL_ADC_SetCommonPathInternalCh>
 8008c58:	e00c      	b.n	8008c74 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c5e:	f043 0220 	orr.w	r2, r3, #32
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008c66:	2301      	movs	r3, #1
 8008c68:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8008c6c:	e002      	b.n	8008c74 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008c6e:	bf00      	nop
 8008c70:	e000      	b.n	8008c74 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008c72:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2200      	movs	r2, #0
 8008c78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8008c7c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3798      	adds	r7, #152	; 0x98
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}
 8008c88:	c7520000 	.word	0xc7520000
 8008c8c:	50000100 	.word	0x50000100
 8008c90:	50000500 	.word	0x50000500
 8008c94:	50000300 	.word	0x50000300
 8008c98:	50000700 	.word	0x50000700
 8008c9c:	cb840000 	.word	0xcb840000

08008ca0 <LL_ADC_IsEnabled>:
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	689b      	ldr	r3, [r3, #8]
 8008cac:	f003 0301 	and.w	r3, r3, #1
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d101      	bne.n	8008cb8 <LL_ADC_IsEnabled+0x18>
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	e000      	b.n	8008cba <LL_ADC_IsEnabled+0x1a>
 8008cb8:	2300      	movs	r3, #0
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	370c      	adds	r7, #12
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr

08008cc6 <LL_ADC_REG_IsConversionOngoing>:
{
 8008cc6:	b480      	push	{r7}
 8008cc8:	b083      	sub	sp, #12
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	f003 0304 	and.w	r3, r3, #4
 8008cd6:	2b04      	cmp	r3, #4
 8008cd8:	d101      	bne.n	8008cde <LL_ADC_REG_IsConversionOngoing+0x18>
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e000      	b.n	8008ce0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008cde:	2300      	movs	r3, #0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	370c      	adds	r7, #12
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr

08008cec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8008cec:	b590      	push	{r4, r7, lr}
 8008cee:	b0a1      	sub	sp, #132	; 0x84
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d101      	bne.n	8008d0a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8008d06:	2302      	movs	r3, #2
 8008d08:	e0e3      	b.n	8008ed2 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d1a:	d102      	bne.n	8008d22 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8008d1c:	4b6f      	ldr	r3, [pc, #444]	; (8008edc <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8008d1e:	60bb      	str	r3, [r7, #8]
 8008d20:	e009      	b.n	8008d36 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a6e      	ldr	r2, [pc, #440]	; (8008ee0 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d102      	bne.n	8008d32 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8008d2c:	4b6d      	ldr	r3, [pc, #436]	; (8008ee4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008d2e:	60bb      	str	r3, [r7, #8]
 8008d30:	e001      	b.n	8008d36 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8008d32:	2300      	movs	r3, #0
 8008d34:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d10b      	bne.n	8008d54 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d40:	f043 0220 	orr.w	r2, r3, #32
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8008d50:	2301      	movs	r3, #1
 8008d52:	e0be      	b.n	8008ed2 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	4618      	mov	r0, r3
 8008d58:	f7ff ffb5 	bl	8008cc6 <LL_ADC_REG_IsConversionOngoing>
 8008d5c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4618      	mov	r0, r3
 8008d64:	f7ff ffaf 	bl	8008cc6 <LL_ADC_REG_IsConversionOngoing>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	f040 80a0 	bne.w	8008eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8008d70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	f040 809c 	bne.w	8008eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d80:	d004      	beq.n	8008d8c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a55      	ldr	r2, [pc, #340]	; (8008edc <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d101      	bne.n	8008d90 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8008d8c:	4b56      	ldr	r3, [pc, #344]	; (8008ee8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8008d8e:	e000      	b.n	8008d92 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8008d90:	4b56      	ldr	r3, [pc, #344]	; (8008eec <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8008d92:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d04b      	beq.n	8008e34 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8008d9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d9e:	689b      	ldr	r3, [r3, #8]
 8008da0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	6859      	ldr	r1, [r3, #4]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008dae:	035b      	lsls	r3, r3, #13
 8008db0:	430b      	orrs	r3, r1
 8008db2:	431a      	orrs	r2, r3
 8008db4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008db6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008dc0:	d004      	beq.n	8008dcc <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a45      	ldr	r2, [pc, #276]	; (8008edc <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d10f      	bne.n	8008dec <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8008dcc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008dd0:	f7ff ff66 	bl	8008ca0 <LL_ADC_IsEnabled>
 8008dd4:	4604      	mov	r4, r0
 8008dd6:	4841      	ldr	r0, [pc, #260]	; (8008edc <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8008dd8:	f7ff ff62 	bl	8008ca0 <LL_ADC_IsEnabled>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	4323      	orrs	r3, r4
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	bf0c      	ite	eq
 8008de4:	2301      	moveq	r3, #1
 8008de6:	2300      	movne	r3, #0
 8008de8:	b2db      	uxtb	r3, r3
 8008dea:	e012      	b.n	8008e12 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8008dec:	483c      	ldr	r0, [pc, #240]	; (8008ee0 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8008dee:	f7ff ff57 	bl	8008ca0 <LL_ADC_IsEnabled>
 8008df2:	4604      	mov	r4, r0
 8008df4:	483b      	ldr	r0, [pc, #236]	; (8008ee4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008df6:	f7ff ff53 	bl	8008ca0 <LL_ADC_IsEnabled>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	431c      	orrs	r4, r3
 8008dfe:	483c      	ldr	r0, [pc, #240]	; (8008ef0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8008e00:	f7ff ff4e 	bl	8008ca0 <LL_ADC_IsEnabled>
 8008e04:	4603      	mov	r3, r0
 8008e06:	4323      	orrs	r3, r4
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	bf0c      	ite	eq
 8008e0c:	2301      	moveq	r3, #1
 8008e0e:	2300      	movne	r3, #0
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d056      	beq.n	8008ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8008e16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8008e1e:	f023 030f 	bic.w	r3, r3, #15
 8008e22:	683a      	ldr	r2, [r7, #0]
 8008e24:	6811      	ldr	r1, [r2, #0]
 8008e26:	683a      	ldr	r2, [r7, #0]
 8008e28:	6892      	ldr	r2, [r2, #8]
 8008e2a:	430a      	orrs	r2, r1
 8008e2c:	431a      	orrs	r2, r3
 8008e2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e30:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008e32:	e047      	b.n	8008ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8008e34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008e3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e3e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e48:	d004      	beq.n	8008e54 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a23      	ldr	r2, [pc, #140]	; (8008edc <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d10f      	bne.n	8008e74 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8008e54:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008e58:	f7ff ff22 	bl	8008ca0 <LL_ADC_IsEnabled>
 8008e5c:	4604      	mov	r4, r0
 8008e5e:	481f      	ldr	r0, [pc, #124]	; (8008edc <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8008e60:	f7ff ff1e 	bl	8008ca0 <LL_ADC_IsEnabled>
 8008e64:	4603      	mov	r3, r0
 8008e66:	4323      	orrs	r3, r4
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	bf0c      	ite	eq
 8008e6c:	2301      	moveq	r3, #1
 8008e6e:	2300      	movne	r3, #0
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	e012      	b.n	8008e9a <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8008e74:	481a      	ldr	r0, [pc, #104]	; (8008ee0 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8008e76:	f7ff ff13 	bl	8008ca0 <LL_ADC_IsEnabled>
 8008e7a:	4604      	mov	r4, r0
 8008e7c:	4819      	ldr	r0, [pc, #100]	; (8008ee4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008e7e:	f7ff ff0f 	bl	8008ca0 <LL_ADC_IsEnabled>
 8008e82:	4603      	mov	r3, r0
 8008e84:	431c      	orrs	r4, r3
 8008e86:	481a      	ldr	r0, [pc, #104]	; (8008ef0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8008e88:	f7ff ff0a 	bl	8008ca0 <LL_ADC_IsEnabled>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	4323      	orrs	r3, r4
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	bf0c      	ite	eq
 8008e94:	2301      	moveq	r3, #1
 8008e96:	2300      	movne	r3, #0
 8008e98:	b2db      	uxtb	r3, r3
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d012      	beq.n	8008ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8008e9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ea0:	689b      	ldr	r3, [r3, #8]
 8008ea2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8008ea6:	f023 030f 	bic.w	r3, r3, #15
 8008eaa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008eac:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008eae:	e009      	b.n	8008ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008eb4:	f043 0220 	orr.w	r2, r3, #32
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8008ec2:	e000      	b.n	8008ec6 <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008ec4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8008ece:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3784      	adds	r7, #132	; 0x84
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd90      	pop	{r4, r7, pc}
 8008eda:	bf00      	nop
 8008edc:	50000100 	.word	0x50000100
 8008ee0:	50000400 	.word	0x50000400
 8008ee4:	50000500 	.word	0x50000500
 8008ee8:	50000300 	.word	0x50000300
 8008eec:	50000700 	.word	0x50000700
 8008ef0:	50000600 	.word	0x50000600

08008ef4 <LL_EXTI_EnableIT_0_31>:
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8008efc:	4b05      	ldr	r3, [pc, #20]	; (8008f14 <LL_EXTI_EnableIT_0_31+0x20>)
 8008efe:	681a      	ldr	r2, [r3, #0]
 8008f00:	4904      	ldr	r1, [pc, #16]	; (8008f14 <LL_EXTI_EnableIT_0_31+0x20>)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	4313      	orrs	r3, r2
 8008f06:	600b      	str	r3, [r1, #0]
}
 8008f08:	bf00      	nop
 8008f0a:	370c      	adds	r7, #12
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr
 8008f14:	40010400 	.word	0x40010400

08008f18 <LL_EXTI_EnableIT_32_63>:
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b083      	sub	sp, #12
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8008f20:	4b05      	ldr	r3, [pc, #20]	; (8008f38 <LL_EXTI_EnableIT_32_63+0x20>)
 8008f22:	6a1a      	ldr	r2, [r3, #32]
 8008f24:	4904      	ldr	r1, [pc, #16]	; (8008f38 <LL_EXTI_EnableIT_32_63+0x20>)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	620b      	str	r3, [r1, #32]
}
 8008f2c:	bf00      	nop
 8008f2e:	370c      	adds	r7, #12
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr
 8008f38:	40010400 	.word	0x40010400

08008f3c <LL_EXTI_DisableIT_0_31>:
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b083      	sub	sp, #12
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8008f44:	4b06      	ldr	r3, [pc, #24]	; (8008f60 <LL_EXTI_DisableIT_0_31+0x24>)
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	43db      	mvns	r3, r3
 8008f4c:	4904      	ldr	r1, [pc, #16]	; (8008f60 <LL_EXTI_DisableIT_0_31+0x24>)
 8008f4e:	4013      	ands	r3, r2
 8008f50:	600b      	str	r3, [r1, #0]
}
 8008f52:	bf00      	nop
 8008f54:	370c      	adds	r7, #12
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr
 8008f5e:	bf00      	nop
 8008f60:	40010400 	.word	0x40010400

08008f64 <LL_EXTI_DisableIT_32_63>:
{
 8008f64:	b480      	push	{r7}
 8008f66:	b083      	sub	sp, #12
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8008f6c:	4b06      	ldr	r3, [pc, #24]	; (8008f88 <LL_EXTI_DisableIT_32_63+0x24>)
 8008f6e:	6a1a      	ldr	r2, [r3, #32]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	43db      	mvns	r3, r3
 8008f74:	4904      	ldr	r1, [pc, #16]	; (8008f88 <LL_EXTI_DisableIT_32_63+0x24>)
 8008f76:	4013      	ands	r3, r2
 8008f78:	620b      	str	r3, [r1, #32]
}
 8008f7a:	bf00      	nop
 8008f7c:	370c      	adds	r7, #12
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr
 8008f86:	bf00      	nop
 8008f88:	40010400 	.word	0x40010400

08008f8c <LL_EXTI_EnableEvent_0_31>:
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8008f94:	4b05      	ldr	r3, [pc, #20]	; (8008fac <LL_EXTI_EnableEvent_0_31+0x20>)
 8008f96:	685a      	ldr	r2, [r3, #4]
 8008f98:	4904      	ldr	r1, [pc, #16]	; (8008fac <LL_EXTI_EnableEvent_0_31+0x20>)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	604b      	str	r3, [r1, #4]
}
 8008fa0:	bf00      	nop
 8008fa2:	370c      	adds	r7, #12
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr
 8008fac:	40010400 	.word	0x40010400

08008fb0 <LL_EXTI_EnableEvent_32_63>:
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8008fb8:	4b05      	ldr	r3, [pc, #20]	; (8008fd0 <LL_EXTI_EnableEvent_32_63+0x20>)
 8008fba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008fbc:	4904      	ldr	r1, [pc, #16]	; (8008fd0 <LL_EXTI_EnableEvent_32_63+0x20>)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	624b      	str	r3, [r1, #36]	; 0x24
}
 8008fc4:	bf00      	nop
 8008fc6:	370c      	adds	r7, #12
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr
 8008fd0:	40010400 	.word	0x40010400

08008fd4 <LL_EXTI_DisableEvent_0_31>:
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b083      	sub	sp, #12
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8008fdc:	4b06      	ldr	r3, [pc, #24]	; (8008ff8 <LL_EXTI_DisableEvent_0_31+0x24>)
 8008fde:	685a      	ldr	r2, [r3, #4]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	43db      	mvns	r3, r3
 8008fe4:	4904      	ldr	r1, [pc, #16]	; (8008ff8 <LL_EXTI_DisableEvent_0_31+0x24>)
 8008fe6:	4013      	ands	r3, r2
 8008fe8:	604b      	str	r3, [r1, #4]
}
 8008fea:	bf00      	nop
 8008fec:	370c      	adds	r7, #12
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr
 8008ff6:	bf00      	nop
 8008ff8:	40010400 	.word	0x40010400

08008ffc <LL_EXTI_DisableEvent_32_63>:
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b083      	sub	sp, #12
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8009004:	4b06      	ldr	r3, [pc, #24]	; (8009020 <LL_EXTI_DisableEvent_32_63+0x24>)
 8009006:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	43db      	mvns	r3, r3
 800900c:	4904      	ldr	r1, [pc, #16]	; (8009020 <LL_EXTI_DisableEvent_32_63+0x24>)
 800900e:	4013      	ands	r3, r2
 8009010:	624b      	str	r3, [r1, #36]	; 0x24
}
 8009012:	bf00      	nop
 8009014:	370c      	adds	r7, #12
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr
 800901e:	bf00      	nop
 8009020:	40010400 	.word	0x40010400

08009024 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8009024:	b480      	push	{r7}
 8009026:	b083      	sub	sp, #12
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800902c:	4b05      	ldr	r3, [pc, #20]	; (8009044 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800902e:	689a      	ldr	r2, [r3, #8]
 8009030:	4904      	ldr	r1, [pc, #16]	; (8009044 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4313      	orrs	r3, r2
 8009036:	608b      	str	r3, [r1, #8]
}
 8009038:	bf00      	nop
 800903a:	370c      	adds	r7, #12
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr
 8009044:	40010400 	.word	0x40010400

08009048 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8009050:	4b05      	ldr	r3, [pc, #20]	; (8009068 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8009052:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009054:	4904      	ldr	r1, [pc, #16]	; (8009068 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	4313      	orrs	r3, r2
 800905a:	628b      	str	r3, [r1, #40]	; 0x28
}
 800905c:	bf00      	nop
 800905e:	370c      	adds	r7, #12
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr
 8009068:	40010400 	.word	0x40010400

0800906c <LL_EXTI_DisableRisingTrig_0_31>:
{
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8009074:	4b06      	ldr	r3, [pc, #24]	; (8009090 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8009076:	689a      	ldr	r2, [r3, #8]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	43db      	mvns	r3, r3
 800907c:	4904      	ldr	r1, [pc, #16]	; (8009090 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800907e:	4013      	ands	r3, r2
 8009080:	608b      	str	r3, [r1, #8]
}
 8009082:	bf00      	nop
 8009084:	370c      	adds	r7, #12
 8009086:	46bd      	mov	sp, r7
 8009088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908c:	4770      	bx	lr
 800908e:	bf00      	nop
 8009090:	40010400 	.word	0x40010400

08009094 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800909c:	4b06      	ldr	r3, [pc, #24]	; (80090b8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800909e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	43db      	mvns	r3, r3
 80090a4:	4904      	ldr	r1, [pc, #16]	; (80090b8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80090a6:	4013      	ands	r3, r2
 80090a8:	628b      	str	r3, [r1, #40]	; 0x28
}
 80090aa:	bf00      	nop
 80090ac:	370c      	adds	r7, #12
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr
 80090b6:	bf00      	nop
 80090b8:	40010400 	.word	0x40010400

080090bc <LL_EXTI_EnableFallingTrig_0_31>:
{
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80090c4:	4b05      	ldr	r3, [pc, #20]	; (80090dc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80090c6:	68da      	ldr	r2, [r3, #12]
 80090c8:	4904      	ldr	r1, [pc, #16]	; (80090dc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	4313      	orrs	r3, r2
 80090ce:	60cb      	str	r3, [r1, #12]
}
 80090d0:	bf00      	nop
 80090d2:	370c      	adds	r7, #12
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr
 80090dc:	40010400 	.word	0x40010400

080090e0 <LL_EXTI_EnableFallingTrig_32_63>:
{
 80090e0:	b480      	push	{r7}
 80090e2:	b083      	sub	sp, #12
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80090e8:	4b05      	ldr	r3, [pc, #20]	; (8009100 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80090ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090ec:	4904      	ldr	r1, [pc, #16]	; (8009100 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	4313      	orrs	r3, r2
 80090f2:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80090f4:	bf00      	nop
 80090f6:	370c      	adds	r7, #12
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr
 8009100:	40010400 	.word	0x40010400

08009104 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8009104:	b480      	push	{r7}
 8009106:	b083      	sub	sp, #12
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800910c:	4b06      	ldr	r3, [pc, #24]	; (8009128 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800910e:	68da      	ldr	r2, [r3, #12]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	43db      	mvns	r3, r3
 8009114:	4904      	ldr	r1, [pc, #16]	; (8009128 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8009116:	4013      	ands	r3, r2
 8009118:	60cb      	str	r3, [r1, #12]
}
 800911a:	bf00      	nop
 800911c:	370c      	adds	r7, #12
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr
 8009126:	bf00      	nop
 8009128:	40010400 	.word	0x40010400

0800912c <LL_EXTI_DisableFallingTrig_32_63>:
{
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8009134:	4b06      	ldr	r3, [pc, #24]	; (8009150 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8009136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	43db      	mvns	r3, r3
 800913c:	4904      	ldr	r1, [pc, #16]	; (8009150 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800913e:	4013      	ands	r3, r2
 8009140:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8009142:	bf00      	nop
 8009144:	370c      	adds	r7, #12
 8009146:	46bd      	mov	sp, r7
 8009148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914c:	4770      	bx	lr
 800914e:	bf00      	nop
 8009150:	40010400 	.word	0x40010400

08009154 <LL_EXTI_ClearFlag_0_31>:
{
 8009154:	b480      	push	{r7}
 8009156:	b083      	sub	sp, #12
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800915c:	4a04      	ldr	r2, [pc, #16]	; (8009170 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6153      	str	r3, [r2, #20]
}
 8009162:	bf00      	nop
 8009164:	370c      	adds	r7, #12
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr
 800916e:	bf00      	nop
 8009170:	40010400 	.word	0x40010400

08009174 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 800917c:	4a04      	ldr	r2, [pc, #16]	; (8009190 <LL_EXTI_ClearFlag_32_63+0x1c>)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6353      	str	r3, [r2, #52]	; 0x34
}
 8009182:	bf00      	nop
 8009184:	370c      	adds	r7, #12
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr
 800918e:	bf00      	nop
 8009190:	40010400 	.word	0x40010400

08009194 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b088      	sub	sp, #32
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800919c:	2300      	movs	r3, #0
 800919e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80091a0:	2300      	movs	r3, #0
 80091a2:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d102      	bne.n	80091b0 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80091aa:	2301      	movs	r3, #1
 80091ac:	77fb      	strb	r3, [r7, #31]
 80091ae:	e180      	b.n	80094b2 <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091be:	d102      	bne.n	80091c6 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80091c0:	2301      	movs	r3, #1
 80091c2:	77fb      	strb	r3, [r7, #31]
 80091c4:	e175      	b.n	80094b2 <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	7f5b      	ldrb	r3, [r3, #29]
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d108      	bne.n	80091e2 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2200      	movs	r2, #0
 80091da:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f7fd f9b5 	bl	800654c <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80091ec:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	695b      	ldr	r3, [r3, #20]
 80091fc:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	68db      	ldr	r3, [r3, #12]
 8009202:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8009208:	4313      	orrs	r3, r2
 800920a:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	681a      	ldr	r2, [r3, #0]
 8009212:	4b98      	ldr	r3, [pc, #608]	; (8009474 <HAL_COMP_Init+0x2e0>)
 8009214:	4013      	ands	r3, r2
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	6812      	ldr	r2, [r2, #0]
 800921a:	6979      	ldr	r1, [r7, #20]
 800921c:	430b      	orrs	r3, r1
 800921e:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800922a:	2b00      	cmp	r3, #0
 800922c:	d015      	beq.n	800925a <HAL_COMP_Init+0xc6>
 800922e:	69bb      	ldr	r3, [r7, #24]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d112      	bne.n	800925a <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8009234:	4b90      	ldr	r3, [pc, #576]	; (8009478 <HAL_COMP_Init+0x2e4>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	099b      	lsrs	r3, r3, #6
 800923a:	4a90      	ldr	r2, [pc, #576]	; (800947c <HAL_COMP_Init+0x2e8>)
 800923c:	fba2 2303 	umull	r2, r3, r2, r3
 8009240:	099a      	lsrs	r2, r3, #6
 8009242:	4613      	mov	r3, r2
 8009244:	009b      	lsls	r3, r3, #2
 8009246:	4413      	add	r3, r2
 8009248:	009b      	lsls	r3, r3, #2
 800924a:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800924c:	e002      	b.n	8009254 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	3b01      	subs	r3, #1
 8009252:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d1f9      	bne.n	800924e <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4a88      	ldr	r2, [pc, #544]	; (8009480 <HAL_COMP_Init+0x2ec>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d028      	beq.n	80092b6 <HAL_COMP_Init+0x122>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a86      	ldr	r2, [pc, #536]	; (8009484 <HAL_COMP_Init+0x2f0>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d020      	beq.n	80092b0 <HAL_COMP_Init+0x11c>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4a85      	ldr	r2, [pc, #532]	; (8009488 <HAL_COMP_Init+0x2f4>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d018      	beq.n	80092aa <HAL_COMP_Init+0x116>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4a83      	ldr	r2, [pc, #524]	; (800948c <HAL_COMP_Init+0x2f8>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d010      	beq.n	80092a4 <HAL_COMP_Init+0x110>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4a82      	ldr	r2, [pc, #520]	; (8009490 <HAL_COMP_Init+0x2fc>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d008      	beq.n	800929e <HAL_COMP_Init+0x10a>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4a80      	ldr	r2, [pc, #512]	; (8009494 <HAL_COMP_Init+0x300>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d101      	bne.n	800929a <HAL_COMP_Init+0x106>
 8009296:	2301      	movs	r3, #1
 8009298:	e00f      	b.n	80092ba <HAL_COMP_Init+0x126>
 800929a:	2302      	movs	r3, #2
 800929c:	e00d      	b.n	80092ba <HAL_COMP_Init+0x126>
 800929e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80092a2:	e00a      	b.n	80092ba <HAL_COMP_Init+0x126>
 80092a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80092a8:	e007      	b.n	80092ba <HAL_COMP_Init+0x126>
 80092aa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80092ae:	e004      	b.n	80092ba <HAL_COMP_Init+0x126>
 80092b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80092b4:	e001      	b.n	80092ba <HAL_COMP_Init+0x126>
 80092b6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80092ba:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	699b      	ldr	r3, [r3, #24]
 80092c0:	f003 0303 	and.w	r3, r3, #3
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	f000 80b6 	beq.w	8009436 <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	699b      	ldr	r3, [r3, #24]
 80092ce:	f003 0310 	and.w	r3, r3, #16
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d011      	beq.n	80092fa <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a6e      	ldr	r2, [pc, #440]	; (8009494 <HAL_COMP_Init+0x300>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d004      	beq.n	80092ea <HAL_COMP_Init+0x156>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4a6c      	ldr	r2, [pc, #432]	; (8009498 <HAL_COMP_Init+0x304>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d103      	bne.n	80092f2 <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 80092ea:	6938      	ldr	r0, [r7, #16]
 80092ec:	f7ff feac 	bl	8009048 <LL_EXTI_EnableRisingTrig_32_63>
 80092f0:	e014      	b.n	800931c <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80092f2:	6938      	ldr	r0, [r7, #16]
 80092f4:	f7ff fe96 	bl	8009024 <LL_EXTI_EnableRisingTrig_0_31>
 80092f8:	e010      	b.n	800931c <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4a65      	ldr	r2, [pc, #404]	; (8009494 <HAL_COMP_Init+0x300>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d004      	beq.n	800930e <HAL_COMP_Init+0x17a>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4a63      	ldr	r2, [pc, #396]	; (8009498 <HAL_COMP_Init+0x304>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d103      	bne.n	8009316 <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 800930e:	6938      	ldr	r0, [r7, #16]
 8009310:	f7ff fec0 	bl	8009094 <LL_EXTI_DisableRisingTrig_32_63>
 8009314:	e002      	b.n	800931c <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8009316:	6938      	ldr	r0, [r7, #16]
 8009318:	f7ff fea8 	bl	800906c <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	699b      	ldr	r3, [r3, #24]
 8009320:	f003 0320 	and.w	r3, r3, #32
 8009324:	2b00      	cmp	r3, #0
 8009326:	d011      	beq.n	800934c <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a59      	ldr	r2, [pc, #356]	; (8009494 <HAL_COMP_Init+0x300>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d004      	beq.n	800933c <HAL_COMP_Init+0x1a8>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4a58      	ldr	r2, [pc, #352]	; (8009498 <HAL_COMP_Init+0x304>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d103      	bne.n	8009344 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 800933c:	6938      	ldr	r0, [r7, #16]
 800933e:	f7ff fecf 	bl	80090e0 <LL_EXTI_EnableFallingTrig_32_63>
 8009342:	e014      	b.n	800936e <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8009344:	6938      	ldr	r0, [r7, #16]
 8009346:	f7ff feb9 	bl	80090bc <LL_EXTI_EnableFallingTrig_0_31>
 800934a:	e010      	b.n	800936e <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4a50      	ldr	r2, [pc, #320]	; (8009494 <HAL_COMP_Init+0x300>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d004      	beq.n	8009360 <HAL_COMP_Init+0x1cc>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4a4f      	ldr	r2, [pc, #316]	; (8009498 <HAL_COMP_Init+0x304>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d103      	bne.n	8009368 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8009360:	6938      	ldr	r0, [r7, #16]
 8009362:	f7ff fee3 	bl	800912c <LL_EXTI_DisableFallingTrig_32_63>
 8009366:	e002      	b.n	800936e <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8009368:	6938      	ldr	r0, [r7, #16]
 800936a:	f7ff fecb 	bl	8009104 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4a48      	ldr	r2, [pc, #288]	; (8009494 <HAL_COMP_Init+0x300>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d004      	beq.n	8009382 <HAL_COMP_Init+0x1ee>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a46      	ldr	r2, [pc, #280]	; (8009498 <HAL_COMP_Init+0x304>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d103      	bne.n	800938a <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8009382:	6938      	ldr	r0, [r7, #16]
 8009384:	f7ff fef6 	bl	8009174 <LL_EXTI_ClearFlag_32_63>
 8009388:	e002      	b.n	8009390 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 800938a:	6938      	ldr	r0, [r7, #16]
 800938c:	f7ff fee2 	bl	8009154 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	699b      	ldr	r3, [r3, #24]
 8009394:	f003 0302 	and.w	r3, r3, #2
 8009398:	2b00      	cmp	r3, #0
 800939a:	d011      	beq.n	80093c0 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a3c      	ldr	r2, [pc, #240]	; (8009494 <HAL_COMP_Init+0x300>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d004      	beq.n	80093b0 <HAL_COMP_Init+0x21c>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4a3b      	ldr	r2, [pc, #236]	; (8009498 <HAL_COMP_Init+0x304>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d103      	bne.n	80093b8 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 80093b0:	6938      	ldr	r0, [r7, #16]
 80093b2:	f7ff fdfd 	bl	8008fb0 <LL_EXTI_EnableEvent_32_63>
 80093b6:	e014      	b.n	80093e2 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 80093b8:	6938      	ldr	r0, [r7, #16]
 80093ba:	f7ff fde7 	bl	8008f8c <LL_EXTI_EnableEvent_0_31>
 80093be:	e010      	b.n	80093e2 <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4a33      	ldr	r2, [pc, #204]	; (8009494 <HAL_COMP_Init+0x300>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d004      	beq.n	80093d4 <HAL_COMP_Init+0x240>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	4a32      	ldr	r2, [pc, #200]	; (8009498 <HAL_COMP_Init+0x304>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d103      	bne.n	80093dc <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 80093d4:	6938      	ldr	r0, [r7, #16]
 80093d6:	f7ff fe11 	bl	8008ffc <LL_EXTI_DisableEvent_32_63>
 80093da:	e002      	b.n	80093e2 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 80093dc:	6938      	ldr	r0, [r7, #16]
 80093de:	f7ff fdf9 	bl	8008fd4 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	699b      	ldr	r3, [r3, #24]
 80093e6:	f003 0301 	and.w	r3, r3, #1
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d011      	beq.n	8009412 <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4a28      	ldr	r2, [pc, #160]	; (8009494 <HAL_COMP_Init+0x300>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d004      	beq.n	8009402 <HAL_COMP_Init+0x26e>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a26      	ldr	r2, [pc, #152]	; (8009498 <HAL_COMP_Init+0x304>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d103      	bne.n	800940a <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8009402:	6938      	ldr	r0, [r7, #16]
 8009404:	f7ff fd88 	bl	8008f18 <LL_EXTI_EnableIT_32_63>
 8009408:	e04b      	b.n	80094a2 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 800940a:	6938      	ldr	r0, [r7, #16]
 800940c:	f7ff fd72 	bl	8008ef4 <LL_EXTI_EnableIT_0_31>
 8009410:	e047      	b.n	80094a2 <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a1f      	ldr	r2, [pc, #124]	; (8009494 <HAL_COMP_Init+0x300>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d004      	beq.n	8009426 <HAL_COMP_Init+0x292>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a1d      	ldr	r2, [pc, #116]	; (8009498 <HAL_COMP_Init+0x304>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d103      	bne.n	800942e <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8009426:	6938      	ldr	r0, [r7, #16]
 8009428:	f7ff fd9c 	bl	8008f64 <LL_EXTI_DisableIT_32_63>
 800942c:	e039      	b.n	80094a2 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 800942e:	6938      	ldr	r0, [r7, #16]
 8009430:	f7ff fd84 	bl	8008f3c <LL_EXTI_DisableIT_0_31>
 8009434:	e035      	b.n	80094a2 <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4a16      	ldr	r2, [pc, #88]	; (8009494 <HAL_COMP_Init+0x300>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d004      	beq.n	800944a <HAL_COMP_Init+0x2b6>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4a14      	ldr	r2, [pc, #80]	; (8009498 <HAL_COMP_Init+0x304>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d103      	bne.n	8009452 <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 800944a:	6938      	ldr	r0, [r7, #16]
 800944c:	f7ff fdd6 	bl	8008ffc <LL_EXTI_DisableEvent_32_63>
 8009450:	e002      	b.n	8009458 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8009452:	6938      	ldr	r0, [r7, #16]
 8009454:	f7ff fdbe 	bl	8008fd4 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a0d      	ldr	r2, [pc, #52]	; (8009494 <HAL_COMP_Init+0x300>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d004      	beq.n	800946c <HAL_COMP_Init+0x2d8>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4a0c      	ldr	r2, [pc, #48]	; (8009498 <HAL_COMP_Init+0x304>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d117      	bne.n	800949c <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 800946c:	6938      	ldr	r0, [r7, #16]
 800946e:	f7ff fd79 	bl	8008f64 <LL_EXTI_DisableIT_32_63>
 8009472:	e016      	b.n	80094a2 <HAL_COMP_Init+0x30e>
 8009474:	ff007e0f 	.word	0xff007e0f
 8009478:	20000cac 	.word	0x20000cac
 800947c:	053e2d63 	.word	0x053e2d63
 8009480:	40010200 	.word	0x40010200
 8009484:	40010204 	.word	0x40010204
 8009488:	40010208 	.word	0x40010208
 800948c:	4001020c 	.word	0x4001020c
 8009490:	40010210 	.word	0x40010210
 8009494:	40010214 	.word	0x40010214
 8009498:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 800949c:	6938      	ldr	r0, [r7, #16]
 800949e:	f7ff fd4d 	bl	8008f3c <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	7f5b      	ldrb	r3, [r3, #29]
 80094a6:	b2db      	uxtb	r3, r3
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d102      	bne.n	80094b2 <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2201      	movs	r2, #1
 80094b0:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 80094b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3720      	adds	r7, #32
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <__NVIC_SetPriorityGrouping>:
{
 80094bc:	b480      	push	{r7}
 80094be:	b085      	sub	sp, #20
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f003 0307 	and.w	r3, r3, #7
 80094ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80094cc:	4b0c      	ldr	r3, [pc, #48]	; (8009500 <__NVIC_SetPriorityGrouping+0x44>)
 80094ce:	68db      	ldr	r3, [r3, #12]
 80094d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80094d2:	68ba      	ldr	r2, [r7, #8]
 80094d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80094d8:	4013      	ands	r3, r2
 80094da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80094e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80094e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80094ee:	4a04      	ldr	r2, [pc, #16]	; (8009500 <__NVIC_SetPriorityGrouping+0x44>)
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	60d3      	str	r3, [r2, #12]
}
 80094f4:	bf00      	nop
 80094f6:	3714      	adds	r7, #20
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr
 8009500:	e000ed00 	.word	0xe000ed00

08009504 <__NVIC_GetPriorityGrouping>:
{
 8009504:	b480      	push	{r7}
 8009506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009508:	4b04      	ldr	r3, [pc, #16]	; (800951c <__NVIC_GetPriorityGrouping+0x18>)
 800950a:	68db      	ldr	r3, [r3, #12]
 800950c:	0a1b      	lsrs	r3, r3, #8
 800950e:	f003 0307 	and.w	r3, r3, #7
}
 8009512:	4618      	mov	r0, r3
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr
 800951c:	e000ed00 	.word	0xe000ed00

08009520 <__NVIC_EnableIRQ>:
{
 8009520:	b480      	push	{r7}
 8009522:	b083      	sub	sp, #12
 8009524:	af00      	add	r7, sp, #0
 8009526:	4603      	mov	r3, r0
 8009528:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800952a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800952e:	2b00      	cmp	r3, #0
 8009530:	db0b      	blt.n	800954a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009532:	79fb      	ldrb	r3, [r7, #7]
 8009534:	f003 021f 	and.w	r2, r3, #31
 8009538:	4907      	ldr	r1, [pc, #28]	; (8009558 <__NVIC_EnableIRQ+0x38>)
 800953a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800953e:	095b      	lsrs	r3, r3, #5
 8009540:	2001      	movs	r0, #1
 8009542:	fa00 f202 	lsl.w	r2, r0, r2
 8009546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800954a:	bf00      	nop
 800954c:	370c      	adds	r7, #12
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr
 8009556:	bf00      	nop
 8009558:	e000e100 	.word	0xe000e100

0800955c <__NVIC_SetPriority>:
{
 800955c:	b480      	push	{r7}
 800955e:	b083      	sub	sp, #12
 8009560:	af00      	add	r7, sp, #0
 8009562:	4603      	mov	r3, r0
 8009564:	6039      	str	r1, [r7, #0]
 8009566:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800956c:	2b00      	cmp	r3, #0
 800956e:	db0a      	blt.n	8009586 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	b2da      	uxtb	r2, r3
 8009574:	490c      	ldr	r1, [pc, #48]	; (80095a8 <__NVIC_SetPriority+0x4c>)
 8009576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800957a:	0112      	lsls	r2, r2, #4
 800957c:	b2d2      	uxtb	r2, r2
 800957e:	440b      	add	r3, r1
 8009580:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009584:	e00a      	b.n	800959c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	b2da      	uxtb	r2, r3
 800958a:	4908      	ldr	r1, [pc, #32]	; (80095ac <__NVIC_SetPriority+0x50>)
 800958c:	79fb      	ldrb	r3, [r7, #7]
 800958e:	f003 030f 	and.w	r3, r3, #15
 8009592:	3b04      	subs	r3, #4
 8009594:	0112      	lsls	r2, r2, #4
 8009596:	b2d2      	uxtb	r2, r2
 8009598:	440b      	add	r3, r1
 800959a:	761a      	strb	r2, [r3, #24]
}
 800959c:	bf00      	nop
 800959e:	370c      	adds	r7, #12
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr
 80095a8:	e000e100 	.word	0xe000e100
 80095ac:	e000ed00 	.word	0xe000ed00

080095b0 <NVIC_EncodePriority>:
{
 80095b0:	b480      	push	{r7}
 80095b2:	b089      	sub	sp, #36	; 0x24
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	60f8      	str	r0, [r7, #12]
 80095b8:	60b9      	str	r1, [r7, #8]
 80095ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f003 0307 	and.w	r3, r3, #7
 80095c2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80095c4:	69fb      	ldr	r3, [r7, #28]
 80095c6:	f1c3 0307 	rsb	r3, r3, #7
 80095ca:	2b04      	cmp	r3, #4
 80095cc:	bf28      	it	cs
 80095ce:	2304      	movcs	r3, #4
 80095d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80095d2:	69fb      	ldr	r3, [r7, #28]
 80095d4:	3304      	adds	r3, #4
 80095d6:	2b06      	cmp	r3, #6
 80095d8:	d902      	bls.n	80095e0 <NVIC_EncodePriority+0x30>
 80095da:	69fb      	ldr	r3, [r7, #28]
 80095dc:	3b03      	subs	r3, #3
 80095de:	e000      	b.n	80095e2 <NVIC_EncodePriority+0x32>
 80095e0:	2300      	movs	r3, #0
 80095e2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80095e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80095e8:	69bb      	ldr	r3, [r7, #24]
 80095ea:	fa02 f303 	lsl.w	r3, r2, r3
 80095ee:	43da      	mvns	r2, r3
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	401a      	ands	r2, r3
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80095f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	fa01 f303 	lsl.w	r3, r1, r3
 8009602:	43d9      	mvns	r1, r3
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009608:	4313      	orrs	r3, r2
}
 800960a:	4618      	mov	r0, r3
 800960c:	3724      	adds	r7, #36	; 0x24
 800960e:	46bd      	mov	sp, r7
 8009610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009614:	4770      	bx	lr
	...

08009618 <SysTick_Config>:
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	3b01      	subs	r3, #1
 8009624:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009628:	d301      	bcc.n	800962e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800962a:	2301      	movs	r3, #1
 800962c:	e00f      	b.n	800964e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800962e:	4a0a      	ldr	r2, [pc, #40]	; (8009658 <SysTick_Config+0x40>)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	3b01      	subs	r3, #1
 8009634:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009636:	210f      	movs	r1, #15
 8009638:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800963c:	f7ff ff8e 	bl	800955c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009640:	4b05      	ldr	r3, [pc, #20]	; (8009658 <SysTick_Config+0x40>)
 8009642:	2200      	movs	r2, #0
 8009644:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009646:	4b04      	ldr	r3, [pc, #16]	; (8009658 <SysTick_Config+0x40>)
 8009648:	2207      	movs	r2, #7
 800964a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800964c:	2300      	movs	r3, #0
}
 800964e:	4618      	mov	r0, r3
 8009650:	3708      	adds	r7, #8
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop
 8009658:	e000e010 	.word	0xe000e010

0800965c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b082      	sub	sp, #8
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f7ff ff29 	bl	80094bc <__NVIC_SetPriorityGrouping>
}
 800966a:	bf00      	nop
 800966c:	3708      	adds	r7, #8
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}

08009672 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009672:	b580      	push	{r7, lr}
 8009674:	b086      	sub	sp, #24
 8009676:	af00      	add	r7, sp, #0
 8009678:	4603      	mov	r3, r0
 800967a:	60b9      	str	r1, [r7, #8]
 800967c:	607a      	str	r2, [r7, #4]
 800967e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009680:	f7ff ff40 	bl	8009504 <__NVIC_GetPriorityGrouping>
 8009684:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009686:	687a      	ldr	r2, [r7, #4]
 8009688:	68b9      	ldr	r1, [r7, #8]
 800968a:	6978      	ldr	r0, [r7, #20]
 800968c:	f7ff ff90 	bl	80095b0 <NVIC_EncodePriority>
 8009690:	4602      	mov	r2, r0
 8009692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009696:	4611      	mov	r1, r2
 8009698:	4618      	mov	r0, r3
 800969a:	f7ff ff5f 	bl	800955c <__NVIC_SetPriority>
}
 800969e:	bf00      	nop
 80096a0:	3718      	adds	r7, #24
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}

080096a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80096a6:	b580      	push	{r7, lr}
 80096a8:	b082      	sub	sp, #8
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	4603      	mov	r3, r0
 80096ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80096b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096b4:	4618      	mov	r0, r3
 80096b6:	f7ff ff33 	bl	8009520 <__NVIC_EnableIRQ>
}
 80096ba:	bf00      	nop
 80096bc:	3708      	adds	r7, #8
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}

080096c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80096c2:	b580      	push	{r7, lr}
 80096c4:	b082      	sub	sp, #8
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f7ff ffa4 	bl	8009618 <SysTick_Config>
 80096d0:	4603      	mov	r3, r0
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3708      	adds	r7, #8
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}

080096da <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80096da:	b580      	push	{r7, lr}
 80096dc:	b082      	sub	sp, #8
 80096de:	af00      	add	r7, sp, #0
 80096e0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d101      	bne.n	80096ec <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80096e8:	2301      	movs	r3, #1
 80096ea:	e014      	b.n	8009716 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	791b      	ldrb	r3, [r3, #4]
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d105      	bne.n	8009702 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2200      	movs	r2, #0
 80096fa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f7fc ffdb 	bl	80066b8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2202      	movs	r2, #2
 8009706:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2200      	movs	r2, #0
 800970c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2201      	movs	r2, #1
 8009712:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8009714:	2300      	movs	r3, #0
}
 8009716:	4618      	mov	r0, r3
 8009718:	3708      	adds	r7, #8
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}

0800971e <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800971e:	b580      	push	{r7, lr}
 8009720:	b082      	sub	sp, #8
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
 8009726:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	795b      	ldrb	r3, [r3, #5]
 800972c:	2b01      	cmp	r3, #1
 800972e:	d101      	bne.n	8009734 <HAL_DAC_Start+0x16>
 8009730:	2302      	movs	r3, #2
 8009732:	e043      	b.n	80097bc <HAL_DAC_Start+0x9e>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2201      	movs	r2, #1
 8009738:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2202      	movs	r2, #2
 800973e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	6819      	ldr	r1, [r3, #0]
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	f003 0310 	and.w	r3, r3, #16
 800974c:	2201      	movs	r2, #1
 800974e:	409a      	lsls	r2, r3
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	430a      	orrs	r2, r1
 8009756:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8009758:	2001      	movs	r0, #1
 800975a:	f7fe fb4d 	bl	8007df8 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d10f      	bne.n	8009784 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800976e:	2b02      	cmp	r3, #2
 8009770:	d11d      	bne.n	80097ae <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	685a      	ldr	r2, [r3, #4]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f042 0201 	orr.w	r2, r2, #1
 8009780:	605a      	str	r2, [r3, #4]
 8009782:	e014      	b.n	80097ae <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	f003 0310 	and.w	r3, r3, #16
 8009794:	2102      	movs	r1, #2
 8009796:	fa01 f303 	lsl.w	r3, r1, r3
 800979a:	429a      	cmp	r2, r3
 800979c:	d107      	bne.n	80097ae <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	685a      	ldr	r2, [r3, #4]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f042 0202 	orr.w	r2, r2, #2
 80097ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2201      	movs	r2, #1
 80097b2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2200      	movs	r2, #0
 80097b8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80097ba:	2300      	movs	r3, #0
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3708      	adds	r7, #8
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b086      	sub	sp, #24
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	60f8      	str	r0, [r7, #12]
 80097cc:	60b9      	str	r1, [r7, #8]
 80097ce:	607a      	str	r2, [r7, #4]
 80097d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80097d2:	2300      	movs	r3, #0
 80097d4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	795b      	ldrb	r3, [r3, #5]
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d101      	bne.n	80097e2 <HAL_DAC_Start_DMA+0x1e>
 80097de:	2302      	movs	r3, #2
 80097e0:	e0a1      	b.n	8009926 <HAL_DAC_Start_DMA+0x162>
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2201      	movs	r2, #1
 80097e6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2202      	movs	r2, #2
 80097ec:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d12a      	bne.n	800984a <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	689b      	ldr	r3, [r3, #8]
 80097f8:	4a4d      	ldr	r2, [pc, #308]	; (8009930 <HAL_DAC_Start_DMA+0x16c>)
 80097fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	689b      	ldr	r3, [r3, #8]
 8009800:	4a4c      	ldr	r2, [pc, #304]	; (8009934 <HAL_DAC_Start_DMA+0x170>)
 8009802:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	4a4b      	ldr	r2, [pc, #300]	; (8009938 <HAL_DAC_Start_DMA+0x174>)
 800980a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800981a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800981c:	6a3b      	ldr	r3, [r7, #32]
 800981e:	2b04      	cmp	r3, #4
 8009820:	d009      	beq.n	8009836 <HAL_DAC_Start_DMA+0x72>
 8009822:	2b08      	cmp	r3, #8
 8009824:	d00c      	beq.n	8009840 <HAL_DAC_Start_DMA+0x7c>
 8009826:	2b00      	cmp	r3, #0
 8009828:	d000      	beq.n	800982c <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800982a:	e039      	b.n	80098a0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	3308      	adds	r3, #8
 8009832:	613b      	str	r3, [r7, #16]
        break;
 8009834:	e034      	b.n	80098a0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	330c      	adds	r3, #12
 800983c:	613b      	str	r3, [r7, #16]
        break;
 800983e:	e02f      	b.n	80098a0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	3310      	adds	r3, #16
 8009846:	613b      	str	r3, [r7, #16]
        break;
 8009848:	e02a      	b.n	80098a0 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	68db      	ldr	r3, [r3, #12]
 800984e:	4a3b      	ldr	r2, [pc, #236]	; (800993c <HAL_DAC_Start_DMA+0x178>)
 8009850:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	68db      	ldr	r3, [r3, #12]
 8009856:	4a3a      	ldr	r2, [pc, #232]	; (8009940 <HAL_DAC_Start_DMA+0x17c>)
 8009858:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	68db      	ldr	r3, [r3, #12]
 800985e:	4a39      	ldr	r2, [pc, #228]	; (8009944 <HAL_DAC_Start_DMA+0x180>)
 8009860:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	681a      	ldr	r2, [r3, #0]
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009870:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8009872:	6a3b      	ldr	r3, [r7, #32]
 8009874:	2b04      	cmp	r3, #4
 8009876:	d009      	beq.n	800988c <HAL_DAC_Start_DMA+0xc8>
 8009878:	2b08      	cmp	r3, #8
 800987a:	d00c      	beq.n	8009896 <HAL_DAC_Start_DMA+0xd2>
 800987c:	2b00      	cmp	r3, #0
 800987e:	d000      	beq.n	8009882 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8009880:	e00e      	b.n	80098a0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	3314      	adds	r3, #20
 8009888:	613b      	str	r3, [r7, #16]
        break;
 800988a:	e009      	b.n	80098a0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	3318      	adds	r3, #24
 8009892:	613b      	str	r3, [r7, #16]
        break;
 8009894:	e004      	b.n	80098a0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	331c      	adds	r3, #28
 800989c:	613b      	str	r3, [r7, #16]
        break;
 800989e:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d111      	bne.n	80098ca <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80098b4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	6898      	ldr	r0, [r3, #8]
 80098ba:	6879      	ldr	r1, [r7, #4]
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	693a      	ldr	r2, [r7, #16]
 80098c0:	f000 fbd2 	bl	800a068 <HAL_DMA_Start_IT>
 80098c4:	4603      	mov	r3, r0
 80098c6:	75fb      	strb	r3, [r7, #23]
 80098c8:	e010      	b.n	80098ec <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	681a      	ldr	r2, [r3, #0]
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80098d8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	68d8      	ldr	r0, [r3, #12]
 80098de:	6879      	ldr	r1, [r7, #4]
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	693a      	ldr	r2, [r7, #16]
 80098e4:	f000 fbc0 	bl	800a068 <HAL_DMA_Start_IT>
 80098e8:	4603      	mov	r3, r0
 80098ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2200      	movs	r2, #0
 80098f0:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80098f2:	7dfb      	ldrb	r3, [r7, #23]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d10f      	bne.n	8009918 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	6819      	ldr	r1, [r3, #0]
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	f003 0310 	and.w	r3, r3, #16
 8009904:	2201      	movs	r2, #1
 8009906:	409a      	lsls	r2, r3
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	430a      	orrs	r2, r1
 800990e:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8009910:	2001      	movs	r0, #1
 8009912:	f7fe fa71 	bl	8007df8 <HAL_Delay>
 8009916:	e005      	b.n	8009924 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	691b      	ldr	r3, [r3, #16]
 800991c:	f043 0204 	orr.w	r2, r3, #4
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8009924:	7dfb      	ldrb	r3, [r7, #23]
}
 8009926:	4618      	mov	r0, r3
 8009928:	3718      	adds	r7, #24
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}
 800992e:	bf00      	nop
 8009930:	08009e05 	.word	0x08009e05
 8009934:	08009e27 	.word	0x08009e27
 8009938:	08009e43 	.word	0x08009e43
 800993c:	08009ead 	.word	0x08009ead
 8009940:	08009ecf 	.word	0x08009ecf
 8009944:	08009eeb 	.word	0x08009eeb

08009948 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b084      	sub	sp, #16
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	6819      	ldr	r1, [r3, #0]
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	f003 0310 	and.w	r3, r3, #16
 800995e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009962:	fa02 f303 	lsl.w	r3, r2, r3
 8009966:	43da      	mvns	r2, r3
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	400a      	ands	r2, r1
 800996e:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	6819      	ldr	r1, [r3, #0]
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	f003 0310 	and.w	r3, r3, #16
 800997c:	2201      	movs	r2, #1
 800997e:	fa02 f303 	lsl.w	r3, r2, r3
 8009982:	43da      	mvns	r2, r3
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	400a      	ands	r2, r1
 800998a:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 800998c:	2001      	movs	r0, #1
 800998e:	f7fe fa33 	bl	8007df8 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d10f      	bne.n	80099b8 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	689b      	ldr	r3, [r3, #8]
 800999c:	4618      	mov	r0, r3
 800999e:	f000 fbde 	bl	800a15e <HAL_DMA_Abort>
 80099a2:	4603      	mov	r3, r0
 80099a4:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	681a      	ldr	r2, [r3, #0]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80099b4:	601a      	str	r2, [r3, #0]
 80099b6:	e00e      	b.n	80099d6 <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	68db      	ldr	r3, [r3, #12]
 80099bc:	4618      	mov	r0, r3
 80099be:	f000 fbce 	bl	800a15e <HAL_DMA_Abort>
 80099c2:	4603      	mov	r3, r0
 80099c4:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	681a      	ldr	r2, [r3, #0]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80099d4:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 80099d6:	7bfb      	ldrb	r3, [r7, #15]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d003      	beq.n	80099e4 <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2204      	movs	r2, #4
 80099e0:	711a      	strb	r2, [r3, #4]
 80099e2:	e002      	b.n	80099ea <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2201      	movs	r2, #1
 80099e8:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 80099ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3710      	adds	r7, #16
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b087      	sub	sp, #28
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	60f8      	str	r0, [r7, #12]
 80099fc:	60b9      	str	r1, [r7, #8]
 80099fe:	607a      	str	r2, [r7, #4]
 8009a00:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8009a02:	2300      	movs	r3, #0
 8009a04:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d105      	bne.n	8009a24 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8009a18:	697a      	ldr	r2, [r7, #20]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	4413      	add	r3, r2
 8009a1e:	3308      	adds	r3, #8
 8009a20:	617b      	str	r3, [r7, #20]
 8009a22:	e004      	b.n	8009a2e <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8009a24:	697a      	ldr	r2, [r7, #20]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	4413      	add	r3, r2
 8009a2a:	3314      	adds	r3, #20
 8009a2c:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	461a      	mov	r2, r3
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8009a36:	2300      	movs	r3, #0
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	371c      	adds	r7, #28
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr

08009a44 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b083      	sub	sp, #12
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8009a4c:	bf00      	nop
 8009a4e:	370c      	adds	r7, #12
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr

08009a58 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b083      	sub	sp, #12
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8009a60:	bf00      	nop
 8009a62:	370c      	adds	r7, #12
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr

08009a6c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b083      	sub	sp, #12
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8009a74:	bf00      	nop
 8009a76:	370c      	adds	r7, #12
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr

08009a80 <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b083      	sub	sp, #12
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d103      	bne.n	8009a98 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a96:	e002      	b.n	8009a9e <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	370c      	adds	r7, #12
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr
	...

08009aac <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b08a      	sub	sp, #40	; 0x28
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	60f8      	str	r0, [r7, #12]
 8009ab4:	60b9      	str	r1, [r7, #8]
 8009ab6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	795b      	ldrb	r3, [r3, #5]
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d101      	bne.n	8009ac8 <HAL_DAC_ConfigChannel+0x1c>
 8009ac4:	2302      	movs	r3, #2
 8009ac6:	e194      	b.n	8009df2 <HAL_DAC_ConfigChannel+0x346>
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	2201      	movs	r2, #1
 8009acc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2202      	movs	r2, #2
 8009ad2:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	689b      	ldr	r3, [r3, #8]
 8009ad8:	2b04      	cmp	r3, #4
 8009ada:	d174      	bne.n	8009bc6 <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d137      	bne.n	8009b52 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8009ae2:	f7fe f97d 	bl	8007de0 <HAL_GetTick>
 8009ae6:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8009ae8:	e011      	b.n	8009b0e <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8009aea:	f7fe f979 	bl	8007de0 <HAL_GetTick>
 8009aee:	4602      	mov	r2, r0
 8009af0:	69fb      	ldr	r3, [r7, #28]
 8009af2:	1ad3      	subs	r3, r2, r3
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	d90a      	bls.n	8009b0e <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	691b      	ldr	r3, [r3, #16]
 8009afc:	f043 0208 	orr.w	r2, r3, #8
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	2203      	movs	r2, #3
 8009b08:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8009b0a:	2303      	movs	r3, #3
 8009b0c:	e171      	b.n	8009df2 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d1e6      	bne.n	8009aea <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8009b1c:	2001      	movs	r0, #1
 8009b1e:	f7fe f96b 	bl	8007df8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	68ba      	ldr	r2, [r7, #8]
 8009b28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009b2a:	641a      	str	r2, [r3, #64]	; 0x40
 8009b2c:	e01e      	b.n	8009b6c <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8009b2e:	f7fe f957 	bl	8007de0 <HAL_GetTick>
 8009b32:	4602      	mov	r2, r0
 8009b34:	69fb      	ldr	r3, [r7, #28]
 8009b36:	1ad3      	subs	r3, r2, r3
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d90a      	bls.n	8009b52 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	691b      	ldr	r3, [r3, #16]
 8009b40:	f043 0208 	orr.w	r2, r3, #8
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	2203      	movs	r2, #3
 8009b4c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8009b4e:	2303      	movs	r3, #3
 8009b50:	e14f      	b.n	8009df2 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	dbe8      	blt.n	8009b2e <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8009b5c:	2001      	movs	r0, #1
 8009b5e:	f7fe f94b 	bl	8007df8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	68ba      	ldr	r2, [r7, #8]
 8009b68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009b6a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f003 0310 	and.w	r3, r3, #16
 8009b78:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8009b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8009b80:	43db      	mvns	r3, r3
 8009b82:	ea02 0103 	and.w	r1, r2, r3
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f003 0310 	and.w	r3, r3, #16
 8009b90:	409a      	lsls	r2, r3
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	430a      	orrs	r2, r1
 8009b98:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f003 0310 	and.w	r3, r3, #16
 8009ba6:	21ff      	movs	r1, #255	; 0xff
 8009ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8009bac:	43db      	mvns	r3, r3
 8009bae:	ea02 0103 	and.w	r1, r2, r3
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f003 0310 	and.w	r3, r3, #16
 8009bbc:	409a      	lsls	r2, r3
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	430a      	orrs	r2, r1
 8009bc4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	69db      	ldr	r3, [r3, #28]
 8009bca:	2b01      	cmp	r3, #1
 8009bcc:	d11d      	bne.n	8009c0a <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bd4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f003 0310 	and.w	r3, r3, #16
 8009bdc:	221f      	movs	r2, #31
 8009bde:	fa02 f303 	lsl.w	r3, r2, r3
 8009be2:	43db      	mvns	r3, r3
 8009be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009be6:	4013      	ands	r3, r2
 8009be8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	6a1b      	ldr	r3, [r3, #32]
 8009bee:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f003 0310 	and.w	r3, r3, #16
 8009bf6:	69ba      	ldr	r2, [r7, #24]
 8009bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8009bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c08:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c10:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f003 0310 	and.w	r3, r3, #16
 8009c18:	2207      	movs	r2, #7
 8009c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8009c1e:	43db      	mvns	r3, r3
 8009c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c22:	4013      	ands	r3, r2
 8009c24:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	699b      	ldr	r3, [r3, #24]
 8009c2a:	f003 0301 	and.w	r3, r3, #1
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d002      	beq.n	8009c38 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 8009c32:	2300      	movs	r3, #0
 8009c34:	623b      	str	r3, [r7, #32]
 8009c36:	e011      	b.n	8009c5c <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	699b      	ldr	r3, [r3, #24]
 8009c3c:	f003 0302 	and.w	r3, r3, #2
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d002      	beq.n	8009c4a <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8009c44:	2301      	movs	r3, #1
 8009c46:	623b      	str	r3, [r7, #32]
 8009c48:	e008      	b.n	8009c5c <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	695b      	ldr	r3, [r3, #20]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d102      	bne.n	8009c58 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8009c52:	2301      	movs	r3, #1
 8009c54:	623b      	str	r3, [r7, #32]
 8009c56:	e001      	b.n	8009c5c <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	689a      	ldr	r2, [r3, #8]
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	695b      	ldr	r3, [r3, #20]
 8009c64:	4313      	orrs	r3, r2
 8009c66:	6a3a      	ldr	r2, [r7, #32]
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f003 0310 	and.w	r3, r3, #16
 8009c72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c76:	fa02 f303 	lsl.w	r3, r2, r3
 8009c7a:	43db      	mvns	r3, r3
 8009c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c7e:	4013      	ands	r3, r2
 8009c80:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	791b      	ldrb	r3, [r3, #4]
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	d102      	bne.n	8009c90 <HAL_DAC_ConfigChannel+0x1e4>
 8009c8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c8e:	e000      	b.n	8009c92 <HAL_DAC_ConfigChannel+0x1e6>
 8009c90:	2300      	movs	r3, #0
 8009c92:	69ba      	ldr	r2, [r7, #24]
 8009c94:	4313      	orrs	r3, r2
 8009c96:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f003 0310 	and.w	r3, r3, #16
 8009c9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ca6:	43db      	mvns	r3, r3
 8009ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009caa:	4013      	ands	r3, r2
 8009cac:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	795b      	ldrb	r3, [r3, #5]
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d102      	bne.n	8009cbc <HAL_DAC_ConfigChannel+0x210>
 8009cb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009cba:	e000      	b.n	8009cbe <HAL_DAC_ConfigChannel+0x212>
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	69ba      	ldr	r2, [r7, #24]
 8009cc0:	4313      	orrs	r3, r2
 8009cc2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8009cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8009cca:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	2b02      	cmp	r3, #2
 8009cd2:	d114      	bne.n	8009cfe <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8009cd4:	f001 fae0 	bl	800b298 <HAL_RCC_GetHCLKFreq>
 8009cd8:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	4a47      	ldr	r2, [pc, #284]	; (8009dfc <HAL_DAC_ConfigChannel+0x350>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d904      	bls.n	8009cec <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8009ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8009cea:	e00d      	b.n	8009d08 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	4a44      	ldr	r2, [pc, #272]	; (8009e00 <HAL_DAC_ConfigChannel+0x354>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d909      	bls.n	8009d08 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8009cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8009cfc:	e004      	b.n	8009d08 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d04:	4313      	orrs	r3, r2
 8009d06:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f003 0310 	and.w	r3, r3, #16
 8009d0e:	69ba      	ldr	r2, [r7, #24]
 8009d10:	fa02 f303 	lsl.w	r3, r2, r3
 8009d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d16:	4313      	orrs	r3, r2
 8009d18:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	6819      	ldr	r1, [r3, #0]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f003 0310 	and.w	r3, r3, #16
 8009d2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009d32:	fa02 f303 	lsl.w	r3, r2, r3
 8009d36:	43da      	mvns	r2, r3
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	400a      	ands	r2, r1
 8009d3e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f003 0310 	and.w	r3, r3, #16
 8009d4e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8009d52:	fa02 f303 	lsl.w	r3, r2, r3
 8009d56:	43db      	mvns	r3, r3
 8009d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d5a:	4013      	ands	r3, r2
 8009d5c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	68db      	ldr	r3, [r3, #12]
 8009d62:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f003 0310 	and.w	r3, r3, #16
 8009d6a:	69ba      	ldr	r2, [r7, #24]
 8009d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8009d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d72:	4313      	orrs	r3, r2
 8009d74:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d7c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	6819      	ldr	r1, [r3, #0]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f003 0310 	and.w	r3, r3, #16
 8009d8a:	22c0      	movs	r2, #192	; 0xc0
 8009d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8009d90:	43da      	mvns	r2, r3
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	400a      	ands	r2, r1
 8009d98:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	68db      	ldr	r3, [r3, #12]
 8009d9e:	089b      	lsrs	r3, r3, #2
 8009da0:	f003 030f 	and.w	r3, r3, #15
 8009da4:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	691b      	ldr	r3, [r3, #16]
 8009daa:	089b      	lsrs	r3, r3, #2
 8009dac:	021b      	lsls	r3, r3, #8
 8009dae:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009db2:	69ba      	ldr	r2, [r7, #24]
 8009db4:	4313      	orrs	r3, r2
 8009db6:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f003 0310 	and.w	r3, r3, #16
 8009dc4:	f640 710f 	movw	r1, #3855	; 0xf0f
 8009dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8009dcc:	43db      	mvns	r3, r3
 8009dce:	ea02 0103 	and.w	r1, r2, r3
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f003 0310 	and.w	r3, r3, #16
 8009dd8:	69ba      	ldr	r2, [r7, #24]
 8009dda:	409a      	lsls	r2, r3
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	430a      	orrs	r2, r1
 8009de2:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	2201      	movs	r2, #1
 8009de8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	2200      	movs	r2, #0
 8009dee:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8009df0:	2300      	movs	r3, #0
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3728      	adds	r7, #40	; 0x28
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}
 8009dfa:	bf00      	nop
 8009dfc:	09896800 	.word	0x09896800
 8009e00:	04c4b400 	.word	0x04c4b400

08009e04 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b084      	sub	sp, #16
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e10:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8009e12:	68f8      	ldr	r0, [r7, #12]
 8009e14:	f7ff fe16 	bl	8009a44 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	711a      	strb	r2, [r3, #4]
}
 8009e1e:	bf00      	nop
 8009e20:	3710      	adds	r7, #16
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}

08009e26 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8009e26:	b580      	push	{r7, lr}
 8009e28:	b084      	sub	sp, #16
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e32:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8009e34:	68f8      	ldr	r0, [r7, #12]
 8009e36:	f7ff fe0f 	bl	8009a58 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8009e3a:	bf00      	nop
 8009e3c:	3710      	adds	r7, #16
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}

08009e42 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8009e42:	b580      	push	{r7, lr}
 8009e44:	b084      	sub	sp, #16
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e4e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	691b      	ldr	r3, [r3, #16]
 8009e54:	f043 0204 	orr.w	r2, r3, #4
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8009e5c:	68f8      	ldr	r0, [r7, #12]
 8009e5e:	f7ff fe05 	bl	8009a6c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2201      	movs	r2, #1
 8009e66:	711a      	strb	r2, [r3, #4]
}
 8009e68:	bf00      	nop
 8009e6a:	3710      	adds	r7, #16
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b083      	sub	sp, #12
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8009e78:	bf00      	nop
 8009e7a:	370c      	adds	r7, #12
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr

08009e84 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b083      	sub	sp, #12
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8009e8c:	bf00      	nop
 8009e8e:	370c      	adds	r7, #12
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr

08009e98 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b083      	sub	sp, #12
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8009ea0:	bf00      	nop
 8009ea2:	370c      	adds	r7, #12
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr

08009eac <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b084      	sub	sp, #16
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eb8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8009eba:	68f8      	ldr	r0, [r7, #12]
 8009ebc:	f7ff ffd8 	bl	8009e70 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	711a      	strb	r2, [r3, #4]
}
 8009ec6:	bf00      	nop
 8009ec8:	3710      	adds	r7, #16
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}

08009ece <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	b084      	sub	sp, #16
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eda:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8009edc:	68f8      	ldr	r0, [r7, #12]
 8009ede:	f7ff ffd1 	bl	8009e84 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8009ee2:	bf00      	nop
 8009ee4:	3710      	adds	r7, #16
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}

08009eea <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8009eea:	b580      	push	{r7, lr}
 8009eec:	b084      	sub	sp, #16
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ef6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	691b      	ldr	r3, [r3, #16]
 8009efc:	f043 0204 	orr.w	r2, r3, #4
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8009f04:	68f8      	ldr	r0, [r7, #12]
 8009f06:	f7ff ffc7 	bl	8009e98 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	711a      	strb	r2, [r3, #4]
}
 8009f10:	bf00      	nop
 8009f12:	3710      	adds	r7, #16
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d101      	bne.n	8009f2a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8009f26:	2301      	movs	r3, #1
 8009f28:	e08d      	b.n	800a046 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	461a      	mov	r2, r3
 8009f30:	4b47      	ldr	r3, [pc, #284]	; (800a050 <HAL_DMA_Init+0x138>)
 8009f32:	429a      	cmp	r2, r3
 8009f34:	d80f      	bhi.n	8009f56 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	461a      	mov	r2, r3
 8009f3c:	4b45      	ldr	r3, [pc, #276]	; (800a054 <HAL_DMA_Init+0x13c>)
 8009f3e:	4413      	add	r3, r2
 8009f40:	4a45      	ldr	r2, [pc, #276]	; (800a058 <HAL_DMA_Init+0x140>)
 8009f42:	fba2 2303 	umull	r2, r3, r2, r3
 8009f46:	091b      	lsrs	r3, r3, #4
 8009f48:	009a      	lsls	r2, r3, #2
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	4a42      	ldr	r2, [pc, #264]	; (800a05c <HAL_DMA_Init+0x144>)
 8009f52:	641a      	str	r2, [r3, #64]	; 0x40
 8009f54:	e00e      	b.n	8009f74 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	4b40      	ldr	r3, [pc, #256]	; (800a060 <HAL_DMA_Init+0x148>)
 8009f5e:	4413      	add	r3, r2
 8009f60:	4a3d      	ldr	r2, [pc, #244]	; (800a058 <HAL_DMA_Init+0x140>)
 8009f62:	fba2 2303 	umull	r2, r3, r2, r3
 8009f66:	091b      	lsrs	r3, r3, #4
 8009f68:	009a      	lsls	r2, r3, #2
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	4a3c      	ldr	r2, [pc, #240]	; (800a064 <HAL_DMA_Init+0x14c>)
 8009f72:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2202      	movs	r2, #2
 8009f78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f8e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009f98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	691b      	ldr	r3, [r3, #16]
 8009f9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009fa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	699b      	ldr	r3, [r3, #24]
 8009faa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009fb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6a1b      	ldr	r3, [r3, #32]
 8009fb6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009fb8:	68fa      	ldr	r2, [r7, #12]
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	68fa      	ldr	r2, [r7, #12]
 8009fc4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 fa10 	bl	800a3ec <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	689b      	ldr	r3, [r3, #8]
 8009fd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009fd4:	d102      	bne.n	8009fdc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	685a      	ldr	r2, [r3, #4]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fe4:	b2d2      	uxtb	r2, r2
 8009fe6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fec:	687a      	ldr	r2, [r7, #4]
 8009fee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009ff0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	685b      	ldr	r3, [r3, #4]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d010      	beq.n	800a01c <HAL_DMA_Init+0x104>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	2b04      	cmp	r3, #4
 800a000:	d80c      	bhi.n	800a01c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f000 fa30 	bl	800a468 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a00c:	2200      	movs	r2, #0
 800a00e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a014:	687a      	ldr	r2, [r7, #4]
 800a016:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a018:	605a      	str	r2, [r3, #4]
 800a01a:	e008      	b.n	800a02e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2200      	movs	r2, #0
 800a020:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2200      	movs	r2, #0
 800a026:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2200      	movs	r2, #0
 800a02c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2200      	movs	r2, #0
 800a032:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2201      	movs	r2, #1
 800a038:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2200      	movs	r2, #0
 800a040:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a044:	2300      	movs	r3, #0
}
 800a046:	4618      	mov	r0, r3
 800a048:	3710      	adds	r7, #16
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	bf00      	nop
 800a050:	40020407 	.word	0x40020407
 800a054:	bffdfff8 	.word	0xbffdfff8
 800a058:	cccccccd 	.word	0xcccccccd
 800a05c:	40020000 	.word	0x40020000
 800a060:	bffdfbf8 	.word	0xbffdfbf8
 800a064:	40020400 	.word	0x40020400

0800a068 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b086      	sub	sp, #24
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	60f8      	str	r0, [r7, #12]
 800a070:	60b9      	str	r1, [r7, #8]
 800a072:	607a      	str	r2, [r7, #4]
 800a074:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a076:	2300      	movs	r3, #0
 800a078:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a080:	2b01      	cmp	r3, #1
 800a082:	d101      	bne.n	800a088 <HAL_DMA_Start_IT+0x20>
 800a084:	2302      	movs	r3, #2
 800a086:	e066      	b.n	800a156 <HAL_DMA_Start_IT+0xee>
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2201      	movs	r2, #1
 800a08c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a096:	b2db      	uxtb	r3, r3
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d155      	bne.n	800a148 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2202      	movs	r2, #2
 800a0a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f022 0201 	bic.w	r2, r2, #1
 800a0b8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	687a      	ldr	r2, [r7, #4]
 800a0be:	68b9      	ldr	r1, [r7, #8]
 800a0c0:	68f8      	ldr	r0, [r7, #12]
 800a0c2:	f000 f954 	bl	800a36e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d008      	beq.n	800a0e0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	681a      	ldr	r2, [r3, #0]
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f042 020e 	orr.w	r2, r2, #14
 800a0dc:	601a      	str	r2, [r3, #0]
 800a0de:	e00f      	b.n	800a100 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	681a      	ldr	r2, [r3, #0]
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f022 0204 	bic.w	r2, r2, #4
 800a0ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	681a      	ldr	r2, [r3, #0]
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f042 020a 	orr.w	r2, r2, #10
 800a0fe:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d007      	beq.n	800a11e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a112:	681a      	ldr	r2, [r3, #0]
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a118:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a11c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a122:	2b00      	cmp	r3, #0
 800a124:	d007      	beq.n	800a136 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a12a:	681a      	ldr	r2, [r3, #0]
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a130:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a134:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f042 0201 	orr.w	r2, r2, #1
 800a144:	601a      	str	r2, [r3, #0]
 800a146:	e005      	b.n	800a154 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	2200      	movs	r2, #0
 800a14c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800a150:	2302      	movs	r3, #2
 800a152:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800a154:	7dfb      	ldrb	r3, [r7, #23]
}
 800a156:	4618      	mov	r0, r3
 800a158:	3718      	adds	r7, #24
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}

0800a15e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a15e:	b480      	push	{r7}
 800a160:	b085      	sub	sp, #20
 800a162:	af00      	add	r7, sp, #0
 800a164:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a166:	2300      	movs	r3, #0
 800a168:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a170:	b2db      	uxtb	r3, r3
 800a172:	2b02      	cmp	r3, #2
 800a174:	d005      	beq.n	800a182 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2204      	movs	r2, #4
 800a17a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800a17c:	2301      	movs	r3, #1
 800a17e:	73fb      	strb	r3, [r7, #15]
 800a180:	e037      	b.n	800a1f2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	681a      	ldr	r2, [r3, #0]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f022 020e 	bic.w	r2, r2, #14
 800a190:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a196:	681a      	ldr	r2, [r3, #0]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a19c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a1a0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	681a      	ldr	r2, [r3, #0]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f022 0201 	bic.w	r2, r2, #1
 800a1b0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1b6:	f003 021f 	and.w	r2, r3, #31
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1be:	2101      	movs	r1, #1
 800a1c0:	fa01 f202 	lsl.w	r2, r1, r2
 800a1c4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1ca:	687a      	ldr	r2, [r7, #4]
 800a1cc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a1ce:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d00c      	beq.n	800a1f2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1dc:	681a      	ldr	r2, [r3, #0]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a1e6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1ec:	687a      	ldr	r2, [r7, #4]
 800a1ee:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a1f0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800a202:	7bfb      	ldrb	r3, [r7, #15]
}
 800a204:	4618      	mov	r0, r3
 800a206:	3714      	adds	r7, #20
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr

0800a210 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a22c:	f003 031f 	and.w	r3, r3, #31
 800a230:	2204      	movs	r2, #4
 800a232:	409a      	lsls	r2, r3
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	4013      	ands	r3, r2
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d026      	beq.n	800a28a <HAL_DMA_IRQHandler+0x7a>
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	f003 0304 	and.w	r3, r3, #4
 800a242:	2b00      	cmp	r3, #0
 800a244:	d021      	beq.n	800a28a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f003 0320 	and.w	r3, r3, #32
 800a250:	2b00      	cmp	r3, #0
 800a252:	d107      	bne.n	800a264 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	681a      	ldr	r2, [r3, #0]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f022 0204 	bic.w	r2, r2, #4
 800a262:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a268:	f003 021f 	and.w	r2, r3, #31
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a270:	2104      	movs	r1, #4
 800a272:	fa01 f202 	lsl.w	r2, r1, r2
 800a276:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d071      	beq.n	800a364 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800a288:	e06c      	b.n	800a364 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a28e:	f003 031f 	and.w	r3, r3, #31
 800a292:	2202      	movs	r2, #2
 800a294:	409a      	lsls	r2, r3
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	4013      	ands	r3, r2
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d02e      	beq.n	800a2fc <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	f003 0302 	and.w	r3, r3, #2
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d029      	beq.n	800a2fc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f003 0320 	and.w	r3, r3, #32
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d10b      	bne.n	800a2ce <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	681a      	ldr	r2, [r3, #0]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f022 020a 	bic.w	r2, r2, #10
 800a2c4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2d2:	f003 021f 	and.w	r2, r3, #31
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2da:	2102      	movs	r1, #2
 800a2dc:	fa01 f202 	lsl.w	r2, r1, r2
 800a2e0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d038      	beq.n	800a364 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800a2fa:	e033      	b.n	800a364 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a300:	f003 031f 	and.w	r3, r3, #31
 800a304:	2208      	movs	r2, #8
 800a306:	409a      	lsls	r2, r3
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	4013      	ands	r3, r2
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d02a      	beq.n	800a366 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	f003 0308 	and.w	r3, r3, #8
 800a316:	2b00      	cmp	r3, #0
 800a318:	d025      	beq.n	800a366 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	681a      	ldr	r2, [r3, #0]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f022 020e 	bic.w	r2, r2, #14
 800a328:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a32e:	f003 021f 	and.w	r2, r3, #31
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a336:	2101      	movs	r1, #1
 800a338:	fa01 f202 	lsl.w	r2, r1, r2
 800a33c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2201      	movs	r2, #1
 800a342:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2201      	movs	r2, #1
 800a348:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2200      	movs	r2, #0
 800a350:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d004      	beq.n	800a366 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800a364:	bf00      	nop
 800a366:	bf00      	nop
}
 800a368:	3710      	adds	r7, #16
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}

0800a36e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a36e:	b480      	push	{r7}
 800a370:	b085      	sub	sp, #20
 800a372:	af00      	add	r7, sp, #0
 800a374:	60f8      	str	r0, [r7, #12]
 800a376:	60b9      	str	r1, [r7, #8]
 800a378:	607a      	str	r2, [r7, #4]
 800a37a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a380:	68fa      	ldr	r2, [r7, #12]
 800a382:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a384:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d004      	beq.n	800a398 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a392:	68fa      	ldr	r2, [r7, #12]
 800a394:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a396:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a39c:	f003 021f 	and.w	r2, r3, #31
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3a4:	2101      	movs	r1, #1
 800a3a6:	fa01 f202 	lsl.w	r2, r1, r2
 800a3aa:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	683a      	ldr	r2, [r7, #0]
 800a3b2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	689b      	ldr	r3, [r3, #8]
 800a3b8:	2b10      	cmp	r3, #16
 800a3ba:	d108      	bne.n	800a3ce <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	68ba      	ldr	r2, [r7, #8]
 800a3ca:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800a3cc:	e007      	b.n	800a3de <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	68ba      	ldr	r2, [r7, #8]
 800a3d4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	687a      	ldr	r2, [r7, #4]
 800a3dc:	60da      	str	r2, [r3, #12]
}
 800a3de:	bf00      	nop
 800a3e0:	3714      	adds	r7, #20
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e8:	4770      	bx	lr
	...

0800a3ec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b087      	sub	sp, #28
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	461a      	mov	r2, r3
 800a3fa:	4b16      	ldr	r3, [pc, #88]	; (800a454 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d802      	bhi.n	800a406 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800a400:	4b15      	ldr	r3, [pc, #84]	; (800a458 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800a402:	617b      	str	r3, [r7, #20]
 800a404:	e001      	b.n	800a40a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800a406:	4b15      	ldr	r3, [pc, #84]	; (800a45c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800a408:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	b2db      	uxtb	r3, r3
 800a414:	3b08      	subs	r3, #8
 800a416:	4a12      	ldr	r2, [pc, #72]	; (800a460 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800a418:	fba2 2303 	umull	r2, r3, r2, r3
 800a41c:	091b      	lsrs	r3, r3, #4
 800a41e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a424:	089b      	lsrs	r3, r3, #2
 800a426:	009a      	lsls	r2, r3, #2
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	4413      	add	r3, r2
 800a42c:	461a      	mov	r2, r3
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	4a0b      	ldr	r2, [pc, #44]	; (800a464 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800a436:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f003 031f 	and.w	r3, r3, #31
 800a43e:	2201      	movs	r2, #1
 800a440:	409a      	lsls	r2, r3
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	651a      	str	r2, [r3, #80]	; 0x50
}
 800a446:	bf00      	nop
 800a448:	371c      	adds	r7, #28
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr
 800a452:	bf00      	nop
 800a454:	40020407 	.word	0x40020407
 800a458:	40020800 	.word	0x40020800
 800a45c:	40020820 	.word	0x40020820
 800a460:	cccccccd 	.word	0xcccccccd
 800a464:	40020880 	.word	0x40020880

0800a468 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a468:	b480      	push	{r7}
 800a46a:	b085      	sub	sp, #20
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	685b      	ldr	r3, [r3, #4]
 800a474:	b2db      	uxtb	r3, r3
 800a476:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a478:	68fa      	ldr	r2, [r7, #12]
 800a47a:	4b0b      	ldr	r3, [pc, #44]	; (800a4a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800a47c:	4413      	add	r3, r2
 800a47e:	009b      	lsls	r3, r3, #2
 800a480:	461a      	mov	r2, r3
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	4a08      	ldr	r2, [pc, #32]	; (800a4ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800a48a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	3b01      	subs	r3, #1
 800a490:	f003 031f 	and.w	r3, r3, #31
 800a494:	2201      	movs	r2, #1
 800a496:	409a      	lsls	r2, r3
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800a49c:	bf00      	nop
 800a49e:	3714      	adds	r7, #20
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a6:	4770      	bx	lr
 800a4a8:	1000823f 	.word	0x1000823f
 800a4ac:	40020940 	.word	0x40020940

0800a4b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b087      	sub	sp, #28
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a4be:	e15a      	b.n	800a776 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	681a      	ldr	r2, [r3, #0]
 800a4c4:	2101      	movs	r1, #1
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	fa01 f303 	lsl.w	r3, r1, r3
 800a4cc:	4013      	ands	r3, r2
 800a4ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	f000 814c 	beq.w	800a770 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	d00b      	beq.n	800a4f8 <HAL_GPIO_Init+0x48>
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	2b02      	cmp	r3, #2
 800a4e6:	d007      	beq.n	800a4f8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a4ec:	2b11      	cmp	r3, #17
 800a4ee:	d003      	beq.n	800a4f8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	2b12      	cmp	r3, #18
 800a4f6:	d130      	bne.n	800a55a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	689b      	ldr	r3, [r3, #8]
 800a4fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	005b      	lsls	r3, r3, #1
 800a502:	2203      	movs	r2, #3
 800a504:	fa02 f303 	lsl.w	r3, r2, r3
 800a508:	43db      	mvns	r3, r3
 800a50a:	693a      	ldr	r2, [r7, #16]
 800a50c:	4013      	ands	r3, r2
 800a50e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	68da      	ldr	r2, [r3, #12]
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	005b      	lsls	r3, r3, #1
 800a518:	fa02 f303 	lsl.w	r3, r2, r3
 800a51c:	693a      	ldr	r2, [r7, #16]
 800a51e:	4313      	orrs	r3, r2
 800a520:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	693a      	ldr	r2, [r7, #16]
 800a526:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a52e:	2201      	movs	r2, #1
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	fa02 f303 	lsl.w	r3, r2, r3
 800a536:	43db      	mvns	r3, r3
 800a538:	693a      	ldr	r2, [r7, #16]
 800a53a:	4013      	ands	r3, r2
 800a53c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	685b      	ldr	r3, [r3, #4]
 800a542:	091b      	lsrs	r3, r3, #4
 800a544:	f003 0201 	and.w	r2, r3, #1
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	fa02 f303 	lsl.w	r3, r2, r3
 800a54e:	693a      	ldr	r2, [r7, #16]
 800a550:	4313      	orrs	r3, r2
 800a552:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	693a      	ldr	r2, [r7, #16]
 800a558:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	68db      	ldr	r3, [r3, #12]
 800a55e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	005b      	lsls	r3, r3, #1
 800a564:	2203      	movs	r2, #3
 800a566:	fa02 f303 	lsl.w	r3, r2, r3
 800a56a:	43db      	mvns	r3, r3
 800a56c:	693a      	ldr	r2, [r7, #16]
 800a56e:	4013      	ands	r3, r2
 800a570:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	689a      	ldr	r2, [r3, #8]
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	005b      	lsls	r3, r3, #1
 800a57a:	fa02 f303 	lsl.w	r3, r2, r3
 800a57e:	693a      	ldr	r2, [r7, #16]
 800a580:	4313      	orrs	r3, r2
 800a582:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	693a      	ldr	r2, [r7, #16]
 800a588:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	685b      	ldr	r3, [r3, #4]
 800a58e:	2b02      	cmp	r3, #2
 800a590:	d003      	beq.n	800a59a <HAL_GPIO_Init+0xea>
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	685b      	ldr	r3, [r3, #4]
 800a596:	2b12      	cmp	r3, #18
 800a598:	d123      	bne.n	800a5e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	08da      	lsrs	r2, r3, #3
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	3208      	adds	r2, #8
 800a5a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	f003 0307 	and.w	r3, r3, #7
 800a5ae:	009b      	lsls	r3, r3, #2
 800a5b0:	220f      	movs	r2, #15
 800a5b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a5b6:	43db      	mvns	r3, r3
 800a5b8:	693a      	ldr	r2, [r7, #16]
 800a5ba:	4013      	ands	r3, r2
 800a5bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	691a      	ldr	r2, [r3, #16]
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	f003 0307 	and.w	r3, r3, #7
 800a5c8:	009b      	lsls	r3, r3, #2
 800a5ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a5ce:	693a      	ldr	r2, [r7, #16]
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	08da      	lsrs	r2, r3, #3
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	3208      	adds	r2, #8
 800a5dc:	6939      	ldr	r1, [r7, #16]
 800a5de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	005b      	lsls	r3, r3, #1
 800a5ec:	2203      	movs	r2, #3
 800a5ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a5f2:	43db      	mvns	r3, r3
 800a5f4:	693a      	ldr	r2, [r7, #16]
 800a5f6:	4013      	ands	r3, r2
 800a5f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	685b      	ldr	r3, [r3, #4]
 800a5fe:	f003 0203 	and.w	r2, r3, #3
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	005b      	lsls	r3, r3, #1
 800a606:	fa02 f303 	lsl.w	r3, r2, r3
 800a60a:	693a      	ldr	r2, [r7, #16]
 800a60c:	4313      	orrs	r3, r2
 800a60e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	693a      	ldr	r2, [r7, #16]
 800a614:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a61e:	2b00      	cmp	r3, #0
 800a620:	f000 80a6 	beq.w	800a770 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a624:	4b5b      	ldr	r3, [pc, #364]	; (800a794 <HAL_GPIO_Init+0x2e4>)
 800a626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a628:	4a5a      	ldr	r2, [pc, #360]	; (800a794 <HAL_GPIO_Init+0x2e4>)
 800a62a:	f043 0301 	orr.w	r3, r3, #1
 800a62e:	6613      	str	r3, [r2, #96]	; 0x60
 800a630:	4b58      	ldr	r3, [pc, #352]	; (800a794 <HAL_GPIO_Init+0x2e4>)
 800a632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a634:	f003 0301 	and.w	r3, r3, #1
 800a638:	60bb      	str	r3, [r7, #8]
 800a63a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a63c:	4a56      	ldr	r2, [pc, #344]	; (800a798 <HAL_GPIO_Init+0x2e8>)
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	089b      	lsrs	r3, r3, #2
 800a642:	3302      	adds	r3, #2
 800a644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a648:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	f003 0303 	and.w	r3, r3, #3
 800a650:	009b      	lsls	r3, r3, #2
 800a652:	220f      	movs	r2, #15
 800a654:	fa02 f303 	lsl.w	r3, r2, r3
 800a658:	43db      	mvns	r3, r3
 800a65a:	693a      	ldr	r2, [r7, #16]
 800a65c:	4013      	ands	r3, r2
 800a65e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a666:	d01f      	beq.n	800a6a8 <HAL_GPIO_Init+0x1f8>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	4a4c      	ldr	r2, [pc, #304]	; (800a79c <HAL_GPIO_Init+0x2ec>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d019      	beq.n	800a6a4 <HAL_GPIO_Init+0x1f4>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	4a4b      	ldr	r2, [pc, #300]	; (800a7a0 <HAL_GPIO_Init+0x2f0>)
 800a674:	4293      	cmp	r3, r2
 800a676:	d013      	beq.n	800a6a0 <HAL_GPIO_Init+0x1f0>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	4a4a      	ldr	r2, [pc, #296]	; (800a7a4 <HAL_GPIO_Init+0x2f4>)
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d00d      	beq.n	800a69c <HAL_GPIO_Init+0x1ec>
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	4a49      	ldr	r2, [pc, #292]	; (800a7a8 <HAL_GPIO_Init+0x2f8>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d007      	beq.n	800a698 <HAL_GPIO_Init+0x1e8>
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	4a48      	ldr	r2, [pc, #288]	; (800a7ac <HAL_GPIO_Init+0x2fc>)
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d101      	bne.n	800a694 <HAL_GPIO_Init+0x1e4>
 800a690:	2305      	movs	r3, #5
 800a692:	e00a      	b.n	800a6aa <HAL_GPIO_Init+0x1fa>
 800a694:	2306      	movs	r3, #6
 800a696:	e008      	b.n	800a6aa <HAL_GPIO_Init+0x1fa>
 800a698:	2304      	movs	r3, #4
 800a69a:	e006      	b.n	800a6aa <HAL_GPIO_Init+0x1fa>
 800a69c:	2303      	movs	r3, #3
 800a69e:	e004      	b.n	800a6aa <HAL_GPIO_Init+0x1fa>
 800a6a0:	2302      	movs	r3, #2
 800a6a2:	e002      	b.n	800a6aa <HAL_GPIO_Init+0x1fa>
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	e000      	b.n	800a6aa <HAL_GPIO_Init+0x1fa>
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	697a      	ldr	r2, [r7, #20]
 800a6ac:	f002 0203 	and.w	r2, r2, #3
 800a6b0:	0092      	lsls	r2, r2, #2
 800a6b2:	4093      	lsls	r3, r2
 800a6b4:	693a      	ldr	r2, [r7, #16]
 800a6b6:	4313      	orrs	r3, r2
 800a6b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a6ba:	4937      	ldr	r1, [pc, #220]	; (800a798 <HAL_GPIO_Init+0x2e8>)
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	089b      	lsrs	r3, r3, #2
 800a6c0:	3302      	adds	r3, #2
 800a6c2:	693a      	ldr	r2, [r7, #16]
 800a6c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a6c8:	4b39      	ldr	r3, [pc, #228]	; (800a7b0 <HAL_GPIO_Init+0x300>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	43db      	mvns	r3, r3
 800a6d2:	693a      	ldr	r2, [r7, #16]
 800a6d4:	4013      	ands	r3, r2
 800a6d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d003      	beq.n	800a6ec <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800a6e4:	693a      	ldr	r2, [r7, #16]
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a6ec:	4a30      	ldr	r2, [pc, #192]	; (800a7b0 <HAL_GPIO_Init+0x300>)
 800a6ee:	693b      	ldr	r3, [r7, #16]
 800a6f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800a6f2:	4b2f      	ldr	r3, [pc, #188]	; (800a7b0 <HAL_GPIO_Init+0x300>)
 800a6f4:	685b      	ldr	r3, [r3, #4]
 800a6f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	43db      	mvns	r3, r3
 800a6fc:	693a      	ldr	r2, [r7, #16]
 800a6fe:	4013      	ands	r3, r2
 800a700:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d003      	beq.n	800a716 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800a70e:	693a      	ldr	r2, [r7, #16]
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	4313      	orrs	r3, r2
 800a714:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a716:	4a26      	ldr	r2, [pc, #152]	; (800a7b0 <HAL_GPIO_Init+0x300>)
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a71c:	4b24      	ldr	r3, [pc, #144]	; (800a7b0 <HAL_GPIO_Init+0x300>)
 800a71e:	689b      	ldr	r3, [r3, #8]
 800a720:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	43db      	mvns	r3, r3
 800a726:	693a      	ldr	r2, [r7, #16]
 800a728:	4013      	ands	r3, r2
 800a72a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a734:	2b00      	cmp	r3, #0
 800a736:	d003      	beq.n	800a740 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800a738:	693a      	ldr	r2, [r7, #16]
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	4313      	orrs	r3, r2
 800a73e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a740:	4a1b      	ldr	r2, [pc, #108]	; (800a7b0 <HAL_GPIO_Init+0x300>)
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a746:	4b1a      	ldr	r3, [pc, #104]	; (800a7b0 <HAL_GPIO_Init+0x300>)
 800a748:	68db      	ldr	r3, [r3, #12]
 800a74a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	43db      	mvns	r3, r3
 800a750:	693a      	ldr	r2, [r7, #16]
 800a752:	4013      	ands	r3, r2
 800a754:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	685b      	ldr	r3, [r3, #4]
 800a75a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d003      	beq.n	800a76a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800a762:	693a      	ldr	r2, [r7, #16]
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	4313      	orrs	r3, r2
 800a768:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a76a:	4a11      	ldr	r2, [pc, #68]	; (800a7b0 <HAL_GPIO_Init+0x300>)
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	3301      	adds	r3, #1
 800a774:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	681a      	ldr	r2, [r3, #0]
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	fa22 f303 	lsr.w	r3, r2, r3
 800a780:	2b00      	cmp	r3, #0
 800a782:	f47f ae9d 	bne.w	800a4c0 <HAL_GPIO_Init+0x10>
  }
}
 800a786:	bf00      	nop
 800a788:	371c      	adds	r7, #28
 800a78a:	46bd      	mov	sp, r7
 800a78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a790:	4770      	bx	lr
 800a792:	bf00      	nop
 800a794:	40021000 	.word	0x40021000
 800a798:	40010000 	.word	0x40010000
 800a79c:	48000400 	.word	0x48000400
 800a7a0:	48000800 	.word	0x48000800
 800a7a4:	48000c00 	.word	0x48000c00
 800a7a8:	48001000 	.word	0x48001000
 800a7ac:	48001400 	.word	0x48001400
 800a7b0:	40010400 	.word	0x40010400

0800a7b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b083      	sub	sp, #12
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	460b      	mov	r3, r1
 800a7be:	807b      	strh	r3, [r7, #2]
 800a7c0:	4613      	mov	r3, r2
 800a7c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a7c4:	787b      	ldrb	r3, [r7, #1]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d003      	beq.n	800a7d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a7ca:	887a      	ldrh	r2, [r7, #2]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a7d0:	e002      	b.n	800a7d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a7d2:	887a      	ldrh	r2, [r7, #2]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a7d8:	bf00      	nop
 800a7da:	370c      	adds	r7, #12
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr

0800a7e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b085      	sub	sp, #20
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d141      	bne.n	800a876 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a7f2:	4b4b      	ldr	r3, [pc, #300]	; (800a920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a7fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7fe:	d131      	bne.n	800a864 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a800:	4b47      	ldr	r3, [pc, #284]	; (800a920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a806:	4a46      	ldr	r2, [pc, #280]	; (800a920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a80c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a810:	4b43      	ldr	r3, [pc, #268]	; (800a920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a818:	4a41      	ldr	r2, [pc, #260]	; (800a920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a81a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a81e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a820:	4b40      	ldr	r3, [pc, #256]	; (800a924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	2232      	movs	r2, #50	; 0x32
 800a826:	fb02 f303 	mul.w	r3, r2, r3
 800a82a:	4a3f      	ldr	r2, [pc, #252]	; (800a928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a82c:	fba2 2303 	umull	r2, r3, r2, r3
 800a830:	0c9b      	lsrs	r3, r3, #18
 800a832:	3301      	adds	r3, #1
 800a834:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a836:	e002      	b.n	800a83e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	3b01      	subs	r3, #1
 800a83c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a83e:	4b38      	ldr	r3, [pc, #224]	; (800a920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a840:	695b      	ldr	r3, [r3, #20]
 800a842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a84a:	d102      	bne.n	800a852 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d1f2      	bne.n	800a838 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a852:	4b33      	ldr	r3, [pc, #204]	; (800a920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a854:	695b      	ldr	r3, [r3, #20]
 800a856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a85a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a85e:	d158      	bne.n	800a912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a860:	2303      	movs	r3, #3
 800a862:	e057      	b.n	800a914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a864:	4b2e      	ldr	r3, [pc, #184]	; (800a920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a86a:	4a2d      	ldr	r2, [pc, #180]	; (800a920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a86c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a870:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a874:	e04d      	b.n	800a912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a87c:	d141      	bne.n	800a902 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a87e:	4b28      	ldr	r3, [pc, #160]	; (800a920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a88a:	d131      	bne.n	800a8f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a88c:	4b24      	ldr	r3, [pc, #144]	; (800a920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a88e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a892:	4a23      	ldr	r2, [pc, #140]	; (800a920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a898:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a89c:	4b20      	ldr	r3, [pc, #128]	; (800a920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a8a4:	4a1e      	ldr	r2, [pc, #120]	; (800a920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a8a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a8aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a8ac:	4b1d      	ldr	r3, [pc, #116]	; (800a924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	2232      	movs	r2, #50	; 0x32
 800a8b2:	fb02 f303 	mul.w	r3, r2, r3
 800a8b6:	4a1c      	ldr	r2, [pc, #112]	; (800a928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a8b8:	fba2 2303 	umull	r2, r3, r2, r3
 800a8bc:	0c9b      	lsrs	r3, r3, #18
 800a8be:	3301      	adds	r3, #1
 800a8c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a8c2:	e002      	b.n	800a8ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	3b01      	subs	r3, #1
 800a8c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a8ca:	4b15      	ldr	r3, [pc, #84]	; (800a920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a8cc:	695b      	ldr	r3, [r3, #20]
 800a8ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8d6:	d102      	bne.n	800a8de <HAL_PWREx_ControlVoltageScaling+0xfa>
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d1f2      	bne.n	800a8c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a8de:	4b10      	ldr	r3, [pc, #64]	; (800a920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a8e0:	695b      	ldr	r3, [r3, #20]
 800a8e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8ea:	d112      	bne.n	800a912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a8ec:	2303      	movs	r3, #3
 800a8ee:	e011      	b.n	800a914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a8f0:	4b0b      	ldr	r3, [pc, #44]	; (800a920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a8f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a8f6:	4a0a      	ldr	r2, [pc, #40]	; (800a920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a8f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a8fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a900:	e007      	b.n	800a912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a902:	4b07      	ldr	r3, [pc, #28]	; (800a920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a90a:	4a05      	ldr	r2, [pc, #20]	; (800a920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a90c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a910:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800a912:	2300      	movs	r3, #0
}
 800a914:	4618      	mov	r0, r3
 800a916:	3714      	adds	r7, #20
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr
 800a920:	40007000 	.word	0x40007000
 800a924:	20000cac 	.word	0x20000cac
 800a928:	431bde83 	.word	0x431bde83

0800a92c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b088      	sub	sp, #32
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d101      	bne.n	800a93e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a93a:	2301      	movs	r3, #1
 800a93c:	e308      	b.n	800af50 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f003 0301 	and.w	r3, r3, #1
 800a946:	2b00      	cmp	r3, #0
 800a948:	d075      	beq.n	800aa36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a94a:	4ba3      	ldr	r3, [pc, #652]	; (800abd8 <HAL_RCC_OscConfig+0x2ac>)
 800a94c:	689b      	ldr	r3, [r3, #8]
 800a94e:	f003 030c 	and.w	r3, r3, #12
 800a952:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a954:	4ba0      	ldr	r3, [pc, #640]	; (800abd8 <HAL_RCC_OscConfig+0x2ac>)
 800a956:	68db      	ldr	r3, [r3, #12]
 800a958:	f003 0303 	and.w	r3, r3, #3
 800a95c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800a95e:	69bb      	ldr	r3, [r7, #24]
 800a960:	2b0c      	cmp	r3, #12
 800a962:	d102      	bne.n	800a96a <HAL_RCC_OscConfig+0x3e>
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	2b03      	cmp	r3, #3
 800a968:	d002      	beq.n	800a970 <HAL_RCC_OscConfig+0x44>
 800a96a:	69bb      	ldr	r3, [r7, #24]
 800a96c:	2b08      	cmp	r3, #8
 800a96e:	d10b      	bne.n	800a988 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a970:	4b99      	ldr	r3, [pc, #612]	; (800abd8 <HAL_RCC_OscConfig+0x2ac>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d05b      	beq.n	800aa34 <HAL_RCC_OscConfig+0x108>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	685b      	ldr	r3, [r3, #4]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d157      	bne.n	800aa34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a984:	2301      	movs	r3, #1
 800a986:	e2e3      	b.n	800af50 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a990:	d106      	bne.n	800a9a0 <HAL_RCC_OscConfig+0x74>
 800a992:	4b91      	ldr	r3, [pc, #580]	; (800abd8 <HAL_RCC_OscConfig+0x2ac>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	4a90      	ldr	r2, [pc, #576]	; (800abd8 <HAL_RCC_OscConfig+0x2ac>)
 800a998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a99c:	6013      	str	r3, [r2, #0]
 800a99e:	e01d      	b.n	800a9dc <HAL_RCC_OscConfig+0xb0>
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	685b      	ldr	r3, [r3, #4]
 800a9a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a9a8:	d10c      	bne.n	800a9c4 <HAL_RCC_OscConfig+0x98>
 800a9aa:	4b8b      	ldr	r3, [pc, #556]	; (800abd8 <HAL_RCC_OscConfig+0x2ac>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	4a8a      	ldr	r2, [pc, #552]	; (800abd8 <HAL_RCC_OscConfig+0x2ac>)
 800a9b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a9b4:	6013      	str	r3, [r2, #0]
 800a9b6:	4b88      	ldr	r3, [pc, #544]	; (800abd8 <HAL_RCC_OscConfig+0x2ac>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	4a87      	ldr	r2, [pc, #540]	; (800abd8 <HAL_RCC_OscConfig+0x2ac>)
 800a9bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9c0:	6013      	str	r3, [r2, #0]
 800a9c2:	e00b      	b.n	800a9dc <HAL_RCC_OscConfig+0xb0>
 800a9c4:	4b84      	ldr	r3, [pc, #528]	; (800abd8 <HAL_RCC_OscConfig+0x2ac>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	4a83      	ldr	r2, [pc, #524]	; (800abd8 <HAL_RCC_OscConfig+0x2ac>)
 800a9ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a9ce:	6013      	str	r3, [r2, #0]
 800a9d0:	4b81      	ldr	r3, [pc, #516]	; (800abd8 <HAL_RCC_OscConfig+0x2ac>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4a80      	ldr	r2, [pc, #512]	; (800abd8 <HAL_RCC_OscConfig+0x2ac>)
 800a9d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a9da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	685b      	ldr	r3, [r3, #4]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d013      	beq.n	800aa0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9e4:	f7fd f9fc 	bl	8007de0 <HAL_GetTick>
 800a9e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a9ea:	e008      	b.n	800a9fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a9ec:	f7fd f9f8 	bl	8007de0 <HAL_GetTick>
 800a9f0:	4602      	mov	r2, r0
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	1ad3      	subs	r3, r2, r3
 800a9f6:	2b64      	cmp	r3, #100	; 0x64
 800a9f8:	d901      	bls.n	800a9fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a9fa:	2303      	movs	r3, #3
 800a9fc:	e2a8      	b.n	800af50 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a9fe:	4b76      	ldr	r3, [pc, #472]	; (800abd8 <HAL_RCC_OscConfig+0x2ac>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d0f0      	beq.n	800a9ec <HAL_RCC_OscConfig+0xc0>
 800aa0a:	e014      	b.n	800aa36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa0c:	f7fd f9e8 	bl	8007de0 <HAL_GetTick>
 800aa10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800aa12:	e008      	b.n	800aa26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aa14:	f7fd f9e4 	bl	8007de0 <HAL_GetTick>
 800aa18:	4602      	mov	r2, r0
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	1ad3      	subs	r3, r2, r3
 800aa1e:	2b64      	cmp	r3, #100	; 0x64
 800aa20:	d901      	bls.n	800aa26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800aa22:	2303      	movs	r3, #3
 800aa24:	e294      	b.n	800af50 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800aa26:	4b6c      	ldr	r3, [pc, #432]	; (800abd8 <HAL_RCC_OscConfig+0x2ac>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d1f0      	bne.n	800aa14 <HAL_RCC_OscConfig+0xe8>
 800aa32:	e000      	b.n	800aa36 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aa34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f003 0302 	and.w	r3, r3, #2
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d075      	beq.n	800ab2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aa42:	4b65      	ldr	r3, [pc, #404]	; (800abd8 <HAL_RCC_OscConfig+0x2ac>)
 800aa44:	689b      	ldr	r3, [r3, #8]
 800aa46:	f003 030c 	and.w	r3, r3, #12
 800aa4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800aa4c:	4b62      	ldr	r3, [pc, #392]	; (800abd8 <HAL_RCC_OscConfig+0x2ac>)
 800aa4e:	68db      	ldr	r3, [r3, #12]
 800aa50:	f003 0303 	and.w	r3, r3, #3
 800aa54:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800aa56:	69bb      	ldr	r3, [r7, #24]
 800aa58:	2b0c      	cmp	r3, #12
 800aa5a:	d102      	bne.n	800aa62 <HAL_RCC_OscConfig+0x136>
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	2b02      	cmp	r3, #2
 800aa60:	d002      	beq.n	800aa68 <HAL_RCC_OscConfig+0x13c>
 800aa62:	69bb      	ldr	r3, [r7, #24]
 800aa64:	2b04      	cmp	r3, #4
 800aa66:	d11f      	bne.n	800aaa8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800aa68:	4b5b      	ldr	r3, [pc, #364]	; (800abd8 <HAL_RCC_OscConfig+0x2ac>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d005      	beq.n	800aa80 <HAL_RCC_OscConfig+0x154>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	68db      	ldr	r3, [r3, #12]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d101      	bne.n	800aa80 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	e267      	b.n	800af50 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa80:	4b55      	ldr	r3, [pc, #340]	; (800abd8 <HAL_RCC_OscConfig+0x2ac>)
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	691b      	ldr	r3, [r3, #16]
 800aa8c:	061b      	lsls	r3, r3, #24
 800aa8e:	4952      	ldr	r1, [pc, #328]	; (800abd8 <HAL_RCC_OscConfig+0x2ac>)
 800aa90:	4313      	orrs	r3, r2
 800aa92:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800aa94:	4b51      	ldr	r3, [pc, #324]	; (800abdc <HAL_RCC_OscConfig+0x2b0>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f7fd f955 	bl	8007d48 <HAL_InitTick>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d043      	beq.n	800ab2c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	e253      	b.n	800af50 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	68db      	ldr	r3, [r3, #12]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d023      	beq.n	800aaf8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800aab0:	4b49      	ldr	r3, [pc, #292]	; (800abd8 <HAL_RCC_OscConfig+0x2ac>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4a48      	ldr	r2, [pc, #288]	; (800abd8 <HAL_RCC_OscConfig+0x2ac>)
 800aab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aaba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aabc:	f7fd f990 	bl	8007de0 <HAL_GetTick>
 800aac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800aac2:	e008      	b.n	800aad6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aac4:	f7fd f98c 	bl	8007de0 <HAL_GetTick>
 800aac8:	4602      	mov	r2, r0
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	1ad3      	subs	r3, r2, r3
 800aace:	2b02      	cmp	r3, #2
 800aad0:	d901      	bls.n	800aad6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800aad2:	2303      	movs	r3, #3
 800aad4:	e23c      	b.n	800af50 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800aad6:	4b40      	ldr	r3, [pc, #256]	; (800abd8 <HAL_RCC_OscConfig+0x2ac>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d0f0      	beq.n	800aac4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aae2:	4b3d      	ldr	r3, [pc, #244]	; (800abd8 <HAL_RCC_OscConfig+0x2ac>)
 800aae4:	685b      	ldr	r3, [r3, #4]
 800aae6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	691b      	ldr	r3, [r3, #16]
 800aaee:	061b      	lsls	r3, r3, #24
 800aaf0:	4939      	ldr	r1, [pc, #228]	; (800abd8 <HAL_RCC_OscConfig+0x2ac>)
 800aaf2:	4313      	orrs	r3, r2
 800aaf4:	604b      	str	r3, [r1, #4]
 800aaf6:	e01a      	b.n	800ab2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aaf8:	4b37      	ldr	r3, [pc, #220]	; (800abd8 <HAL_RCC_OscConfig+0x2ac>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	4a36      	ldr	r2, [pc, #216]	; (800abd8 <HAL_RCC_OscConfig+0x2ac>)
 800aafe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab04:	f7fd f96c 	bl	8007de0 <HAL_GetTick>
 800ab08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ab0a:	e008      	b.n	800ab1e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ab0c:	f7fd f968 	bl	8007de0 <HAL_GetTick>
 800ab10:	4602      	mov	r2, r0
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	1ad3      	subs	r3, r2, r3
 800ab16:	2b02      	cmp	r3, #2
 800ab18:	d901      	bls.n	800ab1e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800ab1a:	2303      	movs	r3, #3
 800ab1c:	e218      	b.n	800af50 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ab1e:	4b2e      	ldr	r3, [pc, #184]	; (800abd8 <HAL_RCC_OscConfig+0x2ac>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d1f0      	bne.n	800ab0c <HAL_RCC_OscConfig+0x1e0>
 800ab2a:	e000      	b.n	800ab2e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ab2c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f003 0308 	and.w	r3, r3, #8
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d03c      	beq.n	800abb4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	695b      	ldr	r3, [r3, #20]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d01c      	beq.n	800ab7c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ab42:	4b25      	ldr	r3, [pc, #148]	; (800abd8 <HAL_RCC_OscConfig+0x2ac>)
 800ab44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ab48:	4a23      	ldr	r2, [pc, #140]	; (800abd8 <HAL_RCC_OscConfig+0x2ac>)
 800ab4a:	f043 0301 	orr.w	r3, r3, #1
 800ab4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab52:	f7fd f945 	bl	8007de0 <HAL_GetTick>
 800ab56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ab58:	e008      	b.n	800ab6c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ab5a:	f7fd f941 	bl	8007de0 <HAL_GetTick>
 800ab5e:	4602      	mov	r2, r0
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	1ad3      	subs	r3, r2, r3
 800ab64:	2b02      	cmp	r3, #2
 800ab66:	d901      	bls.n	800ab6c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800ab68:	2303      	movs	r3, #3
 800ab6a:	e1f1      	b.n	800af50 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ab6c:	4b1a      	ldr	r3, [pc, #104]	; (800abd8 <HAL_RCC_OscConfig+0x2ac>)
 800ab6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ab72:	f003 0302 	and.w	r3, r3, #2
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d0ef      	beq.n	800ab5a <HAL_RCC_OscConfig+0x22e>
 800ab7a:	e01b      	b.n	800abb4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ab7c:	4b16      	ldr	r3, [pc, #88]	; (800abd8 <HAL_RCC_OscConfig+0x2ac>)
 800ab7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ab82:	4a15      	ldr	r2, [pc, #84]	; (800abd8 <HAL_RCC_OscConfig+0x2ac>)
 800ab84:	f023 0301 	bic.w	r3, r3, #1
 800ab88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab8c:	f7fd f928 	bl	8007de0 <HAL_GetTick>
 800ab90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ab92:	e008      	b.n	800aba6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ab94:	f7fd f924 	bl	8007de0 <HAL_GetTick>
 800ab98:	4602      	mov	r2, r0
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	1ad3      	subs	r3, r2, r3
 800ab9e:	2b02      	cmp	r3, #2
 800aba0:	d901      	bls.n	800aba6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800aba2:	2303      	movs	r3, #3
 800aba4:	e1d4      	b.n	800af50 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800aba6:	4b0c      	ldr	r3, [pc, #48]	; (800abd8 <HAL_RCC_OscConfig+0x2ac>)
 800aba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800abac:	f003 0302 	and.w	r3, r3, #2
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d1ef      	bne.n	800ab94 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f003 0304 	and.w	r3, r3, #4
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	f000 80ab 	beq.w	800ad18 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800abc2:	2300      	movs	r3, #0
 800abc4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800abc6:	4b04      	ldr	r3, [pc, #16]	; (800abd8 <HAL_RCC_OscConfig+0x2ac>)
 800abc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d106      	bne.n	800abe0 <HAL_RCC_OscConfig+0x2b4>
 800abd2:	2301      	movs	r3, #1
 800abd4:	e005      	b.n	800abe2 <HAL_RCC_OscConfig+0x2b6>
 800abd6:	bf00      	nop
 800abd8:	40021000 	.word	0x40021000
 800abdc:	20000cb0 	.word	0x20000cb0
 800abe0:	2300      	movs	r3, #0
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d00d      	beq.n	800ac02 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800abe6:	4baf      	ldr	r3, [pc, #700]	; (800aea4 <HAL_RCC_OscConfig+0x578>)
 800abe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abea:	4aae      	ldr	r2, [pc, #696]	; (800aea4 <HAL_RCC_OscConfig+0x578>)
 800abec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800abf0:	6593      	str	r3, [r2, #88]	; 0x58
 800abf2:	4bac      	ldr	r3, [pc, #688]	; (800aea4 <HAL_RCC_OscConfig+0x578>)
 800abf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abfa:	60fb      	str	r3, [r7, #12]
 800abfc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800abfe:	2301      	movs	r3, #1
 800ac00:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ac02:	4ba9      	ldr	r3, [pc, #676]	; (800aea8 <HAL_RCC_OscConfig+0x57c>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d118      	bne.n	800ac40 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ac0e:	4ba6      	ldr	r3, [pc, #664]	; (800aea8 <HAL_RCC_OscConfig+0x57c>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	4aa5      	ldr	r2, [pc, #660]	; (800aea8 <HAL_RCC_OscConfig+0x57c>)
 800ac14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ac1a:	f7fd f8e1 	bl	8007de0 <HAL_GetTick>
 800ac1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ac20:	e008      	b.n	800ac34 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ac22:	f7fd f8dd 	bl	8007de0 <HAL_GetTick>
 800ac26:	4602      	mov	r2, r0
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	1ad3      	subs	r3, r2, r3
 800ac2c:	2b02      	cmp	r3, #2
 800ac2e:	d901      	bls.n	800ac34 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800ac30:	2303      	movs	r3, #3
 800ac32:	e18d      	b.n	800af50 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ac34:	4b9c      	ldr	r3, [pc, #624]	; (800aea8 <HAL_RCC_OscConfig+0x57c>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d0f0      	beq.n	800ac22 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	689b      	ldr	r3, [r3, #8]
 800ac44:	2b01      	cmp	r3, #1
 800ac46:	d108      	bne.n	800ac5a <HAL_RCC_OscConfig+0x32e>
 800ac48:	4b96      	ldr	r3, [pc, #600]	; (800aea4 <HAL_RCC_OscConfig+0x578>)
 800ac4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac4e:	4a95      	ldr	r2, [pc, #596]	; (800aea4 <HAL_RCC_OscConfig+0x578>)
 800ac50:	f043 0301 	orr.w	r3, r3, #1
 800ac54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ac58:	e024      	b.n	800aca4 <HAL_RCC_OscConfig+0x378>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	689b      	ldr	r3, [r3, #8]
 800ac5e:	2b05      	cmp	r3, #5
 800ac60:	d110      	bne.n	800ac84 <HAL_RCC_OscConfig+0x358>
 800ac62:	4b90      	ldr	r3, [pc, #576]	; (800aea4 <HAL_RCC_OscConfig+0x578>)
 800ac64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac68:	4a8e      	ldr	r2, [pc, #568]	; (800aea4 <HAL_RCC_OscConfig+0x578>)
 800ac6a:	f043 0304 	orr.w	r3, r3, #4
 800ac6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ac72:	4b8c      	ldr	r3, [pc, #560]	; (800aea4 <HAL_RCC_OscConfig+0x578>)
 800ac74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac78:	4a8a      	ldr	r2, [pc, #552]	; (800aea4 <HAL_RCC_OscConfig+0x578>)
 800ac7a:	f043 0301 	orr.w	r3, r3, #1
 800ac7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ac82:	e00f      	b.n	800aca4 <HAL_RCC_OscConfig+0x378>
 800ac84:	4b87      	ldr	r3, [pc, #540]	; (800aea4 <HAL_RCC_OscConfig+0x578>)
 800ac86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac8a:	4a86      	ldr	r2, [pc, #536]	; (800aea4 <HAL_RCC_OscConfig+0x578>)
 800ac8c:	f023 0301 	bic.w	r3, r3, #1
 800ac90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ac94:	4b83      	ldr	r3, [pc, #524]	; (800aea4 <HAL_RCC_OscConfig+0x578>)
 800ac96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac9a:	4a82      	ldr	r2, [pc, #520]	; (800aea4 <HAL_RCC_OscConfig+0x578>)
 800ac9c:	f023 0304 	bic.w	r3, r3, #4
 800aca0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	689b      	ldr	r3, [r3, #8]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d016      	beq.n	800acda <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800acac:	f7fd f898 	bl	8007de0 <HAL_GetTick>
 800acb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800acb2:	e00a      	b.n	800acca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800acb4:	f7fd f894 	bl	8007de0 <HAL_GetTick>
 800acb8:	4602      	mov	r2, r0
 800acba:	693b      	ldr	r3, [r7, #16]
 800acbc:	1ad3      	subs	r3, r2, r3
 800acbe:	f241 3288 	movw	r2, #5000	; 0x1388
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d901      	bls.n	800acca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800acc6:	2303      	movs	r3, #3
 800acc8:	e142      	b.n	800af50 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800acca:	4b76      	ldr	r3, [pc, #472]	; (800aea4 <HAL_RCC_OscConfig+0x578>)
 800accc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acd0:	f003 0302 	and.w	r3, r3, #2
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d0ed      	beq.n	800acb4 <HAL_RCC_OscConfig+0x388>
 800acd8:	e015      	b.n	800ad06 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800acda:	f7fd f881 	bl	8007de0 <HAL_GetTick>
 800acde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ace0:	e00a      	b.n	800acf8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ace2:	f7fd f87d 	bl	8007de0 <HAL_GetTick>
 800ace6:	4602      	mov	r2, r0
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	1ad3      	subs	r3, r2, r3
 800acec:	f241 3288 	movw	r2, #5000	; 0x1388
 800acf0:	4293      	cmp	r3, r2
 800acf2:	d901      	bls.n	800acf8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800acf4:	2303      	movs	r3, #3
 800acf6:	e12b      	b.n	800af50 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800acf8:	4b6a      	ldr	r3, [pc, #424]	; (800aea4 <HAL_RCC_OscConfig+0x578>)
 800acfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acfe:	f003 0302 	and.w	r3, r3, #2
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d1ed      	bne.n	800ace2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ad06:	7ffb      	ldrb	r3, [r7, #31]
 800ad08:	2b01      	cmp	r3, #1
 800ad0a:	d105      	bne.n	800ad18 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ad0c:	4b65      	ldr	r3, [pc, #404]	; (800aea4 <HAL_RCC_OscConfig+0x578>)
 800ad0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad10:	4a64      	ldr	r2, [pc, #400]	; (800aea4 <HAL_RCC_OscConfig+0x578>)
 800ad12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ad16:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f003 0320 	and.w	r3, r3, #32
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d03c      	beq.n	800ad9e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	699b      	ldr	r3, [r3, #24]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d01c      	beq.n	800ad66 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ad2c:	4b5d      	ldr	r3, [pc, #372]	; (800aea4 <HAL_RCC_OscConfig+0x578>)
 800ad2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ad32:	4a5c      	ldr	r2, [pc, #368]	; (800aea4 <HAL_RCC_OscConfig+0x578>)
 800ad34:	f043 0301 	orr.w	r3, r3, #1
 800ad38:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad3c:	f7fd f850 	bl	8007de0 <HAL_GetTick>
 800ad40:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800ad42:	e008      	b.n	800ad56 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ad44:	f7fd f84c 	bl	8007de0 <HAL_GetTick>
 800ad48:	4602      	mov	r2, r0
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	1ad3      	subs	r3, r2, r3
 800ad4e:	2b02      	cmp	r3, #2
 800ad50:	d901      	bls.n	800ad56 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800ad52:	2303      	movs	r3, #3
 800ad54:	e0fc      	b.n	800af50 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800ad56:	4b53      	ldr	r3, [pc, #332]	; (800aea4 <HAL_RCC_OscConfig+0x578>)
 800ad58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ad5c:	f003 0302 	and.w	r3, r3, #2
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d0ef      	beq.n	800ad44 <HAL_RCC_OscConfig+0x418>
 800ad64:	e01b      	b.n	800ad9e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ad66:	4b4f      	ldr	r3, [pc, #316]	; (800aea4 <HAL_RCC_OscConfig+0x578>)
 800ad68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ad6c:	4a4d      	ldr	r2, [pc, #308]	; (800aea4 <HAL_RCC_OscConfig+0x578>)
 800ad6e:	f023 0301 	bic.w	r3, r3, #1
 800ad72:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad76:	f7fd f833 	bl	8007de0 <HAL_GetTick>
 800ad7a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ad7c:	e008      	b.n	800ad90 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ad7e:	f7fd f82f 	bl	8007de0 <HAL_GetTick>
 800ad82:	4602      	mov	r2, r0
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	1ad3      	subs	r3, r2, r3
 800ad88:	2b02      	cmp	r3, #2
 800ad8a:	d901      	bls.n	800ad90 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800ad8c:	2303      	movs	r3, #3
 800ad8e:	e0df      	b.n	800af50 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ad90:	4b44      	ldr	r3, [pc, #272]	; (800aea4 <HAL_RCC_OscConfig+0x578>)
 800ad92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ad96:	f003 0302 	and.w	r3, r3, #2
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d1ef      	bne.n	800ad7e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	69db      	ldr	r3, [r3, #28]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	f000 80d3 	beq.w	800af4e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ada8:	4b3e      	ldr	r3, [pc, #248]	; (800aea4 <HAL_RCC_OscConfig+0x578>)
 800adaa:	689b      	ldr	r3, [r3, #8]
 800adac:	f003 030c 	and.w	r3, r3, #12
 800adb0:	2b0c      	cmp	r3, #12
 800adb2:	f000 808d 	beq.w	800aed0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	69db      	ldr	r3, [r3, #28]
 800adba:	2b02      	cmp	r3, #2
 800adbc:	d15a      	bne.n	800ae74 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800adbe:	4b39      	ldr	r3, [pc, #228]	; (800aea4 <HAL_RCC_OscConfig+0x578>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	4a38      	ldr	r2, [pc, #224]	; (800aea4 <HAL_RCC_OscConfig+0x578>)
 800adc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800adc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800adca:	f7fd f809 	bl	8007de0 <HAL_GetTick>
 800adce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800add0:	e008      	b.n	800ade4 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800add2:	f7fd f805 	bl	8007de0 <HAL_GetTick>
 800add6:	4602      	mov	r2, r0
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	1ad3      	subs	r3, r2, r3
 800addc:	2b02      	cmp	r3, #2
 800adde:	d901      	bls.n	800ade4 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800ade0:	2303      	movs	r3, #3
 800ade2:	e0b5      	b.n	800af50 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ade4:	4b2f      	ldr	r3, [pc, #188]	; (800aea4 <HAL_RCC_OscConfig+0x578>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adec:	2b00      	cmp	r3, #0
 800adee:	d1f0      	bne.n	800add2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800adf0:	4b2c      	ldr	r3, [pc, #176]	; (800aea4 <HAL_RCC_OscConfig+0x578>)
 800adf2:	68da      	ldr	r2, [r3, #12]
 800adf4:	4b2d      	ldr	r3, [pc, #180]	; (800aeac <HAL_RCC_OscConfig+0x580>)
 800adf6:	4013      	ands	r3, r2
 800adf8:	687a      	ldr	r2, [r7, #4]
 800adfa:	6a11      	ldr	r1, [r2, #32]
 800adfc:	687a      	ldr	r2, [r7, #4]
 800adfe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ae00:	3a01      	subs	r2, #1
 800ae02:	0112      	lsls	r2, r2, #4
 800ae04:	4311      	orrs	r1, r2
 800ae06:	687a      	ldr	r2, [r7, #4]
 800ae08:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800ae0a:	0212      	lsls	r2, r2, #8
 800ae0c:	4311      	orrs	r1, r2
 800ae0e:	687a      	ldr	r2, [r7, #4]
 800ae10:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ae12:	0852      	lsrs	r2, r2, #1
 800ae14:	3a01      	subs	r2, #1
 800ae16:	0552      	lsls	r2, r2, #21
 800ae18:	4311      	orrs	r1, r2
 800ae1a:	687a      	ldr	r2, [r7, #4]
 800ae1c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ae1e:	0852      	lsrs	r2, r2, #1
 800ae20:	3a01      	subs	r2, #1
 800ae22:	0652      	lsls	r2, r2, #25
 800ae24:	4311      	orrs	r1, r2
 800ae26:	687a      	ldr	r2, [r7, #4]
 800ae28:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ae2a:	06d2      	lsls	r2, r2, #27
 800ae2c:	430a      	orrs	r2, r1
 800ae2e:	491d      	ldr	r1, [pc, #116]	; (800aea4 <HAL_RCC_OscConfig+0x578>)
 800ae30:	4313      	orrs	r3, r2
 800ae32:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ae34:	4b1b      	ldr	r3, [pc, #108]	; (800aea4 <HAL_RCC_OscConfig+0x578>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	4a1a      	ldr	r2, [pc, #104]	; (800aea4 <HAL_RCC_OscConfig+0x578>)
 800ae3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ae3e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ae40:	4b18      	ldr	r3, [pc, #96]	; (800aea4 <HAL_RCC_OscConfig+0x578>)
 800ae42:	68db      	ldr	r3, [r3, #12]
 800ae44:	4a17      	ldr	r2, [pc, #92]	; (800aea4 <HAL_RCC_OscConfig+0x578>)
 800ae46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ae4a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae4c:	f7fc ffc8 	bl	8007de0 <HAL_GetTick>
 800ae50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ae52:	e008      	b.n	800ae66 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae54:	f7fc ffc4 	bl	8007de0 <HAL_GetTick>
 800ae58:	4602      	mov	r2, r0
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	1ad3      	subs	r3, r2, r3
 800ae5e:	2b02      	cmp	r3, #2
 800ae60:	d901      	bls.n	800ae66 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800ae62:	2303      	movs	r3, #3
 800ae64:	e074      	b.n	800af50 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ae66:	4b0f      	ldr	r3, [pc, #60]	; (800aea4 <HAL_RCC_OscConfig+0x578>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d0f0      	beq.n	800ae54 <HAL_RCC_OscConfig+0x528>
 800ae72:	e06c      	b.n	800af4e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ae74:	4b0b      	ldr	r3, [pc, #44]	; (800aea4 <HAL_RCC_OscConfig+0x578>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	4a0a      	ldr	r2, [pc, #40]	; (800aea4 <HAL_RCC_OscConfig+0x578>)
 800ae7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ae7e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800ae80:	4b08      	ldr	r3, [pc, #32]	; (800aea4 <HAL_RCC_OscConfig+0x578>)
 800ae82:	68db      	ldr	r3, [r3, #12]
 800ae84:	4a07      	ldr	r2, [pc, #28]	; (800aea4 <HAL_RCC_OscConfig+0x578>)
 800ae86:	f023 0303 	bic.w	r3, r3, #3
 800ae8a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800ae8c:	4b05      	ldr	r3, [pc, #20]	; (800aea4 <HAL_RCC_OscConfig+0x578>)
 800ae8e:	68db      	ldr	r3, [r3, #12]
 800ae90:	4a04      	ldr	r2, [pc, #16]	; (800aea4 <HAL_RCC_OscConfig+0x578>)
 800ae92:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800ae96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ae9a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae9c:	f7fc ffa0 	bl	8007de0 <HAL_GetTick>
 800aea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800aea2:	e00e      	b.n	800aec2 <HAL_RCC_OscConfig+0x596>
 800aea4:	40021000 	.word	0x40021000
 800aea8:	40007000 	.word	0x40007000
 800aeac:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aeb0:	f7fc ff96 	bl	8007de0 <HAL_GetTick>
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	1ad3      	subs	r3, r2, r3
 800aeba:	2b02      	cmp	r3, #2
 800aebc:	d901      	bls.n	800aec2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800aebe:	2303      	movs	r3, #3
 800aec0:	e046      	b.n	800af50 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800aec2:	4b25      	ldr	r3, [pc, #148]	; (800af58 <HAL_RCC_OscConfig+0x62c>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d1f0      	bne.n	800aeb0 <HAL_RCC_OscConfig+0x584>
 800aece:	e03e      	b.n	800af4e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	69db      	ldr	r3, [r3, #28]
 800aed4:	2b01      	cmp	r3, #1
 800aed6:	d101      	bne.n	800aedc <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800aed8:	2301      	movs	r3, #1
 800aeda:	e039      	b.n	800af50 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800aedc:	4b1e      	ldr	r3, [pc, #120]	; (800af58 <HAL_RCC_OscConfig+0x62c>)
 800aede:	68db      	ldr	r3, [r3, #12]
 800aee0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	f003 0203 	and.w	r2, r3, #3
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6a1b      	ldr	r3, [r3, #32]
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d12c      	bne.n	800af4a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aefa:	3b01      	subs	r3, #1
 800aefc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aefe:	429a      	cmp	r2, r3
 800af00:	d123      	bne.n	800af4a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800af0e:	429a      	cmp	r2, r3
 800af10:	d11b      	bne.n	800af4a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af1c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800af1e:	429a      	cmp	r2, r3
 800af20:	d113      	bne.n	800af4a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af2c:	085b      	lsrs	r3, r3, #1
 800af2e:	3b01      	subs	r3, #1
 800af30:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800af32:	429a      	cmp	r2, r3
 800af34:	d109      	bne.n	800af4a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af40:	085b      	lsrs	r3, r3, #1
 800af42:	3b01      	subs	r3, #1
 800af44:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800af46:	429a      	cmp	r2, r3
 800af48:	d001      	beq.n	800af4e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800af4a:	2301      	movs	r3, #1
 800af4c:	e000      	b.n	800af50 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800af4e:	2300      	movs	r3, #0
}
 800af50:	4618      	mov	r0, r3
 800af52:	3720      	adds	r7, #32
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}
 800af58:	40021000 	.word	0x40021000

0800af5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b086      	sub	sp, #24
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
 800af64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800af66:	2300      	movs	r3, #0
 800af68:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d101      	bne.n	800af74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800af70:	2301      	movs	r3, #1
 800af72:	e11e      	b.n	800b1b2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800af74:	4b91      	ldr	r3, [pc, #580]	; (800b1bc <HAL_RCC_ClockConfig+0x260>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f003 030f 	and.w	r3, r3, #15
 800af7c:	683a      	ldr	r2, [r7, #0]
 800af7e:	429a      	cmp	r2, r3
 800af80:	d910      	bls.n	800afa4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800af82:	4b8e      	ldr	r3, [pc, #568]	; (800b1bc <HAL_RCC_ClockConfig+0x260>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f023 020f 	bic.w	r2, r3, #15
 800af8a:	498c      	ldr	r1, [pc, #560]	; (800b1bc <HAL_RCC_ClockConfig+0x260>)
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	4313      	orrs	r3, r2
 800af90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800af92:	4b8a      	ldr	r3, [pc, #552]	; (800b1bc <HAL_RCC_ClockConfig+0x260>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	f003 030f 	and.w	r3, r3, #15
 800af9a:	683a      	ldr	r2, [r7, #0]
 800af9c:	429a      	cmp	r2, r3
 800af9e:	d001      	beq.n	800afa4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800afa0:	2301      	movs	r3, #1
 800afa2:	e106      	b.n	800b1b2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f003 0301 	and.w	r3, r3, #1
 800afac:	2b00      	cmp	r3, #0
 800afae:	d073      	beq.n	800b098 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	685b      	ldr	r3, [r3, #4]
 800afb4:	2b03      	cmp	r3, #3
 800afb6:	d129      	bne.n	800b00c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800afb8:	4b81      	ldr	r3, [pc, #516]	; (800b1c0 <HAL_RCC_ClockConfig+0x264>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d101      	bne.n	800afc8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800afc4:	2301      	movs	r3, #1
 800afc6:	e0f4      	b.n	800b1b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800afc8:	f000 f972 	bl	800b2b0 <RCC_GetSysClockFreqFromPLLSource>
 800afcc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	4a7c      	ldr	r2, [pc, #496]	; (800b1c4 <HAL_RCC_ClockConfig+0x268>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d93f      	bls.n	800b056 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800afd6:	4b7a      	ldr	r3, [pc, #488]	; (800b1c0 <HAL_RCC_ClockConfig+0x264>)
 800afd8:	689b      	ldr	r3, [r3, #8]
 800afda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d009      	beq.n	800aff6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800afea:	2b00      	cmp	r3, #0
 800afec:	d033      	beq.n	800b056 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d12f      	bne.n	800b056 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800aff6:	4b72      	ldr	r3, [pc, #456]	; (800b1c0 <HAL_RCC_ClockConfig+0x264>)
 800aff8:	689b      	ldr	r3, [r3, #8]
 800affa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800affe:	4a70      	ldr	r2, [pc, #448]	; (800b1c0 <HAL_RCC_ClockConfig+0x264>)
 800b000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b004:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800b006:	2380      	movs	r3, #128	; 0x80
 800b008:	617b      	str	r3, [r7, #20]
 800b00a:	e024      	b.n	800b056 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	685b      	ldr	r3, [r3, #4]
 800b010:	2b02      	cmp	r3, #2
 800b012:	d107      	bne.n	800b024 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b014:	4b6a      	ldr	r3, [pc, #424]	; (800b1c0 <HAL_RCC_ClockConfig+0x264>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d109      	bne.n	800b034 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b020:	2301      	movs	r3, #1
 800b022:	e0c6      	b.n	800b1b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b024:	4b66      	ldr	r3, [pc, #408]	; (800b1c0 <HAL_RCC_ClockConfig+0x264>)
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d101      	bne.n	800b034 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b030:	2301      	movs	r3, #1
 800b032:	e0be      	b.n	800b1b2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800b034:	f000 f8ce 	bl	800b1d4 <HAL_RCC_GetSysClockFreq>
 800b038:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800b03a:	693b      	ldr	r3, [r7, #16]
 800b03c:	4a61      	ldr	r2, [pc, #388]	; (800b1c4 <HAL_RCC_ClockConfig+0x268>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d909      	bls.n	800b056 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b042:	4b5f      	ldr	r3, [pc, #380]	; (800b1c0 <HAL_RCC_ClockConfig+0x264>)
 800b044:	689b      	ldr	r3, [r3, #8]
 800b046:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b04a:	4a5d      	ldr	r2, [pc, #372]	; (800b1c0 <HAL_RCC_ClockConfig+0x264>)
 800b04c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b050:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800b052:	2380      	movs	r3, #128	; 0x80
 800b054:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b056:	4b5a      	ldr	r3, [pc, #360]	; (800b1c0 <HAL_RCC_ClockConfig+0x264>)
 800b058:	689b      	ldr	r3, [r3, #8]
 800b05a:	f023 0203 	bic.w	r2, r3, #3
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	685b      	ldr	r3, [r3, #4]
 800b062:	4957      	ldr	r1, [pc, #348]	; (800b1c0 <HAL_RCC_ClockConfig+0x264>)
 800b064:	4313      	orrs	r3, r2
 800b066:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b068:	f7fc feba 	bl	8007de0 <HAL_GetTick>
 800b06c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b06e:	e00a      	b.n	800b086 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b070:	f7fc feb6 	bl	8007de0 <HAL_GetTick>
 800b074:	4602      	mov	r2, r0
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	1ad3      	subs	r3, r2, r3
 800b07a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b07e:	4293      	cmp	r3, r2
 800b080:	d901      	bls.n	800b086 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800b082:	2303      	movs	r3, #3
 800b084:	e095      	b.n	800b1b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b086:	4b4e      	ldr	r3, [pc, #312]	; (800b1c0 <HAL_RCC_ClockConfig+0x264>)
 800b088:	689b      	ldr	r3, [r3, #8]
 800b08a:	f003 020c 	and.w	r2, r3, #12
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	685b      	ldr	r3, [r3, #4]
 800b092:	009b      	lsls	r3, r3, #2
 800b094:	429a      	cmp	r2, r3
 800b096:	d1eb      	bne.n	800b070 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f003 0302 	and.w	r3, r3, #2
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d023      	beq.n	800b0ec <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f003 0304 	and.w	r3, r3, #4
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d005      	beq.n	800b0bc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b0b0:	4b43      	ldr	r3, [pc, #268]	; (800b1c0 <HAL_RCC_ClockConfig+0x264>)
 800b0b2:	689b      	ldr	r3, [r3, #8]
 800b0b4:	4a42      	ldr	r2, [pc, #264]	; (800b1c0 <HAL_RCC_ClockConfig+0x264>)
 800b0b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b0ba:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f003 0308 	and.w	r3, r3, #8
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d007      	beq.n	800b0d8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800b0c8:	4b3d      	ldr	r3, [pc, #244]	; (800b1c0 <HAL_RCC_ClockConfig+0x264>)
 800b0ca:	689b      	ldr	r3, [r3, #8]
 800b0cc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b0d0:	4a3b      	ldr	r2, [pc, #236]	; (800b1c0 <HAL_RCC_ClockConfig+0x264>)
 800b0d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b0d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b0d8:	4b39      	ldr	r3, [pc, #228]	; (800b1c0 <HAL_RCC_ClockConfig+0x264>)
 800b0da:	689b      	ldr	r3, [r3, #8]
 800b0dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	689b      	ldr	r3, [r3, #8]
 800b0e4:	4936      	ldr	r1, [pc, #216]	; (800b1c0 <HAL_RCC_ClockConfig+0x264>)
 800b0e6:	4313      	orrs	r3, r2
 800b0e8:	608b      	str	r3, [r1, #8]
 800b0ea:	e008      	b.n	800b0fe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	2b80      	cmp	r3, #128	; 0x80
 800b0f0:	d105      	bne.n	800b0fe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800b0f2:	4b33      	ldr	r3, [pc, #204]	; (800b1c0 <HAL_RCC_ClockConfig+0x264>)
 800b0f4:	689b      	ldr	r3, [r3, #8]
 800b0f6:	4a32      	ldr	r2, [pc, #200]	; (800b1c0 <HAL_RCC_ClockConfig+0x264>)
 800b0f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b0fc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b0fe:	4b2f      	ldr	r3, [pc, #188]	; (800b1bc <HAL_RCC_ClockConfig+0x260>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f003 030f 	and.w	r3, r3, #15
 800b106:	683a      	ldr	r2, [r7, #0]
 800b108:	429a      	cmp	r2, r3
 800b10a:	d21d      	bcs.n	800b148 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b10c:	4b2b      	ldr	r3, [pc, #172]	; (800b1bc <HAL_RCC_ClockConfig+0x260>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f023 020f 	bic.w	r2, r3, #15
 800b114:	4929      	ldr	r1, [pc, #164]	; (800b1bc <HAL_RCC_ClockConfig+0x260>)
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	4313      	orrs	r3, r2
 800b11a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b11c:	f7fc fe60 	bl	8007de0 <HAL_GetTick>
 800b120:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b122:	e00a      	b.n	800b13a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b124:	f7fc fe5c 	bl	8007de0 <HAL_GetTick>
 800b128:	4602      	mov	r2, r0
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	1ad3      	subs	r3, r2, r3
 800b12e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b132:	4293      	cmp	r3, r2
 800b134:	d901      	bls.n	800b13a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800b136:	2303      	movs	r3, #3
 800b138:	e03b      	b.n	800b1b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b13a:	4b20      	ldr	r3, [pc, #128]	; (800b1bc <HAL_RCC_ClockConfig+0x260>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f003 030f 	and.w	r3, r3, #15
 800b142:	683a      	ldr	r2, [r7, #0]
 800b144:	429a      	cmp	r2, r3
 800b146:	d1ed      	bne.n	800b124 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f003 0304 	and.w	r3, r3, #4
 800b150:	2b00      	cmp	r3, #0
 800b152:	d008      	beq.n	800b166 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b154:	4b1a      	ldr	r3, [pc, #104]	; (800b1c0 <HAL_RCC_ClockConfig+0x264>)
 800b156:	689b      	ldr	r3, [r3, #8]
 800b158:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	68db      	ldr	r3, [r3, #12]
 800b160:	4917      	ldr	r1, [pc, #92]	; (800b1c0 <HAL_RCC_ClockConfig+0x264>)
 800b162:	4313      	orrs	r3, r2
 800b164:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f003 0308 	and.w	r3, r3, #8
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d009      	beq.n	800b186 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b172:	4b13      	ldr	r3, [pc, #76]	; (800b1c0 <HAL_RCC_ClockConfig+0x264>)
 800b174:	689b      	ldr	r3, [r3, #8]
 800b176:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	691b      	ldr	r3, [r3, #16]
 800b17e:	00db      	lsls	r3, r3, #3
 800b180:	490f      	ldr	r1, [pc, #60]	; (800b1c0 <HAL_RCC_ClockConfig+0x264>)
 800b182:	4313      	orrs	r3, r2
 800b184:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b186:	f000 f825 	bl	800b1d4 <HAL_RCC_GetSysClockFreq>
 800b18a:	4601      	mov	r1, r0
 800b18c:	4b0c      	ldr	r3, [pc, #48]	; (800b1c0 <HAL_RCC_ClockConfig+0x264>)
 800b18e:	689b      	ldr	r3, [r3, #8]
 800b190:	091b      	lsrs	r3, r3, #4
 800b192:	f003 030f 	and.w	r3, r3, #15
 800b196:	4a0c      	ldr	r2, [pc, #48]	; (800b1c8 <HAL_RCC_ClockConfig+0x26c>)
 800b198:	5cd3      	ldrb	r3, [r2, r3]
 800b19a:	f003 031f 	and.w	r3, r3, #31
 800b19e:	fa21 f303 	lsr.w	r3, r1, r3
 800b1a2:	4a0a      	ldr	r2, [pc, #40]	; (800b1cc <HAL_RCC_ClockConfig+0x270>)
 800b1a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800b1a6:	4b0a      	ldr	r3, [pc, #40]	; (800b1d0 <HAL_RCC_ClockConfig+0x274>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f7fc fdcc 	bl	8007d48 <HAL_InitTick>
 800b1b0:	4603      	mov	r3, r0
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3718      	adds	r7, #24
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
 800b1ba:	bf00      	nop
 800b1bc:	40022000 	.word	0x40022000
 800b1c0:	40021000 	.word	0x40021000
 800b1c4:	04c4b400 	.word	0x04c4b400
 800b1c8:	08011a04 	.word	0x08011a04
 800b1cc:	20000cac 	.word	0x20000cac
 800b1d0:	20000cb0 	.word	0x20000cb0

0800b1d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b087      	sub	sp, #28
 800b1d8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800b1da:	4b2c      	ldr	r3, [pc, #176]	; (800b28c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b1dc:	689b      	ldr	r3, [r3, #8]
 800b1de:	f003 030c 	and.w	r3, r3, #12
 800b1e2:	2b04      	cmp	r3, #4
 800b1e4:	d102      	bne.n	800b1ec <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b1e6:	4b2a      	ldr	r3, [pc, #168]	; (800b290 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b1e8:	613b      	str	r3, [r7, #16]
 800b1ea:	e047      	b.n	800b27c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800b1ec:	4b27      	ldr	r3, [pc, #156]	; (800b28c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b1ee:	689b      	ldr	r3, [r3, #8]
 800b1f0:	f003 030c 	and.w	r3, r3, #12
 800b1f4:	2b08      	cmp	r3, #8
 800b1f6:	d102      	bne.n	800b1fe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b1f8:	4b26      	ldr	r3, [pc, #152]	; (800b294 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b1fa:	613b      	str	r3, [r7, #16]
 800b1fc:	e03e      	b.n	800b27c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800b1fe:	4b23      	ldr	r3, [pc, #140]	; (800b28c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b200:	689b      	ldr	r3, [r3, #8]
 800b202:	f003 030c 	and.w	r3, r3, #12
 800b206:	2b0c      	cmp	r3, #12
 800b208:	d136      	bne.n	800b278 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b20a:	4b20      	ldr	r3, [pc, #128]	; (800b28c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b20c:	68db      	ldr	r3, [r3, #12]
 800b20e:	f003 0303 	and.w	r3, r3, #3
 800b212:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b214:	4b1d      	ldr	r3, [pc, #116]	; (800b28c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b216:	68db      	ldr	r3, [r3, #12]
 800b218:	091b      	lsrs	r3, r3, #4
 800b21a:	f003 030f 	and.w	r3, r3, #15
 800b21e:	3301      	adds	r3, #1
 800b220:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	2b03      	cmp	r3, #3
 800b226:	d10c      	bne.n	800b242 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b228:	4a1a      	ldr	r2, [pc, #104]	; (800b294 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b230:	4a16      	ldr	r2, [pc, #88]	; (800b28c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b232:	68d2      	ldr	r2, [r2, #12]
 800b234:	0a12      	lsrs	r2, r2, #8
 800b236:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b23a:	fb02 f303 	mul.w	r3, r2, r3
 800b23e:	617b      	str	r3, [r7, #20]
      break;
 800b240:	e00c      	b.n	800b25c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b242:	4a13      	ldr	r2, [pc, #76]	; (800b290 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	fbb2 f3f3 	udiv	r3, r2, r3
 800b24a:	4a10      	ldr	r2, [pc, #64]	; (800b28c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b24c:	68d2      	ldr	r2, [r2, #12]
 800b24e:	0a12      	lsrs	r2, r2, #8
 800b250:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b254:	fb02 f303 	mul.w	r3, r2, r3
 800b258:	617b      	str	r3, [r7, #20]
      break;
 800b25a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b25c:	4b0b      	ldr	r3, [pc, #44]	; (800b28c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b25e:	68db      	ldr	r3, [r3, #12]
 800b260:	0e5b      	lsrs	r3, r3, #25
 800b262:	f003 0303 	and.w	r3, r3, #3
 800b266:	3301      	adds	r3, #1
 800b268:	005b      	lsls	r3, r3, #1
 800b26a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800b26c:	697a      	ldr	r2, [r7, #20]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	fbb2 f3f3 	udiv	r3, r2, r3
 800b274:	613b      	str	r3, [r7, #16]
 800b276:	e001      	b.n	800b27c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800b278:	2300      	movs	r3, #0
 800b27a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800b27c:	693b      	ldr	r3, [r7, #16]
}
 800b27e:	4618      	mov	r0, r3
 800b280:	371c      	adds	r7, #28
 800b282:	46bd      	mov	sp, r7
 800b284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b288:	4770      	bx	lr
 800b28a:	bf00      	nop
 800b28c:	40021000 	.word	0x40021000
 800b290:	00f42400 	.word	0x00f42400
 800b294:	007a1200 	.word	0x007a1200

0800b298 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b298:	b480      	push	{r7}
 800b29a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b29c:	4b03      	ldr	r3, [pc, #12]	; (800b2ac <HAL_RCC_GetHCLKFreq+0x14>)
 800b29e:	681b      	ldr	r3, [r3, #0]
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a8:	4770      	bx	lr
 800b2aa:	bf00      	nop
 800b2ac:	20000cac 	.word	0x20000cac

0800b2b0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b087      	sub	sp, #28
 800b2b4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b2b6:	4b1e      	ldr	r3, [pc, #120]	; (800b330 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b2b8:	68db      	ldr	r3, [r3, #12]
 800b2ba:	f003 0303 	and.w	r3, r3, #3
 800b2be:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b2c0:	4b1b      	ldr	r3, [pc, #108]	; (800b330 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b2c2:	68db      	ldr	r3, [r3, #12]
 800b2c4:	091b      	lsrs	r3, r3, #4
 800b2c6:	f003 030f 	and.w	r3, r3, #15
 800b2ca:	3301      	adds	r3, #1
 800b2cc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	2b03      	cmp	r3, #3
 800b2d2:	d10c      	bne.n	800b2ee <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b2d4:	4a17      	ldr	r2, [pc, #92]	; (800b334 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2dc:	4a14      	ldr	r2, [pc, #80]	; (800b330 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b2de:	68d2      	ldr	r2, [r2, #12]
 800b2e0:	0a12      	lsrs	r2, r2, #8
 800b2e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b2e6:	fb02 f303 	mul.w	r3, r2, r3
 800b2ea:	617b      	str	r3, [r7, #20]
    break;
 800b2ec:	e00c      	b.n	800b308 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b2ee:	4a12      	ldr	r2, [pc, #72]	; (800b338 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2f6:	4a0e      	ldr	r2, [pc, #56]	; (800b330 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b2f8:	68d2      	ldr	r2, [r2, #12]
 800b2fa:	0a12      	lsrs	r2, r2, #8
 800b2fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b300:	fb02 f303 	mul.w	r3, r2, r3
 800b304:	617b      	str	r3, [r7, #20]
    break;
 800b306:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b308:	4b09      	ldr	r3, [pc, #36]	; (800b330 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b30a:	68db      	ldr	r3, [r3, #12]
 800b30c:	0e5b      	lsrs	r3, r3, #25
 800b30e:	f003 0303 	and.w	r3, r3, #3
 800b312:	3301      	adds	r3, #1
 800b314:	005b      	lsls	r3, r3, #1
 800b316:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800b318:	697a      	ldr	r2, [r7, #20]
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b320:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800b322:	687b      	ldr	r3, [r7, #4]
}
 800b324:	4618      	mov	r0, r3
 800b326:	371c      	adds	r7, #28
 800b328:	46bd      	mov	sp, r7
 800b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32e:	4770      	bx	lr
 800b330:	40021000 	.word	0x40021000
 800b334:	007a1200 	.word	0x007a1200
 800b338:	00f42400 	.word	0x00f42400

0800b33c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b086      	sub	sp, #24
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b344:	2300      	movs	r3, #0
 800b346:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b348:	2300      	movs	r3, #0
 800b34a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b354:	2b00      	cmp	r3, #0
 800b356:	f000 8098 	beq.w	800b48a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b35a:	2300      	movs	r3, #0
 800b35c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b35e:	4b43      	ldr	r3, [pc, #268]	; (800b46c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b366:	2b00      	cmp	r3, #0
 800b368:	d10d      	bne.n	800b386 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b36a:	4b40      	ldr	r3, [pc, #256]	; (800b46c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b36c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b36e:	4a3f      	ldr	r2, [pc, #252]	; (800b46c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b374:	6593      	str	r3, [r2, #88]	; 0x58
 800b376:	4b3d      	ldr	r3, [pc, #244]	; (800b46c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b37a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b37e:	60bb      	str	r3, [r7, #8]
 800b380:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b382:	2301      	movs	r3, #1
 800b384:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b386:	4b3a      	ldr	r3, [pc, #232]	; (800b470 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	4a39      	ldr	r2, [pc, #228]	; (800b470 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b38c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b390:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b392:	f7fc fd25 	bl	8007de0 <HAL_GetTick>
 800b396:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b398:	e009      	b.n	800b3ae <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b39a:	f7fc fd21 	bl	8007de0 <HAL_GetTick>
 800b39e:	4602      	mov	r2, r0
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	1ad3      	subs	r3, r2, r3
 800b3a4:	2b02      	cmp	r3, #2
 800b3a6:	d902      	bls.n	800b3ae <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800b3a8:	2303      	movs	r3, #3
 800b3aa:	74fb      	strb	r3, [r7, #19]
        break;
 800b3ac:	e005      	b.n	800b3ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b3ae:	4b30      	ldr	r3, [pc, #192]	; (800b470 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d0ef      	beq.n	800b39a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800b3ba:	7cfb      	ldrb	r3, [r7, #19]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d159      	bne.n	800b474 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b3c0:	4b2a      	ldr	r3, [pc, #168]	; (800b46c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b3c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b3ca:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d01e      	beq.n	800b410 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3d6:	697a      	ldr	r2, [r7, #20]
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	d019      	beq.n	800b410 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b3dc:	4b23      	ldr	r3, [pc, #140]	; (800b46c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b3de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b3e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b3e8:	4b20      	ldr	r3, [pc, #128]	; (800b46c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b3ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3ee:	4a1f      	ldr	r2, [pc, #124]	; (800b46c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b3f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b3f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b3f8:	4b1c      	ldr	r3, [pc, #112]	; (800b46c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b3fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3fe:	4a1b      	ldr	r2, [pc, #108]	; (800b46c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b404:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b408:	4a18      	ldr	r2, [pc, #96]	; (800b46c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	f003 0301 	and.w	r3, r3, #1
 800b416:	2b00      	cmp	r3, #0
 800b418:	d016      	beq.n	800b448 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b41a:	f7fc fce1 	bl	8007de0 <HAL_GetTick>
 800b41e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b420:	e00b      	b.n	800b43a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b422:	f7fc fcdd 	bl	8007de0 <HAL_GetTick>
 800b426:	4602      	mov	r2, r0
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	1ad3      	subs	r3, r2, r3
 800b42c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b430:	4293      	cmp	r3, r2
 800b432:	d902      	bls.n	800b43a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800b434:	2303      	movs	r3, #3
 800b436:	74fb      	strb	r3, [r7, #19]
            break;
 800b438:	e006      	b.n	800b448 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b43a:	4b0c      	ldr	r3, [pc, #48]	; (800b46c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b43c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b440:	f003 0302 	and.w	r3, r3, #2
 800b444:	2b00      	cmp	r3, #0
 800b446:	d0ec      	beq.n	800b422 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800b448:	7cfb      	ldrb	r3, [r7, #19]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d10b      	bne.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b44e:	4b07      	ldr	r3, [pc, #28]	; (800b46c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b454:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b45c:	4903      	ldr	r1, [pc, #12]	; (800b46c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b45e:	4313      	orrs	r3, r2
 800b460:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b464:	e008      	b.n	800b478 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b466:	7cfb      	ldrb	r3, [r7, #19]
 800b468:	74bb      	strb	r3, [r7, #18]
 800b46a:	e005      	b.n	800b478 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800b46c:	40021000 	.word	0x40021000
 800b470:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b474:	7cfb      	ldrb	r3, [r7, #19]
 800b476:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b478:	7c7b      	ldrb	r3, [r7, #17]
 800b47a:	2b01      	cmp	r3, #1
 800b47c:	d105      	bne.n	800b48a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b47e:	4baf      	ldr	r3, [pc, #700]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b482:	4aae      	ldr	r2, [pc, #696]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b484:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b488:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f003 0301 	and.w	r3, r3, #1
 800b492:	2b00      	cmp	r3, #0
 800b494:	d00a      	beq.n	800b4ac <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b496:	4ba9      	ldr	r3, [pc, #676]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b49c:	f023 0203 	bic.w	r2, r3, #3
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	685b      	ldr	r3, [r3, #4]
 800b4a4:	49a5      	ldr	r1, [pc, #660]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b4a6:	4313      	orrs	r3, r2
 800b4a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f003 0302 	and.w	r3, r3, #2
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d00a      	beq.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b4b8:	4ba0      	ldr	r3, [pc, #640]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b4ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4be:	f023 020c 	bic.w	r2, r3, #12
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	689b      	ldr	r3, [r3, #8]
 800b4c6:	499d      	ldr	r1, [pc, #628]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b4c8:	4313      	orrs	r3, r2
 800b4ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f003 0304 	and.w	r3, r3, #4
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d00a      	beq.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b4da:	4b98      	ldr	r3, [pc, #608]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b4dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	68db      	ldr	r3, [r3, #12]
 800b4e8:	4994      	ldr	r1, [pc, #592]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f003 0308 	and.w	r3, r3, #8
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d00a      	beq.n	800b512 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b4fc:	4b8f      	ldr	r3, [pc, #572]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b4fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b502:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	691b      	ldr	r3, [r3, #16]
 800b50a:	498c      	ldr	r1, [pc, #560]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b50c:	4313      	orrs	r3, r2
 800b50e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f003 0310 	and.w	r3, r3, #16
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d00a      	beq.n	800b534 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b51e:	4b87      	ldr	r3, [pc, #540]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b524:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	695b      	ldr	r3, [r3, #20]
 800b52c:	4983      	ldr	r1, [pc, #524]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b52e:	4313      	orrs	r3, r2
 800b530:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f003 0320 	and.w	r3, r3, #32
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d00a      	beq.n	800b556 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b540:	4b7e      	ldr	r3, [pc, #504]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b546:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	699b      	ldr	r3, [r3, #24]
 800b54e:	497b      	ldr	r1, [pc, #492]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b550:	4313      	orrs	r3, r2
 800b552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d00a      	beq.n	800b578 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b562:	4b76      	ldr	r3, [pc, #472]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b568:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	69db      	ldr	r3, [r3, #28]
 800b570:	4972      	ldr	r1, [pc, #456]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b572:	4313      	orrs	r3, r2
 800b574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b580:	2b00      	cmp	r3, #0
 800b582:	d00a      	beq.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b584:	4b6d      	ldr	r3, [pc, #436]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b58a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6a1b      	ldr	r3, [r3, #32]
 800b592:	496a      	ldr	r1, [pc, #424]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b594:	4313      	orrs	r3, r2
 800b596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d00a      	beq.n	800b5bc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b5a6:	4b65      	ldr	r3, [pc, #404]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b5a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b4:	4961      	ldr	r1, [pc, #388]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d00a      	beq.n	800b5de <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b5c8:	4b5c      	ldr	r3, [pc, #368]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b5ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b5ce:	f023 0203 	bic.w	r2, r3, #3
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5d6:	4959      	ldr	r1, [pc, #356]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b5d8:	4313      	orrs	r3, r2
 800b5da:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d00a      	beq.n	800b600 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b5ea:	4b54      	ldr	r3, [pc, #336]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b5ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5f8:	4950      	ldr	r1, [pc, #320]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b5fa:	4313      	orrs	r3, r2
 800b5fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d015      	beq.n	800b638 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b60c:	4b4b      	ldr	r3, [pc, #300]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b60e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b612:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b61a:	4948      	ldr	r1, [pc, #288]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b61c:	4313      	orrs	r3, r2
 800b61e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b626:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b62a:	d105      	bne.n	800b638 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b62c:	4b43      	ldr	r3, [pc, #268]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b62e:	68db      	ldr	r3, [r3, #12]
 800b630:	4a42      	ldr	r2, [pc, #264]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b632:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b636:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b640:	2b00      	cmp	r3, #0
 800b642:	d015      	beq.n	800b670 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b644:	4b3d      	ldr	r3, [pc, #244]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b64a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b652:	493a      	ldr	r1, [pc, #232]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b654:	4313      	orrs	r3, r2
 800b656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b65e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b662:	d105      	bne.n	800b670 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b664:	4b35      	ldr	r3, [pc, #212]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b666:	68db      	ldr	r3, [r3, #12]
 800b668:	4a34      	ldr	r2, [pc, #208]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b66a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b66e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d015      	beq.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b67c:	4b2f      	ldr	r3, [pc, #188]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b67e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b682:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b68a:	492c      	ldr	r1, [pc, #176]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b68c:	4313      	orrs	r3, r2
 800b68e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b696:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b69a:	d105      	bne.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b69c:	4b27      	ldr	r3, [pc, #156]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b69e:	68db      	ldr	r3, [r3, #12]
 800b6a0:	4a26      	ldr	r2, [pc, #152]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b6a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b6a6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d015      	beq.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b6b4:	4b21      	ldr	r3, [pc, #132]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b6b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6c2:	491e      	ldr	r1, [pc, #120]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b6c4:	4313      	orrs	r3, r2
 800b6c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b6d2:	d105      	bne.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b6d4:	4b19      	ldr	r3, [pc, #100]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b6d6:	68db      	ldr	r3, [r3, #12]
 800b6d8:	4a18      	ldr	r2, [pc, #96]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b6da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b6de:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d015      	beq.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b6ec:	4b13      	ldr	r3, [pc, #76]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b6ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6fa:	4910      	ldr	r1, [pc, #64]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b6fc:	4313      	orrs	r3, r2
 800b6fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b706:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b70a:	d105      	bne.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b70c:	4b0b      	ldr	r3, [pc, #44]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b70e:	68db      	ldr	r3, [r3, #12]
 800b710:	4a0a      	ldr	r2, [pc, #40]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b712:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b716:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b720:	2b00      	cmp	r3, #0
 800b722:	d018      	beq.n	800b756 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800b724:	4b05      	ldr	r3, [pc, #20]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b72a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b732:	4902      	ldr	r1, [pc, #8]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b734:	4313      	orrs	r3, r2
 800b736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800b73a:	e001      	b.n	800b740 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800b73c:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b744:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b748:	d105      	bne.n	800b756 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b74a:	4b21      	ldr	r3, [pc, #132]	; (800b7d0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b74c:	68db      	ldr	r3, [r3, #12]
 800b74e:	4a20      	ldr	r2, [pc, #128]	; (800b7d0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b754:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d015      	beq.n	800b78e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800b762:	4b1b      	ldr	r3, [pc, #108]	; (800b7d0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b768:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b770:	4917      	ldr	r1, [pc, #92]	; (800b7d0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b772:	4313      	orrs	r3, r2
 800b774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b77c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b780:	d105      	bne.n	800b78e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b782:	4b13      	ldr	r3, [pc, #76]	; (800b7d0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b784:	68db      	ldr	r3, [r3, #12]
 800b786:	4a12      	ldr	r2, [pc, #72]	; (800b7d0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b78c:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b796:	2b00      	cmp	r3, #0
 800b798:	d015      	beq.n	800b7c6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b79a:	4b0d      	ldr	r3, [pc, #52]	; (800b7d0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b79c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b7a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7a8:	4909      	ldr	r1, [pc, #36]	; (800b7d0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b7b8:	d105      	bne.n	800b7c6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b7ba:	4b05      	ldr	r3, [pc, #20]	; (800b7d0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b7bc:	68db      	ldr	r3, [r3, #12]
 800b7be:	4a04      	ldr	r2, [pc, #16]	; (800b7d0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b7c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b7c4:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800b7c6:	7cbb      	ldrb	r3, [r7, #18]
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3718      	adds	r7, #24
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}
 800b7d0:	40021000 	.word	0x40021000

0800b7d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b084      	sub	sp, #16
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d101      	bne.n	800b7e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	e084      	b.n	800b8f0 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b7f2:	b2db      	uxtb	r3, r3
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d106      	bne.n	800b806 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f7fb fd1d 	bl	8007240 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2202      	movs	r2, #2
 800b80a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	681a      	ldr	r2, [r3, #0]
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b81c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	68db      	ldr	r3, [r3, #12]
 800b822:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b826:	d902      	bls.n	800b82e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b828:	2300      	movs	r3, #0
 800b82a:	60fb      	str	r3, [r7, #12]
 800b82c:	e002      	b.n	800b834 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b82e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b832:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	68db      	ldr	r3, [r3, #12]
 800b838:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b83c:	d007      	beq.n	800b84e <HAL_SPI_Init+0x7a>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	68db      	ldr	r3, [r3, #12]
 800b842:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b846:	d002      	beq.n	800b84e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2200      	movs	r2, #0
 800b84c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b852:	2b00      	cmp	r3, #0
 800b854:	d10b      	bne.n	800b86e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	68db      	ldr	r3, [r3, #12]
 800b85a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b85e:	d903      	bls.n	800b868 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2202      	movs	r2, #2
 800b864:	631a      	str	r2, [r3, #48]	; 0x30
 800b866:	e002      	b.n	800b86e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2201      	movs	r2, #1
 800b86c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	685a      	ldr	r2, [r3, #4]
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	689b      	ldr	r3, [r3, #8]
 800b876:	431a      	orrs	r2, r3
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	691b      	ldr	r3, [r3, #16]
 800b87c:	431a      	orrs	r2, r3
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	695b      	ldr	r3, [r3, #20]
 800b882:	431a      	orrs	r2, r3
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	699b      	ldr	r3, [r3, #24]
 800b888:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b88c:	431a      	orrs	r2, r3
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	69db      	ldr	r3, [r3, #28]
 800b892:	431a      	orrs	r2, r3
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6a1b      	ldr	r3, [r3, #32]
 800b898:	ea42 0103 	orr.w	r1, r2, r3
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	430a      	orrs	r2, r1
 800b8a6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	699b      	ldr	r3, [r3, #24]
 800b8ac:	0c1b      	lsrs	r3, r3, #16
 800b8ae:	f003 0204 	and.w	r2, r3, #4
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8b6:	431a      	orrs	r2, r3
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8bc:	431a      	orrs	r2, r3
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	68db      	ldr	r3, [r3, #12]
 800b8c2:	ea42 0103 	orr.w	r1, r2, r3
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	68fa      	ldr	r2, [r7, #12]
 800b8cc:	430a      	orrs	r2, r1
 800b8ce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	69da      	ldr	r2, [r3, #28]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b8de:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2201      	movs	r2, #1
 800b8ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800b8ee:	2300      	movs	r3, #0
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	3710      	adds	r7, #16
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}

0800b8f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b082      	sub	sp, #8
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d101      	bne.n	800b90a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b906:	2301      	movs	r3, #1
 800b908:	e049      	b.n	800b99e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b910:	b2db      	uxtb	r3, r3
 800b912:	2b00      	cmp	r3, #0
 800b914:	d106      	bne.n	800b924 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2200      	movs	r2, #0
 800b91a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f7fc f91c 	bl	8007b5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2202      	movs	r2, #2
 800b928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681a      	ldr	r2, [r3, #0]
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	3304      	adds	r3, #4
 800b934:	4619      	mov	r1, r3
 800b936:	4610      	mov	r0, r2
 800b938:	f000 fc7a 	bl	800c230 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2201      	movs	r2, #1
 800b940:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2201      	movs	r2, #1
 800b948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2201      	movs	r2, #1
 800b950:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2201      	movs	r2, #1
 800b958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2201      	movs	r2, #1
 800b960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2201      	movs	r2, #1
 800b968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2201      	movs	r2, #1
 800b970:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2201      	movs	r2, #1
 800b978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2201      	movs	r2, #1
 800b980:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2201      	movs	r2, #1
 800b988:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2201      	movs	r2, #1
 800b990:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2201      	movs	r2, #1
 800b998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b99c:	2300      	movs	r3, #0
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3708      	adds	r7, #8
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}
	...

0800b9a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b9a8:	b480      	push	{r7}
 800b9aa:	b085      	sub	sp, #20
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9b6:	b2db      	uxtb	r3, r3
 800b9b8:	2b01      	cmp	r3, #1
 800b9ba:	d001      	beq.n	800b9c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b9bc:	2301      	movs	r3, #1
 800b9be:	e019      	b.n	800b9f4 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2202      	movs	r2, #2
 800b9c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	689a      	ldr	r2, [r3, #8]
 800b9ce:	4b0c      	ldr	r3, [pc, #48]	; (800ba00 <HAL_TIM_Base_Start+0x58>)
 800b9d0:	4013      	ands	r3, r2
 800b9d2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	2b06      	cmp	r3, #6
 800b9d8:	d00b      	beq.n	800b9f2 <HAL_TIM_Base_Start+0x4a>
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9e0:	d007      	beq.n	800b9f2 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	681a      	ldr	r2, [r3, #0]
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f042 0201 	orr.w	r2, r2, #1
 800b9f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b9f2:	2300      	movs	r3, #0
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3714      	adds	r7, #20
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fe:	4770      	bx	lr
 800ba00:	00010007 	.word	0x00010007

0800ba04 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800ba04:	b480      	push	{r7}
 800ba06:	b083      	sub	sp, #12
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	6a1a      	ldr	r2, [r3, #32]
 800ba12:	f241 1311 	movw	r3, #4369	; 0x1111
 800ba16:	4013      	ands	r3, r2
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d10f      	bne.n	800ba3c <HAL_TIM_Base_Stop+0x38>
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	6a1a      	ldr	r2, [r3, #32]
 800ba22:	f244 4344 	movw	r3, #17476	; 0x4444
 800ba26:	4013      	ands	r3, r2
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d107      	bne.n	800ba3c <HAL_TIM_Base_Stop+0x38>
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	681a      	ldr	r2, [r3, #0]
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	f022 0201 	bic.w	r2, r2, #1
 800ba3a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2201      	movs	r2, #1
 800ba40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800ba44:	2300      	movs	r3, #0
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	370c      	adds	r7, #12
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba50:	4770      	bx	lr
	...

0800ba54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ba54:	b480      	push	{r7}
 800ba56:	b085      	sub	sp, #20
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba62:	b2db      	uxtb	r3, r3
 800ba64:	2b01      	cmp	r3, #1
 800ba66:	d001      	beq.n	800ba6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ba68:	2301      	movs	r3, #1
 800ba6a:	e021      	b.n	800bab0 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2202      	movs	r2, #2
 800ba70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	68da      	ldr	r2, [r3, #12]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f042 0201 	orr.w	r2, r2, #1
 800ba82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	689a      	ldr	r2, [r3, #8]
 800ba8a:	4b0c      	ldr	r3, [pc, #48]	; (800babc <HAL_TIM_Base_Start_IT+0x68>)
 800ba8c:	4013      	ands	r3, r2
 800ba8e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	2b06      	cmp	r3, #6
 800ba94:	d00b      	beq.n	800baae <HAL_TIM_Base_Start_IT+0x5a>
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba9c:	d007      	beq.n	800baae <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	681a      	ldr	r2, [r3, #0]
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f042 0201 	orr.w	r2, r2, #1
 800baac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800baae:	2300      	movs	r3, #0
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	3714      	adds	r7, #20
 800bab4:	46bd      	mov	sp, r7
 800bab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baba:	4770      	bx	lr
 800babc:	00010007 	.word	0x00010007

0800bac0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800bac0:	b480      	push	{r7}
 800bac2:	b083      	sub	sp, #12
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	68da      	ldr	r2, [r3, #12]
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f022 0201 	bic.w	r2, r2, #1
 800bad6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	6a1a      	ldr	r2, [r3, #32]
 800bade:	f241 1311 	movw	r3, #4369	; 0x1111
 800bae2:	4013      	ands	r3, r2
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d10f      	bne.n	800bb08 <HAL_TIM_Base_Stop_IT+0x48>
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	6a1a      	ldr	r2, [r3, #32]
 800baee:	f244 4344 	movw	r3, #17476	; 0x4444
 800baf2:	4013      	ands	r3, r2
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d107      	bne.n	800bb08 <HAL_TIM_Base_Stop_IT+0x48>
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	681a      	ldr	r2, [r3, #0]
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	f022 0201 	bic.w	r2, r2, #1
 800bb06:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2201      	movs	r2, #1
 800bb0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800bb10:	2300      	movs	r3, #0
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	370c      	adds	r7, #12
 800bb16:	46bd      	mov	sp, r7
 800bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1c:	4770      	bx	lr

0800bb1e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800bb1e:	b580      	push	{r7, lr}
 800bb20:	b086      	sub	sp, #24
 800bb22:	af00      	add	r7, sp, #0
 800bb24:	6078      	str	r0, [r7, #4]
 800bb26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d101      	bne.n	800bb32 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800bb2e:	2301      	movs	r3, #1
 800bb30:	e097      	b.n	800bc62 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb38:	b2db      	uxtb	r3, r3
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d106      	bne.n	800bb4c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2200      	movs	r2, #0
 800bb42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	f7fb ffbc 	bl	8007ac4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2202      	movs	r2, #2
 800bb50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	689b      	ldr	r3, [r3, #8]
 800bb5a:	687a      	ldr	r2, [r7, #4]
 800bb5c:	6812      	ldr	r2, [r2, #0]
 800bb5e:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800bb62:	f023 0307 	bic.w	r3, r3, #7
 800bb66:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681a      	ldr	r2, [r3, #0]
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	3304      	adds	r3, #4
 800bb70:	4619      	mov	r1, r3
 800bb72:	4610      	mov	r0, r2
 800bb74:	f000 fb5c 	bl	800c230 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	689b      	ldr	r3, [r3, #8]
 800bb7e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	699b      	ldr	r3, [r3, #24]
 800bb86:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	6a1b      	ldr	r3, [r3, #32]
 800bb8e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	697a      	ldr	r2, [r7, #20]
 800bb96:	4313      	orrs	r3, r2
 800bb98:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800bb9a:	693b      	ldr	r3, [r7, #16]
 800bb9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bba0:	f023 0303 	bic.w	r3, r3, #3
 800bba4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	689a      	ldr	r2, [r3, #8]
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	699b      	ldr	r3, [r3, #24]
 800bbae:	021b      	lsls	r3, r3, #8
 800bbb0:	4313      	orrs	r3, r2
 800bbb2:	693a      	ldr	r2, [r7, #16]
 800bbb4:	4313      	orrs	r3, r2
 800bbb6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800bbbe:	f023 030c 	bic.w	r3, r3, #12
 800bbc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bbca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bbce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	68da      	ldr	r2, [r3, #12]
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	69db      	ldr	r3, [r3, #28]
 800bbd8:	021b      	lsls	r3, r3, #8
 800bbda:	4313      	orrs	r3, r2
 800bbdc:	693a      	ldr	r2, [r7, #16]
 800bbde:	4313      	orrs	r3, r2
 800bbe0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	691b      	ldr	r3, [r3, #16]
 800bbe6:	011a      	lsls	r2, r3, #4
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	6a1b      	ldr	r3, [r3, #32]
 800bbec:	031b      	lsls	r3, r3, #12
 800bbee:	4313      	orrs	r3, r2
 800bbf0:	693a      	ldr	r2, [r7, #16]
 800bbf2:	4313      	orrs	r3, r2
 800bbf4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800bbfc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800bc04:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	685a      	ldr	r2, [r3, #4]
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	695b      	ldr	r3, [r3, #20]
 800bc0e:	011b      	lsls	r3, r3, #4
 800bc10:	4313      	orrs	r3, r2
 800bc12:	68fa      	ldr	r2, [r7, #12]
 800bc14:	4313      	orrs	r3, r2
 800bc16:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	697a      	ldr	r2, [r7, #20]
 800bc1e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	693a      	ldr	r2, [r7, #16]
 800bc26:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	68fa      	ldr	r2, [r7, #12]
 800bc2e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2201      	movs	r2, #1
 800bc34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2201      	movs	r2, #1
 800bc3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2201      	movs	r2, #1
 800bc44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2201      	movs	r2, #1
 800bc4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2201      	movs	r2, #1
 800bc54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2201      	movs	r2, #1
 800bc5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bc60:	2300      	movs	r3, #0
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3718      	adds	r7, #24
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}

0800bc6a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bc6a:	b580      	push	{r7, lr}
 800bc6c:	b082      	sub	sp, #8
 800bc6e:	af00      	add	r7, sp, #0
 800bc70:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	691b      	ldr	r3, [r3, #16]
 800bc78:	f003 0302 	and.w	r3, r3, #2
 800bc7c:	2b02      	cmp	r3, #2
 800bc7e:	d122      	bne.n	800bcc6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	68db      	ldr	r3, [r3, #12]
 800bc86:	f003 0302 	and.w	r3, r3, #2
 800bc8a:	2b02      	cmp	r3, #2
 800bc8c:	d11b      	bne.n	800bcc6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	f06f 0202 	mvn.w	r2, #2
 800bc96:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2201      	movs	r2, #1
 800bc9c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	699b      	ldr	r3, [r3, #24]
 800bca4:	f003 0303 	and.w	r3, r3, #3
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d003      	beq.n	800bcb4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f000 faa1 	bl	800c1f4 <HAL_TIM_IC_CaptureCallback>
 800bcb2:	e005      	b.n	800bcc0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f000 fa93 	bl	800c1e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bcba:	6878      	ldr	r0, [r7, #4]
 800bcbc:	f000 faa4 	bl	800c208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	691b      	ldr	r3, [r3, #16]
 800bccc:	f003 0304 	and.w	r3, r3, #4
 800bcd0:	2b04      	cmp	r3, #4
 800bcd2:	d122      	bne.n	800bd1a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	68db      	ldr	r3, [r3, #12]
 800bcda:	f003 0304 	and.w	r3, r3, #4
 800bcde:	2b04      	cmp	r3, #4
 800bce0:	d11b      	bne.n	800bd1a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	f06f 0204 	mvn.w	r2, #4
 800bcea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2202      	movs	r2, #2
 800bcf0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	699b      	ldr	r3, [r3, #24]
 800bcf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d003      	beq.n	800bd08 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f000 fa77 	bl	800c1f4 <HAL_TIM_IC_CaptureCallback>
 800bd06:	e005      	b.n	800bd14 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	f000 fa69 	bl	800c1e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f000 fa7a 	bl	800c208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2200      	movs	r2, #0
 800bd18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	691b      	ldr	r3, [r3, #16]
 800bd20:	f003 0308 	and.w	r3, r3, #8
 800bd24:	2b08      	cmp	r3, #8
 800bd26:	d122      	bne.n	800bd6e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	68db      	ldr	r3, [r3, #12]
 800bd2e:	f003 0308 	and.w	r3, r3, #8
 800bd32:	2b08      	cmp	r3, #8
 800bd34:	d11b      	bne.n	800bd6e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	f06f 0208 	mvn.w	r2, #8
 800bd3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2204      	movs	r2, #4
 800bd44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	69db      	ldr	r3, [r3, #28]
 800bd4c:	f003 0303 	and.w	r3, r3, #3
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d003      	beq.n	800bd5c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f000 fa4d 	bl	800c1f4 <HAL_TIM_IC_CaptureCallback>
 800bd5a:	e005      	b.n	800bd68 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f000 fa3f 	bl	800c1e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f000 fa50 	bl	800c208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	691b      	ldr	r3, [r3, #16]
 800bd74:	f003 0310 	and.w	r3, r3, #16
 800bd78:	2b10      	cmp	r3, #16
 800bd7a:	d122      	bne.n	800bdc2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	68db      	ldr	r3, [r3, #12]
 800bd82:	f003 0310 	and.w	r3, r3, #16
 800bd86:	2b10      	cmp	r3, #16
 800bd88:	d11b      	bne.n	800bdc2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	f06f 0210 	mvn.w	r2, #16
 800bd92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2208      	movs	r2, #8
 800bd98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	69db      	ldr	r3, [r3, #28]
 800bda0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d003      	beq.n	800bdb0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f000 fa23 	bl	800c1f4 <HAL_TIM_IC_CaptureCallback>
 800bdae:	e005      	b.n	800bdbc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f000 fa15 	bl	800c1e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f000 fa26 	bl	800c208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	691b      	ldr	r3, [r3, #16]
 800bdc8:	f003 0301 	and.w	r3, r3, #1
 800bdcc:	2b01      	cmp	r3, #1
 800bdce:	d10e      	bne.n	800bdee <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	68db      	ldr	r3, [r3, #12]
 800bdd6:	f003 0301 	and.w	r3, r3, #1
 800bdda:	2b01      	cmp	r3, #1
 800bddc:	d107      	bne.n	800bdee <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	f06f 0201 	mvn.w	r2, #1
 800bde6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f000 f9ef 	bl	800c1cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	691b      	ldr	r3, [r3, #16]
 800bdf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bdf8:	2b80      	cmp	r3, #128	; 0x80
 800bdfa:	d10e      	bne.n	800be1a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	68db      	ldr	r3, [r3, #12]
 800be02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be06:	2b80      	cmp	r3, #128	; 0x80
 800be08:	d107      	bne.n	800be1a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800be12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f000 fd5d 	bl	800c8d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	691b      	ldr	r3, [r3, #16]
 800be20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be28:	d10e      	bne.n	800be48 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	68db      	ldr	r3, [r3, #12]
 800be30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be34:	2b80      	cmp	r3, #128	; 0x80
 800be36:	d107      	bne.n	800be48 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800be40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f000 fd50 	bl	800c8e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	691b      	ldr	r3, [r3, #16]
 800be4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be52:	2b40      	cmp	r3, #64	; 0x40
 800be54:	d10e      	bne.n	800be74 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	68db      	ldr	r3, [r3, #12]
 800be5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be60:	2b40      	cmp	r3, #64	; 0x40
 800be62:	d107      	bne.n	800be74 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800be6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f000 f9d4 	bl	800c21c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	691b      	ldr	r3, [r3, #16]
 800be7a:	f003 0320 	and.w	r3, r3, #32
 800be7e:	2b20      	cmp	r3, #32
 800be80:	d10e      	bne.n	800bea0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	68db      	ldr	r3, [r3, #12]
 800be88:	f003 0320 	and.w	r3, r3, #32
 800be8c:	2b20      	cmp	r3, #32
 800be8e:	d107      	bne.n	800bea0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	f06f 0220 	mvn.w	r2, #32
 800be98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	f000 fd10 	bl	800c8c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	691b      	ldr	r3, [r3, #16]
 800bea6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800beaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800beae:	d10f      	bne.n	800bed0 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	68db      	ldr	r3, [r3, #12]
 800beb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800beba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bebe:	d107      	bne.n	800bed0 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800bec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f000 fd16 	bl	800c8fc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	691b      	ldr	r3, [r3, #16]
 800bed6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800beda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bede:	d10f      	bne.n	800bf00 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	68db      	ldr	r3, [r3, #12]
 800bee6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800beea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800beee:	d107      	bne.n	800bf00 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800bef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f000 fd08 	bl	800c910 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	691b      	ldr	r3, [r3, #16]
 800bf06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bf0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bf0e:	d10f      	bne.n	800bf30 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	68db      	ldr	r3, [r3, #12]
 800bf16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bf1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bf1e:	d107      	bne.n	800bf30 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800bf28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f000 fcfa 	bl	800c924 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	691b      	ldr	r3, [r3, #16]
 800bf36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bf3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bf3e:	d10f      	bne.n	800bf60 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	68db      	ldr	r3, [r3, #12]
 800bf46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bf4a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bf4e:	d107      	bne.n	800bf60 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800bf58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f000 fcec 	bl	800c938 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bf60:	bf00      	nop
 800bf62:	3708      	adds	r7, #8
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}

0800bf68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b084      	sub	sp, #16
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
 800bf70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf78:	2b01      	cmp	r3, #1
 800bf7a:	d101      	bne.n	800bf80 <HAL_TIM_ConfigClockSource+0x18>
 800bf7c:	2302      	movs	r3, #2
 800bf7e:	e0d2      	b.n	800c126 <HAL_TIM_ConfigClockSource+0x1be>
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2201      	movs	r2, #1
 800bf84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2202      	movs	r2, #2
 800bf8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	689b      	ldr	r3, [r3, #8]
 800bf96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800bf9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bfa2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bfaa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	68fa      	ldr	r2, [r7, #12]
 800bfb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfbc:	f000 80a9 	beq.w	800c112 <HAL_TIM_ConfigClockSource+0x1aa>
 800bfc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfc4:	d81a      	bhi.n	800bffc <HAL_TIM_ConfigClockSource+0x94>
 800bfc6:	2b30      	cmp	r3, #48	; 0x30
 800bfc8:	f000 809a 	beq.w	800c100 <HAL_TIM_ConfigClockSource+0x198>
 800bfcc:	2b30      	cmp	r3, #48	; 0x30
 800bfce:	d809      	bhi.n	800bfe4 <HAL_TIM_ConfigClockSource+0x7c>
 800bfd0:	2b10      	cmp	r3, #16
 800bfd2:	f000 8095 	beq.w	800c100 <HAL_TIM_ConfigClockSource+0x198>
 800bfd6:	2b20      	cmp	r3, #32
 800bfd8:	f000 8092 	beq.w	800c100 <HAL_TIM_ConfigClockSource+0x198>
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	f000 808f 	beq.w	800c100 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800bfe2:	e097      	b.n	800c114 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800bfe4:	2b50      	cmp	r3, #80	; 0x50
 800bfe6:	d05b      	beq.n	800c0a0 <HAL_TIM_ConfigClockSource+0x138>
 800bfe8:	2b50      	cmp	r3, #80	; 0x50
 800bfea:	d802      	bhi.n	800bff2 <HAL_TIM_ConfigClockSource+0x8a>
 800bfec:	2b40      	cmp	r3, #64	; 0x40
 800bfee:	d077      	beq.n	800c0e0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800bff0:	e090      	b.n	800c114 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800bff2:	2b60      	cmp	r3, #96	; 0x60
 800bff4:	d064      	beq.n	800c0c0 <HAL_TIM_ConfigClockSource+0x158>
 800bff6:	2b70      	cmp	r3, #112	; 0x70
 800bff8:	d028      	beq.n	800c04c <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800bffa:	e08b      	b.n	800c114 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800bffc:	4a4c      	ldr	r2, [pc, #304]	; (800c130 <HAL_TIM_ConfigClockSource+0x1c8>)
 800bffe:	4293      	cmp	r3, r2
 800c000:	d07e      	beq.n	800c100 <HAL_TIM_ConfigClockSource+0x198>
 800c002:	4a4b      	ldr	r2, [pc, #300]	; (800c130 <HAL_TIM_ConfigClockSource+0x1c8>)
 800c004:	4293      	cmp	r3, r2
 800c006:	d810      	bhi.n	800c02a <HAL_TIM_ConfigClockSource+0xc2>
 800c008:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c00c:	d078      	beq.n	800c100 <HAL_TIM_ConfigClockSource+0x198>
 800c00e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c012:	d803      	bhi.n	800c01c <HAL_TIM_ConfigClockSource+0xb4>
 800c014:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c018:	d02f      	beq.n	800c07a <HAL_TIM_ConfigClockSource+0x112>
      break;
 800c01a:	e07b      	b.n	800c114 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c01c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c020:	d06e      	beq.n	800c100 <HAL_TIM_ConfigClockSource+0x198>
 800c022:	4a44      	ldr	r2, [pc, #272]	; (800c134 <HAL_TIM_ConfigClockSource+0x1cc>)
 800c024:	4293      	cmp	r3, r2
 800c026:	d06b      	beq.n	800c100 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800c028:	e074      	b.n	800c114 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c02a:	4a43      	ldr	r2, [pc, #268]	; (800c138 <HAL_TIM_ConfigClockSource+0x1d0>)
 800c02c:	4293      	cmp	r3, r2
 800c02e:	d067      	beq.n	800c100 <HAL_TIM_ConfigClockSource+0x198>
 800c030:	4a41      	ldr	r2, [pc, #260]	; (800c138 <HAL_TIM_ConfigClockSource+0x1d0>)
 800c032:	4293      	cmp	r3, r2
 800c034:	d803      	bhi.n	800c03e <HAL_TIM_ConfigClockSource+0xd6>
 800c036:	4a41      	ldr	r2, [pc, #260]	; (800c13c <HAL_TIM_ConfigClockSource+0x1d4>)
 800c038:	4293      	cmp	r3, r2
 800c03a:	d061      	beq.n	800c100 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800c03c:	e06a      	b.n	800c114 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c03e:	4a40      	ldr	r2, [pc, #256]	; (800c140 <HAL_TIM_ConfigClockSource+0x1d8>)
 800c040:	4293      	cmp	r3, r2
 800c042:	d05d      	beq.n	800c100 <HAL_TIM_ConfigClockSource+0x198>
 800c044:	4a3f      	ldr	r2, [pc, #252]	; (800c144 <HAL_TIM_ConfigClockSource+0x1dc>)
 800c046:	4293      	cmp	r3, r2
 800c048:	d05a      	beq.n	800c100 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800c04a:	e063      	b.n	800c114 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6818      	ldr	r0, [r3, #0]
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	6899      	ldr	r1, [r3, #8]
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	685a      	ldr	r2, [r3, #4]
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	68db      	ldr	r3, [r3, #12]
 800c05c:	f000 fac8 	bl	800c5f0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	689b      	ldr	r3, [r3, #8]
 800c066:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c06e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	68fa      	ldr	r2, [r7, #12]
 800c076:	609a      	str	r2, [r3, #8]
      break;
 800c078:	e04c      	b.n	800c114 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6818      	ldr	r0, [r3, #0]
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	6899      	ldr	r1, [r3, #8]
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	685a      	ldr	r2, [r3, #4]
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	68db      	ldr	r3, [r3, #12]
 800c08a:	f000 fab1 	bl	800c5f0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	689a      	ldr	r2, [r3, #8]
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c09c:	609a      	str	r2, [r3, #8]
      break;
 800c09e:	e039      	b.n	800c114 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	6818      	ldr	r0, [r3, #0]
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	6859      	ldr	r1, [r3, #4]
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	68db      	ldr	r3, [r3, #12]
 800c0ac:	461a      	mov	r2, r3
 800c0ae:	f000 fa23 	bl	800c4f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	2150      	movs	r1, #80	; 0x50
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	f000 fa7c 	bl	800c5b6 <TIM_ITRx_SetConfig>
      break;
 800c0be:	e029      	b.n	800c114 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	6818      	ldr	r0, [r3, #0]
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	6859      	ldr	r1, [r3, #4]
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	68db      	ldr	r3, [r3, #12]
 800c0cc:	461a      	mov	r2, r3
 800c0ce:	f000 fa42 	bl	800c556 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	2160      	movs	r1, #96	; 0x60
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f000 fa6c 	bl	800c5b6 <TIM_ITRx_SetConfig>
      break;
 800c0de:	e019      	b.n	800c114 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	6818      	ldr	r0, [r3, #0]
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	6859      	ldr	r1, [r3, #4]
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	68db      	ldr	r3, [r3, #12]
 800c0ec:	461a      	mov	r2, r3
 800c0ee:	f000 fa03 	bl	800c4f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	2140      	movs	r1, #64	; 0x40
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f000 fa5c 	bl	800c5b6 <TIM_ITRx_SetConfig>
      break;
 800c0fe:	e009      	b.n	800c114 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681a      	ldr	r2, [r3, #0]
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	4619      	mov	r1, r3
 800c10a:	4610      	mov	r0, r2
 800c10c:	f000 fa53 	bl	800c5b6 <TIM_ITRx_SetConfig>
      break;
 800c110:	e000      	b.n	800c114 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800c112:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2201      	movs	r2, #1
 800c118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2200      	movs	r2, #0
 800c120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c124:	2300      	movs	r3, #0
}
 800c126:	4618      	mov	r0, r3
 800c128:	3710      	adds	r7, #16
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}
 800c12e:	bf00      	nop
 800c130:	00100030 	.word	0x00100030
 800c134:	00100020 	.word	0x00100020
 800c138:	00100050 	.word	0x00100050
 800c13c:	00100040 	.word	0x00100040
 800c140:	00100060 	.word	0x00100060
 800c144:	00100070 	.word	0x00100070

0800c148 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b082      	sub	sp, #8
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
 800c150:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c158:	2b01      	cmp	r3, #1
 800c15a:	d101      	bne.n	800c160 <HAL_TIM_SlaveConfigSynchro+0x18>
 800c15c:	2302      	movs	r3, #2
 800c15e:	e031      	b.n	800c1c4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2201      	movs	r2, #1
 800c164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2202      	movs	r2, #2
 800c16c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800c170:	6839      	ldr	r1, [r7, #0]
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f000 f904 	bl	800c380 <TIM_SlaveTimer_SetConfig>
 800c178:	4603      	mov	r3, r0
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d009      	beq.n	800c192 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2201      	movs	r2, #1
 800c182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2200      	movs	r2, #0
 800c18a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800c18e:	2301      	movs	r3, #1
 800c190:	e018      	b.n	800c1c4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	68da      	ldr	r2, [r3, #12]
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c1a0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	68da      	ldr	r2, [r3, #12]
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c1b0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2201      	movs	r2, #1
 800c1b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2200      	movs	r2, #0
 800c1be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c1c2:	2300      	movs	r3, #0
}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	3708      	adds	r7, #8
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}

0800c1cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	b083      	sub	sp, #12
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800c1d4:	bf00      	nop
 800c1d6:	370c      	adds	r7, #12
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1de:	4770      	bx	lr

0800c1e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c1e0:	b480      	push	{r7}
 800c1e2:	b083      	sub	sp, #12
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c1e8:	bf00      	nop
 800c1ea:	370c      	adds	r7, #12
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f2:	4770      	bx	lr

0800c1f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c1f4:	b480      	push	{r7}
 800c1f6:	b083      	sub	sp, #12
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c1fc:	bf00      	nop
 800c1fe:	370c      	adds	r7, #12
 800c200:	46bd      	mov	sp, r7
 800c202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c206:	4770      	bx	lr

0800c208 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c208:	b480      	push	{r7}
 800c20a:	b083      	sub	sp, #12
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c210:	bf00      	nop
 800c212:	370c      	adds	r7, #12
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr

0800c21c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c21c:	b480      	push	{r7}
 800c21e:	b083      	sub	sp, #12
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c224:	bf00      	nop
 800c226:	370c      	adds	r7, #12
 800c228:	46bd      	mov	sp, r7
 800c22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22e:	4770      	bx	lr

0800c230 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c230:	b480      	push	{r7}
 800c232:	b085      	sub	sp, #20
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
 800c238:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	4a46      	ldr	r2, [pc, #280]	; (800c35c <TIM_Base_SetConfig+0x12c>)
 800c244:	4293      	cmp	r3, r2
 800c246:	d017      	beq.n	800c278 <TIM_Base_SetConfig+0x48>
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c24e:	d013      	beq.n	800c278 <TIM_Base_SetConfig+0x48>
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	4a43      	ldr	r2, [pc, #268]	; (800c360 <TIM_Base_SetConfig+0x130>)
 800c254:	4293      	cmp	r3, r2
 800c256:	d00f      	beq.n	800c278 <TIM_Base_SetConfig+0x48>
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	4a42      	ldr	r2, [pc, #264]	; (800c364 <TIM_Base_SetConfig+0x134>)
 800c25c:	4293      	cmp	r3, r2
 800c25e:	d00b      	beq.n	800c278 <TIM_Base_SetConfig+0x48>
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	4a41      	ldr	r2, [pc, #260]	; (800c368 <TIM_Base_SetConfig+0x138>)
 800c264:	4293      	cmp	r3, r2
 800c266:	d007      	beq.n	800c278 <TIM_Base_SetConfig+0x48>
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	4a40      	ldr	r2, [pc, #256]	; (800c36c <TIM_Base_SetConfig+0x13c>)
 800c26c:	4293      	cmp	r3, r2
 800c26e:	d003      	beq.n	800c278 <TIM_Base_SetConfig+0x48>
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	4a3f      	ldr	r2, [pc, #252]	; (800c370 <TIM_Base_SetConfig+0x140>)
 800c274:	4293      	cmp	r3, r2
 800c276:	d108      	bne.n	800c28a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c27e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	685b      	ldr	r3, [r3, #4]
 800c284:	68fa      	ldr	r2, [r7, #12]
 800c286:	4313      	orrs	r3, r2
 800c288:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	4a33      	ldr	r2, [pc, #204]	; (800c35c <TIM_Base_SetConfig+0x12c>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d023      	beq.n	800c2da <TIM_Base_SetConfig+0xaa>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c298:	d01f      	beq.n	800c2da <TIM_Base_SetConfig+0xaa>
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	4a30      	ldr	r2, [pc, #192]	; (800c360 <TIM_Base_SetConfig+0x130>)
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	d01b      	beq.n	800c2da <TIM_Base_SetConfig+0xaa>
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	4a2f      	ldr	r2, [pc, #188]	; (800c364 <TIM_Base_SetConfig+0x134>)
 800c2a6:	4293      	cmp	r3, r2
 800c2a8:	d017      	beq.n	800c2da <TIM_Base_SetConfig+0xaa>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	4a2e      	ldr	r2, [pc, #184]	; (800c368 <TIM_Base_SetConfig+0x138>)
 800c2ae:	4293      	cmp	r3, r2
 800c2b0:	d013      	beq.n	800c2da <TIM_Base_SetConfig+0xaa>
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	4a2d      	ldr	r2, [pc, #180]	; (800c36c <TIM_Base_SetConfig+0x13c>)
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	d00f      	beq.n	800c2da <TIM_Base_SetConfig+0xaa>
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	4a2d      	ldr	r2, [pc, #180]	; (800c374 <TIM_Base_SetConfig+0x144>)
 800c2be:	4293      	cmp	r3, r2
 800c2c0:	d00b      	beq.n	800c2da <TIM_Base_SetConfig+0xaa>
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	4a2c      	ldr	r2, [pc, #176]	; (800c378 <TIM_Base_SetConfig+0x148>)
 800c2c6:	4293      	cmp	r3, r2
 800c2c8:	d007      	beq.n	800c2da <TIM_Base_SetConfig+0xaa>
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	4a2b      	ldr	r2, [pc, #172]	; (800c37c <TIM_Base_SetConfig+0x14c>)
 800c2ce:	4293      	cmp	r3, r2
 800c2d0:	d003      	beq.n	800c2da <TIM_Base_SetConfig+0xaa>
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	4a26      	ldr	r2, [pc, #152]	; (800c370 <TIM_Base_SetConfig+0x140>)
 800c2d6:	4293      	cmp	r3, r2
 800c2d8:	d108      	bne.n	800c2ec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c2e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	68db      	ldr	r3, [r3, #12]
 800c2e6:	68fa      	ldr	r2, [r7, #12]
 800c2e8:	4313      	orrs	r3, r2
 800c2ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	695b      	ldr	r3, [r3, #20]
 800c2f6:	4313      	orrs	r3, r2
 800c2f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	68fa      	ldr	r2, [r7, #12]
 800c2fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	689a      	ldr	r2, [r3, #8]
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	681a      	ldr	r2, [r3, #0]
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	4a12      	ldr	r2, [pc, #72]	; (800c35c <TIM_Base_SetConfig+0x12c>)
 800c314:	4293      	cmp	r3, r2
 800c316:	d013      	beq.n	800c340 <TIM_Base_SetConfig+0x110>
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	4a14      	ldr	r2, [pc, #80]	; (800c36c <TIM_Base_SetConfig+0x13c>)
 800c31c:	4293      	cmp	r3, r2
 800c31e:	d00f      	beq.n	800c340 <TIM_Base_SetConfig+0x110>
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	4a14      	ldr	r2, [pc, #80]	; (800c374 <TIM_Base_SetConfig+0x144>)
 800c324:	4293      	cmp	r3, r2
 800c326:	d00b      	beq.n	800c340 <TIM_Base_SetConfig+0x110>
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	4a13      	ldr	r2, [pc, #76]	; (800c378 <TIM_Base_SetConfig+0x148>)
 800c32c:	4293      	cmp	r3, r2
 800c32e:	d007      	beq.n	800c340 <TIM_Base_SetConfig+0x110>
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	4a12      	ldr	r2, [pc, #72]	; (800c37c <TIM_Base_SetConfig+0x14c>)
 800c334:	4293      	cmp	r3, r2
 800c336:	d003      	beq.n	800c340 <TIM_Base_SetConfig+0x110>
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	4a0d      	ldr	r2, [pc, #52]	; (800c370 <TIM_Base_SetConfig+0x140>)
 800c33c:	4293      	cmp	r3, r2
 800c33e:	d103      	bne.n	800c348 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	691a      	ldr	r2, [r3, #16]
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2201      	movs	r2, #1
 800c34c:	615a      	str	r2, [r3, #20]
}
 800c34e:	bf00      	nop
 800c350:	3714      	adds	r7, #20
 800c352:	46bd      	mov	sp, r7
 800c354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c358:	4770      	bx	lr
 800c35a:	bf00      	nop
 800c35c:	40012c00 	.word	0x40012c00
 800c360:	40000400 	.word	0x40000400
 800c364:	40000800 	.word	0x40000800
 800c368:	40000c00 	.word	0x40000c00
 800c36c:	40013400 	.word	0x40013400
 800c370:	40015000 	.word	0x40015000
 800c374:	40014000 	.word	0x40014000
 800c378:	40014400 	.word	0x40014400
 800c37c:	40014800 	.word	0x40014800

0800c380 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b086      	sub	sp, #24
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
 800c388:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	689b      	ldr	r3, [r3, #8]
 800c390:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800c398:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c39c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	685b      	ldr	r3, [r3, #4]
 800c3a2:	697a      	ldr	r2, [r7, #20]
 800c3a4:	4313      	orrs	r3, r2
 800c3a6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800c3a8:	697b      	ldr	r3, [r7, #20]
 800c3aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c3ae:	f023 0307 	bic.w	r3, r3, #7
 800c3b2:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	697a      	ldr	r2, [r7, #20]
 800c3ba:	4313      	orrs	r3, r2
 800c3bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	697a      	ldr	r2, [r7, #20]
 800c3c4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	685b      	ldr	r3, [r3, #4]
 800c3ca:	2b70      	cmp	r3, #112	; 0x70
 800c3cc:	d034      	beq.n	800c438 <TIM_SlaveTimer_SetConfig+0xb8>
 800c3ce:	2b70      	cmp	r3, #112	; 0x70
 800c3d0:	d811      	bhi.n	800c3f6 <TIM_SlaveTimer_SetConfig+0x76>
 800c3d2:	2b30      	cmp	r3, #48	; 0x30
 800c3d4:	d07d      	beq.n	800c4d2 <TIM_SlaveTimer_SetConfig+0x152>
 800c3d6:	2b30      	cmp	r3, #48	; 0x30
 800c3d8:	d806      	bhi.n	800c3e8 <TIM_SlaveTimer_SetConfig+0x68>
 800c3da:	2b10      	cmp	r3, #16
 800c3dc:	d079      	beq.n	800c4d2 <TIM_SlaveTimer_SetConfig+0x152>
 800c3de:	2b20      	cmp	r3, #32
 800c3e0:	d077      	beq.n	800c4d2 <TIM_SlaveTimer_SetConfig+0x152>
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d075      	beq.n	800c4d2 <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 800c3e6:	e075      	b.n	800c4d4 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800c3e8:	2b50      	cmp	r3, #80	; 0x50
 800c3ea:	d05e      	beq.n	800c4aa <TIM_SlaveTimer_SetConfig+0x12a>
 800c3ec:	2b60      	cmp	r3, #96	; 0x60
 800c3ee:	d066      	beq.n	800c4be <TIM_SlaveTimer_SetConfig+0x13e>
 800c3f0:	2b40      	cmp	r3, #64	; 0x40
 800c3f2:	d02c      	beq.n	800c44e <TIM_SlaveTimer_SetConfig+0xce>
      break;
 800c3f4:	e06e      	b.n	800c4d4 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800c3f6:	4a3a      	ldr	r2, [pc, #232]	; (800c4e0 <TIM_SlaveTimer_SetConfig+0x160>)
 800c3f8:	4293      	cmp	r3, r2
 800c3fa:	d06a      	beq.n	800c4d2 <TIM_SlaveTimer_SetConfig+0x152>
 800c3fc:	4a38      	ldr	r2, [pc, #224]	; (800c4e0 <TIM_SlaveTimer_SetConfig+0x160>)
 800c3fe:	4293      	cmp	r3, r2
 800c400:	d809      	bhi.n	800c416 <TIM_SlaveTimer_SetConfig+0x96>
 800c402:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c406:	d064      	beq.n	800c4d2 <TIM_SlaveTimer_SetConfig+0x152>
 800c408:	4a36      	ldr	r2, [pc, #216]	; (800c4e4 <TIM_SlaveTimer_SetConfig+0x164>)
 800c40a:	4293      	cmp	r3, r2
 800c40c:	d061      	beq.n	800c4d2 <TIM_SlaveTimer_SetConfig+0x152>
 800c40e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c412:	d05e      	beq.n	800c4d2 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800c414:	e05e      	b.n	800c4d4 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800c416:	4a34      	ldr	r2, [pc, #208]	; (800c4e8 <TIM_SlaveTimer_SetConfig+0x168>)
 800c418:	4293      	cmp	r3, r2
 800c41a:	d05a      	beq.n	800c4d2 <TIM_SlaveTimer_SetConfig+0x152>
 800c41c:	4a32      	ldr	r2, [pc, #200]	; (800c4e8 <TIM_SlaveTimer_SetConfig+0x168>)
 800c41e:	4293      	cmp	r3, r2
 800c420:	d803      	bhi.n	800c42a <TIM_SlaveTimer_SetConfig+0xaa>
 800c422:	4a32      	ldr	r2, [pc, #200]	; (800c4ec <TIM_SlaveTimer_SetConfig+0x16c>)
 800c424:	4293      	cmp	r3, r2
 800c426:	d054      	beq.n	800c4d2 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800c428:	e054      	b.n	800c4d4 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800c42a:	4a31      	ldr	r2, [pc, #196]	; (800c4f0 <TIM_SlaveTimer_SetConfig+0x170>)
 800c42c:	4293      	cmp	r3, r2
 800c42e:	d050      	beq.n	800c4d2 <TIM_SlaveTimer_SetConfig+0x152>
 800c430:	4a30      	ldr	r2, [pc, #192]	; (800c4f4 <TIM_SlaveTimer_SetConfig+0x174>)
 800c432:	4293      	cmp	r3, r2
 800c434:	d04d      	beq.n	800c4d2 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800c436:	e04d      	b.n	800c4d4 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	6818      	ldr	r0, [r3, #0]
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	68d9      	ldr	r1, [r3, #12]
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	689a      	ldr	r2, [r3, #8]
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	691b      	ldr	r3, [r3, #16]
 800c448:	f000 f8d2 	bl	800c5f0 <TIM_ETR_SetConfig>
      break;
 800c44c:	e042      	b.n	800c4d4 <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	2b05      	cmp	r3, #5
 800c454:	d004      	beq.n	800c460 <TIM_SlaveTimer_SetConfig+0xe0>
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 800c45e:	d101      	bne.n	800c464 <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 800c460:	2301      	movs	r3, #1
 800c462:	e038      	b.n	800c4d6 <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	6a1b      	ldr	r3, [r3, #32]
 800c46a:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	6a1a      	ldr	r2, [r3, #32]
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	f022 0201 	bic.w	r2, r2, #1
 800c47a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	699b      	ldr	r3, [r3, #24]
 800c482:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c48a:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	691b      	ldr	r3, [r3, #16]
 800c490:	011b      	lsls	r3, r3, #4
 800c492:	68fa      	ldr	r2, [r7, #12]
 800c494:	4313      	orrs	r3, r2
 800c496:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	68fa      	ldr	r2, [r7, #12]
 800c49e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	693a      	ldr	r2, [r7, #16]
 800c4a6:	621a      	str	r2, [r3, #32]
      break;
 800c4a8:	e014      	b.n	800c4d4 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6818      	ldr	r0, [r3, #0]
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	6899      	ldr	r1, [r3, #8]
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	691b      	ldr	r3, [r3, #16]
 800c4b6:	461a      	mov	r2, r3
 800c4b8:	f000 f81e 	bl	800c4f8 <TIM_TI1_ConfigInputStage>
      break;
 800c4bc:	e00a      	b.n	800c4d4 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6818      	ldr	r0, [r3, #0]
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	6899      	ldr	r1, [r3, #8]
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	691b      	ldr	r3, [r3, #16]
 800c4ca:	461a      	mov	r2, r3
 800c4cc:	f000 f843 	bl	800c556 <TIM_TI2_ConfigInputStage>
      break;
 800c4d0:	e000      	b.n	800c4d4 <TIM_SlaveTimer_SetConfig+0x154>
      break;
 800c4d2:	bf00      	nop
  }
  return HAL_OK;
 800c4d4:	2300      	movs	r3, #0
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3718      	adds	r7, #24
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}
 800c4de:	bf00      	nop
 800c4e0:	00100030 	.word	0x00100030
 800c4e4:	00100020 	.word	0x00100020
 800c4e8:	00100050 	.word	0x00100050
 800c4ec:	00100040 	.word	0x00100040
 800c4f0:	00100060 	.word	0x00100060
 800c4f4:	00100070 	.word	0x00100070

0800c4f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b087      	sub	sp, #28
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	60f8      	str	r0, [r7, #12]
 800c500:	60b9      	str	r1, [r7, #8]
 800c502:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	6a1b      	ldr	r3, [r3, #32]
 800c508:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	6a1b      	ldr	r3, [r3, #32]
 800c50e:	f023 0201 	bic.w	r2, r3, #1
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	699b      	ldr	r3, [r3, #24]
 800c51a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c51c:	693b      	ldr	r3, [r7, #16]
 800c51e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c522:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	011b      	lsls	r3, r3, #4
 800c528:	693a      	ldr	r2, [r7, #16]
 800c52a:	4313      	orrs	r3, r2
 800c52c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c52e:	697b      	ldr	r3, [r7, #20]
 800c530:	f023 030a 	bic.w	r3, r3, #10
 800c534:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c536:	697a      	ldr	r2, [r7, #20]
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	4313      	orrs	r3, r2
 800c53c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	693a      	ldr	r2, [r7, #16]
 800c542:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	697a      	ldr	r2, [r7, #20]
 800c548:	621a      	str	r2, [r3, #32]
}
 800c54a:	bf00      	nop
 800c54c:	371c      	adds	r7, #28
 800c54e:	46bd      	mov	sp, r7
 800c550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c554:	4770      	bx	lr

0800c556 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c556:	b480      	push	{r7}
 800c558:	b087      	sub	sp, #28
 800c55a:	af00      	add	r7, sp, #0
 800c55c:	60f8      	str	r0, [r7, #12]
 800c55e:	60b9      	str	r1, [r7, #8]
 800c560:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	6a1b      	ldr	r3, [r3, #32]
 800c566:	f023 0210 	bic.w	r2, r3, #16
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	699b      	ldr	r3, [r3, #24]
 800c572:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	6a1b      	ldr	r3, [r3, #32]
 800c578:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c580:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	031b      	lsls	r3, r3, #12
 800c586:	697a      	ldr	r2, [r7, #20]
 800c588:	4313      	orrs	r3, r2
 800c58a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c58c:	693b      	ldr	r3, [r7, #16]
 800c58e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c592:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	011b      	lsls	r3, r3, #4
 800c598:	693a      	ldr	r2, [r7, #16]
 800c59a:	4313      	orrs	r3, r2
 800c59c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	697a      	ldr	r2, [r7, #20]
 800c5a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	693a      	ldr	r2, [r7, #16]
 800c5a8:	621a      	str	r2, [r3, #32]
}
 800c5aa:	bf00      	nop
 800c5ac:	371c      	adds	r7, #28
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b4:	4770      	bx	lr

0800c5b6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c5b6:	b480      	push	{r7}
 800c5b8:	b085      	sub	sp, #20
 800c5ba:	af00      	add	r7, sp, #0
 800c5bc:	6078      	str	r0, [r7, #4]
 800c5be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	689b      	ldr	r3, [r3, #8]
 800c5c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800c5cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c5d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c5d2:	683a      	ldr	r2, [r7, #0]
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	4313      	orrs	r3, r2
 800c5d8:	f043 0307 	orr.w	r3, r3, #7
 800c5dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	68fa      	ldr	r2, [r7, #12]
 800c5e2:	609a      	str	r2, [r3, #8]
}
 800c5e4:	bf00      	nop
 800c5e6:	3714      	adds	r7, #20
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ee:	4770      	bx	lr

0800c5f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	b087      	sub	sp, #28
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	60f8      	str	r0, [r7, #12]
 800c5f8:	60b9      	str	r1, [r7, #8]
 800c5fa:	607a      	str	r2, [r7, #4]
 800c5fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	689b      	ldr	r3, [r3, #8]
 800c602:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c604:	697b      	ldr	r3, [r7, #20]
 800c606:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c60a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	021a      	lsls	r2, r3, #8
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	431a      	orrs	r2, r3
 800c614:	68bb      	ldr	r3, [r7, #8]
 800c616:	4313      	orrs	r3, r2
 800c618:	697a      	ldr	r2, [r7, #20]
 800c61a:	4313      	orrs	r3, r2
 800c61c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	697a      	ldr	r2, [r7, #20]
 800c622:	609a      	str	r2, [r3, #8]
}
 800c624:	bf00      	nop
 800c626:	371c      	adds	r7, #28
 800c628:	46bd      	mov	sp, r7
 800c62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62e:	4770      	bx	lr

0800c630 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c630:	b480      	push	{r7}
 800c632:	b085      	sub	sp, #20
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
 800c638:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c640:	2b01      	cmp	r3, #1
 800c642:	d101      	bne.n	800c648 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c644:	2302      	movs	r3, #2
 800c646:	e074      	b.n	800c732 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2201      	movs	r2, #1
 800c64c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2202      	movs	r2, #2
 800c654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	685b      	ldr	r3, [r3, #4]
 800c65e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	689b      	ldr	r3, [r3, #8]
 800c666:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	4a34      	ldr	r2, [pc, #208]	; (800c740 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c66e:	4293      	cmp	r3, r2
 800c670:	d009      	beq.n	800c686 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	4a33      	ldr	r2, [pc, #204]	; (800c744 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c678:	4293      	cmp	r3, r2
 800c67a:	d004      	beq.n	800c686 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	4a31      	ldr	r2, [pc, #196]	; (800c748 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c682:	4293      	cmp	r3, r2
 800c684:	d108      	bne.n	800c698 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c68c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	685b      	ldr	r3, [r3, #4]
 800c692:	68fa      	ldr	r2, [r7, #12]
 800c694:	4313      	orrs	r3, r2
 800c696:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800c69e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	68fa      	ldr	r2, [r7, #12]
 800c6aa:	4313      	orrs	r3, r2
 800c6ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	68fa      	ldr	r2, [r7, #12]
 800c6b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	4a21      	ldr	r2, [pc, #132]	; (800c740 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c6bc:	4293      	cmp	r3, r2
 800c6be:	d022      	beq.n	800c706 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6c8:	d01d      	beq.n	800c706 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	4a1f      	ldr	r2, [pc, #124]	; (800c74c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c6d0:	4293      	cmp	r3, r2
 800c6d2:	d018      	beq.n	800c706 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	4a1d      	ldr	r2, [pc, #116]	; (800c750 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c6da:	4293      	cmp	r3, r2
 800c6dc:	d013      	beq.n	800c706 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	4a1c      	ldr	r2, [pc, #112]	; (800c754 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	d00e      	beq.n	800c706 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	4a15      	ldr	r2, [pc, #84]	; (800c744 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c6ee:	4293      	cmp	r3, r2
 800c6f0:	d009      	beq.n	800c706 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	4a18      	ldr	r2, [pc, #96]	; (800c758 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c6f8:	4293      	cmp	r3, r2
 800c6fa:	d004      	beq.n	800c706 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	4a11      	ldr	r2, [pc, #68]	; (800c748 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c702:	4293      	cmp	r3, r2
 800c704:	d10c      	bne.n	800c720 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c70c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	689b      	ldr	r3, [r3, #8]
 800c712:	68ba      	ldr	r2, [r7, #8]
 800c714:	4313      	orrs	r3, r2
 800c716:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	68ba      	ldr	r2, [r7, #8]
 800c71e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2201      	movs	r2, #1
 800c724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2200      	movs	r2, #0
 800c72c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c730:	2300      	movs	r3, #0
}
 800c732:	4618      	mov	r0, r3
 800c734:	3714      	adds	r7, #20
 800c736:	46bd      	mov	sp, r7
 800c738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73c:	4770      	bx	lr
 800c73e:	bf00      	nop
 800c740:	40012c00 	.word	0x40012c00
 800c744:	40013400 	.word	0x40013400
 800c748:	40015000 	.word	0x40015000
 800c74c:	40000400 	.word	0x40000400
 800c750:	40000800 	.word	0x40000800
 800c754:	40000c00 	.word	0x40000c00
 800c758:	40014000 	.word	0x40014000

0800c75c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c75c:	b480      	push	{r7}
 800c75e:	b085      	sub	sp, #20
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
 800c764:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c766:	2300      	movs	r3, #0
 800c768:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c770:	2b01      	cmp	r3, #1
 800c772:	d101      	bne.n	800c778 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c774:	2302      	movs	r3, #2
 800c776:	e096      	b.n	800c8a6 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2201      	movs	r2, #1
 800c77c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	68db      	ldr	r3, [r3, #12]
 800c78a:	4313      	orrs	r3, r2
 800c78c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	689b      	ldr	r3, [r3, #8]
 800c798:	4313      	orrs	r3, r2
 800c79a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	685b      	ldr	r3, [r3, #4]
 800c7a6:	4313      	orrs	r3, r2
 800c7a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	4313      	orrs	r3, r2
 800c7b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	691b      	ldr	r3, [r3, #16]
 800c7c2:	4313      	orrs	r3, r2
 800c7c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	695b      	ldr	r3, [r3, #20]
 800c7d0:	4313      	orrs	r3, r2
 800c7d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7de:	4313      	orrs	r3, r2
 800c7e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	699b      	ldr	r3, [r3, #24]
 800c7ec:	041b      	lsls	r3, r3, #16
 800c7ee:	4313      	orrs	r3, r2
 800c7f0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	4a2f      	ldr	r2, [pc, #188]	; (800c8b4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800c7f8:	4293      	cmp	r3, r2
 800c7fa:	d009      	beq.n	800c810 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	4a2d      	ldr	r2, [pc, #180]	; (800c8b8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800c802:	4293      	cmp	r3, r2
 800c804:	d004      	beq.n	800c810 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	4a2c      	ldr	r2, [pc, #176]	; (800c8bc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800c80c:	4293      	cmp	r3, r2
 800c80e:	d106      	bne.n	800c81e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	69db      	ldr	r3, [r3, #28]
 800c81a:	4313      	orrs	r3, r2
 800c81c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	4a24      	ldr	r2, [pc, #144]	; (800c8b4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800c824:	4293      	cmp	r3, r2
 800c826:	d009      	beq.n	800c83c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	4a22      	ldr	r2, [pc, #136]	; (800c8b8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800c82e:	4293      	cmp	r3, r2
 800c830:	d004      	beq.n	800c83c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	4a21      	ldr	r2, [pc, #132]	; (800c8bc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800c838:	4293      	cmp	r3, r2
 800c83a:	d12b      	bne.n	800c894 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c846:	051b      	lsls	r3, r3, #20
 800c848:	4313      	orrs	r3, r2
 800c84a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	6a1b      	ldr	r3, [r3, #32]
 800c856:	4313      	orrs	r3, r2
 800c858:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c864:	4313      	orrs	r3, r2
 800c866:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	4a11      	ldr	r2, [pc, #68]	; (800c8b4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800c86e:	4293      	cmp	r3, r2
 800c870:	d009      	beq.n	800c886 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	4a10      	ldr	r2, [pc, #64]	; (800c8b8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800c878:	4293      	cmp	r3, r2
 800c87a:	d004      	beq.n	800c886 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	4a0e      	ldr	r2, [pc, #56]	; (800c8bc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800c882:	4293      	cmp	r3, r2
 800c884:	d106      	bne.n	800c894 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c890:	4313      	orrs	r3, r2
 800c892:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	68fa      	ldr	r2, [r7, #12]
 800c89a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2200      	movs	r2, #0
 800c8a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c8a4:	2300      	movs	r3, #0
}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	3714      	adds	r7, #20
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b0:	4770      	bx	lr
 800c8b2:	bf00      	nop
 800c8b4:	40012c00 	.word	0x40012c00
 800c8b8:	40013400 	.word	0x40013400
 800c8bc:	40015000 	.word	0x40015000

0800c8c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c8c0:	b480      	push	{r7}
 800c8c2:	b083      	sub	sp, #12
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c8c8:	bf00      	nop
 800c8ca:	370c      	adds	r7, #12
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d2:	4770      	bx	lr

0800c8d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c8d4:	b480      	push	{r7}
 800c8d6:	b083      	sub	sp, #12
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c8dc:	bf00      	nop
 800c8de:	370c      	adds	r7, #12
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e6:	4770      	bx	lr

0800c8e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c8e8:	b480      	push	{r7}
 800c8ea:	b083      	sub	sp, #12
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c8f0:	bf00      	nop
 800c8f2:	370c      	adds	r7, #12
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fa:	4770      	bx	lr

0800c8fc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c8fc:	b480      	push	{r7}
 800c8fe:	b083      	sub	sp, #12
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c904:	bf00      	nop
 800c906:	370c      	adds	r7, #12
 800c908:	46bd      	mov	sp, r7
 800c90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90e:	4770      	bx	lr

0800c910 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c910:	b480      	push	{r7}
 800c912:	b083      	sub	sp, #12
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c918:	bf00      	nop
 800c91a:	370c      	adds	r7, #12
 800c91c:	46bd      	mov	sp, r7
 800c91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c922:	4770      	bx	lr

0800c924 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800c924:	b480      	push	{r7}
 800c926:	b083      	sub	sp, #12
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800c92c:	bf00      	nop
 800c92e:	370c      	adds	r7, #12
 800c930:	46bd      	mov	sp, r7
 800c932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c936:	4770      	bx	lr

0800c938 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800c938:	b480      	push	{r7}
 800c93a:	b083      	sub	sp, #12
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800c940:	bf00      	nop
 800c942:	370c      	adds	r7, #12
 800c944:	46bd      	mov	sp, r7
 800c946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94a:	4770      	bx	lr

0800c94c <LL_EXTI_EnableIT_0_31>:
{
 800c94c:	b480      	push	{r7}
 800c94e:	b083      	sub	sp, #12
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800c954:	4b05      	ldr	r3, [pc, #20]	; (800c96c <LL_EXTI_EnableIT_0_31+0x20>)
 800c956:	681a      	ldr	r2, [r3, #0]
 800c958:	4904      	ldr	r1, [pc, #16]	; (800c96c <LL_EXTI_EnableIT_0_31+0x20>)
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	4313      	orrs	r3, r2
 800c95e:	600b      	str	r3, [r1, #0]
}
 800c960:	bf00      	nop
 800c962:	370c      	adds	r7, #12
 800c964:	46bd      	mov	sp, r7
 800c966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96a:	4770      	bx	lr
 800c96c:	40010400 	.word	0x40010400

0800c970 <LL_EXTI_EnableIT_32_63>:
{
 800c970:	b480      	push	{r7}
 800c972:	b083      	sub	sp, #12
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800c978:	4b05      	ldr	r3, [pc, #20]	; (800c990 <LL_EXTI_EnableIT_32_63+0x20>)
 800c97a:	6a1a      	ldr	r2, [r3, #32]
 800c97c:	4904      	ldr	r1, [pc, #16]	; (800c990 <LL_EXTI_EnableIT_32_63+0x20>)
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	4313      	orrs	r3, r2
 800c982:	620b      	str	r3, [r1, #32]
}
 800c984:	bf00      	nop
 800c986:	370c      	adds	r7, #12
 800c988:	46bd      	mov	sp, r7
 800c98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98e:	4770      	bx	lr
 800c990:	40010400 	.word	0x40010400

0800c994 <LL_EXTI_DisableIT_0_31>:
{
 800c994:	b480      	push	{r7}
 800c996:	b083      	sub	sp, #12
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800c99c:	4b06      	ldr	r3, [pc, #24]	; (800c9b8 <LL_EXTI_DisableIT_0_31+0x24>)
 800c99e:	681a      	ldr	r2, [r3, #0]
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	43db      	mvns	r3, r3
 800c9a4:	4904      	ldr	r1, [pc, #16]	; (800c9b8 <LL_EXTI_DisableIT_0_31+0x24>)
 800c9a6:	4013      	ands	r3, r2
 800c9a8:	600b      	str	r3, [r1, #0]
}
 800c9aa:	bf00      	nop
 800c9ac:	370c      	adds	r7, #12
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b4:	4770      	bx	lr
 800c9b6:	bf00      	nop
 800c9b8:	40010400 	.word	0x40010400

0800c9bc <LL_EXTI_DisableIT_32_63>:
{
 800c9bc:	b480      	push	{r7}
 800c9be:	b083      	sub	sp, #12
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800c9c4:	4b06      	ldr	r3, [pc, #24]	; (800c9e0 <LL_EXTI_DisableIT_32_63+0x24>)
 800c9c6:	6a1a      	ldr	r2, [r3, #32]
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	43db      	mvns	r3, r3
 800c9cc:	4904      	ldr	r1, [pc, #16]	; (800c9e0 <LL_EXTI_DisableIT_32_63+0x24>)
 800c9ce:	4013      	ands	r3, r2
 800c9d0:	620b      	str	r3, [r1, #32]
}
 800c9d2:	bf00      	nop
 800c9d4:	370c      	adds	r7, #12
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9dc:	4770      	bx	lr
 800c9de:	bf00      	nop
 800c9e0:	40010400 	.word	0x40010400

0800c9e4 <LL_EXTI_EnableEvent_0_31>:
{
 800c9e4:	b480      	push	{r7}
 800c9e6:	b083      	sub	sp, #12
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800c9ec:	4b05      	ldr	r3, [pc, #20]	; (800ca04 <LL_EXTI_EnableEvent_0_31+0x20>)
 800c9ee:	685a      	ldr	r2, [r3, #4]
 800c9f0:	4904      	ldr	r1, [pc, #16]	; (800ca04 <LL_EXTI_EnableEvent_0_31+0x20>)
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	4313      	orrs	r3, r2
 800c9f6:	604b      	str	r3, [r1, #4]
}
 800c9f8:	bf00      	nop
 800c9fa:	370c      	adds	r7, #12
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca02:	4770      	bx	lr
 800ca04:	40010400 	.word	0x40010400

0800ca08 <LL_EXTI_EnableEvent_32_63>:
{
 800ca08:	b480      	push	{r7}
 800ca0a:	b083      	sub	sp, #12
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800ca10:	4b05      	ldr	r3, [pc, #20]	; (800ca28 <LL_EXTI_EnableEvent_32_63+0x20>)
 800ca12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ca14:	4904      	ldr	r1, [pc, #16]	; (800ca28 <LL_EXTI_EnableEvent_32_63+0x20>)
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	4313      	orrs	r3, r2
 800ca1a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800ca1c:	bf00      	nop
 800ca1e:	370c      	adds	r7, #12
 800ca20:	46bd      	mov	sp, r7
 800ca22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca26:	4770      	bx	lr
 800ca28:	40010400 	.word	0x40010400

0800ca2c <LL_EXTI_DisableEvent_0_31>:
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	b083      	sub	sp, #12
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800ca34:	4b06      	ldr	r3, [pc, #24]	; (800ca50 <LL_EXTI_DisableEvent_0_31+0x24>)
 800ca36:	685a      	ldr	r2, [r3, #4]
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	43db      	mvns	r3, r3
 800ca3c:	4904      	ldr	r1, [pc, #16]	; (800ca50 <LL_EXTI_DisableEvent_0_31+0x24>)
 800ca3e:	4013      	ands	r3, r2
 800ca40:	604b      	str	r3, [r1, #4]
}
 800ca42:	bf00      	nop
 800ca44:	370c      	adds	r7, #12
 800ca46:	46bd      	mov	sp, r7
 800ca48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4c:	4770      	bx	lr
 800ca4e:	bf00      	nop
 800ca50:	40010400 	.word	0x40010400

0800ca54 <LL_EXTI_DisableEvent_32_63>:
{
 800ca54:	b480      	push	{r7}
 800ca56:	b083      	sub	sp, #12
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800ca5c:	4b06      	ldr	r3, [pc, #24]	; (800ca78 <LL_EXTI_DisableEvent_32_63+0x24>)
 800ca5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	43db      	mvns	r3, r3
 800ca64:	4904      	ldr	r1, [pc, #16]	; (800ca78 <LL_EXTI_DisableEvent_32_63+0x24>)
 800ca66:	4013      	ands	r3, r2
 800ca68:	624b      	str	r3, [r1, #36]	; 0x24
}
 800ca6a:	bf00      	nop
 800ca6c:	370c      	adds	r7, #12
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca74:	4770      	bx	lr
 800ca76:	bf00      	nop
 800ca78:	40010400 	.word	0x40010400

0800ca7c <LL_EXTI_EnableRisingTrig_0_31>:
{
 800ca7c:	b480      	push	{r7}
 800ca7e:	b083      	sub	sp, #12
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800ca84:	4b05      	ldr	r3, [pc, #20]	; (800ca9c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800ca86:	689a      	ldr	r2, [r3, #8]
 800ca88:	4904      	ldr	r1, [pc, #16]	; (800ca9c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	4313      	orrs	r3, r2
 800ca8e:	608b      	str	r3, [r1, #8]
}
 800ca90:	bf00      	nop
 800ca92:	370c      	adds	r7, #12
 800ca94:	46bd      	mov	sp, r7
 800ca96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9a:	4770      	bx	lr
 800ca9c:	40010400 	.word	0x40010400

0800caa0 <LL_EXTI_EnableRisingTrig_32_63>:
{
 800caa0:	b480      	push	{r7}
 800caa2:	b083      	sub	sp, #12
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800caa8:	4b05      	ldr	r3, [pc, #20]	; (800cac0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800caaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800caac:	4904      	ldr	r1, [pc, #16]	; (800cac0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	4313      	orrs	r3, r2
 800cab2:	628b      	str	r3, [r1, #40]	; 0x28
}
 800cab4:	bf00      	nop
 800cab6:	370c      	adds	r7, #12
 800cab8:	46bd      	mov	sp, r7
 800caba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabe:	4770      	bx	lr
 800cac0:	40010400 	.word	0x40010400

0800cac4 <LL_EXTI_DisableRisingTrig_0_31>:
{
 800cac4:	b480      	push	{r7}
 800cac6:	b083      	sub	sp, #12
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800cacc:	4b06      	ldr	r3, [pc, #24]	; (800cae8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800cace:	689a      	ldr	r2, [r3, #8]
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	43db      	mvns	r3, r3
 800cad4:	4904      	ldr	r1, [pc, #16]	; (800cae8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800cad6:	4013      	ands	r3, r2
 800cad8:	608b      	str	r3, [r1, #8]
}
 800cada:	bf00      	nop
 800cadc:	370c      	adds	r7, #12
 800cade:	46bd      	mov	sp, r7
 800cae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae4:	4770      	bx	lr
 800cae6:	bf00      	nop
 800cae8:	40010400 	.word	0x40010400

0800caec <LL_EXTI_DisableRisingTrig_32_63>:
{
 800caec:	b480      	push	{r7}
 800caee:	b083      	sub	sp, #12
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800caf4:	4b06      	ldr	r3, [pc, #24]	; (800cb10 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800caf6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	43db      	mvns	r3, r3
 800cafc:	4904      	ldr	r1, [pc, #16]	; (800cb10 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800cafe:	4013      	ands	r3, r2
 800cb00:	628b      	str	r3, [r1, #40]	; 0x28
}
 800cb02:	bf00      	nop
 800cb04:	370c      	adds	r7, #12
 800cb06:	46bd      	mov	sp, r7
 800cb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0c:	4770      	bx	lr
 800cb0e:	bf00      	nop
 800cb10:	40010400 	.word	0x40010400

0800cb14 <LL_EXTI_EnableFallingTrig_0_31>:
{
 800cb14:	b480      	push	{r7}
 800cb16:	b083      	sub	sp, #12
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800cb1c:	4b05      	ldr	r3, [pc, #20]	; (800cb34 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800cb1e:	68da      	ldr	r2, [r3, #12]
 800cb20:	4904      	ldr	r1, [pc, #16]	; (800cb34 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	4313      	orrs	r3, r2
 800cb26:	60cb      	str	r3, [r1, #12]
}
 800cb28:	bf00      	nop
 800cb2a:	370c      	adds	r7, #12
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb32:	4770      	bx	lr
 800cb34:	40010400 	.word	0x40010400

0800cb38 <LL_EXTI_EnableFallingTrig_32_63>:
{
 800cb38:	b480      	push	{r7}
 800cb3a:	b083      	sub	sp, #12
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800cb40:	4b05      	ldr	r3, [pc, #20]	; (800cb58 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800cb42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb44:	4904      	ldr	r1, [pc, #16]	; (800cb58 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	4313      	orrs	r3, r2
 800cb4a:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800cb4c:	bf00      	nop
 800cb4e:	370c      	adds	r7, #12
 800cb50:	46bd      	mov	sp, r7
 800cb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb56:	4770      	bx	lr
 800cb58:	40010400 	.word	0x40010400

0800cb5c <LL_EXTI_DisableFallingTrig_0_31>:
{
 800cb5c:	b480      	push	{r7}
 800cb5e:	b083      	sub	sp, #12
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800cb64:	4b06      	ldr	r3, [pc, #24]	; (800cb80 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800cb66:	68da      	ldr	r2, [r3, #12]
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	43db      	mvns	r3, r3
 800cb6c:	4904      	ldr	r1, [pc, #16]	; (800cb80 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800cb6e:	4013      	ands	r3, r2
 800cb70:	60cb      	str	r3, [r1, #12]
}
 800cb72:	bf00      	nop
 800cb74:	370c      	adds	r7, #12
 800cb76:	46bd      	mov	sp, r7
 800cb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7c:	4770      	bx	lr
 800cb7e:	bf00      	nop
 800cb80:	40010400 	.word	0x40010400

0800cb84 <LL_EXTI_DisableFallingTrig_32_63>:
{
 800cb84:	b480      	push	{r7}
 800cb86:	b083      	sub	sp, #12
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800cb8c:	4b06      	ldr	r3, [pc, #24]	; (800cba8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800cb8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	43db      	mvns	r3, r3
 800cb94:	4904      	ldr	r1, [pc, #16]	; (800cba8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800cb96:	4013      	ands	r3, r2
 800cb98:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800cb9a:	bf00      	nop
 800cb9c:	370c      	adds	r7, #12
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba4:	4770      	bx	lr
 800cba6:	bf00      	nop
 800cba8:	40010400 	.word	0x40010400

0800cbac <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b084      	sub	sp, #16
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	7a1b      	ldrb	r3, [r3, #8]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	f000 80c8 	beq.w	800cd52 <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d05d      	beq.n	800cc86 <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	7a5b      	ldrb	r3, [r3, #9]
 800cbce:	2b01      	cmp	r3, #1
 800cbd0:	d00e      	beq.n	800cbf0 <LL_EXTI_Init+0x44>
 800cbd2:	2b02      	cmp	r3, #2
 800cbd4:	d017      	beq.n	800cc06 <LL_EXTI_Init+0x5a>
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d120      	bne.n	800cc1c <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f7ff ff24 	bl	800ca2c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	4618      	mov	r0, r3
 800cbea:	f7ff feaf 	bl	800c94c <LL_EXTI_EnableIT_0_31>
          break;
 800cbee:	e018      	b.n	800cc22 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f7ff fecd 	bl	800c994 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f7ff fef0 	bl	800c9e4 <LL_EXTI_EnableEvent_0_31>
          break;
 800cc04:	e00d      	b.n	800cc22 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f7ff fe9e 	bl	800c94c <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	4618      	mov	r0, r3
 800cc16:	f7ff fee5 	bl	800c9e4 <LL_EXTI_EnableEvent_0_31>
          break;
 800cc1a:	e002      	b.n	800cc22 <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 800cc1c:	2301      	movs	r3, #1
 800cc1e:	60fb      	str	r3, [r7, #12]
          break;
 800cc20:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	7a9b      	ldrb	r3, [r3, #10]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d02d      	beq.n	800cc86 <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	7a9b      	ldrb	r3, [r3, #10]
 800cc2e:	2b02      	cmp	r3, #2
 800cc30:	d00e      	beq.n	800cc50 <LL_EXTI_Init+0xa4>
 800cc32:	2b03      	cmp	r3, #3
 800cc34:	d017      	beq.n	800cc66 <LL_EXTI_Init+0xba>
 800cc36:	2b01      	cmp	r3, #1
 800cc38:	d120      	bne.n	800cc7c <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f7ff ff8c 	bl	800cb5c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	4618      	mov	r0, r3
 800cc4a:	f7ff ff17 	bl	800ca7c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800cc4e:	e01b      	b.n	800cc88 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	4618      	mov	r0, r3
 800cc56:	f7ff ff35 	bl	800cac4 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f7ff ff58 	bl	800cb14 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800cc64:	e010      	b.n	800cc88 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f7ff ff06 	bl	800ca7c <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	4618      	mov	r0, r3
 800cc76:	f7ff ff4d 	bl	800cb14 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800cc7a:	e005      	b.n	800cc88 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	f043 0302 	orr.w	r3, r3, #2
 800cc82:	60fb      	str	r3, [r7, #12]
            break;
 800cc84:	e000      	b.n	800cc88 <LL_EXTI_Init+0xdc>
        }
      }
 800cc86:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	685b      	ldr	r3, [r3, #4]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d075      	beq.n	800cd7c <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	7a5b      	ldrb	r3, [r3, #9]
 800cc94:	2b01      	cmp	r3, #1
 800cc96:	d00e      	beq.n	800ccb6 <LL_EXTI_Init+0x10a>
 800cc98:	2b02      	cmp	r3, #2
 800cc9a:	d017      	beq.n	800cccc <LL_EXTI_Init+0x120>
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d120      	bne.n	800cce2 <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	685b      	ldr	r3, [r3, #4]
 800cca4:	4618      	mov	r0, r3
 800cca6:	f7ff fed5 	bl	800ca54 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	685b      	ldr	r3, [r3, #4]
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f7ff fe5e 	bl	800c970 <LL_EXTI_EnableIT_32_63>
          break;
 800ccb4:	e01a      	b.n	800ccec <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	685b      	ldr	r3, [r3, #4]
 800ccba:	4618      	mov	r0, r3
 800ccbc:	f7ff fe7e 	bl	800c9bc <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	685b      	ldr	r3, [r3, #4]
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f7ff fe9f 	bl	800ca08 <LL_EXTI_EnableEvent_32_63>
          break;
 800ccca:	e00f      	b.n	800ccec <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	685b      	ldr	r3, [r3, #4]
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	f7ff fe4d 	bl	800c970 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	685b      	ldr	r3, [r3, #4]
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f7ff fe94 	bl	800ca08 <LL_EXTI_EnableEvent_32_63>
          break;
 800cce0:	e004      	b.n	800ccec <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	f043 0304 	orr.w	r3, r3, #4
 800cce8:	60fb      	str	r3, [r7, #12]
          break;
 800ccea:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	7a9b      	ldrb	r3, [r3, #10]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d043      	beq.n	800cd7c <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	7a9b      	ldrb	r3, [r3, #10]
 800ccf8:	2b02      	cmp	r3, #2
 800ccfa:	d00e      	beq.n	800cd1a <LL_EXTI_Init+0x16e>
 800ccfc:	2b03      	cmp	r3, #3
 800ccfe:	d017      	beq.n	800cd30 <LL_EXTI_Init+0x184>
 800cd00:	2b01      	cmp	r3, #1
 800cd02:	d120      	bne.n	800cd46 <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	685b      	ldr	r3, [r3, #4]
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f7ff ff3b 	bl	800cb84 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	685b      	ldr	r3, [r3, #4]
 800cd12:	4618      	mov	r0, r3
 800cd14:	f7ff fec4 	bl	800caa0 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800cd18:	e031      	b.n	800cd7e <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	685b      	ldr	r3, [r3, #4]
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f7ff fee4 	bl	800caec <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	685b      	ldr	r3, [r3, #4]
 800cd28:	4618      	mov	r0, r3
 800cd2a:	f7ff ff05 	bl	800cb38 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800cd2e:	e026      	b.n	800cd7e <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	685b      	ldr	r3, [r3, #4]
 800cd34:	4618      	mov	r0, r3
 800cd36:	f7ff feb3 	bl	800caa0 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	685b      	ldr	r3, [r3, #4]
 800cd3e:	4618      	mov	r0, r3
 800cd40:	f7ff fefa 	bl	800cb38 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800cd44:	e01b      	b.n	800cd7e <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	f043 0305 	orr.w	r3, r3, #5
 800cd4c:	60fb      	str	r3, [r7, #12]
            break;
 800cd4e:	bf00      	nop
 800cd50:	e015      	b.n	800cd7e <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	4618      	mov	r0, r3
 800cd58:	f7ff fe1c 	bl	800c994 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	4618      	mov	r0, r3
 800cd62:	f7ff fe63 	bl	800ca2c <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	685b      	ldr	r3, [r3, #4]
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	f7ff fe26 	bl	800c9bc <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	685b      	ldr	r3, [r3, #4]
 800cd74:	4618      	mov	r0, r3
 800cd76:	f7ff fe6d 	bl	800ca54 <LL_EXTI_DisableEvent_32_63>
 800cd7a:	e000      	b.n	800cd7e <LL_EXTI_Init+0x1d2>
      }
 800cd7c:	bf00      	nop
  }

  return status;
 800cd7e:	68fb      	ldr	r3, [r7, #12]
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	3710      	adds	r7, #16
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}

0800cd88 <LL_GPIO_SetPinMode>:
{
 800cd88:	b480      	push	{r7}
 800cd8a:	b089      	sub	sp, #36	; 0x24
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	60f8      	str	r0, [r7, #12]
 800cd90:	60b9      	str	r1, [r7, #8]
 800cd92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	681a      	ldr	r2, [r3, #0]
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cd9c:	697b      	ldr	r3, [r7, #20]
 800cd9e:	fa93 f3a3 	rbit	r3, r3
 800cda2:	613b      	str	r3, [r7, #16]
  return result;
 800cda4:	693b      	ldr	r3, [r7, #16]
 800cda6:	fab3 f383 	clz	r3, r3
 800cdaa:	b2db      	uxtb	r3, r3
 800cdac:	005b      	lsls	r3, r3, #1
 800cdae:	2103      	movs	r1, #3
 800cdb0:	fa01 f303 	lsl.w	r3, r1, r3
 800cdb4:	43db      	mvns	r3, r3
 800cdb6:	401a      	ands	r2, r3
 800cdb8:	68bb      	ldr	r3, [r7, #8]
 800cdba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cdbc:	69fb      	ldr	r3, [r7, #28]
 800cdbe:	fa93 f3a3 	rbit	r3, r3
 800cdc2:	61bb      	str	r3, [r7, #24]
  return result;
 800cdc4:	69bb      	ldr	r3, [r7, #24]
 800cdc6:	fab3 f383 	clz	r3, r3
 800cdca:	b2db      	uxtb	r3, r3
 800cdcc:	005b      	lsls	r3, r3, #1
 800cdce:	6879      	ldr	r1, [r7, #4]
 800cdd0:	fa01 f303 	lsl.w	r3, r1, r3
 800cdd4:	431a      	orrs	r2, r3
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	601a      	str	r2, [r3, #0]
}
 800cdda:	bf00      	nop
 800cddc:	3724      	adds	r7, #36	; 0x24
 800cdde:	46bd      	mov	sp, r7
 800cde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde4:	4770      	bx	lr

0800cde6 <LL_GPIO_SetPinOutputType>:
{
 800cde6:	b480      	push	{r7}
 800cde8:	b085      	sub	sp, #20
 800cdea:	af00      	add	r7, sp, #0
 800cdec:	60f8      	str	r0, [r7, #12]
 800cdee:	60b9      	str	r1, [r7, #8]
 800cdf0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	685a      	ldr	r2, [r3, #4]
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	43db      	mvns	r3, r3
 800cdfa:	401a      	ands	r2, r3
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	6879      	ldr	r1, [r7, #4]
 800ce00:	fb01 f303 	mul.w	r3, r1, r3
 800ce04:	431a      	orrs	r2, r3
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	605a      	str	r2, [r3, #4]
}
 800ce0a:	bf00      	nop
 800ce0c:	3714      	adds	r7, #20
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce14:	4770      	bx	lr

0800ce16 <LL_GPIO_SetPinSpeed>:
{
 800ce16:	b480      	push	{r7}
 800ce18:	b089      	sub	sp, #36	; 0x24
 800ce1a:	af00      	add	r7, sp, #0
 800ce1c:	60f8      	str	r0, [r7, #12]
 800ce1e:	60b9      	str	r1, [r7, #8]
 800ce20:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	689a      	ldr	r2, [r3, #8]
 800ce26:	68bb      	ldr	r3, [r7, #8]
 800ce28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ce2a:	697b      	ldr	r3, [r7, #20]
 800ce2c:	fa93 f3a3 	rbit	r3, r3
 800ce30:	613b      	str	r3, [r7, #16]
  return result;
 800ce32:	693b      	ldr	r3, [r7, #16]
 800ce34:	fab3 f383 	clz	r3, r3
 800ce38:	b2db      	uxtb	r3, r3
 800ce3a:	005b      	lsls	r3, r3, #1
 800ce3c:	2103      	movs	r1, #3
 800ce3e:	fa01 f303 	lsl.w	r3, r1, r3
 800ce42:	43db      	mvns	r3, r3
 800ce44:	401a      	ands	r2, r3
 800ce46:	68bb      	ldr	r3, [r7, #8]
 800ce48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ce4a:	69fb      	ldr	r3, [r7, #28]
 800ce4c:	fa93 f3a3 	rbit	r3, r3
 800ce50:	61bb      	str	r3, [r7, #24]
  return result;
 800ce52:	69bb      	ldr	r3, [r7, #24]
 800ce54:	fab3 f383 	clz	r3, r3
 800ce58:	b2db      	uxtb	r3, r3
 800ce5a:	005b      	lsls	r3, r3, #1
 800ce5c:	6879      	ldr	r1, [r7, #4]
 800ce5e:	fa01 f303 	lsl.w	r3, r1, r3
 800ce62:	431a      	orrs	r2, r3
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	609a      	str	r2, [r3, #8]
}
 800ce68:	bf00      	nop
 800ce6a:	3724      	adds	r7, #36	; 0x24
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce72:	4770      	bx	lr

0800ce74 <LL_GPIO_SetPinPull>:
{
 800ce74:	b480      	push	{r7}
 800ce76:	b089      	sub	sp, #36	; 0x24
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	60f8      	str	r0, [r7, #12]
 800ce7c:	60b9      	str	r1, [r7, #8]
 800ce7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	68da      	ldr	r2, [r3, #12]
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ce88:	697b      	ldr	r3, [r7, #20]
 800ce8a:	fa93 f3a3 	rbit	r3, r3
 800ce8e:	613b      	str	r3, [r7, #16]
  return result;
 800ce90:	693b      	ldr	r3, [r7, #16]
 800ce92:	fab3 f383 	clz	r3, r3
 800ce96:	b2db      	uxtb	r3, r3
 800ce98:	005b      	lsls	r3, r3, #1
 800ce9a:	2103      	movs	r1, #3
 800ce9c:	fa01 f303 	lsl.w	r3, r1, r3
 800cea0:	43db      	mvns	r3, r3
 800cea2:	401a      	ands	r2, r3
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cea8:	69fb      	ldr	r3, [r7, #28]
 800ceaa:	fa93 f3a3 	rbit	r3, r3
 800ceae:	61bb      	str	r3, [r7, #24]
  return result;
 800ceb0:	69bb      	ldr	r3, [r7, #24]
 800ceb2:	fab3 f383 	clz	r3, r3
 800ceb6:	b2db      	uxtb	r3, r3
 800ceb8:	005b      	lsls	r3, r3, #1
 800ceba:	6879      	ldr	r1, [r7, #4]
 800cebc:	fa01 f303 	lsl.w	r3, r1, r3
 800cec0:	431a      	orrs	r2, r3
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	60da      	str	r2, [r3, #12]
}
 800cec6:	bf00      	nop
 800cec8:	3724      	adds	r7, #36	; 0x24
 800ceca:	46bd      	mov	sp, r7
 800cecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced0:	4770      	bx	lr

0800ced2 <LL_GPIO_SetAFPin_0_7>:
{
 800ced2:	b480      	push	{r7}
 800ced4:	b089      	sub	sp, #36	; 0x24
 800ced6:	af00      	add	r7, sp, #0
 800ced8:	60f8      	str	r0, [r7, #12]
 800ceda:	60b9      	str	r1, [r7, #8]
 800cedc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	6a1a      	ldr	r2, [r3, #32]
 800cee2:	68bb      	ldr	r3, [r7, #8]
 800cee4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cee6:	697b      	ldr	r3, [r7, #20]
 800cee8:	fa93 f3a3 	rbit	r3, r3
 800ceec:	613b      	str	r3, [r7, #16]
  return result;
 800ceee:	693b      	ldr	r3, [r7, #16]
 800cef0:	fab3 f383 	clz	r3, r3
 800cef4:	b2db      	uxtb	r3, r3
 800cef6:	009b      	lsls	r3, r3, #2
 800cef8:	210f      	movs	r1, #15
 800cefa:	fa01 f303 	lsl.w	r3, r1, r3
 800cefe:	43db      	mvns	r3, r3
 800cf00:	401a      	ands	r2, r3
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cf06:	69fb      	ldr	r3, [r7, #28]
 800cf08:	fa93 f3a3 	rbit	r3, r3
 800cf0c:	61bb      	str	r3, [r7, #24]
  return result;
 800cf0e:	69bb      	ldr	r3, [r7, #24]
 800cf10:	fab3 f383 	clz	r3, r3
 800cf14:	b2db      	uxtb	r3, r3
 800cf16:	009b      	lsls	r3, r3, #2
 800cf18:	6879      	ldr	r1, [r7, #4]
 800cf1a:	fa01 f303 	lsl.w	r3, r1, r3
 800cf1e:	431a      	orrs	r2, r3
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	621a      	str	r2, [r3, #32]
}
 800cf24:	bf00      	nop
 800cf26:	3724      	adds	r7, #36	; 0x24
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2e:	4770      	bx	lr

0800cf30 <LL_GPIO_SetAFPin_8_15>:
{
 800cf30:	b480      	push	{r7}
 800cf32:	b089      	sub	sp, #36	; 0x24
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	60f8      	str	r0, [r7, #12]
 800cf38:	60b9      	str	r1, [r7, #8]
 800cf3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	0a1b      	lsrs	r3, r3, #8
 800cf44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cf46:	697b      	ldr	r3, [r7, #20]
 800cf48:	fa93 f3a3 	rbit	r3, r3
 800cf4c:	613b      	str	r3, [r7, #16]
  return result;
 800cf4e:	693b      	ldr	r3, [r7, #16]
 800cf50:	fab3 f383 	clz	r3, r3
 800cf54:	b2db      	uxtb	r3, r3
 800cf56:	009b      	lsls	r3, r3, #2
 800cf58:	210f      	movs	r1, #15
 800cf5a:	fa01 f303 	lsl.w	r3, r1, r3
 800cf5e:	43db      	mvns	r3, r3
 800cf60:	401a      	ands	r2, r3
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	0a1b      	lsrs	r3, r3, #8
 800cf66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cf68:	69fb      	ldr	r3, [r7, #28]
 800cf6a:	fa93 f3a3 	rbit	r3, r3
 800cf6e:	61bb      	str	r3, [r7, #24]
  return result;
 800cf70:	69bb      	ldr	r3, [r7, #24]
 800cf72:	fab3 f383 	clz	r3, r3
 800cf76:	b2db      	uxtb	r3, r3
 800cf78:	009b      	lsls	r3, r3, #2
 800cf7a:	6879      	ldr	r1, [r7, #4]
 800cf7c:	fa01 f303 	lsl.w	r3, r1, r3
 800cf80:	431a      	orrs	r2, r3
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	625a      	str	r2, [r3, #36]	; 0x24
}
 800cf86:	bf00      	nop
 800cf88:	3724      	adds	r7, #36	; 0x24
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf90:	4770      	bx	lr

0800cf92 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800cf92:	b580      	push	{r7, lr}
 800cf94:	b086      	sub	sp, #24
 800cf96:	af00      	add	r7, sp, #0
 800cf98:	6078      	str	r0, [r7, #4]
 800cf9a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	fa93 f3a3 	rbit	r3, r3
 800cfa8:	60bb      	str	r3, [r7, #8]
  return result;
 800cfaa:	68bb      	ldr	r3, [r7, #8]
 800cfac:	fab3 f383 	clz	r3, r3
 800cfb0:	b2db      	uxtb	r3, r3
 800cfb2:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800cfb4:	e040      	b.n	800d038 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	681a      	ldr	r2, [r3, #0]
 800cfba:	2101      	movs	r1, #1
 800cfbc:	697b      	ldr	r3, [r7, #20]
 800cfbe:	fa01 f303 	lsl.w	r3, r1, r3
 800cfc2:	4013      	ands	r3, r2
 800cfc4:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 800cfc6:	693b      	ldr	r3, [r7, #16]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d032      	beq.n	800d032 <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	685b      	ldr	r3, [r3, #4]
 800cfd0:	461a      	mov	r2, r3
 800cfd2:	6939      	ldr	r1, [r7, #16]
 800cfd4:	6878      	ldr	r0, [r7, #4]
 800cfd6:	f7ff fed7 	bl	800cd88 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	685b      	ldr	r3, [r3, #4]
 800cfde:	2b01      	cmp	r3, #1
 800cfe0:	d003      	beq.n	800cfea <LL_GPIO_Init+0x58>
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	685b      	ldr	r3, [r3, #4]
 800cfe6:	2b02      	cmp	r3, #2
 800cfe8:	d106      	bne.n	800cff8 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	689b      	ldr	r3, [r3, #8]
 800cfee:	461a      	mov	r2, r3
 800cff0:	6939      	ldr	r1, [r7, #16]
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f7ff ff0f 	bl	800ce16 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	691b      	ldr	r3, [r3, #16]
 800cffc:	461a      	mov	r2, r3
 800cffe:	6939      	ldr	r1, [r7, #16]
 800d000:	6878      	ldr	r0, [r7, #4]
 800d002:	f7ff ff37 	bl	800ce74 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	685b      	ldr	r3, [r3, #4]
 800d00a:	2b02      	cmp	r3, #2
 800d00c:	d111      	bne.n	800d032 <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800d00e:	693b      	ldr	r3, [r7, #16]
 800d010:	2bff      	cmp	r3, #255	; 0xff
 800d012:	d807      	bhi.n	800d024 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	695b      	ldr	r3, [r3, #20]
 800d018:	461a      	mov	r2, r3
 800d01a:	6939      	ldr	r1, [r7, #16]
 800d01c:	6878      	ldr	r0, [r7, #4]
 800d01e:	f7ff ff58 	bl	800ced2 <LL_GPIO_SetAFPin_0_7>
 800d022:	e006      	b.n	800d032 <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	695b      	ldr	r3, [r3, #20]
 800d028:	461a      	mov	r2, r3
 800d02a:	6939      	ldr	r1, [r7, #16]
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f7ff ff7f 	bl	800cf30 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800d032:	697b      	ldr	r3, [r7, #20]
 800d034:	3301      	adds	r3, #1
 800d036:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	681a      	ldr	r2, [r3, #0]
 800d03c:	697b      	ldr	r3, [r7, #20]
 800d03e:	fa22 f303 	lsr.w	r3, r2, r3
 800d042:	2b00      	cmp	r3, #0
 800d044:	d1b7      	bne.n	800cfb6 <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	685b      	ldr	r3, [r3, #4]
 800d04a:	2b01      	cmp	r3, #1
 800d04c:	d003      	beq.n	800d056 <LL_GPIO_Init+0xc4>
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	685b      	ldr	r3, [r3, #4]
 800d052:	2b02      	cmp	r3, #2
 800d054:	d107      	bne.n	800d066 <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	6819      	ldr	r1, [r3, #0]
 800d05a:	683b      	ldr	r3, [r7, #0]
 800d05c:	68db      	ldr	r3, [r3, #12]
 800d05e:	461a      	mov	r2, r3
 800d060:	6878      	ldr	r0, [r7, #4]
 800d062:	f7ff fec0 	bl	800cde6 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800d066:	2300      	movs	r3, #0
}
 800d068:	4618      	mov	r0, r3
 800d06a:	3718      	adds	r7, #24
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}

0800d070 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 */

void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint8_t border_colour)
{
 800d070:	b590      	push	{r4, r7, lr}
 800d072:	b087      	sub	sp, #28
 800d074:	af02      	add	r7, sp, #8
 800d076:	4604      	mov	r4, r0
 800d078:	4608      	mov	r0, r1
 800d07a:	4611      	mov	r1, r2
 800d07c:	461a      	mov	r2, r3
 800d07e:	4623      	mov	r3, r4
 800d080:	80fb      	strh	r3, [r7, #6]
 800d082:	4603      	mov	r3, r0
 800d084:	80bb      	strh	r3, [r7, #4]
 800d086:	460b      	mov	r3, r1
 800d088:	807b      	strh	r3, [r7, #2]
 800d08a:	4613      	mov	r3, r2
 800d08c:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 800d08e:	2300      	movs	r3, #0
 800d090:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 800d092:	7bfa      	ldrb	r2, [r7, #15]
 800d094:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d098:	429a      	cmp	r2, r3
 800d09a:	d93a      	bls.n	800d112 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa2>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 800d09c:	88ba      	ldrh	r2, [r7, #4]
 800d09e:	7bfb      	ldrb	r3, [r7, #15]
 800d0a0:	441a      	add	r2, r3
 800d0a2:	88b9      	ldrh	r1, [r7, #4]
 800d0a4:	883b      	ldrh	r3, [r7, #0]
 800d0a6:	4419      	add	r1, r3
 800d0a8:	7bfb      	ldrb	r3, [r7, #15]
 800d0aa:	1acb      	subs	r3, r1, r3
 800d0ac:	429a      	cmp	r2, r3
 800d0ae:	f000 8090 	beq.w	800d1d2 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
 800d0b2:	88fa      	ldrh	r2, [r7, #6]
 800d0b4:	7bfb      	ldrb	r3, [r7, #15]
 800d0b6:	441a      	add	r2, r3
 800d0b8:	88f9      	ldrh	r1, [r7, #6]
 800d0ba:	887b      	ldrh	r3, [r7, #2]
 800d0bc:	4419      	add	r1, r3
 800d0be:	7bfb      	ldrb	r3, [r7, #15]
 800d0c0:	1acb      	subs	r3, r1, r3
 800d0c2:	429a      	cmp	r2, r3
 800d0c4:	f000 8085 	beq.w	800d1d2 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 800d0c8:	7bfb      	ldrb	r3, [r7, #15]
 800d0ca:	b29a      	uxth	r2, r3
 800d0cc:	88fb      	ldrh	r3, [r7, #6]
 800d0ce:	4413      	add	r3, r2
 800d0d0:	b298      	uxth	r0, r3
 800d0d2:	7bfb      	ldrb	r3, [r7, #15]
 800d0d4:	b29a      	uxth	r2, r3
 800d0d6:	88bb      	ldrh	r3, [r7, #4]
 800d0d8:	4413      	add	r3, r2
 800d0da:	b299      	uxth	r1, r3
 800d0dc:	7bfb      	ldrb	r3, [r7, #15]
 800d0de:	b29b      	uxth	r3, r3
 800d0e0:	005b      	lsls	r3, r3, #1
 800d0e2:	b29b      	uxth	r3, r3
 800d0e4:	887a      	ldrh	r2, [r7, #2]
 800d0e6:	1ad3      	subs	r3, r2, r3
 800d0e8:	b29b      	uxth	r3, r3
 800d0ea:	3301      	adds	r3, #1
 800d0ec:	b29c      	uxth	r4, r3
 800d0ee:	7bfb      	ldrb	r3, [r7, #15]
 800d0f0:	b29b      	uxth	r3, r3
 800d0f2:	005b      	lsls	r3, r3, #1
 800d0f4:	b29b      	uxth	r3, r3
 800d0f6:	883a      	ldrh	r2, [r7, #0]
 800d0f8:	1ad3      	subs	r3, r2, r3
 800d0fa:	b29b      	uxth	r3, r3
 800d0fc:	3301      	adds	r3, #1
 800d0fe:	b29a      	uxth	r2, r3
 800d100:	2304      	movs	r3, #4
 800d102:	9301      	str	r3, [sp, #4]
 800d104:	8c3b      	ldrh	r3, [r7, #32]
 800d106:	9300      	str	r3, [sp, #0]
 800d108:	4613      	mov	r3, r2
 800d10a:	4622      	mov	r2, r4
 800d10c:	f000 fcd6 	bl	800dabc <ILI9341_Draw_Rectangle>
				goto finish;
 800d110:	e060      	b.n	800d1d4 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x164>
			}
		}

		// Horizontal lines
		ILI9341_Draw_Horizontal_Line(	x + b,
 800d112:	7bfb      	ldrb	r3, [r7, #15]
 800d114:	b29a      	uxth	r2, r3
 800d116:	88fb      	ldrh	r3, [r7, #6]
 800d118:	4413      	add	r3, r2
 800d11a:	b298      	uxth	r0, r3
 800d11c:	7bfb      	ldrb	r3, [r7, #15]
 800d11e:	b29a      	uxth	r2, r3
 800d120:	88bb      	ldrh	r3, [r7, #4]
 800d122:	4413      	add	r3, r2
 800d124:	b299      	uxth	r1, r3
 800d126:	7bfb      	ldrb	r3, [r7, #15]
 800d128:	b29b      	uxth	r3, r3
 800d12a:	005b      	lsls	r3, r3, #1
 800d12c:	b29b      	uxth	r3, r3
 800d12e:	887a      	ldrh	r2, [r7, #2]
 800d130:	1ad3      	subs	r3, r2, r3
 800d132:	b29a      	uxth	r2, r3
 800d134:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d138:	b29b      	uxth	r3, r3
 800d13a:	f000 fa81 	bl	800d640 <ILI9341_Draw_Horizontal_Line>
										y + b,
										w - (2*b),
										border_colour);

		ILI9341_Draw_Horizontal_Line(	x + b,
 800d13e:	7bfb      	ldrb	r3, [r7, #15]
 800d140:	b29a      	uxth	r2, r3
 800d142:	88fb      	ldrh	r3, [r7, #6]
 800d144:	4413      	add	r3, r2
 800d146:	b298      	uxth	r0, r3
										(y + h) - b,
 800d148:	88ba      	ldrh	r2, [r7, #4]
 800d14a:	883b      	ldrh	r3, [r7, #0]
 800d14c:	4413      	add	r3, r2
 800d14e:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800d150:	7bfb      	ldrb	r3, [r7, #15]
 800d152:	b29b      	uxth	r3, r3
 800d154:	1ad3      	subs	r3, r2, r3
 800d156:	b299      	uxth	r1, r3
 800d158:	7bfb      	ldrb	r3, [r7, #15]
 800d15a:	b29b      	uxth	r3, r3
 800d15c:	887a      	ldrh	r2, [r7, #2]
 800d15e:	1ad3      	subs	r3, r2, r3
 800d160:	b29a      	uxth	r2, r3
 800d162:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d166:	b29b      	uxth	r3, r3
 800d168:	f000 fa6a 	bl	800d640 <ILI9341_Draw_Horizontal_Line>
										w - (b),
										border_colour);


		// Vertical lines
		ILI9341_Draw_Vertical_Line(		x + b,
 800d16c:	7bfb      	ldrb	r3, [r7, #15]
 800d16e:	b29a      	uxth	r2, r3
 800d170:	88fb      	ldrh	r3, [r7, #6]
 800d172:	4413      	add	r3, r2
 800d174:	b298      	uxth	r0, r3
 800d176:	7bfb      	ldrb	r3, [r7, #15]
 800d178:	b29a      	uxth	r2, r3
 800d17a:	88bb      	ldrh	r3, [r7, #4]
 800d17c:	4413      	add	r3, r2
 800d17e:	b299      	uxth	r1, r3
 800d180:	7bfb      	ldrb	r3, [r7, #15]
 800d182:	b29b      	uxth	r3, r3
 800d184:	005b      	lsls	r3, r3, #1
 800d186:	b29b      	uxth	r3, r3
 800d188:	883a      	ldrh	r2, [r7, #0]
 800d18a:	1ad3      	subs	r3, r2, r3
 800d18c:	b29a      	uxth	r2, r3
 800d18e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d192:	b29b      	uxth	r3, r3
 800d194:	f000 fa9c 	bl	800d6d0 <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);

		ILI9341_Draw_Vertical_Line(		(x + w) - b,
 800d198:	88fa      	ldrh	r2, [r7, #6]
 800d19a:	887b      	ldrh	r3, [r7, #2]
 800d19c:	4413      	add	r3, r2
 800d19e:	b29a      	uxth	r2, r3
 800d1a0:	7bfb      	ldrb	r3, [r7, #15]
 800d1a2:	b29b      	uxth	r3, r3
 800d1a4:	1ad3      	subs	r3, r2, r3
 800d1a6:	b298      	uxth	r0, r3
 800d1a8:	7bfb      	ldrb	r3, [r7, #15]
 800d1aa:	b29a      	uxth	r2, r3
 800d1ac:	88bb      	ldrh	r3, [r7, #4]
 800d1ae:	4413      	add	r3, r2
 800d1b0:	b299      	uxth	r1, r3
 800d1b2:	7bfb      	ldrb	r3, [r7, #15]
 800d1b4:	b29b      	uxth	r3, r3
 800d1b6:	005b      	lsls	r3, r3, #1
 800d1b8:	b29b      	uxth	r3, r3
 800d1ba:	883a      	ldrh	r2, [r7, #0]
 800d1bc:	1ad3      	subs	r3, r2, r3
 800d1be:	b29a      	uxth	r2, r3
 800d1c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d1c4:	b29b      	uxth	r3, r3
 800d1c6:	f000 fa83 	bl	800d6d0 <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 800d1ca:	7bfb      	ldrb	r3, [r7, #15]
 800d1cc:	3301      	adds	r3, #1
 800d1ce:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 800d1d0:	e75f      	b.n	800d092 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 800d1d2:	bf00      	nop
	// done
	return;
 800d1d4:	bf00      	nop
}
 800d1d6:	3714      	adds	r7, #20
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bd90      	pop	{r4, r7, pc}

0800d1dc <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800d1dc:	b590      	push	{r4, r7, lr}
 800d1de:	b089      	sub	sp, #36	; 0x24
 800d1e0:	af02      	add	r7, sp, #8
 800d1e2:	4604      	mov	r4, r0
 800d1e4:	4608      	mov	r0, r1
 800d1e6:	4611      	mov	r1, r2
 800d1e8:	461a      	mov	r2, r3
 800d1ea:	4623      	mov	r3, r4
 800d1ec:	71fb      	strb	r3, [r7, #7]
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	80bb      	strh	r3, [r7, #4]
 800d1f2:	460b      	mov	r3, r1
 800d1f4:	807b      	strh	r3, [r7, #2]
 800d1f6:	4613      	mov	r3, r2
 800d1f8:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 800d1fa:	79fb      	ldrb	r3, [r7, #7]
 800d1fc:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 800d1fe:	7dfb      	ldrb	r3, [r7, #23]
 800d200:	2b1f      	cmp	r3, #31
 800d202:	d802      	bhi.n	800d20a <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 800d204:	2300      	movs	r3, #0
 800d206:	71fb      	strb	r3, [r7, #7]
 800d208:	e002      	b.n	800d210 <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 800d20a:	7dfb      	ldrb	r3, [r7, #23]
 800d20c:	3b20      	subs	r3, #32
 800d20e:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800d210:	2300      	movs	r3, #0
 800d212:	753b      	strb	r3, [r7, #20]
 800d214:	e012      	b.n	800d23c <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 800d216:	7dfa      	ldrb	r2, [r7, #23]
 800d218:	7d38      	ldrb	r0, [r7, #20]
 800d21a:	7d39      	ldrb	r1, [r7, #20]
 800d21c:	4c48      	ldr	r4, [pc, #288]	; (800d340 <ILI9341_Draw_Char+0x164>)
 800d21e:	4613      	mov	r3, r2
 800d220:	005b      	lsls	r3, r3, #1
 800d222:	4413      	add	r3, r2
 800d224:	005b      	lsls	r3, r3, #1
 800d226:	4423      	add	r3, r4
 800d228:	4403      	add	r3, r0
 800d22a:	781a      	ldrb	r2, [r3, #0]
 800d22c:	f107 0318 	add.w	r3, r7, #24
 800d230:	440b      	add	r3, r1
 800d232:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800d236:	7d3b      	ldrb	r3, [r7, #20]
 800d238:	3301      	adds	r3, #1
 800d23a:	753b      	strb	r3, [r7, #20]
 800d23c:	7d3b      	ldrb	r3, [r7, #20]
 800d23e:	2b05      	cmp	r3, #5
 800d240:	d9e9      	bls.n	800d216 <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 800d242:	2300      	movs	r3, #0
 800d244:	757b      	strb	r3, [r7, #21]
 800d246:	e074      	b.n	800d332 <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 800d248:	2300      	movs	r3, #0
 800d24a:	75bb      	strb	r3, [r7, #22]
 800d24c:	e06b      	b.n	800d326 <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 800d24e:	7d7b      	ldrb	r3, [r7, #21]
 800d250:	f107 0218 	add.w	r2, r7, #24
 800d254:	4413      	add	r3, r2
 800d256:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800d25a:	461a      	mov	r2, r3
 800d25c:	7dbb      	ldrb	r3, [r7, #22]
 800d25e:	fa42 f303 	asr.w	r3, r2, r3
 800d262:	f003 0301 	and.w	r3, r3, #1
 800d266:	2b00      	cmp	r3, #0
 800d268:	d02d      	beq.n	800d2c6 <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 800d26a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d26c:	2b01      	cmp	r3, #1
 800d26e:	d10e      	bne.n	800d28e <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 800d270:	7d7b      	ldrb	r3, [r7, #21]
 800d272:	b29a      	uxth	r2, r3
 800d274:	88bb      	ldrh	r3, [r7, #4]
 800d276:	4413      	add	r3, r2
 800d278:	b298      	uxth	r0, r3
 800d27a:	7dbb      	ldrb	r3, [r7, #22]
 800d27c:	b29a      	uxth	r2, r3
 800d27e:	887b      	ldrh	r3, [r7, #2]
 800d280:	4413      	add	r3, r2
 800d282:	b29b      	uxth	r3, r3
 800d284:	883a      	ldrh	r2, [r7, #0]
 800d286:	4619      	mov	r1, r3
 800d288:	f000 fae0 	bl	800d84c <ILI9341_Draw_Pixel>
 800d28c:	e048      	b.n	800d320 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 800d28e:	7d7b      	ldrb	r3, [r7, #21]
 800d290:	b29b      	uxth	r3, r3
 800d292:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d294:	fb12 f303 	smulbb	r3, r2, r3
 800d298:	b29a      	uxth	r2, r3
 800d29a:	88bb      	ldrh	r3, [r7, #4]
 800d29c:	4413      	add	r3, r2
 800d29e:	b298      	uxth	r0, r3
 800d2a0:	7dbb      	ldrb	r3, [r7, #22]
 800d2a2:	b29b      	uxth	r3, r3
 800d2a4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d2a6:	fb12 f303 	smulbb	r3, r2, r3
 800d2aa:	b29a      	uxth	r2, r3
 800d2ac:	887b      	ldrh	r3, [r7, #2]
 800d2ae:	4413      	add	r3, r2
 800d2b0:	b299      	uxth	r1, r3
 800d2b2:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800d2b4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	9301      	str	r3, [sp, #4]
 800d2ba:	883b      	ldrh	r3, [r7, #0]
 800d2bc:	9300      	str	r3, [sp, #0]
 800d2be:	4623      	mov	r3, r4
 800d2c0:	f000 fbfc 	bl	800dabc <ILI9341_Draw_Rectangle>
 800d2c4:	e02c      	b.n	800d320 <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 800d2c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d2c8:	2b01      	cmp	r3, #1
 800d2ca:	d10e      	bne.n	800d2ea <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 800d2cc:	7d7b      	ldrb	r3, [r7, #21]
 800d2ce:	b29a      	uxth	r2, r3
 800d2d0:	88bb      	ldrh	r3, [r7, #4]
 800d2d2:	4413      	add	r3, r2
 800d2d4:	b298      	uxth	r0, r3
 800d2d6:	7dbb      	ldrb	r3, [r7, #22]
 800d2d8:	b29a      	uxth	r2, r3
 800d2da:	887b      	ldrh	r3, [r7, #2]
 800d2dc:	4413      	add	r3, r2
 800d2de:	b29b      	uxth	r3, r3
 800d2e0:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800d2e2:	4619      	mov	r1, r3
 800d2e4:	f000 fab2 	bl	800d84c <ILI9341_Draw_Pixel>
 800d2e8:	e01a      	b.n	800d320 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 800d2ea:	7d7b      	ldrb	r3, [r7, #21]
 800d2ec:	b29b      	uxth	r3, r3
 800d2ee:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d2f0:	fb12 f303 	smulbb	r3, r2, r3
 800d2f4:	b29a      	uxth	r2, r3
 800d2f6:	88bb      	ldrh	r3, [r7, #4]
 800d2f8:	4413      	add	r3, r2
 800d2fa:	b298      	uxth	r0, r3
 800d2fc:	7dbb      	ldrb	r3, [r7, #22]
 800d2fe:	b29b      	uxth	r3, r3
 800d300:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d302:	fb12 f303 	smulbb	r3, r2, r3
 800d306:	b29a      	uxth	r2, r3
 800d308:	887b      	ldrh	r3, [r7, #2]
 800d30a:	4413      	add	r3, r2
 800d30c:	b299      	uxth	r1, r3
 800d30e:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800d310:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d312:	2301      	movs	r3, #1
 800d314:	9301      	str	r3, [sp, #4]
 800d316:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d318:	9300      	str	r3, [sp, #0]
 800d31a:	4623      	mov	r3, r4
 800d31c:	f000 fbce 	bl	800dabc <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 800d320:	7dbb      	ldrb	r3, [r7, #22]
 800d322:	3301      	adds	r3, #1
 800d324:	75bb      	strb	r3, [r7, #22]
 800d326:	7dbb      	ldrb	r3, [r7, #22]
 800d328:	2b07      	cmp	r3, #7
 800d32a:	d990      	bls.n	800d24e <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 800d32c:	7d7b      	ldrb	r3, [r7, #21]
 800d32e:	3301      	adds	r3, #1
 800d330:	757b      	strb	r3, [r7, #21]
 800d332:	7d7b      	ldrb	r3, [r7, #21]
 800d334:	2b05      	cmp	r3, #5
 800d336:	d987      	bls.n	800d248 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 800d338:	bf00      	nop
 800d33a:	371c      	adds	r7, #28
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd90      	pop	{r4, r7, pc}
 800d340:	08011a14 	.word	0x08011a14

0800d344 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800d344:	b590      	push	{r4, r7, lr}
 800d346:	b087      	sub	sp, #28
 800d348:	af02      	add	r7, sp, #8
 800d34a:	60f8      	str	r0, [r7, #12]
 800d34c:	4608      	mov	r0, r1
 800d34e:	4611      	mov	r1, r2
 800d350:	461a      	mov	r2, r3
 800d352:	4603      	mov	r3, r0
 800d354:	817b      	strh	r3, [r7, #10]
 800d356:	460b      	mov	r3, r1
 800d358:	813b      	strh	r3, [r7, #8]
 800d35a:	4613      	mov	r3, r2
 800d35c:	80fb      	strh	r3, [r7, #6]
    /*if(size & 1)
    {
    	size = ((size >> 1) * 2);
    }*/

    while (*Text) {
 800d35e:	e016      	b.n	800d38e <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	1c5a      	adds	r2, r3, #1
 800d364:	60fa      	str	r2, [r7, #12]
 800d366:	7818      	ldrb	r0, [r3, #0]
 800d368:	88fc      	ldrh	r4, [r7, #6]
 800d36a:	893a      	ldrh	r2, [r7, #8]
 800d36c:	8979      	ldrh	r1, [r7, #10]
 800d36e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d370:	9301      	str	r3, [sp, #4]
 800d372:	8c3b      	ldrh	r3, [r7, #32]
 800d374:	9300      	str	r3, [sp, #0]
 800d376:	4623      	mov	r3, r4
 800d378:	f7ff ff30 	bl	800d1dc <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 800d37c:	8c3b      	ldrh	r3, [r7, #32]
 800d37e:	461a      	mov	r2, r3
 800d380:	0052      	lsls	r2, r2, #1
 800d382:	4413      	add	r3, r2
 800d384:	005b      	lsls	r3, r3, #1
 800d386:	b29a      	uxth	r2, r3
 800d388:	897b      	ldrh	r3, [r7, #10]
 800d38a:	4413      	add	r3, r2
 800d38c:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	781b      	ldrb	r3, [r3, #0]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d1e4      	bne.n	800d360 <ILI9341_Draw_Text+0x1c>
    }


}
 800d396:	bf00      	nop
 800d398:	3714      	adds	r7, #20
 800d39a:	46bd      	mov	sp, r7
 800d39c:	bd90      	pop	{r4, r7, pc}
	...

0800d3a0 <ILI9341_FillScreenGradient>:
		GPIOC->ODR |= CS_Pin;
	}
}

void ILI9341_FillScreenGradient()
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b084      	sub	sp, #16
 800d3a4:	af02      	add	r7, sp, #8
	uint16_t x = 0;
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	80bb      	strh	r3, [r7, #4]
	//ILI9341_Draw_Text("Colour gradient", 10, 10, BLACK, 1, WHITE);
	//ILI9341_Draw_Text("Grayscale", 10, 20, BLACK, 1, WHITE);



	for(uint16_t i = 0; i <= (320); i++)
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	80fb      	strh	r3, [r7, #6]
 800d3ae:	e010      	b.n	800d3d2 <ILI9341_FillScreenGradient+0x32>

		uint16_t RGB_color = Red + Green + Blue;
		ILI9341_Draw_Rectangle(i, x, 1, 240, RGB_color, AREA_CHUNK);
*/

	ILI9341_Draw_Rectangle(i, x, 1, 240, (uint16_t)fade_log_seq_data_table[i], AREA_CHUNK);
 800d3b0:	88fb      	ldrh	r3, [r7, #6]
 800d3b2:	4a0c      	ldr	r2, [pc, #48]	; (800d3e4 <ILI9341_FillScreenGradient+0x44>)
 800d3b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3b8:	b29b      	uxth	r3, r3
 800d3ba:	88b9      	ldrh	r1, [r7, #4]
 800d3bc:	88f8      	ldrh	r0, [r7, #6]
 800d3be:	2204      	movs	r2, #4
 800d3c0:	9201      	str	r2, [sp, #4]
 800d3c2:	9300      	str	r3, [sp, #0]
 800d3c4:	23f0      	movs	r3, #240	; 0xf0
 800d3c6:	2201      	movs	r2, #1
 800d3c8:	f000 fb78 	bl	800dabc <ILI9341_Draw_Rectangle>
	for(uint16_t i = 0; i <= (320); i++)
 800d3cc:	88fb      	ldrh	r3, [r7, #6]
 800d3ce:	3301      	adds	r3, #1
 800d3d0:	80fb      	strh	r3, [r7, #6]
 800d3d2:	88fb      	ldrh	r3, [r7, #6]
 800d3d4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800d3d8:	d9ea      	bls.n	800d3b0 <ILI9341_FillScreenGradient+0x10>

	}
}
 800d3da:	bf00      	nop
 800d3dc:	3708      	adds	r7, #8
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}
 800d3e2:	bf00      	nop
 800d3e4:	20000cc0 	.word	0x20000cc0

0800d3e8 <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	af00      	add	r7, sp, #0

	_LCD_Enable();
 800d3ec:	f000 fc3a 	bl	800dc64 <_LCD_Enable>
	ILI9341_SPI_Init();
 800d3f0:	f000 f908 	bl	800d604 <ILI9341_SPI_Init>
	_LCD_Reset();
 800d3f4:	f000 fc46 	bl	800dc84 <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 800d3f8:	2001      	movs	r0, #1
 800d3fa:	f000 fd11 	bl	800de20 <_LCD_SendCommand>
	HAL_Delay(2000);
 800d3fe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800d402:	f7fa fcf9 	bl	8007df8 <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 800d406:	20cb      	movs	r0, #203	; 0xcb
 800d408:	f000 fd0a 	bl	800de20 <_LCD_SendCommand>
	_LCD_SendData(0x39);
 800d40c:	2039      	movs	r0, #57	; 0x39
 800d40e:	f000 fd39 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(0x2C);
 800d412:	202c      	movs	r0, #44	; 0x2c
 800d414:	f000 fd36 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(0x00);
 800d418:	2000      	movs	r0, #0
 800d41a:	f000 fd33 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(0x34);
 800d41e:	2034      	movs	r0, #52	; 0x34
 800d420:	f000 fd30 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(0x02);
 800d424:	2002      	movs	r0, #2
 800d426:	f000 fd2d 	bl	800de84 <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 800d42a:	20cf      	movs	r0, #207	; 0xcf
 800d42c:	f000 fcf8 	bl	800de20 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800d430:	2000      	movs	r0, #0
 800d432:	f000 fd27 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800d436:	20c1      	movs	r0, #193	; 0xc1
 800d438:	f000 fd24 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(0x30);
 800d43c:	2030      	movs	r0, #48	; 0x30
 800d43e:	f000 fd21 	bl	800de84 <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 800d442:	20e8      	movs	r0, #232	; 0xe8
 800d444:	f000 fcec 	bl	800de20 <_LCD_SendCommand>
	_LCD_SendData(0x85);
 800d448:	2085      	movs	r0, #133	; 0x85
 800d44a:	f000 fd1b 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(0x00);
 800d44e:	2000      	movs	r0, #0
 800d450:	f000 fd18 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(0x78);
 800d454:	2078      	movs	r0, #120	; 0x78
 800d456:	f000 fd15 	bl	800de84 <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 800d45a:	20ea      	movs	r0, #234	; 0xea
 800d45c:	f000 fce0 	bl	800de20 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800d460:	2000      	movs	r0, #0
 800d462:	f000 fd0f 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(0x00);
 800d466:	2000      	movs	r0, #0
 800d468:	f000 fd0c 	bl	800de84 <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 800d46c:	20ed      	movs	r0, #237	; 0xed
 800d46e:	f000 fcd7 	bl	800de20 <_LCD_SendCommand>
	_LCD_SendData(0x64);
 800d472:	2064      	movs	r0, #100	; 0x64
 800d474:	f000 fd06 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(0x03);
 800d478:	2003      	movs	r0, #3
 800d47a:	f000 fd03 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(0x12);
 800d47e:	2012      	movs	r0, #18
 800d480:	f000 fd00 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(0x81);
 800d484:	2081      	movs	r0, #129	; 0x81
 800d486:	f000 fcfd 	bl	800de84 <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 800d48a:	20f7      	movs	r0, #247	; 0xf7
 800d48c:	f000 fcc8 	bl	800de20 <_LCD_SendCommand>
	_LCD_SendData(0x20);
 800d490:	2020      	movs	r0, #32
 800d492:	f000 fcf7 	bl	800de84 <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 800d496:	20c0      	movs	r0, #192	; 0xc0
 800d498:	f000 fcc2 	bl	800de20 <_LCD_SendCommand>
	_LCD_SendData(0x23);
 800d49c:	2023      	movs	r0, #35	; 0x23
 800d49e:	f000 fcf1 	bl	800de84 <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 800d4a2:	20c1      	movs	r0, #193	; 0xc1
 800d4a4:	f000 fcbc 	bl	800de20 <_LCD_SendCommand>
	_LCD_SendData(0x10);
 800d4a8:	2010      	movs	r0, #16
 800d4aa:	f000 fceb 	bl	800de84 <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 800d4ae:	20c5      	movs	r0, #197	; 0xc5
 800d4b0:	f000 fcb6 	bl	800de20 <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 800d4b4:	203e      	movs	r0, #62	; 0x3e
 800d4b6:	f000 fce5 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(0x28);
 800d4ba:	2028      	movs	r0, #40	; 0x28
 800d4bc:	f000 fce2 	bl	800de84 <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 800d4c0:	20c7      	movs	r0, #199	; 0xc7
 800d4c2:	f000 fcad 	bl	800de20 <_LCD_SendCommand>
	_LCD_SendData(0x86);
 800d4c6:	2086      	movs	r0, #134	; 0x86
 800d4c8:	f000 fcdc 	bl	800de84 <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 800d4cc:	2036      	movs	r0, #54	; 0x36
 800d4ce:	f000 fca7 	bl	800de20 <_LCD_SendCommand>
	_LCD_SendData(0x48);
 800d4d2:	2048      	movs	r0, #72	; 0x48
 800d4d4:	f000 fcd6 	bl	800de84 <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 800d4d8:	203a      	movs	r0, #58	; 0x3a
 800d4da:	f000 fca1 	bl	800de20 <_LCD_SendCommand>
	_LCD_SendData(0x55);
 800d4de:	2055      	movs	r0, #85	; 0x55
 800d4e0:	f000 fcd0 	bl	800de84 <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 800d4e4:	20b1      	movs	r0, #177	; 0xb1
 800d4e6:	f000 fc9b 	bl	800de20 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800d4ea:	2000      	movs	r0, #0
 800d4ec:	f000 fcca 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(0x18);
 800d4f0:	2018      	movs	r0, #24
 800d4f2:	f000 fcc7 	bl	800de84 <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 800d4f6:	20b6      	movs	r0, #182	; 0xb6
 800d4f8:	f000 fc92 	bl	800de20 <_LCD_SendCommand>
	_LCD_SendData(0x08);
 800d4fc:	2008      	movs	r0, #8
 800d4fe:	f000 fcc1 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(0x82);
 800d502:	2082      	movs	r0, #130	; 0x82
 800d504:	f000 fcbe 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(0x27);
 800d508:	2027      	movs	r0, #39	; 0x27
 800d50a:	f000 fcbb 	bl	800de84 <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 800d50e:	20f2      	movs	r0, #242	; 0xf2
 800d510:	f000 fc86 	bl	800de20 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800d514:	2000      	movs	r0, #0
 800d516:	f000 fcb5 	bl	800de84 <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 800d51a:	2026      	movs	r0, #38	; 0x26
 800d51c:	f000 fc80 	bl	800de20 <_LCD_SendCommand>
	_LCD_SendData(0x01);
 800d520:	2001      	movs	r0, #1
 800d522:	f000 fcaf 	bl	800de84 <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 800d526:	20e0      	movs	r0, #224	; 0xe0
 800d528:	f000 fc7a 	bl	800de20 <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 800d52c:	200f      	movs	r0, #15
 800d52e:	f000 fca9 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(0x31);
 800d532:	2031      	movs	r0, #49	; 0x31
 800d534:	f000 fca6 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(0x2B);
 800d538:	202b      	movs	r0, #43	; 0x2b
 800d53a:	f000 fca3 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800d53e:	200c      	movs	r0, #12
 800d540:	f000 fca0 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800d544:	200e      	movs	r0, #14
 800d546:	f000 fc9d 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(0x08);
 800d54a:	2008      	movs	r0, #8
 800d54c:	f000 fc9a 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(0x4E);
 800d550:	204e      	movs	r0, #78	; 0x4e
 800d552:	f000 fc97 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(0xF1);
 800d556:	20f1      	movs	r0, #241	; 0xf1
 800d558:	f000 fc94 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(0x37);
 800d55c:	2037      	movs	r0, #55	; 0x37
 800d55e:	f000 fc91 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(0x07);
 800d562:	2007      	movs	r0, #7
 800d564:	f000 fc8e 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(0x10);
 800d568:	2010      	movs	r0, #16
 800d56a:	f000 fc8b 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(0x03);
 800d56e:	2003      	movs	r0, #3
 800d570:	f000 fc88 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800d574:	200e      	movs	r0, #14
 800d576:	f000 fc85 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(0x09);
 800d57a:	2009      	movs	r0, #9
 800d57c:	f000 fc82 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(0x00);
 800d580:	2000      	movs	r0, #0
 800d582:	f000 fc7f 	bl	800de84 <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 800d586:	20e1      	movs	r0, #225	; 0xe1
 800d588:	f000 fc4a 	bl	800de20 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800d58c:	2000      	movs	r0, #0
 800d58e:	f000 fc79 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800d592:	200e      	movs	r0, #14
 800d594:	f000 fc76 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(0x14);
 800d598:	2014      	movs	r0, #20
 800d59a:	f000 fc73 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(0x03);
 800d59e:	2003      	movs	r0, #3
 800d5a0:	f000 fc70 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(0x11);
 800d5a4:	2011      	movs	r0, #17
 800d5a6:	f000 fc6d 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(0x07);
 800d5aa:	2007      	movs	r0, #7
 800d5ac:	f000 fc6a 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(0x31);
 800d5b0:	2031      	movs	r0, #49	; 0x31
 800d5b2:	f000 fc67 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800d5b6:	20c1      	movs	r0, #193	; 0xc1
 800d5b8:	f000 fc64 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(0x48);
 800d5bc:	2048      	movs	r0, #72	; 0x48
 800d5be:	f000 fc61 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(0x08);
 800d5c2:	2008      	movs	r0, #8
 800d5c4:	f000 fc5e 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800d5c8:	200f      	movs	r0, #15
 800d5ca:	f000 fc5b 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800d5ce:	200c      	movs	r0, #12
 800d5d0:	f000 fc58 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(0x31);
 800d5d4:	2031      	movs	r0, #49	; 0x31
 800d5d6:	f000 fc55 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(0x36);
 800d5da:	2036      	movs	r0, #54	; 0x36
 800d5dc:	f000 fc52 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800d5e0:	200f      	movs	r0, #15
 800d5e2:	f000 fc4f 	bl	800de84 <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 800d5e6:	2011      	movs	r0, #17
 800d5e8:	f000 fc1a 	bl	800de20 <_LCD_SendCommand>
	HAL_Delay(240);
 800d5ec:	20f0      	movs	r0, #240	; 0xf0
 800d5ee:	f7fa fc03 	bl	8007df8 <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 800d5f2:	2029      	movs	r0, #41	; 0x29
 800d5f4:	f000 fc14 	bl	800de20 <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800d5f8:	2000      	movs	r0, #0
 800d5fa:	f000 fae5 	bl	800dbc8 <ILI9341_Set_Rotation>
}
 800d5fe:	bf00      	nop
 800d600:	bd80      	pop	{r7, pc}
	...

0800d604 <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 800d604:	b480      	push	{r7}
 800d606:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d608:	4b0b      	ldr	r3, [pc, #44]	; (800d638 <ILI9341_SPI_Init+0x34>)
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d610:	2b40      	cmp	r3, #64	; 0x40
 800d612:	d005      	beq.n	800d620 <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 800d614:	4b08      	ldr	r3, [pc, #32]	; (800d638 <ILI9341_SPI_Init+0x34>)
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	4a07      	ldr	r2, [pc, #28]	; (800d638 <ILI9341_SPI_Init+0x34>)
 800d61a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d61e:	6013      	str	r3, [r2, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d620:	4b06      	ldr	r3, [pc, #24]	; (800d63c <ILI9341_SPI_Init+0x38>)
 800d622:	695b      	ldr	r3, [r3, #20]
 800d624:	4a05      	ldr	r2, [pc, #20]	; (800d63c <ILI9341_SPI_Init+0x38>)
 800d626:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d62a:	6153      	str	r3, [r2, #20]
}
 800d62c:	bf00      	nop
 800d62e:	46bd      	mov	sp, r7
 800d630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d634:	4770      	bx	lr
 800d636:	bf00      	nop
 800d638:	40003c00 	.word	0x40003c00
 800d63c:	48000400 	.word	0x48000400

0800d640 <ILI9341_Draw_Horizontal_Line>:
 *	Draw horizontal line
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 800d640:	b590      	push	{r4, r7, lr}
 800d642:	b085      	sub	sp, #20
 800d644:	af02      	add	r7, sp, #8
 800d646:	4604      	mov	r4, r0
 800d648:	4608      	mov	r0, r1
 800d64a:	4611      	mov	r1, r2
 800d64c:	461a      	mov	r2, r3
 800d64e:	4623      	mov	r3, r4
 800d650:	80fb      	strh	r3, [r7, #6]
 800d652:	4603      	mov	r3, r0
 800d654:	80bb      	strh	r3, [r7, #4]
 800d656:	460b      	mov	r3, r1
 800d658:	807b      	strh	r3, [r7, #2]
 800d65a:	4613      	mov	r3, r2
 800d65c:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800d65e:	4b1a      	ldr	r3, [pc, #104]	; (800d6c8 <ILI9341_Draw_Horizontal_Line+0x88>)
 800d660:	881b      	ldrh	r3, [r3, #0]
 800d662:	b29b      	uxth	r3, r3
 800d664:	88fa      	ldrh	r2, [r7, #6]
 800d666:	429a      	cmp	r2, r3
 800d668:	d229      	bcs.n	800d6be <ILI9341_Draw_Horizontal_Line+0x7e>
 800d66a:	4b18      	ldr	r3, [pc, #96]	; (800d6cc <ILI9341_Draw_Horizontal_Line+0x8c>)
 800d66c:	881b      	ldrh	r3, [r3, #0]
 800d66e:	b29b      	uxth	r3, r3
 800d670:	88ba      	ldrh	r2, [r7, #4]
 800d672:	429a      	cmp	r2, r3
 800d674:	d223      	bcs.n	800d6be <ILI9341_Draw_Horizontal_Line+0x7e>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 800d676:	88fa      	ldrh	r2, [r7, #6]
 800d678:	887b      	ldrh	r3, [r7, #2]
 800d67a:	4413      	add	r3, r2
 800d67c:	3b01      	subs	r3, #1
 800d67e:	4a12      	ldr	r2, [pc, #72]	; (800d6c8 <ILI9341_Draw_Horizontal_Line+0x88>)
 800d680:	8812      	ldrh	r2, [r2, #0]
 800d682:	b292      	uxth	r2, r2
 800d684:	4293      	cmp	r3, r2
 800d686:	db05      	blt.n	800d694 <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 800d688:	4b0f      	ldr	r3, [pc, #60]	; (800d6c8 <ILI9341_Draw_Horizontal_Line+0x88>)
 800d68a:	881b      	ldrh	r3, [r3, #0]
 800d68c:	b29a      	uxth	r2, r3
 800d68e:	88fb      	ldrh	r3, [r7, #6]
 800d690:	1ad3      	subs	r3, r2, r3
 800d692:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(	xpos,
							ypos,
							(xpos + width) - 1,
 800d694:	88fa      	ldrh	r2, [r7, #6]
 800d696:	887b      	ldrh	r3, [r7, #2]
 800d698:	4413      	add	r3, r2
 800d69a:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800d69c:	3b01      	subs	r3, #1
 800d69e:	b29a      	uxth	r2, r3
 800d6a0:	88bb      	ldrh	r3, [r7, #4]
 800d6a2:	88b9      	ldrh	r1, [r7, #4]
 800d6a4:	88f8      	ldrh	r0, [r7, #6]
 800d6a6:	f000 f85b 	bl	800d760 <ILI9341_Set_Frame>
							ypos);

	_LCD_Write_Frame(xpos, ypos, colour, width, LINE_CHUNK);
 800d6aa:	887c      	ldrh	r4, [r7, #2]
 800d6ac:	883a      	ldrh	r2, [r7, #0]
 800d6ae:	88b9      	ldrh	r1, [r7, #4]
 800d6b0:	88f8      	ldrh	r0, [r7, #6]
 800d6b2:	2303      	movs	r3, #3
 800d6b4:	9300      	str	r3, [sp, #0]
 800d6b6:	4623      	mov	r3, r4
 800d6b8:	f000 fb02 	bl	800dcc0 <_LCD_Write_Frame>
 800d6bc:	e000      	b.n	800d6c0 <ILI9341_Draw_Horizontal_Line+0x80>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800d6be:	bf00      	nop
}
 800d6c0:	370c      	adds	r7, #12
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	bd90      	pop	{r4, r7, pc}
 800d6c6:	bf00      	nop
 800d6c8:	20000cba 	.word	0x20000cba
 800d6cc:	20000cb8 	.word	0x20000cb8

0800d6d0 <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 800d6d0:	b590      	push	{r4, r7, lr}
 800d6d2:	b085      	sub	sp, #20
 800d6d4:	af02      	add	r7, sp, #8
 800d6d6:	4604      	mov	r4, r0
 800d6d8:	4608      	mov	r0, r1
 800d6da:	4611      	mov	r1, r2
 800d6dc:	461a      	mov	r2, r3
 800d6de:	4623      	mov	r3, r4
 800d6e0:	80fb      	strh	r3, [r7, #6]
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	80bb      	strh	r3, [r7, #4]
 800d6e6:	460b      	mov	r3, r1
 800d6e8:	807b      	strh	r3, [r7, #2]
 800d6ea:	4613      	mov	r3, r2
 800d6ec:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800d6ee:	4b1a      	ldr	r3, [pc, #104]	; (800d758 <ILI9341_Draw_Vertical_Line+0x88>)
 800d6f0:	881b      	ldrh	r3, [r3, #0]
 800d6f2:	b29b      	uxth	r3, r3
 800d6f4:	88fa      	ldrh	r2, [r7, #6]
 800d6f6:	429a      	cmp	r2, r3
 800d6f8:	d229      	bcs.n	800d74e <ILI9341_Draw_Vertical_Line+0x7e>
 800d6fa:	4b18      	ldr	r3, [pc, #96]	; (800d75c <ILI9341_Draw_Vertical_Line+0x8c>)
 800d6fc:	881b      	ldrh	r3, [r3, #0]
 800d6fe:	b29b      	uxth	r3, r3
 800d700:	88ba      	ldrh	r2, [r7, #4]
 800d702:	429a      	cmp	r2, r3
 800d704:	d223      	bcs.n	800d74e <ILI9341_Draw_Vertical_Line+0x7e>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 800d706:	88ba      	ldrh	r2, [r7, #4]
 800d708:	887b      	ldrh	r3, [r7, #2]
 800d70a:	4413      	add	r3, r2
 800d70c:	3b01      	subs	r3, #1
 800d70e:	4a13      	ldr	r2, [pc, #76]	; (800d75c <ILI9341_Draw_Vertical_Line+0x8c>)
 800d710:	8812      	ldrh	r2, [r2, #0]
 800d712:	b292      	uxth	r2, r2
 800d714:	4293      	cmp	r3, r2
 800d716:	db05      	blt.n	800d724 <ILI9341_Draw_Vertical_Line+0x54>
		{
			height= LCD_HEIGHT - ypos;
 800d718:	4b10      	ldr	r3, [pc, #64]	; (800d75c <ILI9341_Draw_Vertical_Line+0x8c>)
 800d71a:	881b      	ldrh	r3, [r3, #0]
 800d71c:	b29a      	uxth	r2, r3
 800d71e:	88bb      	ldrh	r3, [r7, #4]
 800d720:	1ad3      	subs	r3, r2, r3
 800d722:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 800d724:	88ba      	ldrh	r2, [r7, #4]
 800d726:	887b      	ldrh	r3, [r7, #2]
 800d728:	4413      	add	r3, r2
 800d72a:	b29b      	uxth	r3, r3
 800d72c:	3b01      	subs	r3, #1
 800d72e:	b29b      	uxth	r3, r3
 800d730:	88fa      	ldrh	r2, [r7, #6]
 800d732:	88b9      	ldrh	r1, [r7, #4]
 800d734:	88f8      	ldrh	r0, [r7, #6]
 800d736:	f000 f813 	bl	800d760 <ILI9341_Set_Frame>
	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 800d73a:	887c      	ldrh	r4, [r7, #2]
 800d73c:	883a      	ldrh	r2, [r7, #0]
 800d73e:	88b9      	ldrh	r1, [r7, #4]
 800d740:	88f8      	ldrh	r0, [r7, #6]
 800d742:	2303      	movs	r3, #3
 800d744:	9300      	str	r3, [sp, #0]
 800d746:	4623      	mov	r3, r4
 800d748:	f000 faba 	bl	800dcc0 <_LCD_Write_Frame>
 800d74c:	e000      	b.n	800d750 <ILI9341_Draw_Vertical_Line+0x80>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800d74e:	bf00      	nop
}
 800d750:	370c      	adds	r7, #12
 800d752:	46bd      	mov	sp, r7
 800d754:	bd90      	pop	{r4, r7, pc}
 800d756:	bf00      	nop
 800d758:	20000cba 	.word	0x20000cba
 800d75c:	20000cb8 	.word	0x20000cb8

0800d760 <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 800d760:	b590      	push	{r4, r7, lr}
 800d762:	b083      	sub	sp, #12
 800d764:	af00      	add	r7, sp, #0
 800d766:	4604      	mov	r4, r0
 800d768:	4608      	mov	r0, r1
 800d76a:	4611      	mov	r1, r2
 800d76c:	461a      	mov	r2, r3
 800d76e:	4623      	mov	r3, r4
 800d770:	80fb      	strh	r3, [r7, #6]
 800d772:	4603      	mov	r3, r0
 800d774:	80bb      	strh	r3, [r7, #4]
 800d776:	460b      	mov	r3, r1
 800d778:	807b      	strh	r3, [r7, #2]
 800d77a:	4613      	mov	r3, r2
 800d77c:	803b      	strh	r3, [r7, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 800d77e:	202a      	movs	r0, #42	; 0x2a
 800d780:	f000 fb4e 	bl	800de20 <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 800d784:	88fb      	ldrh	r3, [r7, #6]
 800d786:	0a1b      	lsrs	r3, r3, #8
 800d788:	b29b      	uxth	r3, r3
 800d78a:	b2db      	uxtb	r3, r3
 800d78c:	4618      	mov	r0, r3
 800d78e:	f000 fb79 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(sc);
 800d792:	88fb      	ldrh	r3, [r7, #6]
 800d794:	b2db      	uxtb	r3, r3
 800d796:	4618      	mov	r0, r3
 800d798:	f000 fb74 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 800d79c:	887b      	ldrh	r3, [r7, #2]
 800d79e:	0a1b      	lsrs	r3, r3, #8
 800d7a0:	b29b      	uxth	r3, r3
 800d7a2:	b2db      	uxtb	r3, r3
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	f000 fb6d 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(ec);
 800d7aa:	887b      	ldrh	r3, [r7, #2]
 800d7ac:	b2db      	uxtb	r3, r3
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f000 fb68 	bl	800de84 <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 800d7b4:	202b      	movs	r0, #43	; 0x2b
 800d7b6:	f000 fb33 	bl	800de20 <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 800d7ba:	88bb      	ldrh	r3, [r7, #4]
 800d7bc:	0a1b      	lsrs	r3, r3, #8
 800d7be:	b29b      	uxth	r3, r3
 800d7c0:	b2db      	uxtb	r3, r3
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f000 fb5e 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(sp);
 800d7c8:	88bb      	ldrh	r3, [r7, #4]
 800d7ca:	b2db      	uxtb	r3, r3
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	f000 fb59 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 800d7d2:	883b      	ldrh	r3, [r7, #0]
 800d7d4:	0a1b      	lsrs	r3, r3, #8
 800d7d6:	b29b      	uxth	r3, r3
 800d7d8:	b2db      	uxtb	r3, r3
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f000 fb52 	bl	800de84 <_LCD_SendData>
	_LCD_SendData(ep);
 800d7e0:	883b      	ldrh	r3, [r7, #0]
 800d7e2:	b2db      	uxtb	r3, r3
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	f000 fb4d 	bl	800de84 <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 800d7ea:	202c      	movs	r0, #44	; 0x2c
 800d7ec:	f000 fb18 	bl	800de20 <_LCD_SendCommand>
}
 800d7f0:	bf00      	nop
 800d7f2:	370c      	adds	r7, #12
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd90      	pop	{r4, r7, pc}

0800d7f8 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b084      	sub	sp, #16
 800d7fc:	af02      	add	r7, sp, #8
 800d7fe:	4603      	mov	r3, r0
 800d800:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 800d802:	4b10      	ldr	r3, [pc, #64]	; (800d844 <ILI9341_Fill_Screen+0x4c>)
 800d804:	881b      	ldrh	r3, [r3, #0]
 800d806:	b29a      	uxth	r2, r3
 800d808:	4b0f      	ldr	r3, [pc, #60]	; (800d848 <ILI9341_Fill_Screen+0x50>)
 800d80a:	881b      	ldrh	r3, [r3, #0]
 800d80c:	b29b      	uxth	r3, r3
 800d80e:	2100      	movs	r1, #0
 800d810:	2000      	movs	r0, #0
 800d812:	f7ff ffa5 	bl	800d760 <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 800d816:	4b0b      	ldr	r3, [pc, #44]	; (800d844 <ILI9341_Fill_Screen+0x4c>)
 800d818:	881b      	ldrh	r3, [r3, #0]
 800d81a:	b29b      	uxth	r3, r3
 800d81c:	461a      	mov	r2, r3
 800d81e:	4b0a      	ldr	r3, [pc, #40]	; (800d848 <ILI9341_Fill_Screen+0x50>)
 800d820:	881b      	ldrh	r3, [r3, #0]
 800d822:	b29b      	uxth	r3, r3
 800d824:	fb03 f302 	mul.w	r3, r3, r2
 800d828:	4619      	mov	r1, r3
 800d82a:	88fa      	ldrh	r2, [r7, #6]
 800d82c:	2304      	movs	r3, #4
 800d82e:	9300      	str	r3, [sp, #0]
 800d830:	460b      	mov	r3, r1
 800d832:	2100      	movs	r1, #0
 800d834:	2000      	movs	r0, #0
 800d836:	f000 fa43 	bl	800dcc0 <_LCD_Write_Frame>
}
 800d83a:	bf00      	nop
 800d83c:	3708      	adds	r7, #8
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}
 800d842:	bf00      	nop
 800d844:	20000cba 	.word	0x20000cba
 800d848:	20000cb8 	.word	0x20000cb8

0800d84c <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b08c      	sub	sp, #48	; 0x30
 800d850:	af00      	add	r7, sp, #0
 800d852:	4603      	mov	r3, r0
 800d854:	80fb      	strh	r3, [r7, #6]
 800d856:	460b      	mov	r3, r1
 800d858:	80bb      	strh	r3, [r7, #4]
 800d85a:	4613      	mov	r3, r2
 800d85c:	807b      	strh	r3, [r7, #2]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800d85e:	4b94      	ldr	r3, [pc, #592]	; (800dab0 <ILI9341_Draw_Pixel+0x264>)
 800d860:	881b      	ldrh	r3, [r3, #0]
 800d862:	b29b      	uxth	r3, r3
 800d864:	88fa      	ldrh	r2, [r7, #6]
 800d866:	429a      	cmp	r2, r3
 800d868:	f080 811e 	bcs.w	800daa8 <ILI9341_Draw_Pixel+0x25c>
 800d86c:	4b91      	ldr	r3, [pc, #580]	; (800dab4 <ILI9341_Draw_Pixel+0x268>)
 800d86e:	881b      	ldrh	r3, [r3, #0]
 800d870:	b29b      	uxth	r3, r3
 800d872:	88ba      	ldrh	r2, [r7, #4]
 800d874:	429a      	cmp	r2, r3
 800d876:	f080 8117 	bcs.w	800daa8 <ILI9341_Draw_Pixel+0x25c>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800d87a:	4b8f      	ldr	r3, [pc, #572]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800d87c:	695b      	ldr	r3, [r3, #20]
 800d87e:	4a8e      	ldr	r2, [pc, #568]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800d880:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d884:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d886:	4b8c      	ldr	r3, [pc, #560]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800d888:	695b      	ldr	r3, [r3, #20]
 800d88a:	4a8b      	ldr	r2, [pc, #556]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800d88c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d890:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2A, 0, 0);
 800d892:	2200      	movs	r2, #0
 800d894:	2100      	movs	r1, #0
 800d896:	202a      	movs	r0, #42	; 0x2a
 800d898:	f000 fb26 	bl	800dee8 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800d89c:	2300      	movs	r3, #0
 800d89e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d8a0:	e008      	b.n	800d8b4 <ILI9341_Draw_Pixel+0x68>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d8a2:	4b85      	ldr	r3, [pc, #532]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800d8a4:	695b      	ldr	r3, [r3, #20]
 800d8a6:	4a84      	ldr	r2, [pc, #528]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800d8a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d8ac:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800d8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b0:	3301      	adds	r3, #1
 800d8b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b6:	2b02      	cmp	r3, #2
 800d8b8:	ddf3      	ble.n	800d8a2 <ILI9341_Draw_Pixel+0x56>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800d8ba:	4b7f      	ldr	r3, [pc, #508]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800d8bc:	695b      	ldr	r3, [r3, #20]
 800d8be:	4a7e      	ldr	r2, [pc, #504]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800d8c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8c4:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800d8c6:	4b7c      	ldr	r3, [pc, #496]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800d8c8:	695b      	ldr	r3, [r3, #20]
 800d8ca:	4a7b      	ldr	r2, [pc, #492]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800d8cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8d0:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d8d2:	4b79      	ldr	r3, [pc, #484]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800d8d4:	695b      	ldr	r3, [r3, #20]
 800d8d6:	4a78      	ldr	r2, [pc, #480]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800d8d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d8dc:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] =
 800d8de:	88fb      	ldrh	r3, [r7, #6]
 800d8e0:	0a1b      	lsrs	r3, r3, #8
 800d8e2:	b29b      	uxth	r3, r3
 800d8e4:	b2db      	uxtb	r3, r3
 800d8e6:	753b      	strb	r3, [r7, #20]
 800d8e8:	88fb      	ldrh	r3, [r7, #6]
 800d8ea:	b2db      	uxtb	r3, r3
 800d8ec:	757b      	strb	r3, [r7, #21]
	{
			x >> 8,
			x,
			(x + 1) >> 8,
 800d8ee:	88fb      	ldrh	r3, [r7, #6]
 800d8f0:	3301      	adds	r3, #1
 800d8f2:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer[4] =
 800d8f4:	b2db      	uxtb	r3, r3
 800d8f6:	75bb      	strb	r3, [r7, #22]
			(x + 1)
 800d8f8:	88fb      	ldrh	r3, [r7, #6]
 800d8fa:	b2db      	uxtb	r3, r3
 800d8fc:	3301      	adds	r3, #1
 800d8fe:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer[4] =
 800d900:	75fb      	strb	r3, [r7, #23]
	};

	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 800d902:	f107 0014 	add.w	r0, r7, #20
 800d906:	230a      	movs	r3, #10
 800d908:	2200      	movs	r2, #0
 800d90a:	2104      	movs	r1, #4
 800d90c:	f000 fb1e 	bl	800df4c <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800d910:	2300      	movs	r3, #0
 800d912:	62bb      	str	r3, [r7, #40]	; 0x28
 800d914:	e008      	b.n	800d928 <ILI9341_Draw_Pixel+0xdc>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d916:	4b68      	ldr	r3, [pc, #416]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800d918:	695b      	ldr	r3, [r3, #20]
 800d91a:	4a67      	ldr	r2, [pc, #412]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800d91c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d920:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800d922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d924:	3301      	adds	r3, #1
 800d926:	62bb      	str	r3, [r7, #40]	; 0x28
 800d928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d92a:	2b02      	cmp	r3, #2
 800d92c:	ddf3      	ble.n	800d916 <ILI9341_Draw_Pixel+0xca>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800d92e:	4b62      	ldr	r3, [pc, #392]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800d930:	695b      	ldr	r3, [r3, #20]
 800d932:	4a61      	ldr	r2, [pc, #388]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800d934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d938:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800d93a:	4b5f      	ldr	r3, [pc, #380]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800d93c:	695b      	ldr	r3, [r3, #20]
 800d93e:	4a5e      	ldr	r2, [pc, #376]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800d940:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d944:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d946:	4b5c      	ldr	r3, [pc, #368]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800d948:	695b      	ldr	r3, [r3, #20]
 800d94a:	4a5b      	ldr	r2, [pc, #364]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800d94c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d950:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2B, 0, 0);
 800d952:	2200      	movs	r2, #0
 800d954:	2100      	movs	r1, #0
 800d956:	202b      	movs	r0, #43	; 0x2b
 800d958:	f000 fac6 	bl	800dee8 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800d95c:	2300      	movs	r3, #0
 800d95e:	627b      	str	r3, [r7, #36]	; 0x24
 800d960:	e008      	b.n	800d974 <ILI9341_Draw_Pixel+0x128>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d962:	4b55      	ldr	r3, [pc, #340]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800d964:	695b      	ldr	r3, [r3, #20]
 800d966:	4a54      	ldr	r2, [pc, #336]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800d968:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d96c:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800d96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d970:	3301      	adds	r3, #1
 800d972:	627b      	str	r3, [r7, #36]	; 0x24
 800d974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d976:	2b02      	cmp	r3, #2
 800d978:	ddf3      	ble.n	800d962 <ILI9341_Draw_Pixel+0x116>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800d97a:	4b4f      	ldr	r3, [pc, #316]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800d97c:	695b      	ldr	r3, [r3, #20]
 800d97e:	4a4e      	ldr	r2, [pc, #312]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800d980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d984:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800d986:	4b4c      	ldr	r3, [pc, #304]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800d988:	695b      	ldr	r3, [r3, #20]
 800d98a:	4a4b      	ldr	r2, [pc, #300]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800d98c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d990:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d992:	4b49      	ldr	r3, [pc, #292]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800d994:	695b      	ldr	r3, [r3, #20]
 800d996:	4a48      	ldr	r2, [pc, #288]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800d998:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d99c:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] =
 800d99e:	88bb      	ldrh	r3, [r7, #4]
 800d9a0:	0a1b      	lsrs	r3, r3, #8
 800d9a2:	b29b      	uxth	r3, r3
 800d9a4:	b2db      	uxtb	r3, r3
 800d9a6:	743b      	strb	r3, [r7, #16]
 800d9a8:	88bb      	ldrh	r3, [r7, #4]
 800d9aa:	b2db      	uxtb	r3, r3
 800d9ac:	747b      	strb	r3, [r7, #17]
	{
			y >> 8,
			y,
			(y + 1) >> 8,
 800d9ae:	88bb      	ldrh	r3, [r7, #4]
 800d9b0:	3301      	adds	r3, #1
 800d9b2:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer1[4] =
 800d9b4:	b2db      	uxtb	r3, r3
 800d9b6:	74bb      	strb	r3, [r7, #18]
			(y + 1)
 800d9b8:	88bb      	ldrh	r3, [r7, #4]
 800d9ba:	b2db      	uxtb	r3, r3
 800d9bc:	3301      	adds	r3, #1
 800d9be:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer1[4] =
 800d9c0:	74fb      	strb	r3, [r7, #19]
	};

	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 800d9c2:	f107 0010 	add.w	r0, r7, #16
 800d9c6:	230a      	movs	r3, #10
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	2104      	movs	r1, #4
 800d9cc:	f000 fabe 	bl	800df4c <_SPI_SendByteMultiByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	623b      	str	r3, [r7, #32]
 800d9d4:	e008      	b.n	800d9e8 <ILI9341_Draw_Pixel+0x19c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d9d6:	4b38      	ldr	r3, [pc, #224]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800d9d8:	695b      	ldr	r3, [r3, #20]
 800d9da:	4a37      	ldr	r2, [pc, #220]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800d9dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d9e0:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800d9e2:	6a3b      	ldr	r3, [r7, #32]
 800d9e4:	3301      	adds	r3, #1
 800d9e6:	623b      	str	r3, [r7, #32]
 800d9e8:	6a3b      	ldr	r3, [r7, #32]
 800d9ea:	2b02      	cmp	r3, #2
 800d9ec:	ddf3      	ble.n	800d9d6 <ILI9341_Draw_Pixel+0x18a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800d9ee:	4b32      	ldr	r3, [pc, #200]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800d9f0:	695b      	ldr	r3, [r3, #20]
 800d9f2:	4a31      	ldr	r2, [pc, #196]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800d9f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9f8:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800d9fa:	4b2f      	ldr	r3, [pc, #188]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800d9fc:	695b      	ldr	r3, [r3, #20]
 800d9fe:	4a2e      	ldr	r2, [pc, #184]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800da00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da04:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800da06:	4b2c      	ldr	r3, [pc, #176]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800da08:	695b      	ldr	r3, [r3, #20]
 800da0a:	4a2b      	ldr	r2, [pc, #172]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800da0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800da10:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2C, 0, 0);
 800da12:	2200      	movs	r2, #0
 800da14:	2100      	movs	r1, #0
 800da16:	202c      	movs	r0, #44	; 0x2c
 800da18:	f000 fa66 	bl	800dee8 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800da1c:	2300      	movs	r3, #0
 800da1e:	61fb      	str	r3, [r7, #28]
 800da20:	e008      	b.n	800da34 <ILI9341_Draw_Pixel+0x1e8>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800da22:	4b25      	ldr	r3, [pc, #148]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800da24:	695b      	ldr	r3, [r3, #20]
 800da26:	4a24      	ldr	r2, [pc, #144]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800da28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800da2c:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800da2e:	69fb      	ldr	r3, [r7, #28]
 800da30:	3301      	adds	r3, #1
 800da32:	61fb      	str	r3, [r7, #28]
 800da34:	69fb      	ldr	r3, [r7, #28]
 800da36:	2b02      	cmp	r3, #2
 800da38:	ddf3      	ble.n	800da22 <ILI9341_Draw_Pixel+0x1d6>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800da3a:	4b1f      	ldr	r3, [pc, #124]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800da3c:	695b      	ldr	r3, [r3, #20]
 800da3e:	4a1e      	ldr	r2, [pc, #120]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800da40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da44:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800da46:	4b1c      	ldr	r3, [pc, #112]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800da48:	695b      	ldr	r3, [r3, #20]
 800da4a:	4a1b      	ldr	r2, [pc, #108]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800da4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da50:	6153      	str	r3, [r2, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800da52:	4b19      	ldr	r3, [pc, #100]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800da54:	695b      	ldr	r3, [r3, #20]
 800da56:	4a18      	ldr	r2, [pc, #96]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800da58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800da5c:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 800da5e:	887b      	ldrh	r3, [r7, #2]
 800da60:	0a1b      	lsrs	r3, r3, #8
 800da62:	b29b      	uxth	r3, r3
 800da64:	b2db      	uxtb	r3, r3
 800da66:	733b      	strb	r3, [r7, #12]
 800da68:	887b      	ldrh	r3, [r7, #2]
 800da6a:	b2db      	uxtb	r3, r3
 800da6c:	737b      	strb	r3, [r7, #13]

	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 4, 0, 10);
 800da6e:	f107 000c 	add.w	r0, r7, #12
 800da72:	230a      	movs	r3, #10
 800da74:	2200      	movs	r2, #0
 800da76:	2104      	movs	r1, #4
 800da78:	f000 fa68 	bl	800df4c <_SPI_SendByteMultiByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800da7c:	2300      	movs	r3, #0
 800da7e:	61bb      	str	r3, [r7, #24]
 800da80:	e008      	b.n	800da94 <ILI9341_Draw_Pixel+0x248>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800da82:	4b0d      	ldr	r3, [pc, #52]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800da84:	695b      	ldr	r3, [r3, #20]
 800da86:	4a0c      	ldr	r2, [pc, #48]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800da88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800da8c:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800da8e:	69bb      	ldr	r3, [r7, #24]
 800da90:	3301      	adds	r3, #1
 800da92:	61bb      	str	r3, [r7, #24]
 800da94:	69bb      	ldr	r3, [r7, #24]
 800da96:	2b02      	cmp	r3, #2
 800da98:	ddf3      	ble.n	800da82 <ILI9341_Draw_Pixel+0x236>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800da9a:	4b07      	ldr	r3, [pc, #28]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800da9c:	695b      	ldr	r3, [r3, #20]
 800da9e:	4a06      	ldr	r2, [pc, #24]	; (800dab8 <ILI9341_Draw_Pixel+0x26c>)
 800daa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800daa4:	6153      	str	r3, [r2, #20]
 800daa6:	e000      	b.n	800daaa <ILI9341_Draw_Pixel+0x25e>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800daa8:	bf00      	nop


}
 800daaa:	3730      	adds	r7, #48	; 0x30
 800daac:	46bd      	mov	sp, r7
 800daae:	bd80      	pop	{r7, pc}
 800dab0:	20000cba 	.word	0x20000cba
 800dab4:	20000cb8 	.word	0x20000cb8
 800dab8:	48000400 	.word	0x48000400

0800dabc <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 800dabc:	b590      	push	{r4, r7, lr}
 800dabe:	b087      	sub	sp, #28
 800dac0:	af02      	add	r7, sp, #8
 800dac2:	4604      	mov	r4, r0
 800dac4:	4608      	mov	r0, r1
 800dac6:	4611      	mov	r1, r2
 800dac8:	461a      	mov	r2, r3
 800daca:	4623      	mov	r3, r4
 800dacc:	80fb      	strh	r3, [r7, #6]
 800dace:	4603      	mov	r3, r0
 800dad0:	80bb      	strh	r3, [r7, #4]
 800dad2:	460b      	mov	r3, r1
 800dad4:	807b      	strh	r3, [r7, #2]
 800dad6:	4613      	mov	r3, r2
 800dad8:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800dada:	4b39      	ldr	r3, [pc, #228]	; (800dbc0 <ILI9341_Draw_Rectangle+0x104>)
 800dadc:	881b      	ldrh	r3, [r3, #0]
 800dade:	b29b      	uxth	r3, r3
 800dae0:	88fa      	ldrh	r2, [r7, #6]
 800dae2:	429a      	cmp	r2, r3
 800dae4:	d268      	bcs.n	800dbb8 <ILI9341_Draw_Rectangle+0xfc>
 800dae6:	4b37      	ldr	r3, [pc, #220]	; (800dbc4 <ILI9341_Draw_Rectangle+0x108>)
 800dae8:	881b      	ldrh	r3, [r3, #0]
 800daea:	b29b      	uxth	r3, r3
 800daec:	88ba      	ldrh	r2, [r7, #4]
 800daee:	429a      	cmp	r2, r3
 800daf0:	d262      	bcs.n	800dbb8 <ILI9341_Draw_Rectangle+0xfc>
	if((xpos+width-1)>=LCD_WIDTH)
 800daf2:	88fa      	ldrh	r2, [r7, #6]
 800daf4:	887b      	ldrh	r3, [r7, #2]
 800daf6:	4413      	add	r3, r2
 800daf8:	3b01      	subs	r3, #1
 800dafa:	4a31      	ldr	r2, [pc, #196]	; (800dbc0 <ILI9341_Draw_Rectangle+0x104>)
 800dafc:	8812      	ldrh	r2, [r2, #0]
 800dafe:	b292      	uxth	r2, r2
 800db00:	4293      	cmp	r3, r2
 800db02:	db05      	blt.n	800db10 <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 800db04:	4b2e      	ldr	r3, [pc, #184]	; (800dbc0 <ILI9341_Draw_Rectangle+0x104>)
 800db06:	881b      	ldrh	r3, [r3, #0]
 800db08:	b29a      	uxth	r2, r3
 800db0a:	88fb      	ldrh	r3, [r7, #6]
 800db0c:	1ad3      	subs	r3, r2, r3
 800db0e:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 800db10:	88ba      	ldrh	r2, [r7, #4]
 800db12:	883b      	ldrh	r3, [r7, #0]
 800db14:	4413      	add	r3, r2
 800db16:	3b01      	subs	r3, #1
 800db18:	4a2a      	ldr	r2, [pc, #168]	; (800dbc4 <ILI9341_Draw_Rectangle+0x108>)
 800db1a:	8812      	ldrh	r2, [r2, #0]
 800db1c:	b292      	uxth	r2, r2
 800db1e:	4293      	cmp	r3, r2
 800db20:	db05      	blt.n	800db2e <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 800db22:	4b28      	ldr	r3, [pc, #160]	; (800dbc4 <ILI9341_Draw_Rectangle+0x108>)
 800db24:	881b      	ldrh	r3, [r3, #0]
 800db26:	b29a      	uxth	r2, r3
 800db28:	88bb      	ldrh	r3, [r7, #4]
 800db2a:	1ad3      	subs	r3, r2, r3
 800db2c:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 800db2e:	88fa      	ldrh	r2, [r7, #6]
 800db30:	887b      	ldrh	r3, [r7, #2]
 800db32:	4413      	add	r3, r2
 800db34:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800db36:	3b01      	subs	r3, #1
 800db38:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 800db3a:	88ba      	ldrh	r2, [r7, #4]
 800db3c:	883b      	ldrh	r3, [r7, #0]
 800db3e:	4413      	add	r3, r2
 800db40:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800db42:	3b01      	subs	r3, #1
 800db44:	b29b      	uxth	r3, r3
 800db46:	88b9      	ldrh	r1, [r7, #4]
 800db48:	88f8      	ldrh	r0, [r7, #6]
 800db4a:	4622      	mov	r2, r4
 800db4c:	f7ff fe08 	bl	800d760 <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 800db50:	883a      	ldrh	r2, [r7, #0]
 800db52:	887b      	ldrh	r3, [r7, #2]
 800db54:	fb12 f303 	smulbb	r3, r2, r3
 800db58:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 800db5a:	2300      	movs	r3, #0
 800db5c:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 800db5e:	89fb      	ldrh	r3, [r7, #14]
 800db60:	f003 0301 	and.w	r3, r3, #1
 800db64:	2b00      	cmp	r3, #0
 800db66:	d009      	beq.n	800db7c <ILI9341_Draw_Rectangle+0xc0>
 800db68:	89fb      	ldrh	r3, [r7, #14]
 800db6a:	2b01      	cmp	r3, #1
 800db6c:	d906      	bls.n	800db7c <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 800db6e:	2301      	movs	r3, #1
 800db70:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 800db72:	89fb      	ldrh	r3, [r7, #14]
 800db74:	085b      	lsrs	r3, r3, #1
 800db76:	b29b      	uxth	r3, r3
 800db78:	005b      	lsls	r3, r3, #1
 800db7a:	81fb      	strh	r3, [r7, #14]
	}

	_LCD_Write_Frame(	xpos,
 800db7c:	89fc      	ldrh	r4, [r7, #14]
 800db7e:	8c3a      	ldrh	r2, [r7, #32]
 800db80:	88b9      	ldrh	r1, [r7, #4]
 800db82:	88f8      	ldrh	r0, [r7, #6]
 800db84:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800db88:	9300      	str	r3, [sp, #0]
 800db8a:	4623      	mov	r3, r4
 800db8c:	f000 f898 	bl	800dcc0 <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 800db90:	7b7b      	ldrb	r3, [r7, #13]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d011      	beq.n	800dbba <ILI9341_Draw_Rectangle+0xfe>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800db96:	88fa      	ldrh	r2, [r7, #6]
 800db98:	887b      	ldrh	r3, [r7, #2]
 800db9a:	4413      	add	r3, r2
 800db9c:	b29b      	uxth	r3, r3
 800db9e:	3b01      	subs	r3, #1
 800dba0:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800dba2:	88ba      	ldrh	r2, [r7, #4]
 800dba4:	883b      	ldrh	r3, [r7, #0]
 800dba6:	4413      	add	r3, r2
 800dba8:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800dbaa:	3b01      	subs	r3, #1
 800dbac:	b29b      	uxth	r3, r3
 800dbae:	8c3a      	ldrh	r2, [r7, #32]
 800dbb0:	4619      	mov	r1, r3
 800dbb2:	f7ff fe4b 	bl	800d84c <ILI9341_Draw_Pixel>
 800dbb6:	e000      	b.n	800dbba <ILI9341_Draw_Rectangle+0xfe>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800dbb8:	bf00      	nop
							colour);
	}
}
 800dbba:	3714      	adds	r7, #20
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	bd90      	pop	{r4, r7, pc}
 800dbc0:	20000cba 	.word	0x20000cba
 800dbc4:	20000cb8 	.word	0x20000cb8

0800dbc8 <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b084      	sub	sp, #16
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	4603      	mov	r3, r0
 800dbd0:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = rotation;
 800dbd2:	79fb      	ldrb	r3, [r7, #7]
 800dbd4:	73fb      	strb	r3, [r7, #15]

	_LCD_SendCommand(0x36);
 800dbd6:	2036      	movs	r0, #54	; 0x36
 800dbd8:	f000 f922 	bl	800de20 <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 800dbdc:	7bfb      	ldrb	r3, [r7, #15]
 800dbde:	2b03      	cmp	r3, #3
 800dbe0:	d836      	bhi.n	800dc50 <ILI9341_Set_Rotation+0x88>
 800dbe2:	a201      	add	r2, pc, #4	; (adr r2, 800dbe8 <ILI9341_Set_Rotation+0x20>)
 800dbe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbe8:	0800dbf9 	.word	0x0800dbf9
 800dbec:	0800dc0f 	.word	0x0800dc0f
 800dbf0:	0800dc25 	.word	0x0800dc25
 800dbf4:	0800dc3b 	.word	0x0800dc3b
	{
		case SCREEN_VERTICAL_1:
			_LCD_SendData(0x40|0x08);
 800dbf8:	2048      	movs	r0, #72	; 0x48
 800dbfa:	f000 f943 	bl	800de84 <_LCD_SendData>
			LCD_WIDTH = 240;
 800dbfe:	4b17      	ldr	r3, [pc, #92]	; (800dc5c <ILI9341_Set_Rotation+0x94>)
 800dc00:	22f0      	movs	r2, #240	; 0xf0
 800dc02:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800dc04:	4b16      	ldr	r3, [pc, #88]	; (800dc60 <ILI9341_Set_Rotation+0x98>)
 800dc06:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800dc0a:	801a      	strh	r2, [r3, #0]
			break;
 800dc0c:	e021      	b.n	800dc52 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			_LCD_SendData(0x20|0x08);
 800dc0e:	2028      	movs	r0, #40	; 0x28
 800dc10:	f000 f938 	bl	800de84 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800dc14:	4b11      	ldr	r3, [pc, #68]	; (800dc5c <ILI9341_Set_Rotation+0x94>)
 800dc16:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800dc1a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800dc1c:	4b10      	ldr	r3, [pc, #64]	; (800dc60 <ILI9341_Set_Rotation+0x98>)
 800dc1e:	22f0      	movs	r2, #240	; 0xf0
 800dc20:	801a      	strh	r2, [r3, #0]
			break;
 800dc22:	e016      	b.n	800dc52 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			_LCD_SendData(0x80|0x08);
 800dc24:	2088      	movs	r0, #136	; 0x88
 800dc26:	f000 f92d 	bl	800de84 <_LCD_SendData>
			LCD_WIDTH  = 240;
 800dc2a:	4b0c      	ldr	r3, [pc, #48]	; (800dc5c <ILI9341_Set_Rotation+0x94>)
 800dc2c:	22f0      	movs	r2, #240	; 0xf0
 800dc2e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800dc30:	4b0b      	ldr	r3, [pc, #44]	; (800dc60 <ILI9341_Set_Rotation+0x98>)
 800dc32:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800dc36:	801a      	strh	r2, [r3, #0]
			break;
 800dc38:	e00b      	b.n	800dc52 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			_LCD_SendData(0x40|0x80|0x20|0x08);
 800dc3a:	20e8      	movs	r0, #232	; 0xe8
 800dc3c:	f000 f922 	bl	800de84 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800dc40:	4b06      	ldr	r3, [pc, #24]	; (800dc5c <ILI9341_Set_Rotation+0x94>)
 800dc42:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800dc46:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800dc48:	4b05      	ldr	r3, [pc, #20]	; (800dc60 <ILI9341_Set_Rotation+0x98>)
 800dc4a:	22f0      	movs	r2, #240	; 0xf0
 800dc4c:	801a      	strh	r2, [r3, #0]
			break;
 800dc4e:	e000      	b.n	800dc52 <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800dc50:	bf00      	nop
	}
}
 800dc52:	bf00      	nop
 800dc54:	3710      	adds	r7, #16
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}
 800dc5a:	bf00      	nop
 800dc5c:	20000cba 	.word	0x20000cba
 800dc60:	20000cb8 	.word	0x20000cb8

0800dc64 <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 800dc64:	b480      	push	{r7}
 800dc66:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800dc68:	4b05      	ldr	r3, [pc, #20]	; (800dc80 <_LCD_Enable+0x1c>)
 800dc6a:	695b      	ldr	r3, [r3, #20]
 800dc6c:	4a04      	ldr	r2, [pc, #16]	; (800dc80 <_LCD_Enable+0x1c>)
 800dc6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dc72:	6153      	str	r3, [r2, #20]
}
 800dc74:	bf00      	nop
 800dc76:	46bd      	mov	sp, r7
 800dc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7c:	4770      	bx	lr
 800dc7e:	bf00      	nop
 800dc80:	48000400 	.word	0x48000400

0800dc84 <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 800dc88:	4b0c      	ldr	r3, [pc, #48]	; (800dcbc <_LCD_Reset+0x38>)
 800dc8a:	695b      	ldr	r3, [r3, #20]
 800dc8c:	4a0b      	ldr	r2, [pc, #44]	; (800dcbc <_LCD_Reset+0x38>)
 800dc8e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dc92:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800dc94:	20c8      	movs	r0, #200	; 0xc8
 800dc96:	f7fa f8af 	bl	8007df8 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800dc9a:	4b08      	ldr	r3, [pc, #32]	; (800dcbc <_LCD_Reset+0x38>)
 800dc9c:	695b      	ldr	r3, [r3, #20]
 800dc9e:	4a07      	ldr	r2, [pc, #28]	; (800dcbc <_LCD_Reset+0x38>)
 800dca0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dca4:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800dca6:	20c8      	movs	r0, #200	; 0xc8
 800dca8:	f7fa f8a6 	bl	8007df8 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800dcac:	4b03      	ldr	r3, [pc, #12]	; (800dcbc <_LCD_Reset+0x38>)
 800dcae:	695b      	ldr	r3, [r3, #20]
 800dcb0:	4a02      	ldr	r2, [pc, #8]	; (800dcbc <_LCD_Reset+0x38>)
 800dcb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dcb6:	6153      	str	r3, [r2, #20]
}
 800dcb8:	bf00      	nop
 800dcba:	bd80      	pop	{r7, pc}
 800dcbc:	48000400 	.word	0x48000400

0800dcc0 <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 800dcc0:	b5b0      	push	{r4, r5, r7, lr}
 800dcc2:	b08e      	sub	sp, #56	; 0x38
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	607b      	str	r3, [r7, #4]
 800dcc8:	4603      	mov	r3, r0
 800dcca:	81fb      	strh	r3, [r7, #14]
 800dccc:	460b      	mov	r3, r1
 800dcce:	81bb      	strh	r3, [r7, #12]
 800dcd0:	4613      	mov	r3, r2
 800dcd2:	817b      	strh	r3, [r7, #10]
 800dcd4:	466b      	mov	r3, sp
 800dcd6:	461d      	mov	r5, r3

	uint32_t buffer_size = 0;
 800dcd8:	2300      	movs	r3, #0
 800dcda:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	005b      	lsls	r3, r3, #1
 800dce0:	4a4d      	ldr	r2, [pc, #308]	; (800de18 <_LCD_Write_Frame+0x158>)
 800dce2:	8812      	ldrh	r2, [r2, #0]
 800dce4:	4293      	cmp	r3, r2
 800dce6:	d202      	bcs.n	800dcee <_LCD_Write_Frame+0x2e>
	{
		buffer_size = chunk_size;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dcec:	e002      	b.n	800dcf4 <_LCD_Write_Frame+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 800dcee:	4b4a      	ldr	r3, [pc, #296]	; (800de18 <_LCD_Write_Frame+0x158>)
 800dcf0:	881b      	ldrh	r3, [r3, #0]
 800dcf2:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	unsigned char chifted = 	colour>>8;;
 800dcf4:	897b      	ldrh	r3, [r7, #10]
 800dcf6:	0a1b      	lsrs	r3, r3, #8
 800dcf8:	b29b      	uxth	r3, r3
 800dcfa:	77fb      	strb	r3, [r7, #31]
	unsigned char burst_buffer[buffer_size];
 800dcfc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dcfe:	4603      	mov	r3, r0
 800dd00:	3b01      	subs	r3, #1
 800dd02:	61bb      	str	r3, [r7, #24]
 800dd04:	4601      	mov	r1, r0
 800dd06:	f04f 0200 	mov.w	r2, #0
 800dd0a:	f04f 0300 	mov.w	r3, #0
 800dd0e:	f04f 0400 	mov.w	r4, #0
 800dd12:	00d4      	lsls	r4, r2, #3
 800dd14:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800dd18:	00cb      	lsls	r3, r1, #3
 800dd1a:	4601      	mov	r1, r0
 800dd1c:	f04f 0200 	mov.w	r2, #0
 800dd20:	f04f 0300 	mov.w	r3, #0
 800dd24:	f04f 0400 	mov.w	r4, #0
 800dd28:	00d4      	lsls	r4, r2, #3
 800dd2a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800dd2e:	00cb      	lsls	r3, r1, #3
 800dd30:	1dc3      	adds	r3, r0, #7
 800dd32:	08db      	lsrs	r3, r3, #3
 800dd34:	00db      	lsls	r3, r3, #3
 800dd36:	ebad 0d03 	sub.w	sp, sp, r3
 800dd3a:	466b      	mov	r3, sp
 800dd3c:	3300      	adds	r3, #0
 800dd3e:	617b      	str	r3, [r7, #20]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800dd40:	2300      	movs	r3, #0
 800dd42:	633b      	str	r3, [r7, #48]	; 0x30
 800dd44:	e00d      	b.n	800dd62 <_LCD_Write_Frame+0xa2>
	{
			burst_buffer[j] = 	chifted;
 800dd46:	697a      	ldr	r2, [r7, #20]
 800dd48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd4a:	4413      	add	r3, r2
 800dd4c:	7ffa      	ldrb	r2, [r7, #31]
 800dd4e:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 800dd50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd52:	3301      	adds	r3, #1
 800dd54:	897a      	ldrh	r2, [r7, #10]
 800dd56:	b2d1      	uxtb	r1, r2
 800dd58:	697a      	ldr	r2, [r7, #20]
 800dd5a:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800dd5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd5e:	3302      	adds	r3, #2
 800dd60:	633b      	str	r3, [r7, #48]	; 0x30
 800dd62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd66:	429a      	cmp	r2, r3
 800dd68:	d3ed      	bcc.n	800dd46 <_LCD_Write_Frame+0x86>
	}
	
	uint32_t Sending_size = chunk_size*2;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	005b      	lsls	r3, r3, #1
 800dd6e:	613b      	str	r3, [r7, #16]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 800dd70:	2301      	movs	r3, #1
 800dd72:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 800dd74:	2300      	movs	r3, #0
 800dd76:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d00d      	beq.n	800dd9a <_LCD_Write_Frame+0xda>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 800dd7e:	693a      	ldr	r2, [r7, #16]
 800dd80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd82:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd86:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 800dd88:	693b      	ldr	r3, [r7, #16]
 800dd8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd8c:	fbb3 f2f2 	udiv	r2, r3, r2
 800dd90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dd92:	fb01 f202 	mul.w	r2, r1, r2
 800dd96:	1a9b      	subs	r3, r3, r2
 800dd98:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800dd9a:	4b20      	ldr	r3, [pc, #128]	; (800de1c <_LCD_Write_Frame+0x15c>)
 800dd9c:	695b      	ldr	r3, [r3, #20]
 800dd9e:	4a1f      	ldr	r2, [pc, #124]	; (800de1c <_LCD_Write_Frame+0x15c>)
 800dda0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dda4:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800dda6:	4b1d      	ldr	r3, [pc, #116]	; (800de1c <_LCD_Write_Frame+0x15c>)
 800dda8:	695b      	ldr	r3, [r3, #20]
 800ddaa:	4a1c      	ldr	r2, [pc, #112]	; (800de1c <_LCD_Write_Frame+0x15c>)
 800ddac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ddb0:	6153      	str	r3, [r2, #20]

	if(Sending_in_Block != 0)
 800ddb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d00f      	beq.n	800ddd8 <_LCD_Write_Frame+0x118>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800ddb8:	2300      	movs	r3, #0
 800ddba:	627b      	str	r3, [r7, #36]	; 0x24
 800ddbc:	e008      	b.n	800ddd0 <_LCD_Write_Frame+0x110>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 800ddbe:	6978      	ldr	r0, [r7, #20]
 800ddc0:	230a      	movs	r3, #10
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ddc6:	f000 f8c1 	bl	800df4c <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800ddca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddcc:	3301      	adds	r3, #1
 800ddce:	627b      	str	r3, [r7, #36]	; 0x24
 800ddd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddd4:	429a      	cmp	r2, r3
 800ddd6:	d3f2      	bcc.n	800ddbe <_LCD_Write_Frame+0xfe>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 800ddd8:	6978      	ldr	r0, [r7, #20]
 800ddda:	230a      	movs	r3, #10
 800dddc:	2200      	movs	r2, #0
 800ddde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dde0:	f000 f8b4 	bl	800df4c <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800dde4:	2300      	movs	r3, #0
 800dde6:	623b      	str	r3, [r7, #32]
 800dde8:	e008      	b.n	800ddfc <_LCD_Write_Frame+0x13c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ddea:	4b0c      	ldr	r3, [pc, #48]	; (800de1c <_LCD_Write_Frame+0x15c>)
 800ddec:	695b      	ldr	r3, [r3, #20]
 800ddee:	4a0b      	ldr	r2, [pc, #44]	; (800de1c <_LCD_Write_Frame+0x15c>)
 800ddf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ddf4:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800ddf6:	6a3b      	ldr	r3, [r7, #32]
 800ddf8:	3301      	adds	r3, #1
 800ddfa:	623b      	str	r3, [r7, #32]
 800ddfc:	6a3b      	ldr	r3, [r7, #32]
 800ddfe:	2b02      	cmp	r3, #2
 800de00:	ddf3      	ble.n	800ddea <_LCD_Write_Frame+0x12a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800de02:	4b06      	ldr	r3, [pc, #24]	; (800de1c <_LCD_Write_Frame+0x15c>)
 800de04:	695b      	ldr	r3, [r3, #20]
 800de06:	4a05      	ldr	r2, [pc, #20]	; (800de1c <_LCD_Write_Frame+0x15c>)
 800de08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de0c:	6153      	str	r3, [r2, #20]
 800de0e:	46ad      	mov	sp, r5

}
 800de10:	bf00      	nop
 800de12:	3738      	adds	r7, #56	; 0x38
 800de14:	46bd      	mov	sp, r7
 800de16:	bdb0      	pop	{r4, r5, r7, pc}
 800de18:	20000cbc 	.word	0x20000cbc
 800de1c:	48000400 	.word	0x48000400

0800de20 <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b084      	sub	sp, #16
 800de24:	af00      	add	r7, sp, #0
 800de26:	4603      	mov	r3, r0
 800de28:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800de2a:	4b15      	ldr	r3, [pc, #84]	; (800de80 <_LCD_SendCommand+0x60>)
 800de2c:	695b      	ldr	r3, [r3, #20]
 800de2e:	4a14      	ldr	r2, [pc, #80]	; (800de80 <_LCD_SendCommand+0x60>)
 800de30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800de34:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800de36:	4b12      	ldr	r3, [pc, #72]	; (800de80 <_LCD_SendCommand+0x60>)
 800de38:	695b      	ldr	r3, [r3, #20]
 800de3a:	4a11      	ldr	r2, [pc, #68]	; (800de80 <_LCD_SendCommand+0x60>)
 800de3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800de40:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(command, 0 , 0);
 800de42:	79fb      	ldrb	r3, [r7, #7]
 800de44:	2200      	movs	r2, #0
 800de46:	2100      	movs	r1, #0
 800de48:	4618      	mov	r0, r3
 800de4a:	f000 f84d 	bl	800dee8 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800de4e:	2300      	movs	r3, #0
 800de50:	60fb      	str	r3, [r7, #12]
 800de52:	e008      	b.n	800de66 <_LCD_SendCommand+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800de54:	4b0a      	ldr	r3, [pc, #40]	; (800de80 <_LCD_SendCommand+0x60>)
 800de56:	695b      	ldr	r3, [r3, #20]
 800de58:	4a09      	ldr	r2, [pc, #36]	; (800de80 <_LCD_SendCommand+0x60>)
 800de5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800de5e:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	3301      	adds	r3, #1
 800de64:	60fb      	str	r3, [r7, #12]
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	2b02      	cmp	r3, #2
 800de6a:	ddf3      	ble.n	800de54 <_LCD_SendCommand+0x34>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800de6c:	4b04      	ldr	r3, [pc, #16]	; (800de80 <_LCD_SendCommand+0x60>)
 800de6e:	695b      	ldr	r3, [r3, #20]
 800de70:	4a03      	ldr	r2, [pc, #12]	; (800de80 <_LCD_SendCommand+0x60>)
 800de72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de76:	6153      	str	r3, [r2, #20]
}
 800de78:	bf00      	nop
 800de7a:	3710      	adds	r7, #16
 800de7c:	46bd      	mov	sp, r7
 800de7e:	bd80      	pop	{r7, pc}
 800de80:	48000400 	.word	0x48000400

0800de84 <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 800de84:	b580      	push	{r7, lr}
 800de86:	b084      	sub	sp, #16
 800de88:	af00      	add	r7, sp, #0
 800de8a:	4603      	mov	r3, r0
 800de8c:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800de8e:	4b15      	ldr	r3, [pc, #84]	; (800dee4 <_LCD_SendData+0x60>)
 800de90:	695b      	ldr	r3, [r3, #20]
 800de92:	4a14      	ldr	r2, [pc, #80]	; (800dee4 <_LCD_SendData+0x60>)
 800de94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de98:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800de9a:	4b12      	ldr	r3, [pc, #72]	; (800dee4 <_LCD_SendData+0x60>)
 800de9c:	695b      	ldr	r3, [r3, #20]
 800de9e:	4a11      	ldr	r2, [pc, #68]	; (800dee4 <_LCD_SendData+0x60>)
 800dea0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dea4:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(data, 0 , 0);
 800dea6:	79fb      	ldrb	r3, [r7, #7]
 800dea8:	2200      	movs	r2, #0
 800deaa:	2100      	movs	r1, #0
 800deac:	4618      	mov	r0, r3
 800deae:	f000 f81b 	bl	800dee8 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800deb2:	2300      	movs	r3, #0
 800deb4:	60fb      	str	r3, [r7, #12]
 800deb6:	e008      	b.n	800deca <_LCD_SendData+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800deb8:	4b0a      	ldr	r3, [pc, #40]	; (800dee4 <_LCD_SendData+0x60>)
 800deba:	695b      	ldr	r3, [r3, #20]
 800debc:	4a09      	ldr	r2, [pc, #36]	; (800dee4 <_LCD_SendData+0x60>)
 800debe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dec2:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	3301      	adds	r3, #1
 800dec8:	60fb      	str	r3, [r7, #12]
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	2b02      	cmp	r3, #2
 800dece:	ddf3      	ble.n	800deb8 <_LCD_SendData+0x34>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ded0:	4b04      	ldr	r3, [pc, #16]	; (800dee4 <_LCD_SendData+0x60>)
 800ded2:	695b      	ldr	r3, [r3, #20]
 800ded4:	4a03      	ldr	r2, [pc, #12]	; (800dee4 <_LCD_SendData+0x60>)
 800ded6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800deda:	6153      	str	r3, [r2, #20]
}
 800dedc:	bf00      	nop
 800dede:	3710      	adds	r7, #16
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}
 800dee4:	48000400 	.word	0x48000400

0800dee8 <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800dee8:	b480      	push	{r7}
 800deea:	b085      	sub	sp, #20
 800deec:	af00      	add	r7, sp, #0
 800deee:	4603      	mov	r3, r0
 800def0:	71fb      	strb	r3, [r7, #7]
 800def2:	460b      	mov	r3, r1
 800def4:	71bb      	strb	r3, [r7, #6]
 800def6:	4613      	mov	r3, r2
 800def8:	717b      	strb	r3, [r7, #5]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800defa:	2300      	movs	r3, #0
 800defc:	60fb      	str	r3, [r7, #12]
 800defe:	e003      	b.n	800df08 <_SPI_SendByte+0x20>
   		asm("nop");
 800df00:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	3301      	adds	r3, #1
 800df06:	60fb      	str	r3, [r7, #12]
 800df08:	79bb      	ldrb	r3, [r7, #6]
 800df0a:	68fa      	ldr	r2, [r7, #12]
 800df0c:	429a      	cmp	r2, r3
 800df0e:	dbf7      	blt.n	800df00 <_SPI_SendByte+0x18>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800df10:	4b0c      	ldr	r3, [pc, #48]	; (800df44 <_SPI_SendByte+0x5c>)
 800df12:	689b      	ldr	r3, [r3, #8]
 800df14:	f003 0302 	and.w	r3, r3, #2
 800df18:	2b02      	cmp	r3, #2
 800df1a:	d102      	bne.n	800df22 <_SPI_SendByte+0x3a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 800df1c:	4a0a      	ldr	r2, [pc, #40]	; (800df48 <_SPI_SendByte+0x60>)
 800df1e:	79fb      	ldrb	r3, [r7, #7]
 800df20:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800df22:	2300      	movs	r3, #0
 800df24:	60bb      	str	r3, [r7, #8]
 800df26:	e003      	b.n	800df30 <_SPI_SendByte+0x48>
   		asm("nop");
 800df28:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800df2a:	68bb      	ldr	r3, [r7, #8]
 800df2c:	3301      	adds	r3, #1
 800df2e:	60bb      	str	r3, [r7, #8]
 800df30:	797b      	ldrb	r3, [r7, #5]
 800df32:	68ba      	ldr	r2, [r7, #8]
 800df34:	429a      	cmp	r2, r3
 800df36:	dbf7      	blt.n	800df28 <_SPI_SendByte+0x40>

#endif

}
 800df38:	bf00      	nop
 800df3a:	3714      	adds	r7, #20
 800df3c:	46bd      	mov	sp, r7
 800df3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df42:	4770      	bx	lr
 800df44:	40003c00 	.word	0x40003c00
 800df48:	40003c0c 	.word	0x40003c0c

0800df4c <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800df4c:	b480      	push	{r7}
 800df4e:	b089      	sub	sp, #36	; 0x24
 800df50:	af00      	add	r7, sp, #0
 800df52:	60f8      	str	r0, [r7, #12]
 800df54:	60b9      	str	r1, [r7, #8]
 800df56:	4611      	mov	r1, r2
 800df58:	461a      	mov	r2, r3
 800df5a:	460b      	mov	r3, r1
 800df5c:	71fb      	strb	r3, [r7, #7]
 800df5e:	4613      	mov	r3, r2
 800df60:	71bb      	strb	r3, [r7, #6]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800df62:	2300      	movs	r3, #0
 800df64:	61fb      	str	r3, [r7, #28]
 800df66:	e003      	b.n	800df70 <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 800df68:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800df6a:	69fb      	ldr	r3, [r7, #28]
 800df6c:	3301      	adds	r3, #1
 800df6e:	61fb      	str	r3, [r7, #28]
 800df70:	79fb      	ldrb	r3, [r7, #7]
 800df72:	69fa      	ldr	r2, [r7, #28]
 800df74:	429a      	cmp	r2, r3
 800df76:	dbf7      	blt.n	800df68 <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 800df7c:	e01d      	b.n	800dfba <_SPI_SendByteMultiByte+0x6e>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800df7e:	4b1c      	ldr	r3, [pc, #112]	; (800dff0 <_SPI_SendByteMultiByte+0xa4>)
 800df80:	689b      	ldr	r3, [r3, #8]
 800df82:	f003 0302 	and.w	r3, r3, #2
 800df86:	2b02      	cmp	r3, #2
 800df88:	d117      	bne.n	800dfba <_SPI_SendByteMultiByte+0x6e>
		{
			if (buffer_size > 1U)
 800df8a:	68bb      	ldr	r3, [r7, #8]
 800df8c:	2b01      	cmp	r3, #1
 800df8e:	d90a      	bls.n	800dfa6 <_SPI_SendByteMultiByte+0x5a>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 800df90:	69bb      	ldr	r3, [r7, #24]
 800df92:	881a      	ldrh	r2, [r3, #0]
 800df94:	4b16      	ldr	r3, [pc, #88]	; (800dff0 <_SPI_SendByteMultiByte+0xa4>)
 800df96:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 800df98:	69bb      	ldr	r3, [r7, #24]
 800df9a:	3302      	adds	r3, #2
 800df9c:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 800df9e:	68bb      	ldr	r3, [r7, #8]
 800dfa0:	3b02      	subs	r3, #2
 800dfa2:	60bb      	str	r3, [r7, #8]
 800dfa4:	e009      	b.n	800dfba <_SPI_SendByteMultiByte+0x6e>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 800dfa6:	4a13      	ldr	r2, [pc, #76]	; (800dff4 <_SPI_SendByteMultiByte+0xa8>)
 800dfa8:	69bb      	ldr	r3, [r7, #24]
 800dfaa:	781b      	ldrb	r3, [r3, #0]
 800dfac:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 800dfae:	69bb      	ldr	r3, [r7, #24]
 800dfb0:	3301      	adds	r3, #1
 800dfb2:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	3b01      	subs	r3, #1
 800dfb8:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 800dfba:	68bb      	ldr	r3, [r7, #8]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d1de      	bne.n	800df7e <_SPI_SendByteMultiByte+0x32>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 800dfc0:	4b0b      	ldr	r3, [pc, #44]	; (800dff0 <_SPI_SendByteMultiByte+0xa4>)
 800dfc2:	689b      	ldr	r3, [r3, #8]
 800dfc4:	4a0a      	ldr	r2, [pc, #40]	; (800dff0 <_SPI_SendByteMultiByte+0xa4>)
 800dfc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dfca:	6093      	str	r3, [r2, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800dfcc:	2300      	movs	r3, #0
 800dfce:	617b      	str	r3, [r7, #20]
 800dfd0:	e003      	b.n	800dfda <_SPI_SendByteMultiByte+0x8e>
   		asm("nop");
 800dfd2:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800dfd4:	697b      	ldr	r3, [r7, #20]
 800dfd6:	3301      	adds	r3, #1
 800dfd8:	617b      	str	r3, [r7, #20]
 800dfda:	79bb      	ldrb	r3, [r7, #6]
 800dfdc:	697a      	ldr	r2, [r7, #20]
 800dfde:	429a      	cmp	r2, r3
 800dfe0:	dbf7      	blt.n	800dfd2 <_SPI_SendByteMultiByte+0x86>

#endif

}
 800dfe2:	bf00      	nop
 800dfe4:	3724      	adds	r7, #36	; 0x24
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfec:	4770      	bx	lr
 800dfee:	bf00      	nop
 800dff0:	40003c00 	.word	0x40003c00
 800dff4:	40003c0c 	.word	0x40003c0c

0800dff8 <__errno>:
 800dff8:	4b01      	ldr	r3, [pc, #4]	; (800e000 <__errno+0x8>)
 800dffa:	6818      	ldr	r0, [r3, #0]
 800dffc:	4770      	bx	lr
 800dffe:	bf00      	nop
 800e000:	20001d00 	.word	0x20001d00

0800e004 <__libc_init_array>:
 800e004:	b570      	push	{r4, r5, r6, lr}
 800e006:	4e0d      	ldr	r6, [pc, #52]	; (800e03c <__libc_init_array+0x38>)
 800e008:	4c0d      	ldr	r4, [pc, #52]	; (800e040 <__libc_init_array+0x3c>)
 800e00a:	1ba4      	subs	r4, r4, r6
 800e00c:	10a4      	asrs	r4, r4, #2
 800e00e:	2500      	movs	r5, #0
 800e010:	42a5      	cmp	r5, r4
 800e012:	d109      	bne.n	800e028 <__libc_init_array+0x24>
 800e014:	4e0b      	ldr	r6, [pc, #44]	; (800e044 <__libc_init_array+0x40>)
 800e016:	4c0c      	ldr	r4, [pc, #48]	; (800e048 <__libc_init_array+0x44>)
 800e018:	f002 fc32 	bl	8010880 <_init>
 800e01c:	1ba4      	subs	r4, r4, r6
 800e01e:	10a4      	asrs	r4, r4, #2
 800e020:	2500      	movs	r5, #0
 800e022:	42a5      	cmp	r5, r4
 800e024:	d105      	bne.n	800e032 <__libc_init_array+0x2e>
 800e026:	bd70      	pop	{r4, r5, r6, pc}
 800e028:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e02c:	4798      	blx	r3
 800e02e:	3501      	adds	r5, #1
 800e030:	e7ee      	b.n	800e010 <__libc_init_array+0xc>
 800e032:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e036:	4798      	blx	r3
 800e038:	3501      	adds	r5, #1
 800e03a:	e7f2      	b.n	800e022 <__libc_init_array+0x1e>
 800e03c:	08011f18 	.word	0x08011f18
 800e040:	08011f18 	.word	0x08011f18
 800e044:	08011f18 	.word	0x08011f18
 800e048:	08011f1c 	.word	0x08011f1c

0800e04c <memset>:
 800e04c:	4402      	add	r2, r0
 800e04e:	4603      	mov	r3, r0
 800e050:	4293      	cmp	r3, r2
 800e052:	d100      	bne.n	800e056 <memset+0xa>
 800e054:	4770      	bx	lr
 800e056:	f803 1b01 	strb.w	r1, [r3], #1
 800e05a:	e7f9      	b.n	800e050 <memset+0x4>

0800e05c <__cvt>:
 800e05c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e060:	ec55 4b10 	vmov	r4, r5, d0
 800e064:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800e066:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e06a:	2d00      	cmp	r5, #0
 800e06c:	460e      	mov	r6, r1
 800e06e:	4691      	mov	r9, r2
 800e070:	4619      	mov	r1, r3
 800e072:	bfb8      	it	lt
 800e074:	4622      	movlt	r2, r4
 800e076:	462b      	mov	r3, r5
 800e078:	f027 0720 	bic.w	r7, r7, #32
 800e07c:	bfbb      	ittet	lt
 800e07e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e082:	461d      	movlt	r5, r3
 800e084:	2300      	movge	r3, #0
 800e086:	232d      	movlt	r3, #45	; 0x2d
 800e088:	bfb8      	it	lt
 800e08a:	4614      	movlt	r4, r2
 800e08c:	2f46      	cmp	r7, #70	; 0x46
 800e08e:	700b      	strb	r3, [r1, #0]
 800e090:	d004      	beq.n	800e09c <__cvt+0x40>
 800e092:	2f45      	cmp	r7, #69	; 0x45
 800e094:	d100      	bne.n	800e098 <__cvt+0x3c>
 800e096:	3601      	adds	r6, #1
 800e098:	2102      	movs	r1, #2
 800e09a:	e000      	b.n	800e09e <__cvt+0x42>
 800e09c:	2103      	movs	r1, #3
 800e09e:	ab03      	add	r3, sp, #12
 800e0a0:	9301      	str	r3, [sp, #4]
 800e0a2:	ab02      	add	r3, sp, #8
 800e0a4:	9300      	str	r3, [sp, #0]
 800e0a6:	4632      	mov	r2, r6
 800e0a8:	4653      	mov	r3, sl
 800e0aa:	ec45 4b10 	vmov	d0, r4, r5
 800e0ae:	f000 fe27 	bl	800ed00 <_dtoa_r>
 800e0b2:	2f47      	cmp	r7, #71	; 0x47
 800e0b4:	4680      	mov	r8, r0
 800e0b6:	d102      	bne.n	800e0be <__cvt+0x62>
 800e0b8:	f019 0f01 	tst.w	r9, #1
 800e0bc:	d026      	beq.n	800e10c <__cvt+0xb0>
 800e0be:	2f46      	cmp	r7, #70	; 0x46
 800e0c0:	eb08 0906 	add.w	r9, r8, r6
 800e0c4:	d111      	bne.n	800e0ea <__cvt+0x8e>
 800e0c6:	f898 3000 	ldrb.w	r3, [r8]
 800e0ca:	2b30      	cmp	r3, #48	; 0x30
 800e0cc:	d10a      	bne.n	800e0e4 <__cvt+0x88>
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	4620      	mov	r0, r4
 800e0d4:	4629      	mov	r1, r5
 800e0d6:	f7f2 fd1f 	bl	8000b18 <__aeabi_dcmpeq>
 800e0da:	b918      	cbnz	r0, 800e0e4 <__cvt+0x88>
 800e0dc:	f1c6 0601 	rsb	r6, r6, #1
 800e0e0:	f8ca 6000 	str.w	r6, [sl]
 800e0e4:	f8da 3000 	ldr.w	r3, [sl]
 800e0e8:	4499      	add	r9, r3
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	4620      	mov	r0, r4
 800e0f0:	4629      	mov	r1, r5
 800e0f2:	f7f2 fd11 	bl	8000b18 <__aeabi_dcmpeq>
 800e0f6:	b938      	cbnz	r0, 800e108 <__cvt+0xac>
 800e0f8:	2230      	movs	r2, #48	; 0x30
 800e0fa:	9b03      	ldr	r3, [sp, #12]
 800e0fc:	454b      	cmp	r3, r9
 800e0fe:	d205      	bcs.n	800e10c <__cvt+0xb0>
 800e100:	1c59      	adds	r1, r3, #1
 800e102:	9103      	str	r1, [sp, #12]
 800e104:	701a      	strb	r2, [r3, #0]
 800e106:	e7f8      	b.n	800e0fa <__cvt+0x9e>
 800e108:	f8cd 900c 	str.w	r9, [sp, #12]
 800e10c:	9b03      	ldr	r3, [sp, #12]
 800e10e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e110:	eba3 0308 	sub.w	r3, r3, r8
 800e114:	4640      	mov	r0, r8
 800e116:	6013      	str	r3, [r2, #0]
 800e118:	b004      	add	sp, #16
 800e11a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e11e <__exponent>:
 800e11e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e120:	2900      	cmp	r1, #0
 800e122:	4604      	mov	r4, r0
 800e124:	bfba      	itte	lt
 800e126:	4249      	neglt	r1, r1
 800e128:	232d      	movlt	r3, #45	; 0x2d
 800e12a:	232b      	movge	r3, #43	; 0x2b
 800e12c:	2909      	cmp	r1, #9
 800e12e:	f804 2b02 	strb.w	r2, [r4], #2
 800e132:	7043      	strb	r3, [r0, #1]
 800e134:	dd20      	ble.n	800e178 <__exponent+0x5a>
 800e136:	f10d 0307 	add.w	r3, sp, #7
 800e13a:	461f      	mov	r7, r3
 800e13c:	260a      	movs	r6, #10
 800e13e:	fb91 f5f6 	sdiv	r5, r1, r6
 800e142:	fb06 1115 	mls	r1, r6, r5, r1
 800e146:	3130      	adds	r1, #48	; 0x30
 800e148:	2d09      	cmp	r5, #9
 800e14a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e14e:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800e152:	4629      	mov	r1, r5
 800e154:	dc09      	bgt.n	800e16a <__exponent+0x4c>
 800e156:	3130      	adds	r1, #48	; 0x30
 800e158:	3b02      	subs	r3, #2
 800e15a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e15e:	42bb      	cmp	r3, r7
 800e160:	4622      	mov	r2, r4
 800e162:	d304      	bcc.n	800e16e <__exponent+0x50>
 800e164:	1a10      	subs	r0, r2, r0
 800e166:	b003      	add	sp, #12
 800e168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e16a:	4613      	mov	r3, r2
 800e16c:	e7e7      	b.n	800e13e <__exponent+0x20>
 800e16e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e172:	f804 2b01 	strb.w	r2, [r4], #1
 800e176:	e7f2      	b.n	800e15e <__exponent+0x40>
 800e178:	2330      	movs	r3, #48	; 0x30
 800e17a:	4419      	add	r1, r3
 800e17c:	7083      	strb	r3, [r0, #2]
 800e17e:	1d02      	adds	r2, r0, #4
 800e180:	70c1      	strb	r1, [r0, #3]
 800e182:	e7ef      	b.n	800e164 <__exponent+0x46>

0800e184 <_printf_float>:
 800e184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e188:	b08d      	sub	sp, #52	; 0x34
 800e18a:	460c      	mov	r4, r1
 800e18c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800e190:	4616      	mov	r6, r2
 800e192:	461f      	mov	r7, r3
 800e194:	4605      	mov	r5, r0
 800e196:	f001 fce5 	bl	800fb64 <_localeconv_r>
 800e19a:	6803      	ldr	r3, [r0, #0]
 800e19c:	9304      	str	r3, [sp, #16]
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f7f2 f83e 	bl	8000220 <strlen>
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	930a      	str	r3, [sp, #40]	; 0x28
 800e1a8:	f8d8 3000 	ldr.w	r3, [r8]
 800e1ac:	9005      	str	r0, [sp, #20]
 800e1ae:	3307      	adds	r3, #7
 800e1b0:	f023 0307 	bic.w	r3, r3, #7
 800e1b4:	f103 0208 	add.w	r2, r3, #8
 800e1b8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e1bc:	f8d4 b000 	ldr.w	fp, [r4]
 800e1c0:	f8c8 2000 	str.w	r2, [r8]
 800e1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1c8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e1cc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e1d0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e1d4:	9307      	str	r3, [sp, #28]
 800e1d6:	f8cd 8018 	str.w	r8, [sp, #24]
 800e1da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e1de:	4ba7      	ldr	r3, [pc, #668]	; (800e47c <_printf_float+0x2f8>)
 800e1e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e1e4:	f7f2 fcca 	bl	8000b7c <__aeabi_dcmpun>
 800e1e8:	bb70      	cbnz	r0, 800e248 <_printf_float+0xc4>
 800e1ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e1ee:	4ba3      	ldr	r3, [pc, #652]	; (800e47c <_printf_float+0x2f8>)
 800e1f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e1f4:	f7f2 fca4 	bl	8000b40 <__aeabi_dcmple>
 800e1f8:	bb30      	cbnz	r0, 800e248 <_printf_float+0xc4>
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	4640      	mov	r0, r8
 800e200:	4649      	mov	r1, r9
 800e202:	f7f2 fc93 	bl	8000b2c <__aeabi_dcmplt>
 800e206:	b110      	cbz	r0, 800e20e <_printf_float+0x8a>
 800e208:	232d      	movs	r3, #45	; 0x2d
 800e20a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e20e:	4a9c      	ldr	r2, [pc, #624]	; (800e480 <_printf_float+0x2fc>)
 800e210:	4b9c      	ldr	r3, [pc, #624]	; (800e484 <_printf_float+0x300>)
 800e212:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800e216:	bf8c      	ite	hi
 800e218:	4690      	movhi	r8, r2
 800e21a:	4698      	movls	r8, r3
 800e21c:	2303      	movs	r3, #3
 800e21e:	f02b 0204 	bic.w	r2, fp, #4
 800e222:	6123      	str	r3, [r4, #16]
 800e224:	6022      	str	r2, [r4, #0]
 800e226:	f04f 0900 	mov.w	r9, #0
 800e22a:	9700      	str	r7, [sp, #0]
 800e22c:	4633      	mov	r3, r6
 800e22e:	aa0b      	add	r2, sp, #44	; 0x2c
 800e230:	4621      	mov	r1, r4
 800e232:	4628      	mov	r0, r5
 800e234:	f000 f9e6 	bl	800e604 <_printf_common>
 800e238:	3001      	adds	r0, #1
 800e23a:	f040 808d 	bne.w	800e358 <_printf_float+0x1d4>
 800e23e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e242:	b00d      	add	sp, #52	; 0x34
 800e244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e248:	4642      	mov	r2, r8
 800e24a:	464b      	mov	r3, r9
 800e24c:	4640      	mov	r0, r8
 800e24e:	4649      	mov	r1, r9
 800e250:	f7f2 fc94 	bl	8000b7c <__aeabi_dcmpun>
 800e254:	b110      	cbz	r0, 800e25c <_printf_float+0xd8>
 800e256:	4a8c      	ldr	r2, [pc, #560]	; (800e488 <_printf_float+0x304>)
 800e258:	4b8c      	ldr	r3, [pc, #560]	; (800e48c <_printf_float+0x308>)
 800e25a:	e7da      	b.n	800e212 <_printf_float+0x8e>
 800e25c:	6861      	ldr	r1, [r4, #4]
 800e25e:	1c4b      	adds	r3, r1, #1
 800e260:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800e264:	a80a      	add	r0, sp, #40	; 0x28
 800e266:	d13e      	bne.n	800e2e6 <_printf_float+0x162>
 800e268:	2306      	movs	r3, #6
 800e26a:	6063      	str	r3, [r4, #4]
 800e26c:	2300      	movs	r3, #0
 800e26e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800e272:	ab09      	add	r3, sp, #36	; 0x24
 800e274:	9300      	str	r3, [sp, #0]
 800e276:	ec49 8b10 	vmov	d0, r8, r9
 800e27a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e27e:	6022      	str	r2, [r4, #0]
 800e280:	f8cd a004 	str.w	sl, [sp, #4]
 800e284:	6861      	ldr	r1, [r4, #4]
 800e286:	4628      	mov	r0, r5
 800e288:	f7ff fee8 	bl	800e05c <__cvt>
 800e28c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800e290:	2b47      	cmp	r3, #71	; 0x47
 800e292:	4680      	mov	r8, r0
 800e294:	d109      	bne.n	800e2aa <_printf_float+0x126>
 800e296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e298:	1cd8      	adds	r0, r3, #3
 800e29a:	db02      	blt.n	800e2a2 <_printf_float+0x11e>
 800e29c:	6862      	ldr	r2, [r4, #4]
 800e29e:	4293      	cmp	r3, r2
 800e2a0:	dd47      	ble.n	800e332 <_printf_float+0x1ae>
 800e2a2:	f1aa 0a02 	sub.w	sl, sl, #2
 800e2a6:	fa5f fa8a 	uxtb.w	sl, sl
 800e2aa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800e2ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e2b0:	d824      	bhi.n	800e2fc <_printf_float+0x178>
 800e2b2:	3901      	subs	r1, #1
 800e2b4:	4652      	mov	r2, sl
 800e2b6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e2ba:	9109      	str	r1, [sp, #36]	; 0x24
 800e2bc:	f7ff ff2f 	bl	800e11e <__exponent>
 800e2c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e2c2:	1813      	adds	r3, r2, r0
 800e2c4:	2a01      	cmp	r2, #1
 800e2c6:	4681      	mov	r9, r0
 800e2c8:	6123      	str	r3, [r4, #16]
 800e2ca:	dc02      	bgt.n	800e2d2 <_printf_float+0x14e>
 800e2cc:	6822      	ldr	r2, [r4, #0]
 800e2ce:	07d1      	lsls	r1, r2, #31
 800e2d0:	d501      	bpl.n	800e2d6 <_printf_float+0x152>
 800e2d2:	3301      	adds	r3, #1
 800e2d4:	6123      	str	r3, [r4, #16]
 800e2d6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d0a5      	beq.n	800e22a <_printf_float+0xa6>
 800e2de:	232d      	movs	r3, #45	; 0x2d
 800e2e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e2e4:	e7a1      	b.n	800e22a <_printf_float+0xa6>
 800e2e6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800e2ea:	f000 8177 	beq.w	800e5dc <_printf_float+0x458>
 800e2ee:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800e2f2:	d1bb      	bne.n	800e26c <_printf_float+0xe8>
 800e2f4:	2900      	cmp	r1, #0
 800e2f6:	d1b9      	bne.n	800e26c <_printf_float+0xe8>
 800e2f8:	2301      	movs	r3, #1
 800e2fa:	e7b6      	b.n	800e26a <_printf_float+0xe6>
 800e2fc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800e300:	d119      	bne.n	800e336 <_printf_float+0x1b2>
 800e302:	2900      	cmp	r1, #0
 800e304:	6863      	ldr	r3, [r4, #4]
 800e306:	dd0c      	ble.n	800e322 <_printf_float+0x19e>
 800e308:	6121      	str	r1, [r4, #16]
 800e30a:	b913      	cbnz	r3, 800e312 <_printf_float+0x18e>
 800e30c:	6822      	ldr	r2, [r4, #0]
 800e30e:	07d2      	lsls	r2, r2, #31
 800e310:	d502      	bpl.n	800e318 <_printf_float+0x194>
 800e312:	3301      	adds	r3, #1
 800e314:	440b      	add	r3, r1
 800e316:	6123      	str	r3, [r4, #16]
 800e318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e31a:	65a3      	str	r3, [r4, #88]	; 0x58
 800e31c:	f04f 0900 	mov.w	r9, #0
 800e320:	e7d9      	b.n	800e2d6 <_printf_float+0x152>
 800e322:	b913      	cbnz	r3, 800e32a <_printf_float+0x1a6>
 800e324:	6822      	ldr	r2, [r4, #0]
 800e326:	07d0      	lsls	r0, r2, #31
 800e328:	d501      	bpl.n	800e32e <_printf_float+0x1aa>
 800e32a:	3302      	adds	r3, #2
 800e32c:	e7f3      	b.n	800e316 <_printf_float+0x192>
 800e32e:	2301      	movs	r3, #1
 800e330:	e7f1      	b.n	800e316 <_printf_float+0x192>
 800e332:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800e336:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e33a:	4293      	cmp	r3, r2
 800e33c:	db05      	blt.n	800e34a <_printf_float+0x1c6>
 800e33e:	6822      	ldr	r2, [r4, #0]
 800e340:	6123      	str	r3, [r4, #16]
 800e342:	07d1      	lsls	r1, r2, #31
 800e344:	d5e8      	bpl.n	800e318 <_printf_float+0x194>
 800e346:	3301      	adds	r3, #1
 800e348:	e7e5      	b.n	800e316 <_printf_float+0x192>
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	bfd4      	ite	le
 800e34e:	f1c3 0302 	rsble	r3, r3, #2
 800e352:	2301      	movgt	r3, #1
 800e354:	4413      	add	r3, r2
 800e356:	e7de      	b.n	800e316 <_printf_float+0x192>
 800e358:	6823      	ldr	r3, [r4, #0]
 800e35a:	055a      	lsls	r2, r3, #21
 800e35c:	d407      	bmi.n	800e36e <_printf_float+0x1ea>
 800e35e:	6923      	ldr	r3, [r4, #16]
 800e360:	4642      	mov	r2, r8
 800e362:	4631      	mov	r1, r6
 800e364:	4628      	mov	r0, r5
 800e366:	47b8      	blx	r7
 800e368:	3001      	adds	r0, #1
 800e36a:	d12b      	bne.n	800e3c4 <_printf_float+0x240>
 800e36c:	e767      	b.n	800e23e <_printf_float+0xba>
 800e36e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800e372:	f240 80dc 	bls.w	800e52e <_printf_float+0x3aa>
 800e376:	2200      	movs	r2, #0
 800e378:	2300      	movs	r3, #0
 800e37a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e37e:	f7f2 fbcb 	bl	8000b18 <__aeabi_dcmpeq>
 800e382:	2800      	cmp	r0, #0
 800e384:	d033      	beq.n	800e3ee <_printf_float+0x26a>
 800e386:	2301      	movs	r3, #1
 800e388:	4a41      	ldr	r2, [pc, #260]	; (800e490 <_printf_float+0x30c>)
 800e38a:	4631      	mov	r1, r6
 800e38c:	4628      	mov	r0, r5
 800e38e:	47b8      	blx	r7
 800e390:	3001      	adds	r0, #1
 800e392:	f43f af54 	beq.w	800e23e <_printf_float+0xba>
 800e396:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e39a:	429a      	cmp	r2, r3
 800e39c:	db02      	blt.n	800e3a4 <_printf_float+0x220>
 800e39e:	6823      	ldr	r3, [r4, #0]
 800e3a0:	07d8      	lsls	r0, r3, #31
 800e3a2:	d50f      	bpl.n	800e3c4 <_printf_float+0x240>
 800e3a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e3a8:	4631      	mov	r1, r6
 800e3aa:	4628      	mov	r0, r5
 800e3ac:	47b8      	blx	r7
 800e3ae:	3001      	adds	r0, #1
 800e3b0:	f43f af45 	beq.w	800e23e <_printf_float+0xba>
 800e3b4:	f04f 0800 	mov.w	r8, #0
 800e3b8:	f104 091a 	add.w	r9, r4, #26
 800e3bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3be:	3b01      	subs	r3, #1
 800e3c0:	4543      	cmp	r3, r8
 800e3c2:	dc09      	bgt.n	800e3d8 <_printf_float+0x254>
 800e3c4:	6823      	ldr	r3, [r4, #0]
 800e3c6:	079b      	lsls	r3, r3, #30
 800e3c8:	f100 8103 	bmi.w	800e5d2 <_printf_float+0x44e>
 800e3cc:	68e0      	ldr	r0, [r4, #12]
 800e3ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e3d0:	4298      	cmp	r0, r3
 800e3d2:	bfb8      	it	lt
 800e3d4:	4618      	movlt	r0, r3
 800e3d6:	e734      	b.n	800e242 <_printf_float+0xbe>
 800e3d8:	2301      	movs	r3, #1
 800e3da:	464a      	mov	r2, r9
 800e3dc:	4631      	mov	r1, r6
 800e3de:	4628      	mov	r0, r5
 800e3e0:	47b8      	blx	r7
 800e3e2:	3001      	adds	r0, #1
 800e3e4:	f43f af2b 	beq.w	800e23e <_printf_float+0xba>
 800e3e8:	f108 0801 	add.w	r8, r8, #1
 800e3ec:	e7e6      	b.n	800e3bc <_printf_float+0x238>
 800e3ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	dc2b      	bgt.n	800e44c <_printf_float+0x2c8>
 800e3f4:	2301      	movs	r3, #1
 800e3f6:	4a26      	ldr	r2, [pc, #152]	; (800e490 <_printf_float+0x30c>)
 800e3f8:	4631      	mov	r1, r6
 800e3fa:	4628      	mov	r0, r5
 800e3fc:	47b8      	blx	r7
 800e3fe:	3001      	adds	r0, #1
 800e400:	f43f af1d 	beq.w	800e23e <_printf_float+0xba>
 800e404:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e406:	b923      	cbnz	r3, 800e412 <_printf_float+0x28e>
 800e408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e40a:	b913      	cbnz	r3, 800e412 <_printf_float+0x28e>
 800e40c:	6823      	ldr	r3, [r4, #0]
 800e40e:	07d9      	lsls	r1, r3, #31
 800e410:	d5d8      	bpl.n	800e3c4 <_printf_float+0x240>
 800e412:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e416:	4631      	mov	r1, r6
 800e418:	4628      	mov	r0, r5
 800e41a:	47b8      	blx	r7
 800e41c:	3001      	adds	r0, #1
 800e41e:	f43f af0e 	beq.w	800e23e <_printf_float+0xba>
 800e422:	f04f 0900 	mov.w	r9, #0
 800e426:	f104 0a1a 	add.w	sl, r4, #26
 800e42a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e42c:	425b      	negs	r3, r3
 800e42e:	454b      	cmp	r3, r9
 800e430:	dc01      	bgt.n	800e436 <_printf_float+0x2b2>
 800e432:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e434:	e794      	b.n	800e360 <_printf_float+0x1dc>
 800e436:	2301      	movs	r3, #1
 800e438:	4652      	mov	r2, sl
 800e43a:	4631      	mov	r1, r6
 800e43c:	4628      	mov	r0, r5
 800e43e:	47b8      	blx	r7
 800e440:	3001      	adds	r0, #1
 800e442:	f43f aefc 	beq.w	800e23e <_printf_float+0xba>
 800e446:	f109 0901 	add.w	r9, r9, #1
 800e44a:	e7ee      	b.n	800e42a <_printf_float+0x2a6>
 800e44c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e44e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e450:	429a      	cmp	r2, r3
 800e452:	bfa8      	it	ge
 800e454:	461a      	movge	r2, r3
 800e456:	2a00      	cmp	r2, #0
 800e458:	4691      	mov	r9, r2
 800e45a:	dd07      	ble.n	800e46c <_printf_float+0x2e8>
 800e45c:	4613      	mov	r3, r2
 800e45e:	4631      	mov	r1, r6
 800e460:	4642      	mov	r2, r8
 800e462:	4628      	mov	r0, r5
 800e464:	47b8      	blx	r7
 800e466:	3001      	adds	r0, #1
 800e468:	f43f aee9 	beq.w	800e23e <_printf_float+0xba>
 800e46c:	f104 031a 	add.w	r3, r4, #26
 800e470:	f04f 0b00 	mov.w	fp, #0
 800e474:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e478:	9306      	str	r3, [sp, #24]
 800e47a:	e015      	b.n	800e4a8 <_printf_float+0x324>
 800e47c:	7fefffff 	.word	0x7fefffff
 800e480:	08011c5c 	.word	0x08011c5c
 800e484:	08011c58 	.word	0x08011c58
 800e488:	08011c64 	.word	0x08011c64
 800e48c:	08011c60 	.word	0x08011c60
 800e490:	08011c68 	.word	0x08011c68
 800e494:	2301      	movs	r3, #1
 800e496:	9a06      	ldr	r2, [sp, #24]
 800e498:	4631      	mov	r1, r6
 800e49a:	4628      	mov	r0, r5
 800e49c:	47b8      	blx	r7
 800e49e:	3001      	adds	r0, #1
 800e4a0:	f43f aecd 	beq.w	800e23e <_printf_float+0xba>
 800e4a4:	f10b 0b01 	add.w	fp, fp, #1
 800e4a8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800e4ac:	ebaa 0309 	sub.w	r3, sl, r9
 800e4b0:	455b      	cmp	r3, fp
 800e4b2:	dcef      	bgt.n	800e494 <_printf_float+0x310>
 800e4b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e4b8:	429a      	cmp	r2, r3
 800e4ba:	44d0      	add	r8, sl
 800e4bc:	db15      	blt.n	800e4ea <_printf_float+0x366>
 800e4be:	6823      	ldr	r3, [r4, #0]
 800e4c0:	07da      	lsls	r2, r3, #31
 800e4c2:	d412      	bmi.n	800e4ea <_printf_float+0x366>
 800e4c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e4c8:	eba3 020a 	sub.w	r2, r3, sl
 800e4cc:	eba3 0a01 	sub.w	sl, r3, r1
 800e4d0:	4592      	cmp	sl, r2
 800e4d2:	bfa8      	it	ge
 800e4d4:	4692      	movge	sl, r2
 800e4d6:	f1ba 0f00 	cmp.w	sl, #0
 800e4da:	dc0e      	bgt.n	800e4fa <_printf_float+0x376>
 800e4dc:	f04f 0800 	mov.w	r8, #0
 800e4e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e4e4:	f104 091a 	add.w	r9, r4, #26
 800e4e8:	e019      	b.n	800e51e <_printf_float+0x39a>
 800e4ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e4ee:	4631      	mov	r1, r6
 800e4f0:	4628      	mov	r0, r5
 800e4f2:	47b8      	blx	r7
 800e4f4:	3001      	adds	r0, #1
 800e4f6:	d1e5      	bne.n	800e4c4 <_printf_float+0x340>
 800e4f8:	e6a1      	b.n	800e23e <_printf_float+0xba>
 800e4fa:	4653      	mov	r3, sl
 800e4fc:	4642      	mov	r2, r8
 800e4fe:	4631      	mov	r1, r6
 800e500:	4628      	mov	r0, r5
 800e502:	47b8      	blx	r7
 800e504:	3001      	adds	r0, #1
 800e506:	d1e9      	bne.n	800e4dc <_printf_float+0x358>
 800e508:	e699      	b.n	800e23e <_printf_float+0xba>
 800e50a:	2301      	movs	r3, #1
 800e50c:	464a      	mov	r2, r9
 800e50e:	4631      	mov	r1, r6
 800e510:	4628      	mov	r0, r5
 800e512:	47b8      	blx	r7
 800e514:	3001      	adds	r0, #1
 800e516:	f43f ae92 	beq.w	800e23e <_printf_float+0xba>
 800e51a:	f108 0801 	add.w	r8, r8, #1
 800e51e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e522:	1a9b      	subs	r3, r3, r2
 800e524:	eba3 030a 	sub.w	r3, r3, sl
 800e528:	4543      	cmp	r3, r8
 800e52a:	dcee      	bgt.n	800e50a <_printf_float+0x386>
 800e52c:	e74a      	b.n	800e3c4 <_printf_float+0x240>
 800e52e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e530:	2a01      	cmp	r2, #1
 800e532:	dc01      	bgt.n	800e538 <_printf_float+0x3b4>
 800e534:	07db      	lsls	r3, r3, #31
 800e536:	d53a      	bpl.n	800e5ae <_printf_float+0x42a>
 800e538:	2301      	movs	r3, #1
 800e53a:	4642      	mov	r2, r8
 800e53c:	4631      	mov	r1, r6
 800e53e:	4628      	mov	r0, r5
 800e540:	47b8      	blx	r7
 800e542:	3001      	adds	r0, #1
 800e544:	f43f ae7b 	beq.w	800e23e <_printf_float+0xba>
 800e548:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e54c:	4631      	mov	r1, r6
 800e54e:	4628      	mov	r0, r5
 800e550:	47b8      	blx	r7
 800e552:	3001      	adds	r0, #1
 800e554:	f108 0801 	add.w	r8, r8, #1
 800e558:	f43f ae71 	beq.w	800e23e <_printf_float+0xba>
 800e55c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e55e:	2200      	movs	r2, #0
 800e560:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800e564:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e568:	2300      	movs	r3, #0
 800e56a:	f7f2 fad5 	bl	8000b18 <__aeabi_dcmpeq>
 800e56e:	b9c8      	cbnz	r0, 800e5a4 <_printf_float+0x420>
 800e570:	4653      	mov	r3, sl
 800e572:	4642      	mov	r2, r8
 800e574:	4631      	mov	r1, r6
 800e576:	4628      	mov	r0, r5
 800e578:	47b8      	blx	r7
 800e57a:	3001      	adds	r0, #1
 800e57c:	d10e      	bne.n	800e59c <_printf_float+0x418>
 800e57e:	e65e      	b.n	800e23e <_printf_float+0xba>
 800e580:	2301      	movs	r3, #1
 800e582:	4652      	mov	r2, sl
 800e584:	4631      	mov	r1, r6
 800e586:	4628      	mov	r0, r5
 800e588:	47b8      	blx	r7
 800e58a:	3001      	adds	r0, #1
 800e58c:	f43f ae57 	beq.w	800e23e <_printf_float+0xba>
 800e590:	f108 0801 	add.w	r8, r8, #1
 800e594:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e596:	3b01      	subs	r3, #1
 800e598:	4543      	cmp	r3, r8
 800e59a:	dcf1      	bgt.n	800e580 <_printf_float+0x3fc>
 800e59c:	464b      	mov	r3, r9
 800e59e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e5a2:	e6de      	b.n	800e362 <_printf_float+0x1de>
 800e5a4:	f04f 0800 	mov.w	r8, #0
 800e5a8:	f104 0a1a 	add.w	sl, r4, #26
 800e5ac:	e7f2      	b.n	800e594 <_printf_float+0x410>
 800e5ae:	2301      	movs	r3, #1
 800e5b0:	e7df      	b.n	800e572 <_printf_float+0x3ee>
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	464a      	mov	r2, r9
 800e5b6:	4631      	mov	r1, r6
 800e5b8:	4628      	mov	r0, r5
 800e5ba:	47b8      	blx	r7
 800e5bc:	3001      	adds	r0, #1
 800e5be:	f43f ae3e 	beq.w	800e23e <_printf_float+0xba>
 800e5c2:	f108 0801 	add.w	r8, r8, #1
 800e5c6:	68e3      	ldr	r3, [r4, #12]
 800e5c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e5ca:	1a9b      	subs	r3, r3, r2
 800e5cc:	4543      	cmp	r3, r8
 800e5ce:	dcf0      	bgt.n	800e5b2 <_printf_float+0x42e>
 800e5d0:	e6fc      	b.n	800e3cc <_printf_float+0x248>
 800e5d2:	f04f 0800 	mov.w	r8, #0
 800e5d6:	f104 0919 	add.w	r9, r4, #25
 800e5da:	e7f4      	b.n	800e5c6 <_printf_float+0x442>
 800e5dc:	2900      	cmp	r1, #0
 800e5de:	f43f ae8b 	beq.w	800e2f8 <_printf_float+0x174>
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800e5e8:	ab09      	add	r3, sp, #36	; 0x24
 800e5ea:	9300      	str	r3, [sp, #0]
 800e5ec:	ec49 8b10 	vmov	d0, r8, r9
 800e5f0:	6022      	str	r2, [r4, #0]
 800e5f2:	f8cd a004 	str.w	sl, [sp, #4]
 800e5f6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e5fa:	4628      	mov	r0, r5
 800e5fc:	f7ff fd2e 	bl	800e05c <__cvt>
 800e600:	4680      	mov	r8, r0
 800e602:	e648      	b.n	800e296 <_printf_float+0x112>

0800e604 <_printf_common>:
 800e604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e608:	4691      	mov	r9, r2
 800e60a:	461f      	mov	r7, r3
 800e60c:	688a      	ldr	r2, [r1, #8]
 800e60e:	690b      	ldr	r3, [r1, #16]
 800e610:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e614:	4293      	cmp	r3, r2
 800e616:	bfb8      	it	lt
 800e618:	4613      	movlt	r3, r2
 800e61a:	f8c9 3000 	str.w	r3, [r9]
 800e61e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e622:	4606      	mov	r6, r0
 800e624:	460c      	mov	r4, r1
 800e626:	b112      	cbz	r2, 800e62e <_printf_common+0x2a>
 800e628:	3301      	adds	r3, #1
 800e62a:	f8c9 3000 	str.w	r3, [r9]
 800e62e:	6823      	ldr	r3, [r4, #0]
 800e630:	0699      	lsls	r1, r3, #26
 800e632:	bf42      	ittt	mi
 800e634:	f8d9 3000 	ldrmi.w	r3, [r9]
 800e638:	3302      	addmi	r3, #2
 800e63a:	f8c9 3000 	strmi.w	r3, [r9]
 800e63e:	6825      	ldr	r5, [r4, #0]
 800e640:	f015 0506 	ands.w	r5, r5, #6
 800e644:	d107      	bne.n	800e656 <_printf_common+0x52>
 800e646:	f104 0a19 	add.w	sl, r4, #25
 800e64a:	68e3      	ldr	r3, [r4, #12]
 800e64c:	f8d9 2000 	ldr.w	r2, [r9]
 800e650:	1a9b      	subs	r3, r3, r2
 800e652:	42ab      	cmp	r3, r5
 800e654:	dc28      	bgt.n	800e6a8 <_printf_common+0xa4>
 800e656:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800e65a:	6822      	ldr	r2, [r4, #0]
 800e65c:	3300      	adds	r3, #0
 800e65e:	bf18      	it	ne
 800e660:	2301      	movne	r3, #1
 800e662:	0692      	lsls	r2, r2, #26
 800e664:	d42d      	bmi.n	800e6c2 <_printf_common+0xbe>
 800e666:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e66a:	4639      	mov	r1, r7
 800e66c:	4630      	mov	r0, r6
 800e66e:	47c0      	blx	r8
 800e670:	3001      	adds	r0, #1
 800e672:	d020      	beq.n	800e6b6 <_printf_common+0xb2>
 800e674:	6823      	ldr	r3, [r4, #0]
 800e676:	68e5      	ldr	r5, [r4, #12]
 800e678:	f8d9 2000 	ldr.w	r2, [r9]
 800e67c:	f003 0306 	and.w	r3, r3, #6
 800e680:	2b04      	cmp	r3, #4
 800e682:	bf08      	it	eq
 800e684:	1aad      	subeq	r5, r5, r2
 800e686:	68a3      	ldr	r3, [r4, #8]
 800e688:	6922      	ldr	r2, [r4, #16]
 800e68a:	bf0c      	ite	eq
 800e68c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e690:	2500      	movne	r5, #0
 800e692:	4293      	cmp	r3, r2
 800e694:	bfc4      	itt	gt
 800e696:	1a9b      	subgt	r3, r3, r2
 800e698:	18ed      	addgt	r5, r5, r3
 800e69a:	f04f 0900 	mov.w	r9, #0
 800e69e:	341a      	adds	r4, #26
 800e6a0:	454d      	cmp	r5, r9
 800e6a2:	d11a      	bne.n	800e6da <_printf_common+0xd6>
 800e6a4:	2000      	movs	r0, #0
 800e6a6:	e008      	b.n	800e6ba <_printf_common+0xb6>
 800e6a8:	2301      	movs	r3, #1
 800e6aa:	4652      	mov	r2, sl
 800e6ac:	4639      	mov	r1, r7
 800e6ae:	4630      	mov	r0, r6
 800e6b0:	47c0      	blx	r8
 800e6b2:	3001      	adds	r0, #1
 800e6b4:	d103      	bne.n	800e6be <_printf_common+0xba>
 800e6b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e6ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6be:	3501      	adds	r5, #1
 800e6c0:	e7c3      	b.n	800e64a <_printf_common+0x46>
 800e6c2:	18e1      	adds	r1, r4, r3
 800e6c4:	1c5a      	adds	r2, r3, #1
 800e6c6:	2030      	movs	r0, #48	; 0x30
 800e6c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e6cc:	4422      	add	r2, r4
 800e6ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e6d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e6d6:	3302      	adds	r3, #2
 800e6d8:	e7c5      	b.n	800e666 <_printf_common+0x62>
 800e6da:	2301      	movs	r3, #1
 800e6dc:	4622      	mov	r2, r4
 800e6de:	4639      	mov	r1, r7
 800e6e0:	4630      	mov	r0, r6
 800e6e2:	47c0      	blx	r8
 800e6e4:	3001      	adds	r0, #1
 800e6e6:	d0e6      	beq.n	800e6b6 <_printf_common+0xb2>
 800e6e8:	f109 0901 	add.w	r9, r9, #1
 800e6ec:	e7d8      	b.n	800e6a0 <_printf_common+0x9c>
	...

0800e6f0 <_printf_i>:
 800e6f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e6f4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800e6f8:	460c      	mov	r4, r1
 800e6fa:	7e09      	ldrb	r1, [r1, #24]
 800e6fc:	b085      	sub	sp, #20
 800e6fe:	296e      	cmp	r1, #110	; 0x6e
 800e700:	4617      	mov	r7, r2
 800e702:	4606      	mov	r6, r0
 800e704:	4698      	mov	r8, r3
 800e706:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e708:	f000 80b3 	beq.w	800e872 <_printf_i+0x182>
 800e70c:	d822      	bhi.n	800e754 <_printf_i+0x64>
 800e70e:	2963      	cmp	r1, #99	; 0x63
 800e710:	d036      	beq.n	800e780 <_printf_i+0x90>
 800e712:	d80a      	bhi.n	800e72a <_printf_i+0x3a>
 800e714:	2900      	cmp	r1, #0
 800e716:	f000 80b9 	beq.w	800e88c <_printf_i+0x19c>
 800e71a:	2958      	cmp	r1, #88	; 0x58
 800e71c:	f000 8083 	beq.w	800e826 <_printf_i+0x136>
 800e720:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e724:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800e728:	e032      	b.n	800e790 <_printf_i+0xa0>
 800e72a:	2964      	cmp	r1, #100	; 0x64
 800e72c:	d001      	beq.n	800e732 <_printf_i+0x42>
 800e72e:	2969      	cmp	r1, #105	; 0x69
 800e730:	d1f6      	bne.n	800e720 <_printf_i+0x30>
 800e732:	6820      	ldr	r0, [r4, #0]
 800e734:	6813      	ldr	r3, [r2, #0]
 800e736:	0605      	lsls	r5, r0, #24
 800e738:	f103 0104 	add.w	r1, r3, #4
 800e73c:	d52a      	bpl.n	800e794 <_printf_i+0xa4>
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	6011      	str	r1, [r2, #0]
 800e742:	2b00      	cmp	r3, #0
 800e744:	da03      	bge.n	800e74e <_printf_i+0x5e>
 800e746:	222d      	movs	r2, #45	; 0x2d
 800e748:	425b      	negs	r3, r3
 800e74a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e74e:	486f      	ldr	r0, [pc, #444]	; (800e90c <_printf_i+0x21c>)
 800e750:	220a      	movs	r2, #10
 800e752:	e039      	b.n	800e7c8 <_printf_i+0xd8>
 800e754:	2973      	cmp	r1, #115	; 0x73
 800e756:	f000 809d 	beq.w	800e894 <_printf_i+0x1a4>
 800e75a:	d808      	bhi.n	800e76e <_printf_i+0x7e>
 800e75c:	296f      	cmp	r1, #111	; 0x6f
 800e75e:	d020      	beq.n	800e7a2 <_printf_i+0xb2>
 800e760:	2970      	cmp	r1, #112	; 0x70
 800e762:	d1dd      	bne.n	800e720 <_printf_i+0x30>
 800e764:	6823      	ldr	r3, [r4, #0]
 800e766:	f043 0320 	orr.w	r3, r3, #32
 800e76a:	6023      	str	r3, [r4, #0]
 800e76c:	e003      	b.n	800e776 <_printf_i+0x86>
 800e76e:	2975      	cmp	r1, #117	; 0x75
 800e770:	d017      	beq.n	800e7a2 <_printf_i+0xb2>
 800e772:	2978      	cmp	r1, #120	; 0x78
 800e774:	d1d4      	bne.n	800e720 <_printf_i+0x30>
 800e776:	2378      	movs	r3, #120	; 0x78
 800e778:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e77c:	4864      	ldr	r0, [pc, #400]	; (800e910 <_printf_i+0x220>)
 800e77e:	e055      	b.n	800e82c <_printf_i+0x13c>
 800e780:	6813      	ldr	r3, [r2, #0]
 800e782:	1d19      	adds	r1, r3, #4
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	6011      	str	r1, [r2, #0]
 800e788:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e78c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e790:	2301      	movs	r3, #1
 800e792:	e08c      	b.n	800e8ae <_printf_i+0x1be>
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	6011      	str	r1, [r2, #0]
 800e798:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e79c:	bf18      	it	ne
 800e79e:	b21b      	sxthne	r3, r3
 800e7a0:	e7cf      	b.n	800e742 <_printf_i+0x52>
 800e7a2:	6813      	ldr	r3, [r2, #0]
 800e7a4:	6825      	ldr	r5, [r4, #0]
 800e7a6:	1d18      	adds	r0, r3, #4
 800e7a8:	6010      	str	r0, [r2, #0]
 800e7aa:	0628      	lsls	r0, r5, #24
 800e7ac:	d501      	bpl.n	800e7b2 <_printf_i+0xc2>
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	e002      	b.n	800e7b8 <_printf_i+0xc8>
 800e7b2:	0668      	lsls	r0, r5, #25
 800e7b4:	d5fb      	bpl.n	800e7ae <_printf_i+0xbe>
 800e7b6:	881b      	ldrh	r3, [r3, #0]
 800e7b8:	4854      	ldr	r0, [pc, #336]	; (800e90c <_printf_i+0x21c>)
 800e7ba:	296f      	cmp	r1, #111	; 0x6f
 800e7bc:	bf14      	ite	ne
 800e7be:	220a      	movne	r2, #10
 800e7c0:	2208      	moveq	r2, #8
 800e7c2:	2100      	movs	r1, #0
 800e7c4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e7c8:	6865      	ldr	r5, [r4, #4]
 800e7ca:	60a5      	str	r5, [r4, #8]
 800e7cc:	2d00      	cmp	r5, #0
 800e7ce:	f2c0 8095 	blt.w	800e8fc <_printf_i+0x20c>
 800e7d2:	6821      	ldr	r1, [r4, #0]
 800e7d4:	f021 0104 	bic.w	r1, r1, #4
 800e7d8:	6021      	str	r1, [r4, #0]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d13d      	bne.n	800e85a <_printf_i+0x16a>
 800e7de:	2d00      	cmp	r5, #0
 800e7e0:	f040 808e 	bne.w	800e900 <_printf_i+0x210>
 800e7e4:	4665      	mov	r5, ip
 800e7e6:	2a08      	cmp	r2, #8
 800e7e8:	d10b      	bne.n	800e802 <_printf_i+0x112>
 800e7ea:	6823      	ldr	r3, [r4, #0]
 800e7ec:	07db      	lsls	r3, r3, #31
 800e7ee:	d508      	bpl.n	800e802 <_printf_i+0x112>
 800e7f0:	6923      	ldr	r3, [r4, #16]
 800e7f2:	6862      	ldr	r2, [r4, #4]
 800e7f4:	429a      	cmp	r2, r3
 800e7f6:	bfde      	ittt	le
 800e7f8:	2330      	movle	r3, #48	; 0x30
 800e7fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e7fe:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800e802:	ebac 0305 	sub.w	r3, ip, r5
 800e806:	6123      	str	r3, [r4, #16]
 800e808:	f8cd 8000 	str.w	r8, [sp]
 800e80c:	463b      	mov	r3, r7
 800e80e:	aa03      	add	r2, sp, #12
 800e810:	4621      	mov	r1, r4
 800e812:	4630      	mov	r0, r6
 800e814:	f7ff fef6 	bl	800e604 <_printf_common>
 800e818:	3001      	adds	r0, #1
 800e81a:	d14d      	bne.n	800e8b8 <_printf_i+0x1c8>
 800e81c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e820:	b005      	add	sp, #20
 800e822:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e826:	4839      	ldr	r0, [pc, #228]	; (800e90c <_printf_i+0x21c>)
 800e828:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800e82c:	6813      	ldr	r3, [r2, #0]
 800e82e:	6821      	ldr	r1, [r4, #0]
 800e830:	1d1d      	adds	r5, r3, #4
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	6015      	str	r5, [r2, #0]
 800e836:	060a      	lsls	r2, r1, #24
 800e838:	d50b      	bpl.n	800e852 <_printf_i+0x162>
 800e83a:	07ca      	lsls	r2, r1, #31
 800e83c:	bf44      	itt	mi
 800e83e:	f041 0120 	orrmi.w	r1, r1, #32
 800e842:	6021      	strmi	r1, [r4, #0]
 800e844:	b91b      	cbnz	r3, 800e84e <_printf_i+0x15e>
 800e846:	6822      	ldr	r2, [r4, #0]
 800e848:	f022 0220 	bic.w	r2, r2, #32
 800e84c:	6022      	str	r2, [r4, #0]
 800e84e:	2210      	movs	r2, #16
 800e850:	e7b7      	b.n	800e7c2 <_printf_i+0xd2>
 800e852:	064d      	lsls	r5, r1, #25
 800e854:	bf48      	it	mi
 800e856:	b29b      	uxthmi	r3, r3
 800e858:	e7ef      	b.n	800e83a <_printf_i+0x14a>
 800e85a:	4665      	mov	r5, ip
 800e85c:	fbb3 f1f2 	udiv	r1, r3, r2
 800e860:	fb02 3311 	mls	r3, r2, r1, r3
 800e864:	5cc3      	ldrb	r3, [r0, r3]
 800e866:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e86a:	460b      	mov	r3, r1
 800e86c:	2900      	cmp	r1, #0
 800e86e:	d1f5      	bne.n	800e85c <_printf_i+0x16c>
 800e870:	e7b9      	b.n	800e7e6 <_printf_i+0xf6>
 800e872:	6813      	ldr	r3, [r2, #0]
 800e874:	6825      	ldr	r5, [r4, #0]
 800e876:	6961      	ldr	r1, [r4, #20]
 800e878:	1d18      	adds	r0, r3, #4
 800e87a:	6010      	str	r0, [r2, #0]
 800e87c:	0628      	lsls	r0, r5, #24
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	d501      	bpl.n	800e886 <_printf_i+0x196>
 800e882:	6019      	str	r1, [r3, #0]
 800e884:	e002      	b.n	800e88c <_printf_i+0x19c>
 800e886:	066a      	lsls	r2, r5, #25
 800e888:	d5fb      	bpl.n	800e882 <_printf_i+0x192>
 800e88a:	8019      	strh	r1, [r3, #0]
 800e88c:	2300      	movs	r3, #0
 800e88e:	6123      	str	r3, [r4, #16]
 800e890:	4665      	mov	r5, ip
 800e892:	e7b9      	b.n	800e808 <_printf_i+0x118>
 800e894:	6813      	ldr	r3, [r2, #0]
 800e896:	1d19      	adds	r1, r3, #4
 800e898:	6011      	str	r1, [r2, #0]
 800e89a:	681d      	ldr	r5, [r3, #0]
 800e89c:	6862      	ldr	r2, [r4, #4]
 800e89e:	2100      	movs	r1, #0
 800e8a0:	4628      	mov	r0, r5
 800e8a2:	f7f1 fcc5 	bl	8000230 <memchr>
 800e8a6:	b108      	cbz	r0, 800e8ac <_printf_i+0x1bc>
 800e8a8:	1b40      	subs	r0, r0, r5
 800e8aa:	6060      	str	r0, [r4, #4]
 800e8ac:	6863      	ldr	r3, [r4, #4]
 800e8ae:	6123      	str	r3, [r4, #16]
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e8b6:	e7a7      	b.n	800e808 <_printf_i+0x118>
 800e8b8:	6923      	ldr	r3, [r4, #16]
 800e8ba:	462a      	mov	r2, r5
 800e8bc:	4639      	mov	r1, r7
 800e8be:	4630      	mov	r0, r6
 800e8c0:	47c0      	blx	r8
 800e8c2:	3001      	adds	r0, #1
 800e8c4:	d0aa      	beq.n	800e81c <_printf_i+0x12c>
 800e8c6:	6823      	ldr	r3, [r4, #0]
 800e8c8:	079b      	lsls	r3, r3, #30
 800e8ca:	d413      	bmi.n	800e8f4 <_printf_i+0x204>
 800e8cc:	68e0      	ldr	r0, [r4, #12]
 800e8ce:	9b03      	ldr	r3, [sp, #12]
 800e8d0:	4298      	cmp	r0, r3
 800e8d2:	bfb8      	it	lt
 800e8d4:	4618      	movlt	r0, r3
 800e8d6:	e7a3      	b.n	800e820 <_printf_i+0x130>
 800e8d8:	2301      	movs	r3, #1
 800e8da:	464a      	mov	r2, r9
 800e8dc:	4639      	mov	r1, r7
 800e8de:	4630      	mov	r0, r6
 800e8e0:	47c0      	blx	r8
 800e8e2:	3001      	adds	r0, #1
 800e8e4:	d09a      	beq.n	800e81c <_printf_i+0x12c>
 800e8e6:	3501      	adds	r5, #1
 800e8e8:	68e3      	ldr	r3, [r4, #12]
 800e8ea:	9a03      	ldr	r2, [sp, #12]
 800e8ec:	1a9b      	subs	r3, r3, r2
 800e8ee:	42ab      	cmp	r3, r5
 800e8f0:	dcf2      	bgt.n	800e8d8 <_printf_i+0x1e8>
 800e8f2:	e7eb      	b.n	800e8cc <_printf_i+0x1dc>
 800e8f4:	2500      	movs	r5, #0
 800e8f6:	f104 0919 	add.w	r9, r4, #25
 800e8fa:	e7f5      	b.n	800e8e8 <_printf_i+0x1f8>
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d1ac      	bne.n	800e85a <_printf_i+0x16a>
 800e900:	7803      	ldrb	r3, [r0, #0]
 800e902:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e906:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e90a:	e76c      	b.n	800e7e6 <_printf_i+0xf6>
 800e90c:	08011c6a 	.word	0x08011c6a
 800e910:	08011c7b 	.word	0x08011c7b

0800e914 <_puts_r>:
 800e914:	b570      	push	{r4, r5, r6, lr}
 800e916:	460e      	mov	r6, r1
 800e918:	4605      	mov	r5, r0
 800e91a:	b118      	cbz	r0, 800e924 <_puts_r+0x10>
 800e91c:	6983      	ldr	r3, [r0, #24]
 800e91e:	b90b      	cbnz	r3, 800e924 <_puts_r+0x10>
 800e920:	f001 f896 	bl	800fa50 <__sinit>
 800e924:	69ab      	ldr	r3, [r5, #24]
 800e926:	68ac      	ldr	r4, [r5, #8]
 800e928:	b913      	cbnz	r3, 800e930 <_puts_r+0x1c>
 800e92a:	4628      	mov	r0, r5
 800e92c:	f001 f890 	bl	800fa50 <__sinit>
 800e930:	4b23      	ldr	r3, [pc, #140]	; (800e9c0 <_puts_r+0xac>)
 800e932:	429c      	cmp	r4, r3
 800e934:	d117      	bne.n	800e966 <_puts_r+0x52>
 800e936:	686c      	ldr	r4, [r5, #4]
 800e938:	89a3      	ldrh	r3, [r4, #12]
 800e93a:	071b      	lsls	r3, r3, #28
 800e93c:	d51d      	bpl.n	800e97a <_puts_r+0x66>
 800e93e:	6923      	ldr	r3, [r4, #16]
 800e940:	b1db      	cbz	r3, 800e97a <_puts_r+0x66>
 800e942:	3e01      	subs	r6, #1
 800e944:	68a3      	ldr	r3, [r4, #8]
 800e946:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e94a:	3b01      	subs	r3, #1
 800e94c:	60a3      	str	r3, [r4, #8]
 800e94e:	b9e9      	cbnz	r1, 800e98c <_puts_r+0x78>
 800e950:	2b00      	cmp	r3, #0
 800e952:	da2e      	bge.n	800e9b2 <_puts_r+0x9e>
 800e954:	4622      	mov	r2, r4
 800e956:	210a      	movs	r1, #10
 800e958:	4628      	mov	r0, r5
 800e95a:	f000 f883 	bl	800ea64 <__swbuf_r>
 800e95e:	3001      	adds	r0, #1
 800e960:	d011      	beq.n	800e986 <_puts_r+0x72>
 800e962:	200a      	movs	r0, #10
 800e964:	e011      	b.n	800e98a <_puts_r+0x76>
 800e966:	4b17      	ldr	r3, [pc, #92]	; (800e9c4 <_puts_r+0xb0>)
 800e968:	429c      	cmp	r4, r3
 800e96a:	d101      	bne.n	800e970 <_puts_r+0x5c>
 800e96c:	68ac      	ldr	r4, [r5, #8]
 800e96e:	e7e3      	b.n	800e938 <_puts_r+0x24>
 800e970:	4b15      	ldr	r3, [pc, #84]	; (800e9c8 <_puts_r+0xb4>)
 800e972:	429c      	cmp	r4, r3
 800e974:	bf08      	it	eq
 800e976:	68ec      	ldreq	r4, [r5, #12]
 800e978:	e7de      	b.n	800e938 <_puts_r+0x24>
 800e97a:	4621      	mov	r1, r4
 800e97c:	4628      	mov	r0, r5
 800e97e:	f000 f8c3 	bl	800eb08 <__swsetup_r>
 800e982:	2800      	cmp	r0, #0
 800e984:	d0dd      	beq.n	800e942 <_puts_r+0x2e>
 800e986:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e98a:	bd70      	pop	{r4, r5, r6, pc}
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	da04      	bge.n	800e99a <_puts_r+0x86>
 800e990:	69a2      	ldr	r2, [r4, #24]
 800e992:	429a      	cmp	r2, r3
 800e994:	dc06      	bgt.n	800e9a4 <_puts_r+0x90>
 800e996:	290a      	cmp	r1, #10
 800e998:	d004      	beq.n	800e9a4 <_puts_r+0x90>
 800e99a:	6823      	ldr	r3, [r4, #0]
 800e99c:	1c5a      	adds	r2, r3, #1
 800e99e:	6022      	str	r2, [r4, #0]
 800e9a0:	7019      	strb	r1, [r3, #0]
 800e9a2:	e7cf      	b.n	800e944 <_puts_r+0x30>
 800e9a4:	4622      	mov	r2, r4
 800e9a6:	4628      	mov	r0, r5
 800e9a8:	f000 f85c 	bl	800ea64 <__swbuf_r>
 800e9ac:	3001      	adds	r0, #1
 800e9ae:	d1c9      	bne.n	800e944 <_puts_r+0x30>
 800e9b0:	e7e9      	b.n	800e986 <_puts_r+0x72>
 800e9b2:	6823      	ldr	r3, [r4, #0]
 800e9b4:	200a      	movs	r0, #10
 800e9b6:	1c5a      	adds	r2, r3, #1
 800e9b8:	6022      	str	r2, [r4, #0]
 800e9ba:	7018      	strb	r0, [r3, #0]
 800e9bc:	e7e5      	b.n	800e98a <_puts_r+0x76>
 800e9be:	bf00      	nop
 800e9c0:	08011cbc 	.word	0x08011cbc
 800e9c4:	08011cdc 	.word	0x08011cdc
 800e9c8:	08011c9c 	.word	0x08011c9c

0800e9cc <puts>:
 800e9cc:	4b02      	ldr	r3, [pc, #8]	; (800e9d8 <puts+0xc>)
 800e9ce:	4601      	mov	r1, r0
 800e9d0:	6818      	ldr	r0, [r3, #0]
 800e9d2:	f7ff bf9f 	b.w	800e914 <_puts_r>
 800e9d6:	bf00      	nop
 800e9d8:	20001d00 	.word	0x20001d00

0800e9dc <sniprintf>:
 800e9dc:	b40c      	push	{r2, r3}
 800e9de:	b530      	push	{r4, r5, lr}
 800e9e0:	4b17      	ldr	r3, [pc, #92]	; (800ea40 <sniprintf+0x64>)
 800e9e2:	1e0c      	subs	r4, r1, #0
 800e9e4:	b09d      	sub	sp, #116	; 0x74
 800e9e6:	681d      	ldr	r5, [r3, #0]
 800e9e8:	da08      	bge.n	800e9fc <sniprintf+0x20>
 800e9ea:	238b      	movs	r3, #139	; 0x8b
 800e9ec:	602b      	str	r3, [r5, #0]
 800e9ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e9f2:	b01d      	add	sp, #116	; 0x74
 800e9f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e9f8:	b002      	add	sp, #8
 800e9fa:	4770      	bx	lr
 800e9fc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ea00:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ea04:	bf14      	ite	ne
 800ea06:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800ea0a:	4623      	moveq	r3, r4
 800ea0c:	9304      	str	r3, [sp, #16]
 800ea0e:	9307      	str	r3, [sp, #28]
 800ea10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ea14:	9002      	str	r0, [sp, #8]
 800ea16:	9006      	str	r0, [sp, #24]
 800ea18:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ea1c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ea1e:	ab21      	add	r3, sp, #132	; 0x84
 800ea20:	a902      	add	r1, sp, #8
 800ea22:	4628      	mov	r0, r5
 800ea24:	9301      	str	r3, [sp, #4]
 800ea26:	f001 fd0d 	bl	8010444 <_svfiprintf_r>
 800ea2a:	1c43      	adds	r3, r0, #1
 800ea2c:	bfbc      	itt	lt
 800ea2e:	238b      	movlt	r3, #139	; 0x8b
 800ea30:	602b      	strlt	r3, [r5, #0]
 800ea32:	2c00      	cmp	r4, #0
 800ea34:	d0dd      	beq.n	800e9f2 <sniprintf+0x16>
 800ea36:	9b02      	ldr	r3, [sp, #8]
 800ea38:	2200      	movs	r2, #0
 800ea3a:	701a      	strb	r2, [r3, #0]
 800ea3c:	e7d9      	b.n	800e9f2 <sniprintf+0x16>
 800ea3e:	bf00      	nop
 800ea40:	20001d00 	.word	0x20001d00

0800ea44 <strcat>:
 800ea44:	b510      	push	{r4, lr}
 800ea46:	4603      	mov	r3, r0
 800ea48:	781a      	ldrb	r2, [r3, #0]
 800ea4a:	1c5c      	adds	r4, r3, #1
 800ea4c:	b93a      	cbnz	r2, 800ea5e <strcat+0x1a>
 800ea4e:	3b01      	subs	r3, #1
 800ea50:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ea54:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ea58:	2a00      	cmp	r2, #0
 800ea5a:	d1f9      	bne.n	800ea50 <strcat+0xc>
 800ea5c:	bd10      	pop	{r4, pc}
 800ea5e:	4623      	mov	r3, r4
 800ea60:	e7f2      	b.n	800ea48 <strcat+0x4>
	...

0800ea64 <__swbuf_r>:
 800ea64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea66:	460e      	mov	r6, r1
 800ea68:	4614      	mov	r4, r2
 800ea6a:	4605      	mov	r5, r0
 800ea6c:	b118      	cbz	r0, 800ea76 <__swbuf_r+0x12>
 800ea6e:	6983      	ldr	r3, [r0, #24]
 800ea70:	b90b      	cbnz	r3, 800ea76 <__swbuf_r+0x12>
 800ea72:	f000 ffed 	bl	800fa50 <__sinit>
 800ea76:	4b21      	ldr	r3, [pc, #132]	; (800eafc <__swbuf_r+0x98>)
 800ea78:	429c      	cmp	r4, r3
 800ea7a:	d12a      	bne.n	800ead2 <__swbuf_r+0x6e>
 800ea7c:	686c      	ldr	r4, [r5, #4]
 800ea7e:	69a3      	ldr	r3, [r4, #24]
 800ea80:	60a3      	str	r3, [r4, #8]
 800ea82:	89a3      	ldrh	r3, [r4, #12]
 800ea84:	071a      	lsls	r2, r3, #28
 800ea86:	d52e      	bpl.n	800eae6 <__swbuf_r+0x82>
 800ea88:	6923      	ldr	r3, [r4, #16]
 800ea8a:	b363      	cbz	r3, 800eae6 <__swbuf_r+0x82>
 800ea8c:	6923      	ldr	r3, [r4, #16]
 800ea8e:	6820      	ldr	r0, [r4, #0]
 800ea90:	1ac0      	subs	r0, r0, r3
 800ea92:	6963      	ldr	r3, [r4, #20]
 800ea94:	b2f6      	uxtb	r6, r6
 800ea96:	4283      	cmp	r3, r0
 800ea98:	4637      	mov	r7, r6
 800ea9a:	dc04      	bgt.n	800eaa6 <__swbuf_r+0x42>
 800ea9c:	4621      	mov	r1, r4
 800ea9e:	4628      	mov	r0, r5
 800eaa0:	f000 ff6c 	bl	800f97c <_fflush_r>
 800eaa4:	bb28      	cbnz	r0, 800eaf2 <__swbuf_r+0x8e>
 800eaa6:	68a3      	ldr	r3, [r4, #8]
 800eaa8:	3b01      	subs	r3, #1
 800eaaa:	60a3      	str	r3, [r4, #8]
 800eaac:	6823      	ldr	r3, [r4, #0]
 800eaae:	1c5a      	adds	r2, r3, #1
 800eab0:	6022      	str	r2, [r4, #0]
 800eab2:	701e      	strb	r6, [r3, #0]
 800eab4:	6963      	ldr	r3, [r4, #20]
 800eab6:	3001      	adds	r0, #1
 800eab8:	4283      	cmp	r3, r0
 800eaba:	d004      	beq.n	800eac6 <__swbuf_r+0x62>
 800eabc:	89a3      	ldrh	r3, [r4, #12]
 800eabe:	07db      	lsls	r3, r3, #31
 800eac0:	d519      	bpl.n	800eaf6 <__swbuf_r+0x92>
 800eac2:	2e0a      	cmp	r6, #10
 800eac4:	d117      	bne.n	800eaf6 <__swbuf_r+0x92>
 800eac6:	4621      	mov	r1, r4
 800eac8:	4628      	mov	r0, r5
 800eaca:	f000 ff57 	bl	800f97c <_fflush_r>
 800eace:	b190      	cbz	r0, 800eaf6 <__swbuf_r+0x92>
 800ead0:	e00f      	b.n	800eaf2 <__swbuf_r+0x8e>
 800ead2:	4b0b      	ldr	r3, [pc, #44]	; (800eb00 <__swbuf_r+0x9c>)
 800ead4:	429c      	cmp	r4, r3
 800ead6:	d101      	bne.n	800eadc <__swbuf_r+0x78>
 800ead8:	68ac      	ldr	r4, [r5, #8]
 800eada:	e7d0      	b.n	800ea7e <__swbuf_r+0x1a>
 800eadc:	4b09      	ldr	r3, [pc, #36]	; (800eb04 <__swbuf_r+0xa0>)
 800eade:	429c      	cmp	r4, r3
 800eae0:	bf08      	it	eq
 800eae2:	68ec      	ldreq	r4, [r5, #12]
 800eae4:	e7cb      	b.n	800ea7e <__swbuf_r+0x1a>
 800eae6:	4621      	mov	r1, r4
 800eae8:	4628      	mov	r0, r5
 800eaea:	f000 f80d 	bl	800eb08 <__swsetup_r>
 800eaee:	2800      	cmp	r0, #0
 800eaf0:	d0cc      	beq.n	800ea8c <__swbuf_r+0x28>
 800eaf2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800eaf6:	4638      	mov	r0, r7
 800eaf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eafa:	bf00      	nop
 800eafc:	08011cbc 	.word	0x08011cbc
 800eb00:	08011cdc 	.word	0x08011cdc
 800eb04:	08011c9c 	.word	0x08011c9c

0800eb08 <__swsetup_r>:
 800eb08:	4b32      	ldr	r3, [pc, #200]	; (800ebd4 <__swsetup_r+0xcc>)
 800eb0a:	b570      	push	{r4, r5, r6, lr}
 800eb0c:	681d      	ldr	r5, [r3, #0]
 800eb0e:	4606      	mov	r6, r0
 800eb10:	460c      	mov	r4, r1
 800eb12:	b125      	cbz	r5, 800eb1e <__swsetup_r+0x16>
 800eb14:	69ab      	ldr	r3, [r5, #24]
 800eb16:	b913      	cbnz	r3, 800eb1e <__swsetup_r+0x16>
 800eb18:	4628      	mov	r0, r5
 800eb1a:	f000 ff99 	bl	800fa50 <__sinit>
 800eb1e:	4b2e      	ldr	r3, [pc, #184]	; (800ebd8 <__swsetup_r+0xd0>)
 800eb20:	429c      	cmp	r4, r3
 800eb22:	d10f      	bne.n	800eb44 <__swsetup_r+0x3c>
 800eb24:	686c      	ldr	r4, [r5, #4]
 800eb26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb2a:	b29a      	uxth	r2, r3
 800eb2c:	0715      	lsls	r5, r2, #28
 800eb2e:	d42c      	bmi.n	800eb8a <__swsetup_r+0x82>
 800eb30:	06d0      	lsls	r0, r2, #27
 800eb32:	d411      	bmi.n	800eb58 <__swsetup_r+0x50>
 800eb34:	2209      	movs	r2, #9
 800eb36:	6032      	str	r2, [r6, #0]
 800eb38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb3c:	81a3      	strh	r3, [r4, #12]
 800eb3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eb42:	e03e      	b.n	800ebc2 <__swsetup_r+0xba>
 800eb44:	4b25      	ldr	r3, [pc, #148]	; (800ebdc <__swsetup_r+0xd4>)
 800eb46:	429c      	cmp	r4, r3
 800eb48:	d101      	bne.n	800eb4e <__swsetup_r+0x46>
 800eb4a:	68ac      	ldr	r4, [r5, #8]
 800eb4c:	e7eb      	b.n	800eb26 <__swsetup_r+0x1e>
 800eb4e:	4b24      	ldr	r3, [pc, #144]	; (800ebe0 <__swsetup_r+0xd8>)
 800eb50:	429c      	cmp	r4, r3
 800eb52:	bf08      	it	eq
 800eb54:	68ec      	ldreq	r4, [r5, #12]
 800eb56:	e7e6      	b.n	800eb26 <__swsetup_r+0x1e>
 800eb58:	0751      	lsls	r1, r2, #29
 800eb5a:	d512      	bpl.n	800eb82 <__swsetup_r+0x7a>
 800eb5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb5e:	b141      	cbz	r1, 800eb72 <__swsetup_r+0x6a>
 800eb60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eb64:	4299      	cmp	r1, r3
 800eb66:	d002      	beq.n	800eb6e <__swsetup_r+0x66>
 800eb68:	4630      	mov	r0, r6
 800eb6a:	f001 fb69 	bl	8010240 <_free_r>
 800eb6e:	2300      	movs	r3, #0
 800eb70:	6363      	str	r3, [r4, #52]	; 0x34
 800eb72:	89a3      	ldrh	r3, [r4, #12]
 800eb74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800eb78:	81a3      	strh	r3, [r4, #12]
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	6063      	str	r3, [r4, #4]
 800eb7e:	6923      	ldr	r3, [r4, #16]
 800eb80:	6023      	str	r3, [r4, #0]
 800eb82:	89a3      	ldrh	r3, [r4, #12]
 800eb84:	f043 0308 	orr.w	r3, r3, #8
 800eb88:	81a3      	strh	r3, [r4, #12]
 800eb8a:	6923      	ldr	r3, [r4, #16]
 800eb8c:	b94b      	cbnz	r3, 800eba2 <__swsetup_r+0x9a>
 800eb8e:	89a3      	ldrh	r3, [r4, #12]
 800eb90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800eb94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eb98:	d003      	beq.n	800eba2 <__swsetup_r+0x9a>
 800eb9a:	4621      	mov	r1, r4
 800eb9c:	4630      	mov	r0, r6
 800eb9e:	f001 f813 	bl	800fbc8 <__smakebuf_r>
 800eba2:	89a2      	ldrh	r2, [r4, #12]
 800eba4:	f012 0301 	ands.w	r3, r2, #1
 800eba8:	d00c      	beq.n	800ebc4 <__swsetup_r+0xbc>
 800ebaa:	2300      	movs	r3, #0
 800ebac:	60a3      	str	r3, [r4, #8]
 800ebae:	6963      	ldr	r3, [r4, #20]
 800ebb0:	425b      	negs	r3, r3
 800ebb2:	61a3      	str	r3, [r4, #24]
 800ebb4:	6923      	ldr	r3, [r4, #16]
 800ebb6:	b953      	cbnz	r3, 800ebce <__swsetup_r+0xc6>
 800ebb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ebbc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800ebc0:	d1ba      	bne.n	800eb38 <__swsetup_r+0x30>
 800ebc2:	bd70      	pop	{r4, r5, r6, pc}
 800ebc4:	0792      	lsls	r2, r2, #30
 800ebc6:	bf58      	it	pl
 800ebc8:	6963      	ldrpl	r3, [r4, #20]
 800ebca:	60a3      	str	r3, [r4, #8]
 800ebcc:	e7f2      	b.n	800ebb4 <__swsetup_r+0xac>
 800ebce:	2000      	movs	r0, #0
 800ebd0:	e7f7      	b.n	800ebc2 <__swsetup_r+0xba>
 800ebd2:	bf00      	nop
 800ebd4:	20001d00 	.word	0x20001d00
 800ebd8:	08011cbc 	.word	0x08011cbc
 800ebdc:	08011cdc 	.word	0x08011cdc
 800ebe0:	08011c9c 	.word	0x08011c9c

0800ebe4 <quorem>:
 800ebe4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebe8:	6903      	ldr	r3, [r0, #16]
 800ebea:	690c      	ldr	r4, [r1, #16]
 800ebec:	42a3      	cmp	r3, r4
 800ebee:	4680      	mov	r8, r0
 800ebf0:	f2c0 8082 	blt.w	800ecf8 <quorem+0x114>
 800ebf4:	3c01      	subs	r4, #1
 800ebf6:	f101 0714 	add.w	r7, r1, #20
 800ebfa:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800ebfe:	f100 0614 	add.w	r6, r0, #20
 800ec02:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800ec06:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800ec0a:	eb06 030c 	add.w	r3, r6, ip
 800ec0e:	3501      	adds	r5, #1
 800ec10:	eb07 090c 	add.w	r9, r7, ip
 800ec14:	9301      	str	r3, [sp, #4]
 800ec16:	fbb0 f5f5 	udiv	r5, r0, r5
 800ec1a:	b395      	cbz	r5, 800ec82 <quorem+0x9e>
 800ec1c:	f04f 0a00 	mov.w	sl, #0
 800ec20:	4638      	mov	r0, r7
 800ec22:	46b6      	mov	lr, r6
 800ec24:	46d3      	mov	fp, sl
 800ec26:	f850 2b04 	ldr.w	r2, [r0], #4
 800ec2a:	b293      	uxth	r3, r2
 800ec2c:	fb05 a303 	mla	r3, r5, r3, sl
 800ec30:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ec34:	b29b      	uxth	r3, r3
 800ec36:	ebab 0303 	sub.w	r3, fp, r3
 800ec3a:	0c12      	lsrs	r2, r2, #16
 800ec3c:	f8de b000 	ldr.w	fp, [lr]
 800ec40:	fb05 a202 	mla	r2, r5, r2, sl
 800ec44:	fa13 f38b 	uxtah	r3, r3, fp
 800ec48:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800ec4c:	fa1f fb82 	uxth.w	fp, r2
 800ec50:	f8de 2000 	ldr.w	r2, [lr]
 800ec54:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800ec58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ec5c:	b29b      	uxth	r3, r3
 800ec5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ec62:	4581      	cmp	r9, r0
 800ec64:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800ec68:	f84e 3b04 	str.w	r3, [lr], #4
 800ec6c:	d2db      	bcs.n	800ec26 <quorem+0x42>
 800ec6e:	f856 300c 	ldr.w	r3, [r6, ip]
 800ec72:	b933      	cbnz	r3, 800ec82 <quorem+0x9e>
 800ec74:	9b01      	ldr	r3, [sp, #4]
 800ec76:	3b04      	subs	r3, #4
 800ec78:	429e      	cmp	r6, r3
 800ec7a:	461a      	mov	r2, r3
 800ec7c:	d330      	bcc.n	800ece0 <quorem+0xfc>
 800ec7e:	f8c8 4010 	str.w	r4, [r8, #16]
 800ec82:	4640      	mov	r0, r8
 800ec84:	f001 fa08 	bl	8010098 <__mcmp>
 800ec88:	2800      	cmp	r0, #0
 800ec8a:	db25      	blt.n	800ecd8 <quorem+0xf4>
 800ec8c:	3501      	adds	r5, #1
 800ec8e:	4630      	mov	r0, r6
 800ec90:	f04f 0c00 	mov.w	ip, #0
 800ec94:	f857 2b04 	ldr.w	r2, [r7], #4
 800ec98:	f8d0 e000 	ldr.w	lr, [r0]
 800ec9c:	b293      	uxth	r3, r2
 800ec9e:	ebac 0303 	sub.w	r3, ip, r3
 800eca2:	0c12      	lsrs	r2, r2, #16
 800eca4:	fa13 f38e 	uxtah	r3, r3, lr
 800eca8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ecac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ecb0:	b29b      	uxth	r3, r3
 800ecb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ecb6:	45b9      	cmp	r9, r7
 800ecb8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ecbc:	f840 3b04 	str.w	r3, [r0], #4
 800ecc0:	d2e8      	bcs.n	800ec94 <quorem+0xb0>
 800ecc2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800ecc6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800ecca:	b92a      	cbnz	r2, 800ecd8 <quorem+0xf4>
 800eccc:	3b04      	subs	r3, #4
 800ecce:	429e      	cmp	r6, r3
 800ecd0:	461a      	mov	r2, r3
 800ecd2:	d30b      	bcc.n	800ecec <quorem+0x108>
 800ecd4:	f8c8 4010 	str.w	r4, [r8, #16]
 800ecd8:	4628      	mov	r0, r5
 800ecda:	b003      	add	sp, #12
 800ecdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ece0:	6812      	ldr	r2, [r2, #0]
 800ece2:	3b04      	subs	r3, #4
 800ece4:	2a00      	cmp	r2, #0
 800ece6:	d1ca      	bne.n	800ec7e <quorem+0x9a>
 800ece8:	3c01      	subs	r4, #1
 800ecea:	e7c5      	b.n	800ec78 <quorem+0x94>
 800ecec:	6812      	ldr	r2, [r2, #0]
 800ecee:	3b04      	subs	r3, #4
 800ecf0:	2a00      	cmp	r2, #0
 800ecf2:	d1ef      	bne.n	800ecd4 <quorem+0xf0>
 800ecf4:	3c01      	subs	r4, #1
 800ecf6:	e7ea      	b.n	800ecce <quorem+0xea>
 800ecf8:	2000      	movs	r0, #0
 800ecfa:	e7ee      	b.n	800ecda <quorem+0xf6>
 800ecfc:	0000      	movs	r0, r0
	...

0800ed00 <_dtoa_r>:
 800ed00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed04:	ec57 6b10 	vmov	r6, r7, d0
 800ed08:	b097      	sub	sp, #92	; 0x5c
 800ed0a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ed0c:	9106      	str	r1, [sp, #24]
 800ed0e:	4604      	mov	r4, r0
 800ed10:	920b      	str	r2, [sp, #44]	; 0x2c
 800ed12:	9312      	str	r3, [sp, #72]	; 0x48
 800ed14:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ed18:	e9cd 6700 	strd	r6, r7, [sp]
 800ed1c:	b93d      	cbnz	r5, 800ed2e <_dtoa_r+0x2e>
 800ed1e:	2010      	movs	r0, #16
 800ed20:	f000 ff92 	bl	800fc48 <malloc>
 800ed24:	6260      	str	r0, [r4, #36]	; 0x24
 800ed26:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ed2a:	6005      	str	r5, [r0, #0]
 800ed2c:	60c5      	str	r5, [r0, #12]
 800ed2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed30:	6819      	ldr	r1, [r3, #0]
 800ed32:	b151      	cbz	r1, 800ed4a <_dtoa_r+0x4a>
 800ed34:	685a      	ldr	r2, [r3, #4]
 800ed36:	604a      	str	r2, [r1, #4]
 800ed38:	2301      	movs	r3, #1
 800ed3a:	4093      	lsls	r3, r2
 800ed3c:	608b      	str	r3, [r1, #8]
 800ed3e:	4620      	mov	r0, r4
 800ed40:	f000 ffc9 	bl	800fcd6 <_Bfree>
 800ed44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed46:	2200      	movs	r2, #0
 800ed48:	601a      	str	r2, [r3, #0]
 800ed4a:	1e3b      	subs	r3, r7, #0
 800ed4c:	bfbb      	ittet	lt
 800ed4e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ed52:	9301      	strlt	r3, [sp, #4]
 800ed54:	2300      	movge	r3, #0
 800ed56:	2201      	movlt	r2, #1
 800ed58:	bfac      	ite	ge
 800ed5a:	f8c8 3000 	strge.w	r3, [r8]
 800ed5e:	f8c8 2000 	strlt.w	r2, [r8]
 800ed62:	4baf      	ldr	r3, [pc, #700]	; (800f020 <_dtoa_r+0x320>)
 800ed64:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ed68:	ea33 0308 	bics.w	r3, r3, r8
 800ed6c:	d114      	bne.n	800ed98 <_dtoa_r+0x98>
 800ed6e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ed70:	f242 730f 	movw	r3, #9999	; 0x270f
 800ed74:	6013      	str	r3, [r2, #0]
 800ed76:	9b00      	ldr	r3, [sp, #0]
 800ed78:	b923      	cbnz	r3, 800ed84 <_dtoa_r+0x84>
 800ed7a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800ed7e:	2800      	cmp	r0, #0
 800ed80:	f000 8542 	beq.w	800f808 <_dtoa_r+0xb08>
 800ed84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ed86:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800f034 <_dtoa_r+0x334>
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	f000 8544 	beq.w	800f818 <_dtoa_r+0xb18>
 800ed90:	f10b 0303 	add.w	r3, fp, #3
 800ed94:	f000 bd3e 	b.w	800f814 <_dtoa_r+0xb14>
 800ed98:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	2300      	movs	r3, #0
 800eda0:	4630      	mov	r0, r6
 800eda2:	4639      	mov	r1, r7
 800eda4:	f7f1 feb8 	bl	8000b18 <__aeabi_dcmpeq>
 800eda8:	4681      	mov	r9, r0
 800edaa:	b168      	cbz	r0, 800edc8 <_dtoa_r+0xc8>
 800edac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800edae:	2301      	movs	r3, #1
 800edb0:	6013      	str	r3, [r2, #0]
 800edb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	f000 8524 	beq.w	800f802 <_dtoa_r+0xb02>
 800edba:	4b9a      	ldr	r3, [pc, #616]	; (800f024 <_dtoa_r+0x324>)
 800edbc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800edbe:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800edc2:	6013      	str	r3, [r2, #0]
 800edc4:	f000 bd28 	b.w	800f818 <_dtoa_r+0xb18>
 800edc8:	aa14      	add	r2, sp, #80	; 0x50
 800edca:	a915      	add	r1, sp, #84	; 0x54
 800edcc:	ec47 6b10 	vmov	d0, r6, r7
 800edd0:	4620      	mov	r0, r4
 800edd2:	f001 f9d8 	bl	8010186 <__d2b>
 800edd6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800edda:	9004      	str	r0, [sp, #16]
 800eddc:	2d00      	cmp	r5, #0
 800edde:	d07c      	beq.n	800eeda <_dtoa_r+0x1da>
 800ede0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ede4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800ede8:	46b2      	mov	sl, r6
 800edea:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800edee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800edf2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800edf6:	2200      	movs	r2, #0
 800edf8:	4b8b      	ldr	r3, [pc, #556]	; (800f028 <_dtoa_r+0x328>)
 800edfa:	4650      	mov	r0, sl
 800edfc:	4659      	mov	r1, fp
 800edfe:	f7f1 fa6b 	bl	80002d8 <__aeabi_dsub>
 800ee02:	a381      	add	r3, pc, #516	; (adr r3, 800f008 <_dtoa_r+0x308>)
 800ee04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee08:	f7f1 fc1e 	bl	8000648 <__aeabi_dmul>
 800ee0c:	a380      	add	r3, pc, #512	; (adr r3, 800f010 <_dtoa_r+0x310>)
 800ee0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee12:	f7f1 fa63 	bl	80002dc <__adddf3>
 800ee16:	4606      	mov	r6, r0
 800ee18:	4628      	mov	r0, r5
 800ee1a:	460f      	mov	r7, r1
 800ee1c:	f7f1 fbaa 	bl	8000574 <__aeabi_i2d>
 800ee20:	a37d      	add	r3, pc, #500	; (adr r3, 800f018 <_dtoa_r+0x318>)
 800ee22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee26:	f7f1 fc0f 	bl	8000648 <__aeabi_dmul>
 800ee2a:	4602      	mov	r2, r0
 800ee2c:	460b      	mov	r3, r1
 800ee2e:	4630      	mov	r0, r6
 800ee30:	4639      	mov	r1, r7
 800ee32:	f7f1 fa53 	bl	80002dc <__adddf3>
 800ee36:	4606      	mov	r6, r0
 800ee38:	460f      	mov	r7, r1
 800ee3a:	f7f1 feb5 	bl	8000ba8 <__aeabi_d2iz>
 800ee3e:	2200      	movs	r2, #0
 800ee40:	4682      	mov	sl, r0
 800ee42:	2300      	movs	r3, #0
 800ee44:	4630      	mov	r0, r6
 800ee46:	4639      	mov	r1, r7
 800ee48:	f7f1 fe70 	bl	8000b2c <__aeabi_dcmplt>
 800ee4c:	b148      	cbz	r0, 800ee62 <_dtoa_r+0x162>
 800ee4e:	4650      	mov	r0, sl
 800ee50:	f7f1 fb90 	bl	8000574 <__aeabi_i2d>
 800ee54:	4632      	mov	r2, r6
 800ee56:	463b      	mov	r3, r7
 800ee58:	f7f1 fe5e 	bl	8000b18 <__aeabi_dcmpeq>
 800ee5c:	b908      	cbnz	r0, 800ee62 <_dtoa_r+0x162>
 800ee5e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ee62:	f1ba 0f16 	cmp.w	sl, #22
 800ee66:	d859      	bhi.n	800ef1c <_dtoa_r+0x21c>
 800ee68:	4970      	ldr	r1, [pc, #448]	; (800f02c <_dtoa_r+0x32c>)
 800ee6a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ee6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ee72:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee76:	f7f1 fe77 	bl	8000b68 <__aeabi_dcmpgt>
 800ee7a:	2800      	cmp	r0, #0
 800ee7c:	d050      	beq.n	800ef20 <_dtoa_r+0x220>
 800ee7e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ee82:	2300      	movs	r3, #0
 800ee84:	930f      	str	r3, [sp, #60]	; 0x3c
 800ee86:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ee88:	1b5d      	subs	r5, r3, r5
 800ee8a:	f1b5 0801 	subs.w	r8, r5, #1
 800ee8e:	bf49      	itett	mi
 800ee90:	f1c5 0301 	rsbmi	r3, r5, #1
 800ee94:	2300      	movpl	r3, #0
 800ee96:	9305      	strmi	r3, [sp, #20]
 800ee98:	f04f 0800 	movmi.w	r8, #0
 800ee9c:	bf58      	it	pl
 800ee9e:	9305      	strpl	r3, [sp, #20]
 800eea0:	f1ba 0f00 	cmp.w	sl, #0
 800eea4:	db3e      	blt.n	800ef24 <_dtoa_r+0x224>
 800eea6:	2300      	movs	r3, #0
 800eea8:	44d0      	add	r8, sl
 800eeaa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800eeae:	9307      	str	r3, [sp, #28]
 800eeb0:	9b06      	ldr	r3, [sp, #24]
 800eeb2:	2b09      	cmp	r3, #9
 800eeb4:	f200 8090 	bhi.w	800efd8 <_dtoa_r+0x2d8>
 800eeb8:	2b05      	cmp	r3, #5
 800eeba:	bfc4      	itt	gt
 800eebc:	3b04      	subgt	r3, #4
 800eebe:	9306      	strgt	r3, [sp, #24]
 800eec0:	9b06      	ldr	r3, [sp, #24]
 800eec2:	f1a3 0302 	sub.w	r3, r3, #2
 800eec6:	bfcc      	ite	gt
 800eec8:	2500      	movgt	r5, #0
 800eeca:	2501      	movle	r5, #1
 800eecc:	2b03      	cmp	r3, #3
 800eece:	f200 808f 	bhi.w	800eff0 <_dtoa_r+0x2f0>
 800eed2:	e8df f003 	tbb	[pc, r3]
 800eed6:	7f7d      	.short	0x7f7d
 800eed8:	7131      	.short	0x7131
 800eeda:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800eede:	441d      	add	r5, r3
 800eee0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800eee4:	2820      	cmp	r0, #32
 800eee6:	dd13      	ble.n	800ef10 <_dtoa_r+0x210>
 800eee8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800eeec:	9b00      	ldr	r3, [sp, #0]
 800eeee:	fa08 f800 	lsl.w	r8, r8, r0
 800eef2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800eef6:	fa23 f000 	lsr.w	r0, r3, r0
 800eefa:	ea48 0000 	orr.w	r0, r8, r0
 800eefe:	f7f1 fb29 	bl	8000554 <__aeabi_ui2d>
 800ef02:	2301      	movs	r3, #1
 800ef04:	4682      	mov	sl, r0
 800ef06:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800ef0a:	3d01      	subs	r5, #1
 800ef0c:	9313      	str	r3, [sp, #76]	; 0x4c
 800ef0e:	e772      	b.n	800edf6 <_dtoa_r+0xf6>
 800ef10:	9b00      	ldr	r3, [sp, #0]
 800ef12:	f1c0 0020 	rsb	r0, r0, #32
 800ef16:	fa03 f000 	lsl.w	r0, r3, r0
 800ef1a:	e7f0      	b.n	800eefe <_dtoa_r+0x1fe>
 800ef1c:	2301      	movs	r3, #1
 800ef1e:	e7b1      	b.n	800ee84 <_dtoa_r+0x184>
 800ef20:	900f      	str	r0, [sp, #60]	; 0x3c
 800ef22:	e7b0      	b.n	800ee86 <_dtoa_r+0x186>
 800ef24:	9b05      	ldr	r3, [sp, #20]
 800ef26:	eba3 030a 	sub.w	r3, r3, sl
 800ef2a:	9305      	str	r3, [sp, #20]
 800ef2c:	f1ca 0300 	rsb	r3, sl, #0
 800ef30:	9307      	str	r3, [sp, #28]
 800ef32:	2300      	movs	r3, #0
 800ef34:	930e      	str	r3, [sp, #56]	; 0x38
 800ef36:	e7bb      	b.n	800eeb0 <_dtoa_r+0x1b0>
 800ef38:	2301      	movs	r3, #1
 800ef3a:	930a      	str	r3, [sp, #40]	; 0x28
 800ef3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	dd59      	ble.n	800eff6 <_dtoa_r+0x2f6>
 800ef42:	9302      	str	r3, [sp, #8]
 800ef44:	4699      	mov	r9, r3
 800ef46:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ef48:	2200      	movs	r2, #0
 800ef4a:	6072      	str	r2, [r6, #4]
 800ef4c:	2204      	movs	r2, #4
 800ef4e:	f102 0014 	add.w	r0, r2, #20
 800ef52:	4298      	cmp	r0, r3
 800ef54:	6871      	ldr	r1, [r6, #4]
 800ef56:	d953      	bls.n	800f000 <_dtoa_r+0x300>
 800ef58:	4620      	mov	r0, r4
 800ef5a:	f000 fe88 	bl	800fc6e <_Balloc>
 800ef5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef60:	6030      	str	r0, [r6, #0]
 800ef62:	f1b9 0f0e 	cmp.w	r9, #14
 800ef66:	f8d3 b000 	ldr.w	fp, [r3]
 800ef6a:	f200 80e6 	bhi.w	800f13a <_dtoa_r+0x43a>
 800ef6e:	2d00      	cmp	r5, #0
 800ef70:	f000 80e3 	beq.w	800f13a <_dtoa_r+0x43a>
 800ef74:	ed9d 7b00 	vldr	d7, [sp]
 800ef78:	f1ba 0f00 	cmp.w	sl, #0
 800ef7c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800ef80:	dd74      	ble.n	800f06c <_dtoa_r+0x36c>
 800ef82:	4a2a      	ldr	r2, [pc, #168]	; (800f02c <_dtoa_r+0x32c>)
 800ef84:	f00a 030f 	and.w	r3, sl, #15
 800ef88:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ef8c:	ed93 7b00 	vldr	d7, [r3]
 800ef90:	ea4f 162a 	mov.w	r6, sl, asr #4
 800ef94:	06f0      	lsls	r0, r6, #27
 800ef96:	ed8d 7b08 	vstr	d7, [sp, #32]
 800ef9a:	d565      	bpl.n	800f068 <_dtoa_r+0x368>
 800ef9c:	4b24      	ldr	r3, [pc, #144]	; (800f030 <_dtoa_r+0x330>)
 800ef9e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800efa2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800efa6:	f7f1 fc79 	bl	800089c <__aeabi_ddiv>
 800efaa:	e9cd 0100 	strd	r0, r1, [sp]
 800efae:	f006 060f 	and.w	r6, r6, #15
 800efb2:	2503      	movs	r5, #3
 800efb4:	4f1e      	ldr	r7, [pc, #120]	; (800f030 <_dtoa_r+0x330>)
 800efb6:	e04c      	b.n	800f052 <_dtoa_r+0x352>
 800efb8:	2301      	movs	r3, #1
 800efba:	930a      	str	r3, [sp, #40]	; 0x28
 800efbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800efbe:	4453      	add	r3, sl
 800efc0:	f103 0901 	add.w	r9, r3, #1
 800efc4:	9302      	str	r3, [sp, #8]
 800efc6:	464b      	mov	r3, r9
 800efc8:	2b01      	cmp	r3, #1
 800efca:	bfb8      	it	lt
 800efcc:	2301      	movlt	r3, #1
 800efce:	e7ba      	b.n	800ef46 <_dtoa_r+0x246>
 800efd0:	2300      	movs	r3, #0
 800efd2:	e7b2      	b.n	800ef3a <_dtoa_r+0x23a>
 800efd4:	2300      	movs	r3, #0
 800efd6:	e7f0      	b.n	800efba <_dtoa_r+0x2ba>
 800efd8:	2501      	movs	r5, #1
 800efda:	2300      	movs	r3, #0
 800efdc:	9306      	str	r3, [sp, #24]
 800efde:	950a      	str	r5, [sp, #40]	; 0x28
 800efe0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800efe4:	9302      	str	r3, [sp, #8]
 800efe6:	4699      	mov	r9, r3
 800efe8:	2200      	movs	r2, #0
 800efea:	2312      	movs	r3, #18
 800efec:	920b      	str	r2, [sp, #44]	; 0x2c
 800efee:	e7aa      	b.n	800ef46 <_dtoa_r+0x246>
 800eff0:	2301      	movs	r3, #1
 800eff2:	930a      	str	r3, [sp, #40]	; 0x28
 800eff4:	e7f4      	b.n	800efe0 <_dtoa_r+0x2e0>
 800eff6:	2301      	movs	r3, #1
 800eff8:	9302      	str	r3, [sp, #8]
 800effa:	4699      	mov	r9, r3
 800effc:	461a      	mov	r2, r3
 800effe:	e7f5      	b.n	800efec <_dtoa_r+0x2ec>
 800f000:	3101      	adds	r1, #1
 800f002:	6071      	str	r1, [r6, #4]
 800f004:	0052      	lsls	r2, r2, #1
 800f006:	e7a2      	b.n	800ef4e <_dtoa_r+0x24e>
 800f008:	636f4361 	.word	0x636f4361
 800f00c:	3fd287a7 	.word	0x3fd287a7
 800f010:	8b60c8b3 	.word	0x8b60c8b3
 800f014:	3fc68a28 	.word	0x3fc68a28
 800f018:	509f79fb 	.word	0x509f79fb
 800f01c:	3fd34413 	.word	0x3fd34413
 800f020:	7ff00000 	.word	0x7ff00000
 800f024:	08011c69 	.word	0x08011c69
 800f028:	3ff80000 	.word	0x3ff80000
 800f02c:	08011d28 	.word	0x08011d28
 800f030:	08011d00 	.word	0x08011d00
 800f034:	08011c95 	.word	0x08011c95
 800f038:	07f1      	lsls	r1, r6, #31
 800f03a:	d508      	bpl.n	800f04e <_dtoa_r+0x34e>
 800f03c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f040:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f044:	f7f1 fb00 	bl	8000648 <__aeabi_dmul>
 800f048:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f04c:	3501      	adds	r5, #1
 800f04e:	1076      	asrs	r6, r6, #1
 800f050:	3708      	adds	r7, #8
 800f052:	2e00      	cmp	r6, #0
 800f054:	d1f0      	bne.n	800f038 <_dtoa_r+0x338>
 800f056:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f05a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f05e:	f7f1 fc1d 	bl	800089c <__aeabi_ddiv>
 800f062:	e9cd 0100 	strd	r0, r1, [sp]
 800f066:	e01a      	b.n	800f09e <_dtoa_r+0x39e>
 800f068:	2502      	movs	r5, #2
 800f06a:	e7a3      	b.n	800efb4 <_dtoa_r+0x2b4>
 800f06c:	f000 80a0 	beq.w	800f1b0 <_dtoa_r+0x4b0>
 800f070:	f1ca 0600 	rsb	r6, sl, #0
 800f074:	4b9f      	ldr	r3, [pc, #636]	; (800f2f4 <_dtoa_r+0x5f4>)
 800f076:	4fa0      	ldr	r7, [pc, #640]	; (800f2f8 <_dtoa_r+0x5f8>)
 800f078:	f006 020f 	and.w	r2, r6, #15
 800f07c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f084:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f088:	f7f1 fade 	bl	8000648 <__aeabi_dmul>
 800f08c:	e9cd 0100 	strd	r0, r1, [sp]
 800f090:	1136      	asrs	r6, r6, #4
 800f092:	2300      	movs	r3, #0
 800f094:	2502      	movs	r5, #2
 800f096:	2e00      	cmp	r6, #0
 800f098:	d17f      	bne.n	800f19a <_dtoa_r+0x49a>
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d1e1      	bne.n	800f062 <_dtoa_r+0x362>
 800f09e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	f000 8087 	beq.w	800f1b4 <_dtoa_r+0x4b4>
 800f0a6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f0aa:	2200      	movs	r2, #0
 800f0ac:	4b93      	ldr	r3, [pc, #588]	; (800f2fc <_dtoa_r+0x5fc>)
 800f0ae:	4630      	mov	r0, r6
 800f0b0:	4639      	mov	r1, r7
 800f0b2:	f7f1 fd3b 	bl	8000b2c <__aeabi_dcmplt>
 800f0b6:	2800      	cmp	r0, #0
 800f0b8:	d07c      	beq.n	800f1b4 <_dtoa_r+0x4b4>
 800f0ba:	f1b9 0f00 	cmp.w	r9, #0
 800f0be:	d079      	beq.n	800f1b4 <_dtoa_r+0x4b4>
 800f0c0:	9b02      	ldr	r3, [sp, #8]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	dd35      	ble.n	800f132 <_dtoa_r+0x432>
 800f0c6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800f0ca:	9308      	str	r3, [sp, #32]
 800f0cc:	4639      	mov	r1, r7
 800f0ce:	2200      	movs	r2, #0
 800f0d0:	4b8b      	ldr	r3, [pc, #556]	; (800f300 <_dtoa_r+0x600>)
 800f0d2:	4630      	mov	r0, r6
 800f0d4:	f7f1 fab8 	bl	8000648 <__aeabi_dmul>
 800f0d8:	e9cd 0100 	strd	r0, r1, [sp]
 800f0dc:	9f02      	ldr	r7, [sp, #8]
 800f0de:	3501      	adds	r5, #1
 800f0e0:	4628      	mov	r0, r5
 800f0e2:	f7f1 fa47 	bl	8000574 <__aeabi_i2d>
 800f0e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f0ea:	f7f1 faad 	bl	8000648 <__aeabi_dmul>
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	4b84      	ldr	r3, [pc, #528]	; (800f304 <_dtoa_r+0x604>)
 800f0f2:	f7f1 f8f3 	bl	80002dc <__adddf3>
 800f0f6:	4605      	mov	r5, r0
 800f0f8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800f0fc:	2f00      	cmp	r7, #0
 800f0fe:	d15d      	bne.n	800f1bc <_dtoa_r+0x4bc>
 800f100:	2200      	movs	r2, #0
 800f102:	4b81      	ldr	r3, [pc, #516]	; (800f308 <_dtoa_r+0x608>)
 800f104:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f108:	f7f1 f8e6 	bl	80002d8 <__aeabi_dsub>
 800f10c:	462a      	mov	r2, r5
 800f10e:	4633      	mov	r3, r6
 800f110:	e9cd 0100 	strd	r0, r1, [sp]
 800f114:	f7f1 fd28 	bl	8000b68 <__aeabi_dcmpgt>
 800f118:	2800      	cmp	r0, #0
 800f11a:	f040 8288 	bne.w	800f62e <_dtoa_r+0x92e>
 800f11e:	462a      	mov	r2, r5
 800f120:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800f124:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f128:	f7f1 fd00 	bl	8000b2c <__aeabi_dcmplt>
 800f12c:	2800      	cmp	r0, #0
 800f12e:	f040 827c 	bne.w	800f62a <_dtoa_r+0x92a>
 800f132:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f136:	e9cd 2300 	strd	r2, r3, [sp]
 800f13a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	f2c0 8150 	blt.w	800f3e2 <_dtoa_r+0x6e2>
 800f142:	f1ba 0f0e 	cmp.w	sl, #14
 800f146:	f300 814c 	bgt.w	800f3e2 <_dtoa_r+0x6e2>
 800f14a:	4b6a      	ldr	r3, [pc, #424]	; (800f2f4 <_dtoa_r+0x5f4>)
 800f14c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f150:	ed93 7b00 	vldr	d7, [r3]
 800f154:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f156:	2b00      	cmp	r3, #0
 800f158:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f15c:	f280 80d8 	bge.w	800f310 <_dtoa_r+0x610>
 800f160:	f1b9 0f00 	cmp.w	r9, #0
 800f164:	f300 80d4 	bgt.w	800f310 <_dtoa_r+0x610>
 800f168:	f040 825e 	bne.w	800f628 <_dtoa_r+0x928>
 800f16c:	2200      	movs	r2, #0
 800f16e:	4b66      	ldr	r3, [pc, #408]	; (800f308 <_dtoa_r+0x608>)
 800f170:	ec51 0b17 	vmov	r0, r1, d7
 800f174:	f7f1 fa68 	bl	8000648 <__aeabi_dmul>
 800f178:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f17c:	f7f1 fcea 	bl	8000b54 <__aeabi_dcmpge>
 800f180:	464f      	mov	r7, r9
 800f182:	464e      	mov	r6, r9
 800f184:	2800      	cmp	r0, #0
 800f186:	f040 8234 	bne.w	800f5f2 <_dtoa_r+0x8f2>
 800f18a:	2331      	movs	r3, #49	; 0x31
 800f18c:	f10b 0501 	add.w	r5, fp, #1
 800f190:	f88b 3000 	strb.w	r3, [fp]
 800f194:	f10a 0a01 	add.w	sl, sl, #1
 800f198:	e22f      	b.n	800f5fa <_dtoa_r+0x8fa>
 800f19a:	07f2      	lsls	r2, r6, #31
 800f19c:	d505      	bpl.n	800f1aa <_dtoa_r+0x4aa>
 800f19e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f1a2:	f7f1 fa51 	bl	8000648 <__aeabi_dmul>
 800f1a6:	3501      	adds	r5, #1
 800f1a8:	2301      	movs	r3, #1
 800f1aa:	1076      	asrs	r6, r6, #1
 800f1ac:	3708      	adds	r7, #8
 800f1ae:	e772      	b.n	800f096 <_dtoa_r+0x396>
 800f1b0:	2502      	movs	r5, #2
 800f1b2:	e774      	b.n	800f09e <_dtoa_r+0x39e>
 800f1b4:	f8cd a020 	str.w	sl, [sp, #32]
 800f1b8:	464f      	mov	r7, r9
 800f1ba:	e791      	b.n	800f0e0 <_dtoa_r+0x3e0>
 800f1bc:	4b4d      	ldr	r3, [pc, #308]	; (800f2f4 <_dtoa_r+0x5f4>)
 800f1be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f1c2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800f1c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d047      	beq.n	800f25c <_dtoa_r+0x55c>
 800f1cc:	4602      	mov	r2, r0
 800f1ce:	460b      	mov	r3, r1
 800f1d0:	2000      	movs	r0, #0
 800f1d2:	494e      	ldr	r1, [pc, #312]	; (800f30c <_dtoa_r+0x60c>)
 800f1d4:	f7f1 fb62 	bl	800089c <__aeabi_ddiv>
 800f1d8:	462a      	mov	r2, r5
 800f1da:	4633      	mov	r3, r6
 800f1dc:	f7f1 f87c 	bl	80002d8 <__aeabi_dsub>
 800f1e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f1e4:	465d      	mov	r5, fp
 800f1e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f1ea:	f7f1 fcdd 	bl	8000ba8 <__aeabi_d2iz>
 800f1ee:	4606      	mov	r6, r0
 800f1f0:	f7f1 f9c0 	bl	8000574 <__aeabi_i2d>
 800f1f4:	4602      	mov	r2, r0
 800f1f6:	460b      	mov	r3, r1
 800f1f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f1fc:	f7f1 f86c 	bl	80002d8 <__aeabi_dsub>
 800f200:	3630      	adds	r6, #48	; 0x30
 800f202:	f805 6b01 	strb.w	r6, [r5], #1
 800f206:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f20a:	e9cd 0100 	strd	r0, r1, [sp]
 800f20e:	f7f1 fc8d 	bl	8000b2c <__aeabi_dcmplt>
 800f212:	2800      	cmp	r0, #0
 800f214:	d163      	bne.n	800f2de <_dtoa_r+0x5de>
 800f216:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f21a:	2000      	movs	r0, #0
 800f21c:	4937      	ldr	r1, [pc, #220]	; (800f2fc <_dtoa_r+0x5fc>)
 800f21e:	f7f1 f85b 	bl	80002d8 <__aeabi_dsub>
 800f222:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f226:	f7f1 fc81 	bl	8000b2c <__aeabi_dcmplt>
 800f22a:	2800      	cmp	r0, #0
 800f22c:	f040 80b7 	bne.w	800f39e <_dtoa_r+0x69e>
 800f230:	eba5 030b 	sub.w	r3, r5, fp
 800f234:	429f      	cmp	r7, r3
 800f236:	f77f af7c 	ble.w	800f132 <_dtoa_r+0x432>
 800f23a:	2200      	movs	r2, #0
 800f23c:	4b30      	ldr	r3, [pc, #192]	; (800f300 <_dtoa_r+0x600>)
 800f23e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f242:	f7f1 fa01 	bl	8000648 <__aeabi_dmul>
 800f246:	2200      	movs	r2, #0
 800f248:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f24c:	4b2c      	ldr	r3, [pc, #176]	; (800f300 <_dtoa_r+0x600>)
 800f24e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f252:	f7f1 f9f9 	bl	8000648 <__aeabi_dmul>
 800f256:	e9cd 0100 	strd	r0, r1, [sp]
 800f25a:	e7c4      	b.n	800f1e6 <_dtoa_r+0x4e6>
 800f25c:	462a      	mov	r2, r5
 800f25e:	4633      	mov	r3, r6
 800f260:	f7f1 f9f2 	bl	8000648 <__aeabi_dmul>
 800f264:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f268:	eb0b 0507 	add.w	r5, fp, r7
 800f26c:	465e      	mov	r6, fp
 800f26e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f272:	f7f1 fc99 	bl	8000ba8 <__aeabi_d2iz>
 800f276:	4607      	mov	r7, r0
 800f278:	f7f1 f97c 	bl	8000574 <__aeabi_i2d>
 800f27c:	3730      	adds	r7, #48	; 0x30
 800f27e:	4602      	mov	r2, r0
 800f280:	460b      	mov	r3, r1
 800f282:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f286:	f7f1 f827 	bl	80002d8 <__aeabi_dsub>
 800f28a:	f806 7b01 	strb.w	r7, [r6], #1
 800f28e:	42ae      	cmp	r6, r5
 800f290:	e9cd 0100 	strd	r0, r1, [sp]
 800f294:	f04f 0200 	mov.w	r2, #0
 800f298:	d126      	bne.n	800f2e8 <_dtoa_r+0x5e8>
 800f29a:	4b1c      	ldr	r3, [pc, #112]	; (800f30c <_dtoa_r+0x60c>)
 800f29c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f2a0:	f7f1 f81c 	bl	80002dc <__adddf3>
 800f2a4:	4602      	mov	r2, r0
 800f2a6:	460b      	mov	r3, r1
 800f2a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f2ac:	f7f1 fc5c 	bl	8000b68 <__aeabi_dcmpgt>
 800f2b0:	2800      	cmp	r0, #0
 800f2b2:	d174      	bne.n	800f39e <_dtoa_r+0x69e>
 800f2b4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f2b8:	2000      	movs	r0, #0
 800f2ba:	4914      	ldr	r1, [pc, #80]	; (800f30c <_dtoa_r+0x60c>)
 800f2bc:	f7f1 f80c 	bl	80002d8 <__aeabi_dsub>
 800f2c0:	4602      	mov	r2, r0
 800f2c2:	460b      	mov	r3, r1
 800f2c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f2c8:	f7f1 fc30 	bl	8000b2c <__aeabi_dcmplt>
 800f2cc:	2800      	cmp	r0, #0
 800f2ce:	f43f af30 	beq.w	800f132 <_dtoa_r+0x432>
 800f2d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f2d6:	2b30      	cmp	r3, #48	; 0x30
 800f2d8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800f2dc:	d002      	beq.n	800f2e4 <_dtoa_r+0x5e4>
 800f2de:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f2e2:	e04a      	b.n	800f37a <_dtoa_r+0x67a>
 800f2e4:	4615      	mov	r5, r2
 800f2e6:	e7f4      	b.n	800f2d2 <_dtoa_r+0x5d2>
 800f2e8:	4b05      	ldr	r3, [pc, #20]	; (800f300 <_dtoa_r+0x600>)
 800f2ea:	f7f1 f9ad 	bl	8000648 <__aeabi_dmul>
 800f2ee:	e9cd 0100 	strd	r0, r1, [sp]
 800f2f2:	e7bc      	b.n	800f26e <_dtoa_r+0x56e>
 800f2f4:	08011d28 	.word	0x08011d28
 800f2f8:	08011d00 	.word	0x08011d00
 800f2fc:	3ff00000 	.word	0x3ff00000
 800f300:	40240000 	.word	0x40240000
 800f304:	401c0000 	.word	0x401c0000
 800f308:	40140000 	.word	0x40140000
 800f30c:	3fe00000 	.word	0x3fe00000
 800f310:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f314:	465d      	mov	r5, fp
 800f316:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f31a:	4630      	mov	r0, r6
 800f31c:	4639      	mov	r1, r7
 800f31e:	f7f1 fabd 	bl	800089c <__aeabi_ddiv>
 800f322:	f7f1 fc41 	bl	8000ba8 <__aeabi_d2iz>
 800f326:	4680      	mov	r8, r0
 800f328:	f7f1 f924 	bl	8000574 <__aeabi_i2d>
 800f32c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f330:	f7f1 f98a 	bl	8000648 <__aeabi_dmul>
 800f334:	4602      	mov	r2, r0
 800f336:	460b      	mov	r3, r1
 800f338:	4630      	mov	r0, r6
 800f33a:	4639      	mov	r1, r7
 800f33c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800f340:	f7f0 ffca 	bl	80002d8 <__aeabi_dsub>
 800f344:	f805 6b01 	strb.w	r6, [r5], #1
 800f348:	eba5 060b 	sub.w	r6, r5, fp
 800f34c:	45b1      	cmp	r9, r6
 800f34e:	4602      	mov	r2, r0
 800f350:	460b      	mov	r3, r1
 800f352:	d139      	bne.n	800f3c8 <_dtoa_r+0x6c8>
 800f354:	f7f0 ffc2 	bl	80002dc <__adddf3>
 800f358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f35c:	4606      	mov	r6, r0
 800f35e:	460f      	mov	r7, r1
 800f360:	f7f1 fc02 	bl	8000b68 <__aeabi_dcmpgt>
 800f364:	b9c8      	cbnz	r0, 800f39a <_dtoa_r+0x69a>
 800f366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f36a:	4630      	mov	r0, r6
 800f36c:	4639      	mov	r1, r7
 800f36e:	f7f1 fbd3 	bl	8000b18 <__aeabi_dcmpeq>
 800f372:	b110      	cbz	r0, 800f37a <_dtoa_r+0x67a>
 800f374:	f018 0f01 	tst.w	r8, #1
 800f378:	d10f      	bne.n	800f39a <_dtoa_r+0x69a>
 800f37a:	9904      	ldr	r1, [sp, #16]
 800f37c:	4620      	mov	r0, r4
 800f37e:	f000 fcaa 	bl	800fcd6 <_Bfree>
 800f382:	2300      	movs	r3, #0
 800f384:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f386:	702b      	strb	r3, [r5, #0]
 800f388:	f10a 0301 	add.w	r3, sl, #1
 800f38c:	6013      	str	r3, [r2, #0]
 800f38e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f390:	2b00      	cmp	r3, #0
 800f392:	f000 8241 	beq.w	800f818 <_dtoa_r+0xb18>
 800f396:	601d      	str	r5, [r3, #0]
 800f398:	e23e      	b.n	800f818 <_dtoa_r+0xb18>
 800f39a:	f8cd a020 	str.w	sl, [sp, #32]
 800f39e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f3a2:	2a39      	cmp	r2, #57	; 0x39
 800f3a4:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800f3a8:	d108      	bne.n	800f3bc <_dtoa_r+0x6bc>
 800f3aa:	459b      	cmp	fp, r3
 800f3ac:	d10a      	bne.n	800f3c4 <_dtoa_r+0x6c4>
 800f3ae:	9b08      	ldr	r3, [sp, #32]
 800f3b0:	3301      	adds	r3, #1
 800f3b2:	9308      	str	r3, [sp, #32]
 800f3b4:	2330      	movs	r3, #48	; 0x30
 800f3b6:	f88b 3000 	strb.w	r3, [fp]
 800f3ba:	465b      	mov	r3, fp
 800f3bc:	781a      	ldrb	r2, [r3, #0]
 800f3be:	3201      	adds	r2, #1
 800f3c0:	701a      	strb	r2, [r3, #0]
 800f3c2:	e78c      	b.n	800f2de <_dtoa_r+0x5de>
 800f3c4:	461d      	mov	r5, r3
 800f3c6:	e7ea      	b.n	800f39e <_dtoa_r+0x69e>
 800f3c8:	2200      	movs	r2, #0
 800f3ca:	4b9b      	ldr	r3, [pc, #620]	; (800f638 <_dtoa_r+0x938>)
 800f3cc:	f7f1 f93c 	bl	8000648 <__aeabi_dmul>
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	4606      	mov	r6, r0
 800f3d6:	460f      	mov	r7, r1
 800f3d8:	f7f1 fb9e 	bl	8000b18 <__aeabi_dcmpeq>
 800f3dc:	2800      	cmp	r0, #0
 800f3de:	d09a      	beq.n	800f316 <_dtoa_r+0x616>
 800f3e0:	e7cb      	b.n	800f37a <_dtoa_r+0x67a>
 800f3e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f3e4:	2a00      	cmp	r2, #0
 800f3e6:	f000 808b 	beq.w	800f500 <_dtoa_r+0x800>
 800f3ea:	9a06      	ldr	r2, [sp, #24]
 800f3ec:	2a01      	cmp	r2, #1
 800f3ee:	dc6e      	bgt.n	800f4ce <_dtoa_r+0x7ce>
 800f3f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f3f2:	2a00      	cmp	r2, #0
 800f3f4:	d067      	beq.n	800f4c6 <_dtoa_r+0x7c6>
 800f3f6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f3fa:	9f07      	ldr	r7, [sp, #28]
 800f3fc:	9d05      	ldr	r5, [sp, #20]
 800f3fe:	9a05      	ldr	r2, [sp, #20]
 800f400:	2101      	movs	r1, #1
 800f402:	441a      	add	r2, r3
 800f404:	4620      	mov	r0, r4
 800f406:	9205      	str	r2, [sp, #20]
 800f408:	4498      	add	r8, r3
 800f40a:	f000 fd04 	bl	800fe16 <__i2b>
 800f40e:	4606      	mov	r6, r0
 800f410:	2d00      	cmp	r5, #0
 800f412:	dd0c      	ble.n	800f42e <_dtoa_r+0x72e>
 800f414:	f1b8 0f00 	cmp.w	r8, #0
 800f418:	dd09      	ble.n	800f42e <_dtoa_r+0x72e>
 800f41a:	4545      	cmp	r5, r8
 800f41c:	9a05      	ldr	r2, [sp, #20]
 800f41e:	462b      	mov	r3, r5
 800f420:	bfa8      	it	ge
 800f422:	4643      	movge	r3, r8
 800f424:	1ad2      	subs	r2, r2, r3
 800f426:	9205      	str	r2, [sp, #20]
 800f428:	1aed      	subs	r5, r5, r3
 800f42a:	eba8 0803 	sub.w	r8, r8, r3
 800f42e:	9b07      	ldr	r3, [sp, #28]
 800f430:	b1eb      	cbz	r3, 800f46e <_dtoa_r+0x76e>
 800f432:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f434:	2b00      	cmp	r3, #0
 800f436:	d067      	beq.n	800f508 <_dtoa_r+0x808>
 800f438:	b18f      	cbz	r7, 800f45e <_dtoa_r+0x75e>
 800f43a:	4631      	mov	r1, r6
 800f43c:	463a      	mov	r2, r7
 800f43e:	4620      	mov	r0, r4
 800f440:	f000 fd88 	bl	800ff54 <__pow5mult>
 800f444:	9a04      	ldr	r2, [sp, #16]
 800f446:	4601      	mov	r1, r0
 800f448:	4606      	mov	r6, r0
 800f44a:	4620      	mov	r0, r4
 800f44c:	f000 fcec 	bl	800fe28 <__multiply>
 800f450:	9904      	ldr	r1, [sp, #16]
 800f452:	9008      	str	r0, [sp, #32]
 800f454:	4620      	mov	r0, r4
 800f456:	f000 fc3e 	bl	800fcd6 <_Bfree>
 800f45a:	9b08      	ldr	r3, [sp, #32]
 800f45c:	9304      	str	r3, [sp, #16]
 800f45e:	9b07      	ldr	r3, [sp, #28]
 800f460:	1bda      	subs	r2, r3, r7
 800f462:	d004      	beq.n	800f46e <_dtoa_r+0x76e>
 800f464:	9904      	ldr	r1, [sp, #16]
 800f466:	4620      	mov	r0, r4
 800f468:	f000 fd74 	bl	800ff54 <__pow5mult>
 800f46c:	9004      	str	r0, [sp, #16]
 800f46e:	2101      	movs	r1, #1
 800f470:	4620      	mov	r0, r4
 800f472:	f000 fcd0 	bl	800fe16 <__i2b>
 800f476:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f478:	4607      	mov	r7, r0
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	f000 81d0 	beq.w	800f820 <_dtoa_r+0xb20>
 800f480:	461a      	mov	r2, r3
 800f482:	4601      	mov	r1, r0
 800f484:	4620      	mov	r0, r4
 800f486:	f000 fd65 	bl	800ff54 <__pow5mult>
 800f48a:	9b06      	ldr	r3, [sp, #24]
 800f48c:	2b01      	cmp	r3, #1
 800f48e:	4607      	mov	r7, r0
 800f490:	dc40      	bgt.n	800f514 <_dtoa_r+0x814>
 800f492:	9b00      	ldr	r3, [sp, #0]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d139      	bne.n	800f50c <_dtoa_r+0x80c>
 800f498:	9b01      	ldr	r3, [sp, #4]
 800f49a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d136      	bne.n	800f510 <_dtoa_r+0x810>
 800f4a2:	9b01      	ldr	r3, [sp, #4]
 800f4a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f4a8:	0d1b      	lsrs	r3, r3, #20
 800f4aa:	051b      	lsls	r3, r3, #20
 800f4ac:	b12b      	cbz	r3, 800f4ba <_dtoa_r+0x7ba>
 800f4ae:	9b05      	ldr	r3, [sp, #20]
 800f4b0:	3301      	adds	r3, #1
 800f4b2:	9305      	str	r3, [sp, #20]
 800f4b4:	f108 0801 	add.w	r8, r8, #1
 800f4b8:	2301      	movs	r3, #1
 800f4ba:	9307      	str	r3, [sp, #28]
 800f4bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d12a      	bne.n	800f518 <_dtoa_r+0x818>
 800f4c2:	2001      	movs	r0, #1
 800f4c4:	e030      	b.n	800f528 <_dtoa_r+0x828>
 800f4c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f4c8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f4cc:	e795      	b.n	800f3fa <_dtoa_r+0x6fa>
 800f4ce:	9b07      	ldr	r3, [sp, #28]
 800f4d0:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800f4d4:	42bb      	cmp	r3, r7
 800f4d6:	bfbf      	itttt	lt
 800f4d8:	9b07      	ldrlt	r3, [sp, #28]
 800f4da:	9707      	strlt	r7, [sp, #28]
 800f4dc:	1afa      	sublt	r2, r7, r3
 800f4de:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800f4e0:	bfbb      	ittet	lt
 800f4e2:	189b      	addlt	r3, r3, r2
 800f4e4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800f4e6:	1bdf      	subge	r7, r3, r7
 800f4e8:	2700      	movlt	r7, #0
 800f4ea:	f1b9 0f00 	cmp.w	r9, #0
 800f4ee:	bfb5      	itete	lt
 800f4f0:	9b05      	ldrlt	r3, [sp, #20]
 800f4f2:	9d05      	ldrge	r5, [sp, #20]
 800f4f4:	eba3 0509 	sublt.w	r5, r3, r9
 800f4f8:	464b      	movge	r3, r9
 800f4fa:	bfb8      	it	lt
 800f4fc:	2300      	movlt	r3, #0
 800f4fe:	e77e      	b.n	800f3fe <_dtoa_r+0x6fe>
 800f500:	9f07      	ldr	r7, [sp, #28]
 800f502:	9d05      	ldr	r5, [sp, #20]
 800f504:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800f506:	e783      	b.n	800f410 <_dtoa_r+0x710>
 800f508:	9a07      	ldr	r2, [sp, #28]
 800f50a:	e7ab      	b.n	800f464 <_dtoa_r+0x764>
 800f50c:	2300      	movs	r3, #0
 800f50e:	e7d4      	b.n	800f4ba <_dtoa_r+0x7ba>
 800f510:	9b00      	ldr	r3, [sp, #0]
 800f512:	e7d2      	b.n	800f4ba <_dtoa_r+0x7ba>
 800f514:	2300      	movs	r3, #0
 800f516:	9307      	str	r3, [sp, #28]
 800f518:	693b      	ldr	r3, [r7, #16]
 800f51a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800f51e:	6918      	ldr	r0, [r3, #16]
 800f520:	f000 fc2b 	bl	800fd7a <__hi0bits>
 800f524:	f1c0 0020 	rsb	r0, r0, #32
 800f528:	4440      	add	r0, r8
 800f52a:	f010 001f 	ands.w	r0, r0, #31
 800f52e:	d047      	beq.n	800f5c0 <_dtoa_r+0x8c0>
 800f530:	f1c0 0320 	rsb	r3, r0, #32
 800f534:	2b04      	cmp	r3, #4
 800f536:	dd3b      	ble.n	800f5b0 <_dtoa_r+0x8b0>
 800f538:	9b05      	ldr	r3, [sp, #20]
 800f53a:	f1c0 001c 	rsb	r0, r0, #28
 800f53e:	4403      	add	r3, r0
 800f540:	9305      	str	r3, [sp, #20]
 800f542:	4405      	add	r5, r0
 800f544:	4480      	add	r8, r0
 800f546:	9b05      	ldr	r3, [sp, #20]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	dd05      	ble.n	800f558 <_dtoa_r+0x858>
 800f54c:	461a      	mov	r2, r3
 800f54e:	9904      	ldr	r1, [sp, #16]
 800f550:	4620      	mov	r0, r4
 800f552:	f000 fd4d 	bl	800fff0 <__lshift>
 800f556:	9004      	str	r0, [sp, #16]
 800f558:	f1b8 0f00 	cmp.w	r8, #0
 800f55c:	dd05      	ble.n	800f56a <_dtoa_r+0x86a>
 800f55e:	4639      	mov	r1, r7
 800f560:	4642      	mov	r2, r8
 800f562:	4620      	mov	r0, r4
 800f564:	f000 fd44 	bl	800fff0 <__lshift>
 800f568:	4607      	mov	r7, r0
 800f56a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f56c:	b353      	cbz	r3, 800f5c4 <_dtoa_r+0x8c4>
 800f56e:	4639      	mov	r1, r7
 800f570:	9804      	ldr	r0, [sp, #16]
 800f572:	f000 fd91 	bl	8010098 <__mcmp>
 800f576:	2800      	cmp	r0, #0
 800f578:	da24      	bge.n	800f5c4 <_dtoa_r+0x8c4>
 800f57a:	2300      	movs	r3, #0
 800f57c:	220a      	movs	r2, #10
 800f57e:	9904      	ldr	r1, [sp, #16]
 800f580:	4620      	mov	r0, r4
 800f582:	f000 fbbf 	bl	800fd04 <__multadd>
 800f586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f588:	9004      	str	r0, [sp, #16]
 800f58a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f58e:	2b00      	cmp	r3, #0
 800f590:	f000 814d 	beq.w	800f82e <_dtoa_r+0xb2e>
 800f594:	2300      	movs	r3, #0
 800f596:	4631      	mov	r1, r6
 800f598:	220a      	movs	r2, #10
 800f59a:	4620      	mov	r0, r4
 800f59c:	f000 fbb2 	bl	800fd04 <__multadd>
 800f5a0:	9b02      	ldr	r3, [sp, #8]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	4606      	mov	r6, r0
 800f5a6:	dc4f      	bgt.n	800f648 <_dtoa_r+0x948>
 800f5a8:	9b06      	ldr	r3, [sp, #24]
 800f5aa:	2b02      	cmp	r3, #2
 800f5ac:	dd4c      	ble.n	800f648 <_dtoa_r+0x948>
 800f5ae:	e011      	b.n	800f5d4 <_dtoa_r+0x8d4>
 800f5b0:	d0c9      	beq.n	800f546 <_dtoa_r+0x846>
 800f5b2:	9a05      	ldr	r2, [sp, #20]
 800f5b4:	331c      	adds	r3, #28
 800f5b6:	441a      	add	r2, r3
 800f5b8:	9205      	str	r2, [sp, #20]
 800f5ba:	441d      	add	r5, r3
 800f5bc:	4498      	add	r8, r3
 800f5be:	e7c2      	b.n	800f546 <_dtoa_r+0x846>
 800f5c0:	4603      	mov	r3, r0
 800f5c2:	e7f6      	b.n	800f5b2 <_dtoa_r+0x8b2>
 800f5c4:	f1b9 0f00 	cmp.w	r9, #0
 800f5c8:	dc38      	bgt.n	800f63c <_dtoa_r+0x93c>
 800f5ca:	9b06      	ldr	r3, [sp, #24]
 800f5cc:	2b02      	cmp	r3, #2
 800f5ce:	dd35      	ble.n	800f63c <_dtoa_r+0x93c>
 800f5d0:	f8cd 9008 	str.w	r9, [sp, #8]
 800f5d4:	9b02      	ldr	r3, [sp, #8]
 800f5d6:	b963      	cbnz	r3, 800f5f2 <_dtoa_r+0x8f2>
 800f5d8:	4639      	mov	r1, r7
 800f5da:	2205      	movs	r2, #5
 800f5dc:	4620      	mov	r0, r4
 800f5de:	f000 fb91 	bl	800fd04 <__multadd>
 800f5e2:	4601      	mov	r1, r0
 800f5e4:	4607      	mov	r7, r0
 800f5e6:	9804      	ldr	r0, [sp, #16]
 800f5e8:	f000 fd56 	bl	8010098 <__mcmp>
 800f5ec:	2800      	cmp	r0, #0
 800f5ee:	f73f adcc 	bgt.w	800f18a <_dtoa_r+0x48a>
 800f5f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f5f4:	465d      	mov	r5, fp
 800f5f6:	ea6f 0a03 	mvn.w	sl, r3
 800f5fa:	f04f 0900 	mov.w	r9, #0
 800f5fe:	4639      	mov	r1, r7
 800f600:	4620      	mov	r0, r4
 800f602:	f000 fb68 	bl	800fcd6 <_Bfree>
 800f606:	2e00      	cmp	r6, #0
 800f608:	f43f aeb7 	beq.w	800f37a <_dtoa_r+0x67a>
 800f60c:	f1b9 0f00 	cmp.w	r9, #0
 800f610:	d005      	beq.n	800f61e <_dtoa_r+0x91e>
 800f612:	45b1      	cmp	r9, r6
 800f614:	d003      	beq.n	800f61e <_dtoa_r+0x91e>
 800f616:	4649      	mov	r1, r9
 800f618:	4620      	mov	r0, r4
 800f61a:	f000 fb5c 	bl	800fcd6 <_Bfree>
 800f61e:	4631      	mov	r1, r6
 800f620:	4620      	mov	r0, r4
 800f622:	f000 fb58 	bl	800fcd6 <_Bfree>
 800f626:	e6a8      	b.n	800f37a <_dtoa_r+0x67a>
 800f628:	2700      	movs	r7, #0
 800f62a:	463e      	mov	r6, r7
 800f62c:	e7e1      	b.n	800f5f2 <_dtoa_r+0x8f2>
 800f62e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f632:	463e      	mov	r6, r7
 800f634:	e5a9      	b.n	800f18a <_dtoa_r+0x48a>
 800f636:	bf00      	nop
 800f638:	40240000 	.word	0x40240000
 800f63c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f63e:	f8cd 9008 	str.w	r9, [sp, #8]
 800f642:	2b00      	cmp	r3, #0
 800f644:	f000 80fa 	beq.w	800f83c <_dtoa_r+0xb3c>
 800f648:	2d00      	cmp	r5, #0
 800f64a:	dd05      	ble.n	800f658 <_dtoa_r+0x958>
 800f64c:	4631      	mov	r1, r6
 800f64e:	462a      	mov	r2, r5
 800f650:	4620      	mov	r0, r4
 800f652:	f000 fccd 	bl	800fff0 <__lshift>
 800f656:	4606      	mov	r6, r0
 800f658:	9b07      	ldr	r3, [sp, #28]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d04c      	beq.n	800f6f8 <_dtoa_r+0x9f8>
 800f65e:	6871      	ldr	r1, [r6, #4]
 800f660:	4620      	mov	r0, r4
 800f662:	f000 fb04 	bl	800fc6e <_Balloc>
 800f666:	6932      	ldr	r2, [r6, #16]
 800f668:	3202      	adds	r2, #2
 800f66a:	4605      	mov	r5, r0
 800f66c:	0092      	lsls	r2, r2, #2
 800f66e:	f106 010c 	add.w	r1, r6, #12
 800f672:	300c      	adds	r0, #12
 800f674:	f000 faf0 	bl	800fc58 <memcpy>
 800f678:	2201      	movs	r2, #1
 800f67a:	4629      	mov	r1, r5
 800f67c:	4620      	mov	r0, r4
 800f67e:	f000 fcb7 	bl	800fff0 <__lshift>
 800f682:	9b00      	ldr	r3, [sp, #0]
 800f684:	f8cd b014 	str.w	fp, [sp, #20]
 800f688:	f003 0301 	and.w	r3, r3, #1
 800f68c:	46b1      	mov	r9, r6
 800f68e:	9307      	str	r3, [sp, #28]
 800f690:	4606      	mov	r6, r0
 800f692:	4639      	mov	r1, r7
 800f694:	9804      	ldr	r0, [sp, #16]
 800f696:	f7ff faa5 	bl	800ebe4 <quorem>
 800f69a:	4649      	mov	r1, r9
 800f69c:	4605      	mov	r5, r0
 800f69e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800f6a2:	9804      	ldr	r0, [sp, #16]
 800f6a4:	f000 fcf8 	bl	8010098 <__mcmp>
 800f6a8:	4632      	mov	r2, r6
 800f6aa:	9000      	str	r0, [sp, #0]
 800f6ac:	4639      	mov	r1, r7
 800f6ae:	4620      	mov	r0, r4
 800f6b0:	f000 fd0c 	bl	80100cc <__mdiff>
 800f6b4:	68c3      	ldr	r3, [r0, #12]
 800f6b6:	4602      	mov	r2, r0
 800f6b8:	bb03      	cbnz	r3, 800f6fc <_dtoa_r+0x9fc>
 800f6ba:	4601      	mov	r1, r0
 800f6bc:	9008      	str	r0, [sp, #32]
 800f6be:	9804      	ldr	r0, [sp, #16]
 800f6c0:	f000 fcea 	bl	8010098 <__mcmp>
 800f6c4:	9a08      	ldr	r2, [sp, #32]
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	4611      	mov	r1, r2
 800f6ca:	4620      	mov	r0, r4
 800f6cc:	9308      	str	r3, [sp, #32]
 800f6ce:	f000 fb02 	bl	800fcd6 <_Bfree>
 800f6d2:	9b08      	ldr	r3, [sp, #32]
 800f6d4:	b9a3      	cbnz	r3, 800f700 <_dtoa_r+0xa00>
 800f6d6:	9a06      	ldr	r2, [sp, #24]
 800f6d8:	b992      	cbnz	r2, 800f700 <_dtoa_r+0xa00>
 800f6da:	9a07      	ldr	r2, [sp, #28]
 800f6dc:	b982      	cbnz	r2, 800f700 <_dtoa_r+0xa00>
 800f6de:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f6e2:	d029      	beq.n	800f738 <_dtoa_r+0xa38>
 800f6e4:	9b00      	ldr	r3, [sp, #0]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	dd01      	ble.n	800f6ee <_dtoa_r+0x9ee>
 800f6ea:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800f6ee:	9b05      	ldr	r3, [sp, #20]
 800f6f0:	1c5d      	adds	r5, r3, #1
 800f6f2:	f883 8000 	strb.w	r8, [r3]
 800f6f6:	e782      	b.n	800f5fe <_dtoa_r+0x8fe>
 800f6f8:	4630      	mov	r0, r6
 800f6fa:	e7c2      	b.n	800f682 <_dtoa_r+0x982>
 800f6fc:	2301      	movs	r3, #1
 800f6fe:	e7e3      	b.n	800f6c8 <_dtoa_r+0x9c8>
 800f700:	9a00      	ldr	r2, [sp, #0]
 800f702:	2a00      	cmp	r2, #0
 800f704:	db04      	blt.n	800f710 <_dtoa_r+0xa10>
 800f706:	d125      	bne.n	800f754 <_dtoa_r+0xa54>
 800f708:	9a06      	ldr	r2, [sp, #24]
 800f70a:	bb1a      	cbnz	r2, 800f754 <_dtoa_r+0xa54>
 800f70c:	9a07      	ldr	r2, [sp, #28]
 800f70e:	bb0a      	cbnz	r2, 800f754 <_dtoa_r+0xa54>
 800f710:	2b00      	cmp	r3, #0
 800f712:	ddec      	ble.n	800f6ee <_dtoa_r+0x9ee>
 800f714:	2201      	movs	r2, #1
 800f716:	9904      	ldr	r1, [sp, #16]
 800f718:	4620      	mov	r0, r4
 800f71a:	f000 fc69 	bl	800fff0 <__lshift>
 800f71e:	4639      	mov	r1, r7
 800f720:	9004      	str	r0, [sp, #16]
 800f722:	f000 fcb9 	bl	8010098 <__mcmp>
 800f726:	2800      	cmp	r0, #0
 800f728:	dc03      	bgt.n	800f732 <_dtoa_r+0xa32>
 800f72a:	d1e0      	bne.n	800f6ee <_dtoa_r+0x9ee>
 800f72c:	f018 0f01 	tst.w	r8, #1
 800f730:	d0dd      	beq.n	800f6ee <_dtoa_r+0x9ee>
 800f732:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f736:	d1d8      	bne.n	800f6ea <_dtoa_r+0x9ea>
 800f738:	9b05      	ldr	r3, [sp, #20]
 800f73a:	9a05      	ldr	r2, [sp, #20]
 800f73c:	1c5d      	adds	r5, r3, #1
 800f73e:	2339      	movs	r3, #57	; 0x39
 800f740:	7013      	strb	r3, [r2, #0]
 800f742:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f746:	2b39      	cmp	r3, #57	; 0x39
 800f748:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800f74c:	d04f      	beq.n	800f7ee <_dtoa_r+0xaee>
 800f74e:	3301      	adds	r3, #1
 800f750:	7013      	strb	r3, [r2, #0]
 800f752:	e754      	b.n	800f5fe <_dtoa_r+0x8fe>
 800f754:	9a05      	ldr	r2, [sp, #20]
 800f756:	2b00      	cmp	r3, #0
 800f758:	f102 0501 	add.w	r5, r2, #1
 800f75c:	dd06      	ble.n	800f76c <_dtoa_r+0xa6c>
 800f75e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f762:	d0e9      	beq.n	800f738 <_dtoa_r+0xa38>
 800f764:	f108 0801 	add.w	r8, r8, #1
 800f768:	9b05      	ldr	r3, [sp, #20]
 800f76a:	e7c2      	b.n	800f6f2 <_dtoa_r+0x9f2>
 800f76c:	9a02      	ldr	r2, [sp, #8]
 800f76e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800f772:	eba5 030b 	sub.w	r3, r5, fp
 800f776:	4293      	cmp	r3, r2
 800f778:	d021      	beq.n	800f7be <_dtoa_r+0xabe>
 800f77a:	2300      	movs	r3, #0
 800f77c:	220a      	movs	r2, #10
 800f77e:	9904      	ldr	r1, [sp, #16]
 800f780:	4620      	mov	r0, r4
 800f782:	f000 fabf 	bl	800fd04 <__multadd>
 800f786:	45b1      	cmp	r9, r6
 800f788:	9004      	str	r0, [sp, #16]
 800f78a:	f04f 0300 	mov.w	r3, #0
 800f78e:	f04f 020a 	mov.w	r2, #10
 800f792:	4649      	mov	r1, r9
 800f794:	4620      	mov	r0, r4
 800f796:	d105      	bne.n	800f7a4 <_dtoa_r+0xaa4>
 800f798:	f000 fab4 	bl	800fd04 <__multadd>
 800f79c:	4681      	mov	r9, r0
 800f79e:	4606      	mov	r6, r0
 800f7a0:	9505      	str	r5, [sp, #20]
 800f7a2:	e776      	b.n	800f692 <_dtoa_r+0x992>
 800f7a4:	f000 faae 	bl	800fd04 <__multadd>
 800f7a8:	4631      	mov	r1, r6
 800f7aa:	4681      	mov	r9, r0
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	220a      	movs	r2, #10
 800f7b0:	4620      	mov	r0, r4
 800f7b2:	f000 faa7 	bl	800fd04 <__multadd>
 800f7b6:	4606      	mov	r6, r0
 800f7b8:	e7f2      	b.n	800f7a0 <_dtoa_r+0xaa0>
 800f7ba:	f04f 0900 	mov.w	r9, #0
 800f7be:	2201      	movs	r2, #1
 800f7c0:	9904      	ldr	r1, [sp, #16]
 800f7c2:	4620      	mov	r0, r4
 800f7c4:	f000 fc14 	bl	800fff0 <__lshift>
 800f7c8:	4639      	mov	r1, r7
 800f7ca:	9004      	str	r0, [sp, #16]
 800f7cc:	f000 fc64 	bl	8010098 <__mcmp>
 800f7d0:	2800      	cmp	r0, #0
 800f7d2:	dcb6      	bgt.n	800f742 <_dtoa_r+0xa42>
 800f7d4:	d102      	bne.n	800f7dc <_dtoa_r+0xadc>
 800f7d6:	f018 0f01 	tst.w	r8, #1
 800f7da:	d1b2      	bne.n	800f742 <_dtoa_r+0xa42>
 800f7dc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f7e0:	2b30      	cmp	r3, #48	; 0x30
 800f7e2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800f7e6:	f47f af0a 	bne.w	800f5fe <_dtoa_r+0x8fe>
 800f7ea:	4615      	mov	r5, r2
 800f7ec:	e7f6      	b.n	800f7dc <_dtoa_r+0xadc>
 800f7ee:	4593      	cmp	fp, r2
 800f7f0:	d105      	bne.n	800f7fe <_dtoa_r+0xafe>
 800f7f2:	2331      	movs	r3, #49	; 0x31
 800f7f4:	f10a 0a01 	add.w	sl, sl, #1
 800f7f8:	f88b 3000 	strb.w	r3, [fp]
 800f7fc:	e6ff      	b.n	800f5fe <_dtoa_r+0x8fe>
 800f7fe:	4615      	mov	r5, r2
 800f800:	e79f      	b.n	800f742 <_dtoa_r+0xa42>
 800f802:	f8df b064 	ldr.w	fp, [pc, #100]	; 800f868 <_dtoa_r+0xb68>
 800f806:	e007      	b.n	800f818 <_dtoa_r+0xb18>
 800f808:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f80a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800f86c <_dtoa_r+0xb6c>
 800f80e:	b11b      	cbz	r3, 800f818 <_dtoa_r+0xb18>
 800f810:	f10b 0308 	add.w	r3, fp, #8
 800f814:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f816:	6013      	str	r3, [r2, #0]
 800f818:	4658      	mov	r0, fp
 800f81a:	b017      	add	sp, #92	; 0x5c
 800f81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f820:	9b06      	ldr	r3, [sp, #24]
 800f822:	2b01      	cmp	r3, #1
 800f824:	f77f ae35 	ble.w	800f492 <_dtoa_r+0x792>
 800f828:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f82a:	9307      	str	r3, [sp, #28]
 800f82c:	e649      	b.n	800f4c2 <_dtoa_r+0x7c2>
 800f82e:	9b02      	ldr	r3, [sp, #8]
 800f830:	2b00      	cmp	r3, #0
 800f832:	dc03      	bgt.n	800f83c <_dtoa_r+0xb3c>
 800f834:	9b06      	ldr	r3, [sp, #24]
 800f836:	2b02      	cmp	r3, #2
 800f838:	f73f aecc 	bgt.w	800f5d4 <_dtoa_r+0x8d4>
 800f83c:	465d      	mov	r5, fp
 800f83e:	4639      	mov	r1, r7
 800f840:	9804      	ldr	r0, [sp, #16]
 800f842:	f7ff f9cf 	bl	800ebe4 <quorem>
 800f846:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800f84a:	f805 8b01 	strb.w	r8, [r5], #1
 800f84e:	9a02      	ldr	r2, [sp, #8]
 800f850:	eba5 030b 	sub.w	r3, r5, fp
 800f854:	429a      	cmp	r2, r3
 800f856:	ddb0      	ble.n	800f7ba <_dtoa_r+0xaba>
 800f858:	2300      	movs	r3, #0
 800f85a:	220a      	movs	r2, #10
 800f85c:	9904      	ldr	r1, [sp, #16]
 800f85e:	4620      	mov	r0, r4
 800f860:	f000 fa50 	bl	800fd04 <__multadd>
 800f864:	9004      	str	r0, [sp, #16]
 800f866:	e7ea      	b.n	800f83e <_dtoa_r+0xb3e>
 800f868:	08011c68 	.word	0x08011c68
 800f86c:	08011c8c 	.word	0x08011c8c

0800f870 <__sflush_r>:
 800f870:	898a      	ldrh	r2, [r1, #12]
 800f872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f876:	4605      	mov	r5, r0
 800f878:	0710      	lsls	r0, r2, #28
 800f87a:	460c      	mov	r4, r1
 800f87c:	d458      	bmi.n	800f930 <__sflush_r+0xc0>
 800f87e:	684b      	ldr	r3, [r1, #4]
 800f880:	2b00      	cmp	r3, #0
 800f882:	dc05      	bgt.n	800f890 <__sflush_r+0x20>
 800f884:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f886:	2b00      	cmp	r3, #0
 800f888:	dc02      	bgt.n	800f890 <__sflush_r+0x20>
 800f88a:	2000      	movs	r0, #0
 800f88c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f890:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f892:	2e00      	cmp	r6, #0
 800f894:	d0f9      	beq.n	800f88a <__sflush_r+0x1a>
 800f896:	2300      	movs	r3, #0
 800f898:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f89c:	682f      	ldr	r7, [r5, #0]
 800f89e:	6a21      	ldr	r1, [r4, #32]
 800f8a0:	602b      	str	r3, [r5, #0]
 800f8a2:	d032      	beq.n	800f90a <__sflush_r+0x9a>
 800f8a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f8a6:	89a3      	ldrh	r3, [r4, #12]
 800f8a8:	075a      	lsls	r2, r3, #29
 800f8aa:	d505      	bpl.n	800f8b8 <__sflush_r+0x48>
 800f8ac:	6863      	ldr	r3, [r4, #4]
 800f8ae:	1ac0      	subs	r0, r0, r3
 800f8b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f8b2:	b10b      	cbz	r3, 800f8b8 <__sflush_r+0x48>
 800f8b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f8b6:	1ac0      	subs	r0, r0, r3
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	4602      	mov	r2, r0
 800f8bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f8be:	6a21      	ldr	r1, [r4, #32]
 800f8c0:	4628      	mov	r0, r5
 800f8c2:	47b0      	blx	r6
 800f8c4:	1c43      	adds	r3, r0, #1
 800f8c6:	89a3      	ldrh	r3, [r4, #12]
 800f8c8:	d106      	bne.n	800f8d8 <__sflush_r+0x68>
 800f8ca:	6829      	ldr	r1, [r5, #0]
 800f8cc:	291d      	cmp	r1, #29
 800f8ce:	d848      	bhi.n	800f962 <__sflush_r+0xf2>
 800f8d0:	4a29      	ldr	r2, [pc, #164]	; (800f978 <__sflush_r+0x108>)
 800f8d2:	40ca      	lsrs	r2, r1
 800f8d4:	07d6      	lsls	r6, r2, #31
 800f8d6:	d544      	bpl.n	800f962 <__sflush_r+0xf2>
 800f8d8:	2200      	movs	r2, #0
 800f8da:	6062      	str	r2, [r4, #4]
 800f8dc:	04d9      	lsls	r1, r3, #19
 800f8de:	6922      	ldr	r2, [r4, #16]
 800f8e0:	6022      	str	r2, [r4, #0]
 800f8e2:	d504      	bpl.n	800f8ee <__sflush_r+0x7e>
 800f8e4:	1c42      	adds	r2, r0, #1
 800f8e6:	d101      	bne.n	800f8ec <__sflush_r+0x7c>
 800f8e8:	682b      	ldr	r3, [r5, #0]
 800f8ea:	b903      	cbnz	r3, 800f8ee <__sflush_r+0x7e>
 800f8ec:	6560      	str	r0, [r4, #84]	; 0x54
 800f8ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f8f0:	602f      	str	r7, [r5, #0]
 800f8f2:	2900      	cmp	r1, #0
 800f8f4:	d0c9      	beq.n	800f88a <__sflush_r+0x1a>
 800f8f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f8fa:	4299      	cmp	r1, r3
 800f8fc:	d002      	beq.n	800f904 <__sflush_r+0x94>
 800f8fe:	4628      	mov	r0, r5
 800f900:	f000 fc9e 	bl	8010240 <_free_r>
 800f904:	2000      	movs	r0, #0
 800f906:	6360      	str	r0, [r4, #52]	; 0x34
 800f908:	e7c0      	b.n	800f88c <__sflush_r+0x1c>
 800f90a:	2301      	movs	r3, #1
 800f90c:	4628      	mov	r0, r5
 800f90e:	47b0      	blx	r6
 800f910:	1c41      	adds	r1, r0, #1
 800f912:	d1c8      	bne.n	800f8a6 <__sflush_r+0x36>
 800f914:	682b      	ldr	r3, [r5, #0]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d0c5      	beq.n	800f8a6 <__sflush_r+0x36>
 800f91a:	2b1d      	cmp	r3, #29
 800f91c:	d001      	beq.n	800f922 <__sflush_r+0xb2>
 800f91e:	2b16      	cmp	r3, #22
 800f920:	d101      	bne.n	800f926 <__sflush_r+0xb6>
 800f922:	602f      	str	r7, [r5, #0]
 800f924:	e7b1      	b.n	800f88a <__sflush_r+0x1a>
 800f926:	89a3      	ldrh	r3, [r4, #12]
 800f928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f92c:	81a3      	strh	r3, [r4, #12]
 800f92e:	e7ad      	b.n	800f88c <__sflush_r+0x1c>
 800f930:	690f      	ldr	r7, [r1, #16]
 800f932:	2f00      	cmp	r7, #0
 800f934:	d0a9      	beq.n	800f88a <__sflush_r+0x1a>
 800f936:	0793      	lsls	r3, r2, #30
 800f938:	680e      	ldr	r6, [r1, #0]
 800f93a:	bf08      	it	eq
 800f93c:	694b      	ldreq	r3, [r1, #20]
 800f93e:	600f      	str	r7, [r1, #0]
 800f940:	bf18      	it	ne
 800f942:	2300      	movne	r3, #0
 800f944:	eba6 0807 	sub.w	r8, r6, r7
 800f948:	608b      	str	r3, [r1, #8]
 800f94a:	f1b8 0f00 	cmp.w	r8, #0
 800f94e:	dd9c      	ble.n	800f88a <__sflush_r+0x1a>
 800f950:	4643      	mov	r3, r8
 800f952:	463a      	mov	r2, r7
 800f954:	6a21      	ldr	r1, [r4, #32]
 800f956:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f958:	4628      	mov	r0, r5
 800f95a:	47b0      	blx	r6
 800f95c:	2800      	cmp	r0, #0
 800f95e:	dc06      	bgt.n	800f96e <__sflush_r+0xfe>
 800f960:	89a3      	ldrh	r3, [r4, #12]
 800f962:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f966:	81a3      	strh	r3, [r4, #12]
 800f968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f96c:	e78e      	b.n	800f88c <__sflush_r+0x1c>
 800f96e:	4407      	add	r7, r0
 800f970:	eba8 0800 	sub.w	r8, r8, r0
 800f974:	e7e9      	b.n	800f94a <__sflush_r+0xda>
 800f976:	bf00      	nop
 800f978:	20400001 	.word	0x20400001

0800f97c <_fflush_r>:
 800f97c:	b538      	push	{r3, r4, r5, lr}
 800f97e:	690b      	ldr	r3, [r1, #16]
 800f980:	4605      	mov	r5, r0
 800f982:	460c      	mov	r4, r1
 800f984:	b1db      	cbz	r3, 800f9be <_fflush_r+0x42>
 800f986:	b118      	cbz	r0, 800f990 <_fflush_r+0x14>
 800f988:	6983      	ldr	r3, [r0, #24]
 800f98a:	b90b      	cbnz	r3, 800f990 <_fflush_r+0x14>
 800f98c:	f000 f860 	bl	800fa50 <__sinit>
 800f990:	4b0c      	ldr	r3, [pc, #48]	; (800f9c4 <_fflush_r+0x48>)
 800f992:	429c      	cmp	r4, r3
 800f994:	d109      	bne.n	800f9aa <_fflush_r+0x2e>
 800f996:	686c      	ldr	r4, [r5, #4]
 800f998:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f99c:	b17b      	cbz	r3, 800f9be <_fflush_r+0x42>
 800f99e:	4621      	mov	r1, r4
 800f9a0:	4628      	mov	r0, r5
 800f9a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f9a6:	f7ff bf63 	b.w	800f870 <__sflush_r>
 800f9aa:	4b07      	ldr	r3, [pc, #28]	; (800f9c8 <_fflush_r+0x4c>)
 800f9ac:	429c      	cmp	r4, r3
 800f9ae:	d101      	bne.n	800f9b4 <_fflush_r+0x38>
 800f9b0:	68ac      	ldr	r4, [r5, #8]
 800f9b2:	e7f1      	b.n	800f998 <_fflush_r+0x1c>
 800f9b4:	4b05      	ldr	r3, [pc, #20]	; (800f9cc <_fflush_r+0x50>)
 800f9b6:	429c      	cmp	r4, r3
 800f9b8:	bf08      	it	eq
 800f9ba:	68ec      	ldreq	r4, [r5, #12]
 800f9bc:	e7ec      	b.n	800f998 <_fflush_r+0x1c>
 800f9be:	2000      	movs	r0, #0
 800f9c0:	bd38      	pop	{r3, r4, r5, pc}
 800f9c2:	bf00      	nop
 800f9c4:	08011cbc 	.word	0x08011cbc
 800f9c8:	08011cdc 	.word	0x08011cdc
 800f9cc:	08011c9c 	.word	0x08011c9c

0800f9d0 <std>:
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	b510      	push	{r4, lr}
 800f9d4:	4604      	mov	r4, r0
 800f9d6:	e9c0 3300 	strd	r3, r3, [r0]
 800f9da:	6083      	str	r3, [r0, #8]
 800f9dc:	8181      	strh	r1, [r0, #12]
 800f9de:	6643      	str	r3, [r0, #100]	; 0x64
 800f9e0:	81c2      	strh	r2, [r0, #14]
 800f9e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f9e6:	6183      	str	r3, [r0, #24]
 800f9e8:	4619      	mov	r1, r3
 800f9ea:	2208      	movs	r2, #8
 800f9ec:	305c      	adds	r0, #92	; 0x5c
 800f9ee:	f7fe fb2d 	bl	800e04c <memset>
 800f9f2:	4b05      	ldr	r3, [pc, #20]	; (800fa08 <std+0x38>)
 800f9f4:	6263      	str	r3, [r4, #36]	; 0x24
 800f9f6:	4b05      	ldr	r3, [pc, #20]	; (800fa0c <std+0x3c>)
 800f9f8:	62a3      	str	r3, [r4, #40]	; 0x28
 800f9fa:	4b05      	ldr	r3, [pc, #20]	; (800fa10 <std+0x40>)
 800f9fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f9fe:	4b05      	ldr	r3, [pc, #20]	; (800fa14 <std+0x44>)
 800fa00:	6224      	str	r4, [r4, #32]
 800fa02:	6323      	str	r3, [r4, #48]	; 0x30
 800fa04:	bd10      	pop	{r4, pc}
 800fa06:	bf00      	nop
 800fa08:	08010655 	.word	0x08010655
 800fa0c:	08010677 	.word	0x08010677
 800fa10:	080106af 	.word	0x080106af
 800fa14:	080106d3 	.word	0x080106d3

0800fa18 <_cleanup_r>:
 800fa18:	4901      	ldr	r1, [pc, #4]	; (800fa20 <_cleanup_r+0x8>)
 800fa1a:	f000 b885 	b.w	800fb28 <_fwalk_reent>
 800fa1e:	bf00      	nop
 800fa20:	0800f97d 	.word	0x0800f97d

0800fa24 <__sfmoreglue>:
 800fa24:	b570      	push	{r4, r5, r6, lr}
 800fa26:	1e4a      	subs	r2, r1, #1
 800fa28:	2568      	movs	r5, #104	; 0x68
 800fa2a:	4355      	muls	r5, r2
 800fa2c:	460e      	mov	r6, r1
 800fa2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fa32:	f000 fc53 	bl	80102dc <_malloc_r>
 800fa36:	4604      	mov	r4, r0
 800fa38:	b140      	cbz	r0, 800fa4c <__sfmoreglue+0x28>
 800fa3a:	2100      	movs	r1, #0
 800fa3c:	e9c0 1600 	strd	r1, r6, [r0]
 800fa40:	300c      	adds	r0, #12
 800fa42:	60a0      	str	r0, [r4, #8]
 800fa44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fa48:	f7fe fb00 	bl	800e04c <memset>
 800fa4c:	4620      	mov	r0, r4
 800fa4e:	bd70      	pop	{r4, r5, r6, pc}

0800fa50 <__sinit>:
 800fa50:	6983      	ldr	r3, [r0, #24]
 800fa52:	b510      	push	{r4, lr}
 800fa54:	4604      	mov	r4, r0
 800fa56:	bb33      	cbnz	r3, 800faa6 <__sinit+0x56>
 800fa58:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800fa5c:	6503      	str	r3, [r0, #80]	; 0x50
 800fa5e:	4b12      	ldr	r3, [pc, #72]	; (800faa8 <__sinit+0x58>)
 800fa60:	4a12      	ldr	r2, [pc, #72]	; (800faac <__sinit+0x5c>)
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	6282      	str	r2, [r0, #40]	; 0x28
 800fa66:	4298      	cmp	r0, r3
 800fa68:	bf04      	itt	eq
 800fa6a:	2301      	moveq	r3, #1
 800fa6c:	6183      	streq	r3, [r0, #24]
 800fa6e:	f000 f81f 	bl	800fab0 <__sfp>
 800fa72:	6060      	str	r0, [r4, #4]
 800fa74:	4620      	mov	r0, r4
 800fa76:	f000 f81b 	bl	800fab0 <__sfp>
 800fa7a:	60a0      	str	r0, [r4, #8]
 800fa7c:	4620      	mov	r0, r4
 800fa7e:	f000 f817 	bl	800fab0 <__sfp>
 800fa82:	2200      	movs	r2, #0
 800fa84:	60e0      	str	r0, [r4, #12]
 800fa86:	2104      	movs	r1, #4
 800fa88:	6860      	ldr	r0, [r4, #4]
 800fa8a:	f7ff ffa1 	bl	800f9d0 <std>
 800fa8e:	2201      	movs	r2, #1
 800fa90:	2109      	movs	r1, #9
 800fa92:	68a0      	ldr	r0, [r4, #8]
 800fa94:	f7ff ff9c 	bl	800f9d0 <std>
 800fa98:	2202      	movs	r2, #2
 800fa9a:	2112      	movs	r1, #18
 800fa9c:	68e0      	ldr	r0, [r4, #12]
 800fa9e:	f7ff ff97 	bl	800f9d0 <std>
 800faa2:	2301      	movs	r3, #1
 800faa4:	61a3      	str	r3, [r4, #24]
 800faa6:	bd10      	pop	{r4, pc}
 800faa8:	08011c54 	.word	0x08011c54
 800faac:	0800fa19 	.word	0x0800fa19

0800fab0 <__sfp>:
 800fab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fab2:	4b1b      	ldr	r3, [pc, #108]	; (800fb20 <__sfp+0x70>)
 800fab4:	681e      	ldr	r6, [r3, #0]
 800fab6:	69b3      	ldr	r3, [r6, #24]
 800fab8:	4607      	mov	r7, r0
 800faba:	b913      	cbnz	r3, 800fac2 <__sfp+0x12>
 800fabc:	4630      	mov	r0, r6
 800fabe:	f7ff ffc7 	bl	800fa50 <__sinit>
 800fac2:	3648      	adds	r6, #72	; 0x48
 800fac4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fac8:	3b01      	subs	r3, #1
 800faca:	d503      	bpl.n	800fad4 <__sfp+0x24>
 800facc:	6833      	ldr	r3, [r6, #0]
 800face:	b133      	cbz	r3, 800fade <__sfp+0x2e>
 800fad0:	6836      	ldr	r6, [r6, #0]
 800fad2:	e7f7      	b.n	800fac4 <__sfp+0x14>
 800fad4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fad8:	b16d      	cbz	r5, 800faf6 <__sfp+0x46>
 800fada:	3468      	adds	r4, #104	; 0x68
 800fadc:	e7f4      	b.n	800fac8 <__sfp+0x18>
 800fade:	2104      	movs	r1, #4
 800fae0:	4638      	mov	r0, r7
 800fae2:	f7ff ff9f 	bl	800fa24 <__sfmoreglue>
 800fae6:	6030      	str	r0, [r6, #0]
 800fae8:	2800      	cmp	r0, #0
 800faea:	d1f1      	bne.n	800fad0 <__sfp+0x20>
 800faec:	230c      	movs	r3, #12
 800faee:	603b      	str	r3, [r7, #0]
 800faf0:	4604      	mov	r4, r0
 800faf2:	4620      	mov	r0, r4
 800faf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800faf6:	4b0b      	ldr	r3, [pc, #44]	; (800fb24 <__sfp+0x74>)
 800faf8:	6665      	str	r5, [r4, #100]	; 0x64
 800fafa:	e9c4 5500 	strd	r5, r5, [r4]
 800fafe:	60a5      	str	r5, [r4, #8]
 800fb00:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800fb04:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800fb08:	2208      	movs	r2, #8
 800fb0a:	4629      	mov	r1, r5
 800fb0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fb10:	f7fe fa9c 	bl	800e04c <memset>
 800fb14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fb18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fb1c:	e7e9      	b.n	800faf2 <__sfp+0x42>
 800fb1e:	bf00      	nop
 800fb20:	08011c54 	.word	0x08011c54
 800fb24:	ffff0001 	.word	0xffff0001

0800fb28 <_fwalk_reent>:
 800fb28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb2c:	4680      	mov	r8, r0
 800fb2e:	4689      	mov	r9, r1
 800fb30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fb34:	2600      	movs	r6, #0
 800fb36:	b914      	cbnz	r4, 800fb3e <_fwalk_reent+0x16>
 800fb38:	4630      	mov	r0, r6
 800fb3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb3e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800fb42:	3f01      	subs	r7, #1
 800fb44:	d501      	bpl.n	800fb4a <_fwalk_reent+0x22>
 800fb46:	6824      	ldr	r4, [r4, #0]
 800fb48:	e7f5      	b.n	800fb36 <_fwalk_reent+0xe>
 800fb4a:	89ab      	ldrh	r3, [r5, #12]
 800fb4c:	2b01      	cmp	r3, #1
 800fb4e:	d907      	bls.n	800fb60 <_fwalk_reent+0x38>
 800fb50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fb54:	3301      	adds	r3, #1
 800fb56:	d003      	beq.n	800fb60 <_fwalk_reent+0x38>
 800fb58:	4629      	mov	r1, r5
 800fb5a:	4640      	mov	r0, r8
 800fb5c:	47c8      	blx	r9
 800fb5e:	4306      	orrs	r6, r0
 800fb60:	3568      	adds	r5, #104	; 0x68
 800fb62:	e7ee      	b.n	800fb42 <_fwalk_reent+0x1a>

0800fb64 <_localeconv_r>:
 800fb64:	4b04      	ldr	r3, [pc, #16]	; (800fb78 <_localeconv_r+0x14>)
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	6a18      	ldr	r0, [r3, #32]
 800fb6a:	4b04      	ldr	r3, [pc, #16]	; (800fb7c <_localeconv_r+0x18>)
 800fb6c:	2800      	cmp	r0, #0
 800fb6e:	bf08      	it	eq
 800fb70:	4618      	moveq	r0, r3
 800fb72:	30f0      	adds	r0, #240	; 0xf0
 800fb74:	4770      	bx	lr
 800fb76:	bf00      	nop
 800fb78:	20001d00 	.word	0x20001d00
 800fb7c:	20001d64 	.word	0x20001d64

0800fb80 <__swhatbuf_r>:
 800fb80:	b570      	push	{r4, r5, r6, lr}
 800fb82:	460e      	mov	r6, r1
 800fb84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb88:	2900      	cmp	r1, #0
 800fb8a:	b096      	sub	sp, #88	; 0x58
 800fb8c:	4614      	mov	r4, r2
 800fb8e:	461d      	mov	r5, r3
 800fb90:	da07      	bge.n	800fba2 <__swhatbuf_r+0x22>
 800fb92:	2300      	movs	r3, #0
 800fb94:	602b      	str	r3, [r5, #0]
 800fb96:	89b3      	ldrh	r3, [r6, #12]
 800fb98:	061a      	lsls	r2, r3, #24
 800fb9a:	d410      	bmi.n	800fbbe <__swhatbuf_r+0x3e>
 800fb9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fba0:	e00e      	b.n	800fbc0 <__swhatbuf_r+0x40>
 800fba2:	466a      	mov	r2, sp
 800fba4:	f000 fdbc 	bl	8010720 <_fstat_r>
 800fba8:	2800      	cmp	r0, #0
 800fbaa:	dbf2      	blt.n	800fb92 <__swhatbuf_r+0x12>
 800fbac:	9a01      	ldr	r2, [sp, #4]
 800fbae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fbb2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fbb6:	425a      	negs	r2, r3
 800fbb8:	415a      	adcs	r2, r3
 800fbba:	602a      	str	r2, [r5, #0]
 800fbbc:	e7ee      	b.n	800fb9c <__swhatbuf_r+0x1c>
 800fbbe:	2340      	movs	r3, #64	; 0x40
 800fbc0:	2000      	movs	r0, #0
 800fbc2:	6023      	str	r3, [r4, #0]
 800fbc4:	b016      	add	sp, #88	; 0x58
 800fbc6:	bd70      	pop	{r4, r5, r6, pc}

0800fbc8 <__smakebuf_r>:
 800fbc8:	898b      	ldrh	r3, [r1, #12]
 800fbca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fbcc:	079d      	lsls	r5, r3, #30
 800fbce:	4606      	mov	r6, r0
 800fbd0:	460c      	mov	r4, r1
 800fbd2:	d507      	bpl.n	800fbe4 <__smakebuf_r+0x1c>
 800fbd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fbd8:	6023      	str	r3, [r4, #0]
 800fbda:	6123      	str	r3, [r4, #16]
 800fbdc:	2301      	movs	r3, #1
 800fbde:	6163      	str	r3, [r4, #20]
 800fbe0:	b002      	add	sp, #8
 800fbe2:	bd70      	pop	{r4, r5, r6, pc}
 800fbe4:	ab01      	add	r3, sp, #4
 800fbe6:	466a      	mov	r2, sp
 800fbe8:	f7ff ffca 	bl	800fb80 <__swhatbuf_r>
 800fbec:	9900      	ldr	r1, [sp, #0]
 800fbee:	4605      	mov	r5, r0
 800fbf0:	4630      	mov	r0, r6
 800fbf2:	f000 fb73 	bl	80102dc <_malloc_r>
 800fbf6:	b948      	cbnz	r0, 800fc0c <__smakebuf_r+0x44>
 800fbf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbfc:	059a      	lsls	r2, r3, #22
 800fbfe:	d4ef      	bmi.n	800fbe0 <__smakebuf_r+0x18>
 800fc00:	f023 0303 	bic.w	r3, r3, #3
 800fc04:	f043 0302 	orr.w	r3, r3, #2
 800fc08:	81a3      	strh	r3, [r4, #12]
 800fc0a:	e7e3      	b.n	800fbd4 <__smakebuf_r+0xc>
 800fc0c:	4b0d      	ldr	r3, [pc, #52]	; (800fc44 <__smakebuf_r+0x7c>)
 800fc0e:	62b3      	str	r3, [r6, #40]	; 0x28
 800fc10:	89a3      	ldrh	r3, [r4, #12]
 800fc12:	6020      	str	r0, [r4, #0]
 800fc14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc18:	81a3      	strh	r3, [r4, #12]
 800fc1a:	9b00      	ldr	r3, [sp, #0]
 800fc1c:	6163      	str	r3, [r4, #20]
 800fc1e:	9b01      	ldr	r3, [sp, #4]
 800fc20:	6120      	str	r0, [r4, #16]
 800fc22:	b15b      	cbz	r3, 800fc3c <__smakebuf_r+0x74>
 800fc24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc28:	4630      	mov	r0, r6
 800fc2a:	f000 fd8b 	bl	8010744 <_isatty_r>
 800fc2e:	b128      	cbz	r0, 800fc3c <__smakebuf_r+0x74>
 800fc30:	89a3      	ldrh	r3, [r4, #12]
 800fc32:	f023 0303 	bic.w	r3, r3, #3
 800fc36:	f043 0301 	orr.w	r3, r3, #1
 800fc3a:	81a3      	strh	r3, [r4, #12]
 800fc3c:	89a3      	ldrh	r3, [r4, #12]
 800fc3e:	431d      	orrs	r5, r3
 800fc40:	81a5      	strh	r5, [r4, #12]
 800fc42:	e7cd      	b.n	800fbe0 <__smakebuf_r+0x18>
 800fc44:	0800fa19 	.word	0x0800fa19

0800fc48 <malloc>:
 800fc48:	4b02      	ldr	r3, [pc, #8]	; (800fc54 <malloc+0xc>)
 800fc4a:	4601      	mov	r1, r0
 800fc4c:	6818      	ldr	r0, [r3, #0]
 800fc4e:	f000 bb45 	b.w	80102dc <_malloc_r>
 800fc52:	bf00      	nop
 800fc54:	20001d00 	.word	0x20001d00

0800fc58 <memcpy>:
 800fc58:	b510      	push	{r4, lr}
 800fc5a:	1e43      	subs	r3, r0, #1
 800fc5c:	440a      	add	r2, r1
 800fc5e:	4291      	cmp	r1, r2
 800fc60:	d100      	bne.n	800fc64 <memcpy+0xc>
 800fc62:	bd10      	pop	{r4, pc}
 800fc64:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fc68:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fc6c:	e7f7      	b.n	800fc5e <memcpy+0x6>

0800fc6e <_Balloc>:
 800fc6e:	b570      	push	{r4, r5, r6, lr}
 800fc70:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fc72:	4604      	mov	r4, r0
 800fc74:	460e      	mov	r6, r1
 800fc76:	b93d      	cbnz	r5, 800fc88 <_Balloc+0x1a>
 800fc78:	2010      	movs	r0, #16
 800fc7a:	f7ff ffe5 	bl	800fc48 <malloc>
 800fc7e:	6260      	str	r0, [r4, #36]	; 0x24
 800fc80:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fc84:	6005      	str	r5, [r0, #0]
 800fc86:	60c5      	str	r5, [r0, #12]
 800fc88:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800fc8a:	68eb      	ldr	r3, [r5, #12]
 800fc8c:	b183      	cbz	r3, 800fcb0 <_Balloc+0x42>
 800fc8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc90:	68db      	ldr	r3, [r3, #12]
 800fc92:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800fc96:	b9b8      	cbnz	r0, 800fcc8 <_Balloc+0x5a>
 800fc98:	2101      	movs	r1, #1
 800fc9a:	fa01 f506 	lsl.w	r5, r1, r6
 800fc9e:	1d6a      	adds	r2, r5, #5
 800fca0:	0092      	lsls	r2, r2, #2
 800fca2:	4620      	mov	r0, r4
 800fca4:	f000 fabe 	bl	8010224 <_calloc_r>
 800fca8:	b160      	cbz	r0, 800fcc4 <_Balloc+0x56>
 800fcaa:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800fcae:	e00e      	b.n	800fcce <_Balloc+0x60>
 800fcb0:	2221      	movs	r2, #33	; 0x21
 800fcb2:	2104      	movs	r1, #4
 800fcb4:	4620      	mov	r0, r4
 800fcb6:	f000 fab5 	bl	8010224 <_calloc_r>
 800fcba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fcbc:	60e8      	str	r0, [r5, #12]
 800fcbe:	68db      	ldr	r3, [r3, #12]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d1e4      	bne.n	800fc8e <_Balloc+0x20>
 800fcc4:	2000      	movs	r0, #0
 800fcc6:	bd70      	pop	{r4, r5, r6, pc}
 800fcc8:	6802      	ldr	r2, [r0, #0]
 800fcca:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800fcce:	2300      	movs	r3, #0
 800fcd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fcd4:	e7f7      	b.n	800fcc6 <_Balloc+0x58>

0800fcd6 <_Bfree>:
 800fcd6:	b570      	push	{r4, r5, r6, lr}
 800fcd8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800fcda:	4606      	mov	r6, r0
 800fcdc:	460d      	mov	r5, r1
 800fcde:	b93c      	cbnz	r4, 800fcf0 <_Bfree+0x1a>
 800fce0:	2010      	movs	r0, #16
 800fce2:	f7ff ffb1 	bl	800fc48 <malloc>
 800fce6:	6270      	str	r0, [r6, #36]	; 0x24
 800fce8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fcec:	6004      	str	r4, [r0, #0]
 800fcee:	60c4      	str	r4, [r0, #12]
 800fcf0:	b13d      	cbz	r5, 800fd02 <_Bfree+0x2c>
 800fcf2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800fcf4:	686a      	ldr	r2, [r5, #4]
 800fcf6:	68db      	ldr	r3, [r3, #12]
 800fcf8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fcfc:	6029      	str	r1, [r5, #0]
 800fcfe:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800fd02:	bd70      	pop	{r4, r5, r6, pc}

0800fd04 <__multadd>:
 800fd04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd08:	690d      	ldr	r5, [r1, #16]
 800fd0a:	461f      	mov	r7, r3
 800fd0c:	4606      	mov	r6, r0
 800fd0e:	460c      	mov	r4, r1
 800fd10:	f101 0c14 	add.w	ip, r1, #20
 800fd14:	2300      	movs	r3, #0
 800fd16:	f8dc 0000 	ldr.w	r0, [ip]
 800fd1a:	b281      	uxth	r1, r0
 800fd1c:	fb02 7101 	mla	r1, r2, r1, r7
 800fd20:	0c0f      	lsrs	r7, r1, #16
 800fd22:	0c00      	lsrs	r0, r0, #16
 800fd24:	fb02 7000 	mla	r0, r2, r0, r7
 800fd28:	b289      	uxth	r1, r1
 800fd2a:	3301      	adds	r3, #1
 800fd2c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800fd30:	429d      	cmp	r5, r3
 800fd32:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800fd36:	f84c 1b04 	str.w	r1, [ip], #4
 800fd3a:	dcec      	bgt.n	800fd16 <__multadd+0x12>
 800fd3c:	b1d7      	cbz	r7, 800fd74 <__multadd+0x70>
 800fd3e:	68a3      	ldr	r3, [r4, #8]
 800fd40:	42ab      	cmp	r3, r5
 800fd42:	dc12      	bgt.n	800fd6a <__multadd+0x66>
 800fd44:	6861      	ldr	r1, [r4, #4]
 800fd46:	4630      	mov	r0, r6
 800fd48:	3101      	adds	r1, #1
 800fd4a:	f7ff ff90 	bl	800fc6e <_Balloc>
 800fd4e:	6922      	ldr	r2, [r4, #16]
 800fd50:	3202      	adds	r2, #2
 800fd52:	f104 010c 	add.w	r1, r4, #12
 800fd56:	4680      	mov	r8, r0
 800fd58:	0092      	lsls	r2, r2, #2
 800fd5a:	300c      	adds	r0, #12
 800fd5c:	f7ff ff7c 	bl	800fc58 <memcpy>
 800fd60:	4621      	mov	r1, r4
 800fd62:	4630      	mov	r0, r6
 800fd64:	f7ff ffb7 	bl	800fcd6 <_Bfree>
 800fd68:	4644      	mov	r4, r8
 800fd6a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fd6e:	3501      	adds	r5, #1
 800fd70:	615f      	str	r7, [r3, #20]
 800fd72:	6125      	str	r5, [r4, #16]
 800fd74:	4620      	mov	r0, r4
 800fd76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fd7a <__hi0bits>:
 800fd7a:	0c02      	lsrs	r2, r0, #16
 800fd7c:	0412      	lsls	r2, r2, #16
 800fd7e:	4603      	mov	r3, r0
 800fd80:	b9b2      	cbnz	r2, 800fdb0 <__hi0bits+0x36>
 800fd82:	0403      	lsls	r3, r0, #16
 800fd84:	2010      	movs	r0, #16
 800fd86:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800fd8a:	bf04      	itt	eq
 800fd8c:	021b      	lsleq	r3, r3, #8
 800fd8e:	3008      	addeq	r0, #8
 800fd90:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800fd94:	bf04      	itt	eq
 800fd96:	011b      	lsleq	r3, r3, #4
 800fd98:	3004      	addeq	r0, #4
 800fd9a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800fd9e:	bf04      	itt	eq
 800fda0:	009b      	lsleq	r3, r3, #2
 800fda2:	3002      	addeq	r0, #2
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	db06      	blt.n	800fdb6 <__hi0bits+0x3c>
 800fda8:	005b      	lsls	r3, r3, #1
 800fdaa:	d503      	bpl.n	800fdb4 <__hi0bits+0x3a>
 800fdac:	3001      	adds	r0, #1
 800fdae:	4770      	bx	lr
 800fdb0:	2000      	movs	r0, #0
 800fdb2:	e7e8      	b.n	800fd86 <__hi0bits+0xc>
 800fdb4:	2020      	movs	r0, #32
 800fdb6:	4770      	bx	lr

0800fdb8 <__lo0bits>:
 800fdb8:	6803      	ldr	r3, [r0, #0]
 800fdba:	f013 0207 	ands.w	r2, r3, #7
 800fdbe:	4601      	mov	r1, r0
 800fdc0:	d00b      	beq.n	800fdda <__lo0bits+0x22>
 800fdc2:	07da      	lsls	r2, r3, #31
 800fdc4:	d423      	bmi.n	800fe0e <__lo0bits+0x56>
 800fdc6:	0798      	lsls	r0, r3, #30
 800fdc8:	bf49      	itett	mi
 800fdca:	085b      	lsrmi	r3, r3, #1
 800fdcc:	089b      	lsrpl	r3, r3, #2
 800fdce:	2001      	movmi	r0, #1
 800fdd0:	600b      	strmi	r3, [r1, #0]
 800fdd2:	bf5c      	itt	pl
 800fdd4:	600b      	strpl	r3, [r1, #0]
 800fdd6:	2002      	movpl	r0, #2
 800fdd8:	4770      	bx	lr
 800fdda:	b298      	uxth	r0, r3
 800fddc:	b9a8      	cbnz	r0, 800fe0a <__lo0bits+0x52>
 800fdde:	0c1b      	lsrs	r3, r3, #16
 800fde0:	2010      	movs	r0, #16
 800fde2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800fde6:	bf04      	itt	eq
 800fde8:	0a1b      	lsreq	r3, r3, #8
 800fdea:	3008      	addeq	r0, #8
 800fdec:	071a      	lsls	r2, r3, #28
 800fdee:	bf04      	itt	eq
 800fdf0:	091b      	lsreq	r3, r3, #4
 800fdf2:	3004      	addeq	r0, #4
 800fdf4:	079a      	lsls	r2, r3, #30
 800fdf6:	bf04      	itt	eq
 800fdf8:	089b      	lsreq	r3, r3, #2
 800fdfa:	3002      	addeq	r0, #2
 800fdfc:	07da      	lsls	r2, r3, #31
 800fdfe:	d402      	bmi.n	800fe06 <__lo0bits+0x4e>
 800fe00:	085b      	lsrs	r3, r3, #1
 800fe02:	d006      	beq.n	800fe12 <__lo0bits+0x5a>
 800fe04:	3001      	adds	r0, #1
 800fe06:	600b      	str	r3, [r1, #0]
 800fe08:	4770      	bx	lr
 800fe0a:	4610      	mov	r0, r2
 800fe0c:	e7e9      	b.n	800fde2 <__lo0bits+0x2a>
 800fe0e:	2000      	movs	r0, #0
 800fe10:	4770      	bx	lr
 800fe12:	2020      	movs	r0, #32
 800fe14:	4770      	bx	lr

0800fe16 <__i2b>:
 800fe16:	b510      	push	{r4, lr}
 800fe18:	460c      	mov	r4, r1
 800fe1a:	2101      	movs	r1, #1
 800fe1c:	f7ff ff27 	bl	800fc6e <_Balloc>
 800fe20:	2201      	movs	r2, #1
 800fe22:	6144      	str	r4, [r0, #20]
 800fe24:	6102      	str	r2, [r0, #16]
 800fe26:	bd10      	pop	{r4, pc}

0800fe28 <__multiply>:
 800fe28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe2c:	4614      	mov	r4, r2
 800fe2e:	690a      	ldr	r2, [r1, #16]
 800fe30:	6923      	ldr	r3, [r4, #16]
 800fe32:	429a      	cmp	r2, r3
 800fe34:	bfb8      	it	lt
 800fe36:	460b      	movlt	r3, r1
 800fe38:	4688      	mov	r8, r1
 800fe3a:	bfbc      	itt	lt
 800fe3c:	46a0      	movlt	r8, r4
 800fe3e:	461c      	movlt	r4, r3
 800fe40:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fe44:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800fe48:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fe4c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fe50:	eb07 0609 	add.w	r6, r7, r9
 800fe54:	42b3      	cmp	r3, r6
 800fe56:	bfb8      	it	lt
 800fe58:	3101      	addlt	r1, #1
 800fe5a:	f7ff ff08 	bl	800fc6e <_Balloc>
 800fe5e:	f100 0514 	add.w	r5, r0, #20
 800fe62:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800fe66:	462b      	mov	r3, r5
 800fe68:	2200      	movs	r2, #0
 800fe6a:	4573      	cmp	r3, lr
 800fe6c:	d316      	bcc.n	800fe9c <__multiply+0x74>
 800fe6e:	f104 0214 	add.w	r2, r4, #20
 800fe72:	f108 0114 	add.w	r1, r8, #20
 800fe76:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800fe7a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800fe7e:	9300      	str	r3, [sp, #0]
 800fe80:	9b00      	ldr	r3, [sp, #0]
 800fe82:	9201      	str	r2, [sp, #4]
 800fe84:	4293      	cmp	r3, r2
 800fe86:	d80c      	bhi.n	800fea2 <__multiply+0x7a>
 800fe88:	2e00      	cmp	r6, #0
 800fe8a:	dd03      	ble.n	800fe94 <__multiply+0x6c>
 800fe8c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d05d      	beq.n	800ff50 <__multiply+0x128>
 800fe94:	6106      	str	r6, [r0, #16]
 800fe96:	b003      	add	sp, #12
 800fe98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe9c:	f843 2b04 	str.w	r2, [r3], #4
 800fea0:	e7e3      	b.n	800fe6a <__multiply+0x42>
 800fea2:	f8b2 b000 	ldrh.w	fp, [r2]
 800fea6:	f1bb 0f00 	cmp.w	fp, #0
 800feaa:	d023      	beq.n	800fef4 <__multiply+0xcc>
 800feac:	4689      	mov	r9, r1
 800feae:	46ac      	mov	ip, r5
 800feb0:	f04f 0800 	mov.w	r8, #0
 800feb4:	f859 4b04 	ldr.w	r4, [r9], #4
 800feb8:	f8dc a000 	ldr.w	sl, [ip]
 800febc:	b2a3      	uxth	r3, r4
 800febe:	fa1f fa8a 	uxth.w	sl, sl
 800fec2:	fb0b a303 	mla	r3, fp, r3, sl
 800fec6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800feca:	f8dc 4000 	ldr.w	r4, [ip]
 800fece:	4443      	add	r3, r8
 800fed0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800fed4:	fb0b 840a 	mla	r4, fp, sl, r8
 800fed8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800fedc:	46e2      	mov	sl, ip
 800fede:	b29b      	uxth	r3, r3
 800fee0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800fee4:	454f      	cmp	r7, r9
 800fee6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800feea:	f84a 3b04 	str.w	r3, [sl], #4
 800feee:	d82b      	bhi.n	800ff48 <__multiply+0x120>
 800fef0:	f8cc 8004 	str.w	r8, [ip, #4]
 800fef4:	9b01      	ldr	r3, [sp, #4]
 800fef6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800fefa:	3204      	adds	r2, #4
 800fefc:	f1ba 0f00 	cmp.w	sl, #0
 800ff00:	d020      	beq.n	800ff44 <__multiply+0x11c>
 800ff02:	682b      	ldr	r3, [r5, #0]
 800ff04:	4689      	mov	r9, r1
 800ff06:	46a8      	mov	r8, r5
 800ff08:	f04f 0b00 	mov.w	fp, #0
 800ff0c:	f8b9 c000 	ldrh.w	ip, [r9]
 800ff10:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800ff14:	fb0a 440c 	mla	r4, sl, ip, r4
 800ff18:	445c      	add	r4, fp
 800ff1a:	46c4      	mov	ip, r8
 800ff1c:	b29b      	uxth	r3, r3
 800ff1e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ff22:	f84c 3b04 	str.w	r3, [ip], #4
 800ff26:	f859 3b04 	ldr.w	r3, [r9], #4
 800ff2a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800ff2e:	0c1b      	lsrs	r3, r3, #16
 800ff30:	fb0a b303 	mla	r3, sl, r3, fp
 800ff34:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ff38:	454f      	cmp	r7, r9
 800ff3a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800ff3e:	d805      	bhi.n	800ff4c <__multiply+0x124>
 800ff40:	f8c8 3004 	str.w	r3, [r8, #4]
 800ff44:	3504      	adds	r5, #4
 800ff46:	e79b      	b.n	800fe80 <__multiply+0x58>
 800ff48:	46d4      	mov	ip, sl
 800ff4a:	e7b3      	b.n	800feb4 <__multiply+0x8c>
 800ff4c:	46e0      	mov	r8, ip
 800ff4e:	e7dd      	b.n	800ff0c <__multiply+0xe4>
 800ff50:	3e01      	subs	r6, #1
 800ff52:	e799      	b.n	800fe88 <__multiply+0x60>

0800ff54 <__pow5mult>:
 800ff54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff58:	4615      	mov	r5, r2
 800ff5a:	f012 0203 	ands.w	r2, r2, #3
 800ff5e:	4606      	mov	r6, r0
 800ff60:	460f      	mov	r7, r1
 800ff62:	d007      	beq.n	800ff74 <__pow5mult+0x20>
 800ff64:	3a01      	subs	r2, #1
 800ff66:	4c21      	ldr	r4, [pc, #132]	; (800ffec <__pow5mult+0x98>)
 800ff68:	2300      	movs	r3, #0
 800ff6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ff6e:	f7ff fec9 	bl	800fd04 <__multadd>
 800ff72:	4607      	mov	r7, r0
 800ff74:	10ad      	asrs	r5, r5, #2
 800ff76:	d035      	beq.n	800ffe4 <__pow5mult+0x90>
 800ff78:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ff7a:	b93c      	cbnz	r4, 800ff8c <__pow5mult+0x38>
 800ff7c:	2010      	movs	r0, #16
 800ff7e:	f7ff fe63 	bl	800fc48 <malloc>
 800ff82:	6270      	str	r0, [r6, #36]	; 0x24
 800ff84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ff88:	6004      	str	r4, [r0, #0]
 800ff8a:	60c4      	str	r4, [r0, #12]
 800ff8c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ff90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ff94:	b94c      	cbnz	r4, 800ffaa <__pow5mult+0x56>
 800ff96:	f240 2171 	movw	r1, #625	; 0x271
 800ff9a:	4630      	mov	r0, r6
 800ff9c:	f7ff ff3b 	bl	800fe16 <__i2b>
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	f8c8 0008 	str.w	r0, [r8, #8]
 800ffa6:	4604      	mov	r4, r0
 800ffa8:	6003      	str	r3, [r0, #0]
 800ffaa:	f04f 0800 	mov.w	r8, #0
 800ffae:	07eb      	lsls	r3, r5, #31
 800ffb0:	d50a      	bpl.n	800ffc8 <__pow5mult+0x74>
 800ffb2:	4639      	mov	r1, r7
 800ffb4:	4622      	mov	r2, r4
 800ffb6:	4630      	mov	r0, r6
 800ffb8:	f7ff ff36 	bl	800fe28 <__multiply>
 800ffbc:	4639      	mov	r1, r7
 800ffbe:	4681      	mov	r9, r0
 800ffc0:	4630      	mov	r0, r6
 800ffc2:	f7ff fe88 	bl	800fcd6 <_Bfree>
 800ffc6:	464f      	mov	r7, r9
 800ffc8:	106d      	asrs	r5, r5, #1
 800ffca:	d00b      	beq.n	800ffe4 <__pow5mult+0x90>
 800ffcc:	6820      	ldr	r0, [r4, #0]
 800ffce:	b938      	cbnz	r0, 800ffe0 <__pow5mult+0x8c>
 800ffd0:	4622      	mov	r2, r4
 800ffd2:	4621      	mov	r1, r4
 800ffd4:	4630      	mov	r0, r6
 800ffd6:	f7ff ff27 	bl	800fe28 <__multiply>
 800ffda:	6020      	str	r0, [r4, #0]
 800ffdc:	f8c0 8000 	str.w	r8, [r0]
 800ffe0:	4604      	mov	r4, r0
 800ffe2:	e7e4      	b.n	800ffae <__pow5mult+0x5a>
 800ffe4:	4638      	mov	r0, r7
 800ffe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffea:	bf00      	nop
 800ffec:	08011df0 	.word	0x08011df0

0800fff0 <__lshift>:
 800fff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fff4:	460c      	mov	r4, r1
 800fff6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fffa:	6923      	ldr	r3, [r4, #16]
 800fffc:	6849      	ldr	r1, [r1, #4]
 800fffe:	eb0a 0903 	add.w	r9, sl, r3
 8010002:	68a3      	ldr	r3, [r4, #8]
 8010004:	4607      	mov	r7, r0
 8010006:	4616      	mov	r6, r2
 8010008:	f109 0501 	add.w	r5, r9, #1
 801000c:	42ab      	cmp	r3, r5
 801000e:	db32      	blt.n	8010076 <__lshift+0x86>
 8010010:	4638      	mov	r0, r7
 8010012:	f7ff fe2c 	bl	800fc6e <_Balloc>
 8010016:	2300      	movs	r3, #0
 8010018:	4680      	mov	r8, r0
 801001a:	f100 0114 	add.w	r1, r0, #20
 801001e:	461a      	mov	r2, r3
 8010020:	4553      	cmp	r3, sl
 8010022:	db2b      	blt.n	801007c <__lshift+0x8c>
 8010024:	6920      	ldr	r0, [r4, #16]
 8010026:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801002a:	f104 0314 	add.w	r3, r4, #20
 801002e:	f016 021f 	ands.w	r2, r6, #31
 8010032:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010036:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801003a:	d025      	beq.n	8010088 <__lshift+0x98>
 801003c:	f1c2 0e20 	rsb	lr, r2, #32
 8010040:	2000      	movs	r0, #0
 8010042:	681e      	ldr	r6, [r3, #0]
 8010044:	468a      	mov	sl, r1
 8010046:	4096      	lsls	r6, r2
 8010048:	4330      	orrs	r0, r6
 801004a:	f84a 0b04 	str.w	r0, [sl], #4
 801004e:	f853 0b04 	ldr.w	r0, [r3], #4
 8010052:	459c      	cmp	ip, r3
 8010054:	fa20 f00e 	lsr.w	r0, r0, lr
 8010058:	d814      	bhi.n	8010084 <__lshift+0x94>
 801005a:	6048      	str	r0, [r1, #4]
 801005c:	b108      	cbz	r0, 8010062 <__lshift+0x72>
 801005e:	f109 0502 	add.w	r5, r9, #2
 8010062:	3d01      	subs	r5, #1
 8010064:	4638      	mov	r0, r7
 8010066:	f8c8 5010 	str.w	r5, [r8, #16]
 801006a:	4621      	mov	r1, r4
 801006c:	f7ff fe33 	bl	800fcd6 <_Bfree>
 8010070:	4640      	mov	r0, r8
 8010072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010076:	3101      	adds	r1, #1
 8010078:	005b      	lsls	r3, r3, #1
 801007a:	e7c7      	b.n	801000c <__lshift+0x1c>
 801007c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8010080:	3301      	adds	r3, #1
 8010082:	e7cd      	b.n	8010020 <__lshift+0x30>
 8010084:	4651      	mov	r1, sl
 8010086:	e7dc      	b.n	8010042 <__lshift+0x52>
 8010088:	3904      	subs	r1, #4
 801008a:	f853 2b04 	ldr.w	r2, [r3], #4
 801008e:	f841 2f04 	str.w	r2, [r1, #4]!
 8010092:	459c      	cmp	ip, r3
 8010094:	d8f9      	bhi.n	801008a <__lshift+0x9a>
 8010096:	e7e4      	b.n	8010062 <__lshift+0x72>

08010098 <__mcmp>:
 8010098:	6903      	ldr	r3, [r0, #16]
 801009a:	690a      	ldr	r2, [r1, #16]
 801009c:	1a9b      	subs	r3, r3, r2
 801009e:	b530      	push	{r4, r5, lr}
 80100a0:	d10c      	bne.n	80100bc <__mcmp+0x24>
 80100a2:	0092      	lsls	r2, r2, #2
 80100a4:	3014      	adds	r0, #20
 80100a6:	3114      	adds	r1, #20
 80100a8:	1884      	adds	r4, r0, r2
 80100aa:	4411      	add	r1, r2
 80100ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80100b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80100b4:	4295      	cmp	r5, r2
 80100b6:	d003      	beq.n	80100c0 <__mcmp+0x28>
 80100b8:	d305      	bcc.n	80100c6 <__mcmp+0x2e>
 80100ba:	2301      	movs	r3, #1
 80100bc:	4618      	mov	r0, r3
 80100be:	bd30      	pop	{r4, r5, pc}
 80100c0:	42a0      	cmp	r0, r4
 80100c2:	d3f3      	bcc.n	80100ac <__mcmp+0x14>
 80100c4:	e7fa      	b.n	80100bc <__mcmp+0x24>
 80100c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80100ca:	e7f7      	b.n	80100bc <__mcmp+0x24>

080100cc <__mdiff>:
 80100cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100d0:	460d      	mov	r5, r1
 80100d2:	4607      	mov	r7, r0
 80100d4:	4611      	mov	r1, r2
 80100d6:	4628      	mov	r0, r5
 80100d8:	4614      	mov	r4, r2
 80100da:	f7ff ffdd 	bl	8010098 <__mcmp>
 80100de:	1e06      	subs	r6, r0, #0
 80100e0:	d108      	bne.n	80100f4 <__mdiff+0x28>
 80100e2:	4631      	mov	r1, r6
 80100e4:	4638      	mov	r0, r7
 80100e6:	f7ff fdc2 	bl	800fc6e <_Balloc>
 80100ea:	2301      	movs	r3, #1
 80100ec:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80100f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100f4:	bfa4      	itt	ge
 80100f6:	4623      	movge	r3, r4
 80100f8:	462c      	movge	r4, r5
 80100fa:	4638      	mov	r0, r7
 80100fc:	6861      	ldr	r1, [r4, #4]
 80100fe:	bfa6      	itte	ge
 8010100:	461d      	movge	r5, r3
 8010102:	2600      	movge	r6, #0
 8010104:	2601      	movlt	r6, #1
 8010106:	f7ff fdb2 	bl	800fc6e <_Balloc>
 801010a:	692b      	ldr	r3, [r5, #16]
 801010c:	60c6      	str	r6, [r0, #12]
 801010e:	6926      	ldr	r6, [r4, #16]
 8010110:	f105 0914 	add.w	r9, r5, #20
 8010114:	f104 0214 	add.w	r2, r4, #20
 8010118:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801011c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8010120:	f100 0514 	add.w	r5, r0, #20
 8010124:	f04f 0e00 	mov.w	lr, #0
 8010128:	f852 ab04 	ldr.w	sl, [r2], #4
 801012c:	f859 4b04 	ldr.w	r4, [r9], #4
 8010130:	fa1e f18a 	uxtah	r1, lr, sl
 8010134:	b2a3      	uxth	r3, r4
 8010136:	1ac9      	subs	r1, r1, r3
 8010138:	0c23      	lsrs	r3, r4, #16
 801013a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801013e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8010142:	b289      	uxth	r1, r1
 8010144:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8010148:	45c8      	cmp	r8, r9
 801014a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801014e:	4694      	mov	ip, r2
 8010150:	f845 3b04 	str.w	r3, [r5], #4
 8010154:	d8e8      	bhi.n	8010128 <__mdiff+0x5c>
 8010156:	45bc      	cmp	ip, r7
 8010158:	d304      	bcc.n	8010164 <__mdiff+0x98>
 801015a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801015e:	b183      	cbz	r3, 8010182 <__mdiff+0xb6>
 8010160:	6106      	str	r6, [r0, #16]
 8010162:	e7c5      	b.n	80100f0 <__mdiff+0x24>
 8010164:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010168:	fa1e f381 	uxtah	r3, lr, r1
 801016c:	141a      	asrs	r2, r3, #16
 801016e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010172:	b29b      	uxth	r3, r3
 8010174:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010178:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801017c:	f845 3b04 	str.w	r3, [r5], #4
 8010180:	e7e9      	b.n	8010156 <__mdiff+0x8a>
 8010182:	3e01      	subs	r6, #1
 8010184:	e7e9      	b.n	801015a <__mdiff+0x8e>

08010186 <__d2b>:
 8010186:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801018a:	460e      	mov	r6, r1
 801018c:	2101      	movs	r1, #1
 801018e:	ec59 8b10 	vmov	r8, r9, d0
 8010192:	4615      	mov	r5, r2
 8010194:	f7ff fd6b 	bl	800fc6e <_Balloc>
 8010198:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801019c:	4607      	mov	r7, r0
 801019e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80101a2:	bb34      	cbnz	r4, 80101f2 <__d2b+0x6c>
 80101a4:	9301      	str	r3, [sp, #4]
 80101a6:	f1b8 0300 	subs.w	r3, r8, #0
 80101aa:	d027      	beq.n	80101fc <__d2b+0x76>
 80101ac:	a802      	add	r0, sp, #8
 80101ae:	f840 3d08 	str.w	r3, [r0, #-8]!
 80101b2:	f7ff fe01 	bl	800fdb8 <__lo0bits>
 80101b6:	9900      	ldr	r1, [sp, #0]
 80101b8:	b1f0      	cbz	r0, 80101f8 <__d2b+0x72>
 80101ba:	9a01      	ldr	r2, [sp, #4]
 80101bc:	f1c0 0320 	rsb	r3, r0, #32
 80101c0:	fa02 f303 	lsl.w	r3, r2, r3
 80101c4:	430b      	orrs	r3, r1
 80101c6:	40c2      	lsrs	r2, r0
 80101c8:	617b      	str	r3, [r7, #20]
 80101ca:	9201      	str	r2, [sp, #4]
 80101cc:	9b01      	ldr	r3, [sp, #4]
 80101ce:	61bb      	str	r3, [r7, #24]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	bf14      	ite	ne
 80101d4:	2102      	movne	r1, #2
 80101d6:	2101      	moveq	r1, #1
 80101d8:	6139      	str	r1, [r7, #16]
 80101da:	b1c4      	cbz	r4, 801020e <__d2b+0x88>
 80101dc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80101e0:	4404      	add	r4, r0
 80101e2:	6034      	str	r4, [r6, #0]
 80101e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80101e8:	6028      	str	r0, [r5, #0]
 80101ea:	4638      	mov	r0, r7
 80101ec:	b003      	add	sp, #12
 80101ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80101f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80101f6:	e7d5      	b.n	80101a4 <__d2b+0x1e>
 80101f8:	6179      	str	r1, [r7, #20]
 80101fa:	e7e7      	b.n	80101cc <__d2b+0x46>
 80101fc:	a801      	add	r0, sp, #4
 80101fe:	f7ff fddb 	bl	800fdb8 <__lo0bits>
 8010202:	9b01      	ldr	r3, [sp, #4]
 8010204:	617b      	str	r3, [r7, #20]
 8010206:	2101      	movs	r1, #1
 8010208:	6139      	str	r1, [r7, #16]
 801020a:	3020      	adds	r0, #32
 801020c:	e7e5      	b.n	80101da <__d2b+0x54>
 801020e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8010212:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010216:	6030      	str	r0, [r6, #0]
 8010218:	6918      	ldr	r0, [r3, #16]
 801021a:	f7ff fdae 	bl	800fd7a <__hi0bits>
 801021e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8010222:	e7e1      	b.n	80101e8 <__d2b+0x62>

08010224 <_calloc_r>:
 8010224:	b538      	push	{r3, r4, r5, lr}
 8010226:	fb02 f401 	mul.w	r4, r2, r1
 801022a:	4621      	mov	r1, r4
 801022c:	f000 f856 	bl	80102dc <_malloc_r>
 8010230:	4605      	mov	r5, r0
 8010232:	b118      	cbz	r0, 801023c <_calloc_r+0x18>
 8010234:	4622      	mov	r2, r4
 8010236:	2100      	movs	r1, #0
 8010238:	f7fd ff08 	bl	800e04c <memset>
 801023c:	4628      	mov	r0, r5
 801023e:	bd38      	pop	{r3, r4, r5, pc}

08010240 <_free_r>:
 8010240:	b538      	push	{r3, r4, r5, lr}
 8010242:	4605      	mov	r5, r0
 8010244:	2900      	cmp	r1, #0
 8010246:	d045      	beq.n	80102d4 <_free_r+0x94>
 8010248:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801024c:	1f0c      	subs	r4, r1, #4
 801024e:	2b00      	cmp	r3, #0
 8010250:	bfb8      	it	lt
 8010252:	18e4      	addlt	r4, r4, r3
 8010254:	f000 fac3 	bl	80107de <__malloc_lock>
 8010258:	4a1f      	ldr	r2, [pc, #124]	; (80102d8 <_free_r+0x98>)
 801025a:	6813      	ldr	r3, [r2, #0]
 801025c:	4610      	mov	r0, r2
 801025e:	b933      	cbnz	r3, 801026e <_free_r+0x2e>
 8010260:	6063      	str	r3, [r4, #4]
 8010262:	6014      	str	r4, [r2, #0]
 8010264:	4628      	mov	r0, r5
 8010266:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801026a:	f000 bab9 	b.w	80107e0 <__malloc_unlock>
 801026e:	42a3      	cmp	r3, r4
 8010270:	d90c      	bls.n	801028c <_free_r+0x4c>
 8010272:	6821      	ldr	r1, [r4, #0]
 8010274:	1862      	adds	r2, r4, r1
 8010276:	4293      	cmp	r3, r2
 8010278:	bf04      	itt	eq
 801027a:	681a      	ldreq	r2, [r3, #0]
 801027c:	685b      	ldreq	r3, [r3, #4]
 801027e:	6063      	str	r3, [r4, #4]
 8010280:	bf04      	itt	eq
 8010282:	1852      	addeq	r2, r2, r1
 8010284:	6022      	streq	r2, [r4, #0]
 8010286:	6004      	str	r4, [r0, #0]
 8010288:	e7ec      	b.n	8010264 <_free_r+0x24>
 801028a:	4613      	mov	r3, r2
 801028c:	685a      	ldr	r2, [r3, #4]
 801028e:	b10a      	cbz	r2, 8010294 <_free_r+0x54>
 8010290:	42a2      	cmp	r2, r4
 8010292:	d9fa      	bls.n	801028a <_free_r+0x4a>
 8010294:	6819      	ldr	r1, [r3, #0]
 8010296:	1858      	adds	r0, r3, r1
 8010298:	42a0      	cmp	r0, r4
 801029a:	d10b      	bne.n	80102b4 <_free_r+0x74>
 801029c:	6820      	ldr	r0, [r4, #0]
 801029e:	4401      	add	r1, r0
 80102a0:	1858      	adds	r0, r3, r1
 80102a2:	4282      	cmp	r2, r0
 80102a4:	6019      	str	r1, [r3, #0]
 80102a6:	d1dd      	bne.n	8010264 <_free_r+0x24>
 80102a8:	6810      	ldr	r0, [r2, #0]
 80102aa:	6852      	ldr	r2, [r2, #4]
 80102ac:	605a      	str	r2, [r3, #4]
 80102ae:	4401      	add	r1, r0
 80102b0:	6019      	str	r1, [r3, #0]
 80102b2:	e7d7      	b.n	8010264 <_free_r+0x24>
 80102b4:	d902      	bls.n	80102bc <_free_r+0x7c>
 80102b6:	230c      	movs	r3, #12
 80102b8:	602b      	str	r3, [r5, #0]
 80102ba:	e7d3      	b.n	8010264 <_free_r+0x24>
 80102bc:	6820      	ldr	r0, [r4, #0]
 80102be:	1821      	adds	r1, r4, r0
 80102c0:	428a      	cmp	r2, r1
 80102c2:	bf04      	itt	eq
 80102c4:	6811      	ldreq	r1, [r2, #0]
 80102c6:	6852      	ldreq	r2, [r2, #4]
 80102c8:	6062      	str	r2, [r4, #4]
 80102ca:	bf04      	itt	eq
 80102cc:	1809      	addeq	r1, r1, r0
 80102ce:	6021      	streq	r1, [r4, #0]
 80102d0:	605c      	str	r4, [r3, #4]
 80102d2:	e7c7      	b.n	8010264 <_free_r+0x24>
 80102d4:	bd38      	pop	{r3, r4, r5, pc}
 80102d6:	bf00      	nop
 80102d8:	20001f30 	.word	0x20001f30

080102dc <_malloc_r>:
 80102dc:	b570      	push	{r4, r5, r6, lr}
 80102de:	1ccd      	adds	r5, r1, #3
 80102e0:	f025 0503 	bic.w	r5, r5, #3
 80102e4:	3508      	adds	r5, #8
 80102e6:	2d0c      	cmp	r5, #12
 80102e8:	bf38      	it	cc
 80102ea:	250c      	movcc	r5, #12
 80102ec:	2d00      	cmp	r5, #0
 80102ee:	4606      	mov	r6, r0
 80102f0:	db01      	blt.n	80102f6 <_malloc_r+0x1a>
 80102f2:	42a9      	cmp	r1, r5
 80102f4:	d903      	bls.n	80102fe <_malloc_r+0x22>
 80102f6:	230c      	movs	r3, #12
 80102f8:	6033      	str	r3, [r6, #0]
 80102fa:	2000      	movs	r0, #0
 80102fc:	bd70      	pop	{r4, r5, r6, pc}
 80102fe:	f000 fa6e 	bl	80107de <__malloc_lock>
 8010302:	4a21      	ldr	r2, [pc, #132]	; (8010388 <_malloc_r+0xac>)
 8010304:	6814      	ldr	r4, [r2, #0]
 8010306:	4621      	mov	r1, r4
 8010308:	b991      	cbnz	r1, 8010330 <_malloc_r+0x54>
 801030a:	4c20      	ldr	r4, [pc, #128]	; (801038c <_malloc_r+0xb0>)
 801030c:	6823      	ldr	r3, [r4, #0]
 801030e:	b91b      	cbnz	r3, 8010318 <_malloc_r+0x3c>
 8010310:	4630      	mov	r0, r6
 8010312:	f000 f98f 	bl	8010634 <_sbrk_r>
 8010316:	6020      	str	r0, [r4, #0]
 8010318:	4629      	mov	r1, r5
 801031a:	4630      	mov	r0, r6
 801031c:	f000 f98a 	bl	8010634 <_sbrk_r>
 8010320:	1c43      	adds	r3, r0, #1
 8010322:	d124      	bne.n	801036e <_malloc_r+0x92>
 8010324:	230c      	movs	r3, #12
 8010326:	6033      	str	r3, [r6, #0]
 8010328:	4630      	mov	r0, r6
 801032a:	f000 fa59 	bl	80107e0 <__malloc_unlock>
 801032e:	e7e4      	b.n	80102fa <_malloc_r+0x1e>
 8010330:	680b      	ldr	r3, [r1, #0]
 8010332:	1b5b      	subs	r3, r3, r5
 8010334:	d418      	bmi.n	8010368 <_malloc_r+0x8c>
 8010336:	2b0b      	cmp	r3, #11
 8010338:	d90f      	bls.n	801035a <_malloc_r+0x7e>
 801033a:	600b      	str	r3, [r1, #0]
 801033c:	50cd      	str	r5, [r1, r3]
 801033e:	18cc      	adds	r4, r1, r3
 8010340:	4630      	mov	r0, r6
 8010342:	f000 fa4d 	bl	80107e0 <__malloc_unlock>
 8010346:	f104 000b 	add.w	r0, r4, #11
 801034a:	1d23      	adds	r3, r4, #4
 801034c:	f020 0007 	bic.w	r0, r0, #7
 8010350:	1ac3      	subs	r3, r0, r3
 8010352:	d0d3      	beq.n	80102fc <_malloc_r+0x20>
 8010354:	425a      	negs	r2, r3
 8010356:	50e2      	str	r2, [r4, r3]
 8010358:	e7d0      	b.n	80102fc <_malloc_r+0x20>
 801035a:	428c      	cmp	r4, r1
 801035c:	684b      	ldr	r3, [r1, #4]
 801035e:	bf16      	itet	ne
 8010360:	6063      	strne	r3, [r4, #4]
 8010362:	6013      	streq	r3, [r2, #0]
 8010364:	460c      	movne	r4, r1
 8010366:	e7eb      	b.n	8010340 <_malloc_r+0x64>
 8010368:	460c      	mov	r4, r1
 801036a:	6849      	ldr	r1, [r1, #4]
 801036c:	e7cc      	b.n	8010308 <_malloc_r+0x2c>
 801036e:	1cc4      	adds	r4, r0, #3
 8010370:	f024 0403 	bic.w	r4, r4, #3
 8010374:	42a0      	cmp	r0, r4
 8010376:	d005      	beq.n	8010384 <_malloc_r+0xa8>
 8010378:	1a21      	subs	r1, r4, r0
 801037a:	4630      	mov	r0, r6
 801037c:	f000 f95a 	bl	8010634 <_sbrk_r>
 8010380:	3001      	adds	r0, #1
 8010382:	d0cf      	beq.n	8010324 <_malloc_r+0x48>
 8010384:	6025      	str	r5, [r4, #0]
 8010386:	e7db      	b.n	8010340 <_malloc_r+0x64>
 8010388:	20001f30 	.word	0x20001f30
 801038c:	20001f34 	.word	0x20001f34

08010390 <__ssputs_r>:
 8010390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010394:	688e      	ldr	r6, [r1, #8]
 8010396:	429e      	cmp	r6, r3
 8010398:	4682      	mov	sl, r0
 801039a:	460c      	mov	r4, r1
 801039c:	4690      	mov	r8, r2
 801039e:	4699      	mov	r9, r3
 80103a0:	d837      	bhi.n	8010412 <__ssputs_r+0x82>
 80103a2:	898a      	ldrh	r2, [r1, #12]
 80103a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80103a8:	d031      	beq.n	801040e <__ssputs_r+0x7e>
 80103aa:	6825      	ldr	r5, [r4, #0]
 80103ac:	6909      	ldr	r1, [r1, #16]
 80103ae:	1a6f      	subs	r7, r5, r1
 80103b0:	6965      	ldr	r5, [r4, #20]
 80103b2:	2302      	movs	r3, #2
 80103b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80103b8:	fb95 f5f3 	sdiv	r5, r5, r3
 80103bc:	f109 0301 	add.w	r3, r9, #1
 80103c0:	443b      	add	r3, r7
 80103c2:	429d      	cmp	r5, r3
 80103c4:	bf38      	it	cc
 80103c6:	461d      	movcc	r5, r3
 80103c8:	0553      	lsls	r3, r2, #21
 80103ca:	d530      	bpl.n	801042e <__ssputs_r+0x9e>
 80103cc:	4629      	mov	r1, r5
 80103ce:	f7ff ff85 	bl	80102dc <_malloc_r>
 80103d2:	4606      	mov	r6, r0
 80103d4:	b950      	cbnz	r0, 80103ec <__ssputs_r+0x5c>
 80103d6:	230c      	movs	r3, #12
 80103d8:	f8ca 3000 	str.w	r3, [sl]
 80103dc:	89a3      	ldrh	r3, [r4, #12]
 80103de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80103e2:	81a3      	strh	r3, [r4, #12]
 80103e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80103e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103ec:	463a      	mov	r2, r7
 80103ee:	6921      	ldr	r1, [r4, #16]
 80103f0:	f7ff fc32 	bl	800fc58 <memcpy>
 80103f4:	89a3      	ldrh	r3, [r4, #12]
 80103f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80103fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80103fe:	81a3      	strh	r3, [r4, #12]
 8010400:	6126      	str	r6, [r4, #16]
 8010402:	6165      	str	r5, [r4, #20]
 8010404:	443e      	add	r6, r7
 8010406:	1bed      	subs	r5, r5, r7
 8010408:	6026      	str	r6, [r4, #0]
 801040a:	60a5      	str	r5, [r4, #8]
 801040c:	464e      	mov	r6, r9
 801040e:	454e      	cmp	r6, r9
 8010410:	d900      	bls.n	8010414 <__ssputs_r+0x84>
 8010412:	464e      	mov	r6, r9
 8010414:	4632      	mov	r2, r6
 8010416:	4641      	mov	r1, r8
 8010418:	6820      	ldr	r0, [r4, #0]
 801041a:	f000 f9c7 	bl	80107ac <memmove>
 801041e:	68a3      	ldr	r3, [r4, #8]
 8010420:	1b9b      	subs	r3, r3, r6
 8010422:	60a3      	str	r3, [r4, #8]
 8010424:	6823      	ldr	r3, [r4, #0]
 8010426:	441e      	add	r6, r3
 8010428:	6026      	str	r6, [r4, #0]
 801042a:	2000      	movs	r0, #0
 801042c:	e7dc      	b.n	80103e8 <__ssputs_r+0x58>
 801042e:	462a      	mov	r2, r5
 8010430:	f000 f9d7 	bl	80107e2 <_realloc_r>
 8010434:	4606      	mov	r6, r0
 8010436:	2800      	cmp	r0, #0
 8010438:	d1e2      	bne.n	8010400 <__ssputs_r+0x70>
 801043a:	6921      	ldr	r1, [r4, #16]
 801043c:	4650      	mov	r0, sl
 801043e:	f7ff feff 	bl	8010240 <_free_r>
 8010442:	e7c8      	b.n	80103d6 <__ssputs_r+0x46>

08010444 <_svfiprintf_r>:
 8010444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010448:	461d      	mov	r5, r3
 801044a:	898b      	ldrh	r3, [r1, #12]
 801044c:	061f      	lsls	r7, r3, #24
 801044e:	b09d      	sub	sp, #116	; 0x74
 8010450:	4680      	mov	r8, r0
 8010452:	460c      	mov	r4, r1
 8010454:	4616      	mov	r6, r2
 8010456:	d50f      	bpl.n	8010478 <_svfiprintf_r+0x34>
 8010458:	690b      	ldr	r3, [r1, #16]
 801045a:	b96b      	cbnz	r3, 8010478 <_svfiprintf_r+0x34>
 801045c:	2140      	movs	r1, #64	; 0x40
 801045e:	f7ff ff3d 	bl	80102dc <_malloc_r>
 8010462:	6020      	str	r0, [r4, #0]
 8010464:	6120      	str	r0, [r4, #16]
 8010466:	b928      	cbnz	r0, 8010474 <_svfiprintf_r+0x30>
 8010468:	230c      	movs	r3, #12
 801046a:	f8c8 3000 	str.w	r3, [r8]
 801046e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010472:	e0c8      	b.n	8010606 <_svfiprintf_r+0x1c2>
 8010474:	2340      	movs	r3, #64	; 0x40
 8010476:	6163      	str	r3, [r4, #20]
 8010478:	2300      	movs	r3, #0
 801047a:	9309      	str	r3, [sp, #36]	; 0x24
 801047c:	2320      	movs	r3, #32
 801047e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010482:	2330      	movs	r3, #48	; 0x30
 8010484:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010488:	9503      	str	r5, [sp, #12]
 801048a:	f04f 0b01 	mov.w	fp, #1
 801048e:	4637      	mov	r7, r6
 8010490:	463d      	mov	r5, r7
 8010492:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010496:	b10b      	cbz	r3, 801049c <_svfiprintf_r+0x58>
 8010498:	2b25      	cmp	r3, #37	; 0x25
 801049a:	d13e      	bne.n	801051a <_svfiprintf_r+0xd6>
 801049c:	ebb7 0a06 	subs.w	sl, r7, r6
 80104a0:	d00b      	beq.n	80104ba <_svfiprintf_r+0x76>
 80104a2:	4653      	mov	r3, sl
 80104a4:	4632      	mov	r2, r6
 80104a6:	4621      	mov	r1, r4
 80104a8:	4640      	mov	r0, r8
 80104aa:	f7ff ff71 	bl	8010390 <__ssputs_r>
 80104ae:	3001      	adds	r0, #1
 80104b0:	f000 80a4 	beq.w	80105fc <_svfiprintf_r+0x1b8>
 80104b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104b6:	4453      	add	r3, sl
 80104b8:	9309      	str	r3, [sp, #36]	; 0x24
 80104ba:	783b      	ldrb	r3, [r7, #0]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	f000 809d 	beq.w	80105fc <_svfiprintf_r+0x1b8>
 80104c2:	2300      	movs	r3, #0
 80104c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80104c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80104cc:	9304      	str	r3, [sp, #16]
 80104ce:	9307      	str	r3, [sp, #28]
 80104d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80104d4:	931a      	str	r3, [sp, #104]	; 0x68
 80104d6:	462f      	mov	r7, r5
 80104d8:	2205      	movs	r2, #5
 80104da:	f817 1b01 	ldrb.w	r1, [r7], #1
 80104de:	4850      	ldr	r0, [pc, #320]	; (8010620 <_svfiprintf_r+0x1dc>)
 80104e0:	f7ef fea6 	bl	8000230 <memchr>
 80104e4:	9b04      	ldr	r3, [sp, #16]
 80104e6:	b9d0      	cbnz	r0, 801051e <_svfiprintf_r+0xda>
 80104e8:	06d9      	lsls	r1, r3, #27
 80104ea:	bf44      	itt	mi
 80104ec:	2220      	movmi	r2, #32
 80104ee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80104f2:	071a      	lsls	r2, r3, #28
 80104f4:	bf44      	itt	mi
 80104f6:	222b      	movmi	r2, #43	; 0x2b
 80104f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80104fc:	782a      	ldrb	r2, [r5, #0]
 80104fe:	2a2a      	cmp	r2, #42	; 0x2a
 8010500:	d015      	beq.n	801052e <_svfiprintf_r+0xea>
 8010502:	9a07      	ldr	r2, [sp, #28]
 8010504:	462f      	mov	r7, r5
 8010506:	2000      	movs	r0, #0
 8010508:	250a      	movs	r5, #10
 801050a:	4639      	mov	r1, r7
 801050c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010510:	3b30      	subs	r3, #48	; 0x30
 8010512:	2b09      	cmp	r3, #9
 8010514:	d94d      	bls.n	80105b2 <_svfiprintf_r+0x16e>
 8010516:	b1b8      	cbz	r0, 8010548 <_svfiprintf_r+0x104>
 8010518:	e00f      	b.n	801053a <_svfiprintf_r+0xf6>
 801051a:	462f      	mov	r7, r5
 801051c:	e7b8      	b.n	8010490 <_svfiprintf_r+0x4c>
 801051e:	4a40      	ldr	r2, [pc, #256]	; (8010620 <_svfiprintf_r+0x1dc>)
 8010520:	1a80      	subs	r0, r0, r2
 8010522:	fa0b f000 	lsl.w	r0, fp, r0
 8010526:	4318      	orrs	r0, r3
 8010528:	9004      	str	r0, [sp, #16]
 801052a:	463d      	mov	r5, r7
 801052c:	e7d3      	b.n	80104d6 <_svfiprintf_r+0x92>
 801052e:	9a03      	ldr	r2, [sp, #12]
 8010530:	1d11      	adds	r1, r2, #4
 8010532:	6812      	ldr	r2, [r2, #0]
 8010534:	9103      	str	r1, [sp, #12]
 8010536:	2a00      	cmp	r2, #0
 8010538:	db01      	blt.n	801053e <_svfiprintf_r+0xfa>
 801053a:	9207      	str	r2, [sp, #28]
 801053c:	e004      	b.n	8010548 <_svfiprintf_r+0x104>
 801053e:	4252      	negs	r2, r2
 8010540:	f043 0302 	orr.w	r3, r3, #2
 8010544:	9207      	str	r2, [sp, #28]
 8010546:	9304      	str	r3, [sp, #16]
 8010548:	783b      	ldrb	r3, [r7, #0]
 801054a:	2b2e      	cmp	r3, #46	; 0x2e
 801054c:	d10c      	bne.n	8010568 <_svfiprintf_r+0x124>
 801054e:	787b      	ldrb	r3, [r7, #1]
 8010550:	2b2a      	cmp	r3, #42	; 0x2a
 8010552:	d133      	bne.n	80105bc <_svfiprintf_r+0x178>
 8010554:	9b03      	ldr	r3, [sp, #12]
 8010556:	1d1a      	adds	r2, r3, #4
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	9203      	str	r2, [sp, #12]
 801055c:	2b00      	cmp	r3, #0
 801055e:	bfb8      	it	lt
 8010560:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010564:	3702      	adds	r7, #2
 8010566:	9305      	str	r3, [sp, #20]
 8010568:	4d2e      	ldr	r5, [pc, #184]	; (8010624 <_svfiprintf_r+0x1e0>)
 801056a:	7839      	ldrb	r1, [r7, #0]
 801056c:	2203      	movs	r2, #3
 801056e:	4628      	mov	r0, r5
 8010570:	f7ef fe5e 	bl	8000230 <memchr>
 8010574:	b138      	cbz	r0, 8010586 <_svfiprintf_r+0x142>
 8010576:	2340      	movs	r3, #64	; 0x40
 8010578:	1b40      	subs	r0, r0, r5
 801057a:	fa03 f000 	lsl.w	r0, r3, r0
 801057e:	9b04      	ldr	r3, [sp, #16]
 8010580:	4303      	orrs	r3, r0
 8010582:	3701      	adds	r7, #1
 8010584:	9304      	str	r3, [sp, #16]
 8010586:	7839      	ldrb	r1, [r7, #0]
 8010588:	4827      	ldr	r0, [pc, #156]	; (8010628 <_svfiprintf_r+0x1e4>)
 801058a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801058e:	2206      	movs	r2, #6
 8010590:	1c7e      	adds	r6, r7, #1
 8010592:	f7ef fe4d 	bl	8000230 <memchr>
 8010596:	2800      	cmp	r0, #0
 8010598:	d038      	beq.n	801060c <_svfiprintf_r+0x1c8>
 801059a:	4b24      	ldr	r3, [pc, #144]	; (801062c <_svfiprintf_r+0x1e8>)
 801059c:	bb13      	cbnz	r3, 80105e4 <_svfiprintf_r+0x1a0>
 801059e:	9b03      	ldr	r3, [sp, #12]
 80105a0:	3307      	adds	r3, #7
 80105a2:	f023 0307 	bic.w	r3, r3, #7
 80105a6:	3308      	adds	r3, #8
 80105a8:	9303      	str	r3, [sp, #12]
 80105aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105ac:	444b      	add	r3, r9
 80105ae:	9309      	str	r3, [sp, #36]	; 0x24
 80105b0:	e76d      	b.n	801048e <_svfiprintf_r+0x4a>
 80105b2:	fb05 3202 	mla	r2, r5, r2, r3
 80105b6:	2001      	movs	r0, #1
 80105b8:	460f      	mov	r7, r1
 80105ba:	e7a6      	b.n	801050a <_svfiprintf_r+0xc6>
 80105bc:	2300      	movs	r3, #0
 80105be:	3701      	adds	r7, #1
 80105c0:	9305      	str	r3, [sp, #20]
 80105c2:	4619      	mov	r1, r3
 80105c4:	250a      	movs	r5, #10
 80105c6:	4638      	mov	r0, r7
 80105c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80105cc:	3a30      	subs	r2, #48	; 0x30
 80105ce:	2a09      	cmp	r2, #9
 80105d0:	d903      	bls.n	80105da <_svfiprintf_r+0x196>
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d0c8      	beq.n	8010568 <_svfiprintf_r+0x124>
 80105d6:	9105      	str	r1, [sp, #20]
 80105d8:	e7c6      	b.n	8010568 <_svfiprintf_r+0x124>
 80105da:	fb05 2101 	mla	r1, r5, r1, r2
 80105de:	2301      	movs	r3, #1
 80105e0:	4607      	mov	r7, r0
 80105e2:	e7f0      	b.n	80105c6 <_svfiprintf_r+0x182>
 80105e4:	ab03      	add	r3, sp, #12
 80105e6:	9300      	str	r3, [sp, #0]
 80105e8:	4622      	mov	r2, r4
 80105ea:	4b11      	ldr	r3, [pc, #68]	; (8010630 <_svfiprintf_r+0x1ec>)
 80105ec:	a904      	add	r1, sp, #16
 80105ee:	4640      	mov	r0, r8
 80105f0:	f7fd fdc8 	bl	800e184 <_printf_float>
 80105f4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80105f8:	4681      	mov	r9, r0
 80105fa:	d1d6      	bne.n	80105aa <_svfiprintf_r+0x166>
 80105fc:	89a3      	ldrh	r3, [r4, #12]
 80105fe:	065b      	lsls	r3, r3, #25
 8010600:	f53f af35 	bmi.w	801046e <_svfiprintf_r+0x2a>
 8010604:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010606:	b01d      	add	sp, #116	; 0x74
 8010608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801060c:	ab03      	add	r3, sp, #12
 801060e:	9300      	str	r3, [sp, #0]
 8010610:	4622      	mov	r2, r4
 8010612:	4b07      	ldr	r3, [pc, #28]	; (8010630 <_svfiprintf_r+0x1ec>)
 8010614:	a904      	add	r1, sp, #16
 8010616:	4640      	mov	r0, r8
 8010618:	f7fe f86a 	bl	800e6f0 <_printf_i>
 801061c:	e7ea      	b.n	80105f4 <_svfiprintf_r+0x1b0>
 801061e:	bf00      	nop
 8010620:	08011dfc 	.word	0x08011dfc
 8010624:	08011e02 	.word	0x08011e02
 8010628:	08011e06 	.word	0x08011e06
 801062c:	0800e185 	.word	0x0800e185
 8010630:	08010391 	.word	0x08010391

08010634 <_sbrk_r>:
 8010634:	b538      	push	{r3, r4, r5, lr}
 8010636:	4c06      	ldr	r4, [pc, #24]	; (8010650 <_sbrk_r+0x1c>)
 8010638:	2300      	movs	r3, #0
 801063a:	4605      	mov	r5, r0
 801063c:	4608      	mov	r0, r1
 801063e:	6023      	str	r3, [r4, #0]
 8010640:	f7f6 ffa2 	bl	8007588 <_sbrk>
 8010644:	1c43      	adds	r3, r0, #1
 8010646:	d102      	bne.n	801064e <_sbrk_r+0x1a>
 8010648:	6823      	ldr	r3, [r4, #0]
 801064a:	b103      	cbz	r3, 801064e <_sbrk_r+0x1a>
 801064c:	602b      	str	r3, [r5, #0]
 801064e:	bd38      	pop	{r3, r4, r5, pc}
 8010650:	20002964 	.word	0x20002964

08010654 <__sread>:
 8010654:	b510      	push	{r4, lr}
 8010656:	460c      	mov	r4, r1
 8010658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801065c:	f000 f8e8 	bl	8010830 <_read_r>
 8010660:	2800      	cmp	r0, #0
 8010662:	bfab      	itete	ge
 8010664:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010666:	89a3      	ldrhlt	r3, [r4, #12]
 8010668:	181b      	addge	r3, r3, r0
 801066a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801066e:	bfac      	ite	ge
 8010670:	6563      	strge	r3, [r4, #84]	; 0x54
 8010672:	81a3      	strhlt	r3, [r4, #12]
 8010674:	bd10      	pop	{r4, pc}

08010676 <__swrite>:
 8010676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801067a:	461f      	mov	r7, r3
 801067c:	898b      	ldrh	r3, [r1, #12]
 801067e:	05db      	lsls	r3, r3, #23
 8010680:	4605      	mov	r5, r0
 8010682:	460c      	mov	r4, r1
 8010684:	4616      	mov	r6, r2
 8010686:	d505      	bpl.n	8010694 <__swrite+0x1e>
 8010688:	2302      	movs	r3, #2
 801068a:	2200      	movs	r2, #0
 801068c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010690:	f000 f868 	bl	8010764 <_lseek_r>
 8010694:	89a3      	ldrh	r3, [r4, #12]
 8010696:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801069a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801069e:	81a3      	strh	r3, [r4, #12]
 80106a0:	4632      	mov	r2, r6
 80106a2:	463b      	mov	r3, r7
 80106a4:	4628      	mov	r0, r5
 80106a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80106aa:	f000 b817 	b.w	80106dc <_write_r>

080106ae <__sseek>:
 80106ae:	b510      	push	{r4, lr}
 80106b0:	460c      	mov	r4, r1
 80106b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106b6:	f000 f855 	bl	8010764 <_lseek_r>
 80106ba:	1c43      	adds	r3, r0, #1
 80106bc:	89a3      	ldrh	r3, [r4, #12]
 80106be:	bf15      	itete	ne
 80106c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80106c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80106c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80106ca:	81a3      	strheq	r3, [r4, #12]
 80106cc:	bf18      	it	ne
 80106ce:	81a3      	strhne	r3, [r4, #12]
 80106d0:	bd10      	pop	{r4, pc}

080106d2 <__sclose>:
 80106d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106d6:	f000 b813 	b.w	8010700 <_close_r>
	...

080106dc <_write_r>:
 80106dc:	b538      	push	{r3, r4, r5, lr}
 80106de:	4c07      	ldr	r4, [pc, #28]	; (80106fc <_write_r+0x20>)
 80106e0:	4605      	mov	r5, r0
 80106e2:	4608      	mov	r0, r1
 80106e4:	4611      	mov	r1, r2
 80106e6:	2200      	movs	r2, #0
 80106e8:	6022      	str	r2, [r4, #0]
 80106ea:	461a      	mov	r2, r3
 80106ec:	f7f6 fc1f 	bl	8006f2e <_write>
 80106f0:	1c43      	adds	r3, r0, #1
 80106f2:	d102      	bne.n	80106fa <_write_r+0x1e>
 80106f4:	6823      	ldr	r3, [r4, #0]
 80106f6:	b103      	cbz	r3, 80106fa <_write_r+0x1e>
 80106f8:	602b      	str	r3, [r5, #0]
 80106fa:	bd38      	pop	{r3, r4, r5, pc}
 80106fc:	20002964 	.word	0x20002964

08010700 <_close_r>:
 8010700:	b538      	push	{r3, r4, r5, lr}
 8010702:	4c06      	ldr	r4, [pc, #24]	; (801071c <_close_r+0x1c>)
 8010704:	2300      	movs	r3, #0
 8010706:	4605      	mov	r5, r0
 8010708:	4608      	mov	r0, r1
 801070a:	6023      	str	r3, [r4, #0]
 801070c:	f7f6 ff07 	bl	800751e <_close>
 8010710:	1c43      	adds	r3, r0, #1
 8010712:	d102      	bne.n	801071a <_close_r+0x1a>
 8010714:	6823      	ldr	r3, [r4, #0]
 8010716:	b103      	cbz	r3, 801071a <_close_r+0x1a>
 8010718:	602b      	str	r3, [r5, #0]
 801071a:	bd38      	pop	{r3, r4, r5, pc}
 801071c:	20002964 	.word	0x20002964

08010720 <_fstat_r>:
 8010720:	b538      	push	{r3, r4, r5, lr}
 8010722:	4c07      	ldr	r4, [pc, #28]	; (8010740 <_fstat_r+0x20>)
 8010724:	2300      	movs	r3, #0
 8010726:	4605      	mov	r5, r0
 8010728:	4608      	mov	r0, r1
 801072a:	4611      	mov	r1, r2
 801072c:	6023      	str	r3, [r4, #0]
 801072e:	f7f6 ff02 	bl	8007536 <_fstat>
 8010732:	1c43      	adds	r3, r0, #1
 8010734:	d102      	bne.n	801073c <_fstat_r+0x1c>
 8010736:	6823      	ldr	r3, [r4, #0]
 8010738:	b103      	cbz	r3, 801073c <_fstat_r+0x1c>
 801073a:	602b      	str	r3, [r5, #0]
 801073c:	bd38      	pop	{r3, r4, r5, pc}
 801073e:	bf00      	nop
 8010740:	20002964 	.word	0x20002964

08010744 <_isatty_r>:
 8010744:	b538      	push	{r3, r4, r5, lr}
 8010746:	4c06      	ldr	r4, [pc, #24]	; (8010760 <_isatty_r+0x1c>)
 8010748:	2300      	movs	r3, #0
 801074a:	4605      	mov	r5, r0
 801074c:	4608      	mov	r0, r1
 801074e:	6023      	str	r3, [r4, #0]
 8010750:	f7f6 ff01 	bl	8007556 <_isatty>
 8010754:	1c43      	adds	r3, r0, #1
 8010756:	d102      	bne.n	801075e <_isatty_r+0x1a>
 8010758:	6823      	ldr	r3, [r4, #0]
 801075a:	b103      	cbz	r3, 801075e <_isatty_r+0x1a>
 801075c:	602b      	str	r3, [r5, #0]
 801075e:	bd38      	pop	{r3, r4, r5, pc}
 8010760:	20002964 	.word	0x20002964

08010764 <_lseek_r>:
 8010764:	b538      	push	{r3, r4, r5, lr}
 8010766:	4c07      	ldr	r4, [pc, #28]	; (8010784 <_lseek_r+0x20>)
 8010768:	4605      	mov	r5, r0
 801076a:	4608      	mov	r0, r1
 801076c:	4611      	mov	r1, r2
 801076e:	2200      	movs	r2, #0
 8010770:	6022      	str	r2, [r4, #0]
 8010772:	461a      	mov	r2, r3
 8010774:	f7f6 fefa 	bl	800756c <_lseek>
 8010778:	1c43      	adds	r3, r0, #1
 801077a:	d102      	bne.n	8010782 <_lseek_r+0x1e>
 801077c:	6823      	ldr	r3, [r4, #0]
 801077e:	b103      	cbz	r3, 8010782 <_lseek_r+0x1e>
 8010780:	602b      	str	r3, [r5, #0]
 8010782:	bd38      	pop	{r3, r4, r5, pc}
 8010784:	20002964 	.word	0x20002964

08010788 <__ascii_mbtowc>:
 8010788:	b082      	sub	sp, #8
 801078a:	b901      	cbnz	r1, 801078e <__ascii_mbtowc+0x6>
 801078c:	a901      	add	r1, sp, #4
 801078e:	b142      	cbz	r2, 80107a2 <__ascii_mbtowc+0x1a>
 8010790:	b14b      	cbz	r3, 80107a6 <__ascii_mbtowc+0x1e>
 8010792:	7813      	ldrb	r3, [r2, #0]
 8010794:	600b      	str	r3, [r1, #0]
 8010796:	7812      	ldrb	r2, [r2, #0]
 8010798:	1c10      	adds	r0, r2, #0
 801079a:	bf18      	it	ne
 801079c:	2001      	movne	r0, #1
 801079e:	b002      	add	sp, #8
 80107a0:	4770      	bx	lr
 80107a2:	4610      	mov	r0, r2
 80107a4:	e7fb      	b.n	801079e <__ascii_mbtowc+0x16>
 80107a6:	f06f 0001 	mvn.w	r0, #1
 80107aa:	e7f8      	b.n	801079e <__ascii_mbtowc+0x16>

080107ac <memmove>:
 80107ac:	4288      	cmp	r0, r1
 80107ae:	b510      	push	{r4, lr}
 80107b0:	eb01 0302 	add.w	r3, r1, r2
 80107b4:	d807      	bhi.n	80107c6 <memmove+0x1a>
 80107b6:	1e42      	subs	r2, r0, #1
 80107b8:	4299      	cmp	r1, r3
 80107ba:	d00a      	beq.n	80107d2 <memmove+0x26>
 80107bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80107c0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80107c4:	e7f8      	b.n	80107b8 <memmove+0xc>
 80107c6:	4283      	cmp	r3, r0
 80107c8:	d9f5      	bls.n	80107b6 <memmove+0xa>
 80107ca:	1881      	adds	r1, r0, r2
 80107cc:	1ad2      	subs	r2, r2, r3
 80107ce:	42d3      	cmn	r3, r2
 80107d0:	d100      	bne.n	80107d4 <memmove+0x28>
 80107d2:	bd10      	pop	{r4, pc}
 80107d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80107d8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80107dc:	e7f7      	b.n	80107ce <memmove+0x22>

080107de <__malloc_lock>:
 80107de:	4770      	bx	lr

080107e0 <__malloc_unlock>:
 80107e0:	4770      	bx	lr

080107e2 <_realloc_r>:
 80107e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107e4:	4607      	mov	r7, r0
 80107e6:	4614      	mov	r4, r2
 80107e8:	460e      	mov	r6, r1
 80107ea:	b921      	cbnz	r1, 80107f6 <_realloc_r+0x14>
 80107ec:	4611      	mov	r1, r2
 80107ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80107f2:	f7ff bd73 	b.w	80102dc <_malloc_r>
 80107f6:	b922      	cbnz	r2, 8010802 <_realloc_r+0x20>
 80107f8:	f7ff fd22 	bl	8010240 <_free_r>
 80107fc:	4625      	mov	r5, r4
 80107fe:	4628      	mov	r0, r5
 8010800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010802:	f000 f834 	bl	801086e <_malloc_usable_size_r>
 8010806:	42a0      	cmp	r0, r4
 8010808:	d20f      	bcs.n	801082a <_realloc_r+0x48>
 801080a:	4621      	mov	r1, r4
 801080c:	4638      	mov	r0, r7
 801080e:	f7ff fd65 	bl	80102dc <_malloc_r>
 8010812:	4605      	mov	r5, r0
 8010814:	2800      	cmp	r0, #0
 8010816:	d0f2      	beq.n	80107fe <_realloc_r+0x1c>
 8010818:	4631      	mov	r1, r6
 801081a:	4622      	mov	r2, r4
 801081c:	f7ff fa1c 	bl	800fc58 <memcpy>
 8010820:	4631      	mov	r1, r6
 8010822:	4638      	mov	r0, r7
 8010824:	f7ff fd0c 	bl	8010240 <_free_r>
 8010828:	e7e9      	b.n	80107fe <_realloc_r+0x1c>
 801082a:	4635      	mov	r5, r6
 801082c:	e7e7      	b.n	80107fe <_realloc_r+0x1c>
	...

08010830 <_read_r>:
 8010830:	b538      	push	{r3, r4, r5, lr}
 8010832:	4c07      	ldr	r4, [pc, #28]	; (8010850 <_read_r+0x20>)
 8010834:	4605      	mov	r5, r0
 8010836:	4608      	mov	r0, r1
 8010838:	4611      	mov	r1, r2
 801083a:	2200      	movs	r2, #0
 801083c:	6022      	str	r2, [r4, #0]
 801083e:	461a      	mov	r2, r3
 8010840:	f7f6 fe50 	bl	80074e4 <_read>
 8010844:	1c43      	adds	r3, r0, #1
 8010846:	d102      	bne.n	801084e <_read_r+0x1e>
 8010848:	6823      	ldr	r3, [r4, #0]
 801084a:	b103      	cbz	r3, 801084e <_read_r+0x1e>
 801084c:	602b      	str	r3, [r5, #0]
 801084e:	bd38      	pop	{r3, r4, r5, pc}
 8010850:	20002964 	.word	0x20002964

08010854 <__ascii_wctomb>:
 8010854:	b149      	cbz	r1, 801086a <__ascii_wctomb+0x16>
 8010856:	2aff      	cmp	r2, #255	; 0xff
 8010858:	bf85      	ittet	hi
 801085a:	238a      	movhi	r3, #138	; 0x8a
 801085c:	6003      	strhi	r3, [r0, #0]
 801085e:	700a      	strbls	r2, [r1, #0]
 8010860:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8010864:	bf98      	it	ls
 8010866:	2001      	movls	r0, #1
 8010868:	4770      	bx	lr
 801086a:	4608      	mov	r0, r1
 801086c:	4770      	bx	lr

0801086e <_malloc_usable_size_r>:
 801086e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010872:	1f18      	subs	r0, r3, #4
 8010874:	2b00      	cmp	r3, #0
 8010876:	bfbc      	itt	lt
 8010878:	580b      	ldrlt	r3, [r1, r0]
 801087a:	18c0      	addlt	r0, r0, r3
 801087c:	4770      	bx	lr
	...

08010880 <_init>:
 8010880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010882:	bf00      	nop
 8010884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010886:	bc08      	pop	{r3}
 8010888:	469e      	mov	lr, r3
 801088a:	4770      	bx	lr

0801088c <_fini>:
 801088c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801088e:	bf00      	nop
 8010890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010892:	bc08      	pop	{r3}
 8010894:	469e      	mov	lr, r3
 8010896:	4770      	bx	lr
