
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000889c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  08008a7c  08008a7c  00018a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e18  08008e18  00021fb8  2**0
                  CONTENTS
  4 .ARM          00000000  08008e18  08008e18  00021fb8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008e18  08008e18  00021fb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e18  08008e18  00018e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e1c  08008e1c  00018e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001fb8  20000000  08008e20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000474  20001fb8  0800add8  00021fb8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000242c  0800add8  0002242c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021fb8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fa78  00000000  00000000  00021fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003ff9  00000000  00000000  00041a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019b0  00000000  00000000  00045a60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001798  00000000  00000000  00047410  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002c08e  00000000  00000000  00048ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000181c8  00000000  00000000  00074c36  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00117da7  00000000  00000000  0008cdfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a4ba5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073a0  00000000  00000000  001a4c20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001fb8 	.word	0x20001fb8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008a64 	.word	0x08008a64

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001fbc 	.word	0x20001fbc
 800021c:	08008a64 	.word	0x08008a64

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b08c      	sub	sp, #48	; 0x30
 80002c4:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80002c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2220      	movs	r2, #32
 80002d6:	2100      	movs	r1, #0
 80002d8:	4618      	mov	r0, r3
 80002da:	f007 fa9b 	bl	8007814 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80002de:	4b32      	ldr	r3, [pc, #200]	; (80003a8 <MX_ADC1_Init+0xe8>)
 80002e0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002e6:	4b30      	ldr	r3, [pc, #192]	; (80003a8 <MX_ADC1_Init+0xe8>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002ec:	4b2e      	ldr	r3, [pc, #184]	; (80003a8 <MX_ADC1_Init+0xe8>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002f2:	4b2d      	ldr	r3, [pc, #180]	; (80003a8 <MX_ADC1_Init+0xe8>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80002f8:	4b2b      	ldr	r3, [pc, #172]	; (80003a8 <MX_ADC1_Init+0xe8>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002fe:	4b2a      	ldr	r3, [pc, #168]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000300:	2200      	movs	r2, #0
 8000302:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000304:	4b28      	ldr	r3, [pc, #160]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000306:	2204      	movs	r2, #4
 8000308:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800030a:	4b27      	ldr	r3, [pc, #156]	; (80003a8 <MX_ADC1_Init+0xe8>)
 800030c:	2200      	movs	r2, #0
 800030e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000310:	4b25      	ldr	r3, [pc, #148]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000312:	2201      	movs	r2, #1
 8000314:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000316:	4b24      	ldr	r3, [pc, #144]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000318:	2201      	movs	r2, #1
 800031a:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800031c:	4b22      	ldr	r3, [pc, #136]	; (80003a8 <MX_ADC1_Init+0xe8>)
 800031e:	2200      	movs	r2, #0
 8000320:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000324:	4b20      	ldr	r3, [pc, #128]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000326:	2200      	movs	r2, #0
 8000328:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800032a:	4b1f      	ldr	r3, [pc, #124]	; (80003a8 <MX_ADC1_Init+0xe8>)
 800032c:	2200      	movs	r2, #0
 800032e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000330:	4b1d      	ldr	r3, [pc, #116]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000332:	2201      	movs	r2, #1
 8000334:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000338:	4b1b      	ldr	r3, [pc, #108]	; (80003a8 <MX_ADC1_Init+0xe8>)
 800033a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800033e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000340:	4b19      	ldr	r3, [pc, #100]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000342:	2200      	movs	r2, #0
 8000344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000348:	4817      	ldr	r0, [pc, #92]	; (80003a8 <MX_ADC1_Init+0xe8>)
 800034a:	f001 fd61 	bl	8001e10 <HAL_ADC_Init>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000354:	f000 fd8d 	bl	8000e72 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000358:	2300      	movs	r3, #0
 800035a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800035c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000360:	4619      	mov	r1, r3
 8000362:	4811      	ldr	r0, [pc, #68]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000364:	f002 faea 	bl	800293c <HAL_ADCEx_MultiModeConfigChannel>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800036e:	f000 fd80 	bl	8000e72 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000372:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <MX_ADC1_Init+0xec>)
 8000374:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000376:	2306      	movs	r3, #6
 8000378:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800037a:	2300      	movs	r3, #0
 800037c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800037e:	237f      	movs	r3, #127	; 0x7f
 8000380:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000382:	2304      	movs	r3, #4
 8000384:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000386:	2300      	movs	r3, #0
 8000388:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	4619      	mov	r1, r3
 800038e:	4806      	ldr	r0, [pc, #24]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000390:	f001 fefe 	bl	8002190 <HAL_ADC_ConfigChannel>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800039a:	f000 fd6a 	bl	8000e72 <Error_Handler>
  }

}
 800039e:	bf00      	nop
 80003a0:	3730      	adds	r7, #48	; 0x30
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	20001ff8 	.word	0x20001ff8
 80003ac:	0c900008 	.word	0x0c900008

080003b0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b08a      	sub	sp, #40	; 0x28
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b8:	f107 0314 	add.w	r3, r7, #20
 80003bc:	2200      	movs	r2, #0
 80003be:	601a      	str	r2, [r3, #0]
 80003c0:	605a      	str	r2, [r3, #4]
 80003c2:	609a      	str	r2, [r3, #8]
 80003c4:	60da      	str	r2, [r3, #12]
 80003c6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80003d0:	d14f      	bne.n	8000472 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80003d2:	4b2a      	ldr	r3, [pc, #168]	; (800047c <HAL_ADC_MspInit+0xcc>)
 80003d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d6:	4a29      	ldr	r2, [pc, #164]	; (800047c <HAL_ADC_MspInit+0xcc>)
 80003d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003de:	4b27      	ldr	r3, [pc, #156]	; (800047c <HAL_ADC_MspInit+0xcc>)
 80003e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003e6:	613b      	str	r3, [r7, #16]
 80003e8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ea:	4b24      	ldr	r3, [pc, #144]	; (800047c <HAL_ADC_MspInit+0xcc>)
 80003ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ee:	4a23      	ldr	r2, [pc, #140]	; (800047c <HAL_ADC_MspInit+0xcc>)
 80003f0:	f043 0301 	orr.w	r3, r3, #1
 80003f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003f6:	4b21      	ldr	r3, [pc, #132]	; (800047c <HAL_ADC_MspInit+0xcc>)
 80003f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003fa:	f003 0301 	and.w	r3, r3, #1
 80003fe:	60fb      	str	r3, [r7, #12]
 8000400:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000402:	2304      	movs	r3, #4
 8000404:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000406:	2303      	movs	r3, #3
 8000408:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040a:	2300      	movs	r3, #0
 800040c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800040e:	f107 0314 	add.w	r3, r7, #20
 8000412:	4619      	mov	r1, r3
 8000414:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000418:	f003 fdac 	bl	8003f74 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800041c:	4b18      	ldr	r3, [pc, #96]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 800041e:	4a19      	ldr	r2, [pc, #100]	; (8000484 <HAL_ADC_MspInit+0xd4>)
 8000420:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000422:	4b17      	ldr	r3, [pc, #92]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 8000424:	2205      	movs	r2, #5
 8000426:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000428:	4b15      	ldr	r3, [pc, #84]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 800042a:	2200      	movs	r2, #0
 800042c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800042e:	4b14      	ldr	r3, [pc, #80]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 8000430:	2200      	movs	r2, #0
 8000432:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000434:	4b12      	ldr	r3, [pc, #72]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 8000436:	2280      	movs	r2, #128	; 0x80
 8000438:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800043a:	4b11      	ldr	r3, [pc, #68]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 800043c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000440:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000442:	4b0f      	ldr	r3, [pc, #60]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 8000444:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000448:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800044a:	4b0d      	ldr	r3, [pc, #52]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 800044c:	2220      	movs	r2, #32
 800044e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000450:	4b0b      	ldr	r3, [pc, #44]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 8000452:	2200      	movs	r2, #0
 8000454:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000456:	480a      	ldr	r0, [pc, #40]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 8000458:	f003 fb1a 	bl	8003a90 <HAL_DMA_Init>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8000462:	f000 fd06 	bl	8000e72 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4a05      	ldr	r2, [pc, #20]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 800046a:	655a      	str	r2, [r3, #84]	; 0x54
 800046c:	4a04      	ldr	r2, [pc, #16]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000472:	bf00      	nop
 8000474:	3728      	adds	r7, #40	; 0x28
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	40021000 	.word	0x40021000
 8000480:	20002064 	.word	0x20002064
 8000484:	40020008 	.word	0x40020008

08000488 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 800048c:	4b0f      	ldr	r3, [pc, #60]	; (80004cc <MX_COMP1_Init+0x44>)
 800048e:	4a10      	ldr	r2, [pc, #64]	; (80004d0 <MX_COMP1_Init+0x48>)
 8000490:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000492:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <MX_COMP1_Init+0x44>)
 8000494:	2200      	movs	r2, #0
 8000496:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8000498:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <MX_COMP1_Init+0x44>)
 800049a:	4a0e      	ldr	r2, [pc, #56]	; (80004d4 <MX_COMP1_Init+0x4c>)
 800049c:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800049e:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <MX_COMP1_Init+0x44>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80004a4:	4b09      	ldr	r3, [pc, #36]	; (80004cc <MX_COMP1_Init+0x44>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80004aa:	4b08      	ldr	r3, [pc, #32]	; (80004cc <MX_COMP1_Init+0x44>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <MX_COMP1_Init+0x44>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80004b6:	4805      	ldr	r0, [pc, #20]	; (80004cc <MX_COMP1_Init+0x44>)
 80004b8:	f002 fc94 	bl	8002de4 <HAL_COMP_Init>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 80004c2:	f000 fcd6 	bl	8000e72 <Error_Handler>
  }

}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	200020c4 	.word	0x200020c4
 80004d0:	40010200 	.word	0x40010200
 80004d4:	00800030 	.word	0x00800030

080004d8 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e0:	f107 030c 	add.w	r3, r7, #12
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]
 80004ec:	60da      	str	r2, [r3, #12]
 80004ee:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a0f      	ldr	r2, [pc, #60]	; (8000534 <HAL_COMP_MspInit+0x5c>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d118      	bne.n	800052c <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fa:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <HAL_COMP_MspInit+0x60>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	4a0e      	ldr	r2, [pc, #56]	; (8000538 <HAL_COMP_MspInit+0x60>)
 8000500:	f043 0301 	orr.w	r3, r3, #1
 8000504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000506:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <HAL_COMP_MspInit+0x60>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000512:	2302      	movs	r3, #2
 8000514:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000516:	2303      	movs	r3, #3
 8000518:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051a:	2300      	movs	r3, #0
 800051c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051e:	f107 030c 	add.w	r3, r7, #12
 8000522:	4619      	mov	r1, r3
 8000524:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000528:	f003 fd24 	bl	8003f74 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 800052c:	bf00      	nop
 800052e:	3720      	adds	r7, #32
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	40010200 	.word	0x40010200
 8000538:	40021000 	.word	0x40021000

0800053c <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b08c      	sub	sp, #48	; 0x30
 8000540:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000542:	463b      	mov	r3, r7
 8000544:	2230      	movs	r2, #48	; 0x30
 8000546:	2100      	movs	r1, #0
 8000548:	4618      	mov	r0, r3
 800054a:	f007 f963 	bl	8007814 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 800054e:	4b1d      	ldr	r3, [pc, #116]	; (80005c4 <MX_DAC1_Init+0x88>)
 8000550:	4a1d      	ldr	r2, [pc, #116]	; (80005c8 <MX_DAC1_Init+0x8c>)
 8000552:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000554:	481b      	ldr	r0, [pc, #108]	; (80005c4 <MX_DAC1_Init+0x88>)
 8000556:	f002 fee8 	bl	800332a <HAL_DAC_Init>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000560:	f000 fc87 	bl	8000e72 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000564:	2302      	movs	r3, #2
 8000566:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000568:	2300      	movs	r3, #0
 800056a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800056c:	2300      	movs	r3, #0
 800056e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000570:	2300      	movs	r3, #0
 8000572:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8000574:	2306      	movs	r3, #6
 8000576:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000578:	2300      	movs	r3, #0
 800057a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800057c:	2300      	movs	r3, #0
 800057e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000580:	2301      	movs	r3, #1
 8000582:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000584:	2300      	movs	r3, #0
 8000586:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000588:	463b      	mov	r3, r7
 800058a:	2200      	movs	r2, #0
 800058c:	4619      	mov	r1, r3
 800058e:	480d      	ldr	r0, [pc, #52]	; (80005c4 <MX_DAC1_Init+0x88>)
 8000590:	f003 f848 	bl	8003624 <HAL_DAC_ConfigChannel>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800059a:	f000 fc6a 	bl	8000e72 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80005a2:	2301      	movs	r3, #1
 80005a4:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80005a6:	463b      	mov	r3, r7
 80005a8:	2210      	movs	r2, #16
 80005aa:	4619      	mov	r1, r3
 80005ac:	4805      	ldr	r0, [pc, #20]	; (80005c4 <MX_DAC1_Init+0x88>)
 80005ae:	f003 f839 	bl	8003624 <HAL_DAC_ConfigChannel>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_DAC1_Init+0x80>
  {
    Error_Handler();
 80005b8:	f000 fc5b 	bl	8000e72 <Error_Handler>
  }

}
 80005bc:	bf00      	nop
 80005be:	3730      	adds	r7, #48	; 0x30
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	200020fc 	.word	0x200020fc
 80005c8:	50000800 	.word	0x50000800

080005cc <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08c      	sub	sp, #48	; 0x30
 80005d0:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80005d2:	463b      	mov	r3, r7
 80005d4:	2230      	movs	r2, #48	; 0x30
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f007 f91b 	bl	8007814 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 80005de:	4b16      	ldr	r3, [pc, #88]	; (8000638 <MX_DAC2_Init+0x6c>)
 80005e0:	4a16      	ldr	r2, [pc, #88]	; (800063c <MX_DAC2_Init+0x70>)
 80005e2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80005e4:	4814      	ldr	r0, [pc, #80]	; (8000638 <MX_DAC2_Init+0x6c>)
 80005e6:	f002 fea0 	bl	800332a <HAL_DAC_Init>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 80005f0:	f000 fc3f 	bl	8000e72 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80005f4:	2302      	movs	r3, #2
 80005f6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80005f8:	2300      	movs	r3, #0
 80005fa:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80005fc:	2300      	movs	r3, #0
 80005fe:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000600:	2300      	movs	r3, #0
 8000602:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8000604:	2306      	movs	r3, #6
 8000606:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000608:	2300      	movs	r3, #0
 800060a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800060c:	2300      	movs	r3, #0
 800060e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000610:	2301      	movs	r3, #1
 8000612:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000614:	2300      	movs	r3, #0
 8000616:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000618:	463b      	mov	r3, r7
 800061a:	2200      	movs	r2, #0
 800061c:	4619      	mov	r1, r3
 800061e:	4806      	ldr	r0, [pc, #24]	; (8000638 <MX_DAC2_Init+0x6c>)
 8000620:	f003 f800 	bl	8003624 <HAL_DAC_ConfigChannel>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 800062a:	f000 fc22 	bl	8000e72 <Error_Handler>
  }

}
 800062e:	bf00      	nop
 8000630:	3730      	adds	r7, #48	; 0x30
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	200020e8 	.word	0x200020e8
 800063c:	50000c00 	.word	0x50000c00

08000640 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08c      	sub	sp, #48	; 0x30
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a56      	ldr	r2, [pc, #344]	; (80007b8 <HAL_DAC_MspInit+0x178>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d150      	bne.n	8000704 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000662:	4b56      	ldr	r3, [pc, #344]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000666:	4a55      	ldr	r2, [pc, #340]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 8000668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800066c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800066e:	4b53      	ldr	r3, [pc, #332]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000676:	61bb      	str	r3, [r7, #24]
 8000678:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067a:	4b50      	ldr	r3, [pc, #320]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067e:	4a4f      	ldr	r2, [pc, #316]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000686:	4b4d      	ldr	r3, [pc, #308]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	617b      	str	r3, [r7, #20]
 8000690:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000692:	2330      	movs	r3, #48	; 0x30
 8000694:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000696:	2303      	movs	r3, #3
 8000698:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069e:	f107 031c 	add.w	r3, r7, #28
 80006a2:	4619      	mov	r1, r3
 80006a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a8:	f003 fc64 	bl	8003f74 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 80006ac:	4b44      	ldr	r3, [pc, #272]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006ae:	4a45      	ldr	r2, [pc, #276]	; (80007c4 <HAL_DAC_MspInit+0x184>)
 80006b0:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 80006b2:	4b43      	ldr	r3, [pc, #268]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006b4:	2206      	movs	r2, #6
 80006b6:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80006b8:	4b41      	ldr	r3, [pc, #260]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006ba:	2210      	movs	r2, #16
 80006bc:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006be:	4b40      	ldr	r3, [pc, #256]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80006c4:	4b3e      	ldr	r3, [pc, #248]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006c6:	2280      	movs	r2, #128	; 0x80
 80006c8:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80006ca:	4b3d      	ldr	r3, [pc, #244]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006d0:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80006d2:	4b3b      	ldr	r3, [pc, #236]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006d8:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80006da:	4b39      	ldr	r3, [pc, #228]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006dc:	2220      	movs	r2, #32
 80006de:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80006e0:	4b37      	ldr	r3, [pc, #220]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80006e6:	4836      	ldr	r0, [pc, #216]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006e8:	f003 f9d2 	bl	8003a90 <HAL_DMA_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80006f2:	f000 fbbe 	bl	8000e72 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4a31      	ldr	r2, [pc, #196]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	4a30      	ldr	r2, [pc, #192]	; (80007c0 <HAL_DAC_MspInit+0x180>)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 8000702:	e054      	b.n	80007ae <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a2f      	ldr	r2, [pc, #188]	; (80007c8 <HAL_DAC_MspInit+0x188>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d14f      	bne.n	80007ae <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 800070e:	4b2b      	ldr	r3, [pc, #172]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	4a2a      	ldr	r2, [pc, #168]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 8000714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071a:	4b28      	ldr	r3, [pc, #160]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000726:	4b25      	ldr	r3, [pc, #148]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	4a24      	ldr	r2, [pc, #144]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000732:	4b22      	ldr	r3, [pc, #136]	; (80007bc <HAL_DAC_MspInit+0x17c>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800073e:	2340      	movs	r3, #64	; 0x40
 8000740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000742:	2303      	movs	r3, #3
 8000744:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	4619      	mov	r1, r3
 8000750:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000754:	f003 fc0e 	bl	8003f74 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 8000758:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 800075a:	4a1d      	ldr	r2, [pc, #116]	; (80007d0 <HAL_DAC_MspInit+0x190>)
 800075c:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 800075e:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 8000760:	2229      	movs	r2, #41	; 0x29
 8000762:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000764:	4b19      	ldr	r3, [pc, #100]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 8000766:	2210      	movs	r2, #16
 8000768:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800076a:	4b18      	ldr	r3, [pc, #96]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 800076c:	2200      	movs	r2, #0
 800076e:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000770:	4b16      	ldr	r3, [pc, #88]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 8000772:	2280      	movs	r2, #128	; 0x80
 8000774:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000776:	4b15      	ldr	r3, [pc, #84]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 8000778:	f44f 7200 	mov.w	r2, #512	; 0x200
 800077c:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800077e:	4b13      	ldr	r3, [pc, #76]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 8000780:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000784:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 8000788:	2220      	movs	r2, #32
 800078a:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 800078e:	2200      	movs	r2, #0
 8000790:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8000792:	480e      	ldr	r0, [pc, #56]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 8000794:	f003 f97c 	bl	8003a90 <HAL_DMA_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <HAL_DAC_MspInit+0x162>
      Error_Handler();
 800079e:	f000 fb68 	bl	8000e72 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4a09      	ldr	r2, [pc, #36]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	4a08      	ldr	r2, [pc, #32]	; (80007cc <HAL_DAC_MspInit+0x18c>)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	6293      	str	r3, [r2, #40]	; 0x28
}
 80007ae:	bf00      	nop
 80007b0:	3730      	adds	r7, #48	; 0x30
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	50000800 	.word	0x50000800
 80007bc:	40021000 	.word	0x40021000
 80007c0:	20002110 	.word	0x20002110
 80007c4:	4002001c 	.word	0x4002001c
 80007c8:	50000c00 	.word	0x50000c00
 80007cc:	20002170 	.word	0x20002170
 80007d0:	40020030 	.word	0x40020030

080007d4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80007da:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <MX_DMA_Init+0x80>)
 80007dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007de:	4a1d      	ldr	r2, [pc, #116]	; (8000854 <MX_DMA_Init+0x80>)
 80007e0:	f043 0304 	orr.w	r3, r3, #4
 80007e4:	6493      	str	r3, [r2, #72]	; 0x48
 80007e6:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <MX_DMA_Init+0x80>)
 80007e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007ea:	f003 0304 	and.w	r3, r3, #4
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007f2:	4b18      	ldr	r3, [pc, #96]	; (8000854 <MX_DMA_Init+0x80>)
 80007f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007f6:	4a17      	ldr	r2, [pc, #92]	; (8000854 <MX_DMA_Init+0x80>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6493      	str	r3, [r2, #72]	; 0x48
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <MX_DMA_Init+0x80>)
 8000800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	2101      	movs	r1, #1
 800080e:	200b      	movs	r0, #11
 8000810:	f002 fd57 	bl	80032c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000814:	200b      	movs	r0, #11
 8000816:	f002 fd6e 	bl	80032f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	2100      	movs	r1, #0
 800081e:	200c      	movs	r0, #12
 8000820:	f002 fd4f 	bl	80032c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000824:	200c      	movs	r0, #12
 8000826:	f002 fd66 	bl	80032f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	2100      	movs	r1, #0
 800082e:	200d      	movs	r0, #13
 8000830:	f002 fd47 	bl	80032c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000834:	200d      	movs	r0, #13
 8000836:	f002 fd5e 	bl	80032f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800083a:	2200      	movs	r2, #0
 800083c:	2100      	movs	r1, #0
 800083e:	200e      	movs	r0, #14
 8000840:	f002 fd3f 	bl	80032c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000844:	200e      	movs	r0, #14
 8000846:	f002 fd56 	bl	80032f6 <HAL_NVIC_EnableIRQ>

}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40021000 	.word	0x40021000

08000858 <update_dc_bias_sweep>:
uint16_t dcbias = 0;
int dcbias_dir = 1;
int dcinverted = 0;

void update_dc_bias_sweep()
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	  // up=1, down=0
	  (dcbias_dir) ? (dcbias++) : (dcbias--);
 800085c:	4b20      	ldr	r3, [pc, #128]	; (80008e0 <update_dc_bias_sweep+0x88>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d006      	beq.n	8000872 <update_dc_bias_sweep+0x1a>
 8000864:	4b1f      	ldr	r3, [pc, #124]	; (80008e4 <update_dc_bias_sweep+0x8c>)
 8000866:	881b      	ldrh	r3, [r3, #0]
 8000868:	3301      	adds	r3, #1
 800086a:	b29a      	uxth	r2, r3
 800086c:	4b1d      	ldr	r3, [pc, #116]	; (80008e4 <update_dc_bias_sweep+0x8c>)
 800086e:	801a      	strh	r2, [r3, #0]
 8000870:	e005      	b.n	800087e <update_dc_bias_sweep+0x26>
 8000872:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <update_dc_bias_sweep+0x8c>)
 8000874:	881b      	ldrh	r3, [r3, #0]
 8000876:	3b01      	subs	r3, #1
 8000878:	b29a      	uxth	r2, r3
 800087a:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <update_dc_bias_sweep+0x8c>)
 800087c:	801a      	strh	r2, [r3, #0]

	  // invert the bias signal at zero crossing
	  if(dcbias < 1) {
 800087e:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <update_dc_bias_sweep+0x8c>)
 8000880:	881b      	ldrh	r3, [r3, #0]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d10a      	bne.n	800089c <update_dc_bias_sweep+0x44>
		(dcinverted) ? (dcinverted=0) : (dcinverted=1);
 8000886:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <update_dc_bias_sweep+0x90>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d003      	beq.n	8000896 <update_dc_bias_sweep+0x3e>
 800088e:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <update_dc_bias_sweep+0x90>)
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	e002      	b.n	800089c <update_dc_bias_sweep+0x44>
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <update_dc_bias_sweep+0x90>)
 8000898:	2201      	movs	r2, #1
 800089a:	601a      	str	r2, [r3, #0]
	  }

	  // change direction if dac limits are reached
	  if(dcbias < 1) 	{ dcbias_dir = 1; }
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <update_dc_bias_sweep+0x8c>)
 800089e:	881b      	ldrh	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d102      	bne.n	80008aa <update_dc_bias_sweep+0x52>
 80008a4:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <update_dc_bias_sweep+0x88>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	601a      	str	r2, [r3, #0]
	  if(dcbias > 4095) { dcbias_dir = 0; }
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <update_dc_bias_sweep+0x8c>)
 80008ac:	881b      	ldrh	r3, [r3, #0]
 80008ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008b2:	d302      	bcc.n	80008ba <update_dc_bias_sweep+0x62>
 80008b4:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <update_dc_bias_sweep+0x88>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]


	  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, dcinverted);
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <update_dc_bias_sweep+0x90>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	461a      	mov	r2, r3
 80008c2:	2108      	movs	r1, #8
 80008c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c8:	f003 fcee 	bl	80042a8 <HAL_GPIO_WritePin>
	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, dcbias);
 80008cc:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <update_dc_bias_sweep+0x8c>)
 80008ce:	881b      	ldrh	r3, [r3, #0]
 80008d0:	2200      	movs	r2, #0
 80008d2:	2110      	movs	r1, #16
 80008d4:	4805      	ldr	r0, [pc, #20]	; (80008ec <update_dc_bias_sweep+0x94>)
 80008d6:	f002 fe5f 	bl	8003598 <HAL_DAC_SetValue>
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000000 	.word	0x20000000
 80008e4:	20001fd4 	.word	0x20001fd4
 80008e8:	20001fd8 	.word	0x20001fd8
 80008ec:	200020fc 	.word	0x200020fc

080008f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08a      	sub	sp, #40	; 0x28
 80008f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
 8000904:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000906:	4b64      	ldr	r3, [pc, #400]	; (8000a98 <MX_GPIO_Init+0x1a8>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090a:	4a63      	ldr	r2, [pc, #396]	; (8000a98 <MX_GPIO_Init+0x1a8>)
 800090c:	f043 0304 	orr.w	r3, r3, #4
 8000910:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000912:	4b61      	ldr	r3, [pc, #388]	; (8000a98 <MX_GPIO_Init+0x1a8>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	f003 0304 	and.w	r3, r3, #4
 800091a:	613b      	str	r3, [r7, #16]
 800091c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800091e:	4b5e      	ldr	r3, [pc, #376]	; (8000a98 <MX_GPIO_Init+0x1a8>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	4a5d      	ldr	r2, [pc, #372]	; (8000a98 <MX_GPIO_Init+0x1a8>)
 8000924:	f043 0320 	orr.w	r3, r3, #32
 8000928:	64d3      	str	r3, [r2, #76]	; 0x4c
 800092a:	4b5b      	ldr	r3, [pc, #364]	; (8000a98 <MX_GPIO_Init+0x1a8>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	f003 0320 	and.w	r3, r3, #32
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	4b58      	ldr	r3, [pc, #352]	; (8000a98 <MX_GPIO_Init+0x1a8>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	4a57      	ldr	r2, [pc, #348]	; (8000a98 <MX_GPIO_Init+0x1a8>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000942:	4b55      	ldr	r3, [pc, #340]	; (8000a98 <MX_GPIO_Init+0x1a8>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094e:	4b52      	ldr	r3, [pc, #328]	; (8000a98 <MX_GPIO_Init+0x1a8>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	4a51      	ldr	r2, [pc, #324]	; (8000a98 <MX_GPIO_Init+0x1a8>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095a:	4b4f      	ldr	r3, [pc, #316]	; (8000a98 <MX_GPIO_Init+0x1a8>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TRIGMODE_Pin|SG2_Pin|SG1_Pin|TRIGMUX1_Pin 
 8000966:	2200      	movs	r2, #0
 8000968:	f44f 714e 	mov.w	r1, #824	; 0x338
 800096c:	484b      	ldr	r0, [pc, #300]	; (8000a9c <MX_GPIO_Init+0x1ac>)
 800096e:	f003 fc9b 	bl	80042a8 <HAL_GPIO_WritePin>
                          |TRIGMUX2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	2108      	movs	r1, #8
 8000976:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097a:	f003 fc95 	bl	80042a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SG0_Pin|DC_Pin|CS_Pin|RST_Pin, GPIO_PIN_RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	f240 21c1 	movw	r1, #705	; 0x2c1
 8000984:	4846      	ldr	r0, [pc, #280]	; (8000aa0 <MX_GPIO_Init+0x1b0>)
 8000986:	f003 fc8f 	bl	80042a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = BTN1_EXTI14_Pin|BTN2_EXTI15_Pin|ENC_EXTI2_Pin;
 800098a:	f24c 0304 	movw	r3, #49156	; 0xc004
 800098e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000990:	4b44      	ldr	r3, [pc, #272]	; (8000aa4 <MX_GPIO_Init+0x1b4>)
 8000992:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000994:	2301      	movs	r3, #1
 8000996:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	4619      	mov	r1, r3
 800099e:	483f      	ldr	r0, [pc, #252]	; (8000a9c <MX_GPIO_Init+0x1ac>)
 80009a0:	f003 fae8 	bl	8003f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = BTN3_EXTI0_Pin|BTN4_EXTI1_Pin;
 80009a4:	2303      	movs	r3, #3
 80009a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009a8:	4b3e      	ldr	r3, [pc, #248]	; (8000aa4 <MX_GPIO_Init+0x1b4>)
 80009aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ac:	2301      	movs	r3, #1
 80009ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	4619      	mov	r1, r3
 80009b6:	483c      	ldr	r0, [pc, #240]	; (8000aa8 <MX_GPIO_Init+0x1b8>)
 80009b8:	f003 fadc 	bl	8003f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 80009bc:	2308      	movs	r3, #8
 80009be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c0:	2301      	movs	r3, #1
 80009c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009c4:	2302      	movs	r3, #2
 80009c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	4619      	mov	r1, r3
 80009d2:	4832      	ldr	r0, [pc, #200]	; (8000a9c <MX_GPIO_Init+0x1ac>)
 80009d4:	f003 face 	bl	8003f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 80009d8:	2308      	movs	r3, #8
 80009da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009dc:	2301      	movs	r3, #1
 80009de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	4619      	mov	r1, r3
 80009ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f2:	f003 fabf 	bl	8003f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SG2_Pin|SG1_Pin|TRIGMUX1_Pin|TRIGMUX2_Pin;
 80009f6:	f44f 734c 	mov.w	r3, #816	; 0x330
 80009fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fc:	2301      	movs	r3, #1
 80009fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2300      	movs	r3, #0
 8000a06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4823      	ldr	r0, [pc, #140]	; (8000a9c <MX_GPIO_Init+0x1ac>)
 8000a10:	f003 fab0 	bl	8003f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SG0_Pin;
 8000a14:	2301      	movs	r3, #1
 8000a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	2300      	movs	r3, #0
 8000a22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	4619      	mov	r1, r3
 8000a2a:	481d      	ldr	r0, [pc, #116]	; (8000aa0 <MX_GPIO_Init+0x1b0>)
 8000a2c:	f003 faa2 	bl	8003f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DC_Pin|CS_Pin|RST_Pin;
 8000a30:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000a34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a36:	2301      	movs	r3, #1
 8000a38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	4619      	mov	r1, r3
 8000a48:	4815      	ldr	r0, [pc, #84]	; (8000aa0 <MX_GPIO_Init+0x1b0>)
 8000a4a:	f003 fa93 	bl	8003f74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2100      	movs	r1, #0
 8000a52:	2006      	movs	r0, #6
 8000a54:	f002 fc35 	bl	80032c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a58:	2006      	movs	r0, #6
 8000a5a:	f002 fc4c 	bl	80032f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2100      	movs	r1, #0
 8000a62:	2007      	movs	r0, #7
 8000a64:	f002 fc2d 	bl	80032c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000a68:	2007      	movs	r0, #7
 8000a6a:	f002 fc44 	bl	80032f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2100      	movs	r1, #0
 8000a72:	2008      	movs	r0, #8
 8000a74:	f002 fc25 	bl	80032c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000a78:	2008      	movs	r0, #8
 8000a7a:	f002 fc3c 	bl	80032f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2100      	movs	r1, #0
 8000a82:	2028      	movs	r0, #40	; 0x28
 8000a84:	f002 fc1d 	bl	80032c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a88:	2028      	movs	r0, #40	; 0x28
 8000a8a:	f002 fc34 	bl	80032f6 <HAL_NVIC_EnableIRQ>

}
 8000a8e:	bf00      	nop
 8000a90:	3728      	adds	r7, #40	; 0x28
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	48000800 	.word	0x48000800
 8000aa0:	48000400 	.word	0x48000400
 8000aa4:	10210000 	.word	0x10210000
 8000aa8:	48001400 	.word	0x48001400

08000aac <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ab4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ab8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000abc:	f003 0301 	and.w	r3, r3, #1
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d013      	beq.n	8000aec <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000ac4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ac8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000acc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d00b      	beq.n	8000aec <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ad4:	e000      	b.n	8000ad8 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000ad6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ad8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d0f9      	beq.n	8000ad6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000ae2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ae6:	687a      	ldr	r2, [r7, #4]
 8000ae8:	b2d2      	uxtb	r2, r2
 8000aea:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000aec:	687b      	ldr	r3, [r7, #4]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b086      	sub	sp, #24
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	60f8      	str	r0, [r7, #12]
 8000b02:	60b9      	str	r1, [r7, #8]
 8000b04:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]
 8000b0e:	e009      	b.n	8000b24 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	1c5a      	adds	r2, r3, #1
 8000b14:	60ba      	str	r2, [r7, #8]
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff ffc7 	bl	8000aac <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	3301      	adds	r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	697a      	ldr	r2, [r7, #20]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	dbf1      	blt.n	8000b10 <_write+0x16>
  return len;
 8000b2c:	687b      	ldr	r3, [r7, #4]
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <update_tft>:

void update_tft()
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	; 0x28
 8000b3c:	af02      	add	r7, sp, #8
	  //----------------------------------------------------------FILLED CIRCLES EXAMPLE


				uint32_t random_num = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	617b      	str	r3, [r7, #20]
	  			uint16_t xr = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	83fb      	strh	r3, [r7, #30]
	  			uint16_t yr = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	83bb      	strh	r3, [r7, #28]
	  			uint16_t radiusr = 0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	837b      	strh	r3, [r7, #26]
	  			uint16_t colourr = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	833b      	strh	r3, [r7, #24]
	  			HAL_RNG_GenerateRandomNumber(&hrng, &random_num);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	482c      	ldr	r0, [pc, #176]	; (8000c0c <update_tft+0xd4>)
 8000b5a:	f004 fc0e 	bl	800537a <HAL_RNG_GenerateRandomNumber>
	  			xr = random_num;
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	83fb      	strh	r3, [r7, #30]
	  			HAL_RNG_GenerateRandomNumber(&hrng, &random_num);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	4828      	ldr	r0, [pc, #160]	; (8000c0c <update_tft+0xd4>)
 8000b6a:	f004 fc06 	bl	800537a <HAL_RNG_GenerateRandomNumber>
	  			yr = random_num;
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	83bb      	strh	r3, [r7, #28]
	  			HAL_RNG_GenerateRandomNumber(&hrng, &random_num);
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4619      	mov	r1, r3
 8000b78:	4824      	ldr	r0, [pc, #144]	; (8000c0c <update_tft+0xd4>)
 8000b7a:	f004 fbfe 	bl	800537a <HAL_RNG_GenerateRandomNumber>
	  			radiusr = random_num;
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	837b      	strh	r3, [r7, #26]
	  			HAL_RNG_GenerateRandomNumber(&hrng, &random_num);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	4820      	ldr	r0, [pc, #128]	; (8000c0c <update_tft+0xd4>)
 8000b8a:	f004 fbf6 	bl	800537a <HAL_RNG_GenerateRandomNumber>
	  			colourr = random_num;
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	833b      	strh	r3, [r7, #24]

	  			xr &= 0x01FF;
 8000b92:	8bfb      	ldrh	r3, [r7, #30]
 8000b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b98:	83fb      	strh	r3, [r7, #30]
	  			yr &= 0x01FF;
 8000b9a:	8bbb      	ldrh	r3, [r7, #28]
 8000b9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000ba0:	83bb      	strh	r3, [r7, #28]
	  			radiusr &= 0x001F;
 8000ba2:	8b7b      	ldrh	r3, [r7, #26]
 8000ba4:	f003 031f 	and.w	r3, r3, #31
 8000ba8:	837b      	strh	r3, [r7, #26]
	  			//ili9341_drawpixel(xr, yr, WHITE);
	  			ILI9341_Draw_Filled_Circle(xr, yr, radiusr/2, colourr);
 8000baa:	8b7b      	ldrh	r3, [r7, #26]
 8000bac:	085b      	lsrs	r3, r3, #1
 8000bae:	b29a      	uxth	r2, r3
 8000bb0:	8b3b      	ldrh	r3, [r7, #24]
 8000bb2:	8bb9      	ldrh	r1, [r7, #28]
 8000bb4:	8bf8      	ldrh	r0, [r7, #30]
 8000bb6:	f006 f8a3 	bl	8006d00 <ILI9341_Draw_Filled_Circle>

	  			char enc_buff[13] = "";
 8000bba:	2300      	movs	r3, #0
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	f107 0308 	add.w	r3, r7, #8
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	721a      	strb	r2, [r3, #8]
	  			snprintf(enc_buff, sizeof(enc_buff), "%d\n", new_enc_value);
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <update_tft+0xd8>)
 8000bcc:	881b      	ldrh	r3, [r3, #0]
 8000bce:	1d38      	adds	r0, r7, #4
 8000bd0:	4a10      	ldr	r2, [pc, #64]	; (8000c14 <update_tft+0xdc>)
 8000bd2:	210d      	movs	r1, #13
 8000bd4:	f006 fea2 	bl	800791c <sniprintf>
	  			ILI9341_Draw_Text(enc_buff, 10, 20, BLACK, 5, WHITE);
 8000bd8:	1d38      	adds	r0, r7, #4
 8000bda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bde:	9301      	str	r3, [sp, #4]
 8000be0:	2305      	movs	r3, #5
 8000be2:	9300      	str	r3, [sp, #0]
 8000be4:	2300      	movs	r3, #0
 8000be6:	2214      	movs	r2, #20
 8000be8:	210a      	movs	r1, #10
 8000bea:	f006 f9ab 	bl	8006f44 <ILI9341_Draw_Text>

	  			ILI9341_Draw_Text(control_pressed, 10, 60, BLACK, 5, WHITE);
 8000bee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bf2:	9301      	str	r3, [sp, #4]
 8000bf4:	2305      	movs	r3, #5
 8000bf6:	9300      	str	r3, [sp, #0]
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	223c      	movs	r2, #60	; 0x3c
 8000bfc:	210a      	movs	r1, #10
 8000bfe:	4806      	ldr	r0, [pc, #24]	; (8000c18 <update_tft+0xe0>)
 8000c00:	f006 f9a0 	bl	8006f44 <ILI9341_Draw_Text>
	  		//HAL_Delay(1);
}
 8000c04:	bf00      	nop
 8000c06:	3720      	adds	r7, #32
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	200021d0 	.word	0x200021d0
 8000c10:	20001fde 	.word	0x20001fde
 8000c14:	08008a7c 	.word	0x08008a7c
 8000c18:	20001fec 	.word	0x20001fec

08000c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c22:	f000 fea0 	bl	8001966 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c26:	f000 f8b5 	bl	8000d94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c2a:	f7ff fe61 	bl	80008f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c2e:	f7ff fdd1 	bl	80007d4 <MX_DMA_Init>
  MX_DAC1_Init();
 8000c32:	f7ff fc83 	bl	800053c <MX_DAC1_Init>
  MX_DAC2_Init();
 8000c36:	f7ff fcc9 	bl	80005cc <MX_DAC2_Init>
  MX_ADC1_Init();
 8000c3a:	f7ff fb41 	bl	80002c0 <MX_ADC1_Init>
  MX_COMP1_Init();
 8000c3e:	f7ff fc23 	bl	8000488 <MX_COMP1_Init>
  MX_TIM2_Init();
 8000c42:	f000 fc61 	bl	8001508 <MX_TIM2_Init>
  MX_TIM17_Init();
 8000c46:	f000 fd57 	bl	80016f8 <MX_TIM17_Init>
  MX_SPI3_Init();
 8000c4a:	f000 f94f 	bl	8000eec <MX_SPI3_Init>
  MX_RNG_Init();
 8000c4e:	f000 f917 	bl	8000e80 <MX_RNG_Init>
  MX_TIM1_Init();
 8000c52:	f000 fbe9 	bl	8001428 <MX_TIM1_Init>
  MX_TIM8_Init();
 8000c56:	f000 fcc1 	bl	80015dc <MX_TIM8_Init>
  MX_TIM16_Init();
 8000c5a:	f000 fd27 	bl	80016ac <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  // main signal function output (external)
  HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8000c5e:	2300      	movs	r3, #0
 8000c60:	9300      	str	r3, [sp, #0]
 8000c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c66:	4a3f      	ldr	r2, [pc, #252]	; (8000d64 <main+0x148>)
 8000c68:	2100      	movs	r1, #0
 8000c6a:	483f      	ldr	r0, [pc, #252]	; (8000d68 <main+0x14c>)
 8000c6c:	f002 fbd2 	bl	8003414 <HAL_DAC_Start_DMA>
  //TIM8->ARR = sin1_max_arr;

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 8000c70:	2110      	movs	r1, #16
 8000c72:	483d      	ldr	r0, [pc, #244]	; (8000d68 <main+0x14c>)
 8000c74:	f002 fb7b 	bl	800336e <HAL_DAC_Start>
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
  HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, triangle_data_table, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 8000c78:	2300      	movs	r3, #0
 8000c7a:	9300      	str	r3, [sp, #0]
 8000c7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c80:	4a3a      	ldr	r2, [pc, #232]	; (8000d6c <main+0x150>)
 8000c82:	2100      	movs	r1, #0
 8000c84:	483a      	ldr	r0, [pc, #232]	; (8000d70 <main+0x154>)
 8000c86:	f002 fbc5 	bl	8003414 <HAL_DAC_Start_DMA>

  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);
#ifndef DISABLE_ALL_TIMERS
  // single clock to run all DAC channels. TODO add independent clocks
  HAL_TIM_Base_Start(&htim8);
 8000c8a:	483a      	ldr	r0, [pc, #232]	; (8000d74 <main+0x158>)
 8000c8c:	f005 f8bc 	bl	8005e08 <HAL_TIM_Base_Start>
#endif //DISABLE_ALL_TIMERS

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 8000c90:	2201      	movs	r2, #1
 8000c92:	2108      	movs	r1, #8
 8000c94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c98:	f003 fb06 	bl	80042a8 <HAL_GPIO_WritePin>

  // PGA gain
  HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	4835      	ldr	r0, [pc, #212]	; (8000d78 <main+0x15c>)
 8000ca2:	f003 fb01 	bl	80042a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	2120      	movs	r1, #32
 8000caa:	4834      	ldr	r0, [pc, #208]	; (8000d7c <main+0x160>)
 8000cac:	f003 fafc 	bl	80042a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	2110      	movs	r1, #16
 8000cb4:	4831      	ldr	r0, [pc, #196]	; (8000d7c <main+0x160>)
 8000cb6:	f003 faf7 	bl	80042a8 <HAL_GPIO_WritePin>

#ifndef DISABLE_ALL_TIMERS
  // start test routine (update_dc_bias_sweep())
  HAL_TIM_Base_Start_IT(&htim17);
 8000cba:	4831      	ldr	r0, [pc, #196]	; (8000d80 <main+0x164>)
 8000cbc:	f005 f8d2 	bl	8005e64 <HAL_TIM_Base_Start_IT>
#endif	//DISABLE_ALL_TIMERS


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cc6:	482d      	ldr	r0, [pc, #180]	; (8000d7c <main+0x160>)
 8000cc8:	f003 faee 	bl	80042a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cd2:	482a      	ldr	r0, [pc, #168]	; (8000d7c <main+0x160>)
 8000cd4:	f003 fae8 	bl	80042a8 <HAL_GPIO_WritePin>

#ifdef TIM_TRIGGER_MODE
  // input capture on in TIM2 slave-mode TF1FP1

  // set HW switch to direct ext. trigger input to TIM pin
  HAL_GPIO_WritePin(TRIGMODE_GPIO_Port, TRIGMODE_Pin, GPIO_PIN_SET);
 8000cd8:	2201      	movs	r2, #1
 8000cda:	2108      	movs	r1, #8
 8000cdc:	4827      	ldr	r0, [pc, #156]	; (8000d7c <main+0x160>)
 8000cde:	f003 fae3 	bl	80042a8 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);	// TS5A3357 Pin6
  //HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); // TS5A3357 Pin5

  // clear slave mode select reg
  TIM2->SMCR &= ~(TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2);
 8000ce2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cec:	f023 0307 	bic.w	r3, r3, #7
 8000cf0:	6093      	str	r3, [r2, #8]

  // slave mode
  //TIM2->SMCR |= TIM_SMCR_SMS_2;						// SLAVE MODE: RESET
  TIM2->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_2;	// SLAVE MODE: GATED
 8000cf2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cfc:	f043 0305 	orr.w	r3, r3, #5
 8000d00:	6093      	str	r3, [r2, #8]
  //TIM2->SMCR |= TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;	// SLAVE MODE: TRIGGER

#ifndef DISABLE_ALL_TIMERS
  HAL_TIM_Base_Start_IT(&htim2);
 8000d02:	4820      	ldr	r0, [pc, #128]	; (8000d84 <main+0x168>)
 8000d04:	f005 f8ae 	bl	8005e64 <HAL_TIM_Base_Start_IT>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);
 8000d08:	481f      	ldr	r0, [pc, #124]	; (8000d88 <main+0x16c>)
 8000d0a:	f005 f87d 	bl	8005e08 <HAL_TIM_Base_Start>
  //HAL_TIM_Base_Start_IT(&htim16);
#endif	//DISABLE_ALL_TIMERS

  // TFT lib enable
  ILI9341_Init();
 8000d0e:	f006 fa67 	bl	80071e0 <ILI9341_Init>


	ILI9341_Fill_Screen(WHITE);
 8000d12:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d16:	f006 fc07 	bl	8007528 <ILI9341_Fill_Screen>
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000d1a:	2003      	movs	r0, #3
 8000d1c:	f006 fa06 	bl	800712c <ILI9341_Set_Rotation>
	ILI9341_Draw_Text("Randomly placed and sized", 10, 10, BLACK, 1, WHITE);
 8000d20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d24:	9301      	str	r3, [sp, #4]
 8000d26:	2301      	movs	r3, #1
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	220a      	movs	r2, #10
 8000d2e:	210a      	movs	r1, #10
 8000d30:	4816      	ldr	r0, [pc, #88]	; (8000d8c <main+0x170>)
 8000d32:	f006 f907 	bl	8006f44 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("Filled Circles", 10, 20, BLACK, 1, WHITE);
 8000d36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d3a:	9301      	str	r3, [sp, #4]
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	2300      	movs	r3, #0
 8000d42:	2214      	movs	r2, #20
 8000d44:	210a      	movs	r1, #10
 8000d46:	4812      	ldr	r0, [pc, #72]	; (8000d90 <main+0x174>)
 8000d48:	f006 f8fc 	bl	8006f44 <ILI9341_Draw_Text>
	HAL_Delay(2000);
 8000d4c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d50:	f000 fe7a 	bl	8001a48 <HAL_Delay>
	ILI9341_Fill_Screen(WHITE);
 8000d54:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d58:	f006 fbe6 	bl	8007528 <ILI9341_Fill_Screen>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	//printf("TFT\n");
	update_tft();
 8000d5c:	f7ff feec 	bl	8000b38 <update_tft>
 8000d60:	e7fc      	b.n	8000d5c <main+0x140>
 8000d62:	bf00      	nop
 8000d64:	20000004 	.word	0x20000004
 8000d68:	200020fc 	.word	0x200020fc
 8000d6c:	20000fa4 	.word	0x20000fa4
 8000d70:	200020e8 	.word	0x200020e8
 8000d74:	200022a8 	.word	0x200022a8
 8000d78:	48000400 	.word	0x48000400
 8000d7c:	48000800 	.word	0x48000800
 8000d80:	200022f4 	.word	0x200022f4
 8000d84:	2000238c 	.word	0x2000238c
 8000d88:	20002340 	.word	0x20002340
 8000d8c:	08008a80 	.word	0x08008a80
 8000d90:	08008a9c 	.word	0x08008a9c

08000d94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b0a8      	sub	sp, #160	; 0xa0
 8000d98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d9a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000d9e:	2238      	movs	r2, #56	; 0x38
 8000da0:	2100      	movs	r1, #0
 8000da2:	4618      	mov	r0, r3
 8000da4:	f006 fd36 	bl	8007814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000db8:	463b      	mov	r3, r7
 8000dba:	2254      	movs	r2, #84	; 0x54
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f006 fd28 	bl	8007814 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	f003 faab 	bl	8004320 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000dca:	2322      	movs	r3, #34	; 0x22
 8000dcc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dd2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dd4:	2340      	movs	r3, #64	; 0x40
 8000dd6:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dde:	2302      	movs	r3, #2
 8000de0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000de4:	2302      	movs	r3, #2
 8000de6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000dea:	2302      	movs	r3, #2
 8000dec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8000df0:	232a      	movs	r3, #42	; 0x2a
 8000df2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000df6:	2302      	movs	r3, #2
 8000df8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000dfc:	2304      	movs	r3, #4
 8000dfe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e02:	2302      	movs	r3, #2
 8000e04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e08:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f003 fb2b 	bl	8004468 <HAL_RCC_OscConfig>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000e18:	f000 f82b 	bl	8000e72 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e1c:	230f      	movs	r3, #15
 8000e1e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e20:	2303      	movs	r3, #3
 8000e22:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e24:	2300      	movs	r3, #0
 8000e26:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e28:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000e2c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8000e32:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e36:	2108      	movs	r1, #8
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f003 fe2d 	bl	8004a98 <HAL_RCC_ClockConfig>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000e44:	f000 f815 	bl	8000e72 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 8000e48:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000e4c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000e52:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000e56:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e58:	463b      	mov	r3, r7
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f004 f80c 	bl	8004e78 <HAL_RCCEx_PeriphCLKConfig>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000e66:	f000 f804 	bl	8000e72 <Error_Handler>
  }
}
 8000e6a:	bf00      	nop
 8000e6c:	37a0      	adds	r7, #160	; 0xa0
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e76:	bf00      	nop
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0

  hrng.Instance = RNG;
 8000e84:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <MX_RNG_Init+0x24>)
 8000e86:	4a08      	ldr	r2, [pc, #32]	; (8000ea8 <MX_RNG_Init+0x28>)
 8000e88:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <MX_RNG_Init+0x24>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000e90:	4804      	ldr	r0, [pc, #16]	; (8000ea4 <MX_RNG_Init+0x24>)
 8000e92:	f004 fa3d 	bl	8005310 <HAL_RNG_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000e9c:	f7ff ffe9 	bl	8000e72 <Error_Handler>
  }

}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	200021d0 	.word	0x200021d0
 8000ea8:	50060800 	.word	0x50060800

08000eac <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <HAL_RNG_MspInit+0x38>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d10b      	bne.n	8000ed6 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <HAL_RNG_MspInit+0x3c>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec2:	4a09      	ldr	r2, [pc, #36]	; (8000ee8 <HAL_RNG_MspInit+0x3c>)
 8000ec4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ec8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eca:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <HAL_RNG_MspInit+0x3c>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ece:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8000ed6:	bf00      	nop
 8000ed8:	3714      	adds	r7, #20
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	50060800 	.word	0x50060800
 8000ee8:	40021000 	.word	0x40021000

08000eec <MX_SPI3_Init>:
SPI_HandleTypeDef hspi3;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8000ef0:	4b1b      	ldr	r3, [pc, #108]	; (8000f60 <MX_SPI3_Init+0x74>)
 8000ef2:	4a1c      	ldr	r2, [pc, #112]	; (8000f64 <MX_SPI3_Init+0x78>)
 8000ef4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000ef6:	4b1a      	ldr	r3, [pc, #104]	; (8000f60 <MX_SPI3_Init+0x74>)
 8000ef8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000efc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000efe:	4b18      	ldr	r3, [pc, #96]	; (8000f60 <MX_SPI3_Init+0x74>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f04:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <MX_SPI3_Init+0x74>)
 8000f06:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f0a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f0c:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <MX_SPI3_Init+0x74>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f12:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <MX_SPI3_Init+0x74>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <MX_SPI3_Init+0x74>)
 8000f1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f1e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f20:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <MX_SPI3_Init+0x74>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f26:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <MX_SPI3_Init+0x74>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <MX_SPI3_Init+0x74>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f32:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <MX_SPI3_Init+0x74>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000f38:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <MX_SPI3_Init+0x74>)
 8000f3a:	2207      	movs	r2, #7
 8000f3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f3e:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <MX_SPI3_Init+0x74>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <MX_SPI3_Init+0x74>)
 8000f46:	2208      	movs	r2, #8
 8000f48:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000f4a:	4805      	ldr	r0, [pc, #20]	; (8000f60 <MX_SPI3_Init+0x74>)
 8000f4c:	f004 fa64 	bl	8005418 <HAL_SPI_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000f56:	f7ff ff8c 	bl	8000e72 <Error_Handler>
  }

}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	200021e4 	.word	0x200021e4
 8000f64:	40003c00 	.word	0x40003c00

08000f68 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	; 0x28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a2c      	ldr	r2, [pc, #176]	; (8001038 <HAL_SPI_MspInit+0xd0>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d151      	bne.n	800102e <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f8a:	4b2c      	ldr	r3, [pc, #176]	; (800103c <HAL_SPI_MspInit+0xd4>)
 8000f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f8e:	4a2b      	ldr	r2, [pc, #172]	; (800103c <HAL_SPI_MspInit+0xd4>)
 8000f90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f94:	6593      	str	r3, [r2, #88]	; 0x58
 8000f96:	4b29      	ldr	r3, [pc, #164]	; (800103c <HAL_SPI_MspInit+0xd4>)
 8000f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa2:	4b26      	ldr	r3, [pc, #152]	; (800103c <HAL_SPI_MspInit+0xd4>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa6:	4a25      	ldr	r2, [pc, #148]	; (800103c <HAL_SPI_MspInit+0xd4>)
 8000fa8:	f043 0304 	orr.w	r3, r3, #4
 8000fac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fae:	4b23      	ldr	r3, [pc, #140]	; (800103c <HAL_SPI_MspInit+0xd4>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb2:	f003 0304 	and.w	r3, r3, #4
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000fba:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fcc:	2306      	movs	r3, #6
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	481a      	ldr	r0, [pc, #104]	; (8001040 <HAL_SPI_MspInit+0xd8>)
 8000fd8:	f002 ffcc 	bl	8003f74 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Channel4;
 8000fdc:	4b19      	ldr	r3, [pc, #100]	; (8001044 <HAL_SPI_MspInit+0xdc>)
 8000fde:	4a1a      	ldr	r2, [pc, #104]	; (8001048 <HAL_SPI_MspInit+0xe0>)
 8000fe0:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8000fe2:	4b18      	ldr	r3, [pc, #96]	; (8001044 <HAL_SPI_MspInit+0xdc>)
 8000fe4:	220f      	movs	r2, #15
 8000fe6:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fe8:	4b16      	ldr	r3, [pc, #88]	; (8001044 <HAL_SPI_MspInit+0xdc>)
 8000fea:	2210      	movs	r2, #16
 8000fec:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fee:	4b15      	ldr	r3, [pc, #84]	; (8001044 <HAL_SPI_MspInit+0xdc>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ff4:	4b13      	ldr	r3, [pc, #76]	; (8001044 <HAL_SPI_MspInit+0xdc>)
 8000ff6:	2280      	movs	r2, #128	; 0x80
 8000ff8:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ffa:	4b12      	ldr	r3, [pc, #72]	; (8001044 <HAL_SPI_MspInit+0xdc>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001000:	4b10      	ldr	r3, [pc, #64]	; (8001044 <HAL_SPI_MspInit+0xdc>)
 8001002:	2200      	movs	r2, #0
 8001004:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8001006:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <HAL_SPI_MspInit+0xdc>)
 8001008:	2200      	movs	r2, #0
 800100a:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800100c:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <HAL_SPI_MspInit+0xdc>)
 800100e:	2200      	movs	r2, #0
 8001010:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001012:	480c      	ldr	r0, [pc, #48]	; (8001044 <HAL_SPI_MspInit+0xdc>)
 8001014:	f002 fd3c 	bl	8003a90 <HAL_DMA_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 800101e:	f7ff ff28 	bl	8000e72 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a07      	ldr	r2, [pc, #28]	; (8001044 <HAL_SPI_MspInit+0xdc>)
 8001026:	655a      	str	r2, [r3, #84]	; 0x54
 8001028:	4a06      	ldr	r2, [pc, #24]	; (8001044 <HAL_SPI_MspInit+0xdc>)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800102e:	bf00      	nop
 8001030:	3728      	adds	r7, #40	; 0x28
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40003c00 	.word	0x40003c00
 800103c:	40021000 	.word	0x40021000
 8001040:	48000800 	.word	0x48000800
 8001044:	20002248 	.word	0x20002248
 8001048:	40020044 	.word	0x40020044

0800104c <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	4a04      	ldr	r2, [pc, #16]	; (8001068 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8001056:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800105a:	6093      	str	r3, [r2, #8]
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	40007000 	.word	0x40007000

0800106c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001072:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <HAL_MspInit+0x44>)
 8001074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001076:	4a0e      	ldr	r2, [pc, #56]	; (80010b0 <HAL_MspInit+0x44>)
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	6613      	str	r3, [r2, #96]	; 0x60
 800107e:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <HAL_MspInit+0x44>)
 8001080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800108a:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <HAL_MspInit+0x44>)
 800108c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800108e:	4a08      	ldr	r2, [pc, #32]	; (80010b0 <HAL_MspInit+0x44>)
 8001090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001094:	6593      	str	r3, [r2, #88]	; 0x58
 8001096:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <HAL_MspInit+0x44>)
 8001098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109e:	603b      	str	r3, [r7, #0]
 80010a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 80010a2:	f7ff ffd3 	bl	800104c <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40021000 	.word	0x40021000

080010b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c6:	e7fe      	b.n	80010c6 <HardFault_Handler+0x4>

080010c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <MemManage_Handler+0x4>

080010ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d2:	e7fe      	b.n	80010d2 <BusFault_Handler+0x4>

080010d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <UsageFault_Handler+0x4>

080010da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001108:	f000 fc80 	bl	8001a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}

08001110 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

//	if(HAL_GPIO_ReadPin(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin))
//	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN3");
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <EXTI0_IRQHandler+0x20>)
 8001116:	4a07      	ldr	r2, [pc, #28]	; (8001134 <EXTI0_IRQHandler+0x24>)
 8001118:	6810      	ldr	r0, [r2, #0]
 800111a:	6018      	str	r0, [r3, #0]
 800111c:	7912      	ldrb	r2, [r2, #4]
 800111e:	711a      	strb	r2, [r3, #4]
 		printf("BTN3_EXTI0_Pin\n");
 8001120:	4805      	ldr	r0, [pc, #20]	; (8001138 <EXTI0_IRQHandler+0x28>)
 8001122:	f006 fbf3 	bl	800790c <puts>
//	}

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001126:	2001      	movs	r0, #1
 8001128:	f003 f8d6 	bl	80042d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20001fec 	.word	0x20001fec
 8001134:	08008aac 	.word	0x08008aac
 8001138:	08008ab4 	.word	0x08008ab4

0800113c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

//	if(HAL_GPIO_ReadPin(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin))
//	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN4");
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <EXTI1_IRQHandler+0x20>)
 8001142:	4a07      	ldr	r2, [pc, #28]	; (8001160 <EXTI1_IRQHandler+0x24>)
 8001144:	6810      	ldr	r0, [r2, #0]
 8001146:	6018      	str	r0, [r3, #0]
 8001148:	7912      	ldrb	r2, [r2, #4]
 800114a:	711a      	strb	r2, [r3, #4]
		printf("BTN4_EXTI1_Pin\n");
 800114c:	4805      	ldr	r0, [pc, #20]	; (8001164 <EXTI1_IRQHandler+0x28>)
 800114e:	f006 fbdd 	bl	800790c <puts>
//	}

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001152:	2002      	movs	r0, #2
 8001154:	f003 f8c0 	bl	80042d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20001fec 	.word	0x20001fec
 8001160:	08008ac4 	.word	0x08008ac4
 8001164:	08008acc 	.word	0x08008acc

08001168 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */


		snprintf(control_pressed, sizeof(control_pressed), "ENC_BTN");
 800116c:	4a06      	ldr	r2, [pc, #24]	; (8001188 <EXTI2_IRQHandler+0x20>)
 800116e:	4b07      	ldr	r3, [pc, #28]	; (800118c <EXTI2_IRQHandler+0x24>)
 8001170:	cb03      	ldmia	r3!, {r0, r1}
 8001172:	6010      	str	r0, [r2, #0]
 8001174:	6051      	str	r1, [r2, #4]
		printf("ENC_EXTI2_Pin\n");
 8001176:	4806      	ldr	r0, [pc, #24]	; (8001190 <EXTI2_IRQHandler+0x28>)
 8001178:	f006 fbc8 	bl	800790c <puts>


  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800117c:	2004      	movs	r0, #4
 800117e:	f003 f8ab 	bl	80042d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20001fec 	.word	0x20001fec
 800118c:	08008adc 	.word	0x08008adc
 8001190:	08008ae4 	.word	0x08008ae4

08001194 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	//printf("Test\n");
	//printf("%lu\n", trigger_input[0]);
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001198:	4802      	ldr	r0, [pc, #8]	; (80011a4 <DMA1_Channel1_IRQHandler+0x10>)
 800119a:	f002 fd9c 	bl	8003cd6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20002064 	.word	0x20002064

080011a8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80011ac:	4802      	ldr	r0, [pc, #8]	; (80011b8 <DMA1_Channel2_IRQHandler+0x10>)
 80011ae:	f002 fd92 	bl	8003cd6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20002110 	.word	0x20002110

080011bc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 80011c0:	4802      	ldr	r0, [pc, #8]	; (80011cc <DMA1_Channel3_IRQHandler+0x10>)
 80011c2:	f002 fd88 	bl	8003cd6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20002170 	.word	0x20002170

080011d0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80011d4:	4802      	ldr	r0, [pc, #8]	; (80011e0 <DMA1_Channel4_IRQHandler+0x10>)
 80011d6:	f002 fd7e 	bl	8003cd6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20002248 	.word	0x20002248

080011e4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	snprintf(control_pressed, sizeof(control_pressed), " ");
 80011e8:	4a05      	ldr	r2, [pc, #20]	; (8001200 <TIM1_UP_TIM16_IRQHandler+0x1c>)
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <TIM1_UP_TIM16_IRQHandler+0x20>)
 80011ec:	881b      	ldrh	r3, [r3, #0]
 80011ee:	8013      	strh	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011f0:	4805      	ldr	r0, [pc, #20]	; (8001208 <TIM1_UP_TIM16_IRQHandler+0x24>)
 80011f2:	f004 ff13 	bl	800601c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80011f6:	4805      	ldr	r0, [pc, #20]	; (800120c <TIM1_UP_TIM16_IRQHandler+0x28>)
 80011f8:	f004 ff10 	bl	800601c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20001fec 	.word	0x20001fec
 8001204:	08008af4 	.word	0x08008af4
 8001208:	20002340 	.word	0x20002340
 800120c:	200023d8 	.word	0x200023d8

08001210 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	update_dc_bias_sweep();
 8001214:	f7ff fb20 	bl	8000858 <update_dc_bias_sweep>
	if((TIM1->CNT < last_enc_value) || (TIM1->CNT > last_enc_value))
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 800121a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121c:	4a11      	ldr	r2, [pc, #68]	; (8001264 <TIM1_TRG_COM_TIM17_IRQHandler+0x54>)
 800121e:	8812      	ldrh	r2, [r2, #0]
 8001220:	4293      	cmp	r3, r2
 8001222:	d305      	bcc.n	8001230 <TIM1_TRG_COM_TIM17_IRQHandler+0x20>
 8001224:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 8001226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001228:	4a0e      	ldr	r2, [pc, #56]	; (8001264 <TIM1_TRG_COM_TIM17_IRQHandler+0x54>)
 800122a:	8812      	ldrh	r2, [r2, #0]
 800122c:	4293      	cmp	r3, r2
 800122e:	d90a      	bls.n	8001246 <TIM1_TRG_COM_TIM17_IRQHandler+0x36>
	{
		printf("%lu\n",TIM1->CNT);
 8001230:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 8001232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001234:	4619      	mov	r1, r3
 8001236:	480c      	ldr	r0, [pc, #48]	; (8001268 <TIM1_TRG_COM_TIM17_IRQHandler+0x58>)
 8001238:	f006 faf4 	bl	8007824 <iprintf>
		new_enc_value = TIM1->CNT;
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 800123e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001240:	b29a      	uxth	r2, r3
 8001242:	4b0a      	ldr	r3, [pc, #40]	; (800126c <TIM1_TRG_COM_TIM17_IRQHandler+0x5c>)
 8001244:	801a      	strh	r2, [r3, #0]
	}


	last_enc_value = TIM1->CNT;
 8001246:	4b06      	ldr	r3, [pc, #24]	; (8001260 <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 8001248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124a:	b29a      	uxth	r2, r3
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <TIM1_TRG_COM_TIM17_IRQHandler+0x54>)
 800124e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001250:	4807      	ldr	r0, [pc, #28]	; (8001270 <TIM1_TRG_COM_TIM17_IRQHandler+0x60>)
 8001252:	f004 fee3 	bl	800601c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8001256:	4807      	ldr	r0, [pc, #28]	; (8001274 <TIM1_TRG_COM_TIM17_IRQHandler+0x64>)
 8001258:	f004 fee0 	bl	800601c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40012c00 	.word	0x40012c00
 8001264:	20001fdc 	.word	0x20001fdc
 8001268:	08008af8 	.word	0x08008af8
 800126c:	20001fde 	.word	0x20001fde
 8001270:	20002340 	.word	0x20002340
 8001274:	200022f4 	.word	0x200022f4

08001278 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800127c:	4802      	ldr	r0, [pc, #8]	; (8001288 <TIM2_IRQHandler+0x10>)
 800127e:	f004 fecd 	bl	800601c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	2000238c 	.word	0x2000238c

0800128c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	if(HAL_GPIO_ReadPin(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin))
 8001290:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001294:	4814      	ldr	r0, [pc, #80]	; (80012e8 <EXTI15_10_IRQHandler+0x5c>)
 8001296:	f002 ffef 	bl	8004278 <HAL_GPIO_ReadPin>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d008      	beq.n	80012b2 <EXTI15_10_IRQHandler+0x26>
	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN1");
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <EXTI15_10_IRQHandler+0x60>)
 80012a2:	4a13      	ldr	r2, [pc, #76]	; (80012f0 <EXTI15_10_IRQHandler+0x64>)
 80012a4:	6810      	ldr	r0, [r2, #0]
 80012a6:	6018      	str	r0, [r3, #0]
 80012a8:	7912      	ldrb	r2, [r2, #4]
 80012aa:	711a      	strb	r2, [r3, #4]
		printf("BTN1_EXTI14_Pin\n");
 80012ac:	4811      	ldr	r0, [pc, #68]	; (80012f4 <EXTI15_10_IRQHandler+0x68>)
 80012ae:	f006 fb2d 	bl	800790c <puts>
	}
	if(HAL_GPIO_ReadPin(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin))
 80012b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012b6:	480c      	ldr	r0, [pc, #48]	; (80012e8 <EXTI15_10_IRQHandler+0x5c>)
 80012b8:	f002 ffde 	bl	8004278 <HAL_GPIO_ReadPin>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d008      	beq.n	80012d4 <EXTI15_10_IRQHandler+0x48>
	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN2");
 80012c2:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <EXTI15_10_IRQHandler+0x60>)
 80012c4:	4a0c      	ldr	r2, [pc, #48]	; (80012f8 <EXTI15_10_IRQHandler+0x6c>)
 80012c6:	6810      	ldr	r0, [r2, #0]
 80012c8:	6018      	str	r0, [r3, #0]
 80012ca:	7912      	ldrb	r2, [r2, #4]
 80012cc:	711a      	strb	r2, [r3, #4]
		printf("BTN2_EXTI15_Pin\n");
 80012ce:	480b      	ldr	r0, [pc, #44]	; (80012fc <EXTI15_10_IRQHandler+0x70>)
 80012d0:	f006 fb1c 	bl	800790c <puts>
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80012d4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80012d8:	f002 fffe 	bl	80042d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80012dc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80012e0:	f002 fffa 	bl	80042d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	48000800 	.word	0x48000800
 80012ec:	20001fec 	.word	0x20001fec
 80012f0:	08008b00 	.word	0x08008b00
 80012f4:	08008b08 	.word	0x08008b08
 80012f8:	08008b18 	.word	0x08008b18
 80012fc:	08008b20 	.word	0x08008b20

08001300 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	e00a      	b.n	8001328 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001312:	f3af 8000 	nop.w
 8001316:	4601      	mov	r1, r0
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	1c5a      	adds	r2, r3, #1
 800131c:	60ba      	str	r2, [r7, #8]
 800131e:	b2ca      	uxtb	r2, r1
 8001320:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	3301      	adds	r3, #1
 8001326:	617b      	str	r3, [r7, #20]
 8001328:	697a      	ldr	r2, [r7, #20]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	429a      	cmp	r2, r3
 800132e:	dbf0      	blt.n	8001312 <_read+0x12>
	}

return len;
 8001330:	687b      	ldr	r3, [r7, #4]
}
 8001332:	4618      	mov	r0, r3
 8001334:	3718      	adds	r7, #24
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <_close>:
	}
	return len;
}

int _close(int file)
{
 800133a:	b480      	push	{r7}
 800133c:	b083      	sub	sp, #12
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
	return -1;
 8001342:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001346:	4618      	mov	r0, r3
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001352:	b480      	push	{r7}
 8001354:	b083      	sub	sp, #12
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
 800135a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001362:	605a      	str	r2, [r3, #4]
	return 0;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <_isatty>:

int _isatty(int file)
{
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
	return 1;
 800137a:	2301      	movs	r3, #1
}
 800137c:	4618      	mov	r0, r3
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
	return 0;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
	...

080013a4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80013ac:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <_sbrk+0x50>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d102      	bne.n	80013ba <_sbrk+0x16>
		heap_end = &end;
 80013b4:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <_sbrk+0x50>)
 80013b6:	4a10      	ldr	r2, [pc, #64]	; (80013f8 <_sbrk+0x54>)
 80013b8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <_sbrk+0x50>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <_sbrk+0x50>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4413      	add	r3, r2
 80013c8:	466a      	mov	r2, sp
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d907      	bls.n	80013de <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80013ce:	f006 f9f7 	bl	80077c0 <__errno>
 80013d2:	4602      	mov	r2, r0
 80013d4:	230c      	movs	r3, #12
 80013d6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80013d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013dc:	e006      	b.n	80013ec <_sbrk+0x48>
	}

	heap_end += incr;
 80013de:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <_sbrk+0x50>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4413      	add	r3, r2
 80013e6:	4a03      	ldr	r2, [pc, #12]	; (80013f4 <_sbrk+0x50>)
 80013e8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80013ea:	68fb      	ldr	r3, [r7, #12]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20001fe0 	.word	0x20001fe0
 80013f8:	20002430 	.word	0x20002430

080013fc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001400:	4b08      	ldr	r3, [pc, #32]	; (8001424 <SystemInit+0x28>)
 8001402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001406:	4a07      	ldr	r2, [pc, #28]	; (8001424 <SystemInit+0x28>)
 8001408:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800140c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001410:	4b04      	ldr	r3, [pc, #16]	; (8001424 <SystemInit+0x28>)
 8001412:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001416:	609a      	str	r2, [r3, #8]
#endif
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b09a      	sub	sp, #104	; 0x68
 800142c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800142e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001432:	2224      	movs	r2, #36	; 0x24
 8001434:	2100      	movs	r1, #0
 8001436:	4618      	mov	r0, r3
 8001438:	f006 f9ec 	bl	8007814 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800143c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	2234      	movs	r2, #52	; 0x34
 800144c:	2100      	movs	r1, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f006 f9e0 	bl	8007814 <memset>

  htim1.Instance = TIM1;
 8001454:	4b2a      	ldr	r3, [pc, #168]	; (8001500 <MX_TIM1_Init+0xd8>)
 8001456:	4a2b      	ldr	r2, [pc, #172]	; (8001504 <MX_TIM1_Init+0xdc>)
 8001458:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800145a:	4b29      	ldr	r3, [pc, #164]	; (8001500 <MX_TIM1_Init+0xd8>)
 800145c:	2200      	movs	r2, #0
 800145e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8001460:	4b27      	ldr	r3, [pc, #156]	; (8001500 <MX_TIM1_Init+0xd8>)
 8001462:	2240      	movs	r2, #64	; 0x40
 8001464:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 8001466:	4b26      	ldr	r3, [pc, #152]	; (8001500 <MX_TIM1_Init+0xd8>)
 8001468:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800146c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800146e:	4b24      	ldr	r3, [pc, #144]	; (8001500 <MX_TIM1_Init+0xd8>)
 8001470:	2200      	movs	r2, #0
 8001472:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001474:	4b22      	ldr	r3, [pc, #136]	; (8001500 <MX_TIM1_Init+0xd8>)
 8001476:	2200      	movs	r2, #0
 8001478:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800147a:	4b21      	ldr	r3, [pc, #132]	; (8001500 <MX_TIM1_Init+0xd8>)
 800147c:	2200      	movs	r2, #0
 800147e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001480:	2303      	movs	r3, #3
 8001482:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001484:	2300      	movs	r3, #0
 8001486:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001488:	2301      	movs	r3, #1
 800148a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800148c:	2300      	movs	r3, #0
 800148e:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001494:	2300      	movs	r3, #0
 8001496:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001498:	2301      	movs	r3, #1
 800149a:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800149c:	2300      	movs	r3, #0
 800149e:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80014a4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80014a8:	4619      	mov	r1, r3
 80014aa:	4815      	ldr	r0, [pc, #84]	; (8001500 <MX_TIM1_Init+0xd8>)
 80014ac:	f004 fd10 	bl	8005ed0 <HAL_TIM_Encoder_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80014b6:	f7ff fcdc 	bl	8000e72 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ba:	2300      	movs	r3, #0
 80014bc:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014be:	2300      	movs	r3, #0
 80014c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c2:	2300      	movs	r3, #0
 80014c4:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014ca:	4619      	mov	r1, r3
 80014cc:	480c      	ldr	r0, [pc, #48]	; (8001500 <MX_TIM1_Init+0xd8>)
 80014ce:	f005 fa89 	bl	80069e4 <HAL_TIMEx_MasterConfigSynchronization>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80014d8:	f7ff fccb 	bl	8000e72 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80014dc:	2300      	movs	r3, #0
 80014de:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80014e0:	2300      	movs	r3, #0
 80014e2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	4619      	mov	r1, r3
 80014e8:	4805      	ldr	r0, [pc, #20]	; (8001500 <MX_TIM1_Init+0xd8>)
 80014ea:	f005 fb11 	bl	8006b10 <HAL_TIMEx_ConfigBreakDeadTime>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 80014f4:	f7ff fcbd 	bl	8000e72 <Error_Handler>
  }

}
 80014f8:	bf00      	nop
 80014fa:	3768      	adds	r7, #104	; 0x68
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20002340 	.word	0x20002340
 8001504:	40012c00 	.word	0x40012c00

08001508 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08c      	sub	sp, #48	; 0x30
 800150c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800150e:	f107 0320 	add.w	r3, r7, #32
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800152c:	463b      	mov	r3, r7
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8001536:	4b28      	ldr	r3, [pc, #160]	; (80015d8 <MX_TIM2_Init+0xd0>)
 8001538:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800153c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2047;
 800153e:	4b26      	ldr	r3, [pc, #152]	; (80015d8 <MX_TIM2_Init+0xd0>)
 8001540:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001544:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001546:	4b24      	ldr	r3, [pc, #144]	; (80015d8 <MX_TIM2_Init+0xd0>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 800154c:	4b22      	ldr	r3, [pc, #136]	; (80015d8 <MX_TIM2_Init+0xd0>)
 800154e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001552:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001554:	4b20      	ldr	r3, [pc, #128]	; (80015d8 <MX_TIM2_Init+0xd0>)
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155a:	4b1f      	ldr	r3, [pc, #124]	; (80015d8 <MX_TIM2_Init+0xd0>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001560:	481d      	ldr	r0, [pc, #116]	; (80015d8 <MX_TIM2_Init+0xd0>)
 8001562:	f004 fbf9 	bl	8005d58 <HAL_TIM_Base_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800156c:	f7ff fc81 	bl	8000e72 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001570:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001574:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001576:	f107 0320 	add.w	r3, r7, #32
 800157a:	4619      	mov	r1, r3
 800157c:	4816      	ldr	r0, [pc, #88]	; (80015d8 <MX_TIM2_Init+0xd0>)
 800157e:	f004 fecd 	bl	800631c <HAL_TIM_ConfigClockSource>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001588:	f7ff fc73 	bl	8000e72 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 800158c:	2305      	movs	r3, #5
 800158e:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001590:	2350      	movs	r3, #80	; 0x50
 8001592:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800159c:	f107 030c 	add.w	r3, r7, #12
 80015a0:	4619      	mov	r1, r3
 80015a2:	480d      	ldr	r0, [pc, #52]	; (80015d8 <MX_TIM2_Init+0xd0>)
 80015a4:	f004 ffaa 	bl	80064fc <HAL_TIM_SlaveConfigSynchro>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 80015ae:	f7ff fc60 	bl	8000e72 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b2:	2300      	movs	r3, #0
 80015b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015ba:	463b      	mov	r3, r7
 80015bc:	4619      	mov	r1, r3
 80015be:	4806      	ldr	r0, [pc, #24]	; (80015d8 <MX_TIM2_Init+0xd0>)
 80015c0:	f005 fa10 	bl	80069e4 <HAL_TIMEx_MasterConfigSynchronization>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 80015ca:	f7ff fc52 	bl	8000e72 <Error_Handler>
  }

}
 80015ce:	bf00      	nop
 80015d0:	3730      	adds	r7, #48	; 0x30
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	2000238c 	.word	0x2000238c

080015dc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b094      	sub	sp, #80	; 0x50
 80015e0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015fc:	463b      	mov	r3, r7
 80015fe:	2234      	movs	r2, #52	; 0x34
 8001600:	2100      	movs	r1, #0
 8001602:	4618      	mov	r0, r3
 8001604:	f006 f906 	bl	8007814 <memset>

  htim8.Instance = TIM8;
 8001608:	4b26      	ldr	r3, [pc, #152]	; (80016a4 <MX_TIM8_Init+0xc8>)
 800160a:	4a27      	ldr	r2, [pc, #156]	; (80016a8 <MX_TIM8_Init+0xcc>)
 800160c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800160e:	4b25      	ldr	r3, [pc, #148]	; (80016a4 <MX_TIM8_Init+0xc8>)
 8001610:	2200      	movs	r2, #0
 8001612:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001614:	4b23      	ldr	r3, [pc, #140]	; (80016a4 <MX_TIM8_Init+0xc8>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 800161a:	4b22      	ldr	r3, [pc, #136]	; (80016a4 <MX_TIM8_Init+0xc8>)
 800161c:	2201      	movs	r2, #1
 800161e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001620:	4b20      	ldr	r3, [pc, #128]	; (80016a4 <MX_TIM8_Init+0xc8>)
 8001622:	2200      	movs	r2, #0
 8001624:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001626:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <MX_TIM8_Init+0xc8>)
 8001628:	2200      	movs	r2, #0
 800162a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800162c:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <MX_TIM8_Init+0xc8>)
 800162e:	2200      	movs	r2, #0
 8001630:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001632:	481c      	ldr	r0, [pc, #112]	; (80016a4 <MX_TIM8_Init+0xc8>)
 8001634:	f004 fb90 	bl	8005d58 <HAL_TIM_Base_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 800163e:	f7ff fc18 	bl	8000e72 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001646:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001648:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800164c:	4619      	mov	r1, r3
 800164e:	4815      	ldr	r0, [pc, #84]	; (80016a4 <MX_TIM8_Init+0xc8>)
 8001650:	f004 fe64 	bl	800631c <HAL_TIM_ConfigClockSource>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800165a:	f7ff fc0a 	bl	8000e72 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800165e:	2320      	movs	r3, #32
 8001660:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001662:	2300      	movs	r3, #0
 8001664:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001666:	2300      	movs	r3, #0
 8001668:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800166a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800166e:	4619      	mov	r1, r3
 8001670:	480c      	ldr	r0, [pc, #48]	; (80016a4 <MX_TIM8_Init+0xc8>)
 8001672:	f005 f9b7 	bl	80069e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800167c:	f7ff fbf9 	bl	8000e72 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001680:	2300      	movs	r3, #0
 8001682:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001684:	2300      	movs	r3, #0
 8001686:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001688:	463b      	mov	r3, r7
 800168a:	4619      	mov	r1, r3
 800168c:	4805      	ldr	r0, [pc, #20]	; (80016a4 <MX_TIM8_Init+0xc8>)
 800168e:	f005 fa3f 	bl	8006b10 <HAL_TIMEx_ConfigBreakDeadTime>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8001698:	f7ff fbeb 	bl	8000e72 <Error_Handler>
  }

}
 800169c:	bf00      	nop
 800169e:	3750      	adds	r7, #80	; 0x50
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	200022a8 	.word	0x200022a8
 80016a8:	40013400 	.word	0x40013400

080016ac <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 80016b0:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <MX_TIM16_Init+0x44>)
 80016b2:	4a10      	ldr	r2, [pc, #64]	; (80016f4 <MX_TIM16_Init+0x48>)
 80016b4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80016b6:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <MX_TIM16_Init+0x44>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016bc:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <MX_TIM16_Init+0x44>)
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 8191;
 80016c2:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <MX_TIM16_Init+0x44>)
 80016c4:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80016c8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ca:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <MX_TIM16_Init+0x44>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80016d0:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <MX_TIM16_Init+0x44>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <MX_TIM16_Init+0x44>)
 80016d8:	2200      	movs	r2, #0
 80016da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80016dc:	4804      	ldr	r0, [pc, #16]	; (80016f0 <MX_TIM16_Init+0x44>)
 80016de:	f004 fb3b 	bl	8005d58 <HAL_TIM_Base_Init>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80016e8:	f7ff fbc3 	bl	8000e72 <Error_Handler>
  }

}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	200023d8 	.word	0x200023d8
 80016f4:	40014400 	.word	0x40014400

080016f8 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 80016fc:	4b0f      	ldr	r3, [pc, #60]	; (800173c <MX_TIM17_Init+0x44>)
 80016fe:	4a10      	ldr	r2, [pc, #64]	; (8001740 <MX_TIM17_Init+0x48>)
 8001700:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 2047;
 8001702:	4b0e      	ldr	r3, [pc, #56]	; (800173c <MX_TIM17_Init+0x44>)
 8001704:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001708:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800170a:	4b0c      	ldr	r3, [pc, #48]	; (800173c <MX_TIM17_Init+0x44>)
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 64;
 8001710:	4b0a      	ldr	r3, [pc, #40]	; (800173c <MX_TIM17_Init+0x44>)
 8001712:	2240      	movs	r2, #64	; 0x40
 8001714:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001716:	4b09      	ldr	r3, [pc, #36]	; (800173c <MX_TIM17_Init+0x44>)
 8001718:	2200      	movs	r2, #0
 800171a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800171c:	4b07      	ldr	r3, [pc, #28]	; (800173c <MX_TIM17_Init+0x44>)
 800171e:	2200      	movs	r2, #0
 8001720:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <MX_TIM17_Init+0x44>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001728:	4804      	ldr	r0, [pc, #16]	; (800173c <MX_TIM17_Init+0x44>)
 800172a:	f004 fb15 	bl	8005d58 <HAL_TIM_Base_Init>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8001734:	f7ff fb9d 	bl	8000e72 <Error_Handler>
  }

}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}
 800173c:	200022f4 	.word	0x200022f4
 8001740:	40014800 	.word	0x40014800

08001744 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b08a      	sub	sp, #40	; 0x28
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174c:	f107 0314 	add.w	r3, r7, #20
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
 800175a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a1f      	ldr	r2, [pc, #124]	; (80017e0 <HAL_TIM_Encoder_MspInit+0x9c>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d137      	bne.n	80017d6 <HAL_TIM_Encoder_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001766:	4b1f      	ldr	r3, [pc, #124]	; (80017e4 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800176a:	4a1e      	ldr	r2, [pc, #120]	; (80017e4 <HAL_TIM_Encoder_MspInit+0xa0>)
 800176c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001770:	6613      	str	r3, [r2, #96]	; 0x60
 8001772:	4b1c      	ldr	r3, [pc, #112]	; (80017e4 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001776:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800177a:	613b      	str	r3, [r7, #16]
 800177c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800177e:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001782:	4a18      	ldr	r2, [pc, #96]	; (80017e4 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001784:	f043 0304 	orr.w	r3, r3, #4
 8001788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800178a:	4b16      	ldr	r3, [pc, #88]	; (80017e4 <HAL_TIM_Encoder_MspInit+0xa0>)
 800178c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001796:	2303      	movs	r3, #3
 8001798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179a:	2302      	movs	r3, #2
 800179c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a2:	2300      	movs	r3, #0
 80017a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80017a6:	2302      	movs	r3, #2
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017aa:	f107 0314 	add.w	r3, r7, #20
 80017ae:	4619      	mov	r1, r3
 80017b0:	480d      	ldr	r0, [pc, #52]	; (80017e8 <HAL_TIM_Encoder_MspInit+0xa4>)
 80017b2:	f002 fbdf 	bl	8003f74 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2101      	movs	r1, #1
 80017ba:	2019      	movs	r0, #25
 80017bc:	f001 fd81 	bl	80032c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80017c0:	2019      	movs	r0, #25
 80017c2:	f001 fd98 	bl	80032f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2101      	movs	r1, #1
 80017ca:	201a      	movs	r0, #26
 80017cc:	f001 fd79 	bl	80032c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80017d0:	201a      	movs	r0, #26
 80017d2:	f001 fd90 	bl	80032f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80017d6:	bf00      	nop
 80017d8:	3728      	adds	r7, #40	; 0x28
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40012c00 	.word	0x40012c00
 80017e4:	40021000 	.word	0x40021000
 80017e8:	48000800 	.word	0x48000800

080017ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08c      	sub	sp, #48	; 0x30
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	f107 031c 	add.w	r3, r7, #28
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800180c:	d131      	bne.n	8001872 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800180e:	4b3d      	ldr	r3, [pc, #244]	; (8001904 <HAL_TIM_Base_MspInit+0x118>)
 8001810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001812:	4a3c      	ldr	r2, [pc, #240]	; (8001904 <HAL_TIM_Base_MspInit+0x118>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6593      	str	r3, [r2, #88]	; 0x58
 800181a:	4b3a      	ldr	r3, [pc, #232]	; (8001904 <HAL_TIM_Base_MspInit+0x118>)
 800181c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	61bb      	str	r3, [r7, #24]
 8001824:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001826:	4b37      	ldr	r3, [pc, #220]	; (8001904 <HAL_TIM_Base_MspInit+0x118>)
 8001828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182a:	4a36      	ldr	r2, [pc, #216]	; (8001904 <HAL_TIM_Base_MspInit+0x118>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001832:	4b34      	ldr	r3, [pc, #208]	; (8001904 <HAL_TIM_Base_MspInit+0x118>)
 8001834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800183e:	2301      	movs	r3, #1
 8001840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001842:	2302      	movs	r3, #2
 8001844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184a:	2300      	movs	r3, #0
 800184c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800184e:	2301      	movs	r3, #1
 8001850:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001852:	f107 031c 	add.w	r3, r7, #28
 8001856:	4619      	mov	r1, r3
 8001858:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800185c:	f002 fb8a 	bl	8003f74 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001860:	2200      	movs	r2, #0
 8001862:	2101      	movs	r1, #1
 8001864:	201c      	movs	r0, #28
 8001866:	f001 fd2c 	bl	80032c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800186a:	201c      	movs	r0, #28
 800186c:	f001 fd43 	bl	80032f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001870:	e044      	b.n	80018fc <HAL_TIM_Base_MspInit+0x110>
  else if(tim_baseHandle->Instance==TIM8)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a24      	ldr	r2, [pc, #144]	; (8001908 <HAL_TIM_Base_MspInit+0x11c>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d10c      	bne.n	8001896 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800187c:	4b21      	ldr	r3, [pc, #132]	; (8001904 <HAL_TIM_Base_MspInit+0x118>)
 800187e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001880:	4a20      	ldr	r2, [pc, #128]	; (8001904 <HAL_TIM_Base_MspInit+0x118>)
 8001882:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001886:	6613      	str	r3, [r2, #96]	; 0x60
 8001888:	4b1e      	ldr	r3, [pc, #120]	; (8001904 <HAL_TIM_Base_MspInit+0x118>)
 800188a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800188c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	693b      	ldr	r3, [r7, #16]
}
 8001894:	e032      	b.n	80018fc <HAL_TIM_Base_MspInit+0x110>
  else if(tim_baseHandle->Instance==TIM16)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a1c      	ldr	r2, [pc, #112]	; (800190c <HAL_TIM_Base_MspInit+0x120>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d114      	bne.n	80018ca <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80018a0:	4b18      	ldr	r3, [pc, #96]	; (8001904 <HAL_TIM_Base_MspInit+0x118>)
 80018a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018a4:	4a17      	ldr	r2, [pc, #92]	; (8001904 <HAL_TIM_Base_MspInit+0x118>)
 80018a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018aa:	6613      	str	r3, [r2, #96]	; 0x60
 80018ac:	4b15      	ldr	r3, [pc, #84]	; (8001904 <HAL_TIM_Base_MspInit+0x118>)
 80018ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 80018b8:	2200      	movs	r2, #0
 80018ba:	2101      	movs	r1, #1
 80018bc:	2019      	movs	r0, #25
 80018be:	f001 fd00 	bl	80032c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80018c2:	2019      	movs	r0, #25
 80018c4:	f001 fd17 	bl	80032f6 <HAL_NVIC_EnableIRQ>
}
 80018c8:	e018      	b.n	80018fc <HAL_TIM_Base_MspInit+0x110>
  else if(tim_baseHandle->Instance==TIM17)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a10      	ldr	r2, [pc, #64]	; (8001910 <HAL_TIM_Base_MspInit+0x124>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d113      	bne.n	80018fc <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80018d4:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <HAL_TIM_Base_MspInit+0x118>)
 80018d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018d8:	4a0a      	ldr	r2, [pc, #40]	; (8001904 <HAL_TIM_Base_MspInit+0x118>)
 80018da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018de:	6613      	str	r3, [r2, #96]	; 0x60
 80018e0:	4b08      	ldr	r3, [pc, #32]	; (8001904 <HAL_TIM_Base_MspInit+0x118>)
 80018e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 80018ec:	2200      	movs	r2, #0
 80018ee:	2101      	movs	r1, #1
 80018f0:	201a      	movs	r0, #26
 80018f2:	f001 fce6 	bl	80032c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80018f6:	201a      	movs	r0, #26
 80018f8:	f001 fcfd 	bl	80032f6 <HAL_NVIC_EnableIRQ>
}
 80018fc:	bf00      	nop
 80018fe:	3730      	adds	r7, #48	; 0x30
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40021000 	.word	0x40021000
 8001908:	40013400 	.word	0x40013400
 800190c:	40014400 	.word	0x40014400
 8001910:	40014800 	.word	0x40014800

08001914 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001914:	480d      	ldr	r0, [pc, #52]	; (800194c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001916:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001918:	480d      	ldr	r0, [pc, #52]	; (8001950 <LoopForever+0x6>)
  ldr r1, =_edata
 800191a:	490e      	ldr	r1, [pc, #56]	; (8001954 <LoopForever+0xa>)
  ldr r2, =_sidata
 800191c:	4a0e      	ldr	r2, [pc, #56]	; (8001958 <LoopForever+0xe>)
  movs r3, #0
 800191e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001920:	e002      	b.n	8001928 <LoopCopyDataInit>

08001922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001926:	3304      	adds	r3, #4

08001928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800192a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800192c:	d3f9      	bcc.n	8001922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800192e:	4a0b      	ldr	r2, [pc, #44]	; (800195c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001930:	4c0b      	ldr	r4, [pc, #44]	; (8001960 <LoopForever+0x16>)
  movs r3, #0
 8001932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001934:	e001      	b.n	800193a <LoopFillZerobss>

08001936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001938:	3204      	adds	r2, #4

0800193a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800193a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800193c:	d3fb      	bcc.n	8001936 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800193e:	f7ff fd5d 	bl	80013fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001942:	f005 ff43 	bl	80077cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001946:	f7ff f969 	bl	8000c1c <main>

0800194a <LoopForever>:

LoopForever:
    b LoopForever
 800194a:	e7fe      	b.n	800194a <LoopForever>
  ldr   r0, =_estack
 800194c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001954:	20001fb8 	.word	0x20001fb8
  ldr r2, =_sidata
 8001958:	08008e20 	.word	0x08008e20
  ldr r2, =_sbss
 800195c:	20001fb8 	.word	0x20001fb8
  ldr r4, =_ebss
 8001960:	2000242c 	.word	0x2000242c

08001964 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001964:	e7fe      	b.n	8001964 <ADC1_2_IRQHandler>

08001966 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800196c:	2300      	movs	r3, #0
 800196e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001970:	2003      	movs	r0, #3
 8001972:	f001 fc9b 	bl	80032ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001976:	2000      	movs	r0, #0
 8001978:	f000 f80e 	bl	8001998 <HAL_InitTick>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d002      	beq.n	8001988 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	71fb      	strb	r3, [r7, #7]
 8001986:	e001      	b.n	800198c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001988:	f7ff fb70 	bl	800106c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800198c:	79fb      	ldrb	r3, [r7, #7]

}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
	...

08001998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019a0:	2300      	movs	r3, #0
 80019a2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80019a4:	4b16      	ldr	r3, [pc, #88]	; (8001a00 <HAL_InitTick+0x68>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d022      	beq.n	80019f2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80019ac:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <HAL_InitTick+0x6c>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <HAL_InitTick+0x68>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80019bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c0:	4618      	mov	r0, r3
 80019c2:	f001 fca6 	bl	8003312 <HAL_SYSTICK_Config>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d10f      	bne.n	80019ec <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b0f      	cmp	r3, #15
 80019d0:	d809      	bhi.n	80019e6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d2:	2200      	movs	r2, #0
 80019d4:	6879      	ldr	r1, [r7, #4]
 80019d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019da:	f001 fc72 	bl	80032c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019de:	4a0a      	ldr	r2, [pc, #40]	; (8001a08 <HAL_InitTick+0x70>)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6013      	str	r3, [r2, #0]
 80019e4:	e007      	b.n	80019f6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	73fb      	strb	r3, [r7, #15]
 80019ea:	e004      	b.n	80019f6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	73fb      	strb	r3, [r7, #15]
 80019f0:	e001      	b.n	80019f6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20001f4c 	.word	0x20001f4c
 8001a04:	20001f44 	.word	0x20001f44
 8001a08:	20001f48 	.word	0x20001f48

08001a0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a10:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <HAL_IncTick+0x1c>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <HAL_IncTick+0x20>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4413      	add	r3, r2
 8001a1a:	4a03      	ldr	r2, [pc, #12]	; (8001a28 <HAL_IncTick+0x1c>)
 8001a1c:	6013      	str	r3, [r2, #0]
}
 8001a1e:	bf00      	nop
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	20002424 	.word	0x20002424
 8001a2c:	20001f4c 	.word	0x20001f4c

08001a30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  return uwTick;
 8001a34:	4b03      	ldr	r3, [pc, #12]	; (8001a44 <HAL_GetTick+0x14>)
 8001a36:	681b      	ldr	r3, [r3, #0]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	20002424 	.word	0x20002424

08001a48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a50:	f7ff ffee 	bl	8001a30 <HAL_GetTick>
 8001a54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a60:	d004      	beq.n	8001a6c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a62:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <HAL_Delay+0x40>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	4413      	add	r3, r2
 8001a6a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a6c:	bf00      	nop
 8001a6e:	f7ff ffdf 	bl	8001a30 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	68fa      	ldr	r2, [r7, #12]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d8f7      	bhi.n	8001a6e <HAL_Delay+0x26>
  {
  }
}
 8001a7e:	bf00      	nop
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20001f4c 	.word	0x20001f4c

08001a8c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	609a      	str	r2, [r3, #8]
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
 8001aba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	609a      	str	r2, [r3, #8]
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001af4:	b490      	push	{r4, r7}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
 8001b00:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	3360      	adds	r3, #96	; 0x60
 8001b06:	461a      	mov	r2, r3
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4413      	add	r3, r2
 8001b0e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001b10:	6822      	ldr	r2, [r4, #0]
 8001b12:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <LL_ADC_SetOffset+0x40>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	4313      	orrs	r3, r2
 8001b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001b26:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b28:	bf00      	nop
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc90      	pop	{r4, r7}
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	03fff000 	.word	0x03fff000

08001b38 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b38:	b490      	push	{r4, r7}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	3360      	adds	r3, #96	; 0x60
 8001b46:	461a      	mov	r2, r3
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4413      	add	r3, r2
 8001b4e:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b50:	6823      	ldr	r3, [r4, #0]
 8001b52:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc90      	pop	{r4, r7}
 8001b5e:	4770      	bx	lr

08001b60 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b60:	b490      	push	{r4, r7}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	3360      	adds	r3, #96	; 0x60
 8001b70:	461a      	mov	r2, r3
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4413      	add	r3, r2
 8001b78:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001b7a:	6823      	ldr	r3, [r4, #0]
 8001b7c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001b86:	bf00      	nop
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc90      	pop	{r4, r7}
 8001b8e:	4770      	bx	lr

08001b90 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001b90:	b490      	push	{r4, r7}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	3360      	adds	r3, #96	; 0x60
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001baa:	6823      	ldr	r3, [r4, #0]
 8001bac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001bb6:	bf00      	nop
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc90      	pop	{r4, r7}
 8001bbe:	4770      	bx	lr

08001bc0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001bc0:	b490      	push	{r4, r7}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	3360      	adds	r3, #96	; 0x60
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001bda:	6823      	ldr	r3, [r4, #0]
 8001bdc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001be6:	bf00      	nop
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc90      	pop	{r4, r7}
 8001bee:	4770      	bx	lr

08001bf0 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	431a      	orrs	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	615a      	str	r2, [r3, #20]
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c16:	b490      	push	{r4, r7}
 8001c18:	b084      	sub	sp, #16
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	60f8      	str	r0, [r7, #12]
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	3330      	adds	r3, #48	; 0x30
 8001c26:	461a      	mov	r2, r3
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	0a1b      	lsrs	r3, r3, #8
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	f003 030c 	and.w	r3, r3, #12
 8001c32:	4413      	add	r3, r2
 8001c34:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001c36:	6822      	ldr	r2, [r4, #0]
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	f003 031f 	and.w	r3, r3, #31
 8001c3e:	211f      	movs	r1, #31
 8001c40:	fa01 f303 	lsl.w	r3, r1, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	401a      	ands	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	0e9b      	lsrs	r3, r3, #26
 8001c4c:	f003 011f 	and.w	r1, r3, #31
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	f003 031f 	and.w	r3, r3, #31
 8001c56:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c5e:	bf00      	nop
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc90      	pop	{r4, r7}
 8001c66:	4770      	bx	lr

08001c68 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c68:	b490      	push	{r4, r7}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	3314      	adds	r3, #20
 8001c78:	461a      	mov	r2, r3
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	0e5b      	lsrs	r3, r3, #25
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	4413      	add	r3, r2
 8001c86:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001c88:	6822      	ldr	r2, [r4, #0]
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	0d1b      	lsrs	r3, r3, #20
 8001c8e:	f003 031f 	and.w	r3, r3, #31
 8001c92:	2107      	movs	r1, #7
 8001c94:	fa01 f303 	lsl.w	r3, r1, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	401a      	ands	r2, r3
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	0d1b      	lsrs	r3, r3, #20
 8001ca0:	f003 031f 	and.w	r3, r3, #31
 8001ca4:	6879      	ldr	r1, [r7, #4]
 8001ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8001caa:	4313      	orrs	r3, r2
 8001cac:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001cae:	bf00      	nop
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc90      	pop	{r4, r7}
 8001cb6:	4770      	bx	lr

08001cb8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f003 0318 	and.w	r3, r3, #24
 8001cda:	4908      	ldr	r1, [pc, #32]	; (8001cfc <LL_ADC_SetChannelSingleDiff+0x44>)
 8001cdc:	40d9      	lsrs	r1, r3
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	400b      	ands	r3, r1
 8001ce2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001cee:	bf00      	nop
 8001cf0:	3714      	adds	r7, #20
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	0007ffff 	.word	0x0007ffff

08001d00 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001d10:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	6093      	str	r3, [r2, #8]
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d38:	d101      	bne.n	8001d3e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e000      	b.n	8001d40 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001d5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d60:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d88:	d101      	bne.n	8001d8e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e000      	b.n	8001d90 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d101      	bne.n	8001db4 <LL_ADC_IsEnabled+0x18>
 8001db0:	2301      	movs	r3, #1
 8001db2:	e000      	b.n	8001db6 <LL_ADC_IsEnabled+0x1a>
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f003 0304 	and.w	r3, r3, #4
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	d101      	bne.n	8001dda <LL_ADC_REG_IsConversionOngoing+0x18>
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e000      	b.n	8001ddc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 0308 	and.w	r3, r3, #8
 8001df8:	2b08      	cmp	r3, #8
 8001dfa:	d101      	bne.n	8001e00 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e000      	b.n	8001e02 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
	...

08001e10 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e10:	b590      	push	{r4, r7, lr}
 8001e12:	b089      	sub	sp, #36	; 0x24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e1ad      	b.n	8002186 <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d109      	bne.n	8001e4c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f7fe fab9 	bl	80003b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff ff67 	bl	8001d24 <LL_ADC_IsDeepPowerDownEnabled>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d004      	beq.n	8001e66 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff ff4d 	bl	8001d00 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff ff82 	bl	8001d74 <LL_ADC_IsInternalRegulatorEnabled>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d113      	bne.n	8001e9e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff ff66 	bl	8001d4c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001e80:	4b9e      	ldr	r3, [pc, #632]	; (80020fc <HAL_ADC_Init+0x2ec>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	099b      	lsrs	r3, r3, #6
 8001e86:	4a9e      	ldr	r2, [pc, #632]	; (8002100 <HAL_ADC_Init+0x2f0>)
 8001e88:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8c:	099b      	lsrs	r3, r3, #6
 8001e8e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e90:	e002      	b.n	8001e98 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	3b01      	subs	r3, #1
 8001e96:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1f9      	bne.n	8001e92 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff ff66 	bl	8001d74 <LL_ADC_IsInternalRegulatorEnabled>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d10d      	bne.n	8001eca <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb2:	f043 0210 	orr.w	r2, r3, #16
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ebe:	f043 0201 	orr.w	r2, r3, #1
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff ff77 	bl	8001dc2 <LL_ADC_REG_IsConversionOngoing>
 8001ed4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eda:	f003 0310 	and.w	r3, r3, #16
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f040 8148 	bne.w	8002174 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f040 8144 	bne.w	8002174 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ef4:	f043 0202 	orr.w	r2, r3, #2
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff ff4b 	bl	8001d9c <LL_ADC_IsEnabled>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d141      	bne.n	8001f90 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f14:	d004      	beq.n	8001f20 <HAL_ADC_Init+0x110>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a7a      	ldr	r2, [pc, #488]	; (8002104 <HAL_ADC_Init+0x2f4>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d10f      	bne.n	8001f40 <HAL_ADC_Init+0x130>
 8001f20:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001f24:	f7ff ff3a 	bl	8001d9c <LL_ADC_IsEnabled>
 8001f28:	4604      	mov	r4, r0
 8001f2a:	4876      	ldr	r0, [pc, #472]	; (8002104 <HAL_ADC_Init+0x2f4>)
 8001f2c:	f7ff ff36 	bl	8001d9c <LL_ADC_IsEnabled>
 8001f30:	4603      	mov	r3, r0
 8001f32:	4323      	orrs	r3, r4
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	bf0c      	ite	eq
 8001f38:	2301      	moveq	r3, #1
 8001f3a:	2300      	movne	r3, #0
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	e012      	b.n	8001f66 <HAL_ADC_Init+0x156>
 8001f40:	4871      	ldr	r0, [pc, #452]	; (8002108 <HAL_ADC_Init+0x2f8>)
 8001f42:	f7ff ff2b 	bl	8001d9c <LL_ADC_IsEnabled>
 8001f46:	4604      	mov	r4, r0
 8001f48:	4870      	ldr	r0, [pc, #448]	; (800210c <HAL_ADC_Init+0x2fc>)
 8001f4a:	f7ff ff27 	bl	8001d9c <LL_ADC_IsEnabled>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	431c      	orrs	r4, r3
 8001f52:	486f      	ldr	r0, [pc, #444]	; (8002110 <HAL_ADC_Init+0x300>)
 8001f54:	f7ff ff22 	bl	8001d9c <LL_ADC_IsEnabled>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	4323      	orrs	r3, r4
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	bf0c      	ite	eq
 8001f60:	2301      	moveq	r3, #1
 8001f62:	2300      	movne	r3, #0
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d012      	beq.n	8001f90 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f72:	d004      	beq.n	8001f7e <HAL_ADC_Init+0x16e>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a62      	ldr	r2, [pc, #392]	; (8002104 <HAL_ADC_Init+0x2f4>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d101      	bne.n	8001f82 <HAL_ADC_Init+0x172>
 8001f7e:	4a65      	ldr	r2, [pc, #404]	; (8002114 <HAL_ADC_Init+0x304>)
 8001f80:	e000      	b.n	8001f84 <HAL_ADC_Init+0x174>
 8001f82:	4a65      	ldr	r2, [pc, #404]	; (8002118 <HAL_ADC_Init+0x308>)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4610      	mov	r0, r2
 8001f8c:	f7ff fd7e 	bl	8001a8c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	7f5b      	ldrb	r3, [r3, #29]
 8001f94:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f9a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001fa0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001fa6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fae:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d106      	bne.n	8001fcc <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	045b      	lsls	r3, r3, #17
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d009      	beq.n	8001fe8 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68da      	ldr	r2, [r3, #12]
 8001fee:	4b4b      	ldr	r3, [pc, #300]	; (800211c <HAL_ADC_Init+0x30c>)
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6812      	ldr	r2, [r2, #0]
 8001ff6:	69b9      	ldr	r1, [r7, #24]
 8001ff8:	430b      	orrs	r3, r1
 8001ffa:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	430a      	orrs	r2, r1
 8002010:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff fed3 	bl	8001dc2 <LL_ADC_REG_IsConversionOngoing>
 800201c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff fee0 	bl	8001de8 <LL_ADC_INJ_IsConversionOngoing>
 8002028:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d17f      	bne.n	8002130 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d17c      	bne.n	8002130 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800203a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002042:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002044:	4313      	orrs	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002052:	f023 0302 	bic.w	r3, r3, #2
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	6812      	ldr	r2, [r2, #0]
 800205a:	69b9      	ldr	r1, [r7, #24]
 800205c:	430b      	orrs	r3, r1
 800205e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d017      	beq.n	8002098 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	691a      	ldr	r2, [r3, #16]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002076:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002080:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002084:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	6911      	ldr	r1, [r2, #16]
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	6812      	ldr	r2, [r2, #0]
 8002090:	430b      	orrs	r3, r1
 8002092:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002096:	e013      	b.n	80020c0 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	691a      	ldr	r2, [r3, #16]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80020a6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	6812      	ldr	r2, [r2, #0]
 80020b4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80020b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020bc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d12a      	bne.n	8002120 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80020d4:	f023 0304 	bic.w	r3, r3, #4
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80020e0:	4311      	orrs	r1, r2
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80020e6:	4311      	orrs	r1, r2
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80020ec:	430a      	orrs	r2, r1
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f042 0201 	orr.w	r2, r2, #1
 80020f8:	611a      	str	r2, [r3, #16]
 80020fa:	e019      	b.n	8002130 <HAL_ADC_Init+0x320>
 80020fc:	20001f44 	.word	0x20001f44
 8002100:	053e2d63 	.word	0x053e2d63
 8002104:	50000100 	.word	0x50000100
 8002108:	50000400 	.word	0x50000400
 800210c:	50000500 	.word	0x50000500
 8002110:	50000600 	.word	0x50000600
 8002114:	50000300 	.word	0x50000300
 8002118:	50000700 	.word	0x50000700
 800211c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	691a      	ldr	r2, [r3, #16]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0201 	bic.w	r2, r2, #1
 800212e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d10c      	bne.n	8002152 <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	f023 010f 	bic.w	r1, r3, #15
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	1e5a      	subs	r2, r3, #1
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	631a      	str	r2, [r3, #48]	; 0x30
 8002150:	e007      	b.n	8002162 <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 020f 	bic.w	r2, r2, #15
 8002160:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002166:	f023 0303 	bic.w	r3, r3, #3
 800216a:	f043 0201 	orr.w	r2, r3, #1
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	65da      	str	r2, [r3, #92]	; 0x5c
 8002172:	e007      	b.n	8002184 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002178:	f043 0210 	orr.w	r2, r3, #16
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002184:	7ffb      	ldrb	r3, [r7, #31]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3724      	adds	r7, #36	; 0x24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd90      	pop	{r4, r7, pc}
 800218e:	bf00      	nop

08002190 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b0a6      	sub	sp, #152	; 0x98
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80021a0:	2300      	movs	r3, #0
 80021a2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d101      	bne.n	80021b2 <HAL_ADC_ConfigChannel+0x22>
 80021ae:	2302      	movs	r3, #2
 80021b0:	e38e      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x740>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff fdff 	bl	8001dc2 <LL_ADC_REG_IsConversionOngoing>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f040 836f 	bne.w	80028aa <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6818      	ldr	r0, [r3, #0]
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	6859      	ldr	r1, [r3, #4]
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	461a      	mov	r2, r3
 80021da:	f7ff fd1c 	bl	8001c16 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff fded 	bl	8001dc2 <LL_ADC_REG_IsConversionOngoing>
 80021e8:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff fdf9 	bl	8001de8 <LL_ADC_INJ_IsConversionOngoing>
 80021f6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f040 817b 	bne.w	80024fa <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002204:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002208:	2b00      	cmp	r3, #0
 800220a:	f040 8176 	bne.w	80024fa <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002216:	d10f      	bne.n	8002238 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6818      	ldr	r0, [r3, #0]
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2200      	movs	r2, #0
 8002222:	4619      	mov	r1, r3
 8002224:	f7ff fd20 	bl	8001c68 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff fcdd 	bl	8001bf0 <LL_ADC_SetSamplingTimeCommonConfig>
 8002236:	e00e      	b.n	8002256 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6818      	ldr	r0, [r3, #0]
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	6819      	ldr	r1, [r3, #0]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	461a      	mov	r2, r3
 8002246:	f7ff fd0f 	bl	8001c68 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2100      	movs	r1, #0
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff fccd 	bl	8001bf0 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	695a      	ldr	r2, [r3, #20]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	08db      	lsrs	r3, r3, #3
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	2b04      	cmp	r3, #4
 8002276:	d022      	beq.n	80022be <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6818      	ldr	r0, [r3, #0]
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	6919      	ldr	r1, [r3, #16]
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002288:	f7ff fc34 	bl	8001af4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6818      	ldr	r0, [r3, #0]
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	6919      	ldr	r1, [r3, #16]
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	461a      	mov	r2, r3
 800229a:	f7ff fc79 	bl	8001b90 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6818      	ldr	r0, [r3, #0]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	6919      	ldr	r1, [r3, #16]
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	7f1b      	ldrb	r3, [r3, #28]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d102      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x124>
 80022ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022b2:	e000      	b.n	80022b6 <HAL_ADC_ConfigChannel+0x126>
 80022b4:	2300      	movs	r3, #0
 80022b6:	461a      	mov	r2, r3
 80022b8:	f7ff fc82 	bl	8001bc0 <LL_ADC_SetOffsetSaturation>
 80022bc:	e11d      	b.n	80024fa <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2100      	movs	r1, #0
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff fc37 	bl	8001b38 <LL_ADC_GetOffsetChannel>
 80022ca:	4603      	mov	r3, r0
 80022cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10a      	bne.n	80022ea <HAL_ADC_ConfigChannel+0x15a>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2100      	movs	r1, #0
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff fc2c 	bl	8001b38 <LL_ADC_GetOffsetChannel>
 80022e0:	4603      	mov	r3, r0
 80022e2:	0e9b      	lsrs	r3, r3, #26
 80022e4:	f003 021f 	and.w	r2, r3, #31
 80022e8:	e012      	b.n	8002310 <HAL_ADC_ConfigChannel+0x180>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2100      	movs	r1, #0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff fc21 	bl	8001b38 <LL_ADC_GetOffsetChannel>
 80022f6:	4603      	mov	r3, r0
 80022f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002300:	fa93 f3a3 	rbit	r3, r3
 8002304:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002306:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002308:	fab3 f383 	clz	r3, r3
 800230c:	b2db      	uxtb	r3, r3
 800230e:	461a      	mov	r2, r3
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002318:	2b00      	cmp	r3, #0
 800231a:	d105      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x198>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	0e9b      	lsrs	r3, r3, #26
 8002322:	f003 031f 	and.w	r3, r3, #31
 8002326:	e00a      	b.n	800233e <HAL_ADC_ConfigChannel+0x1ae>
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002330:	fa93 f3a3 	rbit	r3, r3
 8002334:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8002336:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002338:	fab3 f383 	clz	r3, r3
 800233c:	b2db      	uxtb	r3, r3
 800233e:	429a      	cmp	r2, r3
 8002340:	d106      	bne.n	8002350 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2200      	movs	r2, #0
 8002348:	2100      	movs	r1, #0
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff fc08 	bl	8001b60 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2101      	movs	r1, #1
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff fbee 	bl	8001b38 <LL_ADC_GetOffsetChannel>
 800235c:	4603      	mov	r3, r0
 800235e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002362:	2b00      	cmp	r3, #0
 8002364:	d10a      	bne.n	800237c <HAL_ADC_ConfigChannel+0x1ec>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2101      	movs	r1, #1
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff fbe3 	bl	8001b38 <LL_ADC_GetOffsetChannel>
 8002372:	4603      	mov	r3, r0
 8002374:	0e9b      	lsrs	r3, r3, #26
 8002376:	f003 021f 	and.w	r2, r3, #31
 800237a:	e010      	b.n	800239e <HAL_ADC_ConfigChannel+0x20e>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2101      	movs	r1, #1
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff fbd8 	bl	8001b38 <LL_ADC_GetOffsetChannel>
 8002388:	4603      	mov	r3, r0
 800238a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800238e:	fa93 f3a3 	rbit	r3, r3
 8002392:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002396:	fab3 f383 	clz	r3, r3
 800239a:	b2db      	uxtb	r3, r3
 800239c:	461a      	mov	r2, r3
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d105      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x226>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	0e9b      	lsrs	r3, r3, #26
 80023b0:	f003 031f 	and.w	r3, r3, #31
 80023b4:	e00a      	b.n	80023cc <HAL_ADC_ConfigChannel+0x23c>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023be:	fa93 f3a3 	rbit	r3, r3
 80023c2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80023c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023c6:	fab3 f383 	clz	r3, r3
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d106      	bne.n	80023de <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2200      	movs	r2, #0
 80023d6:	2101      	movs	r1, #1
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff fbc1 	bl	8001b60 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2102      	movs	r1, #2
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff fba7 	bl	8001b38 <LL_ADC_GetOffsetChannel>
 80023ea:	4603      	mov	r3, r0
 80023ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10a      	bne.n	800240a <HAL_ADC_ConfigChannel+0x27a>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2102      	movs	r1, #2
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff fb9c 	bl	8001b38 <LL_ADC_GetOffsetChannel>
 8002400:	4603      	mov	r3, r0
 8002402:	0e9b      	lsrs	r3, r3, #26
 8002404:	f003 021f 	and.w	r2, r3, #31
 8002408:	e010      	b.n	800242c <HAL_ADC_ConfigChannel+0x29c>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2102      	movs	r1, #2
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff fb91 	bl	8001b38 <LL_ADC_GetOffsetChannel>
 8002416:	4603      	mov	r3, r0
 8002418:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800241c:	fa93 f3a3 	rbit	r3, r3
 8002420:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8002422:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002424:	fab3 f383 	clz	r3, r3
 8002428:	b2db      	uxtb	r3, r3
 800242a:	461a      	mov	r2, r3
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002434:	2b00      	cmp	r3, #0
 8002436:	d105      	bne.n	8002444 <HAL_ADC_ConfigChannel+0x2b4>
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	0e9b      	lsrs	r3, r3, #26
 800243e:	f003 031f 	and.w	r3, r3, #31
 8002442:	e00a      	b.n	800245a <HAL_ADC_ConfigChannel+0x2ca>
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800244c:	fa93 f3a3 	rbit	r3, r3
 8002450:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002454:	fab3 f383 	clz	r3, r3
 8002458:	b2db      	uxtb	r3, r3
 800245a:	429a      	cmp	r2, r3
 800245c:	d106      	bne.n	800246c <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2200      	movs	r2, #0
 8002464:	2102      	movs	r1, #2
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff fb7a 	bl	8001b60 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2103      	movs	r1, #3
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff fb60 	bl	8001b38 <LL_ADC_GetOffsetChannel>
 8002478:	4603      	mov	r3, r0
 800247a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10a      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x308>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2103      	movs	r1, #3
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff fb55 	bl	8001b38 <LL_ADC_GetOffsetChannel>
 800248e:	4603      	mov	r3, r0
 8002490:	0e9b      	lsrs	r3, r3, #26
 8002492:	f003 021f 	and.w	r2, r3, #31
 8002496:	e010      	b.n	80024ba <HAL_ADC_ConfigChannel+0x32a>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2103      	movs	r1, #3
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff fb4a 	bl	8001b38 <LL_ADC_GetOffsetChannel>
 80024a4:	4603      	mov	r3, r0
 80024a6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024aa:	fa93 f3a3 	rbit	r3, r3
 80024ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80024b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024b2:	fab3 f383 	clz	r3, r3
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	461a      	mov	r2, r3
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d105      	bne.n	80024d2 <HAL_ADC_ConfigChannel+0x342>
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	0e9b      	lsrs	r3, r3, #26
 80024cc:	f003 031f 	and.w	r3, r3, #31
 80024d0:	e00a      	b.n	80024e8 <HAL_ADC_ConfigChannel+0x358>
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024da:	fa93 f3a3 	rbit	r3, r3
 80024de:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 80024e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024e2:	fab3 f383 	clz	r3, r3
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d106      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2200      	movs	r2, #0
 80024f2:	2103      	movs	r1, #3
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff fb33 	bl	8001b60 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff fc4c 	bl	8001d9c <LL_ADC_IsEnabled>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	f040 810c 	bne.w	8002724 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6818      	ldr	r0, [r3, #0]
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	6819      	ldr	r1, [r3, #0]
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	461a      	mov	r2, r3
 800251a:	f7ff fbcd 	bl	8001cb8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	4aaf      	ldr	r2, [pc, #700]	; (80027e0 <HAL_ADC_ConfigChannel+0x650>)
 8002524:	4293      	cmp	r3, r2
 8002526:	f040 80fd 	bne.w	8002724 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10b      	bne.n	8002552 <HAL_ADC_ConfigChannel+0x3c2>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	0e9b      	lsrs	r3, r3, #26
 8002540:	3301      	adds	r3, #1
 8002542:	f003 031f 	and.w	r3, r3, #31
 8002546:	2b09      	cmp	r3, #9
 8002548:	bf94      	ite	ls
 800254a:	2301      	movls	r3, #1
 800254c:	2300      	movhi	r3, #0
 800254e:	b2db      	uxtb	r3, r3
 8002550:	e012      	b.n	8002578 <HAL_ADC_ConfigChannel+0x3e8>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002558:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800255a:	fa93 f3a3 	rbit	r3, r3
 800255e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002562:	fab3 f383 	clz	r3, r3
 8002566:	b2db      	uxtb	r3, r3
 8002568:	3301      	adds	r3, #1
 800256a:	f003 031f 	and.w	r3, r3, #31
 800256e:	2b09      	cmp	r3, #9
 8002570:	bf94      	ite	ls
 8002572:	2301      	movls	r3, #1
 8002574:	2300      	movhi	r3, #0
 8002576:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002578:	2b00      	cmp	r3, #0
 800257a:	d064      	beq.n	8002646 <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002584:	2b00      	cmp	r3, #0
 8002586:	d107      	bne.n	8002598 <HAL_ADC_ConfigChannel+0x408>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	0e9b      	lsrs	r3, r3, #26
 800258e:	3301      	adds	r3, #1
 8002590:	069b      	lsls	r3, r3, #26
 8002592:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002596:	e00e      	b.n	80025b6 <HAL_ADC_ConfigChannel+0x426>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a0:	fa93 f3a3 	rbit	r3, r3
 80025a4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80025a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025a8:	fab3 f383 	clz	r3, r3
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	3301      	adds	r3, #1
 80025b0:	069b      	lsls	r3, r3, #26
 80025b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d109      	bne.n	80025d6 <HAL_ADC_ConfigChannel+0x446>
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	0e9b      	lsrs	r3, r3, #26
 80025c8:	3301      	adds	r3, #1
 80025ca:	f003 031f 	and.w	r3, r3, #31
 80025ce:	2101      	movs	r1, #1
 80025d0:	fa01 f303 	lsl.w	r3, r1, r3
 80025d4:	e010      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x468>
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025de:	fa93 f3a3 	rbit	r3, r3
 80025e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80025e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e6:	fab3 f383 	clz	r3, r3
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	3301      	adds	r3, #1
 80025ee:	f003 031f 	and.w	r3, r3, #31
 80025f2:	2101      	movs	r1, #1
 80025f4:	fa01 f303 	lsl.w	r3, r1, r3
 80025f8:	ea42 0103 	orr.w	r1, r2, r3
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10a      	bne.n	800261e <HAL_ADC_ConfigChannel+0x48e>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	0e9b      	lsrs	r3, r3, #26
 800260e:	3301      	adds	r3, #1
 8002610:	f003 021f 	and.w	r2, r3, #31
 8002614:	4613      	mov	r3, r2
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	4413      	add	r3, r2
 800261a:	051b      	lsls	r3, r3, #20
 800261c:	e011      	b.n	8002642 <HAL_ADC_ConfigChannel+0x4b2>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002626:	fa93 f3a3 	rbit	r3, r3
 800262a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	fab3 f383 	clz	r3, r3
 8002632:	b2db      	uxtb	r3, r3
 8002634:	3301      	adds	r3, #1
 8002636:	f003 021f 	and.w	r2, r3, #31
 800263a:	4613      	mov	r3, r2
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	4413      	add	r3, r2
 8002640:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002642:	430b      	orrs	r3, r1
 8002644:	e069      	b.n	800271a <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800264e:	2b00      	cmp	r3, #0
 8002650:	d107      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x4d2>
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	0e9b      	lsrs	r3, r3, #26
 8002658:	3301      	adds	r3, #1
 800265a:	069b      	lsls	r3, r3, #26
 800265c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002660:	e00e      	b.n	8002680 <HAL_ADC_ConfigChannel+0x4f0>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002668:	6a3b      	ldr	r3, [r7, #32]
 800266a:	fa93 f3a3 	rbit	r3, r3
 800266e:	61fb      	str	r3, [r7, #28]
  return result;
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	fab3 f383 	clz	r3, r3
 8002676:	b2db      	uxtb	r3, r3
 8002678:	3301      	adds	r3, #1
 800267a:	069b      	lsls	r3, r3, #26
 800267c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002688:	2b00      	cmp	r3, #0
 800268a:	d109      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x510>
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	0e9b      	lsrs	r3, r3, #26
 8002692:	3301      	adds	r3, #1
 8002694:	f003 031f 	and.w	r3, r3, #31
 8002698:	2101      	movs	r1, #1
 800269a:	fa01 f303 	lsl.w	r3, r1, r3
 800269e:	e010      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x532>
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	fa93 f3a3 	rbit	r3, r3
 80026ac:	617b      	str	r3, [r7, #20]
  return result;
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	fab3 f383 	clz	r3, r3
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	3301      	adds	r3, #1
 80026b8:	f003 031f 	and.w	r3, r3, #31
 80026bc:	2101      	movs	r1, #1
 80026be:	fa01 f303 	lsl.w	r3, r1, r3
 80026c2:	ea42 0103 	orr.w	r1, r2, r3
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10d      	bne.n	80026ee <HAL_ADC_ConfigChannel+0x55e>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	0e9b      	lsrs	r3, r3, #26
 80026d8:	3301      	adds	r3, #1
 80026da:	f003 021f 	and.w	r2, r3, #31
 80026de:	4613      	mov	r3, r2
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	4413      	add	r3, r2
 80026e4:	3b1e      	subs	r3, #30
 80026e6:	051b      	lsls	r3, r3, #20
 80026e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026ec:	e014      	b.n	8002718 <HAL_ADC_ConfigChannel+0x588>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	fa93 f3a3 	rbit	r3, r3
 80026fa:	60fb      	str	r3, [r7, #12]
  return result;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	fab3 f383 	clz	r3, r3
 8002702:	b2db      	uxtb	r3, r3
 8002704:	3301      	adds	r3, #1
 8002706:	f003 021f 	and.w	r2, r3, #31
 800270a:	4613      	mov	r3, r2
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	4413      	add	r3, r2
 8002710:	3b1e      	subs	r3, #30
 8002712:	051b      	lsls	r3, r3, #20
 8002714:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002718:	430b      	orrs	r3, r1
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	6892      	ldr	r2, [r2, #8]
 800271e:	4619      	mov	r1, r3
 8002720:	f7ff faa2 	bl	8001c68 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	4b2e      	ldr	r3, [pc, #184]	; (80027e4 <HAL_ADC_ConfigChannel+0x654>)
 800272a:	4013      	ands	r3, r2
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 80c9 	beq.w	80028c4 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800273a:	d004      	beq.n	8002746 <HAL_ADC_ConfigChannel+0x5b6>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a29      	ldr	r2, [pc, #164]	; (80027e8 <HAL_ADC_ConfigChannel+0x658>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d101      	bne.n	800274a <HAL_ADC_ConfigChannel+0x5ba>
 8002746:	4b29      	ldr	r3, [pc, #164]	; (80027ec <HAL_ADC_ConfigChannel+0x65c>)
 8002748:	e000      	b.n	800274c <HAL_ADC_ConfigChannel+0x5bc>
 800274a:	4b29      	ldr	r3, [pc, #164]	; (80027f0 <HAL_ADC_ConfigChannel+0x660>)
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff f9c3 	bl	8001ad8 <LL_ADC_GetCommonPathInternalCh>
 8002752:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a26      	ldr	r2, [pc, #152]	; (80027f4 <HAL_ADC_ConfigChannel+0x664>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d004      	beq.n	800276a <HAL_ADC_ConfigChannel+0x5da>
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a24      	ldr	r2, [pc, #144]	; (80027f8 <HAL_ADC_ConfigChannel+0x668>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d14e      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800276a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800276e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d148      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800277e:	d005      	beq.n	800278c <HAL_ADC_ConfigChannel+0x5fc>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a1d      	ldr	r2, [pc, #116]	; (80027fc <HAL_ADC_ConfigChannel+0x66c>)
 8002786:	4293      	cmp	r3, r2
 8002788:	f040 8099 	bne.w	80028be <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002794:	d004      	beq.n	80027a0 <HAL_ADC_ConfigChannel+0x610>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a13      	ldr	r2, [pc, #76]	; (80027e8 <HAL_ADC_ConfigChannel+0x658>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d101      	bne.n	80027a4 <HAL_ADC_ConfigChannel+0x614>
 80027a0:	4a12      	ldr	r2, [pc, #72]	; (80027ec <HAL_ADC_ConfigChannel+0x65c>)
 80027a2:	e000      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x616>
 80027a4:	4a12      	ldr	r2, [pc, #72]	; (80027f0 <HAL_ADC_ConfigChannel+0x660>)
 80027a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027ae:	4619      	mov	r1, r3
 80027b0:	4610      	mov	r0, r2
 80027b2:	f7ff f97e 	bl	8001ab2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80027b6:	4b12      	ldr	r3, [pc, #72]	; (8002800 <HAL_ADC_ConfigChannel+0x670>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	099b      	lsrs	r3, r3, #6
 80027bc:	4a11      	ldr	r2, [pc, #68]	; (8002804 <HAL_ADC_ConfigChannel+0x674>)
 80027be:	fba2 2303 	umull	r2, r3, r2, r3
 80027c2:	099a      	lsrs	r2, r3, #6
 80027c4:	4613      	mov	r3, r2
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	4413      	add	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80027ce:	e002      	b.n	80027d6 <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1f9      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027dc:	e06f      	b.n	80028be <HAL_ADC_ConfigChannel+0x72e>
 80027de:	bf00      	nop
 80027e0:	407f0000 	.word	0x407f0000
 80027e4:	80080000 	.word	0x80080000
 80027e8:	50000100 	.word	0x50000100
 80027ec:	50000300 	.word	0x50000300
 80027f0:	50000700 	.word	0x50000700
 80027f4:	c3210000 	.word	0xc3210000
 80027f8:	90c00010 	.word	0x90c00010
 80027fc:	50000600 	.word	0x50000600
 8002800:	20001f44 	.word	0x20001f44
 8002804:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a32      	ldr	r2, [pc, #200]	; (80028d8 <HAL_ADC_ConfigChannel+0x748>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d125      	bne.n	800285e <HAL_ADC_ConfigChannel+0x6ce>
 8002812:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002816:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d11f      	bne.n	800285e <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a2e      	ldr	r2, [pc, #184]	; (80028dc <HAL_ADC_ConfigChannel+0x74c>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d104      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x6a2>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a2c      	ldr	r2, [pc, #176]	; (80028e0 <HAL_ADC_ConfigChannel+0x750>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d047      	beq.n	80028c2 <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800283a:	d004      	beq.n	8002846 <HAL_ADC_ConfigChannel+0x6b6>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a26      	ldr	r2, [pc, #152]	; (80028dc <HAL_ADC_ConfigChannel+0x74c>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d101      	bne.n	800284a <HAL_ADC_ConfigChannel+0x6ba>
 8002846:	4a27      	ldr	r2, [pc, #156]	; (80028e4 <HAL_ADC_ConfigChannel+0x754>)
 8002848:	e000      	b.n	800284c <HAL_ADC_ConfigChannel+0x6bc>
 800284a:	4a27      	ldr	r2, [pc, #156]	; (80028e8 <HAL_ADC_ConfigChannel+0x758>)
 800284c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002850:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002854:	4619      	mov	r1, r3
 8002856:	4610      	mov	r0, r2
 8002858:	f7ff f92b 	bl	8001ab2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800285c:	e031      	b.n	80028c2 <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a22      	ldr	r2, [pc, #136]	; (80028ec <HAL_ADC_ConfigChannel+0x75c>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d12d      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002868:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800286c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d127      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a18      	ldr	r2, [pc, #96]	; (80028dc <HAL_ADC_ConfigChannel+0x74c>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d022      	beq.n	80028c4 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002886:	d004      	beq.n	8002892 <HAL_ADC_ConfigChannel+0x702>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a13      	ldr	r2, [pc, #76]	; (80028dc <HAL_ADC_ConfigChannel+0x74c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d101      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x706>
 8002892:	4a14      	ldr	r2, [pc, #80]	; (80028e4 <HAL_ADC_ConfigChannel+0x754>)
 8002894:	e000      	b.n	8002898 <HAL_ADC_ConfigChannel+0x708>
 8002896:	4a14      	ldr	r2, [pc, #80]	; (80028e8 <HAL_ADC_ConfigChannel+0x758>)
 8002898:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800289c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028a0:	4619      	mov	r1, r3
 80028a2:	4610      	mov	r0, r2
 80028a4:	f7ff f905 	bl	8001ab2 <LL_ADC_SetCommonPathInternalCh>
 80028a8:	e00c      	b.n	80028c4 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ae:	f043 0220 	orr.w	r2, r3, #32
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80028bc:	e002      	b.n	80028c4 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028be:	bf00      	nop
 80028c0:	e000      	b.n	80028c4 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028c2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80028cc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3798      	adds	r7, #152	; 0x98
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	c7520000 	.word	0xc7520000
 80028dc:	50000100 	.word	0x50000100
 80028e0:	50000500 	.word	0x50000500
 80028e4:	50000300 	.word	0x50000300
 80028e8:	50000700 	.word	0x50000700
 80028ec:	cb840000 	.word	0xcb840000

080028f0 <LL_ADC_IsEnabled>:
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	2b01      	cmp	r3, #1
 8002902:	d101      	bne.n	8002908 <LL_ADC_IsEnabled+0x18>
 8002904:	2301      	movs	r3, #1
 8002906:	e000      	b.n	800290a <LL_ADC_IsEnabled+0x1a>
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <LL_ADC_REG_IsConversionOngoing>:
{
 8002916:	b480      	push	{r7}
 8002918:	b083      	sub	sp, #12
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 0304 	and.w	r3, r3, #4
 8002926:	2b04      	cmp	r3, #4
 8002928:	d101      	bne.n	800292e <LL_ADC_REG_IsConversionOngoing+0x18>
 800292a:	2301      	movs	r3, #1
 800292c:	e000      	b.n	8002930 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800293c:	b590      	push	{r4, r7, lr}
 800293e:	b0a1      	sub	sp, #132	; 0x84
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002946:	2300      	movs	r3, #0
 8002948:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002952:	2b01      	cmp	r3, #1
 8002954:	d101      	bne.n	800295a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002956:	2302      	movs	r3, #2
 8002958:	e0e3      	b.n	8002b22 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800296a:	d102      	bne.n	8002972 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 800296c:	4b6f      	ldr	r3, [pc, #444]	; (8002b2c <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800296e:	60bb      	str	r3, [r7, #8]
 8002970:	e009      	b.n	8002986 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a6e      	ldr	r2, [pc, #440]	; (8002b30 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d102      	bne.n	8002982 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 800297c:	4b6d      	ldr	r3, [pc, #436]	; (8002b34 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800297e:	60bb      	str	r3, [r7, #8]
 8002980:	e001      	b.n	8002986 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8002982:	2300      	movs	r3, #0
 8002984:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10b      	bne.n	80029a4 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002990:	f043 0220 	orr.w	r2, r3, #32
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e0be      	b.n	8002b22 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff ffb5 	bl	8002916 <LL_ADC_REG_IsConversionOngoing>
 80029ac:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff ffaf 	bl	8002916 <LL_ADC_REG_IsConversionOngoing>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f040 80a0 	bne.w	8002b00 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80029c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f040 809c 	bne.w	8002b00 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029d0:	d004      	beq.n	80029dc <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a55      	ldr	r2, [pc, #340]	; (8002b2c <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d101      	bne.n	80029e0 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 80029dc:	4b56      	ldr	r3, [pc, #344]	; (8002b38 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80029de:	e000      	b.n	80029e2 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 80029e0:	4b56      	ldr	r3, [pc, #344]	; (8002b3c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80029e2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d04b      	beq.n	8002a84 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80029ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	6859      	ldr	r1, [r3, #4]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029fe:	035b      	lsls	r3, r3, #13
 8002a00:	430b      	orrs	r3, r1
 8002a02:	431a      	orrs	r2, r3
 8002a04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a06:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a10:	d004      	beq.n	8002a1c <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a45      	ldr	r2, [pc, #276]	; (8002b2c <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d10f      	bne.n	8002a3c <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8002a1c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002a20:	f7ff ff66 	bl	80028f0 <LL_ADC_IsEnabled>
 8002a24:	4604      	mov	r4, r0
 8002a26:	4841      	ldr	r0, [pc, #260]	; (8002b2c <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002a28:	f7ff ff62 	bl	80028f0 <LL_ADC_IsEnabled>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	4323      	orrs	r3, r4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	bf0c      	ite	eq
 8002a34:	2301      	moveq	r3, #1
 8002a36:	2300      	movne	r3, #0
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	e012      	b.n	8002a62 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8002a3c:	483c      	ldr	r0, [pc, #240]	; (8002b30 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8002a3e:	f7ff ff57 	bl	80028f0 <LL_ADC_IsEnabled>
 8002a42:	4604      	mov	r4, r0
 8002a44:	483b      	ldr	r0, [pc, #236]	; (8002b34 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a46:	f7ff ff53 	bl	80028f0 <LL_ADC_IsEnabled>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	431c      	orrs	r4, r3
 8002a4e:	483c      	ldr	r0, [pc, #240]	; (8002b40 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002a50:	f7ff ff4e 	bl	80028f0 <LL_ADC_IsEnabled>
 8002a54:	4603      	mov	r3, r0
 8002a56:	4323      	orrs	r3, r4
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	bf0c      	ite	eq
 8002a5c:	2301      	moveq	r3, #1
 8002a5e:	2300      	movne	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d056      	beq.n	8002b14 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a6e:	f023 030f 	bic.w	r3, r3, #15
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	6811      	ldr	r1, [r2, #0]
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	6892      	ldr	r2, [r2, #8]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a80:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a82:	e047      	b.n	8002b14 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a8e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a98:	d004      	beq.n	8002aa4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a23      	ldr	r2, [pc, #140]	; (8002b2c <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d10f      	bne.n	8002ac4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002aa4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002aa8:	f7ff ff22 	bl	80028f0 <LL_ADC_IsEnabled>
 8002aac:	4604      	mov	r4, r0
 8002aae:	481f      	ldr	r0, [pc, #124]	; (8002b2c <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002ab0:	f7ff ff1e 	bl	80028f0 <LL_ADC_IsEnabled>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	4323      	orrs	r3, r4
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	bf0c      	ite	eq
 8002abc:	2301      	moveq	r3, #1
 8002abe:	2300      	movne	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	e012      	b.n	8002aea <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8002ac4:	481a      	ldr	r0, [pc, #104]	; (8002b30 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8002ac6:	f7ff ff13 	bl	80028f0 <LL_ADC_IsEnabled>
 8002aca:	4604      	mov	r4, r0
 8002acc:	4819      	ldr	r0, [pc, #100]	; (8002b34 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ace:	f7ff ff0f 	bl	80028f0 <LL_ADC_IsEnabled>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	431c      	orrs	r4, r3
 8002ad6:	481a      	ldr	r0, [pc, #104]	; (8002b40 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002ad8:	f7ff ff0a 	bl	80028f0 <LL_ADC_IsEnabled>
 8002adc:	4603      	mov	r3, r0
 8002ade:	4323      	orrs	r3, r4
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	bf0c      	ite	eq
 8002ae4:	2301      	moveq	r3, #1
 8002ae6:	2300      	movne	r3, #0
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d012      	beq.n	8002b14 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002aee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002af6:	f023 030f 	bic.w	r3, r3, #15
 8002afa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002afc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002afe:	e009      	b.n	8002b14 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b04:	f043 0220 	orr.w	r2, r3, #32
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002b12:	e000      	b.n	8002b16 <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b14:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002b1e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3784      	adds	r7, #132	; 0x84
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd90      	pop	{r4, r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	50000100 	.word	0x50000100
 8002b30:	50000400 	.word	0x50000400
 8002b34:	50000500 	.word	0x50000500
 8002b38:	50000300 	.word	0x50000300
 8002b3c:	50000700 	.word	0x50000700
 8002b40:	50000600 	.word	0x50000600

08002b44 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002b4c:	4b05      	ldr	r3, [pc, #20]	; (8002b64 <LL_EXTI_EnableIT_0_31+0x20>)
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	4904      	ldr	r1, [pc, #16]	; (8002b64 <LL_EXTI_EnableIT_0_31+0x20>)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	600b      	str	r3, [r1, #0]
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	40010400 	.word	0x40010400

08002b68 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002b70:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <LL_EXTI_EnableIT_32_63+0x20>)
 8002b72:	6a1a      	ldr	r2, [r3, #32]
 8002b74:	4904      	ldr	r1, [pc, #16]	; (8002b88 <LL_EXTI_EnableIT_32_63+0x20>)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	620b      	str	r3, [r1, #32]
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	40010400 	.word	0x40010400

08002b8c <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002b94:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <LL_EXTI_DisableIT_0_31+0x24>)
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	4904      	ldr	r1, [pc, #16]	; (8002bb0 <LL_EXTI_DisableIT_0_31+0x24>)
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	600b      	str	r3, [r1, #0]
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	40010400 	.word	0x40010400

08002bb4 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8002bbc:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <LL_EXTI_DisableIT_32_63+0x24>)
 8002bbe:	6a1a      	ldr	r2, [r3, #32]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	4904      	ldr	r1, [pc, #16]	; (8002bd8 <LL_EXTI_DisableIT_32_63+0x24>)
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	620b      	str	r3, [r1, #32]
}
 8002bca:	bf00      	nop
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	40010400 	.word	0x40010400

08002bdc <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8002be4:	4b05      	ldr	r3, [pc, #20]	; (8002bfc <LL_EXTI_EnableEvent_0_31+0x20>)
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	4904      	ldr	r1, [pc, #16]	; (8002bfc <LL_EXTI_EnableEvent_0_31+0x20>)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	604b      	str	r3, [r1, #4]

}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	40010400 	.word	0x40010400

08002c00 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8002c08:	4b05      	ldr	r3, [pc, #20]	; (8002c20 <LL_EXTI_EnableEvent_32_63+0x20>)
 8002c0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c0c:	4904      	ldr	r1, [pc, #16]	; (8002c20 <LL_EXTI_EnableEvent_32_63+0x20>)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	40010400 	.word	0x40010400

08002c24 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002c2c:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	43db      	mvns	r3, r3
 8002c34:	4904      	ldr	r1, [pc, #16]	; (8002c48 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002c36:	4013      	ands	r3, r2
 8002c38:	604b      	str	r3, [r1, #4]
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	40010400 	.word	0x40010400

08002c4c <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8002c54:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <LL_EXTI_DisableEvent_32_63+0x24>)
 8002c56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	43db      	mvns	r3, r3
 8002c5c:	4904      	ldr	r1, [pc, #16]	; (8002c70 <LL_EXTI_DisableEvent_32_63+0x24>)
 8002c5e:	4013      	ands	r3, r2
 8002c60:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	40010400 	.word	0x40010400

08002c74 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002c7c:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	4904      	ldr	r1, [pc, #16]	; (8002c94 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	608b      	str	r3, [r1, #8]

}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	40010400 	.word	0x40010400

08002c98 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8002ca0:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002ca2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ca4:	4904      	ldr	r1, [pc, #16]	; (8002cb8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr
 8002cb8:	40010400 	.word	0x40010400

08002cbc <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8002cc4:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	4904      	ldr	r1, [pc, #16]	; (8002ce0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002cce:	4013      	ands	r3, r2
 8002cd0:	608b      	str	r3, [r1, #8]

}
 8002cd2:	bf00      	nop
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	40010400 	.word	0x40010400

08002ce4 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8002cec:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002cee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	4904      	ldr	r1, [pc, #16]	; (8002d08 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	40010400 	.word	0x40010400

08002d0c <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8002d14:	4b05      	ldr	r3, [pc, #20]	; (8002d2c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002d16:	68da      	ldr	r2, [r3, #12]
 8002d18:	4904      	ldr	r1, [pc, #16]	; (8002d2c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	60cb      	str	r3, [r1, #12]
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	40010400 	.word	0x40010400

08002d30 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8002d38:	4b05      	ldr	r3, [pc, #20]	; (8002d50 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d3c:	4904      	ldr	r1, [pc, #16]	; (8002d50 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	40010400 	.word	0x40010400

08002d54 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8002d5c:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002d5e:	68da      	ldr	r2, [r3, #12]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	43db      	mvns	r3, r3
 8002d64:	4904      	ldr	r1, [pc, #16]	; (8002d78 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002d66:	4013      	ands	r3, r2
 8002d68:	60cb      	str	r3, [r1, #12]
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40010400 	.word	0x40010400

08002d7c <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8002d84:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	4904      	ldr	r1, [pc, #16]	; (8002da0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002d8e:	4013      	ands	r3, r2
 8002d90:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	40010400 	.word	0x40010400

08002da4 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8002dac:	4a04      	ldr	r2, [pc, #16]	; (8002dc0 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6153      	str	r3, [r2, #20]
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	40010400 	.word	0x40010400

08002dc4 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8002dcc:	4a04      	ldr	r2, [pc, #16]	; (8002de0 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6353      	str	r3, [r2, #52]	; 0x34
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	40010400 	.word	0x40010400

08002de4 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b088      	sub	sp, #32
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8002dec:	2300      	movs	r3, #0
 8002dee:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d102      	bne.n	8002e00 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	77fb      	strb	r3, [r7, #31]
 8002dfe:	e180      	b.n	8003102 <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e0e:	d102      	bne.n	8002e16 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	77fb      	strb	r3, [r7, #31]
 8002e14:	e175      	b.n	8003102 <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	7f5b      	ldrb	r3, [r3, #29]
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d108      	bne.n	8002e32 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f7fd fb53 	bl	80004d8 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e3c:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	4b98      	ldr	r3, [pc, #608]	; (80030c4 <HAL_COMP_Init+0x2e0>)
 8002e64:	4013      	ands	r3, r2
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	6812      	ldr	r2, [r2, #0]
 8002e6a:	6979      	ldr	r1, [r7, #20]
 8002e6c:	430b      	orrs	r3, r1
 8002e6e:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d015      	beq.n	8002eaa <HAL_COMP_Init+0xc6>
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d112      	bne.n	8002eaa <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002e84:	4b90      	ldr	r3, [pc, #576]	; (80030c8 <HAL_COMP_Init+0x2e4>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	099b      	lsrs	r3, r3, #6
 8002e8a:	4a90      	ldr	r2, [pc, #576]	; (80030cc <HAL_COMP_Init+0x2e8>)
 8002e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e90:	099a      	lsrs	r2, r3, #6
 8002e92:	4613      	mov	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4413      	add	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8002e9c:	e002      	b.n	8002ea4 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1f9      	bne.n	8002e9e <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a88      	ldr	r2, [pc, #544]	; (80030d0 <HAL_COMP_Init+0x2ec>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d028      	beq.n	8002f06 <HAL_COMP_Init+0x122>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a86      	ldr	r2, [pc, #536]	; (80030d4 <HAL_COMP_Init+0x2f0>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d020      	beq.n	8002f00 <HAL_COMP_Init+0x11c>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a85      	ldr	r2, [pc, #532]	; (80030d8 <HAL_COMP_Init+0x2f4>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d018      	beq.n	8002efa <HAL_COMP_Init+0x116>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a83      	ldr	r2, [pc, #524]	; (80030dc <HAL_COMP_Init+0x2f8>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d010      	beq.n	8002ef4 <HAL_COMP_Init+0x110>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a82      	ldr	r2, [pc, #520]	; (80030e0 <HAL_COMP_Init+0x2fc>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d008      	beq.n	8002eee <HAL_COMP_Init+0x10a>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a80      	ldr	r2, [pc, #512]	; (80030e4 <HAL_COMP_Init+0x300>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d101      	bne.n	8002eea <HAL_COMP_Init+0x106>
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e00f      	b.n	8002f0a <HAL_COMP_Init+0x126>
 8002eea:	2302      	movs	r3, #2
 8002eec:	e00d      	b.n	8002f0a <HAL_COMP_Init+0x126>
 8002eee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002ef2:	e00a      	b.n	8002f0a <HAL_COMP_Init+0x126>
 8002ef4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ef8:	e007      	b.n	8002f0a <HAL_COMP_Init+0x126>
 8002efa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002efe:	e004      	b.n	8002f0a <HAL_COMP_Init+0x126>
 8002f00:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f04:	e001      	b.n	8002f0a <HAL_COMP_Init+0x126>
 8002f06:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f0a:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	f003 0303 	and.w	r3, r3, #3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 80b6 	beq.w	8003086 <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	f003 0310 	and.w	r3, r3, #16
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d011      	beq.n	8002f4a <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a6e      	ldr	r2, [pc, #440]	; (80030e4 <HAL_COMP_Init+0x300>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d004      	beq.n	8002f3a <HAL_COMP_Init+0x156>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a6c      	ldr	r2, [pc, #432]	; (80030e8 <HAL_COMP_Init+0x304>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d103      	bne.n	8002f42 <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8002f3a:	6938      	ldr	r0, [r7, #16]
 8002f3c:	f7ff feac 	bl	8002c98 <LL_EXTI_EnableRisingTrig_32_63>
 8002f40:	e014      	b.n	8002f6c <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8002f42:	6938      	ldr	r0, [r7, #16]
 8002f44:	f7ff fe96 	bl	8002c74 <LL_EXTI_EnableRisingTrig_0_31>
 8002f48:	e010      	b.n	8002f6c <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a65      	ldr	r2, [pc, #404]	; (80030e4 <HAL_COMP_Init+0x300>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d004      	beq.n	8002f5e <HAL_COMP_Init+0x17a>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a63      	ldr	r2, [pc, #396]	; (80030e8 <HAL_COMP_Init+0x304>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d103      	bne.n	8002f66 <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8002f5e:	6938      	ldr	r0, [r7, #16]
 8002f60:	f7ff fec0 	bl	8002ce4 <LL_EXTI_DisableRisingTrig_32_63>
 8002f64:	e002      	b.n	8002f6c <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8002f66:	6938      	ldr	r0, [r7, #16]
 8002f68:	f7ff fea8 	bl	8002cbc <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	f003 0320 	and.w	r3, r3, #32
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d011      	beq.n	8002f9c <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a59      	ldr	r2, [pc, #356]	; (80030e4 <HAL_COMP_Init+0x300>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d004      	beq.n	8002f8c <HAL_COMP_Init+0x1a8>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a58      	ldr	r2, [pc, #352]	; (80030e8 <HAL_COMP_Init+0x304>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d103      	bne.n	8002f94 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8002f8c:	6938      	ldr	r0, [r7, #16]
 8002f8e:	f7ff fecf 	bl	8002d30 <LL_EXTI_EnableFallingTrig_32_63>
 8002f92:	e014      	b.n	8002fbe <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8002f94:	6938      	ldr	r0, [r7, #16]
 8002f96:	f7ff feb9 	bl	8002d0c <LL_EXTI_EnableFallingTrig_0_31>
 8002f9a:	e010      	b.n	8002fbe <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a50      	ldr	r2, [pc, #320]	; (80030e4 <HAL_COMP_Init+0x300>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d004      	beq.n	8002fb0 <HAL_COMP_Init+0x1cc>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a4f      	ldr	r2, [pc, #316]	; (80030e8 <HAL_COMP_Init+0x304>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d103      	bne.n	8002fb8 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8002fb0:	6938      	ldr	r0, [r7, #16]
 8002fb2:	f7ff fee3 	bl	8002d7c <LL_EXTI_DisableFallingTrig_32_63>
 8002fb6:	e002      	b.n	8002fbe <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8002fb8:	6938      	ldr	r0, [r7, #16]
 8002fba:	f7ff fecb 	bl	8002d54 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a48      	ldr	r2, [pc, #288]	; (80030e4 <HAL_COMP_Init+0x300>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d004      	beq.n	8002fd2 <HAL_COMP_Init+0x1ee>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a46      	ldr	r2, [pc, #280]	; (80030e8 <HAL_COMP_Init+0x304>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d103      	bne.n	8002fda <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8002fd2:	6938      	ldr	r0, [r7, #16]
 8002fd4:	f7ff fef6 	bl	8002dc4 <LL_EXTI_ClearFlag_32_63>
 8002fd8:	e002      	b.n	8002fe0 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8002fda:	6938      	ldr	r0, [r7, #16]
 8002fdc:	f7ff fee2 	bl	8002da4 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d011      	beq.n	8003010 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a3c      	ldr	r2, [pc, #240]	; (80030e4 <HAL_COMP_Init+0x300>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d004      	beq.n	8003000 <HAL_COMP_Init+0x21c>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a3b      	ldr	r2, [pc, #236]	; (80030e8 <HAL_COMP_Init+0x304>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d103      	bne.n	8003008 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8003000:	6938      	ldr	r0, [r7, #16]
 8003002:	f7ff fdfd 	bl	8002c00 <LL_EXTI_EnableEvent_32_63>
 8003006:	e014      	b.n	8003032 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8003008:	6938      	ldr	r0, [r7, #16]
 800300a:	f7ff fde7 	bl	8002bdc <LL_EXTI_EnableEvent_0_31>
 800300e:	e010      	b.n	8003032 <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a33      	ldr	r2, [pc, #204]	; (80030e4 <HAL_COMP_Init+0x300>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d004      	beq.n	8003024 <HAL_COMP_Init+0x240>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a32      	ldr	r2, [pc, #200]	; (80030e8 <HAL_COMP_Init+0x304>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d103      	bne.n	800302c <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8003024:	6938      	ldr	r0, [r7, #16]
 8003026:	f7ff fe11 	bl	8002c4c <LL_EXTI_DisableEvent_32_63>
 800302a:	e002      	b.n	8003032 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 800302c:	6938      	ldr	r0, [r7, #16]
 800302e:	f7ff fdf9 	bl	8002c24 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d011      	beq.n	8003062 <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a28      	ldr	r2, [pc, #160]	; (80030e4 <HAL_COMP_Init+0x300>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d004      	beq.n	8003052 <HAL_COMP_Init+0x26e>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a26      	ldr	r2, [pc, #152]	; (80030e8 <HAL_COMP_Init+0x304>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d103      	bne.n	800305a <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8003052:	6938      	ldr	r0, [r7, #16]
 8003054:	f7ff fd88 	bl	8002b68 <LL_EXTI_EnableIT_32_63>
 8003058:	e04b      	b.n	80030f2 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 800305a:	6938      	ldr	r0, [r7, #16]
 800305c:	f7ff fd72 	bl	8002b44 <LL_EXTI_EnableIT_0_31>
 8003060:	e047      	b.n	80030f2 <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a1f      	ldr	r2, [pc, #124]	; (80030e4 <HAL_COMP_Init+0x300>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d004      	beq.n	8003076 <HAL_COMP_Init+0x292>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a1d      	ldr	r2, [pc, #116]	; (80030e8 <HAL_COMP_Init+0x304>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d103      	bne.n	800307e <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8003076:	6938      	ldr	r0, [r7, #16]
 8003078:	f7ff fd9c 	bl	8002bb4 <LL_EXTI_DisableIT_32_63>
 800307c:	e039      	b.n	80030f2 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 800307e:	6938      	ldr	r0, [r7, #16]
 8003080:	f7ff fd84 	bl	8002b8c <LL_EXTI_DisableIT_0_31>
 8003084:	e035      	b.n	80030f2 <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a16      	ldr	r2, [pc, #88]	; (80030e4 <HAL_COMP_Init+0x300>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d004      	beq.n	800309a <HAL_COMP_Init+0x2b6>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a14      	ldr	r2, [pc, #80]	; (80030e8 <HAL_COMP_Init+0x304>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d103      	bne.n	80030a2 <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 800309a:	6938      	ldr	r0, [r7, #16]
 800309c:	f7ff fdd6 	bl	8002c4c <LL_EXTI_DisableEvent_32_63>
 80030a0:	e002      	b.n	80030a8 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80030a2:	6938      	ldr	r0, [r7, #16]
 80030a4:	f7ff fdbe 	bl	8002c24 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a0d      	ldr	r2, [pc, #52]	; (80030e4 <HAL_COMP_Init+0x300>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d004      	beq.n	80030bc <HAL_COMP_Init+0x2d8>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a0c      	ldr	r2, [pc, #48]	; (80030e8 <HAL_COMP_Init+0x304>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d117      	bne.n	80030ec <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 80030bc:	6938      	ldr	r0, [r7, #16]
 80030be:	f7ff fd79 	bl	8002bb4 <LL_EXTI_DisableIT_32_63>
 80030c2:	e016      	b.n	80030f2 <HAL_COMP_Init+0x30e>
 80030c4:	ff007e0f 	.word	0xff007e0f
 80030c8:	20001f44 	.word	0x20001f44
 80030cc:	053e2d63 	.word	0x053e2d63
 80030d0:	40010200 	.word	0x40010200
 80030d4:	40010204 	.word	0x40010204
 80030d8:	40010208 	.word	0x40010208
 80030dc:	4001020c 	.word	0x4001020c
 80030e0:	40010210 	.word	0x40010210
 80030e4:	40010214 	.word	0x40010214
 80030e8:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80030ec:	6938      	ldr	r0, [r7, #16]
 80030ee:	f7ff fd4d 	bl	8002b8c <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	7f5b      	ldrb	r3, [r3, #29]
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d102      	bne.n	8003102 <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8003102:	7ffb      	ldrb	r3, [r7, #31]
}
 8003104:	4618      	mov	r0, r3
 8003106:	3720      	adds	r7, #32
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <__NVIC_SetPriorityGrouping>:
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800311c:	4b0c      	ldr	r3, [pc, #48]	; (8003150 <__NVIC_SetPriorityGrouping+0x44>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003128:	4013      	ands	r3, r2
 800312a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003134:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800313c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800313e:	4a04      	ldr	r2, [pc, #16]	; (8003150 <__NVIC_SetPriorityGrouping+0x44>)
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	60d3      	str	r3, [r2, #12]
}
 8003144:	bf00      	nop
 8003146:	3714      	adds	r7, #20
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr
 8003150:	e000ed00 	.word	0xe000ed00

08003154 <__NVIC_GetPriorityGrouping>:
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003158:	4b04      	ldr	r3, [pc, #16]	; (800316c <__NVIC_GetPriorityGrouping+0x18>)
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	0a1b      	lsrs	r3, r3, #8
 800315e:	f003 0307 	and.w	r3, r3, #7
}
 8003162:	4618      	mov	r0, r3
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	e000ed00 	.word	0xe000ed00

08003170 <__NVIC_EnableIRQ>:
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	4603      	mov	r3, r0
 8003178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800317a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317e:	2b00      	cmp	r3, #0
 8003180:	db0b      	blt.n	800319a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003182:	79fb      	ldrb	r3, [r7, #7]
 8003184:	f003 021f 	and.w	r2, r3, #31
 8003188:	4907      	ldr	r1, [pc, #28]	; (80031a8 <__NVIC_EnableIRQ+0x38>)
 800318a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318e:	095b      	lsrs	r3, r3, #5
 8003190:	2001      	movs	r0, #1
 8003192:	fa00 f202 	lsl.w	r2, r0, r2
 8003196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	e000e100 	.word	0xe000e100

080031ac <__NVIC_SetPriority>:
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	4603      	mov	r3, r0
 80031b4:	6039      	str	r1, [r7, #0]
 80031b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	db0a      	blt.n	80031d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	490c      	ldr	r1, [pc, #48]	; (80031f8 <__NVIC_SetPriority+0x4c>)
 80031c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ca:	0112      	lsls	r2, r2, #4
 80031cc:	b2d2      	uxtb	r2, r2
 80031ce:	440b      	add	r3, r1
 80031d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80031d4:	e00a      	b.n	80031ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	b2da      	uxtb	r2, r3
 80031da:	4908      	ldr	r1, [pc, #32]	; (80031fc <__NVIC_SetPriority+0x50>)
 80031dc:	79fb      	ldrb	r3, [r7, #7]
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	3b04      	subs	r3, #4
 80031e4:	0112      	lsls	r2, r2, #4
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	440b      	add	r3, r1
 80031ea:	761a      	strb	r2, [r3, #24]
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	e000e100 	.word	0xe000e100
 80031fc:	e000ed00 	.word	0xe000ed00

08003200 <NVIC_EncodePriority>:
{
 8003200:	b480      	push	{r7}
 8003202:	b089      	sub	sp, #36	; 0x24
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	f1c3 0307 	rsb	r3, r3, #7
 800321a:	2b04      	cmp	r3, #4
 800321c:	bf28      	it	cs
 800321e:	2304      	movcs	r3, #4
 8003220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	3304      	adds	r3, #4
 8003226:	2b06      	cmp	r3, #6
 8003228:	d902      	bls.n	8003230 <NVIC_EncodePriority+0x30>
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	3b03      	subs	r3, #3
 800322e:	e000      	b.n	8003232 <NVIC_EncodePriority+0x32>
 8003230:	2300      	movs	r3, #0
 8003232:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003234:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	43da      	mvns	r2, r3
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	401a      	ands	r2, r3
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003248:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	fa01 f303 	lsl.w	r3, r1, r3
 8003252:	43d9      	mvns	r1, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003258:	4313      	orrs	r3, r2
}
 800325a:	4618      	mov	r0, r3
 800325c:	3724      	adds	r7, #36	; 0x24
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
	...

08003268 <SysTick_Config>:
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3b01      	subs	r3, #1
 8003274:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003278:	d301      	bcc.n	800327e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800327a:	2301      	movs	r3, #1
 800327c:	e00f      	b.n	800329e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800327e:	4a0a      	ldr	r2, [pc, #40]	; (80032a8 <SysTick_Config+0x40>)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3b01      	subs	r3, #1
 8003284:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003286:	210f      	movs	r1, #15
 8003288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800328c:	f7ff ff8e 	bl	80031ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003290:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <SysTick_Config+0x40>)
 8003292:	2200      	movs	r2, #0
 8003294:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003296:	4b04      	ldr	r3, [pc, #16]	; (80032a8 <SysTick_Config+0x40>)
 8003298:	2207      	movs	r2, #7
 800329a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	e000e010 	.word	0xe000e010

080032ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f7ff ff29 	bl	800310c <__NVIC_SetPriorityGrouping>
}
 80032ba:	bf00      	nop
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b086      	sub	sp, #24
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	4603      	mov	r3, r0
 80032ca:	60b9      	str	r1, [r7, #8]
 80032cc:	607a      	str	r2, [r7, #4]
 80032ce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032d0:	f7ff ff40 	bl	8003154 <__NVIC_GetPriorityGrouping>
 80032d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	68b9      	ldr	r1, [r7, #8]
 80032da:	6978      	ldr	r0, [r7, #20]
 80032dc:	f7ff ff90 	bl	8003200 <NVIC_EncodePriority>
 80032e0:	4602      	mov	r2, r0
 80032e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032e6:	4611      	mov	r1, r2
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff ff5f 	bl	80031ac <__NVIC_SetPriority>
}
 80032ee:	bf00      	nop
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b082      	sub	sp, #8
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	4603      	mov	r3, r0
 80032fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff ff33 	bl	8003170 <__NVIC_EnableIRQ>
}
 800330a:	bf00      	nop
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b082      	sub	sp, #8
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7ff ffa4 	bl	8003268 <SysTick_Config>
 8003320:	4603      	mov	r3, r0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b082      	sub	sp, #8
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e014      	b.n	8003366 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	791b      	ldrb	r3, [r3, #4]
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d105      	bne.n	8003352 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f7fd f977 	bl	8000640 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2202      	movs	r2, #2
 8003356:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b082      	sub	sp, #8
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
 8003376:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	795b      	ldrb	r3, [r3, #5]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d101      	bne.n	8003384 <HAL_DAC_Start+0x16>
 8003380:	2302      	movs	r3, #2
 8003382:	e043      	b.n	800340c <HAL_DAC_Start+0x9e>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2202      	movs	r2, #2
 800338e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6819      	ldr	r1, [r3, #0]
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	f003 0310 	and.w	r3, r3, #16
 800339c:	2201      	movs	r2, #1
 800339e:	409a      	lsls	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 80033a8:	2001      	movs	r0, #1
 80033aa:	f7fe fb4d 	bl	8001a48 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10f      	bne.n	80033d4 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d11d      	bne.n	80033fe <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f042 0201 	orr.w	r2, r2, #1
 80033d0:	605a      	str	r2, [r3, #4]
 80033d2:	e014      	b.n	80033fe <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	f003 0310 	and.w	r3, r3, #16
 80033e4:	2102      	movs	r1, #2
 80033e6:	fa01 f303 	lsl.w	r3, r1, r3
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d107      	bne.n	80033fe <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f042 0202 	orr.w	r2, r2, #2
 80033fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3708      	adds	r7, #8
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
 8003420:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8003422:	2300      	movs	r3, #0
 8003424:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	795b      	ldrb	r3, [r3, #5]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d101      	bne.n	8003432 <HAL_DAC_Start_DMA+0x1e>
 800342e:	2302      	movs	r3, #2
 8003430:	e0a1      	b.n	8003576 <HAL_DAC_Start_DMA+0x162>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2201      	movs	r2, #1
 8003436:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2202      	movs	r2, #2
 800343c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d12a      	bne.n	800349a <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	4a4d      	ldr	r2, [pc, #308]	; (8003580 <HAL_DAC_Start_DMA+0x16c>)
 800344a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	4a4c      	ldr	r2, [pc, #304]	; (8003584 <HAL_DAC_Start_DMA+0x170>)
 8003452:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	4a4b      	ldr	r2, [pc, #300]	; (8003588 <HAL_DAC_Start_DMA+0x174>)
 800345a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800346a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800346c:	6a3b      	ldr	r3, [r7, #32]
 800346e:	2b04      	cmp	r3, #4
 8003470:	d009      	beq.n	8003486 <HAL_DAC_Start_DMA+0x72>
 8003472:	2b08      	cmp	r3, #8
 8003474:	d00c      	beq.n	8003490 <HAL_DAC_Start_DMA+0x7c>
 8003476:	2b00      	cmp	r3, #0
 8003478:	d000      	beq.n	800347c <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800347a:	e039      	b.n	80034f0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	3308      	adds	r3, #8
 8003482:	613b      	str	r3, [r7, #16]
        break;
 8003484:	e034      	b.n	80034f0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	330c      	adds	r3, #12
 800348c:	613b      	str	r3, [r7, #16]
        break;
 800348e:	e02f      	b.n	80034f0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	3310      	adds	r3, #16
 8003496:	613b      	str	r3, [r7, #16]
        break;
 8003498:	e02a      	b.n	80034f0 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	4a3b      	ldr	r2, [pc, #236]	; (800358c <HAL_DAC_Start_DMA+0x178>)
 80034a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	4a3a      	ldr	r2, [pc, #232]	; (8003590 <HAL_DAC_Start_DMA+0x17c>)
 80034a8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	4a39      	ldr	r2, [pc, #228]	; (8003594 <HAL_DAC_Start_DMA+0x180>)
 80034b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80034c0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80034c2:	6a3b      	ldr	r3, [r7, #32]
 80034c4:	2b04      	cmp	r3, #4
 80034c6:	d009      	beq.n	80034dc <HAL_DAC_Start_DMA+0xc8>
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d00c      	beq.n	80034e6 <HAL_DAC_Start_DMA+0xd2>
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d000      	beq.n	80034d2 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80034d0:	e00e      	b.n	80034f0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	3314      	adds	r3, #20
 80034d8:	613b      	str	r3, [r7, #16]
        break;
 80034da:	e009      	b.n	80034f0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	3318      	adds	r3, #24
 80034e2:	613b      	str	r3, [r7, #16]
        break;
 80034e4:	e004      	b.n	80034f0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	331c      	adds	r3, #28
 80034ec:	613b      	str	r3, [r7, #16]
        break;
 80034ee:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d111      	bne.n	800351a <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003504:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6898      	ldr	r0, [r3, #8]
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	f000 fb66 	bl	8003be0 <HAL_DMA_Start_IT>
 8003514:	4603      	mov	r3, r0
 8003516:	75fb      	strb	r3, [r7, #23]
 8003518:	e010      	b.n	800353c <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003528:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	68d8      	ldr	r0, [r3, #12]
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	f000 fb54 	bl	8003be0 <HAL_DMA_Start_IT>
 8003538:	4603      	mov	r3, r0
 800353a:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003542:	7dfb      	ldrb	r3, [r7, #23]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d10f      	bne.n	8003568 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6819      	ldr	r1, [r3, #0]
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	f003 0310 	and.w	r3, r3, #16
 8003554:	2201      	movs	r2, #1
 8003556:	409a      	lsls	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	430a      	orrs	r2, r1
 800355e:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8003560:	2001      	movs	r0, #1
 8003562:	f7fe fa71 	bl	8001a48 <HAL_Delay>
 8003566:	e005      	b.n	8003574 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	f043 0204 	orr.w	r2, r3, #4
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003574:	7dfb      	ldrb	r3, [r7, #23]
}
 8003576:	4618      	mov	r0, r3
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	0800397d 	.word	0x0800397d
 8003584:	0800399f 	.word	0x0800399f
 8003588:	080039bb 	.word	0x080039bb
 800358c:	08003a25 	.word	0x08003a25
 8003590:	08003a47 	.word	0x08003a47
 8003594:	08003a63 	.word	0x08003a63

08003598 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003598:	b480      	push	{r7}
 800359a:	b087      	sub	sp, #28
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
 80035a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80035a6:	2300      	movs	r3, #0
 80035a8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d105      	bne.n	80035c8 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4413      	add	r3, r2
 80035c2:	3308      	adds	r3, #8
 80035c4:	617b      	str	r3, [r7, #20]
 80035c6:	e004      	b.n	80035d2 <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4413      	add	r3, r2
 80035ce:	3314      	adds	r3, #20
 80035d0:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	461a      	mov	r2, r3
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	371c      	adds	r7, #28
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b08a      	sub	sp, #40	; 0x28
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003630:	2300      	movs	r3, #0
 8003632:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	795b      	ldrb	r3, [r3, #5]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d101      	bne.n	8003640 <HAL_DAC_ConfigChannel+0x1c>
 800363c:	2302      	movs	r3, #2
 800363e:	e194      	b.n	800396a <HAL_DAC_ConfigChannel+0x346>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2201      	movs	r2, #1
 8003644:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2202      	movs	r2, #2
 800364a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	2b04      	cmp	r3, #4
 8003652:	d174      	bne.n	800373e <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d137      	bne.n	80036ca <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800365a:	f7fe f9e9 	bl	8001a30 <HAL_GetTick>
 800365e:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003660:	e011      	b.n	8003686 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003662:	f7fe f9e5 	bl	8001a30 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b01      	cmp	r3, #1
 800366e:	d90a      	bls.n	8003686 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	f043 0208 	orr.w	r2, r3, #8
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2203      	movs	r2, #3
 8003680:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e171      	b.n	800396a <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800368c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1e6      	bne.n	8003662 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8003694:	2001      	movs	r0, #1
 8003696:	f7fe f9d7 	bl	8001a48 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68ba      	ldr	r2, [r7, #8]
 80036a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036a2:	641a      	str	r2, [r3, #64]	; 0x40
 80036a4:	e01e      	b.n	80036e4 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80036a6:	f7fe f9c3 	bl	8001a30 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d90a      	bls.n	80036ca <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	f043 0208 	orr.w	r2, r3, #8
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2203      	movs	r2, #3
 80036c4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e14f      	b.n	800396a <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	dbe8      	blt.n	80036a6 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80036d4:	2001      	movs	r0, #1
 80036d6:	f7fe f9b7 	bl	8001a48 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036e2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f003 0310 	and.w	r3, r3, #16
 80036f0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80036f4:	fa01 f303 	lsl.w	r3, r1, r3
 80036f8:	43db      	mvns	r3, r3
 80036fa:	ea02 0103 	and.w	r1, r2, r3
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f003 0310 	and.w	r3, r3, #16
 8003708:	409a      	lsls	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f003 0310 	and.w	r3, r3, #16
 800371e:	21ff      	movs	r1, #255	; 0xff
 8003720:	fa01 f303 	lsl.w	r3, r1, r3
 8003724:	43db      	mvns	r3, r3
 8003726:	ea02 0103 	and.w	r1, r2, r3
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f003 0310 	and.w	r3, r3, #16
 8003734:	409a      	lsls	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	430a      	orrs	r2, r1
 800373c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d11d      	bne.n	8003782 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f003 0310 	and.w	r3, r3, #16
 8003754:	221f      	movs	r2, #31
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	43db      	mvns	r3, r3
 800375c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800375e:	4013      	ands	r3, r2
 8003760:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f003 0310 	and.w	r3, r3, #16
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003776:	4313      	orrs	r3, r2
 8003778:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003780:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003788:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f003 0310 	and.w	r3, r3, #16
 8003790:	2207      	movs	r2, #7
 8003792:	fa02 f303 	lsl.w	r3, r2, r3
 8003796:	43db      	mvns	r3, r3
 8003798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800379a:	4013      	ands	r3, r2
 800379c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d002      	beq.n	80037b0 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 80037aa:	2300      	movs	r3, #0
 80037ac:	623b      	str	r3, [r7, #32]
 80037ae:	e011      	b.n	80037d4 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d002      	beq.n	80037c2 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80037bc:	2301      	movs	r3, #1
 80037be:	623b      	str	r3, [r7, #32]
 80037c0:	e008      	b.n	80037d4 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d102      	bne.n	80037d0 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80037ca:	2301      	movs	r3, #1
 80037cc:	623b      	str	r3, [r7, #32]
 80037ce:	e001      	b.n	80037d4 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80037d0:	2300      	movs	r3, #0
 80037d2:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	4313      	orrs	r3, r2
 80037de:	6a3a      	ldr	r2, [r7, #32]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f003 0310 	and.w	r3, r3, #16
 80037ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	43db      	mvns	r3, r3
 80037f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037f6:	4013      	ands	r3, r2
 80037f8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	791b      	ldrb	r3, [r3, #4]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d102      	bne.n	8003808 <HAL_DAC_ConfigChannel+0x1e4>
 8003802:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003806:	e000      	b.n	800380a <HAL_DAC_ConfigChannel+0x1e6>
 8003808:	2300      	movs	r3, #0
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	4313      	orrs	r3, r2
 800380e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f003 0310 	and.w	r3, r3, #16
 8003816:	f44f 7200 	mov.w	r2, #512	; 0x200
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	43db      	mvns	r3, r3
 8003820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003822:	4013      	ands	r3, r2
 8003824:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	795b      	ldrb	r3, [r3, #5]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d102      	bne.n	8003834 <HAL_DAC_ConfigChannel+0x210>
 800382e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003832:	e000      	b.n	8003836 <HAL_DAC_ConfigChannel+0x212>
 8003834:	2300      	movs	r3, #0
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	4313      	orrs	r3, r2
 800383a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003842:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2b02      	cmp	r3, #2
 800384a:	d114      	bne.n	8003876 <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800384c:	f001 fac2 	bl	8004dd4 <HAL_RCC_GetHCLKFreq>
 8003850:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	4a47      	ldr	r2, [pc, #284]	; (8003974 <HAL_DAC_ConfigChannel+0x350>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d904      	bls.n	8003864 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003860:	627b      	str	r3, [r7, #36]	; 0x24
 8003862:	e00d      	b.n	8003880 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	4a44      	ldr	r2, [pc, #272]	; (8003978 <HAL_DAC_ConfigChannel+0x354>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d909      	bls.n	8003880 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003872:	627b      	str	r3, [r7, #36]	; 0x24
 8003874:	e004      	b.n	8003880 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800387c:	4313      	orrs	r3, r2
 800387e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f003 0310 	and.w	r3, r3, #16
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800388e:	4313      	orrs	r3, r2
 8003890:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003898:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6819      	ldr	r1, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f003 0310 	and.w	r3, r3, #16
 80038a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80038aa:	fa02 f303 	lsl.w	r3, r2, r3
 80038ae:	43da      	mvns	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	400a      	ands	r2, r1
 80038b6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f003 0310 	and.w	r3, r3, #16
 80038c6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80038ca:	fa02 f303 	lsl.w	r3, r2, r3
 80038ce:	43db      	mvns	r3, r3
 80038d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038d2:	4013      	ands	r3, r2
 80038d4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f003 0310 	and.w	r3, r3, #16
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ea:	4313      	orrs	r3, r2
 80038ec:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038f4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6819      	ldr	r1, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f003 0310 	and.w	r3, r3, #16
 8003902:	22c0      	movs	r2, #192	; 0xc0
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	43da      	mvns	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	400a      	ands	r2, r1
 8003910:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	089b      	lsrs	r3, r3, #2
 8003918:	f003 030f 	and.w	r3, r3, #15
 800391c:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	089b      	lsrs	r3, r3, #2
 8003924:	021b      	lsls	r3, r3, #8
 8003926:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	4313      	orrs	r3, r2
 800392e:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f003 0310 	and.w	r3, r3, #16
 800393c:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003940:	fa01 f303 	lsl.w	r3, r1, r3
 8003944:	43db      	mvns	r3, r3
 8003946:	ea02 0103 	and.w	r1, r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f003 0310 	and.w	r3, r3, #16
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	409a      	lsls	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	430a      	orrs	r2, r1
 800395a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2201      	movs	r2, #1
 8003960:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3728      	adds	r7, #40	; 0x28
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	09896800 	.word	0x09896800
 8003978:	04c4b400 	.word	0x04c4b400

0800397c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003988:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f7ff fe2c 	bl	80035e8 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2201      	movs	r2, #1
 8003994:	711a      	strb	r2, [r3, #4]
}
 8003996:	bf00      	nop
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b084      	sub	sp, #16
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039aa:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f7ff fe25 	bl	80035fc <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80039b2:	bf00      	nop
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b084      	sub	sp, #16
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	f043 0204 	orr.w	r2, r3, #4
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f7ff fe1b 	bl	8003610 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2201      	movs	r2, #1
 80039de:	711a      	strb	r2, [r3, #4]
}
 80039e0:	bf00      	nop
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a30:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f7ff ffd8 	bl	80039e8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	711a      	strb	r2, [r3, #4]
}
 8003a3e:	bf00      	nop
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b084      	sub	sp, #16
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a52:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f7ff ffd1 	bl	80039fc <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003a5a:	bf00      	nop
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b084      	sub	sp, #16
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	f043 0204 	orr.w	r2, r3, #4
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f7ff ffc7 	bl	8003a10 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2201      	movs	r2, #1
 8003a86:	711a      	strb	r2, [r3, #4]
}
 8003a88:	bf00      	nop
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e08d      	b.n	8003bbe <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	4b47      	ldr	r3, [pc, #284]	; (8003bc8 <HAL_DMA_Init+0x138>)
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d80f      	bhi.n	8003ace <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	4b45      	ldr	r3, [pc, #276]	; (8003bcc <HAL_DMA_Init+0x13c>)
 8003ab6:	4413      	add	r3, r2
 8003ab8:	4a45      	ldr	r2, [pc, #276]	; (8003bd0 <HAL_DMA_Init+0x140>)
 8003aba:	fba2 2303 	umull	r2, r3, r2, r3
 8003abe:	091b      	lsrs	r3, r3, #4
 8003ac0:	009a      	lsls	r2, r3, #2
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a42      	ldr	r2, [pc, #264]	; (8003bd4 <HAL_DMA_Init+0x144>)
 8003aca:	641a      	str	r2, [r3, #64]	; 0x40
 8003acc:	e00e      	b.n	8003aec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	4b40      	ldr	r3, [pc, #256]	; (8003bd8 <HAL_DMA_Init+0x148>)
 8003ad6:	4413      	add	r3, r2
 8003ad8:	4a3d      	ldr	r2, [pc, #244]	; (8003bd0 <HAL_DMA_Init+0x140>)
 8003ada:	fba2 2303 	umull	r2, r3, r2, r3
 8003ade:	091b      	lsrs	r3, r3, #4
 8003ae0:	009a      	lsls	r2, r3, #2
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a3c      	ldr	r2, [pc, #240]	; (8003bdc <HAL_DMA_Init+0x14c>)
 8003aea:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2202      	movs	r2, #2
 8003af0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b06:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003b10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f9b6 	bl	8003eb0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b4c:	d102      	bne.n	8003b54 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b5c:	b2d2      	uxtb	r2, r2
 8003b5e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b68:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d010      	beq.n	8003b94 <HAL_DMA_Init+0x104>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	2b04      	cmp	r3, #4
 8003b78:	d80c      	bhi.n	8003b94 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f9d6 	bl	8003f2c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b90:	605a      	str	r2, [r3, #4]
 8003b92:	e008      	b.n	8003ba6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	40020407 	.word	0x40020407
 8003bcc:	bffdfff8 	.word	0xbffdfff8
 8003bd0:	cccccccd 	.word	0xcccccccd
 8003bd4:	40020000 	.word	0x40020000
 8003bd8:	bffdfbf8 	.word	0xbffdfbf8
 8003bdc:	40020400 	.word	0x40020400

08003be0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
 8003bec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d101      	bne.n	8003c00 <HAL_DMA_Start_IT+0x20>
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	e066      	b.n	8003cce <HAL_DMA_Start_IT+0xee>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d155      	bne.n	8003cc0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2202      	movs	r2, #2
 8003c18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 0201 	bic.w	r2, r2, #1
 8003c30:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	68b9      	ldr	r1, [r7, #8]
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f000 f8fb 	bl	8003e34 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d008      	beq.n	8003c58 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f042 020e 	orr.w	r2, r2, #14
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	e00f      	b.n	8003c78 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0204 	bic.w	r2, r2, #4
 8003c66:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 020a 	orr.w	r2, r2, #10
 8003c76:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d007      	beq.n	8003c96 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c94:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d007      	beq.n	8003cae <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cac:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f042 0201 	orr.w	r2, r2, #1
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	e005      	b.n	8003ccc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003cc8:	2302      	movs	r3, #2
 8003cca:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003ccc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3718      	adds	r7, #24
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b084      	sub	sp, #16
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf2:	f003 031f 	and.w	r3, r3, #31
 8003cf6:	2204      	movs	r2, #4
 8003cf8:	409a      	lsls	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d026      	beq.n	8003d50 <HAL_DMA_IRQHandler+0x7a>
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	f003 0304 	and.w	r3, r3, #4
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d021      	beq.n	8003d50 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0320 	and.w	r3, r3, #32
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d107      	bne.n	8003d2a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 0204 	bic.w	r2, r2, #4
 8003d28:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2e:	f003 021f 	and.w	r2, r3, #31
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	2104      	movs	r1, #4
 8003d38:	fa01 f202 	lsl.w	r2, r1, r2
 8003d3c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d071      	beq.n	8003e2a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003d4e:	e06c      	b.n	8003e2a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d54:	f003 031f 	and.w	r3, r3, #31
 8003d58:	2202      	movs	r2, #2
 8003d5a:	409a      	lsls	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d02e      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d029      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0320 	and.w	r3, r3, #32
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10b      	bne.n	8003d94 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 020a 	bic.w	r2, r2, #10
 8003d8a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d98:	f003 021f 	and.w	r2, r3, #31
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da0:	2102      	movs	r1, #2
 8003da2:	fa01 f202 	lsl.w	r2, r1, r2
 8003da6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d038      	beq.n	8003e2a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003dc0:	e033      	b.n	8003e2a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc6:	f003 031f 	and.w	r3, r3, #31
 8003dca:	2208      	movs	r2, #8
 8003dcc:	409a      	lsls	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d02a      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	f003 0308 	and.w	r3, r3, #8
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d025      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 020e 	bic.w	r2, r2, #14
 8003dee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df4:	f003 021f 	and.w	r2, r3, #31
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8003e02:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d004      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003e2a:	bf00      	nop
 8003e2c:	bf00      	nop
}
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
 8003e40:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e4a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d004      	beq.n	8003e5e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003e5c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e62:	f003 021f 	and.w	r2, r3, #31
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e70:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	2b10      	cmp	r3, #16
 8003e80:	d108      	bne.n	8003e94 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68ba      	ldr	r2, [r7, #8]
 8003e90:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e92:	e007      	b.n	8003ea4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	60da      	str	r2, [r3, #12]
}
 8003ea4:	bf00      	nop
 8003ea6:	3714      	adds	r7, #20
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b087      	sub	sp, #28
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	4b16      	ldr	r3, [pc, #88]	; (8003f18 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d802      	bhi.n	8003eca <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003ec4:	4b15      	ldr	r3, [pc, #84]	; (8003f1c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003ec6:	617b      	str	r3, [r7, #20]
 8003ec8:	e001      	b.n	8003ece <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003eca:	4b15      	ldr	r3, [pc, #84]	; (8003f20 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003ecc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	3b08      	subs	r3, #8
 8003eda:	4a12      	ldr	r2, [pc, #72]	; (8003f24 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003edc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee0:	091b      	lsrs	r3, r3, #4
 8003ee2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee8:	089b      	lsrs	r3, r3, #2
 8003eea:	009a      	lsls	r2, r3, #2
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	4413      	add	r3, r2
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a0b      	ldr	r2, [pc, #44]	; (8003f28 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003efa:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f003 031f 	and.w	r3, r3, #31
 8003f02:	2201      	movs	r2, #1
 8003f04:	409a      	lsls	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003f0a:	bf00      	nop
 8003f0c:	371c      	adds	r7, #28
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	40020407 	.word	0x40020407
 8003f1c:	40020800 	.word	0x40020800
 8003f20:	40020820 	.word	0x40020820
 8003f24:	cccccccd 	.word	0xcccccccd
 8003f28:	40020880 	.word	0x40020880

08003f2c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	4b0b      	ldr	r3, [pc, #44]	; (8003f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003f40:	4413      	add	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	461a      	mov	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a08      	ldr	r2, [pc, #32]	; (8003f70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003f4e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	3b01      	subs	r3, #1
 8003f54:	f003 031f 	and.w	r3, r3, #31
 8003f58:	2201      	movs	r2, #1
 8003f5a:	409a      	lsls	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003f60:	bf00      	nop
 8003f62:	3714      	adds	r7, #20
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	1000823f 	.word	0x1000823f
 8003f70:	40020940 	.word	0x40020940

08003f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b087      	sub	sp, #28
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003f82:	e15a      	b.n	800423a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	2101      	movs	r1, #1
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f90:	4013      	ands	r3, r2
 8003f92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 814c 	beq.w	8004234 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d00b      	beq.n	8003fbc <HAL_GPIO_Init+0x48>
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d007      	beq.n	8003fbc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003fb0:	2b11      	cmp	r3, #17
 8003fb2:	d003      	beq.n	8003fbc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	2b12      	cmp	r3, #18
 8003fba:	d130      	bne.n	800401e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	2203      	movs	r2, #3
 8003fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	68da      	ldr	r2, [r3, #12]
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffa:	43db      	mvns	r3, r3
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	4013      	ands	r3, r2
 8004000:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	091b      	lsrs	r3, r3, #4
 8004008:	f003 0201 	and.w	r2, r3, #1
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	fa02 f303 	lsl.w	r3, r2, r3
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	4313      	orrs	r3, r2
 8004016:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	005b      	lsls	r3, r3, #1
 8004028:	2203      	movs	r2, #3
 800402a:	fa02 f303 	lsl.w	r3, r2, r3
 800402e:	43db      	mvns	r3, r3
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	4013      	ands	r3, r2
 8004034:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	689a      	ldr	r2, [r3, #8]
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	fa02 f303 	lsl.w	r3, r2, r3
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	4313      	orrs	r3, r2
 8004046:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	2b02      	cmp	r3, #2
 8004054:	d003      	beq.n	800405e <HAL_GPIO_Init+0xea>
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	2b12      	cmp	r3, #18
 800405c:	d123      	bne.n	80040a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	08da      	lsrs	r2, r3, #3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	3208      	adds	r2, #8
 8004066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800406a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f003 0307 	and.w	r3, r3, #7
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	220f      	movs	r2, #15
 8004076:	fa02 f303 	lsl.w	r3, r2, r3
 800407a:	43db      	mvns	r3, r3
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	4013      	ands	r3, r2
 8004080:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	691a      	ldr	r2, [r3, #16]
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f003 0307 	and.w	r3, r3, #7
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	fa02 f303 	lsl.w	r3, r2, r3
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	4313      	orrs	r3, r2
 8004096:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	08da      	lsrs	r2, r3, #3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	3208      	adds	r2, #8
 80040a0:	6939      	ldr	r1, [r7, #16]
 80040a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	005b      	lsls	r3, r3, #1
 80040b0:	2203      	movs	r2, #3
 80040b2:	fa02 f303 	lsl.w	r3, r2, r3
 80040b6:	43db      	mvns	r3, r3
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	4013      	ands	r3, r2
 80040bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f003 0203 	and.w	r2, r3, #3
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	fa02 f303 	lsl.w	r3, r2, r3
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f000 80a6 	beq.w	8004234 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040e8:	4b5b      	ldr	r3, [pc, #364]	; (8004258 <HAL_GPIO_Init+0x2e4>)
 80040ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ec:	4a5a      	ldr	r2, [pc, #360]	; (8004258 <HAL_GPIO_Init+0x2e4>)
 80040ee:	f043 0301 	orr.w	r3, r3, #1
 80040f2:	6613      	str	r3, [r2, #96]	; 0x60
 80040f4:	4b58      	ldr	r3, [pc, #352]	; (8004258 <HAL_GPIO_Init+0x2e4>)
 80040f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	60bb      	str	r3, [r7, #8]
 80040fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004100:	4a56      	ldr	r2, [pc, #344]	; (800425c <HAL_GPIO_Init+0x2e8>)
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	089b      	lsrs	r3, r3, #2
 8004106:	3302      	adds	r3, #2
 8004108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800410c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	f003 0303 	and.w	r3, r3, #3
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	220f      	movs	r2, #15
 8004118:	fa02 f303 	lsl.w	r3, r2, r3
 800411c:	43db      	mvns	r3, r3
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	4013      	ands	r3, r2
 8004122:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800412a:	d01f      	beq.n	800416c <HAL_GPIO_Init+0x1f8>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a4c      	ldr	r2, [pc, #304]	; (8004260 <HAL_GPIO_Init+0x2ec>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d019      	beq.n	8004168 <HAL_GPIO_Init+0x1f4>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a4b      	ldr	r2, [pc, #300]	; (8004264 <HAL_GPIO_Init+0x2f0>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d013      	beq.n	8004164 <HAL_GPIO_Init+0x1f0>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a4a      	ldr	r2, [pc, #296]	; (8004268 <HAL_GPIO_Init+0x2f4>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d00d      	beq.n	8004160 <HAL_GPIO_Init+0x1ec>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a49      	ldr	r2, [pc, #292]	; (800426c <HAL_GPIO_Init+0x2f8>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d007      	beq.n	800415c <HAL_GPIO_Init+0x1e8>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a48      	ldr	r2, [pc, #288]	; (8004270 <HAL_GPIO_Init+0x2fc>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d101      	bne.n	8004158 <HAL_GPIO_Init+0x1e4>
 8004154:	2305      	movs	r3, #5
 8004156:	e00a      	b.n	800416e <HAL_GPIO_Init+0x1fa>
 8004158:	2306      	movs	r3, #6
 800415a:	e008      	b.n	800416e <HAL_GPIO_Init+0x1fa>
 800415c:	2304      	movs	r3, #4
 800415e:	e006      	b.n	800416e <HAL_GPIO_Init+0x1fa>
 8004160:	2303      	movs	r3, #3
 8004162:	e004      	b.n	800416e <HAL_GPIO_Init+0x1fa>
 8004164:	2302      	movs	r3, #2
 8004166:	e002      	b.n	800416e <HAL_GPIO_Init+0x1fa>
 8004168:	2301      	movs	r3, #1
 800416a:	e000      	b.n	800416e <HAL_GPIO_Init+0x1fa>
 800416c:	2300      	movs	r3, #0
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	f002 0203 	and.w	r2, r2, #3
 8004174:	0092      	lsls	r2, r2, #2
 8004176:	4093      	lsls	r3, r2
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	4313      	orrs	r3, r2
 800417c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800417e:	4937      	ldr	r1, [pc, #220]	; (800425c <HAL_GPIO_Init+0x2e8>)
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	089b      	lsrs	r3, r3, #2
 8004184:	3302      	adds	r3, #2
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800418c:	4b39      	ldr	r3, [pc, #228]	; (8004274 <HAL_GPIO_Init+0x300>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	43db      	mvns	r3, r3
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	4013      	ands	r3, r2
 800419a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d003      	beq.n	80041b0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80041b0:	4a30      	ldr	r2, [pc, #192]	; (8004274 <HAL_GPIO_Init+0x300>)
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80041b6:	4b2f      	ldr	r3, [pc, #188]	; (8004274 <HAL_GPIO_Init+0x300>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	43db      	mvns	r3, r3
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	4013      	ands	r3, r2
 80041c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d003      	beq.n	80041da <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80041da:	4a26      	ldr	r2, [pc, #152]	; (8004274 <HAL_GPIO_Init+0x300>)
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041e0:	4b24      	ldr	r3, [pc, #144]	; (8004274 <HAL_GPIO_Init+0x300>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	43db      	mvns	r3, r3
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	4013      	ands	r3, r2
 80041ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d003      	beq.n	8004204 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	4313      	orrs	r3, r2
 8004202:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004204:	4a1b      	ldr	r2, [pc, #108]	; (8004274 <HAL_GPIO_Init+0x300>)
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800420a:	4b1a      	ldr	r3, [pc, #104]	; (8004274 <HAL_GPIO_Init+0x300>)
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	43db      	mvns	r3, r3
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	4013      	ands	r3, r2
 8004218:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d003      	beq.n	800422e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4313      	orrs	r3, r2
 800422c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800422e:	4a11      	ldr	r2, [pc, #68]	; (8004274 <HAL_GPIO_Init+0x300>)
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	3301      	adds	r3, #1
 8004238:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	fa22 f303 	lsr.w	r3, r2, r3
 8004244:	2b00      	cmp	r3, #0
 8004246:	f47f ae9d 	bne.w	8003f84 <HAL_GPIO_Init+0x10>
  }
}
 800424a:	bf00      	nop
 800424c:	371c      	adds	r7, #28
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	40021000 	.word	0x40021000
 800425c:	40010000 	.word	0x40010000
 8004260:	48000400 	.word	0x48000400
 8004264:	48000800 	.word	0x48000800
 8004268:	48000c00 	.word	0x48000c00
 800426c:	48001000 	.word	0x48001000
 8004270:	48001400 	.word	0x48001400
 8004274:	40010400 	.word	0x40010400

08004278 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	460b      	mov	r3, r1
 8004282:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	691a      	ldr	r2, [r3, #16]
 8004288:	887b      	ldrh	r3, [r7, #2]
 800428a:	4013      	ands	r3, r2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d002      	beq.n	8004296 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004290:	2301      	movs	r3, #1
 8004292:	73fb      	strb	r3, [r7, #15]
 8004294:	e001      	b.n	800429a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004296:	2300      	movs	r3, #0
 8004298:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800429a:	7bfb      	ldrb	r3, [r7, #15]
}
 800429c:	4618      	mov	r0, r3
 800429e:	3714      	adds	r7, #20
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	460b      	mov	r3, r1
 80042b2:	807b      	strh	r3, [r7, #2]
 80042b4:	4613      	mov	r3, r2
 80042b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042b8:	787b      	ldrb	r3, [r7, #1]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d003      	beq.n	80042c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80042be:	887a      	ldrh	r2, [r7, #2]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80042c4:	e002      	b.n	80042cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80042c6:	887a      	ldrh	r2, [r7, #2]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	4603      	mov	r3, r0
 80042e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80042e2:	4b08      	ldr	r3, [pc, #32]	; (8004304 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042e4:	695a      	ldr	r2, [r3, #20]
 80042e6:	88fb      	ldrh	r3, [r7, #6]
 80042e8:	4013      	ands	r3, r2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d006      	beq.n	80042fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80042ee:	4a05      	ldr	r2, [pc, #20]	; (8004304 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042f0:	88fb      	ldrh	r3, [r7, #6]
 80042f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80042f4:	88fb      	ldrh	r3, [r7, #6]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 f806 	bl	8004308 <HAL_GPIO_EXTI_Callback>
  }
}
 80042fc:	bf00      	nop
 80042fe:	3708      	adds	r7, #8
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	40010400 	.word	0x40010400

08004308 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	4603      	mov	r3, r0
 8004310:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004312:	bf00      	nop
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
	...

08004320 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d141      	bne.n	80043b2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800432e:	4b4b      	ldr	r3, [pc, #300]	; (800445c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800433a:	d131      	bne.n	80043a0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800433c:	4b47      	ldr	r3, [pc, #284]	; (800445c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800433e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004342:	4a46      	ldr	r2, [pc, #280]	; (800445c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004344:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004348:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800434c:	4b43      	ldr	r3, [pc, #268]	; (800445c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004354:	4a41      	ldr	r2, [pc, #260]	; (800445c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004356:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800435a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800435c:	4b40      	ldr	r3, [pc, #256]	; (8004460 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2232      	movs	r2, #50	; 0x32
 8004362:	fb02 f303 	mul.w	r3, r2, r3
 8004366:	4a3f      	ldr	r2, [pc, #252]	; (8004464 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004368:	fba2 2303 	umull	r2, r3, r2, r3
 800436c:	0c9b      	lsrs	r3, r3, #18
 800436e:	3301      	adds	r3, #1
 8004370:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004372:	e002      	b.n	800437a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	3b01      	subs	r3, #1
 8004378:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800437a:	4b38      	ldr	r3, [pc, #224]	; (800445c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004386:	d102      	bne.n	800438e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1f2      	bne.n	8004374 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800438e:	4b33      	ldr	r3, [pc, #204]	; (800445c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800439a:	d158      	bne.n	800444e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e057      	b.n	8004450 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043a0:	4b2e      	ldr	r3, [pc, #184]	; (800445c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043a6:	4a2d      	ldr	r2, [pc, #180]	; (800445c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80043b0:	e04d      	b.n	800444e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043b8:	d141      	bne.n	800443e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80043ba:	4b28      	ldr	r3, [pc, #160]	; (800445c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043c6:	d131      	bne.n	800442c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043c8:	4b24      	ldr	r3, [pc, #144]	; (800445c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043ce:	4a23      	ldr	r2, [pc, #140]	; (800445c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043d8:	4b20      	ldr	r3, [pc, #128]	; (800445c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043e0:	4a1e      	ldr	r2, [pc, #120]	; (800445c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043e8:	4b1d      	ldr	r3, [pc, #116]	; (8004460 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2232      	movs	r2, #50	; 0x32
 80043ee:	fb02 f303 	mul.w	r3, r2, r3
 80043f2:	4a1c      	ldr	r2, [pc, #112]	; (8004464 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80043f4:	fba2 2303 	umull	r2, r3, r2, r3
 80043f8:	0c9b      	lsrs	r3, r3, #18
 80043fa:	3301      	adds	r3, #1
 80043fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043fe:	e002      	b.n	8004406 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	3b01      	subs	r3, #1
 8004404:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004406:	4b15      	ldr	r3, [pc, #84]	; (800445c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800440e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004412:	d102      	bne.n	800441a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1f2      	bne.n	8004400 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800441a:	4b10      	ldr	r3, [pc, #64]	; (800445c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004426:	d112      	bne.n	800444e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e011      	b.n	8004450 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800442c:	4b0b      	ldr	r3, [pc, #44]	; (800445c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800442e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004432:	4a0a      	ldr	r2, [pc, #40]	; (800445c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004438:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800443c:	e007      	b.n	800444e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800443e:	4b07      	ldr	r3, [pc, #28]	; (800445c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004446:	4a05      	ldr	r2, [pc, #20]	; (800445c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004448:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800444c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3714      	adds	r7, #20
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr
 800445c:	40007000 	.word	0x40007000
 8004460:	20001f44 	.word	0x20001f44
 8004464:	431bde83 	.word	0x431bde83

08004468 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b088      	sub	sp, #32
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e308      	b.n	8004a8c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b00      	cmp	r3, #0
 8004484:	d075      	beq.n	8004572 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004486:	4ba3      	ldr	r3, [pc, #652]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f003 030c 	and.w	r3, r3, #12
 800448e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004490:	4ba0      	ldr	r3, [pc, #640]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	f003 0303 	and.w	r3, r3, #3
 8004498:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	2b0c      	cmp	r3, #12
 800449e:	d102      	bne.n	80044a6 <HAL_RCC_OscConfig+0x3e>
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	2b03      	cmp	r3, #3
 80044a4:	d002      	beq.n	80044ac <HAL_RCC_OscConfig+0x44>
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	2b08      	cmp	r3, #8
 80044aa:	d10b      	bne.n	80044c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ac:	4b99      	ldr	r3, [pc, #612]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d05b      	beq.n	8004570 <HAL_RCC_OscConfig+0x108>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d157      	bne.n	8004570 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e2e3      	b.n	8004a8c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044cc:	d106      	bne.n	80044dc <HAL_RCC_OscConfig+0x74>
 80044ce:	4b91      	ldr	r3, [pc, #580]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a90      	ldr	r2, [pc, #576]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 80044d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044d8:	6013      	str	r3, [r2, #0]
 80044da:	e01d      	b.n	8004518 <HAL_RCC_OscConfig+0xb0>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044e4:	d10c      	bne.n	8004500 <HAL_RCC_OscConfig+0x98>
 80044e6:	4b8b      	ldr	r3, [pc, #556]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a8a      	ldr	r2, [pc, #552]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 80044ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044f0:	6013      	str	r3, [r2, #0]
 80044f2:	4b88      	ldr	r3, [pc, #544]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a87      	ldr	r2, [pc, #540]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 80044f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	e00b      	b.n	8004518 <HAL_RCC_OscConfig+0xb0>
 8004500:	4b84      	ldr	r3, [pc, #528]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a83      	ldr	r2, [pc, #524]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 8004506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800450a:	6013      	str	r3, [r2, #0]
 800450c:	4b81      	ldr	r3, [pc, #516]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a80      	ldr	r2, [pc, #512]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 8004512:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004516:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d013      	beq.n	8004548 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004520:	f7fd fa86 	bl	8001a30 <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004528:	f7fd fa82 	bl	8001a30 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b64      	cmp	r3, #100	; 0x64
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e2a8      	b.n	8004a8c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800453a:	4b76      	ldr	r3, [pc, #472]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d0f0      	beq.n	8004528 <HAL_RCC_OscConfig+0xc0>
 8004546:	e014      	b.n	8004572 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004548:	f7fd fa72 	bl	8001a30 <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800454e:	e008      	b.n	8004562 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004550:	f7fd fa6e 	bl	8001a30 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b64      	cmp	r3, #100	; 0x64
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e294      	b.n	8004a8c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004562:	4b6c      	ldr	r3, [pc, #432]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1f0      	bne.n	8004550 <HAL_RCC_OscConfig+0xe8>
 800456e:	e000      	b.n	8004572 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d075      	beq.n	800466a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800457e:	4b65      	ldr	r3, [pc, #404]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f003 030c 	and.w	r3, r3, #12
 8004586:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004588:	4b62      	ldr	r3, [pc, #392]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	f003 0303 	and.w	r3, r3, #3
 8004590:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	2b0c      	cmp	r3, #12
 8004596:	d102      	bne.n	800459e <HAL_RCC_OscConfig+0x136>
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	2b02      	cmp	r3, #2
 800459c:	d002      	beq.n	80045a4 <HAL_RCC_OscConfig+0x13c>
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	2b04      	cmp	r3, #4
 80045a2:	d11f      	bne.n	80045e4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045a4:	4b5b      	ldr	r3, [pc, #364]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d005      	beq.n	80045bc <HAL_RCC_OscConfig+0x154>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d101      	bne.n	80045bc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e267      	b.n	8004a8c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045bc:	4b55      	ldr	r3, [pc, #340]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	061b      	lsls	r3, r3, #24
 80045ca:	4952      	ldr	r1, [pc, #328]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80045d0:	4b51      	ldr	r3, [pc, #324]	; (8004718 <HAL_RCC_OscConfig+0x2b0>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7fd f9df 	bl	8001998 <HAL_InitTick>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d043      	beq.n	8004668 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e253      	b.n	8004a8c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d023      	beq.n	8004634 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045ec:	4b49      	ldr	r3, [pc, #292]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a48      	ldr	r2, [pc, #288]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 80045f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f8:	f7fd fa1a 	bl	8001a30 <HAL_GetTick>
 80045fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045fe:	e008      	b.n	8004612 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004600:	f7fd fa16 	bl	8001a30 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e23c      	b.n	8004a8c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004612:	4b40      	ldr	r3, [pc, #256]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800461a:	2b00      	cmp	r3, #0
 800461c:	d0f0      	beq.n	8004600 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800461e:	4b3d      	ldr	r3, [pc, #244]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	061b      	lsls	r3, r3, #24
 800462c:	4939      	ldr	r1, [pc, #228]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 800462e:	4313      	orrs	r3, r2
 8004630:	604b      	str	r3, [r1, #4]
 8004632:	e01a      	b.n	800466a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004634:	4b37      	ldr	r3, [pc, #220]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a36      	ldr	r2, [pc, #216]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 800463a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800463e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004640:	f7fd f9f6 	bl	8001a30 <HAL_GetTick>
 8004644:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004646:	e008      	b.n	800465a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004648:	f7fd f9f2 	bl	8001a30 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b02      	cmp	r3, #2
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e218      	b.n	8004a8c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800465a:	4b2e      	ldr	r3, [pc, #184]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1f0      	bne.n	8004648 <HAL_RCC_OscConfig+0x1e0>
 8004666:	e000      	b.n	800466a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004668:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0308 	and.w	r3, r3, #8
 8004672:	2b00      	cmp	r3, #0
 8004674:	d03c      	beq.n	80046f0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d01c      	beq.n	80046b8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800467e:	4b25      	ldr	r3, [pc, #148]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 8004680:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004684:	4a23      	ldr	r2, [pc, #140]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 8004686:	f043 0301 	orr.w	r3, r3, #1
 800468a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800468e:	f7fd f9cf 	bl	8001a30 <HAL_GetTick>
 8004692:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004694:	e008      	b.n	80046a8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004696:	f7fd f9cb 	bl	8001a30 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e1f1      	b.n	8004a8c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046a8:	4b1a      	ldr	r3, [pc, #104]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 80046aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d0ef      	beq.n	8004696 <HAL_RCC_OscConfig+0x22e>
 80046b6:	e01b      	b.n	80046f0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046b8:	4b16      	ldr	r3, [pc, #88]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 80046ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046be:	4a15      	ldr	r2, [pc, #84]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 80046c0:	f023 0301 	bic.w	r3, r3, #1
 80046c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c8:	f7fd f9b2 	bl	8001a30 <HAL_GetTick>
 80046cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046ce:	e008      	b.n	80046e2 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046d0:	f7fd f9ae 	bl	8001a30 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e1d4      	b.n	8004a8c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046e2:	4b0c      	ldr	r3, [pc, #48]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 80046e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1ef      	bne.n	80046d0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 80ab 	beq.w	8004854 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046fe:	2300      	movs	r3, #0
 8004700:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004702:	4b04      	ldr	r3, [pc, #16]	; (8004714 <HAL_RCC_OscConfig+0x2ac>)
 8004704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d106      	bne.n	800471c <HAL_RCC_OscConfig+0x2b4>
 800470e:	2301      	movs	r3, #1
 8004710:	e005      	b.n	800471e <HAL_RCC_OscConfig+0x2b6>
 8004712:	bf00      	nop
 8004714:	40021000 	.word	0x40021000
 8004718:	20001f48 	.word	0x20001f48
 800471c:	2300      	movs	r3, #0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00d      	beq.n	800473e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004722:	4baf      	ldr	r3, [pc, #700]	; (80049e0 <HAL_RCC_OscConfig+0x578>)
 8004724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004726:	4aae      	ldr	r2, [pc, #696]	; (80049e0 <HAL_RCC_OscConfig+0x578>)
 8004728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800472c:	6593      	str	r3, [r2, #88]	; 0x58
 800472e:	4bac      	ldr	r3, [pc, #688]	; (80049e0 <HAL_RCC_OscConfig+0x578>)
 8004730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004736:	60fb      	str	r3, [r7, #12]
 8004738:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800473a:	2301      	movs	r3, #1
 800473c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800473e:	4ba9      	ldr	r3, [pc, #676]	; (80049e4 <HAL_RCC_OscConfig+0x57c>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004746:	2b00      	cmp	r3, #0
 8004748:	d118      	bne.n	800477c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800474a:	4ba6      	ldr	r3, [pc, #664]	; (80049e4 <HAL_RCC_OscConfig+0x57c>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4aa5      	ldr	r2, [pc, #660]	; (80049e4 <HAL_RCC_OscConfig+0x57c>)
 8004750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004754:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004756:	f7fd f96b 	bl	8001a30 <HAL_GetTick>
 800475a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800475c:	e008      	b.n	8004770 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800475e:	f7fd f967 	bl	8001a30 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b02      	cmp	r3, #2
 800476a:	d901      	bls.n	8004770 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e18d      	b.n	8004a8c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004770:	4b9c      	ldr	r3, [pc, #624]	; (80049e4 <HAL_RCC_OscConfig+0x57c>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004778:	2b00      	cmp	r3, #0
 800477a:	d0f0      	beq.n	800475e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d108      	bne.n	8004796 <HAL_RCC_OscConfig+0x32e>
 8004784:	4b96      	ldr	r3, [pc, #600]	; (80049e0 <HAL_RCC_OscConfig+0x578>)
 8004786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800478a:	4a95      	ldr	r2, [pc, #596]	; (80049e0 <HAL_RCC_OscConfig+0x578>)
 800478c:	f043 0301 	orr.w	r3, r3, #1
 8004790:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004794:	e024      	b.n	80047e0 <HAL_RCC_OscConfig+0x378>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	2b05      	cmp	r3, #5
 800479c:	d110      	bne.n	80047c0 <HAL_RCC_OscConfig+0x358>
 800479e:	4b90      	ldr	r3, [pc, #576]	; (80049e0 <HAL_RCC_OscConfig+0x578>)
 80047a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a4:	4a8e      	ldr	r2, [pc, #568]	; (80049e0 <HAL_RCC_OscConfig+0x578>)
 80047a6:	f043 0304 	orr.w	r3, r3, #4
 80047aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047ae:	4b8c      	ldr	r3, [pc, #560]	; (80049e0 <HAL_RCC_OscConfig+0x578>)
 80047b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b4:	4a8a      	ldr	r2, [pc, #552]	; (80049e0 <HAL_RCC_OscConfig+0x578>)
 80047b6:	f043 0301 	orr.w	r3, r3, #1
 80047ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047be:	e00f      	b.n	80047e0 <HAL_RCC_OscConfig+0x378>
 80047c0:	4b87      	ldr	r3, [pc, #540]	; (80049e0 <HAL_RCC_OscConfig+0x578>)
 80047c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c6:	4a86      	ldr	r2, [pc, #536]	; (80049e0 <HAL_RCC_OscConfig+0x578>)
 80047c8:	f023 0301 	bic.w	r3, r3, #1
 80047cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047d0:	4b83      	ldr	r3, [pc, #524]	; (80049e0 <HAL_RCC_OscConfig+0x578>)
 80047d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d6:	4a82      	ldr	r2, [pc, #520]	; (80049e0 <HAL_RCC_OscConfig+0x578>)
 80047d8:	f023 0304 	bic.w	r3, r3, #4
 80047dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d016      	beq.n	8004816 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e8:	f7fd f922 	bl	8001a30 <HAL_GetTick>
 80047ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047ee:	e00a      	b.n	8004806 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047f0:	f7fd f91e 	bl	8001a30 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80047fe:	4293      	cmp	r3, r2
 8004800:	d901      	bls.n	8004806 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e142      	b.n	8004a8c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004806:	4b76      	ldr	r3, [pc, #472]	; (80049e0 <HAL_RCC_OscConfig+0x578>)
 8004808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d0ed      	beq.n	80047f0 <HAL_RCC_OscConfig+0x388>
 8004814:	e015      	b.n	8004842 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004816:	f7fd f90b 	bl	8001a30 <HAL_GetTick>
 800481a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800481c:	e00a      	b.n	8004834 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800481e:	f7fd f907 	bl	8001a30 <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	f241 3288 	movw	r2, #5000	; 0x1388
 800482c:	4293      	cmp	r3, r2
 800482e:	d901      	bls.n	8004834 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e12b      	b.n	8004a8c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004834:	4b6a      	ldr	r3, [pc, #424]	; (80049e0 <HAL_RCC_OscConfig+0x578>)
 8004836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1ed      	bne.n	800481e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004842:	7ffb      	ldrb	r3, [r7, #31]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d105      	bne.n	8004854 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004848:	4b65      	ldr	r3, [pc, #404]	; (80049e0 <HAL_RCC_OscConfig+0x578>)
 800484a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800484c:	4a64      	ldr	r2, [pc, #400]	; (80049e0 <HAL_RCC_OscConfig+0x578>)
 800484e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004852:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0320 	and.w	r3, r3, #32
 800485c:	2b00      	cmp	r3, #0
 800485e:	d03c      	beq.n	80048da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d01c      	beq.n	80048a2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004868:	4b5d      	ldr	r3, [pc, #372]	; (80049e0 <HAL_RCC_OscConfig+0x578>)
 800486a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800486e:	4a5c      	ldr	r2, [pc, #368]	; (80049e0 <HAL_RCC_OscConfig+0x578>)
 8004870:	f043 0301 	orr.w	r3, r3, #1
 8004874:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004878:	f7fd f8da 	bl	8001a30 <HAL_GetTick>
 800487c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800487e:	e008      	b.n	8004892 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004880:	f7fd f8d6 	bl	8001a30 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e0fc      	b.n	8004a8c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004892:	4b53      	ldr	r3, [pc, #332]	; (80049e0 <HAL_RCC_OscConfig+0x578>)
 8004894:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0ef      	beq.n	8004880 <HAL_RCC_OscConfig+0x418>
 80048a0:	e01b      	b.n	80048da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80048a2:	4b4f      	ldr	r3, [pc, #316]	; (80049e0 <HAL_RCC_OscConfig+0x578>)
 80048a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048a8:	4a4d      	ldr	r2, [pc, #308]	; (80049e0 <HAL_RCC_OscConfig+0x578>)
 80048aa:	f023 0301 	bic.w	r3, r3, #1
 80048ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b2:	f7fd f8bd 	bl	8001a30 <HAL_GetTick>
 80048b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048b8:	e008      	b.n	80048cc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048ba:	f7fd f8b9 	bl	8001a30 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d901      	bls.n	80048cc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e0df      	b.n	8004a8c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048cc:	4b44      	ldr	r3, [pc, #272]	; (80049e0 <HAL_RCC_OscConfig+0x578>)
 80048ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1ef      	bne.n	80048ba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	69db      	ldr	r3, [r3, #28]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f000 80d3 	beq.w	8004a8a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048e4:	4b3e      	ldr	r3, [pc, #248]	; (80049e0 <HAL_RCC_OscConfig+0x578>)
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f003 030c 	and.w	r3, r3, #12
 80048ec:	2b0c      	cmp	r3, #12
 80048ee:	f000 808d 	beq.w	8004a0c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	69db      	ldr	r3, [r3, #28]
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d15a      	bne.n	80049b0 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048fa:	4b39      	ldr	r3, [pc, #228]	; (80049e0 <HAL_RCC_OscConfig+0x578>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a38      	ldr	r2, [pc, #224]	; (80049e0 <HAL_RCC_OscConfig+0x578>)
 8004900:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004904:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004906:	f7fd f893 	bl	8001a30 <HAL_GetTick>
 800490a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800490c:	e008      	b.n	8004920 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800490e:	f7fd f88f 	bl	8001a30 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d901      	bls.n	8004920 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e0b5      	b.n	8004a8c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004920:	4b2f      	ldr	r3, [pc, #188]	; (80049e0 <HAL_RCC_OscConfig+0x578>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1f0      	bne.n	800490e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800492c:	4b2c      	ldr	r3, [pc, #176]	; (80049e0 <HAL_RCC_OscConfig+0x578>)
 800492e:	68da      	ldr	r2, [r3, #12]
 8004930:	4b2d      	ldr	r3, [pc, #180]	; (80049e8 <HAL_RCC_OscConfig+0x580>)
 8004932:	4013      	ands	r3, r2
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	6a11      	ldr	r1, [r2, #32]
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800493c:	3a01      	subs	r2, #1
 800493e:	0112      	lsls	r2, r2, #4
 8004940:	4311      	orrs	r1, r2
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004946:	0212      	lsls	r2, r2, #8
 8004948:	4311      	orrs	r1, r2
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800494e:	0852      	lsrs	r2, r2, #1
 8004950:	3a01      	subs	r2, #1
 8004952:	0552      	lsls	r2, r2, #21
 8004954:	4311      	orrs	r1, r2
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800495a:	0852      	lsrs	r2, r2, #1
 800495c:	3a01      	subs	r2, #1
 800495e:	0652      	lsls	r2, r2, #25
 8004960:	4311      	orrs	r1, r2
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004966:	06d2      	lsls	r2, r2, #27
 8004968:	430a      	orrs	r2, r1
 800496a:	491d      	ldr	r1, [pc, #116]	; (80049e0 <HAL_RCC_OscConfig+0x578>)
 800496c:	4313      	orrs	r3, r2
 800496e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004970:	4b1b      	ldr	r3, [pc, #108]	; (80049e0 <HAL_RCC_OscConfig+0x578>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a1a      	ldr	r2, [pc, #104]	; (80049e0 <HAL_RCC_OscConfig+0x578>)
 8004976:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800497a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800497c:	4b18      	ldr	r3, [pc, #96]	; (80049e0 <HAL_RCC_OscConfig+0x578>)
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	4a17      	ldr	r2, [pc, #92]	; (80049e0 <HAL_RCC_OscConfig+0x578>)
 8004982:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004986:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004988:	f7fd f852 	bl	8001a30 <HAL_GetTick>
 800498c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800498e:	e008      	b.n	80049a2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004990:	f7fd f84e 	bl	8001a30 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e074      	b.n	8004a8c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049a2:	4b0f      	ldr	r3, [pc, #60]	; (80049e0 <HAL_RCC_OscConfig+0x578>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0f0      	beq.n	8004990 <HAL_RCC_OscConfig+0x528>
 80049ae:	e06c      	b.n	8004a8a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049b0:	4b0b      	ldr	r3, [pc, #44]	; (80049e0 <HAL_RCC_OscConfig+0x578>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a0a      	ldr	r2, [pc, #40]	; (80049e0 <HAL_RCC_OscConfig+0x578>)
 80049b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049ba:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80049bc:	4b08      	ldr	r3, [pc, #32]	; (80049e0 <HAL_RCC_OscConfig+0x578>)
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	4a07      	ldr	r2, [pc, #28]	; (80049e0 <HAL_RCC_OscConfig+0x578>)
 80049c2:	f023 0303 	bic.w	r3, r3, #3
 80049c6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80049c8:	4b05      	ldr	r3, [pc, #20]	; (80049e0 <HAL_RCC_OscConfig+0x578>)
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	4a04      	ldr	r2, [pc, #16]	; (80049e0 <HAL_RCC_OscConfig+0x578>)
 80049ce:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80049d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d8:	f7fd f82a 	bl	8001a30 <HAL_GetTick>
 80049dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049de:	e00e      	b.n	80049fe <HAL_RCC_OscConfig+0x596>
 80049e0:	40021000 	.word	0x40021000
 80049e4:	40007000 	.word	0x40007000
 80049e8:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ec:	f7fd f820 	bl	8001a30 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e046      	b.n	8004a8c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049fe:	4b25      	ldr	r3, [pc, #148]	; (8004a94 <HAL_RCC_OscConfig+0x62c>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1f0      	bne.n	80049ec <HAL_RCC_OscConfig+0x584>
 8004a0a:	e03e      	b.n	8004a8a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	69db      	ldr	r3, [r3, #28]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d101      	bne.n	8004a18 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e039      	b.n	8004a8c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004a18:	4b1e      	ldr	r3, [pc, #120]	; (8004a94 <HAL_RCC_OscConfig+0x62c>)
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f003 0203 	and.w	r2, r3, #3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a1b      	ldr	r3, [r3, #32]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d12c      	bne.n	8004a86 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a36:	3b01      	subs	r3, #1
 8004a38:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d123      	bne.n	8004a86 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a48:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d11b      	bne.n	8004a86 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a58:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d113      	bne.n	8004a86 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a68:	085b      	lsrs	r3, r3, #1
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d109      	bne.n	8004a86 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a7c:	085b      	lsrs	r3, r3, #1
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d001      	beq.n	8004a8a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e000      	b.n	8004a8c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3720      	adds	r7, #32
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	40021000 	.word	0x40021000

08004a98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d101      	bne.n	8004ab0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e11e      	b.n	8004cee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ab0:	4b91      	ldr	r3, [pc, #580]	; (8004cf8 <HAL_RCC_ClockConfig+0x260>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 030f 	and.w	r3, r3, #15
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d910      	bls.n	8004ae0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004abe:	4b8e      	ldr	r3, [pc, #568]	; (8004cf8 <HAL_RCC_ClockConfig+0x260>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f023 020f 	bic.w	r2, r3, #15
 8004ac6:	498c      	ldr	r1, [pc, #560]	; (8004cf8 <HAL_RCC_ClockConfig+0x260>)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ace:	4b8a      	ldr	r3, [pc, #552]	; (8004cf8 <HAL_RCC_ClockConfig+0x260>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 030f 	and.w	r3, r3, #15
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d001      	beq.n	8004ae0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e106      	b.n	8004cee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0301 	and.w	r3, r3, #1
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d073      	beq.n	8004bd4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	2b03      	cmp	r3, #3
 8004af2:	d129      	bne.n	8004b48 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004af4:	4b81      	ldr	r3, [pc, #516]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d101      	bne.n	8004b04 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e0f4      	b.n	8004cee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004b04:	f000 f972 	bl	8004dec <RCC_GetSysClockFreqFromPLLSource>
 8004b08:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	4a7c      	ldr	r2, [pc, #496]	; (8004d00 <HAL_RCC_ClockConfig+0x268>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d93f      	bls.n	8004b92 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004b12:	4b7a      	ldr	r3, [pc, #488]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d009      	beq.n	8004b32 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d033      	beq.n	8004b92 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d12f      	bne.n	8004b92 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b32:	4b72      	ldr	r3, [pc, #456]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b3a:	4a70      	ldr	r2, [pc, #448]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b40:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004b42:	2380      	movs	r3, #128	; 0x80
 8004b44:	617b      	str	r3, [r7, #20]
 8004b46:	e024      	b.n	8004b92 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d107      	bne.n	8004b60 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b50:	4b6a      	ldr	r3, [pc, #424]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d109      	bne.n	8004b70 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e0c6      	b.n	8004cee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b60:	4b66      	ldr	r3, [pc, #408]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e0be      	b.n	8004cee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004b70:	f000 f8ce 	bl	8004d10 <HAL_RCC_GetSysClockFreq>
 8004b74:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	4a61      	ldr	r2, [pc, #388]	; (8004d00 <HAL_RCC_ClockConfig+0x268>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d909      	bls.n	8004b92 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b7e:	4b5f      	ldr	r3, [pc, #380]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b86:	4a5d      	ldr	r2, [pc, #372]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b8c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004b8e:	2380      	movs	r3, #128	; 0x80
 8004b90:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b92:	4b5a      	ldr	r3, [pc, #360]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f023 0203 	bic.w	r2, r3, #3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	4957      	ldr	r1, [pc, #348]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ba4:	f7fc ff44 	bl	8001a30 <HAL_GetTick>
 8004ba8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004baa:	e00a      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bac:	f7fc ff40 	bl	8001a30 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e095      	b.n	8004cee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bc2:	4b4e      	ldr	r3, [pc, #312]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f003 020c 	and.w	r2, r3, #12
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d1eb      	bne.n	8004bac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0302 	and.w	r3, r3, #2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d023      	beq.n	8004c28 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0304 	and.w	r3, r3, #4
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d005      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bec:	4b43      	ldr	r3, [pc, #268]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	4a42      	ldr	r2, [pc, #264]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004bf2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004bf6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0308 	and.w	r3, r3, #8
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d007      	beq.n	8004c14 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004c04:	4b3d      	ldr	r3, [pc, #244]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004c0c:	4a3b      	ldr	r2, [pc, #236]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004c0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004c12:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c14:	4b39      	ldr	r3, [pc, #228]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	4936      	ldr	r1, [pc, #216]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	608b      	str	r3, [r1, #8]
 8004c26:	e008      	b.n	8004c3a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	2b80      	cmp	r3, #128	; 0x80
 8004c2c:	d105      	bne.n	8004c3a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004c2e:	4b33      	ldr	r3, [pc, #204]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	4a32      	ldr	r2, [pc, #200]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004c34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c38:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c3a:	4b2f      	ldr	r3, [pc, #188]	; (8004cf8 <HAL_RCC_ClockConfig+0x260>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 030f 	and.w	r3, r3, #15
 8004c42:	683a      	ldr	r2, [r7, #0]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d21d      	bcs.n	8004c84 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c48:	4b2b      	ldr	r3, [pc, #172]	; (8004cf8 <HAL_RCC_ClockConfig+0x260>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f023 020f 	bic.w	r2, r3, #15
 8004c50:	4929      	ldr	r1, [pc, #164]	; (8004cf8 <HAL_RCC_ClockConfig+0x260>)
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004c58:	f7fc feea 	bl	8001a30 <HAL_GetTick>
 8004c5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c5e:	e00a      	b.n	8004c76 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c60:	f7fc fee6 	bl	8001a30 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d901      	bls.n	8004c76 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e03b      	b.n	8004cee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c76:	4b20      	ldr	r3, [pc, #128]	; (8004cf8 <HAL_RCC_ClockConfig+0x260>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 030f 	and.w	r3, r3, #15
 8004c7e:	683a      	ldr	r2, [r7, #0]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d1ed      	bne.n	8004c60 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0304 	and.w	r3, r3, #4
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d008      	beq.n	8004ca2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c90:	4b1a      	ldr	r3, [pc, #104]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	4917      	ldr	r1, [pc, #92]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0308 	and.w	r3, r3, #8
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d009      	beq.n	8004cc2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cae:	4b13      	ldr	r3, [pc, #76]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	00db      	lsls	r3, r3, #3
 8004cbc:	490f      	ldr	r1, [pc, #60]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004cc2:	f000 f825 	bl	8004d10 <HAL_RCC_GetSysClockFreq>
 8004cc6:	4601      	mov	r1, r0
 8004cc8:	4b0c      	ldr	r3, [pc, #48]	; (8004cfc <HAL_RCC_ClockConfig+0x264>)
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	091b      	lsrs	r3, r3, #4
 8004cce:	f003 030f 	and.w	r3, r3, #15
 8004cd2:	4a0c      	ldr	r2, [pc, #48]	; (8004d04 <HAL_RCC_ClockConfig+0x26c>)
 8004cd4:	5cd3      	ldrb	r3, [r2, r3]
 8004cd6:	f003 031f 	and.w	r3, r3, #31
 8004cda:	fa21 f303 	lsr.w	r3, r1, r3
 8004cde:	4a0a      	ldr	r2, [pc, #40]	; (8004d08 <HAL_RCC_ClockConfig+0x270>)
 8004ce0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004ce2:	4b0a      	ldr	r3, [pc, #40]	; (8004d0c <HAL_RCC_ClockConfig+0x274>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7fc fe56 	bl	8001998 <HAL_InitTick>
 8004cec:	4603      	mov	r3, r0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3718      	adds	r7, #24
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	40022000 	.word	0x40022000
 8004cfc:	40021000 	.word	0x40021000
 8004d00:	04c4b400 	.word	0x04c4b400
 8004d04:	08008b30 	.word	0x08008b30
 8004d08:	20001f44 	.word	0x20001f44
 8004d0c:	20001f48 	.word	0x20001f48

08004d10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b087      	sub	sp, #28
 8004d14:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004d16:	4b2c      	ldr	r3, [pc, #176]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f003 030c 	and.w	r3, r3, #12
 8004d1e:	2b04      	cmp	r3, #4
 8004d20:	d102      	bne.n	8004d28 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d22:	4b2a      	ldr	r3, [pc, #168]	; (8004dcc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d24:	613b      	str	r3, [r7, #16]
 8004d26:	e047      	b.n	8004db8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004d28:	4b27      	ldr	r3, [pc, #156]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f003 030c 	and.w	r3, r3, #12
 8004d30:	2b08      	cmp	r3, #8
 8004d32:	d102      	bne.n	8004d3a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d34:	4b26      	ldr	r3, [pc, #152]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004d36:	613b      	str	r3, [r7, #16]
 8004d38:	e03e      	b.n	8004db8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004d3a:	4b23      	ldr	r3, [pc, #140]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f003 030c 	and.w	r3, r3, #12
 8004d42:	2b0c      	cmp	r3, #12
 8004d44:	d136      	bne.n	8004db4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d46:	4b20      	ldr	r3, [pc, #128]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	f003 0303 	and.w	r3, r3, #3
 8004d4e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d50:	4b1d      	ldr	r3, [pc, #116]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	091b      	lsrs	r3, r3, #4
 8004d56:	f003 030f 	and.w	r3, r3, #15
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2b03      	cmp	r3, #3
 8004d62:	d10c      	bne.n	8004d7e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d64:	4a1a      	ldr	r2, [pc, #104]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d6c:	4a16      	ldr	r2, [pc, #88]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d6e:	68d2      	ldr	r2, [r2, #12]
 8004d70:	0a12      	lsrs	r2, r2, #8
 8004d72:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d76:	fb02 f303 	mul.w	r3, r2, r3
 8004d7a:	617b      	str	r3, [r7, #20]
      break;
 8004d7c:	e00c      	b.n	8004d98 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d7e:	4a13      	ldr	r2, [pc, #76]	; (8004dcc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d86:	4a10      	ldr	r2, [pc, #64]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d88:	68d2      	ldr	r2, [r2, #12]
 8004d8a:	0a12      	lsrs	r2, r2, #8
 8004d8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d90:	fb02 f303 	mul.w	r3, r2, r3
 8004d94:	617b      	str	r3, [r7, #20]
      break;
 8004d96:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d98:	4b0b      	ldr	r3, [pc, #44]	; (8004dc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	0e5b      	lsrs	r3, r3, #25
 8004d9e:	f003 0303 	and.w	r3, r3, #3
 8004da2:	3301      	adds	r3, #1
 8004da4:	005b      	lsls	r3, r3, #1
 8004da6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db0:	613b      	str	r3, [r7, #16]
 8004db2:	e001      	b.n	8004db8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004db4:	2300      	movs	r3, #0
 8004db6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004db8:	693b      	ldr	r3, [r7, #16]
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	371c      	adds	r7, #28
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	40021000 	.word	0x40021000
 8004dcc:	00f42400 	.word	0x00f42400
 8004dd0:	007a1200 	.word	0x007a1200

08004dd4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dd8:	4b03      	ldr	r3, [pc, #12]	; (8004de8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004dda:	681b      	ldr	r3, [r3, #0]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	20001f44 	.word	0x20001f44

08004dec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b087      	sub	sp, #28
 8004df0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004df2:	4b1e      	ldr	r3, [pc, #120]	; (8004e6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	f003 0303 	and.w	r3, r3, #3
 8004dfa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004dfc:	4b1b      	ldr	r3, [pc, #108]	; (8004e6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	091b      	lsrs	r3, r3, #4
 8004e02:	f003 030f 	and.w	r3, r3, #15
 8004e06:	3301      	adds	r3, #1
 8004e08:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	2b03      	cmp	r3, #3
 8004e0e:	d10c      	bne.n	8004e2a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e10:	4a17      	ldr	r2, [pc, #92]	; (8004e70 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e18:	4a14      	ldr	r2, [pc, #80]	; (8004e6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e1a:	68d2      	ldr	r2, [r2, #12]
 8004e1c:	0a12      	lsrs	r2, r2, #8
 8004e1e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e22:	fb02 f303 	mul.w	r3, r2, r3
 8004e26:	617b      	str	r3, [r7, #20]
    break;
 8004e28:	e00c      	b.n	8004e44 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e2a:	4a12      	ldr	r2, [pc, #72]	; (8004e74 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e32:	4a0e      	ldr	r2, [pc, #56]	; (8004e6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e34:	68d2      	ldr	r2, [r2, #12]
 8004e36:	0a12      	lsrs	r2, r2, #8
 8004e38:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e3c:	fb02 f303 	mul.w	r3, r2, r3
 8004e40:	617b      	str	r3, [r7, #20]
    break;
 8004e42:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e44:	4b09      	ldr	r3, [pc, #36]	; (8004e6c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	0e5b      	lsrs	r3, r3, #25
 8004e4a:	f003 0303 	and.w	r3, r3, #3
 8004e4e:	3301      	adds	r3, #1
 8004e50:	005b      	lsls	r3, r3, #1
 8004e52:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004e54:	697a      	ldr	r2, [r7, #20]
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e5c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004e5e:	687b      	ldr	r3, [r7, #4]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	371c      	adds	r7, #28
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr
 8004e6c:	40021000 	.word	0x40021000
 8004e70:	007a1200 	.word	0x007a1200
 8004e74:	00f42400 	.word	0x00f42400

08004e78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e80:	2300      	movs	r3, #0
 8004e82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e84:	2300      	movs	r3, #0
 8004e86:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f000 8098 	beq.w	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e96:	2300      	movs	r3, #0
 8004e98:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e9a:	4b43      	ldr	r3, [pc, #268]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d10d      	bne.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ea6:	4b40      	ldr	r3, [pc, #256]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eaa:	4a3f      	ldr	r2, [pc, #252]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eb0:	6593      	str	r3, [r2, #88]	; 0x58
 8004eb2:	4b3d      	ldr	r3, [pc, #244]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eba:	60bb      	str	r3, [r7, #8]
 8004ebc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ec2:	4b3a      	ldr	r3, [pc, #232]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a39      	ldr	r2, [pc, #228]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ecc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ece:	f7fc fdaf 	bl	8001a30 <HAL_GetTick>
 8004ed2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ed4:	e009      	b.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ed6:	f7fc fdab 	bl	8001a30 <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d902      	bls.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	74fb      	strb	r3, [r7, #19]
        break;
 8004ee8:	e005      	b.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004eea:	4b30      	ldr	r3, [pc, #192]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d0ef      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004ef6:	7cfb      	ldrb	r3, [r7, #19]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d159      	bne.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004efc:	4b2a      	ldr	r3, [pc, #168]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f06:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d01e      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d019      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f18:	4b23      	ldr	r3, [pc, #140]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f22:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f24:	4b20      	ldr	r3, [pc, #128]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f2a:	4a1f      	ldr	r2, [pc, #124]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f34:	4b1c      	ldr	r3, [pc, #112]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f3a:	4a1b      	ldr	r2, [pc, #108]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f44:	4a18      	ldr	r2, [pc, #96]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d016      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f56:	f7fc fd6b 	bl	8001a30 <HAL_GetTick>
 8004f5a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f5c:	e00b      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f5e:	f7fc fd67 	bl	8001a30 <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d902      	bls.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	74fb      	strb	r3, [r7, #19]
            break;
 8004f74:	e006      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f76:	4b0c      	ldr	r3, [pc, #48]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f7c:	f003 0302 	and.w	r3, r3, #2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d0ec      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004f84:	7cfb      	ldrb	r3, [r7, #19]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d10b      	bne.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f8a:	4b07      	ldr	r3, [pc, #28]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f98:	4903      	ldr	r1, [pc, #12]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004fa0:	e008      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004fa2:	7cfb      	ldrb	r3, [r7, #19]
 8004fa4:	74bb      	strb	r3, [r7, #18]
 8004fa6:	e005      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004fa8:	40021000 	.word	0x40021000
 8004fac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fb0:	7cfb      	ldrb	r3, [r7, #19]
 8004fb2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fb4:	7c7b      	ldrb	r3, [r7, #17]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d105      	bne.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fba:	4baf      	ldr	r3, [pc, #700]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fbe:	4aae      	ldr	r2, [pc, #696]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004fc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fc4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00a      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fd2:	4ba9      	ldr	r3, [pc, #676]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd8:	f023 0203 	bic.w	r2, r3, #3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	49a5      	ldr	r1, [pc, #660]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00a      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ff4:	4ba0      	ldr	r3, [pc, #640]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffa:	f023 020c 	bic.w	r2, r3, #12
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	499d      	ldr	r1, [pc, #628]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005004:	4313      	orrs	r3, r2
 8005006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0304 	and.w	r3, r3, #4
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00a      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005016:	4b98      	ldr	r3, [pc, #608]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800501c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	4994      	ldr	r1, [pc, #592]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005026:	4313      	orrs	r3, r2
 8005028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0308 	and.w	r3, r3, #8
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00a      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005038:	4b8f      	ldr	r3, [pc, #572]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800503a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800503e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	498c      	ldr	r1, [pc, #560]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005048:	4313      	orrs	r3, r2
 800504a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0310 	and.w	r3, r3, #16
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00a      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800505a:	4b87      	ldr	r3, [pc, #540]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800505c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005060:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	4983      	ldr	r1, [pc, #524]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800506a:	4313      	orrs	r3, r2
 800506c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0320 	and.w	r3, r3, #32
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00a      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800507c:	4b7e      	ldr	r3, [pc, #504]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800507e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005082:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	497b      	ldr	r1, [pc, #492]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800508c:	4313      	orrs	r3, r2
 800508e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00a      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800509e:	4b76      	ldr	r3, [pc, #472]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	69db      	ldr	r3, [r3, #28]
 80050ac:	4972      	ldr	r1, [pc, #456]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00a      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050c0:	4b6d      	ldr	r3, [pc, #436]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	496a      	ldr	r1, [pc, #424]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00a      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050e2:	4b65      	ldr	r3, [pc, #404]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f0:	4961      	ldr	r1, [pc, #388]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00a      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005104:	4b5c      	ldr	r3, [pc, #368]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005106:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800510a:	f023 0203 	bic.w	r2, r3, #3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005112:	4959      	ldr	r1, [pc, #356]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005114:	4313      	orrs	r3, r2
 8005116:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00a      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005126:	4b54      	ldr	r3, [pc, #336]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800512c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005134:	4950      	ldr	r1, [pc, #320]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005136:	4313      	orrs	r3, r2
 8005138:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005144:	2b00      	cmp	r3, #0
 8005146:	d015      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005148:	4b4b      	ldr	r3, [pc, #300]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800514a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800514e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005156:	4948      	ldr	r1, [pc, #288]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005158:	4313      	orrs	r3, r2
 800515a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005166:	d105      	bne.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005168:	4b43      	ldr	r3, [pc, #268]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	4a42      	ldr	r2, [pc, #264]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800516e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005172:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800517c:	2b00      	cmp	r3, #0
 800517e:	d015      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005180:	4b3d      	ldr	r3, [pc, #244]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005186:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800518e:	493a      	ldr	r1, [pc, #232]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005190:	4313      	orrs	r3, r2
 8005192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800519a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800519e:	d105      	bne.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051a0:	4b35      	ldr	r3, [pc, #212]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	4a34      	ldr	r2, [pc, #208]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80051a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051aa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d015      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80051b8:	4b2f      	ldr	r3, [pc, #188]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80051ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051be:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c6:	492c      	ldr	r1, [pc, #176]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051d6:	d105      	bne.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051d8:	4b27      	ldr	r3, [pc, #156]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	4a26      	ldr	r2, [pc, #152]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80051de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051e2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d015      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051f0:	4b21      	ldr	r3, [pc, #132]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80051f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051fe:	491e      	ldr	r1, [pc, #120]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005200:	4313      	orrs	r3, r2
 8005202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800520a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800520e:	d105      	bne.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005210:	4b19      	ldr	r3, [pc, #100]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	4a18      	ldr	r2, [pc, #96]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005216:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800521a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d015      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005228:	4b13      	ldr	r3, [pc, #76]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800522a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800522e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005236:	4910      	ldr	r1, [pc, #64]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005238:	4313      	orrs	r3, r2
 800523a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005242:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005246:	d105      	bne.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005248:	4b0b      	ldr	r3, [pc, #44]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	4a0a      	ldr	r2, [pc, #40]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800524e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005252:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d018      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005260:	4b05      	ldr	r3, [pc, #20]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005266:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800526e:	4902      	ldr	r1, [pc, #8]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005270:	4313      	orrs	r3, r2
 8005272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005276:	e001      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005278:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005280:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005284:	d105      	bne.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005286:	4b21      	ldr	r3, [pc, #132]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	4a20      	ldr	r2, [pc, #128]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800528c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005290:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d015      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800529e:	4b1b      	ldr	r3, [pc, #108]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80052a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052ac:	4917      	ldr	r1, [pc, #92]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052bc:	d105      	bne.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80052be:	4b13      	ldr	r3, [pc, #76]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	4a12      	ldr	r2, [pc, #72]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80052c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052c8:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d015      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80052d6:	4b0d      	ldr	r3, [pc, #52]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80052d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052e4:	4909      	ldr	r1, [pc, #36]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052f4:	d105      	bne.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052f6:	4b05      	ldr	r3, [pc, #20]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	4a04      	ldr	r2, [pc, #16]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80052fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005300:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005302:	7cbb      	ldrb	r3, [r7, #18]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3718      	adds	r7, #24
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	40021000 	.word	0x40021000

08005310 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d101      	bne.n	8005322 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e027      	b.n	8005372 <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	7a5b      	ldrb	r3, [r3, #9]
 8005326:	b2db      	uxtb	r3, r3
 8005328:	2b00      	cmp	r3, #0
 800532a:	d105      	bne.n	8005338 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f7fb fdba 	bl	8000eac <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2202      	movs	r2, #2
 800533c:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f023 0108 	bic.w	r1, r3, #8
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	430a      	orrs	r2, r1
 8005352:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f042 0204 	orr.w	r2, r2, #4
 8005362:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3708      	adds	r7, #8
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}

0800537a <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800537a:	b580      	push	{r7, lr}
 800537c:	b084      	sub	sp, #16
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
 8005382:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005384:	2300      	movs	r3, #0
 8005386:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	7a1b      	ldrb	r3, [r3, #8]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d101      	bne.n	8005394 <HAL_RNG_GenerateRandomNumber+0x1a>
 8005390:	2302      	movs	r3, #2
 8005392:	e03d      	b.n	8005410 <HAL_RNG_GenerateRandomNumber+0x96>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	7a5b      	ldrb	r3, [r3, #9]
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d12c      	bne.n	80053fe <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2202      	movs	r2, #2
 80053a8:	725a      	strb	r2, [r3, #9]

    /* Get tick */
    tickstart = HAL_GetTick();
 80053aa:	f7fc fb41 	bl	8001a30 <HAL_GetTick>
 80053ae:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80053b0:	e011      	b.n	80053d6 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80053b2:	f7fc fb3d 	bl	8001a30 <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d90a      	bls.n	80053d6 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2202      	movs	r2, #2
 80053ca:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	721a      	strb	r2, [r3, #8]
        return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e01c      	b.n	8005410 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f003 0301 	and.w	r3, r3, #1
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d1e6      	bne.n	80053b2 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689a      	ldr	r2, [r3, #8]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	611a      	str	r2, [r3, #16]
    *random32bit = hrng->RandomNumber;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	691a      	ldr	r2, [r3, #16]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	725a      	strb	r2, [r3, #9]
 80053fc:	e004      	b.n	8005408 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2204      	movs	r2, #4
 8005402:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	721a      	strb	r2, [r3, #8]

  return status;
 800540e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005410:	4618      	mov	r0, r3
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e084      	b.n	8005534 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005436:	b2db      	uxtb	r3, r3
 8005438:	2b00      	cmp	r3, #0
 800543a:	d106      	bne.n	800544a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f7fb fd8f 	bl	8000f68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2202      	movs	r2, #2
 800544e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005460:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800546a:	d902      	bls.n	8005472 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800546c:	2300      	movs	r3, #0
 800546e:	60fb      	str	r3, [r7, #12]
 8005470:	e002      	b.n	8005478 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005472:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005476:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005480:	d007      	beq.n	8005492 <HAL_SPI_Init+0x7a>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800548a:	d002      	beq.n	8005492 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005496:	2b00      	cmp	r3, #0
 8005498:	d10b      	bne.n	80054b2 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054a2:	d903      	bls.n	80054ac <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2202      	movs	r2, #2
 80054a8:	631a      	str	r2, [r3, #48]	; 0x30
 80054aa:	e002      	b.n	80054b2 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685a      	ldr	r2, [r3, #4]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	431a      	orrs	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	431a      	orrs	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	431a      	orrs	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054d0:	431a      	orrs	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	431a      	orrs	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a1b      	ldr	r3, [r3, #32]
 80054dc:	ea42 0103 	orr.w	r1, r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	430a      	orrs	r2, r1
 80054ea:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	0c1b      	lsrs	r3, r3, #16
 80054f2:	f003 0204 	and.w	r2, r3, #4
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fa:	431a      	orrs	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005500:	431a      	orrs	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	ea42 0103 	orr.w	r1, r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	430a      	orrs	r2, r1
 8005512:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	69da      	ldr	r2, [r3, #28]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005522:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b088      	sub	sp, #32
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	603b      	str	r3, [r7, #0]
 8005548:	4613      	mov	r3, r2
 800554a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800554c:	2300      	movs	r3, #0
 800554e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005556:	2b01      	cmp	r3, #1
 8005558:	d101      	bne.n	800555e <HAL_SPI_Transmit+0x22>
 800555a:	2302      	movs	r3, #2
 800555c:	e150      	b.n	8005800 <HAL_SPI_Transmit+0x2c4>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005566:	f7fc fa63 	bl	8001a30 <HAL_GetTick>
 800556a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800556c:	88fb      	ldrh	r3, [r7, #6]
 800556e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005576:	b2db      	uxtb	r3, r3
 8005578:	2b01      	cmp	r3, #1
 800557a:	d002      	beq.n	8005582 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800557c:	2302      	movs	r3, #2
 800557e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005580:	e135      	b.n	80057ee <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d002      	beq.n	800558e <HAL_SPI_Transmit+0x52>
 8005588:	88fb      	ldrh	r3, [r7, #6]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d102      	bne.n	8005594 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005592:	e12c      	b.n	80057ee <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2203      	movs	r2, #3
 8005598:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	88fa      	ldrh	r2, [r7, #6]
 80055ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	88fa      	ldrh	r2, [r7, #6]
 80055b2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055de:	d107      	bne.n	80055f0 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055ee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055fa:	2b40      	cmp	r3, #64	; 0x40
 80055fc:	d007      	beq.n	800560e <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800560c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005616:	d94b      	bls.n	80056b0 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d002      	beq.n	8005626 <HAL_SPI_Transmit+0xea>
 8005620:	8afb      	ldrh	r3, [r7, #22]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d13e      	bne.n	80056a4 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562a:	881a      	ldrh	r2, [r3, #0]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005636:	1c9a      	adds	r2, r3, #2
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005640:	b29b      	uxth	r3, r3
 8005642:	3b01      	subs	r3, #1
 8005644:	b29a      	uxth	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800564a:	e02b      	b.n	80056a4 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b02      	cmp	r3, #2
 8005658:	d112      	bne.n	8005680 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565e:	881a      	ldrh	r2, [r3, #0]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566a:	1c9a      	adds	r2, r3, #2
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005674:	b29b      	uxth	r3, r3
 8005676:	3b01      	subs	r3, #1
 8005678:	b29a      	uxth	r2, r3
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800567e:	e011      	b.n	80056a4 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005680:	f7fc f9d6 	bl	8001a30 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	429a      	cmp	r2, r3
 800568e:	d803      	bhi.n	8005698 <HAL_SPI_Transmit+0x15c>
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005696:	d102      	bne.n	800569e <HAL_SPI_Transmit+0x162>
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d102      	bne.n	80056a4 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80056a2:	e0a4      	b.n	80057ee <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1ce      	bne.n	800564c <HAL_SPI_Transmit+0x110>
 80056ae:	e07c      	b.n	80057aa <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d002      	beq.n	80056be <HAL_SPI_Transmit+0x182>
 80056b8:	8afb      	ldrh	r3, [r7, #22]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d170      	bne.n	80057a0 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d912      	bls.n	80056ee <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056cc:	881a      	ldrh	r2, [r3, #0]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d8:	1c9a      	adds	r2, r3, #2
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	3b02      	subs	r3, #2
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056ec:	e058      	b.n	80057a0 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	330c      	adds	r3, #12
 80056f8:	7812      	ldrb	r2, [r2, #0]
 80056fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005700:	1c5a      	adds	r2, r3, #1
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800570a:	b29b      	uxth	r3, r3
 800570c:	3b01      	subs	r3, #1
 800570e:	b29a      	uxth	r2, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005714:	e044      	b.n	80057a0 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	f003 0302 	and.w	r3, r3, #2
 8005720:	2b02      	cmp	r3, #2
 8005722:	d12b      	bne.n	800577c <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005728:	b29b      	uxth	r3, r3
 800572a:	2b01      	cmp	r3, #1
 800572c:	d912      	bls.n	8005754 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005732:	881a      	ldrh	r2, [r3, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573e:	1c9a      	adds	r2, r3, #2
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005748:	b29b      	uxth	r3, r3
 800574a:	3b02      	subs	r3, #2
 800574c:	b29a      	uxth	r2, r3
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005752:	e025      	b.n	80057a0 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	330c      	adds	r3, #12
 800575e:	7812      	ldrb	r2, [r2, #0]
 8005760:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005766:	1c5a      	adds	r2, r3, #1
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005770:	b29b      	uxth	r3, r3
 8005772:	3b01      	subs	r3, #1
 8005774:	b29a      	uxth	r2, r3
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	87da      	strh	r2, [r3, #62]	; 0x3e
 800577a:	e011      	b.n	80057a0 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800577c:	f7fc f958 	bl	8001a30 <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	683a      	ldr	r2, [r7, #0]
 8005788:	429a      	cmp	r2, r3
 800578a:	d803      	bhi.n	8005794 <HAL_SPI_Transmit+0x258>
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005792:	d102      	bne.n	800579a <HAL_SPI_Transmit+0x25e>
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d102      	bne.n	80057a0 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800579e:	e026      	b.n	80057ee <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1b5      	bne.n	8005716 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	6839      	ldr	r1, [r7, #0]
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f000 fa8c 	bl	8005ccc <SPI_EndRxTxTransaction>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d002      	beq.n	80057c0 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2220      	movs	r2, #32
 80057be:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d10a      	bne.n	80057de <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057c8:	2300      	movs	r3, #0
 80057ca:	613b      	str	r3, [r7, #16]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	613b      	str	r3, [r7, #16]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	613b      	str	r3, [r7, #16]
 80057dc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d002      	beq.n	80057ec <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	77fb      	strb	r3, [r7, #31]
 80057ea:	e000      	b.n	80057ee <HAL_SPI_Transmit+0x2b2>
  }

error:
 80057ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2201      	movs	r2, #1
 80057f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80057fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8005800:	4618      	mov	r0, r3
 8005802:	3720      	adds	r7, #32
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b086      	sub	sp, #24
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	4613      	mov	r3, r2
 8005814:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005816:	2300      	movs	r3, #0
 8005818:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005820:	2b01      	cmp	r3, #1
 8005822:	d101      	bne.n	8005828 <HAL_SPI_Transmit_DMA+0x20>
 8005824:	2302      	movs	r3, #2
 8005826:	e0d0      	b.n	80059ca <HAL_SPI_Transmit_DMA+0x1c2>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005836:	b2db      	uxtb	r3, r3
 8005838:	2b01      	cmp	r3, #1
 800583a:	d002      	beq.n	8005842 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800583c:	2302      	movs	r3, #2
 800583e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005840:	e0be      	b.n	80059c0 <HAL_SPI_Transmit_DMA+0x1b8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d002      	beq.n	800584e <HAL_SPI_Transmit_DMA+0x46>
 8005848:	88fb      	ldrh	r3, [r7, #6]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d102      	bne.n	8005854 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005852:	e0b5      	b.n	80059c0 <HAL_SPI_Transmit_DMA+0x1b8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2203      	movs	r2, #3
 8005858:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	88fa      	ldrh	r2, [r7, #6]
 800586c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	88fa      	ldrh	r2, [r7, #6]
 8005872:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800589e:	d107      	bne.n	80058b0 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058ae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b4:	4a47      	ldr	r2, [pc, #284]	; (80059d4 <HAL_SPI_Transmit_DMA+0x1cc>)
 80058b6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058bc:	4a46      	ldr	r2, [pc, #280]	; (80059d8 <HAL_SPI_Transmit_DMA+0x1d0>)
 80058be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058c4:	4a45      	ldr	r2, [pc, #276]	; (80059dc <HAL_SPI_Transmit_DMA+0x1d4>)
 80058c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058cc:	2200      	movs	r2, #0
 80058ce:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80058de:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058e8:	d82d      	bhi.n	8005946 <HAL_SPI_Transmit_DMA+0x13e>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058f4:	d127      	bne.n	8005946 <HAL_SPI_Transmit_DMA+0x13e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	f003 0301 	and.w	r3, r3, #1
 8005900:	2b00      	cmp	r3, #0
 8005902:	d10f      	bne.n	8005924 <HAL_SPI_Transmit_DMA+0x11c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005912:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005918:	b29b      	uxth	r3, r3
 800591a:	085b      	lsrs	r3, r3, #1
 800591c:	b29a      	uxth	r2, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005922:	e010      	b.n	8005946 <HAL_SPI_Transmit_DMA+0x13e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	685a      	ldr	r2, [r3, #4]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005932:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005938:	b29b      	uxth	r3, r3
 800593a:	085b      	lsrs	r3, r3, #1
 800593c:	b29b      	uxth	r3, r3
 800593e:	3301      	adds	r3, #1
 8005940:	b29a      	uxth	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594e:	4619      	mov	r1, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	330c      	adds	r3, #12
 8005956:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800595c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800595e:	f7fe f93f 	bl	8003be0 <HAL_DMA_Start_IT>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00c      	beq.n	8005982 <HAL_SPI_Transmit_DMA+0x17a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800596c:	f043 0210 	orr.w	r2, r3, #16
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8005980:	e01e      	b.n	80059c0 <HAL_SPI_Transmit_DMA+0x1b8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800598c:	2b40      	cmp	r3, #64	; 0x40
 800598e:	d007      	beq.n	80059a0 <HAL_SPI_Transmit_DMA+0x198>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800599e:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	685a      	ldr	r2, [r3, #4]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f042 0220 	orr.w	r2, r2, #32
 80059ae:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	685a      	ldr	r2, [r3, #4]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f042 0202 	orr.w	r2, r2, #2
 80059be:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80059c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3718      	adds	r7, #24
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	08005ac3 	.word	0x08005ac3
 80059d8:	08005a1d 	.word	0x08005a1d
 80059dc:	08005adf 	.word	0x08005adf

080059e0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80059e8:	bf00      	nop
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80059fc:	bf00      	nop
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b086      	sub	sp, #24
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a28:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a2a:	f7fc f801 	bl	8001a30 <HAL_GetTick>
 8005a2e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0320 	and.w	r3, r3, #32
 8005a3a:	2b20      	cmp	r3, #32
 8005a3c:	d03b      	beq.n	8005ab6 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	685a      	ldr	r2, [r3, #4]
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f022 0220 	bic.w	r2, r2, #32
 8005a4c:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	685a      	ldr	r2, [r3, #4]
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f022 0202 	bic.w	r2, r2, #2
 8005a5c:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005a5e:	693a      	ldr	r2, [r7, #16]
 8005a60:	2164      	movs	r1, #100	; 0x64
 8005a62:	6978      	ldr	r0, [r7, #20]
 8005a64:	f000 f932 	bl	8005ccc <SPI_EndRxTxTransaction>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d005      	beq.n	8005a7a <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a72:	f043 0220 	orr.w	r2, r3, #32
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10a      	bne.n	8005a98 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a82:	2300      	movs	r3, #0
 8005a84:	60fb      	str	r3, [r7, #12]
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	60fb      	str	r3, [r7, #12]
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	60fb      	str	r3, [r7, #12]
 8005a96:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d003      	beq.n	8005ab6 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005aae:	6978      	ldr	r0, [r7, #20]
 8005ab0:	f7ff ffaa 	bl	8005a08 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005ab4:	e002      	b.n	8005abc <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005ab6:	6978      	ldr	r0, [r7, #20]
 8005ab8:	f7ff ff92 	bl	80059e0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005abc:	3718      	adds	r7, #24
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b084      	sub	sp, #16
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ace:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f7ff ff8f 	bl	80059f4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005ad6:	bf00      	nop
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}

08005ade <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b084      	sub	sp, #16
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aea:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	685a      	ldr	r2, [r3, #4]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f022 0203 	bic.w	r2, r2, #3
 8005afa:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b00:	f043 0210 	orr.w	r2, r3, #16
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f7ff ff79 	bl	8005a08 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005b16:	bf00      	nop
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b084      	sub	sp, #16
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	60f8      	str	r0, [r7, #12]
 8005b26:	60b9      	str	r1, [r7, #8]
 8005b28:	603b      	str	r3, [r7, #0]
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b2e:	e04c      	b.n	8005bca <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b36:	d048      	beq.n	8005bca <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005b38:	f7fb ff7a 	bl	8001a30 <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	683a      	ldr	r2, [r7, #0]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d902      	bls.n	8005b4e <SPI_WaitFlagStateUntilTimeout+0x30>
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d13d      	bne.n	8005bca <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	685a      	ldr	r2, [r3, #4]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b66:	d111      	bne.n	8005b8c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b70:	d004      	beq.n	8005b7c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b7a:	d107      	bne.n	8005b8c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b94:	d10f      	bne.n	8005bb6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ba4:	601a      	str	r2, [r3, #0]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005bb4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e00f      	b.n	8005bea <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	689a      	ldr	r2, [r3, #8]
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	bf0c      	ite	eq
 8005bda:	2301      	moveq	r3, #1
 8005bdc:	2300      	movne	r3, #0
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	461a      	mov	r2, r3
 8005be2:	79fb      	ldrb	r3, [r7, #7]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d1a3      	bne.n	8005b30 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b084      	sub	sp, #16
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	60f8      	str	r0, [r7, #12]
 8005bfa:	60b9      	str	r1, [r7, #8]
 8005bfc:	607a      	str	r2, [r7, #4]
 8005bfe:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8005c00:	e057      	b.n	8005cb2 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005c08:	d106      	bne.n	8005c18 <SPI_WaitFifoStateUntilTimeout+0x26>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d103      	bne.n	8005c18 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	330c      	adds	r3, #12
 8005c16:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c1e:	d048      	beq.n	8005cb2 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005c20:	f7fb ff06 	bl	8001a30 <HAL_GetTick>
 8005c24:	4602      	mov	r2, r0
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	683a      	ldr	r2, [r7, #0]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d902      	bls.n	8005c36 <SPI_WaitFifoStateUntilTimeout+0x44>
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d13d      	bne.n	8005cb2 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c4e:	d111      	bne.n	8005c74 <SPI_WaitFifoStateUntilTimeout+0x82>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c58:	d004      	beq.n	8005c64 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c62:	d107      	bne.n	8005c74 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c7c:	d10f      	bne.n	8005c9e <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c8c:	601a      	str	r2, [r3, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e008      	b.n	8005cc4 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	689a      	ldr	r2, [r3, #8]
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	4013      	ands	r3, r2
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d19f      	bne.n	8005c02 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3710      	adds	r7, #16
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b086      	sub	sp, #24
 8005cd0:	af02      	add	r7, sp, #8
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	9300      	str	r3, [sp, #0]
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f7ff ff84 	bl	8005bf2 <SPI_WaitFifoStateUntilTimeout>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d007      	beq.n	8005d00 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cf4:	f043 0220 	orr.w	r2, r3, #32
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	e027      	b.n	8005d50 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	9300      	str	r3, [sp, #0]
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	2200      	movs	r2, #0
 8005d08:	2180      	movs	r1, #128	; 0x80
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f7ff ff07 	bl	8005b1e <SPI_WaitFlagStateUntilTimeout>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d007      	beq.n	8005d26 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d1a:	f043 0220 	orr.w	r2, r3, #32
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e014      	b.n	8005d50 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	9300      	str	r3, [sp, #0]
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	f7ff ff5d 	bl	8005bf2 <SPI_WaitFifoStateUntilTimeout>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d007      	beq.n	8005d4e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d42:	f043 0220 	orr.w	r2, r3, #32
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e000      	b.n	8005d50 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e049      	b.n	8005dfe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d106      	bne.n	8005d84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f7fb fd34 	bl	80017ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2202      	movs	r2, #2
 8005d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	3304      	adds	r3, #4
 8005d94:	4619      	mov	r1, r3
 8005d96:	4610      	mov	r0, r2
 8005d98:	f000 fc24 	bl	80065e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3708      	adds	r7, #8
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
	...

08005e08 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d001      	beq.n	8005e20 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e019      	b.n	8005e54 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2202      	movs	r2, #2
 8005e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	689a      	ldr	r2, [r3, #8]
 8005e2e:	4b0c      	ldr	r3, [pc, #48]	; (8005e60 <HAL_TIM_Base_Start+0x58>)
 8005e30:	4013      	ands	r3, r2
 8005e32:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2b06      	cmp	r3, #6
 8005e38:	d00b      	beq.n	8005e52 <HAL_TIM_Base_Start+0x4a>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e40:	d007      	beq.n	8005e52 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f042 0201 	orr.w	r2, r2, #1
 8005e50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3714      	adds	r7, #20
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr
 8005e60:	00010007 	.word	0x00010007

08005e64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d001      	beq.n	8005e7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e021      	b.n	8005ec0 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2202      	movs	r2, #2
 8005e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68da      	ldr	r2, [r3, #12]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f042 0201 	orr.w	r2, r2, #1
 8005e92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	689a      	ldr	r2, [r3, #8]
 8005e9a:	4b0c      	ldr	r3, [pc, #48]	; (8005ecc <HAL_TIM_Base_Start_IT+0x68>)
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2b06      	cmp	r3, #6
 8005ea4:	d00b      	beq.n	8005ebe <HAL_TIM_Base_Start_IT+0x5a>
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eac:	d007      	beq.n	8005ebe <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f042 0201 	orr.w	r2, r2, #1
 8005ebc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3714      	adds	r7, #20
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr
 8005ecc:	00010007 	.word	0x00010007

08005ed0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d101      	bne.n	8005ee4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e097      	b.n	8006014 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d106      	bne.n	8005efe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f7fb fc23 	bl	8001744 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2202      	movs	r2, #2
 8005f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	6812      	ldr	r2, [r2, #0]
 8005f10:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005f14:	f023 0307 	bic.w	r3, r3, #7
 8005f18:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	3304      	adds	r3, #4
 8005f22:	4619      	mov	r1, r3
 8005f24:	4610      	mov	r0, r2
 8005f26:	f000 fb5d 	bl	80065e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	699b      	ldr	r3, [r3, #24]
 8005f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	6a1b      	ldr	r3, [r3, #32]
 8005f40:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f52:	f023 0303 	bic.w	r3, r3, #3
 8005f56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	689a      	ldr	r2, [r3, #8]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	021b      	lsls	r3, r3, #8
 8005f62:	4313      	orrs	r3, r2
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005f70:	f023 030c 	bic.w	r3, r3, #12
 8005f74:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	68da      	ldr	r2, [r3, #12]
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	69db      	ldr	r3, [r3, #28]
 8005f8a:	021b      	lsls	r3, r3, #8
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	011a      	lsls	r2, r3, #4
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	031b      	lsls	r3, r3, #12
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	693a      	ldr	r2, [r7, #16]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005fae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005fb6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	685a      	ldr	r2, [r3, #4]
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	695b      	ldr	r3, [r3, #20]
 8005fc0:	011b      	lsls	r3, r3, #4
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	697a      	ldr	r2, [r7, #20]
 8005fd0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3718      	adds	r7, #24
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	f003 0302 	and.w	r3, r3, #2
 800602e:	2b02      	cmp	r3, #2
 8006030:	d122      	bne.n	8006078 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	f003 0302 	and.w	r3, r3, #2
 800603c:	2b02      	cmp	r3, #2
 800603e:	d11b      	bne.n	8006078 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f06f 0202 	mvn.w	r2, #2
 8006048:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2201      	movs	r2, #1
 800604e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	f003 0303 	and.w	r3, r3, #3
 800605a:	2b00      	cmp	r3, #0
 800605c:	d003      	beq.n	8006066 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 faa2 	bl	80065a8 <HAL_TIM_IC_CaptureCallback>
 8006064:	e005      	b.n	8006072 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 fa94 	bl	8006594 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 faa5 	bl	80065bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	f003 0304 	and.w	r3, r3, #4
 8006082:	2b04      	cmp	r3, #4
 8006084:	d122      	bne.n	80060cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	f003 0304 	and.w	r3, r3, #4
 8006090:	2b04      	cmp	r3, #4
 8006092:	d11b      	bne.n	80060cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f06f 0204 	mvn.w	r2, #4
 800609c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2202      	movs	r2, #2
 80060a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d003      	beq.n	80060ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 fa78 	bl	80065a8 <HAL_TIM_IC_CaptureCallback>
 80060b8:	e005      	b.n	80060c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 fa6a 	bl	8006594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 fa7b 	bl	80065bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	f003 0308 	and.w	r3, r3, #8
 80060d6:	2b08      	cmp	r3, #8
 80060d8:	d122      	bne.n	8006120 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	f003 0308 	and.w	r3, r3, #8
 80060e4:	2b08      	cmp	r3, #8
 80060e6:	d11b      	bne.n	8006120 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f06f 0208 	mvn.w	r2, #8
 80060f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2204      	movs	r2, #4
 80060f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	69db      	ldr	r3, [r3, #28]
 80060fe:	f003 0303 	and.w	r3, r3, #3
 8006102:	2b00      	cmp	r3, #0
 8006104:	d003      	beq.n	800610e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 fa4e 	bl	80065a8 <HAL_TIM_IC_CaptureCallback>
 800610c:	e005      	b.n	800611a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 fa40 	bl	8006594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 fa51 	bl	80065bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	f003 0310 	and.w	r3, r3, #16
 800612a:	2b10      	cmp	r3, #16
 800612c:	d122      	bne.n	8006174 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	f003 0310 	and.w	r3, r3, #16
 8006138:	2b10      	cmp	r3, #16
 800613a:	d11b      	bne.n	8006174 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f06f 0210 	mvn.w	r2, #16
 8006144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2208      	movs	r2, #8
 800614a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	69db      	ldr	r3, [r3, #28]
 8006152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006156:	2b00      	cmp	r3, #0
 8006158:	d003      	beq.n	8006162 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 fa24 	bl	80065a8 <HAL_TIM_IC_CaptureCallback>
 8006160:	e005      	b.n	800616e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 fa16 	bl	8006594 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 fa27 	bl	80065bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	f003 0301 	and.w	r3, r3, #1
 800617e:	2b01      	cmp	r3, #1
 8006180:	d10e      	bne.n	80061a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	f003 0301 	and.w	r3, r3, #1
 800618c:	2b01      	cmp	r3, #1
 800618e:	d107      	bne.n	80061a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f06f 0201 	mvn.w	r2, #1
 8006198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f9f0 	bl	8006580 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061aa:	2b80      	cmp	r3, #128	; 0x80
 80061ac:	d10e      	bne.n	80061cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b8:	2b80      	cmp	r3, #128	; 0x80
 80061ba:	d107      	bne.n	80061cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80061c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 fd5e 	bl	8006c88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061da:	d10e      	bne.n	80061fa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061e6:	2b80      	cmp	r3, #128	; 0x80
 80061e8:	d107      	bne.n	80061fa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80061f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 fd51 	bl	8006c9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006204:	2b40      	cmp	r3, #64	; 0x40
 8006206:	d10e      	bne.n	8006226 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006212:	2b40      	cmp	r3, #64	; 0x40
 8006214:	d107      	bne.n	8006226 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800621e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 f9d5 	bl	80065d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	f003 0320 	and.w	r3, r3, #32
 8006230:	2b20      	cmp	r3, #32
 8006232:	d10e      	bne.n	8006252 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	f003 0320 	and.w	r3, r3, #32
 800623e:	2b20      	cmp	r3, #32
 8006240:	d107      	bne.n	8006252 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f06f 0220 	mvn.w	r2, #32
 800624a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 fd11 	bl	8006c74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800625c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006260:	d10f      	bne.n	8006282 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800626c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006270:	d107      	bne.n	8006282 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800627a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 fd17 	bl	8006cb0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800628c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006290:	d10f      	bne.n	80062b2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800629c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062a0:	d107      	bne.n	80062b2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80062aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 fd09 	bl	8006cc4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062c0:	d10f      	bne.n	80062e2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062d0:	d107      	bne.n	80062e2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80062da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 fcfb 	bl	8006cd8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80062f0:	d10f      	bne.n	8006312 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006300:	d107      	bne.n	8006312 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800630a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 fced 	bl	8006cec <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006312:	bf00      	nop
 8006314:	3708      	adds	r7, #8
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
	...

0800631c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800632c:	2b01      	cmp	r3, #1
 800632e:	d101      	bne.n	8006334 <HAL_TIM_ConfigClockSource+0x18>
 8006330:	2302      	movs	r3, #2
 8006332:	e0d2      	b.n	80064da <HAL_TIM_ConfigClockSource+0x1be>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2202      	movs	r2, #2
 8006340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006352:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006356:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800635e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006370:	f000 80a9 	beq.w	80064c6 <HAL_TIM_ConfigClockSource+0x1aa>
 8006374:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006378:	d81a      	bhi.n	80063b0 <HAL_TIM_ConfigClockSource+0x94>
 800637a:	2b30      	cmp	r3, #48	; 0x30
 800637c:	f000 809a 	beq.w	80064b4 <HAL_TIM_ConfigClockSource+0x198>
 8006380:	2b30      	cmp	r3, #48	; 0x30
 8006382:	d809      	bhi.n	8006398 <HAL_TIM_ConfigClockSource+0x7c>
 8006384:	2b10      	cmp	r3, #16
 8006386:	f000 8095 	beq.w	80064b4 <HAL_TIM_ConfigClockSource+0x198>
 800638a:	2b20      	cmp	r3, #32
 800638c:	f000 8092 	beq.w	80064b4 <HAL_TIM_ConfigClockSource+0x198>
 8006390:	2b00      	cmp	r3, #0
 8006392:	f000 808f 	beq.w	80064b4 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006396:	e097      	b.n	80064c8 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8006398:	2b50      	cmp	r3, #80	; 0x50
 800639a:	d05b      	beq.n	8006454 <HAL_TIM_ConfigClockSource+0x138>
 800639c:	2b50      	cmp	r3, #80	; 0x50
 800639e:	d802      	bhi.n	80063a6 <HAL_TIM_ConfigClockSource+0x8a>
 80063a0:	2b40      	cmp	r3, #64	; 0x40
 80063a2:	d077      	beq.n	8006494 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80063a4:	e090      	b.n	80064c8 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80063a6:	2b60      	cmp	r3, #96	; 0x60
 80063a8:	d064      	beq.n	8006474 <HAL_TIM_ConfigClockSource+0x158>
 80063aa:	2b70      	cmp	r3, #112	; 0x70
 80063ac:	d028      	beq.n	8006400 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 80063ae:	e08b      	b.n	80064c8 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80063b0:	4a4c      	ldr	r2, [pc, #304]	; (80064e4 <HAL_TIM_ConfigClockSource+0x1c8>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d07e      	beq.n	80064b4 <HAL_TIM_ConfigClockSource+0x198>
 80063b6:	4a4b      	ldr	r2, [pc, #300]	; (80064e4 <HAL_TIM_ConfigClockSource+0x1c8>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d810      	bhi.n	80063de <HAL_TIM_ConfigClockSource+0xc2>
 80063bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063c0:	d078      	beq.n	80064b4 <HAL_TIM_ConfigClockSource+0x198>
 80063c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063c6:	d803      	bhi.n	80063d0 <HAL_TIM_ConfigClockSource+0xb4>
 80063c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063cc:	d02f      	beq.n	800642e <HAL_TIM_ConfigClockSource+0x112>
      break;
 80063ce:	e07b      	b.n	80064c8 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80063d0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80063d4:	d06e      	beq.n	80064b4 <HAL_TIM_ConfigClockSource+0x198>
 80063d6:	4a44      	ldr	r2, [pc, #272]	; (80064e8 <HAL_TIM_ConfigClockSource+0x1cc>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d06b      	beq.n	80064b4 <HAL_TIM_ConfigClockSource+0x198>
      break;
 80063dc:	e074      	b.n	80064c8 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80063de:	4a43      	ldr	r2, [pc, #268]	; (80064ec <HAL_TIM_ConfigClockSource+0x1d0>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d067      	beq.n	80064b4 <HAL_TIM_ConfigClockSource+0x198>
 80063e4:	4a41      	ldr	r2, [pc, #260]	; (80064ec <HAL_TIM_ConfigClockSource+0x1d0>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d803      	bhi.n	80063f2 <HAL_TIM_ConfigClockSource+0xd6>
 80063ea:	4a41      	ldr	r2, [pc, #260]	; (80064f0 <HAL_TIM_ConfigClockSource+0x1d4>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d061      	beq.n	80064b4 <HAL_TIM_ConfigClockSource+0x198>
      break;
 80063f0:	e06a      	b.n	80064c8 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80063f2:	4a40      	ldr	r2, [pc, #256]	; (80064f4 <HAL_TIM_ConfigClockSource+0x1d8>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d05d      	beq.n	80064b4 <HAL_TIM_ConfigClockSource+0x198>
 80063f8:	4a3f      	ldr	r2, [pc, #252]	; (80064f8 <HAL_TIM_ConfigClockSource+0x1dc>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d05a      	beq.n	80064b4 <HAL_TIM_ConfigClockSource+0x198>
      break;
 80063fe:	e063      	b.n	80064c8 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6818      	ldr	r0, [r3, #0]
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	6899      	ldr	r1, [r3, #8]
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	685a      	ldr	r2, [r3, #4]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	f000 fac8 	bl	80069a4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006422:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	609a      	str	r2, [r3, #8]
      break;
 800642c:	e04c      	b.n	80064c8 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6818      	ldr	r0, [r3, #0]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	6899      	ldr	r1, [r3, #8]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	685a      	ldr	r2, [r3, #4]
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	f000 fab1 	bl	80069a4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	689a      	ldr	r2, [r3, #8]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006450:	609a      	str	r2, [r3, #8]
      break;
 8006452:	e039      	b.n	80064c8 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6818      	ldr	r0, [r3, #0]
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	6859      	ldr	r1, [r3, #4]
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	461a      	mov	r2, r3
 8006462:	f000 fa23 	bl	80068ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2150      	movs	r1, #80	; 0x50
 800646c:	4618      	mov	r0, r3
 800646e:	f000 fa7c 	bl	800696a <TIM_ITRx_SetConfig>
      break;
 8006472:	e029      	b.n	80064c8 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6818      	ldr	r0, [r3, #0]
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	6859      	ldr	r1, [r3, #4]
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	461a      	mov	r2, r3
 8006482:	f000 fa42 	bl	800690a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2160      	movs	r1, #96	; 0x60
 800648c:	4618      	mov	r0, r3
 800648e:	f000 fa6c 	bl	800696a <TIM_ITRx_SetConfig>
      break;
 8006492:	e019      	b.n	80064c8 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6818      	ldr	r0, [r3, #0]
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	6859      	ldr	r1, [r3, #4]
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	461a      	mov	r2, r3
 80064a2:	f000 fa03 	bl	80068ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2140      	movs	r1, #64	; 0x40
 80064ac:	4618      	mov	r0, r3
 80064ae:	f000 fa5c 	bl	800696a <TIM_ITRx_SetConfig>
      break;
 80064b2:	e009      	b.n	80064c8 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4619      	mov	r1, r3
 80064be:	4610      	mov	r0, r2
 80064c0:	f000 fa53 	bl	800696a <TIM_ITRx_SetConfig>
      break;
 80064c4:	e000      	b.n	80064c8 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 80064c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3710      	adds	r7, #16
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	00100030 	.word	0x00100030
 80064e8:	00100020 	.word	0x00100020
 80064ec:	00100050 	.word	0x00100050
 80064f0:	00100040 	.word	0x00100040
 80064f4:	00100060 	.word	0x00100060
 80064f8:	00100070 	.word	0x00100070

080064fc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800650c:	2b01      	cmp	r3, #1
 800650e:	d101      	bne.n	8006514 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006510:	2302      	movs	r3, #2
 8006512:	e031      	b.n	8006578 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2202      	movs	r2, #2
 8006520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006524:	6839      	ldr	r1, [r7, #0]
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 f904 	bl	8006734 <TIM_SlaveTimer_SetConfig>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d009      	beq.n	8006546 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2201      	movs	r2, #1
 8006536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e018      	b.n	8006578 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68da      	ldr	r2, [r3, #12]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006554:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68da      	ldr	r2, [r3, #12]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006564:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2201      	movs	r2, #1
 800656a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	3708      	adds	r7, #8
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006588:	bf00      	nop
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800659c:	bf00      	nop
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80065b0:	bf00      	nop
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065c4:	bf00      	nop
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065d8:	bf00      	nop
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a46      	ldr	r2, [pc, #280]	; (8006710 <TIM_Base_SetConfig+0x12c>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d017      	beq.n	800662c <TIM_Base_SetConfig+0x48>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006602:	d013      	beq.n	800662c <TIM_Base_SetConfig+0x48>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a43      	ldr	r2, [pc, #268]	; (8006714 <TIM_Base_SetConfig+0x130>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d00f      	beq.n	800662c <TIM_Base_SetConfig+0x48>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a42      	ldr	r2, [pc, #264]	; (8006718 <TIM_Base_SetConfig+0x134>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d00b      	beq.n	800662c <TIM_Base_SetConfig+0x48>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a41      	ldr	r2, [pc, #260]	; (800671c <TIM_Base_SetConfig+0x138>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d007      	beq.n	800662c <TIM_Base_SetConfig+0x48>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a40      	ldr	r2, [pc, #256]	; (8006720 <TIM_Base_SetConfig+0x13c>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d003      	beq.n	800662c <TIM_Base_SetConfig+0x48>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a3f      	ldr	r2, [pc, #252]	; (8006724 <TIM_Base_SetConfig+0x140>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d108      	bne.n	800663e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006632:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	4313      	orrs	r3, r2
 800663c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a33      	ldr	r2, [pc, #204]	; (8006710 <TIM_Base_SetConfig+0x12c>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d023      	beq.n	800668e <TIM_Base_SetConfig+0xaa>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800664c:	d01f      	beq.n	800668e <TIM_Base_SetConfig+0xaa>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a30      	ldr	r2, [pc, #192]	; (8006714 <TIM_Base_SetConfig+0x130>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d01b      	beq.n	800668e <TIM_Base_SetConfig+0xaa>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a2f      	ldr	r2, [pc, #188]	; (8006718 <TIM_Base_SetConfig+0x134>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d017      	beq.n	800668e <TIM_Base_SetConfig+0xaa>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a2e      	ldr	r2, [pc, #184]	; (800671c <TIM_Base_SetConfig+0x138>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d013      	beq.n	800668e <TIM_Base_SetConfig+0xaa>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a2d      	ldr	r2, [pc, #180]	; (8006720 <TIM_Base_SetConfig+0x13c>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d00f      	beq.n	800668e <TIM_Base_SetConfig+0xaa>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a2d      	ldr	r2, [pc, #180]	; (8006728 <TIM_Base_SetConfig+0x144>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d00b      	beq.n	800668e <TIM_Base_SetConfig+0xaa>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a2c      	ldr	r2, [pc, #176]	; (800672c <TIM_Base_SetConfig+0x148>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d007      	beq.n	800668e <TIM_Base_SetConfig+0xaa>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a2b      	ldr	r2, [pc, #172]	; (8006730 <TIM_Base_SetConfig+0x14c>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d003      	beq.n	800668e <TIM_Base_SetConfig+0xaa>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a26      	ldr	r2, [pc, #152]	; (8006724 <TIM_Base_SetConfig+0x140>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d108      	bne.n	80066a0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006694:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	4313      	orrs	r3, r2
 800669e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	689a      	ldr	r2, [r3, #8]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a12      	ldr	r2, [pc, #72]	; (8006710 <TIM_Base_SetConfig+0x12c>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d013      	beq.n	80066f4 <TIM_Base_SetConfig+0x110>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a14      	ldr	r2, [pc, #80]	; (8006720 <TIM_Base_SetConfig+0x13c>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d00f      	beq.n	80066f4 <TIM_Base_SetConfig+0x110>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a14      	ldr	r2, [pc, #80]	; (8006728 <TIM_Base_SetConfig+0x144>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d00b      	beq.n	80066f4 <TIM_Base_SetConfig+0x110>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a13      	ldr	r2, [pc, #76]	; (800672c <TIM_Base_SetConfig+0x148>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d007      	beq.n	80066f4 <TIM_Base_SetConfig+0x110>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a12      	ldr	r2, [pc, #72]	; (8006730 <TIM_Base_SetConfig+0x14c>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d003      	beq.n	80066f4 <TIM_Base_SetConfig+0x110>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a0d      	ldr	r2, [pc, #52]	; (8006724 <TIM_Base_SetConfig+0x140>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d103      	bne.n	80066fc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	691a      	ldr	r2, [r3, #16]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	615a      	str	r2, [r3, #20]
}
 8006702:	bf00      	nop
 8006704:	3714      	adds	r7, #20
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	40012c00 	.word	0x40012c00
 8006714:	40000400 	.word	0x40000400
 8006718:	40000800 	.word	0x40000800
 800671c:	40000c00 	.word	0x40000c00
 8006720:	40013400 	.word	0x40013400
 8006724:	40015000 	.word	0x40015000
 8006728:	40014000 	.word	0x40014000
 800672c:	40014400 	.word	0x40014400
 8006730:	40014800 	.word	0x40014800

08006734 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b086      	sub	sp, #24
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800674c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006750:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	697a      	ldr	r2, [r7, #20]
 8006758:	4313      	orrs	r3, r2
 800675a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006762:	f023 0307 	bic.w	r3, r3, #7
 8006766:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	697a      	ldr	r2, [r7, #20]
 800676e:	4313      	orrs	r3, r2
 8006770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	697a      	ldr	r2, [r7, #20]
 8006778:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	2b70      	cmp	r3, #112	; 0x70
 8006780:	d034      	beq.n	80067ec <TIM_SlaveTimer_SetConfig+0xb8>
 8006782:	2b70      	cmp	r3, #112	; 0x70
 8006784:	d811      	bhi.n	80067aa <TIM_SlaveTimer_SetConfig+0x76>
 8006786:	2b30      	cmp	r3, #48	; 0x30
 8006788:	d07d      	beq.n	8006886 <TIM_SlaveTimer_SetConfig+0x152>
 800678a:	2b30      	cmp	r3, #48	; 0x30
 800678c:	d806      	bhi.n	800679c <TIM_SlaveTimer_SetConfig+0x68>
 800678e:	2b10      	cmp	r3, #16
 8006790:	d079      	beq.n	8006886 <TIM_SlaveTimer_SetConfig+0x152>
 8006792:	2b20      	cmp	r3, #32
 8006794:	d077      	beq.n	8006886 <TIM_SlaveTimer_SetConfig+0x152>
 8006796:	2b00      	cmp	r3, #0
 8006798:	d075      	beq.n	8006886 <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 800679a:	e075      	b.n	8006888 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800679c:	2b50      	cmp	r3, #80	; 0x50
 800679e:	d05e      	beq.n	800685e <TIM_SlaveTimer_SetConfig+0x12a>
 80067a0:	2b60      	cmp	r3, #96	; 0x60
 80067a2:	d066      	beq.n	8006872 <TIM_SlaveTimer_SetConfig+0x13e>
 80067a4:	2b40      	cmp	r3, #64	; 0x40
 80067a6:	d02c      	beq.n	8006802 <TIM_SlaveTimer_SetConfig+0xce>
      break;
 80067a8:	e06e      	b.n	8006888 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 80067aa:	4a3a      	ldr	r2, [pc, #232]	; (8006894 <TIM_SlaveTimer_SetConfig+0x160>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d06a      	beq.n	8006886 <TIM_SlaveTimer_SetConfig+0x152>
 80067b0:	4a38      	ldr	r2, [pc, #224]	; (8006894 <TIM_SlaveTimer_SetConfig+0x160>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d809      	bhi.n	80067ca <TIM_SlaveTimer_SetConfig+0x96>
 80067b6:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80067ba:	d064      	beq.n	8006886 <TIM_SlaveTimer_SetConfig+0x152>
 80067bc:	4a36      	ldr	r2, [pc, #216]	; (8006898 <TIM_SlaveTimer_SetConfig+0x164>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d061      	beq.n	8006886 <TIM_SlaveTimer_SetConfig+0x152>
 80067c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067c6:	d05e      	beq.n	8006886 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 80067c8:	e05e      	b.n	8006888 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 80067ca:	4a34      	ldr	r2, [pc, #208]	; (800689c <TIM_SlaveTimer_SetConfig+0x168>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d05a      	beq.n	8006886 <TIM_SlaveTimer_SetConfig+0x152>
 80067d0:	4a32      	ldr	r2, [pc, #200]	; (800689c <TIM_SlaveTimer_SetConfig+0x168>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d803      	bhi.n	80067de <TIM_SlaveTimer_SetConfig+0xaa>
 80067d6:	4a32      	ldr	r2, [pc, #200]	; (80068a0 <TIM_SlaveTimer_SetConfig+0x16c>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d054      	beq.n	8006886 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 80067dc:	e054      	b.n	8006888 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 80067de:	4a31      	ldr	r2, [pc, #196]	; (80068a4 <TIM_SlaveTimer_SetConfig+0x170>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d050      	beq.n	8006886 <TIM_SlaveTimer_SetConfig+0x152>
 80067e4:	4a30      	ldr	r2, [pc, #192]	; (80068a8 <TIM_SlaveTimer_SetConfig+0x174>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d04d      	beq.n	8006886 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 80067ea:	e04d      	b.n	8006888 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6818      	ldr	r0, [r3, #0]
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	68d9      	ldr	r1, [r3, #12]
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	689a      	ldr	r2, [r3, #8]
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	f000 f8d2 	bl	80069a4 <TIM_ETR_SetConfig>
      break;
 8006800:	e042      	b.n	8006888 <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2b05      	cmp	r3, #5
 8006808:	d004      	beq.n	8006814 <TIM_SlaveTimer_SetConfig+0xe0>
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8006812:	d101      	bne.n	8006818 <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	e038      	b.n	800688a <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	6a1a      	ldr	r2, [r3, #32]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f022 0201 	bic.w	r2, r2, #1
 800682e:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800683e:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	011b      	lsls	r3, r3, #4
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	4313      	orrs	r3, r2
 800684a:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	621a      	str	r2, [r3, #32]
      break;
 800685c:	e014      	b.n	8006888 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6818      	ldr	r0, [r3, #0]
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	6899      	ldr	r1, [r3, #8]
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	461a      	mov	r2, r3
 800686c:	f000 f81e 	bl	80068ac <TIM_TI1_ConfigInputStage>
      break;
 8006870:	e00a      	b.n	8006888 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6818      	ldr	r0, [r3, #0]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	6899      	ldr	r1, [r3, #8]
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	461a      	mov	r2, r3
 8006880:	f000 f843 	bl	800690a <TIM_TI2_ConfigInputStage>
      break;
 8006884:	e000      	b.n	8006888 <TIM_SlaveTimer_SetConfig+0x154>
      break;
 8006886:	bf00      	nop
  }
  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3718      	adds	r7, #24
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	00100030 	.word	0x00100030
 8006898:	00100020 	.word	0x00100020
 800689c:	00100050 	.word	0x00100050
 80068a0:	00100040 	.word	0x00100040
 80068a4:	00100060 	.word	0x00100060
 80068a8:	00100070 	.word	0x00100070

080068ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b087      	sub	sp, #28
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6a1b      	ldr	r3, [r3, #32]
 80068bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6a1b      	ldr	r3, [r3, #32]
 80068c2:	f023 0201 	bic.w	r2, r3, #1
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	011b      	lsls	r3, r3, #4
 80068dc:	693a      	ldr	r2, [r7, #16]
 80068de:	4313      	orrs	r3, r2
 80068e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	f023 030a 	bic.w	r3, r3, #10
 80068e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80068ea:	697a      	ldr	r2, [r7, #20]
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	697a      	ldr	r2, [r7, #20]
 80068fc:	621a      	str	r2, [r3, #32]
}
 80068fe:	bf00      	nop
 8006900:	371c      	adds	r7, #28
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr

0800690a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800690a:	b480      	push	{r7}
 800690c:	b087      	sub	sp, #28
 800690e:	af00      	add	r7, sp, #0
 8006910:	60f8      	str	r0, [r7, #12]
 8006912:	60b9      	str	r1, [r7, #8]
 8006914:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6a1b      	ldr	r3, [r3, #32]
 800691a:	f023 0210 	bic.w	r2, r3, #16
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	699b      	ldr	r3, [r3, #24]
 8006926:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6a1b      	ldr	r3, [r3, #32]
 800692c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006934:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	031b      	lsls	r3, r3, #12
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	4313      	orrs	r3, r2
 800693e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006946:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	011b      	lsls	r3, r3, #4
 800694c:	693a      	ldr	r2, [r7, #16]
 800694e:	4313      	orrs	r3, r2
 8006950:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	697a      	ldr	r2, [r7, #20]
 8006956:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	693a      	ldr	r2, [r7, #16]
 800695c:	621a      	str	r2, [r3, #32]
}
 800695e:	bf00      	nop
 8006960:	371c      	adds	r7, #28
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr

0800696a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800696a:	b480      	push	{r7}
 800696c:	b085      	sub	sp, #20
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
 8006972:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006984:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006986:	683a      	ldr	r2, [r7, #0]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	4313      	orrs	r3, r2
 800698c:	f043 0307 	orr.w	r3, r3, #7
 8006990:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	609a      	str	r2, [r3, #8]
}
 8006998:	bf00      	nop
 800699a:	3714      	adds	r7, #20
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b087      	sub	sp, #28
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	607a      	str	r2, [r7, #4]
 80069b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	021a      	lsls	r2, r3, #8
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	431a      	orrs	r2, r3
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	697a      	ldr	r2, [r7, #20]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	697a      	ldr	r2, [r7, #20]
 80069d6:	609a      	str	r2, [r3, #8]
}
 80069d8:	bf00      	nop
 80069da:	371c      	adds	r7, #28
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d101      	bne.n	80069fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069f8:	2302      	movs	r3, #2
 80069fa:	e074      	b.n	8006ae6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2202      	movs	r2, #2
 8006a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a34      	ldr	r2, [pc, #208]	; (8006af4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d009      	beq.n	8006a3a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a33      	ldr	r2, [pc, #204]	; (8006af8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d004      	beq.n	8006a3a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a31      	ldr	r2, [pc, #196]	; (8006afc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d108      	bne.n	8006a4c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006a40:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a21      	ldr	r2, [pc, #132]	; (8006af4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d022      	beq.n	8006aba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a7c:	d01d      	beq.n	8006aba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a1f      	ldr	r2, [pc, #124]	; (8006b00 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d018      	beq.n	8006aba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a1d      	ldr	r2, [pc, #116]	; (8006b04 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d013      	beq.n	8006aba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a1c      	ldr	r2, [pc, #112]	; (8006b08 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d00e      	beq.n	8006aba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a15      	ldr	r2, [pc, #84]	; (8006af8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d009      	beq.n	8006aba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a18      	ldr	r2, [pc, #96]	; (8006b0c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d004      	beq.n	8006aba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a11      	ldr	r2, [pc, #68]	; (8006afc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d10c      	bne.n	8006ad4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ac0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	68ba      	ldr	r2, [r7, #8]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68ba      	ldr	r2, [r7, #8]
 8006ad2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3714      	adds	r7, #20
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	40012c00 	.word	0x40012c00
 8006af8:	40013400 	.word	0x40013400
 8006afc:	40015000 	.word	0x40015000
 8006b00:	40000400 	.word	0x40000400
 8006b04:	40000800 	.word	0x40000800
 8006b08:	40000c00 	.word	0x40000c00
 8006b0c:	40014000 	.word	0x40014000

08006b10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b085      	sub	sp, #20
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d101      	bne.n	8006b2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b28:	2302      	movs	r3, #2
 8006b2a:	e096      	b.n	8006c5a <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	695b      	ldr	r3, [r3, #20]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b92:	4313      	orrs	r3, r2
 8006b94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	041b      	lsls	r3, r3, #16
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a2f      	ldr	r2, [pc, #188]	; (8006c68 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d009      	beq.n	8006bc4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a2d      	ldr	r2, [pc, #180]	; (8006c6c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d004      	beq.n	8006bc4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a2c      	ldr	r2, [pc, #176]	; (8006c70 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d106      	bne.n	8006bd2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	69db      	ldr	r3, [r3, #28]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a24      	ldr	r2, [pc, #144]	; (8006c68 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d009      	beq.n	8006bf0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a22      	ldr	r2, [pc, #136]	; (8006c6c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d004      	beq.n	8006bf0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a21      	ldr	r2, [pc, #132]	; (8006c70 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d12b      	bne.n	8006c48 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bfa:	051b      	lsls	r3, r3, #20
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	6a1b      	ldr	r3, [r3, #32]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a11      	ldr	r2, [pc, #68]	; (8006c68 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d009      	beq.n	8006c3a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a10      	ldr	r2, [pc, #64]	; (8006c6c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d004      	beq.n	8006c3a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a0e      	ldr	r2, [pc, #56]	; (8006c70 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d106      	bne.n	8006c48 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c44:	4313      	orrs	r3, r2
 8006c46:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3714      	adds	r7, #20
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	40012c00 	.word	0x40012c00
 8006c6c:	40013400 	.word	0x40013400
 8006c70:	40015000 	.word	0x40015000

08006c74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c7c:	bf00      	nop
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c90:	bf00      	nop
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ca4:	bf00      	nop
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006cb8:	bf00      	nop
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006ccc:	bf00      	nop
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 8006d00:	b590      	push	{r4, r7, lr}
 8006d02:	b08b      	sub	sp, #44	; 0x2c
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	4604      	mov	r4, r0
 8006d08:	4608      	mov	r0, r1
 8006d0a:	4611      	mov	r1, r2
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	4623      	mov	r3, r4
 8006d10:	80fb      	strh	r3, [r7, #6]
 8006d12:	4603      	mov	r3, r0
 8006d14:	80bb      	strh	r3, [r7, #4]
 8006d16:	460b      	mov	r3, r1
 8006d18:	807b      	strh	r3, [r7, #2]
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 8006d1e:	887b      	ldrh	r3, [r7, #2]
 8006d20:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 8006d22:	2300      	movs	r3, #0
 8006d24:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 8006d26:	887b      	ldrh	r3, [r7, #2]
 8006d28:	005b      	lsls	r3, r3, #1
 8006d2a:	f1c3 0301 	rsb	r3, r3, #1
 8006d2e:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 8006d30:	2300      	movs	r3, #0
 8006d32:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 8006d34:	2300      	movs	r3, #0
 8006d36:	617b      	str	r3, [r7, #20]

    while (x >= y)
 8006d38:	e061      	b.n	8006dfe <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 8006d3a:	88fa      	ldrh	r2, [r7, #6]
 8006d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3e:	1ad3      	subs	r3, r2, r3
 8006d40:	613b      	str	r3, [r7, #16]
 8006d42:	e018      	b.n	8006d76 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	b298      	uxth	r0, r3
 8006d48:	6a3b      	ldr	r3, [r7, #32]
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	88bb      	ldrh	r3, [r7, #4]
 8006d4e:	4413      	add	r3, r2
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	883a      	ldrh	r2, [r7, #0]
 8006d54:	4619      	mov	r1, r3
 8006d56:	f000 fc0d 	bl	8007574 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	b298      	uxth	r0, r3
 8006d5e:	6a3b      	ldr	r3, [r7, #32]
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	88ba      	ldrh	r2, [r7, #4]
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	883a      	ldrh	r2, [r7, #0]
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	f000 fc02 	bl	8007574 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	3301      	adds	r3, #1
 8006d74:	613b      	str	r3, [r7, #16]
 8006d76:	88fa      	ldrh	r2, [r7, #6]
 8006d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7a:	4413      	add	r3, r2
 8006d7c:	693a      	ldr	r2, [r7, #16]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	dde0      	ble.n	8006d44 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 8006d82:	88fa      	ldrh	r2, [r7, #6]
 8006d84:	6a3b      	ldr	r3, [r7, #32]
 8006d86:	1ad3      	subs	r3, r2, r3
 8006d88:	60fb      	str	r3, [r7, #12]
 8006d8a:	e018      	b.n	8006dbe <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	b298      	uxth	r0, r3
 8006d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d92:	b29a      	uxth	r2, r3
 8006d94:	88bb      	ldrh	r3, [r7, #4]
 8006d96:	4413      	add	r3, r2
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	883a      	ldrh	r2, [r7, #0]
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	f000 fbe9 	bl	8007574 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	b298      	uxth	r0, r3
 8006da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	88ba      	ldrh	r2, [r7, #4]
 8006dac:	1ad3      	subs	r3, r2, r3
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	883a      	ldrh	r2, [r7, #0]
 8006db2:	4619      	mov	r1, r3
 8006db4:	f000 fbde 	bl	8007574 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	60fb      	str	r3, [r7, #12]
 8006dbe:	88fa      	ldrh	r2, [r7, #6]
 8006dc0:	6a3b      	ldr	r3, [r7, #32]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	68fa      	ldr	r2, [r7, #12]
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	dde0      	ble.n	8006d8c <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 8006dca:	6a3b      	ldr	r3, [r7, #32]
 8006dcc:	3301      	adds	r3, #1
 8006dce:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8006dd0:	697a      	ldr	r2, [r7, #20]
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	3302      	adds	r3, #2
 8006ddc:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	005a      	lsls	r2, r3, #1
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	4413      	add	r3, r2
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	dd09      	ble.n	8006dfe <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 8006dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dec:	3b01      	subs	r3, #1
 8006dee:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 8006df0:	697a      	ldr	r2, [r7, #20]
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	4413      	add	r3, r2
 8006df6:	617b      	str	r3, [r7, #20]
            xChange += 2;
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	3302      	adds	r3, #2
 8006dfc:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 8006dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e00:	6a3b      	ldr	r3, [r7, #32]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	da99      	bge.n	8006d3a <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 8006e06:	bf00      	nop
 8006e08:	372c      	adds	r7, #44	; 0x2c
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd90      	pop	{r4, r7, pc}
	...

08006e10 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8006e10:	b590      	push	{r4, r7, lr}
 8006e12:	b089      	sub	sp, #36	; 0x24
 8006e14:	af02      	add	r7, sp, #8
 8006e16:	4604      	mov	r4, r0
 8006e18:	4608      	mov	r0, r1
 8006e1a:	4611      	mov	r1, r2
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	4623      	mov	r3, r4
 8006e20:	71fb      	strb	r3, [r7, #7]
 8006e22:	4603      	mov	r3, r0
 8006e24:	71bb      	strb	r3, [r7, #6]
 8006e26:	460b      	mov	r3, r1
 8006e28:	717b      	strb	r3, [r7, #5]
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8006e2e:	79fb      	ldrb	r3, [r7, #7]
 8006e30:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8006e32:	7dfb      	ldrb	r3, [r7, #23]
 8006e34:	2b1f      	cmp	r3, #31
 8006e36:	d802      	bhi.n	8006e3e <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	71fb      	strb	r3, [r7, #7]
 8006e3c:	e002      	b.n	8006e44 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8006e3e:	7dfb      	ldrb	r3, [r7, #23]
 8006e40:	3b20      	subs	r3, #32
 8006e42:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8006e44:	2300      	movs	r3, #0
 8006e46:	753b      	strb	r3, [r7, #20]
 8006e48:	e012      	b.n	8006e70 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 8006e4a:	7dfa      	ldrb	r2, [r7, #23]
 8006e4c:	7d38      	ldrb	r0, [r7, #20]
 8006e4e:	7d39      	ldrb	r1, [r7, #20]
 8006e50:	4c3b      	ldr	r4, [pc, #236]	; (8006f40 <ILI9341_Draw_Char+0x130>)
 8006e52:	4613      	mov	r3, r2
 8006e54:	005b      	lsls	r3, r3, #1
 8006e56:	4413      	add	r3, r2
 8006e58:	005b      	lsls	r3, r3, #1
 8006e5a:	4423      	add	r3, r4
 8006e5c:	4403      	add	r3, r0
 8006e5e:	781a      	ldrb	r2, [r3, #0]
 8006e60:	f107 0318 	add.w	r3, r7, #24
 8006e64:	440b      	add	r3, r1
 8006e66:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8006e6a:	7d3b      	ldrb	r3, [r7, #20]
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	753b      	strb	r3, [r7, #20]
 8006e70:	7d3b      	ldrb	r3, [r7, #20]
 8006e72:	2b05      	cmp	r3, #5
 8006e74:	d9e9      	bls.n	8006e4a <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8006e76:	79bb      	ldrb	r3, [r7, #6]
 8006e78:	b298      	uxth	r0, r3
 8006e7a:	797b      	ldrb	r3, [r7, #5]
 8006e7c:	b299      	uxth	r1, r3
 8006e7e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006e80:	461a      	mov	r2, r3
 8006e82:	0052      	lsls	r2, r2, #1
 8006e84:	4413      	add	r3, r2
 8006e86:	005b      	lsls	r3, r3, #1
 8006e88:	b29a      	uxth	r2, r3
 8006e8a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006e8c:	00db      	lsls	r3, r3, #3
 8006e8e:	b29c      	uxth	r4, r3
 8006e90:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006e92:	9300      	str	r3, [sp, #0]
 8006e94:	4623      	mov	r3, r4
 8006e96:	f000 fc35 	bl	8007704 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	757b      	strb	r3, [r7, #21]
 8006e9e:	e048      	b.n	8006f32 <ILI9341_Draw_Char+0x122>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	75bb      	strb	r3, [r7, #22]
 8006ea4:	e03f      	b.n	8006f26 <ILI9341_Draw_Char+0x116>
            if (temp[j] & (1<<i)) {			
 8006ea6:	7d7b      	ldrb	r3, [r7, #21]
 8006ea8:	f107 0218 	add.w	r2, r7, #24
 8006eac:	4413      	add	r3, r2
 8006eae:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	7dbb      	ldrb	r3, [r7, #22]
 8006eb6:	fa42 f303 	asr.w	r3, r2, r3
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d02e      	beq.n	8006f20 <ILI9341_Draw_Char+0x110>
							if(Size == 1)
 8006ec2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d110      	bne.n	8006eea <ILI9341_Draw_Char+0xda>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8006ec8:	79bb      	ldrb	r3, [r7, #6]
 8006eca:	b29a      	uxth	r2, r3
 8006ecc:	7d7b      	ldrb	r3, [r7, #21]
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	4413      	add	r3, r2
 8006ed2:	b298      	uxth	r0, r3
 8006ed4:	797b      	ldrb	r3, [r7, #5]
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	7dbb      	ldrb	r3, [r7, #22]
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	4413      	add	r3, r2
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	887a      	ldrh	r2, [r7, #2]
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	f000 fb46 	bl	8007574 <ILI9341_Draw_Pixel>
 8006ee8:	e01a      	b.n	8006f20 <ILI9341_Draw_Char+0x110>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8006eea:	79bb      	ldrb	r3, [r7, #6]
 8006eec:	b29a      	uxth	r2, r3
 8006eee:	7d7b      	ldrb	r3, [r7, #21]
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8006ef4:	fb11 f303 	smulbb	r3, r1, r3
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	4413      	add	r3, r2
 8006efc:	b298      	uxth	r0, r3
 8006efe:	797b      	ldrb	r3, [r7, #5]
 8006f00:	b29a      	uxth	r2, r3
 8006f02:	7dbb      	ldrb	r3, [r7, #22]
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8006f08:	fb11 f303 	smulbb	r3, r1, r3
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	4413      	add	r3, r2
 8006f10:	b299      	uxth	r1, r3
 8006f12:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8006f14:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006f16:	887b      	ldrh	r3, [r7, #2]
 8006f18:	9300      	str	r3, [sp, #0]
 8006f1a:	4623      	mov	r3, r4
 8006f1c:	f000 fbf2 	bl	8007704 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8006f20:	7dbb      	ldrb	r3, [r7, #22]
 8006f22:	3301      	adds	r3, #1
 8006f24:	75bb      	strb	r3, [r7, #22]
 8006f26:	7dbb      	ldrb	r3, [r7, #22]
 8006f28:	2b07      	cmp	r3, #7
 8006f2a:	d9bc      	bls.n	8006ea6 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 8006f2c:	7d7b      	ldrb	r3, [r7, #21]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	757b      	strb	r3, [r7, #21]
 8006f32:	7d7b      	ldrb	r3, [r7, #21]
 8006f34:	2b05      	cmp	r3, #5
 8006f36:	d9b3      	bls.n	8006ea0 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 8006f38:	bf00      	nop
 8006f3a:	371c      	adds	r7, #28
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd90      	pop	{r4, r7, pc}
 8006f40:	08008b40 	.word	0x08008b40

08006f44 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8006f44:	b590      	push	{r4, r7, lr}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af02      	add	r7, sp, #8
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	4608      	mov	r0, r1
 8006f4e:	4611      	mov	r1, r2
 8006f50:	461a      	mov	r2, r3
 8006f52:	4603      	mov	r3, r0
 8006f54:	70fb      	strb	r3, [r7, #3]
 8006f56:	460b      	mov	r3, r1
 8006f58:	70bb      	strb	r3, [r7, #2]
 8006f5a:	4613      	mov	r3, r2
 8006f5c:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8006f5e:	e017      	b.n	8006f90 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	1c5a      	adds	r2, r3, #1
 8006f64:	607a      	str	r2, [r7, #4]
 8006f66:	7818      	ldrb	r0, [r3, #0]
 8006f68:	883c      	ldrh	r4, [r7, #0]
 8006f6a:	78ba      	ldrb	r2, [r7, #2]
 8006f6c:	78f9      	ldrb	r1, [r7, #3]
 8006f6e:	8bbb      	ldrh	r3, [r7, #28]
 8006f70:	9301      	str	r3, [sp, #4]
 8006f72:	8b3b      	ldrh	r3, [r7, #24]
 8006f74:	9300      	str	r3, [sp, #0]
 8006f76:	4623      	mov	r3, r4
 8006f78:	f7ff ff4a 	bl	8006e10 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8006f7c:	8b3b      	ldrh	r3, [r7, #24]
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	461a      	mov	r2, r3
 8006f82:	0052      	lsls	r2, r2, #1
 8006f84:	4413      	add	r3, r2
 8006f86:	005b      	lsls	r3, r3, #1
 8006f88:	b2da      	uxtb	r2, r3
 8006f8a:	78fb      	ldrb	r3, [r7, #3]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d1e3      	bne.n	8006f60 <ILI9341_Draw_Text+0x1c>
    }
}
 8006f98:	bf00      	nop
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd90      	pop	{r4, r7, pc}

08006fa0 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	af00      	add	r7, sp, #0

	//GPIO INIT
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	2180      	movs	r1, #128	; 0x80
 8006fa8:	4802      	ldr	r0, [pc, #8]	; (8006fb4 <ILI9341_SPI_Init+0x14>)
 8006faa:	f7fd f97d 	bl	80042a8 <HAL_GPIO_WritePin>
}
 8006fae:	bf00      	nop
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	48000400 	.word	0x48000400

08006fb8 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef res;
	#ifdef USE_ILI9341_SPIDMA
		if( ((res = HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &SPI_Data, 1)) != HAL_OK) )
 8006fc2:	1dfb      	adds	r3, r7, #7
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	4804      	ldr	r0, [pc, #16]	; (8006fdc <ILI9341_SPI_Send+0x24>)
 8006fca:	f7fe fc1d 	bl	8005808 <HAL_SPI_Transmit_DMA>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	73fb      	strb	r3, [r7, #15]
		{
			//printf("HAL_SPI_Transmit Error #%u, ", res);
		}
	#endif

}
 8006fd2:	bf00      	nop
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	200021e4 	.word	0x200021e4

08006fe0 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b082      	sub	sp, #8
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8006fea:	2200      	movs	r2, #0
 8006fec:	2180      	movs	r1, #128	; 0x80
 8006fee:	480a      	ldr	r0, [pc, #40]	; (8007018 <ILI9341_Write_Command+0x38>)
 8006ff0:	f7fd f95a 	bl	80042a8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	2140      	movs	r1, #64	; 0x40
 8006ff8:	4807      	ldr	r0, [pc, #28]	; (8007018 <ILI9341_Write_Command+0x38>)
 8006ffa:	f7fd f955 	bl	80042a8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8006ffe:	79fb      	ldrb	r3, [r7, #7]
 8007000:	4618      	mov	r0, r3
 8007002:	f7ff ffd9 	bl	8006fb8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8007006:	2201      	movs	r2, #1
 8007008:	2180      	movs	r1, #128	; 0x80
 800700a:	4803      	ldr	r0, [pc, #12]	; (8007018 <ILI9341_Write_Command+0x38>)
 800700c:	f7fd f94c 	bl	80042a8 <HAL_GPIO_WritePin>
}
 8007010:	bf00      	nop
 8007012:	3708      	adds	r7, #8
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	48000400 	.word	0x48000400

0800701c <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	4603      	mov	r3, r0
 8007024:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8007026:	2201      	movs	r2, #1
 8007028:	2140      	movs	r1, #64	; 0x40
 800702a:	480a      	ldr	r0, [pc, #40]	; (8007054 <ILI9341_Write_Data+0x38>)
 800702c:	f7fd f93c 	bl	80042a8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8007030:	2200      	movs	r2, #0
 8007032:	2180      	movs	r1, #128	; 0x80
 8007034:	4807      	ldr	r0, [pc, #28]	; (8007054 <ILI9341_Write_Data+0x38>)
 8007036:	f7fd f937 	bl	80042a8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 800703a:	79fb      	ldrb	r3, [r7, #7]
 800703c:	4618      	mov	r0, r3
 800703e:	f7ff ffbb 	bl	8006fb8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8007042:	2201      	movs	r2, #1
 8007044:	2180      	movs	r1, #128	; 0x80
 8007046:	4803      	ldr	r0, [pc, #12]	; (8007054 <ILI9341_Write_Data+0x38>)
 8007048:	f7fd f92e 	bl	80042a8 <HAL_GPIO_WritePin>
}
 800704c:	bf00      	nop
 800704e:	3708      	adds	r7, #8
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}
 8007054:	48000400 	.word	0x48000400

08007058 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8007058:	b590      	push	{r4, r7, lr}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	4604      	mov	r4, r0
 8007060:	4608      	mov	r0, r1
 8007062:	4611      	mov	r1, r2
 8007064:	461a      	mov	r2, r3
 8007066:	4623      	mov	r3, r4
 8007068:	80fb      	strh	r3, [r7, #6]
 800706a:	4603      	mov	r3, r0
 800706c:	80bb      	strh	r3, [r7, #4]
 800706e:	460b      	mov	r3, r1
 8007070:	807b      	strh	r3, [r7, #2]
 8007072:	4613      	mov	r3, r2
 8007074:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8007076:	202a      	movs	r0, #42	; 0x2a
 8007078:	f7ff ffb2 	bl	8006fe0 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 800707c:	88fb      	ldrh	r3, [r7, #6]
 800707e:	0a1b      	lsrs	r3, r3, #8
 8007080:	b29b      	uxth	r3, r3
 8007082:	b2db      	uxtb	r3, r3
 8007084:	4618      	mov	r0, r3
 8007086:	f7ff ffc9 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 800708a:	88fb      	ldrh	r3, [r7, #6]
 800708c:	b2db      	uxtb	r3, r3
 800708e:	4618      	mov	r0, r3
 8007090:	f7ff ffc4 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8007094:	887b      	ldrh	r3, [r7, #2]
 8007096:	0a1b      	lsrs	r3, r3, #8
 8007098:	b29b      	uxth	r3, r3
 800709a:	b2db      	uxtb	r3, r3
 800709c:	4618      	mov	r0, r3
 800709e:	f7ff ffbd 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 80070a2:	887b      	ldrh	r3, [r7, #2]
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	4618      	mov	r0, r3
 80070a8:	f7ff ffb8 	bl	800701c <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 80070ac:	202b      	movs	r0, #43	; 0x2b
 80070ae:	f7ff ff97 	bl	8006fe0 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 80070b2:	88bb      	ldrh	r3, [r7, #4]
 80070b4:	0a1b      	lsrs	r3, r3, #8
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7ff ffae 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 80070c0:	88bb      	ldrh	r3, [r7, #4]
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	4618      	mov	r0, r3
 80070c6:	f7ff ffa9 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 80070ca:	883b      	ldrh	r3, [r7, #0]
 80070cc:	0a1b      	lsrs	r3, r3, #8
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7ff ffa2 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 80070d8:	883b      	ldrh	r3, [r7, #0]
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	4618      	mov	r0, r3
 80070de:	f7ff ff9d 	bl	800701c <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 80070e2:	202c      	movs	r0, #44	; 0x2c
 80070e4:	f7ff ff7c 	bl	8006fe0 <ILI9341_Write_Command>
}
 80070e8:	bf00      	nop
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd90      	pop	{r4, r7, pc}

080070f0 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 80070f4:	2200      	movs	r2, #0
 80070f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80070fa:	480b      	ldr	r0, [pc, #44]	; (8007128 <ILI9341_Reset+0x38>)
 80070fc:	f7fd f8d4 	bl	80042a8 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8007100:	20c8      	movs	r0, #200	; 0xc8
 8007102:	f7fa fca1 	bl	8001a48 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8007106:	2200      	movs	r2, #0
 8007108:	2180      	movs	r1, #128	; 0x80
 800710a:	4807      	ldr	r0, [pc, #28]	; (8007128 <ILI9341_Reset+0x38>)
 800710c:	f7fd f8cc 	bl	80042a8 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8007110:	20c8      	movs	r0, #200	; 0xc8
 8007112:	f7fa fc99 	bl	8001a48 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8007116:	2201      	movs	r2, #1
 8007118:	f44f 7100 	mov.w	r1, #512	; 0x200
 800711c:	4802      	ldr	r0, [pc, #8]	; (8007128 <ILI9341_Reset+0x38>)
 800711e:	f7fd f8c3 	bl	80042a8 <HAL_GPIO_WritePin>
}
 8007122:	bf00      	nop
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	48000400 	.word	0x48000400

0800712c <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	4603      	mov	r3, r0
 8007134:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8007136:	79fb      	ldrb	r3, [r7, #7]
 8007138:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 800713a:	2036      	movs	r0, #54	; 0x36
 800713c:	f7ff ff50 	bl	8006fe0 <ILI9341_Write_Command>
//HAL_Delay(1);
	
switch(screen_rotation) 
 8007140:	7bfb      	ldrb	r3, [r7, #15]
 8007142:	2b03      	cmp	r3, #3
 8007144:	d836      	bhi.n	80071b4 <ILI9341_Set_Rotation+0x88>
 8007146:	a201      	add	r2, pc, #4	; (adr r2, 800714c <ILI9341_Set_Rotation+0x20>)
 8007148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800714c:	0800715d 	.word	0x0800715d
 8007150:	08007173 	.word	0x08007173
 8007154:	08007189 	.word	0x08007189
 8007158:	0800719f 	.word	0x0800719f
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 800715c:	2048      	movs	r0, #72	; 0x48
 800715e:	f7ff ff5d 	bl	800701c <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8007162:	4b17      	ldr	r3, [pc, #92]	; (80071c0 <ILI9341_Set_Rotation+0x94>)
 8007164:	22f0      	movs	r2, #240	; 0xf0
 8007166:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8007168:	4b16      	ldr	r3, [pc, #88]	; (80071c4 <ILI9341_Set_Rotation+0x98>)
 800716a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800716e:	801a      	strh	r2, [r3, #0]
			break;
 8007170:	e021      	b.n	80071b6 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8007172:	2028      	movs	r0, #40	; 0x28
 8007174:	f7ff ff52 	bl	800701c <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8007178:	4b11      	ldr	r3, [pc, #68]	; (80071c0 <ILI9341_Set_Rotation+0x94>)
 800717a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800717e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8007180:	4b10      	ldr	r3, [pc, #64]	; (80071c4 <ILI9341_Set_Rotation+0x98>)
 8007182:	22f0      	movs	r2, #240	; 0xf0
 8007184:	801a      	strh	r2, [r3, #0]
			break;
 8007186:	e016      	b.n	80071b6 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8007188:	2088      	movs	r0, #136	; 0x88
 800718a:	f7ff ff47 	bl	800701c <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 800718e:	4b0c      	ldr	r3, [pc, #48]	; (80071c0 <ILI9341_Set_Rotation+0x94>)
 8007190:	22f0      	movs	r2, #240	; 0xf0
 8007192:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8007194:	4b0b      	ldr	r3, [pc, #44]	; (80071c4 <ILI9341_Set_Rotation+0x98>)
 8007196:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800719a:	801a      	strh	r2, [r3, #0]
			break;
 800719c:	e00b      	b.n	80071b6 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 800719e:	20e8      	movs	r0, #232	; 0xe8
 80071a0:	f7ff ff3c 	bl	800701c <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80071a4:	4b06      	ldr	r3, [pc, #24]	; (80071c0 <ILI9341_Set_Rotation+0x94>)
 80071a6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80071aa:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80071ac:	4b05      	ldr	r3, [pc, #20]	; (80071c4 <ILI9341_Set_Rotation+0x98>)
 80071ae:	22f0      	movs	r2, #240	; 0xf0
 80071b0:	801a      	strh	r2, [r3, #0]
			break;
 80071b2:	e000      	b.n	80071b6 <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 80071b4:	bf00      	nop
	}
}
 80071b6:	bf00      	nop
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	20001f52 	.word	0x20001f52
 80071c4:	20001f50 	.word	0x20001f50

080071c8 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80071cc:	2201      	movs	r2, #1
 80071ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80071d2:	4802      	ldr	r0, [pc, #8]	; (80071dc <ILI9341_Enable+0x14>)
 80071d4:	f7fd f868 	bl	80042a8 <HAL_GPIO_WritePin>
}
 80071d8:	bf00      	nop
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	48000400 	.word	0x48000400

080071e0 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	af00      	add	r7, sp, #0

ILI9341_Enable();
 80071e4:	f7ff fff0 	bl	80071c8 <ILI9341_Enable>
ILI9341_SPI_Init();
 80071e8:	f7ff feda 	bl	8006fa0 <ILI9341_SPI_Init>
ILI9341_Reset();
 80071ec:	f7ff ff80 	bl	80070f0 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 80071f0:	2001      	movs	r0, #1
 80071f2:	f7ff fef5 	bl	8006fe0 <ILI9341_Write_Command>
HAL_Delay(2000);
 80071f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80071fa:	f7fa fc25 	bl	8001a48 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 80071fe:	20cb      	movs	r0, #203	; 0xcb
 8007200:	f7ff feee 	bl	8006fe0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8007204:	2039      	movs	r0, #57	; 0x39
 8007206:	f7ff ff09 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 800720a:	202c      	movs	r0, #44	; 0x2c
 800720c:	f7ff ff06 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8007210:	2000      	movs	r0, #0
 8007212:	f7ff ff03 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8007216:	2034      	movs	r0, #52	; 0x34
 8007218:	f7ff ff00 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 800721c:	2002      	movs	r0, #2
 800721e:	f7ff fefd 	bl	800701c <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8007222:	20cf      	movs	r0, #207	; 0xcf
 8007224:	f7ff fedc 	bl	8006fe0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8007228:	2000      	movs	r0, #0
 800722a:	f7ff fef7 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 800722e:	20c1      	movs	r0, #193	; 0xc1
 8007230:	f7ff fef4 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8007234:	2030      	movs	r0, #48	; 0x30
 8007236:	f7ff fef1 	bl	800701c <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 800723a:	20e8      	movs	r0, #232	; 0xe8
 800723c:	f7ff fed0 	bl	8006fe0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8007240:	2085      	movs	r0, #133	; 0x85
 8007242:	f7ff feeb 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8007246:	2000      	movs	r0, #0
 8007248:	f7ff fee8 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 800724c:	2078      	movs	r0, #120	; 0x78
 800724e:	f7ff fee5 	bl	800701c <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8007252:	20ea      	movs	r0, #234	; 0xea
 8007254:	f7ff fec4 	bl	8006fe0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8007258:	2000      	movs	r0, #0
 800725a:	f7ff fedf 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800725e:	2000      	movs	r0, #0
 8007260:	f7ff fedc 	bl	800701c <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8007264:	20ed      	movs	r0, #237	; 0xed
 8007266:	f7ff febb 	bl	8006fe0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 800726a:	2064      	movs	r0, #100	; 0x64
 800726c:	f7ff fed6 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8007270:	2003      	movs	r0, #3
 8007272:	f7ff fed3 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8007276:	2012      	movs	r0, #18
 8007278:	f7ff fed0 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 800727c:	2081      	movs	r0, #129	; 0x81
 800727e:	f7ff fecd 	bl	800701c <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8007282:	20f7      	movs	r0, #247	; 0xf7
 8007284:	f7ff feac 	bl	8006fe0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8007288:	2020      	movs	r0, #32
 800728a:	f7ff fec7 	bl	800701c <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 800728e:	20c0      	movs	r0, #192	; 0xc0
 8007290:	f7ff fea6 	bl	8006fe0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8007294:	2023      	movs	r0, #35	; 0x23
 8007296:	f7ff fec1 	bl	800701c <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 800729a:	20c1      	movs	r0, #193	; 0xc1
 800729c:	f7ff fea0 	bl	8006fe0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 80072a0:	2010      	movs	r0, #16
 80072a2:	f7ff febb 	bl	800701c <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 80072a6:	20c5      	movs	r0, #197	; 0xc5
 80072a8:	f7ff fe9a 	bl	8006fe0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 80072ac:	203e      	movs	r0, #62	; 0x3e
 80072ae:	f7ff feb5 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 80072b2:	2028      	movs	r0, #40	; 0x28
 80072b4:	f7ff feb2 	bl	800701c <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 80072b8:	20c7      	movs	r0, #199	; 0xc7
 80072ba:	f7ff fe91 	bl	8006fe0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 80072be:	2086      	movs	r0, #134	; 0x86
 80072c0:	f7ff feac 	bl	800701c <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 80072c4:	2036      	movs	r0, #54	; 0x36
 80072c6:	f7ff fe8b 	bl	8006fe0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 80072ca:	2048      	movs	r0, #72	; 0x48
 80072cc:	f7ff fea6 	bl	800701c <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 80072d0:	203a      	movs	r0, #58	; 0x3a
 80072d2:	f7ff fe85 	bl	8006fe0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 80072d6:	2055      	movs	r0, #85	; 0x55
 80072d8:	f7ff fea0 	bl	800701c <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 80072dc:	20b1      	movs	r0, #177	; 0xb1
 80072de:	f7ff fe7f 	bl	8006fe0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80072e2:	2000      	movs	r0, #0
 80072e4:	f7ff fe9a 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 80072e8:	2018      	movs	r0, #24
 80072ea:	f7ff fe97 	bl	800701c <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 80072ee:	20b6      	movs	r0, #182	; 0xb6
 80072f0:	f7ff fe76 	bl	8006fe0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 80072f4:	2008      	movs	r0, #8
 80072f6:	f7ff fe91 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 80072fa:	2082      	movs	r0, #130	; 0x82
 80072fc:	f7ff fe8e 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8007300:	2027      	movs	r0, #39	; 0x27
 8007302:	f7ff fe8b 	bl	800701c <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8007306:	20f2      	movs	r0, #242	; 0xf2
 8007308:	f7ff fe6a 	bl	8006fe0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800730c:	2000      	movs	r0, #0
 800730e:	f7ff fe85 	bl	800701c <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8007312:	2026      	movs	r0, #38	; 0x26
 8007314:	f7ff fe64 	bl	8006fe0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8007318:	2001      	movs	r0, #1
 800731a:	f7ff fe7f 	bl	800701c <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 800731e:	20e0      	movs	r0, #224	; 0xe0
 8007320:	f7ff fe5e 	bl	8006fe0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8007324:	200f      	movs	r0, #15
 8007326:	f7ff fe79 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800732a:	2031      	movs	r0, #49	; 0x31
 800732c:	f7ff fe76 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8007330:	202b      	movs	r0, #43	; 0x2b
 8007332:	f7ff fe73 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8007336:	200c      	movs	r0, #12
 8007338:	f7ff fe70 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800733c:	200e      	movs	r0, #14
 800733e:	f7ff fe6d 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8007342:	2008      	movs	r0, #8
 8007344:	f7ff fe6a 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8007348:	204e      	movs	r0, #78	; 0x4e
 800734a:	f7ff fe67 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 800734e:	20f1      	movs	r0, #241	; 0xf1
 8007350:	f7ff fe64 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8007354:	2037      	movs	r0, #55	; 0x37
 8007356:	f7ff fe61 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800735a:	2007      	movs	r0, #7
 800735c:	f7ff fe5e 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8007360:	2010      	movs	r0, #16
 8007362:	f7ff fe5b 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8007366:	2003      	movs	r0, #3
 8007368:	f7ff fe58 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800736c:	200e      	movs	r0, #14
 800736e:	f7ff fe55 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8007372:	2009      	movs	r0, #9
 8007374:	f7ff fe52 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8007378:	2000      	movs	r0, #0
 800737a:	f7ff fe4f 	bl	800701c <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 800737e:	20e1      	movs	r0, #225	; 0xe1
 8007380:	f7ff fe2e 	bl	8006fe0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8007384:	2000      	movs	r0, #0
 8007386:	f7ff fe49 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800738a:	200e      	movs	r0, #14
 800738c:	f7ff fe46 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8007390:	2014      	movs	r0, #20
 8007392:	f7ff fe43 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8007396:	2003      	movs	r0, #3
 8007398:	f7ff fe40 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 800739c:	2011      	movs	r0, #17
 800739e:	f7ff fe3d 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80073a2:	2007      	movs	r0, #7
 80073a4:	f7ff fe3a 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80073a8:	2031      	movs	r0, #49	; 0x31
 80073aa:	f7ff fe37 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80073ae:	20c1      	movs	r0, #193	; 0xc1
 80073b0:	f7ff fe34 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 80073b4:	2048      	movs	r0, #72	; 0x48
 80073b6:	f7ff fe31 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80073ba:	2008      	movs	r0, #8
 80073bc:	f7ff fe2e 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80073c0:	200f      	movs	r0, #15
 80073c2:	f7ff fe2b 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80073c6:	200c      	movs	r0, #12
 80073c8:	f7ff fe28 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80073cc:	2031      	movs	r0, #49	; 0x31
 80073ce:	f7ff fe25 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 80073d2:	2036      	movs	r0, #54	; 0x36
 80073d4:	f7ff fe22 	bl	800701c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80073d8:	200f      	movs	r0, #15
 80073da:	f7ff fe1f 	bl	800701c <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 80073de:	2011      	movs	r0, #17
 80073e0:	f7ff fdfe 	bl	8006fe0 <ILI9341_Write_Command>
HAL_Delay(240);
 80073e4:	20f0      	movs	r0, #240	; 0xf0
 80073e6:	f7fa fb2f 	bl	8001a48 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 80073ea:	2029      	movs	r0, #41	; 0x29
 80073ec:	f7ff fdf8 	bl	8006fe0 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 80073f0:	2000      	movs	r0, #0
 80073f2:	f7ff fe9b 	bl	800712c <ILI9341_Set_Rotation>
}
 80073f6:	bf00      	nop
 80073f8:	bd80      	pop	{r7, pc}
	...

080073fc <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 80073fc:	b5b0      	push	{r4, r5, r7, lr}
 80073fe:	b08c      	sub	sp, #48	; 0x30
 8007400:	af00      	add	r7, sp, #0
 8007402:	4603      	mov	r3, r0
 8007404:	6039      	str	r1, [r7, #0]
 8007406:	80fb      	strh	r3, [r7, #6]
 8007408:	466b      	mov	r3, sp
 800740a:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 800740c:	2300      	movs	r3, #0
 800740e:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	005b      	lsls	r3, r3, #1
 8007414:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007418:	d202      	bcs.n	8007420 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	627b      	str	r3, [r7, #36]	; 0x24
 800741e:	e002      	b.n	8007426 <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8007420:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007424:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8007426:	2201      	movs	r2, #1
 8007428:	2140      	movs	r1, #64	; 0x40
 800742a:	483d      	ldr	r0, [pc, #244]	; (8007520 <ILI9341_Draw_Colour_Burst+0x124>)
 800742c:	f7fc ff3c 	bl	80042a8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8007430:	2200      	movs	r2, #0
 8007432:	2180      	movs	r1, #128	; 0x80
 8007434:	483a      	ldr	r0, [pc, #232]	; (8007520 <ILI9341_Draw_Colour_Burst+0x124>)
 8007436:	f7fc ff37 	bl	80042a8 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 800743a:	88fb      	ldrh	r3, [r7, #6]
 800743c:	0a1b      	lsrs	r3, r3, #8
 800743e:	b29b      	uxth	r3, r3
 8007440:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8007444:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007446:	4603      	mov	r3, r0
 8007448:	3b01      	subs	r3, #1
 800744a:	61fb      	str	r3, [r7, #28]
 800744c:	4601      	mov	r1, r0
 800744e:	f04f 0200 	mov.w	r2, #0
 8007452:	f04f 0300 	mov.w	r3, #0
 8007456:	f04f 0400 	mov.w	r4, #0
 800745a:	00d4      	lsls	r4, r2, #3
 800745c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8007460:	00cb      	lsls	r3, r1, #3
 8007462:	4601      	mov	r1, r0
 8007464:	f04f 0200 	mov.w	r2, #0
 8007468:	f04f 0300 	mov.w	r3, #0
 800746c:	f04f 0400 	mov.w	r4, #0
 8007470:	00d4      	lsls	r4, r2, #3
 8007472:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8007476:	00cb      	lsls	r3, r1, #3
 8007478:	1dc3      	adds	r3, r0, #7
 800747a:	08db      	lsrs	r3, r3, #3
 800747c:	00db      	lsls	r3, r3, #3
 800747e:	ebad 0d03 	sub.w	sp, sp, r3
 8007482:	466b      	mov	r3, sp
 8007484:	3300      	adds	r3, #0
 8007486:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8007488:	2300      	movs	r3, #0
 800748a:	62bb      	str	r3, [r7, #40]	; 0x28
 800748c:	e00e      	b.n	80074ac <ILI9341_Draw_Colour_Burst+0xb0>
	{
		burst_buffer[j] = 	chifted;
 800748e:	69ba      	ldr	r2, [r7, #24]
 8007490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007492:	4413      	add	r3, r2
 8007494:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8007498:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 800749a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749c:	3301      	adds	r3, #1
 800749e:	88fa      	ldrh	r2, [r7, #6]
 80074a0:	b2d1      	uxtb	r1, r2
 80074a2:	69ba      	ldr	r2, [r7, #24]
 80074a4:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80074a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a8:	3302      	adds	r3, #2
 80074aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80074ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d3ec      	bcc.n	800748e <ILI9341_Draw_Colour_Burst+0x92>
	}

uint32_t Sending_Size = Size*2;
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	005b      	lsls	r3, r3, #1
 80074b8:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 80074ba:	697a      	ldr	r2, [r7, #20]
 80074bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074be:	fbb2 f3f3 	udiv	r3, r2, r3
 80074c2:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074c8:	fbb3 f2f2 	udiv	r2, r3, r2
 80074cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074ce:	fb01 f202 	mul.w	r2, r1, r2
 80074d2:	1a9b      	subs	r3, r3, r2
 80074d4:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d010      	beq.n	80074fe <ILI9341_Draw_Colour_Burst+0x102>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80074dc:	2300      	movs	r3, #0
 80074de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074e0:	e009      	b.n	80074f6 <ILI9341_Draw_Colour_Burst+0xfa>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 80074e2:	69b9      	ldr	r1, [r7, #24]
 80074e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e6:	b29a      	uxth	r2, r3
 80074e8:	230a      	movs	r3, #10
 80074ea:	480e      	ldr	r0, [pc, #56]	; (8007524 <ILI9341_Draw_Colour_Burst+0x128>)
 80074ec:	f7fe f826 	bl	800553c <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80074f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f2:	3301      	adds	r3, #1
 80074f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d3f1      	bcc.n	80074e2 <ILI9341_Draw_Colour_Burst+0xe6>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 80074fe:	69b9      	ldr	r1, [r7, #24]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	b29a      	uxth	r2, r3
 8007504:	230a      	movs	r3, #10
 8007506:	4807      	ldr	r0, [pc, #28]	; (8007524 <ILI9341_Draw_Colour_Burst+0x128>)
 8007508:	f7fe f818 	bl	800553c <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800750c:	2201      	movs	r2, #1
 800750e:	2180      	movs	r1, #128	; 0x80
 8007510:	4803      	ldr	r0, [pc, #12]	; (8007520 <ILI9341_Draw_Colour_Burst+0x124>)
 8007512:	f7fc fec9 	bl	80042a8 <HAL_GPIO_WritePin>
 8007516:	46ad      	mov	sp, r5
}
 8007518:	bf00      	nop
 800751a:	3730      	adds	r7, #48	; 0x30
 800751c:	46bd      	mov	sp, r7
 800751e:	bdb0      	pop	{r4, r5, r7, pc}
 8007520:	48000400 	.word	0x48000400
 8007524:	200021e4 	.word	0x200021e4

08007528 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	4603      	mov	r3, r0
 8007530:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8007532:	4b0e      	ldr	r3, [pc, #56]	; (800756c <ILI9341_Fill_Screen+0x44>)
 8007534:	881b      	ldrh	r3, [r3, #0]
 8007536:	b29a      	uxth	r2, r3
 8007538:	4b0d      	ldr	r3, [pc, #52]	; (8007570 <ILI9341_Fill_Screen+0x48>)
 800753a:	881b      	ldrh	r3, [r3, #0]
 800753c:	b29b      	uxth	r3, r3
 800753e:	2100      	movs	r1, #0
 8007540:	2000      	movs	r0, #0
 8007542:	f7ff fd89 	bl	8007058 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8007546:	4b09      	ldr	r3, [pc, #36]	; (800756c <ILI9341_Fill_Screen+0x44>)
 8007548:	881b      	ldrh	r3, [r3, #0]
 800754a:	b29b      	uxth	r3, r3
 800754c:	461a      	mov	r2, r3
 800754e:	4b08      	ldr	r3, [pc, #32]	; (8007570 <ILI9341_Fill_Screen+0x48>)
 8007550:	881b      	ldrh	r3, [r3, #0]
 8007552:	b29b      	uxth	r3, r3
 8007554:	fb03 f302 	mul.w	r3, r3, r2
 8007558:	461a      	mov	r2, r3
 800755a:	88fb      	ldrh	r3, [r7, #6]
 800755c:	4611      	mov	r1, r2
 800755e:	4618      	mov	r0, r3
 8007560:	f7ff ff4c 	bl	80073fc <ILI9341_Draw_Colour_Burst>
}
 8007564:	bf00      	nop
 8007566:	3708      	adds	r7, #8
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}
 800756c:	20001f52 	.word	0x20001f52
 8007570:	20001f50 	.word	0x20001f50

08007574 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b086      	sub	sp, #24
 8007578:	af00      	add	r7, sp, #0
 800757a:	4603      	mov	r3, r0
 800757c:	80fb      	strh	r3, [r7, #6]
 800757e:	460b      	mov	r3, r1
 8007580:	80bb      	strh	r3, [r7, #4]
 8007582:	4613      	mov	r3, r2
 8007584:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8007586:	4b5b      	ldr	r3, [pc, #364]	; (80076f4 <ILI9341_Draw_Pixel+0x180>)
 8007588:	881b      	ldrh	r3, [r3, #0]
 800758a:	b29b      	uxth	r3, r3
 800758c:	88fa      	ldrh	r2, [r7, #6]
 800758e:	429a      	cmp	r2, r3
 8007590:	f080 80ac 	bcs.w	80076ec <ILI9341_Draw_Pixel+0x178>
 8007594:	4b58      	ldr	r3, [pc, #352]	; (80076f8 <ILI9341_Draw_Pixel+0x184>)
 8007596:	881b      	ldrh	r3, [r3, #0]
 8007598:	b29b      	uxth	r3, r3
 800759a:	88ba      	ldrh	r2, [r7, #4]
 800759c:	429a      	cmp	r2, r3
 800759e:	f080 80a5 	bcs.w	80076ec <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80075a2:	2200      	movs	r2, #0
 80075a4:	2140      	movs	r1, #64	; 0x40
 80075a6:	4855      	ldr	r0, [pc, #340]	; (80076fc <ILI9341_Draw_Pixel+0x188>)
 80075a8:	f7fc fe7e 	bl	80042a8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80075ac:	2200      	movs	r2, #0
 80075ae:	2180      	movs	r1, #128	; 0x80
 80075b0:	4852      	ldr	r0, [pc, #328]	; (80076fc <ILI9341_Draw_Pixel+0x188>)
 80075b2:	f7fc fe79 	bl	80042a8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 80075b6:	202a      	movs	r0, #42	; 0x2a
 80075b8:	f7ff fcfe 	bl	8006fb8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80075bc:	2201      	movs	r2, #1
 80075be:	2140      	movs	r1, #64	; 0x40
 80075c0:	484e      	ldr	r0, [pc, #312]	; (80076fc <ILI9341_Draw_Pixel+0x188>)
 80075c2:	f7fc fe71 	bl	80042a8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80075c6:	2201      	movs	r2, #1
 80075c8:	2180      	movs	r1, #128	; 0x80
 80075ca:	484c      	ldr	r0, [pc, #304]	; (80076fc <ILI9341_Draw_Pixel+0x188>)
 80075cc:	f7fc fe6c 	bl	80042a8 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80075d0:	2200      	movs	r2, #0
 80075d2:	2180      	movs	r1, #128	; 0x80
 80075d4:	4849      	ldr	r0, [pc, #292]	; (80076fc <ILI9341_Draw_Pixel+0x188>)
 80075d6:	f7fc fe67 	bl	80042a8 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 80075da:	88fb      	ldrh	r3, [r7, #6]
 80075dc:	0a1b      	lsrs	r3, r3, #8
 80075de:	b29b      	uxth	r3, r3
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	753b      	strb	r3, [r7, #20]
 80075e4:	88fb      	ldrh	r3, [r7, #6]
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	757b      	strb	r3, [r7, #21]
 80075ea:	88fb      	ldrh	r3, [r7, #6]
 80075ec:	3301      	adds	r3, #1
 80075ee:	121b      	asrs	r3, r3, #8
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	75bb      	strb	r3, [r7, #22]
 80075f4:	88fb      	ldrh	r3, [r7, #6]
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	3301      	adds	r3, #1
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 80075fe:	f107 0114 	add.w	r1, r7, #20
 8007602:	2301      	movs	r3, #1
 8007604:	2204      	movs	r2, #4
 8007606:	483e      	ldr	r0, [pc, #248]	; (8007700 <ILI9341_Draw_Pixel+0x18c>)
 8007608:	f7fd ff98 	bl	800553c <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800760c:	2201      	movs	r2, #1
 800760e:	2180      	movs	r1, #128	; 0x80
 8007610:	483a      	ldr	r0, [pc, #232]	; (80076fc <ILI9341_Draw_Pixel+0x188>)
 8007612:	f7fc fe49 	bl	80042a8 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8007616:	2200      	movs	r2, #0
 8007618:	2140      	movs	r1, #64	; 0x40
 800761a:	4838      	ldr	r0, [pc, #224]	; (80076fc <ILI9341_Draw_Pixel+0x188>)
 800761c:	f7fc fe44 	bl	80042a8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8007620:	2200      	movs	r2, #0
 8007622:	2180      	movs	r1, #128	; 0x80
 8007624:	4835      	ldr	r0, [pc, #212]	; (80076fc <ILI9341_Draw_Pixel+0x188>)
 8007626:	f7fc fe3f 	bl	80042a8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 800762a:	202b      	movs	r0, #43	; 0x2b
 800762c:	f7ff fcc4 	bl	8006fb8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8007630:	2201      	movs	r2, #1
 8007632:	2140      	movs	r1, #64	; 0x40
 8007634:	4831      	ldr	r0, [pc, #196]	; (80076fc <ILI9341_Draw_Pixel+0x188>)
 8007636:	f7fc fe37 	bl	80042a8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 800763a:	2201      	movs	r2, #1
 800763c:	2180      	movs	r1, #128	; 0x80
 800763e:	482f      	ldr	r0, [pc, #188]	; (80076fc <ILI9341_Draw_Pixel+0x188>)
 8007640:	f7fc fe32 	bl	80042a8 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8007644:	2200      	movs	r2, #0
 8007646:	2180      	movs	r1, #128	; 0x80
 8007648:	482c      	ldr	r0, [pc, #176]	; (80076fc <ILI9341_Draw_Pixel+0x188>)
 800764a:	f7fc fe2d 	bl	80042a8 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 800764e:	88bb      	ldrh	r3, [r7, #4]
 8007650:	0a1b      	lsrs	r3, r3, #8
 8007652:	b29b      	uxth	r3, r3
 8007654:	b2db      	uxtb	r3, r3
 8007656:	743b      	strb	r3, [r7, #16]
 8007658:	88bb      	ldrh	r3, [r7, #4]
 800765a:	b2db      	uxtb	r3, r3
 800765c:	747b      	strb	r3, [r7, #17]
 800765e:	88bb      	ldrh	r3, [r7, #4]
 8007660:	3301      	adds	r3, #1
 8007662:	121b      	asrs	r3, r3, #8
 8007664:	b2db      	uxtb	r3, r3
 8007666:	74bb      	strb	r3, [r7, #18]
 8007668:	88bb      	ldrh	r3, [r7, #4]
 800766a:	b2db      	uxtb	r3, r3
 800766c:	3301      	adds	r3, #1
 800766e:	b2db      	uxtb	r3, r3
 8007670:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8007672:	f107 0110 	add.w	r1, r7, #16
 8007676:	2301      	movs	r3, #1
 8007678:	2204      	movs	r2, #4
 800767a:	4821      	ldr	r0, [pc, #132]	; (8007700 <ILI9341_Draw_Pixel+0x18c>)
 800767c:	f7fd ff5e 	bl	800553c <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8007680:	2201      	movs	r2, #1
 8007682:	2180      	movs	r1, #128	; 0x80
 8007684:	481d      	ldr	r0, [pc, #116]	; (80076fc <ILI9341_Draw_Pixel+0x188>)
 8007686:	f7fc fe0f 	bl	80042a8 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800768a:	2200      	movs	r2, #0
 800768c:	2140      	movs	r1, #64	; 0x40
 800768e:	481b      	ldr	r0, [pc, #108]	; (80076fc <ILI9341_Draw_Pixel+0x188>)
 8007690:	f7fc fe0a 	bl	80042a8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8007694:	2200      	movs	r2, #0
 8007696:	2180      	movs	r1, #128	; 0x80
 8007698:	4818      	ldr	r0, [pc, #96]	; (80076fc <ILI9341_Draw_Pixel+0x188>)
 800769a:	f7fc fe05 	bl	80042a8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 800769e:	202c      	movs	r0, #44	; 0x2c
 80076a0:	f7ff fc8a 	bl	8006fb8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80076a4:	2201      	movs	r2, #1
 80076a6:	2140      	movs	r1, #64	; 0x40
 80076a8:	4814      	ldr	r0, [pc, #80]	; (80076fc <ILI9341_Draw_Pixel+0x188>)
 80076aa:	f7fc fdfd 	bl	80042a8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80076ae:	2201      	movs	r2, #1
 80076b0:	2180      	movs	r1, #128	; 0x80
 80076b2:	4812      	ldr	r0, [pc, #72]	; (80076fc <ILI9341_Draw_Pixel+0x188>)
 80076b4:	f7fc fdf8 	bl	80042a8 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80076b8:	2200      	movs	r2, #0
 80076ba:	2180      	movs	r1, #128	; 0x80
 80076bc:	480f      	ldr	r0, [pc, #60]	; (80076fc <ILI9341_Draw_Pixel+0x188>)
 80076be:	f7fc fdf3 	bl	80042a8 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 80076c2:	887b      	ldrh	r3, [r7, #2]
 80076c4:	0a1b      	lsrs	r3, r3, #8
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	733b      	strb	r3, [r7, #12]
 80076cc:	887b      	ldrh	r3, [r7, #2]
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 80076d2:	f107 010c 	add.w	r1, r7, #12
 80076d6:	2301      	movs	r3, #1
 80076d8:	2202      	movs	r2, #2
 80076da:	4809      	ldr	r0, [pc, #36]	; (8007700 <ILI9341_Draw_Pixel+0x18c>)
 80076dc:	f7fd ff2e 	bl	800553c <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80076e0:	2201      	movs	r2, #1
 80076e2:	2180      	movs	r1, #128	; 0x80
 80076e4:	4805      	ldr	r0, [pc, #20]	; (80076fc <ILI9341_Draw_Pixel+0x188>)
 80076e6:	f7fc fddf 	bl	80042a8 <HAL_GPIO_WritePin>
 80076ea:	e000      	b.n	80076ee <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80076ec:	bf00      	nop
	
}
 80076ee:	3718      	adds	r7, #24
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	20001f52 	.word	0x20001f52
 80076f8:	20001f50 	.word	0x20001f50
 80076fc:	48000400 	.word	0x48000400
 8007700:	200021e4 	.word	0x200021e4

08007704 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8007704:	b590      	push	{r4, r7, lr}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	4604      	mov	r4, r0
 800770c:	4608      	mov	r0, r1
 800770e:	4611      	mov	r1, r2
 8007710:	461a      	mov	r2, r3
 8007712:	4623      	mov	r3, r4
 8007714:	80fb      	strh	r3, [r7, #6]
 8007716:	4603      	mov	r3, r0
 8007718:	80bb      	strh	r3, [r7, #4]
 800771a:	460b      	mov	r3, r1
 800771c:	807b      	strh	r3, [r7, #2]
 800771e:	4613      	mov	r3, r2
 8007720:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8007722:	4b25      	ldr	r3, [pc, #148]	; (80077b8 <ILI9341_Draw_Rectangle+0xb4>)
 8007724:	881b      	ldrh	r3, [r3, #0]
 8007726:	b29b      	uxth	r3, r3
 8007728:	88fa      	ldrh	r2, [r7, #6]
 800772a:	429a      	cmp	r2, r3
 800772c:	d23f      	bcs.n	80077ae <ILI9341_Draw_Rectangle+0xaa>
 800772e:	4b23      	ldr	r3, [pc, #140]	; (80077bc <ILI9341_Draw_Rectangle+0xb8>)
 8007730:	881b      	ldrh	r3, [r3, #0]
 8007732:	b29b      	uxth	r3, r3
 8007734:	88ba      	ldrh	r2, [r7, #4]
 8007736:	429a      	cmp	r2, r3
 8007738:	d239      	bcs.n	80077ae <ILI9341_Draw_Rectangle+0xaa>
if((X+Width-1)>=LCD_WIDTH)
 800773a:	88fa      	ldrh	r2, [r7, #6]
 800773c:	887b      	ldrh	r3, [r7, #2]
 800773e:	4413      	add	r3, r2
 8007740:	3b01      	subs	r3, #1
 8007742:	4a1d      	ldr	r2, [pc, #116]	; (80077b8 <ILI9341_Draw_Rectangle+0xb4>)
 8007744:	8812      	ldrh	r2, [r2, #0]
 8007746:	b292      	uxth	r2, r2
 8007748:	4293      	cmp	r3, r2
 800774a:	db05      	blt.n	8007758 <ILI9341_Draw_Rectangle+0x54>
	{
		Width=LCD_WIDTH-X;
 800774c:	4b1a      	ldr	r3, [pc, #104]	; (80077b8 <ILI9341_Draw_Rectangle+0xb4>)
 800774e:	881b      	ldrh	r3, [r3, #0]
 8007750:	b29a      	uxth	r2, r3
 8007752:	88fb      	ldrh	r3, [r7, #6]
 8007754:	1ad3      	subs	r3, r2, r3
 8007756:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8007758:	88ba      	ldrh	r2, [r7, #4]
 800775a:	883b      	ldrh	r3, [r7, #0]
 800775c:	4413      	add	r3, r2
 800775e:	3b01      	subs	r3, #1
 8007760:	4a16      	ldr	r2, [pc, #88]	; (80077bc <ILI9341_Draw_Rectangle+0xb8>)
 8007762:	8812      	ldrh	r2, [r2, #0]
 8007764:	b292      	uxth	r2, r2
 8007766:	4293      	cmp	r3, r2
 8007768:	db05      	blt.n	8007776 <ILI9341_Draw_Rectangle+0x72>
	{
		Height=LCD_HEIGHT-Y;
 800776a:	4b14      	ldr	r3, [pc, #80]	; (80077bc <ILI9341_Draw_Rectangle+0xb8>)
 800776c:	881b      	ldrh	r3, [r3, #0]
 800776e:	b29a      	uxth	r2, r3
 8007770:	88bb      	ldrh	r3, [r7, #4]
 8007772:	1ad3      	subs	r3, r2, r3
 8007774:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8007776:	88fa      	ldrh	r2, [r7, #6]
 8007778:	887b      	ldrh	r3, [r7, #2]
 800777a:	4413      	add	r3, r2
 800777c:	b29b      	uxth	r3, r3
 800777e:	3b01      	subs	r3, #1
 8007780:	b29c      	uxth	r4, r3
 8007782:	88ba      	ldrh	r2, [r7, #4]
 8007784:	883b      	ldrh	r3, [r7, #0]
 8007786:	4413      	add	r3, r2
 8007788:	b29b      	uxth	r3, r3
 800778a:	3b01      	subs	r3, #1
 800778c:	b29b      	uxth	r3, r3
 800778e:	88b9      	ldrh	r1, [r7, #4]
 8007790:	88f8      	ldrh	r0, [r7, #6]
 8007792:	4622      	mov	r2, r4
 8007794:	f7ff fc60 	bl	8007058 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8007798:	883b      	ldrh	r3, [r7, #0]
 800779a:	887a      	ldrh	r2, [r7, #2]
 800779c:	fb02 f303 	mul.w	r3, r2, r3
 80077a0:	461a      	mov	r2, r3
 80077a2:	8b3b      	ldrh	r3, [r7, #24]
 80077a4:	4611      	mov	r1, r2
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7ff fe28 	bl	80073fc <ILI9341_Draw_Colour_Burst>
 80077ac:	e000      	b.n	80077b0 <ILI9341_Draw_Rectangle+0xac>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80077ae:	bf00      	nop
}
 80077b0:	370c      	adds	r7, #12
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd90      	pop	{r4, r7, pc}
 80077b6:	bf00      	nop
 80077b8:	20001f52 	.word	0x20001f52
 80077bc:	20001f50 	.word	0x20001f50

080077c0 <__errno>:
 80077c0:	4b01      	ldr	r3, [pc, #4]	; (80077c8 <__errno+0x8>)
 80077c2:	6818      	ldr	r0, [r3, #0]
 80077c4:	4770      	bx	lr
 80077c6:	bf00      	nop
 80077c8:	20001f54 	.word	0x20001f54

080077cc <__libc_init_array>:
 80077cc:	b570      	push	{r4, r5, r6, lr}
 80077ce:	4e0d      	ldr	r6, [pc, #52]	; (8007804 <__libc_init_array+0x38>)
 80077d0:	4c0d      	ldr	r4, [pc, #52]	; (8007808 <__libc_init_array+0x3c>)
 80077d2:	1ba4      	subs	r4, r4, r6
 80077d4:	10a4      	asrs	r4, r4, #2
 80077d6:	2500      	movs	r5, #0
 80077d8:	42a5      	cmp	r5, r4
 80077da:	d109      	bne.n	80077f0 <__libc_init_array+0x24>
 80077dc:	4e0b      	ldr	r6, [pc, #44]	; (800780c <__libc_init_array+0x40>)
 80077de:	4c0c      	ldr	r4, [pc, #48]	; (8007810 <__libc_init_array+0x44>)
 80077e0:	f001 f940 	bl	8008a64 <_init>
 80077e4:	1ba4      	subs	r4, r4, r6
 80077e6:	10a4      	asrs	r4, r4, #2
 80077e8:	2500      	movs	r5, #0
 80077ea:	42a5      	cmp	r5, r4
 80077ec:	d105      	bne.n	80077fa <__libc_init_array+0x2e>
 80077ee:	bd70      	pop	{r4, r5, r6, pc}
 80077f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80077f4:	4798      	blx	r3
 80077f6:	3501      	adds	r5, #1
 80077f8:	e7ee      	b.n	80077d8 <__libc_init_array+0xc>
 80077fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80077fe:	4798      	blx	r3
 8007800:	3501      	adds	r5, #1
 8007802:	e7f2      	b.n	80077ea <__libc_init_array+0x1e>
 8007804:	08008e18 	.word	0x08008e18
 8007808:	08008e18 	.word	0x08008e18
 800780c:	08008e18 	.word	0x08008e18
 8007810:	08008e1c 	.word	0x08008e1c

08007814 <memset>:
 8007814:	4402      	add	r2, r0
 8007816:	4603      	mov	r3, r0
 8007818:	4293      	cmp	r3, r2
 800781a:	d100      	bne.n	800781e <memset+0xa>
 800781c:	4770      	bx	lr
 800781e:	f803 1b01 	strb.w	r1, [r3], #1
 8007822:	e7f9      	b.n	8007818 <memset+0x4>

08007824 <iprintf>:
 8007824:	b40f      	push	{r0, r1, r2, r3}
 8007826:	4b0a      	ldr	r3, [pc, #40]	; (8007850 <iprintf+0x2c>)
 8007828:	b513      	push	{r0, r1, r4, lr}
 800782a:	681c      	ldr	r4, [r3, #0]
 800782c:	b124      	cbz	r4, 8007838 <iprintf+0x14>
 800782e:	69a3      	ldr	r3, [r4, #24]
 8007830:	b913      	cbnz	r3, 8007838 <iprintf+0x14>
 8007832:	4620      	mov	r0, r4
 8007834:	f000 fa56 	bl	8007ce4 <__sinit>
 8007838:	ab05      	add	r3, sp, #20
 800783a:	9a04      	ldr	r2, [sp, #16]
 800783c:	68a1      	ldr	r1, [r4, #8]
 800783e:	9301      	str	r3, [sp, #4]
 8007840:	4620      	mov	r0, r4
 8007842:	f000 fd61 	bl	8008308 <_vfiprintf_r>
 8007846:	b002      	add	sp, #8
 8007848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800784c:	b004      	add	sp, #16
 800784e:	4770      	bx	lr
 8007850:	20001f54 	.word	0x20001f54

08007854 <_puts_r>:
 8007854:	b570      	push	{r4, r5, r6, lr}
 8007856:	460e      	mov	r6, r1
 8007858:	4605      	mov	r5, r0
 800785a:	b118      	cbz	r0, 8007864 <_puts_r+0x10>
 800785c:	6983      	ldr	r3, [r0, #24]
 800785e:	b90b      	cbnz	r3, 8007864 <_puts_r+0x10>
 8007860:	f000 fa40 	bl	8007ce4 <__sinit>
 8007864:	69ab      	ldr	r3, [r5, #24]
 8007866:	68ac      	ldr	r4, [r5, #8]
 8007868:	b913      	cbnz	r3, 8007870 <_puts_r+0x1c>
 800786a:	4628      	mov	r0, r5
 800786c:	f000 fa3a 	bl	8007ce4 <__sinit>
 8007870:	4b23      	ldr	r3, [pc, #140]	; (8007900 <_puts_r+0xac>)
 8007872:	429c      	cmp	r4, r3
 8007874:	d117      	bne.n	80078a6 <_puts_r+0x52>
 8007876:	686c      	ldr	r4, [r5, #4]
 8007878:	89a3      	ldrh	r3, [r4, #12]
 800787a:	071b      	lsls	r3, r3, #28
 800787c:	d51d      	bpl.n	80078ba <_puts_r+0x66>
 800787e:	6923      	ldr	r3, [r4, #16]
 8007880:	b1db      	cbz	r3, 80078ba <_puts_r+0x66>
 8007882:	3e01      	subs	r6, #1
 8007884:	68a3      	ldr	r3, [r4, #8]
 8007886:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800788a:	3b01      	subs	r3, #1
 800788c:	60a3      	str	r3, [r4, #8]
 800788e:	b9e9      	cbnz	r1, 80078cc <_puts_r+0x78>
 8007890:	2b00      	cmp	r3, #0
 8007892:	da2e      	bge.n	80078f2 <_puts_r+0x9e>
 8007894:	4622      	mov	r2, r4
 8007896:	210a      	movs	r1, #10
 8007898:	4628      	mov	r0, r5
 800789a:	f000 f873 	bl	8007984 <__swbuf_r>
 800789e:	3001      	adds	r0, #1
 80078a0:	d011      	beq.n	80078c6 <_puts_r+0x72>
 80078a2:	200a      	movs	r0, #10
 80078a4:	e011      	b.n	80078ca <_puts_r+0x76>
 80078a6:	4b17      	ldr	r3, [pc, #92]	; (8007904 <_puts_r+0xb0>)
 80078a8:	429c      	cmp	r4, r3
 80078aa:	d101      	bne.n	80078b0 <_puts_r+0x5c>
 80078ac:	68ac      	ldr	r4, [r5, #8]
 80078ae:	e7e3      	b.n	8007878 <_puts_r+0x24>
 80078b0:	4b15      	ldr	r3, [pc, #84]	; (8007908 <_puts_r+0xb4>)
 80078b2:	429c      	cmp	r4, r3
 80078b4:	bf08      	it	eq
 80078b6:	68ec      	ldreq	r4, [r5, #12]
 80078b8:	e7de      	b.n	8007878 <_puts_r+0x24>
 80078ba:	4621      	mov	r1, r4
 80078bc:	4628      	mov	r0, r5
 80078be:	f000 f8b3 	bl	8007a28 <__swsetup_r>
 80078c2:	2800      	cmp	r0, #0
 80078c4:	d0dd      	beq.n	8007882 <_puts_r+0x2e>
 80078c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078ca:	bd70      	pop	{r4, r5, r6, pc}
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	da04      	bge.n	80078da <_puts_r+0x86>
 80078d0:	69a2      	ldr	r2, [r4, #24]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	dc06      	bgt.n	80078e4 <_puts_r+0x90>
 80078d6:	290a      	cmp	r1, #10
 80078d8:	d004      	beq.n	80078e4 <_puts_r+0x90>
 80078da:	6823      	ldr	r3, [r4, #0]
 80078dc:	1c5a      	adds	r2, r3, #1
 80078de:	6022      	str	r2, [r4, #0]
 80078e0:	7019      	strb	r1, [r3, #0]
 80078e2:	e7cf      	b.n	8007884 <_puts_r+0x30>
 80078e4:	4622      	mov	r2, r4
 80078e6:	4628      	mov	r0, r5
 80078e8:	f000 f84c 	bl	8007984 <__swbuf_r>
 80078ec:	3001      	adds	r0, #1
 80078ee:	d1c9      	bne.n	8007884 <_puts_r+0x30>
 80078f0:	e7e9      	b.n	80078c6 <_puts_r+0x72>
 80078f2:	6823      	ldr	r3, [r4, #0]
 80078f4:	200a      	movs	r0, #10
 80078f6:	1c5a      	adds	r2, r3, #1
 80078f8:	6022      	str	r2, [r4, #0]
 80078fa:	7018      	strb	r0, [r3, #0]
 80078fc:	e7e5      	b.n	80078ca <_puts_r+0x76>
 80078fe:	bf00      	nop
 8007900:	08008da4 	.word	0x08008da4
 8007904:	08008dc4 	.word	0x08008dc4
 8007908:	08008d84 	.word	0x08008d84

0800790c <puts>:
 800790c:	4b02      	ldr	r3, [pc, #8]	; (8007918 <puts+0xc>)
 800790e:	4601      	mov	r1, r0
 8007910:	6818      	ldr	r0, [r3, #0]
 8007912:	f7ff bf9f 	b.w	8007854 <_puts_r>
 8007916:	bf00      	nop
 8007918:	20001f54 	.word	0x20001f54

0800791c <sniprintf>:
 800791c:	b40c      	push	{r2, r3}
 800791e:	b530      	push	{r4, r5, lr}
 8007920:	4b17      	ldr	r3, [pc, #92]	; (8007980 <sniprintf+0x64>)
 8007922:	1e0c      	subs	r4, r1, #0
 8007924:	b09d      	sub	sp, #116	; 0x74
 8007926:	681d      	ldr	r5, [r3, #0]
 8007928:	da08      	bge.n	800793c <sniprintf+0x20>
 800792a:	238b      	movs	r3, #139	; 0x8b
 800792c:	602b      	str	r3, [r5, #0]
 800792e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007932:	b01d      	add	sp, #116	; 0x74
 8007934:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007938:	b002      	add	sp, #8
 800793a:	4770      	bx	lr
 800793c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007940:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007944:	bf14      	ite	ne
 8007946:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800794a:	4623      	moveq	r3, r4
 800794c:	9304      	str	r3, [sp, #16]
 800794e:	9307      	str	r3, [sp, #28]
 8007950:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007954:	9002      	str	r0, [sp, #8]
 8007956:	9006      	str	r0, [sp, #24]
 8007958:	f8ad 3016 	strh.w	r3, [sp, #22]
 800795c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800795e:	ab21      	add	r3, sp, #132	; 0x84
 8007960:	a902      	add	r1, sp, #8
 8007962:	4628      	mov	r0, r5
 8007964:	9301      	str	r3, [sp, #4]
 8007966:	f000 fbad 	bl	80080c4 <_svfiprintf_r>
 800796a:	1c43      	adds	r3, r0, #1
 800796c:	bfbc      	itt	lt
 800796e:	238b      	movlt	r3, #139	; 0x8b
 8007970:	602b      	strlt	r3, [r5, #0]
 8007972:	2c00      	cmp	r4, #0
 8007974:	d0dd      	beq.n	8007932 <sniprintf+0x16>
 8007976:	9b02      	ldr	r3, [sp, #8]
 8007978:	2200      	movs	r2, #0
 800797a:	701a      	strb	r2, [r3, #0]
 800797c:	e7d9      	b.n	8007932 <sniprintf+0x16>
 800797e:	bf00      	nop
 8007980:	20001f54 	.word	0x20001f54

08007984 <__swbuf_r>:
 8007984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007986:	460e      	mov	r6, r1
 8007988:	4614      	mov	r4, r2
 800798a:	4605      	mov	r5, r0
 800798c:	b118      	cbz	r0, 8007996 <__swbuf_r+0x12>
 800798e:	6983      	ldr	r3, [r0, #24]
 8007990:	b90b      	cbnz	r3, 8007996 <__swbuf_r+0x12>
 8007992:	f000 f9a7 	bl	8007ce4 <__sinit>
 8007996:	4b21      	ldr	r3, [pc, #132]	; (8007a1c <__swbuf_r+0x98>)
 8007998:	429c      	cmp	r4, r3
 800799a:	d12a      	bne.n	80079f2 <__swbuf_r+0x6e>
 800799c:	686c      	ldr	r4, [r5, #4]
 800799e:	69a3      	ldr	r3, [r4, #24]
 80079a0:	60a3      	str	r3, [r4, #8]
 80079a2:	89a3      	ldrh	r3, [r4, #12]
 80079a4:	071a      	lsls	r2, r3, #28
 80079a6:	d52e      	bpl.n	8007a06 <__swbuf_r+0x82>
 80079a8:	6923      	ldr	r3, [r4, #16]
 80079aa:	b363      	cbz	r3, 8007a06 <__swbuf_r+0x82>
 80079ac:	6923      	ldr	r3, [r4, #16]
 80079ae:	6820      	ldr	r0, [r4, #0]
 80079b0:	1ac0      	subs	r0, r0, r3
 80079b2:	6963      	ldr	r3, [r4, #20]
 80079b4:	b2f6      	uxtb	r6, r6
 80079b6:	4283      	cmp	r3, r0
 80079b8:	4637      	mov	r7, r6
 80079ba:	dc04      	bgt.n	80079c6 <__swbuf_r+0x42>
 80079bc:	4621      	mov	r1, r4
 80079be:	4628      	mov	r0, r5
 80079c0:	f000 f926 	bl	8007c10 <_fflush_r>
 80079c4:	bb28      	cbnz	r0, 8007a12 <__swbuf_r+0x8e>
 80079c6:	68a3      	ldr	r3, [r4, #8]
 80079c8:	3b01      	subs	r3, #1
 80079ca:	60a3      	str	r3, [r4, #8]
 80079cc:	6823      	ldr	r3, [r4, #0]
 80079ce:	1c5a      	adds	r2, r3, #1
 80079d0:	6022      	str	r2, [r4, #0]
 80079d2:	701e      	strb	r6, [r3, #0]
 80079d4:	6963      	ldr	r3, [r4, #20]
 80079d6:	3001      	adds	r0, #1
 80079d8:	4283      	cmp	r3, r0
 80079da:	d004      	beq.n	80079e6 <__swbuf_r+0x62>
 80079dc:	89a3      	ldrh	r3, [r4, #12]
 80079de:	07db      	lsls	r3, r3, #31
 80079e0:	d519      	bpl.n	8007a16 <__swbuf_r+0x92>
 80079e2:	2e0a      	cmp	r6, #10
 80079e4:	d117      	bne.n	8007a16 <__swbuf_r+0x92>
 80079e6:	4621      	mov	r1, r4
 80079e8:	4628      	mov	r0, r5
 80079ea:	f000 f911 	bl	8007c10 <_fflush_r>
 80079ee:	b190      	cbz	r0, 8007a16 <__swbuf_r+0x92>
 80079f0:	e00f      	b.n	8007a12 <__swbuf_r+0x8e>
 80079f2:	4b0b      	ldr	r3, [pc, #44]	; (8007a20 <__swbuf_r+0x9c>)
 80079f4:	429c      	cmp	r4, r3
 80079f6:	d101      	bne.n	80079fc <__swbuf_r+0x78>
 80079f8:	68ac      	ldr	r4, [r5, #8]
 80079fa:	e7d0      	b.n	800799e <__swbuf_r+0x1a>
 80079fc:	4b09      	ldr	r3, [pc, #36]	; (8007a24 <__swbuf_r+0xa0>)
 80079fe:	429c      	cmp	r4, r3
 8007a00:	bf08      	it	eq
 8007a02:	68ec      	ldreq	r4, [r5, #12]
 8007a04:	e7cb      	b.n	800799e <__swbuf_r+0x1a>
 8007a06:	4621      	mov	r1, r4
 8007a08:	4628      	mov	r0, r5
 8007a0a:	f000 f80d 	bl	8007a28 <__swsetup_r>
 8007a0e:	2800      	cmp	r0, #0
 8007a10:	d0cc      	beq.n	80079ac <__swbuf_r+0x28>
 8007a12:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007a16:	4638      	mov	r0, r7
 8007a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	08008da4 	.word	0x08008da4
 8007a20:	08008dc4 	.word	0x08008dc4
 8007a24:	08008d84 	.word	0x08008d84

08007a28 <__swsetup_r>:
 8007a28:	4b32      	ldr	r3, [pc, #200]	; (8007af4 <__swsetup_r+0xcc>)
 8007a2a:	b570      	push	{r4, r5, r6, lr}
 8007a2c:	681d      	ldr	r5, [r3, #0]
 8007a2e:	4606      	mov	r6, r0
 8007a30:	460c      	mov	r4, r1
 8007a32:	b125      	cbz	r5, 8007a3e <__swsetup_r+0x16>
 8007a34:	69ab      	ldr	r3, [r5, #24]
 8007a36:	b913      	cbnz	r3, 8007a3e <__swsetup_r+0x16>
 8007a38:	4628      	mov	r0, r5
 8007a3a:	f000 f953 	bl	8007ce4 <__sinit>
 8007a3e:	4b2e      	ldr	r3, [pc, #184]	; (8007af8 <__swsetup_r+0xd0>)
 8007a40:	429c      	cmp	r4, r3
 8007a42:	d10f      	bne.n	8007a64 <__swsetup_r+0x3c>
 8007a44:	686c      	ldr	r4, [r5, #4]
 8007a46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	0715      	lsls	r5, r2, #28
 8007a4e:	d42c      	bmi.n	8007aaa <__swsetup_r+0x82>
 8007a50:	06d0      	lsls	r0, r2, #27
 8007a52:	d411      	bmi.n	8007a78 <__swsetup_r+0x50>
 8007a54:	2209      	movs	r2, #9
 8007a56:	6032      	str	r2, [r6, #0]
 8007a58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a5c:	81a3      	strh	r3, [r4, #12]
 8007a5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a62:	e03e      	b.n	8007ae2 <__swsetup_r+0xba>
 8007a64:	4b25      	ldr	r3, [pc, #148]	; (8007afc <__swsetup_r+0xd4>)
 8007a66:	429c      	cmp	r4, r3
 8007a68:	d101      	bne.n	8007a6e <__swsetup_r+0x46>
 8007a6a:	68ac      	ldr	r4, [r5, #8]
 8007a6c:	e7eb      	b.n	8007a46 <__swsetup_r+0x1e>
 8007a6e:	4b24      	ldr	r3, [pc, #144]	; (8007b00 <__swsetup_r+0xd8>)
 8007a70:	429c      	cmp	r4, r3
 8007a72:	bf08      	it	eq
 8007a74:	68ec      	ldreq	r4, [r5, #12]
 8007a76:	e7e6      	b.n	8007a46 <__swsetup_r+0x1e>
 8007a78:	0751      	lsls	r1, r2, #29
 8007a7a:	d512      	bpl.n	8007aa2 <__swsetup_r+0x7a>
 8007a7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a7e:	b141      	cbz	r1, 8007a92 <__swsetup_r+0x6a>
 8007a80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a84:	4299      	cmp	r1, r3
 8007a86:	d002      	beq.n	8007a8e <__swsetup_r+0x66>
 8007a88:	4630      	mov	r0, r6
 8007a8a:	f000 fa19 	bl	8007ec0 <_free_r>
 8007a8e:	2300      	movs	r3, #0
 8007a90:	6363      	str	r3, [r4, #52]	; 0x34
 8007a92:	89a3      	ldrh	r3, [r4, #12]
 8007a94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a98:	81a3      	strh	r3, [r4, #12]
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	6063      	str	r3, [r4, #4]
 8007a9e:	6923      	ldr	r3, [r4, #16]
 8007aa0:	6023      	str	r3, [r4, #0]
 8007aa2:	89a3      	ldrh	r3, [r4, #12]
 8007aa4:	f043 0308 	orr.w	r3, r3, #8
 8007aa8:	81a3      	strh	r3, [r4, #12]
 8007aaa:	6923      	ldr	r3, [r4, #16]
 8007aac:	b94b      	cbnz	r3, 8007ac2 <__swsetup_r+0x9a>
 8007aae:	89a3      	ldrh	r3, [r4, #12]
 8007ab0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ab4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ab8:	d003      	beq.n	8007ac2 <__swsetup_r+0x9a>
 8007aba:	4621      	mov	r1, r4
 8007abc:	4630      	mov	r0, r6
 8007abe:	f000 f9bf 	bl	8007e40 <__smakebuf_r>
 8007ac2:	89a2      	ldrh	r2, [r4, #12]
 8007ac4:	f012 0301 	ands.w	r3, r2, #1
 8007ac8:	d00c      	beq.n	8007ae4 <__swsetup_r+0xbc>
 8007aca:	2300      	movs	r3, #0
 8007acc:	60a3      	str	r3, [r4, #8]
 8007ace:	6963      	ldr	r3, [r4, #20]
 8007ad0:	425b      	negs	r3, r3
 8007ad2:	61a3      	str	r3, [r4, #24]
 8007ad4:	6923      	ldr	r3, [r4, #16]
 8007ad6:	b953      	cbnz	r3, 8007aee <__swsetup_r+0xc6>
 8007ad8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007adc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007ae0:	d1ba      	bne.n	8007a58 <__swsetup_r+0x30>
 8007ae2:	bd70      	pop	{r4, r5, r6, pc}
 8007ae4:	0792      	lsls	r2, r2, #30
 8007ae6:	bf58      	it	pl
 8007ae8:	6963      	ldrpl	r3, [r4, #20]
 8007aea:	60a3      	str	r3, [r4, #8]
 8007aec:	e7f2      	b.n	8007ad4 <__swsetup_r+0xac>
 8007aee:	2000      	movs	r0, #0
 8007af0:	e7f7      	b.n	8007ae2 <__swsetup_r+0xba>
 8007af2:	bf00      	nop
 8007af4:	20001f54 	.word	0x20001f54
 8007af8:	08008da4 	.word	0x08008da4
 8007afc:	08008dc4 	.word	0x08008dc4
 8007b00:	08008d84 	.word	0x08008d84

08007b04 <__sflush_r>:
 8007b04:	898a      	ldrh	r2, [r1, #12]
 8007b06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b0a:	4605      	mov	r5, r0
 8007b0c:	0710      	lsls	r0, r2, #28
 8007b0e:	460c      	mov	r4, r1
 8007b10:	d458      	bmi.n	8007bc4 <__sflush_r+0xc0>
 8007b12:	684b      	ldr	r3, [r1, #4]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	dc05      	bgt.n	8007b24 <__sflush_r+0x20>
 8007b18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	dc02      	bgt.n	8007b24 <__sflush_r+0x20>
 8007b1e:	2000      	movs	r0, #0
 8007b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b26:	2e00      	cmp	r6, #0
 8007b28:	d0f9      	beq.n	8007b1e <__sflush_r+0x1a>
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b30:	682f      	ldr	r7, [r5, #0]
 8007b32:	6a21      	ldr	r1, [r4, #32]
 8007b34:	602b      	str	r3, [r5, #0]
 8007b36:	d032      	beq.n	8007b9e <__sflush_r+0x9a>
 8007b38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b3a:	89a3      	ldrh	r3, [r4, #12]
 8007b3c:	075a      	lsls	r2, r3, #29
 8007b3e:	d505      	bpl.n	8007b4c <__sflush_r+0x48>
 8007b40:	6863      	ldr	r3, [r4, #4]
 8007b42:	1ac0      	subs	r0, r0, r3
 8007b44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b46:	b10b      	cbz	r3, 8007b4c <__sflush_r+0x48>
 8007b48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b4a:	1ac0      	subs	r0, r0, r3
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	4602      	mov	r2, r0
 8007b50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b52:	6a21      	ldr	r1, [r4, #32]
 8007b54:	4628      	mov	r0, r5
 8007b56:	47b0      	blx	r6
 8007b58:	1c43      	adds	r3, r0, #1
 8007b5a:	89a3      	ldrh	r3, [r4, #12]
 8007b5c:	d106      	bne.n	8007b6c <__sflush_r+0x68>
 8007b5e:	6829      	ldr	r1, [r5, #0]
 8007b60:	291d      	cmp	r1, #29
 8007b62:	d848      	bhi.n	8007bf6 <__sflush_r+0xf2>
 8007b64:	4a29      	ldr	r2, [pc, #164]	; (8007c0c <__sflush_r+0x108>)
 8007b66:	40ca      	lsrs	r2, r1
 8007b68:	07d6      	lsls	r6, r2, #31
 8007b6a:	d544      	bpl.n	8007bf6 <__sflush_r+0xf2>
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	6062      	str	r2, [r4, #4]
 8007b70:	04d9      	lsls	r1, r3, #19
 8007b72:	6922      	ldr	r2, [r4, #16]
 8007b74:	6022      	str	r2, [r4, #0]
 8007b76:	d504      	bpl.n	8007b82 <__sflush_r+0x7e>
 8007b78:	1c42      	adds	r2, r0, #1
 8007b7a:	d101      	bne.n	8007b80 <__sflush_r+0x7c>
 8007b7c:	682b      	ldr	r3, [r5, #0]
 8007b7e:	b903      	cbnz	r3, 8007b82 <__sflush_r+0x7e>
 8007b80:	6560      	str	r0, [r4, #84]	; 0x54
 8007b82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b84:	602f      	str	r7, [r5, #0]
 8007b86:	2900      	cmp	r1, #0
 8007b88:	d0c9      	beq.n	8007b1e <__sflush_r+0x1a>
 8007b8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b8e:	4299      	cmp	r1, r3
 8007b90:	d002      	beq.n	8007b98 <__sflush_r+0x94>
 8007b92:	4628      	mov	r0, r5
 8007b94:	f000 f994 	bl	8007ec0 <_free_r>
 8007b98:	2000      	movs	r0, #0
 8007b9a:	6360      	str	r0, [r4, #52]	; 0x34
 8007b9c:	e7c0      	b.n	8007b20 <__sflush_r+0x1c>
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	4628      	mov	r0, r5
 8007ba2:	47b0      	blx	r6
 8007ba4:	1c41      	adds	r1, r0, #1
 8007ba6:	d1c8      	bne.n	8007b3a <__sflush_r+0x36>
 8007ba8:	682b      	ldr	r3, [r5, #0]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d0c5      	beq.n	8007b3a <__sflush_r+0x36>
 8007bae:	2b1d      	cmp	r3, #29
 8007bb0:	d001      	beq.n	8007bb6 <__sflush_r+0xb2>
 8007bb2:	2b16      	cmp	r3, #22
 8007bb4:	d101      	bne.n	8007bba <__sflush_r+0xb6>
 8007bb6:	602f      	str	r7, [r5, #0]
 8007bb8:	e7b1      	b.n	8007b1e <__sflush_r+0x1a>
 8007bba:	89a3      	ldrh	r3, [r4, #12]
 8007bbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bc0:	81a3      	strh	r3, [r4, #12]
 8007bc2:	e7ad      	b.n	8007b20 <__sflush_r+0x1c>
 8007bc4:	690f      	ldr	r7, [r1, #16]
 8007bc6:	2f00      	cmp	r7, #0
 8007bc8:	d0a9      	beq.n	8007b1e <__sflush_r+0x1a>
 8007bca:	0793      	lsls	r3, r2, #30
 8007bcc:	680e      	ldr	r6, [r1, #0]
 8007bce:	bf08      	it	eq
 8007bd0:	694b      	ldreq	r3, [r1, #20]
 8007bd2:	600f      	str	r7, [r1, #0]
 8007bd4:	bf18      	it	ne
 8007bd6:	2300      	movne	r3, #0
 8007bd8:	eba6 0807 	sub.w	r8, r6, r7
 8007bdc:	608b      	str	r3, [r1, #8]
 8007bde:	f1b8 0f00 	cmp.w	r8, #0
 8007be2:	dd9c      	ble.n	8007b1e <__sflush_r+0x1a>
 8007be4:	4643      	mov	r3, r8
 8007be6:	463a      	mov	r2, r7
 8007be8:	6a21      	ldr	r1, [r4, #32]
 8007bea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007bec:	4628      	mov	r0, r5
 8007bee:	47b0      	blx	r6
 8007bf0:	2800      	cmp	r0, #0
 8007bf2:	dc06      	bgt.n	8007c02 <__sflush_r+0xfe>
 8007bf4:	89a3      	ldrh	r3, [r4, #12]
 8007bf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bfa:	81a3      	strh	r3, [r4, #12]
 8007bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c00:	e78e      	b.n	8007b20 <__sflush_r+0x1c>
 8007c02:	4407      	add	r7, r0
 8007c04:	eba8 0800 	sub.w	r8, r8, r0
 8007c08:	e7e9      	b.n	8007bde <__sflush_r+0xda>
 8007c0a:	bf00      	nop
 8007c0c:	20400001 	.word	0x20400001

08007c10 <_fflush_r>:
 8007c10:	b538      	push	{r3, r4, r5, lr}
 8007c12:	690b      	ldr	r3, [r1, #16]
 8007c14:	4605      	mov	r5, r0
 8007c16:	460c      	mov	r4, r1
 8007c18:	b1db      	cbz	r3, 8007c52 <_fflush_r+0x42>
 8007c1a:	b118      	cbz	r0, 8007c24 <_fflush_r+0x14>
 8007c1c:	6983      	ldr	r3, [r0, #24]
 8007c1e:	b90b      	cbnz	r3, 8007c24 <_fflush_r+0x14>
 8007c20:	f000 f860 	bl	8007ce4 <__sinit>
 8007c24:	4b0c      	ldr	r3, [pc, #48]	; (8007c58 <_fflush_r+0x48>)
 8007c26:	429c      	cmp	r4, r3
 8007c28:	d109      	bne.n	8007c3e <_fflush_r+0x2e>
 8007c2a:	686c      	ldr	r4, [r5, #4]
 8007c2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c30:	b17b      	cbz	r3, 8007c52 <_fflush_r+0x42>
 8007c32:	4621      	mov	r1, r4
 8007c34:	4628      	mov	r0, r5
 8007c36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c3a:	f7ff bf63 	b.w	8007b04 <__sflush_r>
 8007c3e:	4b07      	ldr	r3, [pc, #28]	; (8007c5c <_fflush_r+0x4c>)
 8007c40:	429c      	cmp	r4, r3
 8007c42:	d101      	bne.n	8007c48 <_fflush_r+0x38>
 8007c44:	68ac      	ldr	r4, [r5, #8]
 8007c46:	e7f1      	b.n	8007c2c <_fflush_r+0x1c>
 8007c48:	4b05      	ldr	r3, [pc, #20]	; (8007c60 <_fflush_r+0x50>)
 8007c4a:	429c      	cmp	r4, r3
 8007c4c:	bf08      	it	eq
 8007c4e:	68ec      	ldreq	r4, [r5, #12]
 8007c50:	e7ec      	b.n	8007c2c <_fflush_r+0x1c>
 8007c52:	2000      	movs	r0, #0
 8007c54:	bd38      	pop	{r3, r4, r5, pc}
 8007c56:	bf00      	nop
 8007c58:	08008da4 	.word	0x08008da4
 8007c5c:	08008dc4 	.word	0x08008dc4
 8007c60:	08008d84 	.word	0x08008d84

08007c64 <std>:
 8007c64:	2300      	movs	r3, #0
 8007c66:	b510      	push	{r4, lr}
 8007c68:	4604      	mov	r4, r0
 8007c6a:	e9c0 3300 	strd	r3, r3, [r0]
 8007c6e:	6083      	str	r3, [r0, #8]
 8007c70:	8181      	strh	r1, [r0, #12]
 8007c72:	6643      	str	r3, [r0, #100]	; 0x64
 8007c74:	81c2      	strh	r2, [r0, #14]
 8007c76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c7a:	6183      	str	r3, [r0, #24]
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	2208      	movs	r2, #8
 8007c80:	305c      	adds	r0, #92	; 0x5c
 8007c82:	f7ff fdc7 	bl	8007814 <memset>
 8007c86:	4b05      	ldr	r3, [pc, #20]	; (8007c9c <std+0x38>)
 8007c88:	6263      	str	r3, [r4, #36]	; 0x24
 8007c8a:	4b05      	ldr	r3, [pc, #20]	; (8007ca0 <std+0x3c>)
 8007c8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c8e:	4b05      	ldr	r3, [pc, #20]	; (8007ca4 <std+0x40>)
 8007c90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c92:	4b05      	ldr	r3, [pc, #20]	; (8007ca8 <std+0x44>)
 8007c94:	6224      	str	r4, [r4, #32]
 8007c96:	6323      	str	r3, [r4, #48]	; 0x30
 8007c98:	bd10      	pop	{r4, pc}
 8007c9a:	bf00      	nop
 8007c9c:	08008865 	.word	0x08008865
 8007ca0:	08008887 	.word	0x08008887
 8007ca4:	080088bf 	.word	0x080088bf
 8007ca8:	080088e3 	.word	0x080088e3

08007cac <_cleanup_r>:
 8007cac:	4901      	ldr	r1, [pc, #4]	; (8007cb4 <_cleanup_r+0x8>)
 8007cae:	f000 b885 	b.w	8007dbc <_fwalk_reent>
 8007cb2:	bf00      	nop
 8007cb4:	08007c11 	.word	0x08007c11

08007cb8 <__sfmoreglue>:
 8007cb8:	b570      	push	{r4, r5, r6, lr}
 8007cba:	1e4a      	subs	r2, r1, #1
 8007cbc:	2568      	movs	r5, #104	; 0x68
 8007cbe:	4355      	muls	r5, r2
 8007cc0:	460e      	mov	r6, r1
 8007cc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007cc6:	f000 f949 	bl	8007f5c <_malloc_r>
 8007cca:	4604      	mov	r4, r0
 8007ccc:	b140      	cbz	r0, 8007ce0 <__sfmoreglue+0x28>
 8007cce:	2100      	movs	r1, #0
 8007cd0:	e9c0 1600 	strd	r1, r6, [r0]
 8007cd4:	300c      	adds	r0, #12
 8007cd6:	60a0      	str	r0, [r4, #8]
 8007cd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007cdc:	f7ff fd9a 	bl	8007814 <memset>
 8007ce0:	4620      	mov	r0, r4
 8007ce2:	bd70      	pop	{r4, r5, r6, pc}

08007ce4 <__sinit>:
 8007ce4:	6983      	ldr	r3, [r0, #24]
 8007ce6:	b510      	push	{r4, lr}
 8007ce8:	4604      	mov	r4, r0
 8007cea:	bb33      	cbnz	r3, 8007d3a <__sinit+0x56>
 8007cec:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007cf0:	6503      	str	r3, [r0, #80]	; 0x50
 8007cf2:	4b12      	ldr	r3, [pc, #72]	; (8007d3c <__sinit+0x58>)
 8007cf4:	4a12      	ldr	r2, [pc, #72]	; (8007d40 <__sinit+0x5c>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	6282      	str	r2, [r0, #40]	; 0x28
 8007cfa:	4298      	cmp	r0, r3
 8007cfc:	bf04      	itt	eq
 8007cfe:	2301      	moveq	r3, #1
 8007d00:	6183      	streq	r3, [r0, #24]
 8007d02:	f000 f81f 	bl	8007d44 <__sfp>
 8007d06:	6060      	str	r0, [r4, #4]
 8007d08:	4620      	mov	r0, r4
 8007d0a:	f000 f81b 	bl	8007d44 <__sfp>
 8007d0e:	60a0      	str	r0, [r4, #8]
 8007d10:	4620      	mov	r0, r4
 8007d12:	f000 f817 	bl	8007d44 <__sfp>
 8007d16:	2200      	movs	r2, #0
 8007d18:	60e0      	str	r0, [r4, #12]
 8007d1a:	2104      	movs	r1, #4
 8007d1c:	6860      	ldr	r0, [r4, #4]
 8007d1e:	f7ff ffa1 	bl	8007c64 <std>
 8007d22:	2201      	movs	r2, #1
 8007d24:	2109      	movs	r1, #9
 8007d26:	68a0      	ldr	r0, [r4, #8]
 8007d28:	f7ff ff9c 	bl	8007c64 <std>
 8007d2c:	2202      	movs	r2, #2
 8007d2e:	2112      	movs	r1, #18
 8007d30:	68e0      	ldr	r0, [r4, #12]
 8007d32:	f7ff ff97 	bl	8007c64 <std>
 8007d36:	2301      	movs	r3, #1
 8007d38:	61a3      	str	r3, [r4, #24]
 8007d3a:	bd10      	pop	{r4, pc}
 8007d3c:	08008d80 	.word	0x08008d80
 8007d40:	08007cad 	.word	0x08007cad

08007d44 <__sfp>:
 8007d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d46:	4b1b      	ldr	r3, [pc, #108]	; (8007db4 <__sfp+0x70>)
 8007d48:	681e      	ldr	r6, [r3, #0]
 8007d4a:	69b3      	ldr	r3, [r6, #24]
 8007d4c:	4607      	mov	r7, r0
 8007d4e:	b913      	cbnz	r3, 8007d56 <__sfp+0x12>
 8007d50:	4630      	mov	r0, r6
 8007d52:	f7ff ffc7 	bl	8007ce4 <__sinit>
 8007d56:	3648      	adds	r6, #72	; 0x48
 8007d58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007d5c:	3b01      	subs	r3, #1
 8007d5e:	d503      	bpl.n	8007d68 <__sfp+0x24>
 8007d60:	6833      	ldr	r3, [r6, #0]
 8007d62:	b133      	cbz	r3, 8007d72 <__sfp+0x2e>
 8007d64:	6836      	ldr	r6, [r6, #0]
 8007d66:	e7f7      	b.n	8007d58 <__sfp+0x14>
 8007d68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007d6c:	b16d      	cbz	r5, 8007d8a <__sfp+0x46>
 8007d6e:	3468      	adds	r4, #104	; 0x68
 8007d70:	e7f4      	b.n	8007d5c <__sfp+0x18>
 8007d72:	2104      	movs	r1, #4
 8007d74:	4638      	mov	r0, r7
 8007d76:	f7ff ff9f 	bl	8007cb8 <__sfmoreglue>
 8007d7a:	6030      	str	r0, [r6, #0]
 8007d7c:	2800      	cmp	r0, #0
 8007d7e:	d1f1      	bne.n	8007d64 <__sfp+0x20>
 8007d80:	230c      	movs	r3, #12
 8007d82:	603b      	str	r3, [r7, #0]
 8007d84:	4604      	mov	r4, r0
 8007d86:	4620      	mov	r0, r4
 8007d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d8a:	4b0b      	ldr	r3, [pc, #44]	; (8007db8 <__sfp+0x74>)
 8007d8c:	6665      	str	r5, [r4, #100]	; 0x64
 8007d8e:	e9c4 5500 	strd	r5, r5, [r4]
 8007d92:	60a5      	str	r5, [r4, #8]
 8007d94:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007d98:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007d9c:	2208      	movs	r2, #8
 8007d9e:	4629      	mov	r1, r5
 8007da0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007da4:	f7ff fd36 	bl	8007814 <memset>
 8007da8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007dac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007db0:	e7e9      	b.n	8007d86 <__sfp+0x42>
 8007db2:	bf00      	nop
 8007db4:	08008d80 	.word	0x08008d80
 8007db8:	ffff0001 	.word	0xffff0001

08007dbc <_fwalk_reent>:
 8007dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dc0:	4680      	mov	r8, r0
 8007dc2:	4689      	mov	r9, r1
 8007dc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007dc8:	2600      	movs	r6, #0
 8007dca:	b914      	cbnz	r4, 8007dd2 <_fwalk_reent+0x16>
 8007dcc:	4630      	mov	r0, r6
 8007dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dd2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007dd6:	3f01      	subs	r7, #1
 8007dd8:	d501      	bpl.n	8007dde <_fwalk_reent+0x22>
 8007dda:	6824      	ldr	r4, [r4, #0]
 8007ddc:	e7f5      	b.n	8007dca <_fwalk_reent+0xe>
 8007dde:	89ab      	ldrh	r3, [r5, #12]
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d907      	bls.n	8007df4 <_fwalk_reent+0x38>
 8007de4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007de8:	3301      	adds	r3, #1
 8007dea:	d003      	beq.n	8007df4 <_fwalk_reent+0x38>
 8007dec:	4629      	mov	r1, r5
 8007dee:	4640      	mov	r0, r8
 8007df0:	47c8      	blx	r9
 8007df2:	4306      	orrs	r6, r0
 8007df4:	3568      	adds	r5, #104	; 0x68
 8007df6:	e7ee      	b.n	8007dd6 <_fwalk_reent+0x1a>

08007df8 <__swhatbuf_r>:
 8007df8:	b570      	push	{r4, r5, r6, lr}
 8007dfa:	460e      	mov	r6, r1
 8007dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e00:	2900      	cmp	r1, #0
 8007e02:	b096      	sub	sp, #88	; 0x58
 8007e04:	4614      	mov	r4, r2
 8007e06:	461d      	mov	r5, r3
 8007e08:	da07      	bge.n	8007e1a <__swhatbuf_r+0x22>
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	602b      	str	r3, [r5, #0]
 8007e0e:	89b3      	ldrh	r3, [r6, #12]
 8007e10:	061a      	lsls	r2, r3, #24
 8007e12:	d410      	bmi.n	8007e36 <__swhatbuf_r+0x3e>
 8007e14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e18:	e00e      	b.n	8007e38 <__swhatbuf_r+0x40>
 8007e1a:	466a      	mov	r2, sp
 8007e1c:	f000 fd88 	bl	8008930 <_fstat_r>
 8007e20:	2800      	cmp	r0, #0
 8007e22:	dbf2      	blt.n	8007e0a <__swhatbuf_r+0x12>
 8007e24:	9a01      	ldr	r2, [sp, #4]
 8007e26:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007e2a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007e2e:	425a      	negs	r2, r3
 8007e30:	415a      	adcs	r2, r3
 8007e32:	602a      	str	r2, [r5, #0]
 8007e34:	e7ee      	b.n	8007e14 <__swhatbuf_r+0x1c>
 8007e36:	2340      	movs	r3, #64	; 0x40
 8007e38:	2000      	movs	r0, #0
 8007e3a:	6023      	str	r3, [r4, #0]
 8007e3c:	b016      	add	sp, #88	; 0x58
 8007e3e:	bd70      	pop	{r4, r5, r6, pc}

08007e40 <__smakebuf_r>:
 8007e40:	898b      	ldrh	r3, [r1, #12]
 8007e42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007e44:	079d      	lsls	r5, r3, #30
 8007e46:	4606      	mov	r6, r0
 8007e48:	460c      	mov	r4, r1
 8007e4a:	d507      	bpl.n	8007e5c <__smakebuf_r+0x1c>
 8007e4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007e50:	6023      	str	r3, [r4, #0]
 8007e52:	6123      	str	r3, [r4, #16]
 8007e54:	2301      	movs	r3, #1
 8007e56:	6163      	str	r3, [r4, #20]
 8007e58:	b002      	add	sp, #8
 8007e5a:	bd70      	pop	{r4, r5, r6, pc}
 8007e5c:	ab01      	add	r3, sp, #4
 8007e5e:	466a      	mov	r2, sp
 8007e60:	f7ff ffca 	bl	8007df8 <__swhatbuf_r>
 8007e64:	9900      	ldr	r1, [sp, #0]
 8007e66:	4605      	mov	r5, r0
 8007e68:	4630      	mov	r0, r6
 8007e6a:	f000 f877 	bl	8007f5c <_malloc_r>
 8007e6e:	b948      	cbnz	r0, 8007e84 <__smakebuf_r+0x44>
 8007e70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e74:	059a      	lsls	r2, r3, #22
 8007e76:	d4ef      	bmi.n	8007e58 <__smakebuf_r+0x18>
 8007e78:	f023 0303 	bic.w	r3, r3, #3
 8007e7c:	f043 0302 	orr.w	r3, r3, #2
 8007e80:	81a3      	strh	r3, [r4, #12]
 8007e82:	e7e3      	b.n	8007e4c <__smakebuf_r+0xc>
 8007e84:	4b0d      	ldr	r3, [pc, #52]	; (8007ebc <__smakebuf_r+0x7c>)
 8007e86:	62b3      	str	r3, [r6, #40]	; 0x28
 8007e88:	89a3      	ldrh	r3, [r4, #12]
 8007e8a:	6020      	str	r0, [r4, #0]
 8007e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e90:	81a3      	strh	r3, [r4, #12]
 8007e92:	9b00      	ldr	r3, [sp, #0]
 8007e94:	6163      	str	r3, [r4, #20]
 8007e96:	9b01      	ldr	r3, [sp, #4]
 8007e98:	6120      	str	r0, [r4, #16]
 8007e9a:	b15b      	cbz	r3, 8007eb4 <__smakebuf_r+0x74>
 8007e9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ea0:	4630      	mov	r0, r6
 8007ea2:	f000 fd57 	bl	8008954 <_isatty_r>
 8007ea6:	b128      	cbz	r0, 8007eb4 <__smakebuf_r+0x74>
 8007ea8:	89a3      	ldrh	r3, [r4, #12]
 8007eaa:	f023 0303 	bic.w	r3, r3, #3
 8007eae:	f043 0301 	orr.w	r3, r3, #1
 8007eb2:	81a3      	strh	r3, [r4, #12]
 8007eb4:	89a3      	ldrh	r3, [r4, #12]
 8007eb6:	431d      	orrs	r5, r3
 8007eb8:	81a5      	strh	r5, [r4, #12]
 8007eba:	e7cd      	b.n	8007e58 <__smakebuf_r+0x18>
 8007ebc:	08007cad 	.word	0x08007cad

08007ec0 <_free_r>:
 8007ec0:	b538      	push	{r3, r4, r5, lr}
 8007ec2:	4605      	mov	r5, r0
 8007ec4:	2900      	cmp	r1, #0
 8007ec6:	d045      	beq.n	8007f54 <_free_r+0x94>
 8007ec8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ecc:	1f0c      	subs	r4, r1, #4
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	bfb8      	it	lt
 8007ed2:	18e4      	addlt	r4, r4, r3
 8007ed4:	f000 fd84 	bl	80089e0 <__malloc_lock>
 8007ed8:	4a1f      	ldr	r2, [pc, #124]	; (8007f58 <_free_r+0x98>)
 8007eda:	6813      	ldr	r3, [r2, #0]
 8007edc:	4610      	mov	r0, r2
 8007ede:	b933      	cbnz	r3, 8007eee <_free_r+0x2e>
 8007ee0:	6063      	str	r3, [r4, #4]
 8007ee2:	6014      	str	r4, [r2, #0]
 8007ee4:	4628      	mov	r0, r5
 8007ee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007eea:	f000 bd7a 	b.w	80089e2 <__malloc_unlock>
 8007eee:	42a3      	cmp	r3, r4
 8007ef0:	d90c      	bls.n	8007f0c <_free_r+0x4c>
 8007ef2:	6821      	ldr	r1, [r4, #0]
 8007ef4:	1862      	adds	r2, r4, r1
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	bf04      	itt	eq
 8007efa:	681a      	ldreq	r2, [r3, #0]
 8007efc:	685b      	ldreq	r3, [r3, #4]
 8007efe:	6063      	str	r3, [r4, #4]
 8007f00:	bf04      	itt	eq
 8007f02:	1852      	addeq	r2, r2, r1
 8007f04:	6022      	streq	r2, [r4, #0]
 8007f06:	6004      	str	r4, [r0, #0]
 8007f08:	e7ec      	b.n	8007ee4 <_free_r+0x24>
 8007f0a:	4613      	mov	r3, r2
 8007f0c:	685a      	ldr	r2, [r3, #4]
 8007f0e:	b10a      	cbz	r2, 8007f14 <_free_r+0x54>
 8007f10:	42a2      	cmp	r2, r4
 8007f12:	d9fa      	bls.n	8007f0a <_free_r+0x4a>
 8007f14:	6819      	ldr	r1, [r3, #0]
 8007f16:	1858      	adds	r0, r3, r1
 8007f18:	42a0      	cmp	r0, r4
 8007f1a:	d10b      	bne.n	8007f34 <_free_r+0x74>
 8007f1c:	6820      	ldr	r0, [r4, #0]
 8007f1e:	4401      	add	r1, r0
 8007f20:	1858      	adds	r0, r3, r1
 8007f22:	4282      	cmp	r2, r0
 8007f24:	6019      	str	r1, [r3, #0]
 8007f26:	d1dd      	bne.n	8007ee4 <_free_r+0x24>
 8007f28:	6810      	ldr	r0, [r2, #0]
 8007f2a:	6852      	ldr	r2, [r2, #4]
 8007f2c:	605a      	str	r2, [r3, #4]
 8007f2e:	4401      	add	r1, r0
 8007f30:	6019      	str	r1, [r3, #0]
 8007f32:	e7d7      	b.n	8007ee4 <_free_r+0x24>
 8007f34:	d902      	bls.n	8007f3c <_free_r+0x7c>
 8007f36:	230c      	movs	r3, #12
 8007f38:	602b      	str	r3, [r5, #0]
 8007f3a:	e7d3      	b.n	8007ee4 <_free_r+0x24>
 8007f3c:	6820      	ldr	r0, [r4, #0]
 8007f3e:	1821      	adds	r1, r4, r0
 8007f40:	428a      	cmp	r2, r1
 8007f42:	bf04      	itt	eq
 8007f44:	6811      	ldreq	r1, [r2, #0]
 8007f46:	6852      	ldreq	r2, [r2, #4]
 8007f48:	6062      	str	r2, [r4, #4]
 8007f4a:	bf04      	itt	eq
 8007f4c:	1809      	addeq	r1, r1, r0
 8007f4e:	6021      	streq	r1, [r4, #0]
 8007f50:	605c      	str	r4, [r3, #4]
 8007f52:	e7c7      	b.n	8007ee4 <_free_r+0x24>
 8007f54:	bd38      	pop	{r3, r4, r5, pc}
 8007f56:	bf00      	nop
 8007f58:	20001fe4 	.word	0x20001fe4

08007f5c <_malloc_r>:
 8007f5c:	b570      	push	{r4, r5, r6, lr}
 8007f5e:	1ccd      	adds	r5, r1, #3
 8007f60:	f025 0503 	bic.w	r5, r5, #3
 8007f64:	3508      	adds	r5, #8
 8007f66:	2d0c      	cmp	r5, #12
 8007f68:	bf38      	it	cc
 8007f6a:	250c      	movcc	r5, #12
 8007f6c:	2d00      	cmp	r5, #0
 8007f6e:	4606      	mov	r6, r0
 8007f70:	db01      	blt.n	8007f76 <_malloc_r+0x1a>
 8007f72:	42a9      	cmp	r1, r5
 8007f74:	d903      	bls.n	8007f7e <_malloc_r+0x22>
 8007f76:	230c      	movs	r3, #12
 8007f78:	6033      	str	r3, [r6, #0]
 8007f7a:	2000      	movs	r0, #0
 8007f7c:	bd70      	pop	{r4, r5, r6, pc}
 8007f7e:	f000 fd2f 	bl	80089e0 <__malloc_lock>
 8007f82:	4a21      	ldr	r2, [pc, #132]	; (8008008 <_malloc_r+0xac>)
 8007f84:	6814      	ldr	r4, [r2, #0]
 8007f86:	4621      	mov	r1, r4
 8007f88:	b991      	cbnz	r1, 8007fb0 <_malloc_r+0x54>
 8007f8a:	4c20      	ldr	r4, [pc, #128]	; (800800c <_malloc_r+0xb0>)
 8007f8c:	6823      	ldr	r3, [r4, #0]
 8007f8e:	b91b      	cbnz	r3, 8007f98 <_malloc_r+0x3c>
 8007f90:	4630      	mov	r0, r6
 8007f92:	f000 fc57 	bl	8008844 <_sbrk_r>
 8007f96:	6020      	str	r0, [r4, #0]
 8007f98:	4629      	mov	r1, r5
 8007f9a:	4630      	mov	r0, r6
 8007f9c:	f000 fc52 	bl	8008844 <_sbrk_r>
 8007fa0:	1c43      	adds	r3, r0, #1
 8007fa2:	d124      	bne.n	8007fee <_malloc_r+0x92>
 8007fa4:	230c      	movs	r3, #12
 8007fa6:	6033      	str	r3, [r6, #0]
 8007fa8:	4630      	mov	r0, r6
 8007faa:	f000 fd1a 	bl	80089e2 <__malloc_unlock>
 8007fae:	e7e4      	b.n	8007f7a <_malloc_r+0x1e>
 8007fb0:	680b      	ldr	r3, [r1, #0]
 8007fb2:	1b5b      	subs	r3, r3, r5
 8007fb4:	d418      	bmi.n	8007fe8 <_malloc_r+0x8c>
 8007fb6:	2b0b      	cmp	r3, #11
 8007fb8:	d90f      	bls.n	8007fda <_malloc_r+0x7e>
 8007fba:	600b      	str	r3, [r1, #0]
 8007fbc:	50cd      	str	r5, [r1, r3]
 8007fbe:	18cc      	adds	r4, r1, r3
 8007fc0:	4630      	mov	r0, r6
 8007fc2:	f000 fd0e 	bl	80089e2 <__malloc_unlock>
 8007fc6:	f104 000b 	add.w	r0, r4, #11
 8007fca:	1d23      	adds	r3, r4, #4
 8007fcc:	f020 0007 	bic.w	r0, r0, #7
 8007fd0:	1ac3      	subs	r3, r0, r3
 8007fd2:	d0d3      	beq.n	8007f7c <_malloc_r+0x20>
 8007fd4:	425a      	negs	r2, r3
 8007fd6:	50e2      	str	r2, [r4, r3]
 8007fd8:	e7d0      	b.n	8007f7c <_malloc_r+0x20>
 8007fda:	428c      	cmp	r4, r1
 8007fdc:	684b      	ldr	r3, [r1, #4]
 8007fde:	bf16      	itet	ne
 8007fe0:	6063      	strne	r3, [r4, #4]
 8007fe2:	6013      	streq	r3, [r2, #0]
 8007fe4:	460c      	movne	r4, r1
 8007fe6:	e7eb      	b.n	8007fc0 <_malloc_r+0x64>
 8007fe8:	460c      	mov	r4, r1
 8007fea:	6849      	ldr	r1, [r1, #4]
 8007fec:	e7cc      	b.n	8007f88 <_malloc_r+0x2c>
 8007fee:	1cc4      	adds	r4, r0, #3
 8007ff0:	f024 0403 	bic.w	r4, r4, #3
 8007ff4:	42a0      	cmp	r0, r4
 8007ff6:	d005      	beq.n	8008004 <_malloc_r+0xa8>
 8007ff8:	1a21      	subs	r1, r4, r0
 8007ffa:	4630      	mov	r0, r6
 8007ffc:	f000 fc22 	bl	8008844 <_sbrk_r>
 8008000:	3001      	adds	r0, #1
 8008002:	d0cf      	beq.n	8007fa4 <_malloc_r+0x48>
 8008004:	6025      	str	r5, [r4, #0]
 8008006:	e7db      	b.n	8007fc0 <_malloc_r+0x64>
 8008008:	20001fe4 	.word	0x20001fe4
 800800c:	20001fe8 	.word	0x20001fe8

08008010 <__ssputs_r>:
 8008010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008014:	688e      	ldr	r6, [r1, #8]
 8008016:	429e      	cmp	r6, r3
 8008018:	4682      	mov	sl, r0
 800801a:	460c      	mov	r4, r1
 800801c:	4690      	mov	r8, r2
 800801e:	4699      	mov	r9, r3
 8008020:	d837      	bhi.n	8008092 <__ssputs_r+0x82>
 8008022:	898a      	ldrh	r2, [r1, #12]
 8008024:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008028:	d031      	beq.n	800808e <__ssputs_r+0x7e>
 800802a:	6825      	ldr	r5, [r4, #0]
 800802c:	6909      	ldr	r1, [r1, #16]
 800802e:	1a6f      	subs	r7, r5, r1
 8008030:	6965      	ldr	r5, [r4, #20]
 8008032:	2302      	movs	r3, #2
 8008034:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008038:	fb95 f5f3 	sdiv	r5, r5, r3
 800803c:	f109 0301 	add.w	r3, r9, #1
 8008040:	443b      	add	r3, r7
 8008042:	429d      	cmp	r5, r3
 8008044:	bf38      	it	cc
 8008046:	461d      	movcc	r5, r3
 8008048:	0553      	lsls	r3, r2, #21
 800804a:	d530      	bpl.n	80080ae <__ssputs_r+0x9e>
 800804c:	4629      	mov	r1, r5
 800804e:	f7ff ff85 	bl	8007f5c <_malloc_r>
 8008052:	4606      	mov	r6, r0
 8008054:	b950      	cbnz	r0, 800806c <__ssputs_r+0x5c>
 8008056:	230c      	movs	r3, #12
 8008058:	f8ca 3000 	str.w	r3, [sl]
 800805c:	89a3      	ldrh	r3, [r4, #12]
 800805e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008062:	81a3      	strh	r3, [r4, #12]
 8008064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800806c:	463a      	mov	r2, r7
 800806e:	6921      	ldr	r1, [r4, #16]
 8008070:	f000 fc92 	bl	8008998 <memcpy>
 8008074:	89a3      	ldrh	r3, [r4, #12]
 8008076:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800807a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800807e:	81a3      	strh	r3, [r4, #12]
 8008080:	6126      	str	r6, [r4, #16]
 8008082:	6165      	str	r5, [r4, #20]
 8008084:	443e      	add	r6, r7
 8008086:	1bed      	subs	r5, r5, r7
 8008088:	6026      	str	r6, [r4, #0]
 800808a:	60a5      	str	r5, [r4, #8]
 800808c:	464e      	mov	r6, r9
 800808e:	454e      	cmp	r6, r9
 8008090:	d900      	bls.n	8008094 <__ssputs_r+0x84>
 8008092:	464e      	mov	r6, r9
 8008094:	4632      	mov	r2, r6
 8008096:	4641      	mov	r1, r8
 8008098:	6820      	ldr	r0, [r4, #0]
 800809a:	f000 fc88 	bl	80089ae <memmove>
 800809e:	68a3      	ldr	r3, [r4, #8]
 80080a0:	1b9b      	subs	r3, r3, r6
 80080a2:	60a3      	str	r3, [r4, #8]
 80080a4:	6823      	ldr	r3, [r4, #0]
 80080a6:	441e      	add	r6, r3
 80080a8:	6026      	str	r6, [r4, #0]
 80080aa:	2000      	movs	r0, #0
 80080ac:	e7dc      	b.n	8008068 <__ssputs_r+0x58>
 80080ae:	462a      	mov	r2, r5
 80080b0:	f000 fc98 	bl	80089e4 <_realloc_r>
 80080b4:	4606      	mov	r6, r0
 80080b6:	2800      	cmp	r0, #0
 80080b8:	d1e2      	bne.n	8008080 <__ssputs_r+0x70>
 80080ba:	6921      	ldr	r1, [r4, #16]
 80080bc:	4650      	mov	r0, sl
 80080be:	f7ff feff 	bl	8007ec0 <_free_r>
 80080c2:	e7c8      	b.n	8008056 <__ssputs_r+0x46>

080080c4 <_svfiprintf_r>:
 80080c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080c8:	461d      	mov	r5, r3
 80080ca:	898b      	ldrh	r3, [r1, #12]
 80080cc:	061f      	lsls	r7, r3, #24
 80080ce:	b09d      	sub	sp, #116	; 0x74
 80080d0:	4680      	mov	r8, r0
 80080d2:	460c      	mov	r4, r1
 80080d4:	4616      	mov	r6, r2
 80080d6:	d50f      	bpl.n	80080f8 <_svfiprintf_r+0x34>
 80080d8:	690b      	ldr	r3, [r1, #16]
 80080da:	b96b      	cbnz	r3, 80080f8 <_svfiprintf_r+0x34>
 80080dc:	2140      	movs	r1, #64	; 0x40
 80080de:	f7ff ff3d 	bl	8007f5c <_malloc_r>
 80080e2:	6020      	str	r0, [r4, #0]
 80080e4:	6120      	str	r0, [r4, #16]
 80080e6:	b928      	cbnz	r0, 80080f4 <_svfiprintf_r+0x30>
 80080e8:	230c      	movs	r3, #12
 80080ea:	f8c8 3000 	str.w	r3, [r8]
 80080ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080f2:	e0c8      	b.n	8008286 <_svfiprintf_r+0x1c2>
 80080f4:	2340      	movs	r3, #64	; 0x40
 80080f6:	6163      	str	r3, [r4, #20]
 80080f8:	2300      	movs	r3, #0
 80080fa:	9309      	str	r3, [sp, #36]	; 0x24
 80080fc:	2320      	movs	r3, #32
 80080fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008102:	2330      	movs	r3, #48	; 0x30
 8008104:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008108:	9503      	str	r5, [sp, #12]
 800810a:	f04f 0b01 	mov.w	fp, #1
 800810e:	4637      	mov	r7, r6
 8008110:	463d      	mov	r5, r7
 8008112:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008116:	b10b      	cbz	r3, 800811c <_svfiprintf_r+0x58>
 8008118:	2b25      	cmp	r3, #37	; 0x25
 800811a:	d13e      	bne.n	800819a <_svfiprintf_r+0xd6>
 800811c:	ebb7 0a06 	subs.w	sl, r7, r6
 8008120:	d00b      	beq.n	800813a <_svfiprintf_r+0x76>
 8008122:	4653      	mov	r3, sl
 8008124:	4632      	mov	r2, r6
 8008126:	4621      	mov	r1, r4
 8008128:	4640      	mov	r0, r8
 800812a:	f7ff ff71 	bl	8008010 <__ssputs_r>
 800812e:	3001      	adds	r0, #1
 8008130:	f000 80a4 	beq.w	800827c <_svfiprintf_r+0x1b8>
 8008134:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008136:	4453      	add	r3, sl
 8008138:	9309      	str	r3, [sp, #36]	; 0x24
 800813a:	783b      	ldrb	r3, [r7, #0]
 800813c:	2b00      	cmp	r3, #0
 800813e:	f000 809d 	beq.w	800827c <_svfiprintf_r+0x1b8>
 8008142:	2300      	movs	r3, #0
 8008144:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008148:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800814c:	9304      	str	r3, [sp, #16]
 800814e:	9307      	str	r3, [sp, #28]
 8008150:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008154:	931a      	str	r3, [sp, #104]	; 0x68
 8008156:	462f      	mov	r7, r5
 8008158:	2205      	movs	r2, #5
 800815a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800815e:	4850      	ldr	r0, [pc, #320]	; (80082a0 <_svfiprintf_r+0x1dc>)
 8008160:	f7f8 f85e 	bl	8000220 <memchr>
 8008164:	9b04      	ldr	r3, [sp, #16]
 8008166:	b9d0      	cbnz	r0, 800819e <_svfiprintf_r+0xda>
 8008168:	06d9      	lsls	r1, r3, #27
 800816a:	bf44      	itt	mi
 800816c:	2220      	movmi	r2, #32
 800816e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008172:	071a      	lsls	r2, r3, #28
 8008174:	bf44      	itt	mi
 8008176:	222b      	movmi	r2, #43	; 0x2b
 8008178:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800817c:	782a      	ldrb	r2, [r5, #0]
 800817e:	2a2a      	cmp	r2, #42	; 0x2a
 8008180:	d015      	beq.n	80081ae <_svfiprintf_r+0xea>
 8008182:	9a07      	ldr	r2, [sp, #28]
 8008184:	462f      	mov	r7, r5
 8008186:	2000      	movs	r0, #0
 8008188:	250a      	movs	r5, #10
 800818a:	4639      	mov	r1, r7
 800818c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008190:	3b30      	subs	r3, #48	; 0x30
 8008192:	2b09      	cmp	r3, #9
 8008194:	d94d      	bls.n	8008232 <_svfiprintf_r+0x16e>
 8008196:	b1b8      	cbz	r0, 80081c8 <_svfiprintf_r+0x104>
 8008198:	e00f      	b.n	80081ba <_svfiprintf_r+0xf6>
 800819a:	462f      	mov	r7, r5
 800819c:	e7b8      	b.n	8008110 <_svfiprintf_r+0x4c>
 800819e:	4a40      	ldr	r2, [pc, #256]	; (80082a0 <_svfiprintf_r+0x1dc>)
 80081a0:	1a80      	subs	r0, r0, r2
 80081a2:	fa0b f000 	lsl.w	r0, fp, r0
 80081a6:	4318      	orrs	r0, r3
 80081a8:	9004      	str	r0, [sp, #16]
 80081aa:	463d      	mov	r5, r7
 80081ac:	e7d3      	b.n	8008156 <_svfiprintf_r+0x92>
 80081ae:	9a03      	ldr	r2, [sp, #12]
 80081b0:	1d11      	adds	r1, r2, #4
 80081b2:	6812      	ldr	r2, [r2, #0]
 80081b4:	9103      	str	r1, [sp, #12]
 80081b6:	2a00      	cmp	r2, #0
 80081b8:	db01      	blt.n	80081be <_svfiprintf_r+0xfa>
 80081ba:	9207      	str	r2, [sp, #28]
 80081bc:	e004      	b.n	80081c8 <_svfiprintf_r+0x104>
 80081be:	4252      	negs	r2, r2
 80081c0:	f043 0302 	orr.w	r3, r3, #2
 80081c4:	9207      	str	r2, [sp, #28]
 80081c6:	9304      	str	r3, [sp, #16]
 80081c8:	783b      	ldrb	r3, [r7, #0]
 80081ca:	2b2e      	cmp	r3, #46	; 0x2e
 80081cc:	d10c      	bne.n	80081e8 <_svfiprintf_r+0x124>
 80081ce:	787b      	ldrb	r3, [r7, #1]
 80081d0:	2b2a      	cmp	r3, #42	; 0x2a
 80081d2:	d133      	bne.n	800823c <_svfiprintf_r+0x178>
 80081d4:	9b03      	ldr	r3, [sp, #12]
 80081d6:	1d1a      	adds	r2, r3, #4
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	9203      	str	r2, [sp, #12]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	bfb8      	it	lt
 80081e0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80081e4:	3702      	adds	r7, #2
 80081e6:	9305      	str	r3, [sp, #20]
 80081e8:	4d2e      	ldr	r5, [pc, #184]	; (80082a4 <_svfiprintf_r+0x1e0>)
 80081ea:	7839      	ldrb	r1, [r7, #0]
 80081ec:	2203      	movs	r2, #3
 80081ee:	4628      	mov	r0, r5
 80081f0:	f7f8 f816 	bl	8000220 <memchr>
 80081f4:	b138      	cbz	r0, 8008206 <_svfiprintf_r+0x142>
 80081f6:	2340      	movs	r3, #64	; 0x40
 80081f8:	1b40      	subs	r0, r0, r5
 80081fa:	fa03 f000 	lsl.w	r0, r3, r0
 80081fe:	9b04      	ldr	r3, [sp, #16]
 8008200:	4303      	orrs	r3, r0
 8008202:	3701      	adds	r7, #1
 8008204:	9304      	str	r3, [sp, #16]
 8008206:	7839      	ldrb	r1, [r7, #0]
 8008208:	4827      	ldr	r0, [pc, #156]	; (80082a8 <_svfiprintf_r+0x1e4>)
 800820a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800820e:	2206      	movs	r2, #6
 8008210:	1c7e      	adds	r6, r7, #1
 8008212:	f7f8 f805 	bl	8000220 <memchr>
 8008216:	2800      	cmp	r0, #0
 8008218:	d038      	beq.n	800828c <_svfiprintf_r+0x1c8>
 800821a:	4b24      	ldr	r3, [pc, #144]	; (80082ac <_svfiprintf_r+0x1e8>)
 800821c:	bb13      	cbnz	r3, 8008264 <_svfiprintf_r+0x1a0>
 800821e:	9b03      	ldr	r3, [sp, #12]
 8008220:	3307      	adds	r3, #7
 8008222:	f023 0307 	bic.w	r3, r3, #7
 8008226:	3308      	adds	r3, #8
 8008228:	9303      	str	r3, [sp, #12]
 800822a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800822c:	444b      	add	r3, r9
 800822e:	9309      	str	r3, [sp, #36]	; 0x24
 8008230:	e76d      	b.n	800810e <_svfiprintf_r+0x4a>
 8008232:	fb05 3202 	mla	r2, r5, r2, r3
 8008236:	2001      	movs	r0, #1
 8008238:	460f      	mov	r7, r1
 800823a:	e7a6      	b.n	800818a <_svfiprintf_r+0xc6>
 800823c:	2300      	movs	r3, #0
 800823e:	3701      	adds	r7, #1
 8008240:	9305      	str	r3, [sp, #20]
 8008242:	4619      	mov	r1, r3
 8008244:	250a      	movs	r5, #10
 8008246:	4638      	mov	r0, r7
 8008248:	f810 2b01 	ldrb.w	r2, [r0], #1
 800824c:	3a30      	subs	r2, #48	; 0x30
 800824e:	2a09      	cmp	r2, #9
 8008250:	d903      	bls.n	800825a <_svfiprintf_r+0x196>
 8008252:	2b00      	cmp	r3, #0
 8008254:	d0c8      	beq.n	80081e8 <_svfiprintf_r+0x124>
 8008256:	9105      	str	r1, [sp, #20]
 8008258:	e7c6      	b.n	80081e8 <_svfiprintf_r+0x124>
 800825a:	fb05 2101 	mla	r1, r5, r1, r2
 800825e:	2301      	movs	r3, #1
 8008260:	4607      	mov	r7, r0
 8008262:	e7f0      	b.n	8008246 <_svfiprintf_r+0x182>
 8008264:	ab03      	add	r3, sp, #12
 8008266:	9300      	str	r3, [sp, #0]
 8008268:	4622      	mov	r2, r4
 800826a:	4b11      	ldr	r3, [pc, #68]	; (80082b0 <_svfiprintf_r+0x1ec>)
 800826c:	a904      	add	r1, sp, #16
 800826e:	4640      	mov	r0, r8
 8008270:	f3af 8000 	nop.w
 8008274:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008278:	4681      	mov	r9, r0
 800827a:	d1d6      	bne.n	800822a <_svfiprintf_r+0x166>
 800827c:	89a3      	ldrh	r3, [r4, #12]
 800827e:	065b      	lsls	r3, r3, #25
 8008280:	f53f af35 	bmi.w	80080ee <_svfiprintf_r+0x2a>
 8008284:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008286:	b01d      	add	sp, #116	; 0x74
 8008288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800828c:	ab03      	add	r3, sp, #12
 800828e:	9300      	str	r3, [sp, #0]
 8008290:	4622      	mov	r2, r4
 8008292:	4b07      	ldr	r3, [pc, #28]	; (80082b0 <_svfiprintf_r+0x1ec>)
 8008294:	a904      	add	r1, sp, #16
 8008296:	4640      	mov	r0, r8
 8008298:	f000 f9c2 	bl	8008620 <_printf_i>
 800829c:	e7ea      	b.n	8008274 <_svfiprintf_r+0x1b0>
 800829e:	bf00      	nop
 80082a0:	08008de4 	.word	0x08008de4
 80082a4:	08008dea 	.word	0x08008dea
 80082a8:	08008dee 	.word	0x08008dee
 80082ac:	00000000 	.word	0x00000000
 80082b0:	08008011 	.word	0x08008011

080082b4 <__sfputc_r>:
 80082b4:	6893      	ldr	r3, [r2, #8]
 80082b6:	3b01      	subs	r3, #1
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	b410      	push	{r4}
 80082bc:	6093      	str	r3, [r2, #8]
 80082be:	da08      	bge.n	80082d2 <__sfputc_r+0x1e>
 80082c0:	6994      	ldr	r4, [r2, #24]
 80082c2:	42a3      	cmp	r3, r4
 80082c4:	db01      	blt.n	80082ca <__sfputc_r+0x16>
 80082c6:	290a      	cmp	r1, #10
 80082c8:	d103      	bne.n	80082d2 <__sfputc_r+0x1e>
 80082ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082ce:	f7ff bb59 	b.w	8007984 <__swbuf_r>
 80082d2:	6813      	ldr	r3, [r2, #0]
 80082d4:	1c58      	adds	r0, r3, #1
 80082d6:	6010      	str	r0, [r2, #0]
 80082d8:	7019      	strb	r1, [r3, #0]
 80082da:	4608      	mov	r0, r1
 80082dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082e0:	4770      	bx	lr

080082e2 <__sfputs_r>:
 80082e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082e4:	4606      	mov	r6, r0
 80082e6:	460f      	mov	r7, r1
 80082e8:	4614      	mov	r4, r2
 80082ea:	18d5      	adds	r5, r2, r3
 80082ec:	42ac      	cmp	r4, r5
 80082ee:	d101      	bne.n	80082f4 <__sfputs_r+0x12>
 80082f0:	2000      	movs	r0, #0
 80082f2:	e007      	b.n	8008304 <__sfputs_r+0x22>
 80082f4:	463a      	mov	r2, r7
 80082f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082fa:	4630      	mov	r0, r6
 80082fc:	f7ff ffda 	bl	80082b4 <__sfputc_r>
 8008300:	1c43      	adds	r3, r0, #1
 8008302:	d1f3      	bne.n	80082ec <__sfputs_r+0xa>
 8008304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008308 <_vfiprintf_r>:
 8008308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800830c:	460c      	mov	r4, r1
 800830e:	b09d      	sub	sp, #116	; 0x74
 8008310:	4617      	mov	r7, r2
 8008312:	461d      	mov	r5, r3
 8008314:	4606      	mov	r6, r0
 8008316:	b118      	cbz	r0, 8008320 <_vfiprintf_r+0x18>
 8008318:	6983      	ldr	r3, [r0, #24]
 800831a:	b90b      	cbnz	r3, 8008320 <_vfiprintf_r+0x18>
 800831c:	f7ff fce2 	bl	8007ce4 <__sinit>
 8008320:	4b7c      	ldr	r3, [pc, #496]	; (8008514 <_vfiprintf_r+0x20c>)
 8008322:	429c      	cmp	r4, r3
 8008324:	d158      	bne.n	80083d8 <_vfiprintf_r+0xd0>
 8008326:	6874      	ldr	r4, [r6, #4]
 8008328:	89a3      	ldrh	r3, [r4, #12]
 800832a:	0718      	lsls	r0, r3, #28
 800832c:	d55e      	bpl.n	80083ec <_vfiprintf_r+0xe4>
 800832e:	6923      	ldr	r3, [r4, #16]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d05b      	beq.n	80083ec <_vfiprintf_r+0xe4>
 8008334:	2300      	movs	r3, #0
 8008336:	9309      	str	r3, [sp, #36]	; 0x24
 8008338:	2320      	movs	r3, #32
 800833a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800833e:	2330      	movs	r3, #48	; 0x30
 8008340:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008344:	9503      	str	r5, [sp, #12]
 8008346:	f04f 0b01 	mov.w	fp, #1
 800834a:	46b8      	mov	r8, r7
 800834c:	4645      	mov	r5, r8
 800834e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008352:	b10b      	cbz	r3, 8008358 <_vfiprintf_r+0x50>
 8008354:	2b25      	cmp	r3, #37	; 0x25
 8008356:	d154      	bne.n	8008402 <_vfiprintf_r+0xfa>
 8008358:	ebb8 0a07 	subs.w	sl, r8, r7
 800835c:	d00b      	beq.n	8008376 <_vfiprintf_r+0x6e>
 800835e:	4653      	mov	r3, sl
 8008360:	463a      	mov	r2, r7
 8008362:	4621      	mov	r1, r4
 8008364:	4630      	mov	r0, r6
 8008366:	f7ff ffbc 	bl	80082e2 <__sfputs_r>
 800836a:	3001      	adds	r0, #1
 800836c:	f000 80c2 	beq.w	80084f4 <_vfiprintf_r+0x1ec>
 8008370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008372:	4453      	add	r3, sl
 8008374:	9309      	str	r3, [sp, #36]	; 0x24
 8008376:	f898 3000 	ldrb.w	r3, [r8]
 800837a:	2b00      	cmp	r3, #0
 800837c:	f000 80ba 	beq.w	80084f4 <_vfiprintf_r+0x1ec>
 8008380:	2300      	movs	r3, #0
 8008382:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008386:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800838a:	9304      	str	r3, [sp, #16]
 800838c:	9307      	str	r3, [sp, #28]
 800838e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008392:	931a      	str	r3, [sp, #104]	; 0x68
 8008394:	46a8      	mov	r8, r5
 8008396:	2205      	movs	r2, #5
 8008398:	f818 1b01 	ldrb.w	r1, [r8], #1
 800839c:	485e      	ldr	r0, [pc, #376]	; (8008518 <_vfiprintf_r+0x210>)
 800839e:	f7f7 ff3f 	bl	8000220 <memchr>
 80083a2:	9b04      	ldr	r3, [sp, #16]
 80083a4:	bb78      	cbnz	r0, 8008406 <_vfiprintf_r+0xfe>
 80083a6:	06d9      	lsls	r1, r3, #27
 80083a8:	bf44      	itt	mi
 80083aa:	2220      	movmi	r2, #32
 80083ac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80083b0:	071a      	lsls	r2, r3, #28
 80083b2:	bf44      	itt	mi
 80083b4:	222b      	movmi	r2, #43	; 0x2b
 80083b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80083ba:	782a      	ldrb	r2, [r5, #0]
 80083bc:	2a2a      	cmp	r2, #42	; 0x2a
 80083be:	d02a      	beq.n	8008416 <_vfiprintf_r+0x10e>
 80083c0:	9a07      	ldr	r2, [sp, #28]
 80083c2:	46a8      	mov	r8, r5
 80083c4:	2000      	movs	r0, #0
 80083c6:	250a      	movs	r5, #10
 80083c8:	4641      	mov	r1, r8
 80083ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083ce:	3b30      	subs	r3, #48	; 0x30
 80083d0:	2b09      	cmp	r3, #9
 80083d2:	d969      	bls.n	80084a8 <_vfiprintf_r+0x1a0>
 80083d4:	b360      	cbz	r0, 8008430 <_vfiprintf_r+0x128>
 80083d6:	e024      	b.n	8008422 <_vfiprintf_r+0x11a>
 80083d8:	4b50      	ldr	r3, [pc, #320]	; (800851c <_vfiprintf_r+0x214>)
 80083da:	429c      	cmp	r4, r3
 80083dc:	d101      	bne.n	80083e2 <_vfiprintf_r+0xda>
 80083de:	68b4      	ldr	r4, [r6, #8]
 80083e0:	e7a2      	b.n	8008328 <_vfiprintf_r+0x20>
 80083e2:	4b4f      	ldr	r3, [pc, #316]	; (8008520 <_vfiprintf_r+0x218>)
 80083e4:	429c      	cmp	r4, r3
 80083e6:	bf08      	it	eq
 80083e8:	68f4      	ldreq	r4, [r6, #12]
 80083ea:	e79d      	b.n	8008328 <_vfiprintf_r+0x20>
 80083ec:	4621      	mov	r1, r4
 80083ee:	4630      	mov	r0, r6
 80083f0:	f7ff fb1a 	bl	8007a28 <__swsetup_r>
 80083f4:	2800      	cmp	r0, #0
 80083f6:	d09d      	beq.n	8008334 <_vfiprintf_r+0x2c>
 80083f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083fc:	b01d      	add	sp, #116	; 0x74
 80083fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008402:	46a8      	mov	r8, r5
 8008404:	e7a2      	b.n	800834c <_vfiprintf_r+0x44>
 8008406:	4a44      	ldr	r2, [pc, #272]	; (8008518 <_vfiprintf_r+0x210>)
 8008408:	1a80      	subs	r0, r0, r2
 800840a:	fa0b f000 	lsl.w	r0, fp, r0
 800840e:	4318      	orrs	r0, r3
 8008410:	9004      	str	r0, [sp, #16]
 8008412:	4645      	mov	r5, r8
 8008414:	e7be      	b.n	8008394 <_vfiprintf_r+0x8c>
 8008416:	9a03      	ldr	r2, [sp, #12]
 8008418:	1d11      	adds	r1, r2, #4
 800841a:	6812      	ldr	r2, [r2, #0]
 800841c:	9103      	str	r1, [sp, #12]
 800841e:	2a00      	cmp	r2, #0
 8008420:	db01      	blt.n	8008426 <_vfiprintf_r+0x11e>
 8008422:	9207      	str	r2, [sp, #28]
 8008424:	e004      	b.n	8008430 <_vfiprintf_r+0x128>
 8008426:	4252      	negs	r2, r2
 8008428:	f043 0302 	orr.w	r3, r3, #2
 800842c:	9207      	str	r2, [sp, #28]
 800842e:	9304      	str	r3, [sp, #16]
 8008430:	f898 3000 	ldrb.w	r3, [r8]
 8008434:	2b2e      	cmp	r3, #46	; 0x2e
 8008436:	d10e      	bne.n	8008456 <_vfiprintf_r+0x14e>
 8008438:	f898 3001 	ldrb.w	r3, [r8, #1]
 800843c:	2b2a      	cmp	r3, #42	; 0x2a
 800843e:	d138      	bne.n	80084b2 <_vfiprintf_r+0x1aa>
 8008440:	9b03      	ldr	r3, [sp, #12]
 8008442:	1d1a      	adds	r2, r3, #4
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	9203      	str	r2, [sp, #12]
 8008448:	2b00      	cmp	r3, #0
 800844a:	bfb8      	it	lt
 800844c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008450:	f108 0802 	add.w	r8, r8, #2
 8008454:	9305      	str	r3, [sp, #20]
 8008456:	4d33      	ldr	r5, [pc, #204]	; (8008524 <_vfiprintf_r+0x21c>)
 8008458:	f898 1000 	ldrb.w	r1, [r8]
 800845c:	2203      	movs	r2, #3
 800845e:	4628      	mov	r0, r5
 8008460:	f7f7 fede 	bl	8000220 <memchr>
 8008464:	b140      	cbz	r0, 8008478 <_vfiprintf_r+0x170>
 8008466:	2340      	movs	r3, #64	; 0x40
 8008468:	1b40      	subs	r0, r0, r5
 800846a:	fa03 f000 	lsl.w	r0, r3, r0
 800846e:	9b04      	ldr	r3, [sp, #16]
 8008470:	4303      	orrs	r3, r0
 8008472:	f108 0801 	add.w	r8, r8, #1
 8008476:	9304      	str	r3, [sp, #16]
 8008478:	f898 1000 	ldrb.w	r1, [r8]
 800847c:	482a      	ldr	r0, [pc, #168]	; (8008528 <_vfiprintf_r+0x220>)
 800847e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008482:	2206      	movs	r2, #6
 8008484:	f108 0701 	add.w	r7, r8, #1
 8008488:	f7f7 feca 	bl	8000220 <memchr>
 800848c:	2800      	cmp	r0, #0
 800848e:	d037      	beq.n	8008500 <_vfiprintf_r+0x1f8>
 8008490:	4b26      	ldr	r3, [pc, #152]	; (800852c <_vfiprintf_r+0x224>)
 8008492:	bb1b      	cbnz	r3, 80084dc <_vfiprintf_r+0x1d4>
 8008494:	9b03      	ldr	r3, [sp, #12]
 8008496:	3307      	adds	r3, #7
 8008498:	f023 0307 	bic.w	r3, r3, #7
 800849c:	3308      	adds	r3, #8
 800849e:	9303      	str	r3, [sp, #12]
 80084a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084a2:	444b      	add	r3, r9
 80084a4:	9309      	str	r3, [sp, #36]	; 0x24
 80084a6:	e750      	b.n	800834a <_vfiprintf_r+0x42>
 80084a8:	fb05 3202 	mla	r2, r5, r2, r3
 80084ac:	2001      	movs	r0, #1
 80084ae:	4688      	mov	r8, r1
 80084b0:	e78a      	b.n	80083c8 <_vfiprintf_r+0xc0>
 80084b2:	2300      	movs	r3, #0
 80084b4:	f108 0801 	add.w	r8, r8, #1
 80084b8:	9305      	str	r3, [sp, #20]
 80084ba:	4619      	mov	r1, r3
 80084bc:	250a      	movs	r5, #10
 80084be:	4640      	mov	r0, r8
 80084c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084c4:	3a30      	subs	r2, #48	; 0x30
 80084c6:	2a09      	cmp	r2, #9
 80084c8:	d903      	bls.n	80084d2 <_vfiprintf_r+0x1ca>
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d0c3      	beq.n	8008456 <_vfiprintf_r+0x14e>
 80084ce:	9105      	str	r1, [sp, #20]
 80084d0:	e7c1      	b.n	8008456 <_vfiprintf_r+0x14e>
 80084d2:	fb05 2101 	mla	r1, r5, r1, r2
 80084d6:	2301      	movs	r3, #1
 80084d8:	4680      	mov	r8, r0
 80084da:	e7f0      	b.n	80084be <_vfiprintf_r+0x1b6>
 80084dc:	ab03      	add	r3, sp, #12
 80084de:	9300      	str	r3, [sp, #0]
 80084e0:	4622      	mov	r2, r4
 80084e2:	4b13      	ldr	r3, [pc, #76]	; (8008530 <_vfiprintf_r+0x228>)
 80084e4:	a904      	add	r1, sp, #16
 80084e6:	4630      	mov	r0, r6
 80084e8:	f3af 8000 	nop.w
 80084ec:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80084f0:	4681      	mov	r9, r0
 80084f2:	d1d5      	bne.n	80084a0 <_vfiprintf_r+0x198>
 80084f4:	89a3      	ldrh	r3, [r4, #12]
 80084f6:	065b      	lsls	r3, r3, #25
 80084f8:	f53f af7e 	bmi.w	80083f8 <_vfiprintf_r+0xf0>
 80084fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084fe:	e77d      	b.n	80083fc <_vfiprintf_r+0xf4>
 8008500:	ab03      	add	r3, sp, #12
 8008502:	9300      	str	r3, [sp, #0]
 8008504:	4622      	mov	r2, r4
 8008506:	4b0a      	ldr	r3, [pc, #40]	; (8008530 <_vfiprintf_r+0x228>)
 8008508:	a904      	add	r1, sp, #16
 800850a:	4630      	mov	r0, r6
 800850c:	f000 f888 	bl	8008620 <_printf_i>
 8008510:	e7ec      	b.n	80084ec <_vfiprintf_r+0x1e4>
 8008512:	bf00      	nop
 8008514:	08008da4 	.word	0x08008da4
 8008518:	08008de4 	.word	0x08008de4
 800851c:	08008dc4 	.word	0x08008dc4
 8008520:	08008d84 	.word	0x08008d84
 8008524:	08008dea 	.word	0x08008dea
 8008528:	08008dee 	.word	0x08008dee
 800852c:	00000000 	.word	0x00000000
 8008530:	080082e3 	.word	0x080082e3

08008534 <_printf_common>:
 8008534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008538:	4691      	mov	r9, r2
 800853a:	461f      	mov	r7, r3
 800853c:	688a      	ldr	r2, [r1, #8]
 800853e:	690b      	ldr	r3, [r1, #16]
 8008540:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008544:	4293      	cmp	r3, r2
 8008546:	bfb8      	it	lt
 8008548:	4613      	movlt	r3, r2
 800854a:	f8c9 3000 	str.w	r3, [r9]
 800854e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008552:	4606      	mov	r6, r0
 8008554:	460c      	mov	r4, r1
 8008556:	b112      	cbz	r2, 800855e <_printf_common+0x2a>
 8008558:	3301      	adds	r3, #1
 800855a:	f8c9 3000 	str.w	r3, [r9]
 800855e:	6823      	ldr	r3, [r4, #0]
 8008560:	0699      	lsls	r1, r3, #26
 8008562:	bf42      	ittt	mi
 8008564:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008568:	3302      	addmi	r3, #2
 800856a:	f8c9 3000 	strmi.w	r3, [r9]
 800856e:	6825      	ldr	r5, [r4, #0]
 8008570:	f015 0506 	ands.w	r5, r5, #6
 8008574:	d107      	bne.n	8008586 <_printf_common+0x52>
 8008576:	f104 0a19 	add.w	sl, r4, #25
 800857a:	68e3      	ldr	r3, [r4, #12]
 800857c:	f8d9 2000 	ldr.w	r2, [r9]
 8008580:	1a9b      	subs	r3, r3, r2
 8008582:	42ab      	cmp	r3, r5
 8008584:	dc28      	bgt.n	80085d8 <_printf_common+0xa4>
 8008586:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800858a:	6822      	ldr	r2, [r4, #0]
 800858c:	3300      	adds	r3, #0
 800858e:	bf18      	it	ne
 8008590:	2301      	movne	r3, #1
 8008592:	0692      	lsls	r2, r2, #26
 8008594:	d42d      	bmi.n	80085f2 <_printf_common+0xbe>
 8008596:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800859a:	4639      	mov	r1, r7
 800859c:	4630      	mov	r0, r6
 800859e:	47c0      	blx	r8
 80085a0:	3001      	adds	r0, #1
 80085a2:	d020      	beq.n	80085e6 <_printf_common+0xb2>
 80085a4:	6823      	ldr	r3, [r4, #0]
 80085a6:	68e5      	ldr	r5, [r4, #12]
 80085a8:	f8d9 2000 	ldr.w	r2, [r9]
 80085ac:	f003 0306 	and.w	r3, r3, #6
 80085b0:	2b04      	cmp	r3, #4
 80085b2:	bf08      	it	eq
 80085b4:	1aad      	subeq	r5, r5, r2
 80085b6:	68a3      	ldr	r3, [r4, #8]
 80085b8:	6922      	ldr	r2, [r4, #16]
 80085ba:	bf0c      	ite	eq
 80085bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085c0:	2500      	movne	r5, #0
 80085c2:	4293      	cmp	r3, r2
 80085c4:	bfc4      	itt	gt
 80085c6:	1a9b      	subgt	r3, r3, r2
 80085c8:	18ed      	addgt	r5, r5, r3
 80085ca:	f04f 0900 	mov.w	r9, #0
 80085ce:	341a      	adds	r4, #26
 80085d0:	454d      	cmp	r5, r9
 80085d2:	d11a      	bne.n	800860a <_printf_common+0xd6>
 80085d4:	2000      	movs	r0, #0
 80085d6:	e008      	b.n	80085ea <_printf_common+0xb6>
 80085d8:	2301      	movs	r3, #1
 80085da:	4652      	mov	r2, sl
 80085dc:	4639      	mov	r1, r7
 80085de:	4630      	mov	r0, r6
 80085e0:	47c0      	blx	r8
 80085e2:	3001      	adds	r0, #1
 80085e4:	d103      	bne.n	80085ee <_printf_common+0xba>
 80085e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085ee:	3501      	adds	r5, #1
 80085f0:	e7c3      	b.n	800857a <_printf_common+0x46>
 80085f2:	18e1      	adds	r1, r4, r3
 80085f4:	1c5a      	adds	r2, r3, #1
 80085f6:	2030      	movs	r0, #48	; 0x30
 80085f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80085fc:	4422      	add	r2, r4
 80085fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008602:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008606:	3302      	adds	r3, #2
 8008608:	e7c5      	b.n	8008596 <_printf_common+0x62>
 800860a:	2301      	movs	r3, #1
 800860c:	4622      	mov	r2, r4
 800860e:	4639      	mov	r1, r7
 8008610:	4630      	mov	r0, r6
 8008612:	47c0      	blx	r8
 8008614:	3001      	adds	r0, #1
 8008616:	d0e6      	beq.n	80085e6 <_printf_common+0xb2>
 8008618:	f109 0901 	add.w	r9, r9, #1
 800861c:	e7d8      	b.n	80085d0 <_printf_common+0x9c>
	...

08008620 <_printf_i>:
 8008620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008624:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008628:	460c      	mov	r4, r1
 800862a:	7e09      	ldrb	r1, [r1, #24]
 800862c:	b085      	sub	sp, #20
 800862e:	296e      	cmp	r1, #110	; 0x6e
 8008630:	4617      	mov	r7, r2
 8008632:	4606      	mov	r6, r0
 8008634:	4698      	mov	r8, r3
 8008636:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008638:	f000 80b3 	beq.w	80087a2 <_printf_i+0x182>
 800863c:	d822      	bhi.n	8008684 <_printf_i+0x64>
 800863e:	2963      	cmp	r1, #99	; 0x63
 8008640:	d036      	beq.n	80086b0 <_printf_i+0x90>
 8008642:	d80a      	bhi.n	800865a <_printf_i+0x3a>
 8008644:	2900      	cmp	r1, #0
 8008646:	f000 80b9 	beq.w	80087bc <_printf_i+0x19c>
 800864a:	2958      	cmp	r1, #88	; 0x58
 800864c:	f000 8083 	beq.w	8008756 <_printf_i+0x136>
 8008650:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008654:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008658:	e032      	b.n	80086c0 <_printf_i+0xa0>
 800865a:	2964      	cmp	r1, #100	; 0x64
 800865c:	d001      	beq.n	8008662 <_printf_i+0x42>
 800865e:	2969      	cmp	r1, #105	; 0x69
 8008660:	d1f6      	bne.n	8008650 <_printf_i+0x30>
 8008662:	6820      	ldr	r0, [r4, #0]
 8008664:	6813      	ldr	r3, [r2, #0]
 8008666:	0605      	lsls	r5, r0, #24
 8008668:	f103 0104 	add.w	r1, r3, #4
 800866c:	d52a      	bpl.n	80086c4 <_printf_i+0xa4>
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	6011      	str	r1, [r2, #0]
 8008672:	2b00      	cmp	r3, #0
 8008674:	da03      	bge.n	800867e <_printf_i+0x5e>
 8008676:	222d      	movs	r2, #45	; 0x2d
 8008678:	425b      	negs	r3, r3
 800867a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800867e:	486f      	ldr	r0, [pc, #444]	; (800883c <_printf_i+0x21c>)
 8008680:	220a      	movs	r2, #10
 8008682:	e039      	b.n	80086f8 <_printf_i+0xd8>
 8008684:	2973      	cmp	r1, #115	; 0x73
 8008686:	f000 809d 	beq.w	80087c4 <_printf_i+0x1a4>
 800868a:	d808      	bhi.n	800869e <_printf_i+0x7e>
 800868c:	296f      	cmp	r1, #111	; 0x6f
 800868e:	d020      	beq.n	80086d2 <_printf_i+0xb2>
 8008690:	2970      	cmp	r1, #112	; 0x70
 8008692:	d1dd      	bne.n	8008650 <_printf_i+0x30>
 8008694:	6823      	ldr	r3, [r4, #0]
 8008696:	f043 0320 	orr.w	r3, r3, #32
 800869a:	6023      	str	r3, [r4, #0]
 800869c:	e003      	b.n	80086a6 <_printf_i+0x86>
 800869e:	2975      	cmp	r1, #117	; 0x75
 80086a0:	d017      	beq.n	80086d2 <_printf_i+0xb2>
 80086a2:	2978      	cmp	r1, #120	; 0x78
 80086a4:	d1d4      	bne.n	8008650 <_printf_i+0x30>
 80086a6:	2378      	movs	r3, #120	; 0x78
 80086a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80086ac:	4864      	ldr	r0, [pc, #400]	; (8008840 <_printf_i+0x220>)
 80086ae:	e055      	b.n	800875c <_printf_i+0x13c>
 80086b0:	6813      	ldr	r3, [r2, #0]
 80086b2:	1d19      	adds	r1, r3, #4
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	6011      	str	r1, [r2, #0]
 80086b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086c0:	2301      	movs	r3, #1
 80086c2:	e08c      	b.n	80087de <_printf_i+0x1be>
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	6011      	str	r1, [r2, #0]
 80086c8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80086cc:	bf18      	it	ne
 80086ce:	b21b      	sxthne	r3, r3
 80086d0:	e7cf      	b.n	8008672 <_printf_i+0x52>
 80086d2:	6813      	ldr	r3, [r2, #0]
 80086d4:	6825      	ldr	r5, [r4, #0]
 80086d6:	1d18      	adds	r0, r3, #4
 80086d8:	6010      	str	r0, [r2, #0]
 80086da:	0628      	lsls	r0, r5, #24
 80086dc:	d501      	bpl.n	80086e2 <_printf_i+0xc2>
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	e002      	b.n	80086e8 <_printf_i+0xc8>
 80086e2:	0668      	lsls	r0, r5, #25
 80086e4:	d5fb      	bpl.n	80086de <_printf_i+0xbe>
 80086e6:	881b      	ldrh	r3, [r3, #0]
 80086e8:	4854      	ldr	r0, [pc, #336]	; (800883c <_printf_i+0x21c>)
 80086ea:	296f      	cmp	r1, #111	; 0x6f
 80086ec:	bf14      	ite	ne
 80086ee:	220a      	movne	r2, #10
 80086f0:	2208      	moveq	r2, #8
 80086f2:	2100      	movs	r1, #0
 80086f4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80086f8:	6865      	ldr	r5, [r4, #4]
 80086fa:	60a5      	str	r5, [r4, #8]
 80086fc:	2d00      	cmp	r5, #0
 80086fe:	f2c0 8095 	blt.w	800882c <_printf_i+0x20c>
 8008702:	6821      	ldr	r1, [r4, #0]
 8008704:	f021 0104 	bic.w	r1, r1, #4
 8008708:	6021      	str	r1, [r4, #0]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d13d      	bne.n	800878a <_printf_i+0x16a>
 800870e:	2d00      	cmp	r5, #0
 8008710:	f040 808e 	bne.w	8008830 <_printf_i+0x210>
 8008714:	4665      	mov	r5, ip
 8008716:	2a08      	cmp	r2, #8
 8008718:	d10b      	bne.n	8008732 <_printf_i+0x112>
 800871a:	6823      	ldr	r3, [r4, #0]
 800871c:	07db      	lsls	r3, r3, #31
 800871e:	d508      	bpl.n	8008732 <_printf_i+0x112>
 8008720:	6923      	ldr	r3, [r4, #16]
 8008722:	6862      	ldr	r2, [r4, #4]
 8008724:	429a      	cmp	r2, r3
 8008726:	bfde      	ittt	le
 8008728:	2330      	movle	r3, #48	; 0x30
 800872a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800872e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008732:	ebac 0305 	sub.w	r3, ip, r5
 8008736:	6123      	str	r3, [r4, #16]
 8008738:	f8cd 8000 	str.w	r8, [sp]
 800873c:	463b      	mov	r3, r7
 800873e:	aa03      	add	r2, sp, #12
 8008740:	4621      	mov	r1, r4
 8008742:	4630      	mov	r0, r6
 8008744:	f7ff fef6 	bl	8008534 <_printf_common>
 8008748:	3001      	adds	r0, #1
 800874a:	d14d      	bne.n	80087e8 <_printf_i+0x1c8>
 800874c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008750:	b005      	add	sp, #20
 8008752:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008756:	4839      	ldr	r0, [pc, #228]	; (800883c <_printf_i+0x21c>)
 8008758:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800875c:	6813      	ldr	r3, [r2, #0]
 800875e:	6821      	ldr	r1, [r4, #0]
 8008760:	1d1d      	adds	r5, r3, #4
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	6015      	str	r5, [r2, #0]
 8008766:	060a      	lsls	r2, r1, #24
 8008768:	d50b      	bpl.n	8008782 <_printf_i+0x162>
 800876a:	07ca      	lsls	r2, r1, #31
 800876c:	bf44      	itt	mi
 800876e:	f041 0120 	orrmi.w	r1, r1, #32
 8008772:	6021      	strmi	r1, [r4, #0]
 8008774:	b91b      	cbnz	r3, 800877e <_printf_i+0x15e>
 8008776:	6822      	ldr	r2, [r4, #0]
 8008778:	f022 0220 	bic.w	r2, r2, #32
 800877c:	6022      	str	r2, [r4, #0]
 800877e:	2210      	movs	r2, #16
 8008780:	e7b7      	b.n	80086f2 <_printf_i+0xd2>
 8008782:	064d      	lsls	r5, r1, #25
 8008784:	bf48      	it	mi
 8008786:	b29b      	uxthmi	r3, r3
 8008788:	e7ef      	b.n	800876a <_printf_i+0x14a>
 800878a:	4665      	mov	r5, ip
 800878c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008790:	fb02 3311 	mls	r3, r2, r1, r3
 8008794:	5cc3      	ldrb	r3, [r0, r3]
 8008796:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800879a:	460b      	mov	r3, r1
 800879c:	2900      	cmp	r1, #0
 800879e:	d1f5      	bne.n	800878c <_printf_i+0x16c>
 80087a0:	e7b9      	b.n	8008716 <_printf_i+0xf6>
 80087a2:	6813      	ldr	r3, [r2, #0]
 80087a4:	6825      	ldr	r5, [r4, #0]
 80087a6:	6961      	ldr	r1, [r4, #20]
 80087a8:	1d18      	adds	r0, r3, #4
 80087aa:	6010      	str	r0, [r2, #0]
 80087ac:	0628      	lsls	r0, r5, #24
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	d501      	bpl.n	80087b6 <_printf_i+0x196>
 80087b2:	6019      	str	r1, [r3, #0]
 80087b4:	e002      	b.n	80087bc <_printf_i+0x19c>
 80087b6:	066a      	lsls	r2, r5, #25
 80087b8:	d5fb      	bpl.n	80087b2 <_printf_i+0x192>
 80087ba:	8019      	strh	r1, [r3, #0]
 80087bc:	2300      	movs	r3, #0
 80087be:	6123      	str	r3, [r4, #16]
 80087c0:	4665      	mov	r5, ip
 80087c2:	e7b9      	b.n	8008738 <_printf_i+0x118>
 80087c4:	6813      	ldr	r3, [r2, #0]
 80087c6:	1d19      	adds	r1, r3, #4
 80087c8:	6011      	str	r1, [r2, #0]
 80087ca:	681d      	ldr	r5, [r3, #0]
 80087cc:	6862      	ldr	r2, [r4, #4]
 80087ce:	2100      	movs	r1, #0
 80087d0:	4628      	mov	r0, r5
 80087d2:	f7f7 fd25 	bl	8000220 <memchr>
 80087d6:	b108      	cbz	r0, 80087dc <_printf_i+0x1bc>
 80087d8:	1b40      	subs	r0, r0, r5
 80087da:	6060      	str	r0, [r4, #4]
 80087dc:	6863      	ldr	r3, [r4, #4]
 80087de:	6123      	str	r3, [r4, #16]
 80087e0:	2300      	movs	r3, #0
 80087e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087e6:	e7a7      	b.n	8008738 <_printf_i+0x118>
 80087e8:	6923      	ldr	r3, [r4, #16]
 80087ea:	462a      	mov	r2, r5
 80087ec:	4639      	mov	r1, r7
 80087ee:	4630      	mov	r0, r6
 80087f0:	47c0      	blx	r8
 80087f2:	3001      	adds	r0, #1
 80087f4:	d0aa      	beq.n	800874c <_printf_i+0x12c>
 80087f6:	6823      	ldr	r3, [r4, #0]
 80087f8:	079b      	lsls	r3, r3, #30
 80087fa:	d413      	bmi.n	8008824 <_printf_i+0x204>
 80087fc:	68e0      	ldr	r0, [r4, #12]
 80087fe:	9b03      	ldr	r3, [sp, #12]
 8008800:	4298      	cmp	r0, r3
 8008802:	bfb8      	it	lt
 8008804:	4618      	movlt	r0, r3
 8008806:	e7a3      	b.n	8008750 <_printf_i+0x130>
 8008808:	2301      	movs	r3, #1
 800880a:	464a      	mov	r2, r9
 800880c:	4639      	mov	r1, r7
 800880e:	4630      	mov	r0, r6
 8008810:	47c0      	blx	r8
 8008812:	3001      	adds	r0, #1
 8008814:	d09a      	beq.n	800874c <_printf_i+0x12c>
 8008816:	3501      	adds	r5, #1
 8008818:	68e3      	ldr	r3, [r4, #12]
 800881a:	9a03      	ldr	r2, [sp, #12]
 800881c:	1a9b      	subs	r3, r3, r2
 800881e:	42ab      	cmp	r3, r5
 8008820:	dcf2      	bgt.n	8008808 <_printf_i+0x1e8>
 8008822:	e7eb      	b.n	80087fc <_printf_i+0x1dc>
 8008824:	2500      	movs	r5, #0
 8008826:	f104 0919 	add.w	r9, r4, #25
 800882a:	e7f5      	b.n	8008818 <_printf_i+0x1f8>
 800882c:	2b00      	cmp	r3, #0
 800882e:	d1ac      	bne.n	800878a <_printf_i+0x16a>
 8008830:	7803      	ldrb	r3, [r0, #0]
 8008832:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008836:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800883a:	e76c      	b.n	8008716 <_printf_i+0xf6>
 800883c:	08008df5 	.word	0x08008df5
 8008840:	08008e06 	.word	0x08008e06

08008844 <_sbrk_r>:
 8008844:	b538      	push	{r3, r4, r5, lr}
 8008846:	4c06      	ldr	r4, [pc, #24]	; (8008860 <_sbrk_r+0x1c>)
 8008848:	2300      	movs	r3, #0
 800884a:	4605      	mov	r5, r0
 800884c:	4608      	mov	r0, r1
 800884e:	6023      	str	r3, [r4, #0]
 8008850:	f7f8 fda8 	bl	80013a4 <_sbrk>
 8008854:	1c43      	adds	r3, r0, #1
 8008856:	d102      	bne.n	800885e <_sbrk_r+0x1a>
 8008858:	6823      	ldr	r3, [r4, #0]
 800885a:	b103      	cbz	r3, 800885e <_sbrk_r+0x1a>
 800885c:	602b      	str	r3, [r5, #0]
 800885e:	bd38      	pop	{r3, r4, r5, pc}
 8008860:	20002428 	.word	0x20002428

08008864 <__sread>:
 8008864:	b510      	push	{r4, lr}
 8008866:	460c      	mov	r4, r1
 8008868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800886c:	f000 f8e0 	bl	8008a30 <_read_r>
 8008870:	2800      	cmp	r0, #0
 8008872:	bfab      	itete	ge
 8008874:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008876:	89a3      	ldrhlt	r3, [r4, #12]
 8008878:	181b      	addge	r3, r3, r0
 800887a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800887e:	bfac      	ite	ge
 8008880:	6563      	strge	r3, [r4, #84]	; 0x54
 8008882:	81a3      	strhlt	r3, [r4, #12]
 8008884:	bd10      	pop	{r4, pc}

08008886 <__swrite>:
 8008886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800888a:	461f      	mov	r7, r3
 800888c:	898b      	ldrh	r3, [r1, #12]
 800888e:	05db      	lsls	r3, r3, #23
 8008890:	4605      	mov	r5, r0
 8008892:	460c      	mov	r4, r1
 8008894:	4616      	mov	r6, r2
 8008896:	d505      	bpl.n	80088a4 <__swrite+0x1e>
 8008898:	2302      	movs	r3, #2
 800889a:	2200      	movs	r2, #0
 800889c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088a0:	f000 f868 	bl	8008974 <_lseek_r>
 80088a4:	89a3      	ldrh	r3, [r4, #12]
 80088a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088ae:	81a3      	strh	r3, [r4, #12]
 80088b0:	4632      	mov	r2, r6
 80088b2:	463b      	mov	r3, r7
 80088b4:	4628      	mov	r0, r5
 80088b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088ba:	f000 b817 	b.w	80088ec <_write_r>

080088be <__sseek>:
 80088be:	b510      	push	{r4, lr}
 80088c0:	460c      	mov	r4, r1
 80088c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088c6:	f000 f855 	bl	8008974 <_lseek_r>
 80088ca:	1c43      	adds	r3, r0, #1
 80088cc:	89a3      	ldrh	r3, [r4, #12]
 80088ce:	bf15      	itete	ne
 80088d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80088d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80088d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80088da:	81a3      	strheq	r3, [r4, #12]
 80088dc:	bf18      	it	ne
 80088de:	81a3      	strhne	r3, [r4, #12]
 80088e0:	bd10      	pop	{r4, pc}

080088e2 <__sclose>:
 80088e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088e6:	f000 b813 	b.w	8008910 <_close_r>
	...

080088ec <_write_r>:
 80088ec:	b538      	push	{r3, r4, r5, lr}
 80088ee:	4c07      	ldr	r4, [pc, #28]	; (800890c <_write_r+0x20>)
 80088f0:	4605      	mov	r5, r0
 80088f2:	4608      	mov	r0, r1
 80088f4:	4611      	mov	r1, r2
 80088f6:	2200      	movs	r2, #0
 80088f8:	6022      	str	r2, [r4, #0]
 80088fa:	461a      	mov	r2, r3
 80088fc:	f7f8 f8fd 	bl	8000afa <_write>
 8008900:	1c43      	adds	r3, r0, #1
 8008902:	d102      	bne.n	800890a <_write_r+0x1e>
 8008904:	6823      	ldr	r3, [r4, #0]
 8008906:	b103      	cbz	r3, 800890a <_write_r+0x1e>
 8008908:	602b      	str	r3, [r5, #0]
 800890a:	bd38      	pop	{r3, r4, r5, pc}
 800890c:	20002428 	.word	0x20002428

08008910 <_close_r>:
 8008910:	b538      	push	{r3, r4, r5, lr}
 8008912:	4c06      	ldr	r4, [pc, #24]	; (800892c <_close_r+0x1c>)
 8008914:	2300      	movs	r3, #0
 8008916:	4605      	mov	r5, r0
 8008918:	4608      	mov	r0, r1
 800891a:	6023      	str	r3, [r4, #0]
 800891c:	f7f8 fd0d 	bl	800133a <_close>
 8008920:	1c43      	adds	r3, r0, #1
 8008922:	d102      	bne.n	800892a <_close_r+0x1a>
 8008924:	6823      	ldr	r3, [r4, #0]
 8008926:	b103      	cbz	r3, 800892a <_close_r+0x1a>
 8008928:	602b      	str	r3, [r5, #0]
 800892a:	bd38      	pop	{r3, r4, r5, pc}
 800892c:	20002428 	.word	0x20002428

08008930 <_fstat_r>:
 8008930:	b538      	push	{r3, r4, r5, lr}
 8008932:	4c07      	ldr	r4, [pc, #28]	; (8008950 <_fstat_r+0x20>)
 8008934:	2300      	movs	r3, #0
 8008936:	4605      	mov	r5, r0
 8008938:	4608      	mov	r0, r1
 800893a:	4611      	mov	r1, r2
 800893c:	6023      	str	r3, [r4, #0]
 800893e:	f7f8 fd08 	bl	8001352 <_fstat>
 8008942:	1c43      	adds	r3, r0, #1
 8008944:	d102      	bne.n	800894c <_fstat_r+0x1c>
 8008946:	6823      	ldr	r3, [r4, #0]
 8008948:	b103      	cbz	r3, 800894c <_fstat_r+0x1c>
 800894a:	602b      	str	r3, [r5, #0]
 800894c:	bd38      	pop	{r3, r4, r5, pc}
 800894e:	bf00      	nop
 8008950:	20002428 	.word	0x20002428

08008954 <_isatty_r>:
 8008954:	b538      	push	{r3, r4, r5, lr}
 8008956:	4c06      	ldr	r4, [pc, #24]	; (8008970 <_isatty_r+0x1c>)
 8008958:	2300      	movs	r3, #0
 800895a:	4605      	mov	r5, r0
 800895c:	4608      	mov	r0, r1
 800895e:	6023      	str	r3, [r4, #0]
 8008960:	f7f8 fd07 	bl	8001372 <_isatty>
 8008964:	1c43      	adds	r3, r0, #1
 8008966:	d102      	bne.n	800896e <_isatty_r+0x1a>
 8008968:	6823      	ldr	r3, [r4, #0]
 800896a:	b103      	cbz	r3, 800896e <_isatty_r+0x1a>
 800896c:	602b      	str	r3, [r5, #0]
 800896e:	bd38      	pop	{r3, r4, r5, pc}
 8008970:	20002428 	.word	0x20002428

08008974 <_lseek_r>:
 8008974:	b538      	push	{r3, r4, r5, lr}
 8008976:	4c07      	ldr	r4, [pc, #28]	; (8008994 <_lseek_r+0x20>)
 8008978:	4605      	mov	r5, r0
 800897a:	4608      	mov	r0, r1
 800897c:	4611      	mov	r1, r2
 800897e:	2200      	movs	r2, #0
 8008980:	6022      	str	r2, [r4, #0]
 8008982:	461a      	mov	r2, r3
 8008984:	f7f8 fd00 	bl	8001388 <_lseek>
 8008988:	1c43      	adds	r3, r0, #1
 800898a:	d102      	bne.n	8008992 <_lseek_r+0x1e>
 800898c:	6823      	ldr	r3, [r4, #0]
 800898e:	b103      	cbz	r3, 8008992 <_lseek_r+0x1e>
 8008990:	602b      	str	r3, [r5, #0]
 8008992:	bd38      	pop	{r3, r4, r5, pc}
 8008994:	20002428 	.word	0x20002428

08008998 <memcpy>:
 8008998:	b510      	push	{r4, lr}
 800899a:	1e43      	subs	r3, r0, #1
 800899c:	440a      	add	r2, r1
 800899e:	4291      	cmp	r1, r2
 80089a0:	d100      	bne.n	80089a4 <memcpy+0xc>
 80089a2:	bd10      	pop	{r4, pc}
 80089a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089ac:	e7f7      	b.n	800899e <memcpy+0x6>

080089ae <memmove>:
 80089ae:	4288      	cmp	r0, r1
 80089b0:	b510      	push	{r4, lr}
 80089b2:	eb01 0302 	add.w	r3, r1, r2
 80089b6:	d807      	bhi.n	80089c8 <memmove+0x1a>
 80089b8:	1e42      	subs	r2, r0, #1
 80089ba:	4299      	cmp	r1, r3
 80089bc:	d00a      	beq.n	80089d4 <memmove+0x26>
 80089be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089c2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80089c6:	e7f8      	b.n	80089ba <memmove+0xc>
 80089c8:	4283      	cmp	r3, r0
 80089ca:	d9f5      	bls.n	80089b8 <memmove+0xa>
 80089cc:	1881      	adds	r1, r0, r2
 80089ce:	1ad2      	subs	r2, r2, r3
 80089d0:	42d3      	cmn	r3, r2
 80089d2:	d100      	bne.n	80089d6 <memmove+0x28>
 80089d4:	bd10      	pop	{r4, pc}
 80089d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089da:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80089de:	e7f7      	b.n	80089d0 <memmove+0x22>

080089e0 <__malloc_lock>:
 80089e0:	4770      	bx	lr

080089e2 <__malloc_unlock>:
 80089e2:	4770      	bx	lr

080089e4 <_realloc_r>:
 80089e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089e6:	4607      	mov	r7, r0
 80089e8:	4614      	mov	r4, r2
 80089ea:	460e      	mov	r6, r1
 80089ec:	b921      	cbnz	r1, 80089f8 <_realloc_r+0x14>
 80089ee:	4611      	mov	r1, r2
 80089f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80089f4:	f7ff bab2 	b.w	8007f5c <_malloc_r>
 80089f8:	b922      	cbnz	r2, 8008a04 <_realloc_r+0x20>
 80089fa:	f7ff fa61 	bl	8007ec0 <_free_r>
 80089fe:	4625      	mov	r5, r4
 8008a00:	4628      	mov	r0, r5
 8008a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a04:	f000 f826 	bl	8008a54 <_malloc_usable_size_r>
 8008a08:	42a0      	cmp	r0, r4
 8008a0a:	d20f      	bcs.n	8008a2c <_realloc_r+0x48>
 8008a0c:	4621      	mov	r1, r4
 8008a0e:	4638      	mov	r0, r7
 8008a10:	f7ff faa4 	bl	8007f5c <_malloc_r>
 8008a14:	4605      	mov	r5, r0
 8008a16:	2800      	cmp	r0, #0
 8008a18:	d0f2      	beq.n	8008a00 <_realloc_r+0x1c>
 8008a1a:	4631      	mov	r1, r6
 8008a1c:	4622      	mov	r2, r4
 8008a1e:	f7ff ffbb 	bl	8008998 <memcpy>
 8008a22:	4631      	mov	r1, r6
 8008a24:	4638      	mov	r0, r7
 8008a26:	f7ff fa4b 	bl	8007ec0 <_free_r>
 8008a2a:	e7e9      	b.n	8008a00 <_realloc_r+0x1c>
 8008a2c:	4635      	mov	r5, r6
 8008a2e:	e7e7      	b.n	8008a00 <_realloc_r+0x1c>

08008a30 <_read_r>:
 8008a30:	b538      	push	{r3, r4, r5, lr}
 8008a32:	4c07      	ldr	r4, [pc, #28]	; (8008a50 <_read_r+0x20>)
 8008a34:	4605      	mov	r5, r0
 8008a36:	4608      	mov	r0, r1
 8008a38:	4611      	mov	r1, r2
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	6022      	str	r2, [r4, #0]
 8008a3e:	461a      	mov	r2, r3
 8008a40:	f7f8 fc5e 	bl	8001300 <_read>
 8008a44:	1c43      	adds	r3, r0, #1
 8008a46:	d102      	bne.n	8008a4e <_read_r+0x1e>
 8008a48:	6823      	ldr	r3, [r4, #0]
 8008a4a:	b103      	cbz	r3, 8008a4e <_read_r+0x1e>
 8008a4c:	602b      	str	r3, [r5, #0]
 8008a4e:	bd38      	pop	{r3, r4, r5, pc}
 8008a50:	20002428 	.word	0x20002428

08008a54 <_malloc_usable_size_r>:
 8008a54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a58:	1f18      	subs	r0, r3, #4
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	bfbc      	itt	lt
 8008a5e:	580b      	ldrlt	r3, [r1, r0]
 8008a60:	18c0      	addlt	r0, r0, r3
 8008a62:	4770      	bx	lr

08008a64 <_init>:
 8008a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a66:	bf00      	nop
 8008a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a6a:	bc08      	pop	{r3}
 8008a6c:	469e      	mov	lr, r3
 8008a6e:	4770      	bx	lr

08008a70 <_fini>:
 8008a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a72:	bf00      	nop
 8008a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a76:	bc08      	pop	{r3}
 8008a78:	469e      	mov	lr, r3
 8008a7a:	4770      	bx	lr
