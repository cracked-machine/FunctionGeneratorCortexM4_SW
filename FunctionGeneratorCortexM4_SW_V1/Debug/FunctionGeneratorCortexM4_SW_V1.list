
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013284  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001378  08013468  08013468  00023468  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080147e0  080147e0  00031e08  2**0
                  CONTENTS
  4 .ARM          00000000  080147e0  080147e0  00031e08  2**0
                  CONTENTS
  5 .preinit_array 00000000  080147e0  080147e0  00031e08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080147e0  080147e0  000247e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080147e4  080147e4  000247e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001e08  20000000  080147e8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b24  20001e08  080165f0  00031e08  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000292c  080165f0  0003292c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031e08  2**0
                  CONTENTS, READONLY
 12 .debug_info   00046775  00000000  00000000  00031e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007ae4  00000000  00000000  000785ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002260  00000000  00000000  00080098  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001e00  00000000  00000000  000822f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035616  00000000  00000000  000840f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002f278  00000000  00000000  000b970e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012673f  00000000  00000000  000e8986  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0020f0c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000983c  00000000  00000000  0020f140  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001e08 	.word	0x20001e08
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801344c 	.word	0x0801344c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001e0c 	.word	0x20001e0c
 800021c:	0801344c 	.word	0x0801344c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <BiasMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMenu(eBiasMenu_Status pMenu)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d000      	beq.n	8000cea <BiasMenu_DrawMenu+0x12>
		case ENABLE_BIAS_MENU:
			BiasMenu_DrawMainMenu();
			break;

		default:
			break;
 8000ce8:	e002      	b.n	8000cf0 <BiasMenu_DrawMenu+0x18>
			BiasMenu_DrawMainMenu();
 8000cea:	f000 f805 	bl	8000cf8 <BiasMenu_DrawMainMenu>
			break;
 8000cee:	bf00      	nop

	}
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <BiasMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMainMenu()
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->BIAS", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8000cfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d02:	9301      	str	r3, [sp, #4]
 8000d04:	2302      	movs	r3, #2
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2300      	movs	r3, #0
 8000d0a:	220a      	movs	r2, #10
 8000d0c:	210a      	movs	r1, #10
 8000d0e:	4804      	ldr	r0, [pc, #16]	; (8000d20 <BiasMenu_DrawMainMenu+0x28>)
 8000d10:	f00d fc38 	bl	800e584 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8000d14:	f000 f902 	bl	8000f1c <DM_DisplayFormattedOutput>

}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	08013468 	.word	0x08013468

08000d24 <DM_Init>:
 *	@param None
 *	@retval None
 *
 */
void DM_Init()
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 8000d28:	f00d fc6d 	bl	800e606 <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f00e f8c3 	bl	800eeb8 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 8000d32:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d36:	f00d fea5 	bl	800ea84 <ILI9341_Fill_Screen>

}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <DM_PostInit>:
 *	@param None
 *	@retval None
 *
 */
void DM_PostInit()
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("Initialising", 10, 10, NORMAL_TEXT_FGCOLOUR, 1, NORMAL_TEXT_BGCOLOUR);
 8000d46:	2300      	movs	r3, #0
 8000d48:	9301      	str	r3, [sp, #4]
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000d52:	220a      	movs	r2, #10
 8000d54:	210a      	movs	r1, #10
 8000d56:	4806      	ldr	r0, [pc, #24]	; (8000d70 <DM_PostInit+0x30>)
 8000d58:	f00d fc14 	bl	800e584 <ILI9341_Draw_Text>
	HAL_Delay(500);
 8000d5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d60:	f007 f9f0 	bl	8008144 <HAL_Delay>

	DM_RefreshScreen();
 8000d64:	f000 fb9a 	bl	800149c <DM_RefreshScreen>
	#ifdef EVENT_MENU_DEBUG
		  printf("Init Completed\n");
	#endif


}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	08013474 	.word	0x08013474

08000d74 <DM_UpdateDisplay>:
 *	@param None
 *	@retval None
 *
 */
void DM_UpdateDisplay()
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b09c      	sub	sp, #112	; 0x70
 8000d78:	af02      	add	r7, sp, #8
	/*
	 * 	Top level menu
	 */
	if(ToplevelMenu_getStatus())
 8000d7a:	f003 fde5 	bl	8004948 <ToplevelMenu_getStatus>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d015      	beq.n	8000db0 <DM_UpdateDisplay+0x3c>

		#ifdef EVENT_MENU_DEBUG
			  printf("FuncMenu_DrawMenu\n");
		#endif

		switch(ToplevelMenu_getStatus())
 8000d84:	f003 fde0 	bl	8004948 <ToplevelMenu_getStatus>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d008      	beq.n	8000da0 <DM_UpdateDisplay+0x2c>
 8000d8e:	2b03      	cmp	r3, #3
 8000d90:	d00a      	beq.n	8000da8 <DM_UpdateDisplay+0x34>
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d000      	beq.n	8000d98 <DM_UpdateDisplay+0x24>

				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
				break;

			default:
				break;
 8000d96:	e07d      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_MAIN_MENU);
 8000d98:	2001      	movs	r0, #1
 8000d9a:	f002 feb3 	bl	8003b04 <ToplevelMenu_DrawMenu>
				break;
 8000d9e:	e079      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8000da0:	2002      	movs	r0, #2
 8000da2:	f002 feaf 	bl	8003b04 <ToplevelMenu_DrawMenu>
				break;
 8000da6:	e075      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
 8000da8:	2003      	movs	r0, #3
 8000daa:	f002 feab 	bl	8003b04 <ToplevelMenu_DrawMenu>
				break;
 8000dae:	e071      	b.n	8000e94 <DM_UpdateDisplay+0x120>
	}

	/*
	 * 	Function menus
	 */
	else if(FuncMenu_getStatus())		//  != DISABLE_FUNC_MENU
 8000db0:	f003 fbe2 	bl	8004578 <FuncMenu_getStatus>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d015      	beq.n	8000de6 <DM_UpdateDisplay+0x72>

		#ifdef EVENT_MENU_DEBUG
			  printf("FuncMenu_DrawMenu\n");
		#endif

		switch(FuncMenu_getStatus())
 8000dba:	f003 fbdd 	bl	8004578 <FuncMenu_getStatus>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d008      	beq.n	8000dd6 <DM_UpdateDisplay+0x62>
 8000dc4:	2b03      	cmp	r3, #3
 8000dc6:	d00a      	beq.n	8000dde <DM_UpdateDisplay+0x6a>
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d000      	beq.n	8000dce <DM_UpdateDisplay+0x5a>
				FuncMenu_DrawMenu(ENABLE_FUNC_Aux_MENU);

				break;

			default:
				break;
 8000dcc:	e062      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				FuncMenu_DrawMenu(ENABLE_FUNC_MAIN_MENU);
 8000dce:	2001      	movs	r0, #1
 8000dd0:	f002 f91e 	bl	8003010 <FuncMenu_DrawMenu>
				break;
 8000dd4:	e05e      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				FuncMenu_DrawMenu(ENABLE_FUNC_SIGNAL_MENU);
 8000dd6:	2002      	movs	r0, #2
 8000dd8:	f002 f91a 	bl	8003010 <FuncMenu_DrawMenu>
				break;
 8000ddc:	e05a      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				FuncMenu_DrawMenu(ENABLE_FUNC_Aux_MENU);
 8000dde:	2003      	movs	r0, #3
 8000de0:	f002 f916 	bl	8003010 <FuncMenu_DrawMenu>
				break;
 8000de4:	e056      	b.n	8000e94 <DM_UpdateDisplay+0x120>

	}
	/*
	 * 	Gain menus
	 */
	else if(GainMenu_getStatus())		//  != DISABLE_GAIN_MENU
 8000de6:	f003 fcbd 	bl	8004764 <GainMenu_getStatus>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d015      	beq.n	8000e1c <DM_UpdateDisplay+0xa8>

		#ifdef EVENT_MENU_DEBUG
			  printf("GainMenu_DrawMenu\n");
		#endif

		switch(GainMenu_getStatus())
 8000df0:	f003 fcb8 	bl	8004764 <GainMenu_getStatus>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d008      	beq.n	8000e0c <DM_UpdateDisplay+0x98>
 8000dfa:	2b03      	cmp	r3, #3
 8000dfc:	d00a      	beq.n	8000e14 <DM_UpdateDisplay+0xa0>
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d000      	beq.n	8000e04 <DM_UpdateDisplay+0x90>
				GainMenu_DrawMenu(ENABLE_GAIN_Aux_MENU);

				break;

			default:
				break;
 8000e02:	e047      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				GainMenu_DrawMenu(ENABLE_GAIN_MAIN_MENU);
 8000e04:	2001      	movs	r0, #1
 8000e06:	f002 fdd7 	bl	80039b8 <GainMenu_DrawMenu>
				break;
 8000e0a:	e043      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				GainMenu_DrawMenu(ENABLE_GAIN_SIGNAL_MENU);
 8000e0c:	2002      	movs	r0, #2
 8000e0e:	f002 fdd3 	bl	80039b8 <GainMenu_DrawMenu>
				break;
 8000e12:	e03f      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				GainMenu_DrawMenu(ENABLE_GAIN_Aux_MENU);
 8000e14:	2003      	movs	r0, #3
 8000e16:	f002 fdcf 	bl	80039b8 <GainMenu_DrawMenu>
				break;
 8000e1a:	e03b      	b.n	8000e94 <DM_UpdateDisplay+0x120>
	}

	/*
	 * 	 Frequency menus
	 */
	else if(FreqMenu_getStatus())		//  != DISABLE_FREQ_MENU
 8000e1c:	f003 fba0 	bl	8004560 <FreqMenu_getStatus>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d020      	beq.n	8000e68 <DM_UpdateDisplay+0xf4>
			  printf("FreqMenu_DrawMenu\n");
		#endif

		//ILI9341_Draw_Text("FREQUENCY MENU", 	30, 10, WHITE, 3, BLACK);

		switch(FreqMenu_getStatus())
 8000e26:	f003 fb9b 	bl	8004560 <FreqMenu_getStatus>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	3b01      	subs	r3, #1
 8000e2e:	2b03      	cmp	r3, #3
 8000e30:	d82f      	bhi.n	8000e92 <DM_UpdateDisplay+0x11e>
 8000e32:	a201      	add	r2, pc, #4	; (adr r2, 8000e38 <DM_UpdateDisplay+0xc4>)
 8000e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e38:	08000e49 	.word	0x08000e49
 8000e3c:	08000e51 	.word	0x08000e51
 8000e40:	08000e59 	.word	0x08000e59
 8000e44:	08000e61 	.word	0x08000e61
		{
			case ENABLE_FREQ_MAIN_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_MAIN_MENU);
 8000e48:	2001      	movs	r0, #1
 8000e4a:	f000 fb8b 	bl	8001564 <FreqMenu_DrawMenu>

				break;
 8000e4e:	e021      	b.n	8000e94 <DM_UpdateDisplay+0x120>

			case ENABLE_FREQ_PRESET_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_PRESET_MENU);
 8000e50:	2002      	movs	r0, #2
 8000e52:	f000 fb87 	bl	8001564 <FreqMenu_DrawMenu>
				break;
 8000e56:	e01d      	b.n	8000e94 <DM_UpdateDisplay+0x120>

			case ENABLE_FREQ_ADJUST_MENU:


				FreqMenu_DrawMenu(ENABLE_FREQ_ADJUST_MENU);
 8000e58:	2003      	movs	r0, #3
 8000e5a:	f000 fb83 	bl	8001564 <FreqMenu_DrawMenu>

				break;
 8000e5e:	e019      	b.n	8000e94 <DM_UpdateDisplay+0x120>

			case ENABLE_FREQ_SWEEP_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_SWEEP_MENU);
 8000e60:	2004      	movs	r0, #4
 8000e62:	f000 fb7f 	bl	8001564 <FreqMenu_DrawMenu>
				break;
 8000e66:	e015      	b.n	8000e94 <DM_UpdateDisplay+0x120>
	}

	/*
	 * 	Bias menu
	 */
	else if(BiasMenu_getStatus())		//  != DISABLE_BIAS_MENU
 8000e68:	f002 ff02 	bl	8003c70 <BiasMenu_getStatus>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d003      	beq.n	8000e7a <DM_UpdateDisplay+0x106>

		#ifdef EVENT_MENU_DEBUG
			  printf("BiasMenu_DrawMenu\n");
		#endif

		BiasMenu_DrawMenu(ENABLE_BIAS_MENU);
 8000e72:	2001      	movs	r0, #1
 8000e74:	f7ff ff30 	bl	8000cd8 <BiasMenu_DrawMenu>
 8000e78:	e00c      	b.n	8000e94 <DM_UpdateDisplay+0x120>
	/*
	 * 		Error
	 */
	else
	{
		ILI9341_Draw_Text("DisplayManager: no menu status set!", 10, 50, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000e7a:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000e7e:	9301      	str	r3, [sp, #4]
 8000e80:	2301      	movs	r3, #1
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	2300      	movs	r3, #0
 8000e86:	2232      	movs	r2, #50	; 0x32
 8000e88:	210a      	movs	r1, #10
 8000e8a:	4820      	ldr	r0, [pc, #128]	; (8000f0c <DM_UpdateDisplay+0x198>)
 8000e8c:	f00d fb7a 	bl	800e584 <ILI9341_Draw_Text>
 8000e90:	e000      	b.n	8000e94 <DM_UpdateDisplay+0x120>
				break;
 8000e92:	bf00      	nop
	 * 	Debug messages
	 */

	//TODO
	#ifdef ENCODER_DEBUG
		char tim5_text[50] = "";
 8000e94:	2300      	movs	r3, #0
 8000e96:	637b      	str	r3, [r7, #52]	; 0x34
 8000e98:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e9c:	222e      	movs	r2, #46	; 0x2e
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f00e fa4b 	bl	800f33c <memset>
		snprintf(tim5_text, sizeof(tim5_text), "OFFSET: %5lu", BO_GetOutputBias());
 8000ea6:	f003 ff81 	bl	8004dac <BO_GetOutputBias>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000eb0:	4a17      	ldr	r2, [pc, #92]	; (8000f10 <DM_UpdateDisplay+0x19c>)
 8000eb2:	2132      	movs	r1, #50	; 0x32
 8000eb4:	f00e ff22 	bl	800fcfc <sniprintf>
		ILI9341_Draw_Text(tim5_text, 220, 10, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000eb8:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000ebc:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000ec0:	9301      	str	r3, [sp, #4]
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	220a      	movs	r2, #10
 8000eca:	21dc      	movs	r1, #220	; 0xdc
 8000ecc:	f00d fb5a 	bl	800e584 <ILI9341_Draw_Text>

		char encoder_value[50] = "";
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	603b      	str	r3, [r7, #0]
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	222e      	movs	r2, #46	; 0x2e
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f00e fa2e 	bl	800f33c <memset>
		snprintf(encoder_value, sizeof(encoder_value), "ENCODER: %5lu", ENCODER_TIMER->CNT);
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <DM_UpdateDisplay+0x1a0>)
 8000ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee4:	4638      	mov	r0, r7
 8000ee6:	4a0c      	ldr	r2, [pc, #48]	; (8000f18 <DM_UpdateDisplay+0x1a4>)
 8000ee8:	2132      	movs	r1, #50	; 0x32
 8000eea:	f00e ff07 	bl	800fcfc <sniprintf>
		ILI9341_Draw_Text(encoder_value, 220, 20, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000eee:	4638      	mov	r0, r7
 8000ef0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000ef4:	9301      	str	r3, [sp, #4]
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	2300      	movs	r3, #0
 8000efc:	2214      	movs	r2, #20
 8000efe:	21dc      	movs	r1, #220	; 0xdc
 8000f00:	f00d fb40 	bl	800e584 <ILI9341_Draw_Text>
	#endif //ENCODER_DEBUG



}
 8000f04:	bf00      	nop
 8000f06:	3768      	adds	r7, #104	; 0x68
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	08013484 	.word	0x08013484
 8000f10:	080134a8 	.word	0x080134a8
 8000f14:	40012c00 	.word	0x40012c00
 8000f18:	080134b8 	.word	0x080134b8

08000f1c <DM_DisplayFormattedOutput>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayFormattedOutput()
{
 8000f1c:	b590      	push	{r4, r7, lr}
 8000f1e:	b09f      	sub	sp, #124	; 0x7c
 8000f20:	af04      	add	r7, sp, #16
	uint8_t text_size = 2;
 8000f22:	2302      	movs	r3, #2
 8000f24:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	char out_hertz[15] = "";
 8000f28:	2300      	movs	r3, #0
 8000f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f2c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t out_hertz_x = 140;
 8000f3a:	238c      	movs	r3, #140	; 0x8c
 8000f3c:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	uint8_t out_hertz_y = 40;
 8000f40:	2328      	movs	r3, #40	; 0x28
 8000f42:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

	char out_vpp[18] = "";
 8000f46:	2300      	movs	r3, #0
 8000f48:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	819a      	strh	r2, [r3, #12]
	uint8_t out_vpp_x = 175;
 8000f58:	23af      	movs	r3, #175	; 0xaf
 8000f5a:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	uint8_t out_vpp_y = 70;
 8000f5e:	2346      	movs	r3, #70	; 0x46
 8000f60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	char out_decibels[20] = "";
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
 8000f68:	f107 0318 	add.w	r3, r7, #24
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
	uint8_t out_decibels_x = 138;
 8000f76:	238a      	movs	r3, #138	; 0x8a
 8000f78:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t out_decibels_y = 100;
 8000f7c:	2364      	movs	r3, #100	; 0x64
 8000f7e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d


	float volts_per_thou = 0.00075;
 8000f82:	4bc4      	ldr	r3, [pc, #784]	; (8001294 <DM_DisplayFormattedOutput+0x378>)
 8000f84:	65bb      	str	r3, [r7, #88]	; 0x58
	char out_dcvolts[12] = "";
 8000f86:	2300      	movs	r3, #0
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	f107 030c 	add.w	r3, r7, #12
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
	uint8_t out_dcvolts_x = 161;
 8000f94:	23a1      	movs	r3, #161	; 0xa1
 8000f96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t out_dcvolts_y = 130;
 8000f9a:	2382      	movs	r3, #130	; 0x82
 8000f9c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

	ILI9341_Draw_Text(" FREQ   ....", 3, out_hertz_y , NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000fa0:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8000fa4:	b299      	uxth	r1, r3
 8000fa6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	2200      	movs	r2, #0
 8000fae:	9201      	str	r2, [sp, #4]
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000fb6:	460a      	mov	r2, r1
 8000fb8:	2103      	movs	r1, #3
 8000fba:	48b7      	ldr	r0, [pc, #732]	; (8001298 <DM_DisplayFormattedOutput+0x37c>)
 8000fbc:	f00d fae2 	bl	800e584 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" VPP    ....", 3, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000fc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000fc4:	b299      	uxth	r1, r3
 8000fc6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	2200      	movs	r2, #0
 8000fce:	9201      	str	r2, [sp, #4]
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000fd6:	460a      	mov	r2, r1
 8000fd8:	2103      	movs	r1, #3
 8000fda:	48b0      	ldr	r0, [pc, #704]	; (800129c <DM_DisplayFormattedOutput+0x380>)
 8000fdc:	f00d fad2 	bl	800e584 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" GAIN   ....", 3, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000fe0:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8000fe4:	b299      	uxth	r1, r3
 8000fe6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	2200      	movs	r2, #0
 8000fee:	9201      	str	r2, [sp, #4]
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000ff6:	460a      	mov	r2, r1
 8000ff8:	2103      	movs	r1, #3
 8000ffa:	48a9      	ldr	r0, [pc, #676]	; (80012a0 <DM_DisplayFormattedOutput+0x384>)
 8000ffc:	f00d fac2 	bl	800e584 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" OFFSET ....", 3, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001000:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001004:	b299      	uxth	r1, r3
 8001006:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800100a:	b29b      	uxth	r3, r3
 800100c:	2200      	movs	r2, #0
 800100e:	9201      	str	r2, [sp, #4]
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001016:	460a      	mov	r2, r1
 8001018:	2103      	movs	r1, #3
 800101a:	48a2      	ldr	r0, [pc, #648]	; (80012a4 <DM_DisplayFormattedOutput+0x388>)
 800101c:	f00d fab2 	bl	800e584 <ILI9341_Draw_Text>

	// display output in hertz
	snprintf(out_hertz, sizeof(out_hertz), " %4.2f   Hz ", SM_GetOutputInHertz());
 8001020:	f005 f85c 	bl	80060dc <SM_GetOutputInHertz>
 8001024:	ee10 3a10 	vmov	r3, s0
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff fab5 	bl	8000598 <__aeabi_f2d>
 800102e:	4603      	mov	r3, r0
 8001030:	460c      	mov	r4, r1
 8001032:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001036:	e9cd 3400 	strd	r3, r4, [sp]
 800103a:	4a9b      	ldr	r2, [pc, #620]	; (80012a8 <DM_DisplayFormattedOutput+0x38c>)
 800103c:	210f      	movs	r1, #15
 800103e:	f00e fe5d 	bl	800fcfc <sniprintf>
	ILI9341_Draw_Text(out_hertz, out_hertz_x, out_hertz_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001042:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8001046:	b299      	uxth	r1, r3
 8001048:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 800104c:	b29c      	uxth	r4, r3
 800104e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001052:	b29b      	uxth	r3, r3
 8001054:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001058:	2200      	movs	r2, #0
 800105a:	9201      	str	r2, [sp, #4]
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001062:	4622      	mov	r2, r4
 8001064:	f00d fa8e 	bl	800e584 <ILI9341_Draw_Text>

	// display output in volts peak-to-peak and decibels
	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 8001068:	2000      	movs	r0, #0
 800106a:	f004 fd9f 	bl	8005bac <SM_GetOutputChannel>
 800106e:	4603      	mov	r3, r0
 8001070:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8001074:	653b      	str	r3, [r7, #80]	; 0x50

	if(pTmpVppPreset)
 8001076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001078:	2b00      	cmp	r3, #0
 800107a:	d01d      	beq.n	80010b8 <DM_DisplayFormattedOutput+0x19c>
	{
		snprintf(out_vpp, sizeof(out_vpp), " %2.2f   V ", pTmpVppPreset->amp_value);
 800107c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fa89 	bl	8000598 <__aeabi_f2d>
 8001086:	4603      	mov	r3, r0
 8001088:	460c      	mov	r4, r1
 800108a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800108e:	e9cd 3400 	strd	r3, r4, [sp]
 8001092:	4a86      	ldr	r2, [pc, #536]	; (80012ac <DM_DisplayFormattedOutput+0x390>)
 8001094:	2112      	movs	r1, #18
 8001096:	f00e fe31 	bl	800fcfc <sniprintf>
		snprintf(out_decibels, sizeof(out_decibels), " %+7.2f ", pTmpVppPreset->gain_decibels);
 800109a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800109c:	68db      	ldr	r3, [r3, #12]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fa7a 	bl	8000598 <__aeabi_f2d>
 80010a4:	4603      	mov	r3, r0
 80010a6:	460c      	mov	r4, r1
 80010a8:	f107 0014 	add.w	r0, r7, #20
 80010ac:	e9cd 3400 	strd	r3, r4, [sp]
 80010b0:	4a7f      	ldr	r2, [pc, #508]	; (80012b0 <DM_DisplayFormattedOutput+0x394>)
 80010b2:	2114      	movs	r1, #20
 80010b4:	f00e fe22 	bl	800fcfc <sniprintf>
	}
	ILI9341_Draw_Text(out_vpp, out_vpp_x, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80010b8:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80010bc:	b299      	uxth	r1, r3
 80010be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80010c2:	b29c      	uxth	r4, r3
 80010c4:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80010ce:	2200      	movs	r2, #0
 80010d0:	9201      	str	r2, [sp, #4]
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80010d8:	4622      	mov	r2, r4
 80010da:	f00d fa53 	bl	800e584 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(out_decibels, out_decibels_x, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80010de:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80010e2:	b299      	uxth	r1, r3
 80010e4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80010e8:	b29c      	uxth	r4, r3
 80010ea:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	f107 0014 	add.w	r0, r7, #20
 80010f4:	2200      	movs	r2, #0
 80010f6:	9201      	str	r2, [sp, #4]
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80010fe:	4622      	mov	r2, r4
 8001100:	f00d fa40 	bl	800e584 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("dBmV", out_decibels_x + 128, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001104:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001108:	b29b      	uxth	r3, r3
 800110a:	3380      	adds	r3, #128	; 0x80
 800110c:	b299      	uxth	r1, r3
 800110e:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8001112:	b298      	uxth	r0, r3
 8001114:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001118:	b29b      	uxth	r3, r3
 800111a:	2200      	movs	r2, #0
 800111c:	9201      	str	r2, [sp, #4]
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001124:	4602      	mov	r2, r0
 8001126:	4863      	ldr	r0, [pc, #396]	; (80012b4 <DM_DisplayFormattedOutput+0x398>)
 8001128:	f00d fa2c 	bl	800e584 <ILI9341_Draw_Text>


	// display output bias in +/- Volts
	float dc_volts;
	(BO_GetOutputBias() == 0) ? (dc_volts = 0) : (dc_volts = volts_per_thou * (float)BO_GetOutputBias());
 800112c:	f003 fe3e 	bl	8004dac <BO_GetOutputBias>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d103      	bne.n	800113e <DM_DisplayFormattedOutput+0x222>
 8001136:	f04f 0300 	mov.w	r3, #0
 800113a:	667b      	str	r3, [r7, #100]	; 0x64
 800113c:	e00b      	b.n	8001156 <DM_DisplayFormattedOutput+0x23a>
 800113e:	f003 fe35 	bl	8004dac <BO_GetOutputBias>
 8001142:	ee07 0a90 	vmov	s15, r0
 8001146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800114a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800114e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001152:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

	snprintf(out_dcvolts, sizeof(out_dcvolts), "%05.2f   v ", dc_volts);
 8001156:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001158:	f7ff fa1e 	bl	8000598 <__aeabi_f2d>
 800115c:	4603      	mov	r3, r0
 800115e:	460c      	mov	r4, r1
 8001160:	f107 0008 	add.w	r0, r7, #8
 8001164:	e9cd 3400 	strd	r3, r4, [sp]
 8001168:	4a53      	ldr	r2, [pc, #332]	; (80012b8 <DM_DisplayFormattedOutput+0x39c>)
 800116a:	210c      	movs	r1, #12
 800116c:	f00e fdc6 	bl	800fcfc <sniprintf>
	if(BO_GetBiasPolarity())
 8001170:	f003 fdbc 	bl	8004cec <BO_GetBiasPolarity>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d022      	beq.n	80011c0 <DM_DisplayFormattedOutput+0x2a4>
	{
		char symbol[3] = "+\0";
 800117a:	4a50      	ldr	r2, [pc, #320]	; (80012bc <DM_DisplayFormattedOutput+0x3a0>)
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	6812      	ldr	r2, [r2, #0]
 8001180:	4611      	mov	r1, r2
 8001182:	8019      	strh	r1, [r3, #0]
 8001184:	3302      	adds	r3, #2
 8001186:	0c12      	lsrs	r2, r2, #16
 8001188:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800118a:	f107 0208 	add.w	r2, r7, #8
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	4611      	mov	r1, r2
 8001192:	4618      	mov	r0, r3
 8001194:	f00e fde6 	bl	800fd64 <strcat>
 8001198:	4604      	mov	r4, r0
 800119a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800119e:	b299      	uxth	r1, r3
 80011a0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80011a4:	b298      	uxth	r0, r3
 80011a6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	2200      	movs	r2, #0
 80011ae:	9201      	str	r2, [sp, #4]
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80011b6:	4602      	mov	r2, r0
 80011b8:	4620      	mov	r0, r4
 80011ba:	f00d f9e3 	bl	800e584 <ILI9341_Draw_Text>
 80011be:	e021      	b.n	8001204 <DM_DisplayFormattedOutput+0x2e8>
	}
	else
	{
		char symbol[3] = "-\0";
 80011c0:	4a3f      	ldr	r2, [pc, #252]	; (80012c0 <DM_DisplayFormattedOutput+0x3a4>)
 80011c2:	463b      	mov	r3, r7
 80011c4:	6812      	ldr	r2, [r2, #0]
 80011c6:	4611      	mov	r1, r2
 80011c8:	8019      	strh	r1, [r3, #0]
 80011ca:	3302      	adds	r3, #2
 80011cc:	0c12      	lsrs	r2, r2, #16
 80011ce:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80011d0:	f107 0208 	add.w	r2, r7, #8
 80011d4:	463b      	mov	r3, r7
 80011d6:	4611      	mov	r1, r2
 80011d8:	4618      	mov	r0, r3
 80011da:	f00e fdc3 	bl	800fd64 <strcat>
 80011de:	4604      	mov	r4, r0
 80011e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80011e4:	b299      	uxth	r1, r3
 80011e6:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80011ea:	b298      	uxth	r0, r3
 80011ec:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	2200      	movs	r2, #0
 80011f4:	9201      	str	r2, [sp, #4]
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80011fc:	4602      	mov	r2, r0
 80011fe:	4620      	mov	r0, r4
 8001200:	f00d f9c0 	bl	800e584 <ILI9341_Draw_Text>
	}

	ILI9341_Draw_Text(" OUT:", 3, 170, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001204:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001208:	b29b      	uxth	r3, r3
 800120a:	2200      	movs	r2, #0
 800120c:	9201      	str	r2, [sp, #4]
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001214:	22aa      	movs	r2, #170	; 0xaa
 8001216:	2103      	movs	r1, #3
 8001218:	482a      	ldr	r0, [pc, #168]	; (80012c4 <DM_DisplayFormattedOutput+0x3a8>)
 800121a:	f00d f9b3 	bl	800e584 <ILI9341_Draw_Text>
	eOutput_mode signal_output_func = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 800121e:	2000      	movs	r0, #0
 8001220:	f004 fcc4 	bl	8005bac <SM_GetOutputChannel>
 8001224:	4603      	mov	r3, r0
 8001226:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	switch(signal_output_func)
 8001230:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001234:	2b06      	cmp	r3, #6
 8001236:	f200 8091 	bhi.w	800135c <DM_DisplayFormattedOutput+0x440>
 800123a:	a201      	add	r2, pc, #4	; (adr r2, 8001240 <DM_DisplayFormattedOutput+0x324>)
 800123c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001240:	0800125d 	.word	0x0800125d
 8001244:	08001279 	.word	0x08001279
 8001248:	080012d1 	.word	0x080012d1
 800124c:	080012ed 	.word	0x080012ed
 8001250:	08001309 	.word	0x08001309
 8001254:	08001325 	.word	0x08001325
 8001258:	08001341 	.word	0x08001341
	{
		case SINE_FUNC_MODE:

			ILI9341_Draw_Wave(80, 140, 3, SIGNAL_OUTPUT_ICON, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 800125c:	233c      	movs	r3, #60	; 0x3c
 800125e:	9302      	str	r3, [sp, #8]
 8001260:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <DM_DisplayFormattedOutput+0x3ac>)
 8001262:	9301      	str	r3, [sp, #4]
 8001264:	2364      	movs	r3, #100	; 0x64
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	f240 23fd 	movw	r3, #765	; 0x2fd
 800126c:	2203      	movs	r2, #3
 800126e:	218c      	movs	r1, #140	; 0x8c
 8001270:	2050      	movs	r0, #80	; 0x50
 8001272:	f00c ffe3 	bl	800e23c <ILI9341_Draw_Wave>
			break;
 8001276:	e071      	b.n	800135c <DM_DisplayFormattedOutput+0x440>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 8001278:	233c      	movs	r3, #60	; 0x3c
 800127a:	9302      	str	r3, [sp, #8]
 800127c:	4b13      	ldr	r3, [pc, #76]	; (80012cc <DM_DisplayFormattedOutput+0x3b0>)
 800127e:	9301      	str	r3, [sp, #4]
 8001280:	23c8      	movs	r3, #200	; 0xc8
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001288:	2203      	movs	r2, #3
 800128a:	21a0      	movs	r1, #160	; 0xa0
 800128c:	2050      	movs	r0, #80	; 0x50
 800128e:	f00c ffd5 	bl	800e23c <ILI9341_Draw_Wave>
			break;
 8001292:	e063      	b.n	800135c <DM_DisplayFormattedOutput+0x440>
 8001294:	3a449ba6 	.word	0x3a449ba6
 8001298:	080134c8 	.word	0x080134c8
 800129c:	080134d8 	.word	0x080134d8
 80012a0:	080134e8 	.word	0x080134e8
 80012a4:	080134f8 	.word	0x080134f8
 80012a8:	08013508 	.word	0x08013508
 80012ac:	08013518 	.word	0x08013518
 80012b0:	08013524 	.word	0x08013524
 80012b4:	08013530 	.word	0x08013530
 80012b8:	08013538 	.word	0x08013538
 80012bc:	08013558 	.word	0x08013558
 80012c0:	0801355c 	.word	0x0801355c
 80012c4:	08013544 	.word	0x08013544
 80012c8:	20000e24 	.word	0x20000e24
 80012cc:	20000f14 	.word	0x20000f14
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 80012d0:	233c      	movs	r3, #60	; 0x3c
 80012d2:	9302      	str	r3, [sp, #8]
 80012d4:	4b6a      	ldr	r3, [pc, #424]	; (8001480 <DM_DisplayFormattedOutput+0x564>)
 80012d6:	9301      	str	r3, [sp, #4]
 80012d8:	23c8      	movs	r3, #200	; 0xc8
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	f240 23fd 	movw	r3, #765	; 0x2fd
 80012e0:	2203      	movs	r2, #3
 80012e2:	21a0      	movs	r1, #160	; 0xa0
 80012e4:	2050      	movs	r0, #80	; 0x50
 80012e6:	f00c ffa9 	bl	800e23c <ILI9341_Draw_Wave>
			break;
 80012ea:	e037      	b.n	800135c <DM_DisplayFormattedOutput+0x440>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 80012ec:	233c      	movs	r3, #60	; 0x3c
 80012ee:	9302      	str	r3, [sp, #8]
 80012f0:	4b64      	ldr	r3, [pc, #400]	; (8001484 <DM_DisplayFormattedOutput+0x568>)
 80012f2:	9301      	str	r3, [sp, #4]
 80012f4:	23c8      	movs	r3, #200	; 0xc8
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	f240 23fd 	movw	r3, #765	; 0x2fd
 80012fc:	2203      	movs	r2, #3
 80012fe:	21a0      	movs	r1, #160	; 0xa0
 8001300:	2050      	movs	r0, #80	; 0x50
 8001302:	f00c ff9b 	bl	800e23c <ILI9341_Draw_Wave>
			break;
 8001306:	e029      	b.n	800135c <DM_DisplayFormattedOutput+0x440>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001308:	233c      	movs	r3, #60	; 0x3c
 800130a:	9302      	str	r3, [sp, #8]
 800130c:	4b5e      	ldr	r3, [pc, #376]	; (8001488 <DM_DisplayFormattedOutput+0x56c>)
 800130e:	9301      	str	r3, [sp, #4]
 8001310:	23c8      	movs	r3, #200	; 0xc8
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001318:	2203      	movs	r2, #3
 800131a:	21a0      	movs	r1, #160	; 0xa0
 800131c:	2050      	movs	r0, #80	; 0x50
 800131e:	f00c ff8d 	bl	800e23c <ILI9341_Draw_Wave>
			break;
 8001322:	e01b      	b.n	800135c <DM_DisplayFormattedOutput+0x440>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001324:	233c      	movs	r3, #60	; 0x3c
 8001326:	9302      	str	r3, [sp, #8]
 8001328:	4b57      	ldr	r3, [pc, #348]	; (8001488 <DM_DisplayFormattedOutput+0x56c>)
 800132a:	9301      	str	r3, [sp, #4]
 800132c:	23c8      	movs	r3, #200	; 0xc8
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001334:	2203      	movs	r2, #3
 8001336:	21a0      	movs	r1, #160	; 0xa0
 8001338:	2050      	movs	r0, #80	; 0x50
 800133a:	f00c ff7f 	bl	800e23c <ILI9341_Draw_Wave>
			break;
 800133e:	e00d      	b.n	800135c <DM_DisplayFormattedOutput+0x440>
		case PWM_FUNC_MODE:
			ILI9341_Draw_Text("PWM", 80, 170, SIGNAL_OUTPUT_ICON, text_size, NORMAL_TEXT_BGCOLOUR);
 8001340:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001344:	b29b      	uxth	r3, r3
 8001346:	2200      	movs	r2, #0
 8001348:	9201      	str	r2, [sp, #4]
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001350:	22aa      	movs	r2, #170	; 0xaa
 8001352:	2150      	movs	r1, #80	; 0x50
 8001354:	484d      	ldr	r0, [pc, #308]	; (800148c <DM_DisplayFormattedOutput+0x570>)
 8001356:	f00d f915 	bl	800e584 <ILI9341_Draw_Text>
			break;
 800135a:	bf00      	nop
	}

	ILI9341_Draw_Text("AUX:", 180, 170, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800135c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001360:	b29b      	uxth	r3, r3
 8001362:	2200      	movs	r2, #0
 8001364:	9201      	str	r2, [sp, #4]
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800136c:	22aa      	movs	r2, #170	; 0xaa
 800136e:	21b4      	movs	r1, #180	; 0xb4
 8001370:	4847      	ldr	r0, [pc, #284]	; (8001490 <DM_DisplayFormattedOutput+0x574>)
 8001372:	f00d f907 	bl	800e584 <ILI9341_Draw_Text>
	eOutput_mode Aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8001376:	2001      	movs	r0, #1
 8001378:	f004 fc18 	bl	8005bac <SM_GetOutputChannel>
 800137c:	4603      	mov	r3, r0
 800137e:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	switch(Aux_output_func)
 8001388:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800138c:	2b06      	cmp	r3, #6
 800138e:	d873      	bhi.n	8001478 <DM_DisplayFormattedOutput+0x55c>
 8001390:	a201      	add	r2, pc, #4	; (adr r2, 8001398 <DM_DisplayFormattedOutput+0x47c>)
 8001392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001396:	bf00      	nop
 8001398:	080013b5 	.word	0x080013b5
 800139c:	080013d1 	.word	0x080013d1
 80013a0:	080013ed 	.word	0x080013ed
 80013a4:	08001409 	.word	0x08001409
 80013a8:	08001425 	.word	0x08001425
 80013ac:	08001441 	.word	0x08001441
 80013b0:	0800145d 	.word	0x0800145d
	{
		case SINE_FUNC_MODE:

			ILI9341_Draw_Wave(245, 140, 3, Aux_OUTPUT_ICON, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 80013b4:	233c      	movs	r3, #60	; 0x3c
 80013b6:	9302      	str	r3, [sp, #8]
 80013b8:	4b36      	ldr	r3, [pc, #216]	; (8001494 <DM_DisplayFormattedOutput+0x578>)
 80013ba:	9301      	str	r3, [sp, #4]
 80013bc:	2364      	movs	r3, #100	; 0x64
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013c4:	2203      	movs	r2, #3
 80013c6:	218c      	movs	r1, #140	; 0x8c
 80013c8:	20f5      	movs	r0, #245	; 0xf5
 80013ca:	f00c ff37 	bl	800e23c <ILI9341_Draw_Wave>
			break;
 80013ce:	e053      	b.n	8001478 <DM_DisplayFormattedOutput+0x55c>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 80013d0:	233c      	movs	r3, #60	; 0x3c
 80013d2:	9302      	str	r3, [sp, #8]
 80013d4:	4b30      	ldr	r3, [pc, #192]	; (8001498 <DM_DisplayFormattedOutput+0x57c>)
 80013d6:	9301      	str	r3, [sp, #4]
 80013d8:	23c8      	movs	r3, #200	; 0xc8
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013e0:	2203      	movs	r2, #3
 80013e2:	21a0      	movs	r1, #160	; 0xa0
 80013e4:	20f5      	movs	r0, #245	; 0xf5
 80013e6:	f00c ff29 	bl	800e23c <ILI9341_Draw_Wave>
			break;
 80013ea:	e045      	b.n	8001478 <DM_DisplayFormattedOutput+0x55c>
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 80013ec:	233c      	movs	r3, #60	; 0x3c
 80013ee:	9302      	str	r3, [sp, #8]
 80013f0:	4b23      	ldr	r3, [pc, #140]	; (8001480 <DM_DisplayFormattedOutput+0x564>)
 80013f2:	9301      	str	r3, [sp, #4]
 80013f4:	23c8      	movs	r3, #200	; 0xc8
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013fc:	2203      	movs	r2, #3
 80013fe:	21a0      	movs	r1, #160	; 0xa0
 8001400:	20f5      	movs	r0, #245	; 0xf5
 8001402:	f00c ff1b 	bl	800e23c <ILI9341_Draw_Wave>
			break;
 8001406:	e037      	b.n	8001478 <DM_DisplayFormattedOutput+0x55c>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 8001408:	233c      	movs	r3, #60	; 0x3c
 800140a:	9302      	str	r3, [sp, #8]
 800140c:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <DM_DisplayFormattedOutput+0x568>)
 800140e:	9301      	str	r3, [sp, #4]
 8001410:	23c8      	movs	r3, #200	; 0xc8
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001418:	2203      	movs	r2, #3
 800141a:	21a0      	movs	r1, #160	; 0xa0
 800141c:	20f5      	movs	r0, #245	; 0xf5
 800141e:	f00c ff0d 	bl	800e23c <ILI9341_Draw_Wave>
			break;
 8001422:	e029      	b.n	8001478 <DM_DisplayFormattedOutput+0x55c>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001424:	233c      	movs	r3, #60	; 0x3c
 8001426:	9302      	str	r3, [sp, #8]
 8001428:	4b17      	ldr	r3, [pc, #92]	; (8001488 <DM_DisplayFormattedOutput+0x56c>)
 800142a:	9301      	str	r3, [sp, #4]
 800142c:	23c8      	movs	r3, #200	; 0xc8
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001434:	2203      	movs	r2, #3
 8001436:	21a0      	movs	r1, #160	; 0xa0
 8001438:	20f5      	movs	r0, #245	; 0xf5
 800143a:	f00c feff 	bl	800e23c <ILI9341_Draw_Wave>
			break;
 800143e:	e01b      	b.n	8001478 <DM_DisplayFormattedOutput+0x55c>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001440:	233c      	movs	r3, #60	; 0x3c
 8001442:	9302      	str	r3, [sp, #8]
 8001444:	4b10      	ldr	r3, [pc, #64]	; (8001488 <DM_DisplayFormattedOutput+0x56c>)
 8001446:	9301      	str	r3, [sp, #4]
 8001448:	23c8      	movs	r3, #200	; 0xc8
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001450:	2203      	movs	r2, #3
 8001452:	21a0      	movs	r1, #160	; 0xa0
 8001454:	20f5      	movs	r0, #245	; 0xf5
 8001456:	f00c fef1 	bl	800e23c <ILI9341_Draw_Wave>
			break;
 800145a:	e00d      	b.n	8001478 <DM_DisplayFormattedOutput+0x55c>
		case PWM_FUNC_MODE:
			ILI9341_Draw_Text("PWM", 245, 170, Aux_OUTPUT_ICON, text_size, NORMAL_TEXT_BGCOLOUR);
 800145c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001460:	b29b      	uxth	r3, r3
 8001462:	2200      	movs	r2, #0
 8001464:	9201      	str	r2, [sp, #4]
 8001466:	9300      	str	r3, [sp, #0]
 8001468:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800146c:	22aa      	movs	r2, #170	; 0xaa
 800146e:	21f5      	movs	r1, #245	; 0xf5
 8001470:	4806      	ldr	r0, [pc, #24]	; (800148c <DM_DisplayFormattedOutput+0x570>)
 8001472:	f00d f887 	bl	800e584 <ILI9341_Draw_Text>
			break;
 8001476:	bf00      	nop
	}



}
 8001478:	bf00      	nop
 800147a:	376c      	adds	r7, #108	; 0x6c
 800147c:	46bd      	mov	sp, r7
 800147e:	bd90      	pop	{r4, r7, pc}
 8001480:	20000c44 	.word	0x20000c44
 8001484:	20000d34 	.word	0x20000d34
 8001488:	20001004 	.word	0x20001004
 800148c:	0801354c 	.word	0x0801354c
 8001490:	08013550 	.word	0x08013550
 8001494:	20000e24 	.word	0x20000e24
 8001498:	20000f14 	.word	0x20000f14

0800149c <DM_RefreshScreen>:
 *	@param None
 *	@retval None
 *
 */
void DM_RefreshScreen()
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af04      	add	r7, sp, #16



	// pause display interrupts
	HAL_TIM_Base_Stop_IT(&htim15);
 80014a2:	4820      	ldr	r0, [pc, #128]	; (8001524 <DM_RefreshScreen+0x88>)
 80014a4:	f00a fdba 	bl	800c01c <HAL_TIM_Base_Stop_IT>


	ILI9341_Fill_Screen(SCREEN_BGCOLOUR);
 80014a8:	2000      	movs	r0, #0
 80014aa:	f00d faeb 	bl	800ea84 <ILI9341_Fill_Screen>
	GUI_DrawPolygon(Points, 3, RED);
	GUI_FillPolygon(Points2, 3, BLUE);
	GUI_DrawEllipse(250, 110, 20, 30, GREEN);
	GUI_FillEllipse(250, 110, 20, 30, WHITE);
*/
	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	0,
 80014ae:	2300      	movs	r3, #0
 80014b0:	9302      	str	r3, [sp, #8]
 80014b2:	2302      	movs	r3, #2
 80014b4:	9301      	str	r3, [sp, #4]
 80014b6:	f240 23fd 	movw	r3, #765	; 0x2fd
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	2328      	movs	r3, #40	; 0x28
 80014be:	2250      	movs	r2, #80	; 0x50
 80014c0:	21c8      	movs	r1, #200	; 0xc8
 80014c2:	2000      	movs	r0, #0
 80014c4:	f00c fefb 	bl	800e2be <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN1_FILL_COLOUR,
													BTN1_BORDER_WEIGHT,
													BTN1_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH,
 80014c8:	2300      	movs	r3, #0
 80014ca:	9302      	str	r3, [sp, #8]
 80014cc:	2302      	movs	r3, #2
 80014ce:	9301      	str	r3, [sp, #4]
 80014d0:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	2328      	movs	r3, #40	; 0x28
 80014d8:	2250      	movs	r2, #80	; 0x50
 80014da:	21c8      	movs	r1, #200	; 0xc8
 80014dc:	2050      	movs	r0, #80	; 0x50
 80014de:	f00c feee 	bl	800e2be <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN2_FILL_COLOUR,
													BTN2_BORDER_WEIGHT,
													BTN2_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*2,
 80014e2:	2300      	movs	r3, #0
 80014e4:	9302      	str	r3, [sp, #8]
 80014e6:	2302      	movs	r3, #2
 80014e8:	9301      	str	r3, [sp, #4]
 80014ea:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80014ee:	9300      	str	r3, [sp, #0]
 80014f0:	2328      	movs	r3, #40	; 0x28
 80014f2:	2250      	movs	r2, #80	; 0x50
 80014f4:	21c8      	movs	r1, #200	; 0xc8
 80014f6:	20a0      	movs	r0, #160	; 0xa0
 80014f8:	f00c fee1 	bl	800e2be <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN3_FILL_COLOUR,
													BTN3_BORDER_WEIGHT,
													BTN3_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*3,
 80014fc:	2300      	movs	r3, #0
 80014fe:	9302      	str	r3, [sp, #8]
 8001500:	2302      	movs	r3, #2
 8001502:	9301      	str	r3, [sp, #4]
 8001504:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	2328      	movs	r3, #40	; 0x28
 800150c:	2250      	movs	r2, #80	; 0x50
 800150e:	21c8      	movs	r1, #200	; 0xc8
 8001510:	20f0      	movs	r0, #240	; 0xf0
 8001512:	f00c fed4 	bl	800e2be <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN4_FILL_COLOUR,
													BTN4_BORDER_WEIGHT,
													BTN4_BORDER_COLOUR);

	// resume diaplay interrupts
	HAL_TIM_Base_Start_IT(&htim15);
 8001516:	4803      	ldr	r0, [pc, #12]	; (8001524 <DM_RefreshScreen+0x88>)
 8001518:	f00a fd4a 	bl	800bfb0 <HAL_TIM_Base_Start_IT>


}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	2000275c 	.word	0x2000275c

08001528 <DM_SetErrorDebugMsg>:
	ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
	*/
}

void DM_SetErrorDebugMsg(char* msg)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af02      	add	r7, sp, #8
 800152e:	6078      	str	r0, [r7, #4]
	snprintf(ErrorDebugMsg, sizeof(ErrorDebugMsg), "%s", msg);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a0a      	ldr	r2, [pc, #40]	; (800155c <DM_SetErrorDebugMsg+0x34>)
 8001534:	212d      	movs	r1, #45	; 0x2d
 8001536:	480a      	ldr	r0, [pc, #40]	; (8001560 <DM_SetErrorDebugMsg+0x38>)
 8001538:	f00e fbe0 	bl	800fcfc <sniprintf>
	ILI9341_Draw_Text(ErrorDebugMsg, 10, 190, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 800153c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001540:	9301      	str	r3, [sp, #4]
 8001542:	2301      	movs	r3, #1
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	2300      	movs	r3, #0
 8001548:	22be      	movs	r2, #190	; 0xbe
 800154a:	210a      	movs	r1, #10
 800154c:	4804      	ldr	r0, [pc, #16]	; (8001560 <DM_SetErrorDebugMsg+0x38>)
 800154e:	f00d f819 	bl	800e584 <ILI9341_Draw_Text>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	080135dc 	.word	0x080135dc
 8001560:	20001e24 	.word	0x20001e24

08001564 <FreqMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMenu(eFreqMenu_Status pMenu)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	3b01      	subs	r3, #1
 8001572:	2b03      	cmp	r3, #3
 8001574:	d816      	bhi.n	80015a4 <FreqMenu_DrawMenu+0x40>
 8001576:	a201      	add	r2, pc, #4	; (adr r2, 800157c <FreqMenu_DrawMenu+0x18>)
 8001578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800157c:	0800158d 	.word	0x0800158d
 8001580:	08001593 	.word	0x08001593
 8001584:	08001599 	.word	0x08001599
 8001588:	0800159f 	.word	0x0800159f
	{
		case ENABLE_FREQ_MAIN_MENU:
			FreqMenu_DrawMainMenu();
 800158c:	f000 f810 	bl	80015b0 <FreqMenu_DrawMainMenu>
			break;
 8001590:	e009      	b.n	80015a6 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_PRESET_MENU:
			FreqMenu_DrawPresetMenu();
 8001592:	f000 f849 	bl	8001628 <FreqMenu_DrawPresetMenu>
			break;
 8001596:	e006      	b.n	80015a6 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_ADJUST_MENU:
			FreqMenu_DrawAdjustMenu();
 8001598:	f001 faf4 	bl	8002b84 <FreqMenu_DrawAdjustMenu>
			break;
 800159c:	e003      	b.n	80015a6 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_SWEEP_MENU:
			FreqMenu_DrawSweepMenu();
 800159e:	f001 fb07 	bl	8002bb0 <FreqMenu_DrawSweepMenu>
			break;
 80015a2:	e000      	b.n	80015a6 <FreqMenu_DrawMenu+0x42>

		default:
			break;
 80015a4:	bf00      	nop

	}
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop

080015b0 <FreqMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMainMenu()
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af02      	add	r7, sp, #8
	// main
	ILI9341_Draw_Text("OUT->FREQ", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80015b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015ba:	9301      	str	r3, [sp, #4]
 80015bc:	2302      	movs	r3, #2
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	2300      	movs	r3, #0
 80015c2:	220a      	movs	r2, #10
 80015c4:	2105      	movs	r1, #5
 80015c6:	4814      	ldr	r0, [pc, #80]	; (8001618 <FreqMenu_DrawMainMenu+0x68>)
 80015c8:	f00c ffdc 	bl	800e584 <ILI9341_Draw_Text>
//	ILI9341_Draw_Text("Select an option below", 	30, 165, BLACK, 2, WHITE);

	DM_DisplayFormattedOutput();
 80015cc:	f7ff fca6 	bl	8000f1c <DM_DisplayFormattedOutput>

	// buttons
	ILI9341_Draw_Text("PRESET", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80015d0:	f240 23fd 	movw	r3, #765	; 0x2fd
 80015d4:	9301      	str	r3, [sp, #4]
 80015d6:	2302      	movs	r3, #2
 80015d8:	9300      	str	r3, [sp, #0]
 80015da:	2300      	movs	r3, #0
 80015dc:	22d2      	movs	r2, #210	; 0xd2
 80015de:	2105      	movs	r1, #5
 80015e0:	480e      	ldr	r0, [pc, #56]	; (800161c <FreqMenu_DrawMainMenu+0x6c>)
 80015e2:	f00c ffcf 	bl	800e584 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("ADJUST", 86,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80015e6:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80015ea:	9301      	str	r3, [sp, #4]
 80015ec:	2302      	movs	r3, #2
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	2300      	movs	r3, #0
 80015f2:	22d2      	movs	r2, #210	; 0xd2
 80015f4:	2156      	movs	r1, #86	; 0x56
 80015f6:	480a      	ldr	r0, [pc, #40]	; (8001620 <FreqMenu_DrawMainMenu+0x70>)
 80015f8:	f00c ffc4 	bl	800e584 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SWEEP",  173, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80015fc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001600:	9301      	str	r3, [sp, #4]
 8001602:	2302      	movs	r3, #2
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	2300      	movs	r3, #0
 8001608:	22d2      	movs	r2, #210	; 0xd2
 800160a:	21ad      	movs	r1, #173	; 0xad
 800160c:	4805      	ldr	r0, [pc, #20]	; (8001624 <FreqMenu_DrawMainMenu+0x74>)
 800160e:	f00c ffb9 	bl	800e584 <ILI9341_Draw_Text>
	//ILI9341_Draw_Text("    ", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	080135e0 	.word	0x080135e0
 800161c:	080135ec 	.word	0x080135ec
 8001620:	080135f4 	.word	0x080135f4
 8001624:	080135fc 	.word	0x080135fc

08001628 <FreqMenu_DrawPresetMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawPresetMenu()
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->FREQ->PRESET", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 800162e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001632:	9301      	str	r3, [sp, #4]
 8001634:	2302      	movs	r3, #2
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	2300      	movs	r3, #0
 800163a:	220a      	movs	r2, #10
 800163c:	2105      	movs	r1, #5
 800163e:	4886      	ldr	r0, [pc, #536]	; (8001858 <FreqMenu_DrawPresetMenu+0x230>)
 8001640:	f00c ffa0 	bl	800e584 <ILI9341_Draw_Text>
	uint8_t menu_pos_y1 = 40;
 8001644:	2328      	movs	r3, #40	; 0x28
 8001646:	73fb      	strb	r3, [r7, #15]
	uint8_t menu_pos_y2 = 60;
 8001648:	233c      	movs	r3, #60	; 0x3c
 800164a:	73bb      	strb	r3, [r7, #14]
	uint8_t menu_pos_y3 = 80;
 800164c:	2350      	movs	r3, #80	; 0x50
 800164e:	737b      	strb	r3, [r7, #13]
	uint8_t menu_pos_y4 = 100;
 8001650:	2364      	movs	r3, #100	; 0x64
 8001652:	733b      	strb	r3, [r7, #12]
	uint8_t menu_pos_y5 = 120;
 8001654:	2378      	movs	r3, #120	; 0x78
 8001656:	72fb      	strb	r3, [r7, #11]
	uint8_t menu_pos_y6 = 140;
 8001658:	238c      	movs	r3, #140	; 0x8c
 800165a:	72bb      	strb	r3, [r7, #10]
	uint8_t menu_pos_y7 = 160;
 800165c:	23a0      	movs	r3, #160	; 0xa0
 800165e:	727b      	strb	r3, [r7, #9]
	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8001660:	f003 fcde 	bl	8005020 <FreqO_GetFPresetObject>
 8001664:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	f001 825d 	beq.w	8002b28 <FreqMenu_DrawPresetMenu+0x1500>
	{
		switch(pFreqPresetTmp->hertz)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001676:	4293      	cmp	r3, r2
 8001678:	f000 849a 	beq.w	8001fb0 <FreqMenu_DrawPresetMenu+0x988>
 800167c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001680:	4293      	cmp	r3, r2
 8001682:	d817      	bhi.n	80016b4 <FreqMenu_DrawPresetMenu+0x8c>
 8001684:	2b32      	cmp	r3, #50	; 0x32
 8001686:	f000 81b3 	beq.w	80019f0 <FreqMenu_DrawPresetMenu+0x3c8>
 800168a:	2b32      	cmp	r3, #50	; 0x32
 800168c:	d806      	bhi.n	800169c <FreqMenu_DrawPresetMenu+0x74>
 800168e:	2b01      	cmp	r3, #1
 8001690:	d038      	beq.n	8001704 <FreqMenu_DrawPresetMenu+0xdc>
 8001692:	2b0a      	cmp	r3, #10
 8001694:	f000 8102 	beq.w	800189c <FreqMenu_DrawPresetMenu+0x274>
	else
	{
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
	}

}
 8001698:	f001 ba52 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 800169c:	2bfa      	cmp	r3, #250	; 0xfa
 800169e:	f000 8317 	beq.w	8001cd0 <FreqMenu_DrawPresetMenu+0x6a8>
 80016a2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016a6:	f000 83d9 	beq.w	8001e5c <FreqMenu_DrawPresetMenu+0x834>
 80016aa:	2b64      	cmp	r3, #100	; 0x64
 80016ac:	f000 8266 	beq.w	8001b7c <FreqMenu_DrawPresetMenu+0x554>
}
 80016b0:	f001 ba46 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 80016b4:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80016b8:	4293      	cmp	r3, r2
 80016ba:	f000 8758 	beq.w	800256e <FreqMenu_DrawPresetMenu+0xf46>
 80016be:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d80f      	bhi.n	80016e6 <FreqMenu_DrawPresetMenu+0xbe>
 80016c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ca:	4293      	cmp	r3, r2
 80016cc:	f000 85e0 	beq.w	8002290 <FreqMenu_DrawPresetMenu+0xc68>
 80016d0:	f242 7210 	movw	r2, #10000	; 0x2710
 80016d4:	4293      	cmp	r3, r2
 80016d6:	f000 86a1 	beq.w	800241c <FreqMenu_DrawPresetMenu+0xdf4>
 80016da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016de:	f000 852d 	beq.w	800213c <FreqMenu_DrawPresetMenu+0xb14>
}
 80016e2:	f001 ba2d 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 80016e6:	4a5d      	ldr	r2, [pc, #372]	; (800185c <FreqMenu_DrawPresetMenu+0x234>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	f001 80ae 	beq.w	800284a <FreqMenu_DrawPresetMenu+0x1222>
 80016ee:	4a5c      	ldr	r2, [pc, #368]	; (8001860 <FreqMenu_DrawPresetMenu+0x238>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	f001 816f 	beq.w	80029d4 <FreqMenu_DrawPresetMenu+0x13ac>
 80016f6:	f24c 3250 	movw	r2, #50000	; 0xc350
 80016fa:	4293      	cmp	r3, r2
 80016fc:	f000 87fc 	beq.w	80026f8 <FreqMenu_DrawPresetMenu+0x10d0>
}
 8001700:	f001 ba1e 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	b29a      	uxth	r2, r3
 8001708:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800170c:	9301      	str	r3, [sp, #4]
 800170e:	2302      	movs	r3, #2
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	2300      	movs	r3, #0
 8001714:	2105      	movs	r1, #5
 8001716:	4853      	ldr	r0, [pc, #332]	; (8001864 <FreqMenu_DrawPresetMenu+0x23c>)
 8001718:	f00c ff34 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800171c:	7bbb      	ldrb	r3, [r7, #14]
 800171e:	b29a      	uxth	r2, r3
 8001720:	2300      	movs	r3, #0
 8001722:	9301      	str	r3, [sp, #4]
 8001724:	2302      	movs	r3, #2
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800172c:	2105      	movs	r1, #5
 800172e:	484e      	ldr	r0, [pc, #312]	; (8001868 <FreqMenu_DrawPresetMenu+0x240>)
 8001730:	f00c ff28 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001734:	7b7b      	ldrb	r3, [r7, #13]
 8001736:	b29a      	uxth	r2, r3
 8001738:	2300      	movs	r3, #0
 800173a:	9301      	str	r3, [sp, #4]
 800173c:	2302      	movs	r3, #2
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001744:	2105      	movs	r1, #5
 8001746:	4849      	ldr	r0, [pc, #292]	; (800186c <FreqMenu_DrawPresetMenu+0x244>)
 8001748:	f00c ff1c 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800174c:	7b3b      	ldrb	r3, [r7, #12]
 800174e:	b29a      	uxth	r2, r3
 8001750:	2300      	movs	r3, #0
 8001752:	9301      	str	r3, [sp, #4]
 8001754:	2302      	movs	r3, #2
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800175c:	2105      	movs	r1, #5
 800175e:	4844      	ldr	r0, [pc, #272]	; (8001870 <FreqMenu_DrawPresetMenu+0x248>)
 8001760:	f00c ff10 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001764:	7afb      	ldrb	r3, [r7, #11]
 8001766:	b29a      	uxth	r2, r3
 8001768:	2300      	movs	r3, #0
 800176a:	9301      	str	r3, [sp, #4]
 800176c:	2302      	movs	r3, #2
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001774:	2105      	movs	r1, #5
 8001776:	483f      	ldr	r0, [pc, #252]	; (8001874 <FreqMenu_DrawPresetMenu+0x24c>)
 8001778:	f00c ff04 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800177c:	7abb      	ldrb	r3, [r7, #10]
 800177e:	b29a      	uxth	r2, r3
 8001780:	2300      	movs	r3, #0
 8001782:	9301      	str	r3, [sp, #4]
 8001784:	2302      	movs	r3, #2
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800178c:	2105      	movs	r1, #5
 800178e:	483a      	ldr	r0, [pc, #232]	; (8001878 <FreqMenu_DrawPresetMenu+0x250>)
 8001790:	f00c fef8 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001794:	7a7b      	ldrb	r3, [r7, #9]
 8001796:	b29a      	uxth	r2, r3
 8001798:	2300      	movs	r3, #0
 800179a:	9301      	str	r3, [sp, #4]
 800179c:	2302      	movs	r3, #2
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017a4:	2105      	movs	r1, #5
 80017a6:	4835      	ldr	r0, [pc, #212]	; (800187c <FreqMenu_DrawPresetMenu+0x254>)
 80017a8:	f00c feec 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	2300      	movs	r3, #0
 80017b2:	9301      	str	r3, [sp, #4]
 80017b4:	2302      	movs	r3, #2
 80017b6:	9300      	str	r3, [sp, #0]
 80017b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017bc:	2178      	movs	r1, #120	; 0x78
 80017be:	4830      	ldr	r0, [pc, #192]	; (8001880 <FreqMenu_DrawPresetMenu+0x258>)
 80017c0:	f00c fee0 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017c4:	7bbb      	ldrb	r3, [r7, #14]
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	2300      	movs	r3, #0
 80017ca:	9301      	str	r3, [sp, #4]
 80017cc:	2302      	movs	r3, #2
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017d4:	2178      	movs	r1, #120	; 0x78
 80017d6:	482b      	ldr	r0, [pc, #172]	; (8001884 <FreqMenu_DrawPresetMenu+0x25c>)
 80017d8:	f00c fed4 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017dc:	7b7b      	ldrb	r3, [r7, #13]
 80017de:	b29a      	uxth	r2, r3
 80017e0:	2300      	movs	r3, #0
 80017e2:	9301      	str	r3, [sp, #4]
 80017e4:	2302      	movs	r3, #2
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017ec:	2178      	movs	r1, #120	; 0x78
 80017ee:	4826      	ldr	r0, [pc, #152]	; (8001888 <FreqMenu_DrawPresetMenu+0x260>)
 80017f0:	f00c fec8 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017f4:	7b3b      	ldrb	r3, [r7, #12]
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	2300      	movs	r3, #0
 80017fa:	9301      	str	r3, [sp, #4]
 80017fc:	2302      	movs	r3, #2
 80017fe:	9300      	str	r3, [sp, #0]
 8001800:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001804:	2178      	movs	r1, #120	; 0x78
 8001806:	4821      	ldr	r0, [pc, #132]	; (800188c <FreqMenu_DrawPresetMenu+0x264>)
 8001808:	f00c febc 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800180c:	7afb      	ldrb	r3, [r7, #11]
 800180e:	b29a      	uxth	r2, r3
 8001810:	2300      	movs	r3, #0
 8001812:	9301      	str	r3, [sp, #4]
 8001814:	2302      	movs	r3, #2
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800181c:	2178      	movs	r1, #120	; 0x78
 800181e:	481c      	ldr	r0, [pc, #112]	; (8001890 <FreqMenu_DrawPresetMenu+0x268>)
 8001820:	f00c feb0 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001824:	7abb      	ldrb	r3, [r7, #10]
 8001826:	b29a      	uxth	r2, r3
 8001828:	2300      	movs	r3, #0
 800182a:	9301      	str	r3, [sp, #4]
 800182c:	2302      	movs	r3, #2
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001834:	2178      	movs	r1, #120	; 0x78
 8001836:	4817      	ldr	r0, [pc, #92]	; (8001894 <FreqMenu_DrawPresetMenu+0x26c>)
 8001838:	f00c fea4 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800183c:	7a7b      	ldrb	r3, [r7, #9]
 800183e:	b29a      	uxth	r2, r3
 8001840:	2300      	movs	r3, #0
 8001842:	9301      	str	r3, [sp, #4]
 8001844:	2302      	movs	r3, #2
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800184c:	2178      	movs	r1, #120	; 0x78
 800184e:	4812      	ldr	r0, [pc, #72]	; (8001898 <FreqMenu_DrawPresetMenu+0x270>)
 8001850:	f00c fe98 	bl	800e584 <ILI9341_Draw_Text>
				break;
 8001854:	f001 b974 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
 8001858:	08013604 	.word	0x08013604
 800185c:	000124f8 	.word	0x000124f8
 8001860:	000186a0 	.word	0x000186a0
 8001864:	08013618 	.word	0x08013618
 8001868:	08013620 	.word	0x08013620
 800186c:	08013628 	.word	0x08013628
 8001870:	08013630 	.word	0x08013630
 8001874:	08013638 	.word	0x08013638
 8001878:	08013640 	.word	0x08013640
 800187c:	08013648 	.word	0x08013648
 8001880:	08013650 	.word	0x08013650
 8001884:	08013658 	.word	0x08013658
 8001888:	08013660 	.word	0x08013660
 800188c:	08013668 	.word	0x08013668
 8001890:	08013670 	.word	0x08013670
 8001894:	08013678 	.word	0x08013678
 8001898:	08013680 	.word	0x08013680
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	b29a      	uxth	r2, r3
 80018a0:	2300      	movs	r3, #0
 80018a2:	9301      	str	r3, [sp, #4]
 80018a4:	2302      	movs	r3, #2
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018ac:	2105      	movs	r1, #5
 80018ae:	48a5      	ldr	r0, [pc, #660]	; (8001b44 <FreqMenu_DrawPresetMenu+0x51c>)
 80018b0:	f00c fe68 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80018b4:	7bbb      	ldrb	r3, [r7, #14]
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80018bc:	9301      	str	r3, [sp, #4]
 80018be:	2302      	movs	r3, #2
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	2300      	movs	r3, #0
 80018c4:	2105      	movs	r1, #5
 80018c6:	48a0      	ldr	r0, [pc, #640]	; (8001b48 <FreqMenu_DrawPresetMenu+0x520>)
 80018c8:	f00c fe5c 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018cc:	7b7b      	ldrb	r3, [r7, #13]
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	2300      	movs	r3, #0
 80018d2:	9301      	str	r3, [sp, #4]
 80018d4:	2302      	movs	r3, #2
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018dc:	2105      	movs	r1, #5
 80018de:	489b      	ldr	r0, [pc, #620]	; (8001b4c <FreqMenu_DrawPresetMenu+0x524>)
 80018e0:	f00c fe50 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018e4:	7b3b      	ldrb	r3, [r7, #12]
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	2300      	movs	r3, #0
 80018ea:	9301      	str	r3, [sp, #4]
 80018ec:	2302      	movs	r3, #2
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018f4:	2105      	movs	r1, #5
 80018f6:	4896      	ldr	r0, [pc, #600]	; (8001b50 <FreqMenu_DrawPresetMenu+0x528>)
 80018f8:	f00c fe44 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018fc:	7afb      	ldrb	r3, [r7, #11]
 80018fe:	b29a      	uxth	r2, r3
 8001900:	2300      	movs	r3, #0
 8001902:	9301      	str	r3, [sp, #4]
 8001904:	2302      	movs	r3, #2
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800190c:	2105      	movs	r1, #5
 800190e:	4891      	ldr	r0, [pc, #580]	; (8001b54 <FreqMenu_DrawPresetMenu+0x52c>)
 8001910:	f00c fe38 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001914:	7abb      	ldrb	r3, [r7, #10]
 8001916:	b29a      	uxth	r2, r3
 8001918:	2300      	movs	r3, #0
 800191a:	9301      	str	r3, [sp, #4]
 800191c:	2302      	movs	r3, #2
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001924:	2105      	movs	r1, #5
 8001926:	488c      	ldr	r0, [pc, #560]	; (8001b58 <FreqMenu_DrawPresetMenu+0x530>)
 8001928:	f00c fe2c 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800192c:	7a7b      	ldrb	r3, [r7, #9]
 800192e:	b29a      	uxth	r2, r3
 8001930:	2300      	movs	r3, #0
 8001932:	9301      	str	r3, [sp, #4]
 8001934:	2302      	movs	r3, #2
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800193c:	2105      	movs	r1, #5
 800193e:	4887      	ldr	r0, [pc, #540]	; (8001b5c <FreqMenu_DrawPresetMenu+0x534>)
 8001940:	f00c fe20 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001944:	7bfb      	ldrb	r3, [r7, #15]
 8001946:	b29a      	uxth	r2, r3
 8001948:	2300      	movs	r3, #0
 800194a:	9301      	str	r3, [sp, #4]
 800194c:	2302      	movs	r3, #2
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001954:	2178      	movs	r1, #120	; 0x78
 8001956:	4882      	ldr	r0, [pc, #520]	; (8001b60 <FreqMenu_DrawPresetMenu+0x538>)
 8001958:	f00c fe14 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800195c:	7bbb      	ldrb	r3, [r7, #14]
 800195e:	b29a      	uxth	r2, r3
 8001960:	2300      	movs	r3, #0
 8001962:	9301      	str	r3, [sp, #4]
 8001964:	2302      	movs	r3, #2
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800196c:	2178      	movs	r1, #120	; 0x78
 800196e:	487d      	ldr	r0, [pc, #500]	; (8001b64 <FreqMenu_DrawPresetMenu+0x53c>)
 8001970:	f00c fe08 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001974:	7b7b      	ldrb	r3, [r7, #13]
 8001976:	b29a      	uxth	r2, r3
 8001978:	2300      	movs	r3, #0
 800197a:	9301      	str	r3, [sp, #4]
 800197c:	2302      	movs	r3, #2
 800197e:	9300      	str	r3, [sp, #0]
 8001980:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001984:	2178      	movs	r1, #120	; 0x78
 8001986:	4878      	ldr	r0, [pc, #480]	; (8001b68 <FreqMenu_DrawPresetMenu+0x540>)
 8001988:	f00c fdfc 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800198c:	7b3b      	ldrb	r3, [r7, #12]
 800198e:	b29a      	uxth	r2, r3
 8001990:	2300      	movs	r3, #0
 8001992:	9301      	str	r3, [sp, #4]
 8001994:	2302      	movs	r3, #2
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800199c:	2178      	movs	r1, #120	; 0x78
 800199e:	4873      	ldr	r0, [pc, #460]	; (8001b6c <FreqMenu_DrawPresetMenu+0x544>)
 80019a0:	f00c fdf0 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019a4:	7afb      	ldrb	r3, [r7, #11]
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	2300      	movs	r3, #0
 80019aa:	9301      	str	r3, [sp, #4]
 80019ac:	2302      	movs	r3, #2
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019b4:	2178      	movs	r1, #120	; 0x78
 80019b6:	486e      	ldr	r0, [pc, #440]	; (8001b70 <FreqMenu_DrawPresetMenu+0x548>)
 80019b8:	f00c fde4 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019bc:	7abb      	ldrb	r3, [r7, #10]
 80019be:	b29a      	uxth	r2, r3
 80019c0:	2300      	movs	r3, #0
 80019c2:	9301      	str	r3, [sp, #4]
 80019c4:	2302      	movs	r3, #2
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019cc:	2178      	movs	r1, #120	; 0x78
 80019ce:	4869      	ldr	r0, [pc, #420]	; (8001b74 <FreqMenu_DrawPresetMenu+0x54c>)
 80019d0:	f00c fdd8 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019d4:	7a7b      	ldrb	r3, [r7, #9]
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	2300      	movs	r3, #0
 80019da:	9301      	str	r3, [sp, #4]
 80019dc:	2302      	movs	r3, #2
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019e4:	2178      	movs	r1, #120	; 0x78
 80019e6:	4864      	ldr	r0, [pc, #400]	; (8001b78 <FreqMenu_DrawPresetMenu+0x550>)
 80019e8:	f00c fdcc 	bl	800e584 <ILI9341_Draw_Text>
				break;
 80019ec:	f001 b8a8 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	2300      	movs	r3, #0
 80019f6:	9301      	str	r3, [sp, #4]
 80019f8:	2302      	movs	r3, #2
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a00:	2105      	movs	r1, #5
 8001a02:	4850      	ldr	r0, [pc, #320]	; (8001b44 <FreqMenu_DrawPresetMenu+0x51c>)
 8001a04:	f00c fdbe 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a08:	7bbb      	ldrb	r3, [r7, #14]
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	9301      	str	r3, [sp, #4]
 8001a10:	2302      	movs	r3, #2
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a18:	2105      	movs	r1, #5
 8001a1a:	484b      	ldr	r0, [pc, #300]	; (8001b48 <FreqMenu_DrawPresetMenu+0x520>)
 8001a1c:	f00c fdb2 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001a20:	7b7b      	ldrb	r3, [r7, #13]
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001a28:	9301      	str	r3, [sp, #4]
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	2300      	movs	r3, #0
 8001a30:	2105      	movs	r1, #5
 8001a32:	4846      	ldr	r0, [pc, #280]	; (8001b4c <FreqMenu_DrawPresetMenu+0x524>)
 8001a34:	f00c fda6 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a38:	7b3b      	ldrb	r3, [r7, #12]
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	9301      	str	r3, [sp, #4]
 8001a40:	2302      	movs	r3, #2
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a48:	2105      	movs	r1, #5
 8001a4a:	4841      	ldr	r0, [pc, #260]	; (8001b50 <FreqMenu_DrawPresetMenu+0x528>)
 8001a4c:	f00c fd9a 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a50:	7afb      	ldrb	r3, [r7, #11]
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	2300      	movs	r3, #0
 8001a56:	9301      	str	r3, [sp, #4]
 8001a58:	2302      	movs	r3, #2
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a60:	2105      	movs	r1, #5
 8001a62:	483c      	ldr	r0, [pc, #240]	; (8001b54 <FreqMenu_DrawPresetMenu+0x52c>)
 8001a64:	f00c fd8e 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a68:	7abb      	ldrb	r3, [r7, #10]
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	9301      	str	r3, [sp, #4]
 8001a70:	2302      	movs	r3, #2
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a78:	2105      	movs	r1, #5
 8001a7a:	4837      	ldr	r0, [pc, #220]	; (8001b58 <FreqMenu_DrawPresetMenu+0x530>)
 8001a7c:	f00c fd82 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a80:	7a7b      	ldrb	r3, [r7, #9]
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	2300      	movs	r3, #0
 8001a86:	9301      	str	r3, [sp, #4]
 8001a88:	2302      	movs	r3, #2
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a90:	2105      	movs	r1, #5
 8001a92:	4832      	ldr	r0, [pc, #200]	; (8001b5c <FreqMenu_DrawPresetMenu+0x534>)
 8001a94:	f00c fd76 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	9301      	str	r3, [sp, #4]
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001aa8:	2178      	movs	r1, #120	; 0x78
 8001aaa:	482d      	ldr	r0, [pc, #180]	; (8001b60 <FreqMenu_DrawPresetMenu+0x538>)
 8001aac:	f00c fd6a 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ab0:	7bbb      	ldrb	r3, [r7, #14]
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	9301      	str	r3, [sp, #4]
 8001ab8:	2302      	movs	r3, #2
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ac0:	2178      	movs	r1, #120	; 0x78
 8001ac2:	4828      	ldr	r0, [pc, #160]	; (8001b64 <FreqMenu_DrawPresetMenu+0x53c>)
 8001ac4:	f00c fd5e 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ac8:	7b7b      	ldrb	r3, [r7, #13]
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	2300      	movs	r3, #0
 8001ace:	9301      	str	r3, [sp, #4]
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ad8:	2178      	movs	r1, #120	; 0x78
 8001ada:	4823      	ldr	r0, [pc, #140]	; (8001b68 <FreqMenu_DrawPresetMenu+0x540>)
 8001adc:	f00c fd52 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ae0:	7b3b      	ldrb	r3, [r7, #12]
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	9301      	str	r3, [sp, #4]
 8001ae8:	2302      	movs	r3, #2
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001af0:	2178      	movs	r1, #120	; 0x78
 8001af2:	481e      	ldr	r0, [pc, #120]	; (8001b6c <FreqMenu_DrawPresetMenu+0x544>)
 8001af4:	f00c fd46 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001af8:	7afb      	ldrb	r3, [r7, #11]
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	2300      	movs	r3, #0
 8001afe:	9301      	str	r3, [sp, #4]
 8001b00:	2302      	movs	r3, #2
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b08:	2178      	movs	r1, #120	; 0x78
 8001b0a:	4819      	ldr	r0, [pc, #100]	; (8001b70 <FreqMenu_DrawPresetMenu+0x548>)
 8001b0c:	f00c fd3a 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b10:	7abb      	ldrb	r3, [r7, #10]
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	2300      	movs	r3, #0
 8001b16:	9301      	str	r3, [sp, #4]
 8001b18:	2302      	movs	r3, #2
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b20:	2178      	movs	r1, #120	; 0x78
 8001b22:	4814      	ldr	r0, [pc, #80]	; (8001b74 <FreqMenu_DrawPresetMenu+0x54c>)
 8001b24:	f00c fd2e 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b28:	7a7b      	ldrb	r3, [r7, #9]
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	9301      	str	r3, [sp, #4]
 8001b30:	2302      	movs	r3, #2
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b38:	2178      	movs	r1, #120	; 0x78
 8001b3a:	480f      	ldr	r0, [pc, #60]	; (8001b78 <FreqMenu_DrawPresetMenu+0x550>)
 8001b3c:	f00c fd22 	bl	800e584 <ILI9341_Draw_Text>
				break;
 8001b40:	f000 bffe 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
 8001b44:	08013618 	.word	0x08013618
 8001b48:	08013620 	.word	0x08013620
 8001b4c:	08013628 	.word	0x08013628
 8001b50:	08013630 	.word	0x08013630
 8001b54:	08013638 	.word	0x08013638
 8001b58:	08013640 	.word	0x08013640
 8001b5c:	08013648 	.word	0x08013648
 8001b60:	08013650 	.word	0x08013650
 8001b64:	08013658 	.word	0x08013658
 8001b68:	08013660 	.word	0x08013660
 8001b6c:	08013668 	.word	0x08013668
 8001b70:	08013670 	.word	0x08013670
 8001b74:	08013678 	.word	0x08013678
 8001b78:	08013680 	.word	0x08013680
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	2300      	movs	r3, #0
 8001b82:	9301      	str	r3, [sp, #4]
 8001b84:	2302      	movs	r3, #2
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b8c:	2105      	movs	r1, #5
 8001b8e:	48a5      	ldr	r0, [pc, #660]	; (8001e24 <FreqMenu_DrawPresetMenu+0x7fc>)
 8001b90:	f00c fcf8 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b94:	7bbb      	ldrb	r3, [r7, #14]
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	2300      	movs	r3, #0
 8001b9a:	9301      	str	r3, [sp, #4]
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ba4:	2105      	movs	r1, #5
 8001ba6:	48a0      	ldr	r0, [pc, #640]	; (8001e28 <FreqMenu_DrawPresetMenu+0x800>)
 8001ba8:	f00c fcec 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bac:	7b7b      	ldrb	r3, [r7, #13]
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	9301      	str	r3, [sp, #4]
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bbc:	2105      	movs	r1, #5
 8001bbe:	489b      	ldr	r0, [pc, #620]	; (8001e2c <FreqMenu_DrawPresetMenu+0x804>)
 8001bc0:	f00c fce0 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001bc4:	7b3b      	ldrb	r3, [r7, #12]
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001bcc:	9301      	str	r3, [sp, #4]
 8001bce:	2302      	movs	r3, #2
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	2105      	movs	r1, #5
 8001bd6:	4896      	ldr	r0, [pc, #600]	; (8001e30 <FreqMenu_DrawPresetMenu+0x808>)
 8001bd8:	f00c fcd4 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bdc:	7afb      	ldrb	r3, [r7, #11]
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	2300      	movs	r3, #0
 8001be2:	9301      	str	r3, [sp, #4]
 8001be4:	2302      	movs	r3, #2
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bec:	2105      	movs	r1, #5
 8001bee:	4891      	ldr	r0, [pc, #580]	; (8001e34 <FreqMenu_DrawPresetMenu+0x80c>)
 8001bf0:	f00c fcc8 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bf4:	7abb      	ldrb	r3, [r7, #10]
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	9301      	str	r3, [sp, #4]
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c04:	2105      	movs	r1, #5
 8001c06:	488c      	ldr	r0, [pc, #560]	; (8001e38 <FreqMenu_DrawPresetMenu+0x810>)
 8001c08:	f00c fcbc 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c0c:	7a7b      	ldrb	r3, [r7, #9]
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	2300      	movs	r3, #0
 8001c12:	9301      	str	r3, [sp, #4]
 8001c14:	2302      	movs	r3, #2
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c1c:	2105      	movs	r1, #5
 8001c1e:	4887      	ldr	r0, [pc, #540]	; (8001e3c <FreqMenu_DrawPresetMenu+0x814>)
 8001c20:	f00c fcb0 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	2300      	movs	r3, #0
 8001c2a:	9301      	str	r3, [sp, #4]
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c34:	2178      	movs	r1, #120	; 0x78
 8001c36:	4882      	ldr	r0, [pc, #520]	; (8001e40 <FreqMenu_DrawPresetMenu+0x818>)
 8001c38:	f00c fca4 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c3c:	7bbb      	ldrb	r3, [r7, #14]
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	2300      	movs	r3, #0
 8001c42:	9301      	str	r3, [sp, #4]
 8001c44:	2302      	movs	r3, #2
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c4c:	2178      	movs	r1, #120	; 0x78
 8001c4e:	487d      	ldr	r0, [pc, #500]	; (8001e44 <FreqMenu_DrawPresetMenu+0x81c>)
 8001c50:	f00c fc98 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c54:	7b7b      	ldrb	r3, [r7, #13]
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	2300      	movs	r3, #0
 8001c5a:	9301      	str	r3, [sp, #4]
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c64:	2178      	movs	r1, #120	; 0x78
 8001c66:	4878      	ldr	r0, [pc, #480]	; (8001e48 <FreqMenu_DrawPresetMenu+0x820>)
 8001c68:	f00c fc8c 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c6c:	7b3b      	ldrb	r3, [r7, #12]
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	2300      	movs	r3, #0
 8001c72:	9301      	str	r3, [sp, #4]
 8001c74:	2302      	movs	r3, #2
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c7c:	2178      	movs	r1, #120	; 0x78
 8001c7e:	4873      	ldr	r0, [pc, #460]	; (8001e4c <FreqMenu_DrawPresetMenu+0x824>)
 8001c80:	f00c fc80 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c84:	7afb      	ldrb	r3, [r7, #11]
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	2300      	movs	r3, #0
 8001c8a:	9301      	str	r3, [sp, #4]
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c94:	2178      	movs	r1, #120	; 0x78
 8001c96:	486e      	ldr	r0, [pc, #440]	; (8001e50 <FreqMenu_DrawPresetMenu+0x828>)
 8001c98:	f00c fc74 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c9c:	7abb      	ldrb	r3, [r7, #10]
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	9301      	str	r3, [sp, #4]
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cac:	2178      	movs	r1, #120	; 0x78
 8001cae:	4869      	ldr	r0, [pc, #420]	; (8001e54 <FreqMenu_DrawPresetMenu+0x82c>)
 8001cb0:	f00c fc68 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cb4:	7a7b      	ldrb	r3, [r7, #9]
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	2300      	movs	r3, #0
 8001cba:	9301      	str	r3, [sp, #4]
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cc4:	2178      	movs	r1, #120	; 0x78
 8001cc6:	4864      	ldr	r0, [pc, #400]	; (8001e58 <FreqMenu_DrawPresetMenu+0x830>)
 8001cc8:	f00c fc5c 	bl	800e584 <ILI9341_Draw_Text>
				break;
 8001ccc:	f000 bf38 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cd0:	7bfb      	ldrb	r3, [r7, #15]
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	9301      	str	r3, [sp, #4]
 8001cd8:	2302      	movs	r3, #2
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ce0:	2105      	movs	r1, #5
 8001ce2:	4850      	ldr	r0, [pc, #320]	; (8001e24 <FreqMenu_DrawPresetMenu+0x7fc>)
 8001ce4:	f00c fc4e 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ce8:	7bbb      	ldrb	r3, [r7, #14]
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	2300      	movs	r3, #0
 8001cee:	9301      	str	r3, [sp, #4]
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cf8:	2105      	movs	r1, #5
 8001cfa:	484b      	ldr	r0, [pc, #300]	; (8001e28 <FreqMenu_DrawPresetMenu+0x800>)
 8001cfc:	f00c fc42 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d00:	7b7b      	ldrb	r3, [r7, #13]
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	2300      	movs	r3, #0
 8001d06:	9301      	str	r3, [sp, #4]
 8001d08:	2302      	movs	r3, #2
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d10:	2105      	movs	r1, #5
 8001d12:	4846      	ldr	r0, [pc, #280]	; (8001e2c <FreqMenu_DrawPresetMenu+0x804>)
 8001d14:	f00c fc36 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d18:	7b3b      	ldrb	r3, [r7, #12]
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	9301      	str	r3, [sp, #4]
 8001d20:	2302      	movs	r3, #2
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d28:	2105      	movs	r1, #5
 8001d2a:	4841      	ldr	r0, [pc, #260]	; (8001e30 <FreqMenu_DrawPresetMenu+0x808>)
 8001d2c:	f00c fc2a 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001d30:	7afb      	ldrb	r3, [r7, #11]
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001d38:	9301      	str	r3, [sp, #4]
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	2300      	movs	r3, #0
 8001d40:	2105      	movs	r1, #5
 8001d42:	483c      	ldr	r0, [pc, #240]	; (8001e34 <FreqMenu_DrawPresetMenu+0x80c>)
 8001d44:	f00c fc1e 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d48:	7abb      	ldrb	r3, [r7, #10]
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	9301      	str	r3, [sp, #4]
 8001d50:	2302      	movs	r3, #2
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d58:	2105      	movs	r1, #5
 8001d5a:	4837      	ldr	r0, [pc, #220]	; (8001e38 <FreqMenu_DrawPresetMenu+0x810>)
 8001d5c:	f00c fc12 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d60:	7a7b      	ldrb	r3, [r7, #9]
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	2300      	movs	r3, #0
 8001d66:	9301      	str	r3, [sp, #4]
 8001d68:	2302      	movs	r3, #2
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d70:	2105      	movs	r1, #5
 8001d72:	4832      	ldr	r0, [pc, #200]	; (8001e3c <FreqMenu_DrawPresetMenu+0x814>)
 8001d74:	f00c fc06 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	9301      	str	r3, [sp, #4]
 8001d80:	2302      	movs	r3, #2
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d88:	2178      	movs	r1, #120	; 0x78
 8001d8a:	482d      	ldr	r0, [pc, #180]	; (8001e40 <FreqMenu_DrawPresetMenu+0x818>)
 8001d8c:	f00c fbfa 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d90:	7bbb      	ldrb	r3, [r7, #14]
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	2300      	movs	r3, #0
 8001d96:	9301      	str	r3, [sp, #4]
 8001d98:	2302      	movs	r3, #2
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001da0:	2178      	movs	r1, #120	; 0x78
 8001da2:	4828      	ldr	r0, [pc, #160]	; (8001e44 <FreqMenu_DrawPresetMenu+0x81c>)
 8001da4:	f00c fbee 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001da8:	7b7b      	ldrb	r3, [r7, #13]
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	2300      	movs	r3, #0
 8001dae:	9301      	str	r3, [sp, #4]
 8001db0:	2302      	movs	r3, #2
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001db8:	2178      	movs	r1, #120	; 0x78
 8001dba:	4823      	ldr	r0, [pc, #140]	; (8001e48 <FreqMenu_DrawPresetMenu+0x820>)
 8001dbc:	f00c fbe2 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001dc0:	7b3b      	ldrb	r3, [r7, #12]
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	9301      	str	r3, [sp, #4]
 8001dc8:	2302      	movs	r3, #2
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001dd0:	2178      	movs	r1, #120	; 0x78
 8001dd2:	481e      	ldr	r0, [pc, #120]	; (8001e4c <FreqMenu_DrawPresetMenu+0x824>)
 8001dd4:	f00c fbd6 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001dd8:	7afb      	ldrb	r3, [r7, #11]
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	2300      	movs	r3, #0
 8001dde:	9301      	str	r3, [sp, #4]
 8001de0:	2302      	movs	r3, #2
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001de8:	2178      	movs	r1, #120	; 0x78
 8001dea:	4819      	ldr	r0, [pc, #100]	; (8001e50 <FreqMenu_DrawPresetMenu+0x828>)
 8001dec:	f00c fbca 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001df0:	7abb      	ldrb	r3, [r7, #10]
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	2300      	movs	r3, #0
 8001df6:	9301      	str	r3, [sp, #4]
 8001df8:	2302      	movs	r3, #2
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e00:	2178      	movs	r1, #120	; 0x78
 8001e02:	4814      	ldr	r0, [pc, #80]	; (8001e54 <FreqMenu_DrawPresetMenu+0x82c>)
 8001e04:	f00c fbbe 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e08:	7a7b      	ldrb	r3, [r7, #9]
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	9301      	str	r3, [sp, #4]
 8001e10:	2302      	movs	r3, #2
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e18:	2178      	movs	r1, #120	; 0x78
 8001e1a:	480f      	ldr	r0, [pc, #60]	; (8001e58 <FreqMenu_DrawPresetMenu+0x830>)
 8001e1c:	f00c fbb2 	bl	800e584 <ILI9341_Draw_Text>
				break;
 8001e20:	f000 be8e 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
 8001e24:	08013618 	.word	0x08013618
 8001e28:	08013620 	.word	0x08013620
 8001e2c:	08013628 	.word	0x08013628
 8001e30:	08013630 	.word	0x08013630
 8001e34:	08013638 	.word	0x08013638
 8001e38:	08013640 	.word	0x08013640
 8001e3c:	08013648 	.word	0x08013648
 8001e40:	08013650 	.word	0x08013650
 8001e44:	08013658 	.word	0x08013658
 8001e48:	08013660 	.word	0x08013660
 8001e4c:	08013668 	.word	0x08013668
 8001e50:	08013670 	.word	0x08013670
 8001e54:	08013678 	.word	0x08013678
 8001e58:	08013680 	.word	0x08013680
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e5c:	7bfb      	ldrb	r3, [r7, #15]
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	2300      	movs	r3, #0
 8001e62:	9301      	str	r3, [sp, #4]
 8001e64:	2302      	movs	r3, #2
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e6c:	2105      	movs	r1, #5
 8001e6e:	48a5      	ldr	r0, [pc, #660]	; (8002104 <FreqMenu_DrawPresetMenu+0xadc>)
 8001e70:	f00c fb88 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e74:	7bbb      	ldrb	r3, [r7, #14]
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	2300      	movs	r3, #0
 8001e7a:	9301      	str	r3, [sp, #4]
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e84:	2105      	movs	r1, #5
 8001e86:	48a0      	ldr	r0, [pc, #640]	; (8002108 <FreqMenu_DrawPresetMenu+0xae0>)
 8001e88:	f00c fb7c 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e8c:	7b7b      	ldrb	r3, [r7, #13]
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	2300      	movs	r3, #0
 8001e92:	9301      	str	r3, [sp, #4]
 8001e94:	2302      	movs	r3, #2
 8001e96:	9300      	str	r3, [sp, #0]
 8001e98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e9c:	2105      	movs	r1, #5
 8001e9e:	489b      	ldr	r0, [pc, #620]	; (800210c <FreqMenu_DrawPresetMenu+0xae4>)
 8001ea0:	f00c fb70 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ea4:	7b3b      	ldrb	r3, [r7, #12]
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	9301      	str	r3, [sp, #4]
 8001eac:	2302      	movs	r3, #2
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001eb4:	2105      	movs	r1, #5
 8001eb6:	4896      	ldr	r0, [pc, #600]	; (8002110 <FreqMenu_DrawPresetMenu+0xae8>)
 8001eb8:	f00c fb64 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ebc:	7afb      	ldrb	r3, [r7, #11]
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	9301      	str	r3, [sp, #4]
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ecc:	2105      	movs	r1, #5
 8001ece:	4891      	ldr	r0, [pc, #580]	; (8002114 <FreqMenu_DrawPresetMenu+0xaec>)
 8001ed0:	f00c fb58 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001ed4:	7abb      	ldrb	r3, [r7, #10]
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001edc:	9301      	str	r3, [sp, #4]
 8001ede:	2302      	movs	r3, #2
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	2105      	movs	r1, #5
 8001ee6:	488c      	ldr	r0, [pc, #560]	; (8002118 <FreqMenu_DrawPresetMenu+0xaf0>)
 8001ee8:	f00c fb4c 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001eec:	7a7b      	ldrb	r3, [r7, #9]
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	9301      	str	r3, [sp, #4]
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001efc:	2105      	movs	r1, #5
 8001efe:	4887      	ldr	r0, [pc, #540]	; (800211c <FreqMenu_DrawPresetMenu+0xaf4>)
 8001f00:	f00c fb40 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	2300      	movs	r3, #0
 8001f0a:	9301      	str	r3, [sp, #4]
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f14:	2178      	movs	r1, #120	; 0x78
 8001f16:	4882      	ldr	r0, [pc, #520]	; (8002120 <FreqMenu_DrawPresetMenu+0xaf8>)
 8001f18:	f00c fb34 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f1c:	7bbb      	ldrb	r3, [r7, #14]
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	2300      	movs	r3, #0
 8001f22:	9301      	str	r3, [sp, #4]
 8001f24:	2302      	movs	r3, #2
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f2c:	2178      	movs	r1, #120	; 0x78
 8001f2e:	487d      	ldr	r0, [pc, #500]	; (8002124 <FreqMenu_DrawPresetMenu+0xafc>)
 8001f30:	f00c fb28 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f34:	7b7b      	ldrb	r3, [r7, #13]
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	2300      	movs	r3, #0
 8001f3a:	9301      	str	r3, [sp, #4]
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f44:	2178      	movs	r1, #120	; 0x78
 8001f46:	4878      	ldr	r0, [pc, #480]	; (8002128 <FreqMenu_DrawPresetMenu+0xb00>)
 8001f48:	f00c fb1c 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f4c:	7b3b      	ldrb	r3, [r7, #12]
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	2300      	movs	r3, #0
 8001f52:	9301      	str	r3, [sp, #4]
 8001f54:	2302      	movs	r3, #2
 8001f56:	9300      	str	r3, [sp, #0]
 8001f58:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f5c:	2178      	movs	r1, #120	; 0x78
 8001f5e:	4873      	ldr	r0, [pc, #460]	; (800212c <FreqMenu_DrawPresetMenu+0xb04>)
 8001f60:	f00c fb10 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f64:	7afb      	ldrb	r3, [r7, #11]
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	2300      	movs	r3, #0
 8001f6a:	9301      	str	r3, [sp, #4]
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	9300      	str	r3, [sp, #0]
 8001f70:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f74:	2178      	movs	r1, #120	; 0x78
 8001f76:	486e      	ldr	r0, [pc, #440]	; (8002130 <FreqMenu_DrawPresetMenu+0xb08>)
 8001f78:	f00c fb04 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f7c:	7abb      	ldrb	r3, [r7, #10]
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	2300      	movs	r3, #0
 8001f82:	9301      	str	r3, [sp, #4]
 8001f84:	2302      	movs	r3, #2
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f8c:	2178      	movs	r1, #120	; 0x78
 8001f8e:	4869      	ldr	r0, [pc, #420]	; (8002134 <FreqMenu_DrawPresetMenu+0xb0c>)
 8001f90:	f00c faf8 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f94:	7a7b      	ldrb	r3, [r7, #9]
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	2300      	movs	r3, #0
 8001f9a:	9301      	str	r3, [sp, #4]
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fa4:	2178      	movs	r1, #120	; 0x78
 8001fa6:	4864      	ldr	r0, [pc, #400]	; (8002138 <FreqMenu_DrawPresetMenu+0xb10>)
 8001fa8:	f00c faec 	bl	800e584 <ILI9341_Draw_Text>
				break;
 8001fac:	f000 bdc8 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fb0:	7bfb      	ldrb	r3, [r7, #15]
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	9301      	str	r3, [sp, #4]
 8001fb8:	2302      	movs	r3, #2
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fc0:	2105      	movs	r1, #5
 8001fc2:	4850      	ldr	r0, [pc, #320]	; (8002104 <FreqMenu_DrawPresetMenu+0xadc>)
 8001fc4:	f00c fade 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fc8:	7bbb      	ldrb	r3, [r7, #14]
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	2300      	movs	r3, #0
 8001fce:	9301      	str	r3, [sp, #4]
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fd8:	2105      	movs	r1, #5
 8001fda:	484b      	ldr	r0, [pc, #300]	; (8002108 <FreqMenu_DrawPresetMenu+0xae0>)
 8001fdc:	f00c fad2 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fe0:	7b7b      	ldrb	r3, [r7, #13]
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	9301      	str	r3, [sp, #4]
 8001fe8:	2302      	movs	r3, #2
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ff0:	2105      	movs	r1, #5
 8001ff2:	4846      	ldr	r0, [pc, #280]	; (800210c <FreqMenu_DrawPresetMenu+0xae4>)
 8001ff4:	f00c fac6 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ff8:	7b3b      	ldrb	r3, [r7, #12]
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	9301      	str	r3, [sp, #4]
 8002000:	2302      	movs	r3, #2
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002008:	2105      	movs	r1, #5
 800200a:	4841      	ldr	r0, [pc, #260]	; (8002110 <FreqMenu_DrawPresetMenu+0xae8>)
 800200c:	f00c faba 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002010:	7afb      	ldrb	r3, [r7, #11]
 8002012:	b29a      	uxth	r2, r3
 8002014:	2300      	movs	r3, #0
 8002016:	9301      	str	r3, [sp, #4]
 8002018:	2302      	movs	r3, #2
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002020:	2105      	movs	r1, #5
 8002022:	483c      	ldr	r0, [pc, #240]	; (8002114 <FreqMenu_DrawPresetMenu+0xaec>)
 8002024:	f00c faae 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002028:	7abb      	ldrb	r3, [r7, #10]
 800202a:	b29a      	uxth	r2, r3
 800202c:	2300      	movs	r3, #0
 800202e:	9301      	str	r3, [sp, #4]
 8002030:	2302      	movs	r3, #2
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002038:	2105      	movs	r1, #5
 800203a:	4837      	ldr	r0, [pc, #220]	; (8002118 <FreqMenu_DrawPresetMenu+0xaf0>)
 800203c:	f00c faa2 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002040:	7a7b      	ldrb	r3, [r7, #9]
 8002042:	b29a      	uxth	r2, r3
 8002044:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002048:	9301      	str	r3, [sp, #4]
 800204a:	2302      	movs	r3, #2
 800204c:	9300      	str	r3, [sp, #0]
 800204e:	2300      	movs	r3, #0
 8002050:	2105      	movs	r1, #5
 8002052:	4832      	ldr	r0, [pc, #200]	; (800211c <FreqMenu_DrawPresetMenu+0xaf4>)
 8002054:	f00c fa96 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002058:	7bfb      	ldrb	r3, [r7, #15]
 800205a:	b29a      	uxth	r2, r3
 800205c:	2300      	movs	r3, #0
 800205e:	9301      	str	r3, [sp, #4]
 8002060:	2302      	movs	r3, #2
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002068:	2178      	movs	r1, #120	; 0x78
 800206a:	482d      	ldr	r0, [pc, #180]	; (8002120 <FreqMenu_DrawPresetMenu+0xaf8>)
 800206c:	f00c fa8a 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002070:	7bbb      	ldrb	r3, [r7, #14]
 8002072:	b29a      	uxth	r2, r3
 8002074:	2300      	movs	r3, #0
 8002076:	9301      	str	r3, [sp, #4]
 8002078:	2302      	movs	r3, #2
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002080:	2178      	movs	r1, #120	; 0x78
 8002082:	4828      	ldr	r0, [pc, #160]	; (8002124 <FreqMenu_DrawPresetMenu+0xafc>)
 8002084:	f00c fa7e 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002088:	7b7b      	ldrb	r3, [r7, #13]
 800208a:	b29a      	uxth	r2, r3
 800208c:	2300      	movs	r3, #0
 800208e:	9301      	str	r3, [sp, #4]
 8002090:	2302      	movs	r3, #2
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002098:	2178      	movs	r1, #120	; 0x78
 800209a:	4823      	ldr	r0, [pc, #140]	; (8002128 <FreqMenu_DrawPresetMenu+0xb00>)
 800209c:	f00c fa72 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020a0:	7b3b      	ldrb	r3, [r7, #12]
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	2300      	movs	r3, #0
 80020a6:	9301      	str	r3, [sp, #4]
 80020a8:	2302      	movs	r3, #2
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020b0:	2178      	movs	r1, #120	; 0x78
 80020b2:	481e      	ldr	r0, [pc, #120]	; (800212c <FreqMenu_DrawPresetMenu+0xb04>)
 80020b4:	f00c fa66 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020b8:	7afb      	ldrb	r3, [r7, #11]
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	2300      	movs	r3, #0
 80020be:	9301      	str	r3, [sp, #4]
 80020c0:	2302      	movs	r3, #2
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020c8:	2178      	movs	r1, #120	; 0x78
 80020ca:	4819      	ldr	r0, [pc, #100]	; (8002130 <FreqMenu_DrawPresetMenu+0xb08>)
 80020cc:	f00c fa5a 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020d0:	7abb      	ldrb	r3, [r7, #10]
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	2300      	movs	r3, #0
 80020d6:	9301      	str	r3, [sp, #4]
 80020d8:	2302      	movs	r3, #2
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020e0:	2178      	movs	r1, #120	; 0x78
 80020e2:	4814      	ldr	r0, [pc, #80]	; (8002134 <FreqMenu_DrawPresetMenu+0xb0c>)
 80020e4:	f00c fa4e 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020e8:	7a7b      	ldrb	r3, [r7, #9]
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	2300      	movs	r3, #0
 80020ee:	9301      	str	r3, [sp, #4]
 80020f0:	2302      	movs	r3, #2
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020f8:	2178      	movs	r1, #120	; 0x78
 80020fa:	480f      	ldr	r0, [pc, #60]	; (8002138 <FreqMenu_DrawPresetMenu+0xb10>)
 80020fc:	f00c fa42 	bl	800e584 <ILI9341_Draw_Text>
				break;
 8002100:	f000 bd1e 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
 8002104:	08013618 	.word	0x08013618
 8002108:	08013620 	.word	0x08013620
 800210c:	08013628 	.word	0x08013628
 8002110:	08013630 	.word	0x08013630
 8002114:	08013638 	.word	0x08013638
 8002118:	08013640 	.word	0x08013640
 800211c:	08013648 	.word	0x08013648
 8002120:	08013650 	.word	0x08013650
 8002124:	08013658 	.word	0x08013658
 8002128:	08013660 	.word	0x08013660
 800212c:	08013668 	.word	0x08013668
 8002130:	08013670 	.word	0x08013670
 8002134:	08013678 	.word	0x08013678
 8002138:	08013680 	.word	0x08013680
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800213c:	7bfb      	ldrb	r3, [r7, #15]
 800213e:	b29a      	uxth	r2, r3
 8002140:	2300      	movs	r3, #0
 8002142:	9301      	str	r3, [sp, #4]
 8002144:	2302      	movs	r3, #2
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800214c:	2105      	movs	r1, #5
 800214e:	48a5      	ldr	r0, [pc, #660]	; (80023e4 <FreqMenu_DrawPresetMenu+0xdbc>)
 8002150:	f00c fa18 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002154:	7bbb      	ldrb	r3, [r7, #14]
 8002156:	b29a      	uxth	r2, r3
 8002158:	2300      	movs	r3, #0
 800215a:	9301      	str	r3, [sp, #4]
 800215c:	2302      	movs	r3, #2
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002164:	2105      	movs	r1, #5
 8002166:	48a0      	ldr	r0, [pc, #640]	; (80023e8 <FreqMenu_DrawPresetMenu+0xdc0>)
 8002168:	f00c fa0c 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800216c:	7b7b      	ldrb	r3, [r7, #13]
 800216e:	b29a      	uxth	r2, r3
 8002170:	2300      	movs	r3, #0
 8002172:	9301      	str	r3, [sp, #4]
 8002174:	2302      	movs	r3, #2
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800217c:	2105      	movs	r1, #5
 800217e:	489b      	ldr	r0, [pc, #620]	; (80023ec <FreqMenu_DrawPresetMenu+0xdc4>)
 8002180:	f00c fa00 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002184:	7b3b      	ldrb	r3, [r7, #12]
 8002186:	b29a      	uxth	r2, r3
 8002188:	2300      	movs	r3, #0
 800218a:	9301      	str	r3, [sp, #4]
 800218c:	2302      	movs	r3, #2
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002194:	2105      	movs	r1, #5
 8002196:	4896      	ldr	r0, [pc, #600]	; (80023f0 <FreqMenu_DrawPresetMenu+0xdc8>)
 8002198:	f00c f9f4 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800219c:	7afb      	ldrb	r3, [r7, #11]
 800219e:	b29a      	uxth	r2, r3
 80021a0:	2300      	movs	r3, #0
 80021a2:	9301      	str	r3, [sp, #4]
 80021a4:	2302      	movs	r3, #2
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021ac:	2105      	movs	r1, #5
 80021ae:	4891      	ldr	r0, [pc, #580]	; (80023f4 <FreqMenu_DrawPresetMenu+0xdcc>)
 80021b0:	f00c f9e8 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021b4:	7abb      	ldrb	r3, [r7, #10]
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	2300      	movs	r3, #0
 80021ba:	9301      	str	r3, [sp, #4]
 80021bc:	2302      	movs	r3, #2
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021c4:	2105      	movs	r1, #5
 80021c6:	488c      	ldr	r0, [pc, #560]	; (80023f8 <FreqMenu_DrawPresetMenu+0xdd0>)
 80021c8:	f00c f9dc 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021cc:	7a7b      	ldrb	r3, [r7, #9]
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	2300      	movs	r3, #0
 80021d2:	9301      	str	r3, [sp, #4]
 80021d4:	2302      	movs	r3, #2
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021dc:	2105      	movs	r1, #5
 80021de:	4887      	ldr	r0, [pc, #540]	; (80023fc <FreqMenu_DrawPresetMenu+0xdd4>)
 80021e0:	f00c f9d0 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80021e4:	7bfb      	ldrb	r3, [r7, #15]
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80021ec:	9301      	str	r3, [sp, #4]
 80021ee:	2302      	movs	r3, #2
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	2300      	movs	r3, #0
 80021f4:	2178      	movs	r1, #120	; 0x78
 80021f6:	4882      	ldr	r0, [pc, #520]	; (8002400 <FreqMenu_DrawPresetMenu+0xdd8>)
 80021f8:	f00c f9c4 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021fc:	7bbb      	ldrb	r3, [r7, #14]
 80021fe:	b29a      	uxth	r2, r3
 8002200:	2300      	movs	r3, #0
 8002202:	9301      	str	r3, [sp, #4]
 8002204:	2302      	movs	r3, #2
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800220c:	2178      	movs	r1, #120	; 0x78
 800220e:	487d      	ldr	r0, [pc, #500]	; (8002404 <FreqMenu_DrawPresetMenu+0xddc>)
 8002210:	f00c f9b8 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002214:	7b7b      	ldrb	r3, [r7, #13]
 8002216:	b29a      	uxth	r2, r3
 8002218:	2300      	movs	r3, #0
 800221a:	9301      	str	r3, [sp, #4]
 800221c:	2302      	movs	r3, #2
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002224:	2178      	movs	r1, #120	; 0x78
 8002226:	4878      	ldr	r0, [pc, #480]	; (8002408 <FreqMenu_DrawPresetMenu+0xde0>)
 8002228:	f00c f9ac 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800222c:	7b3b      	ldrb	r3, [r7, #12]
 800222e:	b29a      	uxth	r2, r3
 8002230:	2300      	movs	r3, #0
 8002232:	9301      	str	r3, [sp, #4]
 8002234:	2302      	movs	r3, #2
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800223c:	2178      	movs	r1, #120	; 0x78
 800223e:	4873      	ldr	r0, [pc, #460]	; (800240c <FreqMenu_DrawPresetMenu+0xde4>)
 8002240:	f00c f9a0 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002244:	7afb      	ldrb	r3, [r7, #11]
 8002246:	b29a      	uxth	r2, r3
 8002248:	2300      	movs	r3, #0
 800224a:	9301      	str	r3, [sp, #4]
 800224c:	2302      	movs	r3, #2
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002254:	2178      	movs	r1, #120	; 0x78
 8002256:	486e      	ldr	r0, [pc, #440]	; (8002410 <FreqMenu_DrawPresetMenu+0xde8>)
 8002258:	f00c f994 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800225c:	7abb      	ldrb	r3, [r7, #10]
 800225e:	b29a      	uxth	r2, r3
 8002260:	2300      	movs	r3, #0
 8002262:	9301      	str	r3, [sp, #4]
 8002264:	2302      	movs	r3, #2
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800226c:	2178      	movs	r1, #120	; 0x78
 800226e:	4869      	ldr	r0, [pc, #420]	; (8002414 <FreqMenu_DrawPresetMenu+0xdec>)
 8002270:	f00c f988 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002274:	7a7b      	ldrb	r3, [r7, #9]
 8002276:	b29a      	uxth	r2, r3
 8002278:	2300      	movs	r3, #0
 800227a:	9301      	str	r3, [sp, #4]
 800227c:	2302      	movs	r3, #2
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002284:	2178      	movs	r1, #120	; 0x78
 8002286:	4864      	ldr	r0, [pc, #400]	; (8002418 <FreqMenu_DrawPresetMenu+0xdf0>)
 8002288:	f00c f97c 	bl	800e584 <ILI9341_Draw_Text>
				break;
 800228c:	f000 bc58 	b.w	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002290:	7bfb      	ldrb	r3, [r7, #15]
 8002292:	b29a      	uxth	r2, r3
 8002294:	2300      	movs	r3, #0
 8002296:	9301      	str	r3, [sp, #4]
 8002298:	2302      	movs	r3, #2
 800229a:	9300      	str	r3, [sp, #0]
 800229c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022a0:	2105      	movs	r1, #5
 80022a2:	4850      	ldr	r0, [pc, #320]	; (80023e4 <FreqMenu_DrawPresetMenu+0xdbc>)
 80022a4:	f00c f96e 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022a8:	7bbb      	ldrb	r3, [r7, #14]
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	2300      	movs	r3, #0
 80022ae:	9301      	str	r3, [sp, #4]
 80022b0:	2302      	movs	r3, #2
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022b8:	2105      	movs	r1, #5
 80022ba:	484b      	ldr	r0, [pc, #300]	; (80023e8 <FreqMenu_DrawPresetMenu+0xdc0>)
 80022bc:	f00c f962 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022c0:	7b7b      	ldrb	r3, [r7, #13]
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	2300      	movs	r3, #0
 80022c6:	9301      	str	r3, [sp, #4]
 80022c8:	2302      	movs	r3, #2
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022d0:	2105      	movs	r1, #5
 80022d2:	4846      	ldr	r0, [pc, #280]	; (80023ec <FreqMenu_DrawPresetMenu+0xdc4>)
 80022d4:	f00c f956 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022d8:	7b3b      	ldrb	r3, [r7, #12]
 80022da:	b29a      	uxth	r2, r3
 80022dc:	2300      	movs	r3, #0
 80022de:	9301      	str	r3, [sp, #4]
 80022e0:	2302      	movs	r3, #2
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022e8:	2105      	movs	r1, #5
 80022ea:	4841      	ldr	r0, [pc, #260]	; (80023f0 <FreqMenu_DrawPresetMenu+0xdc8>)
 80022ec:	f00c f94a 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022f0:	7afb      	ldrb	r3, [r7, #11]
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	2300      	movs	r3, #0
 80022f6:	9301      	str	r3, [sp, #4]
 80022f8:	2302      	movs	r3, #2
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002300:	2105      	movs	r1, #5
 8002302:	483c      	ldr	r0, [pc, #240]	; (80023f4 <FreqMenu_DrawPresetMenu+0xdcc>)
 8002304:	f00c f93e 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002308:	7abb      	ldrb	r3, [r7, #10]
 800230a:	b29a      	uxth	r2, r3
 800230c:	2300      	movs	r3, #0
 800230e:	9301      	str	r3, [sp, #4]
 8002310:	2302      	movs	r3, #2
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002318:	2105      	movs	r1, #5
 800231a:	4837      	ldr	r0, [pc, #220]	; (80023f8 <FreqMenu_DrawPresetMenu+0xdd0>)
 800231c:	f00c f932 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002320:	7a7b      	ldrb	r3, [r7, #9]
 8002322:	b29a      	uxth	r2, r3
 8002324:	2300      	movs	r3, #0
 8002326:	9301      	str	r3, [sp, #4]
 8002328:	2302      	movs	r3, #2
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002330:	2105      	movs	r1, #5
 8002332:	4832      	ldr	r0, [pc, #200]	; (80023fc <FreqMenu_DrawPresetMenu+0xdd4>)
 8002334:	f00c f926 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002338:	7bfb      	ldrb	r3, [r7, #15]
 800233a:	b29a      	uxth	r2, r3
 800233c:	2300      	movs	r3, #0
 800233e:	9301      	str	r3, [sp, #4]
 8002340:	2302      	movs	r3, #2
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002348:	2178      	movs	r1, #120	; 0x78
 800234a:	482d      	ldr	r0, [pc, #180]	; (8002400 <FreqMenu_DrawPresetMenu+0xdd8>)
 800234c:	f00c f91a 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002350:	7bbb      	ldrb	r3, [r7, #14]
 8002352:	b29a      	uxth	r2, r3
 8002354:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002358:	9301      	str	r3, [sp, #4]
 800235a:	2302      	movs	r3, #2
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	2300      	movs	r3, #0
 8002360:	2178      	movs	r1, #120	; 0x78
 8002362:	4828      	ldr	r0, [pc, #160]	; (8002404 <FreqMenu_DrawPresetMenu+0xddc>)
 8002364:	f00c f90e 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002368:	7b7b      	ldrb	r3, [r7, #13]
 800236a:	b29a      	uxth	r2, r3
 800236c:	2300      	movs	r3, #0
 800236e:	9301      	str	r3, [sp, #4]
 8002370:	2302      	movs	r3, #2
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002378:	2178      	movs	r1, #120	; 0x78
 800237a:	4823      	ldr	r0, [pc, #140]	; (8002408 <FreqMenu_DrawPresetMenu+0xde0>)
 800237c:	f00c f902 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002380:	7b3b      	ldrb	r3, [r7, #12]
 8002382:	b29a      	uxth	r2, r3
 8002384:	2300      	movs	r3, #0
 8002386:	9301      	str	r3, [sp, #4]
 8002388:	2302      	movs	r3, #2
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002390:	2178      	movs	r1, #120	; 0x78
 8002392:	481e      	ldr	r0, [pc, #120]	; (800240c <FreqMenu_DrawPresetMenu+0xde4>)
 8002394:	f00c f8f6 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002398:	7afb      	ldrb	r3, [r7, #11]
 800239a:	b29a      	uxth	r2, r3
 800239c:	2300      	movs	r3, #0
 800239e:	9301      	str	r3, [sp, #4]
 80023a0:	2302      	movs	r3, #2
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023a8:	2178      	movs	r1, #120	; 0x78
 80023aa:	4819      	ldr	r0, [pc, #100]	; (8002410 <FreqMenu_DrawPresetMenu+0xde8>)
 80023ac:	f00c f8ea 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023b0:	7abb      	ldrb	r3, [r7, #10]
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	2300      	movs	r3, #0
 80023b6:	9301      	str	r3, [sp, #4]
 80023b8:	2302      	movs	r3, #2
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023c0:	2178      	movs	r1, #120	; 0x78
 80023c2:	4814      	ldr	r0, [pc, #80]	; (8002414 <FreqMenu_DrawPresetMenu+0xdec>)
 80023c4:	f00c f8de 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023c8:	7a7b      	ldrb	r3, [r7, #9]
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	2300      	movs	r3, #0
 80023ce:	9301      	str	r3, [sp, #4]
 80023d0:	2302      	movs	r3, #2
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023d8:	2178      	movs	r1, #120	; 0x78
 80023da:	480f      	ldr	r0, [pc, #60]	; (8002418 <FreqMenu_DrawPresetMenu+0xdf0>)
 80023dc:	f00c f8d2 	bl	800e584 <ILI9341_Draw_Text>
				break;
 80023e0:	e3ae      	b.n	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
 80023e2:	bf00      	nop
 80023e4:	08013618 	.word	0x08013618
 80023e8:	08013620 	.word	0x08013620
 80023ec:	08013628 	.word	0x08013628
 80023f0:	08013630 	.word	0x08013630
 80023f4:	08013638 	.word	0x08013638
 80023f8:	08013640 	.word	0x08013640
 80023fc:	08013648 	.word	0x08013648
 8002400:	08013650 	.word	0x08013650
 8002404:	08013658 	.word	0x08013658
 8002408:	08013660 	.word	0x08013660
 800240c:	08013668 	.word	0x08013668
 8002410:	08013670 	.word	0x08013670
 8002414:	08013678 	.word	0x08013678
 8002418:	08013680 	.word	0x08013680
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800241c:	7bfb      	ldrb	r3, [r7, #15]
 800241e:	b29a      	uxth	r2, r3
 8002420:	2300      	movs	r3, #0
 8002422:	9301      	str	r3, [sp, #4]
 8002424:	2302      	movs	r3, #2
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800242c:	2105      	movs	r1, #5
 800242e:	48a4      	ldr	r0, [pc, #656]	; (80026c0 <FreqMenu_DrawPresetMenu+0x1098>)
 8002430:	f00c f8a8 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002434:	7bbb      	ldrb	r3, [r7, #14]
 8002436:	b29a      	uxth	r2, r3
 8002438:	2300      	movs	r3, #0
 800243a:	9301      	str	r3, [sp, #4]
 800243c:	2302      	movs	r3, #2
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002444:	2105      	movs	r1, #5
 8002446:	489f      	ldr	r0, [pc, #636]	; (80026c4 <FreqMenu_DrawPresetMenu+0x109c>)
 8002448:	f00c f89c 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800244c:	7b7b      	ldrb	r3, [r7, #13]
 800244e:	b29a      	uxth	r2, r3
 8002450:	2300      	movs	r3, #0
 8002452:	9301      	str	r3, [sp, #4]
 8002454:	2302      	movs	r3, #2
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800245c:	2105      	movs	r1, #5
 800245e:	489a      	ldr	r0, [pc, #616]	; (80026c8 <FreqMenu_DrawPresetMenu+0x10a0>)
 8002460:	f00c f890 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002464:	7b3b      	ldrb	r3, [r7, #12]
 8002466:	b29a      	uxth	r2, r3
 8002468:	2300      	movs	r3, #0
 800246a:	9301      	str	r3, [sp, #4]
 800246c:	2302      	movs	r3, #2
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002474:	2105      	movs	r1, #5
 8002476:	4895      	ldr	r0, [pc, #596]	; (80026cc <FreqMenu_DrawPresetMenu+0x10a4>)
 8002478:	f00c f884 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800247c:	7afb      	ldrb	r3, [r7, #11]
 800247e:	b29a      	uxth	r2, r3
 8002480:	2300      	movs	r3, #0
 8002482:	9301      	str	r3, [sp, #4]
 8002484:	2302      	movs	r3, #2
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800248c:	2105      	movs	r1, #5
 800248e:	4890      	ldr	r0, [pc, #576]	; (80026d0 <FreqMenu_DrawPresetMenu+0x10a8>)
 8002490:	f00c f878 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002494:	7abb      	ldrb	r3, [r7, #10]
 8002496:	b29a      	uxth	r2, r3
 8002498:	2300      	movs	r3, #0
 800249a:	9301      	str	r3, [sp, #4]
 800249c:	2302      	movs	r3, #2
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024a4:	2105      	movs	r1, #5
 80024a6:	488b      	ldr	r0, [pc, #556]	; (80026d4 <FreqMenu_DrawPresetMenu+0x10ac>)
 80024a8:	f00c f86c 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024ac:	7a7b      	ldrb	r3, [r7, #9]
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	2300      	movs	r3, #0
 80024b2:	9301      	str	r3, [sp, #4]
 80024b4:	2302      	movs	r3, #2
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024bc:	2105      	movs	r1, #5
 80024be:	4886      	ldr	r0, [pc, #536]	; (80026d8 <FreqMenu_DrawPresetMenu+0x10b0>)
 80024c0:	f00c f860 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	2300      	movs	r3, #0
 80024ca:	9301      	str	r3, [sp, #4]
 80024cc:	2302      	movs	r3, #2
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024d4:	2178      	movs	r1, #120	; 0x78
 80024d6:	4881      	ldr	r0, [pc, #516]	; (80026dc <FreqMenu_DrawPresetMenu+0x10b4>)
 80024d8:	f00c f854 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024dc:	7bbb      	ldrb	r3, [r7, #14]
 80024de:	b29a      	uxth	r2, r3
 80024e0:	2300      	movs	r3, #0
 80024e2:	9301      	str	r3, [sp, #4]
 80024e4:	2302      	movs	r3, #2
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024ec:	2178      	movs	r1, #120	; 0x78
 80024ee:	487c      	ldr	r0, [pc, #496]	; (80026e0 <FreqMenu_DrawPresetMenu+0x10b8>)
 80024f0:	f00c f848 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80024f4:	7b7b      	ldrb	r3, [r7, #13]
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80024fc:	9301      	str	r3, [sp, #4]
 80024fe:	2302      	movs	r3, #2
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	2300      	movs	r3, #0
 8002504:	2178      	movs	r1, #120	; 0x78
 8002506:	4877      	ldr	r0, [pc, #476]	; (80026e4 <FreqMenu_DrawPresetMenu+0x10bc>)
 8002508:	f00c f83c 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800250c:	7b3b      	ldrb	r3, [r7, #12]
 800250e:	b29a      	uxth	r2, r3
 8002510:	2300      	movs	r3, #0
 8002512:	9301      	str	r3, [sp, #4]
 8002514:	2302      	movs	r3, #2
 8002516:	9300      	str	r3, [sp, #0]
 8002518:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800251c:	2178      	movs	r1, #120	; 0x78
 800251e:	4872      	ldr	r0, [pc, #456]	; (80026e8 <FreqMenu_DrawPresetMenu+0x10c0>)
 8002520:	f00c f830 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002524:	7afb      	ldrb	r3, [r7, #11]
 8002526:	b29a      	uxth	r2, r3
 8002528:	2300      	movs	r3, #0
 800252a:	9301      	str	r3, [sp, #4]
 800252c:	2302      	movs	r3, #2
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002534:	2178      	movs	r1, #120	; 0x78
 8002536:	486d      	ldr	r0, [pc, #436]	; (80026ec <FreqMenu_DrawPresetMenu+0x10c4>)
 8002538:	f00c f824 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800253c:	7abb      	ldrb	r3, [r7, #10]
 800253e:	b29a      	uxth	r2, r3
 8002540:	2300      	movs	r3, #0
 8002542:	9301      	str	r3, [sp, #4]
 8002544:	2302      	movs	r3, #2
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800254c:	2178      	movs	r1, #120	; 0x78
 800254e:	4868      	ldr	r0, [pc, #416]	; (80026f0 <FreqMenu_DrawPresetMenu+0x10c8>)
 8002550:	f00c f818 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002554:	7a7b      	ldrb	r3, [r7, #9]
 8002556:	b29a      	uxth	r2, r3
 8002558:	2300      	movs	r3, #0
 800255a:	9301      	str	r3, [sp, #4]
 800255c:	2302      	movs	r3, #2
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002564:	2178      	movs	r1, #120	; 0x78
 8002566:	4863      	ldr	r0, [pc, #396]	; (80026f4 <FreqMenu_DrawPresetMenu+0x10cc>)
 8002568:	f00c f80c 	bl	800e584 <ILI9341_Draw_Text>
				break;
 800256c:	e2e8      	b.n	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800256e:	7bfb      	ldrb	r3, [r7, #15]
 8002570:	b29a      	uxth	r2, r3
 8002572:	2300      	movs	r3, #0
 8002574:	9301      	str	r3, [sp, #4]
 8002576:	2302      	movs	r3, #2
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800257e:	2105      	movs	r1, #5
 8002580:	484f      	ldr	r0, [pc, #316]	; (80026c0 <FreqMenu_DrawPresetMenu+0x1098>)
 8002582:	f00b ffff 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002586:	7bbb      	ldrb	r3, [r7, #14]
 8002588:	b29a      	uxth	r2, r3
 800258a:	2300      	movs	r3, #0
 800258c:	9301      	str	r3, [sp, #4]
 800258e:	2302      	movs	r3, #2
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002596:	2105      	movs	r1, #5
 8002598:	484a      	ldr	r0, [pc, #296]	; (80026c4 <FreqMenu_DrawPresetMenu+0x109c>)
 800259a:	f00b fff3 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800259e:	7b7b      	ldrb	r3, [r7, #13]
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	2300      	movs	r3, #0
 80025a4:	9301      	str	r3, [sp, #4]
 80025a6:	2302      	movs	r3, #2
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025ae:	2105      	movs	r1, #5
 80025b0:	4845      	ldr	r0, [pc, #276]	; (80026c8 <FreqMenu_DrawPresetMenu+0x10a0>)
 80025b2:	f00b ffe7 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025b6:	7b3b      	ldrb	r3, [r7, #12]
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	2300      	movs	r3, #0
 80025bc:	9301      	str	r3, [sp, #4]
 80025be:	2302      	movs	r3, #2
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025c6:	2105      	movs	r1, #5
 80025c8:	4840      	ldr	r0, [pc, #256]	; (80026cc <FreqMenu_DrawPresetMenu+0x10a4>)
 80025ca:	f00b ffdb 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025ce:	7afb      	ldrb	r3, [r7, #11]
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	2300      	movs	r3, #0
 80025d4:	9301      	str	r3, [sp, #4]
 80025d6:	2302      	movs	r3, #2
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025de:	2105      	movs	r1, #5
 80025e0:	483b      	ldr	r0, [pc, #236]	; (80026d0 <FreqMenu_DrawPresetMenu+0x10a8>)
 80025e2:	f00b ffcf 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025e6:	7abb      	ldrb	r3, [r7, #10]
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	2300      	movs	r3, #0
 80025ec:	9301      	str	r3, [sp, #4]
 80025ee:	2302      	movs	r3, #2
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025f6:	2105      	movs	r1, #5
 80025f8:	4836      	ldr	r0, [pc, #216]	; (80026d4 <FreqMenu_DrawPresetMenu+0x10ac>)
 80025fa:	f00b ffc3 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025fe:	7a7b      	ldrb	r3, [r7, #9]
 8002600:	b29a      	uxth	r2, r3
 8002602:	2300      	movs	r3, #0
 8002604:	9301      	str	r3, [sp, #4]
 8002606:	2302      	movs	r3, #2
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800260e:	2105      	movs	r1, #5
 8002610:	4831      	ldr	r0, [pc, #196]	; (80026d8 <FreqMenu_DrawPresetMenu+0x10b0>)
 8002612:	f00b ffb7 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002616:	7bfb      	ldrb	r3, [r7, #15]
 8002618:	b29a      	uxth	r2, r3
 800261a:	2300      	movs	r3, #0
 800261c:	9301      	str	r3, [sp, #4]
 800261e:	2302      	movs	r3, #2
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002626:	2178      	movs	r1, #120	; 0x78
 8002628:	482c      	ldr	r0, [pc, #176]	; (80026dc <FreqMenu_DrawPresetMenu+0x10b4>)
 800262a:	f00b ffab 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800262e:	7bbb      	ldrb	r3, [r7, #14]
 8002630:	b29a      	uxth	r2, r3
 8002632:	2300      	movs	r3, #0
 8002634:	9301      	str	r3, [sp, #4]
 8002636:	2302      	movs	r3, #2
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800263e:	2178      	movs	r1, #120	; 0x78
 8002640:	4827      	ldr	r0, [pc, #156]	; (80026e0 <FreqMenu_DrawPresetMenu+0x10b8>)
 8002642:	f00b ff9f 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002646:	7b7b      	ldrb	r3, [r7, #13]
 8002648:	b29a      	uxth	r2, r3
 800264a:	2300      	movs	r3, #0
 800264c:	9301      	str	r3, [sp, #4]
 800264e:	2302      	movs	r3, #2
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002656:	2178      	movs	r1, #120	; 0x78
 8002658:	4822      	ldr	r0, [pc, #136]	; (80026e4 <FreqMenu_DrawPresetMenu+0x10bc>)
 800265a:	f00b ff93 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800265e:	7b3b      	ldrb	r3, [r7, #12]
 8002660:	b29a      	uxth	r2, r3
 8002662:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002666:	9301      	str	r3, [sp, #4]
 8002668:	2302      	movs	r3, #2
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	2300      	movs	r3, #0
 800266e:	2178      	movs	r1, #120	; 0x78
 8002670:	481d      	ldr	r0, [pc, #116]	; (80026e8 <FreqMenu_DrawPresetMenu+0x10c0>)
 8002672:	f00b ff87 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002676:	7afb      	ldrb	r3, [r7, #11]
 8002678:	b29a      	uxth	r2, r3
 800267a:	2300      	movs	r3, #0
 800267c:	9301      	str	r3, [sp, #4]
 800267e:	2302      	movs	r3, #2
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002686:	2178      	movs	r1, #120	; 0x78
 8002688:	4818      	ldr	r0, [pc, #96]	; (80026ec <FreqMenu_DrawPresetMenu+0x10c4>)
 800268a:	f00b ff7b 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800268e:	7abb      	ldrb	r3, [r7, #10]
 8002690:	b29a      	uxth	r2, r3
 8002692:	2300      	movs	r3, #0
 8002694:	9301      	str	r3, [sp, #4]
 8002696:	2302      	movs	r3, #2
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800269e:	2178      	movs	r1, #120	; 0x78
 80026a0:	4813      	ldr	r0, [pc, #76]	; (80026f0 <FreqMenu_DrawPresetMenu+0x10c8>)
 80026a2:	f00b ff6f 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026a6:	7a7b      	ldrb	r3, [r7, #9]
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	2300      	movs	r3, #0
 80026ac:	9301      	str	r3, [sp, #4]
 80026ae:	2302      	movs	r3, #2
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026b6:	2178      	movs	r1, #120	; 0x78
 80026b8:	480e      	ldr	r0, [pc, #56]	; (80026f4 <FreqMenu_DrawPresetMenu+0x10cc>)
 80026ba:	f00b ff63 	bl	800e584 <ILI9341_Draw_Text>
				break;
 80026be:	e23f      	b.n	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
 80026c0:	08013618 	.word	0x08013618
 80026c4:	08013620 	.word	0x08013620
 80026c8:	08013628 	.word	0x08013628
 80026cc:	08013630 	.word	0x08013630
 80026d0:	08013638 	.word	0x08013638
 80026d4:	08013640 	.word	0x08013640
 80026d8:	08013648 	.word	0x08013648
 80026dc:	08013650 	.word	0x08013650
 80026e0:	08013658 	.word	0x08013658
 80026e4:	08013660 	.word	0x08013660
 80026e8:	08013668 	.word	0x08013668
 80026ec:	08013670 	.word	0x08013670
 80026f0:	08013678 	.word	0x08013678
 80026f4:	08013680 	.word	0x08013680
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026f8:	7bfb      	ldrb	r3, [r7, #15]
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	2300      	movs	r3, #0
 80026fe:	9301      	str	r3, [sp, #4]
 8002700:	2302      	movs	r3, #2
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002708:	2105      	movs	r1, #5
 800270a:	48a4      	ldr	r0, [pc, #656]	; (800299c <FreqMenu_DrawPresetMenu+0x1374>)
 800270c:	f00b ff3a 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002710:	7bbb      	ldrb	r3, [r7, #14]
 8002712:	b29a      	uxth	r2, r3
 8002714:	2300      	movs	r3, #0
 8002716:	9301      	str	r3, [sp, #4]
 8002718:	2302      	movs	r3, #2
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002720:	2105      	movs	r1, #5
 8002722:	489f      	ldr	r0, [pc, #636]	; (80029a0 <FreqMenu_DrawPresetMenu+0x1378>)
 8002724:	f00b ff2e 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002728:	7b7b      	ldrb	r3, [r7, #13]
 800272a:	b29a      	uxth	r2, r3
 800272c:	2300      	movs	r3, #0
 800272e:	9301      	str	r3, [sp, #4]
 8002730:	2302      	movs	r3, #2
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002738:	2105      	movs	r1, #5
 800273a:	489a      	ldr	r0, [pc, #616]	; (80029a4 <FreqMenu_DrawPresetMenu+0x137c>)
 800273c:	f00b ff22 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002740:	7b3b      	ldrb	r3, [r7, #12]
 8002742:	b29a      	uxth	r2, r3
 8002744:	2300      	movs	r3, #0
 8002746:	9301      	str	r3, [sp, #4]
 8002748:	2302      	movs	r3, #2
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002750:	2105      	movs	r1, #5
 8002752:	4895      	ldr	r0, [pc, #596]	; (80029a8 <FreqMenu_DrawPresetMenu+0x1380>)
 8002754:	f00b ff16 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002758:	7afb      	ldrb	r3, [r7, #11]
 800275a:	b29a      	uxth	r2, r3
 800275c:	2300      	movs	r3, #0
 800275e:	9301      	str	r3, [sp, #4]
 8002760:	2302      	movs	r3, #2
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002768:	2105      	movs	r1, #5
 800276a:	4890      	ldr	r0, [pc, #576]	; (80029ac <FreqMenu_DrawPresetMenu+0x1384>)
 800276c:	f00b ff0a 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002770:	7abb      	ldrb	r3, [r7, #10]
 8002772:	b29a      	uxth	r2, r3
 8002774:	2300      	movs	r3, #0
 8002776:	9301      	str	r3, [sp, #4]
 8002778:	2302      	movs	r3, #2
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002780:	2105      	movs	r1, #5
 8002782:	488b      	ldr	r0, [pc, #556]	; (80029b0 <FreqMenu_DrawPresetMenu+0x1388>)
 8002784:	f00b fefe 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002788:	7a7b      	ldrb	r3, [r7, #9]
 800278a:	b29a      	uxth	r2, r3
 800278c:	2300      	movs	r3, #0
 800278e:	9301      	str	r3, [sp, #4]
 8002790:	2302      	movs	r3, #2
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002798:	2105      	movs	r1, #5
 800279a:	4886      	ldr	r0, [pc, #536]	; (80029b4 <FreqMenu_DrawPresetMenu+0x138c>)
 800279c:	f00b fef2 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027a0:	7bfb      	ldrb	r3, [r7, #15]
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	2300      	movs	r3, #0
 80027a6:	9301      	str	r3, [sp, #4]
 80027a8:	2302      	movs	r3, #2
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027b0:	2178      	movs	r1, #120	; 0x78
 80027b2:	4881      	ldr	r0, [pc, #516]	; (80029b8 <FreqMenu_DrawPresetMenu+0x1390>)
 80027b4:	f00b fee6 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027b8:	7bbb      	ldrb	r3, [r7, #14]
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	2300      	movs	r3, #0
 80027be:	9301      	str	r3, [sp, #4]
 80027c0:	2302      	movs	r3, #2
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027c8:	2178      	movs	r1, #120	; 0x78
 80027ca:	487c      	ldr	r0, [pc, #496]	; (80029bc <FreqMenu_DrawPresetMenu+0x1394>)
 80027cc:	f00b feda 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027d0:	7b7b      	ldrb	r3, [r7, #13]
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	2300      	movs	r3, #0
 80027d6:	9301      	str	r3, [sp, #4]
 80027d8:	2302      	movs	r3, #2
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027e0:	2178      	movs	r1, #120	; 0x78
 80027e2:	4877      	ldr	r0, [pc, #476]	; (80029c0 <FreqMenu_DrawPresetMenu+0x1398>)
 80027e4:	f00b fece 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027e8:	7b3b      	ldrb	r3, [r7, #12]
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	2300      	movs	r3, #0
 80027ee:	9301      	str	r3, [sp, #4]
 80027f0:	2302      	movs	r3, #2
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027f8:	2178      	movs	r1, #120	; 0x78
 80027fa:	4872      	ldr	r0, [pc, #456]	; (80029c4 <FreqMenu_DrawPresetMenu+0x139c>)
 80027fc:	f00b fec2 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002800:	7afb      	ldrb	r3, [r7, #11]
 8002802:	b29a      	uxth	r2, r3
 8002804:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002808:	9301      	str	r3, [sp, #4]
 800280a:	2302      	movs	r3, #2
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	2300      	movs	r3, #0
 8002810:	2178      	movs	r1, #120	; 0x78
 8002812:	486d      	ldr	r0, [pc, #436]	; (80029c8 <FreqMenu_DrawPresetMenu+0x13a0>)
 8002814:	f00b feb6 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002818:	7abb      	ldrb	r3, [r7, #10]
 800281a:	b29a      	uxth	r2, r3
 800281c:	2300      	movs	r3, #0
 800281e:	9301      	str	r3, [sp, #4]
 8002820:	2302      	movs	r3, #2
 8002822:	9300      	str	r3, [sp, #0]
 8002824:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002828:	2178      	movs	r1, #120	; 0x78
 800282a:	4868      	ldr	r0, [pc, #416]	; (80029cc <FreqMenu_DrawPresetMenu+0x13a4>)
 800282c:	f00b feaa 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002830:	7a7b      	ldrb	r3, [r7, #9]
 8002832:	b29a      	uxth	r2, r3
 8002834:	2300      	movs	r3, #0
 8002836:	9301      	str	r3, [sp, #4]
 8002838:	2302      	movs	r3, #2
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002840:	2178      	movs	r1, #120	; 0x78
 8002842:	4863      	ldr	r0, [pc, #396]	; (80029d0 <FreqMenu_DrawPresetMenu+0x13a8>)
 8002844:	f00b fe9e 	bl	800e584 <ILI9341_Draw_Text>
			break;
 8002848:	e17a      	b.n	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800284a:	7bfb      	ldrb	r3, [r7, #15]
 800284c:	b29a      	uxth	r2, r3
 800284e:	2300      	movs	r3, #0
 8002850:	9301      	str	r3, [sp, #4]
 8002852:	2302      	movs	r3, #2
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800285a:	2105      	movs	r1, #5
 800285c:	484f      	ldr	r0, [pc, #316]	; (800299c <FreqMenu_DrawPresetMenu+0x1374>)
 800285e:	f00b fe91 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002862:	7bbb      	ldrb	r3, [r7, #14]
 8002864:	b29a      	uxth	r2, r3
 8002866:	2300      	movs	r3, #0
 8002868:	9301      	str	r3, [sp, #4]
 800286a:	2302      	movs	r3, #2
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002872:	2105      	movs	r1, #5
 8002874:	484a      	ldr	r0, [pc, #296]	; (80029a0 <FreqMenu_DrawPresetMenu+0x1378>)
 8002876:	f00b fe85 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800287a:	7b7b      	ldrb	r3, [r7, #13]
 800287c:	b29a      	uxth	r2, r3
 800287e:	2300      	movs	r3, #0
 8002880:	9301      	str	r3, [sp, #4]
 8002882:	2302      	movs	r3, #2
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800288a:	2105      	movs	r1, #5
 800288c:	4845      	ldr	r0, [pc, #276]	; (80029a4 <FreqMenu_DrawPresetMenu+0x137c>)
 800288e:	f00b fe79 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002892:	7b3b      	ldrb	r3, [r7, #12]
 8002894:	b29a      	uxth	r2, r3
 8002896:	2300      	movs	r3, #0
 8002898:	9301      	str	r3, [sp, #4]
 800289a:	2302      	movs	r3, #2
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028a2:	2105      	movs	r1, #5
 80028a4:	4840      	ldr	r0, [pc, #256]	; (80029a8 <FreqMenu_DrawPresetMenu+0x1380>)
 80028a6:	f00b fe6d 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028aa:	7afb      	ldrb	r3, [r7, #11]
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	2300      	movs	r3, #0
 80028b0:	9301      	str	r3, [sp, #4]
 80028b2:	2302      	movs	r3, #2
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028ba:	2105      	movs	r1, #5
 80028bc:	483b      	ldr	r0, [pc, #236]	; (80029ac <FreqMenu_DrawPresetMenu+0x1384>)
 80028be:	f00b fe61 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028c2:	7abb      	ldrb	r3, [r7, #10]
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	2300      	movs	r3, #0
 80028c8:	9301      	str	r3, [sp, #4]
 80028ca:	2302      	movs	r3, #2
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028d2:	2105      	movs	r1, #5
 80028d4:	4836      	ldr	r0, [pc, #216]	; (80029b0 <FreqMenu_DrawPresetMenu+0x1388>)
 80028d6:	f00b fe55 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028da:	7a7b      	ldrb	r3, [r7, #9]
 80028dc:	b29a      	uxth	r2, r3
 80028de:	2300      	movs	r3, #0
 80028e0:	9301      	str	r3, [sp, #4]
 80028e2:	2302      	movs	r3, #2
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028ea:	2105      	movs	r1, #5
 80028ec:	4831      	ldr	r0, [pc, #196]	; (80029b4 <FreqMenu_DrawPresetMenu+0x138c>)
 80028ee:	f00b fe49 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	2300      	movs	r3, #0
 80028f8:	9301      	str	r3, [sp, #4]
 80028fa:	2302      	movs	r3, #2
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002902:	2178      	movs	r1, #120	; 0x78
 8002904:	482c      	ldr	r0, [pc, #176]	; (80029b8 <FreqMenu_DrawPresetMenu+0x1390>)
 8002906:	f00b fe3d 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800290a:	7bbb      	ldrb	r3, [r7, #14]
 800290c:	b29a      	uxth	r2, r3
 800290e:	2300      	movs	r3, #0
 8002910:	9301      	str	r3, [sp, #4]
 8002912:	2302      	movs	r3, #2
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800291a:	2178      	movs	r1, #120	; 0x78
 800291c:	4827      	ldr	r0, [pc, #156]	; (80029bc <FreqMenu_DrawPresetMenu+0x1394>)
 800291e:	f00b fe31 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002922:	7b7b      	ldrb	r3, [r7, #13]
 8002924:	b29a      	uxth	r2, r3
 8002926:	2300      	movs	r3, #0
 8002928:	9301      	str	r3, [sp, #4]
 800292a:	2302      	movs	r3, #2
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002932:	2178      	movs	r1, #120	; 0x78
 8002934:	4822      	ldr	r0, [pc, #136]	; (80029c0 <FreqMenu_DrawPresetMenu+0x1398>)
 8002936:	f00b fe25 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800293a:	7b3b      	ldrb	r3, [r7, #12]
 800293c:	b29a      	uxth	r2, r3
 800293e:	2300      	movs	r3, #0
 8002940:	9301      	str	r3, [sp, #4]
 8002942:	2302      	movs	r3, #2
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800294a:	2178      	movs	r1, #120	; 0x78
 800294c:	481d      	ldr	r0, [pc, #116]	; (80029c4 <FreqMenu_DrawPresetMenu+0x139c>)
 800294e:	f00b fe19 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002952:	7afb      	ldrb	r3, [r7, #11]
 8002954:	b29a      	uxth	r2, r3
 8002956:	2300      	movs	r3, #0
 8002958:	9301      	str	r3, [sp, #4]
 800295a:	2302      	movs	r3, #2
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002962:	2178      	movs	r1, #120	; 0x78
 8002964:	4818      	ldr	r0, [pc, #96]	; (80029c8 <FreqMenu_DrawPresetMenu+0x13a0>)
 8002966:	f00b fe0d 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800296a:	7abb      	ldrb	r3, [r7, #10]
 800296c:	b29a      	uxth	r2, r3
 800296e:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002972:	9301      	str	r3, [sp, #4]
 8002974:	2302      	movs	r3, #2
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	2300      	movs	r3, #0
 800297a:	2178      	movs	r1, #120	; 0x78
 800297c:	4813      	ldr	r0, [pc, #76]	; (80029cc <FreqMenu_DrawPresetMenu+0x13a4>)
 800297e:	f00b fe01 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002982:	7a7b      	ldrb	r3, [r7, #9]
 8002984:	b29a      	uxth	r2, r3
 8002986:	2300      	movs	r3, #0
 8002988:	9301      	str	r3, [sp, #4]
 800298a:	2302      	movs	r3, #2
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002992:	2178      	movs	r1, #120	; 0x78
 8002994:	480e      	ldr	r0, [pc, #56]	; (80029d0 <FreqMenu_DrawPresetMenu+0x13a8>)
 8002996:	f00b fdf5 	bl	800e584 <ILI9341_Draw_Text>
			break;
 800299a:	e0d1      	b.n	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
 800299c:	08013618 	.word	0x08013618
 80029a0:	08013620 	.word	0x08013620
 80029a4:	08013628 	.word	0x08013628
 80029a8:	08013630 	.word	0x08013630
 80029ac:	08013638 	.word	0x08013638
 80029b0:	08013640 	.word	0x08013640
 80029b4:	08013648 	.word	0x08013648
 80029b8:	08013650 	.word	0x08013650
 80029bc:	08013658 	.word	0x08013658
 80029c0:	08013660 	.word	0x08013660
 80029c4:	08013668 	.word	0x08013668
 80029c8:	08013670 	.word	0x08013670
 80029cc:	08013678 	.word	0x08013678
 80029d0:	08013680 	.word	0x08013680
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029d4:	7bfb      	ldrb	r3, [r7, #15]
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	2300      	movs	r3, #0
 80029da:	9301      	str	r3, [sp, #4]
 80029dc:	2302      	movs	r3, #2
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029e4:	2105      	movs	r1, #5
 80029e6:	4858      	ldr	r0, [pc, #352]	; (8002b48 <FreqMenu_DrawPresetMenu+0x1520>)
 80029e8:	f00b fdcc 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029ec:	7bbb      	ldrb	r3, [r7, #14]
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	2300      	movs	r3, #0
 80029f2:	9301      	str	r3, [sp, #4]
 80029f4:	2302      	movs	r3, #2
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029fc:	2105      	movs	r1, #5
 80029fe:	4853      	ldr	r0, [pc, #332]	; (8002b4c <FreqMenu_DrawPresetMenu+0x1524>)
 8002a00:	f00b fdc0 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a04:	7b7b      	ldrb	r3, [r7, #13]
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	2300      	movs	r3, #0
 8002a0a:	9301      	str	r3, [sp, #4]
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a14:	2105      	movs	r1, #5
 8002a16:	484e      	ldr	r0, [pc, #312]	; (8002b50 <FreqMenu_DrawPresetMenu+0x1528>)
 8002a18:	f00b fdb4 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a1c:	7b3b      	ldrb	r3, [r7, #12]
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	2300      	movs	r3, #0
 8002a22:	9301      	str	r3, [sp, #4]
 8002a24:	2302      	movs	r3, #2
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a2c:	2105      	movs	r1, #5
 8002a2e:	4849      	ldr	r0, [pc, #292]	; (8002b54 <FreqMenu_DrawPresetMenu+0x152c>)
 8002a30:	f00b fda8 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a34:	7afb      	ldrb	r3, [r7, #11]
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	2300      	movs	r3, #0
 8002a3a:	9301      	str	r3, [sp, #4]
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a44:	2105      	movs	r1, #5
 8002a46:	4844      	ldr	r0, [pc, #272]	; (8002b58 <FreqMenu_DrawPresetMenu+0x1530>)
 8002a48:	f00b fd9c 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a4c:	7abb      	ldrb	r3, [r7, #10]
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	2300      	movs	r3, #0
 8002a52:	9301      	str	r3, [sp, #4]
 8002a54:	2302      	movs	r3, #2
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a5c:	2105      	movs	r1, #5
 8002a5e:	483f      	ldr	r0, [pc, #252]	; (8002b5c <FreqMenu_DrawPresetMenu+0x1534>)
 8002a60:	f00b fd90 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a64:	7a7b      	ldrb	r3, [r7, #9]
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	2300      	movs	r3, #0
 8002a6a:	9301      	str	r3, [sp, #4]
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a74:	2105      	movs	r1, #5
 8002a76:	483a      	ldr	r0, [pc, #232]	; (8002b60 <FreqMenu_DrawPresetMenu+0x1538>)
 8002a78:	f00b fd84 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	2300      	movs	r3, #0
 8002a82:	9301      	str	r3, [sp, #4]
 8002a84:	2302      	movs	r3, #2
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a8c:	2178      	movs	r1, #120	; 0x78
 8002a8e:	4835      	ldr	r0, [pc, #212]	; (8002b64 <FreqMenu_DrawPresetMenu+0x153c>)
 8002a90:	f00b fd78 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a94:	7bbb      	ldrb	r3, [r7, #14]
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	2300      	movs	r3, #0
 8002a9a:	9301      	str	r3, [sp, #4]
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002aa4:	2178      	movs	r1, #120	; 0x78
 8002aa6:	4830      	ldr	r0, [pc, #192]	; (8002b68 <FreqMenu_DrawPresetMenu+0x1540>)
 8002aa8:	f00b fd6c 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002aac:	7b7b      	ldrb	r3, [r7, #13]
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	9301      	str	r3, [sp, #4]
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002abc:	2178      	movs	r1, #120	; 0x78
 8002abe:	482b      	ldr	r0, [pc, #172]	; (8002b6c <FreqMenu_DrawPresetMenu+0x1544>)
 8002ac0:	f00b fd60 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ac4:	7b3b      	ldrb	r3, [r7, #12]
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	2300      	movs	r3, #0
 8002aca:	9301      	str	r3, [sp, #4]
 8002acc:	2302      	movs	r3, #2
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ad4:	2178      	movs	r1, #120	; 0x78
 8002ad6:	4826      	ldr	r0, [pc, #152]	; (8002b70 <FreqMenu_DrawPresetMenu+0x1548>)
 8002ad8:	f00b fd54 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002adc:	7afb      	ldrb	r3, [r7, #11]
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	9301      	str	r3, [sp, #4]
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002aec:	2178      	movs	r1, #120	; 0x78
 8002aee:	4821      	ldr	r0, [pc, #132]	; (8002b74 <FreqMenu_DrawPresetMenu+0x154c>)
 8002af0:	f00b fd48 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002af4:	7abb      	ldrb	r3, [r7, #10]
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	2300      	movs	r3, #0
 8002afa:	9301      	str	r3, [sp, #4]
 8002afc:	2302      	movs	r3, #2
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b04:	2178      	movs	r1, #120	; 0x78
 8002b06:	481c      	ldr	r0, [pc, #112]	; (8002b78 <FreqMenu_DrawPresetMenu+0x1550>)
 8002b08:	f00b fd3c 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002b0c:	7a7b      	ldrb	r3, [r7, #9]
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002b14:	9301      	str	r3, [sp, #4]
 8002b16:	2302      	movs	r3, #2
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	2178      	movs	r1, #120	; 0x78
 8002b1e:	4817      	ldr	r0, [pc, #92]	; (8002b7c <FreqMenu_DrawPresetMenu+0x1554>)
 8002b20:	f00b fd30 	bl	800e584 <ILI9341_Draw_Text>
			break;
 8002b24:	bf00      	nop
 8002b26:	e00b      	b.n	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8002b28:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002b2c:	9301      	str	r3, [sp, #4]
 8002b2e:	2301      	movs	r3, #1
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	2300      	movs	r3, #0
 8002b34:	22b4      	movs	r2, #180	; 0xb4
 8002b36:	2105      	movs	r1, #5
 8002b38:	4811      	ldr	r0, [pc, #68]	; (8002b80 <FreqMenu_DrawPresetMenu+0x1558>)
 8002b3a:	f00b fd23 	bl	800e584 <ILI9341_Draw_Text>
}
 8002b3e:	e7ff      	b.n	8002b40 <FreqMenu_DrawPresetMenu+0x1518>
 8002b40:	bf00      	nop
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	08013618 	.word	0x08013618
 8002b4c:	08013620 	.word	0x08013620
 8002b50:	08013628 	.word	0x08013628
 8002b54:	08013630 	.word	0x08013630
 8002b58:	08013638 	.word	0x08013638
 8002b5c:	08013640 	.word	0x08013640
 8002b60:	08013648 	.word	0x08013648
 8002b64:	08013650 	.word	0x08013650
 8002b68:	08013658 	.word	0x08013658
 8002b6c:	08013660 	.word	0x08013660
 8002b70:	08013668 	.word	0x08013668
 8002b74:	08013670 	.word	0x08013670
 8002b78:	08013678 	.word	0x08013678
 8002b7c:	08013680 	.word	0x08013680
 8002b80:	0801368c 	.word	0x0801368c

08002b84 <FreqMenu_DrawAdjustMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawAdjustMenu()
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->ADJUST", 5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002b8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b8e:	9301      	str	r3, [sp, #4]
 8002b90:	2302      	movs	r3, #2
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	2300      	movs	r3, #0
 8002b96:	220a      	movs	r2, #10
 8002b98:	2105      	movs	r1, #5
 8002b9a:	4804      	ldr	r0, [pc, #16]	; (8002bac <FreqMenu_DrawAdjustMenu+0x28>)
 8002b9c:	f00b fcf2 	bl	800e584 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8002ba0:	f7fe f9bc 	bl	8000f1c <DM_DisplayFormattedOutput>
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
		ILI9341_Draw_Text(freq, 250, 150, WHITE, 1, BLACK);
*/

}
 8002ba4:	bf00      	nop
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	080136bc 	.word	0x080136bc

08002bb0 <FreqMenu_DrawSweepMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawSweepMenu()
{
 8002bb0:	b5b0      	push	{r4, r5, r7, lr}
 8002bb2:	b0a0      	sub	sp, #128	; 0x80
 8002bb4:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->SWEEP", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002bb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bba:	9301      	str	r3, [sp, #4]
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	220a      	movs	r2, #10
 8002bc4:	2105      	movs	r1, #5
 8002bc6:	48a1      	ldr	r0, [pc, #644]	; (8002e4c <FreqMenu_DrawSweepMenu+0x29c>)
 8002bc8:	f00b fcdc 	bl	800e584 <ILI9341_Draw_Text>


	// draw enabled status


	char enabled_text[20] = "";
 8002bcc:	2300      	movs	r3, #0
 8002bce:	667b      	str	r3, [r7, #100]	; 0x64
 8002bd0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8002bde:	4b9c      	ldr	r3, [pc, #624]	; (8002e50 <FreqMenu_DrawSweepMenu+0x2a0>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d109      	bne.n	8002bfe <FreqMenu_DrawSweepMenu+0x4e>
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  RUNNING");
 8002bea:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002bee:	4a99      	ldr	r2, [pc, #612]	; (8002e54 <FreqMenu_DrawSweepMenu+0x2a4>)
 8002bf0:	461c      	mov	r4, r3
 8002bf2:	4615      	mov	r5, r2
 8002bf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bf8:	682b      	ldr	r3, [r5, #0]
 8002bfa:	7023      	strb	r3, [r4, #0]
 8002bfc:	e008      	b.n	8002c10 <FreqMenu_DrawSweepMenu+0x60>
	}
	else
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  STOPPED");
 8002bfe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002c02:	4a95      	ldr	r2, [pc, #596]	; (8002e58 <FreqMenu_DrawSweepMenu+0x2a8>)
 8002c04:	461c      	mov	r4, r3
 8002c06:	4615      	mov	r5, r2
 8002c08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c0c:	682b      	ldr	r3, [r5, #0]
 8002c0e:	7023      	strb	r3, [r4, #0]
	}

	ILI9341_Draw_Text(enabled_text, 5, 40, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c10:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8002c14:	2300      	movs	r3, #0
 8002c16:	9301      	str	r3, [sp, #4]
 8002c18:	2302      	movs	r3, #2
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c20:	2228      	movs	r2, #40	; 0x28
 8002c22:	2105      	movs	r1, #5
 8002c24:	f00b fcae 	bl	800e584 <ILI9341_Draw_Text>

	// draw output freq status
	char out_hertz[25] = "";
 8002c28:	2300      	movs	r3, #0
 8002c2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c2c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	605a      	str	r2, [r3, #4]
 8002c36:	609a      	str	r2, [r3, #8]
 8002c38:	60da      	str	r2, [r3, #12]
 8002c3a:	611a      	str	r2, [r3, #16]
 8002c3c:	751a      	strb	r2, [r3, #20]
	snprintf(out_hertz, sizeof(out_hertz), "OUTPUT: %7.2f Hz", SM_GetOutputInHertz());
 8002c3e:	f003 fa4d 	bl	80060dc <SM_GetOutputInHertz>
 8002c42:	ee10 3a10 	vmov	r3, s0
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fd fca6 	bl	8000598 <__aeabi_f2d>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	460c      	mov	r4, r1
 8002c50:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002c54:	e9cd 3400 	strd	r3, r4, [sp]
 8002c58:	4a80      	ldr	r2, [pc, #512]	; (8002e5c <FreqMenu_DrawSweepMenu+0x2ac>)
 8002c5a:	2119      	movs	r1, #25
 8002c5c:	f00d f84e 	bl	800fcfc <sniprintf>
	ILI9341_Draw_Text(out_hertz, 5, 60, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c60:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002c64:	2300      	movs	r3, #0
 8002c66:	9301      	str	r3, [sp, #4]
 8002c68:	2302      	movs	r3, #2
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c70:	223c      	movs	r2, #60	; 0x3c
 8002c72:	2105      	movs	r1, #5
 8002c74:	f00b fc86 	bl	800e584 <ILI9341_Draw_Text>
		//snprintf(dir_text, sizeof(dir_text), "DIRECTION:  N/A");
	}
	else
	{
*/
		ILI9341_Draw_Text("SWEEP MODE:", 5, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c78:	2300      	movs	r3, #0
 8002c7a:	9301      	str	r3, [sp, #4]
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c84:	2264      	movs	r2, #100	; 0x64
 8002c86:	2105      	movs	r1, #5
 8002c88:	4875      	ldr	r0, [pc, #468]	; (8002e60 <FreqMenu_DrawSweepMenu+0x2b0>)
 8002c8a:	f00b fc7b 	bl	800e584 <ILI9341_Draw_Text>

		// get direction
		if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 8002c8e:	4b70      	ldr	r3, [pc, #448]	; (8002e50 <FreqMenu_DrawSweepMenu+0x2a0>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0310 	and.w	r3, r3, #16
 8002c96:	2b10      	cmp	r3, #16
 8002c98:	d117      	bne.n	8002cca <FreqMenu_DrawSweepMenu+0x11a>
		{
			ILI9341_Draw_Text("UP", 235, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	9301      	str	r3, [sp, #4]
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ca6:	2264      	movs	r2, #100	; 0x64
 8002ca8:	21eb      	movs	r1, #235	; 0xeb
 8002caa:	486e      	ldr	r0, [pc, #440]	; (8002e64 <FreqMenu_DrawSweepMenu+0x2b4>)
 8002cac:	f00b fc6a 	bl	800e584 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("DOWN", 265, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002cb0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002cb4:	9301      	str	r3, [sp, #4]
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	2300      	movs	r3, #0
 8002cbc:	2264      	movs	r2, #100	; 0x64
 8002cbe:	f240 1109 	movw	r1, #265	; 0x109
 8002cc2:	4869      	ldr	r0, [pc, #420]	; (8002e68 <FreqMenu_DrawSweepMenu+0x2b8>)
 8002cc4:	f00b fc5e 	bl	800e584 <ILI9341_Draw_Text>
 8002cc8:	e016      	b.n	8002cf8 <FreqMenu_DrawSweepMenu+0x148>
		}
		else
		{
			ILI9341_Draw_Text("DOWN", 265, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002cca:	2300      	movs	r3, #0
 8002ccc:	9301      	str	r3, [sp, #4]
 8002cce:	2302      	movs	r3, #2
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002cd6:	2264      	movs	r2, #100	; 0x64
 8002cd8:	f240 1109 	movw	r1, #265	; 0x109
 8002cdc:	4862      	ldr	r0, [pc, #392]	; (8002e68 <FreqMenu_DrawSweepMenu+0x2b8>)
 8002cde:	f00b fc51 	bl	800e584 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("UP", 235, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002ce2:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002ce6:	9301      	str	r3, [sp, #4]
 8002ce8:	2302      	movs	r3, #2
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	2300      	movs	r3, #0
 8002cee:	2264      	movs	r2, #100	; 0x64
 8002cf0:	21eb      	movs	r1, #235	; 0xeb
 8002cf2:	485c      	ldr	r0, [pc, #368]	; (8002e64 <FreqMenu_DrawSweepMenu+0x2b4>)
 8002cf4:	f00b fc46 	bl	800e584 <ILI9341_Draw_Text>




	// draw rate status
	if(theCurrentEncoderSweepFunction == ENCODER_SWEEP_SPEED_FUNCTION)
 8002cf8:	4b5c      	ldr	r3, [pc, #368]	; (8002e6c <FreqMenu_DrawSweepMenu+0x2bc>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10b      	bne.n	8002d18 <FreqMenu_DrawSweepMenu+0x168>
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002d00:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002d04:	9301      	str	r3, [sp, #4]
 8002d06:	2302      	movs	r3, #2
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	2278      	movs	r2, #120	; 0x78
 8002d0e:	2105      	movs	r1, #5
 8002d10:	4857      	ldr	r0, [pc, #348]	; (8002e70 <FreqMenu_DrawSweepMenu+0x2c0>)
 8002d12:	f00b fc37 	bl	800e584 <ILI9341_Draw_Text>
 8002d16:	e00a      	b.n	8002d2e <FreqMenu_DrawSweepMenu+0x17e>
	}
	else
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d18:	2300      	movs	r3, #0
 8002d1a:	9301      	str	r3, [sp, #4]
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d24:	2278      	movs	r2, #120	; 0x78
 8002d26:	2105      	movs	r1, #5
 8002d28:	4851      	ldr	r0, [pc, #324]	; (8002e70 <FreqMenu_DrawSweepMenu+0x2c0>)
 8002d2a:	f00b fc2b 	bl	800e584 <ILI9341_Draw_Text>
	}
	char arr_text[25] = "";
 8002d2e:	2300      	movs	r3, #0
 8002d30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	605a      	str	r2, [r3, #4]
 8002d3c:	609a      	str	r2, [r3, #8]
 8002d3e:	60da      	str	r2, [r3, #12]
 8002d40:	611a      	str	r2, [r3, #16]
 8002d42:	751a      	strb	r2, [r3, #20]
	snprintf(arr_text, sizeof(arr_text), "%8.3f Hz", calculated_sweep_in_hertz);
 8002d44:	4b4b      	ldr	r3, [pc, #300]	; (8002e74 <FreqMenu_DrawSweepMenu+0x2c4>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7fd fc25 	bl	8000598 <__aeabi_f2d>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	460c      	mov	r4, r1
 8002d52:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002d56:	e9cd 3400 	strd	r3, r4, [sp]
 8002d5a:	4a47      	ldr	r2, [pc, #284]	; (8002e78 <FreqMenu_DrawSweepMenu+0x2c8>)
 8002d5c:	2119      	movs	r1, #25
 8002d5e:	f00c ffcd 	bl	800fcfc <sniprintf>
	ILI9341_Draw_Text(arr_text, 182, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d62:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002d66:	2300      	movs	r3, #0
 8002d68:	9301      	str	r3, [sp, #4]
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d72:	2278      	movs	r2, #120	; 0x78
 8002d74:	21b6      	movs	r1, #182	; 0xb6
 8002d76:	f00b fc05 	bl	800e584 <ILI9341_Draw_Text>


	// draw upper sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_UP) )
 8002d7a:	4b3c      	ldr	r3, [pc, #240]	; (8002e6c <FreqMenu_DrawSweepMenu+0x2bc>)
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d10f      	bne.n	8002da2 <FreqMenu_DrawSweepMenu+0x1f2>
 8002d82:	4b3e      	ldr	r3, [pc, #248]	; (8002e7c <FreqMenu_DrawSweepMenu+0x2cc>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10b      	bne.n	8002da2 <FreqMenu_DrawSweepMenu+0x1f2>
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);	// highlighted
 8002d8a:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002d8e:	9301      	str	r3, [sp, #4]
 8002d90:	2302      	movs	r3, #2
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	2300      	movs	r3, #0
 8002d96:	228c      	movs	r2, #140	; 0x8c
 8002d98:	2105      	movs	r1, #5
 8002d9a:	4839      	ldr	r0, [pc, #228]	; (8002e80 <FreqMenu_DrawSweepMenu+0x2d0>)
 8002d9c:	f00b fbf2 	bl	800e584 <ILI9341_Draw_Text>
 8002da0:	e00a      	b.n	8002db8 <FreqMenu_DrawSweepMenu+0x208>
		//ILI9341_Draw_Arrow(ARROW_UP, 280, 120, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002da2:	2300      	movs	r3, #0
 8002da4:	9301      	str	r3, [sp, #4]
 8002da6:	2302      	movs	r3, #2
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002dae:	228c      	movs	r2, #140	; 0x8c
 8002db0:	2105      	movs	r1, #5
 8002db2:	4833      	ldr	r0, [pc, #204]	; (8002e80 <FreqMenu_DrawSweepMenu+0x2d0>)
 8002db4:	f00b fbe6 	bl	800e584 <ILI9341_Draw_Text>
	}
	char sweep_lower_text[20] = "";
 8002db8:	2300      	movs	r3, #0
 8002dba:	61bb      	str	r3, [r7, #24]
 8002dbc:	f107 031c 	add.w	r3, r7, #28
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	605a      	str	r2, [r3, #4]
 8002dc6:	609a      	str	r2, [r3, #8]
 8002dc8:	60da      	str	r2, [r3, #12]
	snprintf(sweep_lower_text, sizeof(sweep_lower_text), "%9.2f  Hz", SM_ConvertPeriodToHertz(sweep_lower_bounds_shortest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP);
 8002dca:	4b2e      	ldr	r3, [pc, #184]	; (8002e84 <FreqMenu_DrawSweepMenu+0x2d4>)
 8002dcc:	edd3 7a00 	vldr	s15, [r3]
 8002dd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dd4:	4b2c      	ldr	r3, [pc, #176]	; (8002e88 <FreqMenu_DrawSweepMenu+0x2d8>)
 8002dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	4619      	mov	r1, r3
 8002ddc:	ee17 0a90 	vmov	r0, s15
 8002de0:	f003 f9c0 	bl	8006164 <SM_ConvertPeriodToHertz>
 8002de4:	eeb0 7a40 	vmov.f32	s14, s0
 8002de8:	eddf 7a28 	vldr	s15, [pc, #160]	; 8002e8c <FreqMenu_DrawSweepMenu+0x2dc>
 8002dec:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002df0:	ee16 0a90 	vmov	r0, s13
 8002df4:	f7fd fbd0 	bl	8000598 <__aeabi_f2d>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	460c      	mov	r4, r1
 8002dfc:	f107 0018 	add.w	r0, r7, #24
 8002e00:	e9cd 3400 	strd	r3, r4, [sp]
 8002e04:	4a22      	ldr	r2, [pc, #136]	; (8002e90 <FreqMenu_DrawSweepMenu+0x2e0>)
 8002e06:	2114      	movs	r1, #20
 8002e08:	f00c ff78 	bl	800fcfc <sniprintf>
	ILI9341_Draw_Text(sweep_lower_text, 158, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e0c:	f107 0018 	add.w	r0, r7, #24
 8002e10:	2300      	movs	r3, #0
 8002e12:	9301      	str	r3, [sp, #4]
 8002e14:	2302      	movs	r3, #2
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e1c:	228c      	movs	r2, #140	; 0x8c
 8002e1e:	219e      	movs	r1, #158	; 0x9e
 8002e20:	f00b fbb0 	bl	800e584 <ILI9341_Draw_Text>


	// draw lower sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_DOWN) )
 8002e24:	4b11      	ldr	r3, [pc, #68]	; (8002e6c <FreqMenu_DrawSweepMenu+0x2bc>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d135      	bne.n	8002e98 <FreqMenu_DrawSweepMenu+0x2e8>
 8002e2c:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <FreqMenu_DrawSweepMenu+0x2cc>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d131      	bne.n	8002e98 <FreqMenu_DrawSweepMenu+0x2e8>
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR); 	// highlighted
 8002e34:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002e38:	9301      	str	r3, [sp, #4]
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	2300      	movs	r3, #0
 8002e40:	22a0      	movs	r2, #160	; 0xa0
 8002e42:	2105      	movs	r1, #5
 8002e44:	4813      	ldr	r0, [pc, #76]	; (8002e94 <FreqMenu_DrawSweepMenu+0x2e4>)
 8002e46:	f00b fb9d 	bl	800e584 <ILI9341_Draw_Text>
 8002e4a:	e030      	b.n	8002eae <FreqMenu_DrawSweepMenu+0x2fe>
 8002e4c:	080136d0 	.word	0x080136d0
 8002e50:	40000c00 	.word	0x40000c00
 8002e54:	080136e4 	.word	0x080136e4
 8002e58:	080136f8 	.word	0x080136f8
 8002e5c:	0801370c 	.word	0x0801370c
 8002e60:	08013720 	.word	0x08013720
 8002e64:	0801372c 	.word	0x0801372c
 8002e68:	08013730 	.word	0x08013730
 8002e6c:	20001e55 	.word	0x20001e55
 8002e70:	08013738 	.word	0x08013738
 8002e74:	20001ea8 	.word	0x20001ea8
 8002e78:	08013748 	.word	0x08013748
 8002e7c:	20001e54 	.word	0x20001e54
 8002e80:	08013754 	.word	0x08013754
 8002e84:	20000120 	.word	0x20000120
 8002e88:	40013400 	.word	0x40013400
 8002e8c:	42f00000 	.word	0x42f00000
 8002e90:	08013764 	.word	0x08013764
 8002e94:	08013770 	.word	0x08013770
		//ILI9341_Draw_Arrow(ARROW_DOWN, 280, 130, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e98:	2300      	movs	r3, #0
 8002e9a:	9301      	str	r3, [sp, #4]
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ea4:	22a0      	movs	r2, #160	; 0xa0
 8002ea6:	2105      	movs	r1, #5
 8002ea8:	484d      	ldr	r0, [pc, #308]	; (8002fe0 <FreqMenu_DrawSweepMenu+0x430>)
 8002eaa:	f00b fb6b 	bl	800e584 <ILI9341_Draw_Text>
	}
	char sweep_upper_text[20] = "";
 8002eae:	2300      	movs	r3, #0
 8002eb0:	607b      	str	r3, [r7, #4]
 8002eb2:	f107 0308 	add.w	r3, r7, #8
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	605a      	str	r2, [r3, #4]
 8002ebc:	609a      	str	r2, [r3, #8]
 8002ebe:	60da      	str	r2, [r3, #12]
	snprintf(sweep_upper_text, sizeof(sweep_upper_text), "%8.2f  Hz", SM_ConvertPeriodToHertz(sweep_upper_bounds_longest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP );
 8002ec0:	4b48      	ldr	r3, [pc, #288]	; (8002fe4 <FreqMenu_DrawSweepMenu+0x434>)
 8002ec2:	edd3 7a00 	vldr	s15, [r3]
 8002ec6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002eca:	4b47      	ldr	r3, [pc, #284]	; (8002fe8 <FreqMenu_DrawSweepMenu+0x438>)
 8002ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	ee17 0a90 	vmov	r0, s15
 8002ed6:	f003 f945 	bl	8006164 <SM_ConvertPeriodToHertz>
 8002eda:	eeb0 7a40 	vmov.f32	s14, s0
 8002ede:	eddf 7a43 	vldr	s15, [pc, #268]	; 8002fec <FreqMenu_DrawSweepMenu+0x43c>
 8002ee2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002ee6:	ee16 0a90 	vmov	r0, s13
 8002eea:	f7fd fb55 	bl	8000598 <__aeabi_f2d>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	460c      	mov	r4, r1
 8002ef2:	1d38      	adds	r0, r7, #4
 8002ef4:	e9cd 3400 	strd	r3, r4, [sp]
 8002ef8:	4a3d      	ldr	r2, [pc, #244]	; (8002ff0 <FreqMenu_DrawSweepMenu+0x440>)
 8002efa:	2114      	movs	r1, #20
 8002efc:	f00c fefe 	bl	800fcfc <sniprintf>
	ILI9341_Draw_Text(sweep_upper_text, 170, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002f00:	1d38      	adds	r0, r7, #4
 8002f02:	2300      	movs	r3, #0
 8002f04:	9301      	str	r3, [sp, #4]
 8002f06:	2302      	movs	r3, #2
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002f0e:	22a0      	movs	r2, #160	; 0xa0
 8002f10:	21aa      	movs	r1, #170	; 0xaa
 8002f12:	f00b fb37 	bl	800e584 <ILI9341_Draw_Text>


	// draw bottom menu button text
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8002f16:	4b37      	ldr	r3, [pc, #220]	; (8002ff4 <FreqMenu_DrawSweepMenu+0x444>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d10b      	bne.n	8002f3a <FreqMenu_DrawSweepMenu+0x38a>
		ILI9341_Draw_Text("PAUSE ", 6, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8002f22:	f240 23fd 	movw	r3, #765	; 0x2fd
 8002f26:	9301      	str	r3, [sp, #4]
 8002f28:	2302      	movs	r3, #2
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	22d5      	movs	r2, #213	; 0xd5
 8002f30:	2106      	movs	r1, #6
 8002f32:	4831      	ldr	r0, [pc, #196]	; (8002ff8 <FreqMenu_DrawSweepMenu+0x448>)
 8002f34:	f00b fb26 	bl	800e584 <ILI9341_Draw_Text>
 8002f38:	e00a      	b.n	8002f50 <FreqMenu_DrawSweepMenu+0x3a0>
	else
		ILI9341_Draw_Text("RESUME", 5, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8002f3a:	f240 23fd 	movw	r3, #765	; 0x2fd
 8002f3e:	9301      	str	r3, [sp, #4]
 8002f40:	2302      	movs	r3, #2
 8002f42:	9300      	str	r3, [sp, #0]
 8002f44:	2300      	movs	r3, #0
 8002f46:	22d5      	movs	r2, #213	; 0xd5
 8002f48:	2105      	movs	r1, #5
 8002f4a:	482c      	ldr	r0, [pc, #176]	; (8002ffc <FreqMenu_DrawSweepMenu+0x44c>)
 8002f4c:	f00b fb1a 	bl	800e584 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	104,	204, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8002f50:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8002f54:	9301      	str	r3, [sp, #4]
 8002f56:	2302      	movs	r3, #2
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	22cc      	movs	r2, #204	; 0xcc
 8002f5e:	2168      	movs	r1, #104	; 0x68
 8002f60:	4827      	ldr	r0, [pc, #156]	; (8003000 <FreqMenu_DrawSweepMenu+0x450>)
 8002f62:	f00b fb0f 	bl	800e584 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("MODE",	97, 	222, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8002f66:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8002f6a:	9301      	str	r3, [sp, #4]
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	2300      	movs	r3, #0
 8002f72:	22de      	movs	r2, #222	; 0xde
 8002f74:	2161      	movs	r1, #97	; 0x61
 8002f76:	4823      	ldr	r0, [pc, #140]	; (8003004 <FreqMenu_DrawSweepMenu+0x454>)
 8002f78:	f00b fb04 	bl	800e584 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	183,	204, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8002f7c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002f80:	9301      	str	r3, [sp, #4]
 8002f82:	2302      	movs	r3, #2
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	2300      	movs	r3, #0
 8002f88:	22cc      	movs	r2, #204	; 0xcc
 8002f8a:	21b7      	movs	r1, #183	; 0xb7
 8002f8c:	481c      	ldr	r0, [pc, #112]	; (8003000 <FreqMenu_DrawSweepMenu+0x450>)
 8002f8e:	f00b faf9 	bl	800e584 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SPEED",	173, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8002f92:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002f96:	9301      	str	r3, [sp, #4]
 8002f98:	2302      	movs	r3, #2
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	22de      	movs	r2, #222	; 0xde
 8002fa0:	21ad      	movs	r1, #173	; 0xad
 8002fa2:	4819      	ldr	r0, [pc, #100]	; (8003008 <FreqMenu_DrawSweepMenu+0x458>)
 8002fa4:	f00b faee 	bl	800e584 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	263, 	204, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8002fa8:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002fac:	9301      	str	r3, [sp, #4]
 8002fae:	2302      	movs	r3, #2
 8002fb0:	9300      	str	r3, [sp, #0]
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	22cc      	movs	r2, #204	; 0xcc
 8002fb6:	f240 1107 	movw	r1, #263	; 0x107
 8002fba:	4811      	ldr	r0, [pc, #68]	; (8003000 <FreqMenu_DrawSweepMenu+0x450>)
 8002fbc:	f00b fae2 	bl	800e584 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("LIMIT", 	252, 	222, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8002fc0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002fc4:	9301      	str	r3, [sp, #4]
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	2300      	movs	r3, #0
 8002fcc:	22de      	movs	r2, #222	; 0xde
 8002fce:	21fc      	movs	r1, #252	; 0xfc
 8002fd0:	480e      	ldr	r0, [pc, #56]	; (800300c <FreqMenu_DrawSweepMenu+0x45c>)
 8002fd2:	f00b fad7 	bl	800e584 <ILI9341_Draw_Text>
}
 8002fd6:	bf00      	nop
 8002fd8:	3778      	adds	r7, #120	; 0x78
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bdb0      	pop	{r4, r5, r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	08013770 	.word	0x08013770
 8002fe4:	20000124 	.word	0x20000124
 8002fe8:	40013400 	.word	0x40013400
 8002fec:	42f00000 	.word	0x42f00000
 8002ff0:	08013780 	.word	0x08013780
 8002ff4:	40000c00 	.word	0x40000c00
 8002ff8:	0801378c 	.word	0x0801378c
 8002ffc:	08013794 	.word	0x08013794
 8003000:	0801379c 	.word	0x0801379c
 8003004:	080137a0 	.word	0x080137a0
 8003008:	080137a8 	.word	0x080137a8
 800300c:	080137b0 	.word	0x080137b0

08003010 <FuncMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMenu(eFuncMenu_Status pMenu)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 800301a:	79fb      	ldrb	r3, [r7, #7]
 800301c:	2b02      	cmp	r3, #2
 800301e:	d007      	beq.n	8003030 <FuncMenu_DrawMenu+0x20>
 8003020:	2b03      	cmp	r3, #3
 8003022:	d009      	beq.n	8003038 <FuncMenu_DrawMenu+0x28>
 8003024:	2b01      	cmp	r3, #1
 8003026:	d000      	beq.n	800302a <FuncMenu_DrawMenu+0x1a>
		case ENABLE_FUNC_Aux_MENU:
			FuncMenu_DrawOutputMenu(AUX_CHANNEL);
			break;

		default:
			break;
 8003028:	e00a      	b.n	8003040 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawMainMenu();
 800302a:	f000 f80d 	bl	8003048 <FuncMenu_DrawMainMenu>
			break;
 800302e:	e007      	b.n	8003040 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(SIGNAL_CHANNEL);
 8003030:	2000      	movs	r0, #0
 8003032:	f000 f851 	bl	80030d8 <FuncMenu_DrawOutputMenu>
			break;
 8003036:	e003      	b.n	8003040 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(AUX_CHANNEL);
 8003038:	2001      	movs	r0, #1
 800303a:	f000 f84d 	bl	80030d8 <FuncMenu_DrawOutputMenu>
			break;
 800303e:	bf00      	nop

	}
}
 8003040:	bf00      	nop
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <FuncMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMainMenu()
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FUNC", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 800304e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003052:	9301      	str	r3, [sp, #4]
 8003054:	2302      	movs	r3, #2
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	2300      	movs	r3, #0
 800305a:	220a      	movs	r2, #10
 800305c:	210a      	movs	r1, #10
 800305e:	481a      	ldr	r0, [pc, #104]	; (80030c8 <FuncMenu_DrawMainMenu+0x80>)
 8003060:	f00b fa90 	bl	800e584 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003064:	f7fd ff5a 	bl	8000f1c <DM_DisplayFormattedOutput>

 	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003068:	f240 23fd 	movw	r3, #765	; 0x2fd
 800306c:	9301      	str	r3, [sp, #4]
 800306e:	2302      	movs	r3, #2
 8003070:	9300      	str	r3, [sp, #0]
 8003072:	2300      	movs	r3, #0
 8003074:	22d2      	movs	r2, #210	; 0xd2
 8003076:	2105      	movs	r1, #5
 8003078:	4814      	ldr	r0, [pc, #80]	; (80030cc <FuncMenu_DrawMainMenu+0x84>)
 800307a:	f00b fa83 	bl	800e584 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("AUX", 	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800307e:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003082:	9301      	str	r3, [sp, #4]
 8003084:	2302      	movs	r3, #2
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	2300      	movs	r3, #0
 800308a:	22d2      	movs	r2, #210	; 0xd2
 800308c:	2164      	movs	r1, #100	; 0x64
 800308e:	4810      	ldr	r0, [pc, #64]	; (80030d0 <FuncMenu_DrawMainMenu+0x88>)
 8003090:	f00b fa78 	bl	800e584 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003094:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003098:	9301      	str	r3, [sp, #4]
 800309a:	2302      	movs	r3, #2
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	2300      	movs	r3, #0
 80030a0:	22d2      	movs	r2, #210	; 0xd2
 80030a2:	21af      	movs	r1, #175	; 0xaf
 80030a4:	480b      	ldr	r0, [pc, #44]	; (80030d4 <FuncMenu_DrawMainMenu+0x8c>)
 80030a6:	f00b fa6d 	bl	800e584 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80030aa:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80030ae:	9301      	str	r3, [sp, #4]
 80030b0:	2302      	movs	r3, #2
 80030b2:	9300      	str	r3, [sp, #0]
 80030b4:	2300      	movs	r3, #0
 80030b6:	22d2      	movs	r2, #210	; 0xd2
 80030b8:	f44f 7182 	mov.w	r1, #260	; 0x104
 80030bc:	4805      	ldr	r0, [pc, #20]	; (80030d4 <FuncMenu_DrawMainMenu+0x8c>)
 80030be:	f00b fa61 	bl	800e584 <ILI9341_Draw_Text>
}
 80030c2:	bf00      	nop
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	080137b8 	.word	0x080137b8
 80030cc:	080137c4 	.word	0x080137c4
 80030d0:	080137cc 	.word	0x080137cc
 80030d4:	080137d0 	.word	0x080137d0

080030d8 <FuncMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawOutputMenu(eOutputChannel_t pOutChan)
{
 80030d8:	b590      	push	{r4, r7, lr}
 80030da:	b089      	sub	sp, #36	; 0x24
 80030dc:	af02      	add	r7, sp, #8
 80030de:	4603      	mov	r3, r0
 80030e0:	71fb      	strb	r3, [r7, #7]
	if(pOutChan)
 80030e2:	79fb      	ldrb	r3, [r7, #7]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00b      	beq.n	8003100 <FuncMenu_DrawOutputMenu+0x28>
		ILI9341_Draw_Text("OUT->FUNC->AUX", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80030e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030ec:	9301      	str	r3, [sp, #4]
 80030ee:	2302      	movs	r3, #2
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	2300      	movs	r3, #0
 80030f4:	220a      	movs	r2, #10
 80030f6:	210a      	movs	r1, #10
 80030f8:	4896      	ldr	r0, [pc, #600]	; (8003354 <FuncMenu_DrawOutputMenu+0x27c>)
 80030fa:	f00b fa43 	bl	800e584 <ILI9341_Draw_Text>
 80030fe:	e00a      	b.n	8003116 <FuncMenu_DrawOutputMenu+0x3e>
	else
		ILI9341_Draw_Text("OUT->FUNC->SIG", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003100:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003104:	9301      	str	r3, [sp, #4]
 8003106:	2302      	movs	r3, #2
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	2300      	movs	r3, #0
 800310c:	220a      	movs	r2, #10
 800310e:	210a      	movs	r1, #10
 8003110:	4891      	ldr	r0, [pc, #580]	; (8003358 <FuncMenu_DrawOutputMenu+0x280>)
 8003112:	f00b fa37 	bl	800e584 <ILI9341_Draw_Text>

	//FunctionProfile_t *func_profileTmp = FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(pOutChan)->func_profile;
 8003116:	79fb      	ldrb	r3, [r7, #7]
 8003118:	4618      	mov	r0, r3
 800311a:	f002 fd47 	bl	8005bac <SM_GetOutputChannel>
 800311e:	4603      	mov	r3, r0
 8003120:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003124:	617b      	str	r3, [r7, #20]
	if(func_profileTmp)
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 8424 	beq.w	8003976 <FuncMenu_DrawOutputMenu+0x89e>
	{
		switch(func_profileTmp->func)
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b06      	cmp	r3, #6
 8003134:	f200 841f 	bhi.w	8003976 <FuncMenu_DrawOutputMenu+0x89e>
 8003138:	a201      	add	r2, pc, #4	; (adr r2, 8003140 <FuncMenu_DrawOutputMenu+0x68>)
 800313a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313e:	bf00      	nop
 8003140:	0800315d 	.word	0x0800315d
 8003144:	08003259 	.word	0x08003259
 8003148:	0800337d 	.word	0x0800337d
 800314c:	08003479 	.word	0x08003479
 8003150:	08003575 	.word	0x08003575
 8003154:	080036ad 	.word	0x080036ad
 8003158:	080037bf 	.word	0x080037bf
		{
			case SINE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800315c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003160:	9301      	str	r3, [sp, #4]
 8003162:	2302      	movs	r3, #2
 8003164:	9300      	str	r3, [sp, #0]
 8003166:	2300      	movs	r3, #0
 8003168:	2232      	movs	r2, #50	; 0x32
 800316a:	210a      	movs	r1, #10
 800316c:	487b      	ldr	r0, [pc, #492]	; (800335c <FuncMenu_DrawOutputMenu+0x284>)
 800316e:	f00b fa09 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003172:	2300      	movs	r3, #0
 8003174:	9301      	str	r3, [sp, #4]
 8003176:	2302      	movs	r3, #2
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800317e:	2246      	movs	r2, #70	; 0x46
 8003180:	210a      	movs	r1, #10
 8003182:	4877      	ldr	r0, [pc, #476]	; (8003360 <FuncMenu_DrawOutputMenu+0x288>)
 8003184:	f00b f9fe 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003188:	2300      	movs	r3, #0
 800318a:	9301      	str	r3, [sp, #4]
 800318c:	2302      	movs	r3, #2
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003194:	225a      	movs	r2, #90	; 0x5a
 8003196:	210a      	movs	r1, #10
 8003198:	4872      	ldr	r0, [pc, #456]	; (8003364 <FuncMenu_DrawOutputMenu+0x28c>)
 800319a:	f00b f9f3 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800319e:	2300      	movs	r3, #0
 80031a0:	9301      	str	r3, [sp, #4]
 80031a2:	2302      	movs	r3, #2
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80031aa:	226e      	movs	r2, #110	; 0x6e
 80031ac:	210a      	movs	r1, #10
 80031ae:	486e      	ldr	r0, [pc, #440]	; (8003368 <FuncMenu_DrawOutputMenu+0x290>)
 80031b0:	f00b f9e8 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80031b4:	2300      	movs	r3, #0
 80031b6:	9301      	str	r3, [sp, #4]
 80031b8:	2302      	movs	r3, #2
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80031c0:	2282      	movs	r2, #130	; 0x82
 80031c2:	210a      	movs	r1, #10
 80031c4:	4869      	ldr	r0, [pc, #420]	; (800336c <FuncMenu_DrawOutputMenu+0x294>)
 80031c6:	f00b f9dd 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80031ca:	2300      	movs	r3, #0
 80031cc:	9301      	str	r3, [sp, #4]
 80031ce:	2302      	movs	r3, #2
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80031d6:	2296      	movs	r2, #150	; 0x96
 80031d8:	210a      	movs	r1, #10
 80031da:	4865      	ldr	r0, [pc, #404]	; (8003370 <FuncMenu_DrawOutputMenu+0x298>)
 80031dc:	f00b f9d2 	bl	800e584 <ILI9341_Draw_Text>

				if(pOutChan)
 80031e0:	79fb      	ldrb	r3, [r7, #7]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00a      	beq.n	80031fc <FuncMenu_DrawOutputMenu+0x124>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80031e6:	2300      	movs	r3, #0
 80031e8:	9301      	str	r3, [sp, #4]
 80031ea:	2302      	movs	r3, #2
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80031f2:	22aa      	movs	r2, #170	; 0xaa
 80031f4:	210a      	movs	r1, #10
 80031f6:	485f      	ldr	r0, [pc, #380]	; (8003374 <FuncMenu_DrawOutputMenu+0x29c>)
 80031f8:	f00b f9c4 	bl	800e584 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80031fc:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003200:	9301      	str	r3, [sp, #4]
 8003202:	2302      	movs	r3, #2
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	2300      	movs	r3, #0
 8003208:	22d2      	movs	r2, #210	; 0xd2
 800320a:	2105      	movs	r1, #5
 800320c:	485a      	ldr	r0, [pc, #360]	; (8003378 <FuncMenu_DrawOutputMenu+0x2a0>)
 800320e:	f00b f9b9 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003212:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003216:	9301      	str	r3, [sp, #4]
 8003218:	2302      	movs	r3, #2
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	2300      	movs	r3, #0
 800321e:	22d2      	movs	r2, #210	; 0xd2
 8003220:	2161      	movs	r1, #97	; 0x61
 8003222:	4855      	ldr	r0, [pc, #340]	; (8003378 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003224:	f00b f9ae 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003228:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800322c:	9301      	str	r3, [sp, #4]
 800322e:	2302      	movs	r3, #2
 8003230:	9300      	str	r3, [sp, #0]
 8003232:	2300      	movs	r3, #0
 8003234:	22d2      	movs	r2, #210	; 0xd2
 8003236:	21af      	movs	r1, #175	; 0xaf
 8003238:	484f      	ldr	r0, [pc, #316]	; (8003378 <FuncMenu_DrawOutputMenu+0x2a0>)
 800323a:	f00b f9a3 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800323e:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003242:	9301      	str	r3, [sp, #4]
 8003244:	2302      	movs	r3, #2
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	2300      	movs	r3, #0
 800324a:	22d2      	movs	r2, #210	; 0xd2
 800324c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003250:	4849      	ldr	r0, [pc, #292]	; (8003378 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003252:	f00b f997 	bl	800e584 <ILI9341_Draw_Text>
				break;
 8003256:	e38e      	b.n	8003976 <FuncMenu_DrawOutputMenu+0x89e>
			case SQUARE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003258:	2300      	movs	r3, #0
 800325a:	9301      	str	r3, [sp, #4]
 800325c:	2302      	movs	r3, #2
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003264:	2232      	movs	r2, #50	; 0x32
 8003266:	210a      	movs	r1, #10
 8003268:	483c      	ldr	r0, [pc, #240]	; (800335c <FuncMenu_DrawOutputMenu+0x284>)
 800326a:	f00b f98b 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800326e:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003272:	9301      	str	r3, [sp, #4]
 8003274:	2302      	movs	r3, #2
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	2300      	movs	r3, #0
 800327a:	2246      	movs	r2, #70	; 0x46
 800327c:	210a      	movs	r1, #10
 800327e:	4838      	ldr	r0, [pc, #224]	; (8003360 <FuncMenu_DrawOutputMenu+0x288>)
 8003280:	f00b f980 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003284:	2300      	movs	r3, #0
 8003286:	9301      	str	r3, [sp, #4]
 8003288:	2302      	movs	r3, #2
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003290:	225a      	movs	r2, #90	; 0x5a
 8003292:	210a      	movs	r1, #10
 8003294:	4833      	ldr	r0, [pc, #204]	; (8003364 <FuncMenu_DrawOutputMenu+0x28c>)
 8003296:	f00b f975 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800329a:	2300      	movs	r3, #0
 800329c:	9301      	str	r3, [sp, #4]
 800329e:	2302      	movs	r3, #2
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032a6:	226e      	movs	r2, #110	; 0x6e
 80032a8:	210a      	movs	r1, #10
 80032aa:	482f      	ldr	r0, [pc, #188]	; (8003368 <FuncMenu_DrawOutputMenu+0x290>)
 80032ac:	f00b f96a 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032b0:	2300      	movs	r3, #0
 80032b2:	9301      	str	r3, [sp, #4]
 80032b4:	2302      	movs	r3, #2
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032bc:	2282      	movs	r2, #130	; 0x82
 80032be:	210a      	movs	r1, #10
 80032c0:	482a      	ldr	r0, [pc, #168]	; (800336c <FuncMenu_DrawOutputMenu+0x294>)
 80032c2:	f00b f95f 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032c6:	2300      	movs	r3, #0
 80032c8:	9301      	str	r3, [sp, #4]
 80032ca:	2302      	movs	r3, #2
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032d2:	2296      	movs	r2, #150	; 0x96
 80032d4:	210a      	movs	r1, #10
 80032d6:	4826      	ldr	r0, [pc, #152]	; (8003370 <FuncMenu_DrawOutputMenu+0x298>)
 80032d8:	f00b f954 	bl	800e584 <ILI9341_Draw_Text>

				if(pOutChan)
 80032dc:	79fb      	ldrb	r3, [r7, #7]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00a      	beq.n	80032f8 <FuncMenu_DrawOutputMenu+0x220>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032e2:	2300      	movs	r3, #0
 80032e4:	9301      	str	r3, [sp, #4]
 80032e6:	2302      	movs	r3, #2
 80032e8:	9300      	str	r3, [sp, #0]
 80032ea:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032ee:	22aa      	movs	r2, #170	; 0xaa
 80032f0:	210a      	movs	r1, #10
 80032f2:	4820      	ldr	r0, [pc, #128]	; (8003374 <FuncMenu_DrawOutputMenu+0x29c>)
 80032f4:	f00b f946 	bl	800e584 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80032f8:	f240 23fd 	movw	r3, #765	; 0x2fd
 80032fc:	9301      	str	r3, [sp, #4]
 80032fe:	2302      	movs	r3, #2
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	2300      	movs	r3, #0
 8003304:	22d2      	movs	r2, #210	; 0xd2
 8003306:	2105      	movs	r1, #5
 8003308:	481b      	ldr	r0, [pc, #108]	; (8003378 <FuncMenu_DrawOutputMenu+0x2a0>)
 800330a:	f00b f93b 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800330e:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003312:	9301      	str	r3, [sp, #4]
 8003314:	2302      	movs	r3, #2
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	2300      	movs	r3, #0
 800331a:	22d2      	movs	r2, #210	; 0xd2
 800331c:	2161      	movs	r1, #97	; 0x61
 800331e:	4816      	ldr	r0, [pc, #88]	; (8003378 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003320:	f00b f930 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003324:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003328:	9301      	str	r3, [sp, #4]
 800332a:	2302      	movs	r3, #2
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	2300      	movs	r3, #0
 8003330:	22d2      	movs	r2, #210	; 0xd2
 8003332:	21af      	movs	r1, #175	; 0xaf
 8003334:	4810      	ldr	r0, [pc, #64]	; (8003378 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003336:	f00b f925 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800333a:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800333e:	9301      	str	r3, [sp, #4]
 8003340:	2302      	movs	r3, #2
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	2300      	movs	r3, #0
 8003346:	22d2      	movs	r2, #210	; 0xd2
 8003348:	f44f 7182 	mov.w	r1, #260	; 0x104
 800334c:	480a      	ldr	r0, [pc, #40]	; (8003378 <FuncMenu_DrawOutputMenu+0x2a0>)
 800334e:	f00b f919 	bl	800e584 <ILI9341_Draw_Text>
				break;
 8003352:	e310      	b.n	8003976 <FuncMenu_DrawOutputMenu+0x89e>
 8003354:	080137d8 	.word	0x080137d8
 8003358:	080137e8 	.word	0x080137e8
 800335c:	080137f8 	.word	0x080137f8
 8003360:	08013800 	.word	0x08013800
 8003364:	0801380c 	.word	0x0801380c
 8003368:	08013814 	.word	0x08013814
 800336c:	08013820 	.word	0x08013820
 8003370:	0801382c 	.word	0x0801382c
 8003374:	08013834 	.word	0x08013834
 8003378:	080137d0 	.word	0x080137d0
			case SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800337c:	2300      	movs	r3, #0
 800337e:	9301      	str	r3, [sp, #4]
 8003380:	2302      	movs	r3, #2
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003388:	2232      	movs	r2, #50	; 0x32
 800338a:	210a      	movs	r1, #10
 800338c:	48be      	ldr	r0, [pc, #760]	; (8003688 <FuncMenu_DrawOutputMenu+0x5b0>)
 800338e:	f00b f8f9 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003392:	2300      	movs	r3, #0
 8003394:	9301      	str	r3, [sp, #4]
 8003396:	2302      	movs	r3, #2
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800339e:	2246      	movs	r2, #70	; 0x46
 80033a0:	210a      	movs	r1, #10
 80033a2:	48ba      	ldr	r0, [pc, #744]	; (800368c <FuncMenu_DrawOutputMenu+0x5b4>)
 80033a4:	f00b f8ee 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80033a8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80033ac:	9301      	str	r3, [sp, #4]
 80033ae:	2302      	movs	r3, #2
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	2300      	movs	r3, #0
 80033b4:	225a      	movs	r2, #90	; 0x5a
 80033b6:	210a      	movs	r1, #10
 80033b8:	48b5      	ldr	r0, [pc, #724]	; (8003690 <FuncMenu_DrawOutputMenu+0x5b8>)
 80033ba:	f00b f8e3 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80033be:	2300      	movs	r3, #0
 80033c0:	9301      	str	r3, [sp, #4]
 80033c2:	2302      	movs	r3, #2
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80033ca:	226e      	movs	r2, #110	; 0x6e
 80033cc:	210a      	movs	r1, #10
 80033ce:	48b1      	ldr	r0, [pc, #708]	; (8003694 <FuncMenu_DrawOutputMenu+0x5bc>)
 80033d0:	f00b f8d8 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80033d4:	2300      	movs	r3, #0
 80033d6:	9301      	str	r3, [sp, #4]
 80033d8:	2302      	movs	r3, #2
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80033e0:	2282      	movs	r2, #130	; 0x82
 80033e2:	210a      	movs	r1, #10
 80033e4:	48ac      	ldr	r0, [pc, #688]	; (8003698 <FuncMenu_DrawOutputMenu+0x5c0>)
 80033e6:	f00b f8cd 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80033ea:	2300      	movs	r3, #0
 80033ec:	9301      	str	r3, [sp, #4]
 80033ee:	2302      	movs	r3, #2
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80033f6:	2296      	movs	r2, #150	; 0x96
 80033f8:	210a      	movs	r1, #10
 80033fa:	48a8      	ldr	r0, [pc, #672]	; (800369c <FuncMenu_DrawOutputMenu+0x5c4>)
 80033fc:	f00b f8c2 	bl	800e584 <ILI9341_Draw_Text>
				if(pOutChan)
 8003400:	79fb      	ldrb	r3, [r7, #7]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00a      	beq.n	800341c <FuncMenu_DrawOutputMenu+0x344>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003406:	2300      	movs	r3, #0
 8003408:	9301      	str	r3, [sp, #4]
 800340a:	2302      	movs	r3, #2
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003412:	22aa      	movs	r2, #170	; 0xaa
 8003414:	210a      	movs	r1, #10
 8003416:	48a2      	ldr	r0, [pc, #648]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5c8>)
 8003418:	f00b f8b4 	bl	800e584 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800341c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003420:	9301      	str	r3, [sp, #4]
 8003422:	2302      	movs	r3, #2
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	2300      	movs	r3, #0
 8003428:	22d2      	movs	r2, #210	; 0xd2
 800342a:	2105      	movs	r1, #5
 800342c:	489d      	ldr	r0, [pc, #628]	; (80036a4 <FuncMenu_DrawOutputMenu+0x5cc>)
 800342e:	f00b f8a9 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003432:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003436:	9301      	str	r3, [sp, #4]
 8003438:	2302      	movs	r3, #2
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	2300      	movs	r3, #0
 800343e:	22d2      	movs	r2, #210	; 0xd2
 8003440:	2161      	movs	r1, #97	; 0x61
 8003442:	4898      	ldr	r0, [pc, #608]	; (80036a4 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003444:	f00b f89e 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003448:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800344c:	9301      	str	r3, [sp, #4]
 800344e:	2302      	movs	r3, #2
 8003450:	9300      	str	r3, [sp, #0]
 8003452:	2300      	movs	r3, #0
 8003454:	22d2      	movs	r2, #210	; 0xd2
 8003456:	21af      	movs	r1, #175	; 0xaf
 8003458:	4892      	ldr	r0, [pc, #584]	; (80036a4 <FuncMenu_DrawOutputMenu+0x5cc>)
 800345a:	f00b f893 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800345e:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003462:	9301      	str	r3, [sp, #4]
 8003464:	2302      	movs	r3, #2
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	2300      	movs	r3, #0
 800346a:	22d2      	movs	r2, #210	; 0xd2
 800346c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003470:	488c      	ldr	r0, [pc, #560]	; (80036a4 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003472:	f00b f887 	bl	800e584 <ILI9341_Draw_Text>
				break;
 8003476:	e27e      	b.n	8003976 <FuncMenu_DrawOutputMenu+0x89e>
			case REV_SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003478:	2300      	movs	r3, #0
 800347a:	9301      	str	r3, [sp, #4]
 800347c:	2302      	movs	r3, #2
 800347e:	9300      	str	r3, [sp, #0]
 8003480:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003484:	2232      	movs	r2, #50	; 0x32
 8003486:	210a      	movs	r1, #10
 8003488:	487f      	ldr	r0, [pc, #508]	; (8003688 <FuncMenu_DrawOutputMenu+0x5b0>)
 800348a:	f00b f87b 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800348e:	2300      	movs	r3, #0
 8003490:	9301      	str	r3, [sp, #4]
 8003492:	2302      	movs	r3, #2
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800349a:	2246      	movs	r2, #70	; 0x46
 800349c:	210a      	movs	r1, #10
 800349e:	487b      	ldr	r0, [pc, #492]	; (800368c <FuncMenu_DrawOutputMenu+0x5b4>)
 80034a0:	f00b f870 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034a4:	2300      	movs	r3, #0
 80034a6:	9301      	str	r3, [sp, #4]
 80034a8:	2302      	movs	r3, #2
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80034b0:	225a      	movs	r2, #90	; 0x5a
 80034b2:	210a      	movs	r1, #10
 80034b4:	4876      	ldr	r0, [pc, #472]	; (8003690 <FuncMenu_DrawOutputMenu+0x5b8>)
 80034b6:	f00b f865 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80034ba:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80034be:	9301      	str	r3, [sp, #4]
 80034c0:	2302      	movs	r3, #2
 80034c2:	9300      	str	r3, [sp, #0]
 80034c4:	2300      	movs	r3, #0
 80034c6:	226e      	movs	r2, #110	; 0x6e
 80034c8:	210a      	movs	r1, #10
 80034ca:	4872      	ldr	r0, [pc, #456]	; (8003694 <FuncMenu_DrawOutputMenu+0x5bc>)
 80034cc:	f00b f85a 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034d0:	2300      	movs	r3, #0
 80034d2:	9301      	str	r3, [sp, #4]
 80034d4:	2302      	movs	r3, #2
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80034dc:	2282      	movs	r2, #130	; 0x82
 80034de:	210a      	movs	r1, #10
 80034e0:	486d      	ldr	r0, [pc, #436]	; (8003698 <FuncMenu_DrawOutputMenu+0x5c0>)
 80034e2:	f00b f84f 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034e6:	2300      	movs	r3, #0
 80034e8:	9301      	str	r3, [sp, #4]
 80034ea:	2302      	movs	r3, #2
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80034f2:	2296      	movs	r2, #150	; 0x96
 80034f4:	210a      	movs	r1, #10
 80034f6:	4869      	ldr	r0, [pc, #420]	; (800369c <FuncMenu_DrawOutputMenu+0x5c4>)
 80034f8:	f00b f844 	bl	800e584 <ILI9341_Draw_Text>

				if(pOutChan)
 80034fc:	79fb      	ldrb	r3, [r7, #7]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00a      	beq.n	8003518 <FuncMenu_DrawOutputMenu+0x440>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003502:	2300      	movs	r3, #0
 8003504:	9301      	str	r3, [sp, #4]
 8003506:	2302      	movs	r3, #2
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800350e:	22aa      	movs	r2, #170	; 0xaa
 8003510:	210a      	movs	r1, #10
 8003512:	4863      	ldr	r0, [pc, #396]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5c8>)
 8003514:	f00b f836 	bl	800e584 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003518:	f240 23fd 	movw	r3, #765	; 0x2fd
 800351c:	9301      	str	r3, [sp, #4]
 800351e:	2302      	movs	r3, #2
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	2300      	movs	r3, #0
 8003524:	22d2      	movs	r2, #210	; 0xd2
 8003526:	2105      	movs	r1, #5
 8003528:	485e      	ldr	r0, [pc, #376]	; (80036a4 <FuncMenu_DrawOutputMenu+0x5cc>)
 800352a:	f00b f82b 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800352e:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003532:	9301      	str	r3, [sp, #4]
 8003534:	2302      	movs	r3, #2
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	2300      	movs	r3, #0
 800353a:	22d2      	movs	r2, #210	; 0xd2
 800353c:	2161      	movs	r1, #97	; 0x61
 800353e:	4859      	ldr	r0, [pc, #356]	; (80036a4 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003540:	f00b f820 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003544:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003548:	9301      	str	r3, [sp, #4]
 800354a:	2302      	movs	r3, #2
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	2300      	movs	r3, #0
 8003550:	22d2      	movs	r2, #210	; 0xd2
 8003552:	21af      	movs	r1, #175	; 0xaf
 8003554:	4853      	ldr	r0, [pc, #332]	; (80036a4 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003556:	f00b f815 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800355a:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800355e:	9301      	str	r3, [sp, #4]
 8003560:	2302      	movs	r3, #2
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	2300      	movs	r3, #0
 8003566:	22d2      	movs	r2, #210	; 0xd2
 8003568:	f44f 7182 	mov.w	r1, #260	; 0x104
 800356c:	484d      	ldr	r0, [pc, #308]	; (80036a4 <FuncMenu_DrawOutputMenu+0x5cc>)
 800356e:	f00b f809 	bl	800e584 <ILI9341_Draw_Text>
				break;
 8003572:	e200      	b.n	8003976 <FuncMenu_DrawOutputMenu+0x89e>
			case TRIANGLE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003574:	2300      	movs	r3, #0
 8003576:	9301      	str	r3, [sp, #4]
 8003578:	2302      	movs	r3, #2
 800357a:	9300      	str	r3, [sp, #0]
 800357c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003580:	2232      	movs	r2, #50	; 0x32
 8003582:	210a      	movs	r1, #10
 8003584:	4840      	ldr	r0, [pc, #256]	; (8003688 <FuncMenu_DrawOutputMenu+0x5b0>)
 8003586:	f00a fffd 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800358a:	2300      	movs	r3, #0
 800358c:	9301      	str	r3, [sp, #4]
 800358e:	2302      	movs	r3, #2
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003596:	2246      	movs	r2, #70	; 0x46
 8003598:	210a      	movs	r1, #10
 800359a:	483c      	ldr	r0, [pc, #240]	; (800368c <FuncMenu_DrawOutputMenu+0x5b4>)
 800359c:	f00a fff2 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035a0:	2300      	movs	r3, #0
 80035a2:	9301      	str	r3, [sp, #4]
 80035a4:	2302      	movs	r3, #2
 80035a6:	9300      	str	r3, [sp, #0]
 80035a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035ac:	225a      	movs	r2, #90	; 0x5a
 80035ae:	210a      	movs	r1, #10
 80035b0:	4837      	ldr	r0, [pc, #220]	; (8003690 <FuncMenu_DrawOutputMenu+0x5b8>)
 80035b2:	f00a ffe7 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035b6:	2300      	movs	r3, #0
 80035b8:	9301      	str	r3, [sp, #4]
 80035ba:	2302      	movs	r3, #2
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035c2:	226e      	movs	r2, #110	; 0x6e
 80035c4:	210a      	movs	r1, #10
 80035c6:	4833      	ldr	r0, [pc, #204]	; (8003694 <FuncMenu_DrawOutputMenu+0x5bc>)
 80035c8:	f00a ffdc 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80035cc:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80035d0:	9301      	str	r3, [sp, #4]
 80035d2:	2302      	movs	r3, #2
 80035d4:	9300      	str	r3, [sp, #0]
 80035d6:	2300      	movs	r3, #0
 80035d8:	2282      	movs	r2, #130	; 0x82
 80035da:	210a      	movs	r1, #10
 80035dc:	482e      	ldr	r0, [pc, #184]	; (8003698 <FuncMenu_DrawOutputMenu+0x5c0>)
 80035de:	f00a ffd1 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035e2:	2300      	movs	r3, #0
 80035e4:	9301      	str	r3, [sp, #4]
 80035e6:	2302      	movs	r3, #2
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035ee:	2296      	movs	r2, #150	; 0x96
 80035f0:	210a      	movs	r1, #10
 80035f2:	482a      	ldr	r0, [pc, #168]	; (800369c <FuncMenu_DrawOutputMenu+0x5c4>)
 80035f4:	f00a ffc6 	bl	800e584 <ILI9341_Draw_Text>

				if(pOutChan)
 80035f8:	79fb      	ldrb	r3, [r7, #7]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00a      	beq.n	8003614 <FuncMenu_DrawOutputMenu+0x53c>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035fe:	2300      	movs	r3, #0
 8003600:	9301      	str	r3, [sp, #4]
 8003602:	2302      	movs	r3, #2
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800360a:	22aa      	movs	r2, #170	; 0xaa
 800360c:	210a      	movs	r1, #10
 800360e:	4824      	ldr	r0, [pc, #144]	; (80036a0 <FuncMenu_DrawOutputMenu+0x5c8>)
 8003610:	f00a ffb8 	bl	800e584 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003614:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003618:	9301      	str	r3, [sp, #4]
 800361a:	2302      	movs	r3, #2
 800361c:	9300      	str	r3, [sp, #0]
 800361e:	2300      	movs	r3, #0
 8003620:	22d2      	movs	r2, #210	; 0xd2
 8003622:	2105      	movs	r1, #5
 8003624:	481f      	ldr	r0, [pc, #124]	; (80036a4 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003626:	f00a ffad 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800362a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800362e:	9301      	str	r3, [sp, #4]
 8003630:	2302      	movs	r3, #2
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	2300      	movs	r3, #0
 8003636:	22d2      	movs	r2, #210	; 0xd2
 8003638:	2161      	movs	r1, #97	; 0x61
 800363a:	481a      	ldr	r0, [pc, #104]	; (80036a4 <FuncMenu_DrawOutputMenu+0x5cc>)
 800363c:	f00a ffa2 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003640:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003644:	9301      	str	r3, [sp, #4]
 8003646:	2302      	movs	r3, #2
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	2300      	movs	r3, #0
 800364c:	22d2      	movs	r2, #210	; 0xd2
 800364e:	21af      	movs	r1, #175	; 0xaf
 8003650:	4814      	ldr	r0, [pc, #80]	; (80036a4 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003652:	f00a ff97 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003656:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800365a:	9301      	str	r3, [sp, #4]
 800365c:	2302      	movs	r3, #2
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	2300      	movs	r3, #0
 8003662:	22d2      	movs	r2, #210	; 0xd2
 8003664:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003668:	480e      	ldr	r0, [pc, #56]	; (80036a4 <FuncMenu_DrawOutputMenu+0x5cc>)
 800366a:	f00a ff8b 	bl	800e584 <ILI9341_Draw_Text>

				ILI9341_Draw_Text("               ", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800366e:	2300      	movs	r3, #0
 8003670:	9301      	str	r3, [sp, #4]
 8003672:	2302      	movs	r3, #2
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800367a:	2232      	movs	r2, #50	; 0x32
 800367c:	2196      	movs	r1, #150	; 0x96
 800367e:	480a      	ldr	r0, [pc, #40]	; (80036a8 <FuncMenu_DrawOutputMenu+0x5d0>)
 8003680:	f00a ff80 	bl	800e584 <ILI9341_Draw_Text>
				break;
 8003684:	e177      	b.n	8003976 <FuncMenu_DrawOutputMenu+0x89e>
 8003686:	bf00      	nop
 8003688:	080137f8 	.word	0x080137f8
 800368c:	08013800 	.word	0x08013800
 8003690:	0801380c 	.word	0x0801380c
 8003694:	08013814 	.word	0x08013814
 8003698:	08013820 	.word	0x08013820
 800369c:	0801382c 	.word	0x0801382c
 80036a0:	08013834 	.word	0x08013834
 80036a4:	080137d0 	.word	0x080137d0
 80036a8:	0801383c 	.word	0x0801383c
			case IMPULSE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036ac:	2300      	movs	r3, #0
 80036ae:	9301      	str	r3, [sp, #4]
 80036b0:	2302      	movs	r3, #2
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036b8:	2232      	movs	r2, #50	; 0x32
 80036ba:	210a      	movs	r1, #10
 80036bc:	48b0      	ldr	r0, [pc, #704]	; (8003980 <FuncMenu_DrawOutputMenu+0x8a8>)
 80036be:	f00a ff61 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036c2:	2300      	movs	r3, #0
 80036c4:	9301      	str	r3, [sp, #4]
 80036c6:	2302      	movs	r3, #2
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036ce:	2246      	movs	r2, #70	; 0x46
 80036d0:	210a      	movs	r1, #10
 80036d2:	48ac      	ldr	r0, [pc, #688]	; (8003984 <FuncMenu_DrawOutputMenu+0x8ac>)
 80036d4:	f00a ff56 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036d8:	2300      	movs	r3, #0
 80036da:	9301      	str	r3, [sp, #4]
 80036dc:	2302      	movs	r3, #2
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036e4:	225a      	movs	r2, #90	; 0x5a
 80036e6:	210a      	movs	r1, #10
 80036e8:	48a7      	ldr	r0, [pc, #668]	; (8003988 <FuncMenu_DrawOutputMenu+0x8b0>)
 80036ea:	f00a ff4b 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036ee:	2300      	movs	r3, #0
 80036f0:	9301      	str	r3, [sp, #4]
 80036f2:	2302      	movs	r3, #2
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036fa:	226e      	movs	r2, #110	; 0x6e
 80036fc:	210a      	movs	r1, #10
 80036fe:	48a3      	ldr	r0, [pc, #652]	; (800398c <FuncMenu_DrawOutputMenu+0x8b4>)
 8003700:	f00a ff40 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003704:	2300      	movs	r3, #0
 8003706:	9301      	str	r3, [sp, #4]
 8003708:	2302      	movs	r3, #2
 800370a:	9300      	str	r3, [sp, #0]
 800370c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003710:	2282      	movs	r2, #130	; 0x82
 8003712:	210a      	movs	r1, #10
 8003714:	489e      	ldr	r0, [pc, #632]	; (8003990 <FuncMenu_DrawOutputMenu+0x8b8>)
 8003716:	f00a ff35 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800371a:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800371e:	9301      	str	r3, [sp, #4]
 8003720:	2302      	movs	r3, #2
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	2300      	movs	r3, #0
 8003726:	2296      	movs	r2, #150	; 0x96
 8003728:	210a      	movs	r1, #10
 800372a:	489a      	ldr	r0, [pc, #616]	; (8003994 <FuncMenu_DrawOutputMenu+0x8bc>)
 800372c:	f00a ff2a 	bl	800e584 <ILI9341_Draw_Text>

				if(pOutChan)
 8003730:	79fb      	ldrb	r3, [r7, #7]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00a      	beq.n	800374c <FuncMenu_DrawOutputMenu+0x674>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003736:	2300      	movs	r3, #0
 8003738:	9301      	str	r3, [sp, #4]
 800373a:	2302      	movs	r3, #2
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003742:	22aa      	movs	r2, #170	; 0xaa
 8003744:	210a      	movs	r1, #10
 8003746:	4894      	ldr	r0, [pc, #592]	; (8003998 <FuncMenu_DrawOutputMenu+0x8c0>)
 8003748:	f00a ff1c 	bl	800e584 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800374c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003750:	9301      	str	r3, [sp, #4]
 8003752:	2302      	movs	r3, #2
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	2300      	movs	r3, #0
 8003758:	22d2      	movs	r2, #210	; 0xd2
 800375a:	2105      	movs	r1, #5
 800375c:	488f      	ldr	r0, [pc, #572]	; (800399c <FuncMenu_DrawOutputMenu+0x8c4>)
 800375e:	f00a ff11 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003762:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003766:	9301      	str	r3, [sp, #4]
 8003768:	2302      	movs	r3, #2
 800376a:	9300      	str	r3, [sp, #0]
 800376c:	2300      	movs	r3, #0
 800376e:	22d2      	movs	r2, #210	; 0xd2
 8003770:	2161      	movs	r1, #97	; 0x61
 8003772:	488a      	ldr	r0, [pc, #552]	; (800399c <FuncMenu_DrawOutputMenu+0x8c4>)
 8003774:	f00a ff06 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003778:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800377c:	9301      	str	r3, [sp, #4]
 800377e:	2302      	movs	r3, #2
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	2300      	movs	r3, #0
 8003784:	22d2      	movs	r2, #210	; 0xd2
 8003786:	21af      	movs	r1, #175	; 0xaf
 8003788:	4884      	ldr	r0, [pc, #528]	; (800399c <FuncMenu_DrawOutputMenu+0x8c4>)
 800378a:	f00a fefb 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800378e:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003792:	9301      	str	r3, [sp, #4]
 8003794:	2302      	movs	r3, #2
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	2300      	movs	r3, #0
 800379a:	22d2      	movs	r2, #210	; 0xd2
 800379c:	f44f 7182 	mov.w	r1, #260	; 0x104
 80037a0:	487e      	ldr	r0, [pc, #504]	; (800399c <FuncMenu_DrawOutputMenu+0x8c4>)
 80037a2:	f00a feef 	bl	800e584 <ILI9341_Draw_Text>

				ILI9341_Draw_Text("               ", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037a6:	2300      	movs	r3, #0
 80037a8:	9301      	str	r3, [sp, #4]
 80037aa:	2302      	movs	r3, #2
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037b2:	2232      	movs	r2, #50	; 0x32
 80037b4:	2196      	movs	r1, #150	; 0x96
 80037b6:	487a      	ldr	r0, [pc, #488]	; (80039a0 <FuncMenu_DrawOutputMenu+0x8c8>)
 80037b8:	f00a fee4 	bl	800e584 <ILI9341_Draw_Text>
				break;
 80037bc:	e0db      	b.n	8003976 <FuncMenu_DrawOutputMenu+0x89e>
			case PWM_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037be:	2300      	movs	r3, #0
 80037c0:	9301      	str	r3, [sp, #4]
 80037c2:	2302      	movs	r3, #2
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037ca:	2232      	movs	r2, #50	; 0x32
 80037cc:	210a      	movs	r1, #10
 80037ce:	486c      	ldr	r0, [pc, #432]	; (8003980 <FuncMenu_DrawOutputMenu+0x8a8>)
 80037d0:	f00a fed8 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037d4:	2300      	movs	r3, #0
 80037d6:	9301      	str	r3, [sp, #4]
 80037d8:	2302      	movs	r3, #2
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037e0:	2246      	movs	r2, #70	; 0x46
 80037e2:	210a      	movs	r1, #10
 80037e4:	4867      	ldr	r0, [pc, #412]	; (8003984 <FuncMenu_DrawOutputMenu+0x8ac>)
 80037e6:	f00a fecd 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037ea:	2300      	movs	r3, #0
 80037ec:	9301      	str	r3, [sp, #4]
 80037ee:	2302      	movs	r3, #2
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037f6:	225a      	movs	r2, #90	; 0x5a
 80037f8:	210a      	movs	r1, #10
 80037fa:	4863      	ldr	r0, [pc, #396]	; (8003988 <FuncMenu_DrawOutputMenu+0x8b0>)
 80037fc:	f00a fec2 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003800:	2300      	movs	r3, #0
 8003802:	9301      	str	r3, [sp, #4]
 8003804:	2302      	movs	r3, #2
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800380c:	226e      	movs	r2, #110	; 0x6e
 800380e:	210a      	movs	r1, #10
 8003810:	485e      	ldr	r0, [pc, #376]	; (800398c <FuncMenu_DrawOutputMenu+0x8b4>)
 8003812:	f00a feb7 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003816:	2300      	movs	r3, #0
 8003818:	9301      	str	r3, [sp, #4]
 800381a:	2302      	movs	r3, #2
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003822:	2282      	movs	r2, #130	; 0x82
 8003824:	210a      	movs	r1, #10
 8003826:	485a      	ldr	r0, [pc, #360]	; (8003990 <FuncMenu_DrawOutputMenu+0x8b8>)
 8003828:	f00a feac 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800382c:	2300      	movs	r3, #0
 800382e:	9301      	str	r3, [sp, #4]
 8003830:	2302      	movs	r3, #2
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003838:	2296      	movs	r2, #150	; 0x96
 800383a:	210a      	movs	r1, #10
 800383c:	4855      	ldr	r0, [pc, #340]	; (8003994 <FuncMenu_DrawOutputMenu+0x8bc>)
 800383e:	f00a fea1 	bl	800e584 <ILI9341_Draw_Text>

				if(pOutChan)
 8003842:	79fb      	ldrb	r3, [r7, #7]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00a      	beq.n	800385e <FuncMenu_DrawOutputMenu+0x786>
					ILI9341_Draw_Text("- PWM", 		10, 170, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003848:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800384c:	9301      	str	r3, [sp, #4]
 800384e:	2302      	movs	r3, #2
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	2300      	movs	r3, #0
 8003854:	22aa      	movs	r2, #170	; 0xaa
 8003856:	210a      	movs	r1, #10
 8003858:	484f      	ldr	r0, [pc, #316]	; (8003998 <FuncMenu_DrawOutputMenu+0x8c0>)
 800385a:	f00a fe93 	bl	800e584 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800385e:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003862:	9301      	str	r3, [sp, #4]
 8003864:	2302      	movs	r3, #2
 8003866:	9300      	str	r3, [sp, #0]
 8003868:	2300      	movs	r3, #0
 800386a:	22d2      	movs	r2, #210	; 0xd2
 800386c:	2105      	movs	r1, #5
 800386e:	484b      	ldr	r0, [pc, #300]	; (800399c <FuncMenu_DrawOutputMenu+0x8c4>)
 8003870:	f00a fe88 	bl	800e584 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003874:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003878:	9301      	str	r3, [sp, #4]
 800387a:	2302      	movs	r3, #2
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	2300      	movs	r3, #0
 8003880:	22d2      	movs	r2, #210	; 0xd2
 8003882:	2161      	movs	r1, #97	; 0x61
 8003884:	4845      	ldr	r0, [pc, #276]	; (800399c <FuncMenu_DrawOutputMenu+0x8c4>)
 8003886:	f00a fe7d 	bl	800e584 <ILI9341_Draw_Text>

				if(pOutChan)
 800388a:	79fb      	ldrb	r3, [r7, #7]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d05a      	beq.n	8003946 <FuncMenu_DrawOutputMenu+0x86e>
				{
					ILI9341_Draw_Text("DUTY", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003890:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003894:	9301      	str	r3, [sp, #4]
 8003896:	2302      	movs	r3, #2
 8003898:	9300      	str	r3, [sp, #0]
 800389a:	2300      	movs	r3, #0
 800389c:	22d2      	movs	r2, #210	; 0xd2
 800389e:	21af      	movs	r1, #175	; 0xaf
 80038a0:	4840      	ldr	r0, [pc, #256]	; (80039a4 <FuncMenu_DrawOutputMenu+0x8cc>)
 80038a2:	f00a fe6f 	bl	800e584 <ILI9341_Draw_Text>
					char duty[10] = "";
 80038a6:	2300      	movs	r3, #0
 80038a8:	60bb      	str	r3, [r7, #8]
 80038aa:	f107 030c 	add.w	r3, r7, #12
 80038ae:	2200      	movs	r2, #0
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	809a      	strh	r2, [r3, #4]
					snprintf(duty, sizeof(duty), "%0.2f%%", ((float)PWM_AUX_OUT_TIM->CCR1 / (float)PWM_AUX_OUT_TIM->ARR) * 100);
 80038b4:	4b3c      	ldr	r3, [pc, #240]	; (80039a8 <FuncMenu_DrawOutputMenu+0x8d0>)
 80038b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b8:	ee07 3a90 	vmov	s15, r3
 80038bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038c0:	4b39      	ldr	r3, [pc, #228]	; (80039a8 <FuncMenu_DrawOutputMenu+0x8d0>)
 80038c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c4:	ee07 3a90 	vmov	s15, r3
 80038c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038d0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80039ac <FuncMenu_DrawOutputMenu+0x8d4>
 80038d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038d8:	ee17 0a90 	vmov	r0, s15
 80038dc:	f7fc fe5c 	bl	8000598 <__aeabi_f2d>
 80038e0:	4603      	mov	r3, r0
 80038e2:	460c      	mov	r4, r1
 80038e4:	f107 0008 	add.w	r0, r7, #8
 80038e8:	e9cd 3400 	strd	r3, r4, [sp]
 80038ec:	4a30      	ldr	r2, [pc, #192]	; (80039b0 <FuncMenu_DrawOutputMenu+0x8d8>)
 80038ee:	210a      	movs	r1, #10
 80038f0:	f00c fa04 	bl	800fcfc <sniprintf>
					ILI9341_Draw_Text(duty, 	220, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80038f4:	f107 0008 	add.w	r0, r7, #8
 80038f8:	2300      	movs	r3, #0
 80038fa:	9301      	str	r3, [sp, #4]
 80038fc:	2302      	movs	r3, #2
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003904:	2232      	movs	r2, #50	; 0x32
 8003906:	21dc      	movs	r1, #220	; 0xdc
 8003908:	f00a fe3c 	bl	800e584 <ILI9341_Draw_Text>
					if(SM_IsFuncPwmDutyMode())
 800390c:	f002 fc50 	bl	80061b0 <SM_IsFuncPwmDutyMode>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00b      	beq.n	800392e <FuncMenu_DrawOutputMenu+0x856>
					{
						ILI9341_Draw_Text("DUTY:", 	150, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003916:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800391a:	9301      	str	r3, [sp, #4]
 800391c:	2302      	movs	r3, #2
 800391e:	9300      	str	r3, [sp, #0]
 8003920:	2300      	movs	r3, #0
 8003922:	2232      	movs	r2, #50	; 0x32
 8003924:	2196      	movs	r1, #150	; 0x96
 8003926:	4823      	ldr	r0, [pc, #140]	; (80039b4 <FuncMenu_DrawOutputMenu+0x8dc>)
 8003928:	f00a fe2c 	bl	800e584 <ILI9341_Draw_Text>
 800392c:	e016      	b.n	800395c <FuncMenu_DrawOutputMenu+0x884>

					}
					else
					{
						ILI9341_Draw_Text("DUTY:", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800392e:	2300      	movs	r3, #0
 8003930:	9301      	str	r3, [sp, #4]
 8003932:	2302      	movs	r3, #2
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800393a:	2232      	movs	r2, #50	; 0x32
 800393c:	2196      	movs	r1, #150	; 0x96
 800393e:	481d      	ldr	r0, [pc, #116]	; (80039b4 <FuncMenu_DrawOutputMenu+0x8dc>)
 8003940:	f00a fe20 	bl	800e584 <ILI9341_Draw_Text>
 8003944:	e00a      	b.n	800395c <FuncMenu_DrawOutputMenu+0x884>
					}
				}
				else
				{
					ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003946:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800394a:	9301      	str	r3, [sp, #4]
 800394c:	2302      	movs	r3, #2
 800394e:	9300      	str	r3, [sp, #0]
 8003950:	2300      	movs	r3, #0
 8003952:	22d2      	movs	r2, #210	; 0xd2
 8003954:	21af      	movs	r1, #175	; 0xaf
 8003956:	4811      	ldr	r0, [pc, #68]	; (800399c <FuncMenu_DrawOutputMenu+0x8c4>)
 8003958:	f00a fe14 	bl	800e584 <ILI9341_Draw_Text>
				}

				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800395c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003960:	9301      	str	r3, [sp, #4]
 8003962:	2302      	movs	r3, #2
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	2300      	movs	r3, #0
 8003968:	22d2      	movs	r2, #210	; 0xd2
 800396a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800396e:	480b      	ldr	r0, [pc, #44]	; (800399c <FuncMenu_DrawOutputMenu+0x8c4>)
 8003970:	f00a fe08 	bl	800e584 <ILI9341_Draw_Text>

				break;
 8003974:	bf00      	nop
				//
		}
	}
}
 8003976:	bf00      	nop
 8003978:	371c      	adds	r7, #28
 800397a:	46bd      	mov	sp, r7
 800397c:	bd90      	pop	{r4, r7, pc}
 800397e:	bf00      	nop
 8003980:	080137f8 	.word	0x080137f8
 8003984:	08013800 	.word	0x08013800
 8003988:	0801380c 	.word	0x0801380c
 800398c:	08013814 	.word	0x08013814
 8003990:	08013820 	.word	0x08013820
 8003994:	0801382c 	.word	0x0801382c
 8003998:	08013834 	.word	0x08013834
 800399c:	080137d0 	.word	0x080137d0
 80039a0:	0801383c 	.word	0x0801383c
 80039a4:	0801384c 	.word	0x0801384c
 80039a8:	40000400 	.word	0x40000400
 80039ac:	42c80000 	.word	0x42c80000
 80039b0:	08013854 	.word	0x08013854
 80039b4:	0801385c 	.word	0x0801385c

080039b8 <GainMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMenu(eGainMenu_Status pMenu)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	4603      	mov	r3, r0
 80039c0:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 80039c2:	79fb      	ldrb	r3, [r7, #7]
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d007      	beq.n	80039d8 <GainMenu_DrawMenu+0x20>
 80039c8:	2b03      	cmp	r3, #3
 80039ca:	d008      	beq.n	80039de <GainMenu_DrawMenu+0x26>
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d000      	beq.n	80039d2 <GainMenu_DrawMenu+0x1a>
		case ENABLE_GAIN_Aux_MENU:
			GainMenu_DrawAuxMenu();
			break;

		default:
			break;
 80039d0:	e008      	b.n	80039e4 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawMainMenu();
 80039d2:	f000 f80b 	bl	80039ec <GainMenu_DrawMainMenu>
			break;
 80039d6:	e005      	b.n	80039e4 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSignalMenu();
 80039d8:	f000 f868 	bl	8003aac <GainMenu_DrawSignalMenu>
			break;
 80039dc:	e002      	b.n	80039e4 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawAuxMenu();
 80039de:	f000 f87b 	bl	8003ad8 <GainMenu_DrawAuxMenu>
			break;
 80039e2:	bf00      	nop

	}
}
 80039e4:	bf00      	nop
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <GainMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMainMenu()
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->GAIN", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80039f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039f6:	9301      	str	r3, [sp, #4]
 80039f8:	2302      	movs	r3, #2
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	2300      	movs	r3, #0
 80039fe:	220a      	movs	r2, #10
 8003a00:	210a      	movs	r1, #10
 8003a02:	4826      	ldr	r0, [pc, #152]	; (8003a9c <GainMenu_DrawMainMenu+0xb0>)
 8003a04:	f00a fdbe 	bl	800e584 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003a08:	f7fd fa88 	bl	8000f1c <DM_DisplayFormattedOutput>

	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5, 	 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003a0c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003a10:	9301      	str	r3, [sp, #4]
 8003a12:	2302      	movs	r3, #2
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	2300      	movs	r3, #0
 8003a18:	22d2      	movs	r2, #210	; 0xd2
 8003a1a:	2105      	movs	r1, #5
 8003a1c:	4820      	ldr	r0, [pc, #128]	; (8003aa0 <GainMenu_DrawMainMenu+0xb4>)
 8003a1e:	f00a fdb1 	bl	800e584 <ILI9341_Draw_Text>

	eOutput_mode aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8003a22:	2001      	movs	r0, #1
 8003a24:	f002 f8c2 	bl	8005bac <SM_GetOutputChannel>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	71fb      	strb	r3, [r7, #7]
	if(aux_output_func == PWM_FUNC_MODE)
 8003a32:	79fb      	ldrb	r3, [r7, #7]
 8003a34:	2b06      	cmp	r3, #6
 8003a36:	d10b      	bne.n	8003a50 <GainMenu_DrawMainMenu+0x64>
	{
		ILI9341_Draw_Text("    ",	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003a38:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003a3c:	9301      	str	r3, [sp, #4]
 8003a3e:	2302      	movs	r3, #2
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	2300      	movs	r3, #0
 8003a44:	22d2      	movs	r2, #210	; 0xd2
 8003a46:	2164      	movs	r1, #100	; 0x64
 8003a48:	4816      	ldr	r0, [pc, #88]	; (8003aa4 <GainMenu_DrawMainMenu+0xb8>)
 8003a4a:	f00a fd9b 	bl	800e584 <ILI9341_Draw_Text>
 8003a4e:	e00a      	b.n	8003a66 <GainMenu_DrawMainMenu+0x7a>
	}
	else
	{
		ILI9341_Draw_Text("AUX",	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003a50:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003a54:	9301      	str	r3, [sp, #4]
 8003a56:	2302      	movs	r3, #2
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	22d2      	movs	r2, #210	; 0xd2
 8003a5e:	2164      	movs	r1, #100	; 0x64
 8003a60:	4811      	ldr	r0, [pc, #68]	; (8003aa8 <GainMenu_DrawMainMenu+0xbc>)
 8003a62:	f00a fd8f 	bl	800e584 <ILI9341_Draw_Text>
	}

	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003a66:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003a6a:	9301      	str	r3, [sp, #4]
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	2300      	movs	r3, #0
 8003a72:	22d2      	movs	r2, #210	; 0xd2
 8003a74:	21af      	movs	r1, #175	; 0xaf
 8003a76:	480b      	ldr	r0, [pc, #44]	; (8003aa4 <GainMenu_DrawMainMenu+0xb8>)
 8003a78:	f00a fd84 	bl	800e584 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003a7c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003a80:	9301      	str	r3, [sp, #4]
 8003a82:	2302      	movs	r3, #2
 8003a84:	9300      	str	r3, [sp, #0]
 8003a86:	2300      	movs	r3, #0
 8003a88:	22d2      	movs	r2, #210	; 0xd2
 8003a8a:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003a8e:	4805      	ldr	r0, [pc, #20]	; (8003aa4 <GainMenu_DrawMainMenu+0xb8>)
 8003a90:	f00a fd78 	bl	800e584 <ILI9341_Draw_Text>
}
 8003a94:	bf00      	nop
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	08013864 	.word	0x08013864
 8003aa0:	08013870 	.word	0x08013870
 8003aa4:	08013878 	.word	0x08013878
 8003aa8:	08013880 	.word	0x08013880

08003aac <GainMenu_DrawSignalMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSignalMenu()
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->SIG", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003ab2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ab6:	9301      	str	r3, [sp, #4]
 8003ab8:	2302      	movs	r3, #2
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	2300      	movs	r3, #0
 8003abe:	220a      	movs	r2, #10
 8003ac0:	210a      	movs	r1, #10
 8003ac2:	4804      	ldr	r0, [pc, #16]	; (8003ad4 <GainMenu_DrawSignalMenu+0x28>)
 8003ac4:	f00a fd5e 	bl	800e584 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003ac8:	f7fd fa28 	bl	8000f1c <DM_DisplayFormattedOutput>
}
 8003acc:	bf00      	nop
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	08013884 	.word	0x08013884

08003ad8 <GainMenu_DrawAuxMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawAuxMenu()
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->Aux", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003ade:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ae2:	9301      	str	r3, [sp, #4]
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	2300      	movs	r3, #0
 8003aea:	220a      	movs	r2, #10
 8003aec:	210a      	movs	r1, #10
 8003aee:	4804      	ldr	r0, [pc, #16]	; (8003b00 <GainMenu_DrawAuxMenu+0x28>)
 8003af0:	f00a fd48 	bl	800e584 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003af4:	f7fd fa12 	bl	8000f1c <DM_DisplayFormattedOutput>
}
 8003af8:	bf00      	nop
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	08013894 	.word	0x08013894

08003b04 <ToplevelMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMenu(eToplevelMenu_Status pMenu)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003b0e:	79fb      	ldrb	r3, [r7, #7]
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d007      	beq.n	8003b24 <ToplevelMenu_DrawMenu+0x20>
 8003b14:	2b03      	cmp	r3, #3
 8003b16:	d008      	beq.n	8003b2a <ToplevelMenu_DrawMenu+0x26>
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d000      	beq.n	8003b1e <ToplevelMenu_DrawMenu+0x1a>
		case ENABLE_TOPLEVEL_INPUT_MENU:
			ToplevelMenu_DrawInputMenu();
			break;

		default:
			break;
 8003b1c:	e008      	b.n	8003b30 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawMainMenu();
 8003b1e:	f000 f80b 	bl	8003b38 <ToplevelMenu_DrawMainMenu>
			break;
 8003b22:	e005      	b.n	8003b30 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawOutputMenu();
 8003b24:	f000 f844 	bl	8003bb0 <ToplevelMenu_DrawOutputMenu>
			break;
 8003b28:	e002      	b.n	8003b30 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawInputMenu();
 8003b2a:	f000 f88b 	bl	8003c44 <ToplevelMenu_DrawInputMenu>
			break;
 8003b2e:	bf00      	nop

	}
}
 8003b30:	bf00      	nop
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <ToplevelMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMainMenu()
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af02      	add	r7, sp, #8
	#endif

	// Main screen
	//ILI9341_Draw_Text("SIGNAL GENERATOR", 	10, 10, WHITE, 2, BLACK);

	DM_DisplayFormattedOutput();
 8003b3e:	f7fd f9ed 	bl	8000f1c <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("OUTPUT", 6, 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003b42:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003b46:	9301      	str	r3, [sp, #4]
 8003b48:	2302      	movs	r3, #2
 8003b4a:	9300      	str	r3, [sp, #0]
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	22d2      	movs	r2, #210	; 0xd2
 8003b50:	2106      	movs	r1, #6
 8003b52:	4814      	ldr	r0, [pc, #80]	; (8003ba4 <ToplevelMenu_DrawMainMenu+0x6c>)
 8003b54:	f00a fd16 	bl	800e584 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("INPUT", 93, 210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003b58:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003b5c:	9301      	str	r3, [sp, #4]
 8003b5e:	2302      	movs	r3, #2
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	2300      	movs	r3, #0
 8003b64:	22d2      	movs	r2, #210	; 0xd2
 8003b66:	215d      	movs	r1, #93	; 0x5d
 8003b68:	480f      	ldr	r0, [pc, #60]	; (8003ba8 <ToplevelMenu_DrawMainMenu+0x70>)
 8003b6a:	f00a fd0b 	bl	800e584 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003b6e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003b72:	9301      	str	r3, [sp, #4]
 8003b74:	2302      	movs	r3, #2
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	2300      	movs	r3, #0
 8003b7a:	22d2      	movs	r2, #210	; 0xd2
 8003b7c:	21af      	movs	r1, #175	; 0xaf
 8003b7e:	480b      	ldr	r0, [pc, #44]	; (8003bac <ToplevelMenu_DrawMainMenu+0x74>)
 8003b80:	f00a fd00 	bl	800e584 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003b84:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003b88:	9301      	str	r3, [sp, #4]
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	9300      	str	r3, [sp, #0]
 8003b8e:	2300      	movs	r3, #0
 8003b90:	22d2      	movs	r2, #210	; 0xd2
 8003b92:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003b96:	4805      	ldr	r0, [pc, #20]	; (8003bac <ToplevelMenu_DrawMainMenu+0x74>)
 8003b98:	f00a fcf4 	bl	800e584 <ILI9341_Draw_Text>


}
 8003b9c:	bf00      	nop
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	080138a4 	.word	0x080138a4
 8003ba8:	080138ac 	.word	0x080138ac
 8003bac:	080138b4 	.word	0x080138b4

08003bb0 <ToplevelMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawOutputMenu()
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003bb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bba:	9301      	str	r3, [sp, #4]
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	220a      	movs	r2, #10
 8003bc4:	210a      	movs	r1, #10
 8003bc6:	481a      	ldr	r0, [pc, #104]	; (8003c30 <ToplevelMenu_DrawOutputMenu+0x80>)
 8003bc8:	f00a fcdc 	bl	800e584 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003bcc:	f7fd f9a6 	bl	8000f1c <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("FUNC", 15,  210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003bd0:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003bd4:	9301      	str	r3, [sp, #4]
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	2300      	movs	r3, #0
 8003bdc:	22d2      	movs	r2, #210	; 0xd2
 8003bde:	210f      	movs	r1, #15
 8003be0:	4814      	ldr	r0, [pc, #80]	; (8003c34 <ToplevelMenu_DrawOutputMenu+0x84>)
 8003be2:	f00a fccf 	bl	800e584 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FREQ", 98,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003be6:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003bea:	9301      	str	r3, [sp, #4]
 8003bec:	2302      	movs	r3, #2
 8003bee:	9300      	str	r3, [sp, #0]
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	22d2      	movs	r2, #210	; 0xd2
 8003bf4:	2162      	movs	r1, #98	; 0x62
 8003bf6:	4810      	ldr	r0, [pc, #64]	; (8003c38 <ToplevelMenu_DrawOutputMenu+0x88>)
 8003bf8:	f00a fcc4 	bl	800e584 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GAIN", 176, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003bfc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003c00:	9301      	str	r3, [sp, #4]
 8003c02:	2302      	movs	r3, #2
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	2300      	movs	r3, #0
 8003c08:	22d2      	movs	r2, #210	; 0xd2
 8003c0a:	21b0      	movs	r1, #176	; 0xb0
 8003c0c:	480b      	ldr	r0, [pc, #44]	; (8003c3c <ToplevelMenu_DrawOutputMenu+0x8c>)
 8003c0e:	f00a fcb9 	bl	800e584 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("OFFSET", 245, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003c12:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003c16:	9301      	str	r3, [sp, #4]
 8003c18:	2302      	movs	r3, #2
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	22d2      	movs	r2, #210	; 0xd2
 8003c20:	21f5      	movs	r1, #245	; 0xf5
 8003c22:	4807      	ldr	r0, [pc, #28]	; (8003c40 <ToplevelMenu_DrawOutputMenu+0x90>)
 8003c24:	f00a fcae 	bl	800e584 <ILI9341_Draw_Text>
}
 8003c28:	bf00      	nop
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	080138bc 	.word	0x080138bc
 8003c34:	080138c4 	.word	0x080138c4
 8003c38:	080138cc 	.word	0x080138cc
 8003c3c:	080138d4 	.word	0x080138d4
 8003c40:	080138dc 	.word	0x080138dc

08003c44 <ToplevelMenu_DrawInputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawInputMenu()
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("IN->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003c4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c4e:	9301      	str	r3, [sp, #4]
 8003c50:	2302      	movs	r3, #2
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	2300      	movs	r3, #0
 8003c56:	220a      	movs	r2, #10
 8003c58:	210a      	movs	r1, #10
 8003c5a:	4804      	ldr	r0, [pc, #16]	; (8003c6c <ToplevelMenu_DrawInputMenu+0x28>)
 8003c5c:	f00a fc92 	bl	800e584 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003c60:	f7fd f95c 	bl	8000f1c <DM_DisplayFormattedOutput>
}
 8003c64:	bf00      	nop
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	080138e4 	.word	0x080138e4

08003c70 <BiasMenu_getStatus>:
 *	@param None
 *	@retval None
 *
 */
eBiasMenu_Status BiasMenu_getStatus()
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0
	return eNextBiasMenuStatus;
 8003c74:	4b03      	ldr	r3, [pc, #12]	; (8003c84 <BiasMenu_getStatus+0x14>)
 8003c76:	781b      	ldrb	r3, [r3, #0]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	20001e51 	.word	0x20001e51

08003c88 <BiasMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuEntryHandler()
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("BiasMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8003c8c:	f7fd fc06 	bl	800149c <DM_RefreshScreen>

	eNextBiasMenuStatus = ENABLE_BIAS_MENU;
 8003c90:	4b09      	ldr	r3, [pc, #36]	; (8003cb8 <BiasMenuEntryHandler+0x30>)
 8003c92:	2201      	movs	r2, #1
 8003c94:	701a      	strb	r2, [r3, #0]

	ENCODER_TIMER->ARR = BIAS_MAX;
 8003c96:	4b09      	ldr	r3, [pc, #36]	; (8003cbc <BiasMenuEntryHandler+0x34>)
 8003c98:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003c9c:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BO_GetDcBiasEncoderValue();
 8003c9e:	f001 f831 	bl	8004d04 <BO_GetDcBiasEncoderValue>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <BiasMenuEntryHandler+0x34>)
 8003ca8:	625a      	str	r2, [r3, #36]	; 0x24

	eNewEvent = evIdle;
 8003caa:	4b05      	ldr	r3, [pc, #20]	; (8003cc0 <BiasMenuEntryHandler+0x38>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8003cb0:	230e      	movs	r3, #14
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	20001e51 	.word	0x20001e51
 8003cbc:	40012c00 	.word	0x40012c00
 8003cc0:	20001e53 	.word	0x20001e53

08003cc4 <BiasMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuInputHandler()
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("BiasMenuInputHandler Event captured\n");
	#endif

	BO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8003cc8:	2001      	movs	r0, #1
 8003cca:	f002 f9eb 	bl	80060a4 <SM_GetEncoderValue>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f001 f823 	bl	8004d1c <BO_MapEncoderPositionToSignalOutput>

	eNewEvent = evIdle;
 8003cd6:	4b03      	ldr	r3, [pc, #12]	; (8003ce4 <BiasMenuInputHandler+0x20>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8003cdc:	230e      	movs	r3, #14
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	20001e53 	.word	0x20001e53

08003ce8 <BiasMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuExitHandler()
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
		printf("BiasMenuExitHandler Event captured\n");
	#endif


	// disable the menu
	eNextBiasMenuStatus = DISABLE_BIAS_MENU;
 8003cec:	4b05      	ldr	r3, [pc, #20]	; (8003d04 <BiasMenuExitHandler+0x1c>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8003cf2:	f7fd fbd3 	bl	800149c <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 8003cf6:	4b04      	ldr	r3, [pc, #16]	; (8003d08 <BiasMenuExitHandler+0x20>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8003cfc:	2301      	movs	r3, #1
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	20001e51 	.word	0x20001e51
 8003d08:	20001e53 	.word	0x20001e53

08003d0c <EM_ProcessEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_ProcessEvent()
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0

	switch(eNextState)
 8003d12:	4bbe      	ldr	r3, [pc, #760]	; (800400c <EM_ProcessEvent+0x300>)
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	2b0e      	cmp	r3, #14
 8003d18:	f200 81eb 	bhi.w	80040f2 <EM_ProcessEvent+0x3e6>
 8003d1c:	a201      	add	r2, pc, #4	; (adr r2, 8003d24 <EM_ProcessEvent+0x18>)
 8003d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d22:	bf00      	nop
 8003d24:	08003d61 	.word	0x08003d61
 8003d28:	08003d8d 	.word	0x08003d8d
 8003d2c:	08003e0d 	.word	0x08003e0d
 8003d30:	08003e25 	.word	0x08003e25
 8003d34:	08003e65 	.word	0x08003e65
 8003d38:	08003e91 	.word	0x08003e91
 8003d3c:	08003ed1 	.word	0x08003ed1
 8003d40:	08003f2f 	.word	0x08003f2f
 8003d44:	08003f5b 	.word	0x08003f5b
 8003d48:	080040f3 	.word	0x080040f3
 8003d4c:	08003f87 	.word	0x08003f87
 8003d50:	08003fe1 	.word	0x08003fe1
 8003d54:	08004015 	.word	0x08004015
 8003d58:	0800403f 	.word	0x0800403f
 8003d5c:	080040c3 	.word	0x080040c3

			#ifdef EVENT_MENU_DEBUG
			  printf("Idle_State\n");
			#endif

			if(eNewEvent == evBlueBtn)
 8003d60:	4bab      	ldr	r3, [pc, #684]	; (8004010 <EM_ProcessEvent+0x304>)
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d105      	bne.n	8003d74 <EM_ProcessEvent+0x68>
			{
				eNextState = ToplevelOutputMenuEntryHandler();
 8003d68:	f000 fe0a 	bl	8004980 <ToplevelOutputMenuEntryHandler>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	461a      	mov	r2, r3
 8003d70:	4ba6      	ldr	r3, [pc, #664]	; (800400c <EM_ProcessEvent+0x300>)
 8003d72:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003d74:	4ba6      	ldr	r3, [pc, #664]	; (8004010 <EM_ProcessEvent+0x304>)
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	f040 81bc 	bne.w	80040f6 <EM_ProcessEvent+0x3ea>
			{
				eNextState = ToplevelInputMenuEntryHandler();
 8003d7e:	f000 fe23 	bl	80049c8 <ToplevelInputMenuEntryHandler>
 8003d82:	4603      	mov	r3, r0
 8003d84:	461a      	mov	r2, r3
 8003d86:	4ba1      	ldr	r3, [pc, #644]	; (800400c <EM_ProcessEvent+0x300>)
 8003d88:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
			{
				// no menu action
			}
			break;
 8003d8a:	e1b4      	b.n	80040f6 <EM_ProcessEvent+0x3ea>

			#ifdef EVENT_MENU_DEBUG
			  printf("Toplevel_Output_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderPush)
 8003d8c:	4ba0      	ldr	r3, [pc, #640]	; (8004010 <EM_ProcessEvent+0x304>)
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	2b06      	cmp	r3, #6
 8003d92:	d105      	bne.n	8003da0 <EM_ProcessEvent+0x94>
			{
				eNextState = ToplevelOutputMenuExitHandler();
 8003d94:	f000 fe06 	bl	80049a4 <ToplevelOutputMenuExitHandler>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	4b9b      	ldr	r3, [pc, #620]	; (800400c <EM_ProcessEvent+0x300>)
 8003d9e:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 8003da0:	4b9b      	ldr	r3, [pc, #620]	; (8004010 <EM_ProcessEvent+0x304>)
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d108      	bne.n	8003dba <EM_ProcessEvent+0xae>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003da8:	2000      	movs	r0, #0
 8003daa:	f000 fdd9 	bl	8004960 <ToplevelMenu_setStatus>
				eNextState = FuncMainMenuEntryHandler();
 8003dae:	f000 fbef 	bl	8004590 <FuncMainMenuEntryHandler>
 8003db2:	4603      	mov	r3, r0
 8003db4:	461a      	mov	r2, r3
 8003db6:	4b95      	ldr	r3, [pc, #596]	; (800400c <EM_ProcessEvent+0x300>)
 8003db8:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003dba:	4b95      	ldr	r3, [pc, #596]	; (8004010 <EM_ProcessEvent+0x304>)
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d108      	bne.n	8003dd4 <EM_ProcessEvent+0xc8>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003dc2:	2000      	movs	r0, #0
 8003dc4:	f000 fdcc 	bl	8004960 <ToplevelMenu_setStatus>
				eNextState = FreqMainMenuEntryHandler();
 8003dc8:	f000 fb14 	bl	80043f4 <FreqMainMenuEntryHandler>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	461a      	mov	r2, r3
 8003dd0:	4b8e      	ldr	r3, [pc, #568]	; (800400c <EM_ProcessEvent+0x300>)
 8003dd2:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8003dd4:	4b8e      	ldr	r3, [pc, #568]	; (8004010 <EM_ProcessEvent+0x304>)
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	2b03      	cmp	r3, #3
 8003dda:	d108      	bne.n	8003dee <EM_ProcessEvent+0xe2>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003ddc:	2000      	movs	r0, #0
 8003dde:	f000 fdbf 	bl	8004960 <ToplevelMenu_setStatus>
				eNextState = GainMainMenuEntryHandler();
 8003de2:	f000 fccb 	bl	800477c <GainMainMenuEntryHandler>
 8003de6:	4603      	mov	r3, r0
 8003de8:	461a      	mov	r2, r3
 8003dea:	4b88      	ldr	r3, [pc, #544]	; (800400c <EM_ProcessEvent+0x300>)
 8003dec:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 8003dee:	4b88      	ldr	r3, [pc, #544]	; (8004010 <EM_ProcessEvent+0x304>)
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	f040 8181 	bne.w	80040fa <EM_ProcessEvent+0x3ee>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003df8:	2000      	movs	r0, #0
 8003dfa:	f000 fdb1 	bl	8004960 <ToplevelMenu_setStatus>
				eNextState = BiasMenuEntryHandler();
 8003dfe:	f7ff ff43 	bl	8003c88 <BiasMenuEntryHandler>
 8003e02:	4603      	mov	r3, r0
 8003e04:	461a      	mov	r2, r3
 8003e06:	4b81      	ldr	r3, [pc, #516]	; (800400c <EM_ProcessEvent+0x300>)
 8003e08:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003e0a:	e176      	b.n	80040fa <EM_ProcessEvent+0x3ee>

			#ifdef EVENT_MENU_DEBUG
			  printf("Toplevel_Input_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderPush)
 8003e0c:	4b80      	ldr	r3, [pc, #512]	; (8004010 <EM_ProcessEvent+0x304>)
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	2b06      	cmp	r3, #6
 8003e12:	f040 8174 	bne.w	80040fe <EM_ProcessEvent+0x3f2>
			{
				eNextState = ToplevelInputMenuExitHandler();
 8003e16:	f000 fde9 	bl	80049ec <ToplevelInputMenuExitHandler>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	4b7b      	ldr	r3, [pc, #492]	; (800400c <EM_ProcessEvent+0x300>)
 8003e20:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003e22:	e16c      	b.n	80040fe <EM_ProcessEvent+0x3f2>

			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 8003e24:	4b7a      	ldr	r3, [pc, #488]	; (8004010 <EM_ProcessEvent+0x304>)
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	2b06      	cmp	r3, #6
 8003e2a:	d105      	bne.n	8003e38 <EM_ProcessEvent+0x12c>
			{
				eNextState = FuncMainMenuExitHandler();
 8003e2c:	f000 fbc2 	bl	80045b4 <FuncMainMenuExitHandler>
 8003e30:	4603      	mov	r3, r0
 8003e32:	461a      	mov	r2, r3
 8003e34:	4b75      	ldr	r3, [pc, #468]	; (800400c <EM_ProcessEvent+0x300>)
 8003e36:	701a      	strb	r2, [r3, #0]

			}
			if(eNewEvent == evBlueBtn)
 8003e38:	4b75      	ldr	r3, [pc, #468]	; (8004010 <EM_ProcessEvent+0x304>)
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d105      	bne.n	8003e4c <EM_ProcessEvent+0x140>
			{
				eNextState = FuncSignalMenuEntryHandler();
 8003e40:	f000 fbcc 	bl	80045dc <FuncSignalMenuEntryHandler>
 8003e44:	4603      	mov	r3, r0
 8003e46:	461a      	mov	r2, r3
 8003e48:	4b70      	ldr	r3, [pc, #448]	; (800400c <EM_ProcessEvent+0x300>)
 8003e4a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003e4c:	4b70      	ldr	r3, [pc, #448]	; (8004010 <EM_ProcessEvent+0x304>)
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	f040 8156 	bne.w	8004102 <EM_ProcessEvent+0x3f6>
			{
				eNextState = FuncAuxMenuEntryHandler();
 8003e56:	f000 fc05 	bl	8004664 <FuncAuxMenuEntryHandler>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	4b6b      	ldr	r3, [pc, #428]	; (800400c <EM_ProcessEvent+0x300>)
 8003e60:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003e62:	e14e      	b.n	8004102 <EM_ProcessEvent+0x3f6>

			#ifdef EVENT_MENU_DEBUG
				  printf("Func_Signal_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderSet)
 8003e64:	4b6a      	ldr	r3, [pc, #424]	; (8004010 <EM_ProcessEvent+0x304>)
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	2b05      	cmp	r3, #5
 8003e6a:	d105      	bne.n	8003e78 <EM_ProcessEvent+0x16c>
			{
				eNextState = FuncSignalMenuInputHandler();
 8003e6c:	f000 fbd4 	bl	8004618 <FuncSignalMenuInputHandler>
 8003e70:	4603      	mov	r3, r0
 8003e72:	461a      	mov	r2, r3
 8003e74:	4b65      	ldr	r3, [pc, #404]	; (800400c <EM_ProcessEvent+0x300>)
 8003e76:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003e78:	4b65      	ldr	r3, [pc, #404]	; (8004010 <EM_ProcessEvent+0x304>)
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	2b06      	cmp	r3, #6
 8003e7e:	f040 8142 	bne.w	8004106 <EM_ProcessEvent+0x3fa>
			{
				eNextState = FuncSignalMenuExitHandler();
 8003e82:	f000 fbdb 	bl	800463c <FuncSignalMenuExitHandler>
 8003e86:	4603      	mov	r3, r0
 8003e88:	461a      	mov	r2, r3
 8003e8a:	4b60      	ldr	r3, [pc, #384]	; (800400c <EM_ProcessEvent+0x300>)
 8003e8c:	701a      	strb	r2, [r3, #0]
			}


			break;
 8003e8e:	e13a      	b.n	8004106 <EM_ProcessEvent+0x3fa>

			#ifdef EVENT_MENU_DEBUG
				  printf("Func_Aux_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderSet)
 8003e90:	4b5f      	ldr	r3, [pc, #380]	; (8004010 <EM_ProcessEvent+0x304>)
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	2b05      	cmp	r3, #5
 8003e96:	d105      	bne.n	8003ea4 <EM_ProcessEvent+0x198>
			{
				eNextState = FuncAuxMenuInputHandler();
 8003e98:	f000 fc02 	bl	80046a0 <FuncAuxMenuInputHandler>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	4b5a      	ldr	r3, [pc, #360]	; (800400c <EM_ProcessEvent+0x300>)
 8003ea2:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003ea4:	4b5a      	ldr	r3, [pc, #360]	; (8004010 <EM_ProcessEvent+0x304>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	2b06      	cmp	r3, #6
 8003eaa:	d105      	bne.n	8003eb8 <EM_ProcessEvent+0x1ac>
			{
				eNextState = FuncAuxMenuExitHandler();
 8003eac:	f000 fc46 	bl	800473c <FuncAuxMenuExitHandler>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	4b55      	ldr	r3, [pc, #340]	; (800400c <EM_ProcessEvent+0x300>)
 8003eb6:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8003eb8:	4b55      	ldr	r3, [pc, #340]	; (8004010 <EM_ProcessEvent+0x304>)
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	2b03      	cmp	r3, #3
 8003ebe:	f040 8124 	bne.w	800410a <EM_ProcessEvent+0x3fe>
			{
				eNextState = FuncAuxToggleDutyMode();
 8003ec2:	f000 fc29 	bl	8004718 <FuncAuxToggleDutyMode>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	461a      	mov	r2, r3
 8003eca:	4b50      	ldr	r3, [pc, #320]	; (800400c <EM_ProcessEvent+0x300>)
 8003ecc:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003ece:	e11c      	b.n	800410a <EM_ProcessEvent+0x3fe>
			#endif
			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 8003ed0:	4b4f      	ldr	r3, [pc, #316]	; (8004010 <EM_ProcessEvent+0x304>)
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	2b06      	cmp	r3, #6
 8003ed6:	d108      	bne.n	8003eea <EM_ProcessEvent+0x1de>
			{
				eNextState = GainMainMenuExitHandler();
 8003ed8:	f000 fc62 	bl	80047a0 <GainMainMenuExitHandler>
 8003edc:	4603      	mov	r3, r0
 8003ede:	461a      	mov	r2, r3
 8003ee0:	4b4a      	ldr	r3, [pc, #296]	; (800400c <EM_ProcessEvent+0x300>)
 8003ee2:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8003ee4:	2002      	movs	r0, #2
 8003ee6:	f000 fd3b 	bl	8004960 <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 8003eea:	4b49      	ldr	r3, [pc, #292]	; (8004010 <EM_ProcessEvent+0x304>)
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d105      	bne.n	8003efe <EM_ProcessEvent+0x1f2>
			{
				eNextState = GainSignalMenuEntryHandler();
 8003ef2:	f000 fc67 	bl	80047c4 <GainSignalMenuEntryHandler>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	461a      	mov	r2, r3
 8003efa:	4b44      	ldr	r3, [pc, #272]	; (800400c <EM_ProcessEvent+0x300>)
 8003efc:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003efe:	4b44      	ldr	r3, [pc, #272]	; (8004010 <EM_ProcessEvent+0x304>)
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	f040 8103 	bne.w	800410e <EM_ProcessEvent+0x402>
			{
				eOutput_mode aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8003f08:	2001      	movs	r0, #1
 8003f0a:	f001 fe4f 	bl	8005bac <SM_GetOutputChannel>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	71fb      	strb	r3, [r7, #7]
				if(aux_output_func != PWM_FUNC_MODE)
 8003f18:	79fb      	ldrb	r3, [r7, #7]
 8003f1a:	2b06      	cmp	r3, #6
 8003f1c:	f000 80f7 	beq.w	800410e <EM_ProcessEvent+0x402>
					eNextState = GainAuxMenuEntryHandler();
 8003f20:	f000 fcbe 	bl	80048a0 <GainAuxMenuEntryHandler>
 8003f24:	4603      	mov	r3, r0
 8003f26:	461a      	mov	r2, r3
 8003f28:	4b38      	ldr	r3, [pc, #224]	; (800400c <EM_ProcessEvent+0x300>)
 8003f2a:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003f2c:	e0ef      	b.n	800410e <EM_ProcessEvent+0x402>

			#ifdef EVENT_MENU_DEBUG
				  printf("Gain_Signal_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderSet)
 8003f2e:	4b38      	ldr	r3, [pc, #224]	; (8004010 <EM_ProcessEvent+0x304>)
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	2b05      	cmp	r3, #5
 8003f34:	d105      	bne.n	8003f42 <EM_ProcessEvent+0x236>
			{
				eNextState = GainSignalMenuInputHandler();
 8003f36:	f000 fc77 	bl	8004828 <GainSignalMenuInputHandler>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	4b33      	ldr	r3, [pc, #204]	; (800400c <EM_ProcessEvent+0x300>)
 8003f40:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003f42:	4b33      	ldr	r3, [pc, #204]	; (8004010 <EM_ProcessEvent+0x304>)
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	2b06      	cmp	r3, #6
 8003f48:	f040 80e3 	bne.w	8004112 <EM_ProcessEvent+0x406>
			{
				eNextState = GainSignalMenuExitHandler();
 8003f4c:	f000 fc96 	bl	800487c <GainSignalMenuExitHandler>
 8003f50:	4603      	mov	r3, r0
 8003f52:	461a      	mov	r2, r3
 8003f54:	4b2d      	ldr	r3, [pc, #180]	; (800400c <EM_ProcessEvent+0x300>)
 8003f56:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003f58:	e0db      	b.n	8004112 <EM_ProcessEvent+0x406>

			#ifdef EVENT_MENU_DEBUG
				  printf("Gain_Aux_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderSet)
 8003f5a:	4b2d      	ldr	r3, [pc, #180]	; (8004010 <EM_ProcessEvent+0x304>)
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	2b05      	cmp	r3, #5
 8003f60:	d105      	bne.n	8003f6e <EM_ProcessEvent+0x262>
			{
				eNextState = GainAuxMenuInputHandler();
 8003f62:	f000 fccd 	bl	8004900 <GainAuxMenuInputHandler>
 8003f66:	4603      	mov	r3, r0
 8003f68:	461a      	mov	r2, r3
 8003f6a:	4b28      	ldr	r3, [pc, #160]	; (800400c <EM_ProcessEvent+0x300>)
 8003f6c:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003f6e:	4b28      	ldr	r3, [pc, #160]	; (8004010 <EM_ProcessEvent+0x304>)
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	2b06      	cmp	r3, #6
 8003f74:	f040 80cf 	bne.w	8004116 <EM_ProcessEvent+0x40a>
			{
				eNextState = GainAuxMenuExitHandler();
 8003f78:	f000 fcd4 	bl	8004924 <GainAuxMenuExitHandler>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	461a      	mov	r2, r3
 8003f80:	4b22      	ldr	r3, [pc, #136]	; (800400c <EM_ProcessEvent+0x300>)
 8003f82:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003f84:	e0c7      	b.n	8004116 <EM_ProcessEvent+0x40a>

			#ifdef EVENT_MENU_DEBUG
				  printf("Freq_Main_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderPush)
 8003f86:	4b22      	ldr	r3, [pc, #136]	; (8004010 <EM_ProcessEvent+0x304>)
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	2b06      	cmp	r3, #6
 8003f8c:	d108      	bne.n	8003fa0 <EM_ProcessEvent+0x294>
			{
				eNextState = FreqMainMenuExitHandler();
 8003f8e:	f000 fa43 	bl	8004418 <FreqMainMenuExitHandler>
 8003f92:	4603      	mov	r3, r0
 8003f94:	461a      	mov	r2, r3
 8003f96:	4b1d      	ldr	r3, [pc, #116]	; (800400c <EM_ProcessEvent+0x300>)
 8003f98:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8003f9a:	2002      	movs	r0, #2
 8003f9c:	f000 fce0 	bl	8004960 <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 8003fa0:	4b1b      	ldr	r3, [pc, #108]	; (8004010 <EM_ProcessEvent+0x304>)
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d105      	bne.n	8003fb4 <EM_ProcessEvent+0x2a8>
			{
				eNextState = FreqPresetMenuEntryHandler();
 8003fa8:	f000 fa4e 	bl	8004448 <FreqPresetMenuEntryHandler>
 8003fac:	4603      	mov	r3, r0
 8003fae:	461a      	mov	r2, r3
 8003fb0:	4b16      	ldr	r3, [pc, #88]	; (800400c <EM_ProcessEvent+0x300>)
 8003fb2:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003fb4:	4b16      	ldr	r3, [pc, #88]	; (8004010 <EM_ProcessEvent+0x304>)
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d105      	bne.n	8003fc8 <EM_ProcessEvent+0x2bc>
			{
				eNextState = FreqAdjustMenuEntryHandler();
 8003fbc:	f000 fa94 	bl	80044e8 <FreqAdjustMenuEntryHandler>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	4b11      	ldr	r3, [pc, #68]	; (800400c <EM_ProcessEvent+0x300>)
 8003fc6:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8003fc8:	4b11      	ldr	r3, [pc, #68]	; (8004010 <EM_ProcessEvent+0x304>)
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	2b03      	cmp	r3, #3
 8003fce:	f040 80a4 	bne.w	800411a <EM_ProcessEvent+0x40e>
			{
				eNextState = FreqSweepMenuEntryHandler();
 8003fd2:	f000 f8c3 	bl	800415c <FreqSweepMenuEntryHandler>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	461a      	mov	r2, r3
 8003fda:	4b0c      	ldr	r3, [pc, #48]	; (800400c <EM_ProcessEvent+0x300>)
 8003fdc:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003fde:	e09c      	b.n	800411a <EM_ProcessEvent+0x40e>

			#ifdef EVENT_MENU_DEBUG
				  printf("Freq_Preset_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderSet)
 8003fe0:	4b0b      	ldr	r3, [pc, #44]	; (8004010 <EM_ProcessEvent+0x304>)
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	2b05      	cmp	r3, #5
 8003fe6:	d105      	bne.n	8003ff4 <EM_ProcessEvent+0x2e8>
			{
				eNextState = FreqPresetMenuInputHandler();
 8003fe8:	f000 fa5a 	bl	80044a0 <FreqPresetMenuInputHandler>
 8003fec:	4603      	mov	r3, r0
 8003fee:	461a      	mov	r2, r3
 8003ff0:	4b06      	ldr	r3, [pc, #24]	; (800400c <EM_ProcessEvent+0x300>)
 8003ff2:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003ff4:	4b06      	ldr	r3, [pc, #24]	; (8004010 <EM_ProcessEvent+0x304>)
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	2b06      	cmp	r3, #6
 8003ffa:	f040 8090 	bne.w	800411e <EM_ProcessEvent+0x412>
			{
				eNextState = FreqPresetMenuExitHandler();
 8003ffe:	f000 fa61 	bl	80044c4 <FreqPresetMenuExitHandler>
 8004002:	4603      	mov	r3, r0
 8004004:	461a      	mov	r2, r3
 8004006:	4b01      	ldr	r3, [pc, #4]	; (800400c <EM_ProcessEvent+0x300>)
 8004008:	701a      	strb	r2, [r3, #0]
			}
			break;
 800400a:	e088      	b.n	800411e <EM_ProcessEvent+0x412>
 800400c:	20001e52 	.word	0x20001e52
 8004010:	20001e53 	.word	0x20001e53

			#ifdef EVENT_MENU_DEBUG
				  printf("Freq_Adjust_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderSet)
 8004014:	4b47      	ldr	r3, [pc, #284]	; (8004134 <EM_ProcessEvent+0x428>)
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	2b05      	cmp	r3, #5
 800401a:	d105      	bne.n	8004028 <EM_ProcessEvent+0x31c>
			{
				eNextState = FreqAdjustMenuInputHandler();
 800401c:	f000 fa82 	bl	8004524 <FreqAdjustMenuInputHandler>
 8004020:	4603      	mov	r3, r0
 8004022:	461a      	mov	r2, r3
 8004024:	4b44      	ldr	r3, [pc, #272]	; (8004138 <EM_ProcessEvent+0x42c>)
 8004026:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8004028:	4b42      	ldr	r3, [pc, #264]	; (8004134 <EM_ProcessEvent+0x428>)
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	2b06      	cmp	r3, #6
 800402e:	d178      	bne.n	8004122 <EM_ProcessEvent+0x416>
			{
				eNextState = FreqAdjustMenuExitHandler();
 8004030:	f000 fa84 	bl	800453c <FreqAdjustMenuExitHandler>
 8004034:	4603      	mov	r3, r0
 8004036:	461a      	mov	r2, r3
 8004038:	4b3f      	ldr	r3, [pc, #252]	; (8004138 <EM_ProcessEvent+0x42c>)
 800403a:	701a      	strb	r2, [r3, #0]
			}
			break;
 800403c:	e071      	b.n	8004122 <EM_ProcessEvent+0x416>

			#ifdef EVENT_MENU_DEBUG
				  printf("Freq_Sweep_Menu_State\n");
			#endif

			if(eNewEvent == evBlueBtn)
 800403e:	4b3d      	ldr	r3, [pc, #244]	; (8004134 <EM_ProcessEvent+0x428>)
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d106      	bne.n	8004054 <EM_ProcessEvent+0x348>
			{
				// enable
				eNextState = FreqSweepMenuInputHandler(evSweepEnableBtn);
 8004046:	2007      	movs	r0, #7
 8004048:	f000 f8de 	bl	8004208 <FreqSweepMenuInputHandler>
 800404c:	4603      	mov	r3, r0
 800404e:	461a      	mov	r2, r3
 8004050:	4b39      	ldr	r3, [pc, #228]	; (8004138 <EM_ProcessEvent+0x42c>)
 8004052:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8004054:	4b37      	ldr	r3, [pc, #220]	; (8004134 <EM_ProcessEvent+0x428>)
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	2b02      	cmp	r3, #2
 800405a:	d106      	bne.n	800406a <EM_ProcessEvent+0x35e>
			{
				// direction
				eNextState = FreqSweepMenuInputHandler(evSweepModeBtn);
 800405c:	2008      	movs	r0, #8
 800405e:	f000 f8d3 	bl	8004208 <FreqSweepMenuInputHandler>
 8004062:	4603      	mov	r3, r0
 8004064:	461a      	mov	r2, r3
 8004066:	4b34      	ldr	r3, [pc, #208]	; (8004138 <EM_ProcessEvent+0x42c>)
 8004068:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 800406a:	4b32      	ldr	r3, [pc, #200]	; (8004134 <EM_ProcessEvent+0x428>)
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	2b03      	cmp	r3, #3
 8004070:	d106      	bne.n	8004080 <EM_ProcessEvent+0x374>
			{
				// set sweep speed
				eNextState = FreqSweepMenuInputHandler(evSweepSpeedBtn);
 8004072:	2009      	movs	r0, #9
 8004074:	f000 f8c8 	bl	8004208 <FreqSweepMenuInputHandler>
 8004078:	4603      	mov	r3, r0
 800407a:	461a      	mov	r2, r3
 800407c:	4b2e      	ldr	r3, [pc, #184]	; (8004138 <EM_ProcessEvent+0x42c>)
 800407e:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 8004080:	4b2c      	ldr	r3, [pc, #176]	; (8004134 <EM_ProcessEvent+0x428>)
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	2b04      	cmp	r3, #4
 8004086:	d106      	bne.n	8004096 <EM_ProcessEvent+0x38a>
			{
				// set lower/upper sweep limit
				eNextState = FreqSweepMenuInputHandler(evSweepLimitBtn);
 8004088:	200a      	movs	r0, #10
 800408a:	f000 f8bd 	bl	8004208 <FreqSweepMenuInputHandler>
 800408e:	4603      	mov	r3, r0
 8004090:	461a      	mov	r2, r3
 8004092:	4b29      	ldr	r3, [pc, #164]	; (8004138 <EM_ProcessEvent+0x42c>)
 8004094:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderSet)
 8004096:	4b27      	ldr	r3, [pc, #156]	; (8004134 <EM_ProcessEvent+0x428>)
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	2b05      	cmp	r3, #5
 800409c:	d106      	bne.n	80040ac <EM_ProcessEvent+0x3a0>
			{
				eNextState = FreqSweepMenuInputHandler(evEncoderSweep);
 800409e:	200b      	movs	r0, #11
 80040a0:	f000 f8b2 	bl	8004208 <FreqSweepMenuInputHandler>
 80040a4:	4603      	mov	r3, r0
 80040a6:	461a      	mov	r2, r3
 80040a8:	4b23      	ldr	r3, [pc, #140]	; (8004138 <EM_ProcessEvent+0x42c>)
 80040aa:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 80040ac:	4b21      	ldr	r3, [pc, #132]	; (8004134 <EM_ProcessEvent+0x428>)
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	2b06      	cmp	r3, #6
 80040b2:	d138      	bne.n	8004126 <EM_ProcessEvent+0x41a>
			{
				eNextState = FreqSweepMenuExitHandler();
 80040b4:	f000 f97e 	bl	80043b4 <FreqSweepMenuExitHandler>
 80040b8:	4603      	mov	r3, r0
 80040ba:	461a      	mov	r2, r3
 80040bc:	4b1e      	ldr	r3, [pc, #120]	; (8004138 <EM_ProcessEvent+0x42c>)
 80040be:	701a      	strb	r2, [r3, #0]
			}

			break;
 80040c0:	e031      	b.n	8004126 <EM_ProcessEvent+0x41a>

			#ifdef EVENT_MENU_DEBUG
				  printf("Bias_Menu_State\n");
			#endif

			if(eNewEvent == evEncoderSet)
 80040c2:	4b1c      	ldr	r3, [pc, #112]	; (8004134 <EM_ProcessEvent+0x428>)
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	2b05      	cmp	r3, #5
 80040c8:	d105      	bne.n	80040d6 <EM_ProcessEvent+0x3ca>
			{
				eNextState = BiasMenuInputHandler();
 80040ca:	f7ff fdfb 	bl	8003cc4 <BiasMenuInputHandler>
 80040ce:	4603      	mov	r3, r0
 80040d0:	461a      	mov	r2, r3
 80040d2:	4b19      	ldr	r3, [pc, #100]	; (8004138 <EM_ProcessEvent+0x42c>)
 80040d4:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 80040d6:	4b17      	ldr	r3, [pc, #92]	; (8004134 <EM_ProcessEvent+0x428>)
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	2b06      	cmp	r3, #6
 80040dc:	d125      	bne.n	800412a <EM_ProcessEvent+0x41e>
			{
				eNextState = BiasMenuExitHandler();
 80040de:	f7ff fe03 	bl	8003ce8 <BiasMenuExitHandler>
 80040e2:	4603      	mov	r3, r0
 80040e4:	461a      	mov	r2, r3
 80040e6:	4b14      	ldr	r3, [pc, #80]	; (8004138 <EM_ProcessEvent+0x42c>)
 80040e8:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 80040ea:	2002      	movs	r0, #2
 80040ec:	f000 fc38 	bl	8004960 <ToplevelMenu_setStatus>
			}

			break;
 80040f0:	e01b      	b.n	800412a <EM_ProcessEvent+0x41e>

		default:
			break;
 80040f2:	bf00      	nop
 80040f4:	e01a      	b.n	800412c <EM_ProcessEvent+0x420>
			break;
 80040f6:	bf00      	nop
 80040f8:	e018      	b.n	800412c <EM_ProcessEvent+0x420>
			break;
 80040fa:	bf00      	nop
 80040fc:	e016      	b.n	800412c <EM_ProcessEvent+0x420>
			break;
 80040fe:	bf00      	nop
 8004100:	e014      	b.n	800412c <EM_ProcessEvent+0x420>
			break;
 8004102:	bf00      	nop
 8004104:	e012      	b.n	800412c <EM_ProcessEvent+0x420>
			break;
 8004106:	bf00      	nop
 8004108:	e010      	b.n	800412c <EM_ProcessEvent+0x420>
			break;
 800410a:	bf00      	nop
 800410c:	e00e      	b.n	800412c <EM_ProcessEvent+0x420>
			break;
 800410e:	bf00      	nop
 8004110:	e00c      	b.n	800412c <EM_ProcessEvent+0x420>
			break;
 8004112:	bf00      	nop
 8004114:	e00a      	b.n	800412c <EM_ProcessEvent+0x420>
			break;
 8004116:	bf00      	nop
 8004118:	e008      	b.n	800412c <EM_ProcessEvent+0x420>
			break;
 800411a:	bf00      	nop
 800411c:	e006      	b.n	800412c <EM_ProcessEvent+0x420>
			break;
 800411e:	bf00      	nop
 8004120:	e004      	b.n	800412c <EM_ProcessEvent+0x420>
			break;
 8004122:	bf00      	nop
 8004124:	e002      	b.n	800412c <EM_ProcessEvent+0x420>
			break;
 8004126:	bf00      	nop
 8004128:	e000      	b.n	800412c <EM_ProcessEvent+0x420>
			break;
 800412a:	bf00      	nop
	}

}
 800412c:	bf00      	nop
 800412e:	3708      	adds	r7, #8
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	20001e53 	.word	0x20001e53
 8004138:	20001e52 	.word	0x20001e52

0800413c <EM_SetNewEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	4603      	mov	r3, r0
 8004144:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 8004146:	4a04      	ldr	r2, [pc, #16]	; (8004158 <EM_SetNewEvent+0x1c>)
 8004148:	79fb      	ldrb	r3, [r7, #7]
 800414a:	7013      	strb	r3, [r2, #0]
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr
 8004158:	20001e53 	.word	0x20001e53

0800415c <FreqSweepMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuEntryHandler()
{
 800415c:	b580      	push	{r7, lr}
 800415e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqSweepMenuEntryHandler captured\n");
	#endif

	DM_RefreshScreen();
 8004160:	f7fd f99c 	bl	800149c <DM_RefreshScreen>

	if( sweep_upper_bounds_longest_output_arr != OUTPUT_TIMER->ARR)
 8004164:	4b22      	ldr	r3, [pc, #136]	; (80041f0 <FreqSweepMenuEntryHandler+0x94>)
 8004166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004168:	ee07 3a90 	vmov	s15, r3
 800416c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004170:	4b20      	ldr	r3, [pc, #128]	; (80041f4 <FreqSweepMenuEntryHandler+0x98>)
 8004172:	edd3 7a00 	vldr	s15, [r3]
 8004176:	eeb4 7a67 	vcmp.f32	s14, s15
 800417a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800417e:	d008      	beq.n	8004192 <FreqSweepMenuEntryHandler+0x36>
		sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 8004180:	4b1b      	ldr	r3, [pc, #108]	; (80041f0 <FreqSweepMenuEntryHandler+0x94>)
 8004182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004184:	ee07 3a90 	vmov	s15, r3
 8004188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800418c:	4b19      	ldr	r3, [pc, #100]	; (80041f4 <FreqSweepMenuEntryHandler+0x98>)
 800418e:	edc3 7a00 	vstr	s15, [r3]

	if( sweep_upper_bounds_longest_output_arr == MIN_OUTPUT_ARR)
 8004192:	4b18      	ldr	r3, [pc, #96]	; (80041f4 <FreqSweepMenuEntryHandler+0x98>)
 8004194:	edd3 7a00 	vldr	s15, [r3]
 8004198:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 800419c:	eef4 7a47 	vcmp.f32	s15, s14
 80041a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041a4:	d101      	bne.n	80041aa <FreqSweepMenuEntryHandler+0x4e>
	{
		FS_SetSweepModeDown();
 80041a6:	f000 ff95 	bl	80050d4 <FS_SetSweepModeDown>
	}

	FS_SetEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 80041aa:	2000      	movs	r0, #0
 80041ac:	f000 ffec 	bl	8005188 <FS_SetEncoderControlMode>
	FS_SetSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 80041b0:	2000      	movs	r0, #0
 80041b2:	f001 f849 	bl	8005248 <FS_SetSweepTimerAutoReloadForEncoderControl>
	calculated_sweep_in_hertz = FS_GetCalculatedSweepFrequencyInHertz();
 80041b6:	f001 f883 	bl	80052c0 <FS_GetCalculatedSweepFrequencyInHertz>
 80041ba:	eef0 7a40 	vmov.f32	s15, s0
 80041be:	4b0e      	ldr	r3, [pc, #56]	; (80041f8 <FreqSweepMenuEntryHandler+0x9c>)
 80041c0:	edc3 7a00 	vstr	s15, [r3]

	// reset sweep start value
	SWEEP_TIMER->CNT = 0;
 80041c4:	4b0d      	ldr	r3, [pc, #52]	; (80041fc <FreqSweepMenuEntryHandler+0xa0>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	625a      	str	r2, [r3, #36]	; 0x24

	// set default mode to sweep speed control
	FreqSweepMenuInputHandler(evSweepSpeedBtn);
 80041ca:	2009      	movs	r0, #9
 80041cc:	f000 f81c 	bl	8004208 <FreqSweepMenuInputHandler>

	// sweep start speed
	SWEEP_TIMER->ARR = MIN_SWEEP_ARR;
 80041d0:	4b0a      	ldr	r3, [pc, #40]	; (80041fc <FreqSweepMenuEntryHandler+0xa0>)
 80041d2:	f244 12a0 	movw	r2, #16800	; 0x41a0
 80041d6:	62da      	str	r2, [r3, #44]	; 0x2c
	SWEEP_TIMER->PSC = 0;
 80041d8:	4b08      	ldr	r3, [pc, #32]	; (80041fc <FreqSweepMenuEntryHandler+0xa0>)
 80041da:	2200      	movs	r2, #0
 80041dc:	629a      	str	r2, [r3, #40]	; 0x28



	// get ready to load menu
	eNextFreqMenuStatus = ENABLE_FREQ_SWEEP_MENU;
 80041de:	4b08      	ldr	r3, [pc, #32]	; (8004200 <FreqSweepMenuEntryHandler+0xa4>)
 80041e0:	2204      	movs	r2, #4
 80041e2:	701a      	strb	r2, [r3, #0]


	// stay in this state
	eNewEvent = evIdle;
 80041e4:	4b07      	ldr	r3, [pc, #28]	; (8004204 <FreqSweepMenuEntryHandler+0xa8>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 80041ea:	230d      	movs	r3, #13
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	40013400 	.word	0x40013400
 80041f4:	20000124 	.word	0x20000124
 80041f8:	20001ea8 	.word	0x20001ea8
 80041fc:	40000c00 	.word	0x40000c00
 8004200:	20001e56 	.word	0x20001e56
 8004204:	20001e53 	.word	0x20001e53

08004208 <FreqSweepMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuInputHandler(eSystemEvent pEvent)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	4603      	mov	r3, r0
 8004210:	71fb      	strb	r3, [r7, #7]
		printf("FreqAdjustMenuInputHandler Event captured\n");
	#endif



	switch(pEvent)
 8004212:	79fb      	ldrb	r3, [r7, #7]
 8004214:	3b07      	subs	r3, #7
 8004216:	2b04      	cmp	r3, #4
 8004218:	f200 80b2 	bhi.w	8004380 <FreqSweepMenuInputHandler+0x178>
 800421c:	a201      	add	r2, pc, #4	; (adr r2, 8004224 <FreqSweepMenuInputHandler+0x1c>)
 800421e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004222:	bf00      	nop
 8004224:	08004239 	.word	0x08004239
 8004228:	08004253 	.word	0x08004253
 800422c:	08004371 	.word	0x08004371
 8004230:	08004379 	.word	0x08004379
 8004234:	0800428d 	.word	0x0800428d
			#ifdef EVENT_MENU_DEBUG
				printf("evSweepEnable captured\n");
			#endif

			// toggle enable/disable
			SWEEP_TIMER->DIER 	^= TIM_DIER_UIE;
 8004238:	4b56      	ldr	r3, [pc, #344]	; (8004394 <FreqSweepMenuInputHandler+0x18c>)
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	4a55      	ldr	r2, [pc, #340]	; (8004394 <FreqSweepMenuInputHandler+0x18c>)
 800423e:	f083 0301 	eor.w	r3, r3, #1
 8004242:	60d3      	str	r3, [r2, #12]
			SWEEP_TIMER->CR1	^= TIM_CR1_CEN;
 8004244:	4b53      	ldr	r3, [pc, #332]	; (8004394 <FreqSweepMenuInputHandler+0x18c>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a52      	ldr	r2, [pc, #328]	; (8004394 <FreqSweepMenuInputHandler+0x18c>)
 800424a:	f083 0301 	eor.w	r3, r3, #1
 800424e:	6013      	str	r3, [r2, #0]
			break;
 8004250:	e097      	b.n	8004382 <FreqSweepMenuInputHandler+0x17a>
			#ifdef EVENT_MENU_DEBUG
				printf("evSweepMode captured\n");
			#endif

			// flip between 0:Upcounter and 1:Downcounter
			active_sweep_mode ^= 1U;
 8004252:	4b51      	ldr	r3, [pc, #324]	; (8004398 <FreqSweepMenuInputHandler+0x190>)
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	f083 0301 	eor.w	r3, r3, #1
 800425a:	b2da      	uxtb	r2, r3
 800425c:	4b4e      	ldr	r3, [pc, #312]	; (8004398 <FreqSweepMenuInputHandler+0x190>)
 800425e:	701a      	strb	r2, [r3, #0]

			switch(active_sweep_mode)
 8004260:	4b4d      	ldr	r3, [pc, #308]	; (8004398 <FreqSweepMenuInputHandler+0x190>)
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d004      	beq.n	8004272 <FreqSweepMenuInputHandler+0x6a>
 8004268:	2b02      	cmp	r3, #2
 800426a:	d008      	beq.n	800427e <FreqSweepMenuInputHandler+0x76>
 800426c:	2b00      	cmp	r3, #0
 800426e:	d003      	beq.n	8004278 <FreqSweepMenuInputHandler+0x70>
 8004270:	e006      	b.n	8004280 <FreqSweepMenuInputHandler+0x78>
			{
				case SWEEP_MODE_DOWN:
					FS_SetSweepModeDown();
 8004272:	f000 ff2f 	bl	80050d4 <FS_SetSweepModeDown>
					break;
 8004276:	e003      	b.n	8004280 <FreqSweepMenuInputHandler+0x78>

				case SWEEP_MODE_UP:
					FS_SetSweepModeUp();
 8004278:	f000 ff5c 	bl	8005134 <FS_SetSweepModeUp>
					break;
 800427c:	e000      	b.n	8004280 <FreqSweepMenuInputHandler+0x78>

				case SWEEP_MODE_BIDIR:	// not used
					//SWEEP_TIMER->CR1 |= (TIM_CR1_CMS_0);
					break;
 800427e:	bf00      	nop
			}
			// switch(active_sweep_mode)
			// TODO
			FS_SetEncoderControlMode(theCurrentEncoderSweepFunction);
 8004280:	4b46      	ldr	r3, [pc, #280]	; (800439c <FreqSweepMenuInputHandler+0x194>)
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	4618      	mov	r0, r3
 8004286:	f000 ff7f 	bl	8005188 <FS_SetEncoderControlMode>

			break;
 800428a:	e07a      	b.n	8004382 <FreqSweepMenuInputHandler+0x17a>

			#ifdef EVENT_MENU_DEBUG
				printf("evEncoderSweep captured\n");
			#endif

			switch(theCurrentEncoderSweepFunction)
 800428c:	4b43      	ldr	r3, [pc, #268]	; (800439c <FreqSweepMenuInputHandler+0x194>)
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d002      	beq.n	800429a <FreqSweepMenuInputHandler+0x92>
 8004294:	2b01      	cmp	r3, #1
 8004296:	d00b      	beq.n	80042b0 <FreqSweepMenuInputHandler+0xa8>
					break;

			}
			// switch(theCurrentEncoderSweepFunction)

			break;
 8004298:	e073      	b.n	8004382 <FreqSweepMenuInputHandler+0x17a>
					FS_SetSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 800429a:	2000      	movs	r0, #0
 800429c:	f000 ffd4 	bl	8005248 <FS_SetSweepTimerAutoReloadForEncoderControl>
					calculated_sweep_in_hertz = FS_GetCalculatedSweepFrequencyInHertz();
 80042a0:	f001 f80e 	bl	80052c0 <FS_GetCalculatedSweepFrequencyInHertz>
 80042a4:	eef0 7a40 	vmov.f32	s15, s0
 80042a8:	4b3d      	ldr	r3, [pc, #244]	; (80043a0 <FreqSweepMenuInputHandler+0x198>)
 80042aa:	edc3 7a00 	vstr	s15, [r3]
					break;
 80042ae:	e05e      	b.n	800436e <FreqSweepMenuInputHandler+0x166>
					switch(active_sweep_mode)
 80042b0:	4b39      	ldr	r3, [pc, #228]	; (8004398 <FreqSweepMenuInputHandler+0x190>)
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d002      	beq.n	80042be <FreqSweepMenuInputHandler+0xb6>
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d02a      	beq.n	8004312 <FreqSweepMenuInputHandler+0x10a>
							break;
 80042bc:	e056      	b.n	800436c <FreqSweepMenuInputHandler+0x164>
							if(ENCODER_TIMER->CNT < MIN_OUTPUT_ARR)
 80042be:	4b39      	ldr	r3, [pc, #228]	; (80043a4 <FreqSweepMenuInputHandler+0x19c>)
 80042c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c2:	2b0c      	cmp	r3, #12
 80042c4:	d803      	bhi.n	80042ce <FreqSweepMenuInputHandler+0xc6>
								ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 80042c6:	4b37      	ldr	r3, [pc, #220]	; (80043a4 <FreqSweepMenuInputHandler+0x19c>)
 80042c8:	220d      	movs	r2, #13
 80042ca:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 80042cc:	e04e      	b.n	800436c <FreqSweepMenuInputHandler+0x164>
							else if (ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 80042ce:	4b35      	ldr	r3, [pc, #212]	; (80043a4 <FreqSweepMenuInputHandler+0x19c>)
 80042d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d2:	ee07 3a90 	vmov	s15, r3
 80042d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80042da:	4b33      	ldr	r3, [pc, #204]	; (80043a8 <FreqSweepMenuInputHandler+0x1a0>)
 80042dc:	edd3 7a00 	vldr	s15, [r3]
 80042e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042e8:	dd09      	ble.n	80042fe <FreqSweepMenuInputHandler+0xf6>
								ENCODER_TIMER->CNT = sweep_upper_bounds_longest_output_arr;
 80042ea:	4b2f      	ldr	r3, [pc, #188]	; (80043a8 <FreqSweepMenuInputHandler+0x1a0>)
 80042ec:	edd3 7a00 	vldr	s15, [r3]
 80042f0:	4b2c      	ldr	r3, [pc, #176]	; (80043a4 <FreqSweepMenuInputHandler+0x19c>)
 80042f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042f6:	ee17 2a90 	vmov	r2, s15
 80042fa:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 80042fc:	e036      	b.n	800436c <FreqSweepMenuInputHandler+0x164>
								sweep_lower_bounds_shortest_output_arr = ENCODER_TIMER->CNT;
 80042fe:	4b29      	ldr	r3, [pc, #164]	; (80043a4 <FreqSweepMenuInputHandler+0x19c>)
 8004300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004302:	ee07 3a90 	vmov	s15, r3
 8004306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800430a:	4b28      	ldr	r3, [pc, #160]	; (80043ac <FreqSweepMenuInputHandler+0x1a4>)
 800430c:	edc3 7a00 	vstr	s15, [r3]
							break;
 8004310:	e02c      	b.n	800436c <FreqSweepMenuInputHandler+0x164>
							if(ENCODER_TIMER->CNT >= MAX_OUTPUT_ARR)
 8004312:	4b24      	ldr	r3, [pc, #144]	; (80043a4 <FreqSweepMenuInputHandler+0x19c>)
 8004314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004316:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800431a:	4293      	cmp	r3, r2
 800431c:	d904      	bls.n	8004328 <FreqSweepMenuInputHandler+0x120>
								ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 800431e:	4b21      	ldr	r3, [pc, #132]	; (80043a4 <FreqSweepMenuInputHandler+0x19c>)
 8004320:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004324:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004326:	e020      	b.n	800436a <FreqSweepMenuInputHandler+0x162>
							else if (ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 8004328:	4b1e      	ldr	r3, [pc, #120]	; (80043a4 <FreqSweepMenuInputHandler+0x19c>)
 800432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432c:	ee07 3a90 	vmov	s15, r3
 8004330:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004334:	4b1d      	ldr	r3, [pc, #116]	; (80043ac <FreqSweepMenuInputHandler+0x1a4>)
 8004336:	edd3 7a00 	vldr	s15, [r3]
 800433a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800433e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004342:	d509      	bpl.n	8004358 <FreqSweepMenuInputHandler+0x150>
								ENCODER_TIMER->CNT = sweep_lower_bounds_shortest_output_arr;
 8004344:	4b19      	ldr	r3, [pc, #100]	; (80043ac <FreqSweepMenuInputHandler+0x1a4>)
 8004346:	edd3 7a00 	vldr	s15, [r3]
 800434a:	4b16      	ldr	r3, [pc, #88]	; (80043a4 <FreqSweepMenuInputHandler+0x19c>)
 800434c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004350:	ee17 2a90 	vmov	r2, s15
 8004354:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004356:	e008      	b.n	800436a <FreqSweepMenuInputHandler+0x162>
								sweep_upper_bounds_longest_output_arr = ENCODER_TIMER->CNT;
 8004358:	4b12      	ldr	r3, [pc, #72]	; (80043a4 <FreqSweepMenuInputHandler+0x19c>)
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	ee07 3a90 	vmov	s15, r3
 8004360:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004364:	4b10      	ldr	r3, [pc, #64]	; (80043a8 <FreqSweepMenuInputHandler+0x1a0>)
 8004366:	edc3 7a00 	vstr	s15, [r3]
							break;
 800436a:	bf00      	nop
					break;
 800436c:	bf00      	nop
			break;
 800436e:	e008      	b.n	8004382 <FreqSweepMenuInputHandler+0x17a>

		// set sweep speed button
		case evSweepSpeedBtn:
			FS_SetEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 8004370:	2000      	movs	r0, #0
 8004372:	f000 ff09 	bl	8005188 <FS_SetEncoderControlMode>

			break;
 8004376:	e004      	b.n	8004382 <FreqSweepMenuInputHandler+0x17a>

		// set sweep limit button
		case evSweepLimitBtn:
			FS_SetEncoderControlMode(ENCODER_SWEEP_LIMIT_FUNCTION);
 8004378:	2001      	movs	r0, #1
 800437a:	f000 ff05 	bl	8005188 <FS_SetEncoderControlMode>
					break;
			}
			*/
			// switch(active_sweep_mode)

			break;
 800437e:	e000      	b.n	8004382 <FreqSweepMenuInputHandler+0x17a>

		default:
			break;
 8004380:	bf00      	nop
	}
	// switch(pEvent)


	// stay in this state
	eNewEvent = evIdle;
 8004382:	4b0b      	ldr	r3, [pc, #44]	; (80043b0 <FreqSweepMenuInputHandler+0x1a8>)
 8004384:	2200      	movs	r2, #0
 8004386:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 8004388:	230d      	movs	r3, #13
}
 800438a:	4618      	mov	r0, r3
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	40000c00 	.word	0x40000c00
 8004398:	20001e54 	.word	0x20001e54
 800439c:	20001e55 	.word	0x20001e55
 80043a0:	20001ea8 	.word	0x20001ea8
 80043a4:	40012c00 	.word	0x40012c00
 80043a8:	20000124 	.word	0x20000124
 80043ac:	20000120 	.word	0x20000120
 80043b0:	20001e53 	.word	0x20001e53

080043b4 <FreqSweepMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuExitHandler()
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqSweepMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80043b8:	f7fd f870 	bl	800149c <DM_RefreshScreen>

	// disable sweep timer and interrupts
	SWEEP_TIMER->DIER 	&= ~(TIM_DIER_UIE);
 80043bc:	4b0a      	ldr	r3, [pc, #40]	; (80043e8 <FreqSweepMenuExitHandler+0x34>)
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	4a09      	ldr	r2, [pc, #36]	; (80043e8 <FreqSweepMenuExitHandler+0x34>)
 80043c2:	f023 0301 	bic.w	r3, r3, #1
 80043c6:	60d3      	str	r3, [r2, #12]
	SWEEP_TIMER->CR1 	&= ~(TIM_CR1_CEN);
 80043c8:	4b07      	ldr	r3, [pc, #28]	; (80043e8 <FreqSweepMenuExitHandler+0x34>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a06      	ldr	r2, [pc, #24]	; (80043e8 <FreqSweepMenuExitHandler+0x34>)
 80043ce:	f023 0301 	bic.w	r3, r3, #1
 80043d2:	6013      	str	r3, [r2, #0]



	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 80043d4:	4b05      	ldr	r3, [pc, #20]	; (80043ec <FreqSweepMenuExitHandler+0x38>)
 80043d6:	2201      	movs	r2, #1
 80043d8:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 80043da:	4b05      	ldr	r3, [pc, #20]	; (80043f0 <FreqSweepMenuExitHandler+0x3c>)
 80043dc:	2200      	movs	r2, #0
 80043de:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 80043e0:	230a      	movs	r3, #10
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	40000c00 	.word	0x40000c00
 80043ec:	20001e56 	.word	0x20001e56
 80043f0:	20001e53 	.word	0x20001e53

080043f4 <FreqMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuEntryHandler()
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80043f8:	f7fd f850 	bl	800149c <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 80043fc:	4b04      	ldr	r3, [pc, #16]	; (8004410 <FreqMainMenuEntryHandler+0x1c>)
 80043fe:	2201      	movs	r2, #1
 8004400:	701a      	strb	r2, [r3, #0]

	// stay in this state
	eNewEvent = evIdle;
 8004402:	4b04      	ldr	r3, [pc, #16]	; (8004414 <FreqMainMenuEntryHandler+0x20>)
 8004404:	2200      	movs	r2, #0
 8004406:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004408:	230a      	movs	r3, #10
}
 800440a:	4618      	mov	r0, r3
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	20001e56 	.word	0x20001e56
 8004414:	20001e53 	.word	0x20001e53

08004418 <FreqMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuExitHandler()
{
 8004418:	b580      	push	{r7, lr}
 800441a:	af00      	add	r7, sp, #0
		printf("FreqMainMenuExitHandler Event captured\n");
	#endif


	// disable the menu
	eNextFreqMenuStatus = DISABLE_FREQ_MENU;
 800441c:	4b07      	ldr	r3, [pc, #28]	; (800443c <FreqMainMenuExitHandler+0x24>)
 800441e:	2200      	movs	r2, #0
 8004420:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8004422:	4b07      	ldr	r3, [pc, #28]	; (8004440 <FreqMainMenuExitHandler+0x28>)
 8004424:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004428:	62da      	str	r2, [r3, #44]	; 0x2c

	DM_RefreshScreen();
 800442a:	f7fd f837 	bl	800149c <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 800442e:	4b05      	ldr	r3, [pc, #20]	; (8004444 <FreqMainMenuExitHandler+0x2c>)
 8004430:	2200      	movs	r2, #0
 8004432:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004434:	2301      	movs	r3, #1
}
 8004436:	4618      	mov	r0, r3
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	20001e56 	.word	0x20001e56
 8004440:	40012c00 	.word	0x40012c00
 8004444:	20001e53 	.word	0x20001e53

08004448 <FreqPresetMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuEntryHandler()
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 800444e:	f7fd f825 	bl	800149c <DM_RefreshScreen>
	FreqO_ResetLastEncoderValue();
 8004452:	f000 fe33 	bl	80050bc <FreqO_ResetLastEncoderValue>

	eNextFreqMenuStatus = ENABLE_FREQ_PRESET_MENU;
 8004456:	4b0e      	ldr	r3, [pc, #56]	; (8004490 <FreqPresetMenuEntryHandler+0x48>)
 8004458:	2202      	movs	r2, #2
 800445a:	701a      	strb	r2, [r3, #0]

	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 800445c:	f000 fde0 	bl	8005020 <FreqO_GetFPresetObject>
 8004460:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d008      	beq.n	800447a <FreqPresetMenuEntryHandler+0x32>
	{
		// set rotary encoder limit to full scale and set centre starting position
		ENCODER_TIMER->CNT = 32768;
 8004468:	4b0a      	ldr	r3, [pc, #40]	; (8004494 <FreqPresetMenuEntryHandler+0x4c>)
 800446a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800446e:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = 65535;
 8004470:	4b08      	ldr	r3, [pc, #32]	; (8004494 <FreqPresetMenuEntryHandler+0x4c>)
 8004472:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004476:	62da      	str	r2, [r3, #44]	; 0x2c
 8004478:	e002      	b.n	8004480 <FreqPresetMenuEntryHandler+0x38>
	}
	else
	{
		DM_SetErrorDebugMsg("_FreqPresetMenuEntryHandler: pFreqPresetTmp null pointer");
 800447a:	4807      	ldr	r0, [pc, #28]	; (8004498 <FreqPresetMenuEntryHandler+0x50>)
 800447c:	f7fd f854 	bl	8001528 <DM_SetErrorDebugMsg>
	}


	// stay in this state
	eNewEvent = evIdle;
 8004480:	4b06      	ldr	r3, [pc, #24]	; (800449c <FreqPresetMenuEntryHandler+0x54>)
 8004482:	2200      	movs	r2, #0
 8004484:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8004486:	230b      	movs	r3, #11
}
 8004488:	4618      	mov	r0, r3
 800448a:	3708      	adds	r7, #8
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	20001e56 	.word	0x20001e56
 8004494:	40012c00 	.word	0x40012c00
 8004498:	080138ec 	.word	0x080138ec
 800449c:	20001e53 	.word	0x20001e53

080044a0 <FreqPresetMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuInputHandler()
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuInputHandler Event captured\n");
	#endif

	FreqO_MapEncoderPositionToBothOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 80044a4:	2001      	movs	r0, #1
 80044a6:	f001 fdfd 	bl	80060a4 <SM_GetEncoderValue>
 80044aa:	4603      	mov	r3, r0
 80044ac:	4618      	mov	r0, r3
 80044ae:	f000 fd09 	bl	8004ec4 <FreqO_MapEncoderPositionToBothOutput>

	// stay in this state
	eNewEvent = evIdle;
 80044b2:	4b03      	ldr	r3, [pc, #12]	; (80044c0 <FreqPresetMenuInputHandler+0x20>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 80044b8:	230b      	movs	r3, #11
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	20001e53 	.word	0x20001e53

080044c4 <FreqPresetMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuExitHandler()
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80044c8:	f7fc ffe8 	bl	800149c <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 80044cc:	4b04      	ldr	r3, [pc, #16]	; (80044e0 <FreqPresetMenuExitHandler+0x1c>)
 80044ce:	2201      	movs	r2, #1
 80044d0:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 80044d2:	4b04      	ldr	r3, [pc, #16]	; (80044e4 <FreqPresetMenuExitHandler+0x20>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 80044d8:	230a      	movs	r3, #10
}
 80044da:	4618      	mov	r0, r3
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	20001e56 	.word	0x20001e56
 80044e4:	20001e53 	.word	0x20001e53

080044e8 <FreqAdjustMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuEntryHandler()
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80044ec:	f7fc ffd6 	bl	800149c <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_ADJUST_MENU;
 80044f0:	4b08      	ldr	r3, [pc, #32]	; (8004514 <FreqAdjustMenuEntryHandler+0x2c>)
 80044f2:	2203      	movs	r2, #3
 80044f4:	701a      	strb	r2, [r3, #0]

	// set rotary encoder limit to full scale and set OUTPUT_TIMER "TOP" starting position
	ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 80044f6:	4b08      	ldr	r3, [pc, #32]	; (8004518 <FreqAdjustMenuEntryHandler+0x30>)
 80044f8:	4a08      	ldr	r2, [pc, #32]	; (800451c <FreqAdjustMenuEntryHandler+0x34>)
 80044fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fc:	6253      	str	r3, [r2, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 80044fe:	4b07      	ldr	r3, [pc, #28]	; (800451c <FreqAdjustMenuEntryHandler+0x34>)
 8004500:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004504:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 8004506:	4b06      	ldr	r3, [pc, #24]	; (8004520 <FreqAdjustMenuEntryHandler+0x38>)
 8004508:	2200      	movs	r2, #0
 800450a:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 800450c:	230c      	movs	r3, #12
}
 800450e:	4618      	mov	r0, r3
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	20001e56 	.word	0x20001e56
 8004518:	40013400 	.word	0x40013400
 800451c:	40012c00 	.word	0x40012c00
 8004520:	20001e53 	.word	0x20001e53

08004524 <FreqAdjustMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuInputHandler()
{
 8004524:	b580      	push	{r7, lr}
 8004526:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuInputHandler Event captured\n");
	#endif

	FreqO_AdjustFreq();
 8004528:	f000 fd4c 	bl	8004fc4 <FreqO_AdjustFreq>

	// stay in this state
	eNewEvent = evIdle;
 800452c:	4b02      	ldr	r3, [pc, #8]	; (8004538 <FreqAdjustMenuInputHandler+0x14>)
 800452e:	2200      	movs	r2, #0
 8004530:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8004532:	230c      	movs	r3, #12
}
 8004534:	4618      	mov	r0, r3
 8004536:	bd80      	pop	{r7, pc}
 8004538:	20001e53 	.word	0x20001e53

0800453c <FreqAdjustMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuExitHandler()
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004540:	f7fc ffac 	bl	800149c <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8004544:	4b04      	ldr	r3, [pc, #16]	; (8004558 <FreqAdjustMenuExitHandler+0x1c>)
 8004546:	2201      	movs	r2, #1
 8004548:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 800454a:	4b04      	ldr	r3, [pc, #16]	; (800455c <FreqAdjustMenuExitHandler+0x20>)
 800454c:	2200      	movs	r2, #0
 800454e:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004550:	230a      	movs	r3, #10
}
 8004552:	4618      	mov	r0, r3
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	20001e56 	.word	0x20001e56
 800455c:	20001e53 	.word	0x20001e53

08004560 <FreqMenu_getStatus>:
 *	@param None
 *	@retval None
 *
 */
eFreqMenu_Status FreqMenu_getStatus()
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
	return eNextFreqMenuStatus;
 8004564:	4b03      	ldr	r3, [pc, #12]	; (8004574 <FreqMenu_getStatus+0x14>)
 8004566:	781b      	ldrb	r3, [r3, #0]
}
 8004568:	4618      	mov	r0, r3
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	20001e56 	.word	0x20001e56

08004578 <FuncMenu_getStatus>:
eFuncMenu_Status eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;



eFuncMenu_Status FuncMenu_getStatus()
{
 8004578:	b480      	push	{r7}
 800457a:	af00      	add	r7, sp, #0
	return eNextFuncMenuStatus;
 800457c:	4b03      	ldr	r3, [pc, #12]	; (800458c <FuncMenu_getStatus+0x14>)
 800457e:	781b      	ldrb	r3, [r3, #0]
}
 8004580:	4618      	mov	r0, r3
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	20001e57 	.word	0x20001e57

08004590 <FuncMainMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuEntryHandler(void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004594:	f7fc ff82 	bl	800149c <DM_RefreshScreen>

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8004598:	4b04      	ldr	r3, [pc, #16]	; (80045ac <FuncMainMenuEntryHandler+0x1c>)
 800459a:	2201      	movs	r2, #1
 800459c:	701a      	strb	r2, [r3, #0]

	eNewEvent = evIdle;
 800459e:	4b04      	ldr	r3, [pc, #16]	; (80045b0 <FuncMainMenuEntryHandler+0x20>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 80045a4:	2303      	movs	r3, #3
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	20001e57 	.word	0x20001e57
 80045b0:	20001e53 	.word	0x20001e53

080045b4 <FuncMainMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuExitHandler()
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncMainMenuExitHandler Event captured\n");
	#endif

	eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;
 80045b8:	4b06      	ldr	r3, [pc, #24]	; (80045d4 <FuncMainMenuExitHandler+0x20>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	701a      	strb	r2, [r3, #0]

	// reset the encoder range
	ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 80045be:	2002      	movs	r0, #2
 80045c0:	f000 f9ce 	bl	8004960 <ToplevelMenu_setStatus>

	DM_RefreshScreen();
 80045c4:	f7fc ff6a 	bl	800149c <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 80045c8:	4b03      	ldr	r3, [pc, #12]	; (80045d8 <FuncMainMenuExitHandler+0x24>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 80045ce:	2301      	movs	r3, #1
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	20001e57 	.word	0x20001e57
 80045d8:	20001e53 	.word	0x20001e53

080045dc <FuncSignalMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuEntryHandler(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncSignalMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80045e0:	f7fc ff5c 	bl	800149c <DM_RefreshScreen>
	FuncO_ResetLastEncoderValue();
 80045e4:	f000 fe9a 	bl	800531c <FuncO_ResetLastEncoderValue>

	eNextFuncMenuStatus = 	ENABLE_FUNC_SIGNAL_MENU;
 80045e8:	4b08      	ldr	r3, [pc, #32]	; (800460c <FuncSignalMenuEntryHandler+0x30>)
 80045ea:	2202      	movs	r2, #2
 80045ec:	701a      	strb	r2, [r3, #0]
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
	}
*/

	ENCODER_TIMER->CNT = 32768;
 80045ee:	4b08      	ldr	r3, [pc, #32]	; (8004610 <FuncSignalMenuEntryHandler+0x34>)
 80045f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80045f4:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 80045f6:	4b06      	ldr	r3, [pc, #24]	; (8004610 <FuncSignalMenuEntryHandler+0x34>)
 80045f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045fc:	62da      	str	r2, [r3, #44]	; 0x2c

	eNewEvent = evIdle;
 80045fe:	4b05      	ldr	r3, [pc, #20]	; (8004614 <FuncSignalMenuEntryHandler+0x38>)
 8004600:	2200      	movs	r2, #0
 8004602:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 8004604:	2304      	movs	r3, #4
}
 8004606:	4618      	mov	r0, r3
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	20001e57 	.word	0x20001e57
 8004610:	40012c00 	.word	0x40012c00
 8004614:	20001e53 	.word	0x20001e53

08004618 <FuncSignalMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuInputHandler(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncSignalMenuInputHandler Event captured\n");
	#endif


	FuncO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 800461c:	2001      	movs	r0, #1
 800461e:	f001 fd41 	bl	80060a4 <SM_GetEncoderValue>
 8004622:	4603      	mov	r3, r0
 8004624:	4618      	mov	r0, r3
 8004626:	f000 fe85 	bl	8005334 <FuncO_MapEncoderPositionToSignalOutput>


	eNewEvent = evIdle;
 800462a:	4b03      	ldr	r3, [pc, #12]	; (8004638 <FuncSignalMenuInputHandler+0x20>)
 800462c:	2200      	movs	r2, #0
 800462e:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 8004630:	2304      	movs	r3, #4
}
 8004632:	4618      	mov	r0, r3
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	20001e53 	.word	0x20001e53

0800463c <FuncSignalMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuExitHandler()
{
 800463c:	b580      	push	{r7, lr}
 800463e:	af00      	add	r7, sp, #0
		printf("FuncSignalMenuExitHandler Event captured\n");
	#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8004640:	4b06      	ldr	r3, [pc, #24]	; (800465c <FuncSignalMenuExitHandler+0x20>)
 8004642:	2201      	movs	r2, #1
 8004644:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8004646:	f7fc ff29 	bl	800149c <DM_RefreshScreen>
	SM_ResetFuncPwmDutyMode();
 800464a:	f001 fdcd 	bl	80061e8 <SM_ResetFuncPwmDutyMode>
	eNewEvent = evIdle;
 800464e:	4b04      	ldr	r3, [pc, #16]	; (8004660 <FuncSignalMenuExitHandler+0x24>)
 8004650:	2200      	movs	r2, #0
 8004652:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8004654:	2303      	movs	r3, #3
}
 8004656:	4618      	mov	r0, r3
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	20001e57 	.word	0x20001e57
 8004660:	20001e53 	.word	0x20001e53

08004664 <FuncAuxMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuEntryHandler(void)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncAuxMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004668:	f7fc ff18 	bl	800149c <DM_RefreshScreen>
	FuncO_ResetLastEncoderValue();
 800466c:	f000 fe56 	bl	800531c <FuncO_ResetLastEncoderValue>

	eNextFuncMenuStatus = 	ENABLE_FUNC_Aux_MENU;
 8004670:	4b08      	ldr	r3, [pc, #32]	; (8004694 <FuncAuxMenuEntryHandler+0x30>)
 8004672:	2203      	movs	r2, #3
 8004674:	701a      	strb	r2, [r3, #0]
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
	}
	*/
	ENCODER_TIMER->CNT = 32768;
 8004676:	4b08      	ldr	r3, [pc, #32]	; (8004698 <FuncAuxMenuEntryHandler+0x34>)
 8004678:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800467c:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 800467e:	4b06      	ldr	r3, [pc, #24]	; (8004698 <FuncAuxMenuEntryHandler+0x34>)
 8004680:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004684:	62da      	str	r2, [r3, #44]	; 0x2c

	eNewEvent = evIdle;
 8004686:	4b05      	ldr	r3, [pc, #20]	; (800469c <FuncAuxMenuEntryHandler+0x38>)
 8004688:	2200      	movs	r2, #0
 800468a:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 800468c:	2305      	movs	r3, #5
}
 800468e:	4618      	mov	r0, r3
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	20001e57 	.word	0x20001e57
 8004698:	40012c00 	.word	0x40012c00
 800469c:	20001e53 	.word	0x20001e53

080046a0 <FuncAuxMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuInputHandler(void)
{
 80046a0:	b590      	push	{r4, r7, lr}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncAuxMenuInputHandler Event captured\n");
	#endif

	// PWM ADJUST
	if(SM_IsFuncPwmDutyMode())
 80046a6:	f001 fd83 	bl	80061b0 <SM_IsFuncPwmDutyMode>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d01a      	beq.n	80046e6 <FuncAuxMenuInputHandler+0x46>
	{
		uint16_t enc_value = SM_GetEncoderValue(ENCODER_FORWARD);
 80046b0:	2000      	movs	r0, #0
 80046b2:	f001 fcf7 	bl	80060a4 <SM_GetEncoderValue>
 80046b6:	4603      	mov	r3, r0
 80046b8:	80fb      	strh	r3, [r7, #6]
		PWM_AUX_OUT_TIM->CCR1 = (pow(enc_value, 2));
 80046ba:	88fb      	ldrh	r3, [r7, #6]
 80046bc:	4618      	mov	r0, r3
 80046be:	f7fb ff49 	bl	8000554 <__aeabi_ui2d>
 80046c2:	4603      	mov	r3, r0
 80046c4:	460c      	mov	r4, r1
 80046c6:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8004708 <FuncAuxMenuInputHandler+0x68>
 80046ca:	ec44 3b10 	vmov	d0, r3, r4
 80046ce:	f00d fc27 	bl	8011f20 <pow>
 80046d2:	ec53 2b10 	vmov	r2, r3, d0
 80046d6:	4c0e      	ldr	r4, [pc, #56]	; (8004710 <FuncAuxMenuInputHandler+0x70>)
 80046d8:	4610      	mov	r0, r2
 80046da:	4619      	mov	r1, r3
 80046dc:	f7fc fa8c 	bl	8000bf8 <__aeabi_d2uiz>
 80046e0:	4603      	mov	r3, r0
 80046e2:	6363      	str	r3, [r4, #52]	; 0x34
 80046e4:	e006      	b.n	80046f4 <FuncAuxMenuInputHandler+0x54>
		//BO_SetPwmSignalOffsetForDuty(BO_GetOutputBias() + SM_GetEncoderValue(ENCODER_FORWARD));

	}
	else
	{
		FuncO_MapEncoderPositionToAuxOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 80046e6:	2001      	movs	r0, #1
 80046e8:	f001 fcdc 	bl	80060a4 <SM_GetEncoderValue>
 80046ec:	4603      	mov	r3, r0
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 fe5a 	bl	80053a8 <FuncO_MapEncoderPositionToAuxOutput>
	}

	eNewEvent = evIdle;
 80046f4:	4b07      	ldr	r3, [pc, #28]	; (8004714 <FuncAuxMenuInputHandler+0x74>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 80046fa:	2305      	movs	r3, #5
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	bd90      	pop	{r4, r7, pc}
 8004704:	f3af 8000 	nop.w
 8004708:	00000000 	.word	0x00000000
 800470c:	40000000 	.word	0x40000000
 8004710:	40000400 	.word	0x40000400
 8004714:	20001e53 	.word	0x20001e53

08004718 <FuncAuxToggleDutyMode>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FuncAuxToggleDutyMode()
{
 8004718:	b580      	push	{r7, lr}
 800471a:	af00      	add	r7, sp, #0
	SM_ToggleFuncPwmDutyMode();
 800471c:	f001 fd54 	bl	80061c8 <SM_ToggleFuncPwmDutyMode>
	ENCODER_TIMER->ARR = 16384;
 8004720:	4b04      	ldr	r3, [pc, #16]	; (8004734 <FuncAuxToggleDutyMode+0x1c>)
 8004722:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004726:	62da      	str	r2, [r3, #44]	; 0x2c
	eNewEvent = evIdle;
 8004728:	4b03      	ldr	r3, [pc, #12]	; (8004738 <FuncAuxToggleDutyMode+0x20>)
 800472a:	2200      	movs	r2, #0
 800472c:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 800472e:	2305      	movs	r3, #5
}
 8004730:	4618      	mov	r0, r3
 8004732:	bd80      	pop	{r7, pc}
 8004734:	40012c00 	.word	0x40012c00
 8004738:	20001e53 	.word	0x20001e53

0800473c <FuncAuxMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuExitHandler()
{
 800473c:	b580      	push	{r7, lr}
 800473e:	af00      	add	r7, sp, #0
		printf("FuncAuxMenuExitHandler Event captured\n");
	#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8004740:	4b06      	ldr	r3, [pc, #24]	; (800475c <FuncAuxMenuExitHandler+0x20>)
 8004742:	2201      	movs	r2, #1
 8004744:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;
	SM_ResetFuncPwmDutyMode();
 8004746:	f001 fd4f 	bl	80061e8 <SM_ResetFuncPwmDutyMode>
	DM_RefreshScreen();
 800474a:	f7fc fea7 	bl	800149c <DM_RefreshScreen>

	eNewEvent = evIdle;
 800474e:	4b04      	ldr	r3, [pc, #16]	; (8004760 <FuncAuxMenuExitHandler+0x24>)
 8004750:	2200      	movs	r2, #0
 8004752:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8004754:	2303      	movs	r3, #3
}
 8004756:	4618      	mov	r0, r3
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	20001e57 	.word	0x20001e57
 8004760:	20001e53 	.word	0x20001e53

08004764 <GainMenu_getStatus>:
#include <stdio.h>

eGainMenu_Status eNextGainMenuStatus = 	DISABLE_GAIN_MENU;

eGainMenu_Status GainMenu_getStatus()
{
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0
	return eNextGainMenuStatus;
 8004768:	4b03      	ldr	r3, [pc, #12]	; (8004778 <GainMenu_getStatus+0x14>)
 800476a:	781b      	ldrb	r3, [r3, #0]
}
 800476c:	4618      	mov	r0, r3
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	20001e58 	.word	0x20001e58

0800477c <GainMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuEntryHandler()
{
 800477c:	b580      	push	{r7, lr}
 800477e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004780:	f7fc fe8c 	bl	800149c <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8004784:	4b04      	ldr	r3, [pc, #16]	; (8004798 <GainMainMenuEntryHandler+0x1c>)
 8004786:	2201      	movs	r2, #1
 8004788:	701a      	strb	r2, [r3, #0]

	eNewEvent = evIdle;
 800478a:	4b04      	ldr	r3, [pc, #16]	; (800479c <GainMainMenuEntryHandler+0x20>)
 800478c:	2200      	movs	r2, #0
 800478e:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004790:	2306      	movs	r3, #6
}
 8004792:	4618      	mov	r0, r3
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	20001e58 	.word	0x20001e58
 800479c:	20001e53 	.word	0x20001e53

080047a0 <GainMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuExitHandler()
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainMainMenuExitHandler Event captured\n");
	#endif

	eNextGainMenuStatus = DISABLE_GAIN_MENU;
 80047a4:	4b05      	ldr	r3, [pc, #20]	; (80047bc <GainMainMenuExitHandler+0x1c>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 80047aa:	f7fc fe77 	bl	800149c <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 80047ae:	4b04      	ldr	r3, [pc, #16]	; (80047c0 <GainMainMenuExitHandler+0x20>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 80047b4:	2301      	movs	r3, #1
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	20001e58 	.word	0x20001e58
 80047c0:	20001e53 	.word	0x20001e53

080047c4 <GainSignalMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuEntryHandler()
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80047ca:	f7fc fe67 	bl	800149c <DM_RefreshScreen>
	GO_ResetLastEncoderValue();
 80047ce:	f000 ffe1 	bl	8005794 <GO_ResetLastEncoderValue>
	VPP_ResetLastEncoderValue();
 80047d2:	f001 fd15 	bl	8006200 <VPP_ResetLastEncoderValue>

	eNextGainMenuStatus = ENABLE_GAIN_SIGNAL_MENU;
 80047d6:	4b10      	ldr	r3, [pc, #64]	; (8004818 <GainSignalMenuEntryHandler+0x54>)
 80047d8:	2202      	movs	r2, #2
 80047da:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 80047dc:	2000      	movs	r0, #0
 80047de:	f001 f9e5 	bl	8005bac <SM_GetOutputChannel>
 80047e2:	4603      	mov	r3, r0
 80047e4:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80047e8:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d008      	beq.n	8004802 <GainSignalMenuEntryHandler+0x3e>
	{
		ENCODER_TIMER->CNT = pTmpVppPreset->epos;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	8b1a      	ldrh	r2, [r3, #24]
 80047f4:	4b09      	ldr	r3, [pc, #36]	; (800481c <GainSignalMenuEntryHandler+0x58>)
 80047f6:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;
 80047f8:	4b08      	ldr	r3, [pc, #32]	; (800481c <GainSignalMenuEntryHandler+0x58>)
 80047fa:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 80047fe:	62da      	str	r2, [r3, #44]	; 0x2c
 8004800:	e002      	b.n	8004808 <GainSignalMenuEntryHandler+0x44>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8004802:	4807      	ldr	r0, [pc, #28]	; (8004820 <GainSignalMenuEntryHandler+0x5c>)
 8004804:	f7fc fe90 	bl	8001528 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8004808:	4b06      	ldr	r3, [pc, #24]	; (8004824 <GainSignalMenuEntryHandler+0x60>)
 800480a:	2200      	movs	r2, #0
 800480c:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 800480e:	2307      	movs	r3, #7
}
 8004810:	4618      	mov	r0, r3
 8004812:	3708      	adds	r7, #8
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	20001e58 	.word	0x20001e58
 800481c:	40012c00 	.word	0x40012c00
 8004820:	08013928 	.word	0x08013928
 8004824:	20001e53 	.word	0x20001e53

08004828 <GainSignalMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuInputHandler()
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuInputHandler Event captured\n");
	#endif

	FunctionProfile_t *tmpFuncProfile = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile;
 800482e:	2000      	movs	r0, #0
 8004830:	f001 f9bc 	bl	8005bac <SM_GetOutputChannel>
 8004834:	4603      	mov	r3, r0
 8004836:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800483a:	607b      	str	r3, [r7, #4]
	if(tmpFuncProfile)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d012      	beq.n	8004868 <GainSignalMenuInputHandler+0x40>
	{
		if(tmpFuncProfile->func == PWM_FUNC_MODE)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	2b06      	cmp	r3, #6
 8004848:	d107      	bne.n	800485a <GainSignalMenuInputHandler+0x32>
		{
			GO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 800484a:	2001      	movs	r0, #1
 800484c:	f001 fc2a 	bl	80060a4 <SM_GetEncoderValue>
 8004850:	4603      	mov	r3, r0
 8004852:	4618      	mov	r0, r3
 8004854:	f000 ffaa 	bl	80057ac <GO_MapEncoderPositionToSignalOutput>
 8004858:	e006      	b.n	8004868 <GainSignalMenuInputHandler+0x40>

		}
		else
		{
			VPP_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 800485a:	2001      	movs	r0, #1
 800485c:	f001 fc22 	bl	80060a4 <SM_GetEncoderValue>
 8004860:	4603      	mov	r3, r0
 8004862:	4618      	mov	r0, r3
 8004864:	f001 fe3e 	bl	80064e4 <VPP_MapEncoderPositionToSignalOutput>
		}
	}
	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_REVERSE));
	//

	eNewEvent = evYellowBtn;
 8004868:	4b03      	ldr	r3, [pc, #12]	; (8004878 <GainSignalMenuInputHandler+0x50>)
 800486a:	2203      	movs	r2, #3
 800486c:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 800486e:	2307      	movs	r3, #7
}
 8004870:	4618      	mov	r0, r3
 8004872:	3708      	adds	r7, #8
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	20001e53 	.word	0x20001e53

0800487c <GainSignalMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuExitHandler()
{
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuExitHandler Event captured\n");
	#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8004880:	4b05      	ldr	r3, [pc, #20]	; (8004898 <GainSignalMenuExitHandler+0x1c>)
 8004882:	2201      	movs	r2, #1
 8004884:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004886:	f7fc fe09 	bl	800149c <DM_RefreshScreen>

	eNewEvent = evIdle;
 800488a:	4b04      	ldr	r3, [pc, #16]	; (800489c <GainSignalMenuExitHandler+0x20>)
 800488c:	2200      	movs	r2, #0
 800488e:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004890:	2306      	movs	r3, #6
}
 8004892:	4618      	mov	r0, r3
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	20001e58 	.word	0x20001e58
 800489c:	20001e53 	.word	0x20001e53

080048a0 <GainAuxMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuEntryHandler()
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80048a6:	f7fc fdf9 	bl	800149c <DM_RefreshScreen>
	VPP_ResetLastEncoderValue();
 80048aa:	f001 fca9 	bl	8006200 <VPP_ResetLastEncoderValue>

	eNextGainMenuStatus = ENABLE_GAIN_Aux_MENU;
 80048ae:	4b10      	ldr	r3, [pc, #64]	; (80048f0 <GainAuxMenuEntryHandler+0x50>)
 80048b0:	2203      	movs	r2, #3
 80048b2:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile;
 80048b4:	2001      	movs	r0, #1
 80048b6:	f001 f979 	bl	8005bac <SM_GetOutputChannel>
 80048ba:	4603      	mov	r3, r0
 80048bc:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80048c0:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d008      	beq.n	80048da <GainAuxMenuEntryHandler+0x3a>
	{
		ENCODER_TIMER->CNT = pTmpVppPreset->epos;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	8b1a      	ldrh	r2, [r3, #24]
 80048cc:	4b09      	ldr	r3, [pc, #36]	; (80048f4 <GainAuxMenuEntryHandler+0x54>)
 80048ce:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;
 80048d0:	4b08      	ldr	r3, [pc, #32]	; (80048f4 <GainAuxMenuEntryHandler+0x54>)
 80048d2:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 80048d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80048d8:	e002      	b.n	80048e0 <GainAuxMenuEntryHandler+0x40>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 80048da:	4807      	ldr	r0, [pc, #28]	; (80048f8 <GainAuxMenuEntryHandler+0x58>)
 80048dc:	f7fc fe24 	bl	8001528 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 80048e0:	4b06      	ldr	r3, [pc, #24]	; (80048fc <GainAuxMenuEntryHandler+0x5c>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	701a      	strb	r2, [r3, #0]
	return Gain_Aux_Menu_State;
 80048e6:	2308      	movs	r3, #8
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3708      	adds	r7, #8
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	20001e58 	.word	0x20001e58
 80048f4:	40012c00 	.word	0x40012c00
 80048f8:	08013928 	.word	0x08013928
 80048fc:	20001e53 	.word	0x20001e53

08004900 <GainAuxMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuInputHandler()
{
 8004900:	b580      	push	{r7, lr}
 8004902:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuInputHandler Event captured\n");
	#endif

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_REVERSE));
	VPP_MapEncoderPositionToAuxOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8004904:	2001      	movs	r0, #1
 8004906:	f001 fbcd 	bl	80060a4 <SM_GetEncoderValue>
 800490a:	4603      	mov	r3, r0
 800490c:	4618      	mov	r0, r3
 800490e:	f001 fe23 	bl	8006558 <VPP_MapEncoderPositionToAuxOutput>

	eNewEvent = evYellowBtn;
 8004912:	4b03      	ldr	r3, [pc, #12]	; (8004920 <GainAuxMenuInputHandler+0x20>)
 8004914:	2203      	movs	r2, #3
 8004916:	701a      	strb	r2, [r3, #0]
	return Gain_Aux_Menu_State;
 8004918:	2308      	movs	r3, #8
}
 800491a:	4618      	mov	r0, r3
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	20001e53 	.word	0x20001e53

08004924 <GainAuxMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuExitHandler()
{
 8004924:	b580      	push	{r7, lr}
 8004926:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuExitHandler Event captured\n");
	#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8004928:	4b05      	ldr	r3, [pc, #20]	; (8004940 <GainAuxMenuExitHandler+0x1c>)
 800492a:	2201      	movs	r2, #1
 800492c:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 800492e:	f7fc fdb5 	bl	800149c <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004932:	4b04      	ldr	r3, [pc, #16]	; (8004944 <GainAuxMenuExitHandler+0x20>)
 8004934:	2200      	movs	r2, #0
 8004936:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004938:	2306      	movs	r3, #6
}
 800493a:	4618      	mov	r0, r3
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	20001e58 	.word	0x20001e58
 8004944:	20001e53 	.word	0x20001e53

08004948 <ToplevelMenu_getStatus>:
eToplevelMenu_Status eNextToplevelMenuStatus = 	ENABLE_TOPLEVEL_MAIN_MENU;



eToplevelMenu_Status ToplevelMenu_getStatus()
{
 8004948:	b480      	push	{r7}
 800494a:	af00      	add	r7, sp, #0
	return eNextToplevelMenuStatus;
 800494c:	4b03      	ldr	r3, [pc, #12]	; (800495c <ToplevelMenu_getStatus+0x14>)
 800494e:	781b      	ldrb	r3, [r3, #0]
}
 8004950:	4618      	mov	r0, r3
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	20000000 	.word	0x20000000

08004960 <ToplevelMenu_setStatus>:

void ToplevelMenu_setStatus(eToplevelMenu_Status pStatus)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	4603      	mov	r3, r0
 8004968:	71fb      	strb	r3, [r7, #7]
	eNextToplevelMenuStatus = pStatus;
 800496a:	4a04      	ldr	r2, [pc, #16]	; (800497c <ToplevelMenu_setStatus+0x1c>)
 800496c:	79fb      	ldrb	r3, [r7, #7]
 800496e:	7013      	strb	r3, [r2, #0]
}
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	20000000 	.word	0x20000000

08004980 <ToplevelOutputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuEntryHandler()
{
 8004980:	b580      	push	{r7, lr}
 8004982:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelOutputMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004984:	f7fc fd8a 	bl	800149c <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_OUTPUT_MENU;
 8004988:	4b04      	ldr	r3, [pc, #16]	; (800499c <ToplevelOutputMenuEntryHandler+0x1c>)
 800498a:	2202      	movs	r2, #2
 800498c:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 800498e:	4b04      	ldr	r3, [pc, #16]	; (80049a0 <ToplevelOutputMenuEntryHandler+0x20>)
 8004990:	2200      	movs	r2, #0
 8004992:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004994:	2301      	movs	r3, #1
}
 8004996:	4618      	mov	r0, r3
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	20000000 	.word	0x20000000
 80049a0:	20001e53 	.word	0x20001e53

080049a4 <ToplevelOutputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuExitHandler()
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelOutputMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80049a8:	f7fc fd78 	bl	800149c <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 80049ac:	4b04      	ldr	r3, [pc, #16]	; (80049c0 <ToplevelOutputMenuExitHandler+0x1c>)
 80049ae:	2201      	movs	r2, #1
 80049b0:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 80049b2:	4b04      	ldr	r3, [pc, #16]	; (80049c4 <ToplevelOutputMenuExitHandler+0x20>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	20000000 	.word	0x20000000
 80049c4:	20001e53 	.word	0x20001e53

080049c8 <ToplevelInputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuEntryHandler()
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80049cc:	f7fc fd66 	bl	800149c <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_INPUT_MENU;
 80049d0:	4b04      	ldr	r3, [pc, #16]	; (80049e4 <ToplevelInputMenuEntryHandler+0x1c>)
 80049d2:	2203      	movs	r2, #3
 80049d4:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 80049d6:	4b04      	ldr	r3, [pc, #16]	; (80049e8 <ToplevelInputMenuEntryHandler+0x20>)
 80049d8:	2200      	movs	r2, #0
 80049da:	701a      	strb	r2, [r3, #0]
	return Toplevel_Input_Menu_State;
 80049dc:	2302      	movs	r3, #2
}
 80049de:	4618      	mov	r0, r3
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	20000000 	.word	0x20000000
 80049e8:	20001e53 	.word	0x20001e53

080049ec <ToplevelInputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuExitHandler()
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80049f0:	f7fc fd54 	bl	800149c <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 80049f4:	4b04      	ldr	r3, [pc, #16]	; (8004a08 <ToplevelInputMenuExitHandler+0x1c>)
 80049f6:	2201      	movs	r2, #1
 80049f8:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 80049fa:	4b04      	ldr	r3, [pc, #16]	; (8004a0c <ToplevelInputMenuExitHandler+0x20>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	20000000 	.word	0x20000000
 8004a0c:	20001e53 	.word	0x20001e53

08004a10 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8004a18:	4b07      	ldr	r3, [pc, #28]	; (8004a38 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8004a1a:	695a      	ldr	r2, [r3, #20]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4013      	ands	r3, r2
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d101      	bne.n	8004a2a <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8004a26:	2301      	movs	r3, #1
 8004a28:	e000      	b.n	8004a2c <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr
 8004a38:	40010400 	.word	0x40010400

08004a3c <IM_Init>:
uint16_t encbtn_last_interrupt_time = 0;
uint16_t encpos_last_interrupt_time = 0;


void IM_Init()
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	af00      	add	r7, sp, #0
	  // debounce timer
	  DEBOUNCE_TIMER->CR1 |= TIM_CR1_CEN;
 8004a40:	4b05      	ldr	r3, [pc, #20]	; (8004a58 <IM_Init+0x1c>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a04      	ldr	r2, [pc, #16]	; (8004a58 <IM_Init+0x1c>)
 8004a46:	f043 0301 	orr.w	r3, r3, #1
 8004a4a:	6013      	str	r3, [r2, #0]
}
 8004a4c:	bf00      	nop
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	40014400 	.word	0x40014400

08004a5c <IM_SWEEP_UPDATE_TIM_IRQHandler>:
 *	@param None
 *	@retval None
 *
 */
void IM_SWEEP_UPDATE_TIM_IRQHandler()
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0
	#ifdef ENABLE_PWM_SWEEP
		eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
	#endif	//ENABLE_PWM_SWEEP

		// upcounter (decreasing freq)
	if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 8004a60:	4b26      	ldr	r3, [pc, #152]	; (8004afc <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa0>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0310 	and.w	r3, r3, #16
 8004a68:	2b10      	cmp	r3, #16
 8004a6a:	d11c      	bne.n	8004aa6 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x4a>
	{
		// if we reach lower freq limit for sweep, reset to highest freq limit
		if(OUTPUT_TIMER->ARR >= sweep_upper_bounds_longest_output_arr)
 8004a6c:	4b24      	ldr	r3, [pc, #144]	; (8004b00 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a70:	ee07 3a90 	vmov	s15, r3
 8004a74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004a78:	4b22      	ldr	r3, [pc, #136]	; (8004b04 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa8>)
 8004a7a:	edd3 7a00 	vldr	s15, [r3]
 8004a7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a86:	db09      	blt.n	8004a9c <IM_SWEEP_UPDATE_TIM_IRQHandler+0x40>
		{
			OUTPUT_TIMER->ARR = sweep_lower_bounds_shortest_output_arr;
 8004a88:	4b1f      	ldr	r3, [pc, #124]	; (8004b08 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xac>)
 8004a8a:	edd3 7a00 	vldr	s15, [r3]
 8004a8e:	4b1c      	ldr	r3, [pc, #112]	; (8004b00 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004a90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a94:	ee17 2a90 	vmov	r2, s15
 8004a98:	62da      	str	r2, [r3, #44]	; 0x2c
			}
		}
	}

	//SWEEP_TIMER->ARR--;
}
 8004a9a:	e029      	b.n	8004af0 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
			OUTPUT_TIMER->ARR++;
 8004a9c:	4b18      	ldr	r3, [pc, #96]	; (8004b00 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa0:	3201      	adds	r2, #1
 8004aa2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004aa4:	e024      	b.n	8004af0 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
		if(OUTPUT_TIMER->ARR == 0x1U)
 8004aa6:	4b16      	ldr	r3, [pc, #88]	; (8004b00 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d104      	bne.n	8004ab8 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x5c>
			OUTPUT_TIMER->ARR = MAX_OUTPUT_ARR;
 8004aae:	4b14      	ldr	r3, [pc, #80]	; (8004b00 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004ab0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ab4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004ab6:	e01b      	b.n	8004af0 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
			if(OUTPUT_TIMER->ARR <= sweep_lower_bounds_shortest_output_arr)
 8004ab8:	4b11      	ldr	r3, [pc, #68]	; (8004b00 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abc:	ee07 3a90 	vmov	s15, r3
 8004ac0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ac4:	4b10      	ldr	r3, [pc, #64]	; (8004b08 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xac>)
 8004ac6:	edd3 7a00 	vldr	s15, [r3]
 8004aca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ad2:	d809      	bhi.n	8004ae8 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x8c>
				OUTPUT_TIMER->ARR = sweep_upper_bounds_longest_output_arr;
 8004ad4:	4b0b      	ldr	r3, [pc, #44]	; (8004b04 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa8>)
 8004ad6:	edd3 7a00 	vldr	s15, [r3]
 8004ada:	4b09      	ldr	r3, [pc, #36]	; (8004b00 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004adc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ae0:	ee17 2a90 	vmov	r2, s15
 8004ae4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004ae6:	e003      	b.n	8004af0 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
				OUTPUT_TIMER->ARR--;
 8004ae8:	4b05      	ldr	r3, [pc, #20]	; (8004b00 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aec:	3a01      	subs	r2, #1
 8004aee:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004af0:	bf00      	nop
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	40000c00 	.word	0x40000c00
 8004b00:	40013400 	.word	0x40013400
 8004b04:	20000124 	.word	0x20000124
 8004b08:	20000120 	.word	0x20000120

08004b0c <IM_BTN1_EXTI14_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN1_EXTI14_Handler()
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004b12:	4b0f      	ldr	r3, [pc, #60]	; (8004b50 <IM_BTN1_EXTI14_Handler+0x44>)
 8004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b16:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn1_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004b18:	88fb      	ldrh	r3, [r7, #6]
 8004b1a:	4a0e      	ldr	r2, [pc, #56]	; (8004b54 <IM_BTN1_EXTI14_Handler+0x48>)
 8004b1c:	8812      	ldrh	r2, [r2, #0]
 8004b1e:	1a9b      	subs	r3, r3, r2
 8004b20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b24:	dd0c      	ble.n	8004b40 <IM_BTN1_EXTI14_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14))
 8004b26:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004b2a:	f7ff ff71 	bl	8004a10 <LL_EXTI_IsActiveFlag_0_31>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d005      	beq.n	8004b40 <IM_BTN1_EXTI14_Handler+0x34>
		{

			EM_SetNewEvent(evBlueBtn);
 8004b34:	2001      	movs	r0, #1
 8004b36:	f7ff fb01 	bl	800413c <EM_SetNewEvent>
			printf("'Blue' BTN1_EXTI14_Pin\n");
 8004b3a:	4807      	ldr	r0, [pc, #28]	; (8004b58 <IM_BTN1_EXTI14_Handler+0x4c>)
 8004b3c:	f00b f8d6 	bl	800fcec <puts>
		}
	}
	btn1_last_interrupt_time = interrupt_time;
 8004b40:	4a04      	ldr	r2, [pc, #16]	; (8004b54 <IM_BTN1_EXTI14_Handler+0x48>)
 8004b42:	88fb      	ldrh	r3, [r7, #6]
 8004b44:	8013      	strh	r3, [r2, #0]


}
 8004b46:	bf00      	nop
 8004b48:	3708      	adds	r7, #8
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	40014400 	.word	0x40014400
 8004b54:	20001e5a 	.word	0x20001e5a
 8004b58:	08013960 	.word	0x08013960

08004b5c <IM_BTN2_EXTI15_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN2_EXTI15_Handler()
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004b62:	4b0f      	ldr	r3, [pc, #60]	; (8004ba0 <IM_BTN2_EXTI15_Handler+0x44>)
 8004b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b66:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn2_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004b68:	88fb      	ldrh	r3, [r7, #6]
 8004b6a:	4a0e      	ldr	r2, [pc, #56]	; (8004ba4 <IM_BTN2_EXTI15_Handler+0x48>)
 8004b6c:	8812      	ldrh	r2, [r2, #0]
 8004b6e:	1a9b      	subs	r3, r3, r2
 8004b70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b74:	dd0c      	ble.n	8004b90 <IM_BTN2_EXTI15_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15))
 8004b76:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004b7a:	f7ff ff49 	bl	8004a10 <LL_EXTI_IsActiveFlag_0_31>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d005      	beq.n	8004b90 <IM_BTN2_EXTI15_Handler+0x34>
		{
			EM_SetNewEvent(evYellowBtn);
 8004b84:	2003      	movs	r0, #3
 8004b86:	f7ff fad9 	bl	800413c <EM_SetNewEvent>
			printf("'Yellow' BTN2_EXTI15_Pin\n");
 8004b8a:	4807      	ldr	r0, [pc, #28]	; (8004ba8 <IM_BTN2_EXTI15_Handler+0x4c>)
 8004b8c:	f00b f8ae 	bl	800fcec <puts>
		}
	}
	btn2_last_interrupt_time = interrupt_time;
 8004b90:	4a04      	ldr	r2, [pc, #16]	; (8004ba4 <IM_BTN2_EXTI15_Handler+0x48>)
 8004b92:	88fb      	ldrh	r3, [r7, #6]
 8004b94:	8013      	strh	r3, [r2, #0]


}
 8004b96:	bf00      	nop
 8004b98:	3708      	adds	r7, #8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	40014400 	.word	0x40014400
 8004ba4:	20001e5c 	.word	0x20001e5c
 8004ba8:	08013978 	.word	0x08013978

08004bac <IM_BTN3_EXTI0_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN3_EXTI0_Handler()
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004bb2:	4b0e      	ldr	r3, [pc, #56]	; (8004bec <IM_BTN3_EXTI0_Handler+0x40>)
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb6:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn3_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004bb8:	88fb      	ldrh	r3, [r7, #6]
 8004bba:	4a0d      	ldr	r2, [pc, #52]	; (8004bf0 <IM_BTN3_EXTI0_Handler+0x44>)
 8004bbc:	8812      	ldrh	r2, [r2, #0]
 8004bbe:	1a9b      	subs	r3, r3, r2
 8004bc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bc4:	dd0b      	ble.n	8004bde <IM_BTN3_EXTI0_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0))
 8004bc6:	2001      	movs	r0, #1
 8004bc8:	f7ff ff22 	bl	8004a10 <LL_EXTI_IsActiveFlag_0_31>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d005      	beq.n	8004bde <IM_BTN3_EXTI0_Handler+0x32>
		{
			EM_SetNewEvent(evRedBtn);
 8004bd2:	2004      	movs	r0, #4
 8004bd4:	f7ff fab2 	bl	800413c <EM_SetNewEvent>
			printf("'Red' BTN3_EXTI0_Pin\n");
 8004bd8:	4806      	ldr	r0, [pc, #24]	; (8004bf4 <IM_BTN3_EXTI0_Handler+0x48>)
 8004bda:	f00b f887 	bl	800fcec <puts>
		}
	}
	btn3_last_interrupt_time = interrupt_time;
 8004bde:	4a04      	ldr	r2, [pc, #16]	; (8004bf0 <IM_BTN3_EXTI0_Handler+0x44>)
 8004be0:	88fb      	ldrh	r3, [r7, #6]
 8004be2:	8013      	strh	r3, [r2, #0]


}
 8004be4:	bf00      	nop
 8004be6:	3708      	adds	r7, #8
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	40014400 	.word	0x40014400
 8004bf0:	20001e5e 	.word	0x20001e5e
 8004bf4:	08013994 	.word	0x08013994

08004bf8 <IM_BTN4_EXTI1_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN4_EXTI1_Handler()
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004bfe:	4b0e      	ldr	r3, [pc, #56]	; (8004c38 <IM_BTN4_EXTI1_Handler+0x40>)
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c02:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn4_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004c04:	88fb      	ldrh	r3, [r7, #6]
 8004c06:	4a0d      	ldr	r2, [pc, #52]	; (8004c3c <IM_BTN4_EXTI1_Handler+0x44>)
 8004c08:	8812      	ldrh	r2, [r2, #0]
 8004c0a:	1a9b      	subs	r3, r3, r2
 8004c0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c10:	dd0b      	ble.n	8004c2a <IM_BTN4_EXTI1_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1))
 8004c12:	2002      	movs	r0, #2
 8004c14:	f7ff fefc 	bl	8004a10 <LL_EXTI_IsActiveFlag_0_31>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d005      	beq.n	8004c2a <IM_BTN4_EXTI1_Handler+0x32>
		{
			EM_SetNewEvent(evGreenBtn);
 8004c1e:	2002      	movs	r0, #2
 8004c20:	f7ff fa8c 	bl	800413c <EM_SetNewEvent>
			printf("'Green' BTN4_EXTI1_Pin\n");
 8004c24:	4806      	ldr	r0, [pc, #24]	; (8004c40 <IM_BTN4_EXTI1_Handler+0x48>)
 8004c26:	f00b f861 	bl	800fcec <puts>
		}
	}
	btn4_last_interrupt_time = interrupt_time;
 8004c2a:	4a04      	ldr	r2, [pc, #16]	; (8004c3c <IM_BTN4_EXTI1_Handler+0x44>)
 8004c2c:	88fb      	ldrh	r3, [r7, #6]
 8004c2e:	8013      	strh	r3, [r2, #0]


}
 8004c30:	bf00      	nop
 8004c32:	3708      	adds	r7, #8
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	40014400 	.word	0x40014400
 8004c3c:	20001e60 	.word	0x20001e60
 8004c40:	080139ac 	.word	0x080139ac

08004c44 <IM_ENC_EXTI2_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_EXTI2_Handler()
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004c4a:	4b0e      	ldr	r3, [pc, #56]	; (8004c84 <IM_ENC_EXTI2_Handler+0x40>)
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4e:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - encbtn_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004c50:	88fb      	ldrh	r3, [r7, #6]
 8004c52:	4a0d      	ldr	r2, [pc, #52]	; (8004c88 <IM_ENC_EXTI2_Handler+0x44>)
 8004c54:	8812      	ldrh	r2, [r2, #0]
 8004c56:	1a9b      	subs	r3, r3, r2
 8004c58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c5c:	dd0b      	ble.n	8004c76 <IM_ENC_EXTI2_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2))
 8004c5e:	2004      	movs	r0, #4
 8004c60:	f7ff fed6 	bl	8004a10 <LL_EXTI_IsActiveFlag_0_31>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d005      	beq.n	8004c76 <IM_ENC_EXTI2_Handler+0x32>
		{
			EM_SetNewEvent(evEncoderPush);
 8004c6a:	2006      	movs	r0, #6
 8004c6c:	f7ff fa66 	bl	800413c <EM_SetNewEvent>
			printf("'EncoderPush' ENC_EXTI2_Pin\n");
 8004c70:	4806      	ldr	r0, [pc, #24]	; (8004c8c <IM_ENC_EXTI2_Handler+0x48>)
 8004c72:	f00b f83b 	bl	800fcec <puts>
		}
	}
	encbtn_last_interrupt_time = interrupt_time;
 8004c76:	4a04      	ldr	r2, [pc, #16]	; (8004c88 <IM_ENC_EXTI2_Handler+0x44>)
 8004c78:	88fb      	ldrh	r3, [r7, #6]
 8004c7a:	8013      	strh	r3, [r2, #0]


}
 8004c7c:	bf00      	nop
 8004c7e:	3708      	adds	r7, #8
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	40014400 	.word	0x40014400
 8004c88:	20001e62 	.word	0x20001e62
 8004c8c:	080139c4 	.word	0x080139c4

08004c90 <IM_ENC_DIRF_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_DIRF_Handler()
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0

	if((TIM1->SR & TIM_SR_DIRF) == TIM_SR_DIRF)
 8004c96:	4b11      	ldr	r3, [pc, #68]	; (8004cdc <IM_ENC_DIRF_Handler+0x4c>)
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ca2:	d117      	bne.n	8004cd4 <IM_ENC_DIRF_Handler+0x44>
	{
		uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004ca4:	4b0e      	ldr	r3, [pc, #56]	; (8004ce0 <IM_ENC_DIRF_Handler+0x50>)
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca8:	80fb      	strh	r3, [r7, #6]
		if ((interrupt_time - encpos_last_interrupt_time) > 0)
 8004caa:	88fb      	ldrh	r3, [r7, #6]
 8004cac:	4a0d      	ldr	r2, [pc, #52]	; (8004ce4 <IM_ENC_DIRF_Handler+0x54>)
 8004cae:	8812      	ldrh	r2, [r2, #0]
 8004cb0:	1a9b      	subs	r3, r3, r2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	dd0b      	ble.n	8004cce <IM_ENC_DIRF_Handler+0x3e>
		{
			EM_SetNewEvent(evEncoderSet);
 8004cb6:	2005      	movs	r0, #5
 8004cb8:	f7ff fa40 	bl	800413c <EM_SetNewEvent>
			printf("Encoder new direction\n");
 8004cbc:	480a      	ldr	r0, [pc, #40]	; (8004ce8 <IM_ENC_DIRF_Handler+0x58>)
 8004cbe:	f00b f815 	bl	800fcec <puts>
			TIM1->SR &= ~(TIM_SR_DIRF);
 8004cc2:	4b06      	ldr	r3, [pc, #24]	; (8004cdc <IM_ENC_DIRF_Handler+0x4c>)
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	4a05      	ldr	r2, [pc, #20]	; (8004cdc <IM_ENC_DIRF_Handler+0x4c>)
 8004cc8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ccc:	6113      	str	r3, [r2, #16]
		}
		encpos_last_interrupt_time = interrupt_time;
 8004cce:	4a05      	ldr	r2, [pc, #20]	; (8004ce4 <IM_ENC_DIRF_Handler+0x54>)
 8004cd0:	88fb      	ldrh	r3, [r7, #6]
 8004cd2:	8013      	strh	r3, [r2, #0]


	}


}
 8004cd4:	bf00      	nop
 8004cd6:	3708      	adds	r7, #8
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	40012c00 	.word	0x40012c00
 8004ce0:	40014400 	.word	0x40014400
 8004ce4:	20001e64 	.word	0x20001e64
 8004ce8:	080139e0 	.word	0x080139e0

08004cec <BO_GetBiasPolarity>:
 *	@param None
 *	@retval None
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
 8004cec:	b480      	push	{r7}
 8004cee:	af00      	add	r7, sp, #0
	return eBiasPolarity;
 8004cf0:	4b03      	ldr	r3, [pc, #12]	; (8004d00 <BO_GetBiasPolarity+0x14>)
 8004cf2:	781b      	ldrb	r3, [r3, #0]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	20000001 	.word	0x20000001

08004d04 <BO_GetDcBiasEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t BO_GetDcBiasEncoderValue()
{
 8004d04:	b480      	push	{r7}
 8004d06:	af00      	add	r7, sp, #0
	return dc_bias_encoder_value;
 8004d08:	4b03      	ldr	r3, [pc, #12]	; (8004d18 <BO_GetDcBiasEncoderValue+0x14>)
 8004d0a:	881b      	ldrh	r3, [r3, #0]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	20000002 	.word	0x20000002

08004d1c <BO_MapEncoderPositionToSignalOutput>:
 *	@param None
 *	@retval None
 *
 */
void BO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	4603      	mov	r3, r0
 8004d24:	80fb      	strh	r3, [r7, #6]
	// pEncoderValue is reversed for correct rotary encoder operation.
	// However, we want to retain the forward direction value to prevent polarity flip!
	dc_bias_encoder_value = SM_GetEncoderValue(ENCODER_FORWARD);
 8004d26:	2000      	movs	r0, #0
 8004d28:	f001 f9bc 	bl	80060a4 <SM_GetEncoderValue>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	461a      	mov	r2, r3
 8004d30:	4b1b      	ldr	r3, [pc, #108]	; (8004da0 <BO_MapEncoderPositionToSignalOutput+0x84>)
 8004d32:	801a      	strh	r2, [r3, #0]

	// apply negative dc bias
	if(pEncoderValue < BIAS_CENTER) {
 8004d34:	88fb      	ldrh	r3, [r7, #6]
 8004d36:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004d3a:	d214      	bcs.n	8004d66 <BO_MapEncoderPositionToSignalOutput+0x4a>

		eBiasPolarity = INVERSEBIAS;
 8004d3c:	4b19      	ldr	r3, [pc, #100]	; (8004da4 <BO_MapEncoderPositionToSignalOutput+0x88>)
 8004d3e:	2200      	movs	r2, #0
 8004d40:	701a      	strb	r2, [r3, #0]


		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((BIAS_CENTER - pEncoderValue) * BIAS_MAG));
 8004d42:	88fb      	ldrh	r3, [r7, #6]
 8004d44:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 8004d48:	4613      	mov	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4413      	add	r3, r2
 8004d4e:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8004d50:	2200      	movs	r2, #0
 8004d52:	2110      	movs	r1, #16
 8004d54:	4814      	ldr	r0, [pc, #80]	; (8004da8 <BO_MapEncoderPositionToSignalOutput+0x8c>)
 8004d56:	f005 f823 	bl	8009da0 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	2108      	movs	r1, #8
 8004d5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d62:	f005 ffd5 	bl	800ad10 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(pEncoderValue >= BIAS_CENTER) {
 8004d66:	88fb      	ldrh	r3, [r7, #6]
 8004d68:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004d6c:	d314      	bcc.n	8004d98 <BO_MapEncoderPositionToSignalOutput+0x7c>

		eBiasPolarity = NORMALBIAS;
 8004d6e:	4b0d      	ldr	r3, [pc, #52]	; (8004da4 <BO_MapEncoderPositionToSignalOutput+0x88>)
 8004d70:	2201      	movs	r2, #1
 8004d72:	701a      	strb	r2, [r3, #0]
		//TIM1->CNT = pEncoderValue;

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((pEncoderValue - BIAS_CENTER) * BIAS_MAG));
 8004d74:	88fb      	ldrh	r3, [r7, #6]
 8004d76:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	4413      	add	r3, r2
 8004d80:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8004d82:	2200      	movs	r2, #0
 8004d84:	2110      	movs	r1, #16
 8004d86:	4808      	ldr	r0, [pc, #32]	; (8004da8 <BO_MapEncoderPositionToSignalOutput+0x8c>)
 8004d88:	f005 f80a 	bl	8009da0 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	2108      	movs	r1, #8
 8004d90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d94:	f005 ffbc 	bl	800ad10 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_RESET);
	}
}
 8004d98:	bf00      	nop
 8004d9a:	3708      	adds	r7, #8
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	20000002 	.word	0x20000002
 8004da4:	20000001 	.word	0x20000001
 8004da8:	20002638 	.word	0x20002638

08004dac <BO_GetOutputBias>:
 *	@param None
 *	@retval None
 *
 */
uint32_t BO_GetOutputBias()
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 8004db0:	2110      	movs	r1, #16
 8004db2:	4803      	ldr	r0, [pc, #12]	; (8004dc0 <BO_GetOutputBias+0x14>)
 8004db4:	f005 f830 	bl	8009e18 <HAL_DAC_GetValue>
 8004db8:	4603      	mov	r3, r0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	20002638 	.word	0x20002638

08004dc4 <FreqO_InitFreqProfiles>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_InitFreqProfiles()
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++)
 8004dca:	2300      	movs	r3, #0
 8004dcc:	607b      	str	r3, [r7, #4]
 8004dce:	e06b      	b.n	8004ea8 <FreqO_InitFreqProfiles+0xe4>
	{
		// prevent divide by zero (prescaler)
		if(theFreqProfiles[i].psc == 0)
 8004dd0:	493a      	ldr	r1, [pc, #232]	; (8004ebc <FreqO_InitFreqProfiles+0xf8>)
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	4413      	add	r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	440b      	add	r3, r1
 8004dde:	3308      	adds	r3, #8
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d129      	bne.n	8004e3a <FreqO_InitFreqProfiles+0x76>
			theFreqProfiles[i].arr = ((SM_MCLK / theFreqProfiles[i].hertz) / SM_FSAMP) * theFreqProfiles[i].error;
 8004de6:	4935      	ldr	r1, [pc, #212]	; (8004ebc <FreqO_InitFreqProfiles+0xf8>)
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	4613      	mov	r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4413      	add	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	440b      	add	r3, r1
 8004df4:	3304      	adds	r3, #4
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a31      	ldr	r2, [pc, #196]	; (8004ec0 <FreqO_InitFreqProfiles+0xfc>)
 8004dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dfe:	ee07 3a90 	vmov	s15, r3
 8004e02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004e06:	492d      	ldr	r1, [pc, #180]	; (8004ebc <FreqO_InitFreqProfiles+0xf8>)
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	4413      	add	r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	440b      	add	r3, r1
 8004e14:	3310      	adds	r3, #16
 8004e16:	edd3 7a00 	vldr	s15, [r3]
 8004e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e22:	ee17 0a90 	vmov	r0, s15
 8004e26:	4925      	ldr	r1, [pc, #148]	; (8004ebc <FreqO_InitFreqProfiles+0xf8>)
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	4413      	add	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	440b      	add	r3, r1
 8004e34:	330c      	adds	r3, #12
 8004e36:	6018      	str	r0, [r3, #0]
 8004e38:	e033      	b.n	8004ea2 <FreqO_InitFreqProfiles+0xde>
		else
			theFreqProfiles[i].arr = (((SM_MCLK / theFreqProfiles[i].hertz) / theFreqProfiles[i].psc) / SM_FSAMP) * theFreqProfiles[i].error;
 8004e3a:	4920      	ldr	r1, [pc, #128]	; (8004ebc <FreqO_InitFreqProfiles+0xf8>)
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4413      	add	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	440b      	add	r3, r1
 8004e48:	3304      	adds	r3, #4
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a1c      	ldr	r2, [pc, #112]	; (8004ec0 <FreqO_InitFreqProfiles+0xfc>)
 8004e4e:	fbb2 f1f3 	udiv	r1, r2, r3
 8004e52:	481a      	ldr	r0, [pc, #104]	; (8004ebc <FreqO_InitFreqProfiles+0xf8>)
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	4613      	mov	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	4413      	add	r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	4403      	add	r3, r0
 8004e60:	3308      	adds	r3, #8
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e68:	ee07 3a90 	vmov	s15, r3
 8004e6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004e70:	4912      	ldr	r1, [pc, #72]	; (8004ebc <FreqO_InitFreqProfiles+0xf8>)
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	4613      	mov	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4413      	add	r3, r2
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	440b      	add	r3, r1
 8004e7e:	3310      	adds	r3, #16
 8004e80:	edd3 7a00 	vldr	s15, [r3]
 8004e84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e8c:	ee17 0a90 	vmov	r0, s15
 8004e90:	490a      	ldr	r1, [pc, #40]	; (8004ebc <FreqO_InitFreqProfiles+0xf8>)
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	4613      	mov	r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4413      	add	r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	440b      	add	r3, r1
 8004e9e:	330c      	adds	r3, #12
 8004ea0:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	607b      	str	r3, [r7, #4]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b0d      	cmp	r3, #13
 8004eac:	dd90      	ble.n	8004dd0 <FreqO_InitFreqProfiles+0xc>
	}
}
 8004eae:	bf00      	nop
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	20000004 	.word	0x20000004
 8004ec0:	00155cc0 	.word	0x00155cc0

08004ec4 <FreqO_MapEncoderPositionToBothOutput>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_MapEncoderPositionToBothOutput(uint16_t pEncValue)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	4603      	mov	r3, r0
 8004ecc:	80fb      	strh	r3, [r7, #6]

	uint32_t tmpFreqIndex = freq_profile->index;
 8004ece:	4b1b      	ldr	r3, [pc, #108]	; (8004f3c <FreqO_MapEncoderPositionToBothOutput+0x78>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	60fb      	str	r3, [r7, #12]
	if(pEncValue > freq_last_encoder_value)
 8004ed6:	4b1a      	ldr	r3, [pc, #104]	; (8004f40 <FreqO_MapEncoderPositionToBothOutput+0x7c>)
 8004ed8:	881b      	ldrh	r3, [r3, #0]
 8004eda:	88fa      	ldrh	r2, [r7, #6]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d910      	bls.n	8004f02 <FreqO_MapEncoderPositionToBothOutput+0x3e>
	{
		tmpFreqIndex++;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	60fb      	str	r3, [r7, #12]
		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = MAX_NUM_FREQ_PRESETS-1;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2b0d      	cmp	r3, #13
 8004eea:	d901      	bls.n	8004ef0 <FreqO_MapEncoderPositionToBothOutput+0x2c>
 8004eec:	230d      	movs	r3, #13
 8004eee:	60fb      	str	r3, [r7, #12]
		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f000 f8cf 	bl	8005094 <FreqO_GetProfileByIndex>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f000 f822 	bl	8004f44 <FreqO_ApplyProfile>
 8004f00:	e014      	b.n	8004f2c <FreqO_MapEncoderPositionToBothOutput+0x68>
	}
	else if (pEncValue < freq_last_encoder_value)
 8004f02:	4b0f      	ldr	r3, [pc, #60]	; (8004f40 <FreqO_MapEncoderPositionToBothOutput+0x7c>)
 8004f04:	881b      	ldrh	r3, [r3, #0]
 8004f06:	88fa      	ldrh	r2, [r7, #6]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d20f      	bcs.n	8004f2c <FreqO_MapEncoderPositionToBothOutput+0x68>
	{
		tmpFreqIndex--;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	60fb      	str	r3, [r7, #12]
		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = 0;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2b0d      	cmp	r3, #13
 8004f16:	d901      	bls.n	8004f1c <FreqO_MapEncoderPositionToBothOutput+0x58>
 8004f18:	2300      	movs	r3, #0
 8004f1a:	60fb      	str	r3, [r7, #12]
		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f000 f8b9 	bl	8005094 <FreqO_GetProfileByIndex>
 8004f22:	4603      	mov	r3, r0
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 f80c 	bl	8004f44 <FreqO_ApplyProfile>
	}
	freq_last_encoder_value = pEncValue;
 8004f2c:	4a04      	ldr	r2, [pc, #16]	; (8004f40 <FreqO_MapEncoderPositionToBothOutput+0x7c>)
 8004f2e:	88fb      	ldrh	r3, [r7, #6]
 8004f30:	8013      	strh	r3, [r2, #0]

}
 8004f32:	bf00      	nop
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	2000011c 	.word	0x2000011c
 8004f40:	20001e66 	.word	0x20001e66

08004f44 <FreqO_ApplyProfile>:
 *	@retval None
 *
 */

void FreqO_ApplyProfile(eFreqSettings_t pPresetEnum)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
//	DacTimeReg_t* tmpDT = DT_GetRegisterByEnum(pPresetEnum);
	FreqProfile_t* tmpFreqProfile = FreqO_FindFPresetObject(pPresetEnum);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 f873 	bl	8005038 <FreqO_FindFPresetObject>
 8004f52:	60f8      	str	r0, [r7, #12]
	if(tmpFreqProfile)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d024      	beq.n	8004fa4 <FreqO_ApplyProfile+0x60>
	{

		OUTPUT_TIMER->PSC = tmpFreqProfile->psc;
 8004f5a:	4a16      	ldr	r2, [pc, #88]	; (8004fb4 <FreqO_ApplyProfile+0x70>)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	6293      	str	r3, [r2, #40]	; 0x28
		OUTPUT_TIMER->ARR = tmpFreqProfile->arr;
 8004f62:	4a14      	ldr	r2, [pc, #80]	; (8004fb4 <FreqO_ApplyProfile+0x70>)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	62d3      	str	r3, [r2, #44]	; 0x2c

		eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8004f6a:	2001      	movs	r0, #1
 8004f6c:	f000 fe1e 	bl	8005bac <SM_GetOutputChannel>
 8004f70:	4603      	mov	r3, r0
 8004f72:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	72fb      	strb	r3, [r7, #11]
		if(tmpOut == PWM_FUNC_MODE)
 8004f7a:	7afb      	ldrb	r3, [r7, #11]
 8004f7c:	2b06      	cmp	r3, #6
 8004f7e:	d10d      	bne.n	8004f9c <FreqO_ApplyProfile+0x58>
		{
			// duty cycle of PWM require slower settings to get the
			// same frequency as normal output functions
			PWM_AUX_OUT_TIM->PSC = 256;
 8004f80:	4b0d      	ldr	r3, [pc, #52]	; (8004fb8 <FreqO_ApplyProfile+0x74>)
 8004f82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f86:	629a      	str	r2, [r3, #40]	; 0x28
			PWM_AUX_OUT_TIM->ARR = tmpFreqProfile->arr/2;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	4a0a      	ldr	r2, [pc, #40]	; (8004fb8 <FreqO_ApplyProfile+0x74>)
 8004f8e:	085b      	lsrs	r3, r3, #1
 8004f90:	62d3      	str	r3, [r2, #44]	; 0x2c
			PWM_AUX_OUT_TIM->CCR1 = PWM_AUX_OUT_TIM->ARR/2;
 8004f92:	4b09      	ldr	r3, [pc, #36]	; (8004fb8 <FreqO_ApplyProfile+0x74>)
 8004f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f96:	4a08      	ldr	r2, [pc, #32]	; (8004fb8 <FreqO_ApplyProfile+0x74>)
 8004f98:	085b      	lsrs	r3, r3, #1
 8004f9a:	6353      	str	r3, [r2, #52]	; 0x34
		}

		freq_profile = tmpFreqProfile;
 8004f9c:	4a07      	ldr	r2, [pc, #28]	; (8004fbc <FreqO_ApplyProfile+0x78>)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6013      	str	r3, [r2, #0]
	}
	else
	{
		DM_SetErrorDebugMsg("FreqO_ApplyProfile() null pointer error");
	}
}
 8004fa2:	e002      	b.n	8004faa <FreqO_ApplyProfile+0x66>
		DM_SetErrorDebugMsg("FreqO_ApplyProfile() null pointer error");
 8004fa4:	4806      	ldr	r0, [pc, #24]	; (8004fc0 <FreqO_ApplyProfile+0x7c>)
 8004fa6:	f7fc fabf 	bl	8001528 <DM_SetErrorDebugMsg>
}
 8004faa:	bf00      	nop
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	40013400 	.word	0x40013400
 8004fb8:	40000400 	.word	0x40000400
 8004fbc:	2000011c 	.word	0x2000011c
 8004fc0:	080139f8 	.word	0x080139f8

08004fc4 <FreqO_AdjustFreq>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustFreq()
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0

		OUTPUT_TIMER->ARR = SM_GetEncoderValue(ENCODER_FORWARD); //* FREQ_ENCODER_MIDFREQ_MAG;
 8004fca:	2000      	movs	r0, #0
 8004fcc:	f001 f86a 	bl	80060a4 <SM_GetEncoderValue>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	4b10      	ldr	r3, [pc, #64]	; (8005018 <FreqO_AdjustFreq+0x54>)
 8004fd6:	62da      	str	r2, [r3, #44]	; 0x2c

		eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8004fd8:	2001      	movs	r0, #1
 8004fda:	f000 fde7 	bl	8005bac <SM_GetOutputChannel>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	71fb      	strb	r3, [r7, #7]
		if(tmpOut == PWM_FUNC_MODE)
 8004fe8:	79fb      	ldrb	r3, [r7, #7]
 8004fea:	2b06      	cmp	r3, #6
 8004fec:	d110      	bne.n	8005010 <FreqO_AdjustFreq+0x4c>
		{
			// duty cycle of PWM require slower settings to get the
			// same frequency as normal output functions
			PWM_AUX_OUT_TIM->PSC = 256;
 8004fee:	4b0b      	ldr	r3, [pc, #44]	; (800501c <FreqO_AdjustFreq+0x58>)
 8004ff0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ff4:	629a      	str	r2, [r3, #40]	; 0x28
			PWM_AUX_OUT_TIM->ARR = SM_GetEncoderValue(ENCODER_FORWARD)/2;
 8004ff6:	2000      	movs	r0, #0
 8004ff8:	f001 f854 	bl	80060a4 <SM_GetEncoderValue>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	085b      	lsrs	r3, r3, #1
 8005000:	b29a      	uxth	r2, r3
 8005002:	4b06      	ldr	r3, [pc, #24]	; (800501c <FreqO_AdjustFreq+0x58>)
 8005004:	62da      	str	r2, [r3, #44]	; 0x2c
			PWM_AUX_OUT_TIM->CCR1 = PWM_AUX_OUT_TIM->ARR/2;
 8005006:	4b05      	ldr	r3, [pc, #20]	; (800501c <FreqO_AdjustFreq+0x58>)
 8005008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500a:	4a04      	ldr	r2, [pc, #16]	; (800501c <FreqO_AdjustFreq+0x58>)
 800500c:	085b      	lsrs	r3, r3, #1
 800500e:	6353      	str	r3, [r2, #52]	; 0x34

		}
}
 8005010:	bf00      	nop
 8005012:	3708      	adds	r7, #8
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	40013400 	.word	0x40013400
 800501c:	40000400 	.word	0x40000400

08005020 <FreqO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_GetFPresetObject()
{
 8005020:	b480      	push	{r7}
 8005022:	af00      	add	r7, sp, #0
	return freq_profile;
 8005024:	4b03      	ldr	r3, [pc, #12]	; (8005034 <FreqO_GetFPresetObject+0x14>)
 8005026:	681b      	ldr	r3, [r3, #0]
}
 8005028:	4618      	mov	r0, r3
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	2000011c 	.word	0x2000011c

08005038 <FreqO_FindFPresetObject>:

 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_FindFPresetObject(eFreqSettings_t pEnum)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8005040:	2300      	movs	r3, #0
 8005042:	60fb      	str	r3, [r7, #12]
 8005044:	e016      	b.n	8005074 <FreqO_FindFPresetObject+0x3c>
	{
		if(theFreqProfiles[i].hertz == pEnum)
 8005046:	4911      	ldr	r1, [pc, #68]	; (800508c <FreqO_FindFPresetObject+0x54>)
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	4613      	mov	r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	4413      	add	r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	440b      	add	r3, r1
 8005054:	3304      	adds	r3, #4
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	429a      	cmp	r2, r3
 800505c:	d107      	bne.n	800506e <FreqO_FindFPresetObject+0x36>
		{
			return &theFreqProfiles[i];
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	4613      	mov	r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	4413      	add	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4a08      	ldr	r2, [pc, #32]	; (800508c <FreqO_FindFPresetObject+0x54>)
 800506a:	4413      	add	r3, r2
 800506c:	e009      	b.n	8005082 <FreqO_FindFPresetObject+0x4a>
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	3301      	adds	r3, #1
 8005072:	60fb      	str	r3, [r7, #12]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2b0d      	cmp	r3, #13
 8005078:	dde5      	ble.n	8005046 <FreqO_FindFPresetObject+0xe>
		}
	}
	// error!
	DM_SetErrorDebugMsg("FreqO_FindFPresetObject(): no FPreset obj found");
 800507a:	4805      	ldr	r0, [pc, #20]	; (8005090 <FreqO_FindFPresetObject+0x58>)
 800507c:	f7fc fa54 	bl	8001528 <DM_SetErrorDebugMsg>
	return 0;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	20000004 	.word	0x20000004
 8005090:	08013a20 	.word	0x08013a20

08005094 <FreqO_GetProfileByIndex>:
 *	@param pIndex
 *	@retval pointer to FreqProfile_t object
 *
 */
FreqProfile_t* FreqO_GetProfileByIndex(uint32_t pIndex)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
	return &theFreqProfiles[pIndex];
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	4613      	mov	r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	4413      	add	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4a04      	ldr	r2, [pc, #16]	; (80050b8 <FreqO_GetProfileByIndex+0x24>)
 80050a8:	4413      	add	r3, r2
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	370c      	adds	r7, #12
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	20000004 	.word	0x20000004

080050bc <FreqO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_ResetLastEncoderValue()
{
 80050bc:	b480      	push	{r7}
 80050be:	af00      	add	r7, sp, #0
	freq_last_encoder_value = 0;
 80050c0:	4b03      	ldr	r3, [pc, #12]	; (80050d0 <FreqO_ResetLastEncoderValue+0x14>)
 80050c2:	2200      	movs	r2, #0
 80050c4:	801a      	strh	r2, [r3, #0]
}
 80050c6:	bf00      	nop
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr
 80050d0:	20001e66 	.word	0x20001e66

080050d4 <FS_SetSweepModeDown>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepModeDown()
{
 80050d4:	b480      	push	{r7}
 80050d6:	af00      	add	r7, sp, #0
	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 80050d8:	4b10      	ldr	r3, [pc, #64]	; (800511c <FS_SetSweepModeDown+0x48>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a0f      	ldr	r2, [pc, #60]	; (800511c <FS_SetSweepModeDown+0x48>)
 80050de:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80050e2:	6013      	str	r3, [r2, #0]

	// 0: Counter used as upcounter
	SWEEP_TIMER->CR1 |= (TIM_CR1_DIR);
 80050e4:	4b0d      	ldr	r3, [pc, #52]	; (800511c <FS_SetSweepModeDown+0x48>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a0c      	ldr	r2, [pc, #48]	; (800511c <FS_SetSweepModeDown+0x48>)
 80050ea:	f043 0310 	orr.w	r3, r3, #16
 80050ee:	6013      	str	r3, [r2, #0]

	sweep_lower_bounds_shortest_output_arr  = OUTPUT_TIMER->ARR;
 80050f0:	4b0b      	ldr	r3, [pc, #44]	; (8005120 <FS_SetSweepModeDown+0x4c>)
 80050f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f4:	ee07 3a90 	vmov	s15, r3
 80050f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050fc:	4b09      	ldr	r3, [pc, #36]	; (8005124 <FS_SetSweepModeDown+0x50>)
 80050fe:	edc3 7a00 	vstr	s15, [r3]
	sweep_upper_bounds_longest_output_arr  = MAX_OUTPUT_ARR;
 8005102:	4b09      	ldr	r3, [pc, #36]	; (8005128 <FS_SetSweepModeDown+0x54>)
 8005104:	4a09      	ldr	r2, [pc, #36]	; (800512c <FS_SetSweepModeDown+0x58>)
 8005106:	601a      	str	r2, [r3, #0]
	ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 8005108:	4b09      	ldr	r3, [pc, #36]	; (8005130 <FS_SetSweepModeDown+0x5c>)
 800510a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800510e:	625a      	str	r2, [r3, #36]	; 0x24

}
 8005110:	bf00      	nop
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	40000c00 	.word	0x40000c00
 8005120:	40013400 	.word	0x40013400
 8005124:	20000120 	.word	0x20000120
 8005128:	20000124 	.word	0x20000124
 800512c:	477fff00 	.word	0x477fff00
 8005130:	40012c00 	.word	0x40012c00

08005134 <FS_SetSweepModeUp>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepModeUp()
{
 8005134:	b480      	push	{r7}
 8005136:	af00      	add	r7, sp, #0

	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 8005138:	4b0e      	ldr	r3, [pc, #56]	; (8005174 <FS_SetSweepModeUp+0x40>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a0d      	ldr	r2, [pc, #52]	; (8005174 <FS_SetSweepModeUp+0x40>)
 800513e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005142:	6013      	str	r3, [r2, #0]

	// 1: Counter used as downcounter
	SWEEP_TIMER->CR1 &= ~(TIM_CR1_DIR);
 8005144:	4b0b      	ldr	r3, [pc, #44]	; (8005174 <FS_SetSweepModeUp+0x40>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a0a      	ldr	r2, [pc, #40]	; (8005174 <FS_SetSweepModeUp+0x40>)
 800514a:	f023 0310 	bic.w	r3, r3, #16
 800514e:	6013      	str	r3, [r2, #0]

	sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 8005150:	4b09      	ldr	r3, [pc, #36]	; (8005178 <FS_SetSweepModeUp+0x44>)
 8005152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005154:	ee07 3a90 	vmov	s15, r3
 8005158:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800515c:	4b07      	ldr	r3, [pc, #28]	; (800517c <FS_SetSweepModeUp+0x48>)
 800515e:	edc3 7a00 	vstr	s15, [r3]
	sweep_lower_bounds_shortest_output_arr  = MIN_OUTPUT_ARR;
 8005162:	4b07      	ldr	r3, [pc, #28]	; (8005180 <FS_SetSweepModeUp+0x4c>)
 8005164:	4a07      	ldr	r2, [pc, #28]	; (8005184 <FS_SetSweepModeUp+0x50>)
 8005166:	601a      	str	r2, [r3, #0]


}
 8005168:	bf00      	nop
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	40000c00 	.word	0x40000c00
 8005178:	40013400 	.word	0x40013400
 800517c:	20000124 	.word	0x20000124
 8005180:	20000120 	.word	0x20000120
 8005184:	41500000 	.word	0x41500000

08005188 <FS_SetEncoderControlMode>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetEncoderControlMode(eEncoderSweepFunctions pFunction)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	4603      	mov	r3, r0
 8005190:	71fb      	strb	r3, [r7, #7]
	if(pFunction)
 8005192:	79fb      	ldrb	r3, [r7, #7]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d038      	beq.n	800520a <FS_SetEncoderControlMode+0x82>
	{
		//	ENCODER_SWEEP_LIMIT_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 8005198:	4a24      	ldr	r2, [pc, #144]	; (800522c <FS_SetEncoderControlMode+0xa4>)
 800519a:	79fb      	ldrb	r3, [r7, #7]
 800519c:	7013      	strb	r3, [r2, #0]
		ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 800519e:	4b24      	ldr	r3, [pc, #144]	; (8005230 <FS_SetEncoderControlMode+0xa8>)
 80051a0:	220d      	movs	r2, #13
 80051a2:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_OUTPUT_ARR;
 80051a4:	4b22      	ldr	r3, [pc, #136]	; (8005230 <FS_SetEncoderControlMode+0xa8>)
 80051a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051aa:	62da      	str	r2, [r3, #44]	; 0x2c

		switch(active_sweep_mode)
 80051ac:	4b21      	ldr	r3, [pc, #132]	; (8005234 <FS_SetEncoderControlMode+0xac>)
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d002      	beq.n	80051ba <FS_SetEncoderControlMode+0x32>
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d014      	beq.n	80051e2 <FS_SetEncoderControlMode+0x5a>
					// if encoder position is below the lower bounds set it above it
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
				break;
			default:
				break;
 80051b8:	e031      	b.n	800521e <FS_SetEncoderControlMode+0x96>
					if(ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 80051ba:	4b1d      	ldr	r3, [pc, #116]	; (8005230 <FS_SetEncoderControlMode+0xa8>)
 80051bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051be:	ee07 3a90 	vmov	s15, r3
 80051c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80051c6:	4b1c      	ldr	r3, [pc, #112]	; (8005238 <FS_SetEncoderControlMode+0xb0>)
 80051c8:	edd3 7a00 	vldr	s15, [r3]
 80051cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051d4:	dc00      	bgt.n	80051d8 <FS_SetEncoderControlMode+0x50>
				break;
 80051d6:	e022      	b.n	800521e <FS_SetEncoderControlMode+0x96>
						 ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 80051d8:	4b18      	ldr	r3, [pc, #96]	; (800523c <FS_SetEncoderControlMode+0xb4>)
 80051da:	4a15      	ldr	r2, [pc, #84]	; (8005230 <FS_SetEncoderControlMode+0xa8>)
 80051dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051de:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 80051e0:	e01d      	b.n	800521e <FS_SetEncoderControlMode+0x96>
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 80051e2:	4b13      	ldr	r3, [pc, #76]	; (8005230 <FS_SetEncoderControlMode+0xa8>)
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	ee07 3a90 	vmov	s15, r3
 80051ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80051ee:	4b14      	ldr	r3, [pc, #80]	; (8005240 <FS_SetEncoderControlMode+0xb8>)
 80051f0:	edd3 7a00 	vldr	s15, [r3]
 80051f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051fc:	d400      	bmi.n	8005200 <FS_SetEncoderControlMode+0x78>
				break;
 80051fe:	e00e      	b.n	800521e <FS_SetEncoderControlMode+0x96>
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8005200:	4b0e      	ldr	r3, [pc, #56]	; (800523c <FS_SetEncoderControlMode+0xb4>)
 8005202:	4a0b      	ldr	r2, [pc, #44]	; (8005230 <FS_SetEncoderControlMode+0xa8>)
 8005204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005206:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 8005208:	e009      	b.n	800521e <FS_SetEncoderControlMode+0x96>
		// switch(active_sweep_mode)
	}
	else
	{
		// ENCODER_SWEEP_SPEED_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 800520a:	4a08      	ldr	r2, [pc, #32]	; (800522c <FS_SetEncoderControlMode+0xa4>)
 800520c:	79fb      	ldrb	r3, [r7, #7]
 800520e:	7013      	strb	r3, [r2, #0]
		// encoder start value
		ENCODER_TIMER->CNT = 1;
 8005210:	4b07      	ldr	r3, [pc, #28]	; (8005230 <FS_SetEncoderControlMode+0xa8>)
 8005212:	2201      	movs	r2, #1
 8005214:	625a      	str	r2, [r3, #36]	; 0x24
		// encoder limit for default (set speed)
		ENCODER_TIMER->ARR = 1600;
 8005216:	4b06      	ldr	r3, [pc, #24]	; (8005230 <FS_SetEncoderControlMode+0xa8>)
 8005218:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800521c:	62da      	str	r2, [r3, #44]	; 0x2c
	}

}
 800521e:	bf00      	nop
 8005220:	370c      	adds	r7, #12
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	20001e55 	.word	0x20001e55
 8005230:	40012c00 	.word	0x40012c00
 8005234:	20001e54 	.word	0x20001e54
 8005238:	20000124 	.word	0x20000124
 800523c:	40013400 	.word	0x40013400
 8005240:	20000120 	.word	0x20000120
 8005244:	00000000 	.word	0x00000000

08005248 <FS_SetSweepTimerAutoReloadForEncoderControl>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepTimerAutoReloadForEncoderControl(eEncoderSweepFunctions pFunction)
{
 8005248:	b590      	push	{r4, r7, lr}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	4603      	mov	r3, r0
 8005250:	71fb      	strb	r3, [r7, #7]
	uint32_t next_sweep_tim_arr;

	if(pFunction)
 8005252:	79fb      	ldrb	r3, [r7, #7]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d122      	bne.n	800529e <FS_SetSweepTimerAutoReloadForEncoderControl+0x56>

	}
	else
	{
		// get logarithmic curve to speed up turns at low end
		next_sweep_tim_arr = MIN_SWEEP_ARR + (pow(ENCODER_TIMER->CNT, 3));
 8005258:	4b17      	ldr	r3, [pc, #92]	; (80052b8 <FS_SetSweepTimerAutoReloadForEncoderControl+0x70>)
 800525a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525c:	4618      	mov	r0, r3
 800525e:	f7fb f979 	bl	8000554 <__aeabi_ui2d>
 8005262:	4603      	mov	r3, r0
 8005264:	460c      	mov	r4, r1
 8005266:	ed9f 1b10 	vldr	d1, [pc, #64]	; 80052a8 <FS_SetSweepTimerAutoReloadForEncoderControl+0x60>
 800526a:	ec44 3b10 	vmov	d0, r3, r4
 800526e:	f00c fe57 	bl	8011f20 <pow>
 8005272:	ec51 0b10 	vmov	r0, r1, d0
 8005276:	a30e      	add	r3, pc, #56	; (adr r3, 80052b0 <FS_SetSweepTimerAutoReloadForEncoderControl+0x68>)
 8005278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527c:	f7fb f82e 	bl	80002dc <__adddf3>
 8005280:	4603      	mov	r3, r0
 8005282:	460c      	mov	r4, r1
 8005284:	4618      	mov	r0, r3
 8005286:	4621      	mov	r1, r4
 8005288:	f7fb fcb6 	bl	8000bf8 <__aeabi_d2uiz>
 800528c:	4603      	mov	r3, r0
 800528e:	60fb      	str	r3, [r7, #12]

		if(next_sweep_tim_arr < 0xFFFFFFFF)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005296:	d002      	beq.n	800529e <FS_SetSweepTimerAutoReloadForEncoderControl+0x56>
		{
			SWEEP_TIMER->ARR = next_sweep_tim_arr;
 8005298:	4a08      	ldr	r2, [pc, #32]	; (80052bc <FS_SetSweepTimerAutoReloadForEncoderControl+0x74>)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	62d3      	str	r3, [r2, #44]	; 0x2c

		}
	}
}
 800529e:	bf00      	nop
 80052a0:	3714      	adds	r7, #20
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd90      	pop	{r4, r7, pc}
 80052a6:	bf00      	nop
 80052a8:	00000000 	.word	0x00000000
 80052ac:	40080000 	.word	0x40080000
 80052b0:	00000000 	.word	0x00000000
 80052b4:	40d06800 	.word	0x40d06800
 80052b8:	40012c00 	.word	0x40012c00
 80052bc:	40000c00 	.word	0x40000c00

080052c0 <FS_GetCalculatedSweepFrequencyInHertz>:
 *	@param None
 *	@retval None
 *
 */
float FS_GetCalculatedSweepFrequencyInHertz()
{
 80052c0:	b480      	push	{r7}
 80052c2:	af00      	add	r7, sp, #0
	if(SWEEP_TIMER->PSC == 0)
 80052c4:	4b13      	ldr	r3, [pc, #76]	; (8005314 <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 80052c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d10a      	bne.n	80052e2 <FS_GetCalculatedSweepFrequencyInHertz+0x22>
	{
		return (float)SM_MCLK / ((float)1 * (float)SWEEP_TIMER->ARR);
 80052cc:	4b11      	ldr	r3, [pc, #68]	; (8005314 <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 80052ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d0:	ee07 3a90 	vmov	s15, r3
 80052d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80052d8:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8005318 <FS_GetCalculatedSweepFrequencyInHertz+0x58>
 80052dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052e0:	e011      	b.n	8005306 <FS_GetCalculatedSweepFrequencyInHertz+0x46>
	}
	else
	{
		return (float)SM_MCLK / ((float)SWEEP_TIMER->PSC * (float)SWEEP_TIMER->ARR);
 80052e2:	4b0c      	ldr	r3, [pc, #48]	; (8005314 <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 80052e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e6:	ee07 3a90 	vmov	s15, r3
 80052ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80052ee:	4b09      	ldr	r3, [pc, #36]	; (8005314 <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 80052f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f2:	ee07 3a90 	vmov	s15, r3
 80052f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80052fe:	eddf 6a06 	vldr	s13, [pc, #24]	; 8005318 <FS_GetCalculatedSweepFrequencyInHertz+0x58>
 8005302:	eec6 7a87 	vdiv.f32	s15, s13, s14
	}

}
 8005306:	eeb0 0a67 	vmov.f32	s0, s15
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	40000c00 	.word	0x40000c00
 8005318:	4d2037a0 	.word	0x4d2037a0

0800531c <FuncO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void FuncO_ResetLastEncoderValue()
{
 800531c:	b480      	push	{r7}
 800531e:	af00      	add	r7, sp, #0
	func_last_encoder_value = 0;
 8005320:	4b03      	ldr	r3, [pc, #12]	; (8005330 <FuncO_ResetLastEncoderValue+0x14>)
 8005322:	2200      	movs	r2, #0
 8005324:	801a      	strh	r2, [r3, #0]
}
 8005326:	bf00      	nop
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	20001e92 	.word	0x20001e92

08005334 <FuncO_MapEncoderPositionToSignalOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	4603      	mov	r3, r0
 800533c:	80fb      	strh	r3, [r7, #6]
	eOutput_mode tmpFunc = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 800533e:	2000      	movs	r0, #0
 8005340:	f000 fc34 	bl	8005bac <SM_GetOutputChannel>
 8005344:	4603      	mov	r3, r0
 8005346:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > func_last_encoder_value)
 800534e:	4b15      	ldr	r3, [pc, #84]	; (80053a4 <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005350:	881b      	ldrh	r3, [r3, #0]
 8005352:	88fa      	ldrh	r2, [r7, #6]
 8005354:	429a      	cmp	r2, r3
 8005356:	d90c      	bls.n	8005372 <FuncO_MapEncoderPositionToSignalOutput+0x3e>
	{
		tmpFunc++;
 8005358:	7bfb      	ldrb	r3, [r7, #15]
 800535a:	3301      	adds	r3, #1
 800535c:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-2) tmpFunc = IMPULSE_FUNC_MODE;
 800535e:	7bfb      	ldrb	r3, [r7, #15]
 8005360:	2b05      	cmp	r3, #5
 8005362:	d901      	bls.n	8005368 <FuncO_MapEncoderPositionToSignalOutput+0x34>
 8005364:	2305      	movs	r3, #5
 8005366:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToSignal(tmpFunc);
 8005368:	7bfb      	ldrb	r3, [r7, #15]
 800536a:	4618      	mov	r0, r3
 800536c:	f000 f856 	bl	800541c <FuncO_ApplyProfileToSignal>
 8005370:	e010      	b.n	8005394 <FuncO_MapEncoderPositionToSignalOutput+0x60>
	}
	else if (pEncoderValue < func_last_encoder_value)
 8005372:	4b0c      	ldr	r3, [pc, #48]	; (80053a4 <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005374:	881b      	ldrh	r3, [r3, #0]
 8005376:	88fa      	ldrh	r2, [r7, #6]
 8005378:	429a      	cmp	r2, r3
 800537a:	d20b      	bcs.n	8005394 <FuncO_MapEncoderPositionToSignalOutput+0x60>
	{
		tmpFunc--;
 800537c:	7bfb      	ldrb	r3, [r7, #15]
 800537e:	3b01      	subs	r3, #1
 8005380:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = SINE_FUNC_MODE;
 8005382:	7bfb      	ldrb	r3, [r7, #15]
 8005384:	2b06      	cmp	r3, #6
 8005386:	d901      	bls.n	800538c <FuncO_MapEncoderPositionToSignalOutput+0x58>
 8005388:	2300      	movs	r3, #0
 800538a:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToSignal(tmpFunc);
 800538c:	7bfb      	ldrb	r3, [r7, #15]
 800538e:	4618      	mov	r0, r3
 8005390:	f000 f844 	bl	800541c <FuncO_ApplyProfileToSignal>
	}
	func_last_encoder_value = pEncoderValue;
 8005394:	4a03      	ldr	r2, [pc, #12]	; (80053a4 <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005396:	88fb      	ldrh	r3, [r7, #6]
 8005398:	8013      	strh	r3, [r2, #0]
}
 800539a:	bf00      	nop
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	20001e92 	.word	0x20001e92

080053a8 <FuncO_MapEncoderPositionToAuxOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_MapEncoderPositionToAuxOutput(uint16_t pEncoderValue)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	4603      	mov	r3, r0
 80053b0:	80fb      	strh	r3, [r7, #6]
	eOutput_mode tmpFunc = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 80053b2:	2001      	movs	r0, #1
 80053b4:	f000 fbfa 	bl	8005bac <SM_GetOutputChannel>
 80053b8:	4603      	mov	r3, r0
 80053ba:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > func_last_encoder_value)
 80053c2:	4b15      	ldr	r3, [pc, #84]	; (8005418 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 80053c4:	881b      	ldrh	r3, [r3, #0]
 80053c6:	88fa      	ldrh	r2, [r7, #6]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d90c      	bls.n	80053e6 <FuncO_MapEncoderPositionToAuxOutput+0x3e>
	{
		tmpFunc++;
 80053cc:	7bfb      	ldrb	r3, [r7, #15]
 80053ce:	3301      	adds	r3, #1
 80053d0:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = PWM_FUNC_MODE;
 80053d2:	7bfb      	ldrb	r3, [r7, #15]
 80053d4:	2b06      	cmp	r3, #6
 80053d6:	d901      	bls.n	80053dc <FuncO_MapEncoderPositionToAuxOutput+0x34>
 80053d8:	2306      	movs	r3, #6
 80053da:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToAux(tmpFunc);
 80053dc:	7bfb      	ldrb	r3, [r7, #15]
 80053de:	4618      	mov	r0, r3
 80053e0:	f000 f880 	bl	80054e4 <FuncO_ApplyProfileToAux>
 80053e4:	e010      	b.n	8005408 <FuncO_MapEncoderPositionToAuxOutput+0x60>
	}
	else if (pEncoderValue < func_last_encoder_value)
 80053e6:	4b0c      	ldr	r3, [pc, #48]	; (8005418 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 80053e8:	881b      	ldrh	r3, [r3, #0]
 80053ea:	88fa      	ldrh	r2, [r7, #6]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d20b      	bcs.n	8005408 <FuncO_MapEncoderPositionToAuxOutput+0x60>
	{
		tmpFunc--;
 80053f0:	7bfb      	ldrb	r3, [r7, #15]
 80053f2:	3b01      	subs	r3, #1
 80053f4:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = SINE_FUNC_MODE;
 80053f6:	7bfb      	ldrb	r3, [r7, #15]
 80053f8:	2b06      	cmp	r3, #6
 80053fa:	d901      	bls.n	8005400 <FuncO_MapEncoderPositionToAuxOutput+0x58>
 80053fc:	2300      	movs	r3, #0
 80053fe:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToAux(tmpFunc);
 8005400:	7bfb      	ldrb	r3, [r7, #15]
 8005402:	4618      	mov	r0, r3
 8005404:	f000 f86e 	bl	80054e4 <FuncO_ApplyProfileToAux>
//		if(tmpFunc == SINE_FUNC_MODE)
//			ENCODER_TIMER->CNT = 20;
	}
	func_last_encoder_value = pEncoderValue;
 8005408:	4a03      	ldr	r2, [pc, #12]	; (8005418 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 800540a:	88fb      	ldrh	r3, [r7, #6]
 800540c:	8013      	strh	r3, [r2, #0]
}
 800540e:	bf00      	nop
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	20001e92 	.word	0x20001e92

0800541c <FuncO_ApplyProfileToSignal>:

 *	@retval None
 *
 */
void FuncO_ApplyProfileToSignal(eOutput_mode pPresetEnum)
{
 800541c:	b590      	push	{r4, r7, lr}
 800541e:	b087      	sub	sp, #28
 8005420:	af02      	add	r7, sp, #8
 8005422:	4603      	mov	r3, r0
 8005424:	71fb      	strb	r3, [r7, #7]
	// set the next function output
	SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 8005426:	79fc      	ldrb	r4, [r7, #7]
 8005428:	2000      	movs	r0, #0
 800542a:	f000 fbbf 	bl	8005bac <SM_GetOutputChannel>
 800542e:	4601      	mov	r1, r0
 8005430:	00e3      	lsls	r3, r4, #3
 8005432:	4a27      	ldr	r2, [pc, #156]	; (80054d0 <FuncO_ApplyProfileToSignal+0xb4>)
 8005434:	4413      	add	r3, r2
 8005436:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8


	// copy the lookup table for the next output function in to SignalChannel object
	printf("SM_GetOutputChannel\n");
 800543a:	4826      	ldr	r0, [pc, #152]	; (80054d4 <FuncO_ApplyProfileToSignal+0xb8>)
 800543c:	f00a fc56 	bl	800fcec <puts>
	SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8005440:	79fc      	ldrb	r4, [r7, #7]
 8005442:	2000      	movs	r0, #0
 8005444:	f000 fbb2 	bl	8005bac <SM_GetOutputChannel>
 8005448:	4601      	mov	r1, r0
 800544a:	4a21      	ldr	r2, [pc, #132]	; (80054d0 <FuncO_ApplyProfileToSignal+0xb4>)
 800544c:	00e3      	lsls	r3, r4, #3
 800544e:	4413      	add	r3, r2
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	604b      	str	r3, [r1, #4]

	// set preset for PGA gain and dsp amplitude adjustment
	eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 8005454:	2000      	movs	r0, #0
 8005456:	f000 fba9 	bl	8005bac <SM_GetOutputChannel>
 800545a:	4603      	mov	r3, r0
 800545c:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	73fb      	strb	r3, [r7, #15]
	VPP_ApplyProfileToSignal(eTmpVppPreset);
 8005464:	7bfb      	ldrb	r3, [r7, #15]
 8005466:	4618      	mov	r0, r3
 8005468:	f000 fed6 	bl	8006218 <VPP_ApplyProfileToSignal>

	// pause timer to reAux both outputs
	OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 800546c:	4b1a      	ldr	r3, [pc, #104]	; (80054d8 <FuncO_ApplyProfileToSignal+0xbc>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a19      	ldr	r2, [pc, #100]	; (80054d8 <FuncO_ApplyProfileToSignal+0xbc>)
 8005472:	f023 0301 	bic.w	r3, r3, #1
 8005476:	6013      	str	r3, [r2, #0]
	//HAL_TIM_Base_Stop(&htim8);

	// restart the DAC with the new data
	HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8005478:	2100      	movs	r1, #0
 800547a:	4818      	ldr	r0, [pc, #96]	; (80054dc <FuncO_ApplyProfileToSignal+0xc0>)
 800547c:	f004 fc3a 	bl	8009cf4 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005480:	2000      	movs	r0, #0
 8005482:	f000 fb93 	bl	8005bac <SM_GetOutputChannel>
 8005486:	4603      	mov	r3, r0
 8005488:	f103 0208 	add.w	r2, r3, #8
 800548c:	2300      	movs	r3, #0
 800548e:	9300      	str	r3, [sp, #0]
 8005490:	2378      	movs	r3, #120	; 0x78
 8005492:	2100      	movs	r1, #0
 8005494:	4811      	ldr	r0, [pc, #68]	; (80054dc <FuncO_ApplyProfileToSignal+0xc0>)
 8005496:	f004 fb6b 	bl	8009b70 <HAL_DAC_Start_DMA>

	// restart the the other DAC
	HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 800549a:	2100      	movs	r1, #0
 800549c:	4810      	ldr	r0, [pc, #64]	; (80054e0 <FuncO_ApplyProfileToSignal+0xc4>)
 800549e:	f004 fc29 	bl	8009cf4 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80054a2:	2001      	movs	r0, #1
 80054a4:	f000 fb82 	bl	8005bac <SM_GetOutputChannel>
 80054a8:	4603      	mov	r3, r0
 80054aa:	f103 0208 	add.w	r2, r3, #8
 80054ae:	2300      	movs	r3, #0
 80054b0:	9300      	str	r3, [sp, #0]
 80054b2:	2378      	movs	r3, #120	; 0x78
 80054b4:	2100      	movs	r1, #0
 80054b6:	480a      	ldr	r0, [pc, #40]	; (80054e0 <FuncO_ApplyProfileToSignal+0xc4>)
 80054b8:	f004 fb5a 	bl	8009b70 <HAL_DAC_Start_DMA>

	// resume timer to reAux both outputs
	//HAL_TIM_Base_Start(&htim8);
	OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 80054bc:	4b06      	ldr	r3, [pc, #24]	; (80054d8 <FuncO_ApplyProfileToSignal+0xbc>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a05      	ldr	r2, [pc, #20]	; (80054d8 <FuncO_ApplyProfileToSignal+0xbc>)
 80054c2:	f043 0301 	orr.w	r3, r3, #1
 80054c6:	6013      	str	r3, [r2, #0]



}
 80054c8:	bf00      	nop
 80054ca:	3714      	adds	r7, #20
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd90      	pop	{r4, r7, pc}
 80054d0:	20000128 	.word	0x20000128
 80054d4:	08013a50 	.word	0x08013a50
 80054d8:	40013400 	.word	0x40013400
 80054dc:	20002638 	.word	0x20002638
 80054e0:	20002624 	.word	0x20002624

080054e4 <FuncO_ApplyProfileToAux>:

 *	@retval None
 *
 */
void FuncO_ApplyProfileToAux(eOutput_mode pPresetEnum)
{
 80054e4:	b590      	push	{r4, r7, lr}
 80054e6:	b087      	sub	sp, #28
 80054e8:	af02      	add	r7, sp, #8
 80054ea:	4603      	mov	r3, r0
 80054ec:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef res;

	// set the next output function
	SM_GetOutputChannel(AUX_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 80054ee:	79fc      	ldrb	r4, [r7, #7]
 80054f0:	2001      	movs	r0, #1
 80054f2:	f000 fb5b 	bl	8005bac <SM_GetOutputChannel>
 80054f6:	4601      	mov	r1, r0
 80054f8:	00e3      	lsls	r3, r4, #3
 80054fa:	4a96      	ldr	r2, [pc, #600]	; (8005754 <FuncO_ApplyProfileToAux+0x270>)
 80054fc:	4413      	add	r3, r2
 80054fe:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8

	if(pPresetEnum == PWM_FUNC_MODE)
 8005502:	79fb      	ldrb	r3, [r7, #7]
 8005504:	2b06      	cmp	r3, #6
 8005506:	d10a      	bne.n	800551e <FuncO_ApplyProfileToAux+0x3a>
	{
		printf("FuncO_ApplyProfileToAux PWM_FUNC_MODE\n");
 8005508:	4893      	ldr	r0, [pc, #588]	; (8005758 <FuncO_ApplyProfileToAux+0x274>)
 800550a:	f00a fbef 	bl	800fcec <puts>
		// switch output signal from DAC to PWM

		SM_DisableDacToAux();
 800550e:	f000 fdb5 	bl	800607c <SM_DisableDacToAux>
		SM_EnablePwmToAux();
 8005512:	f000 fb61 	bl	8005bd8 <SM_EnablePwmToAux>

		last_output_mode_was_pwm = 1;
 8005516:	4b91      	ldr	r3, [pc, #580]	; (800575c <FuncO_ApplyProfileToAux+0x278>)
 8005518:	2201      	movs	r2, #1
 800551a:	701a      	strb	r2, [r3, #0]
		res = HAL_TIM_Base_Start(&htim8);
		printf("Result:%u\n",res);
		//OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
	}

}
 800551c:	e115      	b.n	800574a <FuncO_ApplyProfileToAux+0x266>
	else if(last_output_mode_was_pwm)
 800551e:	4b8f      	ldr	r3, [pc, #572]	; (800575c <FuncO_ApplyProfileToAux+0x278>)
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	f000 808e 	beq.w	8005644 <FuncO_ApplyProfileToAux+0x160>
		printf("FuncO_ApplyProfileToAux NOT PWM_FUNC_MODE\n");
 8005528:	488d      	ldr	r0, [pc, #564]	; (8005760 <FuncO_ApplyProfileToAux+0x27c>)
 800552a:	f00a fbdf 	bl	800fcec <puts>
		SM_DisablePwmToAux();
 800552e:	f000 fc8f 	bl	8005e50 <SM_DisablePwmToAux>
		SM_EnableDacToAux();
 8005532:	f000 fcc9 	bl	8005ec8 <SM_EnableDacToAux>
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8005536:	488b      	ldr	r0, [pc, #556]	; (8005764 <FuncO_ApplyProfileToAux+0x280>)
 8005538:	f00a fbd8 	bl	800fcec <puts>
		SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 800553c:	79fc      	ldrb	r4, [r7, #7]
 800553e:	2001      	movs	r0, #1
 8005540:	f000 fb34 	bl	8005bac <SM_GetOutputChannel>
 8005544:	4601      	mov	r1, r0
 8005546:	4a83      	ldr	r2, [pc, #524]	; (8005754 <FuncO_ApplyProfileToAux+0x270>)
 8005548:	00e3      	lsls	r3, r4, #3
 800554a:	4413      	add	r3, r2
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	604b      	str	r3, [r1, #4]
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8005550:	4884      	ldr	r0, [pc, #528]	; (8005764 <FuncO_ApplyProfileToAux+0x280>)
 8005552:	f00a fbcb 	bl	800fcec <puts>
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 8005556:	2001      	movs	r0, #1
 8005558:	f000 fb28 	bl	8005bac <SM_GetOutputChannel>
 800555c:	4603      	mov	r3, r0
 800555e:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	737b      	strb	r3, [r7, #13]
		printf("VPP_ApplyProfileToAux");
 8005566:	4880      	ldr	r0, [pc, #512]	; (8005768 <FuncO_ApplyProfileToAux+0x284>)
 8005568:	f00a fb4c 	bl	800fc04 <iprintf>
		VPP_ApplyProfileToAux(eTmpVppPreset);
 800556c:	7b7b      	ldrb	r3, [r7, #13]
 800556e:	4618      	mov	r0, r3
 8005570:	f000 fe80 	bl	8006274 <VPP_ApplyProfileToAux>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Stop(&htim8)\n");
 8005574:	487d      	ldr	r0, [pc, #500]	; (800576c <FuncO_ApplyProfileToAux+0x288>)
 8005576:	f00a fbb9 	bl	800fcec <puts>
		res = HAL_TIM_Base_Stop(&htim8);
 800557a:	487d      	ldr	r0, [pc, #500]	; (8005770 <FuncO_ApplyProfileToAux+0x28c>)
 800557c:	f006 fcf0 	bl	800bf60 <HAL_TIM_Base_Stop>
 8005580:	4603      	mov	r3, r0
 8005582:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005584:	7bbb      	ldrb	r3, [r7, #14]
 8005586:	4619      	mov	r1, r3
 8005588:	487a      	ldr	r0, [pc, #488]	; (8005774 <FuncO_ApplyProfileToAux+0x290>)
 800558a:	f00a fb3b 	bl	800fc04 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 800558e:	487a      	ldr	r0, [pc, #488]	; (8005778 <FuncO_ApplyProfileToAux+0x294>)
 8005590:	f00a fbac 	bl	800fcec <puts>
		res = HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8005594:	2100      	movs	r1, #0
 8005596:	4879      	ldr	r0, [pc, #484]	; (800577c <FuncO_ApplyProfileToAux+0x298>)
 8005598:	f004 fbac 	bl	8009cf4 <HAL_DAC_Stop_DMA>
 800559c:	4603      	mov	r3, r0
 800559e:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 80055a0:	7bbb      	ldrb	r3, [r7, #14]
 80055a2:	4619      	mov	r1, r3
 80055a4:	4873      	ldr	r0, [pc, #460]	; (8005774 <FuncO_ApplyProfileToAux+0x290>)
 80055a6:	f00a fb2d 	bl	800fc04 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 80055aa:	4875      	ldr	r0, [pc, #468]	; (8005780 <FuncO_ApplyProfileToAux+0x29c>)
 80055ac:	f00a fb9e 	bl	800fcec <puts>
		res = HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80055b0:	2001      	movs	r0, #1
 80055b2:	f000 fafb 	bl	8005bac <SM_GetOutputChannel>
 80055b6:	4603      	mov	r3, r0
 80055b8:	f103 0208 	add.w	r2, r3, #8
 80055bc:	2300      	movs	r3, #0
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	2378      	movs	r3, #120	; 0x78
 80055c2:	2100      	movs	r1, #0
 80055c4:	486d      	ldr	r0, [pc, #436]	; (800577c <FuncO_ApplyProfileToAux+0x298>)
 80055c6:	f004 fad3 	bl	8009b70 <HAL_DAC_Start_DMA>
 80055ca:	4603      	mov	r3, r0
 80055cc:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 80055ce:	7bbb      	ldrb	r3, [r7, #14]
 80055d0:	4619      	mov	r1, r3
 80055d2:	4868      	ldr	r0, [pc, #416]	; (8005774 <FuncO_ApplyProfileToAux+0x290>)
 80055d4:	f00a fb16 	bl	800fc04 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 80055d8:	486a      	ldr	r0, [pc, #424]	; (8005784 <FuncO_ApplyProfileToAux+0x2a0>)
 80055da:	f00a fb87 	bl	800fcec <puts>
		res = HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80055de:	2100      	movs	r1, #0
 80055e0:	4869      	ldr	r0, [pc, #420]	; (8005788 <FuncO_ApplyProfileToAux+0x2a4>)
 80055e2:	f004 fb87 	bl	8009cf4 <HAL_DAC_Stop_DMA>
 80055e6:	4603      	mov	r3, r0
 80055e8:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 80055ea:	7bbb      	ldrb	r3, [r7, #14]
 80055ec:	4619      	mov	r1, r3
 80055ee:	4861      	ldr	r0, [pc, #388]	; (8005774 <FuncO_ApplyProfileToAux+0x290>)
 80055f0:	f00a fb08 	bl	800fc04 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 80055f4:	4865      	ldr	r0, [pc, #404]	; (800578c <FuncO_ApplyProfileToAux+0x2a8>)
 80055f6:	f00a fb79 	bl	800fcec <puts>
		res = HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80055fa:	2000      	movs	r0, #0
 80055fc:	f000 fad6 	bl	8005bac <SM_GetOutputChannel>
 8005600:	4603      	mov	r3, r0
 8005602:	f103 0208 	add.w	r2, r3, #8
 8005606:	2300      	movs	r3, #0
 8005608:	9300      	str	r3, [sp, #0]
 800560a:	2378      	movs	r3, #120	; 0x78
 800560c:	2100      	movs	r1, #0
 800560e:	485e      	ldr	r0, [pc, #376]	; (8005788 <FuncO_ApplyProfileToAux+0x2a4>)
 8005610:	f004 faae 	bl	8009b70 <HAL_DAC_Start_DMA>
 8005614:	4603      	mov	r3, r0
 8005616:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005618:	7bbb      	ldrb	r3, [r7, #14]
 800561a:	4619      	mov	r1, r3
 800561c:	4855      	ldr	r0, [pc, #340]	; (8005774 <FuncO_ApplyProfileToAux+0x290>)
 800561e:	f00a faf1 	bl	800fc04 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Start(&htim8)\n");
 8005622:	485b      	ldr	r0, [pc, #364]	; (8005790 <FuncO_ApplyProfileToAux+0x2ac>)
 8005624:	f00a fb62 	bl	800fcec <puts>
		res = HAL_TIM_Base_Start(&htim8);
 8005628:	4851      	ldr	r0, [pc, #324]	; (8005770 <FuncO_ApplyProfileToAux+0x28c>)
 800562a:	f006 fc6b 	bl	800bf04 <HAL_TIM_Base_Start>
 800562e:	4603      	mov	r3, r0
 8005630:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005632:	7bbb      	ldrb	r3, [r7, #14]
 8005634:	4619      	mov	r1, r3
 8005636:	484f      	ldr	r0, [pc, #316]	; (8005774 <FuncO_ApplyProfileToAux+0x290>)
 8005638:	f00a fae4 	bl	800fc04 <iprintf>
		last_output_mode_was_pwm = 0;
 800563c:	4b47      	ldr	r3, [pc, #284]	; (800575c <FuncO_ApplyProfileToAux+0x278>)
 800563e:	2200      	movs	r2, #0
 8005640:	701a      	strb	r2, [r3, #0]
}
 8005642:	e082      	b.n	800574a <FuncO_ApplyProfileToAux+0x266>
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8005644:	4847      	ldr	r0, [pc, #284]	; (8005764 <FuncO_ApplyProfileToAux+0x280>)
 8005646:	f00a fb51 	bl	800fcec <puts>
		SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 800564a:	79fc      	ldrb	r4, [r7, #7]
 800564c:	2001      	movs	r0, #1
 800564e:	f000 faad 	bl	8005bac <SM_GetOutputChannel>
 8005652:	4601      	mov	r1, r0
 8005654:	4a3f      	ldr	r2, [pc, #252]	; (8005754 <FuncO_ApplyProfileToAux+0x270>)
 8005656:	00e3      	lsls	r3, r4, #3
 8005658:	4413      	add	r3, r2
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	604b      	str	r3, [r1, #4]
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 800565e:	4841      	ldr	r0, [pc, #260]	; (8005764 <FuncO_ApplyProfileToAux+0x280>)
 8005660:	f00a fb44 	bl	800fcec <puts>
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 8005664:	2001      	movs	r0, #1
 8005666:	f000 faa1 	bl	8005bac <SM_GetOutputChannel>
 800566a:	4603      	mov	r3, r0
 800566c:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	73fb      	strb	r3, [r7, #15]
		printf("VPP_ApplyProfileToAux");
 8005674:	483c      	ldr	r0, [pc, #240]	; (8005768 <FuncO_ApplyProfileToAux+0x284>)
 8005676:	f00a fac5 	bl	800fc04 <iprintf>
		VPP_ApplyProfileToAux(eTmpVppPreset);
 800567a:	7bfb      	ldrb	r3, [r7, #15]
 800567c:	4618      	mov	r0, r3
 800567e:	f000 fdf9 	bl	8006274 <VPP_ApplyProfileToAux>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Stop(&htim8)\n");
 8005682:	483a      	ldr	r0, [pc, #232]	; (800576c <FuncO_ApplyProfileToAux+0x288>)
 8005684:	f00a fb32 	bl	800fcec <puts>
		res = HAL_TIM_Base_Stop(&htim8);
 8005688:	4839      	ldr	r0, [pc, #228]	; (8005770 <FuncO_ApplyProfileToAux+0x28c>)
 800568a:	f006 fc69 	bl	800bf60 <HAL_TIM_Base_Stop>
 800568e:	4603      	mov	r3, r0
 8005690:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005692:	7bbb      	ldrb	r3, [r7, #14]
 8005694:	4619      	mov	r1, r3
 8005696:	4837      	ldr	r0, [pc, #220]	; (8005774 <FuncO_ApplyProfileToAux+0x290>)
 8005698:	f00a fab4 	bl	800fc04 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 800569c:	4836      	ldr	r0, [pc, #216]	; (8005778 <FuncO_ApplyProfileToAux+0x294>)
 800569e:	f00a fb25 	bl	800fcec <puts>
		res = HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 80056a2:	2100      	movs	r1, #0
 80056a4:	4835      	ldr	r0, [pc, #212]	; (800577c <FuncO_ApplyProfileToAux+0x298>)
 80056a6:	f004 fb25 	bl	8009cf4 <HAL_DAC_Stop_DMA>
 80056aa:	4603      	mov	r3, r0
 80056ac:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 80056ae:	7bbb      	ldrb	r3, [r7, #14]
 80056b0:	4619      	mov	r1, r3
 80056b2:	4830      	ldr	r0, [pc, #192]	; (8005774 <FuncO_ApplyProfileToAux+0x290>)
 80056b4:	f00a faa6 	bl	800fc04 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 80056b8:	4831      	ldr	r0, [pc, #196]	; (8005780 <FuncO_ApplyProfileToAux+0x29c>)
 80056ba:	f00a fb17 	bl	800fcec <puts>
		res = HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80056be:	2001      	movs	r0, #1
 80056c0:	f000 fa74 	bl	8005bac <SM_GetOutputChannel>
 80056c4:	4603      	mov	r3, r0
 80056c6:	f103 0208 	add.w	r2, r3, #8
 80056ca:	2300      	movs	r3, #0
 80056cc:	9300      	str	r3, [sp, #0]
 80056ce:	2378      	movs	r3, #120	; 0x78
 80056d0:	2100      	movs	r1, #0
 80056d2:	482a      	ldr	r0, [pc, #168]	; (800577c <FuncO_ApplyProfileToAux+0x298>)
 80056d4:	f004 fa4c 	bl	8009b70 <HAL_DAC_Start_DMA>
 80056d8:	4603      	mov	r3, r0
 80056da:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 80056dc:	7bbb      	ldrb	r3, [r7, #14]
 80056de:	4619      	mov	r1, r3
 80056e0:	4824      	ldr	r0, [pc, #144]	; (8005774 <FuncO_ApplyProfileToAux+0x290>)
 80056e2:	f00a fa8f 	bl	800fc04 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 80056e6:	4827      	ldr	r0, [pc, #156]	; (8005784 <FuncO_ApplyProfileToAux+0x2a0>)
 80056e8:	f00a fb00 	bl	800fcec <puts>
		res = HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80056ec:	2100      	movs	r1, #0
 80056ee:	4826      	ldr	r0, [pc, #152]	; (8005788 <FuncO_ApplyProfileToAux+0x2a4>)
 80056f0:	f004 fb00 	bl	8009cf4 <HAL_DAC_Stop_DMA>
 80056f4:	4603      	mov	r3, r0
 80056f6:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 80056f8:	7bbb      	ldrb	r3, [r7, #14]
 80056fa:	4619      	mov	r1, r3
 80056fc:	481d      	ldr	r0, [pc, #116]	; (8005774 <FuncO_ApplyProfileToAux+0x290>)
 80056fe:	f00a fa81 	bl	800fc04 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8005702:	4822      	ldr	r0, [pc, #136]	; (800578c <FuncO_ApplyProfileToAux+0x2a8>)
 8005704:	f00a faf2 	bl	800fcec <puts>
		res = HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005708:	2000      	movs	r0, #0
 800570a:	f000 fa4f 	bl	8005bac <SM_GetOutputChannel>
 800570e:	4603      	mov	r3, r0
 8005710:	f103 0208 	add.w	r2, r3, #8
 8005714:	2300      	movs	r3, #0
 8005716:	9300      	str	r3, [sp, #0]
 8005718:	2378      	movs	r3, #120	; 0x78
 800571a:	2100      	movs	r1, #0
 800571c:	481a      	ldr	r0, [pc, #104]	; (8005788 <FuncO_ApplyProfileToAux+0x2a4>)
 800571e:	f004 fa27 	bl	8009b70 <HAL_DAC_Start_DMA>
 8005722:	4603      	mov	r3, r0
 8005724:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005726:	7bbb      	ldrb	r3, [r7, #14]
 8005728:	4619      	mov	r1, r3
 800572a:	4812      	ldr	r0, [pc, #72]	; (8005774 <FuncO_ApplyProfileToAux+0x290>)
 800572c:	f00a fa6a 	bl	800fc04 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Start(&htim8)\n");
 8005730:	4817      	ldr	r0, [pc, #92]	; (8005790 <FuncO_ApplyProfileToAux+0x2ac>)
 8005732:	f00a fadb 	bl	800fcec <puts>
		res = HAL_TIM_Base_Start(&htim8);
 8005736:	480e      	ldr	r0, [pc, #56]	; (8005770 <FuncO_ApplyProfileToAux+0x28c>)
 8005738:	f006 fbe4 	bl	800bf04 <HAL_TIM_Base_Start>
 800573c:	4603      	mov	r3, r0
 800573e:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005740:	7bbb      	ldrb	r3, [r7, #14]
 8005742:	4619      	mov	r1, r3
 8005744:	480b      	ldr	r0, [pc, #44]	; (8005774 <FuncO_ApplyProfileToAux+0x290>)
 8005746:	f00a fa5d 	bl	800fc04 <iprintf>
}
 800574a:	bf00      	nop
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	bd90      	pop	{r4, r7, pc}
 8005752:	bf00      	nop
 8005754:	20000128 	.word	0x20000128
 8005758:	08013a64 	.word	0x08013a64
 800575c:	20001e90 	.word	0x20001e90
 8005760:	08013a8c 	.word	0x08013a8c
 8005764:	08013ab8 	.word	0x08013ab8
 8005768:	08013ae4 	.word	0x08013ae4
 800576c:	08013afc 	.word	0x08013afc
 8005770:	20002710 	.word	0x20002710
 8005774:	08013b30 	.word	0x08013b30
 8005778:	08013b3c 	.word	0x08013b3c
 800577c:	20002624 	.word	0x20002624
 8005780:	08013b80 	.word	0x08013b80
 8005784:	08013bc4 	.word	0x08013bc4
 8005788:	20002638 	.word	0x20002638
 800578c:	08013c08 	.word	0x08013c08
 8005790:	08013c4c 	.word	0x08013c4c

08005794 <GO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void GO_ResetLastEncoderValue()
{
 8005794:	b480      	push	{r7}
 8005796:	af00      	add	r7, sp, #0
	gain_last_encoder_value = 0;
 8005798:	4b03      	ldr	r3, [pc, #12]	; (80057a8 <GO_ResetLastEncoderValue+0x14>)
 800579a:	2200      	movs	r2, #0
 800579c:	801a      	strh	r2, [r3, #0]
}
 800579e:	bf00      	nop
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr
 80057a8:	20001e94 	.word	0x20001e94

080057ac <GO_MapEncoderPositionToSignalOutput>:
 *	@param None
 *	@retval None
 *
 */
void GO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	4603      	mov	r3, r0
 80057b4:	80fb      	strh	r3, [r7, #6]
	eGainSettings_t temp_gain = SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile->gain;
 80057b6:	2000      	movs	r0, #0
 80057b8:	f000 f9f8 	bl	8005bac <SM_GetOutputChannel>
 80057bc:	4603      	mov	r3, r0
 80057be:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > gain_last_encoder_value)
 80057c6:	4b15      	ldr	r3, [pc, #84]	; (800581c <GO_MapEncoderPositionToSignalOutput+0x70>)
 80057c8:	881b      	ldrh	r3, [r3, #0]
 80057ca:	88fa      	ldrh	r2, [r7, #6]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d90c      	bls.n	80057ea <GO_MapEncoderPositionToSignalOutput+0x3e>
	{
		temp_gain++;
 80057d0:	7bfb      	ldrb	r3, [r7, #15]
 80057d2:	3301      	adds	r3, #1
 80057d4:	73fb      	strb	r3, [r7, #15]
		if(temp_gain > MAX_NUM_GAIN_PRESETS-1) temp_gain = SEVEN_GAIN;
 80057d6:	7bfb      	ldrb	r3, [r7, #15]
 80057d8:	2b07      	cmp	r3, #7
 80057da:	d901      	bls.n	80057e0 <GO_MapEncoderPositionToSignalOutput+0x34>
 80057dc:	2307      	movs	r3, #7
 80057de:	73fb      	strb	r3, [r7, #15]
		GO_ApplyPresetToSignal(temp_gain);
 80057e0:	7bfb      	ldrb	r3, [r7, #15]
 80057e2:	4618      	mov	r0, r3
 80057e4:	f000 f81c 	bl	8005820 <GO_ApplyPresetToSignal>
 80057e8:	e010      	b.n	800580c <GO_MapEncoderPositionToSignalOutput+0x60>

	}
	else if (pEncoderValue < gain_last_encoder_value)
 80057ea:	4b0c      	ldr	r3, [pc, #48]	; (800581c <GO_MapEncoderPositionToSignalOutput+0x70>)
 80057ec:	881b      	ldrh	r3, [r3, #0]
 80057ee:	88fa      	ldrh	r2, [r7, #6]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d20b      	bcs.n	800580c <GO_MapEncoderPositionToSignalOutput+0x60>
	{
		temp_gain--;
 80057f4:	7bfb      	ldrb	r3, [r7, #15]
 80057f6:	3b01      	subs	r3, #1
 80057f8:	73fb      	strb	r3, [r7, #15]
		if(temp_gain > MAX_NUM_GAIN_PRESETS-1) temp_gain = ZERO_GAIN;
 80057fa:	7bfb      	ldrb	r3, [r7, #15]
 80057fc:	2b07      	cmp	r3, #7
 80057fe:	d901      	bls.n	8005804 <GO_MapEncoderPositionToSignalOutput+0x58>
 8005800:	2300      	movs	r3, #0
 8005802:	73fb      	strb	r3, [r7, #15]
		GO_ApplyPresetToSignal(temp_gain);
 8005804:	7bfb      	ldrb	r3, [r7, #15]
 8005806:	4618      	mov	r0, r3
 8005808:	f000 f80a 	bl	8005820 <GO_ApplyPresetToSignal>
	}
	gain_last_encoder_value = pEncoderValue;
 800580c:	4a03      	ldr	r2, [pc, #12]	; (800581c <GO_MapEncoderPositionToSignalOutput+0x70>)
 800580e:	88fb      	ldrh	r3, [r7, #6]
 8005810:	8013      	strh	r3, [r2, #0]

	// artifically offset PWM signal above DC
	//BO_SetPwmSignalOffsetForGain(temp_gain);

}
 8005812:	bf00      	nop
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	20001e94 	.word	0x20001e94

08005820 <GO_ApplyPresetToSignal>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSignal(eGainSettings_t pPresetEnum)
{
 8005820:	b590      	push	{r4, r7, lr}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	4603      	mov	r3, r0
 8005828:	71fb      	strb	r3, [r7, #7]




	SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 800582a:	79fc      	ldrb	r4, [r7, #7]
 800582c:	2000      	movs	r0, #0
 800582e:	f000 f9bd 	bl	8005bac <SM_GetOutputChannel>
 8005832:	4601      	mov	r1, r0
 8005834:	4623      	mov	r3, r4
 8005836:	005b      	lsls	r3, r3, #1
 8005838:	4423      	add	r3, r4
 800583a:	4a4f      	ldr	r2, [pc, #316]	; (8005978 <GO_ApplyPresetToSignal+0x158>)
 800583c:	4413      	add	r3, r2
 800583e:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 8005842:	79fb      	ldrb	r3, [r7, #7]
 8005844:	2b07      	cmp	r3, #7
 8005846:	f200 8093 	bhi.w	8005970 <GO_ApplyPresetToSignal+0x150>
 800584a:	a201      	add	r2, pc, #4	; (adr r2, 8005850 <GO_ApplyPresetToSignal+0x30>)
 800584c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005850:	08005871 	.word	0x08005871
 8005854:	08005891 	.word	0x08005891
 8005858:	080058b1 	.word	0x080058b1
 800585c:	080058d1 	.word	0x080058d1
 8005860:	080058f1 	.word	0x080058f1
 8005864:	08005911 	.word	0x08005911
 8005868:	08005931 	.word	0x08005931
 800586c:	08005951 	.word	0x08005951
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005870:	2200      	movs	r2, #0
 8005872:	2101      	movs	r1, #1
 8005874:	4841      	ldr	r0, [pc, #260]	; (800597c <GO_ApplyPresetToSignal+0x15c>)
 8005876:	f005 fa4b 	bl	800ad10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800587a:	2200      	movs	r2, #0
 800587c:	2120      	movs	r1, #32
 800587e:	4840      	ldr	r0, [pc, #256]	; (8005980 <GO_ApplyPresetToSignal+0x160>)
 8005880:	f005 fa46 	bl	800ad10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005884:	2200      	movs	r2, #0
 8005886:	2110      	movs	r1, #16
 8005888:	483d      	ldr	r0, [pc, #244]	; (8005980 <GO_ApplyPresetToSignal+0x160>)
 800588a:	f005 fa41 	bl	800ad10 <HAL_GPIO_WritePin>
			break;
 800588e:	e06f      	b.n	8005970 <GO_ApplyPresetToSignal+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005890:	2201      	movs	r2, #1
 8005892:	2101      	movs	r1, #1
 8005894:	4839      	ldr	r0, [pc, #228]	; (800597c <GO_ApplyPresetToSignal+0x15c>)
 8005896:	f005 fa3b 	bl	800ad10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800589a:	2200      	movs	r2, #0
 800589c:	2120      	movs	r1, #32
 800589e:	4838      	ldr	r0, [pc, #224]	; (8005980 <GO_ApplyPresetToSignal+0x160>)
 80058a0:	f005 fa36 	bl	800ad10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80058a4:	2200      	movs	r2, #0
 80058a6:	2110      	movs	r1, #16
 80058a8:	4835      	ldr	r0, [pc, #212]	; (8005980 <GO_ApplyPresetToSignal+0x160>)
 80058aa:	f005 fa31 	bl	800ad10 <HAL_GPIO_WritePin>
			break;
 80058ae:	e05f      	b.n	8005970 <GO_ApplyPresetToSignal+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80058b0:	2200      	movs	r2, #0
 80058b2:	2101      	movs	r1, #1
 80058b4:	4831      	ldr	r0, [pc, #196]	; (800597c <GO_ApplyPresetToSignal+0x15c>)
 80058b6:	f005 fa2b 	bl	800ad10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80058ba:	2201      	movs	r2, #1
 80058bc:	2120      	movs	r1, #32
 80058be:	4830      	ldr	r0, [pc, #192]	; (8005980 <GO_ApplyPresetToSignal+0x160>)
 80058c0:	f005 fa26 	bl	800ad10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80058c4:	2200      	movs	r2, #0
 80058c6:	2110      	movs	r1, #16
 80058c8:	482d      	ldr	r0, [pc, #180]	; (8005980 <GO_ApplyPresetToSignal+0x160>)
 80058ca:	f005 fa21 	bl	800ad10 <HAL_GPIO_WritePin>
			break;
 80058ce:	e04f      	b.n	8005970 <GO_ApplyPresetToSignal+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80058d0:	2201      	movs	r2, #1
 80058d2:	2101      	movs	r1, #1
 80058d4:	4829      	ldr	r0, [pc, #164]	; (800597c <GO_ApplyPresetToSignal+0x15c>)
 80058d6:	f005 fa1b 	bl	800ad10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80058da:	2201      	movs	r2, #1
 80058dc:	2120      	movs	r1, #32
 80058de:	4828      	ldr	r0, [pc, #160]	; (8005980 <GO_ApplyPresetToSignal+0x160>)
 80058e0:	f005 fa16 	bl	800ad10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80058e4:	2200      	movs	r2, #0
 80058e6:	2110      	movs	r1, #16
 80058e8:	4825      	ldr	r0, [pc, #148]	; (8005980 <GO_ApplyPresetToSignal+0x160>)
 80058ea:	f005 fa11 	bl	800ad10 <HAL_GPIO_WritePin>
			break;
 80058ee:	e03f      	b.n	8005970 <GO_ApplyPresetToSignal+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80058f0:	2200      	movs	r2, #0
 80058f2:	2101      	movs	r1, #1
 80058f4:	4821      	ldr	r0, [pc, #132]	; (800597c <GO_ApplyPresetToSignal+0x15c>)
 80058f6:	f005 fa0b 	bl	800ad10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80058fa:	2200      	movs	r2, #0
 80058fc:	2120      	movs	r1, #32
 80058fe:	4820      	ldr	r0, [pc, #128]	; (8005980 <GO_ApplyPresetToSignal+0x160>)
 8005900:	f005 fa06 	bl	800ad10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005904:	2201      	movs	r2, #1
 8005906:	2110      	movs	r1, #16
 8005908:	481d      	ldr	r0, [pc, #116]	; (8005980 <GO_ApplyPresetToSignal+0x160>)
 800590a:	f005 fa01 	bl	800ad10 <HAL_GPIO_WritePin>
			break;
 800590e:	e02f      	b.n	8005970 <GO_ApplyPresetToSignal+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005910:	2201      	movs	r2, #1
 8005912:	2101      	movs	r1, #1
 8005914:	4819      	ldr	r0, [pc, #100]	; (800597c <GO_ApplyPresetToSignal+0x15c>)
 8005916:	f005 f9fb 	bl	800ad10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800591a:	2200      	movs	r2, #0
 800591c:	2120      	movs	r1, #32
 800591e:	4818      	ldr	r0, [pc, #96]	; (8005980 <GO_ApplyPresetToSignal+0x160>)
 8005920:	f005 f9f6 	bl	800ad10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005924:	2201      	movs	r2, #1
 8005926:	2110      	movs	r1, #16
 8005928:	4815      	ldr	r0, [pc, #84]	; (8005980 <GO_ApplyPresetToSignal+0x160>)
 800592a:	f005 f9f1 	bl	800ad10 <HAL_GPIO_WritePin>
			break;
 800592e:	e01f      	b.n	8005970 <GO_ApplyPresetToSignal+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005930:	2200      	movs	r2, #0
 8005932:	2101      	movs	r1, #1
 8005934:	4811      	ldr	r0, [pc, #68]	; (800597c <GO_ApplyPresetToSignal+0x15c>)
 8005936:	f005 f9eb 	bl	800ad10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 800593a:	2201      	movs	r2, #1
 800593c:	2120      	movs	r1, #32
 800593e:	4810      	ldr	r0, [pc, #64]	; (8005980 <GO_ApplyPresetToSignal+0x160>)
 8005940:	f005 f9e6 	bl	800ad10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005944:	2201      	movs	r2, #1
 8005946:	2110      	movs	r1, #16
 8005948:	480d      	ldr	r0, [pc, #52]	; (8005980 <GO_ApplyPresetToSignal+0x160>)
 800594a:	f005 f9e1 	bl	800ad10 <HAL_GPIO_WritePin>
			break;
 800594e:	e00f      	b.n	8005970 <GO_ApplyPresetToSignal+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005950:	2201      	movs	r2, #1
 8005952:	2101      	movs	r1, #1
 8005954:	4809      	ldr	r0, [pc, #36]	; (800597c <GO_ApplyPresetToSignal+0x15c>)
 8005956:	f005 f9db 	bl	800ad10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 800595a:	2201      	movs	r2, #1
 800595c:	2120      	movs	r1, #32
 800595e:	4808      	ldr	r0, [pc, #32]	; (8005980 <GO_ApplyPresetToSignal+0x160>)
 8005960:	f005 f9d6 	bl	800ad10 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005964:	2201      	movs	r2, #1
 8005966:	2110      	movs	r1, #16
 8005968:	4805      	ldr	r0, [pc, #20]	; (8005980 <GO_ApplyPresetToSignal+0x160>)
 800596a:	f005 f9d1 	bl	800ad10 <HAL_GPIO_WritePin>
			break;
 800596e:	bf00      	nop
	}

}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	bd90      	pop	{r4, r7, pc}
 8005978:	20000160 	.word	0x20000160
 800597c:	48000400 	.word	0x48000400
 8005980:	48000800 	.word	0x48000800

08005984 <SM_Init>:
void _InitOutputChannels();
void _InitAmpProfiles();
void _InitGainInDecibels();

void SM_Init()
{
 8005984:	b580      	push	{r7, lr}
 8005986:	af00      	add	r7, sp, #0

	FreqO_InitFreqProfiles();
 8005988:	f7ff fa1c 	bl	8004dc4 <FreqO_InitFreqProfiles>

	_InitOutputChannels();
 800598c:	f000 f8ae 	bl	8005aec <_InitOutputChannels>
	_InitAmpProfiles();
 8005990:	f000 f824 	bl	80059dc <_InitAmpProfiles>

	// Start OFFSET DAC and set to positive
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 8005994:	2110      	movs	r1, #16
 8005996:	480f      	ldr	r0, [pc, #60]	; (80059d4 <SM_Init+0x50>)
 8005998:	f004 f897 	bl	8009aca <HAL_DAC_Start>
	HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 800599c:	2201      	movs	r2, #1
 800599e:	2108      	movs	r1, #8
 80059a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80059a4:	f005 f9b4 	bl	800ad10 <HAL_GPIO_WritePin>

	// send trigger input out to dac
	//HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);

	// Start DAC trigger timer
	OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 80059a8:	4b0b      	ldr	r3, [pc, #44]	; (80059d8 <SM_Init+0x54>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a0a      	ldr	r2, [pc, #40]	; (80059d8 <SM_Init+0x54>)
 80059ae:	f043 0301 	orr.w	r3, r3, #1
 80059b2:	6013      	str	r3, [r2, #0]

	// Set the SIGNAL function and amplitude
	FuncO_ApplyProfileToSignal(eDefaultFuncPreset);
 80059b4:	2000      	movs	r0, #0
 80059b6:	f7ff fd31 	bl	800541c <FuncO_ApplyProfileToSignal>
	VPP_ApplyProfileToSignal(eDefaultVppPreset);
 80059ba:	2059      	movs	r0, #89	; 0x59
 80059bc:	f000 fc2c 	bl	8006218 <VPP_ApplyProfileToSignal>

	// set the AUX function
	FuncO_ApplyProfileToAux(eDefaultFuncPreset);
 80059c0:	2000      	movs	r0, #0
 80059c2:	f7ff fd8f 	bl	80054e4 <FuncO_ApplyProfileToAux>

	// set freq for both SIGNAL and AUX
	FreqO_ApplyProfile(eDefaultFreqPreset);
 80059c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80059ca:	f7ff fabb 	bl	8004f44 <FreqO_ApplyProfile>

}
 80059ce:	bf00      	nop
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	20002638 	.word	0x20002638
 80059d8:	40013400 	.word	0x40013400

080059dc <_InitAmpProfiles>:

void _InitAmpProfiles()
{
 80059dc:	b590      	push	{r4, r7, lr}
 80059de:	b08b      	sub	sp, #44	; 0x2c
 80059e0:	af00      	add	r7, sp, #0

	// =(TARGETVPP/LUTVPP)/GAIN
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 80059e2:	2300      	movs	r3, #0
 80059e4:	627b      	str	r3, [r7, #36]	; 0x24
 80059e6:	e033      	b.n	8005a50 <_InitAmpProfiles+0x74>
	{
		float this_amp_value = theAmpProfiles[i].amp_value;
 80059e8:	493c      	ldr	r1, [pc, #240]	; (8005adc <_InitAmpProfiles+0x100>)
 80059ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ec:	4613      	mov	r3, r2
 80059ee:	00db      	lsls	r3, r3, #3
 80059f0:	1a9b      	subs	r3, r3, r2
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	440b      	add	r3, r1
 80059f6:	3304      	adds	r3, #4
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	613b      	str	r3, [r7, #16]
		float this_lut_vpp = LUT_VPP;
 80059fc:	4b38      	ldr	r3, [pc, #224]	; (8005ae0 <_InitAmpProfiles+0x104>)
 80059fe:	60fb      	str	r3, [r7, #12]
		float this_gain_preset = (float)theAmpProfiles[i].gain_preset;
 8005a00:	4936      	ldr	r1, [pc, #216]	; (8005adc <_InitAmpProfiles+0x100>)
 8005a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a04:	4613      	mov	r3, r2
 8005a06:	00db      	lsls	r3, r3, #3
 8005a08:	1a9b      	subs	r3, r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	440b      	add	r3, r1
 8005a0e:	3308      	adds	r3, #8
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	ee07 3a90 	vmov	s15, r3
 8005a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a1a:	edc7 7a02 	vstr	s15, [r7, #8]
		float new_ngc = ( (this_amp_value / this_lut_vpp) / this_gain_preset);
 8005a1e:	ed97 7a04 	vldr	s14, [r7, #16]
 8005a22:	edd7 7a03 	vldr	s15, [r7, #12]
 8005a26:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005a2a:	ed97 7a02 	vldr	s14, [r7, #8]
 8005a2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a32:	edc7 7a01 	vstr	s15, [r7, #4]
		theAmpProfiles[i].neg_gain_coeff = new_ngc;
 8005a36:	4929      	ldr	r1, [pc, #164]	; (8005adc <_InitAmpProfiles+0x100>)
 8005a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	00db      	lsls	r3, r3, #3
 8005a3e:	1a9b      	subs	r3, r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	440b      	add	r3, r1
 8005a44:	3310      	adds	r3, #16
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a52:	2b61      	cmp	r3, #97	; 0x61
 8005a54:	ddc8      	ble.n	80059e8 <_InitAmpProfiles+0xc>
	}

	// =20*LOG10(TARGETVPP/0.001)
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8005a56:	2300      	movs	r3, #0
 8005a58:	623b      	str	r3, [r7, #32]
 8005a5a:	e037      	b.n	8005acc <_InitAmpProfiles+0xf0>
	{
		float decibel_mvolt_ref = 0.001;
 8005a5c:	4b21      	ldr	r3, [pc, #132]	; (8005ae4 <_InitAmpProfiles+0x108>)
 8005a5e:	61fb      	str	r3, [r7, #28]
		float this_amp_value = theAmpProfiles[i].amp_value;
 8005a60:	491e      	ldr	r1, [pc, #120]	; (8005adc <_InitAmpProfiles+0x100>)
 8005a62:	6a3a      	ldr	r2, [r7, #32]
 8005a64:	4613      	mov	r3, r2
 8005a66:	00db      	lsls	r3, r3, #3
 8005a68:	1a9b      	subs	r3, r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	440b      	add	r3, r1
 8005a6e:	3304      	adds	r3, #4
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	61bb      	str	r3, [r7, #24]
		float new_gain_decibels = 20 * log10( this_amp_value / decibel_mvolt_ref );
 8005a74:	ed97 7a06 	vldr	s14, [r7, #24]
 8005a78:	edd7 7a07 	vldr	s15, [r7, #28]
 8005a7c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005a80:	ee16 0a90 	vmov	r0, s13
 8005a84:	f7fa fd88 	bl	8000598 <__aeabi_f2d>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	460c      	mov	r4, r1
 8005a8c:	ec44 3b10 	vmov	d0, r3, r4
 8005a90:	f00c f9c6 	bl	8011e20 <log10>
 8005a94:	ec51 0b10 	vmov	r0, r1, d0
 8005a98:	f04f 0200 	mov.w	r2, #0
 8005a9c:	4b12      	ldr	r3, [pc, #72]	; (8005ae8 <_InitAmpProfiles+0x10c>)
 8005a9e:	f7fa fdd3 	bl	8000648 <__aeabi_dmul>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	460c      	mov	r4, r1
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	4621      	mov	r1, r4
 8005aaa:	f7fb f8c5 	bl	8000c38 <__aeabi_d2f>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	617b      	str	r3, [r7, #20]
		theAmpProfiles[i].gain_decibels = new_gain_decibels;
 8005ab2:	490a      	ldr	r1, [pc, #40]	; (8005adc <_InitAmpProfiles+0x100>)
 8005ab4:	6a3a      	ldr	r2, [r7, #32]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	00db      	lsls	r3, r3, #3
 8005aba:	1a9b      	subs	r3, r3, r2
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	440b      	add	r3, r1
 8005ac0:	330c      	adds	r3, #12
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8005ac6:	6a3b      	ldr	r3, [r7, #32]
 8005ac8:	3301      	adds	r3, #1
 8005aca:	623b      	str	r3, [r7, #32]
 8005acc:	6a3b      	ldr	r3, [r7, #32]
 8005ace:	2b61      	cmp	r3, #97	; 0x61
 8005ad0:	ddc4      	ble.n	8005a5c <_InitAmpProfiles+0x80>

	}
}
 8005ad2:	bf00      	nop
 8005ad4:	372c      	adds	r7, #44	; 0x2c
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd90      	pop	{r4, r7, pc}
 8005ada:	bf00      	nop
 8005adc:	20000178 	.word	0x20000178
 8005ae0:	402ccccd 	.word	0x402ccccd
 8005ae4:	3a83126f 	.word	0x3a83126f
 8005ae8:	40340000 	.word	0x40340000

08005aec <_InitOutputChannels>:

void _InitOutputChannels()
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
	// initialise the SIGNAL output channel
	SignalChannel.channel = SIGNAL_CHANNEL;
 8005af2:	4b28      	ldr	r3, [pc, #160]	; (8005b94 <_InitOutputChannels+0xa8>)
 8005af4:	2200      	movs	r2, #0
 8005af6:	701a      	strb	r2, [r3, #0]
	SignalChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 8005af8:	4b27      	ldr	r3, [pc, #156]	; (8005b98 <_InitOutputChannels+0xac>)
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	4a25      	ldr	r2, [pc, #148]	; (8005b94 <_InitOutputChannels+0xa8>)
 8005afe:	6053      	str	r3, [r2, #4]
	SignalChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 8005b00:	4b24      	ldr	r3, [pc, #144]	; (8005b94 <_InitOutputChannels+0xa8>)
 8005b02:	4a25      	ldr	r2, [pc, #148]	; (8005b98 <_InitOutputChannels+0xac>)
 8005b04:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005b08:	2300      	movs	r3, #0
 8005b0a:	607b      	str	r3, [r7, #4]
 8005b0c:	e00b      	b.n	8005b26 <_InitOutputChannels+0x3a>
		SignalChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8005b0e:	4a23      	ldr	r2, [pc, #140]	; (8005b9c <_InitOutputChannels+0xb0>)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005b16:	491f      	ldr	r1, [pc, #124]	; (8005b94 <_InitOutputChannels+0xa8>)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	3302      	adds	r3, #2
 8005b1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	3301      	adds	r3, #1
 8005b24:	607b      	str	r3, [r7, #4]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2b77      	cmp	r3, #119	; 0x77
 8005b2a:	ddf0      	ble.n	8005b0e <_InitOutputChannels+0x22>

	SignalChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 8005b2c:	4b19      	ldr	r3, [pc, #100]	; (8005b94 <_InitOutputChannels+0xa8>)
 8005b2e:	4a1c      	ldr	r2, [pc, #112]	; (8005ba0 <_InitOutputChannels+0xb4>)
 8005b30:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SignalChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 8005b34:	4b17      	ldr	r3, [pc, #92]	; (8005b94 <_InitOutputChannels+0xa8>)
 8005b36:	4a1b      	ldr	r2, [pc, #108]	; (8005ba4 <_InitOutputChannels+0xb8>)
 8005b38:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0

	// initialise the Aux output channel
	AuxChannel.channel = AUX_CHANNEL;
 8005b3c:	4b1a      	ldr	r3, [pc, #104]	; (8005ba8 <_InitOutputChannels+0xbc>)
 8005b3e:	2201      	movs	r2, #1
 8005b40:	701a      	strb	r2, [r3, #0]
	AuxChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 8005b42:	4b15      	ldr	r3, [pc, #84]	; (8005b98 <_InitOutputChannels+0xac>)
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	4a18      	ldr	r2, [pc, #96]	; (8005ba8 <_InitOutputChannels+0xbc>)
 8005b48:	6053      	str	r3, [r2, #4]
	AuxChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 8005b4a:	4b17      	ldr	r3, [pc, #92]	; (8005ba8 <_InitOutputChannels+0xbc>)
 8005b4c:	4a12      	ldr	r2, [pc, #72]	; (8005b98 <_InitOutputChannels+0xac>)
 8005b4e:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005b52:	2300      	movs	r3, #0
 8005b54:	603b      	str	r3, [r7, #0]
 8005b56:	e00b      	b.n	8005b70 <_InitOutputChannels+0x84>
		AuxChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8005b58:	4a10      	ldr	r2, [pc, #64]	; (8005b9c <_InitOutputChannels+0xb0>)
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005b60:	4911      	ldr	r1, [pc, #68]	; (8005ba8 <_InitOutputChannels+0xbc>)
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	3302      	adds	r3, #2
 8005b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	603b      	str	r3, [r7, #0]
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	2b77      	cmp	r3, #119	; 0x77
 8005b74:	ddf0      	ble.n	8005b58 <_InitOutputChannels+0x6c>

	AuxChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 8005b76:	4b0c      	ldr	r3, [pc, #48]	; (8005ba8 <_InitOutputChannels+0xbc>)
 8005b78:	4a09      	ldr	r2, [pc, #36]	; (8005ba0 <_InitOutputChannels+0xb4>)
 8005b7a:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	AuxChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 8005b7e:	4b0a      	ldr	r3, [pc, #40]	; (8005ba8 <_InitOutputChannels+0xbc>)
 8005b80:	4a08      	ldr	r2, [pc, #32]	; (8005ba4 <_InitOutputChannels+0xb8>)
 8005b82:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0


}
 8005b86:	bf00      	nop
 8005b88:	370c      	adds	r7, #12
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr
 8005b92:	bf00      	nop
 8005b94:	20001f6c 	.word	0x20001f6c
 8005b98:	20000128 	.word	0x20000128
 8005b9c:	200014b4 	.word	0x200014b4
 8005ba0:	20000b34 	.word	0x20000b34
 8005ba4:	20000175 	.word	0x20000175
 8005ba8:	20002160 	.word	0x20002160

08005bac <SM_GetOutputChannel>:

sOutputChannel_t * SM_GetOutputChannel(eOutputChannel_t pChannel)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	71fb      	strb	r3, [r7, #7]

	if(!pChannel)
 8005bb6:	79fb      	ldrb	r3, [r7, #7]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d101      	bne.n	8005bc0 <SM_GetOutputChannel+0x14>
		return &SignalChannel;
 8005bbc:	4b04      	ldr	r3, [pc, #16]	; (8005bd0 <SM_GetOutputChannel+0x24>)
 8005bbe:	e000      	b.n	8005bc2 <SM_GetOutputChannel+0x16>
	else
		return &AuxChannel;
 8005bc0:	4b04      	ldr	r3, [pc, #16]	; (8005bd4 <SM_GetOutputChannel+0x28>)
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	20001f6c 	.word	0x20001f6c
 8005bd4:	20002160 	.word	0x20002160

08005bd8 <SM_EnablePwmToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_EnablePwmToAux()
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b096      	sub	sp, #88	; 0x58
 8005bdc:	af00      	add	r7, sp, #0
	printf("SM_EnablePwmToAux\n");
 8005bde:	4889      	ldr	r0, [pc, #548]	; (8005e04 <SM_EnablePwmToAux+0x22c>)
 8005be0:	f00a f884 	bl	800fcec <puts>

	HAL_StatusTypeDef res = 0;
 8005be4:	2300      	movs	r3, #0
 8005be6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005bea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005bee:	2200      	movs	r2, #0
 8005bf0:	601a      	str	r2, [r3, #0]
 8005bf2:	605a      	str	r2, [r3, #4]
 8005bf4:	609a      	str	r2, [r3, #8]
 8005bf6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005bf8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	601a      	str	r2, [r3, #0]
 8005c00:	605a      	str	r2, [r3, #4]
 8005c02:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8005c04:	f107 031c 	add.w	r3, r7, #28
 8005c08:	2200      	movs	r2, #0
 8005c0a:	601a      	str	r2, [r3, #0]
 8005c0c:	605a      	str	r2, [r3, #4]
 8005c0e:	609a      	str	r2, [r3, #8]
 8005c10:	60da      	str	r2, [r3, #12]
 8005c12:	611a      	str	r2, [r3, #16]
 8005c14:	615a      	str	r2, [r3, #20]
 8005c16:	619a      	str	r2, [r3, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c18:	f107 0308 	add.w	r3, r7, #8
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	601a      	str	r2, [r3, #0]
 8005c20:	605a      	str	r2, [r3, #4]
 8005c22:	609a      	str	r2, [r3, #8]
 8005c24:	60da      	str	r2, [r3, #12]
 8005c26:	611a      	str	r2, [r3, #16]


	htim3.Instance = PWM_AUX_OUT_TIM;
 8005c28:	4b77      	ldr	r3, [pc, #476]	; (8005e08 <SM_EnablePwmToAux+0x230>)
 8005c2a:	4a78      	ldr	r2, [pc, #480]	; (8005e0c <SM_EnablePwmToAux+0x234>)
 8005c2c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8005c2e:	4b76      	ldr	r3, [pc, #472]	; (8005e08 <SM_EnablePwmToAux+0x230>)
 8005c30:	2200      	movs	r2, #0
 8005c32:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8005c34:	4b74      	ldr	r3, [pc, #464]	; (8005e08 <SM_EnablePwmToAux+0x230>)
 8005c36:	2210      	movs	r2, #16
 8005c38:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1;
 8005c3a:	4b73      	ldr	r3, [pc, #460]	; (8005e08 <SM_EnablePwmToAux+0x230>)
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8005c40:	4b71      	ldr	r3, [pc, #452]	; (8005e08 <SM_EnablePwmToAux+0x230>)
 8005c42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c46:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005c48:	4b6f      	ldr	r3, [pc, #444]	; (8005e08 <SM_EnablePwmToAux+0x230>)
 8005c4a:	2280      	movs	r2, #128	; 0x80
 8005c4c:	619a      	str	r2, [r3, #24]
	if ((res == HAL_TIM_Base_Init(&htim3)) != HAL_OK)
 8005c4e:	486e      	ldr	r0, [pc, #440]	; (8005e08 <SM_EnablePwmToAux+0x230>)
 8005c50:	f006 f900 	bl	800be54 <HAL_TIM_Base_Init>
 8005c54:	4603      	mov	r3, r0
 8005c56:	461a      	mov	r2, r3
 8005c58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d107      	bne.n	8005c70 <SM_EnablePwmToAux+0x98>
	{
		printf("SM_EnablePwmToAux HAL_TIM_Base_Init() Result:%u\n",res);
 8005c60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c64:	4619      	mov	r1, r3
 8005c66:	486a      	ldr	r0, [pc, #424]	; (8005e10 <SM_EnablePwmToAux+0x238>)
 8005c68:	f009 ffcc 	bl	800fc04 <iprintf>
		Error_Handler();
 8005c6c:	f001 fb94 	bl	8007398 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005c70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c74:	647b      	str	r3, [r7, #68]	; 0x44
	if ((res == HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig)) != HAL_OK)
 8005c76:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	4862      	ldr	r0, [pc, #392]	; (8005e08 <SM_EnablePwmToAux+0x230>)
 8005c7e:	f006 ff09 	bl	800ca94 <HAL_TIM_ConfigClockSource>
 8005c82:	4603      	mov	r3, r0
 8005c84:	461a      	mov	r2, r3
 8005c86:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d107      	bne.n	8005c9e <SM_EnablePwmToAux+0xc6>
	{
		printf("SM_EnablePwmToAux HAL_TIM_ConfigClockSource() Result:%u\n",res);
 8005c8e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c92:	4619      	mov	r1, r3
 8005c94:	485f      	ldr	r0, [pc, #380]	; (8005e14 <SM_EnablePwmToAux+0x23c>)
 8005c96:	f009 ffb5 	bl	800fc04 <iprintf>
		Error_Handler();
 8005c9a:	f001 fb7d 	bl	8007398 <Error_Handler>
	}
	if ((res == HAL_TIM_PWM_Init(&htim3)) != HAL_OK)
 8005c9e:	485a      	ldr	r0, [pc, #360]	; (8005e08 <SM_EnablePwmToAux+0x230>)
 8005ca0:	f006 f9eb 	bl	800c07a <HAL_TIM_PWM_Init>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d107      	bne.n	8005cc0 <SM_EnablePwmToAux+0xe8>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_Init() Result:%u\n",res);
 8005cb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	4858      	ldr	r0, [pc, #352]	; (8005e18 <SM_EnablePwmToAux+0x240>)
 8005cb8:	f009 ffa4 	bl	800fc04 <iprintf>
		Error_Handler();
 8005cbc:	f001 fb6c 	bl	8007398 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005cc0:	2320      	movs	r3, #32
 8005cc2:	63bb      	str	r3, [r7, #56]	; 0x38
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	643b      	str	r3, [r7, #64]	; 0x40
	if ((res == HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)) != HAL_OK)
 8005cc8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005ccc:	4619      	mov	r1, r3
 8005cce:	484e      	ldr	r0, [pc, #312]	; (8005e08 <SM_EnablePwmToAux+0x230>)
 8005cd0:	f007 fd94 	bl	800d7fc <HAL_TIMEx_MasterConfigSynchronization>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d107      	bne.n	8005cf0 <SM_EnablePwmToAux+0x118>
	{
		printf("SM_EnablePwmToAux HAL_TIMEx_MasterConfigSynchronization() Result:%u\n",res);
 8005ce0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	484d      	ldr	r0, [pc, #308]	; (8005e1c <SM_EnablePwmToAux+0x244>)
 8005ce8:	f009 ff8c 	bl	800fc04 <iprintf>
		Error_Handler();
 8005cec:	f001 fb54 	bl	8007398 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005cf0:	2360      	movs	r3, #96	; 0x60
 8005cf2:	61fb      	str	r3, [r7, #28]
	sConfigOC.Pulse = 0;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	623b      	str	r3, [r7, #32]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ((res == HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)) != HAL_OK)
 8005d00:	f107 031c 	add.w	r3, r7, #28
 8005d04:	2200      	movs	r2, #0
 8005d06:	4619      	mov	r1, r3
 8005d08:	483f      	ldr	r0, [pc, #252]	; (8005e08 <SM_EnablePwmToAux+0x230>)
 8005d0a:	f006 fdb3 	bl	800c874 <HAL_TIM_PWM_ConfigChannel>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	461a      	mov	r2, r3
 8005d12:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d107      	bne.n	8005d2a <SM_EnablePwmToAux+0x152>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_ConfigChannel() Result:%u\n",res);
 8005d1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d1e:	4619      	mov	r1, r3
 8005d20:	483f      	ldr	r0, [pc, #252]	; (8005e20 <SM_EnablePwmToAux+0x248>)
 8005d22:	f009 ff6f 	bl	800fc04 <iprintf>
		Error_Handler();
 8005d26:	f001 fb37 	bl	8007398 <Error_Handler>
	}


	// Timer Post Initialization
	printf("SM_EnablePwmToAux: __HAL_RCC_GPIOA_CLK_ENABLE\n");
 8005d2a:	483e      	ldr	r0, [pc, #248]	; (8005e24 <SM_EnablePwmToAux+0x24c>)
 8005d2c:	f009 ffde 	bl	800fcec <puts>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005d30:	4b3d      	ldr	r3, [pc, #244]	; (8005e28 <SM_EnablePwmToAux+0x250>)
 8005d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d34:	4a3c      	ldr	r2, [pc, #240]	; (8005e28 <SM_EnablePwmToAux+0x250>)
 8005d36:	f043 0301 	orr.w	r3, r3, #1
 8005d3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005d3c:	4b3a      	ldr	r3, [pc, #232]	; (8005e28 <SM_EnablePwmToAux+0x250>)
 8005d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d40:	f003 0301 	and.w	r3, r3, #1
 8005d44:	607b      	str	r3, [r7, #4]
 8005d46:	687b      	ldr	r3, [r7, #4]
	/**PWM_AUX_OUT_TIM GPIO Configuration
	PA4     ------> PWM_AUX_OUT_TIM_CH2
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005d48:	2340      	movs	r3, #64	; 0x40
 8005d4a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d4c:	2302      	movs	r3, #2
 8005d4e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d50:	2300      	movs	r3, #0
 8005d52:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d54:	2300      	movs	r3, #0
 8005d56:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005d58:	2302      	movs	r3, #2
 8005d5a:	61bb      	str	r3, [r7, #24]
	printf("SM_EnablePwmToAux: HAL_GPIO_Init\n");
 8005d5c:	4833      	ldr	r0, [pc, #204]	; (8005e2c <SM_EnablePwmToAux+0x254>)
 8005d5e:	f009 ffc5 	bl	800fcec <puts>
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d62:	f107 0308 	add.w	r3, r7, #8
 8005d66:	4619      	mov	r1, r3
 8005d68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005d6c:	f004 fd6c 	bl	800a848 <HAL_GPIO_Init>


	// PWM_AUX_OUT_TIM_MspInit 0

	/* PWM_AUX_OUT_TIM clock enable */
	printf("SM_EnablePwmToAux: __HAL_RCC_PWM_AUX_OUT_TIM_CLK_ENABLE\n");
 8005d70:	482f      	ldr	r0, [pc, #188]	; (8005e30 <SM_EnablePwmToAux+0x258>)
 8005d72:	f009 ffbb 	bl	800fcec <puts>
	__HAL_RCC_TIM3_CLK_ENABLE();
 8005d76:	4b2c      	ldr	r3, [pc, #176]	; (8005e28 <SM_EnablePwmToAux+0x250>)
 8005d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d7a:	4a2b      	ldr	r2, [pc, #172]	; (8005e28 <SM_EnablePwmToAux+0x250>)
 8005d7c:	f043 0302 	orr.w	r3, r3, #2
 8005d80:	6593      	str	r3, [r2, #88]	; 0x58
 8005d82:	4b29      	ldr	r3, [pc, #164]	; (8005e28 <SM_EnablePwmToAux+0x250>)
 8005d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d86:	f003 0302 	and.w	r3, r3, #2
 8005d8a:	603b      	str	r3, [r7, #0]
 8005d8c:	683b      	ldr	r3, [r7, #0]

	/* PWM_AUX_OUT_TIM interrupt Init */
	printf("SM_EnablePwmToAux: HAL_NVIC_SetPriority\n");
 8005d8e:	4829      	ldr	r0, [pc, #164]	; (8005e34 <SM_EnablePwmToAux+0x25c>)
 8005d90:	f009 ffac 	bl	800fcec <puts>
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005d94:	2200      	movs	r2, #0
 8005d96:	2100      	movs	r1, #0
 8005d98:	201d      	movs	r0, #29
 8005d9a:	f003 fe32 	bl	8009a02 <HAL_NVIC_SetPriority>
	printf("SM_EnablePwmToAux: HAL_NVIC_EnableIRQ\n");
 8005d9e:	4826      	ldr	r0, [pc, #152]	; (8005e38 <SM_EnablePwmToAux+0x260>)
 8005da0:	f009 ffa4 	bl	800fcec <puts>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005da4:	201d      	movs	r0, #29
 8005da6:	f003 fe46 	bl	8009a36 <HAL_NVIC_EnableIRQ>
	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspInit 1 */

	/* USER CODE END PWM_AUX_OUT_TIM_MspInit 1 */
	printf("SM_EnablePwmToAux: HAL_TIM_PWM_Start\n");
 8005daa:	4824      	ldr	r0, [pc, #144]	; (8005e3c <SM_EnablePwmToAux+0x264>)
 8005dac:	f009 ff9e 	bl	800fcec <puts>
	if ((res == HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1)) != HAL_OK)
 8005db0:	2100      	movs	r1, #0
 8005db2:	4815      	ldr	r0, [pc, #84]	; (8005e08 <SM_EnablePwmToAux+0x230>)
 8005db4:	f006 f9c2 	bl	800c13c <HAL_TIM_PWM_Start>
 8005db8:	4603      	mov	r3, r0
 8005dba:	461a      	mov	r2, r3
 8005dbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d107      	bne.n	8005dd4 <SM_EnablePwmToAux+0x1fc>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_Start() Result:%u\n",res);
 8005dc4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005dc8:	4619      	mov	r1, r3
 8005dca:	481d      	ldr	r0, [pc, #116]	; (8005e40 <SM_EnablePwmToAux+0x268>)
 8005dcc:	f009 ff1a 	bl	800fc04 <iprintf>
		Error_Handler();
 8005dd0:	f001 fae2 	bl	8007398 <Error_Handler>
	}

	printf("SM_EnablePwmToAux: GO_ApplyPresetToSignal\n");
 8005dd4:	481b      	ldr	r0, [pc, #108]	; (8005e44 <SM_EnablePwmToAux+0x26c>)
 8005dd6:	f009 ff89 	bl	800fcec <puts>
	GO_ApplyPresetToSignal(eDefaultGainPreset);
 8005dda:	2007      	movs	r0, #7
 8005ddc:	f7ff fd20 	bl	8005820 <GO_ApplyPresetToSignal>

	// 50% duty cycle
	printf("SM_EnablePwmToAux: PWM_AUX_OUT_TIM->CCR1 = 32768\n");
 8005de0:	4819      	ldr	r0, [pc, #100]	; (8005e48 <SM_EnablePwmToAux+0x270>)
 8005de2:	f009 ff83 	bl	800fcec <puts>
	PWM_AUX_OUT_TIM->CCR1 = 32768;
 8005de6:	4b09      	ldr	r3, [pc, #36]	; (8005e0c <SM_EnablePwmToAux+0x234>)
 8005de8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005dec:	635a      	str	r2, [r3, #52]	; 0x34
	printf("SM_EnablePwmToAux: PWM_AUX_OUT_TIM->ARR = 65535\n");
 8005dee:	4817      	ldr	r0, [pc, #92]	; (8005e4c <SM_EnablePwmToAux+0x274>)
 8005df0:	f009 ff7c 	bl	800fcec <puts>
	PWM_AUX_OUT_TIM->ARR = 65535;
 8005df4:	4b05      	ldr	r3, [pc, #20]	; (8005e0c <SM_EnablePwmToAux+0x234>)
 8005df6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005dfa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005dfc:	bf00      	nop
 8005dfe:	3758      	adds	r7, #88	; 0x58
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	08013cf8 	.word	0x08013cf8
 8005e08:	20001f18 	.word	0x20001f18
 8005e0c:	40000400 	.word	0x40000400
 8005e10:	08013d0c 	.word	0x08013d0c
 8005e14:	08013d40 	.word	0x08013d40
 8005e18:	08013d7c 	.word	0x08013d7c
 8005e1c:	08013dac 	.word	0x08013dac
 8005e20:	08013df4 	.word	0x08013df4
 8005e24:	08013e30 	.word	0x08013e30
 8005e28:	40021000 	.word	0x40021000
 8005e2c:	08013e60 	.word	0x08013e60
 8005e30:	08013e84 	.word	0x08013e84
 8005e34:	08013ebc 	.word	0x08013ebc
 8005e38:	08013ee4 	.word	0x08013ee4
 8005e3c:	08013f0c 	.word	0x08013f0c
 8005e40:	08013f34 	.word	0x08013f34
 8005e44:	08013f68 	.word	0x08013f68
 8005e48:	08013f94 	.word	0x08013f94
 8005e4c:	08013fc8 	.word	0x08013fc8

08005e50 <SM_DisablePwmToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_DisablePwmToAux()
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
	printf("SM_DisablePwmToAux");
 8005e56:	4815      	ldr	r0, [pc, #84]	; (8005eac <SM_DisablePwmToAux+0x5c>)
 8005e58:	f009 fed4 	bl	800fc04 <iprintf>

	HAL_StatusTypeDef res = 0;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	71fb      	strb	r3, [r7, #7]


	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspDeInit 0 */
	printf("SM_DisablePwmToAux: HAL_TIM_PWM_Stop\n");
 8005e60:	4813      	ldr	r0, [pc, #76]	; (8005eb0 <SM_DisablePwmToAux+0x60>)
 8005e62:	f009 ff43 	bl	800fcec <puts>
	if ((res == HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1)) != HAL_OK)
 8005e66:	2100      	movs	r1, #0
 8005e68:	4812      	ldr	r0, [pc, #72]	; (8005eb4 <SM_DisablePwmToAux+0x64>)
 8005e6a:	f006 fa41 	bl	800c2f0 <HAL_TIM_PWM_Stop>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	461a      	mov	r2, r3
 8005e72:	79fb      	ldrb	r3, [r7, #7]
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d106      	bne.n	8005e86 <SM_DisablePwmToAux+0x36>
	{
		printf("SM_DisablePwmToAux HAL_TIM_PWM_Stop() Result:%u\n",res);
 8005e78:	79fb      	ldrb	r3, [r7, #7]
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	480e      	ldr	r0, [pc, #56]	; (8005eb8 <SM_DisablePwmToAux+0x68>)
 8005e7e:	f009 fec1 	bl	800fc04 <iprintf>
		Error_Handler();
 8005e82:	f001 fa89 	bl	8007398 <Error_Handler>
	}
	/* USER CODE END PWM_AUX_OUT_TIM_MspDeInit 0 */
	/* Peripheral clock disable */
	printf("SM_DisablePwmToAux __HAL_RCC_PWM_AUX_OUT_TIM_CLK_DISABLE\n");
 8005e86:	480d      	ldr	r0, [pc, #52]	; (8005ebc <SM_DisablePwmToAux+0x6c>)
 8005e88:	f009 ff30 	bl	800fcec <puts>
	__HAL_RCC_TIM3_CLK_DISABLE();
 8005e8c:	4b0c      	ldr	r3, [pc, #48]	; (8005ec0 <SM_DisablePwmToAux+0x70>)
 8005e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e90:	4a0b      	ldr	r2, [pc, #44]	; (8005ec0 <SM_DisablePwmToAux+0x70>)
 8005e92:	f023 0302 	bic.w	r3, r3, #2
 8005e96:	6593      	str	r3, [r2, #88]	; 0x58

	/* PWM_AUX_OUT_TIM interrupt Deinit */
	printf("SM_DisablePwmToAux HAL_NVIC_DisableIRQ\n");
 8005e98:	480a      	ldr	r0, [pc, #40]	; (8005ec4 <SM_DisablePwmToAux+0x74>)
 8005e9a:	f009 ff27 	bl	800fcec <puts>
	HAL_NVIC_DisableIRQ(TIM3_IRQn);
 8005e9e:	201d      	movs	r0, #29
 8005ea0:	f003 fdd7 	bl	8009a52 <HAL_NVIC_DisableIRQ>
	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspDeInit 1 */

	/* USER CODE END PWM_AUX_OUT_TIM_MspDeInit 1 */
}
 8005ea4:	bf00      	nop
 8005ea6:	3708      	adds	r7, #8
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	08013ff8 	.word	0x08013ff8
 8005eb0:	0801400c 	.word	0x0801400c
 8005eb4:	20001f18 	.word	0x20001f18
 8005eb8:	08014034 	.word	0x08014034
 8005ebc:	08014068 	.word	0x08014068
 8005ec0:	40021000 	.word	0x40021000
 8005ec4:	080140a4 	.word	0x080140a4

08005ec8 <SM_EnableDacToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_EnableDacToAux()
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b0b2      	sub	sp, #200	; 0xc8
 8005ecc:	af00      	add	r7, sp, #0
	printf("SM_EnableDacToAux");
 8005ece:	4860      	ldr	r0, [pc, #384]	; (8006050 <SM_EnableDacToAux+0x188>)
 8005ed0:	f009 fe98 	bl	800fc04 <iprintf>

	HAL_StatusTypeDef res = 0;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	DAC_ChannelConfTypeDef sConfig = {0};
 8005eda:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005ede:	2230      	movs	r2, #48	; 0x30
 8005ee0:	2100      	movs	r1, #0
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f009 fa2a 	bl	800f33c <memset>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ee8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005eec:	2200      	movs	r2, #0
 8005eee:	601a      	str	r2, [r3, #0]
 8005ef0:	605a      	str	r2, [r3, #4]
 8005ef2:	609a      	str	r2, [r3, #8]
 8005ef4:	60da      	str	r2, [r3, #12]
 8005ef6:	611a      	str	r2, [r3, #16]
	DAC_HandleTypeDef hdac2;
	DMA_HandleTypeDef hdma_dac2_ch1;
	/** DAC Initialization
	*/
	hdac2.Instance = DAC2;
 8005ef8:	4b56      	ldr	r3, [pc, #344]	; (8006054 <SM_EnableDacToAux+0x18c>)
 8005efa:	66fb      	str	r3, [r7, #108]	; 0x6c
	if ((res == HAL_DAC_Init(&hdac2)) != HAL_OK)
 8005efc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005f00:	4618      	mov	r0, r3
 8005f02:	f003 fdc0 	bl	8009a86 <HAL_DAC_Init>
 8005f06:	4603      	mov	r3, r0
 8005f08:	461a      	mov	r2, r3
 8005f0a:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d107      	bne.n	8005f22 <SM_EnableDacToAux+0x5a>
	{
		printf("SM_EnableDacToAux HAL_DAC_Init() Result:%u\n",res);
 8005f12:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8005f16:	4619      	mov	r1, r3
 8005f18:	484f      	ldr	r0, [pc, #316]	; (8006058 <SM_EnableDacToAux+0x190>)
 8005f1a:	f009 fe73 	bl	800fc04 <iprintf>
		Error_Handler();
 8005f1e:	f001 fa3b 	bl	8007398 <Error_Handler>
	}
	/** DAC channel OUT1 config
	*/
	sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005f22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005f26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	sConfig.DAC_DMADoubleDataMode = DISABLE;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
	sConfig.DAC_SignedFormat = DISABLE;
 8005f30:	2300      	movs	r3, #0
 8005f32:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8005f36:	2300      	movs	r3, #0
 8005f38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8005f3c:	2306      	movs	r3, #6
 8005f3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8005f42:	2300      	movs	r3, #0
 8005f44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8005f54:	2300      	movs	r3, #0
 8005f56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	if ((res == HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1)) != HAL_OK)
 8005f5a:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8005f5e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005f62:	2200      	movs	r2, #0
 8005f64:	4618      	mov	r0, r3
 8005f66:	f003 ff6d 	bl	8009e44 <HAL_DAC_ConfigChannel>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d107      	bne.n	8005f86 <SM_EnableDacToAux+0xbe>
	{
		printf("SM_EnableDacToAux HAL_DAC_ConfigChannel() Result:%u\n",res);
 8005f76:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	4837      	ldr	r0, [pc, #220]	; (800605c <SM_EnableDacToAux+0x194>)
 8005f7e:	f009 fe41 	bl	800fc04 <iprintf>
		Error_Handler();
 8005f82:	f001 fa09 	bl	8007398 <Error_Handler>

	/* USER CODE BEGIN DAC2_MspInit 0 */

	/* USER CODE END DAC2_MspInit 0 */
	/* DAC2 clock enable */
	printf("SM_EnableDacToAux __HAL_RCC_DAC2_CLK_ENABLE()\n");
 8005f86:	4836      	ldr	r0, [pc, #216]	; (8006060 <SM_EnableDacToAux+0x198>)
 8005f88:	f009 feb0 	bl	800fcec <puts>
	__HAL_RCC_DAC2_CLK_ENABLE();
 8005f8c:	4b35      	ldr	r3, [pc, #212]	; (8006064 <SM_EnableDacToAux+0x19c>)
 8005f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f90:	4a34      	ldr	r2, [pc, #208]	; (8006064 <SM_EnableDacToAux+0x19c>)
 8005f92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f98:	4b32      	ldr	r3, [pc, #200]	; (8006064 <SM_EnableDacToAux+0x19c>)
 8005f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fa0:	60bb      	str	r3, [r7, #8]
 8005fa2:	68bb      	ldr	r3, [r7, #8]

	printf("SM_EnableDacToAux __HAL_RCC_GPIOA_CLK_ENABLE()\n");
 8005fa4:	4830      	ldr	r0, [pc, #192]	; (8006068 <SM_EnableDacToAux+0x1a0>)
 8005fa6:	f009 fea1 	bl	800fcec <puts>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005faa:	4b2e      	ldr	r3, [pc, #184]	; (8006064 <SM_EnableDacToAux+0x19c>)
 8005fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fae:	4a2d      	ldr	r2, [pc, #180]	; (8006064 <SM_EnableDacToAux+0x19c>)
 8005fb0:	f043 0301 	orr.w	r3, r3, #1
 8005fb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005fb6:	4b2b      	ldr	r3, [pc, #172]	; (8006064 <SM_EnableDacToAux+0x19c>)
 8005fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fba:	f003 0301 	and.w	r3, r3, #1
 8005fbe:	607b      	str	r3, [r7, #4]
 8005fc0:	687b      	ldr	r3, [r7, #4]
	/**DAC2 GPIO Configuration
	PA6     ------> DAC2_OUT1
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005fc2:	2340      	movs	r3, #64	; 0x40
 8005fc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	printf("SM_EnableDacToAux HAL_GPIO_Init()\n");
 8005fd4:	4825      	ldr	r0, [pc, #148]	; (800606c <SM_EnableDacToAux+0x1a4>)
 8005fd6:	f009 fe89 	bl	800fcec <puts>
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fda:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005fde:	4619      	mov	r1, r3
 8005fe0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005fe4:	f004 fc30 	bl	800a848 <HAL_GPIO_Init>

	/* DAC2 DMA Init */
	/* DAC2_CH1 Init */
	hdma_dac2_ch1.Instance = DMA1_Channel3;
 8005fe8:	4b21      	ldr	r3, [pc, #132]	; (8006070 <SM_EnableDacToAux+0x1a8>)
 8005fea:	60fb      	str	r3, [r7, #12]
	hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8005fec:	2329      	movs	r3, #41	; 0x29
 8005fee:	613b      	str	r3, [r7, #16]
	hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005ff0:	2310      	movs	r3, #16
 8005ff2:	617b      	str	r3, [r7, #20]
	hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	61bb      	str	r3, [r7, #24]
	hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8005ff8:	2380      	movs	r3, #128	; 0x80
 8005ffa:	61fb      	str	r3, [r7, #28]
	hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005ffc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006000:	623b      	str	r3, [r7, #32]
	hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006002:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006006:	627b      	str	r3, [r7, #36]	; 0x24
	hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8006008:	2320      	movs	r3, #32
 800600a:	62bb      	str	r3, [r7, #40]	; 0x28
	hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800600c:	2300      	movs	r3, #0
 800600e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ((res == HAL_DMA_Init(&hdma_dac2_ch1)) != HAL_OK)
 8006010:	f107 030c 	add.w	r3, r7, #12
 8006014:	4618      	mov	r0, r3
 8006016:	f004 f94b 	bl	800a2b0 <HAL_DMA_Init>
 800601a:	4603      	mov	r3, r0
 800601c:	461a      	mov	r2, r3
 800601e:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006022:	4293      	cmp	r3, r2
 8006024:	d107      	bne.n	8006036 <SM_EnableDacToAux+0x16e>
	{
		printf("SM_EnableDacToAux HAL_DMA_Init() Result:%u\n",res);
 8006026:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 800602a:	4619      	mov	r1, r3
 800602c:	4811      	ldr	r0, [pc, #68]	; (8006074 <SM_EnableDacToAux+0x1ac>)
 800602e:	f009 fde9 	bl	800fc04 <iprintf>
		Error_Handler();
 8006032:	f001 f9b1 	bl	8007398 <Error_Handler>
	}

	printf("SM_EnableDacToAux __HAL_LINKDMA()\n");
 8006036:	4810      	ldr	r0, [pc, #64]	; (8006078 <SM_EnableDacToAux+0x1b0>)
 8006038:	f009 fe58 	bl	800fcec <puts>
	__HAL_LINKDMA(&hdac2,DMA_Handle1,hdma_dac2_ch1);
 800603c:	f107 030c 	add.w	r3, r7, #12
 8006040:	677b      	str	r3, [r7, #116]	; 0x74
 8006042:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006046:	637b      	str	r3, [r7, #52]	; 0x34

    //GO_ApplyPresetToAux(eDefaultGainPreset);
}
 8006048:	bf00      	nop
 800604a:	37c8      	adds	r7, #200	; 0xc8
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	080140cc 	.word	0x080140cc
 8006054:	50000c00 	.word	0x50000c00
 8006058:	080140e0 	.word	0x080140e0
 800605c:	0801410c 	.word	0x0801410c
 8006060:	08014144 	.word	0x08014144
 8006064:	40021000 	.word	0x40021000
 8006068:	08014174 	.word	0x08014174
 800606c:	080141a4 	.word	0x080141a4
 8006070:	40020030 	.word	0x40020030
 8006074:	080141c8 	.word	0x080141c8
 8006078:	080141f4 	.word	0x080141f4

0800607c <SM_DisableDacToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_DisableDacToAux()
{
 800607c:	b580      	push	{r7, lr}
 800607e:	af00      	add	r7, sp, #0


	printf("SM_DisableDacToAux\n");
 8006080:	4806      	ldr	r0, [pc, #24]	; (800609c <SM_DisableDacToAux+0x20>)
 8006082:	f009 fe33 	bl	800fcec <puts>
    //__HAL_RCC_DAC2_CLK_DISABLE();

    /**DAC2 GPIO Configuration
    PA6     ------> DAC2_OUT1
    */
	printf("SM_DisableDacToAux HAL_GPIO_DeInit\n");
 8006086:	4806      	ldr	r0, [pc, #24]	; (80060a0 <SM_DisableDacToAux+0x24>)
 8006088:	f009 fe30 	bl	800fcec <puts>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6);
 800608c:	2140      	movs	r1, #64	; 0x40
 800608e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006092:	f004 fd5b 	bl	800ab4c <HAL_GPIO_DeInit>

}
 8006096:	bf00      	nop
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	08014218 	.word	0x08014218
 80060a0:	0801422c 	.word	0x0801422c

080060a4 <SM_GetEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t SM_GetEncoderValue(eEncoder_Direction direction)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	4603      	mov	r3, r0
 80060ac:	71fb      	strb	r3, [r7, #7]
	if(direction)
 80060ae:	79fb      	ldrb	r3, [r7, #7]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d008      	beq.n	80060c6 <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 80060b4:	4b08      	ldr	r3, [pc, #32]	; (80060d8 <SM_GetEncoderValue+0x34>)
 80060b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	4b07      	ldr	r3, [pc, #28]	; (80060d8 <SM_GetEncoderValue+0x34>)
 80060bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060be:	b29b      	uxth	r3, r3
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	e002      	b.n	80060cc <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 80060c6:	4b04      	ldr	r3, [pc, #16]	; (80060d8 <SM_GetEncoderValue+0x34>)
 80060c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ca:	b29b      	uxth	r3, r3
	}
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr
 80060d8:	40012c00 	.word	0x40012c00

080060dc <SM_GetOutputInHertz>:
 *	@param None
 *	@retval None
 *
 */
float SM_GetOutputInHertz()
{
 80060dc:	b480      	push	{r7}
 80060de:	b085      	sub	sp, #20
 80060e0:	af00      	add	r7, sp, #0
	volatile float output_tm_psc;
	volatile float output_tm_arr;

	// safe-guard against divide by zero
	(OUTPUT_TIMER->PSC == 0) ? (output_tm_psc = 1) : (output_tm_psc = OUTPUT_TIMER->PSC);
 80060e2:	4b1d      	ldr	r3, [pc, #116]	; (8006158 <SM_GetOutputInHertz+0x7c>)
 80060e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d103      	bne.n	80060f2 <SM_GetOutputInHertz+0x16>
 80060ea:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80060ee:	60bb      	str	r3, [r7, #8]
 80060f0:	e007      	b.n	8006102 <SM_GetOutputInHertz+0x26>
 80060f2:	4b19      	ldr	r3, [pc, #100]	; (8006158 <SM_GetOutputInHertz+0x7c>)
 80060f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f6:	ee07 3a90 	vmov	s15, r3
 80060fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060fe:	edc7 7a02 	vstr	s15, [r7, #8]
	(OUTPUT_TIMER->ARR == 0) ? (output_tm_arr = 1) : (output_tm_arr = OUTPUT_TIMER->ARR);
 8006102:	4b15      	ldr	r3, [pc, #84]	; (8006158 <SM_GetOutputInHertz+0x7c>)
 8006104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006106:	2b00      	cmp	r3, #0
 8006108:	d103      	bne.n	8006112 <SM_GetOutputInHertz+0x36>
 800610a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800610e:	607b      	str	r3, [r7, #4]
 8006110:	e007      	b.n	8006122 <SM_GetOutputInHertz+0x46>
 8006112:	4b11      	ldr	r3, [pc, #68]	; (8006158 <SM_GetOutputInHertz+0x7c>)
 8006114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006116:	ee07 3a90 	vmov	s15, r3
 800611a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800611e:	edc7 7a01 	vstr	s15, [r7, #4]

	float output_tm_freq = SM_MCLK / (output_tm_psc * output_tm_arr);
 8006122:	ed97 7a02 	vldr	s14, [r7, #8]
 8006126:	edd7 7a01 	vldr	s15, [r7, #4]
 800612a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800612e:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800615c <SM_GetOutputInHertz+0x80>
 8006132:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006136:	edc7 7a03 	vstr	s15, [r7, #12]


	return output_tm_freq / SM_FSAMP;
 800613a:	edd7 7a03 	vldr	s15, [r7, #12]
 800613e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8006160 <SM_GetOutputInHertz+0x84>
 8006142:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006146:	eef0 7a66 	vmov.f32	s15, s13
}
 800614a:	eeb0 0a67 	vmov.f32	s0, s15
 800614e:	3714      	adds	r7, #20
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr
 8006158:	40013400 	.word	0x40013400
 800615c:	4d2037a0 	.word	0x4d2037a0
 8006160:	42f00000 	.word	0x42f00000

08006164 <SM_ConvertPeriodToHertz>:


float SM_ConvertPeriodToHertz(uint32_t period, uint16_t psc)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	460b      	mov	r3, r1
 800616e:	807b      	strh	r3, [r7, #2]
	(psc == 0) ? (psc = 1) : psc;
 8006170:	887b      	ldrh	r3, [r7, #2]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d101      	bne.n	800617a <SM_ConvertPeriodToHertz+0x16>
 8006176:	2301      	movs	r3, #1
 8006178:	807b      	strh	r3, [r7, #2]

	return (float)SM_MCLK / ( (float)psc * (float)period );
 800617a:	887b      	ldrh	r3, [r7, #2]
 800617c:	ee07 3a90 	vmov	s15, r3
 8006180:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	ee07 3a90 	vmov	s15, r3
 800618a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800618e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006192:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80061ac <SM_ConvertPeriodToHertz+0x48>
 8006196:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800619a:	eef0 7a66 	vmov.f32	s15, s13
}
 800619e:	eeb0 0a67 	vmov.f32	s0, s15
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr
 80061ac:	4d2037a0 	.word	0x4d2037a0

080061b0 <SM_IsFuncPwmDutyMode>:
	return (SM_MCLK / hertz) / psc;
}


uint8_t SM_IsFuncPwmDutyMode()
{
 80061b0:	b480      	push	{r7}
 80061b2:	af00      	add	r7, sp, #0
	return duty_adjust_mode;
 80061b4:	4b03      	ldr	r3, [pc, #12]	; (80061c4 <SM_IsFuncPwmDutyMode+0x14>)
 80061b6:	781b      	ldrb	r3, [r3, #0]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	20001e96 	.word	0x20001e96

080061c8 <SM_ToggleFuncPwmDutyMode>:

void SM_ToggleFuncPwmDutyMode()
{
 80061c8:	b480      	push	{r7}
 80061ca:	af00      	add	r7, sp, #0
	duty_adjust_mode ^= 1;
 80061cc:	4b05      	ldr	r3, [pc, #20]	; (80061e4 <SM_ToggleFuncPwmDutyMode+0x1c>)
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	f083 0301 	eor.w	r3, r3, #1
 80061d4:	b2da      	uxtb	r2, r3
 80061d6:	4b03      	ldr	r3, [pc, #12]	; (80061e4 <SM_ToggleFuncPwmDutyMode+0x1c>)
 80061d8:	701a      	strb	r2, [r3, #0]
}
 80061da:	bf00      	nop
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr
 80061e4:	20001e96 	.word	0x20001e96

080061e8 <SM_ResetFuncPwmDutyMode>:

void SM_ResetFuncPwmDutyMode()
{
 80061e8:	b480      	push	{r7}
 80061ea:	af00      	add	r7, sp, #0
	duty_adjust_mode = 0;
 80061ec:	4b03      	ldr	r3, [pc, #12]	; (80061fc <SM_ResetFuncPwmDutyMode+0x14>)
 80061ee:	2200      	movs	r2, #0
 80061f0:	701a      	strb	r2, [r3, #0]

}
 80061f2:	bf00      	nop
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	20001e96 	.word	0x20001e96

08006200 <VPP_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ResetLastEncoderValue()
{
 8006200:	b480      	push	{r7}
 8006202:	af00      	add	r7, sp, #0
	amp_last_encoder_value = 0;
 8006204:	4b03      	ldr	r3, [pc, #12]	; (8006214 <VPP_ResetLastEncoderValue+0x14>)
 8006206:	2200      	movs	r2, #0
 8006208:	801a      	strh	r2, [r3, #0]
}
 800620a:	bf00      	nop
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr
 8006214:	20001e98 	.word	0x20001e98

08006218 <VPP_ApplyProfileToSignal>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyProfileToSignal(eAmpSettings_t pPresetEnum)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	4603      	mov	r3, r0
 8006220:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 8006222:	79fa      	ldrb	r2, [r7, #7]
 8006224:	4613      	mov	r3, r2
 8006226:	00db      	lsls	r3, r3, #3
 8006228:	1a9b      	subs	r3, r3, r2
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4a10      	ldr	r2, [pc, #64]	; (8006270 <VPP_ApplyProfileToSignal+0x58>)
 800622e:	4413      	add	r3, r2
 8006230:	60fb      	str	r3, [r7, #12]

	// Set the new  amp profile to the SignalChannel object
	SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile = pNextEncPreset;
 8006232:	2000      	movs	r0, #0
 8006234:	f7ff fcba 	bl	8005bac <SM_GetOutputChannel>
 8006238:	4602      	mov	r2, r0
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

    // set the gain preset
	GO_ApplyPresetToSignal(pNextEncPreset->gain_preset);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	7a1b      	ldrb	r3, [r3, #8]
 8006244:	4618      	mov	r0, r3
 8006246:	f7ff faeb 	bl	8005820 <GO_ApplyPresetToSignal>

    // Apply the next amplitude setting to the SignalChannel object
    _ProcessSignalDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	edd3 7a04 	vldr	s15, [r3, #16]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	ed93 7a05 	vldr	s14, [r3, #20]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	8b1b      	ldrh	r3, [r3, #24]
 800625a:	4618      	mov	r0, r3
 800625c:	eef0 0a47 	vmov.f32	s1, s14
 8006260:	eeb0 0a67 	vmov.f32	s0, s15
 8006264:	f000 f830 	bl	80062c8 <_ProcessSignalDataTable>


}
 8006268:	bf00      	nop
 800626a:	3710      	adds	r7, #16
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	20000178 	.word	0x20000178

08006274 <VPP_ApplyProfileToAux>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyProfileToAux(eAmpSettings_t pPresetEnum)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	4603      	mov	r3, r0
 800627c:	71fb      	strb	r3, [r7, #7]

	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 800627e:	79fa      	ldrb	r2, [r7, #7]
 8006280:	4613      	mov	r3, r2
 8006282:	00db      	lsls	r3, r3, #3
 8006284:	1a9b      	subs	r3, r3, r2
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	4a0e      	ldr	r2, [pc, #56]	; (80062c4 <VPP_ApplyProfileToAux+0x50>)
 800628a:	4413      	add	r3, r2
 800628c:	60fb      	str	r3, [r7, #12]

	// Set the new VPP Preset to the AuxChannel object
	SM_GetOutputChannel(AUX_CHANNEL)->amp_profile = pNextEncPreset;
 800628e:	2001      	movs	r0, #1
 8006290:	f7ff fc8c 	bl	8005bac <SM_GetOutputChannel>
 8006294:	4602      	mov	r2, r0
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

	 // set the gain preset
	//GO_ApplyPresetToAux(pNextEncPreset->gain_preset);

	// Apply the next amplitude setting to the AuxChannel object
	_ProcessAuxDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	edd3 7a04 	vldr	s15, [r3, #16]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	ed93 7a05 	vldr	s14, [r3, #20]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	8b1b      	ldrh	r3, [r3, #24]
 80062ac:	4618      	mov	r0, r3
 80062ae:	eef0 0a47 	vmov.f32	s1, s14
 80062b2:	eeb0 0a67 	vmov.f32	s0, s15
 80062b6:	f000 f88d 	bl	80063d4 <_ProcessAuxDataTable>



}
 80062ba:	bf00      	nop
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	20000178 	.word	0x20000178

080062c8 <_ProcessSignalDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSignalDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b08a      	sub	sp, #40	; 0x28
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	ed87 0a03 	vstr	s0, [r7, #12]
 80062d2:	edc7 0a02 	vstr	s1, [r7, #8]
 80062d6:	4603      	mov	r3, r0
 80062d8:	80fb      	strh	r3, [r7, #6]
	sOutputChannel_t * pTmpOutputChannel = SM_GetOutputChannel(SIGNAL_CHANNEL);
 80062da:	2000      	movs	r0, #0
 80062dc:	f7ff fc66 	bl	8005bac <SM_GetOutputChannel>
 80062e0:	6178      	str	r0, [r7, #20]
	if(pTmpOutputChannel->func_profile->func != PWM_FUNC_MODE)
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	2b06      	cmp	r3, #6
 80062ec:	d06b      	beq.n	80063c6 <_ProcessSignalDataTable+0xfe>
	{
		// copy refer lookup datat table from SignalChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80062ee:	2300      	movs	r3, #0
 80062f0:	627b      	str	r3, [r7, #36]	; 0x24
 80062f2:	e00c      	b.n	800630e <_ProcessSignalDataTable+0x46>
		{
			tmpDataTable[i] = pTmpOutputChannel->ref_lut_data[i];
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	685a      	ldr	r2, [r3, #4]
 80062f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	4413      	add	r3, r2
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	4933      	ldr	r1, [pc, #204]	; (80063d0 <_ProcessSignalDataTable+0x108>)
 8006302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006304:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630a:	3301      	adds	r3, #1
 800630c:	627b      	str	r3, [r7, #36]	; 0x24
 800630e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006310:	2b77      	cmp	r3, #119	; 0x77
 8006312:	ddef      	ble.n	80062f4 <_ProcessSignalDataTable+0x2c>
		}

		// calculate positive offset coefficient from encoder position
		float pos_offset_coeff = 1;
 8006314:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006318:	623b      	str	r3, [r7, #32]
		if(_encoder_value)
 800631a:	88fb      	ldrh	r3, [r7, #6]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d008      	beq.n	8006332 <_ProcessSignalDataTable+0x6a>
		{
			pos_offset_coeff = (_encoder_value/4);
 8006320:	88fb      	ldrh	r3, [r7, #6]
 8006322:	089b      	lsrs	r3, r3, #2
 8006324:	b29b      	uxth	r3, r3
 8006326:	ee07 3a90 	vmov	s15, r3
 800632a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800632e:	edc7 7a08 	vstr	s15, [r7, #32]
		}

		// adjust amplitude and offset of lookup table copy
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006332:	2300      	movs	r3, #0
 8006334:	61fb      	str	r3, [r7, #28]
 8006336:	e02e      	b.n	8006396 <_ProcessSignalDataTable+0xce>
		{
			tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 8006338:	4a25      	ldr	r2, [pc, #148]	; (80063d0 <_ProcessSignalDataTable+0x108>)
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006340:	ee07 3a90 	vmov	s15, r3
 8006344:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006348:	edd7 7a03 	vldr	s15, [r7, #12]
 800634c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006350:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006354:	ee17 1a90 	vmov	r1, s15
 8006358:	4a1d      	ldr	r2, [pc, #116]	; (80063d0 <_ProcessSignalDataTable+0x108>)
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 8006360:	4a1b      	ldr	r2, [pc, #108]	; (80063d0 <_ProcessSignalDataTable+0x108>)
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006368:	ee07 3a90 	vmov	s15, r3
 800636c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006370:	edd7 7a08 	vldr	s15, [r7, #32]
 8006374:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8006378:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800637c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006380:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006384:	ee17 1a90 	vmov	r1, s15
 8006388:	4a11      	ldr	r2, [pc, #68]	; (80063d0 <_ProcessSignalDataTable+0x108>)
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	3301      	adds	r3, #1
 8006394:	61fb      	str	r3, [r7, #28]
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	2b77      	cmp	r3, #119	; 0x77
 800639a:	ddcd      	ble.n	8006338 <_ProcessSignalDataTable+0x70>
		}

		// restore lookup table copy to active lookup table in SignalChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 800639c:	2300      	movs	r3, #0
 800639e:	61bb      	str	r3, [r7, #24]
 80063a0:	e00e      	b.n	80063c0 <_ProcessSignalDataTable+0xf8>
		{
			SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 80063a2:	2000      	movs	r0, #0
 80063a4:	f7ff fc02 	bl	8005bac <SM_GetOutputChannel>
 80063a8:	4601      	mov	r1, r0
 80063aa:	4a09      	ldr	r2, [pc, #36]	; (80063d0 <_ProcessSignalDataTable+0x108>)
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	3302      	adds	r3, #2
 80063b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	3301      	adds	r3, #1
 80063be:	61bb      	str	r3, [r7, #24]
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	2b77      	cmp	r3, #119	; 0x77
 80063c4:	dded      	ble.n	80063a2 <_ProcessSignalDataTable+0xda>
		}
	}

}
 80063c6:	bf00      	nop
 80063c8:	3728      	adds	r7, #40	; 0x28
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	20002354 	.word	0x20002354

080063d4 <_ProcessAuxDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessAuxDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b088      	sub	sp, #32
 80063d8:	af00      	add	r7, sp, #0
 80063da:	ed87 0a03 	vstr	s0, [r7, #12]
 80063de:	edc7 0a02 	vstr	s1, [r7, #8]
 80063e2:	4603      	mov	r3, r0
 80063e4:	80fb      	strh	r3, [r7, #6]
	if(SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func != PWM_FUNC_MODE)
 80063e6:	2001      	movs	r0, #1
 80063e8:	f7ff fbe0 	bl	8005bac <SM_GetOutputChannel>
 80063ec:	4603      	mov	r3, r0
 80063ee:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	2b06      	cmp	r3, #6
 80063f6:	d059      	beq.n	80064ac <_ProcessAuxDataTable+0xd8>
	{
		// copy refer lookup datat table from AuxChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80063f8:	2300      	movs	r3, #0
 80063fa:	61fb      	str	r3, [r7, #28]
 80063fc:	e00f      	b.n	800641e <_ProcessAuxDataTable+0x4a>
		{
			tmpDataTable[i] = SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data[i];
 80063fe:	2001      	movs	r0, #1
 8006400:	f7ff fbd4 	bl	8005bac <SM_GetOutputChannel>
 8006404:	4603      	mov	r3, r0
 8006406:	685a      	ldr	r2, [r3, #4]
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	4413      	add	r3, r2
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	4933      	ldr	r1, [pc, #204]	; (80064e0 <_ProcessAuxDataTable+0x10c>)
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	3301      	adds	r3, #1
 800641c:	61fb      	str	r3, [r7, #28]
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	2b77      	cmp	r3, #119	; 0x77
 8006422:	ddec      	ble.n	80063fe <_ProcessAuxDataTable+0x2a>
		}

		// calculate positive offset coefficient from encoder position
		float pos_offset_coeff = 1;
 8006424:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006428:	61bb      	str	r3, [r7, #24]
		if(_encoder_value)
 800642a:	88fb      	ldrh	r3, [r7, #6]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d008      	beq.n	8006442 <_ProcessAuxDataTable+0x6e>
		{
			pos_offset_coeff = (_encoder_value/4);
 8006430:	88fb      	ldrh	r3, [r7, #6]
 8006432:	089b      	lsrs	r3, r3, #2
 8006434:	b29b      	uxth	r3, r3
 8006436:	ee07 3a90 	vmov	s15, r3
 800643a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800643e:	edc7 7a06 	vstr	s15, [r7, #24]
		}

		// adjust amplitude and offset of lookup table copy
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006442:	2300      	movs	r3, #0
 8006444:	617b      	str	r3, [r7, #20]
 8006446:	e02e      	b.n	80064a6 <_ProcessAuxDataTable+0xd2>
		{

			tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 8006448:	4a25      	ldr	r2, [pc, #148]	; (80064e0 <_ProcessAuxDataTable+0x10c>)
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006450:	ee07 3a90 	vmov	s15, r3
 8006454:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006458:	edd7 7a03 	vldr	s15, [r7, #12]
 800645c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006460:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006464:	ee17 1a90 	vmov	r1, s15
 8006468:	4a1d      	ldr	r2, [pc, #116]	; (80064e0 <_ProcessAuxDataTable+0x10c>)
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 8006470:	4a1b      	ldr	r2, [pc, #108]	; (80064e0 <_ProcessAuxDataTable+0x10c>)
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006478:	ee07 3a90 	vmov	s15, r3
 800647c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006480:	edd7 7a06 	vldr	s15, [r7, #24]
 8006484:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8006488:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800648c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006490:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006494:	ee17 1a90 	vmov	r1, s15
 8006498:	4a11      	ldr	r2, [pc, #68]	; (80064e0 <_ProcessAuxDataTable+0x10c>)
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	3301      	adds	r3, #1
 80064a4:	617b      	str	r3, [r7, #20]
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	2b77      	cmp	r3, #119	; 0x77
 80064aa:	ddcd      	ble.n	8006448 <_ProcessAuxDataTable+0x74>
		}
	}


	// restore lookup table copy to active lookup table in SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80064ac:	2300      	movs	r3, #0
 80064ae:	613b      	str	r3, [r7, #16]
 80064b0:	e00e      	b.n	80064d0 <_ProcessAuxDataTable+0xfc>
	{
		SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 80064b2:	2001      	movs	r0, #1
 80064b4:	f7ff fb7a 	bl	8005bac <SM_GetOutputChannel>
 80064b8:	4601      	mov	r1, r0
 80064ba:	4a09      	ldr	r2, [pc, #36]	; (80064e0 <_ProcessAuxDataTable+0x10c>)
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	3302      	adds	r3, #2
 80064c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	3301      	adds	r3, #1
 80064ce:	613b      	str	r3, [r7, #16]
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	2b77      	cmp	r3, #119	; 0x77
 80064d4:	dded      	ble.n	80064b2 <_ProcessAuxDataTable+0xde>
	}
}
 80064d6:	bf00      	nop
 80064d8:	3720      	adds	r7, #32
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	20002354 	.word	0x20002354

080064e4 <VPP_MapEncoderPositionToSignalOutput>:
 *
 *	@retval None
 *
 */
void VPP_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	4603      	mov	r3, r0
 80064ec:	80fb      	strh	r3, [r7, #6]
	eAmpSettings_t tmpAmp = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 80064ee:	2000      	movs	r0, #0
 80064f0:	f7ff fb5c 	bl	8005bac <SM_GetOutputChannel>
 80064f4:	4603      	mov	r3, r0
 80064f6:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > amp_last_encoder_value)
 80064fe:	4b15      	ldr	r3, [pc, #84]	; (8006554 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 8006500:	881b      	ldrh	r3, [r3, #0]
 8006502:	88fa      	ldrh	r2, [r7, #6]
 8006504:	429a      	cmp	r2, r3
 8006506:	d90c      	bls.n	8006522 <VPP_MapEncoderPositionToSignalOutput+0x3e>
	{
		tmpAmp++;
 8006508:	7bfb      	ldrb	r3, [r7, #15]
 800650a:	3301      	adds	r3, #1
 800650c:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP98;
 800650e:	7bfb      	ldrb	r3, [r7, #15]
 8006510:	2b61      	cmp	r3, #97	; 0x61
 8006512:	d901      	bls.n	8006518 <VPP_MapEncoderPositionToSignalOutput+0x34>
 8006514:	2361      	movs	r3, #97	; 0x61
 8006516:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(tmpAmp);
 8006518:	7bfb      	ldrb	r3, [r7, #15]
 800651a:	4618      	mov	r0, r3
 800651c:	f7ff fe7c 	bl	8006218 <VPP_ApplyProfileToSignal>
 8006520:	e010      	b.n	8006544 <VPP_MapEncoderPositionToSignalOutput+0x60>
	}
	else if (pEncoderValue < amp_last_encoder_value)
 8006522:	4b0c      	ldr	r3, [pc, #48]	; (8006554 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 8006524:	881b      	ldrh	r3, [r3, #0]
 8006526:	88fa      	ldrh	r2, [r7, #6]
 8006528:	429a      	cmp	r2, r3
 800652a:	d20b      	bcs.n	8006544 <VPP_MapEncoderPositionToSignalOutput+0x60>
	{
		tmpAmp--;
 800652c:	7bfb      	ldrb	r3, [r7, #15]
 800652e:	3b01      	subs	r3, #1
 8006530:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP01;
 8006532:	7bfb      	ldrb	r3, [r7, #15]
 8006534:	2b61      	cmp	r3, #97	; 0x61
 8006536:	d901      	bls.n	800653c <VPP_MapEncoderPositionToSignalOutput+0x58>
 8006538:	2300      	movs	r3, #0
 800653a:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(tmpAmp);
 800653c:	7bfb      	ldrb	r3, [r7, #15]
 800653e:	4618      	mov	r0, r3
 8006540:	f7ff fe6a 	bl	8006218 <VPP_ApplyProfileToSignal>
	}
	amp_last_encoder_value = pEncoderValue;
 8006544:	4a03      	ldr	r2, [pc, #12]	; (8006554 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 8006546:	88fb      	ldrh	r3, [r7, #6]
 8006548:	8013      	strh	r3, [r2, #0]

}
 800654a:	bf00      	nop
 800654c:	3710      	adds	r7, #16
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	20001e98 	.word	0x20001e98

08006558 <VPP_MapEncoderPositionToAuxOutput>:
 *
 *	@retval None
 *
 */
void VPP_MapEncoderPositionToAuxOutput(uint16_t pEncoderValue)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	4603      	mov	r3, r0
 8006560:	80fb      	strh	r3, [r7, #6]

	eAmpSettings_t tmpAmp = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 8006562:	2001      	movs	r0, #1
 8006564:	f7ff fb22 	bl	8005bac <SM_GetOutputChannel>
 8006568:	4603      	mov	r3, r0
 800656a:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > amp_last_encoder_value)
 8006572:	4b15      	ldr	r3, [pc, #84]	; (80065c8 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 8006574:	881b      	ldrh	r3, [r3, #0]
 8006576:	88fa      	ldrh	r2, [r7, #6]
 8006578:	429a      	cmp	r2, r3
 800657a:	d90c      	bls.n	8006596 <VPP_MapEncoderPositionToAuxOutput+0x3e>
	{
		tmpAmp++;
 800657c:	7bfb      	ldrb	r3, [r7, #15]
 800657e:	3301      	adds	r3, #1
 8006580:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP98;
 8006582:	7bfb      	ldrb	r3, [r7, #15]
 8006584:	2b61      	cmp	r3, #97	; 0x61
 8006586:	d901      	bls.n	800658c <VPP_MapEncoderPositionToAuxOutput+0x34>
 8006588:	2361      	movs	r3, #97	; 0x61
 800658a:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToAux(tmpAmp);
 800658c:	7bfb      	ldrb	r3, [r7, #15]
 800658e:	4618      	mov	r0, r3
 8006590:	f7ff fe70 	bl	8006274 <VPP_ApplyProfileToAux>
 8006594:	e010      	b.n	80065b8 <VPP_MapEncoderPositionToAuxOutput+0x60>
	}
	else if (pEncoderValue < amp_last_encoder_value)
 8006596:	4b0c      	ldr	r3, [pc, #48]	; (80065c8 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 8006598:	881b      	ldrh	r3, [r3, #0]
 800659a:	88fa      	ldrh	r2, [r7, #6]
 800659c:	429a      	cmp	r2, r3
 800659e:	d20b      	bcs.n	80065b8 <VPP_MapEncoderPositionToAuxOutput+0x60>
	{
		tmpAmp--;
 80065a0:	7bfb      	ldrb	r3, [r7, #15]
 80065a2:	3b01      	subs	r3, #1
 80065a4:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP01;
 80065a6:	7bfb      	ldrb	r3, [r7, #15]
 80065a8:	2b61      	cmp	r3, #97	; 0x61
 80065aa:	d901      	bls.n	80065b0 <VPP_MapEncoderPositionToAuxOutput+0x58>
 80065ac:	2300      	movs	r3, #0
 80065ae:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToAux(tmpAmp);
 80065b0:	7bfb      	ldrb	r3, [r7, #15]
 80065b2:	4618      	mov	r0, r3
 80065b4:	f7ff fe5e 	bl	8006274 <VPP_ApplyProfileToAux>
	}
	amp_last_encoder_value = pEncoderValue;
 80065b8:	4a03      	ldr	r2, [pc, #12]	; (80065c8 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 80065ba:	88fb      	ldrh	r3, [r7, #6]
 80065bc:	8013      	strh	r3, [r2, #0]

}
 80065be:	bf00      	nop
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	20001e98 	.word	0x20001e98

080065cc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b08c      	sub	sp, #48	; 0x30
 80065d0:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80065d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065d6:	2200      	movs	r2, #0
 80065d8:	601a      	str	r2, [r3, #0]
 80065da:	605a      	str	r2, [r3, #4]
 80065dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80065de:	1d3b      	adds	r3, r7, #4
 80065e0:	2220      	movs	r2, #32
 80065e2:	2100      	movs	r1, #0
 80065e4:	4618      	mov	r0, r3
 80065e6:	f008 fea9 	bl	800f33c <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80065ea:	4b32      	ldr	r3, [pc, #200]	; (80066b4 <MX_ADC1_Init+0xe8>)
 80065ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80065f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80065f2:	4b30      	ldr	r3, [pc, #192]	; (80066b4 <MX_ADC1_Init+0xe8>)
 80065f4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80065f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80065fa:	4b2e      	ldr	r3, [pc, #184]	; (80066b4 <MX_ADC1_Init+0xe8>)
 80065fc:	2200      	movs	r2, #0
 80065fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006600:	4b2c      	ldr	r3, [pc, #176]	; (80066b4 <MX_ADC1_Init+0xe8>)
 8006602:	2200      	movs	r2, #0
 8006604:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8006606:	4b2b      	ldr	r3, [pc, #172]	; (80066b4 <MX_ADC1_Init+0xe8>)
 8006608:	2200      	movs	r2, #0
 800660a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800660c:	4b29      	ldr	r3, [pc, #164]	; (80066b4 <MX_ADC1_Init+0xe8>)
 800660e:	2200      	movs	r2, #0
 8006610:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006612:	4b28      	ldr	r3, [pc, #160]	; (80066b4 <MX_ADC1_Init+0xe8>)
 8006614:	2204      	movs	r2, #4
 8006616:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8006618:	4b26      	ldr	r3, [pc, #152]	; (80066b4 <MX_ADC1_Init+0xe8>)
 800661a:	2200      	movs	r2, #0
 800661c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800661e:	4b25      	ldr	r3, [pc, #148]	; (80066b4 <MX_ADC1_Init+0xe8>)
 8006620:	2201      	movs	r2, #1
 8006622:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8006624:	4b23      	ldr	r3, [pc, #140]	; (80066b4 <MX_ADC1_Init+0xe8>)
 8006626:	2201      	movs	r2, #1
 8006628:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800662a:	4b22      	ldr	r3, [pc, #136]	; (80066b4 <MX_ADC1_Init+0xe8>)
 800662c:	2200      	movs	r2, #0
 800662e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006632:	4b20      	ldr	r3, [pc, #128]	; (80066b4 <MX_ADC1_Init+0xe8>)
 8006634:	2200      	movs	r2, #0
 8006636:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006638:	4b1e      	ldr	r3, [pc, #120]	; (80066b4 <MX_ADC1_Init+0xe8>)
 800663a:	2200      	movs	r2, #0
 800663c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800663e:	4b1d      	ldr	r3, [pc, #116]	; (80066b4 <MX_ADC1_Init+0xe8>)
 8006640:	2201      	movs	r2, #1
 8006642:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8006646:	4b1b      	ldr	r3, [pc, #108]	; (80066b4 <MX_ADC1_Init+0xe8>)
 8006648:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800664c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800664e:	4b19      	ldr	r3, [pc, #100]	; (80066b4 <MX_ADC1_Init+0xe8>)
 8006650:	2200      	movs	r2, #0
 8006652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006656:	4817      	ldr	r0, [pc, #92]	; (80066b4 <MX_ADC1_Init+0xe8>)
 8006658:	f001 ff58 	bl	800850c <HAL_ADC_Init>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d001      	beq.n	8006666 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8006662:	f000 fe99 	bl	8007398 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8006666:	2300      	movs	r3, #0
 8006668:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800666a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800666e:	4619      	mov	r1, r3
 8006670:	4810      	ldr	r0, [pc, #64]	; (80066b4 <MX_ADC1_Init+0xe8>)
 8006672:	f002 fce1 	bl	8009038 <HAL_ADCEx_MultiModeConfigChannel>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d001      	beq.n	8006680 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800667c:	f000 fe8c 	bl	8007398 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8006680:	4b0d      	ldr	r3, [pc, #52]	; (80066b8 <MX_ADC1_Init+0xec>)
 8006682:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006684:	2306      	movs	r3, #6
 8006686:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8006688:	2300      	movs	r3, #0
 800668a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800668c:	237f      	movs	r3, #127	; 0x7f
 800668e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8006690:	2304      	movs	r3, #4
 8006692:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8006694:	2300      	movs	r3, #0
 8006696:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006698:	1d3b      	adds	r3, r7, #4
 800669a:	4619      	mov	r1, r3
 800669c:	4805      	ldr	r0, [pc, #20]	; (80066b4 <MX_ADC1_Init+0xe8>)
 800669e:	f002 f8f5 	bl	800888c <HAL_ADC_ConfigChannel>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d001      	beq.n	80066ac <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80066a8:	f000 fe76 	bl	8007398 <Error_Handler>
  }

}
 80066ac:	bf00      	nop
 80066ae:	3730      	adds	r7, #48	; 0x30
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	20002534 	.word	0x20002534
 80066b8:	0c900008 	.word	0x0c900008

080066bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b08a      	sub	sp, #40	; 0x28
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066c4:	f107 0314 	add.w	r3, r7, #20
 80066c8:	2200      	movs	r2, #0
 80066ca:	601a      	str	r2, [r3, #0]
 80066cc:	605a      	str	r2, [r3, #4]
 80066ce:	609a      	str	r2, [r3, #8]
 80066d0:	60da      	str	r2, [r3, #12]
 80066d2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066dc:	d14f      	bne.n	800677e <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80066de:	4b2a      	ldr	r3, [pc, #168]	; (8006788 <HAL_ADC_MspInit+0xcc>)
 80066e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066e2:	4a29      	ldr	r2, [pc, #164]	; (8006788 <HAL_ADC_MspInit+0xcc>)
 80066e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80066e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80066ea:	4b27      	ldr	r3, [pc, #156]	; (8006788 <HAL_ADC_MspInit+0xcc>)
 80066ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066f2:	613b      	str	r3, [r7, #16]
 80066f4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066f6:	4b24      	ldr	r3, [pc, #144]	; (8006788 <HAL_ADC_MspInit+0xcc>)
 80066f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066fa:	4a23      	ldr	r2, [pc, #140]	; (8006788 <HAL_ADC_MspInit+0xcc>)
 80066fc:	f043 0301 	orr.w	r3, r3, #1
 8006700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006702:	4b21      	ldr	r3, [pc, #132]	; (8006788 <HAL_ADC_MspInit+0xcc>)
 8006704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006706:	f003 0301 	and.w	r3, r3, #1
 800670a:	60fb      	str	r3, [r7, #12]
 800670c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800670e:	2304      	movs	r3, #4
 8006710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006712:	2303      	movs	r3, #3
 8006714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006716:	2300      	movs	r3, #0
 8006718:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800671a:	f107 0314 	add.w	r3, r7, #20
 800671e:	4619      	mov	r1, r3
 8006720:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006724:	f004 f890 	bl	800a848 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8006728:	4b18      	ldr	r3, [pc, #96]	; (800678c <HAL_ADC_MspInit+0xd0>)
 800672a:	4a19      	ldr	r2, [pc, #100]	; (8006790 <HAL_ADC_MspInit+0xd4>)
 800672c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800672e:	4b17      	ldr	r3, [pc, #92]	; (800678c <HAL_ADC_MspInit+0xd0>)
 8006730:	2205      	movs	r2, #5
 8006732:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006734:	4b15      	ldr	r3, [pc, #84]	; (800678c <HAL_ADC_MspInit+0xd0>)
 8006736:	2200      	movs	r2, #0
 8006738:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800673a:	4b14      	ldr	r3, [pc, #80]	; (800678c <HAL_ADC_MspInit+0xd0>)
 800673c:	2200      	movs	r2, #0
 800673e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006740:	4b12      	ldr	r3, [pc, #72]	; (800678c <HAL_ADC_MspInit+0xd0>)
 8006742:	2280      	movs	r2, #128	; 0x80
 8006744:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006746:	4b11      	ldr	r3, [pc, #68]	; (800678c <HAL_ADC_MspInit+0xd0>)
 8006748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800674c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800674e:	4b0f      	ldr	r3, [pc, #60]	; (800678c <HAL_ADC_MspInit+0xd0>)
 8006750:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006754:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006756:	4b0d      	ldr	r3, [pc, #52]	; (800678c <HAL_ADC_MspInit+0xd0>)
 8006758:	2220      	movs	r2, #32
 800675a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800675c:	4b0b      	ldr	r3, [pc, #44]	; (800678c <HAL_ADC_MspInit+0xd0>)
 800675e:	2200      	movs	r2, #0
 8006760:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006762:	480a      	ldr	r0, [pc, #40]	; (800678c <HAL_ADC_MspInit+0xd0>)
 8006764:	f003 fda4 	bl	800a2b0 <HAL_DMA_Init>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d001      	beq.n	8006772 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 800676e:	f000 fe13 	bl	8007398 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a05      	ldr	r2, [pc, #20]	; (800678c <HAL_ADC_MspInit+0xd0>)
 8006776:	655a      	str	r2, [r3, #84]	; 0x54
 8006778:	4a04      	ldr	r2, [pc, #16]	; (800678c <HAL_ADC_MspInit+0xd0>)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800677e:	bf00      	nop
 8006780:	3728      	adds	r7, #40	; 0x28
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	40021000 	.word	0x40021000
 800678c:	200025a0 	.word	0x200025a0
 8006790:	40020008 	.word	0x40020008

08006794 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8006798:	4b0f      	ldr	r3, [pc, #60]	; (80067d8 <MX_COMP1_Init+0x44>)
 800679a:	4a10      	ldr	r2, [pc, #64]	; (80067dc <MX_COMP1_Init+0x48>)
 800679c:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800679e:	4b0e      	ldr	r3, [pc, #56]	; (80067d8 <MX_COMP1_Init+0x44>)
 80067a0:	2200      	movs	r2, #0
 80067a2:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 80067a4:	4b0c      	ldr	r3, [pc, #48]	; (80067d8 <MX_COMP1_Init+0x44>)
 80067a6:	4a0e      	ldr	r2, [pc, #56]	; (80067e0 <MX_COMP1_Init+0x4c>)
 80067a8:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80067aa:	4b0b      	ldr	r3, [pc, #44]	; (80067d8 <MX_COMP1_Init+0x44>)
 80067ac:	2200      	movs	r2, #0
 80067ae:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80067b0:	4b09      	ldr	r3, [pc, #36]	; (80067d8 <MX_COMP1_Init+0x44>)
 80067b2:	2200      	movs	r2, #0
 80067b4:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80067b6:	4b08      	ldr	r3, [pc, #32]	; (80067d8 <MX_COMP1_Init+0x44>)
 80067b8:	2200      	movs	r2, #0
 80067ba:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80067bc:	4b06      	ldr	r3, [pc, #24]	; (80067d8 <MX_COMP1_Init+0x44>)
 80067be:	2200      	movs	r2, #0
 80067c0:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80067c2:	4805      	ldr	r0, [pc, #20]	; (80067d8 <MX_COMP1_Init+0x44>)
 80067c4:	f002 fe8c 	bl	80094e0 <HAL_COMP_Init>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d001      	beq.n	80067d2 <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 80067ce:	f000 fde3 	bl	8007398 <Error_Handler>
  }

}
 80067d2:	bf00      	nop
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	20002600 	.word	0x20002600
 80067dc:	40010200 	.word	0x40010200
 80067e0:	00800030 	.word	0x00800030

080067e4 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b088      	sub	sp, #32
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067ec:	f107 030c 	add.w	r3, r7, #12
 80067f0:	2200      	movs	r2, #0
 80067f2:	601a      	str	r2, [r3, #0]
 80067f4:	605a      	str	r2, [r3, #4]
 80067f6:	609a      	str	r2, [r3, #8]
 80067f8:	60da      	str	r2, [r3, #12]
 80067fa:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a0f      	ldr	r2, [pc, #60]	; (8006840 <HAL_COMP_MspInit+0x5c>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d118      	bne.n	8006838 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006806:	4b0f      	ldr	r3, [pc, #60]	; (8006844 <HAL_COMP_MspInit+0x60>)
 8006808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800680a:	4a0e      	ldr	r2, [pc, #56]	; (8006844 <HAL_COMP_MspInit+0x60>)
 800680c:	f043 0301 	orr.w	r3, r3, #1
 8006810:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006812:	4b0c      	ldr	r3, [pc, #48]	; (8006844 <HAL_COMP_MspInit+0x60>)
 8006814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006816:	f003 0301 	and.w	r3, r3, #1
 800681a:	60bb      	str	r3, [r7, #8]
 800681c:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800681e:	2302      	movs	r3, #2
 8006820:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006822:	2303      	movs	r3, #3
 8006824:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006826:	2300      	movs	r3, #0
 8006828:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800682a:	f107 030c 	add.w	r3, r7, #12
 800682e:	4619      	mov	r1, r3
 8006830:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006834:	f004 f808 	bl	800a848 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8006838:	bf00      	nop
 800683a:	3720      	adds	r7, #32
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	40010200 	.word	0x40010200
 8006844:	40021000 	.word	0x40021000

08006848 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b08c      	sub	sp, #48	; 0x30
 800684c:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800684e:	463b      	mov	r3, r7
 8006850:	2230      	movs	r2, #48	; 0x30
 8006852:	2100      	movs	r1, #0
 8006854:	4618      	mov	r0, r3
 8006856:	f008 fd71 	bl	800f33c <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 800685a:	4b1e      	ldr	r3, [pc, #120]	; (80068d4 <MX_DAC1_Init+0x8c>)
 800685c:	4a1e      	ldr	r2, [pc, #120]	; (80068d8 <MX_DAC1_Init+0x90>)
 800685e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8006860:	481c      	ldr	r0, [pc, #112]	; (80068d4 <MX_DAC1_Init+0x8c>)
 8006862:	f003 f910 	bl	8009a86 <HAL_DAC_Init>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d001      	beq.n	8006870 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800686c:	f000 fd94 	bl	8007398 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006870:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006874:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8006876:	2300      	movs	r3, #0
 8006878:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800687a:	2300      	movs	r3, #0
 800687c:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800687e:	2300      	movs	r3, #0
 8006880:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8006882:	2306      	movs	r3, #6
 8006884:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8006886:	2300      	movs	r3, #0
 8006888:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800688a:	2300      	movs	r3, #0
 800688c:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800688e:	2301      	movs	r3, #1
 8006890:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006892:	2300      	movs	r3, #0
 8006894:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8006896:	463b      	mov	r3, r7
 8006898:	2200      	movs	r2, #0
 800689a:	4619      	mov	r1, r3
 800689c:	480d      	ldr	r0, [pc, #52]	; (80068d4 <MX_DAC1_Init+0x8c>)
 800689e:	f003 fad1 	bl	8009e44 <HAL_DAC_ConfigChannel>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d001      	beq.n	80068ac <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 80068a8:	f000 fd76 	bl	8007398 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80068ac:	2300      	movs	r3, #0
 80068ae:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80068b0:	2301      	movs	r3, #1
 80068b2:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80068b4:	463b      	mov	r3, r7
 80068b6:	2210      	movs	r2, #16
 80068b8:	4619      	mov	r1, r3
 80068ba:	4806      	ldr	r0, [pc, #24]	; (80068d4 <MX_DAC1_Init+0x8c>)
 80068bc:	f003 fac2 	bl	8009e44 <HAL_DAC_ConfigChannel>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d001      	beq.n	80068ca <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 80068c6:	f000 fd67 	bl	8007398 <Error_Handler>
  }

}
 80068ca:	bf00      	nop
 80068cc:	3730      	adds	r7, #48	; 0x30
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	20002638 	.word	0x20002638
 80068d8:	50000800 	.word	0x50000800

080068dc <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b08c      	sub	sp, #48	; 0x30
 80068e0:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80068e2:	463b      	mov	r3, r7
 80068e4:	2230      	movs	r2, #48	; 0x30
 80068e6:	2100      	movs	r1, #0
 80068e8:	4618      	mov	r0, r3
 80068ea:	f008 fd27 	bl	800f33c <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 80068ee:	4b16      	ldr	r3, [pc, #88]	; (8006948 <MX_DAC2_Init+0x6c>)
 80068f0:	4a16      	ldr	r2, [pc, #88]	; (800694c <MX_DAC2_Init+0x70>)
 80068f2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80068f4:	4814      	ldr	r0, [pc, #80]	; (8006948 <MX_DAC2_Init+0x6c>)
 80068f6:	f003 f8c6 	bl	8009a86 <HAL_DAC_Init>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d001      	beq.n	8006904 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8006900:	f000 fd4a 	bl	8007398 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006904:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006908:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800690a:	2300      	movs	r3, #0
 800690c:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800690e:	2300      	movs	r3, #0
 8006910:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006912:	2300      	movs	r3, #0
 8006914:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8006916:	2306      	movs	r3, #6
 8006918:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800691a:	2300      	movs	r3, #0
 800691c:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800691e:	2300      	movs	r3, #0
 8006920:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006922:	2301      	movs	r3, #1
 8006924:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006926:	2300      	movs	r3, #0
 8006928:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800692a:	463b      	mov	r3, r7
 800692c:	2200      	movs	r2, #0
 800692e:	4619      	mov	r1, r3
 8006930:	4805      	ldr	r0, [pc, #20]	; (8006948 <MX_DAC2_Init+0x6c>)
 8006932:	f003 fa87 	bl	8009e44 <HAL_DAC_ConfigChannel>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d001      	beq.n	8006940 <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 800693c:	f000 fd2c 	bl	8007398 <Error_Handler>
  }

}
 8006940:	bf00      	nop
 8006942:	3730      	adds	r7, #48	; 0x30
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	20002624 	.word	0x20002624
 800694c:	50000c00 	.word	0x50000c00

08006950 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b08c      	sub	sp, #48	; 0x30
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006958:	f107 031c 	add.w	r3, r7, #28
 800695c:	2200      	movs	r2, #0
 800695e:	601a      	str	r2, [r3, #0]
 8006960:	605a      	str	r2, [r3, #4]
 8006962:	609a      	str	r2, [r3, #8]
 8006964:	60da      	str	r2, [r3, #12]
 8006966:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a56      	ldr	r2, [pc, #344]	; (8006ac8 <HAL_DAC_MspInit+0x178>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d150      	bne.n	8006a14 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8006972:	4b56      	ldr	r3, [pc, #344]	; (8006acc <HAL_DAC_MspInit+0x17c>)
 8006974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006976:	4a55      	ldr	r2, [pc, #340]	; (8006acc <HAL_DAC_MspInit+0x17c>)
 8006978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800697c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800697e:	4b53      	ldr	r3, [pc, #332]	; (8006acc <HAL_DAC_MspInit+0x17c>)
 8006980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006986:	61bb      	str	r3, [r7, #24]
 8006988:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800698a:	4b50      	ldr	r3, [pc, #320]	; (8006acc <HAL_DAC_MspInit+0x17c>)
 800698c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800698e:	4a4f      	ldr	r2, [pc, #316]	; (8006acc <HAL_DAC_MspInit+0x17c>)
 8006990:	f043 0301 	orr.w	r3, r3, #1
 8006994:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006996:	4b4d      	ldr	r3, [pc, #308]	; (8006acc <HAL_DAC_MspInit+0x17c>)
 8006998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800699a:	f003 0301 	and.w	r3, r3, #1
 800699e:	617b      	str	r3, [r7, #20]
 80069a0:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80069a2:	2330      	movs	r3, #48	; 0x30
 80069a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80069a6:	2303      	movs	r3, #3
 80069a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069aa:	2300      	movs	r3, #0
 80069ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069ae:	f107 031c 	add.w	r3, r7, #28
 80069b2:	4619      	mov	r1, r3
 80069b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80069b8:	f003 ff46 	bl	800a848 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 80069bc:	4b44      	ldr	r3, [pc, #272]	; (8006ad0 <HAL_DAC_MspInit+0x180>)
 80069be:	4a45      	ldr	r2, [pc, #276]	; (8006ad4 <HAL_DAC_MspInit+0x184>)
 80069c0:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 80069c2:	4b43      	ldr	r3, [pc, #268]	; (8006ad0 <HAL_DAC_MspInit+0x180>)
 80069c4:	2206      	movs	r2, #6
 80069c6:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80069c8:	4b41      	ldr	r3, [pc, #260]	; (8006ad0 <HAL_DAC_MspInit+0x180>)
 80069ca:	2210      	movs	r2, #16
 80069cc:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80069ce:	4b40      	ldr	r3, [pc, #256]	; (8006ad0 <HAL_DAC_MspInit+0x180>)
 80069d0:	2200      	movs	r2, #0
 80069d2:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80069d4:	4b3e      	ldr	r3, [pc, #248]	; (8006ad0 <HAL_DAC_MspInit+0x180>)
 80069d6:	2280      	movs	r2, #128	; 0x80
 80069d8:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80069da:	4b3d      	ldr	r3, [pc, #244]	; (8006ad0 <HAL_DAC_MspInit+0x180>)
 80069dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069e0:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80069e2:	4b3b      	ldr	r3, [pc, #236]	; (8006ad0 <HAL_DAC_MspInit+0x180>)
 80069e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069e8:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80069ea:	4b39      	ldr	r3, [pc, #228]	; (8006ad0 <HAL_DAC_MspInit+0x180>)
 80069ec:	2220      	movs	r2, #32
 80069ee:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80069f0:	4b37      	ldr	r3, [pc, #220]	; (8006ad0 <HAL_DAC_MspInit+0x180>)
 80069f2:	2200      	movs	r2, #0
 80069f4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80069f6:	4836      	ldr	r0, [pc, #216]	; (8006ad0 <HAL_DAC_MspInit+0x180>)
 80069f8:	f003 fc5a 	bl	800a2b0 <HAL_DMA_Init>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d001      	beq.n	8006a06 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8006a02:	f000 fcc9 	bl	8007398 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a31      	ldr	r2, [pc, #196]	; (8006ad0 <HAL_DAC_MspInit+0x180>)
 8006a0a:	609a      	str	r2, [r3, #8]
 8006a0c:	4a30      	ldr	r2, [pc, #192]	; (8006ad0 <HAL_DAC_MspInit+0x180>)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 8006a12:	e054      	b.n	8006abe <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a2f      	ldr	r2, [pc, #188]	; (8006ad8 <HAL_DAC_MspInit+0x188>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d14f      	bne.n	8006abe <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8006a1e:	4b2b      	ldr	r3, [pc, #172]	; (8006acc <HAL_DAC_MspInit+0x17c>)
 8006a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a22:	4a2a      	ldr	r2, [pc, #168]	; (8006acc <HAL_DAC_MspInit+0x17c>)
 8006a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006a2a:	4b28      	ldr	r3, [pc, #160]	; (8006acc <HAL_DAC_MspInit+0x17c>)
 8006a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a32:	613b      	str	r3, [r7, #16]
 8006a34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a36:	4b25      	ldr	r3, [pc, #148]	; (8006acc <HAL_DAC_MspInit+0x17c>)
 8006a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a3a:	4a24      	ldr	r2, [pc, #144]	; (8006acc <HAL_DAC_MspInit+0x17c>)
 8006a3c:	f043 0301 	orr.w	r3, r3, #1
 8006a40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006a42:	4b22      	ldr	r3, [pc, #136]	; (8006acc <HAL_DAC_MspInit+0x17c>)
 8006a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a46:	f003 0301 	and.w	r3, r3, #1
 8006a4a:	60fb      	str	r3, [r7, #12]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006a4e:	2340      	movs	r3, #64	; 0x40
 8006a50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006a52:	2303      	movs	r3, #3
 8006a54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a56:	2300      	movs	r3, #0
 8006a58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a5a:	f107 031c 	add.w	r3, r7, #28
 8006a5e:	4619      	mov	r1, r3
 8006a60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006a64:	f003 fef0 	bl	800a848 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 8006a68:	4b1c      	ldr	r3, [pc, #112]	; (8006adc <HAL_DAC_MspInit+0x18c>)
 8006a6a:	4a1d      	ldr	r2, [pc, #116]	; (8006ae0 <HAL_DAC_MspInit+0x190>)
 8006a6c:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8006a6e:	4b1b      	ldr	r3, [pc, #108]	; (8006adc <HAL_DAC_MspInit+0x18c>)
 8006a70:	2229      	movs	r2, #41	; 0x29
 8006a72:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006a74:	4b19      	ldr	r3, [pc, #100]	; (8006adc <HAL_DAC_MspInit+0x18c>)
 8006a76:	2210      	movs	r2, #16
 8006a78:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a7a:	4b18      	ldr	r3, [pc, #96]	; (8006adc <HAL_DAC_MspInit+0x18c>)
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006a80:	4b16      	ldr	r3, [pc, #88]	; (8006adc <HAL_DAC_MspInit+0x18c>)
 8006a82:	2280      	movs	r2, #128	; 0x80
 8006a84:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006a86:	4b15      	ldr	r3, [pc, #84]	; (8006adc <HAL_DAC_MspInit+0x18c>)
 8006a88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a8c:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006a8e:	4b13      	ldr	r3, [pc, #76]	; (8006adc <HAL_DAC_MspInit+0x18c>)
 8006a90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a94:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8006a96:	4b11      	ldr	r3, [pc, #68]	; (8006adc <HAL_DAC_MspInit+0x18c>)
 8006a98:	2220      	movs	r2, #32
 8006a9a:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8006a9c:	4b0f      	ldr	r3, [pc, #60]	; (8006adc <HAL_DAC_MspInit+0x18c>)
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8006aa2:	480e      	ldr	r0, [pc, #56]	; (8006adc <HAL_DAC_MspInit+0x18c>)
 8006aa4:	f003 fc04 	bl	800a2b0 <HAL_DMA_Init>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d001      	beq.n	8006ab2 <HAL_DAC_MspInit+0x162>
      Error_Handler();
 8006aae:	f000 fc73 	bl	8007398 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a09      	ldr	r2, [pc, #36]	; (8006adc <HAL_DAC_MspInit+0x18c>)
 8006ab6:	609a      	str	r2, [r3, #8]
 8006ab8:	4a08      	ldr	r2, [pc, #32]	; (8006adc <HAL_DAC_MspInit+0x18c>)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6293      	str	r3, [r2, #40]	; 0x28
}
 8006abe:	bf00      	nop
 8006ac0:	3730      	adds	r7, #48	; 0x30
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	50000800 	.word	0x50000800
 8006acc:	40021000 	.word	0x40021000
 8006ad0:	20001eac 	.word	0x20001eac
 8006ad4:	4002001c 	.word	0x4002001c
 8006ad8:	50000c00 	.word	0x50000c00
 8006adc:	2000264c 	.word	0x2000264c
 8006ae0:	40020030 	.word	0x40020030

08006ae4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8006aea:	4b1a      	ldr	r3, [pc, #104]	; (8006b54 <MX_DMA_Init+0x70>)
 8006aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aee:	4a19      	ldr	r2, [pc, #100]	; (8006b54 <MX_DMA_Init+0x70>)
 8006af0:	f043 0304 	orr.w	r3, r3, #4
 8006af4:	6493      	str	r3, [r2, #72]	; 0x48
 8006af6:	4b17      	ldr	r3, [pc, #92]	; (8006b54 <MX_DMA_Init+0x70>)
 8006af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006afa:	f003 0304 	and.w	r3, r3, #4
 8006afe:	607b      	str	r3, [r7, #4]
 8006b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006b02:	4b14      	ldr	r3, [pc, #80]	; (8006b54 <MX_DMA_Init+0x70>)
 8006b04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b06:	4a13      	ldr	r2, [pc, #76]	; (8006b54 <MX_DMA_Init+0x70>)
 8006b08:	f043 0301 	orr.w	r3, r3, #1
 8006b0c:	6493      	str	r3, [r2, #72]	; 0x48
 8006b0e:	4b11      	ldr	r3, [pc, #68]	; (8006b54 <MX_DMA_Init+0x70>)
 8006b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b12:	f003 0301 	and.w	r3, r3, #1
 8006b16:	603b      	str	r3, [r7, #0]
 8006b18:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	2101      	movs	r1, #1
 8006b1e:	200b      	movs	r0, #11
 8006b20:	f002 ff6f 	bl	8009a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8006b24:	200b      	movs	r0, #11
 8006b26:	f002 ff86 	bl	8009a36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	2100      	movs	r1, #0
 8006b2e:	200c      	movs	r0, #12
 8006b30:	f002 ff67 	bl	8009a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8006b34:	200c      	movs	r0, #12
 8006b36:	f002 ff7e 	bl	8009a36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	2100      	movs	r1, #0
 8006b3e:	200d      	movs	r0, #13
 8006b40:	f002 ff5f 	bl	8009a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8006b44:	200d      	movs	r0, #13
 8006b46:	f002 ff76 	bl	8009a36 <HAL_NVIC_EnableIRQ>

}
 8006b4a:	bf00      	nop
 8006b4c:	3708      	adds	r7, #8
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	40021000 	.word	0x40021000

08006b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006b5c:	4b04      	ldr	r3, [pc, #16]	; (8006b70 <__NVIC_GetPriorityGrouping+0x18>)
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	0a1b      	lsrs	r3, r3, #8
 8006b62:	f003 0307 	and.w	r3, r3, #7
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr
 8006b70:	e000ed00 	.word	0xe000ed00

08006b74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	db0b      	blt.n	8006b9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006b86:	79fb      	ldrb	r3, [r7, #7]
 8006b88:	f003 021f 	and.w	r2, r3, #31
 8006b8c:	4907      	ldr	r1, [pc, #28]	; (8006bac <__NVIC_EnableIRQ+0x38>)
 8006b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b92:	095b      	lsrs	r3, r3, #5
 8006b94:	2001      	movs	r0, #1
 8006b96:	fa00 f202 	lsl.w	r2, r0, r2
 8006b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006b9e:	bf00      	nop
 8006ba0:	370c      	adds	r7, #12
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr
 8006baa:	bf00      	nop
 8006bac:	e000e100 	.word	0xe000e100

08006bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	6039      	str	r1, [r7, #0]
 8006bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	db0a      	blt.n	8006bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	b2da      	uxtb	r2, r3
 8006bc8:	490c      	ldr	r1, [pc, #48]	; (8006bfc <__NVIC_SetPriority+0x4c>)
 8006bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bce:	0112      	lsls	r2, r2, #4
 8006bd0:	b2d2      	uxtb	r2, r2
 8006bd2:	440b      	add	r3, r1
 8006bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006bd8:	e00a      	b.n	8006bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	b2da      	uxtb	r2, r3
 8006bde:	4908      	ldr	r1, [pc, #32]	; (8006c00 <__NVIC_SetPriority+0x50>)
 8006be0:	79fb      	ldrb	r3, [r7, #7]
 8006be2:	f003 030f 	and.w	r3, r3, #15
 8006be6:	3b04      	subs	r3, #4
 8006be8:	0112      	lsls	r2, r2, #4
 8006bea:	b2d2      	uxtb	r2, r2
 8006bec:	440b      	add	r3, r1
 8006bee:	761a      	strb	r2, [r3, #24]
}
 8006bf0:	bf00      	nop
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr
 8006bfc:	e000e100 	.word	0xe000e100
 8006c00:	e000ed00 	.word	0xe000ed00

08006c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b089      	sub	sp, #36	; 0x24
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f003 0307 	and.w	r3, r3, #7
 8006c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	f1c3 0307 	rsb	r3, r3, #7
 8006c1e:	2b04      	cmp	r3, #4
 8006c20:	bf28      	it	cs
 8006c22:	2304      	movcs	r3, #4
 8006c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	3304      	adds	r3, #4
 8006c2a:	2b06      	cmp	r3, #6
 8006c2c:	d902      	bls.n	8006c34 <NVIC_EncodePriority+0x30>
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	3b03      	subs	r3, #3
 8006c32:	e000      	b.n	8006c36 <NVIC_EncodePriority+0x32>
 8006c34:	2300      	movs	r3, #0
 8006c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006c38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c42:	43da      	mvns	r2, r3
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	401a      	ands	r2, r3
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006c4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	fa01 f303 	lsl.w	r3, r1, r3
 8006c56:	43d9      	mvns	r1, r3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006c5c:	4313      	orrs	r3, r2
         );
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3724      	adds	r7, #36	; 0x24
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr
	...

08006c6c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b085      	sub	sp, #20
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 8006c76:	4a14      	ldr	r2, [pc, #80]	; (8006cc8 <LL_SYSCFG_SetEXTISource+0x5c>)
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	f003 0303 	and.w	r3, r3, #3
 8006c7e:	3302      	adds	r3, #2
 8006c80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	0c1b      	lsrs	r3, r3, #16
 8006c88:	43db      	mvns	r3, r3
 8006c8a:	ea02 0103 	and.w	r1, r2, r3
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	0c1b      	lsrs	r3, r3, #16
 8006c92:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	fa93 f3a3 	rbit	r3, r3
 8006c9a:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	fab3 f383 	clz	r3, r3
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	f003 031f 	and.w	r3, r3, #31
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	409a      	lsls	r2, r3
 8006cac:	4806      	ldr	r0, [pc, #24]	; (8006cc8 <LL_SYSCFG_SetEXTISource+0x5c>)
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	f003 0303 	and.w	r3, r3, #3
 8006cb4:	430a      	orrs	r2, r1
 8006cb6:	3302      	adds	r3, #2
 8006cb8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8006cbc:	bf00      	nop
 8006cbe:	3714      	adds	r7, #20
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr
 8006cc8:	40010000 	.word	0x40010000

08006ccc <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b089      	sub	sp, #36	; 0x24
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	fa93 f3a3 	rbit	r3, r3
 8006ce6:	613b      	str	r3, [r7, #16]
  return result;
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	fab3 f383 	clz	r3, r3
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	005b      	lsls	r3, r3, #1
 8006cf2:	2103      	movs	r1, #3
 8006cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8006cf8:	43db      	mvns	r3, r3
 8006cfa:	401a      	ands	r2, r3
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	fa93 f3a3 	rbit	r3, r3
 8006d06:	61bb      	str	r3, [r7, #24]
  return result;
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	fab3 f383 	clz	r3, r3
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	005b      	lsls	r3, r3, #1
 8006d12:	6879      	ldr	r1, [r7, #4]
 8006d14:	fa01 f303 	lsl.w	r3, r1, r3
 8006d18:	431a      	orrs	r2, r3
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	601a      	str	r2, [r3, #0]
}
 8006d1e:	bf00      	nop
 8006d20:	3724      	adds	r7, #36	; 0x24
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr

08006d2a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b089      	sub	sp, #36	; 0x24
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	60f8      	str	r0, [r7, #12]
 8006d32:	60b9      	str	r1, [r7, #8]
 8006d34:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	68da      	ldr	r2, [r3, #12]
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	fa93 f3a3 	rbit	r3, r3
 8006d44:	613b      	str	r3, [r7, #16]
  return result;
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	fab3 f383 	clz	r3, r3
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	005b      	lsls	r3, r3, #1
 8006d50:	2103      	movs	r1, #3
 8006d52:	fa01 f303 	lsl.w	r3, r1, r3
 8006d56:	43db      	mvns	r3, r3
 8006d58:	401a      	ands	r2, r3
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	fa93 f3a3 	rbit	r3, r3
 8006d64:	61bb      	str	r3, [r7, #24]
  return result;
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	fab3 f383 	clz	r3, r3
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	005b      	lsls	r3, r3, #1
 8006d70:	6879      	ldr	r1, [r7, #4]
 8006d72:	fa01 f303 	lsl.w	r3, r1, r3
 8006d76:	431a      	orrs	r2, r3
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	60da      	str	r2, [r3, #12]
}
 8006d7c:	bf00      	nop
 8006d7e:	3724      	adds	r7, #36	; 0x24
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	683a      	ldr	r2, [r7, #0]
 8006d96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006d98:	bf00      	nop
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006dac:	4b08      	ldr	r3, [pc, #32]	; (8006dd0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006dae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006db0:	4907      	ldr	r1, [pc, #28]	; (8006dd0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006db8:	4b05      	ldr	r3, [pc, #20]	; (8006dd0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006dba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4013      	ands	r3, r2
 8006dc0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
}
 8006dc4:	bf00      	nop
 8006dc6:	3714      	adds	r7, #20
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr
 8006dd0:	40021000 	.word	0x40021000

08006dd4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b08a      	sub	sp, #40	; 0x28
 8006dd8:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8006dda:	f107 031c 	add.w	r3, r7, #28
 8006dde:	2200      	movs	r2, #0
 8006de0:	601a      	str	r2, [r3, #0]
 8006de2:	605a      	str	r2, [r3, #4]
 8006de4:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006de6:	1d3b      	adds	r3, r7, #4
 8006de8:	2200      	movs	r2, #0
 8006dea:	601a      	str	r2, [r3, #0]
 8006dec:	605a      	str	r2, [r3, #4]
 8006dee:	609a      	str	r2, [r3, #8]
 8006df0:	60da      	str	r2, [r3, #12]
 8006df2:	611a      	str	r2, [r3, #16]
 8006df4:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8006df6:	2004      	movs	r0, #4
 8006df8:	f7ff ffd4 	bl	8006da4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8006dfc:	2020      	movs	r0, #32
 8006dfe:	f7ff ffd1 	bl	8006da4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8006e02:	2001      	movs	r0, #1
 8006e04:	f7ff ffce 	bl	8006da4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8006e08:	2002      	movs	r0, #2
 8006e0a:	f7ff ffcb 	bl	8006da4 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 8006e0e:	2108      	movs	r1, #8
 8006e10:	48d3      	ldr	r0, [pc, #844]	; (8007160 <MX_GPIO_Init+0x38c>)
 8006e12:	f7ff ffb9 	bl	8006d88 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 8006e16:	2108      	movs	r1, #8
 8006e18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006e1c:	f7ff ffb4 	bl	8006d88 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 8006e20:	2110      	movs	r1, #16
 8006e22:	48cf      	ldr	r0, [pc, #828]	; (8007160 <MX_GPIO_Init+0x38c>)
 8006e24:	f7ff ffb0 	bl	8006d88 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 8006e28:	2120      	movs	r1, #32
 8006e2a:	48cd      	ldr	r0, [pc, #820]	; (8007160 <MX_GPIO_Init+0x38c>)
 8006e2c:	f7ff ffac 	bl	8006d88 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 8006e30:	2101      	movs	r1, #1
 8006e32:	48cc      	ldr	r0, [pc, #816]	; (8007164 <MX_GPIO_Init+0x390>)
 8006e34:	f7ff ffa8 	bl	8006d88 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 8006e38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006e3c:	48c8      	ldr	r0, [pc, #800]	; (8007160 <MX_GPIO_Init+0x38c>)
 8006e3e:	f7ff ffa3 	bl	8006d88 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 8006e42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006e46:	48c6      	ldr	r0, [pc, #792]	; (8007160 <MX_GPIO_Init+0x38c>)
 8006e48:	f7ff ff9e 	bl	8006d88 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 8006e4c:	2140      	movs	r1, #64	; 0x40
 8006e4e:	48c5      	ldr	r0, [pc, #788]	; (8007164 <MX_GPIO_Init+0x390>)
 8006e50:	f7ff ff9a 	bl	8006d88 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 8006e54:	2180      	movs	r1, #128	; 0x80
 8006e56:	48c3      	ldr	r0, [pc, #780]	; (8007164 <MX_GPIO_Init+0x390>)
 8006e58:	f7ff ff96 	bl	8006d88 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 8006e5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006e60:	48c0      	ldr	r0, [pc, #768]	; (8007164 <MX_GPIO_Init+0x390>)
 8006e62:	f7ff ff91 	bl	8006d88 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 8006e66:	49c0      	ldr	r1, [pc, #768]	; (8007168 <MX_GPIO_Init+0x394>)
 8006e68:	2002      	movs	r0, #2
 8006e6a:	f7ff feff 	bl	8006c6c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 8006e6e:	49bf      	ldr	r1, [pc, #764]	; (800716c <MX_GPIO_Init+0x398>)
 8006e70:	2002      	movs	r0, #2
 8006e72:	f7ff fefb 	bl	8006c6c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 8006e76:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8006e7a:	2005      	movs	r0, #5
 8006e7c:	f7ff fef6 	bl	8006c6c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 8006e80:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8006e84:	2005      	movs	r0, #5
 8006e86:	f7ff fef1 	bl	8006c6c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 8006e8a:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8006e8e:	2002      	movs	r0, #2
 8006e90:	f7ff feec 	bl	8006c6c <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8006e94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006e98:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8006ea6:	2302      	movs	r3, #2
 8006ea8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8006eac:	f107 031c 	add.w	r3, r7, #28
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f006 ff61 	bl	800dd78 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8006eb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006eba:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8006ec8:	2302      	movs	r3, #2
 8006eca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8006ece:	f107 031c 	add.w	r3, r7, #28
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f006 ff50 	bl	800dd78 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8006edc:	2301      	movs	r3, #1
 8006ede:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8006ee8:	2302      	movs	r3, #2
 8006eea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8006eee:	f107 031c 	add.w	r3, r7, #28
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f006 ff40 	bl	800dd78 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8006ef8:	2302      	movs	r3, #2
 8006efa:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8006efc:	2301      	movs	r3, #1
 8006efe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8006f02:	2300      	movs	r3, #0
 8006f04:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8006f08:	2302      	movs	r3, #2
 8006f0a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8006f0e:	f107 031c 	add.w	r3, r7, #28
 8006f12:	4618      	mov	r0, r3
 8006f14:	f006 ff30 	bl	800dd78 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8006f18:	2304      	movs	r3, #4
 8006f1a:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8006f22:	2300      	movs	r3, #0
 8006f24:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8006f28:	2302      	movs	r3, #2
 8006f2a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8006f2e:	f107 031c 	add.w	r3, r7, #28
 8006f32:	4618      	mov	r0, r3
 8006f34:	f006 ff20 	bl	800dd78 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 8006f38:	2201      	movs	r2, #1
 8006f3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006f3e:	4888      	ldr	r0, [pc, #544]	; (8007160 <MX_GPIO_Init+0x38c>)
 8006f40:	f7ff fef3 	bl	8006d2a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 8006f44:	2201      	movs	r2, #1
 8006f46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006f4a:	4885      	ldr	r0, [pc, #532]	; (8007160 <MX_GPIO_Init+0x38c>)
 8006f4c:	f7ff feed 	bl	8006d2a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 8006f50:	2201      	movs	r2, #1
 8006f52:	2101      	movs	r1, #1
 8006f54:	4886      	ldr	r0, [pc, #536]	; (8007170 <MX_GPIO_Init+0x39c>)
 8006f56:	f7ff fee8 	bl	8006d2a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	2102      	movs	r1, #2
 8006f5e:	4884      	ldr	r0, [pc, #528]	; (8007170 <MX_GPIO_Init+0x39c>)
 8006f60:	f7ff fee3 	bl	8006d2a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 8006f64:	2201      	movs	r2, #1
 8006f66:	2104      	movs	r1, #4
 8006f68:	487d      	ldr	r0, [pc, #500]	; (8007160 <MX_GPIO_Init+0x38c>)
 8006f6a:	f7ff fede 	bl	8006d2a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006f74:	487a      	ldr	r0, [pc, #488]	; (8007160 <MX_GPIO_Init+0x38c>)
 8006f76:	f7ff fea9 	bl	8006ccc <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006f80:	4877      	ldr	r0, [pc, #476]	; (8007160 <MX_GPIO_Init+0x38c>)
 8006f82:	f7ff fea3 	bl	8006ccc <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 8006f86:	2200      	movs	r2, #0
 8006f88:	2101      	movs	r1, #1
 8006f8a:	4879      	ldr	r0, [pc, #484]	; (8007170 <MX_GPIO_Init+0x39c>)
 8006f8c:	f7ff fe9e 	bl	8006ccc <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8006f90:	2200      	movs	r2, #0
 8006f92:	2102      	movs	r1, #2
 8006f94:	4876      	ldr	r0, [pc, #472]	; (8007170 <MX_GPIO_Init+0x39c>)
 8006f96:	f7ff fe99 	bl	8006ccc <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	2104      	movs	r1, #4
 8006f9e:	4870      	ldr	r0, [pc, #448]	; (8007160 <MX_GPIO_Init+0x38c>)
 8006fa0:	f7ff fe94 	bl	8006ccc <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8006fa4:	2308      	movs	r3, #8
 8006fa6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006fac:	2300      	movs	r3, #0
 8006fae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8006fb4:	2302      	movs	r3, #2
 8006fb6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 8006fb8:	1d3b      	adds	r3, r7, #4
 8006fba:	4619      	mov	r1, r3
 8006fbc:	4868      	ldr	r0, [pc, #416]	; (8007160 <MX_GPIO_Init+0x38c>)
 8006fbe:	f007 f8ce 	bl	800e15e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 8006fc2:	2308      	movs	r3, #8
 8006fc4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 8006fd6:	1d3b      	adds	r3, r7, #4
 8006fd8:	4619      	mov	r1, r3
 8006fda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006fde:	f007 f8be 	bl	800e15e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 8006fe2:	2310      	movs	r3, #16
 8006fe4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006fea:	2300      	movs	r3, #0
 8006fec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 8006ff6:	1d3b      	adds	r3, r7, #4
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	4859      	ldr	r0, [pc, #356]	; (8007160 <MX_GPIO_Init+0x38c>)
 8006ffc:	f007 f8af 	bl	800e15e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 8007000:	2320      	movs	r3, #32
 8007002:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007004:	2301      	movs	r3, #1
 8007006:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007008:	2300      	movs	r3, #0
 800700a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800700c:	2300      	movs	r3, #0
 800700e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007010:	2300      	movs	r3, #0
 8007012:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 8007014:	1d3b      	adds	r3, r7, #4
 8007016:	4619      	mov	r1, r3
 8007018:	4851      	ldr	r0, [pc, #324]	; (8007160 <MX_GPIO_Init+0x38c>)
 800701a:	f007 f8a0 	bl	800e15e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 800701e:	2301      	movs	r3, #1
 8007020:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007022:	2301      	movs	r3, #1
 8007024:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007026:	2300      	movs	r3, #0
 8007028:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800702a:	2300      	movs	r3, #0
 800702c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800702e:	2300      	movs	r3, #0
 8007030:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 8007032:	1d3b      	adds	r3, r7, #4
 8007034:	4619      	mov	r1, r3
 8007036:	484b      	ldr	r0, [pc, #300]	; (8007164 <MX_GPIO_Init+0x390>)
 8007038:	f007 f891 	bl	800e15e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 800703c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007040:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007042:	2301      	movs	r3, #1
 8007044:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007046:	2300      	movs	r3, #0
 8007048:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800704a:	2300      	movs	r3, #0
 800704c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800704e:	2300      	movs	r3, #0
 8007050:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 8007052:	1d3b      	adds	r3, r7, #4
 8007054:	4619      	mov	r1, r3
 8007056:	4842      	ldr	r0, [pc, #264]	; (8007160 <MX_GPIO_Init+0x38c>)
 8007058:	f007 f881 	bl	800e15e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 800705c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007060:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007062:	2301      	movs	r3, #1
 8007064:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007066:	2300      	movs	r3, #0
 8007068:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800706a:	2300      	movs	r3, #0
 800706c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800706e:	2300      	movs	r3, #0
 8007070:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 8007072:	1d3b      	adds	r3, r7, #4
 8007074:	4619      	mov	r1, r3
 8007076:	483a      	ldr	r0, [pc, #232]	; (8007160 <MX_GPIO_Init+0x38c>)
 8007078:	f007 f871 	bl	800e15e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 800707c:	2340      	movs	r3, #64	; 0x40
 800707e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007080:	2301      	movs	r3, #1
 8007082:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007084:	2303      	movs	r3, #3
 8007086:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007088:	2300      	movs	r3, #0
 800708a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800708c:	2300      	movs	r3, #0
 800708e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8007090:	1d3b      	adds	r3, r7, #4
 8007092:	4619      	mov	r1, r3
 8007094:	4833      	ldr	r0, [pc, #204]	; (8007164 <MX_GPIO_Init+0x390>)
 8007096:	f007 f862 	bl	800e15e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 800709a:	2380      	movs	r3, #128	; 0x80
 800709c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800709e:	2301      	movs	r3, #1
 80070a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80070a2:	2303      	movs	r3, #3
 80070a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80070a6:	2300      	movs	r3, #0
 80070a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80070aa:	2300      	movs	r3, #0
 80070ac:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80070ae:	1d3b      	adds	r3, r7, #4
 80070b0:	4619      	mov	r1, r3
 80070b2:	482c      	ldr	r0, [pc, #176]	; (8007164 <MX_GPIO_Init+0x390>)
 80070b4:	f007 f853 	bl	800e15e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 80070b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80070be:	2301      	movs	r3, #1
 80070c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80070c2:	2303      	movs	r3, #3
 80070c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80070c6:	2300      	movs	r3, #0
 80070c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80070ca:	2300      	movs	r3, #0
 80070cc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80070ce:	1d3b      	adds	r3, r7, #4
 80070d0:	4619      	mov	r1, r3
 80070d2:	4824      	ldr	r0, [pc, #144]	; (8007164 <MX_GPIO_Init+0x390>)
 80070d4:	f007 f843 	bl	800e15e <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80070d8:	f7ff fd3e 	bl	8006b58 <__NVIC_GetPriorityGrouping>
 80070dc:	4603      	mov	r3, r0
 80070de:	2200      	movs	r2, #0
 80070e0:	2100      	movs	r1, #0
 80070e2:	4618      	mov	r0, r3
 80070e4:	f7ff fd8e 	bl	8006c04 <NVIC_EncodePriority>
 80070e8:	4603      	mov	r3, r0
 80070ea:	4619      	mov	r1, r3
 80070ec:	2006      	movs	r0, #6
 80070ee:	f7ff fd5f 	bl	8006bb0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 80070f2:	2006      	movs	r0, #6
 80070f4:	f7ff fd3e 	bl	8006b74 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80070f8:	f7ff fd2e 	bl	8006b58 <__NVIC_GetPriorityGrouping>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2200      	movs	r2, #0
 8007100:	2100      	movs	r1, #0
 8007102:	4618      	mov	r0, r3
 8007104:	f7ff fd7e 	bl	8006c04 <NVIC_EncodePriority>
 8007108:	4603      	mov	r3, r0
 800710a:	4619      	mov	r1, r3
 800710c:	2007      	movs	r0, #7
 800710e:	f7ff fd4f 	bl	8006bb0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 8007112:	2007      	movs	r0, #7
 8007114:	f7ff fd2e 	bl	8006b74 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007118:	f7ff fd1e 	bl	8006b58 <__NVIC_GetPriorityGrouping>
 800711c:	4603      	mov	r3, r0
 800711e:	2200      	movs	r2, #0
 8007120:	2100      	movs	r1, #0
 8007122:	4618      	mov	r0, r3
 8007124:	f7ff fd6e 	bl	8006c04 <NVIC_EncodePriority>
 8007128:	4603      	mov	r3, r0
 800712a:	4619      	mov	r1, r3
 800712c:	2008      	movs	r0, #8
 800712e:	f7ff fd3f 	bl	8006bb0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 8007132:	2008      	movs	r0, #8
 8007134:	f7ff fd1e 	bl	8006b74 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007138:	f7ff fd0e 	bl	8006b58 <__NVIC_GetPriorityGrouping>
 800713c:	4603      	mov	r3, r0
 800713e:	2200      	movs	r2, #0
 8007140:	2100      	movs	r1, #0
 8007142:	4618      	mov	r0, r3
 8007144:	f7ff fd5e 	bl	8006c04 <NVIC_EncodePriority>
 8007148:	4603      	mov	r3, r0
 800714a:	4619      	mov	r1, r3
 800714c:	2028      	movs	r0, #40	; 0x28
 800714e:	f7ff fd2f 	bl	8006bb0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007152:	2028      	movs	r0, #40	; 0x28
 8007154:	f7ff fd0e 	bl	8006b74 <__NVIC_EnableIRQ>

}
 8007158:	bf00      	nop
 800715a:	3728      	adds	r7, #40	; 0x28
 800715c:	46bd      	mov	sp, r7
 800715e:	e009      	b.n	8007174 <MX_GPIO_Init+0x3a0>
 8007160:	48000800 	.word	0x48000800
 8007164:	48000400 	.word	0x48000400
 8007168:	0f000003 	.word	0x0f000003
 800716c:	f0000003 	.word	0xf0000003
 8007170:	48001400 	.word	0x48001400
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop

08007178 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8007180:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007184:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8007188:	f003 0301 	and.w	r3, r3, #1
 800718c:	2b00      	cmp	r3, #0
 800718e:	d013      	beq.n	80071b8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8007190:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007194:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8007198:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00b      	beq.n	80071b8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80071a0:	e000      	b.n	80071a4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80071a2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80071a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d0f9      	beq.n	80071a2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80071ae:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	b2d2      	uxtb	r2, r2
 80071b6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80071b8:	687b      	ldr	r3, [r7, #4]
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	370c      	adds	r7, #12
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr

080071c6 <HAL_DAC_ConvCpltCallbackCh1>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80071c6:	b480      	push	{r7}
 80071c8:	b083      	sub	sp, #12
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]

}
 80071ce:	bf00      	nop
 80071d0:	370c      	adds	r7, #12
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr

080071da <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// redirect printf to SWV
int _write(int file, char *ptr, int len)
{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b086      	sub	sp, #24
 80071de:	af00      	add	r7, sp, #0
 80071e0:	60f8      	str	r0, [r7, #12]
 80071e2:	60b9      	str	r1, [r7, #8]
 80071e4:	607a      	str	r2, [r7, #4]
  int i=0;
 80071e6:	2300      	movs	r3, #0
 80071e8:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80071ea:	2300      	movs	r3, #0
 80071ec:	617b      	str	r3, [r7, #20]
 80071ee:	e009      	b.n	8007204 <_write+0x2a>
    ITM_SendChar((*ptr++));
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	1c5a      	adds	r2, r3, #1
 80071f4:	60ba      	str	r2, [r7, #8]
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	4618      	mov	r0, r3
 80071fa:	f7ff ffbd 	bl	8007178 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	3301      	adds	r3, #1
 8007202:	617b      	str	r3, [r7, #20]
 8007204:	697a      	ldr	r2, [r7, #20]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	429a      	cmp	r2, r3
 800720a:	dbf1      	blt.n	80071f0 <_write+0x16>
  return len;
 800720c:	687b      	ldr	r3, [r7, #4]
}
 800720e:	4618      	mov	r0, r3
 8007210:	3718      	adds	r7, #24
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
	...

08007218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800721c:	f000 ff21 	bl	8008062 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007220:	f000 f84c 	bl	80072bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007224:	f7ff fdd6 	bl	8006dd4 <MX_GPIO_Init>
  MX_DMA_Init();
 8007228:	f7ff fc5c 	bl	8006ae4 <MX_DMA_Init>
  MX_DAC1_Init();
 800722c:	f7ff fb0c 	bl	8006848 <MX_DAC1_Init>
  MX_ADC1_Init();
 8007230:	f7ff f9cc 	bl	80065cc <MX_ADC1_Init>
  MX_COMP1_Init();
 8007234:	f7ff faae 	bl	8006794 <MX_COMP1_Init>
  MX_TIM2_Init();
 8007238:	f000 fbb0 	bl	800799c <MX_TIM2_Init>
  MX_SPI3_Init();
 800723c:	f000 f8ea 	bl	8007414 <MX_SPI3_Init>
  MX_RNG_Init();
 8007240:	f000 f8da 	bl	80073f8 <MX_RNG_Init>
  MX_TIM1_Init();
 8007244:	f000 fb3a 	bl	80078bc <MX_TIM1_Init>
  MX_TIM8_Init();
 8007248:	f000 fcac 	bl	8007ba4 <MX_TIM8_Init>
  MX_TIM16_Init();
 800724c:	f000 fd64 	bl	8007d18 <MX_TIM16_Init>
  MX_TIM15_Init();
 8007250:	f000 fd10 	bl	8007c74 <MX_TIM15_Init>
  MX_TIM5_Init();
 8007254:	f000 fc58 	bl	8007b08 <MX_TIM5_Init>
  MX_TIM3_Init();
 8007258:	f000 fc08 	bl	8007a6c <MX_TIM3_Init>
  MX_DAC2_Init();
 800725c:	f7ff fb3e 	bl	80068dc <MX_DAC2_Init>
  MX_TIM17_Init();
 8007260:	f000 fd82 	bl	8007d68 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  SM_Init();
 8007264:	f7fe fb8e 	bl	8005984 <SM_Init>

HAL_TIM_Base_Start_IT(&htim17);
 8007268:	4810      	ldr	r0, [pc, #64]	; (80072ac <main+0x94>)
 800726a:	f004 fea1 	bl	800bfb0 <HAL_TIM_Base_Start_IT>


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 800726e:	2200      	movs	r2, #0
 8007270:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007274:	480e      	ldr	r0, [pc, #56]	; (80072b0 <main+0x98>)
 8007276:	f003 fd4b 	bl	800ad10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 800727a:	2200      	movs	r2, #0
 800727c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007280:	480b      	ldr	r0, [pc, #44]	; (80072b0 <main+0x98>)
 8007282:	f003 fd45 	bl	800ad10 <HAL_GPIO_WritePin>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 8007286:	480b      	ldr	r0, [pc, #44]	; (80072b4 <main+0x9c>)
 8007288:	f004 fe3c 	bl	800bf04 <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 800728c:	4b0a      	ldr	r3, [pc, #40]	; (80072b8 <main+0xa0>)
 800728e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007292:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 8007294:	4b08      	ldr	r3, [pc, #32]	; (80072b8 <main+0xa0>)
 8007296:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800729a:	62da      	str	r2, [r3, #44]	; 0x2c



  // TFT lib enable
  DM_Init();
 800729c:	f7f9 fd42 	bl	8000d24 <DM_Init>
  DM_PostInit();
 80072a0:	f7f9 fd4e 	bl	8000d40 <DM_PostInit>

  // Intialise interrupt manager
  IM_Init();
 80072a4:	f7fd fbca 	bl	8004a3c <IM_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80072a8:	e7fe      	b.n	80072a8 <main+0x90>
 80072aa:	bf00      	nop
 80072ac:	200027a8 	.word	0x200027a8
 80072b0:	48000800 	.word	0x48000800
 80072b4:	20002840 	.word	0x20002840
 80072b8:	40001000 	.word	0x40001000

080072bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b0a8      	sub	sp, #160	; 0xa0
 80072c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80072c2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80072c6:	2238      	movs	r2, #56	; 0x38
 80072c8:	2100      	movs	r1, #0
 80072ca:	4618      	mov	r0, r3
 80072cc:	f008 f836 	bl	800f33c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80072d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80072d4:	2200      	movs	r2, #0
 80072d6:	601a      	str	r2, [r3, #0]
 80072d8:	605a      	str	r2, [r3, #4]
 80072da:	609a      	str	r2, [r3, #8]
 80072dc:	60da      	str	r2, [r3, #12]
 80072de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80072e0:	463b      	mov	r3, r7
 80072e2:	2254      	movs	r2, #84	; 0x54
 80072e4:	2100      	movs	r1, #0
 80072e6:	4618      	mov	r0, r3
 80072e8:	f008 f828 	bl	800f33c <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80072ec:	2000      	movs	r0, #0
 80072ee:	f003 fd27 	bl	800ad40 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80072f2:	2322      	movs	r3, #34	; 0x22
 80072f4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80072f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072fa:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80072fc:	2340      	movs	r3, #64	; 0x40
 80072fe:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8007300:	2301      	movs	r3, #1
 8007302:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007306:	2302      	movs	r3, #2
 8007308:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800730c:	2302      	movs	r3, #2
 800730e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8007312:	2302      	movs	r3, #2
 8007314:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8007318:	232a      	movs	r3, #42	; 0x2a
 800731a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV30;
 800731e:	231e      	movs	r3, #30
 8007320:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8007324:	2304      	movs	r3, #4
 8007326:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800732a:	2302      	movs	r3, #2
 800732c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007330:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007334:	4618      	mov	r0, r3
 8007336:	f003 fda7 	bl	800ae88 <HAL_RCC_OscConfig>
 800733a:	4603      	mov	r3, r0
 800733c:	2b00      	cmp	r3, #0
 800733e:	d001      	beq.n	8007344 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8007340:	f000 f82a 	bl	8007398 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007344:	230f      	movs	r3, #15
 8007346:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007348:	2303      	movs	r3, #3
 800734a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800734c:	2300      	movs	r3, #0
 800734e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007350:	2300      	movs	r3, #0
 8007352:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007354:	2300      	movs	r3, #0
 8007356:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8007358:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800735c:	2108      	movs	r1, #8
 800735e:	4618      	mov	r0, r3
 8007360:	f004 f8aa 	bl	800b4b8 <HAL_RCC_ClockConfig>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d001      	beq.n	800736e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800736a:	f000 f815 	bl	8007398 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 800736e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007372:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8007374:	2300      	movs	r3, #0
 8007376:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8007378:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800737c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800737e:	463b      	mov	r3, r7
 8007380:	4618      	mov	r0, r3
 8007382:	f004 fa89 	bl	800b898 <HAL_RCCEx_PeriphCLKConfig>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d001      	beq.n	8007390 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800738c:	f000 f804 	bl	8007398 <Error_Handler>
  }
}
 8007390:	bf00      	nop
 8007392:	37a0      	adds	r7, #160	; 0xa0
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007398:	b480      	push	{r7}
 800739a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800739c:	bf00      	nop
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr

080073a6 <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 80073a6:	b480      	push	{r7}
 80073a8:	b083      	sub	sp, #12
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f043 0204 	orr.w	r2, r3, #4
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	601a      	str	r2, [r3, #0]
}
 80073ba:	bf00      	nop
 80073bc:	370c      	adds	r7, #12
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
	...

080073c8 <LL_AHB2_GRP1_EnableClock>:
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80073d0:	4b08      	ldr	r3, [pc, #32]	; (80073f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80073d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073d4:	4907      	ldr	r1, [pc, #28]	; (80073f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4313      	orrs	r3, r2
 80073da:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80073dc:	4b05      	ldr	r3, [pc, #20]	; (80073f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80073de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4013      	ands	r3, r2
 80073e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80073e6:	68fb      	ldr	r3, [r7, #12]
}
 80073e8:	bf00      	nop
 80073ea:	3714      	adds	r7, #20
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr
 80073f4:	40021000 	.word	0x40021000

080073f8 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 80073fc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8007400:	f7ff ffe2 	bl	80073c8 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 8007404:	4802      	ldr	r0, [pc, #8]	; (8007410 <MX_RNG_Init+0x18>)
 8007406:	f7ff ffce 	bl	80073a6 <LL_RNG_Enable>

}
 800740a:	bf00      	nop
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	50060800 	.word	0x50060800

08007414 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8007418:	4b1b      	ldr	r3, [pc, #108]	; (8007488 <MX_SPI3_Init+0x74>)
 800741a:	4a1c      	ldr	r2, [pc, #112]	; (800748c <MX_SPI3_Init+0x78>)
 800741c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800741e:	4b1a      	ldr	r3, [pc, #104]	; (8007488 <MX_SPI3_Init+0x74>)
 8007420:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007424:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8007426:	4b18      	ldr	r3, [pc, #96]	; (8007488 <MX_SPI3_Init+0x74>)
 8007428:	2200      	movs	r2, #0
 800742a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800742c:	4b16      	ldr	r3, [pc, #88]	; (8007488 <MX_SPI3_Init+0x74>)
 800742e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007432:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007434:	4b14      	ldr	r3, [pc, #80]	; (8007488 <MX_SPI3_Init+0x74>)
 8007436:	2200      	movs	r2, #0
 8007438:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800743a:	4b13      	ldr	r3, [pc, #76]	; (8007488 <MX_SPI3_Init+0x74>)
 800743c:	2200      	movs	r2, #0
 800743e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8007440:	4b11      	ldr	r3, [pc, #68]	; (8007488 <MX_SPI3_Init+0x74>)
 8007442:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007446:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8007448:	4b0f      	ldr	r3, [pc, #60]	; (8007488 <MX_SPI3_Init+0x74>)
 800744a:	2210      	movs	r2, #16
 800744c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800744e:	4b0e      	ldr	r3, [pc, #56]	; (8007488 <MX_SPI3_Init+0x74>)
 8007450:	2200      	movs	r2, #0
 8007452:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8007454:	4b0c      	ldr	r3, [pc, #48]	; (8007488 <MX_SPI3_Init+0x74>)
 8007456:	2200      	movs	r2, #0
 8007458:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800745a:	4b0b      	ldr	r3, [pc, #44]	; (8007488 <MX_SPI3_Init+0x74>)
 800745c:	2200      	movs	r2, #0
 800745e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8007460:	4b09      	ldr	r3, [pc, #36]	; (8007488 <MX_SPI3_Init+0x74>)
 8007462:	2207      	movs	r2, #7
 8007464:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007466:	4b08      	ldr	r3, [pc, #32]	; (8007488 <MX_SPI3_Init+0x74>)
 8007468:	2200      	movs	r2, #0
 800746a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800746c:	4b06      	ldr	r3, [pc, #24]	; (8007488 <MX_SPI3_Init+0x74>)
 800746e:	2208      	movs	r2, #8
 8007470:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8007472:	4805      	ldr	r0, [pc, #20]	; (8007488 <MX_SPI3_Init+0x74>)
 8007474:	f004 fc5c 	bl	800bd30 <HAL_SPI_Init>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d001      	beq.n	8007482 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800747e:	f7ff ff8b 	bl	8007398 <Error_Handler>
  }

}
 8007482:	bf00      	nop
 8007484:	bd80      	pop	{r7, pc}
 8007486:	bf00      	nop
 8007488:	200026ac 	.word	0x200026ac
 800748c:	40003c00 	.word	0x40003c00

08007490 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b08a      	sub	sp, #40	; 0x28
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007498:	f107 0314 	add.w	r3, r7, #20
 800749c:	2200      	movs	r2, #0
 800749e:	601a      	str	r2, [r3, #0]
 80074a0:	605a      	str	r2, [r3, #4]
 80074a2:	609a      	str	r2, [r3, #8]
 80074a4:	60da      	str	r2, [r3, #12]
 80074a6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a17      	ldr	r2, [pc, #92]	; (800750c <HAL_SPI_MspInit+0x7c>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d128      	bne.n	8007504 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80074b2:	4b17      	ldr	r3, [pc, #92]	; (8007510 <HAL_SPI_MspInit+0x80>)
 80074b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074b6:	4a16      	ldr	r2, [pc, #88]	; (8007510 <HAL_SPI_MspInit+0x80>)
 80074b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074bc:	6593      	str	r3, [r2, #88]	; 0x58
 80074be:	4b14      	ldr	r3, [pc, #80]	; (8007510 <HAL_SPI_MspInit+0x80>)
 80074c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074c6:	613b      	str	r3, [r7, #16]
 80074c8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80074ca:	4b11      	ldr	r3, [pc, #68]	; (8007510 <HAL_SPI_MspInit+0x80>)
 80074cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074ce:	4a10      	ldr	r2, [pc, #64]	; (8007510 <HAL_SPI_MspInit+0x80>)
 80074d0:	f043 0304 	orr.w	r3, r3, #4
 80074d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80074d6:	4b0e      	ldr	r3, [pc, #56]	; (8007510 <HAL_SPI_MspInit+0x80>)
 80074d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074da:	f003 0304 	and.w	r3, r3, #4
 80074de:	60fb      	str	r3, [r7, #12]
 80074e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80074e2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80074e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074e8:	2302      	movs	r3, #2
 80074ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074ec:	2300      	movs	r3, #0
 80074ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074f0:	2300      	movs	r3, #0
 80074f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80074f4:	2306      	movs	r3, #6
 80074f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80074f8:	f107 0314 	add.w	r3, r7, #20
 80074fc:	4619      	mov	r1, r3
 80074fe:	4805      	ldr	r0, [pc, #20]	; (8007514 <HAL_SPI_MspInit+0x84>)
 8007500:	f003 f9a2 	bl	800a848 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8007504:	bf00      	nop
 8007506:	3728      	adds	r7, #40	; 0x28
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}
 800750c:	40003c00 	.word	0x40003c00
 8007510:	40021000 	.word	0x40021000
 8007514:	48000800 	.word	0x48000800

08007518 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8007518:	b480      	push	{r7}
 800751a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800751c:	4b05      	ldr	r3, [pc, #20]	; (8007534 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	4a04      	ldr	r2, [pc, #16]	; (8007534 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8007522:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007526:	6093      	str	r3, [r2, #8]
}
 8007528:	bf00      	nop
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr
 8007532:	bf00      	nop
 8007534:	40007000 	.word	0x40007000

08007538 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800753e:	4b0f      	ldr	r3, [pc, #60]	; (800757c <HAL_MspInit+0x44>)
 8007540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007542:	4a0e      	ldr	r2, [pc, #56]	; (800757c <HAL_MspInit+0x44>)
 8007544:	f043 0301 	orr.w	r3, r3, #1
 8007548:	6613      	str	r3, [r2, #96]	; 0x60
 800754a:	4b0c      	ldr	r3, [pc, #48]	; (800757c <HAL_MspInit+0x44>)
 800754c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800754e:	f003 0301 	and.w	r3, r3, #1
 8007552:	607b      	str	r3, [r7, #4]
 8007554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007556:	4b09      	ldr	r3, [pc, #36]	; (800757c <HAL_MspInit+0x44>)
 8007558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800755a:	4a08      	ldr	r2, [pc, #32]	; (800757c <HAL_MspInit+0x44>)
 800755c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007560:	6593      	str	r3, [r2, #88]	; 0x58
 8007562:	4b06      	ldr	r3, [pc, #24]	; (800757c <HAL_MspInit+0x44>)
 8007564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800756a:	603b      	str	r3, [r7, #0]
 800756c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 800756e:	f7ff ffd3 	bl	8007518 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007572:	bf00      	nop
 8007574:	3708      	adds	r7, #8
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	40021000 	.word	0x40021000

08007580 <LL_EXTI_IsActiveFlag_0_31>:
{
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8007588:	4b07      	ldr	r3, [pc, #28]	; (80075a8 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800758a:	695a      	ldr	r2, [r3, #20]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4013      	ands	r3, r2
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	429a      	cmp	r2, r3
 8007594:	d101      	bne.n	800759a <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8007596:	2301      	movs	r3, #1
 8007598:	e000      	b.n	800759c <LL_EXTI_IsActiveFlag_0_31+0x1c>
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr
 80075a8:	40010400 	.word	0x40010400

080075ac <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80075b4:	4a04      	ldr	r2, [pc, #16]	; (80075c8 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6153      	str	r3, [r2, #20]
}
 80075ba:	bf00      	nop
 80075bc:	370c      	adds	r7, #12
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr
 80075c6:	bf00      	nop
 80075c8:	40010400 	.word	0x40010400

080075cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80075cc:	b480      	push	{r7}
 80075ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80075d0:	bf00      	nop
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr
	...

080075dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	DM_SetErrorDebugMsg("HARD FAULT");
 80075e0:	4801      	ldr	r0, [pc, #4]	; (80075e8 <HardFault_Handler+0xc>)
 80075e2:	f7f9 ffa1 	bl	8001528 <DM_SetErrorDebugMsg>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80075e6:	e7fe      	b.n	80075e6 <HardFault_Handler+0xa>
 80075e8:	08014250 	.word	0x08014250

080075ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	DM_SetErrorDebugMsg("MEMMANAGE FAULT");
 80075f0:	4801      	ldr	r0, [pc, #4]	; (80075f8 <MemManage_Handler+0xc>)
 80075f2:	f7f9 ff99 	bl	8001528 <DM_SetErrorDebugMsg>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80075f6:	e7fe      	b.n	80075f6 <MemManage_Handler+0xa>
 80075f8:	0801425c 	.word	0x0801425c

080075fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	DM_SetErrorDebugMsg("BUS FAULT");
 8007600:	4801      	ldr	r0, [pc, #4]	; (8007608 <BusFault_Handler+0xc>)
 8007602:	f7f9 ff91 	bl	8001528 <DM_SetErrorDebugMsg>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007606:	e7fe      	b.n	8007606 <BusFault_Handler+0xa>
 8007608:	0801426c 	.word	0x0801426c

0800760c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	DM_SetErrorDebugMsg("USAGE FAULT");
 8007610:	4801      	ldr	r0, [pc, #4]	; (8007618 <UsageFault_Handler+0xc>)
 8007612:	f7f9 ff89 	bl	8001528 <DM_SetErrorDebugMsg>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007616:	e7fe      	b.n	8007616 <UsageFault_Handler+0xa>
 8007618:	08014278 	.word	0x08014278

0800761c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800761c:	b480      	push	{r7}
 800761e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007620:	bf00      	nop
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr

0800762a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800762a:	b480      	push	{r7}
 800762c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800762e:	bf00      	nop
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007638:	b480      	push	{r7}
 800763a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800763c:	bf00      	nop
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr

08007646 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800764a:	f000 fd5d 	bl	8008108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800764e:	bf00      	nop
 8007650:	bd80      	pop	{r7, pc}

08007652 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8007652:	b580      	push	{r7, lr}
 8007654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	IM_BTN3_EXTI0_Handler();
 8007656:	f7fd faa9 	bl	8004bac <IM_BTN3_EXTI0_Handler>

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 800765a:	2001      	movs	r0, #1
 800765c:	f7ff ff90 	bl	8007580 <LL_EXTI_IsActiveFlag_0_31>
 8007660:	4603      	mov	r3, r0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d002      	beq.n	800766c <EXTI0_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8007666:	2001      	movs	r0, #1
 8007668:	f7ff ffa0 	bl	80075ac <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800766c:	bf00      	nop
 800766e:	bd80      	pop	{r7, pc}

08007670 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	IM_BTN4_EXTI1_Handler();
 8007674:	f7fd fac0 	bl	8004bf8 <IM_BTN4_EXTI1_Handler>

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 8007678:	2002      	movs	r0, #2
 800767a:	f7ff ff81 	bl	8007580 <LL_EXTI_IsActiveFlag_0_31>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d002      	beq.n	800768a <EXTI1_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 8007684:	2002      	movs	r0, #2
 8007686:	f7ff ff91 	bl	80075ac <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800768a:	bf00      	nop
 800768c:	bd80      	pop	{r7, pc}

0800768e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800768e:	b580      	push	{r7, lr}
 8007690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	IM_ENC_EXTI2_Handler();
 8007692:	f7fd fad7 	bl	8004c44 <IM_ENC_EXTI2_Handler>

  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8007696:	2004      	movs	r0, #4
 8007698:	f7ff ff72 	bl	8007580 <LL_EXTI_IsActiveFlag_0_31>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d002      	beq.n	80076a8 <EXTI2_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 80076a2:	2004      	movs	r0, #4
 80076a4:	f7ff ff82 	bl	80075ac <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80076a8:	bf00      	nop
 80076aa:	bd80      	pop	{r7, pc}

080076ac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80076b0:	4802      	ldr	r0, [pc, #8]	; (80076bc <DMA1_Channel1_IRQHandler+0x10>)
 80076b2:	f002 ff79 	bl	800a5a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80076b6:	bf00      	nop
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	200025a0 	.word	0x200025a0

080076c0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80076c4:	4802      	ldr	r0, [pc, #8]	; (80076d0 <DMA1_Channel2_IRQHandler+0x10>)
 80076c6:	f002 ff6f 	bl	800a5a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80076ca:	bf00      	nop
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	20001eac 	.word	0x20001eac

080076d4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 80076d8:	4802      	ldr	r0, [pc, #8]	; (80076e4 <DMA1_Channel3_IRQHandler+0x10>)
 80076da:	f002 ff65 	bl	800a5a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80076de:	bf00      	nop
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	2000264c 	.word	0x2000264c

080076e8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

	DM_UpdateDisplay();
 80076ec:	f7f9 fb42 	bl	8000d74 <DM_UpdateDisplay>

	IM_ENC_DIRF_Handler();
 80076f0:	f7fd face 	bl	8004c90 <IM_ENC_DIRF_Handler>

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80076f4:	4803      	ldr	r0, [pc, #12]	; (8007704 <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 80076f6:	f004 ff3d 	bl	800c574 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 80076fa:	4803      	ldr	r0, [pc, #12]	; (8007708 <TIM1_BRK_TIM15_IRQHandler+0x20>)
 80076fc:	f004 ff3a 	bl	800c574 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8007700:	bf00      	nop
 8007702:	bd80      	pop	{r7, pc}
 8007704:	20002840 	.word	0x20002840
 8007708:	2000275c 	.word	0x2000275c

0800770c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	EM_ProcessEvent();
 8007710:	f7fc fafc 	bl	8003d0c <EM_ProcessEvent>
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007714:	4803      	ldr	r0, [pc, #12]	; (8007724 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8007716:	f004 ff2d 	bl	800c574 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 800771a:	4803      	ldr	r0, [pc, #12]	; (8007728 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 800771c:	f004 ff2a 	bl	800c574 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8007720:	bf00      	nop
 8007722:	bd80      	pop	{r7, pc}
 8007724:	20002840 	.word	0x20002840
 8007728:	200027a8 	.word	0x200027a8

0800772c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007730:	4802      	ldr	r0, [pc, #8]	; (800773c <TIM3_IRQHandler+0x10>)
 8007732:	f004 ff1f 	bl	800c574 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8007736:	bf00      	nop
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	20001f18 	.word	0x20001f18

08007740 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	IM_BTN1_EXTI14_Handler();
 8007744:	f7fd f9e2 	bl	8004b0c <IM_BTN1_EXTI14_Handler>
	IM_BTN2_EXTI15_Handler();
 8007748:	f7fd fa08 	bl	8004b5c <IM_BTN2_EXTI15_Handler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 800774c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007750:	f7ff ff16 	bl	8007580 <LL_EXTI_IsActiveFlag_0_31>
 8007754:	4603      	mov	r3, r0
 8007756:	2b00      	cmp	r3, #0
 8007758:	d003      	beq.n	8007762 <EXTI15_10_IRQHandler+0x22>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 800775a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800775e:	f7ff ff25 	bl	80075ac <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8007762:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007766:	f7ff ff0b 	bl	8007580 <LL_EXTI_IsActiveFlag_0_31>
 800776a:	4603      	mov	r3, r0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d003      	beq.n	8007778 <EXTI15_10_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8007770:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007774:	f7ff ff1a 	bl	80075ac <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007778:	bf00      	nop
 800777a:	bd80      	pop	{r7, pc}

0800777c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	IM_SWEEP_UPDATE_TIM_IRQHandler();
 8007780:	f7fd f96c 	bl	8004a5c <IM_SWEEP_UPDATE_TIM_IRQHandler>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8007784:	4802      	ldr	r0, [pc, #8]	; (8007790 <TIM5_IRQHandler+0x14>)
 8007786:	f004 fef5 	bl	800c574 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800778a:	bf00      	nop
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	200027f4 	.word	0x200027f4

08007794 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b086      	sub	sp, #24
 8007798:	af00      	add	r7, sp, #0
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80077a0:	2300      	movs	r3, #0
 80077a2:	617b      	str	r3, [r7, #20]
 80077a4:	e00a      	b.n	80077bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80077a6:	f3af 8000 	nop.w
 80077aa:	4601      	mov	r1, r0
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	1c5a      	adds	r2, r3, #1
 80077b0:	60ba      	str	r2, [r7, #8]
 80077b2:	b2ca      	uxtb	r2, r1
 80077b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	3301      	adds	r3, #1
 80077ba:	617b      	str	r3, [r7, #20]
 80077bc:	697a      	ldr	r2, [r7, #20]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	dbf0      	blt.n	80077a6 <_read+0x12>
	}

return len;
 80077c4:	687b      	ldr	r3, [r7, #4]
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3718      	adds	r7, #24
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}

080077ce <_close>:
	}
	return len;
}

int _close(int file)
{
 80077ce:	b480      	push	{r7}
 80077d0:	b083      	sub	sp, #12
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
	return -1;
 80077d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80077da:	4618      	mov	r0, r3
 80077dc:	370c      	adds	r7, #12
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr

080077e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80077e6:	b480      	push	{r7}
 80077e8:	b083      	sub	sp, #12
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
 80077ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80077f6:	605a      	str	r2, [r3, #4]
	return 0;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	370c      	adds	r7, #12
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr

08007806 <_isatty>:

int _isatty(int file)
{
 8007806:	b480      	push	{r7}
 8007808:	b083      	sub	sp, #12
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
	return 1;
 800780e:	2301      	movs	r3, #1
}
 8007810:	4618      	mov	r0, r3
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800781c:	b480      	push	{r7}
 800781e:	b085      	sub	sp, #20
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	607a      	str	r2, [r7, #4]
	return 0;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3714      	adds	r7, #20
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr
	...

08007838 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007840:	4b11      	ldr	r3, [pc, #68]	; (8007888 <_sbrk+0x50>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d102      	bne.n	800784e <_sbrk+0x16>
		heap_end = &end;
 8007848:	4b0f      	ldr	r3, [pc, #60]	; (8007888 <_sbrk+0x50>)
 800784a:	4a10      	ldr	r2, [pc, #64]	; (800788c <_sbrk+0x54>)
 800784c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800784e:	4b0e      	ldr	r3, [pc, #56]	; (8007888 <_sbrk+0x50>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007854:	4b0c      	ldr	r3, [pc, #48]	; (8007888 <_sbrk+0x50>)
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	4413      	add	r3, r2
 800785c:	466a      	mov	r2, sp
 800785e:	4293      	cmp	r3, r2
 8007860:	d907      	bls.n	8007872 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007862:	f007 fd41 	bl	800f2e8 <__errno>
 8007866:	4602      	mov	r2, r0
 8007868:	230c      	movs	r3, #12
 800786a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800786c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007870:	e006      	b.n	8007880 <_sbrk+0x48>
	}

	heap_end += incr;
 8007872:	4b05      	ldr	r3, [pc, #20]	; (8007888 <_sbrk+0x50>)
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4413      	add	r3, r2
 800787a:	4a03      	ldr	r2, [pc, #12]	; (8007888 <_sbrk+0x50>)
 800787c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800787e:	68fb      	ldr	r3, [r7, #12]
}
 8007880:	4618      	mov	r0, r3
 8007882:	3710      	adds	r7, #16
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}
 8007888:	20001e9c 	.word	0x20001e9c
 800788c:	20002930 	.word	0x20002930

08007890 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007890:	b480      	push	{r7}
 8007892:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007894:	4b08      	ldr	r3, [pc, #32]	; (80078b8 <SystemInit+0x28>)
 8007896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800789a:	4a07      	ldr	r2, [pc, #28]	; (80078b8 <SystemInit+0x28>)
 800789c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80078a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80078a4:	4b04      	ldr	r3, [pc, #16]	; (80078b8 <SystemInit+0x28>)
 80078a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80078aa:	609a      	str	r2, [r3, #8]
#endif
}
 80078ac:	bf00      	nop
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr
 80078b6:	bf00      	nop
 80078b8:	e000ed00 	.word	0xe000ed00

080078bc <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b09a      	sub	sp, #104	; 0x68
 80078c0:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80078c2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80078c6:	2224      	movs	r2, #36	; 0x24
 80078c8:	2100      	movs	r1, #0
 80078ca:	4618      	mov	r0, r3
 80078cc:	f007 fd36 	bl	800f33c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80078d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80078d4:	2200      	movs	r2, #0
 80078d6:	601a      	str	r2, [r3, #0]
 80078d8:	605a      	str	r2, [r3, #4]
 80078da:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80078dc:	1d3b      	adds	r3, r7, #4
 80078de:	2234      	movs	r2, #52	; 0x34
 80078e0:	2100      	movs	r1, #0
 80078e2:	4618      	mov	r0, r3
 80078e4:	f007 fd2a 	bl	800f33c <memset>

  htim1.Instance = TIM1;
 80078e8:	4b2a      	ldr	r3, [pc, #168]	; (8007994 <MX_TIM1_Init+0xd8>)
 80078ea:	4a2b      	ldr	r2, [pc, #172]	; (8007998 <MX_TIM1_Init+0xdc>)
 80078ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80078ee:	4b29      	ldr	r3, [pc, #164]	; (8007994 <MX_TIM1_Init+0xd8>)
 80078f0:	2200      	movs	r2, #0
 80078f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 80078f4:	4b27      	ldr	r3, [pc, #156]	; (8007994 <MX_TIM1_Init+0xd8>)
 80078f6:	2260      	movs	r2, #96	; 0x60
 80078f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 80078fa:	4b26      	ldr	r3, [pc, #152]	; (8007994 <MX_TIM1_Init+0xd8>)
 80078fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007900:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007902:	4b24      	ldr	r3, [pc, #144]	; (8007994 <MX_TIM1_Init+0xd8>)
 8007904:	2200      	movs	r2, #0
 8007906:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007908:	4b22      	ldr	r3, [pc, #136]	; (8007994 <MX_TIM1_Init+0xd8>)
 800790a:	2200      	movs	r2, #0
 800790c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800790e:	4b21      	ldr	r3, [pc, #132]	; (8007994 <MX_TIM1_Init+0xd8>)
 8007910:	2280      	movs	r2, #128	; 0x80
 8007912:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 8007914:	2302      	movs	r3, #2
 8007916:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8007918:	2300      	movs	r3, #0
 800791a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800791c:	2301      	movs	r3, #1
 800791e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8007920:	2300      	movs	r3, #0
 8007922:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8007924:	2300      	movs	r3, #0
 8007926:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8007928:	2300      	movs	r3, #0
 800792a:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800792c:	2301      	movs	r3, #1
 800792e:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8007930:	2300      	movs	r3, #0
 8007932:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8007934:	2300      	movs	r3, #0
 8007936:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8007938:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800793c:	4619      	mov	r1, r3
 800793e:	4815      	ldr	r0, [pc, #84]	; (8007994 <MX_TIM1_Init+0xd8>)
 8007940:	f004 fd72 	bl	800c428 <HAL_TIM_Encoder_Init>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d001      	beq.n	800794e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800794a:	f7ff fd25 	bl	8007398 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800794e:	2320      	movs	r3, #32
 8007950:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8007952:	2300      	movs	r3, #0
 8007954:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007956:	2300      	movs	r3, #0
 8007958:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800795a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800795e:	4619      	mov	r1, r3
 8007960:	480c      	ldr	r0, [pc, #48]	; (8007994 <MX_TIM1_Init+0xd8>)
 8007962:	f005 ff4b 	bl	800d7fc <HAL_TIMEx_MasterConfigSynchronization>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d001      	beq.n	8007970 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 800796c:	f7ff fd14 	bl	8007398 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8007970:	2300      	movs	r3, #0
 8007972:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8007974:	2300      	movs	r3, #0
 8007976:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8007978:	1d3b      	adds	r3, r7, #4
 800797a:	4619      	mov	r1, r3
 800797c:	4805      	ldr	r0, [pc, #20]	; (8007994 <MX_TIM1_Init+0xd8>)
 800797e:	f005 ffd3 	bl	800d928 <HAL_TIMEx_ConfigBreakDeadTime>
 8007982:	4603      	mov	r3, r0
 8007984:	2b00      	cmp	r3, #0
 8007986:	d001      	beq.n	800798c <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8007988:	f7ff fd06 	bl	8007398 <Error_Handler>
  }

}
 800798c:	bf00      	nop
 800798e:	3768      	adds	r7, #104	; 0x68
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}
 8007994:	20002840 	.word	0x20002840
 8007998:	40012c00 	.word	0x40012c00

0800799c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b08c      	sub	sp, #48	; 0x30
 80079a0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80079a2:	f107 0320 	add.w	r3, r7, #32
 80079a6:	2200      	movs	r2, #0
 80079a8:	601a      	str	r2, [r3, #0]
 80079aa:	605a      	str	r2, [r3, #4]
 80079ac:	609a      	str	r2, [r3, #8]
 80079ae:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80079b0:	f107 030c 	add.w	r3, r7, #12
 80079b4:	2200      	movs	r2, #0
 80079b6:	601a      	str	r2, [r3, #0]
 80079b8:	605a      	str	r2, [r3, #4]
 80079ba:	609a      	str	r2, [r3, #8]
 80079bc:	60da      	str	r2, [r3, #12]
 80079be:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80079c0:	463b      	mov	r3, r7
 80079c2:	2200      	movs	r2, #0
 80079c4:	601a      	str	r2, [r3, #0]
 80079c6:	605a      	str	r2, [r3, #4]
 80079c8:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 80079ca:	4b27      	ldr	r3, [pc, #156]	; (8007a68 <MX_TIM2_Init+0xcc>)
 80079cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80079d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80079d2:	4b25      	ldr	r3, [pc, #148]	; (8007a68 <MX_TIM2_Init+0xcc>)
 80079d4:	2200      	movs	r2, #0
 80079d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80079d8:	4b23      	ldr	r3, [pc, #140]	; (8007a68 <MX_TIM2_Init+0xcc>)
 80079da:	2200      	movs	r2, #0
 80079dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 80079de:	4b22      	ldr	r3, [pc, #136]	; (8007a68 <MX_TIM2_Init+0xcc>)
 80079e0:	2201      	movs	r2, #1
 80079e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80079e4:	4b20      	ldr	r3, [pc, #128]	; (8007a68 <MX_TIM2_Init+0xcc>)
 80079e6:	2200      	movs	r2, #0
 80079e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80079ea:	4b1f      	ldr	r3, [pc, #124]	; (8007a68 <MX_TIM2_Init+0xcc>)
 80079ec:	2280      	movs	r2, #128	; 0x80
 80079ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80079f0:	481d      	ldr	r0, [pc, #116]	; (8007a68 <MX_TIM2_Init+0xcc>)
 80079f2:	f004 fa2f 	bl	800be54 <HAL_TIM_Base_Init>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d001      	beq.n	8007a00 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 80079fc:	f7ff fccc 	bl	8007398 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007a00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a04:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007a06:	f107 0320 	add.w	r3, r7, #32
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	4816      	ldr	r0, [pc, #88]	; (8007a68 <MX_TIM2_Init+0xcc>)
 8007a0e:	f005 f841 	bl	800ca94 <HAL_TIM_ConfigClockSource>
 8007a12:	4603      	mov	r3, r0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d001      	beq.n	8007a1c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8007a18:	f7ff fcbe 	bl	8007398 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8007a1c:	2305      	movs	r3, #5
 8007a1e:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8007a20:	2350      	movs	r3, #80	; 0x50
 8007a22:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8007a24:	2300      	movs	r3, #0
 8007a26:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8007a2c:	f107 030c 	add.w	r3, r7, #12
 8007a30:	4619      	mov	r1, r3
 8007a32:	480d      	ldr	r0, [pc, #52]	; (8007a68 <MX_TIM2_Init+0xcc>)
 8007a34:	f005 f91e 	bl	800cc74 <HAL_TIM_SlaveConfigSynchro>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d001      	beq.n	8007a42 <MX_TIM2_Init+0xa6>
  {
    Error_Handler();
 8007a3e:	f7ff fcab 	bl	8007398 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007a42:	2320      	movs	r3, #32
 8007a44:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007a46:	2300      	movs	r3, #0
 8007a48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007a4a:	463b      	mov	r3, r7
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	4806      	ldr	r0, [pc, #24]	; (8007a68 <MX_TIM2_Init+0xcc>)
 8007a50:	f005 fed4 	bl	800d7fc <HAL_TIMEx_MasterConfigSynchronization>
 8007a54:	4603      	mov	r3, r0
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d001      	beq.n	8007a5e <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 8007a5a:	f7ff fc9d 	bl	8007398 <Error_Handler>
  }

}
 8007a5e:	bf00      	nop
 8007a60:	3730      	adds	r7, #48	; 0x30
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop
 8007a68:	2000288c 	.word	0x2000288c

08007a6c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b088      	sub	sp, #32
 8007a70:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007a72:	f107 0310 	add.w	r3, r7, #16
 8007a76:	2200      	movs	r2, #0
 8007a78:	601a      	str	r2, [r3, #0]
 8007a7a:	605a      	str	r2, [r3, #4]
 8007a7c:	609a      	str	r2, [r3, #8]
 8007a7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007a80:	1d3b      	adds	r3, r7, #4
 8007a82:	2200      	movs	r2, #0
 8007a84:	601a      	str	r2, [r3, #0]
 8007a86:	605a      	str	r2, [r3, #4]
 8007a88:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 8007a8a:	4b1d      	ldr	r3, [pc, #116]	; (8007b00 <MX_TIM3_Init+0x94>)
 8007a8c:	4a1d      	ldr	r2, [pc, #116]	; (8007b04 <MX_TIM3_Init+0x98>)
 8007a8e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8007a90:	4b1b      	ldr	r3, [pc, #108]	; (8007b00 <MX_TIM3_Init+0x94>)
 8007a92:	2200      	movs	r2, #0
 8007a94:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8007a96:	4b1a      	ldr	r3, [pc, #104]	; (8007b00 <MX_TIM3_Init+0x94>)
 8007a98:	2210      	movs	r2, #16
 8007a9a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8007a9c:	4b18      	ldr	r3, [pc, #96]	; (8007b00 <MX_TIM3_Init+0x94>)
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8007aa2:	4b17      	ldr	r3, [pc, #92]	; (8007b00 <MX_TIM3_Init+0x94>)
 8007aa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007aa8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007aaa:	4b15      	ldr	r3, [pc, #84]	; (8007b00 <MX_TIM3_Init+0x94>)
 8007aac:	2280      	movs	r2, #128	; 0x80
 8007aae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007ab0:	4813      	ldr	r0, [pc, #76]	; (8007b00 <MX_TIM3_Init+0x94>)
 8007ab2:	f004 f9cf 	bl	800be54 <HAL_TIM_Base_Init>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d001      	beq.n	8007ac0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8007abc:	f7ff fc6c 	bl	8007398 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ac4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8007ac6:	f107 0310 	add.w	r3, r7, #16
 8007aca:	4619      	mov	r1, r3
 8007acc:	480c      	ldr	r0, [pc, #48]	; (8007b00 <MX_TIM3_Init+0x94>)
 8007ace:	f004 ffe1 	bl	800ca94 <HAL_TIM_ConfigClockSource>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d001      	beq.n	8007adc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8007ad8:	f7ff fc5e 	bl	8007398 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007adc:	2320      	movs	r3, #32
 8007ade:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007ae4:	1d3b      	adds	r3, r7, #4
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	4805      	ldr	r0, [pc, #20]	; (8007b00 <MX_TIM3_Init+0x94>)
 8007aea:	f005 fe87 	bl	800d7fc <HAL_TIMEx_MasterConfigSynchronization>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d001      	beq.n	8007af8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8007af4:	f7ff fc50 	bl	8007398 <Error_Handler>
  }

}
 8007af8:	bf00      	nop
 8007afa:	3720      	adds	r7, #32
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}
 8007b00:	20001f18 	.word	0x20001f18
 8007b04:	40000400 	.word	0x40000400

08007b08 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b088      	sub	sp, #32
 8007b0c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007b0e:	f107 0310 	add.w	r3, r7, #16
 8007b12:	2200      	movs	r2, #0
 8007b14:	601a      	str	r2, [r3, #0]
 8007b16:	605a      	str	r2, [r3, #4]
 8007b18:	609a      	str	r2, [r3, #8]
 8007b1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007b1c:	1d3b      	adds	r3, r7, #4
 8007b1e:	2200      	movs	r2, #0
 8007b20:	601a      	str	r2, [r3, #0]
 8007b22:	605a      	str	r2, [r3, #4]
 8007b24:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 8007b26:	4b1d      	ldr	r3, [pc, #116]	; (8007b9c <MX_TIM5_Init+0x94>)
 8007b28:	4a1d      	ldr	r2, [pc, #116]	; (8007ba0 <MX_TIM5_Init+0x98>)
 8007b2a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8007b2c:	4b1b      	ldr	r3, [pc, #108]	; (8007b9c <MX_TIM5_Init+0x94>)
 8007b2e:	2200      	movs	r2, #0
 8007b30:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007b32:	4b1a      	ldr	r3, [pc, #104]	; (8007b9c <MX_TIM5_Init+0x94>)
 8007b34:	2200      	movs	r2, #0
 8007b36:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 8007b38:	4b18      	ldr	r3, [pc, #96]	; (8007b9c <MX_TIM5_Init+0x94>)
 8007b3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007b3e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007b40:	4b16      	ldr	r3, [pc, #88]	; (8007b9c <MX_TIM5_Init+0x94>)
 8007b42:	2200      	movs	r2, #0
 8007b44:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007b46:	4b15      	ldr	r3, [pc, #84]	; (8007b9c <MX_TIM5_Init+0x94>)
 8007b48:	2280      	movs	r2, #128	; 0x80
 8007b4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8007b4c:	4813      	ldr	r0, [pc, #76]	; (8007b9c <MX_TIM5_Init+0x94>)
 8007b4e:	f004 f981 	bl	800be54 <HAL_TIM_Base_Init>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d001      	beq.n	8007b5c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8007b58:	f7ff fc1e 	bl	8007398 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007b5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b60:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8007b62:	f107 0310 	add.w	r3, r7, #16
 8007b66:	4619      	mov	r1, r3
 8007b68:	480c      	ldr	r0, [pc, #48]	; (8007b9c <MX_TIM5_Init+0x94>)
 8007b6a:	f004 ff93 	bl	800ca94 <HAL_TIM_ConfigClockSource>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d001      	beq.n	8007b78 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8007b74:	f7ff fc10 	bl	8007398 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8007b80:	1d3b      	adds	r3, r7, #4
 8007b82:	4619      	mov	r1, r3
 8007b84:	4805      	ldr	r0, [pc, #20]	; (8007b9c <MX_TIM5_Init+0x94>)
 8007b86:	f005 fe39 	bl	800d7fc <HAL_TIMEx_MasterConfigSynchronization>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d001      	beq.n	8007b94 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8007b90:	f7ff fc02 	bl	8007398 <Error_Handler>
  }

}
 8007b94:	bf00      	nop
 8007b96:	3720      	adds	r7, #32
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}
 8007b9c:	200027f4 	.word	0x200027f4
 8007ba0:	40000c00 	.word	0x40000c00

08007ba4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b094      	sub	sp, #80	; 0x50
 8007ba8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007baa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007bae:	2200      	movs	r2, #0
 8007bb0:	601a      	str	r2, [r3, #0]
 8007bb2:	605a      	str	r2, [r3, #4]
 8007bb4:	609a      	str	r2, [r3, #8]
 8007bb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007bb8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	601a      	str	r2, [r3, #0]
 8007bc0:	605a      	str	r2, [r3, #4]
 8007bc2:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007bc4:	463b      	mov	r3, r7
 8007bc6:	2234      	movs	r2, #52	; 0x34
 8007bc8:	2100      	movs	r1, #0
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f007 fbb6 	bl	800f33c <memset>

  htim8.Instance = TIM8;
 8007bd0:	4b26      	ldr	r3, [pc, #152]	; (8007c6c <MX_TIM8_Init+0xc8>)
 8007bd2:	4a27      	ldr	r2, [pc, #156]	; (8007c70 <MX_TIM8_Init+0xcc>)
 8007bd4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8007bd6:	4b25      	ldr	r3, [pc, #148]	; (8007c6c <MX_TIM8_Init+0xc8>)
 8007bd8:	2200      	movs	r2, #0
 8007bda:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007bdc:	4b23      	ldr	r3, [pc, #140]	; (8007c6c <MX_TIM8_Init+0xc8>)
 8007bde:	2200      	movs	r2, #0
 8007be0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 8007be2:	4b22      	ldr	r3, [pc, #136]	; (8007c6c <MX_TIM8_Init+0xc8>)
 8007be4:	2201      	movs	r2, #1
 8007be6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007be8:	4b20      	ldr	r3, [pc, #128]	; (8007c6c <MX_TIM8_Init+0xc8>)
 8007bea:	2200      	movs	r2, #0
 8007bec:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8007bee:	4b1f      	ldr	r3, [pc, #124]	; (8007c6c <MX_TIM8_Init+0xc8>)
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007bf4:	4b1d      	ldr	r3, [pc, #116]	; (8007c6c <MX_TIM8_Init+0xc8>)
 8007bf6:	2280      	movs	r2, #128	; 0x80
 8007bf8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8007bfa:	481c      	ldr	r0, [pc, #112]	; (8007c6c <MX_TIM8_Init+0xc8>)
 8007bfc:	f004 f92a 	bl	800be54 <HAL_TIM_Base_Init>
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d001      	beq.n	8007c0a <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8007c06:	f7ff fbc7 	bl	8007398 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007c0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c0e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8007c10:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007c14:	4619      	mov	r1, r3
 8007c16:	4815      	ldr	r0, [pc, #84]	; (8007c6c <MX_TIM8_Init+0xc8>)
 8007c18:	f004 ff3c 	bl	800ca94 <HAL_TIM_ConfigClockSource>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d001      	beq.n	8007c26 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8007c22:	f7ff fbb9 	bl	8007398 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007c26:	2320      	movs	r3, #32
 8007c28:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8007c32:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007c36:	4619      	mov	r1, r3
 8007c38:	480c      	ldr	r0, [pc, #48]	; (8007c6c <MX_TIM8_Init+0xc8>)
 8007c3a:	f005 fddf 	bl	800d7fc <HAL_TIMEx_MasterConfigSynchronization>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d001      	beq.n	8007c48 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8007c44:	f7ff fba8 	bl	8007398 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8007c50:	463b      	mov	r3, r7
 8007c52:	4619      	mov	r1, r3
 8007c54:	4805      	ldr	r0, [pc, #20]	; (8007c6c <MX_TIM8_Init+0xc8>)
 8007c56:	f005 fe67 	bl	800d928 <HAL_TIMEx_ConfigBreakDeadTime>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d001      	beq.n	8007c64 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8007c60:	f7ff fb9a 	bl	8007398 <Error_Handler>
  }

}
 8007c64:	bf00      	nop
 8007c66:	3750      	adds	r7, #80	; 0x50
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	20002710 	.word	0x20002710
 8007c70:	40013400 	.word	0x40013400

08007c74 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b088      	sub	sp, #32
 8007c78:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007c7a:	f107 0310 	add.w	r3, r7, #16
 8007c7e:	2200      	movs	r2, #0
 8007c80:	601a      	str	r2, [r3, #0]
 8007c82:	605a      	str	r2, [r3, #4]
 8007c84:	609a      	str	r2, [r3, #8]
 8007c86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007c88:	1d3b      	adds	r3, r7, #4
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	601a      	str	r2, [r3, #0]
 8007c8e:	605a      	str	r2, [r3, #4]
 8007c90:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 8007c92:	4b1f      	ldr	r3, [pc, #124]	; (8007d10 <MX_TIM15_Init+0x9c>)
 8007c94:	4a1f      	ldr	r2, [pc, #124]	; (8007d14 <MX_TIM15_Init+0xa0>)
 8007c96:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 8007c98:	4b1d      	ldr	r3, [pc, #116]	; (8007d10 <MX_TIM15_Init+0x9c>)
 8007c9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007c9e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007ca0:	4b1b      	ldr	r3, [pc, #108]	; (8007d10 <MX_TIM15_Init+0x9c>)
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 8007ca6:	4b1a      	ldr	r3, [pc, #104]	; (8007d10 <MX_TIM15_Init+0x9c>)
 8007ca8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007cac:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007cae:	4b18      	ldr	r3, [pc, #96]	; (8007d10 <MX_TIM15_Init+0x9c>)
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8007cb4:	4b16      	ldr	r3, [pc, #88]	; (8007d10 <MX_TIM15_Init+0x9c>)
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007cba:	4b15      	ldr	r3, [pc, #84]	; (8007d10 <MX_TIM15_Init+0x9c>)
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8007cc0:	4813      	ldr	r0, [pc, #76]	; (8007d10 <MX_TIM15_Init+0x9c>)
 8007cc2:	f004 f8c7 	bl	800be54 <HAL_TIM_Base_Init>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d001      	beq.n	8007cd0 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8007ccc:	f7ff fb64 	bl	8007398 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007cd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007cd4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8007cd6:	f107 0310 	add.w	r3, r7, #16
 8007cda:	4619      	mov	r1, r3
 8007cdc:	480c      	ldr	r0, [pc, #48]	; (8007d10 <MX_TIM15_Init+0x9c>)
 8007cde:	f004 fed9 	bl	800ca94 <HAL_TIM_ConfigClockSource>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d001      	beq.n	8007cec <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8007ce8:	f7ff fb56 	bl	8007398 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007cec:	2300      	movs	r3, #0
 8007cee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8007cf4:	1d3b      	adds	r3, r7, #4
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	4805      	ldr	r0, [pc, #20]	; (8007d10 <MX_TIM15_Init+0x9c>)
 8007cfa:	f005 fd7f 	bl	800d7fc <HAL_TIMEx_MasterConfigSynchronization>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d001      	beq.n	8007d08 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8007d04:	f7ff fb48 	bl	8007398 <Error_Handler>
  }

}
 8007d08:	bf00      	nop
 8007d0a:	3720      	adds	r7, #32
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}
 8007d10:	2000275c 	.word	0x2000275c
 8007d14:	40014000 	.word	0x40014000

08007d18 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8007d1c:	4b10      	ldr	r3, [pc, #64]	; (8007d60 <MX_TIM16_Init+0x48>)
 8007d1e:	4a11      	ldr	r2, [pc, #68]	; (8007d64 <MX_TIM16_Init+0x4c>)
 8007d20:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 65535;
 8007d22:	4b0f      	ldr	r3, [pc, #60]	; (8007d60 <MX_TIM16_Init+0x48>)
 8007d24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d28:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007d2a:	4b0d      	ldr	r3, [pc, #52]	; (8007d60 <MX_TIM16_Init+0x48>)
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8007d30:	4b0b      	ldr	r3, [pc, #44]	; (8007d60 <MX_TIM16_Init+0x48>)
 8007d32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d36:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007d38:	4b09      	ldr	r3, [pc, #36]	; (8007d60 <MX_TIM16_Init+0x48>)
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8007d3e:	4b08      	ldr	r3, [pc, #32]	; (8007d60 <MX_TIM16_Init+0x48>)
 8007d40:	2200      	movs	r2, #0
 8007d42:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007d44:	4b06      	ldr	r3, [pc, #24]	; (8007d60 <MX_TIM16_Init+0x48>)
 8007d46:	2200      	movs	r2, #0
 8007d48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8007d4a:	4805      	ldr	r0, [pc, #20]	; (8007d60 <MX_TIM16_Init+0x48>)
 8007d4c:	f004 f882 	bl	800be54 <HAL_TIM_Base_Init>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d001      	beq.n	8007d5a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8007d56:	f7ff fb1f 	bl	8007398 <Error_Handler>
  }

}
 8007d5a:	bf00      	nop
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	200028d8 	.word	0x200028d8
 8007d64:	40014400 	.word	0x40014400

08007d68 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8007d6c:	4b10      	ldr	r3, [pc, #64]	; (8007db0 <MX_TIM17_Init+0x48>)
 8007d6e:	4a11      	ldr	r2, [pc, #68]	; (8007db4 <MX_TIM17_Init+0x4c>)
 8007d70:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1024;
 8007d72:	4b0f      	ldr	r3, [pc, #60]	; (8007db0 <MX_TIM17_Init+0x48>)
 8007d74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007d78:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007d7a:	4b0d      	ldr	r3, [pc, #52]	; (8007db0 <MX_TIM17_Init+0x48>)
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1024;
 8007d80:	4b0b      	ldr	r3, [pc, #44]	; (8007db0 <MX_TIM17_Init+0x48>)
 8007d82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007d86:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007d88:	4b09      	ldr	r3, [pc, #36]	; (8007db0 <MX_TIM17_Init+0x48>)
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8007d8e:	4b08      	ldr	r3, [pc, #32]	; (8007db0 <MX_TIM17_Init+0x48>)
 8007d90:	2200      	movs	r2, #0
 8007d92:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007d94:	4b06      	ldr	r3, [pc, #24]	; (8007db0 <MX_TIM17_Init+0x48>)
 8007d96:	2200      	movs	r2, #0
 8007d98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8007d9a:	4805      	ldr	r0, [pc, #20]	; (8007db0 <MX_TIM17_Init+0x48>)
 8007d9c:	f004 f85a 	bl	800be54 <HAL_TIM_Base_Init>
 8007da0:	4603      	mov	r3, r0
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d001      	beq.n	8007daa <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8007da6:	f7ff faf7 	bl	8007398 <Error_Handler>
  }

}
 8007daa:	bf00      	nop
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	200027a8 	.word	0x200027a8
 8007db4:	40014800 	.word	0x40014800

08007db8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b08a      	sub	sp, #40	; 0x28
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007dc0:	f107 0314 	add.w	r3, r7, #20
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	601a      	str	r2, [r3, #0]
 8007dc8:	605a      	str	r2, [r3, #4]
 8007dca:	609a      	str	r2, [r3, #8]
 8007dcc:	60da      	str	r2, [r3, #12]
 8007dce:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a1f      	ldr	r2, [pc, #124]	; (8007e54 <HAL_TIM_Encoder_MspInit+0x9c>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d137      	bne.n	8007e4a <HAL_TIM_Encoder_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007dda:	4b1f      	ldr	r3, [pc, #124]	; (8007e58 <HAL_TIM_Encoder_MspInit+0xa0>)
 8007ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dde:	4a1e      	ldr	r2, [pc, #120]	; (8007e58 <HAL_TIM_Encoder_MspInit+0xa0>)
 8007de0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007de4:	6613      	str	r3, [r2, #96]	; 0x60
 8007de6:	4b1c      	ldr	r3, [pc, #112]	; (8007e58 <HAL_TIM_Encoder_MspInit+0xa0>)
 8007de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007dee:	613b      	str	r3, [r7, #16]
 8007df0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007df2:	4b19      	ldr	r3, [pc, #100]	; (8007e58 <HAL_TIM_Encoder_MspInit+0xa0>)
 8007df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007df6:	4a18      	ldr	r2, [pc, #96]	; (8007e58 <HAL_TIM_Encoder_MspInit+0xa0>)
 8007df8:	f043 0304 	orr.w	r3, r3, #4
 8007dfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007dfe:	4b16      	ldr	r3, [pc, #88]	; (8007e58 <HAL_TIM_Encoder_MspInit+0xa0>)
 8007e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e02:	f003 0304 	and.w	r3, r3, #4
 8007e06:	60fb      	str	r3, [r7, #12]
 8007e08:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007e0a:	2303      	movs	r3, #3
 8007e0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e0e:	2302      	movs	r3, #2
 8007e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e12:	2300      	movs	r3, #0
 8007e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e16:	2300      	movs	r3, #0
 8007e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8007e1a:	2302      	movs	r3, #2
 8007e1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007e1e:	f107 0314 	add.w	r3, r7, #20
 8007e22:	4619      	mov	r1, r3
 8007e24:	480d      	ldr	r0, [pc, #52]	; (8007e5c <HAL_TIM_Encoder_MspInit+0xa4>)
 8007e26:	f002 fd0f 	bl	800a848 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	2100      	movs	r1, #0
 8007e2e:	2018      	movs	r0, #24
 8007e30:	f001 fde7 	bl	8009a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8007e34:	2018      	movs	r0, #24
 8007e36:	f001 fdfe 	bl	8009a36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	2101      	movs	r1, #1
 8007e3e:	201a      	movs	r0, #26
 8007e40:	f001 fddf 	bl	8009a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8007e44:	201a      	movs	r0, #26
 8007e46:	f001 fdf6 	bl	8009a36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8007e4a:	bf00      	nop
 8007e4c:	3728      	adds	r7, #40	; 0x28
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	40012c00 	.word	0x40012c00
 8007e58:	40021000 	.word	0x40021000
 8007e5c:	48000800 	.word	0x48000800

08007e60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b090      	sub	sp, #64	; 0x40
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	601a      	str	r2, [r3, #0]
 8007e70:	605a      	str	r2, [r3, #4]
 8007e72:	609a      	str	r2, [r3, #8]
 8007e74:	60da      	str	r2, [r3, #12]
 8007e76:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e80:	d129      	bne.n	8007ed6 <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007e82:	4b5c      	ldr	r3, [pc, #368]	; (8007ff4 <HAL_TIM_Base_MspInit+0x194>)
 8007e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e86:	4a5b      	ldr	r2, [pc, #364]	; (8007ff4 <HAL_TIM_Base_MspInit+0x194>)
 8007e88:	f043 0301 	orr.w	r3, r3, #1
 8007e8c:	6593      	str	r3, [r2, #88]	; 0x58
 8007e8e:	4b59      	ldr	r3, [pc, #356]	; (8007ff4 <HAL_TIM_Base_MspInit+0x194>)
 8007e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e92:	f003 0301 	and.w	r3, r3, #1
 8007e96:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e9a:	4b56      	ldr	r3, [pc, #344]	; (8007ff4 <HAL_TIM_Base_MspInit+0x194>)
 8007e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e9e:	4a55      	ldr	r2, [pc, #340]	; (8007ff4 <HAL_TIM_Base_MspInit+0x194>)
 8007ea0:	f043 0301 	orr.w	r3, r3, #1
 8007ea4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007ea6:	4b53      	ldr	r3, [pc, #332]	; (8007ff4 <HAL_TIM_Base_MspInit+0x194>)
 8007ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eaa:	f003 0301 	and.w	r3, r3, #1
 8007eae:	627b      	str	r3, [r7, #36]	; 0x24
 8007eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007eb6:	2302      	movs	r3, #2
 8007eb8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ec6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007eca:	4619      	mov	r1, r3
 8007ecc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007ed0:	f002 fcba 	bl	800a848 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8007ed4:	e08a      	b.n	8007fec <HAL_TIM_Base_MspInit+0x18c>
  else if(tim_baseHandle->Instance==TIM3)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a47      	ldr	r2, [pc, #284]	; (8007ff8 <HAL_TIM_Base_MspInit+0x198>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d114      	bne.n	8007f0a <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007ee0:	4b44      	ldr	r3, [pc, #272]	; (8007ff4 <HAL_TIM_Base_MspInit+0x194>)
 8007ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ee4:	4a43      	ldr	r2, [pc, #268]	; (8007ff4 <HAL_TIM_Base_MspInit+0x194>)
 8007ee6:	f043 0302 	orr.w	r3, r3, #2
 8007eea:	6593      	str	r3, [r2, #88]	; 0x58
 8007eec:	4b41      	ldr	r3, [pc, #260]	; (8007ff4 <HAL_TIM_Base_MspInit+0x194>)
 8007eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ef0:	f003 0302 	and.w	r3, r3, #2
 8007ef4:	623b      	str	r3, [r7, #32]
 8007ef6:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8007ef8:	2200      	movs	r2, #0
 8007efa:	2100      	movs	r1, #0
 8007efc:	201d      	movs	r0, #29
 8007efe:	f001 fd80 	bl	8009a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007f02:	201d      	movs	r0, #29
 8007f04:	f001 fd97 	bl	8009a36 <HAL_NVIC_EnableIRQ>
}
 8007f08:	e070      	b.n	8007fec <HAL_TIM_Base_MspInit+0x18c>
  else if(tim_baseHandle->Instance==TIM5)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a3b      	ldr	r2, [pc, #236]	; (8007ffc <HAL_TIM_Base_MspInit+0x19c>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d114      	bne.n	8007f3e <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8007f14:	4b37      	ldr	r3, [pc, #220]	; (8007ff4 <HAL_TIM_Base_MspInit+0x194>)
 8007f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f18:	4a36      	ldr	r2, [pc, #216]	; (8007ff4 <HAL_TIM_Base_MspInit+0x194>)
 8007f1a:	f043 0308 	orr.w	r3, r3, #8
 8007f1e:	6593      	str	r3, [r2, #88]	; 0x58
 8007f20:	4b34      	ldr	r3, [pc, #208]	; (8007ff4 <HAL_TIM_Base_MspInit+0x194>)
 8007f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f24:	f003 0308 	and.w	r3, r3, #8
 8007f28:	61fb      	str	r3, [r7, #28]
 8007f2a:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 2, 0);
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	2102      	movs	r1, #2
 8007f30:	2032      	movs	r0, #50	; 0x32
 8007f32:	f001 fd66 	bl	8009a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8007f36:	2032      	movs	r0, #50	; 0x32
 8007f38:	f001 fd7d 	bl	8009a36 <HAL_NVIC_EnableIRQ>
}
 8007f3c:	e056      	b.n	8007fec <HAL_TIM_Base_MspInit+0x18c>
  else if(tim_baseHandle->Instance==TIM8)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a2f      	ldr	r2, [pc, #188]	; (8008000 <HAL_TIM_Base_MspInit+0x1a0>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d10c      	bne.n	8007f62 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8007f48:	4b2a      	ldr	r3, [pc, #168]	; (8007ff4 <HAL_TIM_Base_MspInit+0x194>)
 8007f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f4c:	4a29      	ldr	r2, [pc, #164]	; (8007ff4 <HAL_TIM_Base_MspInit+0x194>)
 8007f4e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007f52:	6613      	str	r3, [r2, #96]	; 0x60
 8007f54:	4b27      	ldr	r3, [pc, #156]	; (8007ff4 <HAL_TIM_Base_MspInit+0x194>)
 8007f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f5c:	61bb      	str	r3, [r7, #24]
 8007f5e:	69bb      	ldr	r3, [r7, #24]
}
 8007f60:	e044      	b.n	8007fec <HAL_TIM_Base_MspInit+0x18c>
  else if(tim_baseHandle->Instance==TIM15)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a27      	ldr	r2, [pc, #156]	; (8008004 <HAL_TIM_Base_MspInit+0x1a4>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d114      	bne.n	8007f96 <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8007f6c:	4b21      	ldr	r3, [pc, #132]	; (8007ff4 <HAL_TIM_Base_MspInit+0x194>)
 8007f6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f70:	4a20      	ldr	r2, [pc, #128]	; (8007ff4 <HAL_TIM_Base_MspInit+0x194>)
 8007f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f76:	6613      	str	r3, [r2, #96]	; 0x60
 8007f78:	4b1e      	ldr	r3, [pc, #120]	; (8007ff4 <HAL_TIM_Base_MspInit+0x194>)
 8007f7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f80:	617b      	str	r3, [r7, #20]
 8007f82:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8007f84:	2200      	movs	r2, #0
 8007f86:	2100      	movs	r1, #0
 8007f88:	2018      	movs	r0, #24
 8007f8a:	f001 fd3a 	bl	8009a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8007f8e:	2018      	movs	r0, #24
 8007f90:	f001 fd51 	bl	8009a36 <HAL_NVIC_EnableIRQ>
}
 8007f94:	e02a      	b.n	8007fec <HAL_TIM_Base_MspInit+0x18c>
  else if(tim_baseHandle->Instance==TIM16)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a1b      	ldr	r2, [pc, #108]	; (8008008 <HAL_TIM_Base_MspInit+0x1a8>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d10c      	bne.n	8007fba <HAL_TIM_Base_MspInit+0x15a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8007fa0:	4b14      	ldr	r3, [pc, #80]	; (8007ff4 <HAL_TIM_Base_MspInit+0x194>)
 8007fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fa4:	4a13      	ldr	r2, [pc, #76]	; (8007ff4 <HAL_TIM_Base_MspInit+0x194>)
 8007fa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007faa:	6613      	str	r3, [r2, #96]	; 0x60
 8007fac:	4b11      	ldr	r3, [pc, #68]	; (8007ff4 <HAL_TIM_Base_MspInit+0x194>)
 8007fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fb4:	613b      	str	r3, [r7, #16]
 8007fb6:	693b      	ldr	r3, [r7, #16]
}
 8007fb8:	e018      	b.n	8007fec <HAL_TIM_Base_MspInit+0x18c>
  else if(tim_baseHandle->Instance==TIM17)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a13      	ldr	r2, [pc, #76]	; (800800c <HAL_TIM_Base_MspInit+0x1ac>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d113      	bne.n	8007fec <HAL_TIM_Base_MspInit+0x18c>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8007fc4:	4b0b      	ldr	r3, [pc, #44]	; (8007ff4 <HAL_TIM_Base_MspInit+0x194>)
 8007fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fc8:	4a0a      	ldr	r2, [pc, #40]	; (8007ff4 <HAL_TIM_Base_MspInit+0x194>)
 8007fca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007fce:	6613      	str	r3, [r2, #96]	; 0x60
 8007fd0:	4b08      	ldr	r3, [pc, #32]	; (8007ff4 <HAL_TIM_Base_MspInit+0x194>)
 8007fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007fd8:	60fb      	str	r3, [r7, #12]
 8007fda:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8007fdc:	2200      	movs	r2, #0
 8007fde:	2101      	movs	r1, #1
 8007fe0:	201a      	movs	r0, #26
 8007fe2:	f001 fd0e 	bl	8009a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8007fe6:	201a      	movs	r0, #26
 8007fe8:	f001 fd25 	bl	8009a36 <HAL_NVIC_EnableIRQ>
}
 8007fec:	bf00      	nop
 8007fee:	3740      	adds	r7, #64	; 0x40
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}
 8007ff4:	40021000 	.word	0x40021000
 8007ff8:	40000400 	.word	0x40000400
 8007ffc:	40000c00 	.word	0x40000c00
 8008000:	40013400 	.word	0x40013400
 8008004:	40014000 	.word	0x40014000
 8008008:	40014400 	.word	0x40014400
 800800c:	40014800 	.word	0x40014800

08008010 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008010:	480d      	ldr	r0, [pc, #52]	; (8008048 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008012:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008014:	480d      	ldr	r0, [pc, #52]	; (800804c <LoopForever+0x6>)
  ldr r1, =_edata
 8008016:	490e      	ldr	r1, [pc, #56]	; (8008050 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008018:	4a0e      	ldr	r2, [pc, #56]	; (8008054 <LoopForever+0xe>)
  movs r3, #0
 800801a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800801c:	e002      	b.n	8008024 <LoopCopyDataInit>

0800801e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800801e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008020:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008022:	3304      	adds	r3, #4

08008024 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008024:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008026:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008028:	d3f9      	bcc.n	800801e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800802a:	4a0b      	ldr	r2, [pc, #44]	; (8008058 <LoopForever+0x12>)
  ldr r4, =_ebss
 800802c:	4c0b      	ldr	r4, [pc, #44]	; (800805c <LoopForever+0x16>)
  movs r3, #0
 800802e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008030:	e001      	b.n	8008036 <LoopFillZerobss>

08008032 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008032:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008034:	3204      	adds	r2, #4

08008036 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008036:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008038:	d3fb      	bcc.n	8008032 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800803a:	f7ff fc29 	bl	8007890 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800803e:	f007 f959 	bl	800f2f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008042:	f7ff f8e9 	bl	8007218 <main>

08008046 <LoopForever>:

LoopForever:
    b LoopForever
 8008046:	e7fe      	b.n	8008046 <LoopForever>
  ldr   r0, =_estack
 8008048:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800804c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008050:	20001e08 	.word	0x20001e08
  ldr r2, =_sidata
 8008054:	080147e8 	.word	0x080147e8
  ldr r2, =_sbss
 8008058:	20001e08 	.word	0x20001e08
  ldr r4, =_ebss
 800805c:	2000292c 	.word	0x2000292c

08008060 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008060:	e7fe      	b.n	8008060 <ADC1_2_IRQHandler>

08008062 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b082      	sub	sp, #8
 8008066:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008068:	2300      	movs	r3, #0
 800806a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800806c:	2003      	movs	r0, #3
 800806e:	f001 fcbd 	bl	80099ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008072:	2000      	movs	r0, #0
 8008074:	f000 f80e 	bl	8008094 <HAL_InitTick>
 8008078:	4603      	mov	r3, r0
 800807a:	2b00      	cmp	r3, #0
 800807c:	d002      	beq.n	8008084 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	71fb      	strb	r3, [r7, #7]
 8008082:	e001      	b.n	8008088 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008084:	f7ff fa58 	bl	8007538 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008088:	79fb      	ldrb	r3, [r7, #7]

}
 800808a:	4618      	mov	r0, r3
 800808c:	3708      	adds	r7, #8
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
	...

08008094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800809c:	2300      	movs	r3, #0
 800809e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80080a0:	4b16      	ldr	r3, [pc, #88]	; (80080fc <HAL_InitTick+0x68>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d022      	beq.n	80080ee <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80080a8:	4b15      	ldr	r3, [pc, #84]	; (8008100 <HAL_InitTick+0x6c>)
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	4b13      	ldr	r3, [pc, #76]	; (80080fc <HAL_InitTick+0x68>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80080b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80080b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80080bc:	4618      	mov	r0, r3
 80080be:	f001 fcd6 	bl	8009a6e <HAL_SYSTICK_Config>
 80080c2:	4603      	mov	r3, r0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d10f      	bne.n	80080e8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2b0f      	cmp	r3, #15
 80080cc:	d809      	bhi.n	80080e2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80080ce:	2200      	movs	r2, #0
 80080d0:	6879      	ldr	r1, [r7, #4]
 80080d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080d6:	f001 fc94 	bl	8009a02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80080da:	4a0a      	ldr	r2, [pc, #40]	; (8008104 <HAL_InitTick+0x70>)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6013      	str	r3, [r2, #0]
 80080e0:	e007      	b.n	80080f2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	73fb      	strb	r3, [r7, #15]
 80080e6:	e004      	b.n	80080f2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80080e8:	2301      	movs	r3, #1
 80080ea:	73fb      	strb	r3, [r7, #15]
 80080ec:	e001      	b.n	80080f2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80080f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3710      	adds	r7, #16
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	20000c38 	.word	0x20000c38
 8008100:	20000c30 	.word	0x20000c30
 8008104:	20000c34 	.word	0x20000c34

08008108 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008108:	b480      	push	{r7}
 800810a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800810c:	4b05      	ldr	r3, [pc, #20]	; (8008124 <HAL_IncTick+0x1c>)
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	4b05      	ldr	r3, [pc, #20]	; (8008128 <HAL_IncTick+0x20>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4413      	add	r3, r2
 8008116:	4a03      	ldr	r2, [pc, #12]	; (8008124 <HAL_IncTick+0x1c>)
 8008118:	6013      	str	r3, [r2, #0]
}
 800811a:	bf00      	nop
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr
 8008124:	20002924 	.word	0x20002924
 8008128:	20000c38 	.word	0x20000c38

0800812c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800812c:	b480      	push	{r7}
 800812e:	af00      	add	r7, sp, #0
  return uwTick;
 8008130:	4b03      	ldr	r3, [pc, #12]	; (8008140 <HAL_GetTick+0x14>)
 8008132:	681b      	ldr	r3, [r3, #0]
}
 8008134:	4618      	mov	r0, r3
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr
 800813e:	bf00      	nop
 8008140:	20002924 	.word	0x20002924

08008144 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800814c:	f7ff ffee 	bl	800812c <HAL_GetTick>
 8008150:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800815c:	d004      	beq.n	8008168 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800815e:	4b09      	ldr	r3, [pc, #36]	; (8008184 <HAL_Delay+0x40>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	68fa      	ldr	r2, [r7, #12]
 8008164:	4413      	add	r3, r2
 8008166:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008168:	bf00      	nop
 800816a:	f7ff ffdf 	bl	800812c <HAL_GetTick>
 800816e:	4602      	mov	r2, r0
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	1ad3      	subs	r3, r2, r3
 8008174:	68fa      	ldr	r2, [r7, #12]
 8008176:	429a      	cmp	r2, r3
 8008178:	d8f7      	bhi.n	800816a <HAL_Delay+0x26>
  {
  }
}
 800817a:	bf00      	nop
 800817c:	3710      	adds	r7, #16
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	20000c38 	.word	0x20000c38

08008188 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	431a      	orrs	r2, r3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	609a      	str	r2, [r3, #8]
}
 80081a2:	bf00      	nop
 80081a4:	370c      	adds	r7, #12
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr

080081ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80081ae:	b480      	push	{r7}
 80081b0:	b083      	sub	sp, #12
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
 80081b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	431a      	orrs	r2, r3
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	609a      	str	r2, [r3, #8]
}
 80081c8:	bf00      	nop
 80081ca:	370c      	adds	r7, #12
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	370c      	adds	r7, #12
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80081f0:	b490      	push	{r4, r7}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	607a      	str	r2, [r7, #4]
 80081fc:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	3360      	adds	r3, #96	; 0x60
 8008202:	461a      	mov	r2, r3
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	4413      	add	r3, r2
 800820a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800820c:	6822      	ldr	r2, [r4, #0]
 800820e:	4b08      	ldr	r3, [pc, #32]	; (8008230 <LL_ADC_SetOffset+0x40>)
 8008210:	4013      	ands	r3, r2
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8008218:	683a      	ldr	r2, [r7, #0]
 800821a:	430a      	orrs	r2, r1
 800821c:	4313      	orrs	r3, r2
 800821e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008222:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8008224:	bf00      	nop
 8008226:	3710      	adds	r7, #16
 8008228:	46bd      	mov	sp, r7
 800822a:	bc90      	pop	{r4, r7}
 800822c:	4770      	bx	lr
 800822e:	bf00      	nop
 8008230:	03fff000 	.word	0x03fff000

08008234 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8008234:	b490      	push	{r4, r7}
 8008236:	b082      	sub	sp, #8
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	3360      	adds	r3, #96	; 0x60
 8008242:	461a      	mov	r2, r3
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	4413      	add	r3, r2
 800824a:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800824c:	6823      	ldr	r3, [r4, #0]
 800824e:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8008252:	4618      	mov	r0, r3
 8008254:	3708      	adds	r7, #8
 8008256:	46bd      	mov	sp, r7
 8008258:	bc90      	pop	{r4, r7}
 800825a:	4770      	bx	lr

0800825c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800825c:	b490      	push	{r4, r7}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	60f8      	str	r0, [r7, #12]
 8008264:	60b9      	str	r1, [r7, #8]
 8008266:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	3360      	adds	r3, #96	; 0x60
 800826c:	461a      	mov	r2, r3
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	4413      	add	r3, r2
 8008274:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008276:	6823      	ldr	r3, [r4, #0]
 8008278:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	4313      	orrs	r3, r2
 8008280:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8008282:	bf00      	nop
 8008284:	3710      	adds	r7, #16
 8008286:	46bd      	mov	sp, r7
 8008288:	bc90      	pop	{r4, r7}
 800828a:	4770      	bx	lr

0800828c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800828c:	b490      	push	{r4, r7}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	3360      	adds	r3, #96	; 0x60
 800829c:	461a      	mov	r2, r3
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	4413      	add	r3, r2
 80082a4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80082a6:	6823      	ldr	r3, [r4, #0]
 80082a8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4313      	orrs	r3, r2
 80082b0:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80082b2:	bf00      	nop
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bc90      	pop	{r4, r7}
 80082ba:	4770      	bx	lr

080082bc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80082bc:	b490      	push	{r4, r7}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	3360      	adds	r3, #96	; 0x60
 80082cc:	461a      	mov	r2, r3
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	4413      	add	r3, r2
 80082d4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80082d6:	6823      	ldr	r3, [r4, #0]
 80082d8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	4313      	orrs	r3, r2
 80082e0:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80082e2:	bf00      	nop
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bc90      	pop	{r4, r7}
 80082ea:	4770      	bx	lr

080082ec <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	695b      	ldr	r3, [r3, #20]
 80082fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	431a      	orrs	r2, r3
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	615a      	str	r2, [r3, #20]
}
 8008306:	bf00      	nop
 8008308:	370c      	adds	r7, #12
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr

08008312 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8008312:	b490      	push	{r4, r7}
 8008314:	b084      	sub	sp, #16
 8008316:	af00      	add	r7, sp, #0
 8008318:	60f8      	str	r0, [r7, #12]
 800831a:	60b9      	str	r1, [r7, #8]
 800831c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	3330      	adds	r3, #48	; 0x30
 8008322:	461a      	mov	r2, r3
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	0a1b      	lsrs	r3, r3, #8
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	f003 030c 	and.w	r3, r3, #12
 800832e:	4413      	add	r3, r2
 8008330:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008332:	6822      	ldr	r2, [r4, #0]
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	f003 031f 	and.w	r3, r3, #31
 800833a:	211f      	movs	r1, #31
 800833c:	fa01 f303 	lsl.w	r3, r1, r3
 8008340:	43db      	mvns	r3, r3
 8008342:	401a      	ands	r2, r3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	0e9b      	lsrs	r3, r3, #26
 8008348:	f003 011f 	and.w	r1, r3, #31
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	f003 031f 	and.w	r3, r3, #31
 8008352:	fa01 f303 	lsl.w	r3, r1, r3
 8008356:	4313      	orrs	r3, r2
 8008358:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800835a:	bf00      	nop
 800835c:	3710      	adds	r7, #16
 800835e:	46bd      	mov	sp, r7
 8008360:	bc90      	pop	{r4, r7}
 8008362:	4770      	bx	lr

08008364 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8008364:	b490      	push	{r4, r7}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	3314      	adds	r3, #20
 8008374:	461a      	mov	r2, r3
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	0e5b      	lsrs	r3, r3, #25
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	f003 0304 	and.w	r3, r3, #4
 8008380:	4413      	add	r3, r2
 8008382:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008384:	6822      	ldr	r2, [r4, #0]
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	0d1b      	lsrs	r3, r3, #20
 800838a:	f003 031f 	and.w	r3, r3, #31
 800838e:	2107      	movs	r1, #7
 8008390:	fa01 f303 	lsl.w	r3, r1, r3
 8008394:	43db      	mvns	r3, r3
 8008396:	401a      	ands	r2, r3
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	0d1b      	lsrs	r3, r3, #20
 800839c:	f003 031f 	and.w	r3, r3, #31
 80083a0:	6879      	ldr	r1, [r7, #4]
 80083a2:	fa01 f303 	lsl.w	r3, r1, r3
 80083a6:	4313      	orrs	r3, r2
 80083a8:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80083aa:	bf00      	nop
 80083ac:	3710      	adds	r7, #16
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bc90      	pop	{r4, r7}
 80083b2:	4770      	bx	lr

080083b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b085      	sub	sp, #20
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083cc:	43db      	mvns	r3, r3
 80083ce:	401a      	ands	r2, r3
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f003 0318 	and.w	r3, r3, #24
 80083d6:	4908      	ldr	r1, [pc, #32]	; (80083f8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80083d8:	40d9      	lsrs	r1, r3
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	400b      	ands	r3, r1
 80083de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083e2:	431a      	orrs	r2, r3
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80083ea:	bf00      	nop
 80083ec:	3714      	adds	r7, #20
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop
 80083f8:	0007ffff 	.word	0x0007ffff

080083fc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b083      	sub	sp, #12
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800840c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	6093      	str	r3, [r2, #8]
}
 8008414:	bf00      	nop
 8008416:	370c      	adds	r7, #12
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008430:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008434:	d101      	bne.n	800843a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8008436:	2301      	movs	r3, #1
 8008438:	e000      	b.n	800843c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800843a:	2300      	movs	r3, #0
}
 800843c:	4618      	mov	r0, r3
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8008458:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800845c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8008464:	bf00      	nop
 8008466:	370c      	adds	r7, #12
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr

08008470 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8008470:	b480      	push	{r7}
 8008472:	b083      	sub	sp, #12
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008480:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008484:	d101      	bne.n	800848a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8008486:	2301      	movs	r3, #1
 8008488:	e000      	b.n	800848c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800848a:	2300      	movs	r3, #0
}
 800848c:	4618      	mov	r0, r3
 800848e:	370c      	adds	r7, #12
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr

08008498 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8008498:	b480      	push	{r7}
 800849a:	b083      	sub	sp, #12
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	f003 0301 	and.w	r3, r3, #1
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d101      	bne.n	80084b0 <LL_ADC_IsEnabled+0x18>
 80084ac:	2301      	movs	r3, #1
 80084ae:	e000      	b.n	80084b2 <LL_ADC_IsEnabled+0x1a>
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	370c      	adds	r7, #12
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr

080084be <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80084be:	b480      	push	{r7}
 80084c0:	b083      	sub	sp, #12
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	f003 0304 	and.w	r3, r3, #4
 80084ce:	2b04      	cmp	r3, #4
 80084d0:	d101      	bne.n	80084d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80084d2:	2301      	movs	r3, #1
 80084d4:	e000      	b.n	80084d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	370c      	adds	r7, #12
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	f003 0308 	and.w	r3, r3, #8
 80084f4:	2b08      	cmp	r3, #8
 80084f6:	d101      	bne.n	80084fc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80084f8:	2301      	movs	r3, #1
 80084fa:	e000      	b.n	80084fe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80084fc:	2300      	movs	r3, #0
}
 80084fe:	4618      	mov	r0, r3
 8008500:	370c      	adds	r7, #12
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr
	...

0800850c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800850c:	b590      	push	{r4, r7, lr}
 800850e:	b089      	sub	sp, #36	; 0x24
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008514:	2300      	movs	r3, #0
 8008516:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8008518:	2300      	movs	r3, #0
 800851a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d101      	bne.n	8008526 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	e1ad      	b.n	8008882 <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	695b      	ldr	r3, [r3, #20]
 800852a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008530:	2b00      	cmp	r3, #0
 8008532:	d109      	bne.n	8008548 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f7fe f8c1 	bl	80066bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4618      	mov	r0, r3
 800854e:	f7ff ff67 	bl	8008420 <LL_ADC_IsDeepPowerDownEnabled>
 8008552:	4603      	mov	r3, r0
 8008554:	2b00      	cmp	r3, #0
 8008556:	d004      	beq.n	8008562 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4618      	mov	r0, r3
 800855e:	f7ff ff4d 	bl	80083fc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4618      	mov	r0, r3
 8008568:	f7ff ff82 	bl	8008470 <LL_ADC_IsInternalRegulatorEnabled>
 800856c:	4603      	mov	r3, r0
 800856e:	2b00      	cmp	r3, #0
 8008570:	d113      	bne.n	800859a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4618      	mov	r0, r3
 8008578:	f7ff ff66 	bl	8008448 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800857c:	4b9e      	ldr	r3, [pc, #632]	; (80087f8 <HAL_ADC_Init+0x2ec>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	099b      	lsrs	r3, r3, #6
 8008582:	4a9e      	ldr	r2, [pc, #632]	; (80087fc <HAL_ADC_Init+0x2f0>)
 8008584:	fba2 2303 	umull	r2, r3, r2, r3
 8008588:	099b      	lsrs	r3, r3, #6
 800858a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800858c:	e002      	b.n	8008594 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	3b01      	subs	r3, #1
 8008592:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d1f9      	bne.n	800858e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4618      	mov	r0, r3
 80085a0:	f7ff ff66 	bl	8008470 <LL_ADC_IsInternalRegulatorEnabled>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d10d      	bne.n	80085c6 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085ae:	f043 0210 	orr.w	r2, r3, #16
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085ba:	f043 0201 	orr.w	r2, r3, #1
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7ff ff77 	bl	80084be <LL_ADC_REG_IsConversionOngoing>
 80085d0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085d6:	f003 0310 	and.w	r3, r3, #16
 80085da:	2b00      	cmp	r3, #0
 80085dc:	f040 8148 	bne.w	8008870 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	f040 8144 	bne.w	8008870 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085ec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80085f0:	f043 0202 	orr.w	r2, r3, #2
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4618      	mov	r0, r3
 80085fe:	f7ff ff4b 	bl	8008498 <LL_ADC_IsEnabled>
 8008602:	4603      	mov	r3, r0
 8008604:	2b00      	cmp	r3, #0
 8008606:	d141      	bne.n	800868c <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008610:	d004      	beq.n	800861c <HAL_ADC_Init+0x110>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a7a      	ldr	r2, [pc, #488]	; (8008800 <HAL_ADC_Init+0x2f4>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d10f      	bne.n	800863c <HAL_ADC_Init+0x130>
 800861c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008620:	f7ff ff3a 	bl	8008498 <LL_ADC_IsEnabled>
 8008624:	4604      	mov	r4, r0
 8008626:	4876      	ldr	r0, [pc, #472]	; (8008800 <HAL_ADC_Init+0x2f4>)
 8008628:	f7ff ff36 	bl	8008498 <LL_ADC_IsEnabled>
 800862c:	4603      	mov	r3, r0
 800862e:	4323      	orrs	r3, r4
 8008630:	2b00      	cmp	r3, #0
 8008632:	bf0c      	ite	eq
 8008634:	2301      	moveq	r3, #1
 8008636:	2300      	movne	r3, #0
 8008638:	b2db      	uxtb	r3, r3
 800863a:	e012      	b.n	8008662 <HAL_ADC_Init+0x156>
 800863c:	4871      	ldr	r0, [pc, #452]	; (8008804 <HAL_ADC_Init+0x2f8>)
 800863e:	f7ff ff2b 	bl	8008498 <LL_ADC_IsEnabled>
 8008642:	4604      	mov	r4, r0
 8008644:	4870      	ldr	r0, [pc, #448]	; (8008808 <HAL_ADC_Init+0x2fc>)
 8008646:	f7ff ff27 	bl	8008498 <LL_ADC_IsEnabled>
 800864a:	4603      	mov	r3, r0
 800864c:	431c      	orrs	r4, r3
 800864e:	486f      	ldr	r0, [pc, #444]	; (800880c <HAL_ADC_Init+0x300>)
 8008650:	f7ff ff22 	bl	8008498 <LL_ADC_IsEnabled>
 8008654:	4603      	mov	r3, r0
 8008656:	4323      	orrs	r3, r4
 8008658:	2b00      	cmp	r3, #0
 800865a:	bf0c      	ite	eq
 800865c:	2301      	moveq	r3, #1
 800865e:	2300      	movne	r3, #0
 8008660:	b2db      	uxtb	r3, r3
 8008662:	2b00      	cmp	r3, #0
 8008664:	d012      	beq.n	800868c <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800866e:	d004      	beq.n	800867a <HAL_ADC_Init+0x16e>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a62      	ldr	r2, [pc, #392]	; (8008800 <HAL_ADC_Init+0x2f4>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d101      	bne.n	800867e <HAL_ADC_Init+0x172>
 800867a:	4a65      	ldr	r2, [pc, #404]	; (8008810 <HAL_ADC_Init+0x304>)
 800867c:	e000      	b.n	8008680 <HAL_ADC_Init+0x174>
 800867e:	4a65      	ldr	r2, [pc, #404]	; (8008814 <HAL_ADC_Init+0x308>)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	4619      	mov	r1, r3
 8008686:	4610      	mov	r0, r2
 8008688:	f7ff fd7e 	bl	8008188 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	7f5b      	ldrb	r3, [r3, #29]
 8008690:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008696:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800869c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80086a2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80086aa:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80086ac:	4313      	orrs	r3, r2
 80086ae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d106      	bne.n	80086c8 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086be:	3b01      	subs	r3, #1
 80086c0:	045b      	lsls	r3, r3, #17
 80086c2:	69ba      	ldr	r2, [r7, #24]
 80086c4:	4313      	orrs	r3, r2
 80086c6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d009      	beq.n	80086e4 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086dc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80086de:	69ba      	ldr	r2, [r7, #24]
 80086e0:	4313      	orrs	r3, r2
 80086e2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	68da      	ldr	r2, [r3, #12]
 80086ea:	4b4b      	ldr	r3, [pc, #300]	; (8008818 <HAL_ADC_Init+0x30c>)
 80086ec:	4013      	ands	r3, r2
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	6812      	ldr	r2, [r2, #0]
 80086f2:	69b9      	ldr	r1, [r7, #24]
 80086f4:	430b      	orrs	r3, r1
 80086f6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	430a      	orrs	r2, r1
 800870c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4618      	mov	r0, r3
 8008714:	f7ff fed3 	bl	80084be <LL_ADC_REG_IsConversionOngoing>
 8008718:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4618      	mov	r0, r3
 8008720:	f7ff fee0 	bl	80084e4 <LL_ADC_INJ_IsConversionOngoing>
 8008724:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d17f      	bne.n	800882c <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d17c      	bne.n	800882c <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008736:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800873e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008740:	4313      	orrs	r3, r2
 8008742:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	68db      	ldr	r3, [r3, #12]
 800874a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800874e:	f023 0302 	bic.w	r3, r3, #2
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	6812      	ldr	r2, [r2, #0]
 8008756:	69b9      	ldr	r1, [r7, #24]
 8008758:	430b      	orrs	r3, r1
 800875a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	691b      	ldr	r3, [r3, #16]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d017      	beq.n	8008794 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	691a      	ldr	r2, [r3, #16]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008772:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800877c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008780:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	6911      	ldr	r1, [r2, #16]
 8008788:	687a      	ldr	r2, [r7, #4]
 800878a:	6812      	ldr	r2, [r2, #0]
 800878c:	430b      	orrs	r3, r1
 800878e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8008792:	e013      	b.n	80087bc <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	691a      	ldr	r2, [r3, #16]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80087a2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	6812      	ldr	r2, [r2, #0]
 80087b0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80087b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80087b8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d12a      	bne.n	800881c <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	691b      	ldr	r3, [r3, #16]
 80087cc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80087d0:	f023 0304 	bic.w	r3, r3, #4
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80087dc:	4311      	orrs	r1, r2
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80087e2:	4311      	orrs	r1, r2
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80087e8:	430a      	orrs	r2, r1
 80087ea:	431a      	orrs	r2, r3
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f042 0201 	orr.w	r2, r2, #1
 80087f4:	611a      	str	r2, [r3, #16]
 80087f6:	e019      	b.n	800882c <HAL_ADC_Init+0x320>
 80087f8:	20000c30 	.word	0x20000c30
 80087fc:	053e2d63 	.word	0x053e2d63
 8008800:	50000100 	.word	0x50000100
 8008804:	50000400 	.word	0x50000400
 8008808:	50000500 	.word	0x50000500
 800880c:	50000600 	.word	0x50000600
 8008810:	50000300 	.word	0x50000300
 8008814:	50000700 	.word	0x50000700
 8008818:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	691a      	ldr	r2, [r3, #16]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f022 0201 	bic.w	r2, r2, #1
 800882a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	695b      	ldr	r3, [r3, #20]
 8008830:	2b01      	cmp	r3, #1
 8008832:	d10c      	bne.n	800884e <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800883a:	f023 010f 	bic.w	r1, r3, #15
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6a1b      	ldr	r3, [r3, #32]
 8008842:	1e5a      	subs	r2, r3, #1
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	430a      	orrs	r2, r1
 800884a:	631a      	str	r2, [r3, #48]	; 0x30
 800884c:	e007      	b.n	800885e <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f022 020f 	bic.w	r2, r2, #15
 800885c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008862:	f023 0303 	bic.w	r3, r3, #3
 8008866:	f043 0201 	orr.w	r2, r3, #1
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	65da      	str	r2, [r3, #92]	; 0x5c
 800886e:	e007      	b.n	8008880 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008874:	f043 0210 	orr.w	r2, r3, #16
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800887c:	2301      	movs	r3, #1
 800887e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8008880:	7ffb      	ldrb	r3, [r7, #31]
}
 8008882:	4618      	mov	r0, r3
 8008884:	3724      	adds	r7, #36	; 0x24
 8008886:	46bd      	mov	sp, r7
 8008888:	bd90      	pop	{r4, r7, pc}
 800888a:	bf00      	nop

0800888c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b0a6      	sub	sp, #152	; 0x98
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008896:	2300      	movs	r3, #0
 8008898:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800889c:	2300      	movs	r3, #0
 800889e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d101      	bne.n	80088ae <HAL_ADC_ConfigChannel+0x22>
 80088aa:	2302      	movs	r3, #2
 80088ac:	e38e      	b.n	8008fcc <HAL_ADC_ConfigChannel+0x740>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2201      	movs	r2, #1
 80088b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4618      	mov	r0, r3
 80088bc:	f7ff fdff 	bl	80084be <LL_ADC_REG_IsConversionOngoing>
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	f040 836f 	bne.w	8008fa6 <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6818      	ldr	r0, [r3, #0]
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	6859      	ldr	r1, [r3, #4]
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	461a      	mov	r2, r3
 80088d6:	f7ff fd1c 	bl	8008312 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4618      	mov	r0, r3
 80088e0:	f7ff fded 	bl	80084be <LL_ADC_REG_IsConversionOngoing>
 80088e4:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4618      	mov	r0, r3
 80088ee:	f7ff fdf9 	bl	80084e4 <LL_ADC_INJ_IsConversionOngoing>
 80088f2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80088f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	f040 817b 	bne.w	8008bf6 <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008900:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008904:	2b00      	cmp	r3, #0
 8008906:	f040 8176 	bne.w	8008bf6 <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008912:	d10f      	bne.n	8008934 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6818      	ldr	r0, [r3, #0]
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	2200      	movs	r2, #0
 800891e:	4619      	mov	r1, r3
 8008920:	f7ff fd20 	bl	8008364 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800892c:	4618      	mov	r0, r3
 800892e:	f7ff fcdd 	bl	80082ec <LL_ADC_SetSamplingTimeCommonConfig>
 8008932:	e00e      	b.n	8008952 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6818      	ldr	r0, [r3, #0]
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	6819      	ldr	r1, [r3, #0]
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	461a      	mov	r2, r3
 8008942:	f7ff fd0f 	bl	8008364 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	2100      	movs	r1, #0
 800894c:	4618      	mov	r0, r3
 800894e:	f7ff fccd 	bl	80082ec <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	695a      	ldr	r2, [r3, #20]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	68db      	ldr	r3, [r3, #12]
 800895c:	08db      	lsrs	r3, r3, #3
 800895e:	f003 0303 	and.w	r3, r3, #3
 8008962:	005b      	lsls	r3, r3, #1
 8008964:	fa02 f303 	lsl.w	r3, r2, r3
 8008968:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	691b      	ldr	r3, [r3, #16]
 8008970:	2b04      	cmp	r3, #4
 8008972:	d022      	beq.n	80089ba <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6818      	ldr	r0, [r3, #0]
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	6919      	ldr	r1, [r3, #16]
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008984:	f7ff fc34 	bl	80081f0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6818      	ldr	r0, [r3, #0]
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	6919      	ldr	r1, [r3, #16]
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	699b      	ldr	r3, [r3, #24]
 8008994:	461a      	mov	r2, r3
 8008996:	f7ff fc79 	bl	800828c <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6818      	ldr	r0, [r3, #0]
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	6919      	ldr	r1, [r3, #16]
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	7f1b      	ldrb	r3, [r3, #28]
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d102      	bne.n	80089b0 <HAL_ADC_ConfigChannel+0x124>
 80089aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80089ae:	e000      	b.n	80089b2 <HAL_ADC_ConfigChannel+0x126>
 80089b0:	2300      	movs	r3, #0
 80089b2:	461a      	mov	r2, r3
 80089b4:	f7ff fc82 	bl	80082bc <LL_ADC_SetOffsetSaturation>
 80089b8:	e11d      	b.n	8008bf6 <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	2100      	movs	r1, #0
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7ff fc37 	bl	8008234 <LL_ADC_GetOffsetChannel>
 80089c6:	4603      	mov	r3, r0
 80089c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d10a      	bne.n	80089e6 <HAL_ADC_ConfigChannel+0x15a>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2100      	movs	r1, #0
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7ff fc2c 	bl	8008234 <LL_ADC_GetOffsetChannel>
 80089dc:	4603      	mov	r3, r0
 80089de:	0e9b      	lsrs	r3, r3, #26
 80089e0:	f003 021f 	and.w	r2, r3, #31
 80089e4:	e012      	b.n	8008a0c <HAL_ADC_ConfigChannel+0x180>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	2100      	movs	r1, #0
 80089ec:	4618      	mov	r0, r3
 80089ee:	f7ff fc21 	bl	8008234 <LL_ADC_GetOffsetChannel>
 80089f2:	4603      	mov	r3, r0
 80089f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80089fc:	fa93 f3a3 	rbit	r3, r3
 8008a00:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8008a02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008a04:	fab3 f383 	clz	r3, r3
 8008a08:	b2db      	uxtb	r3, r3
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d105      	bne.n	8008a24 <HAL_ADC_ConfigChannel+0x198>
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	0e9b      	lsrs	r3, r3, #26
 8008a1e:	f003 031f 	and.w	r3, r3, #31
 8008a22:	e00a      	b.n	8008a3a <HAL_ADC_ConfigChannel+0x1ae>
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a2c:	fa93 f3a3 	rbit	r3, r3
 8008a30:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8008a32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a34:	fab3 f383 	clz	r3, r3
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d106      	bne.n	8008a4c <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	2200      	movs	r2, #0
 8008a44:	2100      	movs	r1, #0
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7ff fc08 	bl	800825c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	2101      	movs	r1, #1
 8008a52:	4618      	mov	r0, r3
 8008a54:	f7ff fbee 	bl	8008234 <LL_ADC_GetOffsetChannel>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d10a      	bne.n	8008a78 <HAL_ADC_ConfigChannel+0x1ec>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	2101      	movs	r1, #1
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f7ff fbe3 	bl	8008234 <LL_ADC_GetOffsetChannel>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	0e9b      	lsrs	r3, r3, #26
 8008a72:	f003 021f 	and.w	r2, r3, #31
 8008a76:	e010      	b.n	8008a9a <HAL_ADC_ConfigChannel+0x20e>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2101      	movs	r1, #1
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7ff fbd8 	bl	8008234 <LL_ADC_GetOffsetChannel>
 8008a84:	4603      	mov	r3, r0
 8008a86:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a8a:	fa93 f3a3 	rbit	r3, r3
 8008a8e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8008a90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a92:	fab3 f383 	clz	r3, r3
 8008a96:	b2db      	uxtb	r3, r3
 8008a98:	461a      	mov	r2, r3
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d105      	bne.n	8008ab2 <HAL_ADC_ConfigChannel+0x226>
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	0e9b      	lsrs	r3, r3, #26
 8008aac:	f003 031f 	and.w	r3, r3, #31
 8008ab0:	e00a      	b.n	8008ac8 <HAL_ADC_ConfigChannel+0x23c>
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ab8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008aba:	fa93 f3a3 	rbit	r3, r3
 8008abe:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8008ac0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ac2:	fab3 f383 	clz	r3, r3
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d106      	bne.n	8008ada <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	2101      	movs	r1, #1
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f7ff fbc1 	bl	800825c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	2102      	movs	r1, #2
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f7ff fba7 	bl	8008234 <LL_ADC_GetOffsetChannel>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d10a      	bne.n	8008b06 <HAL_ADC_ConfigChannel+0x27a>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	2102      	movs	r1, #2
 8008af6:	4618      	mov	r0, r3
 8008af8:	f7ff fb9c 	bl	8008234 <LL_ADC_GetOffsetChannel>
 8008afc:	4603      	mov	r3, r0
 8008afe:	0e9b      	lsrs	r3, r3, #26
 8008b00:	f003 021f 	and.w	r2, r3, #31
 8008b04:	e010      	b.n	8008b28 <HAL_ADC_ConfigChannel+0x29c>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	2102      	movs	r1, #2
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f7ff fb91 	bl	8008234 <LL_ADC_GetOffsetChannel>
 8008b12:	4603      	mov	r3, r0
 8008b14:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b18:	fa93 f3a3 	rbit	r3, r3
 8008b1c:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8008b1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b20:	fab3 f383 	clz	r3, r3
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	461a      	mov	r2, r3
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d105      	bne.n	8008b40 <HAL_ADC_ConfigChannel+0x2b4>
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	0e9b      	lsrs	r3, r3, #26
 8008b3a:	f003 031f 	and.w	r3, r3, #31
 8008b3e:	e00a      	b.n	8008b56 <HAL_ADC_ConfigChannel+0x2ca>
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b48:	fa93 f3a3 	rbit	r3, r3
 8008b4c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8008b4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b50:	fab3 f383 	clz	r3, r3
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d106      	bne.n	8008b68 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	2102      	movs	r1, #2
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7ff fb7a 	bl	800825c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	2103      	movs	r1, #3
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f7ff fb60 	bl	8008234 <LL_ADC_GetOffsetChannel>
 8008b74:	4603      	mov	r3, r0
 8008b76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d10a      	bne.n	8008b94 <HAL_ADC_ConfigChannel+0x308>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	2103      	movs	r1, #3
 8008b84:	4618      	mov	r0, r3
 8008b86:	f7ff fb55 	bl	8008234 <LL_ADC_GetOffsetChannel>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	0e9b      	lsrs	r3, r3, #26
 8008b8e:	f003 021f 	and.w	r2, r3, #31
 8008b92:	e010      	b.n	8008bb6 <HAL_ADC_ConfigChannel+0x32a>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	2103      	movs	r1, #3
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7ff fb4a 	bl	8008234 <LL_ADC_GetOffsetChannel>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ba4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ba6:	fa93 f3a3 	rbit	r3, r3
 8008baa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bae:	fab3 f383 	clz	r3, r3
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d105      	bne.n	8008bce <HAL_ADC_ConfigChannel+0x342>
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	0e9b      	lsrs	r3, r3, #26
 8008bc8:	f003 031f 	and.w	r3, r3, #31
 8008bcc:	e00a      	b.n	8008be4 <HAL_ADC_ConfigChannel+0x358>
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bd6:	fa93 f3a3 	rbit	r3, r3
 8008bda:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8008bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bde:	fab3 f383 	clz	r3, r3
 8008be2:	b2db      	uxtb	r3, r3
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d106      	bne.n	8008bf6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2200      	movs	r2, #0
 8008bee:	2103      	movs	r1, #3
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f7ff fb33 	bl	800825c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f7ff fc4c 	bl	8008498 <LL_ADC_IsEnabled>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	f040 810c 	bne.w	8008e20 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6818      	ldr	r0, [r3, #0]
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	6819      	ldr	r1, [r3, #0]
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	68db      	ldr	r3, [r3, #12]
 8008c14:	461a      	mov	r2, r3
 8008c16:	f7ff fbcd 	bl	80083b4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	68db      	ldr	r3, [r3, #12]
 8008c1e:	4aaf      	ldr	r2, [pc, #700]	; (8008edc <HAL_ADC_ConfigChannel+0x650>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	f040 80fd 	bne.w	8008e20 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d10b      	bne.n	8008c4e <HAL_ADC_ConfigChannel+0x3c2>
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	0e9b      	lsrs	r3, r3, #26
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	f003 031f 	and.w	r3, r3, #31
 8008c42:	2b09      	cmp	r3, #9
 8008c44:	bf94      	ite	ls
 8008c46:	2301      	movls	r3, #1
 8008c48:	2300      	movhi	r3, #0
 8008c4a:	b2db      	uxtb	r3, r3
 8008c4c:	e012      	b.n	8008c74 <HAL_ADC_ConfigChannel+0x3e8>
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c56:	fa93 f3a3 	rbit	r3, r3
 8008c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8008c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c5e:	fab3 f383 	clz	r3, r3
 8008c62:	b2db      	uxtb	r3, r3
 8008c64:	3301      	adds	r3, #1
 8008c66:	f003 031f 	and.w	r3, r3, #31
 8008c6a:	2b09      	cmp	r3, #9
 8008c6c:	bf94      	ite	ls
 8008c6e:	2301      	movls	r3, #1
 8008c70:	2300      	movhi	r3, #0
 8008c72:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d064      	beq.n	8008d42 <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d107      	bne.n	8008c94 <HAL_ADC_ConfigChannel+0x408>
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	0e9b      	lsrs	r3, r3, #26
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	069b      	lsls	r3, r3, #26
 8008c8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008c92:	e00e      	b.n	8008cb2 <HAL_ADC_ConfigChannel+0x426>
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c9c:	fa93 f3a3 	rbit	r3, r3
 8008ca0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ca4:	fab3 f383 	clz	r3, r3
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	3301      	adds	r3, #1
 8008cac:	069b      	lsls	r3, r3, #26
 8008cae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d109      	bne.n	8008cd2 <HAL_ADC_ConfigChannel+0x446>
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	0e9b      	lsrs	r3, r3, #26
 8008cc4:	3301      	adds	r3, #1
 8008cc6:	f003 031f 	and.w	r3, r3, #31
 8008cca:	2101      	movs	r1, #1
 8008ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8008cd0:	e010      	b.n	8008cf4 <HAL_ADC_ConfigChannel+0x468>
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cda:	fa93 f3a3 	rbit	r3, r3
 8008cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ce2:	fab3 f383 	clz	r3, r3
 8008ce6:	b2db      	uxtb	r3, r3
 8008ce8:	3301      	adds	r3, #1
 8008cea:	f003 031f 	and.w	r3, r3, #31
 8008cee:	2101      	movs	r1, #1
 8008cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8008cf4:	ea42 0103 	orr.w	r1, r2, r3
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d10a      	bne.n	8008d1a <HAL_ADC_ConfigChannel+0x48e>
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	0e9b      	lsrs	r3, r3, #26
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	f003 021f 	and.w	r2, r3, #31
 8008d10:	4613      	mov	r3, r2
 8008d12:	005b      	lsls	r3, r3, #1
 8008d14:	4413      	add	r3, r2
 8008d16:	051b      	lsls	r3, r3, #20
 8008d18:	e011      	b.n	8008d3e <HAL_ADC_ConfigChannel+0x4b2>
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d22:	fa93 f3a3 	rbit	r3, r3
 8008d26:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8008d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2a:	fab3 f383 	clz	r3, r3
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	3301      	adds	r3, #1
 8008d32:	f003 021f 	and.w	r2, r3, #31
 8008d36:	4613      	mov	r3, r2
 8008d38:	005b      	lsls	r3, r3, #1
 8008d3a:	4413      	add	r3, r2
 8008d3c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008d3e:	430b      	orrs	r3, r1
 8008d40:	e069      	b.n	8008e16 <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d107      	bne.n	8008d5e <HAL_ADC_ConfigChannel+0x4d2>
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	0e9b      	lsrs	r3, r3, #26
 8008d54:	3301      	adds	r3, #1
 8008d56:	069b      	lsls	r3, r3, #26
 8008d58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008d5c:	e00e      	b.n	8008d7c <HAL_ADC_ConfigChannel+0x4f0>
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d64:	6a3b      	ldr	r3, [r7, #32]
 8008d66:	fa93 f3a3 	rbit	r3, r3
 8008d6a:	61fb      	str	r3, [r7, #28]
  return result;
 8008d6c:	69fb      	ldr	r3, [r7, #28]
 8008d6e:	fab3 f383 	clz	r3, r3
 8008d72:	b2db      	uxtb	r3, r3
 8008d74:	3301      	adds	r3, #1
 8008d76:	069b      	lsls	r3, r3, #26
 8008d78:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d109      	bne.n	8008d9c <HAL_ADC_ConfigChannel+0x510>
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	0e9b      	lsrs	r3, r3, #26
 8008d8e:	3301      	adds	r3, #1
 8008d90:	f003 031f 	and.w	r3, r3, #31
 8008d94:	2101      	movs	r1, #1
 8008d96:	fa01 f303 	lsl.w	r3, r1, r3
 8008d9a:	e010      	b.n	8008dbe <HAL_ADC_ConfigChannel+0x532>
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008da2:	69bb      	ldr	r3, [r7, #24]
 8008da4:	fa93 f3a3 	rbit	r3, r3
 8008da8:	617b      	str	r3, [r7, #20]
  return result;
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	fab3 f383 	clz	r3, r3
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	3301      	adds	r3, #1
 8008db4:	f003 031f 	and.w	r3, r3, #31
 8008db8:	2101      	movs	r1, #1
 8008dba:	fa01 f303 	lsl.w	r3, r1, r3
 8008dbe:	ea42 0103 	orr.w	r1, r2, r3
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d10d      	bne.n	8008dea <HAL_ADC_ConfigChannel+0x55e>
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	0e9b      	lsrs	r3, r3, #26
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	f003 021f 	and.w	r2, r3, #31
 8008dda:	4613      	mov	r3, r2
 8008ddc:	005b      	lsls	r3, r3, #1
 8008dde:	4413      	add	r3, r2
 8008de0:	3b1e      	subs	r3, #30
 8008de2:	051b      	lsls	r3, r3, #20
 8008de4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008de8:	e014      	b.n	8008e14 <HAL_ADC_ConfigChannel+0x588>
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	fa93 f3a3 	rbit	r3, r3
 8008df6:	60fb      	str	r3, [r7, #12]
  return result;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	fab3 f383 	clz	r3, r3
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	3301      	adds	r3, #1
 8008e02:	f003 021f 	and.w	r2, r3, #31
 8008e06:	4613      	mov	r3, r2
 8008e08:	005b      	lsls	r3, r3, #1
 8008e0a:	4413      	add	r3, r2
 8008e0c:	3b1e      	subs	r3, #30
 8008e0e:	051b      	lsls	r3, r3, #20
 8008e10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008e14:	430b      	orrs	r3, r1
 8008e16:	683a      	ldr	r2, [r7, #0]
 8008e18:	6892      	ldr	r2, [r2, #8]
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	f7ff faa2 	bl	8008364 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	681a      	ldr	r2, [r3, #0]
 8008e24:	4b2e      	ldr	r3, [pc, #184]	; (8008ee0 <HAL_ADC_ConfigChannel+0x654>)
 8008e26:	4013      	ands	r3, r2
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	f000 80c9 	beq.w	8008fc0 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e36:	d004      	beq.n	8008e42 <HAL_ADC_ConfigChannel+0x5b6>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a29      	ldr	r2, [pc, #164]	; (8008ee4 <HAL_ADC_ConfigChannel+0x658>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d101      	bne.n	8008e46 <HAL_ADC_ConfigChannel+0x5ba>
 8008e42:	4b29      	ldr	r3, [pc, #164]	; (8008ee8 <HAL_ADC_ConfigChannel+0x65c>)
 8008e44:	e000      	b.n	8008e48 <HAL_ADC_ConfigChannel+0x5bc>
 8008e46:	4b29      	ldr	r3, [pc, #164]	; (8008eec <HAL_ADC_ConfigChannel+0x660>)
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f7ff f9c3 	bl	80081d4 <LL_ADC_GetCommonPathInternalCh>
 8008e4e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a26      	ldr	r2, [pc, #152]	; (8008ef0 <HAL_ADC_ConfigChannel+0x664>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d004      	beq.n	8008e66 <HAL_ADC_ConfigChannel+0x5da>
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a24      	ldr	r2, [pc, #144]	; (8008ef4 <HAL_ADC_ConfigChannel+0x668>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d14e      	bne.n	8008f04 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008e66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d148      	bne.n	8008f04 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e7a:	d005      	beq.n	8008e88 <HAL_ADC_ConfigChannel+0x5fc>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a1d      	ldr	r2, [pc, #116]	; (8008ef8 <HAL_ADC_ConfigChannel+0x66c>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	f040 8099 	bne.w	8008fba <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e90:	d004      	beq.n	8008e9c <HAL_ADC_ConfigChannel+0x610>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a13      	ldr	r2, [pc, #76]	; (8008ee4 <HAL_ADC_ConfigChannel+0x658>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d101      	bne.n	8008ea0 <HAL_ADC_ConfigChannel+0x614>
 8008e9c:	4a12      	ldr	r2, [pc, #72]	; (8008ee8 <HAL_ADC_ConfigChannel+0x65c>)
 8008e9e:	e000      	b.n	8008ea2 <HAL_ADC_ConfigChannel+0x616>
 8008ea0:	4a12      	ldr	r2, [pc, #72]	; (8008eec <HAL_ADC_ConfigChannel+0x660>)
 8008ea2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ea6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008eaa:	4619      	mov	r1, r3
 8008eac:	4610      	mov	r0, r2
 8008eae:	f7ff f97e 	bl	80081ae <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8008eb2:	4b12      	ldr	r3, [pc, #72]	; (8008efc <HAL_ADC_ConfigChannel+0x670>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	099b      	lsrs	r3, r3, #6
 8008eb8:	4a11      	ldr	r2, [pc, #68]	; (8008f00 <HAL_ADC_ConfigChannel+0x674>)
 8008eba:	fba2 2303 	umull	r2, r3, r2, r3
 8008ebe:	099a      	lsrs	r2, r3, #6
 8008ec0:	4613      	mov	r3, r2
 8008ec2:	005b      	lsls	r3, r3, #1
 8008ec4:	4413      	add	r3, r2
 8008ec6:	009b      	lsls	r3, r3, #2
 8008ec8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8008eca:	e002      	b.n	8008ed2 <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	3b01      	subs	r3, #1
 8008ed0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d1f9      	bne.n	8008ecc <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008ed8:	e06f      	b.n	8008fba <HAL_ADC_ConfigChannel+0x72e>
 8008eda:	bf00      	nop
 8008edc:	407f0000 	.word	0x407f0000
 8008ee0:	80080000 	.word	0x80080000
 8008ee4:	50000100 	.word	0x50000100
 8008ee8:	50000300 	.word	0x50000300
 8008eec:	50000700 	.word	0x50000700
 8008ef0:	c3210000 	.word	0xc3210000
 8008ef4:	90c00010 	.word	0x90c00010
 8008ef8:	50000600 	.word	0x50000600
 8008efc:	20000c30 	.word	0x20000c30
 8008f00:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a32      	ldr	r2, [pc, #200]	; (8008fd4 <HAL_ADC_ConfigChannel+0x748>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d125      	bne.n	8008f5a <HAL_ADC_ConfigChannel+0x6ce>
 8008f0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d11f      	bne.n	8008f5a <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4a2e      	ldr	r2, [pc, #184]	; (8008fd8 <HAL_ADC_ConfigChannel+0x74c>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d104      	bne.n	8008f2e <HAL_ADC_ConfigChannel+0x6a2>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4a2c      	ldr	r2, [pc, #176]	; (8008fdc <HAL_ADC_ConfigChannel+0x750>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d047      	beq.n	8008fbe <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f36:	d004      	beq.n	8008f42 <HAL_ADC_ConfigChannel+0x6b6>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a26      	ldr	r2, [pc, #152]	; (8008fd8 <HAL_ADC_ConfigChannel+0x74c>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d101      	bne.n	8008f46 <HAL_ADC_ConfigChannel+0x6ba>
 8008f42:	4a27      	ldr	r2, [pc, #156]	; (8008fe0 <HAL_ADC_ConfigChannel+0x754>)
 8008f44:	e000      	b.n	8008f48 <HAL_ADC_ConfigChannel+0x6bc>
 8008f46:	4a27      	ldr	r2, [pc, #156]	; (8008fe4 <HAL_ADC_ConfigChannel+0x758>)
 8008f48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f50:	4619      	mov	r1, r3
 8008f52:	4610      	mov	r0, r2
 8008f54:	f7ff f92b 	bl	80081ae <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008f58:	e031      	b.n	8008fbe <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4a22      	ldr	r2, [pc, #136]	; (8008fe8 <HAL_ADC_ConfigChannel+0x75c>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d12d      	bne.n	8008fc0 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008f64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d127      	bne.n	8008fc0 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a18      	ldr	r2, [pc, #96]	; (8008fd8 <HAL_ADC_ConfigChannel+0x74c>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d022      	beq.n	8008fc0 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f82:	d004      	beq.n	8008f8e <HAL_ADC_ConfigChannel+0x702>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a13      	ldr	r2, [pc, #76]	; (8008fd8 <HAL_ADC_ConfigChannel+0x74c>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d101      	bne.n	8008f92 <HAL_ADC_ConfigChannel+0x706>
 8008f8e:	4a14      	ldr	r2, [pc, #80]	; (8008fe0 <HAL_ADC_ConfigChannel+0x754>)
 8008f90:	e000      	b.n	8008f94 <HAL_ADC_ConfigChannel+0x708>
 8008f92:	4a14      	ldr	r2, [pc, #80]	; (8008fe4 <HAL_ADC_ConfigChannel+0x758>)
 8008f94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	4610      	mov	r0, r2
 8008fa0:	f7ff f905 	bl	80081ae <LL_ADC_SetCommonPathInternalCh>
 8008fa4:	e00c      	b.n	8008fc0 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008faa:	f043 0220 	orr.w	r2, r3, #32
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8008fb8:	e002      	b.n	8008fc0 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008fba:	bf00      	nop
 8008fbc:	e000      	b.n	8008fc0 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008fbe:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8008fc8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3798      	adds	r7, #152	; 0x98
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}
 8008fd4:	c7520000 	.word	0xc7520000
 8008fd8:	50000100 	.word	0x50000100
 8008fdc:	50000500 	.word	0x50000500
 8008fe0:	50000300 	.word	0x50000300
 8008fe4:	50000700 	.word	0x50000700
 8008fe8:	cb840000 	.word	0xcb840000

08008fec <LL_ADC_IsEnabled>:
{
 8008fec:	b480      	push	{r7}
 8008fee:	b083      	sub	sp, #12
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	689b      	ldr	r3, [r3, #8]
 8008ff8:	f003 0301 	and.w	r3, r3, #1
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d101      	bne.n	8009004 <LL_ADC_IsEnabled+0x18>
 8009000:	2301      	movs	r3, #1
 8009002:	e000      	b.n	8009006 <LL_ADC_IsEnabled+0x1a>
 8009004:	2300      	movs	r3, #0
}
 8009006:	4618      	mov	r0, r3
 8009008:	370c      	adds	r7, #12
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr

08009012 <LL_ADC_REG_IsConversionOngoing>:
{
 8009012:	b480      	push	{r7}
 8009014:	b083      	sub	sp, #12
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	689b      	ldr	r3, [r3, #8]
 800901e:	f003 0304 	and.w	r3, r3, #4
 8009022:	2b04      	cmp	r3, #4
 8009024:	d101      	bne.n	800902a <LL_ADC_REG_IsConversionOngoing+0x18>
 8009026:	2301      	movs	r3, #1
 8009028:	e000      	b.n	800902c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800902a:	2300      	movs	r3, #0
}
 800902c:	4618      	mov	r0, r3
 800902e:	370c      	adds	r7, #12
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr

08009038 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8009038:	b590      	push	{r4, r7, lr}
 800903a:	b0a1      	sub	sp, #132	; 0x84
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009042:	2300      	movs	r3, #0
 8009044:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800904e:	2b01      	cmp	r3, #1
 8009050:	d101      	bne.n	8009056 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8009052:	2302      	movs	r3, #2
 8009054:	e0e3      	b.n	800921e <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2201      	movs	r2, #1
 800905a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009066:	d102      	bne.n	800906e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8009068:	4b6f      	ldr	r3, [pc, #444]	; (8009228 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800906a:	60bb      	str	r3, [r7, #8]
 800906c:	e009      	b.n	8009082 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a6e      	ldr	r2, [pc, #440]	; (800922c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d102      	bne.n	800907e <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8009078:	4b6d      	ldr	r3, [pc, #436]	; (8009230 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800907a:	60bb      	str	r3, [r7, #8]
 800907c:	e001      	b.n	8009082 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800907e:	2300      	movs	r3, #0
 8009080:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d10b      	bne.n	80090a0 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800908c:	f043 0220 	orr.w	r2, r3, #32
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800909c:	2301      	movs	r3, #1
 800909e:	e0be      	b.n	800921e <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	4618      	mov	r0, r3
 80090a4:	f7ff ffb5 	bl	8009012 <LL_ADC_REG_IsConversionOngoing>
 80090a8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4618      	mov	r0, r3
 80090b0:	f7ff ffaf 	bl	8009012 <LL_ADC_REG_IsConversionOngoing>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	f040 80a0 	bne.w	80091fc <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80090bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090be:	2b00      	cmp	r3, #0
 80090c0:	f040 809c 	bne.w	80091fc <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80090cc:	d004      	beq.n	80090d8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4a55      	ldr	r2, [pc, #340]	; (8009228 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d101      	bne.n	80090dc <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 80090d8:	4b56      	ldr	r3, [pc, #344]	; (8009234 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80090da:	e000      	b.n	80090de <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 80090dc:	4b56      	ldr	r3, [pc, #344]	; (8009238 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80090de:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d04b      	beq.n	8009180 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80090e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090ea:	689b      	ldr	r3, [r3, #8]
 80090ec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	6859      	ldr	r1, [r3, #4]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80090fa:	035b      	lsls	r3, r3, #13
 80090fc:	430b      	orrs	r3, r1
 80090fe:	431a      	orrs	r2, r3
 8009100:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009102:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800910c:	d004      	beq.n	8009118 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a45      	ldr	r2, [pc, #276]	; (8009228 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d10f      	bne.n	8009138 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8009118:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800911c:	f7ff ff66 	bl	8008fec <LL_ADC_IsEnabled>
 8009120:	4604      	mov	r4, r0
 8009122:	4841      	ldr	r0, [pc, #260]	; (8009228 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009124:	f7ff ff62 	bl	8008fec <LL_ADC_IsEnabled>
 8009128:	4603      	mov	r3, r0
 800912a:	4323      	orrs	r3, r4
 800912c:	2b00      	cmp	r3, #0
 800912e:	bf0c      	ite	eq
 8009130:	2301      	moveq	r3, #1
 8009132:	2300      	movne	r3, #0
 8009134:	b2db      	uxtb	r3, r3
 8009136:	e012      	b.n	800915e <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8009138:	483c      	ldr	r0, [pc, #240]	; (800922c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800913a:	f7ff ff57 	bl	8008fec <LL_ADC_IsEnabled>
 800913e:	4604      	mov	r4, r0
 8009140:	483b      	ldr	r0, [pc, #236]	; (8009230 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8009142:	f7ff ff53 	bl	8008fec <LL_ADC_IsEnabled>
 8009146:	4603      	mov	r3, r0
 8009148:	431c      	orrs	r4, r3
 800914a:	483c      	ldr	r0, [pc, #240]	; (800923c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800914c:	f7ff ff4e 	bl	8008fec <LL_ADC_IsEnabled>
 8009150:	4603      	mov	r3, r0
 8009152:	4323      	orrs	r3, r4
 8009154:	2b00      	cmp	r3, #0
 8009156:	bf0c      	ite	eq
 8009158:	2301      	moveq	r3, #1
 800915a:	2300      	movne	r3, #0
 800915c:	b2db      	uxtb	r3, r3
 800915e:	2b00      	cmp	r3, #0
 8009160:	d056      	beq.n	8009210 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8009162:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009164:	689b      	ldr	r3, [r3, #8]
 8009166:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800916a:	f023 030f 	bic.w	r3, r3, #15
 800916e:	683a      	ldr	r2, [r7, #0]
 8009170:	6811      	ldr	r1, [r2, #0]
 8009172:	683a      	ldr	r2, [r7, #0]
 8009174:	6892      	ldr	r2, [r2, #8]
 8009176:	430a      	orrs	r2, r1
 8009178:	431a      	orrs	r2, r3
 800917a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800917c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800917e:	e047      	b.n	8009210 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8009180:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009182:	689b      	ldr	r3, [r3, #8]
 8009184:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009188:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800918a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009194:	d004      	beq.n	80091a0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a23      	ldr	r2, [pc, #140]	; (8009228 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d10f      	bne.n	80091c0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80091a0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80091a4:	f7ff ff22 	bl	8008fec <LL_ADC_IsEnabled>
 80091a8:	4604      	mov	r4, r0
 80091aa:	481f      	ldr	r0, [pc, #124]	; (8009228 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80091ac:	f7ff ff1e 	bl	8008fec <LL_ADC_IsEnabled>
 80091b0:	4603      	mov	r3, r0
 80091b2:	4323      	orrs	r3, r4
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	bf0c      	ite	eq
 80091b8:	2301      	moveq	r3, #1
 80091ba:	2300      	movne	r3, #0
 80091bc:	b2db      	uxtb	r3, r3
 80091be:	e012      	b.n	80091e6 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 80091c0:	481a      	ldr	r0, [pc, #104]	; (800922c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80091c2:	f7ff ff13 	bl	8008fec <LL_ADC_IsEnabled>
 80091c6:	4604      	mov	r4, r0
 80091c8:	4819      	ldr	r0, [pc, #100]	; (8009230 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80091ca:	f7ff ff0f 	bl	8008fec <LL_ADC_IsEnabled>
 80091ce:	4603      	mov	r3, r0
 80091d0:	431c      	orrs	r4, r3
 80091d2:	481a      	ldr	r0, [pc, #104]	; (800923c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80091d4:	f7ff ff0a 	bl	8008fec <LL_ADC_IsEnabled>
 80091d8:	4603      	mov	r3, r0
 80091da:	4323      	orrs	r3, r4
 80091dc:	2b00      	cmp	r3, #0
 80091de:	bf0c      	ite	eq
 80091e0:	2301      	moveq	r3, #1
 80091e2:	2300      	movne	r3, #0
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d012      	beq.n	8009210 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80091ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091ec:	689b      	ldr	r3, [r3, #8]
 80091ee:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80091f2:	f023 030f 	bic.w	r3, r3, #15
 80091f6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80091f8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80091fa:	e009      	b.n	8009210 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009200:	f043 0220 	orr.w	r2, r3, #32
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8009208:	2301      	movs	r3, #1
 800920a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800920e:	e000      	b.n	8009212 <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009210:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2200      	movs	r2, #0
 8009216:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800921a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800921e:	4618      	mov	r0, r3
 8009220:	3784      	adds	r7, #132	; 0x84
 8009222:	46bd      	mov	sp, r7
 8009224:	bd90      	pop	{r4, r7, pc}
 8009226:	bf00      	nop
 8009228:	50000100 	.word	0x50000100
 800922c:	50000400 	.word	0x50000400
 8009230:	50000500 	.word	0x50000500
 8009234:	50000300 	.word	0x50000300
 8009238:	50000700 	.word	0x50000700
 800923c:	50000600 	.word	0x50000600

08009240 <LL_EXTI_EnableIT_0_31>:
{
 8009240:	b480      	push	{r7}
 8009242:	b083      	sub	sp, #12
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8009248:	4b05      	ldr	r3, [pc, #20]	; (8009260 <LL_EXTI_EnableIT_0_31+0x20>)
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	4904      	ldr	r1, [pc, #16]	; (8009260 <LL_EXTI_EnableIT_0_31+0x20>)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	4313      	orrs	r3, r2
 8009252:	600b      	str	r3, [r1, #0]
}
 8009254:	bf00      	nop
 8009256:	370c      	adds	r7, #12
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr
 8009260:	40010400 	.word	0x40010400

08009264 <LL_EXTI_EnableIT_32_63>:
{
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800926c:	4b05      	ldr	r3, [pc, #20]	; (8009284 <LL_EXTI_EnableIT_32_63+0x20>)
 800926e:	6a1a      	ldr	r2, [r3, #32]
 8009270:	4904      	ldr	r1, [pc, #16]	; (8009284 <LL_EXTI_EnableIT_32_63+0x20>)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	4313      	orrs	r3, r2
 8009276:	620b      	str	r3, [r1, #32]
}
 8009278:	bf00      	nop
 800927a:	370c      	adds	r7, #12
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr
 8009284:	40010400 	.word	0x40010400

08009288 <LL_EXTI_DisableIT_0_31>:
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8009290:	4b06      	ldr	r3, [pc, #24]	; (80092ac <LL_EXTI_DisableIT_0_31+0x24>)
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	43db      	mvns	r3, r3
 8009298:	4904      	ldr	r1, [pc, #16]	; (80092ac <LL_EXTI_DisableIT_0_31+0x24>)
 800929a:	4013      	ands	r3, r2
 800929c:	600b      	str	r3, [r1, #0]
}
 800929e:	bf00      	nop
 80092a0:	370c      	adds	r7, #12
 80092a2:	46bd      	mov	sp, r7
 80092a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a8:	4770      	bx	lr
 80092aa:	bf00      	nop
 80092ac:	40010400 	.word	0x40010400

080092b0 <LL_EXTI_DisableIT_32_63>:
{
 80092b0:	b480      	push	{r7}
 80092b2:	b083      	sub	sp, #12
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80092b8:	4b06      	ldr	r3, [pc, #24]	; (80092d4 <LL_EXTI_DisableIT_32_63+0x24>)
 80092ba:	6a1a      	ldr	r2, [r3, #32]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	43db      	mvns	r3, r3
 80092c0:	4904      	ldr	r1, [pc, #16]	; (80092d4 <LL_EXTI_DisableIT_32_63+0x24>)
 80092c2:	4013      	ands	r3, r2
 80092c4:	620b      	str	r3, [r1, #32]
}
 80092c6:	bf00      	nop
 80092c8:	370c      	adds	r7, #12
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr
 80092d2:	bf00      	nop
 80092d4:	40010400 	.word	0x40010400

080092d8 <LL_EXTI_EnableEvent_0_31>:
{
 80092d8:	b480      	push	{r7}
 80092da:	b083      	sub	sp, #12
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80092e0:	4b05      	ldr	r3, [pc, #20]	; (80092f8 <LL_EXTI_EnableEvent_0_31+0x20>)
 80092e2:	685a      	ldr	r2, [r3, #4]
 80092e4:	4904      	ldr	r1, [pc, #16]	; (80092f8 <LL_EXTI_EnableEvent_0_31+0x20>)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	4313      	orrs	r3, r2
 80092ea:	604b      	str	r3, [r1, #4]
}
 80092ec:	bf00      	nop
 80092ee:	370c      	adds	r7, #12
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr
 80092f8:	40010400 	.word	0x40010400

080092fc <LL_EXTI_EnableEvent_32_63>:
{
 80092fc:	b480      	push	{r7}
 80092fe:	b083      	sub	sp, #12
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8009304:	4b05      	ldr	r3, [pc, #20]	; (800931c <LL_EXTI_EnableEvent_32_63+0x20>)
 8009306:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009308:	4904      	ldr	r1, [pc, #16]	; (800931c <LL_EXTI_EnableEvent_32_63+0x20>)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	4313      	orrs	r3, r2
 800930e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8009310:	bf00      	nop
 8009312:	370c      	adds	r7, #12
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr
 800931c:	40010400 	.word	0x40010400

08009320 <LL_EXTI_DisableEvent_0_31>:
{
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8009328:	4b06      	ldr	r3, [pc, #24]	; (8009344 <LL_EXTI_DisableEvent_0_31+0x24>)
 800932a:	685a      	ldr	r2, [r3, #4]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	43db      	mvns	r3, r3
 8009330:	4904      	ldr	r1, [pc, #16]	; (8009344 <LL_EXTI_DisableEvent_0_31+0x24>)
 8009332:	4013      	ands	r3, r2
 8009334:	604b      	str	r3, [r1, #4]
}
 8009336:	bf00      	nop
 8009338:	370c      	adds	r7, #12
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr
 8009342:	bf00      	nop
 8009344:	40010400 	.word	0x40010400

08009348 <LL_EXTI_DisableEvent_32_63>:
{
 8009348:	b480      	push	{r7}
 800934a:	b083      	sub	sp, #12
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8009350:	4b06      	ldr	r3, [pc, #24]	; (800936c <LL_EXTI_DisableEvent_32_63+0x24>)
 8009352:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	43db      	mvns	r3, r3
 8009358:	4904      	ldr	r1, [pc, #16]	; (800936c <LL_EXTI_DisableEvent_32_63+0x24>)
 800935a:	4013      	ands	r3, r2
 800935c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800935e:	bf00      	nop
 8009360:	370c      	adds	r7, #12
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr
 800936a:	bf00      	nop
 800936c:	40010400 	.word	0x40010400

08009370 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8009370:	b480      	push	{r7}
 8009372:	b083      	sub	sp, #12
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8009378:	4b05      	ldr	r3, [pc, #20]	; (8009390 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800937a:	689a      	ldr	r2, [r3, #8]
 800937c:	4904      	ldr	r1, [pc, #16]	; (8009390 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	4313      	orrs	r3, r2
 8009382:	608b      	str	r3, [r1, #8]
}
 8009384:	bf00      	nop
 8009386:	370c      	adds	r7, #12
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr
 8009390:	40010400 	.word	0x40010400

08009394 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8009394:	b480      	push	{r7}
 8009396:	b083      	sub	sp, #12
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800939c:	4b05      	ldr	r3, [pc, #20]	; (80093b4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800939e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80093a0:	4904      	ldr	r1, [pc, #16]	; (80093b4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4313      	orrs	r3, r2
 80093a6:	628b      	str	r3, [r1, #40]	; 0x28
}
 80093a8:	bf00      	nop
 80093aa:	370c      	adds	r7, #12
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr
 80093b4:	40010400 	.word	0x40010400

080093b8 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80093c0:	4b06      	ldr	r3, [pc, #24]	; (80093dc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80093c2:	689a      	ldr	r2, [r3, #8]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	43db      	mvns	r3, r3
 80093c8:	4904      	ldr	r1, [pc, #16]	; (80093dc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80093ca:	4013      	ands	r3, r2
 80093cc:	608b      	str	r3, [r1, #8]
}
 80093ce:	bf00      	nop
 80093d0:	370c      	adds	r7, #12
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr
 80093da:	bf00      	nop
 80093dc:	40010400 	.word	0x40010400

080093e0 <LL_EXTI_DisableRisingTrig_32_63>:
{
 80093e0:	b480      	push	{r7}
 80093e2:	b083      	sub	sp, #12
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80093e8:	4b06      	ldr	r3, [pc, #24]	; (8009404 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80093ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	43db      	mvns	r3, r3
 80093f0:	4904      	ldr	r1, [pc, #16]	; (8009404 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80093f2:	4013      	ands	r3, r2
 80093f4:	628b      	str	r3, [r1, #40]	; 0x28
}
 80093f6:	bf00      	nop
 80093f8:	370c      	adds	r7, #12
 80093fa:	46bd      	mov	sp, r7
 80093fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009400:	4770      	bx	lr
 8009402:	bf00      	nop
 8009404:	40010400 	.word	0x40010400

08009408 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8009408:	b480      	push	{r7}
 800940a:	b083      	sub	sp, #12
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8009410:	4b05      	ldr	r3, [pc, #20]	; (8009428 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8009412:	68da      	ldr	r2, [r3, #12]
 8009414:	4904      	ldr	r1, [pc, #16]	; (8009428 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	4313      	orrs	r3, r2
 800941a:	60cb      	str	r3, [r1, #12]
}
 800941c:	bf00      	nop
 800941e:	370c      	adds	r7, #12
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr
 8009428:	40010400 	.word	0x40010400

0800942c <LL_EXTI_EnableFallingTrig_32_63>:
{
 800942c:	b480      	push	{r7}
 800942e:	b083      	sub	sp, #12
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8009434:	4b05      	ldr	r3, [pc, #20]	; (800944c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8009436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009438:	4904      	ldr	r1, [pc, #16]	; (800944c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	4313      	orrs	r3, r2
 800943e:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8009440:	bf00      	nop
 8009442:	370c      	adds	r7, #12
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr
 800944c:	40010400 	.word	0x40010400

08009450 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8009450:	b480      	push	{r7}
 8009452:	b083      	sub	sp, #12
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8009458:	4b06      	ldr	r3, [pc, #24]	; (8009474 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800945a:	68da      	ldr	r2, [r3, #12]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	43db      	mvns	r3, r3
 8009460:	4904      	ldr	r1, [pc, #16]	; (8009474 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8009462:	4013      	ands	r3, r2
 8009464:	60cb      	str	r3, [r1, #12]
}
 8009466:	bf00      	nop
 8009468:	370c      	adds	r7, #12
 800946a:	46bd      	mov	sp, r7
 800946c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009470:	4770      	bx	lr
 8009472:	bf00      	nop
 8009474:	40010400 	.word	0x40010400

08009478 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8009480:	4b06      	ldr	r3, [pc, #24]	; (800949c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8009482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	43db      	mvns	r3, r3
 8009488:	4904      	ldr	r1, [pc, #16]	; (800949c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800948a:	4013      	ands	r3, r2
 800948c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800948e:	bf00      	nop
 8009490:	370c      	adds	r7, #12
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr
 800949a:	bf00      	nop
 800949c:	40010400 	.word	0x40010400

080094a0 <LL_EXTI_ClearFlag_0_31>:
{
 80094a0:	b480      	push	{r7}
 80094a2:	b083      	sub	sp, #12
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80094a8:	4a04      	ldr	r2, [pc, #16]	; (80094bc <LL_EXTI_ClearFlag_0_31+0x1c>)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6153      	str	r3, [r2, #20]
}
 80094ae:	bf00      	nop
 80094b0:	370c      	adds	r7, #12
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr
 80094ba:	bf00      	nop
 80094bc:	40010400 	.word	0x40010400

080094c0 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b083      	sub	sp, #12
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 80094c8:	4a04      	ldr	r2, [pc, #16]	; (80094dc <LL_EXTI_ClearFlag_32_63+0x1c>)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6353      	str	r3, [r2, #52]	; 0x34
}
 80094ce:	bf00      	nop
 80094d0:	370c      	adds	r7, #12
 80094d2:	46bd      	mov	sp, r7
 80094d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d8:	4770      	bx	lr
 80094da:	bf00      	nop
 80094dc:	40010400 	.word	0x40010400

080094e0 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b088      	sub	sp, #32
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80094e8:	2300      	movs	r3, #0
 80094ea:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80094ec:	2300      	movs	r3, #0
 80094ee:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d102      	bne.n	80094fc <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80094f6:	2301      	movs	r3, #1
 80094f8:	77fb      	strb	r3, [r7, #31]
 80094fa:	e180      	b.n	80097fe <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009506:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800950a:	d102      	bne.n	8009512 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 800950c:	2301      	movs	r3, #1
 800950e:	77fb      	strb	r3, [r7, #31]
 8009510:	e175      	b.n	80097fe <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	7f5b      	ldrb	r3, [r3, #29]
 8009516:	b2db      	uxtb	r3, r3
 8009518:	2b00      	cmp	r3, #0
 800951a:	d108      	bne.n	800952e <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2200      	movs	r2, #0
 8009520:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f7fd f95b 	bl	80067e4 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009538:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	695b      	ldr	r3, [r3, #20]
 8009548:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	68db      	ldr	r3, [r3, #12]
 800954e:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8009554:	4313      	orrs	r3, r2
 8009556:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	4b98      	ldr	r3, [pc, #608]	; (80097c0 <HAL_COMP_Init+0x2e0>)
 8009560:	4013      	ands	r3, r2
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	6812      	ldr	r2, [r2, #0]
 8009566:	6979      	ldr	r1, [r7, #20]
 8009568:	430b      	orrs	r3, r1
 800956a:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009576:	2b00      	cmp	r3, #0
 8009578:	d015      	beq.n	80095a6 <HAL_COMP_Init+0xc6>
 800957a:	69bb      	ldr	r3, [r7, #24]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d112      	bne.n	80095a6 <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8009580:	4b90      	ldr	r3, [pc, #576]	; (80097c4 <HAL_COMP_Init+0x2e4>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	099b      	lsrs	r3, r3, #6
 8009586:	4a90      	ldr	r2, [pc, #576]	; (80097c8 <HAL_COMP_Init+0x2e8>)
 8009588:	fba2 2303 	umull	r2, r3, r2, r3
 800958c:	099a      	lsrs	r2, r3, #6
 800958e:	4613      	mov	r3, r2
 8009590:	009b      	lsls	r3, r3, #2
 8009592:	4413      	add	r3, r2
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8009598:	e002      	b.n	80095a0 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	3b01      	subs	r3, #1
 800959e:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d1f9      	bne.n	800959a <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4a88      	ldr	r2, [pc, #544]	; (80097cc <HAL_COMP_Init+0x2ec>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d028      	beq.n	8009602 <HAL_COMP_Init+0x122>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4a86      	ldr	r2, [pc, #536]	; (80097d0 <HAL_COMP_Init+0x2f0>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d020      	beq.n	80095fc <HAL_COMP_Init+0x11c>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4a85      	ldr	r2, [pc, #532]	; (80097d4 <HAL_COMP_Init+0x2f4>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d018      	beq.n	80095f6 <HAL_COMP_Init+0x116>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a83      	ldr	r2, [pc, #524]	; (80097d8 <HAL_COMP_Init+0x2f8>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d010      	beq.n	80095f0 <HAL_COMP_Init+0x110>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4a82      	ldr	r2, [pc, #520]	; (80097dc <HAL_COMP_Init+0x2fc>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d008      	beq.n	80095ea <HAL_COMP_Init+0x10a>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4a80      	ldr	r2, [pc, #512]	; (80097e0 <HAL_COMP_Init+0x300>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d101      	bne.n	80095e6 <HAL_COMP_Init+0x106>
 80095e2:	2301      	movs	r3, #1
 80095e4:	e00f      	b.n	8009606 <HAL_COMP_Init+0x126>
 80095e6:	2302      	movs	r3, #2
 80095e8:	e00d      	b.n	8009606 <HAL_COMP_Init+0x126>
 80095ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80095ee:	e00a      	b.n	8009606 <HAL_COMP_Init+0x126>
 80095f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80095f4:	e007      	b.n	8009606 <HAL_COMP_Init+0x126>
 80095f6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80095fa:	e004      	b.n	8009606 <HAL_COMP_Init+0x126>
 80095fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009600:	e001      	b.n	8009606 <HAL_COMP_Init+0x126>
 8009602:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009606:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	699b      	ldr	r3, [r3, #24]
 800960c:	f003 0303 	and.w	r3, r3, #3
 8009610:	2b00      	cmp	r3, #0
 8009612:	f000 80b6 	beq.w	8009782 <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	699b      	ldr	r3, [r3, #24]
 800961a:	f003 0310 	and.w	r3, r3, #16
 800961e:	2b00      	cmp	r3, #0
 8009620:	d011      	beq.n	8009646 <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4a6e      	ldr	r2, [pc, #440]	; (80097e0 <HAL_COMP_Init+0x300>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d004      	beq.n	8009636 <HAL_COMP_Init+0x156>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a6c      	ldr	r2, [pc, #432]	; (80097e4 <HAL_COMP_Init+0x304>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d103      	bne.n	800963e <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8009636:	6938      	ldr	r0, [r7, #16]
 8009638:	f7ff feac 	bl	8009394 <LL_EXTI_EnableRisingTrig_32_63>
 800963c:	e014      	b.n	8009668 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800963e:	6938      	ldr	r0, [r7, #16]
 8009640:	f7ff fe96 	bl	8009370 <LL_EXTI_EnableRisingTrig_0_31>
 8009644:	e010      	b.n	8009668 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4a65      	ldr	r2, [pc, #404]	; (80097e0 <HAL_COMP_Init+0x300>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d004      	beq.n	800965a <HAL_COMP_Init+0x17a>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4a63      	ldr	r2, [pc, #396]	; (80097e4 <HAL_COMP_Init+0x304>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d103      	bne.n	8009662 <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 800965a:	6938      	ldr	r0, [r7, #16]
 800965c:	f7ff fec0 	bl	80093e0 <LL_EXTI_DisableRisingTrig_32_63>
 8009660:	e002      	b.n	8009668 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8009662:	6938      	ldr	r0, [r7, #16]
 8009664:	f7ff fea8 	bl	80093b8 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	699b      	ldr	r3, [r3, #24]
 800966c:	f003 0320 	and.w	r3, r3, #32
 8009670:	2b00      	cmp	r3, #0
 8009672:	d011      	beq.n	8009698 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a59      	ldr	r2, [pc, #356]	; (80097e0 <HAL_COMP_Init+0x300>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d004      	beq.n	8009688 <HAL_COMP_Init+0x1a8>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4a58      	ldr	r2, [pc, #352]	; (80097e4 <HAL_COMP_Init+0x304>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d103      	bne.n	8009690 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8009688:	6938      	ldr	r0, [r7, #16]
 800968a:	f7ff fecf 	bl	800942c <LL_EXTI_EnableFallingTrig_32_63>
 800968e:	e014      	b.n	80096ba <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8009690:	6938      	ldr	r0, [r7, #16]
 8009692:	f7ff feb9 	bl	8009408 <LL_EXTI_EnableFallingTrig_0_31>
 8009696:	e010      	b.n	80096ba <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a50      	ldr	r2, [pc, #320]	; (80097e0 <HAL_COMP_Init+0x300>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d004      	beq.n	80096ac <HAL_COMP_Init+0x1cc>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4a4f      	ldr	r2, [pc, #316]	; (80097e4 <HAL_COMP_Init+0x304>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d103      	bne.n	80096b4 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 80096ac:	6938      	ldr	r0, [r7, #16]
 80096ae:	f7ff fee3 	bl	8009478 <LL_EXTI_DisableFallingTrig_32_63>
 80096b2:	e002      	b.n	80096ba <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80096b4:	6938      	ldr	r0, [r7, #16]
 80096b6:	f7ff fecb 	bl	8009450 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a48      	ldr	r2, [pc, #288]	; (80097e0 <HAL_COMP_Init+0x300>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d004      	beq.n	80096ce <HAL_COMP_Init+0x1ee>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4a46      	ldr	r2, [pc, #280]	; (80097e4 <HAL_COMP_Init+0x304>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d103      	bne.n	80096d6 <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 80096ce:	6938      	ldr	r0, [r7, #16]
 80096d0:	f7ff fef6 	bl	80094c0 <LL_EXTI_ClearFlag_32_63>
 80096d4:	e002      	b.n	80096dc <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 80096d6:	6938      	ldr	r0, [r7, #16]
 80096d8:	f7ff fee2 	bl	80094a0 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	699b      	ldr	r3, [r3, #24]
 80096e0:	f003 0302 	and.w	r3, r3, #2
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d011      	beq.n	800970c <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a3c      	ldr	r2, [pc, #240]	; (80097e0 <HAL_COMP_Init+0x300>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d004      	beq.n	80096fc <HAL_COMP_Init+0x21c>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a3b      	ldr	r2, [pc, #236]	; (80097e4 <HAL_COMP_Init+0x304>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d103      	bne.n	8009704 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 80096fc:	6938      	ldr	r0, [r7, #16]
 80096fe:	f7ff fdfd 	bl	80092fc <LL_EXTI_EnableEvent_32_63>
 8009702:	e014      	b.n	800972e <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8009704:	6938      	ldr	r0, [r7, #16]
 8009706:	f7ff fde7 	bl	80092d8 <LL_EXTI_EnableEvent_0_31>
 800970a:	e010      	b.n	800972e <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4a33      	ldr	r2, [pc, #204]	; (80097e0 <HAL_COMP_Init+0x300>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d004      	beq.n	8009720 <HAL_COMP_Init+0x240>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4a32      	ldr	r2, [pc, #200]	; (80097e4 <HAL_COMP_Init+0x304>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d103      	bne.n	8009728 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8009720:	6938      	ldr	r0, [r7, #16]
 8009722:	f7ff fe11 	bl	8009348 <LL_EXTI_DisableEvent_32_63>
 8009726:	e002      	b.n	800972e <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8009728:	6938      	ldr	r0, [r7, #16]
 800972a:	f7ff fdf9 	bl	8009320 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	699b      	ldr	r3, [r3, #24]
 8009732:	f003 0301 	and.w	r3, r3, #1
 8009736:	2b00      	cmp	r3, #0
 8009738:	d011      	beq.n	800975e <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a28      	ldr	r2, [pc, #160]	; (80097e0 <HAL_COMP_Init+0x300>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d004      	beq.n	800974e <HAL_COMP_Init+0x26e>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a26      	ldr	r2, [pc, #152]	; (80097e4 <HAL_COMP_Init+0x304>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d103      	bne.n	8009756 <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 800974e:	6938      	ldr	r0, [r7, #16]
 8009750:	f7ff fd88 	bl	8009264 <LL_EXTI_EnableIT_32_63>
 8009754:	e04b      	b.n	80097ee <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8009756:	6938      	ldr	r0, [r7, #16]
 8009758:	f7ff fd72 	bl	8009240 <LL_EXTI_EnableIT_0_31>
 800975c:	e047      	b.n	80097ee <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	4a1f      	ldr	r2, [pc, #124]	; (80097e0 <HAL_COMP_Init+0x300>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d004      	beq.n	8009772 <HAL_COMP_Init+0x292>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a1d      	ldr	r2, [pc, #116]	; (80097e4 <HAL_COMP_Init+0x304>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d103      	bne.n	800977a <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8009772:	6938      	ldr	r0, [r7, #16]
 8009774:	f7ff fd9c 	bl	80092b0 <LL_EXTI_DisableIT_32_63>
 8009778:	e039      	b.n	80097ee <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 800977a:	6938      	ldr	r0, [r7, #16]
 800977c:	f7ff fd84 	bl	8009288 <LL_EXTI_DisableIT_0_31>
 8009780:	e035      	b.n	80097ee <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4a16      	ldr	r2, [pc, #88]	; (80097e0 <HAL_COMP_Init+0x300>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d004      	beq.n	8009796 <HAL_COMP_Init+0x2b6>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a14      	ldr	r2, [pc, #80]	; (80097e4 <HAL_COMP_Init+0x304>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d103      	bne.n	800979e <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8009796:	6938      	ldr	r0, [r7, #16]
 8009798:	f7ff fdd6 	bl	8009348 <LL_EXTI_DisableEvent_32_63>
 800979c:	e002      	b.n	80097a4 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 800979e:	6938      	ldr	r0, [r7, #16]
 80097a0:	f7ff fdbe 	bl	8009320 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4a0d      	ldr	r2, [pc, #52]	; (80097e0 <HAL_COMP_Init+0x300>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d004      	beq.n	80097b8 <HAL_COMP_Init+0x2d8>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4a0c      	ldr	r2, [pc, #48]	; (80097e4 <HAL_COMP_Init+0x304>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d117      	bne.n	80097e8 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 80097b8:	6938      	ldr	r0, [r7, #16]
 80097ba:	f7ff fd79 	bl	80092b0 <LL_EXTI_DisableIT_32_63>
 80097be:	e016      	b.n	80097ee <HAL_COMP_Init+0x30e>
 80097c0:	ff007e0f 	.word	0xff007e0f
 80097c4:	20000c30 	.word	0x20000c30
 80097c8:	053e2d63 	.word	0x053e2d63
 80097cc:	40010200 	.word	0x40010200
 80097d0:	40010204 	.word	0x40010204
 80097d4:	40010208 	.word	0x40010208
 80097d8:	4001020c 	.word	0x4001020c
 80097dc:	40010210 	.word	0x40010210
 80097e0:	40010214 	.word	0x40010214
 80097e4:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80097e8:	6938      	ldr	r0, [r7, #16]
 80097ea:	f7ff fd4d 	bl	8009288 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	7f5b      	ldrb	r3, [r3, #29]
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d102      	bne.n	80097fe <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2201      	movs	r2, #1
 80097fc:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 80097fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8009800:	4618      	mov	r0, r3
 8009802:	3720      	adds	r7, #32
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <__NVIC_SetPriorityGrouping>:
{
 8009808:	b480      	push	{r7}
 800980a:	b085      	sub	sp, #20
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f003 0307 	and.w	r3, r3, #7
 8009816:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009818:	4b0c      	ldr	r3, [pc, #48]	; (800984c <__NVIC_SetPriorityGrouping+0x44>)
 800981a:	68db      	ldr	r3, [r3, #12]
 800981c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800981e:	68ba      	ldr	r2, [r7, #8]
 8009820:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009824:	4013      	ands	r3, r2
 8009826:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009830:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800983a:	4a04      	ldr	r2, [pc, #16]	; (800984c <__NVIC_SetPriorityGrouping+0x44>)
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	60d3      	str	r3, [r2, #12]
}
 8009840:	bf00      	nop
 8009842:	3714      	adds	r7, #20
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr
 800984c:	e000ed00 	.word	0xe000ed00

08009850 <__NVIC_GetPriorityGrouping>:
{
 8009850:	b480      	push	{r7}
 8009852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009854:	4b04      	ldr	r3, [pc, #16]	; (8009868 <__NVIC_GetPriorityGrouping+0x18>)
 8009856:	68db      	ldr	r3, [r3, #12]
 8009858:	0a1b      	lsrs	r3, r3, #8
 800985a:	f003 0307 	and.w	r3, r3, #7
}
 800985e:	4618      	mov	r0, r3
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr
 8009868:	e000ed00 	.word	0xe000ed00

0800986c <__NVIC_EnableIRQ>:
{
 800986c:	b480      	push	{r7}
 800986e:	b083      	sub	sp, #12
 8009870:	af00      	add	r7, sp, #0
 8009872:	4603      	mov	r3, r0
 8009874:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800987a:	2b00      	cmp	r3, #0
 800987c:	db0b      	blt.n	8009896 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800987e:	79fb      	ldrb	r3, [r7, #7]
 8009880:	f003 021f 	and.w	r2, r3, #31
 8009884:	4907      	ldr	r1, [pc, #28]	; (80098a4 <__NVIC_EnableIRQ+0x38>)
 8009886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800988a:	095b      	lsrs	r3, r3, #5
 800988c:	2001      	movs	r0, #1
 800988e:	fa00 f202 	lsl.w	r2, r0, r2
 8009892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009896:	bf00      	nop
 8009898:	370c      	adds	r7, #12
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	e000e100 	.word	0xe000e100

080098a8 <__NVIC_DisableIRQ>:
{
 80098a8:	b480      	push	{r7}
 80098aa:	b083      	sub	sp, #12
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	4603      	mov	r3, r0
 80098b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80098b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	db10      	blt.n	80098dc <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80098ba:	79fb      	ldrb	r3, [r7, #7]
 80098bc:	f003 021f 	and.w	r2, r3, #31
 80098c0:	4909      	ldr	r1, [pc, #36]	; (80098e8 <__NVIC_DisableIRQ+0x40>)
 80098c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098c6:	095b      	lsrs	r3, r3, #5
 80098c8:	2001      	movs	r0, #1
 80098ca:	fa00 f202 	lsl.w	r2, r0, r2
 80098ce:	3320      	adds	r3, #32
 80098d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80098d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80098d8:	f3bf 8f6f 	isb	sy
}
 80098dc:	bf00      	nop
 80098de:	370c      	adds	r7, #12
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr
 80098e8:	e000e100 	.word	0xe000e100

080098ec <__NVIC_SetPriority>:
{
 80098ec:	b480      	push	{r7}
 80098ee:	b083      	sub	sp, #12
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	4603      	mov	r3, r0
 80098f4:	6039      	str	r1, [r7, #0]
 80098f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80098f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	db0a      	blt.n	8009916 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	b2da      	uxtb	r2, r3
 8009904:	490c      	ldr	r1, [pc, #48]	; (8009938 <__NVIC_SetPriority+0x4c>)
 8009906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800990a:	0112      	lsls	r2, r2, #4
 800990c:	b2d2      	uxtb	r2, r2
 800990e:	440b      	add	r3, r1
 8009910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009914:	e00a      	b.n	800992c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	b2da      	uxtb	r2, r3
 800991a:	4908      	ldr	r1, [pc, #32]	; (800993c <__NVIC_SetPriority+0x50>)
 800991c:	79fb      	ldrb	r3, [r7, #7]
 800991e:	f003 030f 	and.w	r3, r3, #15
 8009922:	3b04      	subs	r3, #4
 8009924:	0112      	lsls	r2, r2, #4
 8009926:	b2d2      	uxtb	r2, r2
 8009928:	440b      	add	r3, r1
 800992a:	761a      	strb	r2, [r3, #24]
}
 800992c:	bf00      	nop
 800992e:	370c      	adds	r7, #12
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr
 8009938:	e000e100 	.word	0xe000e100
 800993c:	e000ed00 	.word	0xe000ed00

08009940 <NVIC_EncodePriority>:
{
 8009940:	b480      	push	{r7}
 8009942:	b089      	sub	sp, #36	; 0x24
 8009944:	af00      	add	r7, sp, #0
 8009946:	60f8      	str	r0, [r7, #12]
 8009948:	60b9      	str	r1, [r7, #8]
 800994a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	f003 0307 	and.w	r3, r3, #7
 8009952:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009954:	69fb      	ldr	r3, [r7, #28]
 8009956:	f1c3 0307 	rsb	r3, r3, #7
 800995a:	2b04      	cmp	r3, #4
 800995c:	bf28      	it	cs
 800995e:	2304      	movcs	r3, #4
 8009960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009962:	69fb      	ldr	r3, [r7, #28]
 8009964:	3304      	adds	r3, #4
 8009966:	2b06      	cmp	r3, #6
 8009968:	d902      	bls.n	8009970 <NVIC_EncodePriority+0x30>
 800996a:	69fb      	ldr	r3, [r7, #28]
 800996c:	3b03      	subs	r3, #3
 800996e:	e000      	b.n	8009972 <NVIC_EncodePriority+0x32>
 8009970:	2300      	movs	r3, #0
 8009972:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009974:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009978:	69bb      	ldr	r3, [r7, #24]
 800997a:	fa02 f303 	lsl.w	r3, r2, r3
 800997e:	43da      	mvns	r2, r3
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	401a      	ands	r2, r3
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009988:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	fa01 f303 	lsl.w	r3, r1, r3
 8009992:	43d9      	mvns	r1, r3
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009998:	4313      	orrs	r3, r2
}
 800999a:	4618      	mov	r0, r3
 800999c:	3724      	adds	r7, #36	; 0x24
 800999e:	46bd      	mov	sp, r7
 80099a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a4:	4770      	bx	lr
	...

080099a8 <SysTick_Config>:
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b082      	sub	sp, #8
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	3b01      	subs	r3, #1
 80099b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80099b8:	d301      	bcc.n	80099be <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80099ba:	2301      	movs	r3, #1
 80099bc:	e00f      	b.n	80099de <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80099be:	4a0a      	ldr	r2, [pc, #40]	; (80099e8 <SysTick_Config+0x40>)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	3b01      	subs	r3, #1
 80099c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80099c6:	210f      	movs	r1, #15
 80099c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099cc:	f7ff ff8e 	bl	80098ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80099d0:	4b05      	ldr	r3, [pc, #20]	; (80099e8 <SysTick_Config+0x40>)
 80099d2:	2200      	movs	r2, #0
 80099d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80099d6:	4b04      	ldr	r3, [pc, #16]	; (80099e8 <SysTick_Config+0x40>)
 80099d8:	2207      	movs	r2, #7
 80099da:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80099dc:	2300      	movs	r3, #0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3708      	adds	r7, #8
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop
 80099e8:	e000e010 	.word	0xe000e010

080099ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b082      	sub	sp, #8
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f7ff ff07 	bl	8009808 <__NVIC_SetPriorityGrouping>
}
 80099fa:	bf00      	nop
 80099fc:	3708      	adds	r7, #8
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}

08009a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009a02:	b580      	push	{r7, lr}
 8009a04:	b086      	sub	sp, #24
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	4603      	mov	r3, r0
 8009a0a:	60b9      	str	r1, [r7, #8]
 8009a0c:	607a      	str	r2, [r7, #4]
 8009a0e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009a10:	f7ff ff1e 	bl	8009850 <__NVIC_GetPriorityGrouping>
 8009a14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	68b9      	ldr	r1, [r7, #8]
 8009a1a:	6978      	ldr	r0, [r7, #20]
 8009a1c:	f7ff ff90 	bl	8009940 <NVIC_EncodePriority>
 8009a20:	4602      	mov	r2, r0
 8009a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a26:	4611      	mov	r1, r2
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f7ff ff5f 	bl	80098ec <__NVIC_SetPriority>
}
 8009a2e:	bf00      	nop
 8009a30:	3718      	adds	r7, #24
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}

08009a36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009a36:	b580      	push	{r7, lr}
 8009a38:	b082      	sub	sp, #8
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a44:	4618      	mov	r0, r3
 8009a46:	f7ff ff11 	bl	800986c <__NVIC_EnableIRQ>
}
 8009a4a:	bf00      	nop
 8009a4c:	3708      	adds	r7, #8
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}

08009a52 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009a52:	b580      	push	{r7, lr}
 8009a54:	b082      	sub	sp, #8
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	4603      	mov	r3, r0
 8009a5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8009a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a60:	4618      	mov	r0, r3
 8009a62:	f7ff ff21 	bl	80098a8 <__NVIC_DisableIRQ>
}
 8009a66:	bf00      	nop
 8009a68:	3708      	adds	r7, #8
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}

08009a6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009a6e:	b580      	push	{r7, lr}
 8009a70:	b082      	sub	sp, #8
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f7ff ff96 	bl	80099a8 <SysTick_Config>
 8009a7c:	4603      	mov	r3, r0
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3708      	adds	r7, #8
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}

08009a86 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8009a86:	b580      	push	{r7, lr}
 8009a88:	b082      	sub	sp, #8
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d101      	bne.n	8009a98 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8009a94:	2301      	movs	r3, #1
 8009a96:	e014      	b.n	8009ac2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	791b      	ldrb	r3, [r3, #4]
 8009a9c:	b2db      	uxtb	r3, r3
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d105      	bne.n	8009aae <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f7fc ff51 	bl	8006950 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2202      	movs	r2, #2
 8009ab2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2201      	movs	r2, #1
 8009abe:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8009ac0:	2300      	movs	r3, #0
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3708      	adds	r7, #8
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}

08009aca <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8009aca:	b580      	push	{r7, lr}
 8009acc:	b082      	sub	sp, #8
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]
 8009ad2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	795b      	ldrb	r3, [r3, #5]
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d101      	bne.n	8009ae0 <HAL_DAC_Start+0x16>
 8009adc:	2302      	movs	r3, #2
 8009ade:	e043      	b.n	8009b68 <HAL_DAC_Start+0x9e>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2201      	movs	r2, #1
 8009ae4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2202      	movs	r2, #2
 8009aea:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	6819      	ldr	r1, [r3, #0]
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	f003 0310 	and.w	r3, r3, #16
 8009af8:	2201      	movs	r2, #1
 8009afa:	409a      	lsls	r2, r3
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	430a      	orrs	r2, r1
 8009b02:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8009b04:	2001      	movs	r0, #1
 8009b06:	f7fe fb1d 	bl	8008144 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d10f      	bne.n	8009b30 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009b1a:	2b02      	cmp	r3, #2
 8009b1c:	d11d      	bne.n	8009b5a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	685a      	ldr	r2, [r3, #4]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f042 0201 	orr.w	r2, r2, #1
 8009b2c:	605a      	str	r2, [r3, #4]
 8009b2e:	e014      	b.n	8009b5a <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	f003 0310 	and.w	r3, r3, #16
 8009b40:	2102      	movs	r1, #2
 8009b42:	fa01 f303 	lsl.w	r3, r1, r3
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d107      	bne.n	8009b5a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	685a      	ldr	r2, [r3, #4]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f042 0202 	orr.w	r2, r2, #2
 8009b58:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2200      	movs	r2, #0
 8009b64:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8009b66:	2300      	movs	r3, #0
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3708      	adds	r7, #8
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}

08009b70 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b086      	sub	sp, #24
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	60f8      	str	r0, [r7, #12]
 8009b78:	60b9      	str	r1, [r7, #8]
 8009b7a:	607a      	str	r2, [r7, #4]
 8009b7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	795b      	ldrb	r3, [r3, #5]
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d101      	bne.n	8009b8e <HAL_DAC_Start_DMA+0x1e>
 8009b8a:	2302      	movs	r3, #2
 8009b8c:	e0a1      	b.n	8009cd2 <HAL_DAC_Start_DMA+0x162>
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2201      	movs	r2, #1
 8009b92:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2202      	movs	r2, #2
 8009b98:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d12a      	bne.n	8009bf6 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	689b      	ldr	r3, [r3, #8]
 8009ba4:	4a4d      	ldr	r2, [pc, #308]	; (8009cdc <HAL_DAC_Start_DMA+0x16c>)
 8009ba6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	689b      	ldr	r3, [r3, #8]
 8009bac:	4a4c      	ldr	r2, [pc, #304]	; (8009ce0 <HAL_DAC_Start_DMA+0x170>)
 8009bae:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	689b      	ldr	r3, [r3, #8]
 8009bb4:	4a4b      	ldr	r2, [pc, #300]	; (8009ce4 <HAL_DAC_Start_DMA+0x174>)
 8009bb6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009bc6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8009bc8:	6a3b      	ldr	r3, [r7, #32]
 8009bca:	2b04      	cmp	r3, #4
 8009bcc:	d009      	beq.n	8009be2 <HAL_DAC_Start_DMA+0x72>
 8009bce:	2b08      	cmp	r3, #8
 8009bd0:	d00c      	beq.n	8009bec <HAL_DAC_Start_DMA+0x7c>
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d000      	beq.n	8009bd8 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8009bd6:	e039      	b.n	8009c4c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	3308      	adds	r3, #8
 8009bde:	613b      	str	r3, [r7, #16]
        break;
 8009be0:	e034      	b.n	8009c4c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	330c      	adds	r3, #12
 8009be8:	613b      	str	r3, [r7, #16]
        break;
 8009bea:	e02f      	b.n	8009c4c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	3310      	adds	r3, #16
 8009bf2:	613b      	str	r3, [r7, #16]
        break;
 8009bf4:	e02a      	b.n	8009c4c <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	68db      	ldr	r3, [r3, #12]
 8009bfa:	4a3b      	ldr	r2, [pc, #236]	; (8009ce8 <HAL_DAC_Start_DMA+0x178>)
 8009bfc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	68db      	ldr	r3, [r3, #12]
 8009c02:	4a3a      	ldr	r2, [pc, #232]	; (8009cec <HAL_DAC_Start_DMA+0x17c>)
 8009c04:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	68db      	ldr	r3, [r3, #12]
 8009c0a:	4a39      	ldr	r2, [pc, #228]	; (8009cf0 <HAL_DAC_Start_DMA+0x180>)
 8009c0c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	681a      	ldr	r2, [r3, #0]
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009c1c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8009c1e:	6a3b      	ldr	r3, [r7, #32]
 8009c20:	2b04      	cmp	r3, #4
 8009c22:	d009      	beq.n	8009c38 <HAL_DAC_Start_DMA+0xc8>
 8009c24:	2b08      	cmp	r3, #8
 8009c26:	d00c      	beq.n	8009c42 <HAL_DAC_Start_DMA+0xd2>
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d000      	beq.n	8009c2e <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8009c2c:	e00e      	b.n	8009c4c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	3314      	adds	r3, #20
 8009c34:	613b      	str	r3, [r7, #16]
        break;
 8009c36:	e009      	b.n	8009c4c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	3318      	adds	r3, #24
 8009c3e:	613b      	str	r3, [r7, #16]
        break;
 8009c40:	e004      	b.n	8009c4c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	331c      	adds	r3, #28
 8009c48:	613b      	str	r3, [r7, #16]
        break;
 8009c4a:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d111      	bne.n	8009c76 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	681a      	ldr	r2, [r3, #0]
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009c60:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	6898      	ldr	r0, [r3, #8]
 8009c66:	6879      	ldr	r1, [r7, #4]
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	693a      	ldr	r2, [r7, #16]
 8009c6c:	f000 fbc8 	bl	800a400 <HAL_DMA_Start_IT>
 8009c70:	4603      	mov	r3, r0
 8009c72:	75fb      	strb	r3, [r7, #23]
 8009c74:	e010      	b.n	8009c98 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8009c84:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	68d8      	ldr	r0, [r3, #12]
 8009c8a:	6879      	ldr	r1, [r7, #4]
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	693a      	ldr	r2, [r7, #16]
 8009c90:	f000 fbb6 	bl	800a400 <HAL_DMA_Start_IT>
 8009c94:	4603      	mov	r3, r0
 8009c96:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8009c9e:	7dfb      	ldrb	r3, [r7, #23]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d10f      	bne.n	8009cc4 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	6819      	ldr	r1, [r3, #0]
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	f003 0310 	and.w	r3, r3, #16
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	409a      	lsls	r2, r3
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	430a      	orrs	r2, r1
 8009cba:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8009cbc:	2001      	movs	r0, #1
 8009cbe:	f7fe fa41 	bl	8008144 <HAL_Delay>
 8009cc2:	e005      	b.n	8009cd0 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	691b      	ldr	r3, [r3, #16]
 8009cc8:	f043 0204 	orr.w	r2, r3, #4
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8009cd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3718      	adds	r7, #24
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop
 8009cdc:	0800a19d 	.word	0x0800a19d
 8009ce0:	0800a1bf 	.word	0x0800a1bf
 8009ce4:	0800a1db 	.word	0x0800a1db
 8009ce8:	0800a245 	.word	0x0800a245
 8009cec:	0800a267 	.word	0x0800a267
 8009cf0:	0800a283 	.word	0x0800a283

08009cf4 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b084      	sub	sp, #16
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	6819      	ldr	r1, [r3, #0]
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	f003 0310 	and.w	r3, r3, #16
 8009d0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8009d12:	43da      	mvns	r2, r3
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	400a      	ands	r2, r1
 8009d1a:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	6819      	ldr	r1, [r3, #0]
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	f003 0310 	and.w	r3, r3, #16
 8009d28:	2201      	movs	r2, #1
 8009d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d2e:	43da      	mvns	r2, r3
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	400a      	ands	r2, r1
 8009d36:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 8009d38:	2001      	movs	r0, #1
 8009d3a:	f7fe fa03 	bl	8008144 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d10f      	bne.n	8009d64 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	689b      	ldr	r3, [r3, #8]
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f000 fbd4 	bl	800a4f6 <HAL_DMA_Abort>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	681a      	ldr	r2, [r3, #0]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009d60:	601a      	str	r2, [r3, #0]
 8009d62:	e00e      	b.n	8009d82 <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	68db      	ldr	r3, [r3, #12]
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f000 fbc4 	bl	800a4f6 <HAL_DMA_Abort>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8009d80:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 8009d82:	7bfb      	ldrb	r3, [r7, #15]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d003      	beq.n	8009d90 <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2204      	movs	r2, #4
 8009d8c:	711a      	strb	r2, [r3, #4]
 8009d8e:	e002      	b.n	8009d96 <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2201      	movs	r2, #1
 8009d94:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 8009d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3710      	adds	r7, #16
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b087      	sub	sp, #28
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	60f8      	str	r0, [r7, #12]
 8009da8:	60b9      	str	r1, [r7, #8]
 8009daa:	607a      	str	r2, [r7, #4]
 8009dac:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8009dae:	2300      	movs	r3, #0
 8009db0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d105      	bne.n	8009dd0 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8009dc4:	697a      	ldr	r2, [r7, #20]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	4413      	add	r3, r2
 8009dca:	3308      	adds	r3, #8
 8009dcc:	617b      	str	r3, [r7, #20]
 8009dce:	e004      	b.n	8009dda <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8009dd0:	697a      	ldr	r2, [r7, #20]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	4413      	add	r3, r2
 8009dd6:	3314      	adds	r3, #20
 8009dd8:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	461a      	mov	r2, r3
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8009de2:	2300      	movs	r3, #0
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	371c      	adds	r7, #28
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr

08009df0 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8009df8:	bf00      	nop
 8009dfa:	370c      	adds	r7, #12
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr

08009e04 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8009e0c:	bf00      	nop
 8009e0e:	370c      	adds	r7, #12
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr

08009e18 <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d103      	bne.n	8009e30 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e2e:	e002      	b.n	8009e36 <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	370c      	adds	r7, #12
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e40:	4770      	bx	lr
	...

08009e44 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b08a      	sub	sp, #40	; 0x28
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	60b9      	str	r1, [r7, #8]
 8009e4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8009e50:	2300      	movs	r3, #0
 8009e52:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	795b      	ldrb	r3, [r3, #5]
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d101      	bne.n	8009e60 <HAL_DAC_ConfigChannel+0x1c>
 8009e5c:	2302      	movs	r3, #2
 8009e5e:	e194      	b.n	800a18a <HAL_DAC_ConfigChannel+0x346>
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2201      	movs	r2, #1
 8009e64:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2202      	movs	r2, #2
 8009e6a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	2b04      	cmp	r3, #4
 8009e72:	d174      	bne.n	8009f5e <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d137      	bne.n	8009eea <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8009e7a:	f7fe f957 	bl	800812c <HAL_GetTick>
 8009e7e:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8009e80:	e011      	b.n	8009ea6 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8009e82:	f7fe f953 	bl	800812c <HAL_GetTick>
 8009e86:	4602      	mov	r2, r0
 8009e88:	69fb      	ldr	r3, [r7, #28]
 8009e8a:	1ad3      	subs	r3, r2, r3
 8009e8c:	2b01      	cmp	r3, #1
 8009e8e:	d90a      	bls.n	8009ea6 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	691b      	ldr	r3, [r3, #16]
 8009e94:	f043 0208 	orr.w	r2, r3, #8
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	2203      	movs	r2, #3
 8009ea0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8009ea2:	2303      	movs	r3, #3
 8009ea4:	e171      	b.n	800a18a <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d1e6      	bne.n	8009e82 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8009eb4:	2001      	movs	r0, #1
 8009eb6:	f7fe f945 	bl	8008144 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	68ba      	ldr	r2, [r7, #8]
 8009ec0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009ec2:	641a      	str	r2, [r3, #64]	; 0x40
 8009ec4:	e01e      	b.n	8009f04 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8009ec6:	f7fe f931 	bl	800812c <HAL_GetTick>
 8009eca:	4602      	mov	r2, r0
 8009ecc:	69fb      	ldr	r3, [r7, #28]
 8009ece:	1ad3      	subs	r3, r2, r3
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d90a      	bls.n	8009eea <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	691b      	ldr	r3, [r3, #16]
 8009ed8:	f043 0208 	orr.w	r2, r3, #8
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2203      	movs	r2, #3
 8009ee4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8009ee6:	2303      	movs	r3, #3
 8009ee8:	e14f      	b.n	800a18a <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	dbe8      	blt.n	8009ec6 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8009ef4:	2001      	movs	r0, #1
 8009ef6:	f7fe f925 	bl	8008144 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	68ba      	ldr	r2, [r7, #8]
 8009f00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009f02:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f003 0310 	and.w	r3, r3, #16
 8009f10:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8009f14:	fa01 f303 	lsl.w	r3, r1, r3
 8009f18:	43db      	mvns	r3, r3
 8009f1a:	ea02 0103 	and.w	r1, r2, r3
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f003 0310 	and.w	r3, r3, #16
 8009f28:	409a      	lsls	r2, r3
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	430a      	orrs	r2, r1
 8009f30:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f003 0310 	and.w	r3, r3, #16
 8009f3e:	21ff      	movs	r1, #255	; 0xff
 8009f40:	fa01 f303 	lsl.w	r3, r1, r3
 8009f44:	43db      	mvns	r3, r3
 8009f46:	ea02 0103 	and.w	r1, r2, r3
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f003 0310 	and.w	r3, r3, #16
 8009f54:	409a      	lsls	r2, r3
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	430a      	orrs	r2, r1
 8009f5c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	69db      	ldr	r3, [r3, #28]
 8009f62:	2b01      	cmp	r3, #1
 8009f64:	d11d      	bne.n	8009fa2 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f6c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f003 0310 	and.w	r3, r3, #16
 8009f74:	221f      	movs	r2, #31
 8009f76:	fa02 f303 	lsl.w	r3, r2, r3
 8009f7a:	43db      	mvns	r3, r3
 8009f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f7e:	4013      	ands	r3, r2
 8009f80:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	6a1b      	ldr	r3, [r3, #32]
 8009f86:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f003 0310 	and.w	r3, r3, #16
 8009f8e:	69ba      	ldr	r2, [r7, #24]
 8009f90:	fa02 f303 	lsl.w	r3, r2, r3
 8009f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f96:	4313      	orrs	r3, r2
 8009f98:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fa0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fa8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f003 0310 	and.w	r3, r3, #16
 8009fb0:	2207      	movs	r2, #7
 8009fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8009fb6:	43db      	mvns	r3, r3
 8009fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fba:	4013      	ands	r3, r2
 8009fbc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	699b      	ldr	r3, [r3, #24]
 8009fc2:	f003 0301 	and.w	r3, r3, #1
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d002      	beq.n	8009fd0 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	623b      	str	r3, [r7, #32]
 8009fce:	e011      	b.n	8009ff4 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	699b      	ldr	r3, [r3, #24]
 8009fd4:	f003 0302 	and.w	r3, r3, #2
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d002      	beq.n	8009fe2 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8009fdc:	2301      	movs	r3, #1
 8009fde:	623b      	str	r3, [r7, #32]
 8009fe0:	e008      	b.n	8009ff4 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	695b      	ldr	r3, [r3, #20]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d102      	bne.n	8009ff0 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8009fea:	2301      	movs	r3, #1
 8009fec:	623b      	str	r3, [r7, #32]
 8009fee:	e001      	b.n	8009ff4 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	689a      	ldr	r2, [r3, #8]
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	695b      	ldr	r3, [r3, #20]
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	6a3a      	ldr	r2, [r7, #32]
 800a000:	4313      	orrs	r3, r2
 800a002:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f003 0310 	and.w	r3, r3, #16
 800a00a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a00e:	fa02 f303 	lsl.w	r3, r2, r3
 800a012:	43db      	mvns	r3, r3
 800a014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a016:	4013      	ands	r3, r2
 800a018:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	791b      	ldrb	r3, [r3, #4]
 800a01e:	2b01      	cmp	r3, #1
 800a020:	d102      	bne.n	800a028 <HAL_DAC_ConfigChannel+0x1e4>
 800a022:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a026:	e000      	b.n	800a02a <HAL_DAC_ConfigChannel+0x1e6>
 800a028:	2300      	movs	r3, #0
 800a02a:	69ba      	ldr	r2, [r7, #24]
 800a02c:	4313      	orrs	r3, r2
 800a02e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f003 0310 	and.w	r3, r3, #16
 800a036:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a03a:	fa02 f303 	lsl.w	r3, r2, r3
 800a03e:	43db      	mvns	r3, r3
 800a040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a042:	4013      	ands	r3, r2
 800a044:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	795b      	ldrb	r3, [r3, #5]
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d102      	bne.n	800a054 <HAL_DAC_ConfigChannel+0x210>
 800a04e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a052:	e000      	b.n	800a056 <HAL_DAC_ConfigChannel+0x212>
 800a054:	2300      	movs	r3, #0
 800a056:	69ba      	ldr	r2, [r7, #24]
 800a058:	4313      	orrs	r3, r2
 800a05a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800a05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800a062:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	2b02      	cmp	r3, #2
 800a06a:	d114      	bne.n	800a096 <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800a06c:	f001 fbc2 	bl	800b7f4 <HAL_RCC_GetHCLKFreq>
 800a070:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	4a47      	ldr	r2, [pc, #284]	; (800a194 <HAL_DAC_ConfigChannel+0x350>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d904      	bls.n	800a084 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800a07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a080:	627b      	str	r3, [r7, #36]	; 0x24
 800a082:	e00d      	b.n	800a0a0 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	4a44      	ldr	r2, [pc, #272]	; (800a198 <HAL_DAC_ConfigChannel+0x354>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	d909      	bls.n	800a0a0 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800a08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a08e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a092:	627b      	str	r3, [r7, #36]	; 0x24
 800a094:	e004      	b.n	800a0a0 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a09c:	4313      	orrs	r3, r2
 800a09e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f003 0310 	and.w	r3, r3, #16
 800a0a6:	69ba      	ldr	r2, [r7, #24]
 800a0a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	6819      	ldr	r1, [r3, #0]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f003 0310 	and.w	r3, r3, #16
 800a0c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a0ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ce:	43da      	mvns	r2, r3
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	400a      	ands	r2, r1
 800a0d6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f003 0310 	and.w	r3, r3, #16
 800a0e6:	f640 72fe 	movw	r2, #4094	; 0xffe
 800a0ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ee:	43db      	mvns	r3, r3
 800a0f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0f2:	4013      	ands	r3, r2
 800a0f4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	68db      	ldr	r3, [r3, #12]
 800a0fa:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f003 0310 	and.w	r3, r3, #16
 800a102:	69ba      	ldr	r2, [r7, #24]
 800a104:	fa02 f303 	lsl.w	r3, r2, r3
 800a108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a10a:	4313      	orrs	r3, r2
 800a10c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a114:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	6819      	ldr	r1, [r3, #0]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f003 0310 	and.w	r3, r3, #16
 800a122:	22c0      	movs	r2, #192	; 0xc0
 800a124:	fa02 f303 	lsl.w	r3, r2, r3
 800a128:	43da      	mvns	r2, r3
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	400a      	ands	r2, r1
 800a130:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	68db      	ldr	r3, [r3, #12]
 800a136:	089b      	lsrs	r3, r3, #2
 800a138:	f003 030f 	and.w	r3, r3, #15
 800a13c:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	691b      	ldr	r3, [r3, #16]
 800a142:	089b      	lsrs	r3, r3, #2
 800a144:	021b      	lsls	r3, r3, #8
 800a146:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a14a:	69ba      	ldr	r2, [r7, #24]
 800a14c:	4313      	orrs	r3, r2
 800a14e:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f003 0310 	and.w	r3, r3, #16
 800a15c:	f640 710f 	movw	r1, #3855	; 0xf0f
 800a160:	fa01 f303 	lsl.w	r3, r1, r3
 800a164:	43db      	mvns	r3, r3
 800a166:	ea02 0103 	and.w	r1, r2, r3
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f003 0310 	and.w	r3, r3, #16
 800a170:	69ba      	ldr	r2, [r7, #24]
 800a172:	409a      	lsls	r2, r3
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	430a      	orrs	r2, r1
 800a17a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	2201      	movs	r2, #1
 800a180:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2200      	movs	r2, #0
 800a186:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800a188:	2300      	movs	r3, #0
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3728      	adds	r7, #40	; 0x28
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}
 800a192:	bf00      	nop
 800a194:	09896800 	.word	0x09896800
 800a198:	04c4b400 	.word	0x04c4b400

0800a19c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b084      	sub	sp, #16
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1a8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800a1aa:	68f8      	ldr	r0, [r7, #12]
 800a1ac:	f7fd f80b 	bl	80071c6 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	711a      	strb	r2, [r3, #4]
}
 800a1b6:	bf00      	nop
 800a1b8:	3710      	adds	r7, #16
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}

0800a1be <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800a1be:	b580      	push	{r7, lr}
 800a1c0:	b084      	sub	sp, #16
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ca:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800a1cc:	68f8      	ldr	r0, [r7, #12]
 800a1ce:	f7ff fe0f 	bl	8009df0 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800a1d2:	bf00      	nop
 800a1d4:	3710      	adds	r7, #16
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}

0800a1da <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800a1da:	b580      	push	{r7, lr}
 800a1dc:	b084      	sub	sp, #16
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1e6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	691b      	ldr	r3, [r3, #16]
 800a1ec:	f043 0204 	orr.w	r2, r3, #4
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800a1f4:	68f8      	ldr	r0, [r7, #12]
 800a1f6:	f7ff fe05 	bl	8009e04 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	711a      	strb	r2, [r3, #4]
}
 800a200:	bf00      	nop
 800a202:	3710      	adds	r7, #16
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}

0800a208 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800a208:	b480      	push	{r7}
 800a20a:	b083      	sub	sp, #12
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800a210:	bf00      	nop
 800a212:	370c      	adds	r7, #12
 800a214:	46bd      	mov	sp, r7
 800a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21a:	4770      	bx	lr

0800a21c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b083      	sub	sp, #12
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800a224:	bf00      	nop
 800a226:	370c      	adds	r7, #12
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr

0800a230 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800a230:	b480      	push	{r7}
 800a232:	b083      	sub	sp, #12
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800a238:	bf00      	nop
 800a23a:	370c      	adds	r7, #12
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr

0800a244 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b084      	sub	sp, #16
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a250:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800a252:	68f8      	ldr	r0, [r7, #12]
 800a254:	f7ff ffd8 	bl	800a208 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	2201      	movs	r2, #1
 800a25c:	711a      	strb	r2, [r3, #4]
}
 800a25e:	bf00      	nop
 800a260:	3710      	adds	r7, #16
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}

0800a266 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800a266:	b580      	push	{r7, lr}
 800a268:	b084      	sub	sp, #16
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a272:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800a274:	68f8      	ldr	r0, [r7, #12]
 800a276:	f7ff ffd1 	bl	800a21c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800a27a:	bf00      	nop
 800a27c:	3710      	adds	r7, #16
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}

0800a282 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800a282:	b580      	push	{r7, lr}
 800a284:	b084      	sub	sp, #16
 800a286:	af00      	add	r7, sp, #0
 800a288:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a28e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	691b      	ldr	r3, [r3, #16]
 800a294:	f043 0204 	orr.w	r2, r3, #4
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800a29c:	68f8      	ldr	r0, [r7, #12]
 800a29e:	f7ff ffc7 	bl	800a230 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	711a      	strb	r2, [r3, #4]
}
 800a2a8:	bf00      	nop
 800a2aa:	3710      	adds	r7, #16
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}

0800a2b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b084      	sub	sp, #16
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d101      	bne.n	800a2c2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800a2be:	2301      	movs	r3, #1
 800a2c0:	e08d      	b.n	800a3de <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	461a      	mov	r2, r3
 800a2c8:	4b47      	ldr	r3, [pc, #284]	; (800a3e8 <HAL_DMA_Init+0x138>)
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	d80f      	bhi.n	800a2ee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	4b45      	ldr	r3, [pc, #276]	; (800a3ec <HAL_DMA_Init+0x13c>)
 800a2d6:	4413      	add	r3, r2
 800a2d8:	4a45      	ldr	r2, [pc, #276]	; (800a3f0 <HAL_DMA_Init+0x140>)
 800a2da:	fba2 2303 	umull	r2, r3, r2, r3
 800a2de:	091b      	lsrs	r3, r3, #4
 800a2e0:	009a      	lsls	r2, r3, #2
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	4a42      	ldr	r2, [pc, #264]	; (800a3f4 <HAL_DMA_Init+0x144>)
 800a2ea:	641a      	str	r2, [r3, #64]	; 0x40
 800a2ec:	e00e      	b.n	800a30c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	461a      	mov	r2, r3
 800a2f4:	4b40      	ldr	r3, [pc, #256]	; (800a3f8 <HAL_DMA_Init+0x148>)
 800a2f6:	4413      	add	r3, r2
 800a2f8:	4a3d      	ldr	r2, [pc, #244]	; (800a3f0 <HAL_DMA_Init+0x140>)
 800a2fa:	fba2 2303 	umull	r2, r3, r2, r3
 800a2fe:	091b      	lsrs	r3, r3, #4
 800a300:	009a      	lsls	r2, r3, #2
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	4a3c      	ldr	r2, [pc, #240]	; (800a3fc <HAL_DMA_Init+0x14c>)
 800a30a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2202      	movs	r2, #2
 800a310:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a326:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800a330:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	691b      	ldr	r3, [r3, #16]
 800a336:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a33c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	699b      	ldr	r3, [r3, #24]
 800a342:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a348:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6a1b      	ldr	r3, [r3, #32]
 800a34e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800a350:	68fa      	ldr	r2, [r7, #12]
 800a352:	4313      	orrs	r3, r2
 800a354:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	68fa      	ldr	r2, [r7, #12]
 800a35c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 fa10 	bl	800a784 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	689b      	ldr	r3, [r3, #8]
 800a368:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a36c:	d102      	bne.n	800a374 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2200      	movs	r2, #0
 800a372:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	685a      	ldr	r2, [r3, #4]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a37c:	b2d2      	uxtb	r2, r2
 800a37e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a384:	687a      	ldr	r2, [r7, #4]
 800a386:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a388:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	685b      	ldr	r3, [r3, #4]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d010      	beq.n	800a3b4 <HAL_DMA_Init+0x104>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	685b      	ldr	r3, [r3, #4]
 800a396:	2b04      	cmp	r3, #4
 800a398:	d80c      	bhi.n	800a3b4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f000 fa30 	bl	800a800 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3ac:	687a      	ldr	r2, [r7, #4]
 800a3ae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a3b0:	605a      	str	r2, [r3, #4]
 800a3b2:	e008      	b.n	800a3c6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a3dc:	2300      	movs	r3, #0
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3710      	adds	r7, #16
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	40020407 	.word	0x40020407
 800a3ec:	bffdfff8 	.word	0xbffdfff8
 800a3f0:	cccccccd 	.word	0xcccccccd
 800a3f4:	40020000 	.word	0x40020000
 800a3f8:	bffdfbf8 	.word	0xbffdfbf8
 800a3fc:	40020400 	.word	0x40020400

0800a400 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b086      	sub	sp, #24
 800a404:	af00      	add	r7, sp, #0
 800a406:	60f8      	str	r0, [r7, #12]
 800a408:	60b9      	str	r1, [r7, #8]
 800a40a:	607a      	str	r2, [r7, #4]
 800a40c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a40e:	2300      	movs	r3, #0
 800a410:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a418:	2b01      	cmp	r3, #1
 800a41a:	d101      	bne.n	800a420 <HAL_DMA_Start_IT+0x20>
 800a41c:	2302      	movs	r3, #2
 800a41e:	e066      	b.n	800a4ee <HAL_DMA_Start_IT+0xee>
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2201      	movs	r2, #1
 800a424:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	2b01      	cmp	r3, #1
 800a432:	d155      	bne.n	800a4e0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2202      	movs	r2, #2
 800a438:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2200      	movs	r2, #0
 800a440:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	681a      	ldr	r2, [r3, #0]
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f022 0201 	bic.w	r2, r2, #1
 800a450:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	687a      	ldr	r2, [r7, #4]
 800a456:	68b9      	ldr	r1, [r7, #8]
 800a458:	68f8      	ldr	r0, [r7, #12]
 800a45a:	f000 f954 	bl	800a706 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a462:	2b00      	cmp	r3, #0
 800a464:	d008      	beq.n	800a478 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	681a      	ldr	r2, [r3, #0]
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f042 020e 	orr.w	r2, r2, #14
 800a474:	601a      	str	r2, [r3, #0]
 800a476:	e00f      	b.n	800a498 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	681a      	ldr	r2, [r3, #0]
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f022 0204 	bic.w	r2, r2, #4
 800a486:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	681a      	ldr	r2, [r3, #0]
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f042 020a 	orr.w	r2, r2, #10
 800a496:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d007      	beq.n	800a4b6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4aa:	681a      	ldr	r2, [r3, #0]
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a4b4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d007      	beq.n	800a4ce <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4c2:	681a      	ldr	r2, [r3, #0]
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a4cc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	681a      	ldr	r2, [r3, #0]
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f042 0201 	orr.w	r2, r2, #1
 800a4dc:	601a      	str	r2, [r3, #0]
 800a4de:	e005      	b.n	800a4ec <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800a4e8:	2302      	movs	r3, #2
 800a4ea:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800a4ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3718      	adds	r7, #24
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}

0800a4f6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a4f6:	b480      	push	{r7}
 800a4f8:	b085      	sub	sp, #20
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a4fe:	2300      	movs	r3, #0
 800a500:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a508:	b2db      	uxtb	r3, r3
 800a50a:	2b02      	cmp	r3, #2
 800a50c:	d005      	beq.n	800a51a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2204      	movs	r2, #4
 800a512:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800a514:	2301      	movs	r3, #1
 800a516:	73fb      	strb	r3, [r7, #15]
 800a518:	e037      	b.n	800a58a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	681a      	ldr	r2, [r3, #0]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f022 020e 	bic.w	r2, r2, #14
 800a528:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a52e:	681a      	ldr	r2, [r3, #0]
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a534:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a538:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	681a      	ldr	r2, [r3, #0]
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f022 0201 	bic.w	r2, r2, #1
 800a548:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a54e:	f003 021f 	and.w	r2, r3, #31
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a556:	2101      	movs	r1, #1
 800a558:	fa01 f202 	lsl.w	r2, r1, r2
 800a55c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a562:	687a      	ldr	r2, [r7, #4]
 800a564:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a566:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d00c      	beq.n	800a58a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a574:	681a      	ldr	r2, [r3, #0]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a57a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a57e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a584:	687a      	ldr	r2, [r7, #4]
 800a586:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a588:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2201      	movs	r2, #1
 800a58e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2200      	movs	r2, #0
 800a596:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800a59a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3714      	adds	r7, #20
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr

0800a5a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b084      	sub	sp, #16
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5c4:	f003 031f 	and.w	r3, r3, #31
 800a5c8:	2204      	movs	r2, #4
 800a5ca:	409a      	lsls	r2, r3
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	4013      	ands	r3, r2
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d026      	beq.n	800a622 <HAL_DMA_IRQHandler+0x7a>
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	f003 0304 	and.w	r3, r3, #4
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d021      	beq.n	800a622 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f003 0320 	and.w	r3, r3, #32
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d107      	bne.n	800a5fc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	681a      	ldr	r2, [r3, #0]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f022 0204 	bic.w	r2, r2, #4
 800a5fa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a600:	f003 021f 	and.w	r2, r3, #31
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a608:	2104      	movs	r1, #4
 800a60a:	fa01 f202 	lsl.w	r2, r1, r2
 800a60e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a614:	2b00      	cmp	r3, #0
 800a616:	d071      	beq.n	800a6fc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800a620:	e06c      	b.n	800a6fc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a626:	f003 031f 	and.w	r3, r3, #31
 800a62a:	2202      	movs	r2, #2
 800a62c:	409a      	lsls	r2, r3
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	4013      	ands	r3, r2
 800a632:	2b00      	cmp	r3, #0
 800a634:	d02e      	beq.n	800a694 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	f003 0302 	and.w	r3, r3, #2
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d029      	beq.n	800a694 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f003 0320 	and.w	r3, r3, #32
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d10b      	bne.n	800a666 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	681a      	ldr	r2, [r3, #0]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f022 020a 	bic.w	r2, r2, #10
 800a65c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2201      	movs	r2, #1
 800a662:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a66a:	f003 021f 	and.w	r2, r3, #31
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a672:	2102      	movs	r1, #2
 800a674:	fa01 f202 	lsl.w	r2, r1, r2
 800a678:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2200      	movs	r2, #0
 800a67e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a686:	2b00      	cmp	r3, #0
 800a688:	d038      	beq.n	800a6fc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800a692:	e033      	b.n	800a6fc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a698:	f003 031f 	and.w	r3, r3, #31
 800a69c:	2208      	movs	r2, #8
 800a69e:	409a      	lsls	r2, r3
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	4013      	ands	r3, r2
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d02a      	beq.n	800a6fe <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	f003 0308 	and.w	r3, r3, #8
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d025      	beq.n	800a6fe <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	681a      	ldr	r2, [r3, #0]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f022 020e 	bic.w	r2, r2, #14
 800a6c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6c6:	f003 021f 	and.w	r2, r3, #31
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6ce:	2101      	movs	r1, #1
 800a6d0:	fa01 f202 	lsl.w	r2, r1, r2
 800a6d4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2201      	movs	r2, #1
 800a6da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2201      	movs	r2, #1
 800a6e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d004      	beq.n	800a6fe <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800a6fc:	bf00      	nop
 800a6fe:	bf00      	nop
}
 800a700:	3710      	adds	r7, #16
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}

0800a706 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a706:	b480      	push	{r7}
 800a708:	b085      	sub	sp, #20
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	60f8      	str	r0, [r7, #12]
 800a70e:	60b9      	str	r1, [r7, #8]
 800a710:	607a      	str	r2, [r7, #4]
 800a712:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a718:	68fa      	ldr	r2, [r7, #12]
 800a71a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a71c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a722:	2b00      	cmp	r3, #0
 800a724:	d004      	beq.n	800a730 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a72a:	68fa      	ldr	r2, [r7, #12]
 800a72c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a72e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a734:	f003 021f 	and.w	r2, r3, #31
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a73c:	2101      	movs	r1, #1
 800a73e:	fa01 f202 	lsl.w	r2, r1, r2
 800a742:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	683a      	ldr	r2, [r7, #0]
 800a74a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	689b      	ldr	r3, [r3, #8]
 800a750:	2b10      	cmp	r3, #16
 800a752:	d108      	bne.n	800a766 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	687a      	ldr	r2, [r7, #4]
 800a75a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	68ba      	ldr	r2, [r7, #8]
 800a762:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800a764:	e007      	b.n	800a776 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	68ba      	ldr	r2, [r7, #8]
 800a76c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	687a      	ldr	r2, [r7, #4]
 800a774:	60da      	str	r2, [r3, #12]
}
 800a776:	bf00      	nop
 800a778:	3714      	adds	r7, #20
 800a77a:	46bd      	mov	sp, r7
 800a77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a780:	4770      	bx	lr
	...

0800a784 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a784:	b480      	push	{r7}
 800a786:	b087      	sub	sp, #28
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	461a      	mov	r2, r3
 800a792:	4b16      	ldr	r3, [pc, #88]	; (800a7ec <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800a794:	429a      	cmp	r2, r3
 800a796:	d802      	bhi.n	800a79e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800a798:	4b15      	ldr	r3, [pc, #84]	; (800a7f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800a79a:	617b      	str	r3, [r7, #20]
 800a79c:	e001      	b.n	800a7a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800a79e:	4b15      	ldr	r3, [pc, #84]	; (800a7f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800a7a0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	b2db      	uxtb	r3, r3
 800a7ac:	3b08      	subs	r3, #8
 800a7ae:	4a12      	ldr	r2, [pc, #72]	; (800a7f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800a7b0:	fba2 2303 	umull	r2, r3, r2, r3
 800a7b4:	091b      	lsrs	r3, r3, #4
 800a7b6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7bc:	089b      	lsrs	r3, r3, #2
 800a7be:	009a      	lsls	r2, r3, #2
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	4413      	add	r3, r2
 800a7c4:	461a      	mov	r2, r3
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	4a0b      	ldr	r2, [pc, #44]	; (800a7fc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800a7ce:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	f003 031f 	and.w	r3, r3, #31
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	409a      	lsls	r2, r3
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	651a      	str	r2, [r3, #80]	; 0x50
}
 800a7de:	bf00      	nop
 800a7e0:	371c      	adds	r7, #28
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e8:	4770      	bx	lr
 800a7ea:	bf00      	nop
 800a7ec:	40020407 	.word	0x40020407
 800a7f0:	40020800 	.word	0x40020800
 800a7f4:	40020820 	.word	0x40020820
 800a7f8:	cccccccd 	.word	0xcccccccd
 800a7fc:	40020880 	.word	0x40020880

0800a800 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a800:	b480      	push	{r7}
 800a802:	b085      	sub	sp, #20
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	685b      	ldr	r3, [r3, #4]
 800a80c:	b2db      	uxtb	r3, r3
 800a80e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a810:	68fa      	ldr	r2, [r7, #12]
 800a812:	4b0b      	ldr	r3, [pc, #44]	; (800a840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800a814:	4413      	add	r3, r2
 800a816:	009b      	lsls	r3, r3, #2
 800a818:	461a      	mov	r2, r3
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	4a08      	ldr	r2, [pc, #32]	; (800a844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800a822:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	3b01      	subs	r3, #1
 800a828:	f003 031f 	and.w	r3, r3, #31
 800a82c:	2201      	movs	r2, #1
 800a82e:	409a      	lsls	r2, r3
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800a834:	bf00      	nop
 800a836:	3714      	adds	r7, #20
 800a838:	46bd      	mov	sp, r7
 800a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83e:	4770      	bx	lr
 800a840:	1000823f 	.word	0x1000823f
 800a844:	40020940 	.word	0x40020940

0800a848 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a848:	b480      	push	{r7}
 800a84a:	b087      	sub	sp, #28
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a852:	2300      	movs	r3, #0
 800a854:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a856:	e15a      	b.n	800ab0e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	2101      	movs	r1, #1
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	fa01 f303 	lsl.w	r3, r1, r3
 800a864:	4013      	ands	r3, r2
 800a866:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	f000 814c 	beq.w	800ab08 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	685b      	ldr	r3, [r3, #4]
 800a874:	2b01      	cmp	r3, #1
 800a876:	d00b      	beq.n	800a890 <HAL_GPIO_Init+0x48>
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	2b02      	cmp	r3, #2
 800a87e:	d007      	beq.n	800a890 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a884:	2b11      	cmp	r3, #17
 800a886:	d003      	beq.n	800a890 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	2b12      	cmp	r3, #18
 800a88e:	d130      	bne.n	800a8f2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	689b      	ldr	r3, [r3, #8]
 800a894:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	005b      	lsls	r3, r3, #1
 800a89a:	2203      	movs	r2, #3
 800a89c:	fa02 f303 	lsl.w	r3, r2, r3
 800a8a0:	43db      	mvns	r3, r3
 800a8a2:	693a      	ldr	r2, [r7, #16]
 800a8a4:	4013      	ands	r3, r2
 800a8a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	68da      	ldr	r2, [r3, #12]
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	005b      	lsls	r3, r3, #1
 800a8b0:	fa02 f303 	lsl.w	r3, r2, r3
 800a8b4:	693a      	ldr	r2, [r7, #16]
 800a8b6:	4313      	orrs	r3, r2
 800a8b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	693a      	ldr	r2, [r7, #16]
 800a8be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a8ce:	43db      	mvns	r3, r3
 800a8d0:	693a      	ldr	r2, [r7, #16]
 800a8d2:	4013      	ands	r3, r2
 800a8d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	685b      	ldr	r3, [r3, #4]
 800a8da:	091b      	lsrs	r3, r3, #4
 800a8dc:	f003 0201 	and.w	r2, r3, #1
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	fa02 f303 	lsl.w	r3, r2, r3
 800a8e6:	693a      	ldr	r2, [r7, #16]
 800a8e8:	4313      	orrs	r3, r2
 800a8ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	693a      	ldr	r2, [r7, #16]
 800a8f0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	68db      	ldr	r3, [r3, #12]
 800a8f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	005b      	lsls	r3, r3, #1
 800a8fc:	2203      	movs	r2, #3
 800a8fe:	fa02 f303 	lsl.w	r3, r2, r3
 800a902:	43db      	mvns	r3, r3
 800a904:	693a      	ldr	r2, [r7, #16]
 800a906:	4013      	ands	r3, r2
 800a908:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	689a      	ldr	r2, [r3, #8]
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	005b      	lsls	r3, r3, #1
 800a912:	fa02 f303 	lsl.w	r3, r2, r3
 800a916:	693a      	ldr	r2, [r7, #16]
 800a918:	4313      	orrs	r3, r2
 800a91a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	693a      	ldr	r2, [r7, #16]
 800a920:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	2b02      	cmp	r3, #2
 800a928:	d003      	beq.n	800a932 <HAL_GPIO_Init+0xea>
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	685b      	ldr	r3, [r3, #4]
 800a92e:	2b12      	cmp	r3, #18
 800a930:	d123      	bne.n	800a97a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	08da      	lsrs	r2, r3, #3
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	3208      	adds	r2, #8
 800a93a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a93e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	f003 0307 	and.w	r3, r3, #7
 800a946:	009b      	lsls	r3, r3, #2
 800a948:	220f      	movs	r2, #15
 800a94a:	fa02 f303 	lsl.w	r3, r2, r3
 800a94e:	43db      	mvns	r3, r3
 800a950:	693a      	ldr	r2, [r7, #16]
 800a952:	4013      	ands	r3, r2
 800a954:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	691a      	ldr	r2, [r3, #16]
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	f003 0307 	and.w	r3, r3, #7
 800a960:	009b      	lsls	r3, r3, #2
 800a962:	fa02 f303 	lsl.w	r3, r2, r3
 800a966:	693a      	ldr	r2, [r7, #16]
 800a968:	4313      	orrs	r3, r2
 800a96a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	08da      	lsrs	r2, r3, #3
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	3208      	adds	r2, #8
 800a974:	6939      	ldr	r1, [r7, #16]
 800a976:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	005b      	lsls	r3, r3, #1
 800a984:	2203      	movs	r2, #3
 800a986:	fa02 f303 	lsl.w	r3, r2, r3
 800a98a:	43db      	mvns	r3, r3
 800a98c:	693a      	ldr	r2, [r7, #16]
 800a98e:	4013      	ands	r3, r2
 800a990:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	685b      	ldr	r3, [r3, #4]
 800a996:	f003 0203 	and.w	r2, r3, #3
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	005b      	lsls	r3, r3, #1
 800a99e:	fa02 f303 	lsl.w	r3, r2, r3
 800a9a2:	693a      	ldr	r2, [r7, #16]
 800a9a4:	4313      	orrs	r3, r2
 800a9a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	693a      	ldr	r2, [r7, #16]
 800a9ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	f000 80a6 	beq.w	800ab08 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a9bc:	4b5b      	ldr	r3, [pc, #364]	; (800ab2c <HAL_GPIO_Init+0x2e4>)
 800a9be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9c0:	4a5a      	ldr	r2, [pc, #360]	; (800ab2c <HAL_GPIO_Init+0x2e4>)
 800a9c2:	f043 0301 	orr.w	r3, r3, #1
 800a9c6:	6613      	str	r3, [r2, #96]	; 0x60
 800a9c8:	4b58      	ldr	r3, [pc, #352]	; (800ab2c <HAL_GPIO_Init+0x2e4>)
 800a9ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9cc:	f003 0301 	and.w	r3, r3, #1
 800a9d0:	60bb      	str	r3, [r7, #8]
 800a9d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a9d4:	4a56      	ldr	r2, [pc, #344]	; (800ab30 <HAL_GPIO_Init+0x2e8>)
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	089b      	lsrs	r3, r3, #2
 800a9da:	3302      	adds	r3, #2
 800a9dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	f003 0303 	and.w	r3, r3, #3
 800a9e8:	009b      	lsls	r3, r3, #2
 800a9ea:	220f      	movs	r2, #15
 800a9ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a9f0:	43db      	mvns	r3, r3
 800a9f2:	693a      	ldr	r2, [r7, #16]
 800a9f4:	4013      	ands	r3, r2
 800a9f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a9fe:	d01f      	beq.n	800aa40 <HAL_GPIO_Init+0x1f8>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	4a4c      	ldr	r2, [pc, #304]	; (800ab34 <HAL_GPIO_Init+0x2ec>)
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d019      	beq.n	800aa3c <HAL_GPIO_Init+0x1f4>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	4a4b      	ldr	r2, [pc, #300]	; (800ab38 <HAL_GPIO_Init+0x2f0>)
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d013      	beq.n	800aa38 <HAL_GPIO_Init+0x1f0>
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	4a4a      	ldr	r2, [pc, #296]	; (800ab3c <HAL_GPIO_Init+0x2f4>)
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d00d      	beq.n	800aa34 <HAL_GPIO_Init+0x1ec>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	4a49      	ldr	r2, [pc, #292]	; (800ab40 <HAL_GPIO_Init+0x2f8>)
 800aa1c:	4293      	cmp	r3, r2
 800aa1e:	d007      	beq.n	800aa30 <HAL_GPIO_Init+0x1e8>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	4a48      	ldr	r2, [pc, #288]	; (800ab44 <HAL_GPIO_Init+0x2fc>)
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d101      	bne.n	800aa2c <HAL_GPIO_Init+0x1e4>
 800aa28:	2305      	movs	r3, #5
 800aa2a:	e00a      	b.n	800aa42 <HAL_GPIO_Init+0x1fa>
 800aa2c:	2306      	movs	r3, #6
 800aa2e:	e008      	b.n	800aa42 <HAL_GPIO_Init+0x1fa>
 800aa30:	2304      	movs	r3, #4
 800aa32:	e006      	b.n	800aa42 <HAL_GPIO_Init+0x1fa>
 800aa34:	2303      	movs	r3, #3
 800aa36:	e004      	b.n	800aa42 <HAL_GPIO_Init+0x1fa>
 800aa38:	2302      	movs	r3, #2
 800aa3a:	e002      	b.n	800aa42 <HAL_GPIO_Init+0x1fa>
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	e000      	b.n	800aa42 <HAL_GPIO_Init+0x1fa>
 800aa40:	2300      	movs	r3, #0
 800aa42:	697a      	ldr	r2, [r7, #20]
 800aa44:	f002 0203 	and.w	r2, r2, #3
 800aa48:	0092      	lsls	r2, r2, #2
 800aa4a:	4093      	lsls	r3, r2
 800aa4c:	693a      	ldr	r2, [r7, #16]
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800aa52:	4937      	ldr	r1, [pc, #220]	; (800ab30 <HAL_GPIO_Init+0x2e8>)
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	089b      	lsrs	r3, r3, #2
 800aa58:	3302      	adds	r3, #2
 800aa5a:	693a      	ldr	r2, [r7, #16]
 800aa5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800aa60:	4b39      	ldr	r3, [pc, #228]	; (800ab48 <HAL_GPIO_Init+0x300>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	43db      	mvns	r3, r3
 800aa6a:	693a      	ldr	r2, [r7, #16]
 800aa6c:	4013      	ands	r3, r2
 800aa6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	685b      	ldr	r3, [r3, #4]
 800aa74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d003      	beq.n	800aa84 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800aa7c:	693a      	ldr	r2, [r7, #16]
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	4313      	orrs	r3, r2
 800aa82:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800aa84:	4a30      	ldr	r2, [pc, #192]	; (800ab48 <HAL_GPIO_Init+0x300>)
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800aa8a:	4b2f      	ldr	r3, [pc, #188]	; (800ab48 <HAL_GPIO_Init+0x300>)
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	43db      	mvns	r3, r3
 800aa94:	693a      	ldr	r2, [r7, #16]
 800aa96:	4013      	ands	r3, r2
 800aa98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	685b      	ldr	r3, [r3, #4]
 800aa9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d003      	beq.n	800aaae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800aaa6:	693a      	ldr	r2, [r7, #16]
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	4313      	orrs	r3, r2
 800aaac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800aaae:	4a26      	ldr	r2, [pc, #152]	; (800ab48 <HAL_GPIO_Init+0x300>)
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800aab4:	4b24      	ldr	r3, [pc, #144]	; (800ab48 <HAL_GPIO_Init+0x300>)
 800aab6:	689b      	ldr	r3, [r3, #8]
 800aab8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	43db      	mvns	r3, r3
 800aabe:	693a      	ldr	r2, [r7, #16]
 800aac0:	4013      	ands	r3, r2
 800aac2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d003      	beq.n	800aad8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800aad0:	693a      	ldr	r2, [r7, #16]
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	4313      	orrs	r3, r2
 800aad6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800aad8:	4a1b      	ldr	r2, [pc, #108]	; (800ab48 <HAL_GPIO_Init+0x300>)
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800aade:	4b1a      	ldr	r3, [pc, #104]	; (800ab48 <HAL_GPIO_Init+0x300>)
 800aae0:	68db      	ldr	r3, [r3, #12]
 800aae2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	43db      	mvns	r3, r3
 800aae8:	693a      	ldr	r2, [r7, #16]
 800aaea:	4013      	ands	r3, r2
 800aaec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	685b      	ldr	r3, [r3, #4]
 800aaf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d003      	beq.n	800ab02 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800aafa:	693a      	ldr	r2, [r7, #16]
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	4313      	orrs	r3, r2
 800ab00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800ab02:	4a11      	ldr	r2, [pc, #68]	; (800ab48 <HAL_GPIO_Init+0x300>)
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	681a      	ldr	r2, [r3, #0]
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	fa22 f303 	lsr.w	r3, r2, r3
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	f47f ae9d 	bne.w	800a858 <HAL_GPIO_Init+0x10>
  }
}
 800ab1e:	bf00      	nop
 800ab20:	371c      	adds	r7, #28
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr
 800ab2a:	bf00      	nop
 800ab2c:	40021000 	.word	0x40021000
 800ab30:	40010000 	.word	0x40010000
 800ab34:	48000400 	.word	0x48000400
 800ab38:	48000800 	.word	0x48000800
 800ab3c:	48000c00 	.word	0x48000c00
 800ab40:	48001000 	.word	0x48001000
 800ab44:	48001400 	.word	0x48001400
 800ab48:	40010400 	.word	0x40010400

0800ab4c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b087      	sub	sp, #28
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800ab56:	2300      	movs	r3, #0
 800ab58:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800ab5a:	e0bd      	b.n	800acd8 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800ab5c:	2201      	movs	r2, #1
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	fa02 f303 	lsl.w	r3, r2, r3
 800ab64:	683a      	ldr	r2, [r7, #0]
 800ab66:	4013      	ands	r3, r2
 800ab68:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	f000 80b0 	beq.w	800acd2 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800ab72:	4a60      	ldr	r2, [pc, #384]	; (800acf4 <HAL_GPIO_DeInit+0x1a8>)
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	089b      	lsrs	r3, r3, #2
 800ab78:	3302      	adds	r3, #2
 800ab7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab7e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	f003 0303 	and.w	r3, r3, #3
 800ab86:	009b      	lsls	r3, r3, #2
 800ab88:	220f      	movs	r2, #15
 800ab8a:	fa02 f303 	lsl.w	r3, r2, r3
 800ab8e:	68fa      	ldr	r2, [r7, #12]
 800ab90:	4013      	ands	r3, r2
 800ab92:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800ab9a:	d01f      	beq.n	800abdc <HAL_GPIO_DeInit+0x90>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	4a56      	ldr	r2, [pc, #344]	; (800acf8 <HAL_GPIO_DeInit+0x1ac>)
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d019      	beq.n	800abd8 <HAL_GPIO_DeInit+0x8c>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	4a55      	ldr	r2, [pc, #340]	; (800acfc <HAL_GPIO_DeInit+0x1b0>)
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d013      	beq.n	800abd4 <HAL_GPIO_DeInit+0x88>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	4a54      	ldr	r2, [pc, #336]	; (800ad00 <HAL_GPIO_DeInit+0x1b4>)
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d00d      	beq.n	800abd0 <HAL_GPIO_DeInit+0x84>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	4a53      	ldr	r2, [pc, #332]	; (800ad04 <HAL_GPIO_DeInit+0x1b8>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d007      	beq.n	800abcc <HAL_GPIO_DeInit+0x80>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	4a52      	ldr	r2, [pc, #328]	; (800ad08 <HAL_GPIO_DeInit+0x1bc>)
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d101      	bne.n	800abc8 <HAL_GPIO_DeInit+0x7c>
 800abc4:	2305      	movs	r3, #5
 800abc6:	e00a      	b.n	800abde <HAL_GPIO_DeInit+0x92>
 800abc8:	2306      	movs	r3, #6
 800abca:	e008      	b.n	800abde <HAL_GPIO_DeInit+0x92>
 800abcc:	2304      	movs	r3, #4
 800abce:	e006      	b.n	800abde <HAL_GPIO_DeInit+0x92>
 800abd0:	2303      	movs	r3, #3
 800abd2:	e004      	b.n	800abde <HAL_GPIO_DeInit+0x92>
 800abd4:	2302      	movs	r3, #2
 800abd6:	e002      	b.n	800abde <HAL_GPIO_DeInit+0x92>
 800abd8:	2301      	movs	r3, #1
 800abda:	e000      	b.n	800abde <HAL_GPIO_DeInit+0x92>
 800abdc:	2300      	movs	r3, #0
 800abde:	697a      	ldr	r2, [r7, #20]
 800abe0:	f002 0203 	and.w	r2, r2, #3
 800abe4:	0092      	lsls	r2, r2, #2
 800abe6:	4093      	lsls	r3, r2
 800abe8:	68fa      	ldr	r2, [r7, #12]
 800abea:	429a      	cmp	r2, r3
 800abec:	d132      	bne.n	800ac54 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800abee:	4b47      	ldr	r3, [pc, #284]	; (800ad0c <HAL_GPIO_DeInit+0x1c0>)
 800abf0:	681a      	ldr	r2, [r3, #0]
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	43db      	mvns	r3, r3
 800abf6:	4945      	ldr	r1, [pc, #276]	; (800ad0c <HAL_GPIO_DeInit+0x1c0>)
 800abf8:	4013      	ands	r3, r2
 800abfa:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800abfc:	4b43      	ldr	r3, [pc, #268]	; (800ad0c <HAL_GPIO_DeInit+0x1c0>)
 800abfe:	685a      	ldr	r2, [r3, #4]
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	43db      	mvns	r3, r3
 800ac04:	4941      	ldr	r1, [pc, #260]	; (800ad0c <HAL_GPIO_DeInit+0x1c0>)
 800ac06:	4013      	ands	r3, r2
 800ac08:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800ac0a:	4b40      	ldr	r3, [pc, #256]	; (800ad0c <HAL_GPIO_DeInit+0x1c0>)
 800ac0c:	689a      	ldr	r2, [r3, #8]
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	43db      	mvns	r3, r3
 800ac12:	493e      	ldr	r1, [pc, #248]	; (800ad0c <HAL_GPIO_DeInit+0x1c0>)
 800ac14:	4013      	ands	r3, r2
 800ac16:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800ac18:	4b3c      	ldr	r3, [pc, #240]	; (800ad0c <HAL_GPIO_DeInit+0x1c0>)
 800ac1a:	68da      	ldr	r2, [r3, #12]
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	43db      	mvns	r3, r3
 800ac20:	493a      	ldr	r1, [pc, #232]	; (800ad0c <HAL_GPIO_DeInit+0x1c0>)
 800ac22:	4013      	ands	r3, r2
 800ac24:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	f003 0303 	and.w	r3, r3, #3
 800ac2c:	009b      	lsls	r3, r3, #2
 800ac2e:	220f      	movs	r2, #15
 800ac30:	fa02 f303 	lsl.w	r3, r2, r3
 800ac34:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800ac36:	4a2f      	ldr	r2, [pc, #188]	; (800acf4 <HAL_GPIO_DeInit+0x1a8>)
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	089b      	lsrs	r3, r3, #2
 800ac3c:	3302      	adds	r3, #2
 800ac3e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	43da      	mvns	r2, r3
 800ac46:	482b      	ldr	r0, [pc, #172]	; (800acf4 <HAL_GPIO_DeInit+0x1a8>)
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	089b      	lsrs	r3, r3, #2
 800ac4c:	400a      	ands	r2, r1
 800ac4e:	3302      	adds	r3, #2
 800ac50:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681a      	ldr	r2, [r3, #0]
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	005b      	lsls	r3, r3, #1
 800ac5c:	2103      	movs	r1, #3
 800ac5e:	fa01 f303 	lsl.w	r3, r1, r3
 800ac62:	431a      	orrs	r2, r3
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 800ac68:	697b      	ldr	r3, [r7, #20]
 800ac6a:	08da      	lsrs	r2, r3, #3
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	3208      	adds	r2, #8
 800ac70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	f003 0307 	and.w	r3, r3, #7
 800ac7a:	009b      	lsls	r3, r3, #2
 800ac7c:	220f      	movs	r2, #15
 800ac7e:	fa02 f303 	lsl.w	r3, r2, r3
 800ac82:	43db      	mvns	r3, r3
 800ac84:	697a      	ldr	r2, [r7, #20]
 800ac86:	08d2      	lsrs	r2, r2, #3
 800ac88:	4019      	ands	r1, r3
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	3208      	adds	r2, #8
 800ac8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	68da      	ldr	r2, [r3, #12]
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	005b      	lsls	r3, r3, #1
 800ac9a:	2103      	movs	r1, #3
 800ac9c:	fa01 f303 	lsl.w	r3, r1, r3
 800aca0:	43db      	mvns	r3, r3
 800aca2:	401a      	ands	r2, r3
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	685a      	ldr	r2, [r3, #4]
 800acac:	2101      	movs	r1, #1
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	fa01 f303 	lsl.w	r3, r1, r3
 800acb4:	43db      	mvns	r3, r3
 800acb6:	401a      	ands	r2, r3
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	689a      	ldr	r2, [r3, #8]
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	005b      	lsls	r3, r3, #1
 800acc4:	2103      	movs	r1, #3
 800acc6:	fa01 f303 	lsl.w	r3, r1, r3
 800acca:	43db      	mvns	r3, r3
 800accc:	401a      	ands	r2, r3
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	609a      	str	r2, [r3, #8]
    }

    position++;
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	3301      	adds	r3, #1
 800acd6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 800acd8:	683a      	ldr	r2, [r7, #0]
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	fa22 f303 	lsr.w	r3, r2, r3
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	f47f af3b 	bne.w	800ab5c <HAL_GPIO_DeInit+0x10>
  }
}
 800ace6:	bf00      	nop
 800ace8:	371c      	adds	r7, #28
 800acea:	46bd      	mov	sp, r7
 800acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf0:	4770      	bx	lr
 800acf2:	bf00      	nop
 800acf4:	40010000 	.word	0x40010000
 800acf8:	48000400 	.word	0x48000400
 800acfc:	48000800 	.word	0x48000800
 800ad00:	48000c00 	.word	0x48000c00
 800ad04:	48001000 	.word	0x48001000
 800ad08:	48001400 	.word	0x48001400
 800ad0c:	40010400 	.word	0x40010400

0800ad10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b083      	sub	sp, #12
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
 800ad18:	460b      	mov	r3, r1
 800ad1a:	807b      	strh	r3, [r7, #2]
 800ad1c:	4613      	mov	r3, r2
 800ad1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800ad20:	787b      	ldrb	r3, [r7, #1]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d003      	beq.n	800ad2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800ad26:	887a      	ldrh	r2, [r7, #2]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800ad2c:	e002      	b.n	800ad34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800ad2e:	887a      	ldrh	r2, [r7, #2]
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	629a      	str	r2, [r3, #40]	; 0x28
}
 800ad34:	bf00      	nop
 800ad36:	370c      	adds	r7, #12
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr

0800ad40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800ad40:	b480      	push	{r7}
 800ad42:	b085      	sub	sp, #20
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d141      	bne.n	800add2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800ad4e:	4b4b      	ldr	r3, [pc, #300]	; (800ae7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ad56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad5a:	d131      	bne.n	800adc0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ad5c:	4b47      	ldr	r3, [pc, #284]	; (800ae7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ad5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad62:	4a46      	ldr	r2, [pc, #280]	; (800ae7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ad64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800ad6c:	4b43      	ldr	r3, [pc, #268]	; (800ae7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ad74:	4a41      	ldr	r2, [pc, #260]	; (800ae7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ad76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ad7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800ad7c:	4b40      	ldr	r3, [pc, #256]	; (800ae80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	2232      	movs	r2, #50	; 0x32
 800ad82:	fb02 f303 	mul.w	r3, r2, r3
 800ad86:	4a3f      	ldr	r2, [pc, #252]	; (800ae84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800ad88:	fba2 2303 	umull	r2, r3, r2, r3
 800ad8c:	0c9b      	lsrs	r3, r3, #18
 800ad8e:	3301      	adds	r3, #1
 800ad90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ad92:	e002      	b.n	800ad9a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	3b01      	subs	r3, #1
 800ad98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ad9a:	4b38      	ldr	r3, [pc, #224]	; (800ae7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ad9c:	695b      	ldr	r3, [r3, #20]
 800ad9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ada2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ada6:	d102      	bne.n	800adae <HAL_PWREx_ControlVoltageScaling+0x6e>
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d1f2      	bne.n	800ad94 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800adae:	4b33      	ldr	r3, [pc, #204]	; (800ae7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800adb0:	695b      	ldr	r3, [r3, #20]
 800adb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800adb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800adba:	d158      	bne.n	800ae6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800adbc:	2303      	movs	r3, #3
 800adbe:	e057      	b.n	800ae70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800adc0:	4b2e      	ldr	r3, [pc, #184]	; (800ae7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800adc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800adc6:	4a2d      	ldr	r2, [pc, #180]	; (800ae7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800adc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800adcc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800add0:	e04d      	b.n	800ae6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800add8:	d141      	bne.n	800ae5e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800adda:	4b28      	ldr	r3, [pc, #160]	; (800ae7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ade2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ade6:	d131      	bne.n	800ae4c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ade8:	4b24      	ldr	r3, [pc, #144]	; (800ae7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800adea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800adee:	4a23      	ldr	r2, [pc, #140]	; (800ae7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800adf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800adf4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800adf8:	4b20      	ldr	r3, [pc, #128]	; (800ae7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ae00:	4a1e      	ldr	r2, [pc, #120]	; (800ae7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ae02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ae06:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800ae08:	4b1d      	ldr	r3, [pc, #116]	; (800ae80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	2232      	movs	r2, #50	; 0x32
 800ae0e:	fb02 f303 	mul.w	r3, r2, r3
 800ae12:	4a1c      	ldr	r2, [pc, #112]	; (800ae84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800ae14:	fba2 2303 	umull	r2, r3, r2, r3
 800ae18:	0c9b      	lsrs	r3, r3, #18
 800ae1a:	3301      	adds	r3, #1
 800ae1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ae1e:	e002      	b.n	800ae26 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	3b01      	subs	r3, #1
 800ae24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ae26:	4b15      	ldr	r3, [pc, #84]	; (800ae7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ae28:	695b      	ldr	r3, [r3, #20]
 800ae2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae32:	d102      	bne.n	800ae3a <HAL_PWREx_ControlVoltageScaling+0xfa>
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d1f2      	bne.n	800ae20 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800ae3a:	4b10      	ldr	r3, [pc, #64]	; (800ae7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ae3c:	695b      	ldr	r3, [r3, #20]
 800ae3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae46:	d112      	bne.n	800ae6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800ae48:	2303      	movs	r3, #3
 800ae4a:	e011      	b.n	800ae70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ae4c:	4b0b      	ldr	r3, [pc, #44]	; (800ae7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ae4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae52:	4a0a      	ldr	r2, [pc, #40]	; (800ae7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ae54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800ae5c:	e007      	b.n	800ae6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800ae5e:	4b07      	ldr	r3, [pc, #28]	; (800ae7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ae66:	4a05      	ldr	r2, [pc, #20]	; (800ae7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ae68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ae6c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800ae6e:	2300      	movs	r3, #0
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	3714      	adds	r7, #20
 800ae74:	46bd      	mov	sp, r7
 800ae76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7a:	4770      	bx	lr
 800ae7c:	40007000 	.word	0x40007000
 800ae80:	20000c30 	.word	0x20000c30
 800ae84:	431bde83 	.word	0x431bde83

0800ae88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b088      	sub	sp, #32
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d101      	bne.n	800ae9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ae96:	2301      	movs	r3, #1
 800ae98:	e308      	b.n	800b4ac <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f003 0301 	and.w	r3, r3, #1
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d075      	beq.n	800af92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aea6:	4ba3      	ldr	r3, [pc, #652]	; (800b134 <HAL_RCC_OscConfig+0x2ac>)
 800aea8:	689b      	ldr	r3, [r3, #8]
 800aeaa:	f003 030c 	and.w	r3, r3, #12
 800aeae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800aeb0:	4ba0      	ldr	r3, [pc, #640]	; (800b134 <HAL_RCC_OscConfig+0x2ac>)
 800aeb2:	68db      	ldr	r3, [r3, #12]
 800aeb4:	f003 0303 	and.w	r3, r3, #3
 800aeb8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800aeba:	69bb      	ldr	r3, [r7, #24]
 800aebc:	2b0c      	cmp	r3, #12
 800aebe:	d102      	bne.n	800aec6 <HAL_RCC_OscConfig+0x3e>
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	2b03      	cmp	r3, #3
 800aec4:	d002      	beq.n	800aecc <HAL_RCC_OscConfig+0x44>
 800aec6:	69bb      	ldr	r3, [r7, #24]
 800aec8:	2b08      	cmp	r3, #8
 800aeca:	d10b      	bne.n	800aee4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aecc:	4b99      	ldr	r3, [pc, #612]	; (800b134 <HAL_RCC_OscConfig+0x2ac>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d05b      	beq.n	800af90 <HAL_RCC_OscConfig+0x108>
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	685b      	ldr	r3, [r3, #4]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d157      	bne.n	800af90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800aee0:	2301      	movs	r3, #1
 800aee2:	e2e3      	b.n	800b4ac <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aeec:	d106      	bne.n	800aefc <HAL_RCC_OscConfig+0x74>
 800aeee:	4b91      	ldr	r3, [pc, #580]	; (800b134 <HAL_RCC_OscConfig+0x2ac>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	4a90      	ldr	r2, [pc, #576]	; (800b134 <HAL_RCC_OscConfig+0x2ac>)
 800aef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aef8:	6013      	str	r3, [r2, #0]
 800aefa:	e01d      	b.n	800af38 <HAL_RCC_OscConfig+0xb0>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	685b      	ldr	r3, [r3, #4]
 800af00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800af04:	d10c      	bne.n	800af20 <HAL_RCC_OscConfig+0x98>
 800af06:	4b8b      	ldr	r3, [pc, #556]	; (800b134 <HAL_RCC_OscConfig+0x2ac>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	4a8a      	ldr	r2, [pc, #552]	; (800b134 <HAL_RCC_OscConfig+0x2ac>)
 800af0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800af10:	6013      	str	r3, [r2, #0]
 800af12:	4b88      	ldr	r3, [pc, #544]	; (800b134 <HAL_RCC_OscConfig+0x2ac>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4a87      	ldr	r2, [pc, #540]	; (800b134 <HAL_RCC_OscConfig+0x2ac>)
 800af18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af1c:	6013      	str	r3, [r2, #0]
 800af1e:	e00b      	b.n	800af38 <HAL_RCC_OscConfig+0xb0>
 800af20:	4b84      	ldr	r3, [pc, #528]	; (800b134 <HAL_RCC_OscConfig+0x2ac>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	4a83      	ldr	r2, [pc, #524]	; (800b134 <HAL_RCC_OscConfig+0x2ac>)
 800af26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af2a:	6013      	str	r3, [r2, #0]
 800af2c:	4b81      	ldr	r3, [pc, #516]	; (800b134 <HAL_RCC_OscConfig+0x2ac>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	4a80      	ldr	r2, [pc, #512]	; (800b134 <HAL_RCC_OscConfig+0x2ac>)
 800af32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800af36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d013      	beq.n	800af68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af40:	f7fd f8f4 	bl	800812c <HAL_GetTick>
 800af44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800af46:	e008      	b.n	800af5a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800af48:	f7fd f8f0 	bl	800812c <HAL_GetTick>
 800af4c:	4602      	mov	r2, r0
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	1ad3      	subs	r3, r2, r3
 800af52:	2b64      	cmp	r3, #100	; 0x64
 800af54:	d901      	bls.n	800af5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800af56:	2303      	movs	r3, #3
 800af58:	e2a8      	b.n	800b4ac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800af5a:	4b76      	ldr	r3, [pc, #472]	; (800b134 <HAL_RCC_OscConfig+0x2ac>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af62:	2b00      	cmp	r3, #0
 800af64:	d0f0      	beq.n	800af48 <HAL_RCC_OscConfig+0xc0>
 800af66:	e014      	b.n	800af92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af68:	f7fd f8e0 	bl	800812c <HAL_GetTick>
 800af6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800af6e:	e008      	b.n	800af82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800af70:	f7fd f8dc 	bl	800812c <HAL_GetTick>
 800af74:	4602      	mov	r2, r0
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	1ad3      	subs	r3, r2, r3
 800af7a:	2b64      	cmp	r3, #100	; 0x64
 800af7c:	d901      	bls.n	800af82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800af7e:	2303      	movs	r3, #3
 800af80:	e294      	b.n	800b4ac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800af82:	4b6c      	ldr	r3, [pc, #432]	; (800b134 <HAL_RCC_OscConfig+0x2ac>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d1f0      	bne.n	800af70 <HAL_RCC_OscConfig+0xe8>
 800af8e:	e000      	b.n	800af92 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	f003 0302 	and.w	r3, r3, #2
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d075      	beq.n	800b08a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800af9e:	4b65      	ldr	r3, [pc, #404]	; (800b134 <HAL_RCC_OscConfig+0x2ac>)
 800afa0:	689b      	ldr	r3, [r3, #8]
 800afa2:	f003 030c 	and.w	r3, r3, #12
 800afa6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800afa8:	4b62      	ldr	r3, [pc, #392]	; (800b134 <HAL_RCC_OscConfig+0x2ac>)
 800afaa:	68db      	ldr	r3, [r3, #12]
 800afac:	f003 0303 	and.w	r3, r3, #3
 800afb0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800afb2:	69bb      	ldr	r3, [r7, #24]
 800afb4:	2b0c      	cmp	r3, #12
 800afb6:	d102      	bne.n	800afbe <HAL_RCC_OscConfig+0x136>
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	2b02      	cmp	r3, #2
 800afbc:	d002      	beq.n	800afc4 <HAL_RCC_OscConfig+0x13c>
 800afbe:	69bb      	ldr	r3, [r7, #24]
 800afc0:	2b04      	cmp	r3, #4
 800afc2:	d11f      	bne.n	800b004 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800afc4:	4b5b      	ldr	r3, [pc, #364]	; (800b134 <HAL_RCC_OscConfig+0x2ac>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d005      	beq.n	800afdc <HAL_RCC_OscConfig+0x154>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	68db      	ldr	r3, [r3, #12]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d101      	bne.n	800afdc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800afd8:	2301      	movs	r3, #1
 800afda:	e267      	b.n	800b4ac <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800afdc:	4b55      	ldr	r3, [pc, #340]	; (800b134 <HAL_RCC_OscConfig+0x2ac>)
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	691b      	ldr	r3, [r3, #16]
 800afe8:	061b      	lsls	r3, r3, #24
 800afea:	4952      	ldr	r1, [pc, #328]	; (800b134 <HAL_RCC_OscConfig+0x2ac>)
 800afec:	4313      	orrs	r3, r2
 800afee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800aff0:	4b51      	ldr	r3, [pc, #324]	; (800b138 <HAL_RCC_OscConfig+0x2b0>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	4618      	mov	r0, r3
 800aff6:	f7fd f84d 	bl	8008094 <HAL_InitTick>
 800affa:	4603      	mov	r3, r0
 800affc:	2b00      	cmp	r3, #0
 800affe:	d043      	beq.n	800b088 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800b000:	2301      	movs	r3, #1
 800b002:	e253      	b.n	800b4ac <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	68db      	ldr	r3, [r3, #12]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d023      	beq.n	800b054 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b00c:	4b49      	ldr	r3, [pc, #292]	; (800b134 <HAL_RCC_OscConfig+0x2ac>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	4a48      	ldr	r2, [pc, #288]	; (800b134 <HAL_RCC_OscConfig+0x2ac>)
 800b012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b016:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b018:	f7fd f888 	bl	800812c <HAL_GetTick>
 800b01c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b01e:	e008      	b.n	800b032 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b020:	f7fd f884 	bl	800812c <HAL_GetTick>
 800b024:	4602      	mov	r2, r0
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	1ad3      	subs	r3, r2, r3
 800b02a:	2b02      	cmp	r3, #2
 800b02c:	d901      	bls.n	800b032 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b02e:	2303      	movs	r3, #3
 800b030:	e23c      	b.n	800b4ac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b032:	4b40      	ldr	r3, [pc, #256]	; (800b134 <HAL_RCC_OscConfig+0x2ac>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d0f0      	beq.n	800b020 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b03e:	4b3d      	ldr	r3, [pc, #244]	; (800b134 <HAL_RCC_OscConfig+0x2ac>)
 800b040:	685b      	ldr	r3, [r3, #4]
 800b042:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	691b      	ldr	r3, [r3, #16]
 800b04a:	061b      	lsls	r3, r3, #24
 800b04c:	4939      	ldr	r1, [pc, #228]	; (800b134 <HAL_RCC_OscConfig+0x2ac>)
 800b04e:	4313      	orrs	r3, r2
 800b050:	604b      	str	r3, [r1, #4]
 800b052:	e01a      	b.n	800b08a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b054:	4b37      	ldr	r3, [pc, #220]	; (800b134 <HAL_RCC_OscConfig+0x2ac>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	4a36      	ldr	r2, [pc, #216]	; (800b134 <HAL_RCC_OscConfig+0x2ac>)
 800b05a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b05e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b060:	f7fd f864 	bl	800812c <HAL_GetTick>
 800b064:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b066:	e008      	b.n	800b07a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b068:	f7fd f860 	bl	800812c <HAL_GetTick>
 800b06c:	4602      	mov	r2, r0
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	1ad3      	subs	r3, r2, r3
 800b072:	2b02      	cmp	r3, #2
 800b074:	d901      	bls.n	800b07a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800b076:	2303      	movs	r3, #3
 800b078:	e218      	b.n	800b4ac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b07a:	4b2e      	ldr	r3, [pc, #184]	; (800b134 <HAL_RCC_OscConfig+0x2ac>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b082:	2b00      	cmp	r3, #0
 800b084:	d1f0      	bne.n	800b068 <HAL_RCC_OscConfig+0x1e0>
 800b086:	e000      	b.n	800b08a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b088:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f003 0308 	and.w	r3, r3, #8
 800b092:	2b00      	cmp	r3, #0
 800b094:	d03c      	beq.n	800b110 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	695b      	ldr	r3, [r3, #20]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d01c      	beq.n	800b0d8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b09e:	4b25      	ldr	r3, [pc, #148]	; (800b134 <HAL_RCC_OscConfig+0x2ac>)
 800b0a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b0a4:	4a23      	ldr	r2, [pc, #140]	; (800b134 <HAL_RCC_OscConfig+0x2ac>)
 800b0a6:	f043 0301 	orr.w	r3, r3, #1
 800b0aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b0ae:	f7fd f83d 	bl	800812c <HAL_GetTick>
 800b0b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b0b4:	e008      	b.n	800b0c8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b0b6:	f7fd f839 	bl	800812c <HAL_GetTick>
 800b0ba:	4602      	mov	r2, r0
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	1ad3      	subs	r3, r2, r3
 800b0c0:	2b02      	cmp	r3, #2
 800b0c2:	d901      	bls.n	800b0c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b0c4:	2303      	movs	r3, #3
 800b0c6:	e1f1      	b.n	800b4ac <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b0c8:	4b1a      	ldr	r3, [pc, #104]	; (800b134 <HAL_RCC_OscConfig+0x2ac>)
 800b0ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b0ce:	f003 0302 	and.w	r3, r3, #2
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d0ef      	beq.n	800b0b6 <HAL_RCC_OscConfig+0x22e>
 800b0d6:	e01b      	b.n	800b110 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b0d8:	4b16      	ldr	r3, [pc, #88]	; (800b134 <HAL_RCC_OscConfig+0x2ac>)
 800b0da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b0de:	4a15      	ldr	r2, [pc, #84]	; (800b134 <HAL_RCC_OscConfig+0x2ac>)
 800b0e0:	f023 0301 	bic.w	r3, r3, #1
 800b0e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b0e8:	f7fd f820 	bl	800812c <HAL_GetTick>
 800b0ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b0ee:	e008      	b.n	800b102 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b0f0:	f7fd f81c 	bl	800812c <HAL_GetTick>
 800b0f4:	4602      	mov	r2, r0
 800b0f6:	693b      	ldr	r3, [r7, #16]
 800b0f8:	1ad3      	subs	r3, r2, r3
 800b0fa:	2b02      	cmp	r3, #2
 800b0fc:	d901      	bls.n	800b102 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800b0fe:	2303      	movs	r3, #3
 800b100:	e1d4      	b.n	800b4ac <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b102:	4b0c      	ldr	r3, [pc, #48]	; (800b134 <HAL_RCC_OscConfig+0x2ac>)
 800b104:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b108:	f003 0302 	and.w	r3, r3, #2
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d1ef      	bne.n	800b0f0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f003 0304 	and.w	r3, r3, #4
 800b118:	2b00      	cmp	r3, #0
 800b11a:	f000 80ab 	beq.w	800b274 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b11e:	2300      	movs	r3, #0
 800b120:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b122:	4b04      	ldr	r3, [pc, #16]	; (800b134 <HAL_RCC_OscConfig+0x2ac>)
 800b124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d106      	bne.n	800b13c <HAL_RCC_OscConfig+0x2b4>
 800b12e:	2301      	movs	r3, #1
 800b130:	e005      	b.n	800b13e <HAL_RCC_OscConfig+0x2b6>
 800b132:	bf00      	nop
 800b134:	40021000 	.word	0x40021000
 800b138:	20000c34 	.word	0x20000c34
 800b13c:	2300      	movs	r3, #0
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d00d      	beq.n	800b15e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b142:	4baf      	ldr	r3, [pc, #700]	; (800b400 <HAL_RCC_OscConfig+0x578>)
 800b144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b146:	4aae      	ldr	r2, [pc, #696]	; (800b400 <HAL_RCC_OscConfig+0x578>)
 800b148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b14c:	6593      	str	r3, [r2, #88]	; 0x58
 800b14e:	4bac      	ldr	r3, [pc, #688]	; (800b400 <HAL_RCC_OscConfig+0x578>)
 800b150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b156:	60fb      	str	r3, [r7, #12]
 800b158:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b15a:	2301      	movs	r3, #1
 800b15c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b15e:	4ba9      	ldr	r3, [pc, #676]	; (800b404 <HAL_RCC_OscConfig+0x57c>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b166:	2b00      	cmp	r3, #0
 800b168:	d118      	bne.n	800b19c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b16a:	4ba6      	ldr	r3, [pc, #664]	; (800b404 <HAL_RCC_OscConfig+0x57c>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	4aa5      	ldr	r2, [pc, #660]	; (800b404 <HAL_RCC_OscConfig+0x57c>)
 800b170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b174:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b176:	f7fc ffd9 	bl	800812c <HAL_GetTick>
 800b17a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b17c:	e008      	b.n	800b190 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b17e:	f7fc ffd5 	bl	800812c <HAL_GetTick>
 800b182:	4602      	mov	r2, r0
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	1ad3      	subs	r3, r2, r3
 800b188:	2b02      	cmp	r3, #2
 800b18a:	d901      	bls.n	800b190 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800b18c:	2303      	movs	r3, #3
 800b18e:	e18d      	b.n	800b4ac <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b190:	4b9c      	ldr	r3, [pc, #624]	; (800b404 <HAL_RCC_OscConfig+0x57c>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d0f0      	beq.n	800b17e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	689b      	ldr	r3, [r3, #8]
 800b1a0:	2b01      	cmp	r3, #1
 800b1a2:	d108      	bne.n	800b1b6 <HAL_RCC_OscConfig+0x32e>
 800b1a4:	4b96      	ldr	r3, [pc, #600]	; (800b400 <HAL_RCC_OscConfig+0x578>)
 800b1a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1aa:	4a95      	ldr	r2, [pc, #596]	; (800b400 <HAL_RCC_OscConfig+0x578>)
 800b1ac:	f043 0301 	orr.w	r3, r3, #1
 800b1b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b1b4:	e024      	b.n	800b200 <HAL_RCC_OscConfig+0x378>
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	689b      	ldr	r3, [r3, #8]
 800b1ba:	2b05      	cmp	r3, #5
 800b1bc:	d110      	bne.n	800b1e0 <HAL_RCC_OscConfig+0x358>
 800b1be:	4b90      	ldr	r3, [pc, #576]	; (800b400 <HAL_RCC_OscConfig+0x578>)
 800b1c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1c4:	4a8e      	ldr	r2, [pc, #568]	; (800b400 <HAL_RCC_OscConfig+0x578>)
 800b1c6:	f043 0304 	orr.w	r3, r3, #4
 800b1ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b1ce:	4b8c      	ldr	r3, [pc, #560]	; (800b400 <HAL_RCC_OscConfig+0x578>)
 800b1d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1d4:	4a8a      	ldr	r2, [pc, #552]	; (800b400 <HAL_RCC_OscConfig+0x578>)
 800b1d6:	f043 0301 	orr.w	r3, r3, #1
 800b1da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b1de:	e00f      	b.n	800b200 <HAL_RCC_OscConfig+0x378>
 800b1e0:	4b87      	ldr	r3, [pc, #540]	; (800b400 <HAL_RCC_OscConfig+0x578>)
 800b1e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1e6:	4a86      	ldr	r2, [pc, #536]	; (800b400 <HAL_RCC_OscConfig+0x578>)
 800b1e8:	f023 0301 	bic.w	r3, r3, #1
 800b1ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b1f0:	4b83      	ldr	r3, [pc, #524]	; (800b400 <HAL_RCC_OscConfig+0x578>)
 800b1f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1f6:	4a82      	ldr	r2, [pc, #520]	; (800b400 <HAL_RCC_OscConfig+0x578>)
 800b1f8:	f023 0304 	bic.w	r3, r3, #4
 800b1fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	689b      	ldr	r3, [r3, #8]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d016      	beq.n	800b236 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b208:	f7fc ff90 	bl	800812c <HAL_GetTick>
 800b20c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b20e:	e00a      	b.n	800b226 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b210:	f7fc ff8c 	bl	800812c <HAL_GetTick>
 800b214:	4602      	mov	r2, r0
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	1ad3      	subs	r3, r2, r3
 800b21a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b21e:	4293      	cmp	r3, r2
 800b220:	d901      	bls.n	800b226 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800b222:	2303      	movs	r3, #3
 800b224:	e142      	b.n	800b4ac <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b226:	4b76      	ldr	r3, [pc, #472]	; (800b400 <HAL_RCC_OscConfig+0x578>)
 800b228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b22c:	f003 0302 	and.w	r3, r3, #2
 800b230:	2b00      	cmp	r3, #0
 800b232:	d0ed      	beq.n	800b210 <HAL_RCC_OscConfig+0x388>
 800b234:	e015      	b.n	800b262 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b236:	f7fc ff79 	bl	800812c <HAL_GetTick>
 800b23a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b23c:	e00a      	b.n	800b254 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b23e:	f7fc ff75 	bl	800812c <HAL_GetTick>
 800b242:	4602      	mov	r2, r0
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	1ad3      	subs	r3, r2, r3
 800b248:	f241 3288 	movw	r2, #5000	; 0x1388
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d901      	bls.n	800b254 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800b250:	2303      	movs	r3, #3
 800b252:	e12b      	b.n	800b4ac <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b254:	4b6a      	ldr	r3, [pc, #424]	; (800b400 <HAL_RCC_OscConfig+0x578>)
 800b256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b25a:	f003 0302 	and.w	r3, r3, #2
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d1ed      	bne.n	800b23e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b262:	7ffb      	ldrb	r3, [r7, #31]
 800b264:	2b01      	cmp	r3, #1
 800b266:	d105      	bne.n	800b274 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b268:	4b65      	ldr	r3, [pc, #404]	; (800b400 <HAL_RCC_OscConfig+0x578>)
 800b26a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b26c:	4a64      	ldr	r2, [pc, #400]	; (800b400 <HAL_RCC_OscConfig+0x578>)
 800b26e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b272:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f003 0320 	and.w	r3, r3, #32
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d03c      	beq.n	800b2fa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	699b      	ldr	r3, [r3, #24]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d01c      	beq.n	800b2c2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b288:	4b5d      	ldr	r3, [pc, #372]	; (800b400 <HAL_RCC_OscConfig+0x578>)
 800b28a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b28e:	4a5c      	ldr	r2, [pc, #368]	; (800b400 <HAL_RCC_OscConfig+0x578>)
 800b290:	f043 0301 	orr.w	r3, r3, #1
 800b294:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b298:	f7fc ff48 	bl	800812c <HAL_GetTick>
 800b29c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b29e:	e008      	b.n	800b2b2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b2a0:	f7fc ff44 	bl	800812c <HAL_GetTick>
 800b2a4:	4602      	mov	r2, r0
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	1ad3      	subs	r3, r2, r3
 800b2aa:	2b02      	cmp	r3, #2
 800b2ac:	d901      	bls.n	800b2b2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800b2ae:	2303      	movs	r3, #3
 800b2b0:	e0fc      	b.n	800b4ac <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b2b2:	4b53      	ldr	r3, [pc, #332]	; (800b400 <HAL_RCC_OscConfig+0x578>)
 800b2b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b2b8:	f003 0302 	and.w	r3, r3, #2
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d0ef      	beq.n	800b2a0 <HAL_RCC_OscConfig+0x418>
 800b2c0:	e01b      	b.n	800b2fa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b2c2:	4b4f      	ldr	r3, [pc, #316]	; (800b400 <HAL_RCC_OscConfig+0x578>)
 800b2c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b2c8:	4a4d      	ldr	r2, [pc, #308]	; (800b400 <HAL_RCC_OscConfig+0x578>)
 800b2ca:	f023 0301 	bic.w	r3, r3, #1
 800b2ce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b2d2:	f7fc ff2b 	bl	800812c <HAL_GetTick>
 800b2d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b2d8:	e008      	b.n	800b2ec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b2da:	f7fc ff27 	bl	800812c <HAL_GetTick>
 800b2de:	4602      	mov	r2, r0
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	1ad3      	subs	r3, r2, r3
 800b2e4:	2b02      	cmp	r3, #2
 800b2e6:	d901      	bls.n	800b2ec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800b2e8:	2303      	movs	r3, #3
 800b2ea:	e0df      	b.n	800b4ac <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b2ec:	4b44      	ldr	r3, [pc, #272]	; (800b400 <HAL_RCC_OscConfig+0x578>)
 800b2ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b2f2:	f003 0302 	and.w	r3, r3, #2
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d1ef      	bne.n	800b2da <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	69db      	ldr	r3, [r3, #28]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	f000 80d3 	beq.w	800b4aa <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b304:	4b3e      	ldr	r3, [pc, #248]	; (800b400 <HAL_RCC_OscConfig+0x578>)
 800b306:	689b      	ldr	r3, [r3, #8]
 800b308:	f003 030c 	and.w	r3, r3, #12
 800b30c:	2b0c      	cmp	r3, #12
 800b30e:	f000 808d 	beq.w	800b42c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	69db      	ldr	r3, [r3, #28]
 800b316:	2b02      	cmp	r3, #2
 800b318:	d15a      	bne.n	800b3d0 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b31a:	4b39      	ldr	r3, [pc, #228]	; (800b400 <HAL_RCC_OscConfig+0x578>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	4a38      	ldr	r2, [pc, #224]	; (800b400 <HAL_RCC_OscConfig+0x578>)
 800b320:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b324:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b326:	f7fc ff01 	bl	800812c <HAL_GetTick>
 800b32a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b32c:	e008      	b.n	800b340 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b32e:	f7fc fefd 	bl	800812c <HAL_GetTick>
 800b332:	4602      	mov	r2, r0
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	1ad3      	subs	r3, r2, r3
 800b338:	2b02      	cmp	r3, #2
 800b33a:	d901      	bls.n	800b340 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800b33c:	2303      	movs	r3, #3
 800b33e:	e0b5      	b.n	800b4ac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b340:	4b2f      	ldr	r3, [pc, #188]	; (800b400 <HAL_RCC_OscConfig+0x578>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d1f0      	bne.n	800b32e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b34c:	4b2c      	ldr	r3, [pc, #176]	; (800b400 <HAL_RCC_OscConfig+0x578>)
 800b34e:	68da      	ldr	r2, [r3, #12]
 800b350:	4b2d      	ldr	r3, [pc, #180]	; (800b408 <HAL_RCC_OscConfig+0x580>)
 800b352:	4013      	ands	r3, r2
 800b354:	687a      	ldr	r2, [r7, #4]
 800b356:	6a11      	ldr	r1, [r2, #32]
 800b358:	687a      	ldr	r2, [r7, #4]
 800b35a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b35c:	3a01      	subs	r2, #1
 800b35e:	0112      	lsls	r2, r2, #4
 800b360:	4311      	orrs	r1, r2
 800b362:	687a      	ldr	r2, [r7, #4]
 800b364:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800b366:	0212      	lsls	r2, r2, #8
 800b368:	4311      	orrs	r1, r2
 800b36a:	687a      	ldr	r2, [r7, #4]
 800b36c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b36e:	0852      	lsrs	r2, r2, #1
 800b370:	3a01      	subs	r2, #1
 800b372:	0552      	lsls	r2, r2, #21
 800b374:	4311      	orrs	r1, r2
 800b376:	687a      	ldr	r2, [r7, #4]
 800b378:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b37a:	0852      	lsrs	r2, r2, #1
 800b37c:	3a01      	subs	r2, #1
 800b37e:	0652      	lsls	r2, r2, #25
 800b380:	4311      	orrs	r1, r2
 800b382:	687a      	ldr	r2, [r7, #4]
 800b384:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b386:	06d2      	lsls	r2, r2, #27
 800b388:	430a      	orrs	r2, r1
 800b38a:	491d      	ldr	r1, [pc, #116]	; (800b400 <HAL_RCC_OscConfig+0x578>)
 800b38c:	4313      	orrs	r3, r2
 800b38e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b390:	4b1b      	ldr	r3, [pc, #108]	; (800b400 <HAL_RCC_OscConfig+0x578>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	4a1a      	ldr	r2, [pc, #104]	; (800b400 <HAL_RCC_OscConfig+0x578>)
 800b396:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b39a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b39c:	4b18      	ldr	r3, [pc, #96]	; (800b400 <HAL_RCC_OscConfig+0x578>)
 800b39e:	68db      	ldr	r3, [r3, #12]
 800b3a0:	4a17      	ldr	r2, [pc, #92]	; (800b400 <HAL_RCC_OscConfig+0x578>)
 800b3a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b3a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3a8:	f7fc fec0 	bl	800812c <HAL_GetTick>
 800b3ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b3ae:	e008      	b.n	800b3c2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b3b0:	f7fc febc 	bl	800812c <HAL_GetTick>
 800b3b4:	4602      	mov	r2, r0
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	1ad3      	subs	r3, r2, r3
 800b3ba:	2b02      	cmp	r3, #2
 800b3bc:	d901      	bls.n	800b3c2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800b3be:	2303      	movs	r3, #3
 800b3c0:	e074      	b.n	800b4ac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b3c2:	4b0f      	ldr	r3, [pc, #60]	; (800b400 <HAL_RCC_OscConfig+0x578>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d0f0      	beq.n	800b3b0 <HAL_RCC_OscConfig+0x528>
 800b3ce:	e06c      	b.n	800b4aa <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b3d0:	4b0b      	ldr	r3, [pc, #44]	; (800b400 <HAL_RCC_OscConfig+0x578>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	4a0a      	ldr	r2, [pc, #40]	; (800b400 <HAL_RCC_OscConfig+0x578>)
 800b3d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b3da:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800b3dc:	4b08      	ldr	r3, [pc, #32]	; (800b400 <HAL_RCC_OscConfig+0x578>)
 800b3de:	68db      	ldr	r3, [r3, #12]
 800b3e0:	4a07      	ldr	r2, [pc, #28]	; (800b400 <HAL_RCC_OscConfig+0x578>)
 800b3e2:	f023 0303 	bic.w	r3, r3, #3
 800b3e6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800b3e8:	4b05      	ldr	r3, [pc, #20]	; (800b400 <HAL_RCC_OscConfig+0x578>)
 800b3ea:	68db      	ldr	r3, [r3, #12]
 800b3ec:	4a04      	ldr	r2, [pc, #16]	; (800b400 <HAL_RCC_OscConfig+0x578>)
 800b3ee:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800b3f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b3f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3f8:	f7fc fe98 	bl	800812c <HAL_GetTick>
 800b3fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b3fe:	e00e      	b.n	800b41e <HAL_RCC_OscConfig+0x596>
 800b400:	40021000 	.word	0x40021000
 800b404:	40007000 	.word	0x40007000
 800b408:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b40c:	f7fc fe8e 	bl	800812c <HAL_GetTick>
 800b410:	4602      	mov	r2, r0
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	1ad3      	subs	r3, r2, r3
 800b416:	2b02      	cmp	r3, #2
 800b418:	d901      	bls.n	800b41e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800b41a:	2303      	movs	r3, #3
 800b41c:	e046      	b.n	800b4ac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b41e:	4b25      	ldr	r3, [pc, #148]	; (800b4b4 <HAL_RCC_OscConfig+0x62c>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b426:	2b00      	cmp	r3, #0
 800b428:	d1f0      	bne.n	800b40c <HAL_RCC_OscConfig+0x584>
 800b42a:	e03e      	b.n	800b4aa <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	69db      	ldr	r3, [r3, #28]
 800b430:	2b01      	cmp	r3, #1
 800b432:	d101      	bne.n	800b438 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800b434:	2301      	movs	r3, #1
 800b436:	e039      	b.n	800b4ac <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800b438:	4b1e      	ldr	r3, [pc, #120]	; (800b4b4 <HAL_RCC_OscConfig+0x62c>)
 800b43a:	68db      	ldr	r3, [r3, #12]
 800b43c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	f003 0203 	and.w	r2, r3, #3
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6a1b      	ldr	r3, [r3, #32]
 800b448:	429a      	cmp	r2, r3
 800b44a:	d12c      	bne.n	800b4a6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b456:	3b01      	subs	r3, #1
 800b458:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b45a:	429a      	cmp	r2, r3
 800b45c:	d123      	bne.n	800b4a6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b45e:	697b      	ldr	r3, [r7, #20]
 800b460:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b468:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b46a:	429a      	cmp	r2, r3
 800b46c:	d11b      	bne.n	800b4a6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b478:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b47a:	429a      	cmp	r2, r3
 800b47c:	d113      	bne.n	800b4a6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b488:	085b      	lsrs	r3, r3, #1
 800b48a:	3b01      	subs	r3, #1
 800b48c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b48e:	429a      	cmp	r2, r3
 800b490:	d109      	bne.n	800b4a6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b49c:	085b      	lsrs	r3, r3, #1
 800b49e:	3b01      	subs	r3, #1
 800b4a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b4a2:	429a      	cmp	r2, r3
 800b4a4:	d001      	beq.n	800b4aa <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	e000      	b.n	800b4ac <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800b4aa:	2300      	movs	r3, #0
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3720      	adds	r7, #32
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}
 800b4b4:	40021000 	.word	0x40021000

0800b4b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b086      	sub	sp, #24
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d101      	bne.n	800b4d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	e11e      	b.n	800b70e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b4d0:	4b91      	ldr	r3, [pc, #580]	; (800b718 <HAL_RCC_ClockConfig+0x260>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f003 030f 	and.w	r3, r3, #15
 800b4d8:	683a      	ldr	r2, [r7, #0]
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	d910      	bls.n	800b500 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b4de:	4b8e      	ldr	r3, [pc, #568]	; (800b718 <HAL_RCC_ClockConfig+0x260>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f023 020f 	bic.w	r2, r3, #15
 800b4e6:	498c      	ldr	r1, [pc, #560]	; (800b718 <HAL_RCC_ClockConfig+0x260>)
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b4ee:	4b8a      	ldr	r3, [pc, #552]	; (800b718 <HAL_RCC_ClockConfig+0x260>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f003 030f 	and.w	r3, r3, #15
 800b4f6:	683a      	ldr	r2, [r7, #0]
 800b4f8:	429a      	cmp	r2, r3
 800b4fa:	d001      	beq.n	800b500 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b4fc:	2301      	movs	r3, #1
 800b4fe:	e106      	b.n	800b70e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	f003 0301 	and.w	r3, r3, #1
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d073      	beq.n	800b5f4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	685b      	ldr	r3, [r3, #4]
 800b510:	2b03      	cmp	r3, #3
 800b512:	d129      	bne.n	800b568 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b514:	4b81      	ldr	r3, [pc, #516]	; (800b71c <HAL_RCC_ClockConfig+0x264>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d101      	bne.n	800b524 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800b520:	2301      	movs	r3, #1
 800b522:	e0f4      	b.n	800b70e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800b524:	f000 f972 	bl	800b80c <RCC_GetSysClockFreqFromPLLSource>
 800b528:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	4a7c      	ldr	r2, [pc, #496]	; (800b720 <HAL_RCC_ClockConfig+0x268>)
 800b52e:	4293      	cmp	r3, r2
 800b530:	d93f      	bls.n	800b5b2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b532:	4b7a      	ldr	r3, [pc, #488]	; (800b71c <HAL_RCC_ClockConfig+0x264>)
 800b534:	689b      	ldr	r3, [r3, #8]
 800b536:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d009      	beq.n	800b552 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b546:	2b00      	cmp	r3, #0
 800b548:	d033      	beq.n	800b5b2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d12f      	bne.n	800b5b2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b552:	4b72      	ldr	r3, [pc, #456]	; (800b71c <HAL_RCC_ClockConfig+0x264>)
 800b554:	689b      	ldr	r3, [r3, #8]
 800b556:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b55a:	4a70      	ldr	r2, [pc, #448]	; (800b71c <HAL_RCC_ClockConfig+0x264>)
 800b55c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b560:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800b562:	2380      	movs	r3, #128	; 0x80
 800b564:	617b      	str	r3, [r7, #20]
 800b566:	e024      	b.n	800b5b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	2b02      	cmp	r3, #2
 800b56e:	d107      	bne.n	800b580 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b570:	4b6a      	ldr	r3, [pc, #424]	; (800b71c <HAL_RCC_ClockConfig+0x264>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d109      	bne.n	800b590 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b57c:	2301      	movs	r3, #1
 800b57e:	e0c6      	b.n	800b70e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b580:	4b66      	ldr	r3, [pc, #408]	; (800b71c <HAL_RCC_ClockConfig+0x264>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d101      	bne.n	800b590 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b58c:	2301      	movs	r3, #1
 800b58e:	e0be      	b.n	800b70e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800b590:	f000 f8ce 	bl	800b730 <HAL_RCC_GetSysClockFreq>
 800b594:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	4a61      	ldr	r2, [pc, #388]	; (800b720 <HAL_RCC_ClockConfig+0x268>)
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d909      	bls.n	800b5b2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b59e:	4b5f      	ldr	r3, [pc, #380]	; (800b71c <HAL_RCC_ClockConfig+0x264>)
 800b5a0:	689b      	ldr	r3, [r3, #8]
 800b5a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b5a6:	4a5d      	ldr	r2, [pc, #372]	; (800b71c <HAL_RCC_ClockConfig+0x264>)
 800b5a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800b5ae:	2380      	movs	r3, #128	; 0x80
 800b5b0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b5b2:	4b5a      	ldr	r3, [pc, #360]	; (800b71c <HAL_RCC_ClockConfig+0x264>)
 800b5b4:	689b      	ldr	r3, [r3, #8]
 800b5b6:	f023 0203 	bic.w	r2, r3, #3
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	685b      	ldr	r3, [r3, #4]
 800b5be:	4957      	ldr	r1, [pc, #348]	; (800b71c <HAL_RCC_ClockConfig+0x264>)
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b5c4:	f7fc fdb2 	bl	800812c <HAL_GetTick>
 800b5c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b5ca:	e00a      	b.n	800b5e2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b5cc:	f7fc fdae 	bl	800812c <HAL_GetTick>
 800b5d0:	4602      	mov	r2, r0
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	1ad3      	subs	r3, r2, r3
 800b5d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	d901      	bls.n	800b5e2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800b5de:	2303      	movs	r3, #3
 800b5e0:	e095      	b.n	800b70e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b5e2:	4b4e      	ldr	r3, [pc, #312]	; (800b71c <HAL_RCC_ClockConfig+0x264>)
 800b5e4:	689b      	ldr	r3, [r3, #8]
 800b5e6:	f003 020c 	and.w	r2, r3, #12
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	685b      	ldr	r3, [r3, #4]
 800b5ee:	009b      	lsls	r3, r3, #2
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	d1eb      	bne.n	800b5cc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f003 0302 	and.w	r3, r3, #2
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d023      	beq.n	800b648 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f003 0304 	and.w	r3, r3, #4
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d005      	beq.n	800b618 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b60c:	4b43      	ldr	r3, [pc, #268]	; (800b71c <HAL_RCC_ClockConfig+0x264>)
 800b60e:	689b      	ldr	r3, [r3, #8]
 800b610:	4a42      	ldr	r2, [pc, #264]	; (800b71c <HAL_RCC_ClockConfig+0x264>)
 800b612:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b616:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f003 0308 	and.w	r3, r3, #8
 800b620:	2b00      	cmp	r3, #0
 800b622:	d007      	beq.n	800b634 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800b624:	4b3d      	ldr	r3, [pc, #244]	; (800b71c <HAL_RCC_ClockConfig+0x264>)
 800b626:	689b      	ldr	r3, [r3, #8]
 800b628:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b62c:	4a3b      	ldr	r2, [pc, #236]	; (800b71c <HAL_RCC_ClockConfig+0x264>)
 800b62e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b632:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b634:	4b39      	ldr	r3, [pc, #228]	; (800b71c <HAL_RCC_ClockConfig+0x264>)
 800b636:	689b      	ldr	r3, [r3, #8]
 800b638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	689b      	ldr	r3, [r3, #8]
 800b640:	4936      	ldr	r1, [pc, #216]	; (800b71c <HAL_RCC_ClockConfig+0x264>)
 800b642:	4313      	orrs	r3, r2
 800b644:	608b      	str	r3, [r1, #8]
 800b646:	e008      	b.n	800b65a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	2b80      	cmp	r3, #128	; 0x80
 800b64c:	d105      	bne.n	800b65a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800b64e:	4b33      	ldr	r3, [pc, #204]	; (800b71c <HAL_RCC_ClockConfig+0x264>)
 800b650:	689b      	ldr	r3, [r3, #8]
 800b652:	4a32      	ldr	r2, [pc, #200]	; (800b71c <HAL_RCC_ClockConfig+0x264>)
 800b654:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b658:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b65a:	4b2f      	ldr	r3, [pc, #188]	; (800b718 <HAL_RCC_ClockConfig+0x260>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	f003 030f 	and.w	r3, r3, #15
 800b662:	683a      	ldr	r2, [r7, #0]
 800b664:	429a      	cmp	r2, r3
 800b666:	d21d      	bcs.n	800b6a4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b668:	4b2b      	ldr	r3, [pc, #172]	; (800b718 <HAL_RCC_ClockConfig+0x260>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	f023 020f 	bic.w	r2, r3, #15
 800b670:	4929      	ldr	r1, [pc, #164]	; (800b718 <HAL_RCC_ClockConfig+0x260>)
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	4313      	orrs	r3, r2
 800b676:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b678:	f7fc fd58 	bl	800812c <HAL_GetTick>
 800b67c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b67e:	e00a      	b.n	800b696 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b680:	f7fc fd54 	bl	800812c <HAL_GetTick>
 800b684:	4602      	mov	r2, r0
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	1ad3      	subs	r3, r2, r3
 800b68a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b68e:	4293      	cmp	r3, r2
 800b690:	d901      	bls.n	800b696 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800b692:	2303      	movs	r3, #3
 800b694:	e03b      	b.n	800b70e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b696:	4b20      	ldr	r3, [pc, #128]	; (800b718 <HAL_RCC_ClockConfig+0x260>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f003 030f 	and.w	r3, r3, #15
 800b69e:	683a      	ldr	r2, [r7, #0]
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	d1ed      	bne.n	800b680 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f003 0304 	and.w	r3, r3, #4
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d008      	beq.n	800b6c2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b6b0:	4b1a      	ldr	r3, [pc, #104]	; (800b71c <HAL_RCC_ClockConfig+0x264>)
 800b6b2:	689b      	ldr	r3, [r3, #8]
 800b6b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	68db      	ldr	r3, [r3, #12]
 800b6bc:	4917      	ldr	r1, [pc, #92]	; (800b71c <HAL_RCC_ClockConfig+0x264>)
 800b6be:	4313      	orrs	r3, r2
 800b6c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f003 0308 	and.w	r3, r3, #8
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d009      	beq.n	800b6e2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b6ce:	4b13      	ldr	r3, [pc, #76]	; (800b71c <HAL_RCC_ClockConfig+0x264>)
 800b6d0:	689b      	ldr	r3, [r3, #8]
 800b6d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	691b      	ldr	r3, [r3, #16]
 800b6da:	00db      	lsls	r3, r3, #3
 800b6dc:	490f      	ldr	r1, [pc, #60]	; (800b71c <HAL_RCC_ClockConfig+0x264>)
 800b6de:	4313      	orrs	r3, r2
 800b6e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b6e2:	f000 f825 	bl	800b730 <HAL_RCC_GetSysClockFreq>
 800b6e6:	4601      	mov	r1, r0
 800b6e8:	4b0c      	ldr	r3, [pc, #48]	; (800b71c <HAL_RCC_ClockConfig+0x264>)
 800b6ea:	689b      	ldr	r3, [r3, #8]
 800b6ec:	091b      	lsrs	r3, r3, #4
 800b6ee:	f003 030f 	and.w	r3, r3, #15
 800b6f2:	4a0c      	ldr	r2, [pc, #48]	; (800b724 <HAL_RCC_ClockConfig+0x26c>)
 800b6f4:	5cd3      	ldrb	r3, [r2, r3]
 800b6f6:	f003 031f 	and.w	r3, r3, #31
 800b6fa:	fa21 f303 	lsr.w	r3, r1, r3
 800b6fe:	4a0a      	ldr	r2, [pc, #40]	; (800b728 <HAL_RCC_ClockConfig+0x270>)
 800b700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800b702:	4b0a      	ldr	r3, [pc, #40]	; (800b72c <HAL_RCC_ClockConfig+0x274>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	4618      	mov	r0, r3
 800b708:	f7fc fcc4 	bl	8008094 <HAL_InitTick>
 800b70c:	4603      	mov	r3, r0
}
 800b70e:	4618      	mov	r0, r3
 800b710:	3718      	adds	r7, #24
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}
 800b716:	bf00      	nop
 800b718:	40022000 	.word	0x40022000
 800b71c:	40021000 	.word	0x40021000
 800b720:	04c4b400 	.word	0x04c4b400
 800b724:	08014284 	.word	0x08014284
 800b728:	20000c30 	.word	0x20000c30
 800b72c:	20000c34 	.word	0x20000c34

0800b730 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b730:	b480      	push	{r7}
 800b732:	b087      	sub	sp, #28
 800b734:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800b736:	4b2c      	ldr	r3, [pc, #176]	; (800b7e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b738:	689b      	ldr	r3, [r3, #8]
 800b73a:	f003 030c 	and.w	r3, r3, #12
 800b73e:	2b04      	cmp	r3, #4
 800b740:	d102      	bne.n	800b748 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b742:	4b2a      	ldr	r3, [pc, #168]	; (800b7ec <HAL_RCC_GetSysClockFreq+0xbc>)
 800b744:	613b      	str	r3, [r7, #16]
 800b746:	e047      	b.n	800b7d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800b748:	4b27      	ldr	r3, [pc, #156]	; (800b7e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b74a:	689b      	ldr	r3, [r3, #8]
 800b74c:	f003 030c 	and.w	r3, r3, #12
 800b750:	2b08      	cmp	r3, #8
 800b752:	d102      	bne.n	800b75a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b754:	4b26      	ldr	r3, [pc, #152]	; (800b7f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b756:	613b      	str	r3, [r7, #16]
 800b758:	e03e      	b.n	800b7d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800b75a:	4b23      	ldr	r3, [pc, #140]	; (800b7e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b75c:	689b      	ldr	r3, [r3, #8]
 800b75e:	f003 030c 	and.w	r3, r3, #12
 800b762:	2b0c      	cmp	r3, #12
 800b764:	d136      	bne.n	800b7d4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b766:	4b20      	ldr	r3, [pc, #128]	; (800b7e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b768:	68db      	ldr	r3, [r3, #12]
 800b76a:	f003 0303 	and.w	r3, r3, #3
 800b76e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b770:	4b1d      	ldr	r3, [pc, #116]	; (800b7e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b772:	68db      	ldr	r3, [r3, #12]
 800b774:	091b      	lsrs	r3, r3, #4
 800b776:	f003 030f 	and.w	r3, r3, #15
 800b77a:	3301      	adds	r3, #1
 800b77c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	2b03      	cmp	r3, #3
 800b782:	d10c      	bne.n	800b79e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b784:	4a1a      	ldr	r2, [pc, #104]	; (800b7f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	fbb2 f3f3 	udiv	r3, r2, r3
 800b78c:	4a16      	ldr	r2, [pc, #88]	; (800b7e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b78e:	68d2      	ldr	r2, [r2, #12]
 800b790:	0a12      	lsrs	r2, r2, #8
 800b792:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b796:	fb02 f303 	mul.w	r3, r2, r3
 800b79a:	617b      	str	r3, [r7, #20]
      break;
 800b79c:	e00c      	b.n	800b7b8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b79e:	4a13      	ldr	r2, [pc, #76]	; (800b7ec <HAL_RCC_GetSysClockFreq+0xbc>)
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7a6:	4a10      	ldr	r2, [pc, #64]	; (800b7e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b7a8:	68d2      	ldr	r2, [r2, #12]
 800b7aa:	0a12      	lsrs	r2, r2, #8
 800b7ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b7b0:	fb02 f303 	mul.w	r3, r2, r3
 800b7b4:	617b      	str	r3, [r7, #20]
      break;
 800b7b6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b7b8:	4b0b      	ldr	r3, [pc, #44]	; (800b7e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b7ba:	68db      	ldr	r3, [r3, #12]
 800b7bc:	0e5b      	lsrs	r3, r3, #25
 800b7be:	f003 0303 	and.w	r3, r3, #3
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	005b      	lsls	r3, r3, #1
 800b7c6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800b7c8:	697a      	ldr	r2, [r7, #20]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7d0:	613b      	str	r3, [r7, #16]
 800b7d2:	e001      	b.n	800b7d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800b7d8:	693b      	ldr	r3, [r7, #16]
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	371c      	adds	r7, #28
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e4:	4770      	bx	lr
 800b7e6:	bf00      	nop
 800b7e8:	40021000 	.word	0x40021000
 800b7ec:	00f42400 	.word	0x00f42400
 800b7f0:	007a1200 	.word	0x007a1200

0800b7f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b7f8:	4b03      	ldr	r3, [pc, #12]	; (800b808 <HAL_RCC_GetHCLKFreq+0x14>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	46bd      	mov	sp, r7
 800b800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b804:	4770      	bx	lr
 800b806:	bf00      	nop
 800b808:	20000c30 	.word	0x20000c30

0800b80c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800b80c:	b480      	push	{r7}
 800b80e:	b087      	sub	sp, #28
 800b810:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b812:	4b1e      	ldr	r3, [pc, #120]	; (800b88c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b814:	68db      	ldr	r3, [r3, #12]
 800b816:	f003 0303 	and.w	r3, r3, #3
 800b81a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b81c:	4b1b      	ldr	r3, [pc, #108]	; (800b88c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b81e:	68db      	ldr	r3, [r3, #12]
 800b820:	091b      	lsrs	r3, r3, #4
 800b822:	f003 030f 	and.w	r3, r3, #15
 800b826:	3301      	adds	r3, #1
 800b828:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	2b03      	cmp	r3, #3
 800b82e:	d10c      	bne.n	800b84a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b830:	4a17      	ldr	r2, [pc, #92]	; (800b890 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	fbb2 f3f3 	udiv	r3, r2, r3
 800b838:	4a14      	ldr	r2, [pc, #80]	; (800b88c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b83a:	68d2      	ldr	r2, [r2, #12]
 800b83c:	0a12      	lsrs	r2, r2, #8
 800b83e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b842:	fb02 f303 	mul.w	r3, r2, r3
 800b846:	617b      	str	r3, [r7, #20]
    break;
 800b848:	e00c      	b.n	800b864 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b84a:	4a12      	ldr	r2, [pc, #72]	; (800b894 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b852:	4a0e      	ldr	r2, [pc, #56]	; (800b88c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b854:	68d2      	ldr	r2, [r2, #12]
 800b856:	0a12      	lsrs	r2, r2, #8
 800b858:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b85c:	fb02 f303 	mul.w	r3, r2, r3
 800b860:	617b      	str	r3, [r7, #20]
    break;
 800b862:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b864:	4b09      	ldr	r3, [pc, #36]	; (800b88c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b866:	68db      	ldr	r3, [r3, #12]
 800b868:	0e5b      	lsrs	r3, r3, #25
 800b86a:	f003 0303 	and.w	r3, r3, #3
 800b86e:	3301      	adds	r3, #1
 800b870:	005b      	lsls	r3, r3, #1
 800b872:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800b874:	697a      	ldr	r2, [r7, #20]
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	fbb2 f3f3 	udiv	r3, r2, r3
 800b87c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800b87e:	687b      	ldr	r3, [r7, #4]
}
 800b880:	4618      	mov	r0, r3
 800b882:	371c      	adds	r7, #28
 800b884:	46bd      	mov	sp, r7
 800b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88a:	4770      	bx	lr
 800b88c:	40021000 	.word	0x40021000
 800b890:	007a1200 	.word	0x007a1200
 800b894:	00f42400 	.word	0x00f42400

0800b898 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b086      	sub	sp, #24
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	f000 8098 	beq.w	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b8ba:	4b43      	ldr	r3, [pc, #268]	; (800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b8bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d10d      	bne.n	800b8e2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b8c6:	4b40      	ldr	r3, [pc, #256]	; (800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b8c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8ca:	4a3f      	ldr	r2, [pc, #252]	; (800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b8cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b8d0:	6593      	str	r3, [r2, #88]	; 0x58
 800b8d2:	4b3d      	ldr	r3, [pc, #244]	; (800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b8d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b8da:	60bb      	str	r3, [r7, #8]
 800b8dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b8de:	2301      	movs	r3, #1
 800b8e0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b8e2:	4b3a      	ldr	r3, [pc, #232]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	4a39      	ldr	r2, [pc, #228]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b8e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b8ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b8ee:	f7fc fc1d 	bl	800812c <HAL_GetTick>
 800b8f2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b8f4:	e009      	b.n	800b90a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b8f6:	f7fc fc19 	bl	800812c <HAL_GetTick>
 800b8fa:	4602      	mov	r2, r0
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	1ad3      	subs	r3, r2, r3
 800b900:	2b02      	cmp	r3, #2
 800b902:	d902      	bls.n	800b90a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800b904:	2303      	movs	r3, #3
 800b906:	74fb      	strb	r3, [r7, #19]
        break;
 800b908:	e005      	b.n	800b916 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b90a:	4b30      	ldr	r3, [pc, #192]	; (800b9cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b912:	2b00      	cmp	r3, #0
 800b914:	d0ef      	beq.n	800b8f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800b916:	7cfb      	ldrb	r3, [r7, #19]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d159      	bne.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b91c:	4b2a      	ldr	r3, [pc, #168]	; (800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b91e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b922:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b926:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d01e      	beq.n	800b96c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b932:	697a      	ldr	r2, [r7, #20]
 800b934:	429a      	cmp	r2, r3
 800b936:	d019      	beq.n	800b96c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b938:	4b23      	ldr	r3, [pc, #140]	; (800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b93a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b93e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b942:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b944:	4b20      	ldr	r3, [pc, #128]	; (800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b94a:	4a1f      	ldr	r2, [pc, #124]	; (800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b94c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b950:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b954:	4b1c      	ldr	r3, [pc, #112]	; (800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b95a:	4a1b      	ldr	r2, [pc, #108]	; (800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b95c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b960:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b964:	4a18      	ldr	r2, [pc, #96]	; (800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b96c:	697b      	ldr	r3, [r7, #20]
 800b96e:	f003 0301 	and.w	r3, r3, #1
 800b972:	2b00      	cmp	r3, #0
 800b974:	d016      	beq.n	800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b976:	f7fc fbd9 	bl	800812c <HAL_GetTick>
 800b97a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b97c:	e00b      	b.n	800b996 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b97e:	f7fc fbd5 	bl	800812c <HAL_GetTick>
 800b982:	4602      	mov	r2, r0
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	1ad3      	subs	r3, r2, r3
 800b988:	f241 3288 	movw	r2, #5000	; 0x1388
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d902      	bls.n	800b996 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800b990:	2303      	movs	r3, #3
 800b992:	74fb      	strb	r3, [r7, #19]
            break;
 800b994:	e006      	b.n	800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b996:	4b0c      	ldr	r3, [pc, #48]	; (800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b99c:	f003 0302 	and.w	r3, r3, #2
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d0ec      	beq.n	800b97e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800b9a4:	7cfb      	ldrb	r3, [r7, #19]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d10b      	bne.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b9aa:	4b07      	ldr	r3, [pc, #28]	; (800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b9ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9b8:	4903      	ldr	r1, [pc, #12]	; (800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b9ba:	4313      	orrs	r3, r2
 800b9bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b9c0:	e008      	b.n	800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b9c2:	7cfb      	ldrb	r3, [r7, #19]
 800b9c4:	74bb      	strb	r3, [r7, #18]
 800b9c6:	e005      	b.n	800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800b9c8:	40021000 	.word	0x40021000
 800b9cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9d0:	7cfb      	ldrb	r3, [r7, #19]
 800b9d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b9d4:	7c7b      	ldrb	r3, [r7, #17]
 800b9d6:	2b01      	cmp	r3, #1
 800b9d8:	d105      	bne.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b9da:	4baf      	ldr	r3, [pc, #700]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b9dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9de:	4aae      	ldr	r2, [pc, #696]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b9e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b9e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f003 0301 	and.w	r3, r3, #1
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d00a      	beq.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b9f2:	4ba9      	ldr	r3, [pc, #676]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b9f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9f8:	f023 0203 	bic.w	r2, r3, #3
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	685b      	ldr	r3, [r3, #4]
 800ba00:	49a5      	ldr	r1, [pc, #660]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ba02:	4313      	orrs	r3, r2
 800ba04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	f003 0302 	and.w	r3, r3, #2
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d00a      	beq.n	800ba2a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ba14:	4ba0      	ldr	r3, [pc, #640]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ba16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba1a:	f023 020c 	bic.w	r2, r3, #12
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	689b      	ldr	r3, [r3, #8]
 800ba22:	499d      	ldr	r1, [pc, #628]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ba24:	4313      	orrs	r3, r2
 800ba26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f003 0304 	and.w	r3, r3, #4
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d00a      	beq.n	800ba4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ba36:	4b98      	ldr	r3, [pc, #608]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ba38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba3c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	68db      	ldr	r3, [r3, #12]
 800ba44:	4994      	ldr	r1, [pc, #592]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ba46:	4313      	orrs	r3, r2
 800ba48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f003 0308 	and.w	r3, r3, #8
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d00a      	beq.n	800ba6e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ba58:	4b8f      	ldr	r3, [pc, #572]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ba5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	691b      	ldr	r3, [r3, #16]
 800ba66:	498c      	ldr	r1, [pc, #560]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ba68:	4313      	orrs	r3, r2
 800ba6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	f003 0310 	and.w	r3, r3, #16
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d00a      	beq.n	800ba90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800ba7a:	4b87      	ldr	r3, [pc, #540]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ba7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	695b      	ldr	r3, [r3, #20]
 800ba88:	4983      	ldr	r1, [pc, #524]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ba8a:	4313      	orrs	r3, r2
 800ba8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f003 0320 	and.w	r3, r3, #32
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d00a      	beq.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ba9c:	4b7e      	ldr	r3, [pc, #504]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ba9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800baa2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	699b      	ldr	r3, [r3, #24]
 800baaa:	497b      	ldr	r1, [pc, #492]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800baac:	4313      	orrs	r3, r2
 800baae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baba:	2b00      	cmp	r3, #0
 800babc:	d00a      	beq.n	800bad4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800babe:	4b76      	ldr	r3, [pc, #472]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bac4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	69db      	ldr	r3, [r3, #28]
 800bacc:	4972      	ldr	r1, [pc, #456]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bace:	4313      	orrs	r3, r2
 800bad0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800badc:	2b00      	cmp	r3, #0
 800bade:	d00a      	beq.n	800baf6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bae0:	4b6d      	ldr	r3, [pc, #436]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bae6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6a1b      	ldr	r3, [r3, #32]
 800baee:	496a      	ldr	r1, [pc, #424]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800baf0:	4313      	orrs	r3, r2
 800baf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d00a      	beq.n	800bb18 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bb02:	4b65      	ldr	r3, [pc, #404]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bb04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb10:	4961      	ldr	r1, [pc, #388]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bb12:	4313      	orrs	r3, r2
 800bb14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d00a      	beq.n	800bb3a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bb24:	4b5c      	ldr	r3, [pc, #368]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bb26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bb2a:	f023 0203 	bic.w	r2, r3, #3
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb32:	4959      	ldr	r1, [pc, #356]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bb34:	4313      	orrs	r3, r2
 800bb36:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d00a      	beq.n	800bb5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bb46:	4b54      	ldr	r3, [pc, #336]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bb48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb54:	4950      	ldr	r1, [pc, #320]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bb56:	4313      	orrs	r3, r2
 800bb58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d015      	beq.n	800bb94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bb68:	4b4b      	ldr	r3, [pc, #300]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bb6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb76:	4948      	ldr	r1, [pc, #288]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bb78:	4313      	orrs	r3, r2
 800bb7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb86:	d105      	bne.n	800bb94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bb88:	4b43      	ldr	r3, [pc, #268]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bb8a:	68db      	ldr	r3, [r3, #12]
 800bb8c:	4a42      	ldr	r2, [pc, #264]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bb8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bb92:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d015      	beq.n	800bbcc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800bba0:	4b3d      	ldr	r3, [pc, #244]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bba6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbae:	493a      	ldr	r1, [pc, #232]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bbb0:	4313      	orrs	r3, r2
 800bbb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bbbe:	d105      	bne.n	800bbcc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bbc0:	4b35      	ldr	r3, [pc, #212]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bbc2:	68db      	ldr	r3, [r3, #12]
 800bbc4:	4a34      	ldr	r2, [pc, #208]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bbc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bbca:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d015      	beq.n	800bc04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bbd8:	4b2f      	ldr	r3, [pc, #188]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bbda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbde:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbe6:	492c      	ldr	r1, [pc, #176]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bbe8:	4313      	orrs	r3, r2
 800bbea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbf2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bbf6:	d105      	bne.n	800bc04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bbf8:	4b27      	ldr	r3, [pc, #156]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bbfa:	68db      	ldr	r3, [r3, #12]
 800bbfc:	4a26      	ldr	r2, [pc, #152]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bbfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc02:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d015      	beq.n	800bc3c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bc10:	4b21      	ldr	r3, [pc, #132]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc1e:	491e      	ldr	r1, [pc, #120]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc20:	4313      	orrs	r3, r2
 800bc22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc2e:	d105      	bne.n	800bc3c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bc30:	4b19      	ldr	r3, [pc, #100]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc32:	68db      	ldr	r3, [r3, #12]
 800bc34:	4a18      	ldr	r2, [pc, #96]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc3a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d015      	beq.n	800bc74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bc48:	4b13      	ldr	r3, [pc, #76]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc56:	4910      	ldr	r1, [pc, #64]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc58:	4313      	orrs	r3, r2
 800bc5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc66:	d105      	bne.n	800bc74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bc68:	4b0b      	ldr	r3, [pc, #44]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc6a:	68db      	ldr	r3, [r3, #12]
 800bc6c:	4a0a      	ldr	r2, [pc, #40]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc72:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d018      	beq.n	800bcb2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800bc80:	4b05      	ldr	r3, [pc, #20]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc8e:	4902      	ldr	r1, [pc, #8]	; (800bc98 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc90:	4313      	orrs	r3, r2
 800bc92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800bc96:	e001      	b.n	800bc9c <HAL_RCCEx_PeriphCLKConfig+0x404>
 800bc98:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bca0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bca4:	d105      	bne.n	800bcb2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800bca6:	4b21      	ldr	r3, [pc, #132]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bca8:	68db      	ldr	r3, [r3, #12]
 800bcaa:	4a20      	ldr	r2, [pc, #128]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bcac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bcb0:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d015      	beq.n	800bcea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800bcbe:	4b1b      	ldr	r3, [pc, #108]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bcc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcc4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bccc:	4917      	ldr	r1, [pc, #92]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bcce:	4313      	orrs	r3, r2
 800bcd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcdc:	d105      	bne.n	800bcea <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800bcde:	4b13      	ldr	r3, [pc, #76]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bce0:	68db      	ldr	r3, [r3, #12]
 800bce2:	4a12      	ldr	r2, [pc, #72]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bce8:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d015      	beq.n	800bd22 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800bcf6:	4b0d      	ldr	r3, [pc, #52]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bcf8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bcfc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd04:	4909      	ldr	r1, [pc, #36]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bd06:	4313      	orrs	r3, r2
 800bd08:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bd14:	d105      	bne.n	800bd22 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bd16:	4b05      	ldr	r3, [pc, #20]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bd18:	68db      	ldr	r3, [r3, #12]
 800bd1a:	4a04      	ldr	r2, [pc, #16]	; (800bd2c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bd1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd20:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800bd22:	7cbb      	ldrb	r3, [r7, #18]
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	3718      	adds	r7, #24
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}
 800bd2c:	40021000 	.word	0x40021000

0800bd30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b084      	sub	sp, #16
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d101      	bne.n	800bd42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bd3e:	2301      	movs	r3, #1
 800bd40:	e084      	b.n	800be4c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2200      	movs	r2, #0
 800bd46:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bd4e:	b2db      	uxtb	r3, r3
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d106      	bne.n	800bd62 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2200      	movs	r2, #0
 800bd58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f7fb fb97 	bl	8007490 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2202      	movs	r2, #2
 800bd66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	681a      	ldr	r2, [r3, #0]
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd78:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	68db      	ldr	r3, [r3, #12]
 800bd7e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bd82:	d902      	bls.n	800bd8a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800bd84:	2300      	movs	r3, #0
 800bd86:	60fb      	str	r3, [r7, #12]
 800bd88:	e002      	b.n	800bd90 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800bd8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bd8e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	68db      	ldr	r3, [r3, #12]
 800bd94:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800bd98:	d007      	beq.n	800bdaa <HAL_SPI_Init+0x7a>
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	68db      	ldr	r3, [r3, #12]
 800bd9e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bda2:	d002      	beq.n	800bdaa <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2200      	movs	r2, #0
 800bda8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d10b      	bne.n	800bdca <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	68db      	ldr	r3, [r3, #12]
 800bdb6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bdba:	d903      	bls.n	800bdc4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2202      	movs	r2, #2
 800bdc0:	631a      	str	r2, [r3, #48]	; 0x30
 800bdc2:	e002      	b.n	800bdca <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	685a      	ldr	r2, [r3, #4]
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	689b      	ldr	r3, [r3, #8]
 800bdd2:	431a      	orrs	r2, r3
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	691b      	ldr	r3, [r3, #16]
 800bdd8:	431a      	orrs	r2, r3
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	695b      	ldr	r3, [r3, #20]
 800bdde:	431a      	orrs	r2, r3
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	699b      	ldr	r3, [r3, #24]
 800bde4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bde8:	431a      	orrs	r2, r3
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	69db      	ldr	r3, [r3, #28]
 800bdee:	431a      	orrs	r2, r3
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	6a1b      	ldr	r3, [r3, #32]
 800bdf4:	ea42 0103 	orr.w	r1, r2, r3
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	430a      	orrs	r2, r1
 800be02:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	699b      	ldr	r3, [r3, #24]
 800be08:	0c1b      	lsrs	r3, r3, #16
 800be0a:	f003 0204 	and.w	r2, r3, #4
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be12:	431a      	orrs	r2, r3
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be18:	431a      	orrs	r2, r3
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	68db      	ldr	r3, [r3, #12]
 800be1e:	ea42 0103 	orr.w	r1, r2, r3
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	68fa      	ldr	r2, [r7, #12]
 800be28:	430a      	orrs	r2, r1
 800be2a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	69da      	ldr	r2, [r3, #28]
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800be3a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2200      	movs	r2, #0
 800be40:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2201      	movs	r2, #1
 800be46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800be4a:	2300      	movs	r3, #0
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3710      	adds	r7, #16
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}

0800be54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b082      	sub	sp, #8
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d101      	bne.n	800be66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800be62:	2301      	movs	r3, #1
 800be64:	e049      	b.n	800befa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be6c:	b2db      	uxtb	r3, r3
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d106      	bne.n	800be80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2200      	movs	r2, #0
 800be76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f7fb fff0 	bl	8007e60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2202      	movs	r2, #2
 800be84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681a      	ldr	r2, [r3, #0]
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	3304      	adds	r3, #4
 800be90:	4619      	mov	r1, r3
 800be92:	4610      	mov	r0, r2
 800be94:	f000 ff62 	bl	800cd5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2201      	movs	r2, #1
 800be9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2201      	movs	r2, #1
 800bea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2201      	movs	r2, #1
 800beac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2201      	movs	r2, #1
 800beb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2201      	movs	r2, #1
 800bebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2201      	movs	r2, #1
 800bec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2201      	movs	r2, #1
 800becc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2201      	movs	r2, #1
 800bed4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2201      	movs	r2, #1
 800bedc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2201      	movs	r2, #1
 800bee4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2201      	movs	r2, #1
 800beec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2201      	movs	r2, #1
 800bef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bef8:	2300      	movs	r3, #0
}
 800befa:	4618      	mov	r0, r3
 800befc:	3708      	adds	r7, #8
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}
	...

0800bf04 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b085      	sub	sp, #20
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf12:	b2db      	uxtb	r3, r3
 800bf14:	2b01      	cmp	r3, #1
 800bf16:	d001      	beq.n	800bf1c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800bf18:	2301      	movs	r3, #1
 800bf1a:	e019      	b.n	800bf50 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2202      	movs	r2, #2
 800bf20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	689a      	ldr	r2, [r3, #8]
 800bf2a:	4b0c      	ldr	r3, [pc, #48]	; (800bf5c <HAL_TIM_Base_Start+0x58>)
 800bf2c:	4013      	ands	r3, r2
 800bf2e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	2b06      	cmp	r3, #6
 800bf34:	d00b      	beq.n	800bf4e <HAL_TIM_Base_Start+0x4a>
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf3c:	d007      	beq.n	800bf4e <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	681a      	ldr	r2, [r3, #0]
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	f042 0201 	orr.w	r2, r2, #1
 800bf4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bf4e:	2300      	movs	r3, #0
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3714      	adds	r7, #20
 800bf54:	46bd      	mov	sp, r7
 800bf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5a:	4770      	bx	lr
 800bf5c:	00010007 	.word	0x00010007

0800bf60 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800bf60:	b480      	push	{r7}
 800bf62:	b083      	sub	sp, #12
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	6a1a      	ldr	r2, [r3, #32]
 800bf6e:	f241 1311 	movw	r3, #4369	; 0x1111
 800bf72:	4013      	ands	r3, r2
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d10f      	bne.n	800bf98 <HAL_TIM_Base_Stop+0x38>
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	6a1a      	ldr	r2, [r3, #32]
 800bf7e:	f244 4344 	movw	r3, #17476	; 0x4444
 800bf82:	4013      	ands	r3, r2
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d107      	bne.n	800bf98 <HAL_TIM_Base_Stop+0x38>
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	681a      	ldr	r2, [r3, #0]
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	f022 0201 	bic.w	r2, r2, #1
 800bf96:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2201      	movs	r2, #1
 800bf9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800bfa0:	2300      	movs	r3, #0
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	370c      	adds	r7, #12
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfac:	4770      	bx	lr
	...

0800bfb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b085      	sub	sp, #20
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bfbe:	b2db      	uxtb	r3, r3
 800bfc0:	2b01      	cmp	r3, #1
 800bfc2:	d001      	beq.n	800bfc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	e021      	b.n	800c00c <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2202      	movs	r2, #2
 800bfcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	68da      	ldr	r2, [r3, #12]
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f042 0201 	orr.w	r2, r2, #1
 800bfde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	689a      	ldr	r2, [r3, #8]
 800bfe6:	4b0c      	ldr	r3, [pc, #48]	; (800c018 <HAL_TIM_Base_Start_IT+0x68>)
 800bfe8:	4013      	ands	r3, r2
 800bfea:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	2b06      	cmp	r3, #6
 800bff0:	d00b      	beq.n	800c00a <HAL_TIM_Base_Start_IT+0x5a>
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bff8:	d007      	beq.n	800c00a <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	681a      	ldr	r2, [r3, #0]
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	f042 0201 	orr.w	r2, r2, #1
 800c008:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c00a:	2300      	movs	r3, #0
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	3714      	adds	r7, #20
 800c010:	46bd      	mov	sp, r7
 800c012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c016:	4770      	bx	lr
 800c018:	00010007 	.word	0x00010007

0800c01c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800c01c:	b480      	push	{r7}
 800c01e:	b083      	sub	sp, #12
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	68da      	ldr	r2, [r3, #12]
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f022 0201 	bic.w	r2, r2, #1
 800c032:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	6a1a      	ldr	r2, [r3, #32]
 800c03a:	f241 1311 	movw	r3, #4369	; 0x1111
 800c03e:	4013      	ands	r3, r2
 800c040:	2b00      	cmp	r3, #0
 800c042:	d10f      	bne.n	800c064 <HAL_TIM_Base_Stop_IT+0x48>
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	6a1a      	ldr	r2, [r3, #32]
 800c04a:	f244 4344 	movw	r3, #17476	; 0x4444
 800c04e:	4013      	ands	r3, r2
 800c050:	2b00      	cmp	r3, #0
 800c052:	d107      	bne.n	800c064 <HAL_TIM_Base_Stop_IT+0x48>
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	681a      	ldr	r2, [r3, #0]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f022 0201 	bic.w	r2, r2, #1
 800c062:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2201      	movs	r2, #1
 800c068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c06c:	2300      	movs	r3, #0
}
 800c06e:	4618      	mov	r0, r3
 800c070:	370c      	adds	r7, #12
 800c072:	46bd      	mov	sp, r7
 800c074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c078:	4770      	bx	lr

0800c07a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c07a:	b580      	push	{r7, lr}
 800c07c:	b082      	sub	sp, #8
 800c07e:	af00      	add	r7, sp, #0
 800c080:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d101      	bne.n	800c08c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c088:	2301      	movs	r3, #1
 800c08a:	e049      	b.n	800c120 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c092:	b2db      	uxtb	r3, r3
 800c094:	2b00      	cmp	r3, #0
 800c096:	d106      	bne.n	800c0a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2200      	movs	r2, #0
 800c09c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f000 f841 	bl	800c128 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2202      	movs	r2, #2
 800c0aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681a      	ldr	r2, [r3, #0]
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	3304      	adds	r3, #4
 800c0b6:	4619      	mov	r1, r3
 800c0b8:	4610      	mov	r0, r2
 800c0ba:	f000 fe4f 	bl	800cd5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2201      	movs	r2, #1
 800c0c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2201      	movs	r2, #1
 800c0ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2201      	movs	r2, #1
 800c0d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2201      	movs	r2, #1
 800c0da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2201      	movs	r2, #1
 800c0e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2201      	movs	r2, #1
 800c0ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2201      	movs	r2, #1
 800c0f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2201      	movs	r2, #1
 800c0fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2201      	movs	r2, #1
 800c102:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2201      	movs	r2, #1
 800c10a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2201      	movs	r2, #1
 800c112:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2201      	movs	r2, #1
 800c11a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c11e:	2300      	movs	r3, #0
}
 800c120:	4618      	mov	r0, r3
 800c122:	3708      	adds	r7, #8
 800c124:	46bd      	mov	sp, r7
 800c126:	bd80      	pop	{r7, pc}

0800c128 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c128:	b480      	push	{r7}
 800c12a:	b083      	sub	sp, #12
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c130:	bf00      	nop
 800c132:	370c      	adds	r7, #12
 800c134:	46bd      	mov	sp, r7
 800c136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13a:	4770      	bx	lr

0800c13c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b084      	sub	sp, #16
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
 800c144:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d109      	bne.n	800c160 <HAL_TIM_PWM_Start+0x24>
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c152:	b2db      	uxtb	r3, r3
 800c154:	2b01      	cmp	r3, #1
 800c156:	bf14      	ite	ne
 800c158:	2301      	movne	r3, #1
 800c15a:	2300      	moveq	r3, #0
 800c15c:	b2db      	uxtb	r3, r3
 800c15e:	e03c      	b.n	800c1da <HAL_TIM_PWM_Start+0x9e>
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	2b04      	cmp	r3, #4
 800c164:	d109      	bne.n	800c17a <HAL_TIM_PWM_Start+0x3e>
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c16c:	b2db      	uxtb	r3, r3
 800c16e:	2b01      	cmp	r3, #1
 800c170:	bf14      	ite	ne
 800c172:	2301      	movne	r3, #1
 800c174:	2300      	moveq	r3, #0
 800c176:	b2db      	uxtb	r3, r3
 800c178:	e02f      	b.n	800c1da <HAL_TIM_PWM_Start+0x9e>
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	2b08      	cmp	r3, #8
 800c17e:	d109      	bne.n	800c194 <HAL_TIM_PWM_Start+0x58>
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c186:	b2db      	uxtb	r3, r3
 800c188:	2b01      	cmp	r3, #1
 800c18a:	bf14      	ite	ne
 800c18c:	2301      	movne	r3, #1
 800c18e:	2300      	moveq	r3, #0
 800c190:	b2db      	uxtb	r3, r3
 800c192:	e022      	b.n	800c1da <HAL_TIM_PWM_Start+0x9e>
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	2b0c      	cmp	r3, #12
 800c198:	d109      	bne.n	800c1ae <HAL_TIM_PWM_Start+0x72>
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c1a0:	b2db      	uxtb	r3, r3
 800c1a2:	2b01      	cmp	r3, #1
 800c1a4:	bf14      	ite	ne
 800c1a6:	2301      	movne	r3, #1
 800c1a8:	2300      	moveq	r3, #0
 800c1aa:	b2db      	uxtb	r3, r3
 800c1ac:	e015      	b.n	800c1da <HAL_TIM_PWM_Start+0x9e>
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	2b10      	cmp	r3, #16
 800c1b2:	d109      	bne.n	800c1c8 <HAL_TIM_PWM_Start+0x8c>
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c1ba:	b2db      	uxtb	r3, r3
 800c1bc:	2b01      	cmp	r3, #1
 800c1be:	bf14      	ite	ne
 800c1c0:	2301      	movne	r3, #1
 800c1c2:	2300      	moveq	r3, #0
 800c1c4:	b2db      	uxtb	r3, r3
 800c1c6:	e008      	b.n	800c1da <HAL_TIM_PWM_Start+0x9e>
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c1ce:	b2db      	uxtb	r3, r3
 800c1d0:	2b01      	cmp	r3, #1
 800c1d2:	bf14      	ite	ne
 800c1d4:	2301      	movne	r3, #1
 800c1d6:	2300      	moveq	r3, #0
 800c1d8:	b2db      	uxtb	r3, r3
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d001      	beq.n	800c1e2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c1de:	2301      	movs	r3, #1
 800c1e0:	e073      	b.n	800c2ca <HAL_TIM_PWM_Start+0x18e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d104      	bne.n	800c1f2 <HAL_TIM_PWM_Start+0xb6>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2202      	movs	r2, #2
 800c1ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c1f0:	e023      	b.n	800c23a <HAL_TIM_PWM_Start+0xfe>
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	2b04      	cmp	r3, #4
 800c1f6:	d104      	bne.n	800c202 <HAL_TIM_PWM_Start+0xc6>
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2202      	movs	r2, #2
 800c1fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c200:	e01b      	b.n	800c23a <HAL_TIM_PWM_Start+0xfe>
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	2b08      	cmp	r3, #8
 800c206:	d104      	bne.n	800c212 <HAL_TIM_PWM_Start+0xd6>
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2202      	movs	r2, #2
 800c20c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c210:	e013      	b.n	800c23a <HAL_TIM_PWM_Start+0xfe>
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	2b0c      	cmp	r3, #12
 800c216:	d104      	bne.n	800c222 <HAL_TIM_PWM_Start+0xe6>
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2202      	movs	r2, #2
 800c21c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c220:	e00b      	b.n	800c23a <HAL_TIM_PWM_Start+0xfe>
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	2b10      	cmp	r3, #16
 800c226:	d104      	bne.n	800c232 <HAL_TIM_PWM_Start+0xf6>
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2202      	movs	r2, #2
 800c22c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c230:	e003      	b.n	800c23a <HAL_TIM_PWM_Start+0xfe>
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2202      	movs	r2, #2
 800c236:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	2201      	movs	r2, #1
 800c240:	6839      	ldr	r1, [r7, #0]
 800c242:	4618      	mov	r0, r3
 800c244:	f001 fab4 	bl	800d7b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	4a21      	ldr	r2, [pc, #132]	; (800c2d4 <HAL_TIM_PWM_Start+0x198>)
 800c24e:	4293      	cmp	r3, r2
 800c250:	d018      	beq.n	800c284 <HAL_TIM_PWM_Start+0x148>
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	4a20      	ldr	r2, [pc, #128]	; (800c2d8 <HAL_TIM_PWM_Start+0x19c>)
 800c258:	4293      	cmp	r3, r2
 800c25a:	d013      	beq.n	800c284 <HAL_TIM_PWM_Start+0x148>
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	4a1e      	ldr	r2, [pc, #120]	; (800c2dc <HAL_TIM_PWM_Start+0x1a0>)
 800c262:	4293      	cmp	r3, r2
 800c264:	d00e      	beq.n	800c284 <HAL_TIM_PWM_Start+0x148>
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	4a1d      	ldr	r2, [pc, #116]	; (800c2e0 <HAL_TIM_PWM_Start+0x1a4>)
 800c26c:	4293      	cmp	r3, r2
 800c26e:	d009      	beq.n	800c284 <HAL_TIM_PWM_Start+0x148>
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	4a1b      	ldr	r2, [pc, #108]	; (800c2e4 <HAL_TIM_PWM_Start+0x1a8>)
 800c276:	4293      	cmp	r3, r2
 800c278:	d004      	beq.n	800c284 <HAL_TIM_PWM_Start+0x148>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	4a1a      	ldr	r2, [pc, #104]	; (800c2e8 <HAL_TIM_PWM_Start+0x1ac>)
 800c280:	4293      	cmp	r3, r2
 800c282:	d101      	bne.n	800c288 <HAL_TIM_PWM_Start+0x14c>
 800c284:	2301      	movs	r3, #1
 800c286:	e000      	b.n	800c28a <HAL_TIM_PWM_Start+0x14e>
 800c288:	2300      	movs	r3, #0
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d007      	beq.n	800c29e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c29c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	689a      	ldr	r2, [r3, #8]
 800c2a4:	4b11      	ldr	r3, [pc, #68]	; (800c2ec <HAL_TIM_PWM_Start+0x1b0>)
 800c2a6:	4013      	ands	r3, r2
 800c2a8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	2b06      	cmp	r3, #6
 800c2ae:	d00b      	beq.n	800c2c8 <HAL_TIM_PWM_Start+0x18c>
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2b6:	d007      	beq.n	800c2c8 <HAL_TIM_PWM_Start+0x18c>
  {
    __HAL_TIM_ENABLE(htim);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	681a      	ldr	r2, [r3, #0]
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f042 0201 	orr.w	r2, r2, #1
 800c2c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c2c8:	2300      	movs	r3, #0
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3710      	adds	r7, #16
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}
 800c2d2:	bf00      	nop
 800c2d4:	40012c00 	.word	0x40012c00
 800c2d8:	40013400 	.word	0x40013400
 800c2dc:	40014000 	.word	0x40014000
 800c2e0:	40014400 	.word	0x40014400
 800c2e4:	40014800 	.word	0x40014800
 800c2e8:	40015000 	.word	0x40015000
 800c2ec:	00010007 	.word	0x00010007

0800c2f0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b082      	sub	sp, #8
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
 800c2f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	2200      	movs	r2, #0
 800c300:	6839      	ldr	r1, [r7, #0]
 800c302:	4618      	mov	r0, r3
 800c304:	f001 fa54 	bl	800d7b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	4a40      	ldr	r2, [pc, #256]	; (800c410 <HAL_TIM_PWM_Stop+0x120>)
 800c30e:	4293      	cmp	r3, r2
 800c310:	d018      	beq.n	800c344 <HAL_TIM_PWM_Stop+0x54>
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	4a3f      	ldr	r2, [pc, #252]	; (800c414 <HAL_TIM_PWM_Stop+0x124>)
 800c318:	4293      	cmp	r3, r2
 800c31a:	d013      	beq.n	800c344 <HAL_TIM_PWM_Stop+0x54>
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	4a3d      	ldr	r2, [pc, #244]	; (800c418 <HAL_TIM_PWM_Stop+0x128>)
 800c322:	4293      	cmp	r3, r2
 800c324:	d00e      	beq.n	800c344 <HAL_TIM_PWM_Stop+0x54>
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	4a3c      	ldr	r2, [pc, #240]	; (800c41c <HAL_TIM_PWM_Stop+0x12c>)
 800c32c:	4293      	cmp	r3, r2
 800c32e:	d009      	beq.n	800c344 <HAL_TIM_PWM_Stop+0x54>
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	4a3a      	ldr	r2, [pc, #232]	; (800c420 <HAL_TIM_PWM_Stop+0x130>)
 800c336:	4293      	cmp	r3, r2
 800c338:	d004      	beq.n	800c344 <HAL_TIM_PWM_Stop+0x54>
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	4a39      	ldr	r2, [pc, #228]	; (800c424 <HAL_TIM_PWM_Stop+0x134>)
 800c340:	4293      	cmp	r3, r2
 800c342:	d101      	bne.n	800c348 <HAL_TIM_PWM_Stop+0x58>
 800c344:	2301      	movs	r3, #1
 800c346:	e000      	b.n	800c34a <HAL_TIM_PWM_Stop+0x5a>
 800c348:	2300      	movs	r3, #0
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d017      	beq.n	800c37e <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	6a1a      	ldr	r2, [r3, #32]
 800c354:	f241 1311 	movw	r3, #4369	; 0x1111
 800c358:	4013      	ands	r3, r2
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d10f      	bne.n	800c37e <HAL_TIM_PWM_Stop+0x8e>
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	6a1a      	ldr	r2, [r3, #32]
 800c364:	f244 4344 	movw	r3, #17476	; 0x4444
 800c368:	4013      	ands	r3, r2
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d107      	bne.n	800c37e <HAL_TIM_PWM_Stop+0x8e>
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c37c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	6a1a      	ldr	r2, [r3, #32]
 800c384:	f241 1311 	movw	r3, #4369	; 0x1111
 800c388:	4013      	ands	r3, r2
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d10f      	bne.n	800c3ae <HAL_TIM_PWM_Stop+0xbe>
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	6a1a      	ldr	r2, [r3, #32]
 800c394:	f244 4344 	movw	r3, #17476	; 0x4444
 800c398:	4013      	ands	r3, r2
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d107      	bne.n	800c3ae <HAL_TIM_PWM_Stop+0xbe>
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	681a      	ldr	r2, [r3, #0]
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f022 0201 	bic.w	r2, r2, #1
 800c3ac:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d104      	bne.n	800c3be <HAL_TIM_PWM_Stop+0xce>
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2201      	movs	r2, #1
 800c3b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c3bc:	e023      	b.n	800c406 <HAL_TIM_PWM_Stop+0x116>
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	2b04      	cmp	r3, #4
 800c3c2:	d104      	bne.n	800c3ce <HAL_TIM_PWM_Stop+0xde>
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c3cc:	e01b      	b.n	800c406 <HAL_TIM_PWM_Stop+0x116>
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	2b08      	cmp	r3, #8
 800c3d2:	d104      	bne.n	800c3de <HAL_TIM_PWM_Stop+0xee>
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2201      	movs	r2, #1
 800c3d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c3dc:	e013      	b.n	800c406 <HAL_TIM_PWM_Stop+0x116>
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	2b0c      	cmp	r3, #12
 800c3e2:	d104      	bne.n	800c3ee <HAL_TIM_PWM_Stop+0xfe>
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2201      	movs	r2, #1
 800c3e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c3ec:	e00b      	b.n	800c406 <HAL_TIM_PWM_Stop+0x116>
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	2b10      	cmp	r3, #16
 800c3f2:	d104      	bne.n	800c3fe <HAL_TIM_PWM_Stop+0x10e>
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2201      	movs	r2, #1
 800c3f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c3fc:	e003      	b.n	800c406 <HAL_TIM_PWM_Stop+0x116>
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2201      	movs	r2, #1
 800c402:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800c406:	2300      	movs	r3, #0
}
 800c408:	4618      	mov	r0, r3
 800c40a:	3708      	adds	r7, #8
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}
 800c410:	40012c00 	.word	0x40012c00
 800c414:	40013400 	.word	0x40013400
 800c418:	40014000 	.word	0x40014000
 800c41c:	40014400 	.word	0x40014400
 800c420:	40014800 	.word	0x40014800
 800c424:	40015000 	.word	0x40015000

0800c428 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b086      	sub	sp, #24
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
 800c430:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d101      	bne.n	800c43c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c438:	2301      	movs	r3, #1
 800c43a:	e097      	b.n	800c56c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c442:	b2db      	uxtb	r3, r3
 800c444:	2b00      	cmp	r3, #0
 800c446:	d106      	bne.n	800c456 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2200      	movs	r2, #0
 800c44c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f7fb fcb1 	bl	8007db8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2202      	movs	r2, #2
 800c45a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	689b      	ldr	r3, [r3, #8]
 800c464:	687a      	ldr	r2, [r7, #4]
 800c466:	6812      	ldr	r2, [r2, #0]
 800c468:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800c46c:	f023 0307 	bic.w	r3, r3, #7
 800c470:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681a      	ldr	r2, [r3, #0]
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	3304      	adds	r3, #4
 800c47a:	4619      	mov	r1, r3
 800c47c:	4610      	mov	r0, r2
 800c47e:	f000 fc6d 	bl	800cd5c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	689b      	ldr	r3, [r3, #8]
 800c488:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	699b      	ldr	r3, [r3, #24]
 800c490:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	6a1b      	ldr	r3, [r3, #32]
 800c498:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	697a      	ldr	r2, [r7, #20]
 800c4a0:	4313      	orrs	r3, r2
 800c4a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c4a4:	693b      	ldr	r3, [r7, #16]
 800c4a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c4aa:	f023 0303 	bic.w	r3, r3, #3
 800c4ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	689a      	ldr	r2, [r3, #8]
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	699b      	ldr	r3, [r3, #24]
 800c4b8:	021b      	lsls	r3, r3, #8
 800c4ba:	4313      	orrs	r3, r2
 800c4bc:	693a      	ldr	r2, [r7, #16]
 800c4be:	4313      	orrs	r3, r2
 800c4c0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800c4c8:	f023 030c 	bic.w	r3, r3, #12
 800c4cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c4d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c4d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	68da      	ldr	r2, [r3, #12]
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	69db      	ldr	r3, [r3, #28]
 800c4e2:	021b      	lsls	r3, r3, #8
 800c4e4:	4313      	orrs	r3, r2
 800c4e6:	693a      	ldr	r2, [r7, #16]
 800c4e8:	4313      	orrs	r3, r2
 800c4ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	691b      	ldr	r3, [r3, #16]
 800c4f0:	011a      	lsls	r2, r3, #4
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	6a1b      	ldr	r3, [r3, #32]
 800c4f6:	031b      	lsls	r3, r3, #12
 800c4f8:	4313      	orrs	r3, r2
 800c4fa:	693a      	ldr	r2, [r7, #16]
 800c4fc:	4313      	orrs	r3, r2
 800c4fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800c506:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800c50e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	685a      	ldr	r2, [r3, #4]
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	695b      	ldr	r3, [r3, #20]
 800c518:	011b      	lsls	r3, r3, #4
 800c51a:	4313      	orrs	r3, r2
 800c51c:	68fa      	ldr	r2, [r7, #12]
 800c51e:	4313      	orrs	r3, r2
 800c520:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	697a      	ldr	r2, [r7, #20]
 800c528:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	693a      	ldr	r2, [r7, #16]
 800c530:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	68fa      	ldr	r2, [r7, #12]
 800c538:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2201      	movs	r2, #1
 800c53e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2201      	movs	r2, #1
 800c546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2201      	movs	r2, #1
 800c54e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2201      	movs	r2, #1
 800c556:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	2201      	movs	r2, #1
 800c55e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2201      	movs	r2, #1
 800c566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c56a:	2300      	movs	r3, #0
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	3718      	adds	r7, #24
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}

0800c574 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b082      	sub	sp, #8
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	691b      	ldr	r3, [r3, #16]
 800c582:	f003 0302 	and.w	r3, r3, #2
 800c586:	2b02      	cmp	r3, #2
 800c588:	d122      	bne.n	800c5d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	68db      	ldr	r3, [r3, #12]
 800c590:	f003 0302 	and.w	r3, r3, #2
 800c594:	2b02      	cmp	r3, #2
 800c596:	d11b      	bne.n	800c5d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	f06f 0202 	mvn.w	r2, #2
 800c5a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2201      	movs	r2, #1
 800c5a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	699b      	ldr	r3, [r3, #24]
 800c5ae:	f003 0303 	and.w	r3, r3, #3
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d003      	beq.n	800c5be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	f000 fbb2 	bl	800cd20 <HAL_TIM_IC_CaptureCallback>
 800c5bc:	e005      	b.n	800c5ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f000 fba4 	bl	800cd0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	f000 fbb5 	bl	800cd34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	691b      	ldr	r3, [r3, #16]
 800c5d6:	f003 0304 	and.w	r3, r3, #4
 800c5da:	2b04      	cmp	r3, #4
 800c5dc:	d122      	bne.n	800c624 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	68db      	ldr	r3, [r3, #12]
 800c5e4:	f003 0304 	and.w	r3, r3, #4
 800c5e8:	2b04      	cmp	r3, #4
 800c5ea:	d11b      	bne.n	800c624 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	f06f 0204 	mvn.w	r2, #4
 800c5f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2202      	movs	r2, #2
 800c5fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	699b      	ldr	r3, [r3, #24]
 800c602:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c606:	2b00      	cmp	r3, #0
 800c608:	d003      	beq.n	800c612 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f000 fb88 	bl	800cd20 <HAL_TIM_IC_CaptureCallback>
 800c610:	e005      	b.n	800c61e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f000 fb7a 	bl	800cd0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c618:	6878      	ldr	r0, [r7, #4]
 800c61a:	f000 fb8b 	bl	800cd34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2200      	movs	r2, #0
 800c622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	691b      	ldr	r3, [r3, #16]
 800c62a:	f003 0308 	and.w	r3, r3, #8
 800c62e:	2b08      	cmp	r3, #8
 800c630:	d122      	bne.n	800c678 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	68db      	ldr	r3, [r3, #12]
 800c638:	f003 0308 	and.w	r3, r3, #8
 800c63c:	2b08      	cmp	r3, #8
 800c63e:	d11b      	bne.n	800c678 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	f06f 0208 	mvn.w	r2, #8
 800c648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2204      	movs	r2, #4
 800c64e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	69db      	ldr	r3, [r3, #28]
 800c656:	f003 0303 	and.w	r3, r3, #3
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d003      	beq.n	800c666 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	f000 fb5e 	bl	800cd20 <HAL_TIM_IC_CaptureCallback>
 800c664:	e005      	b.n	800c672 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f000 fb50 	bl	800cd0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f000 fb61 	bl	800cd34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2200      	movs	r2, #0
 800c676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	691b      	ldr	r3, [r3, #16]
 800c67e:	f003 0310 	and.w	r3, r3, #16
 800c682:	2b10      	cmp	r3, #16
 800c684:	d122      	bne.n	800c6cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	68db      	ldr	r3, [r3, #12]
 800c68c:	f003 0310 	and.w	r3, r3, #16
 800c690:	2b10      	cmp	r3, #16
 800c692:	d11b      	bne.n	800c6cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	f06f 0210 	mvn.w	r2, #16
 800c69c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	2208      	movs	r2, #8
 800c6a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	69db      	ldr	r3, [r3, #28]
 800c6aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d003      	beq.n	800c6ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c6b2:	6878      	ldr	r0, [r7, #4]
 800c6b4:	f000 fb34 	bl	800cd20 <HAL_TIM_IC_CaptureCallback>
 800c6b8:	e005      	b.n	800c6c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6ba:	6878      	ldr	r0, [r7, #4]
 800c6bc:	f000 fb26 	bl	800cd0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f000 fb37 	bl	800cd34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	691b      	ldr	r3, [r3, #16]
 800c6d2:	f003 0301 	and.w	r3, r3, #1
 800c6d6:	2b01      	cmp	r3, #1
 800c6d8:	d10e      	bne.n	800c6f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	68db      	ldr	r3, [r3, #12]
 800c6e0:	f003 0301 	and.w	r3, r3, #1
 800c6e4:	2b01      	cmp	r3, #1
 800c6e6:	d107      	bne.n	800c6f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f06f 0201 	mvn.w	r2, #1
 800c6f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f000 fb00 	bl	800ccf8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	691b      	ldr	r3, [r3, #16]
 800c6fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c702:	2b80      	cmp	r3, #128	; 0x80
 800c704:	d10e      	bne.n	800c724 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	68db      	ldr	r3, [r3, #12]
 800c70c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c710:	2b80      	cmp	r3, #128	; 0x80
 800c712:	d107      	bne.n	800c724 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c71c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f001 f9be 	bl	800daa0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	691b      	ldr	r3, [r3, #16]
 800c72a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c72e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c732:	d10e      	bne.n	800c752 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	68db      	ldr	r3, [r3, #12]
 800c73a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c73e:	2b80      	cmp	r3, #128	; 0x80
 800c740:	d107      	bne.n	800c752 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c74a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c74c:	6878      	ldr	r0, [r7, #4]
 800c74e:	f001 f9b1 	bl	800dab4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	691b      	ldr	r3, [r3, #16]
 800c758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c75c:	2b40      	cmp	r3, #64	; 0x40
 800c75e:	d10e      	bne.n	800c77e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	68db      	ldr	r3, [r3, #12]
 800c766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c76a:	2b40      	cmp	r3, #64	; 0x40
 800c76c:	d107      	bne.n	800c77e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c776:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c778:	6878      	ldr	r0, [r7, #4]
 800c77a:	f000 fae5 	bl	800cd48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	691b      	ldr	r3, [r3, #16]
 800c784:	f003 0320 	and.w	r3, r3, #32
 800c788:	2b20      	cmp	r3, #32
 800c78a:	d10e      	bne.n	800c7aa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	68db      	ldr	r3, [r3, #12]
 800c792:	f003 0320 	and.w	r3, r3, #32
 800c796:	2b20      	cmp	r3, #32
 800c798:	d107      	bne.n	800c7aa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	f06f 0220 	mvn.w	r2, #32
 800c7a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f001 f971 	bl	800da8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	691b      	ldr	r3, [r3, #16]
 800c7b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c7b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c7b8:	d10f      	bne.n	800c7da <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	68db      	ldr	r3, [r3, #12]
 800c7c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c7c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c7c8:	d107      	bne.n	800c7da <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800c7d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f001 f977 	bl	800dac8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	691b      	ldr	r3, [r3, #16]
 800c7e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c7e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c7e8:	d10f      	bne.n	800c80a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	68db      	ldr	r3, [r3, #12]
 800c7f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c7f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c7f8:	d107      	bne.n	800c80a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800c802:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	f001 f969 	bl	800dadc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	691b      	ldr	r3, [r3, #16]
 800c810:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c814:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c818:	d10f      	bne.n	800c83a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	68db      	ldr	r3, [r3, #12]
 800c820:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c824:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c828:	d107      	bne.n	800c83a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800c832:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f001 f95b 	bl	800daf0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	691b      	ldr	r3, [r3, #16]
 800c840:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c844:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c848:	d10f      	bne.n	800c86a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	68db      	ldr	r3, [r3, #12]
 800c850:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c854:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c858:	d107      	bne.n	800c86a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800c862:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800c864:	6878      	ldr	r0, [r7, #4]
 800c866:	f001 f94d 	bl	800db04 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c86a:	bf00      	nop
 800c86c:	3708      	adds	r7, #8
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}
	...

0800c874 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b084      	sub	sp, #16
 800c878:	af00      	add	r7, sp, #0
 800c87a:	60f8      	str	r0, [r7, #12]
 800c87c:	60b9      	str	r1, [r7, #8]
 800c87e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c886:	2b01      	cmp	r3, #1
 800c888:	d101      	bne.n	800c88e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800c88a:	2302      	movs	r3, #2
 800c88c:	e0fd      	b.n	800ca8a <HAL_TIM_PWM_ConfigChannel+0x216>
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	2201      	movs	r2, #1
 800c892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2b14      	cmp	r3, #20
 800c89a:	f200 80f0 	bhi.w	800ca7e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800c89e:	a201      	add	r2, pc, #4	; (adr r2, 800c8a4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800c8a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8a4:	0800c8f9 	.word	0x0800c8f9
 800c8a8:	0800ca7f 	.word	0x0800ca7f
 800c8ac:	0800ca7f 	.word	0x0800ca7f
 800c8b0:	0800ca7f 	.word	0x0800ca7f
 800c8b4:	0800c939 	.word	0x0800c939
 800c8b8:	0800ca7f 	.word	0x0800ca7f
 800c8bc:	0800ca7f 	.word	0x0800ca7f
 800c8c0:	0800ca7f 	.word	0x0800ca7f
 800c8c4:	0800c97b 	.word	0x0800c97b
 800c8c8:	0800ca7f 	.word	0x0800ca7f
 800c8cc:	0800ca7f 	.word	0x0800ca7f
 800c8d0:	0800ca7f 	.word	0x0800ca7f
 800c8d4:	0800c9bb 	.word	0x0800c9bb
 800c8d8:	0800ca7f 	.word	0x0800ca7f
 800c8dc:	0800ca7f 	.word	0x0800ca7f
 800c8e0:	0800ca7f 	.word	0x0800ca7f
 800c8e4:	0800c9fd 	.word	0x0800c9fd
 800c8e8:	0800ca7f 	.word	0x0800ca7f
 800c8ec:	0800ca7f 	.word	0x0800ca7f
 800c8f0:	0800ca7f 	.word	0x0800ca7f
 800c8f4:	0800ca3d 	.word	0x0800ca3d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	68b9      	ldr	r1, [r7, #8]
 800c8fe:	4618      	mov	r0, r3
 800c900:	f000 fad4 	bl	800ceac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	699a      	ldr	r2, [r3, #24]
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	f042 0208 	orr.w	r2, r2, #8
 800c912:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	699a      	ldr	r2, [r3, #24]
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	f022 0204 	bic.w	r2, r2, #4
 800c922:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	6999      	ldr	r1, [r3, #24]
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	691a      	ldr	r2, [r3, #16]
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	430a      	orrs	r2, r1
 800c934:	619a      	str	r2, [r3, #24]
      break;
 800c936:	e0a3      	b.n	800ca80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	68b9      	ldr	r1, [r7, #8]
 800c93e:	4618      	mov	r0, r3
 800c940:	f000 fb4e 	bl	800cfe0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	699a      	ldr	r2, [r3, #24]
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c952:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	699a      	ldr	r2, [r3, #24]
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c962:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	6999      	ldr	r1, [r3, #24]
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	691b      	ldr	r3, [r3, #16]
 800c96e:	021a      	lsls	r2, r3, #8
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	430a      	orrs	r2, r1
 800c976:	619a      	str	r2, [r3, #24]
      break;
 800c978:	e082      	b.n	800ca80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	68b9      	ldr	r1, [r7, #8]
 800c980:	4618      	mov	r0, r3
 800c982:	f000 fbc1 	bl	800d108 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	69da      	ldr	r2, [r3, #28]
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	f042 0208 	orr.w	r2, r2, #8
 800c994:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	69da      	ldr	r2, [r3, #28]
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	f022 0204 	bic.w	r2, r2, #4
 800c9a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	69d9      	ldr	r1, [r3, #28]
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	691a      	ldr	r2, [r3, #16]
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	430a      	orrs	r2, r1
 800c9b6:	61da      	str	r2, [r3, #28]
      break;
 800c9b8:	e062      	b.n	800ca80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	68b9      	ldr	r1, [r7, #8]
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f000 fc33 	bl	800d22c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	69da      	ldr	r2, [r3, #28]
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c9d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	69da      	ldr	r2, [r3, #28]
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c9e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	69d9      	ldr	r1, [r3, #28]
 800c9ec:	68bb      	ldr	r3, [r7, #8]
 800c9ee:	691b      	ldr	r3, [r3, #16]
 800c9f0:	021a      	lsls	r2, r3, #8
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	430a      	orrs	r2, r1
 800c9f8:	61da      	str	r2, [r3, #28]
      break;
 800c9fa:	e041      	b.n	800ca80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	68b9      	ldr	r1, [r7, #8]
 800ca02:	4618      	mov	r0, r3
 800ca04:	f000 fca6 	bl	800d354 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	f042 0208 	orr.w	r2, r2, #8
 800ca16:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	f022 0204 	bic.w	r2, r2, #4
 800ca26:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800ca2e:	68bb      	ldr	r3, [r7, #8]
 800ca30:	691a      	ldr	r2, [r3, #16]
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	430a      	orrs	r2, r1
 800ca38:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800ca3a:	e021      	b.n	800ca80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	68b9      	ldr	r1, [r7, #8]
 800ca42:	4618      	mov	r0, r3
 800ca44:	f000 fcf0 	bl	800d428 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ca56:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ca66:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	691b      	ldr	r3, [r3, #16]
 800ca72:	021a      	lsls	r2, r3, #8
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	430a      	orrs	r2, r1
 800ca7a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800ca7c:	e000      	b.n	800ca80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800ca7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	2200      	movs	r2, #0
 800ca84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ca88:	2300      	movs	r3, #0
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3710      	adds	r7, #16
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}
 800ca92:	bf00      	nop

0800ca94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b084      	sub	sp, #16
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
 800ca9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800caa4:	2b01      	cmp	r3, #1
 800caa6:	d101      	bne.n	800caac <HAL_TIM_ConfigClockSource+0x18>
 800caa8:	2302      	movs	r3, #2
 800caaa:	e0d2      	b.n	800cc52 <HAL_TIM_ConfigClockSource+0x1be>
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2201      	movs	r2, #1
 800cab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2202      	movs	r2, #2
 800cab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	689b      	ldr	r3, [r3, #8]
 800cac2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800caca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800cace:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cad6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	68fa      	ldr	r2, [r7, #12]
 800cade:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cae8:	f000 80a9 	beq.w	800cc3e <HAL_TIM_ConfigClockSource+0x1aa>
 800caec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800caf0:	d81a      	bhi.n	800cb28 <HAL_TIM_ConfigClockSource+0x94>
 800caf2:	2b30      	cmp	r3, #48	; 0x30
 800caf4:	f000 809a 	beq.w	800cc2c <HAL_TIM_ConfigClockSource+0x198>
 800caf8:	2b30      	cmp	r3, #48	; 0x30
 800cafa:	d809      	bhi.n	800cb10 <HAL_TIM_ConfigClockSource+0x7c>
 800cafc:	2b10      	cmp	r3, #16
 800cafe:	f000 8095 	beq.w	800cc2c <HAL_TIM_ConfigClockSource+0x198>
 800cb02:	2b20      	cmp	r3, #32
 800cb04:	f000 8092 	beq.w	800cc2c <HAL_TIM_ConfigClockSource+0x198>
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	f000 808f 	beq.w	800cc2c <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800cb0e:	e097      	b.n	800cc40 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800cb10:	2b50      	cmp	r3, #80	; 0x50
 800cb12:	d05b      	beq.n	800cbcc <HAL_TIM_ConfigClockSource+0x138>
 800cb14:	2b50      	cmp	r3, #80	; 0x50
 800cb16:	d802      	bhi.n	800cb1e <HAL_TIM_ConfigClockSource+0x8a>
 800cb18:	2b40      	cmp	r3, #64	; 0x40
 800cb1a:	d077      	beq.n	800cc0c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800cb1c:	e090      	b.n	800cc40 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800cb1e:	2b60      	cmp	r3, #96	; 0x60
 800cb20:	d064      	beq.n	800cbec <HAL_TIM_ConfigClockSource+0x158>
 800cb22:	2b70      	cmp	r3, #112	; 0x70
 800cb24:	d028      	beq.n	800cb78 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800cb26:	e08b      	b.n	800cc40 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800cb28:	4a4c      	ldr	r2, [pc, #304]	; (800cc5c <HAL_TIM_ConfigClockSource+0x1c8>)
 800cb2a:	4293      	cmp	r3, r2
 800cb2c:	d07e      	beq.n	800cc2c <HAL_TIM_ConfigClockSource+0x198>
 800cb2e:	4a4b      	ldr	r2, [pc, #300]	; (800cc5c <HAL_TIM_ConfigClockSource+0x1c8>)
 800cb30:	4293      	cmp	r3, r2
 800cb32:	d810      	bhi.n	800cb56 <HAL_TIM_ConfigClockSource+0xc2>
 800cb34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cb38:	d078      	beq.n	800cc2c <HAL_TIM_ConfigClockSource+0x198>
 800cb3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cb3e:	d803      	bhi.n	800cb48 <HAL_TIM_ConfigClockSource+0xb4>
 800cb40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb44:	d02f      	beq.n	800cba6 <HAL_TIM_ConfigClockSource+0x112>
      break;
 800cb46:	e07b      	b.n	800cc40 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800cb48:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800cb4c:	d06e      	beq.n	800cc2c <HAL_TIM_ConfigClockSource+0x198>
 800cb4e:	4a44      	ldr	r2, [pc, #272]	; (800cc60 <HAL_TIM_ConfigClockSource+0x1cc>)
 800cb50:	4293      	cmp	r3, r2
 800cb52:	d06b      	beq.n	800cc2c <HAL_TIM_ConfigClockSource+0x198>
      break;
 800cb54:	e074      	b.n	800cc40 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800cb56:	4a43      	ldr	r2, [pc, #268]	; (800cc64 <HAL_TIM_ConfigClockSource+0x1d0>)
 800cb58:	4293      	cmp	r3, r2
 800cb5a:	d067      	beq.n	800cc2c <HAL_TIM_ConfigClockSource+0x198>
 800cb5c:	4a41      	ldr	r2, [pc, #260]	; (800cc64 <HAL_TIM_ConfigClockSource+0x1d0>)
 800cb5e:	4293      	cmp	r3, r2
 800cb60:	d803      	bhi.n	800cb6a <HAL_TIM_ConfigClockSource+0xd6>
 800cb62:	4a41      	ldr	r2, [pc, #260]	; (800cc68 <HAL_TIM_ConfigClockSource+0x1d4>)
 800cb64:	4293      	cmp	r3, r2
 800cb66:	d061      	beq.n	800cc2c <HAL_TIM_ConfigClockSource+0x198>
      break;
 800cb68:	e06a      	b.n	800cc40 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800cb6a:	4a40      	ldr	r2, [pc, #256]	; (800cc6c <HAL_TIM_ConfigClockSource+0x1d8>)
 800cb6c:	4293      	cmp	r3, r2
 800cb6e:	d05d      	beq.n	800cc2c <HAL_TIM_ConfigClockSource+0x198>
 800cb70:	4a3f      	ldr	r2, [pc, #252]	; (800cc70 <HAL_TIM_ConfigClockSource+0x1dc>)
 800cb72:	4293      	cmp	r3, r2
 800cb74:	d05a      	beq.n	800cc2c <HAL_TIM_ConfigClockSource+0x198>
      break;
 800cb76:	e063      	b.n	800cc40 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	6818      	ldr	r0, [r3, #0]
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	6899      	ldr	r1, [r3, #8]
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	685a      	ldr	r2, [r3, #4]
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	68db      	ldr	r3, [r3, #12]
 800cb88:	f000 fdf2 	bl	800d770 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	689b      	ldr	r3, [r3, #8]
 800cb92:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800cb9a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	68fa      	ldr	r2, [r7, #12]
 800cba2:	609a      	str	r2, [r3, #8]
      break;
 800cba4:	e04c      	b.n	800cc40 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	6818      	ldr	r0, [r3, #0]
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	6899      	ldr	r1, [r3, #8]
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	685a      	ldr	r2, [r3, #4]
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	68db      	ldr	r3, [r3, #12]
 800cbb6:	f000 fddb 	bl	800d770 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	689a      	ldr	r2, [r3, #8]
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cbc8:	609a      	str	r2, [r3, #8]
      break;
 800cbca:	e039      	b.n	800cc40 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	6818      	ldr	r0, [r3, #0]
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	6859      	ldr	r1, [r3, #4]
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	68db      	ldr	r3, [r3, #12]
 800cbd8:	461a      	mov	r2, r3
 800cbda:	f000 fd4d 	bl	800d678 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	2150      	movs	r1, #80	; 0x50
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	f000 fda6 	bl	800d736 <TIM_ITRx_SetConfig>
      break;
 800cbea:	e029      	b.n	800cc40 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6818      	ldr	r0, [r3, #0]
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	6859      	ldr	r1, [r3, #4]
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	68db      	ldr	r3, [r3, #12]
 800cbf8:	461a      	mov	r2, r3
 800cbfa:	f000 fd6c 	bl	800d6d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	2160      	movs	r1, #96	; 0x60
 800cc04:	4618      	mov	r0, r3
 800cc06:	f000 fd96 	bl	800d736 <TIM_ITRx_SetConfig>
      break;
 800cc0a:	e019      	b.n	800cc40 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	6818      	ldr	r0, [r3, #0]
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	6859      	ldr	r1, [r3, #4]
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	68db      	ldr	r3, [r3, #12]
 800cc18:	461a      	mov	r2, r3
 800cc1a:	f000 fd2d 	bl	800d678 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	2140      	movs	r1, #64	; 0x40
 800cc24:	4618      	mov	r0, r3
 800cc26:	f000 fd86 	bl	800d736 <TIM_ITRx_SetConfig>
      break;
 800cc2a:	e009      	b.n	800cc40 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681a      	ldr	r2, [r3, #0]
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	4619      	mov	r1, r3
 800cc36:	4610      	mov	r0, r2
 800cc38:	f000 fd7d 	bl	800d736 <TIM_ITRx_SetConfig>
      break;
 800cc3c:	e000      	b.n	800cc40 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800cc3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2201      	movs	r2, #1
 800cc44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cc50:	2300      	movs	r3, #0
}
 800cc52:	4618      	mov	r0, r3
 800cc54:	3710      	adds	r7, #16
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}
 800cc5a:	bf00      	nop
 800cc5c:	00100030 	.word	0x00100030
 800cc60:	00100020 	.word	0x00100020
 800cc64:	00100050 	.word	0x00100050
 800cc68:	00100040 	.word	0x00100040
 800cc6c:	00100060 	.word	0x00100060
 800cc70:	00100070 	.word	0x00100070

0800cc74 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b082      	sub	sp, #8
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
 800cc7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc84:	2b01      	cmp	r3, #1
 800cc86:	d101      	bne.n	800cc8c <HAL_TIM_SlaveConfigSynchro+0x18>
 800cc88:	2302      	movs	r3, #2
 800cc8a:	e031      	b.n	800ccf0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2201      	movs	r2, #1
 800cc90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2202      	movs	r2, #2
 800cc98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800cc9c:	6839      	ldr	r1, [r7, #0]
 800cc9e:	6878      	ldr	r0, [r7, #4]
 800cca0:	f000 fc2e 	bl	800d500 <TIM_SlaveTimer_SetConfig>
 800cca4:	4603      	mov	r3, r0
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d009      	beq.n	800ccbe <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2201      	movs	r2, #1
 800ccae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800ccba:	2301      	movs	r3, #1
 800ccbc:	e018      	b.n	800ccf0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	68da      	ldr	r2, [r3, #12]
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cccc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	68da      	ldr	r2, [r3, #12]
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ccdc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2201      	movs	r2, #1
 800cce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2200      	movs	r2, #0
 800ccea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ccee:	2300      	movs	r3, #0
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3708      	adds	r7, #8
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}

0800ccf8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ccf8:	b480      	push	{r7}
 800ccfa:	b083      	sub	sp, #12
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800cd00:	bf00      	nop
 800cd02:	370c      	adds	r7, #12
 800cd04:	46bd      	mov	sp, r7
 800cd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0a:	4770      	bx	lr

0800cd0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cd0c:	b480      	push	{r7}
 800cd0e:	b083      	sub	sp, #12
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cd14:	bf00      	nop
 800cd16:	370c      	adds	r7, #12
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1e:	4770      	bx	lr

0800cd20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cd20:	b480      	push	{r7}
 800cd22:	b083      	sub	sp, #12
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cd28:	bf00      	nop
 800cd2a:	370c      	adds	r7, #12
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd32:	4770      	bx	lr

0800cd34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cd34:	b480      	push	{r7}
 800cd36:	b083      	sub	sp, #12
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cd3c:	bf00      	nop
 800cd3e:	370c      	adds	r7, #12
 800cd40:	46bd      	mov	sp, r7
 800cd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd46:	4770      	bx	lr

0800cd48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cd48:	b480      	push	{r7}
 800cd4a:	b083      	sub	sp, #12
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cd50:	bf00      	nop
 800cd52:	370c      	adds	r7, #12
 800cd54:	46bd      	mov	sp, r7
 800cd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5a:	4770      	bx	lr

0800cd5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cd5c:	b480      	push	{r7}
 800cd5e:	b085      	sub	sp, #20
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
 800cd64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	4a46      	ldr	r2, [pc, #280]	; (800ce88 <TIM_Base_SetConfig+0x12c>)
 800cd70:	4293      	cmp	r3, r2
 800cd72:	d017      	beq.n	800cda4 <TIM_Base_SetConfig+0x48>
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd7a:	d013      	beq.n	800cda4 <TIM_Base_SetConfig+0x48>
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	4a43      	ldr	r2, [pc, #268]	; (800ce8c <TIM_Base_SetConfig+0x130>)
 800cd80:	4293      	cmp	r3, r2
 800cd82:	d00f      	beq.n	800cda4 <TIM_Base_SetConfig+0x48>
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	4a42      	ldr	r2, [pc, #264]	; (800ce90 <TIM_Base_SetConfig+0x134>)
 800cd88:	4293      	cmp	r3, r2
 800cd8a:	d00b      	beq.n	800cda4 <TIM_Base_SetConfig+0x48>
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	4a41      	ldr	r2, [pc, #260]	; (800ce94 <TIM_Base_SetConfig+0x138>)
 800cd90:	4293      	cmp	r3, r2
 800cd92:	d007      	beq.n	800cda4 <TIM_Base_SetConfig+0x48>
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	4a40      	ldr	r2, [pc, #256]	; (800ce98 <TIM_Base_SetConfig+0x13c>)
 800cd98:	4293      	cmp	r3, r2
 800cd9a:	d003      	beq.n	800cda4 <TIM_Base_SetConfig+0x48>
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	4a3f      	ldr	r2, [pc, #252]	; (800ce9c <TIM_Base_SetConfig+0x140>)
 800cda0:	4293      	cmp	r3, r2
 800cda2:	d108      	bne.n	800cdb6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cdaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	685b      	ldr	r3, [r3, #4]
 800cdb0:	68fa      	ldr	r2, [r7, #12]
 800cdb2:	4313      	orrs	r3, r2
 800cdb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	4a33      	ldr	r2, [pc, #204]	; (800ce88 <TIM_Base_SetConfig+0x12c>)
 800cdba:	4293      	cmp	r3, r2
 800cdbc:	d023      	beq.n	800ce06 <TIM_Base_SetConfig+0xaa>
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cdc4:	d01f      	beq.n	800ce06 <TIM_Base_SetConfig+0xaa>
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	4a30      	ldr	r2, [pc, #192]	; (800ce8c <TIM_Base_SetConfig+0x130>)
 800cdca:	4293      	cmp	r3, r2
 800cdcc:	d01b      	beq.n	800ce06 <TIM_Base_SetConfig+0xaa>
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	4a2f      	ldr	r2, [pc, #188]	; (800ce90 <TIM_Base_SetConfig+0x134>)
 800cdd2:	4293      	cmp	r3, r2
 800cdd4:	d017      	beq.n	800ce06 <TIM_Base_SetConfig+0xaa>
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	4a2e      	ldr	r2, [pc, #184]	; (800ce94 <TIM_Base_SetConfig+0x138>)
 800cdda:	4293      	cmp	r3, r2
 800cddc:	d013      	beq.n	800ce06 <TIM_Base_SetConfig+0xaa>
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	4a2d      	ldr	r2, [pc, #180]	; (800ce98 <TIM_Base_SetConfig+0x13c>)
 800cde2:	4293      	cmp	r3, r2
 800cde4:	d00f      	beq.n	800ce06 <TIM_Base_SetConfig+0xaa>
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	4a2d      	ldr	r2, [pc, #180]	; (800cea0 <TIM_Base_SetConfig+0x144>)
 800cdea:	4293      	cmp	r3, r2
 800cdec:	d00b      	beq.n	800ce06 <TIM_Base_SetConfig+0xaa>
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	4a2c      	ldr	r2, [pc, #176]	; (800cea4 <TIM_Base_SetConfig+0x148>)
 800cdf2:	4293      	cmp	r3, r2
 800cdf4:	d007      	beq.n	800ce06 <TIM_Base_SetConfig+0xaa>
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	4a2b      	ldr	r2, [pc, #172]	; (800cea8 <TIM_Base_SetConfig+0x14c>)
 800cdfa:	4293      	cmp	r3, r2
 800cdfc:	d003      	beq.n	800ce06 <TIM_Base_SetConfig+0xaa>
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	4a26      	ldr	r2, [pc, #152]	; (800ce9c <TIM_Base_SetConfig+0x140>)
 800ce02:	4293      	cmp	r3, r2
 800ce04:	d108      	bne.n	800ce18 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ce0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	68db      	ldr	r3, [r3, #12]
 800ce12:	68fa      	ldr	r2, [r7, #12]
 800ce14:	4313      	orrs	r3, r2
 800ce16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	695b      	ldr	r3, [r3, #20]
 800ce22:	4313      	orrs	r3, r2
 800ce24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	68fa      	ldr	r2, [r7, #12]
 800ce2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	689a      	ldr	r2, [r3, #8]
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	681a      	ldr	r2, [r3, #0]
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	4a12      	ldr	r2, [pc, #72]	; (800ce88 <TIM_Base_SetConfig+0x12c>)
 800ce40:	4293      	cmp	r3, r2
 800ce42:	d013      	beq.n	800ce6c <TIM_Base_SetConfig+0x110>
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	4a14      	ldr	r2, [pc, #80]	; (800ce98 <TIM_Base_SetConfig+0x13c>)
 800ce48:	4293      	cmp	r3, r2
 800ce4a:	d00f      	beq.n	800ce6c <TIM_Base_SetConfig+0x110>
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	4a14      	ldr	r2, [pc, #80]	; (800cea0 <TIM_Base_SetConfig+0x144>)
 800ce50:	4293      	cmp	r3, r2
 800ce52:	d00b      	beq.n	800ce6c <TIM_Base_SetConfig+0x110>
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	4a13      	ldr	r2, [pc, #76]	; (800cea4 <TIM_Base_SetConfig+0x148>)
 800ce58:	4293      	cmp	r3, r2
 800ce5a:	d007      	beq.n	800ce6c <TIM_Base_SetConfig+0x110>
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	4a12      	ldr	r2, [pc, #72]	; (800cea8 <TIM_Base_SetConfig+0x14c>)
 800ce60:	4293      	cmp	r3, r2
 800ce62:	d003      	beq.n	800ce6c <TIM_Base_SetConfig+0x110>
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	4a0d      	ldr	r2, [pc, #52]	; (800ce9c <TIM_Base_SetConfig+0x140>)
 800ce68:	4293      	cmp	r3, r2
 800ce6a:	d103      	bne.n	800ce74 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	691a      	ldr	r2, [r3, #16]
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2201      	movs	r2, #1
 800ce78:	615a      	str	r2, [r3, #20]
}
 800ce7a:	bf00      	nop
 800ce7c:	3714      	adds	r7, #20
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce84:	4770      	bx	lr
 800ce86:	bf00      	nop
 800ce88:	40012c00 	.word	0x40012c00
 800ce8c:	40000400 	.word	0x40000400
 800ce90:	40000800 	.word	0x40000800
 800ce94:	40000c00 	.word	0x40000c00
 800ce98:	40013400 	.word	0x40013400
 800ce9c:	40015000 	.word	0x40015000
 800cea0:	40014000 	.word	0x40014000
 800cea4:	40014400 	.word	0x40014400
 800cea8:	40014800 	.word	0x40014800

0800ceac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ceac:	b480      	push	{r7}
 800ceae:	b087      	sub	sp, #28
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
 800ceb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	6a1b      	ldr	r3, [r3, #32]
 800ceba:	f023 0201 	bic.w	r2, r3, #1
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6a1b      	ldr	r3, [r3, #32]
 800cec6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	685b      	ldr	r3, [r3, #4]
 800cecc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	699b      	ldr	r3, [r3, #24]
 800ced2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ceda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	f023 0303 	bic.w	r3, r3, #3
 800cee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	68fa      	ldr	r2, [r7, #12]
 800ceee:	4313      	orrs	r3, r2
 800cef0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	f023 0302 	bic.w	r3, r3, #2
 800cef8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	689b      	ldr	r3, [r3, #8]
 800cefe:	697a      	ldr	r2, [r7, #20]
 800cf00:	4313      	orrs	r3, r2
 800cf02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	4a30      	ldr	r2, [pc, #192]	; (800cfc8 <TIM_OC1_SetConfig+0x11c>)
 800cf08:	4293      	cmp	r3, r2
 800cf0a:	d013      	beq.n	800cf34 <TIM_OC1_SetConfig+0x88>
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	4a2f      	ldr	r2, [pc, #188]	; (800cfcc <TIM_OC1_SetConfig+0x120>)
 800cf10:	4293      	cmp	r3, r2
 800cf12:	d00f      	beq.n	800cf34 <TIM_OC1_SetConfig+0x88>
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	4a2e      	ldr	r2, [pc, #184]	; (800cfd0 <TIM_OC1_SetConfig+0x124>)
 800cf18:	4293      	cmp	r3, r2
 800cf1a:	d00b      	beq.n	800cf34 <TIM_OC1_SetConfig+0x88>
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	4a2d      	ldr	r2, [pc, #180]	; (800cfd4 <TIM_OC1_SetConfig+0x128>)
 800cf20:	4293      	cmp	r3, r2
 800cf22:	d007      	beq.n	800cf34 <TIM_OC1_SetConfig+0x88>
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	4a2c      	ldr	r2, [pc, #176]	; (800cfd8 <TIM_OC1_SetConfig+0x12c>)
 800cf28:	4293      	cmp	r3, r2
 800cf2a:	d003      	beq.n	800cf34 <TIM_OC1_SetConfig+0x88>
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	4a2b      	ldr	r2, [pc, #172]	; (800cfdc <TIM_OC1_SetConfig+0x130>)
 800cf30:	4293      	cmp	r3, r2
 800cf32:	d10c      	bne.n	800cf4e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cf34:	697b      	ldr	r3, [r7, #20]
 800cf36:	f023 0308 	bic.w	r3, r3, #8
 800cf3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	68db      	ldr	r3, [r3, #12]
 800cf40:	697a      	ldr	r2, [r7, #20]
 800cf42:	4313      	orrs	r3, r2
 800cf44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cf46:	697b      	ldr	r3, [r7, #20]
 800cf48:	f023 0304 	bic.w	r3, r3, #4
 800cf4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	4a1d      	ldr	r2, [pc, #116]	; (800cfc8 <TIM_OC1_SetConfig+0x11c>)
 800cf52:	4293      	cmp	r3, r2
 800cf54:	d013      	beq.n	800cf7e <TIM_OC1_SetConfig+0xd2>
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	4a1c      	ldr	r2, [pc, #112]	; (800cfcc <TIM_OC1_SetConfig+0x120>)
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	d00f      	beq.n	800cf7e <TIM_OC1_SetConfig+0xd2>
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	4a1b      	ldr	r2, [pc, #108]	; (800cfd0 <TIM_OC1_SetConfig+0x124>)
 800cf62:	4293      	cmp	r3, r2
 800cf64:	d00b      	beq.n	800cf7e <TIM_OC1_SetConfig+0xd2>
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	4a1a      	ldr	r2, [pc, #104]	; (800cfd4 <TIM_OC1_SetConfig+0x128>)
 800cf6a:	4293      	cmp	r3, r2
 800cf6c:	d007      	beq.n	800cf7e <TIM_OC1_SetConfig+0xd2>
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	4a19      	ldr	r2, [pc, #100]	; (800cfd8 <TIM_OC1_SetConfig+0x12c>)
 800cf72:	4293      	cmp	r3, r2
 800cf74:	d003      	beq.n	800cf7e <TIM_OC1_SetConfig+0xd2>
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	4a18      	ldr	r2, [pc, #96]	; (800cfdc <TIM_OC1_SetConfig+0x130>)
 800cf7a:	4293      	cmp	r3, r2
 800cf7c:	d111      	bne.n	800cfa2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cf7e:	693b      	ldr	r3, [r7, #16]
 800cf80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cf84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cf8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	695b      	ldr	r3, [r3, #20]
 800cf92:	693a      	ldr	r2, [r7, #16]
 800cf94:	4313      	orrs	r3, r2
 800cf96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	699b      	ldr	r3, [r3, #24]
 800cf9c:	693a      	ldr	r2, [r7, #16]
 800cf9e:	4313      	orrs	r3, r2
 800cfa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	693a      	ldr	r2, [r7, #16]
 800cfa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	68fa      	ldr	r2, [r7, #12]
 800cfac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	685a      	ldr	r2, [r3, #4]
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	697a      	ldr	r2, [r7, #20]
 800cfba:	621a      	str	r2, [r3, #32]
}
 800cfbc:	bf00      	nop
 800cfbe:	371c      	adds	r7, #28
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc6:	4770      	bx	lr
 800cfc8:	40012c00 	.word	0x40012c00
 800cfcc:	40013400 	.word	0x40013400
 800cfd0:	40014000 	.word	0x40014000
 800cfd4:	40014400 	.word	0x40014400
 800cfd8:	40014800 	.word	0x40014800
 800cfdc:	40015000 	.word	0x40015000

0800cfe0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cfe0:	b480      	push	{r7}
 800cfe2:	b087      	sub	sp, #28
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
 800cfe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	6a1b      	ldr	r3, [r3, #32]
 800cfee:	f023 0210 	bic.w	r2, r3, #16
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	6a1b      	ldr	r3, [r3, #32]
 800cffa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	685b      	ldr	r3, [r3, #4]
 800d000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	699b      	ldr	r3, [r3, #24]
 800d006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d00e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d01a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	021b      	lsls	r3, r3, #8
 800d022:	68fa      	ldr	r2, [r7, #12]
 800d024:	4313      	orrs	r3, r2
 800d026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d028:	697b      	ldr	r3, [r7, #20]
 800d02a:	f023 0320 	bic.w	r3, r3, #32
 800d02e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	689b      	ldr	r3, [r3, #8]
 800d034:	011b      	lsls	r3, r3, #4
 800d036:	697a      	ldr	r2, [r7, #20]
 800d038:	4313      	orrs	r3, r2
 800d03a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	4a2c      	ldr	r2, [pc, #176]	; (800d0f0 <TIM_OC2_SetConfig+0x110>)
 800d040:	4293      	cmp	r3, r2
 800d042:	d007      	beq.n	800d054 <TIM_OC2_SetConfig+0x74>
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	4a2b      	ldr	r2, [pc, #172]	; (800d0f4 <TIM_OC2_SetConfig+0x114>)
 800d048:	4293      	cmp	r3, r2
 800d04a:	d003      	beq.n	800d054 <TIM_OC2_SetConfig+0x74>
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	4a2a      	ldr	r2, [pc, #168]	; (800d0f8 <TIM_OC2_SetConfig+0x118>)
 800d050:	4293      	cmp	r3, r2
 800d052:	d10d      	bne.n	800d070 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d054:	697b      	ldr	r3, [r7, #20]
 800d056:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d05a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	68db      	ldr	r3, [r3, #12]
 800d060:	011b      	lsls	r3, r3, #4
 800d062:	697a      	ldr	r2, [r7, #20]
 800d064:	4313      	orrs	r3, r2
 800d066:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d06e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	4a1f      	ldr	r2, [pc, #124]	; (800d0f0 <TIM_OC2_SetConfig+0x110>)
 800d074:	4293      	cmp	r3, r2
 800d076:	d013      	beq.n	800d0a0 <TIM_OC2_SetConfig+0xc0>
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	4a1e      	ldr	r2, [pc, #120]	; (800d0f4 <TIM_OC2_SetConfig+0x114>)
 800d07c:	4293      	cmp	r3, r2
 800d07e:	d00f      	beq.n	800d0a0 <TIM_OC2_SetConfig+0xc0>
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	4a1e      	ldr	r2, [pc, #120]	; (800d0fc <TIM_OC2_SetConfig+0x11c>)
 800d084:	4293      	cmp	r3, r2
 800d086:	d00b      	beq.n	800d0a0 <TIM_OC2_SetConfig+0xc0>
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	4a1d      	ldr	r2, [pc, #116]	; (800d100 <TIM_OC2_SetConfig+0x120>)
 800d08c:	4293      	cmp	r3, r2
 800d08e:	d007      	beq.n	800d0a0 <TIM_OC2_SetConfig+0xc0>
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	4a1c      	ldr	r2, [pc, #112]	; (800d104 <TIM_OC2_SetConfig+0x124>)
 800d094:	4293      	cmp	r3, r2
 800d096:	d003      	beq.n	800d0a0 <TIM_OC2_SetConfig+0xc0>
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	4a17      	ldr	r2, [pc, #92]	; (800d0f8 <TIM_OC2_SetConfig+0x118>)
 800d09c:	4293      	cmp	r3, r2
 800d09e:	d113      	bne.n	800d0c8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d0a0:	693b      	ldr	r3, [r7, #16]
 800d0a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d0a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d0a8:	693b      	ldr	r3, [r7, #16]
 800d0aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d0ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	695b      	ldr	r3, [r3, #20]
 800d0b4:	009b      	lsls	r3, r3, #2
 800d0b6:	693a      	ldr	r2, [r7, #16]
 800d0b8:	4313      	orrs	r3, r2
 800d0ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	699b      	ldr	r3, [r3, #24]
 800d0c0:	009b      	lsls	r3, r3, #2
 800d0c2:	693a      	ldr	r2, [r7, #16]
 800d0c4:	4313      	orrs	r3, r2
 800d0c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	693a      	ldr	r2, [r7, #16]
 800d0cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	68fa      	ldr	r2, [r7, #12]
 800d0d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	685a      	ldr	r2, [r3, #4]
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	697a      	ldr	r2, [r7, #20]
 800d0e0:	621a      	str	r2, [r3, #32]
}
 800d0e2:	bf00      	nop
 800d0e4:	371c      	adds	r7, #28
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ec:	4770      	bx	lr
 800d0ee:	bf00      	nop
 800d0f0:	40012c00 	.word	0x40012c00
 800d0f4:	40013400 	.word	0x40013400
 800d0f8:	40015000 	.word	0x40015000
 800d0fc:	40014000 	.word	0x40014000
 800d100:	40014400 	.word	0x40014400
 800d104:	40014800 	.word	0x40014800

0800d108 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d108:	b480      	push	{r7}
 800d10a:	b087      	sub	sp, #28
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
 800d110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	6a1b      	ldr	r3, [r3, #32]
 800d116:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	6a1b      	ldr	r3, [r3, #32]
 800d122:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	685b      	ldr	r3, [r3, #4]
 800d128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	69db      	ldr	r3, [r3, #28]
 800d12e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d13a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	f023 0303 	bic.w	r3, r3, #3
 800d142:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	68fa      	ldr	r2, [r7, #12]
 800d14a:	4313      	orrs	r3, r2
 800d14c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d14e:	697b      	ldr	r3, [r7, #20]
 800d150:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d154:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	689b      	ldr	r3, [r3, #8]
 800d15a:	021b      	lsls	r3, r3, #8
 800d15c:	697a      	ldr	r2, [r7, #20]
 800d15e:	4313      	orrs	r3, r2
 800d160:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	4a2b      	ldr	r2, [pc, #172]	; (800d214 <TIM_OC3_SetConfig+0x10c>)
 800d166:	4293      	cmp	r3, r2
 800d168:	d007      	beq.n	800d17a <TIM_OC3_SetConfig+0x72>
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	4a2a      	ldr	r2, [pc, #168]	; (800d218 <TIM_OC3_SetConfig+0x110>)
 800d16e:	4293      	cmp	r3, r2
 800d170:	d003      	beq.n	800d17a <TIM_OC3_SetConfig+0x72>
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	4a29      	ldr	r2, [pc, #164]	; (800d21c <TIM_OC3_SetConfig+0x114>)
 800d176:	4293      	cmp	r3, r2
 800d178:	d10d      	bne.n	800d196 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d17a:	697b      	ldr	r3, [r7, #20]
 800d17c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d180:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	68db      	ldr	r3, [r3, #12]
 800d186:	021b      	lsls	r3, r3, #8
 800d188:	697a      	ldr	r2, [r7, #20]
 800d18a:	4313      	orrs	r3, r2
 800d18c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d194:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	4a1e      	ldr	r2, [pc, #120]	; (800d214 <TIM_OC3_SetConfig+0x10c>)
 800d19a:	4293      	cmp	r3, r2
 800d19c:	d013      	beq.n	800d1c6 <TIM_OC3_SetConfig+0xbe>
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	4a1d      	ldr	r2, [pc, #116]	; (800d218 <TIM_OC3_SetConfig+0x110>)
 800d1a2:	4293      	cmp	r3, r2
 800d1a4:	d00f      	beq.n	800d1c6 <TIM_OC3_SetConfig+0xbe>
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	4a1d      	ldr	r2, [pc, #116]	; (800d220 <TIM_OC3_SetConfig+0x118>)
 800d1aa:	4293      	cmp	r3, r2
 800d1ac:	d00b      	beq.n	800d1c6 <TIM_OC3_SetConfig+0xbe>
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	4a1c      	ldr	r2, [pc, #112]	; (800d224 <TIM_OC3_SetConfig+0x11c>)
 800d1b2:	4293      	cmp	r3, r2
 800d1b4:	d007      	beq.n	800d1c6 <TIM_OC3_SetConfig+0xbe>
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	4a1b      	ldr	r2, [pc, #108]	; (800d228 <TIM_OC3_SetConfig+0x120>)
 800d1ba:	4293      	cmp	r3, r2
 800d1bc:	d003      	beq.n	800d1c6 <TIM_OC3_SetConfig+0xbe>
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	4a16      	ldr	r2, [pc, #88]	; (800d21c <TIM_OC3_SetConfig+0x114>)
 800d1c2:	4293      	cmp	r3, r2
 800d1c4:	d113      	bne.n	800d1ee <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d1c6:	693b      	ldr	r3, [r7, #16]
 800d1c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d1cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d1ce:	693b      	ldr	r3, [r7, #16]
 800d1d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d1d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	695b      	ldr	r3, [r3, #20]
 800d1da:	011b      	lsls	r3, r3, #4
 800d1dc:	693a      	ldr	r2, [r7, #16]
 800d1de:	4313      	orrs	r3, r2
 800d1e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d1e2:	683b      	ldr	r3, [r7, #0]
 800d1e4:	699b      	ldr	r3, [r3, #24]
 800d1e6:	011b      	lsls	r3, r3, #4
 800d1e8:	693a      	ldr	r2, [r7, #16]
 800d1ea:	4313      	orrs	r3, r2
 800d1ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	693a      	ldr	r2, [r7, #16]
 800d1f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	68fa      	ldr	r2, [r7, #12]
 800d1f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	685a      	ldr	r2, [r3, #4]
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	697a      	ldr	r2, [r7, #20]
 800d206:	621a      	str	r2, [r3, #32]
}
 800d208:	bf00      	nop
 800d20a:	371c      	adds	r7, #28
 800d20c:	46bd      	mov	sp, r7
 800d20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d212:	4770      	bx	lr
 800d214:	40012c00 	.word	0x40012c00
 800d218:	40013400 	.word	0x40013400
 800d21c:	40015000 	.word	0x40015000
 800d220:	40014000 	.word	0x40014000
 800d224:	40014400 	.word	0x40014400
 800d228:	40014800 	.word	0x40014800

0800d22c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d22c:	b480      	push	{r7}
 800d22e:	b087      	sub	sp, #28
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
 800d234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	6a1b      	ldr	r3, [r3, #32]
 800d23a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	6a1b      	ldr	r3, [r3, #32]
 800d246:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	685b      	ldr	r3, [r3, #4]
 800d24c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	69db      	ldr	r3, [r3, #28]
 800d252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d25a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d25e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d266:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	021b      	lsls	r3, r3, #8
 800d26e:	68fa      	ldr	r2, [r7, #12]
 800d270:	4313      	orrs	r3, r2
 800d272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d274:	697b      	ldr	r3, [r7, #20]
 800d276:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d27a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	689b      	ldr	r3, [r3, #8]
 800d280:	031b      	lsls	r3, r3, #12
 800d282:	697a      	ldr	r2, [r7, #20]
 800d284:	4313      	orrs	r3, r2
 800d286:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	4a2c      	ldr	r2, [pc, #176]	; (800d33c <TIM_OC4_SetConfig+0x110>)
 800d28c:	4293      	cmp	r3, r2
 800d28e:	d007      	beq.n	800d2a0 <TIM_OC4_SetConfig+0x74>
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	4a2b      	ldr	r2, [pc, #172]	; (800d340 <TIM_OC4_SetConfig+0x114>)
 800d294:	4293      	cmp	r3, r2
 800d296:	d003      	beq.n	800d2a0 <TIM_OC4_SetConfig+0x74>
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	4a2a      	ldr	r2, [pc, #168]	; (800d344 <TIM_OC4_SetConfig+0x118>)
 800d29c:	4293      	cmp	r3, r2
 800d29e:	d10d      	bne.n	800d2bc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800d2a0:	697b      	ldr	r3, [r7, #20]
 800d2a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d2a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	68db      	ldr	r3, [r3, #12]
 800d2ac:	031b      	lsls	r3, r3, #12
 800d2ae:	697a      	ldr	r2, [r7, #20]
 800d2b0:	4313      	orrs	r3, r2
 800d2b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800d2b4:	697b      	ldr	r3, [r7, #20]
 800d2b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d2ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	4a1f      	ldr	r2, [pc, #124]	; (800d33c <TIM_OC4_SetConfig+0x110>)
 800d2c0:	4293      	cmp	r3, r2
 800d2c2:	d013      	beq.n	800d2ec <TIM_OC4_SetConfig+0xc0>
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	4a1e      	ldr	r2, [pc, #120]	; (800d340 <TIM_OC4_SetConfig+0x114>)
 800d2c8:	4293      	cmp	r3, r2
 800d2ca:	d00f      	beq.n	800d2ec <TIM_OC4_SetConfig+0xc0>
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	4a1e      	ldr	r2, [pc, #120]	; (800d348 <TIM_OC4_SetConfig+0x11c>)
 800d2d0:	4293      	cmp	r3, r2
 800d2d2:	d00b      	beq.n	800d2ec <TIM_OC4_SetConfig+0xc0>
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	4a1d      	ldr	r2, [pc, #116]	; (800d34c <TIM_OC4_SetConfig+0x120>)
 800d2d8:	4293      	cmp	r3, r2
 800d2da:	d007      	beq.n	800d2ec <TIM_OC4_SetConfig+0xc0>
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	4a1c      	ldr	r2, [pc, #112]	; (800d350 <TIM_OC4_SetConfig+0x124>)
 800d2e0:	4293      	cmp	r3, r2
 800d2e2:	d003      	beq.n	800d2ec <TIM_OC4_SetConfig+0xc0>
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	4a17      	ldr	r2, [pc, #92]	; (800d344 <TIM_OC4_SetConfig+0x118>)
 800d2e8:	4293      	cmp	r3, r2
 800d2ea:	d113      	bne.n	800d314 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d2ec:	693b      	ldr	r3, [r7, #16]
 800d2ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d2f2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800d2f4:	693b      	ldr	r3, [r7, #16]
 800d2f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d2fa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	695b      	ldr	r3, [r3, #20]
 800d300:	019b      	lsls	r3, r3, #6
 800d302:	693a      	ldr	r2, [r7, #16]
 800d304:	4313      	orrs	r3, r2
 800d306:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	699b      	ldr	r3, [r3, #24]
 800d30c:	019b      	lsls	r3, r3, #6
 800d30e:	693a      	ldr	r2, [r7, #16]
 800d310:	4313      	orrs	r3, r2
 800d312:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	693a      	ldr	r2, [r7, #16]
 800d318:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	68fa      	ldr	r2, [r7, #12]
 800d31e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	685a      	ldr	r2, [r3, #4]
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	697a      	ldr	r2, [r7, #20]
 800d32c:	621a      	str	r2, [r3, #32]
}
 800d32e:	bf00      	nop
 800d330:	371c      	adds	r7, #28
 800d332:	46bd      	mov	sp, r7
 800d334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d338:	4770      	bx	lr
 800d33a:	bf00      	nop
 800d33c:	40012c00 	.word	0x40012c00
 800d340:	40013400 	.word	0x40013400
 800d344:	40015000 	.word	0x40015000
 800d348:	40014000 	.word	0x40014000
 800d34c:	40014400 	.word	0x40014400
 800d350:	40014800 	.word	0x40014800

0800d354 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d354:	b480      	push	{r7}
 800d356:	b087      	sub	sp, #28
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
 800d35c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6a1b      	ldr	r3, [r3, #32]
 800d362:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	6a1b      	ldr	r3, [r3, #32]
 800d36e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	685b      	ldr	r3, [r3, #4]
 800d374:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d37a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d386:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	68fa      	ldr	r2, [r7, #12]
 800d38e:	4313      	orrs	r3, r2
 800d390:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d392:	693b      	ldr	r3, [r7, #16]
 800d394:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d398:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	689b      	ldr	r3, [r3, #8]
 800d39e:	041b      	lsls	r3, r3, #16
 800d3a0:	693a      	ldr	r2, [r7, #16]
 800d3a2:	4313      	orrs	r3, r2
 800d3a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	4a19      	ldr	r2, [pc, #100]	; (800d410 <TIM_OC5_SetConfig+0xbc>)
 800d3aa:	4293      	cmp	r3, r2
 800d3ac:	d013      	beq.n	800d3d6 <TIM_OC5_SetConfig+0x82>
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	4a18      	ldr	r2, [pc, #96]	; (800d414 <TIM_OC5_SetConfig+0xc0>)
 800d3b2:	4293      	cmp	r3, r2
 800d3b4:	d00f      	beq.n	800d3d6 <TIM_OC5_SetConfig+0x82>
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	4a17      	ldr	r2, [pc, #92]	; (800d418 <TIM_OC5_SetConfig+0xc4>)
 800d3ba:	4293      	cmp	r3, r2
 800d3bc:	d00b      	beq.n	800d3d6 <TIM_OC5_SetConfig+0x82>
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	4a16      	ldr	r2, [pc, #88]	; (800d41c <TIM_OC5_SetConfig+0xc8>)
 800d3c2:	4293      	cmp	r3, r2
 800d3c4:	d007      	beq.n	800d3d6 <TIM_OC5_SetConfig+0x82>
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	4a15      	ldr	r2, [pc, #84]	; (800d420 <TIM_OC5_SetConfig+0xcc>)
 800d3ca:	4293      	cmp	r3, r2
 800d3cc:	d003      	beq.n	800d3d6 <TIM_OC5_SetConfig+0x82>
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	4a14      	ldr	r2, [pc, #80]	; (800d424 <TIM_OC5_SetConfig+0xd0>)
 800d3d2:	4293      	cmp	r3, r2
 800d3d4:	d109      	bne.n	800d3ea <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d3d6:	697b      	ldr	r3, [r7, #20]
 800d3d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d3dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	695b      	ldr	r3, [r3, #20]
 800d3e2:	021b      	lsls	r3, r3, #8
 800d3e4:	697a      	ldr	r2, [r7, #20]
 800d3e6:	4313      	orrs	r3, r2
 800d3e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	697a      	ldr	r2, [r7, #20]
 800d3ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	68fa      	ldr	r2, [r7, #12]
 800d3f4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	685a      	ldr	r2, [r3, #4]
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	693a      	ldr	r2, [r7, #16]
 800d402:	621a      	str	r2, [r3, #32]
}
 800d404:	bf00      	nop
 800d406:	371c      	adds	r7, #28
 800d408:	46bd      	mov	sp, r7
 800d40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40e:	4770      	bx	lr
 800d410:	40012c00 	.word	0x40012c00
 800d414:	40013400 	.word	0x40013400
 800d418:	40014000 	.word	0x40014000
 800d41c:	40014400 	.word	0x40014400
 800d420:	40014800 	.word	0x40014800
 800d424:	40015000 	.word	0x40015000

0800d428 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d428:	b480      	push	{r7}
 800d42a:	b087      	sub	sp, #28
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
 800d430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6a1b      	ldr	r3, [r3, #32]
 800d436:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	6a1b      	ldr	r3, [r3, #32]
 800d442:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	685b      	ldr	r3, [r3, #4]
 800d448:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d44e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d456:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d45a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	021b      	lsls	r3, r3, #8
 800d462:	68fa      	ldr	r2, [r7, #12]
 800d464:	4313      	orrs	r3, r2
 800d466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d468:	693b      	ldr	r3, [r7, #16]
 800d46a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d46e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d470:	683b      	ldr	r3, [r7, #0]
 800d472:	689b      	ldr	r3, [r3, #8]
 800d474:	051b      	lsls	r3, r3, #20
 800d476:	693a      	ldr	r2, [r7, #16]
 800d478:	4313      	orrs	r3, r2
 800d47a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	4a1a      	ldr	r2, [pc, #104]	; (800d4e8 <TIM_OC6_SetConfig+0xc0>)
 800d480:	4293      	cmp	r3, r2
 800d482:	d013      	beq.n	800d4ac <TIM_OC6_SetConfig+0x84>
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	4a19      	ldr	r2, [pc, #100]	; (800d4ec <TIM_OC6_SetConfig+0xc4>)
 800d488:	4293      	cmp	r3, r2
 800d48a:	d00f      	beq.n	800d4ac <TIM_OC6_SetConfig+0x84>
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	4a18      	ldr	r2, [pc, #96]	; (800d4f0 <TIM_OC6_SetConfig+0xc8>)
 800d490:	4293      	cmp	r3, r2
 800d492:	d00b      	beq.n	800d4ac <TIM_OC6_SetConfig+0x84>
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	4a17      	ldr	r2, [pc, #92]	; (800d4f4 <TIM_OC6_SetConfig+0xcc>)
 800d498:	4293      	cmp	r3, r2
 800d49a:	d007      	beq.n	800d4ac <TIM_OC6_SetConfig+0x84>
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	4a16      	ldr	r2, [pc, #88]	; (800d4f8 <TIM_OC6_SetConfig+0xd0>)
 800d4a0:	4293      	cmp	r3, r2
 800d4a2:	d003      	beq.n	800d4ac <TIM_OC6_SetConfig+0x84>
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	4a15      	ldr	r2, [pc, #84]	; (800d4fc <TIM_OC6_SetConfig+0xd4>)
 800d4a8:	4293      	cmp	r3, r2
 800d4aa:	d109      	bne.n	800d4c0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d4ac:	697b      	ldr	r3, [r7, #20]
 800d4ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d4b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	695b      	ldr	r3, [r3, #20]
 800d4b8:	029b      	lsls	r3, r3, #10
 800d4ba:	697a      	ldr	r2, [r7, #20]
 800d4bc:	4313      	orrs	r3, r2
 800d4be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	697a      	ldr	r2, [r7, #20]
 800d4c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	68fa      	ldr	r2, [r7, #12]
 800d4ca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	685a      	ldr	r2, [r3, #4]
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	693a      	ldr	r2, [r7, #16]
 800d4d8:	621a      	str	r2, [r3, #32]
}
 800d4da:	bf00      	nop
 800d4dc:	371c      	adds	r7, #28
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e4:	4770      	bx	lr
 800d4e6:	bf00      	nop
 800d4e8:	40012c00 	.word	0x40012c00
 800d4ec:	40013400 	.word	0x40013400
 800d4f0:	40014000 	.word	0x40014000
 800d4f4:	40014400 	.word	0x40014400
 800d4f8:	40014800 	.word	0x40014800
 800d4fc:	40015000 	.word	0x40015000

0800d500 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b086      	sub	sp, #24
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
 800d508:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	689b      	ldr	r3, [r3, #8]
 800d510:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800d518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d51c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	685b      	ldr	r3, [r3, #4]
 800d522:	697a      	ldr	r2, [r7, #20]
 800d524:	4313      	orrs	r3, r2
 800d526:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800d528:	697b      	ldr	r3, [r7, #20]
 800d52a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d52e:	f023 0307 	bic.w	r3, r3, #7
 800d532:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	697a      	ldr	r2, [r7, #20]
 800d53a:	4313      	orrs	r3, r2
 800d53c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	697a      	ldr	r2, [r7, #20]
 800d544:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	685b      	ldr	r3, [r3, #4]
 800d54a:	2b70      	cmp	r3, #112	; 0x70
 800d54c:	d034      	beq.n	800d5b8 <TIM_SlaveTimer_SetConfig+0xb8>
 800d54e:	2b70      	cmp	r3, #112	; 0x70
 800d550:	d811      	bhi.n	800d576 <TIM_SlaveTimer_SetConfig+0x76>
 800d552:	2b30      	cmp	r3, #48	; 0x30
 800d554:	d07d      	beq.n	800d652 <TIM_SlaveTimer_SetConfig+0x152>
 800d556:	2b30      	cmp	r3, #48	; 0x30
 800d558:	d806      	bhi.n	800d568 <TIM_SlaveTimer_SetConfig+0x68>
 800d55a:	2b10      	cmp	r3, #16
 800d55c:	d079      	beq.n	800d652 <TIM_SlaveTimer_SetConfig+0x152>
 800d55e:	2b20      	cmp	r3, #32
 800d560:	d077      	beq.n	800d652 <TIM_SlaveTimer_SetConfig+0x152>
 800d562:	2b00      	cmp	r3, #0
 800d564:	d075      	beq.n	800d652 <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 800d566:	e075      	b.n	800d654 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800d568:	2b50      	cmp	r3, #80	; 0x50
 800d56a:	d05e      	beq.n	800d62a <TIM_SlaveTimer_SetConfig+0x12a>
 800d56c:	2b60      	cmp	r3, #96	; 0x60
 800d56e:	d066      	beq.n	800d63e <TIM_SlaveTimer_SetConfig+0x13e>
 800d570:	2b40      	cmp	r3, #64	; 0x40
 800d572:	d02c      	beq.n	800d5ce <TIM_SlaveTimer_SetConfig+0xce>
      break;
 800d574:	e06e      	b.n	800d654 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800d576:	4a3a      	ldr	r2, [pc, #232]	; (800d660 <TIM_SlaveTimer_SetConfig+0x160>)
 800d578:	4293      	cmp	r3, r2
 800d57a:	d06a      	beq.n	800d652 <TIM_SlaveTimer_SetConfig+0x152>
 800d57c:	4a38      	ldr	r2, [pc, #224]	; (800d660 <TIM_SlaveTimer_SetConfig+0x160>)
 800d57e:	4293      	cmp	r3, r2
 800d580:	d809      	bhi.n	800d596 <TIM_SlaveTimer_SetConfig+0x96>
 800d582:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d586:	d064      	beq.n	800d652 <TIM_SlaveTimer_SetConfig+0x152>
 800d588:	4a36      	ldr	r2, [pc, #216]	; (800d664 <TIM_SlaveTimer_SetConfig+0x164>)
 800d58a:	4293      	cmp	r3, r2
 800d58c:	d061      	beq.n	800d652 <TIM_SlaveTimer_SetConfig+0x152>
 800d58e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d592:	d05e      	beq.n	800d652 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800d594:	e05e      	b.n	800d654 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800d596:	4a34      	ldr	r2, [pc, #208]	; (800d668 <TIM_SlaveTimer_SetConfig+0x168>)
 800d598:	4293      	cmp	r3, r2
 800d59a:	d05a      	beq.n	800d652 <TIM_SlaveTimer_SetConfig+0x152>
 800d59c:	4a32      	ldr	r2, [pc, #200]	; (800d668 <TIM_SlaveTimer_SetConfig+0x168>)
 800d59e:	4293      	cmp	r3, r2
 800d5a0:	d803      	bhi.n	800d5aa <TIM_SlaveTimer_SetConfig+0xaa>
 800d5a2:	4a32      	ldr	r2, [pc, #200]	; (800d66c <TIM_SlaveTimer_SetConfig+0x16c>)
 800d5a4:	4293      	cmp	r3, r2
 800d5a6:	d054      	beq.n	800d652 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800d5a8:	e054      	b.n	800d654 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800d5aa:	4a31      	ldr	r2, [pc, #196]	; (800d670 <TIM_SlaveTimer_SetConfig+0x170>)
 800d5ac:	4293      	cmp	r3, r2
 800d5ae:	d050      	beq.n	800d652 <TIM_SlaveTimer_SetConfig+0x152>
 800d5b0:	4a30      	ldr	r2, [pc, #192]	; (800d674 <TIM_SlaveTimer_SetConfig+0x174>)
 800d5b2:	4293      	cmp	r3, r2
 800d5b4:	d04d      	beq.n	800d652 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800d5b6:	e04d      	b.n	800d654 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	6818      	ldr	r0, [r3, #0]
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	68d9      	ldr	r1, [r3, #12]
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	689a      	ldr	r2, [r3, #8]
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	691b      	ldr	r3, [r3, #16]
 800d5c8:	f000 f8d2 	bl	800d770 <TIM_ETR_SetConfig>
      break;
 800d5cc:	e042      	b.n	800d654 <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800d5ce:	683b      	ldr	r3, [r7, #0]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	2b05      	cmp	r3, #5
 800d5d4:	d004      	beq.n	800d5e0 <TIM_SlaveTimer_SetConfig+0xe0>
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 800d5de:	d101      	bne.n	800d5e4 <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 800d5e0:	2301      	movs	r3, #1
 800d5e2:	e038      	b.n	800d656 <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	6a1b      	ldr	r3, [r3, #32]
 800d5ea:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	6a1a      	ldr	r2, [r3, #32]
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	f022 0201 	bic.w	r2, r2, #1
 800d5fa:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	699b      	ldr	r3, [r3, #24]
 800d602:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d60a:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	691b      	ldr	r3, [r3, #16]
 800d610:	011b      	lsls	r3, r3, #4
 800d612:	68fa      	ldr	r2, [r7, #12]
 800d614:	4313      	orrs	r3, r2
 800d616:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	68fa      	ldr	r2, [r7, #12]
 800d61e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	693a      	ldr	r2, [r7, #16]
 800d626:	621a      	str	r2, [r3, #32]
      break;
 800d628:	e014      	b.n	800d654 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6818      	ldr	r0, [r3, #0]
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	6899      	ldr	r1, [r3, #8]
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	691b      	ldr	r3, [r3, #16]
 800d636:	461a      	mov	r2, r3
 800d638:	f000 f81e 	bl	800d678 <TIM_TI1_ConfigInputStage>
      break;
 800d63c:	e00a      	b.n	800d654 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	6818      	ldr	r0, [r3, #0]
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	6899      	ldr	r1, [r3, #8]
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	691b      	ldr	r3, [r3, #16]
 800d64a:	461a      	mov	r2, r3
 800d64c:	f000 f843 	bl	800d6d6 <TIM_TI2_ConfigInputStage>
      break;
 800d650:	e000      	b.n	800d654 <TIM_SlaveTimer_SetConfig+0x154>
      break;
 800d652:	bf00      	nop
  }
  return HAL_OK;
 800d654:	2300      	movs	r3, #0
}
 800d656:	4618      	mov	r0, r3
 800d658:	3718      	adds	r7, #24
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}
 800d65e:	bf00      	nop
 800d660:	00100030 	.word	0x00100030
 800d664:	00100020 	.word	0x00100020
 800d668:	00100050 	.word	0x00100050
 800d66c:	00100040 	.word	0x00100040
 800d670:	00100060 	.word	0x00100060
 800d674:	00100070 	.word	0x00100070

0800d678 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d678:	b480      	push	{r7}
 800d67a:	b087      	sub	sp, #28
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	60f8      	str	r0, [r7, #12]
 800d680:	60b9      	str	r1, [r7, #8]
 800d682:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	6a1b      	ldr	r3, [r3, #32]
 800d688:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	6a1b      	ldr	r3, [r3, #32]
 800d68e:	f023 0201 	bic.w	r2, r3, #1
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	699b      	ldr	r3, [r3, #24]
 800d69a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d69c:	693b      	ldr	r3, [r7, #16]
 800d69e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d6a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	011b      	lsls	r3, r3, #4
 800d6a8:	693a      	ldr	r2, [r7, #16]
 800d6aa:	4313      	orrs	r3, r2
 800d6ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d6ae:	697b      	ldr	r3, [r7, #20]
 800d6b0:	f023 030a 	bic.w	r3, r3, #10
 800d6b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d6b6:	697a      	ldr	r2, [r7, #20]
 800d6b8:	68bb      	ldr	r3, [r7, #8]
 800d6ba:	4313      	orrs	r3, r2
 800d6bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	693a      	ldr	r2, [r7, #16]
 800d6c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	697a      	ldr	r2, [r7, #20]
 800d6c8:	621a      	str	r2, [r3, #32]
}
 800d6ca:	bf00      	nop
 800d6cc:	371c      	adds	r7, #28
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d4:	4770      	bx	lr

0800d6d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d6d6:	b480      	push	{r7}
 800d6d8:	b087      	sub	sp, #28
 800d6da:	af00      	add	r7, sp, #0
 800d6dc:	60f8      	str	r0, [r7, #12]
 800d6de:	60b9      	str	r1, [r7, #8]
 800d6e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	6a1b      	ldr	r3, [r3, #32]
 800d6e6:	f023 0210 	bic.w	r2, r3, #16
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	699b      	ldr	r3, [r3, #24]
 800d6f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	6a1b      	ldr	r3, [r3, #32]
 800d6f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d6fa:	697b      	ldr	r3, [r7, #20]
 800d6fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d700:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	031b      	lsls	r3, r3, #12
 800d706:	697a      	ldr	r2, [r7, #20]
 800d708:	4313      	orrs	r3, r2
 800d70a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d70c:	693b      	ldr	r3, [r7, #16]
 800d70e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d712:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d714:	68bb      	ldr	r3, [r7, #8]
 800d716:	011b      	lsls	r3, r3, #4
 800d718:	693a      	ldr	r2, [r7, #16]
 800d71a:	4313      	orrs	r3, r2
 800d71c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	697a      	ldr	r2, [r7, #20]
 800d722:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	693a      	ldr	r2, [r7, #16]
 800d728:	621a      	str	r2, [r3, #32]
}
 800d72a:	bf00      	nop
 800d72c:	371c      	adds	r7, #28
 800d72e:	46bd      	mov	sp, r7
 800d730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d734:	4770      	bx	lr

0800d736 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d736:	b480      	push	{r7}
 800d738:	b085      	sub	sp, #20
 800d73a:	af00      	add	r7, sp, #0
 800d73c:	6078      	str	r0, [r7, #4]
 800d73e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	689b      	ldr	r3, [r3, #8]
 800d744:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800d74c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d750:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d752:	683a      	ldr	r2, [r7, #0]
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	4313      	orrs	r3, r2
 800d758:	f043 0307 	orr.w	r3, r3, #7
 800d75c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	68fa      	ldr	r2, [r7, #12]
 800d762:	609a      	str	r2, [r3, #8]
}
 800d764:	bf00      	nop
 800d766:	3714      	adds	r7, #20
 800d768:	46bd      	mov	sp, r7
 800d76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76e:	4770      	bx	lr

0800d770 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d770:	b480      	push	{r7}
 800d772:	b087      	sub	sp, #28
 800d774:	af00      	add	r7, sp, #0
 800d776:	60f8      	str	r0, [r7, #12]
 800d778:	60b9      	str	r1, [r7, #8]
 800d77a:	607a      	str	r2, [r7, #4]
 800d77c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	689b      	ldr	r3, [r3, #8]
 800d782:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d784:	697b      	ldr	r3, [r7, #20]
 800d786:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d78a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	021a      	lsls	r2, r3, #8
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	431a      	orrs	r2, r3
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	4313      	orrs	r3, r2
 800d798:	697a      	ldr	r2, [r7, #20]
 800d79a:	4313      	orrs	r3, r2
 800d79c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	697a      	ldr	r2, [r7, #20]
 800d7a2:	609a      	str	r2, [r3, #8]
}
 800d7a4:	bf00      	nop
 800d7a6:	371c      	adds	r7, #28
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ae:	4770      	bx	lr

0800d7b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d7b0:	b480      	push	{r7}
 800d7b2:	b087      	sub	sp, #28
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	60f8      	str	r0, [r7, #12]
 800d7b8:	60b9      	str	r1, [r7, #8]
 800d7ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d7bc:	68bb      	ldr	r3, [r7, #8]
 800d7be:	f003 031f 	and.w	r3, r3, #31
 800d7c2:	2201      	movs	r2, #1
 800d7c4:	fa02 f303 	lsl.w	r3, r2, r3
 800d7c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	6a1a      	ldr	r2, [r3, #32]
 800d7ce:	697b      	ldr	r3, [r7, #20]
 800d7d0:	43db      	mvns	r3, r3
 800d7d2:	401a      	ands	r2, r3
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	6a1a      	ldr	r2, [r3, #32]
 800d7dc:	68bb      	ldr	r3, [r7, #8]
 800d7de:	f003 031f 	and.w	r3, r3, #31
 800d7e2:	6879      	ldr	r1, [r7, #4]
 800d7e4:	fa01 f303 	lsl.w	r3, r1, r3
 800d7e8:	431a      	orrs	r2, r3
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	621a      	str	r2, [r3, #32]
}
 800d7ee:	bf00      	nop
 800d7f0:	371c      	adds	r7, #28
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f8:	4770      	bx	lr
	...

0800d7fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d7fc:	b480      	push	{r7}
 800d7fe:	b085      	sub	sp, #20
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
 800d804:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d80c:	2b01      	cmp	r3, #1
 800d80e:	d101      	bne.n	800d814 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d810:	2302      	movs	r3, #2
 800d812:	e074      	b.n	800d8fe <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2201      	movs	r2, #1
 800d818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2202      	movs	r2, #2
 800d820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	685b      	ldr	r3, [r3, #4]
 800d82a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	689b      	ldr	r3, [r3, #8]
 800d832:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	4a34      	ldr	r2, [pc, #208]	; (800d90c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d83a:	4293      	cmp	r3, r2
 800d83c:	d009      	beq.n	800d852 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	4a33      	ldr	r2, [pc, #204]	; (800d910 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d844:	4293      	cmp	r3, r2
 800d846:	d004      	beq.n	800d852 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	4a31      	ldr	r2, [pc, #196]	; (800d914 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d84e:	4293      	cmp	r3, r2
 800d850:	d108      	bne.n	800d864 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d858:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	685b      	ldr	r3, [r3, #4]
 800d85e:	68fa      	ldr	r2, [r7, #12]
 800d860:	4313      	orrs	r3, r2
 800d862:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800d86a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d86e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	68fa      	ldr	r2, [r7, #12]
 800d876:	4313      	orrs	r3, r2
 800d878:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	68fa      	ldr	r2, [r7, #12]
 800d880:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	4a21      	ldr	r2, [pc, #132]	; (800d90c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d888:	4293      	cmp	r3, r2
 800d88a:	d022      	beq.n	800d8d2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d894:	d01d      	beq.n	800d8d2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	4a1f      	ldr	r2, [pc, #124]	; (800d918 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800d89c:	4293      	cmp	r3, r2
 800d89e:	d018      	beq.n	800d8d2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	4a1d      	ldr	r2, [pc, #116]	; (800d91c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800d8a6:	4293      	cmp	r3, r2
 800d8a8:	d013      	beq.n	800d8d2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	4a1c      	ldr	r2, [pc, #112]	; (800d920 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800d8b0:	4293      	cmp	r3, r2
 800d8b2:	d00e      	beq.n	800d8d2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	4a15      	ldr	r2, [pc, #84]	; (800d910 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d8ba:	4293      	cmp	r3, r2
 800d8bc:	d009      	beq.n	800d8d2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	4a18      	ldr	r2, [pc, #96]	; (800d924 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800d8c4:	4293      	cmp	r3, r2
 800d8c6:	d004      	beq.n	800d8d2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	4a11      	ldr	r2, [pc, #68]	; (800d914 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d8ce:	4293      	cmp	r3, r2
 800d8d0:	d10c      	bne.n	800d8ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d8d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d8da:	683b      	ldr	r3, [r7, #0]
 800d8dc:	689b      	ldr	r3, [r3, #8]
 800d8de:	68ba      	ldr	r2, [r7, #8]
 800d8e0:	4313      	orrs	r3, r2
 800d8e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	68ba      	ldr	r2, [r7, #8]
 800d8ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2201      	movs	r2, #1
 800d8f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d8fc:	2300      	movs	r3, #0
}
 800d8fe:	4618      	mov	r0, r3
 800d900:	3714      	adds	r7, #20
 800d902:	46bd      	mov	sp, r7
 800d904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d908:	4770      	bx	lr
 800d90a:	bf00      	nop
 800d90c:	40012c00 	.word	0x40012c00
 800d910:	40013400 	.word	0x40013400
 800d914:	40015000 	.word	0x40015000
 800d918:	40000400 	.word	0x40000400
 800d91c:	40000800 	.word	0x40000800
 800d920:	40000c00 	.word	0x40000c00
 800d924:	40014000 	.word	0x40014000

0800d928 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d928:	b480      	push	{r7}
 800d92a:	b085      	sub	sp, #20
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
 800d930:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d932:	2300      	movs	r3, #0
 800d934:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d93c:	2b01      	cmp	r3, #1
 800d93e:	d101      	bne.n	800d944 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d940:	2302      	movs	r3, #2
 800d942:	e096      	b.n	800da72 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2201      	movs	r2, #1
 800d948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	68db      	ldr	r3, [r3, #12]
 800d956:	4313      	orrs	r3, r2
 800d958:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	689b      	ldr	r3, [r3, #8]
 800d964:	4313      	orrs	r3, r2
 800d966:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	685b      	ldr	r3, [r3, #4]
 800d972:	4313      	orrs	r3, r2
 800d974:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	4313      	orrs	r3, r2
 800d982:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	691b      	ldr	r3, [r3, #16]
 800d98e:	4313      	orrs	r3, r2
 800d990:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d998:	683b      	ldr	r3, [r7, #0]
 800d99a:	695b      	ldr	r3, [r3, #20]
 800d99c:	4313      	orrs	r3, r2
 800d99e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9aa:	4313      	orrs	r3, r2
 800d9ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	699b      	ldr	r3, [r3, #24]
 800d9b8:	041b      	lsls	r3, r3, #16
 800d9ba:	4313      	orrs	r3, r2
 800d9bc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	4a2f      	ldr	r2, [pc, #188]	; (800da80 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800d9c4:	4293      	cmp	r3, r2
 800d9c6:	d009      	beq.n	800d9dc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	4a2d      	ldr	r2, [pc, #180]	; (800da84 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800d9ce:	4293      	cmp	r3, r2
 800d9d0:	d004      	beq.n	800d9dc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	4a2c      	ldr	r2, [pc, #176]	; (800da88 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800d9d8:	4293      	cmp	r3, r2
 800d9da:	d106      	bne.n	800d9ea <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d9e2:	683b      	ldr	r3, [r7, #0]
 800d9e4:	69db      	ldr	r3, [r3, #28]
 800d9e6:	4313      	orrs	r3, r2
 800d9e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	4a24      	ldr	r2, [pc, #144]	; (800da80 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800d9f0:	4293      	cmp	r3, r2
 800d9f2:	d009      	beq.n	800da08 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	4a22      	ldr	r2, [pc, #136]	; (800da84 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800d9fa:	4293      	cmp	r3, r2
 800d9fc:	d004      	beq.n	800da08 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	4a21      	ldr	r2, [pc, #132]	; (800da88 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800da04:	4293      	cmp	r3, r2
 800da06:	d12b      	bne.n	800da60 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da12:	051b      	lsls	r3, r3, #20
 800da14:	4313      	orrs	r3, r2
 800da16:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800da1e:	683b      	ldr	r3, [r7, #0]
 800da20:	6a1b      	ldr	r3, [r3, #32]
 800da22:	4313      	orrs	r3, r2
 800da24:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da30:	4313      	orrs	r3, r2
 800da32:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	4a11      	ldr	r2, [pc, #68]	; (800da80 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800da3a:	4293      	cmp	r3, r2
 800da3c:	d009      	beq.n	800da52 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	4a10      	ldr	r2, [pc, #64]	; (800da84 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800da44:	4293      	cmp	r3, r2
 800da46:	d004      	beq.n	800da52 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	4a0e      	ldr	r2, [pc, #56]	; (800da88 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800da4e:	4293      	cmp	r3, r2
 800da50:	d106      	bne.n	800da60 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da5c:	4313      	orrs	r3, r2
 800da5e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	68fa      	ldr	r2, [r7, #12]
 800da66:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2200      	movs	r2, #0
 800da6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800da70:	2300      	movs	r3, #0
}
 800da72:	4618      	mov	r0, r3
 800da74:	3714      	adds	r7, #20
 800da76:	46bd      	mov	sp, r7
 800da78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7c:	4770      	bx	lr
 800da7e:	bf00      	nop
 800da80:	40012c00 	.word	0x40012c00
 800da84:	40013400 	.word	0x40013400
 800da88:	40015000 	.word	0x40015000

0800da8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800da8c:	b480      	push	{r7}
 800da8e:	b083      	sub	sp, #12
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800da94:	bf00      	nop
 800da96:	370c      	adds	r7, #12
 800da98:	46bd      	mov	sp, r7
 800da9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9e:	4770      	bx	lr

0800daa0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800daa0:	b480      	push	{r7}
 800daa2:	b083      	sub	sp, #12
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800daa8:	bf00      	nop
 800daaa:	370c      	adds	r7, #12
 800daac:	46bd      	mov	sp, r7
 800daae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab2:	4770      	bx	lr

0800dab4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dab4:	b480      	push	{r7}
 800dab6:	b083      	sub	sp, #12
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dabc:	bf00      	nop
 800dabe:	370c      	adds	r7, #12
 800dac0:	46bd      	mov	sp, r7
 800dac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac6:	4770      	bx	lr

0800dac8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800dac8:	b480      	push	{r7}
 800daca:	b083      	sub	sp, #12
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800dad0:	bf00      	nop
 800dad2:	370c      	adds	r7, #12
 800dad4:	46bd      	mov	sp, r7
 800dad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dada:	4770      	bx	lr

0800dadc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800dadc:	b480      	push	{r7}
 800dade:	b083      	sub	sp, #12
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800dae4:	bf00      	nop
 800dae6:	370c      	adds	r7, #12
 800dae8:	46bd      	mov	sp, r7
 800daea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daee:	4770      	bx	lr

0800daf0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800daf0:	b480      	push	{r7}
 800daf2:	b083      	sub	sp, #12
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800daf8:	bf00      	nop
 800dafa:	370c      	adds	r7, #12
 800dafc:	46bd      	mov	sp, r7
 800dafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db02:	4770      	bx	lr

0800db04 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800db04:	b480      	push	{r7}
 800db06:	b083      	sub	sp, #12
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800db0c:	bf00      	nop
 800db0e:	370c      	adds	r7, #12
 800db10:	46bd      	mov	sp, r7
 800db12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db16:	4770      	bx	lr

0800db18 <LL_EXTI_EnableIT_0_31>:
{
 800db18:	b480      	push	{r7}
 800db1a:	b083      	sub	sp, #12
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800db20:	4b05      	ldr	r3, [pc, #20]	; (800db38 <LL_EXTI_EnableIT_0_31+0x20>)
 800db22:	681a      	ldr	r2, [r3, #0]
 800db24:	4904      	ldr	r1, [pc, #16]	; (800db38 <LL_EXTI_EnableIT_0_31+0x20>)
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	4313      	orrs	r3, r2
 800db2a:	600b      	str	r3, [r1, #0]
}
 800db2c:	bf00      	nop
 800db2e:	370c      	adds	r7, #12
 800db30:	46bd      	mov	sp, r7
 800db32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db36:	4770      	bx	lr
 800db38:	40010400 	.word	0x40010400

0800db3c <LL_EXTI_EnableIT_32_63>:
{
 800db3c:	b480      	push	{r7}
 800db3e:	b083      	sub	sp, #12
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800db44:	4b05      	ldr	r3, [pc, #20]	; (800db5c <LL_EXTI_EnableIT_32_63+0x20>)
 800db46:	6a1a      	ldr	r2, [r3, #32]
 800db48:	4904      	ldr	r1, [pc, #16]	; (800db5c <LL_EXTI_EnableIT_32_63+0x20>)
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	4313      	orrs	r3, r2
 800db4e:	620b      	str	r3, [r1, #32]
}
 800db50:	bf00      	nop
 800db52:	370c      	adds	r7, #12
 800db54:	46bd      	mov	sp, r7
 800db56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5a:	4770      	bx	lr
 800db5c:	40010400 	.word	0x40010400

0800db60 <LL_EXTI_DisableIT_0_31>:
{
 800db60:	b480      	push	{r7}
 800db62:	b083      	sub	sp, #12
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800db68:	4b06      	ldr	r3, [pc, #24]	; (800db84 <LL_EXTI_DisableIT_0_31+0x24>)
 800db6a:	681a      	ldr	r2, [r3, #0]
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	43db      	mvns	r3, r3
 800db70:	4904      	ldr	r1, [pc, #16]	; (800db84 <LL_EXTI_DisableIT_0_31+0x24>)
 800db72:	4013      	ands	r3, r2
 800db74:	600b      	str	r3, [r1, #0]
}
 800db76:	bf00      	nop
 800db78:	370c      	adds	r7, #12
 800db7a:	46bd      	mov	sp, r7
 800db7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db80:	4770      	bx	lr
 800db82:	bf00      	nop
 800db84:	40010400 	.word	0x40010400

0800db88 <LL_EXTI_DisableIT_32_63>:
{
 800db88:	b480      	push	{r7}
 800db8a:	b083      	sub	sp, #12
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800db90:	4b06      	ldr	r3, [pc, #24]	; (800dbac <LL_EXTI_DisableIT_32_63+0x24>)
 800db92:	6a1a      	ldr	r2, [r3, #32]
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	43db      	mvns	r3, r3
 800db98:	4904      	ldr	r1, [pc, #16]	; (800dbac <LL_EXTI_DisableIT_32_63+0x24>)
 800db9a:	4013      	ands	r3, r2
 800db9c:	620b      	str	r3, [r1, #32]
}
 800db9e:	bf00      	nop
 800dba0:	370c      	adds	r7, #12
 800dba2:	46bd      	mov	sp, r7
 800dba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba8:	4770      	bx	lr
 800dbaa:	bf00      	nop
 800dbac:	40010400 	.word	0x40010400

0800dbb0 <LL_EXTI_EnableEvent_0_31>:
{
 800dbb0:	b480      	push	{r7}
 800dbb2:	b083      	sub	sp, #12
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800dbb8:	4b05      	ldr	r3, [pc, #20]	; (800dbd0 <LL_EXTI_EnableEvent_0_31+0x20>)
 800dbba:	685a      	ldr	r2, [r3, #4]
 800dbbc:	4904      	ldr	r1, [pc, #16]	; (800dbd0 <LL_EXTI_EnableEvent_0_31+0x20>)
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	4313      	orrs	r3, r2
 800dbc2:	604b      	str	r3, [r1, #4]
}
 800dbc4:	bf00      	nop
 800dbc6:	370c      	adds	r7, #12
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbce:	4770      	bx	lr
 800dbd0:	40010400 	.word	0x40010400

0800dbd4 <LL_EXTI_EnableEvent_32_63>:
{
 800dbd4:	b480      	push	{r7}
 800dbd6:	b083      	sub	sp, #12
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800dbdc:	4b05      	ldr	r3, [pc, #20]	; (800dbf4 <LL_EXTI_EnableEvent_32_63+0x20>)
 800dbde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dbe0:	4904      	ldr	r1, [pc, #16]	; (800dbf4 <LL_EXTI_EnableEvent_32_63+0x20>)
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	4313      	orrs	r3, r2
 800dbe6:	624b      	str	r3, [r1, #36]	; 0x24
}
 800dbe8:	bf00      	nop
 800dbea:	370c      	adds	r7, #12
 800dbec:	46bd      	mov	sp, r7
 800dbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf2:	4770      	bx	lr
 800dbf4:	40010400 	.word	0x40010400

0800dbf8 <LL_EXTI_DisableEvent_0_31>:
{
 800dbf8:	b480      	push	{r7}
 800dbfa:	b083      	sub	sp, #12
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800dc00:	4b06      	ldr	r3, [pc, #24]	; (800dc1c <LL_EXTI_DisableEvent_0_31+0x24>)
 800dc02:	685a      	ldr	r2, [r3, #4]
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	43db      	mvns	r3, r3
 800dc08:	4904      	ldr	r1, [pc, #16]	; (800dc1c <LL_EXTI_DisableEvent_0_31+0x24>)
 800dc0a:	4013      	ands	r3, r2
 800dc0c:	604b      	str	r3, [r1, #4]
}
 800dc0e:	bf00      	nop
 800dc10:	370c      	adds	r7, #12
 800dc12:	46bd      	mov	sp, r7
 800dc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc18:	4770      	bx	lr
 800dc1a:	bf00      	nop
 800dc1c:	40010400 	.word	0x40010400

0800dc20 <LL_EXTI_DisableEvent_32_63>:
{
 800dc20:	b480      	push	{r7}
 800dc22:	b083      	sub	sp, #12
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800dc28:	4b06      	ldr	r3, [pc, #24]	; (800dc44 <LL_EXTI_DisableEvent_32_63+0x24>)
 800dc2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	43db      	mvns	r3, r3
 800dc30:	4904      	ldr	r1, [pc, #16]	; (800dc44 <LL_EXTI_DisableEvent_32_63+0x24>)
 800dc32:	4013      	ands	r3, r2
 800dc34:	624b      	str	r3, [r1, #36]	; 0x24
}
 800dc36:	bf00      	nop
 800dc38:	370c      	adds	r7, #12
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc40:	4770      	bx	lr
 800dc42:	bf00      	nop
 800dc44:	40010400 	.word	0x40010400

0800dc48 <LL_EXTI_EnableRisingTrig_0_31>:
{
 800dc48:	b480      	push	{r7}
 800dc4a:	b083      	sub	sp, #12
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800dc50:	4b05      	ldr	r3, [pc, #20]	; (800dc68 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800dc52:	689a      	ldr	r2, [r3, #8]
 800dc54:	4904      	ldr	r1, [pc, #16]	; (800dc68 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	4313      	orrs	r3, r2
 800dc5a:	608b      	str	r3, [r1, #8]
}
 800dc5c:	bf00      	nop
 800dc5e:	370c      	adds	r7, #12
 800dc60:	46bd      	mov	sp, r7
 800dc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc66:	4770      	bx	lr
 800dc68:	40010400 	.word	0x40010400

0800dc6c <LL_EXTI_EnableRisingTrig_32_63>:
{
 800dc6c:	b480      	push	{r7}
 800dc6e:	b083      	sub	sp, #12
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800dc74:	4b05      	ldr	r3, [pc, #20]	; (800dc8c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800dc76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dc78:	4904      	ldr	r1, [pc, #16]	; (800dc8c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	4313      	orrs	r3, r2
 800dc7e:	628b      	str	r3, [r1, #40]	; 0x28
}
 800dc80:	bf00      	nop
 800dc82:	370c      	adds	r7, #12
 800dc84:	46bd      	mov	sp, r7
 800dc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8a:	4770      	bx	lr
 800dc8c:	40010400 	.word	0x40010400

0800dc90 <LL_EXTI_DisableRisingTrig_0_31>:
{
 800dc90:	b480      	push	{r7}
 800dc92:	b083      	sub	sp, #12
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800dc98:	4b06      	ldr	r3, [pc, #24]	; (800dcb4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800dc9a:	689a      	ldr	r2, [r3, #8]
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	43db      	mvns	r3, r3
 800dca0:	4904      	ldr	r1, [pc, #16]	; (800dcb4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800dca2:	4013      	ands	r3, r2
 800dca4:	608b      	str	r3, [r1, #8]
}
 800dca6:	bf00      	nop
 800dca8:	370c      	adds	r7, #12
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb0:	4770      	bx	lr
 800dcb2:	bf00      	nop
 800dcb4:	40010400 	.word	0x40010400

0800dcb8 <LL_EXTI_DisableRisingTrig_32_63>:
{
 800dcb8:	b480      	push	{r7}
 800dcba:	b083      	sub	sp, #12
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800dcc0:	4b06      	ldr	r3, [pc, #24]	; (800dcdc <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800dcc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	43db      	mvns	r3, r3
 800dcc8:	4904      	ldr	r1, [pc, #16]	; (800dcdc <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800dcca:	4013      	ands	r3, r2
 800dccc:	628b      	str	r3, [r1, #40]	; 0x28
}
 800dcce:	bf00      	nop
 800dcd0:	370c      	adds	r7, #12
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd8:	4770      	bx	lr
 800dcda:	bf00      	nop
 800dcdc:	40010400 	.word	0x40010400

0800dce0 <LL_EXTI_EnableFallingTrig_0_31>:
{
 800dce0:	b480      	push	{r7}
 800dce2:	b083      	sub	sp, #12
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800dce8:	4b05      	ldr	r3, [pc, #20]	; (800dd00 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800dcea:	68da      	ldr	r2, [r3, #12]
 800dcec:	4904      	ldr	r1, [pc, #16]	; (800dd00 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	4313      	orrs	r3, r2
 800dcf2:	60cb      	str	r3, [r1, #12]
}
 800dcf4:	bf00      	nop
 800dcf6:	370c      	adds	r7, #12
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfe:	4770      	bx	lr
 800dd00:	40010400 	.word	0x40010400

0800dd04 <LL_EXTI_EnableFallingTrig_32_63>:
{
 800dd04:	b480      	push	{r7}
 800dd06:	b083      	sub	sp, #12
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800dd0c:	4b05      	ldr	r3, [pc, #20]	; (800dd24 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800dd0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd10:	4904      	ldr	r1, [pc, #16]	; (800dd24 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	4313      	orrs	r3, r2
 800dd16:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800dd18:	bf00      	nop
 800dd1a:	370c      	adds	r7, #12
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd22:	4770      	bx	lr
 800dd24:	40010400 	.word	0x40010400

0800dd28 <LL_EXTI_DisableFallingTrig_0_31>:
{
 800dd28:	b480      	push	{r7}
 800dd2a:	b083      	sub	sp, #12
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800dd30:	4b06      	ldr	r3, [pc, #24]	; (800dd4c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800dd32:	68da      	ldr	r2, [r3, #12]
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	43db      	mvns	r3, r3
 800dd38:	4904      	ldr	r1, [pc, #16]	; (800dd4c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800dd3a:	4013      	ands	r3, r2
 800dd3c:	60cb      	str	r3, [r1, #12]
}
 800dd3e:	bf00      	nop
 800dd40:	370c      	adds	r7, #12
 800dd42:	46bd      	mov	sp, r7
 800dd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd48:	4770      	bx	lr
 800dd4a:	bf00      	nop
 800dd4c:	40010400 	.word	0x40010400

0800dd50 <LL_EXTI_DisableFallingTrig_32_63>:
{
 800dd50:	b480      	push	{r7}
 800dd52:	b083      	sub	sp, #12
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800dd58:	4b06      	ldr	r3, [pc, #24]	; (800dd74 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800dd5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	43db      	mvns	r3, r3
 800dd60:	4904      	ldr	r1, [pc, #16]	; (800dd74 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800dd62:	4013      	ands	r3, r2
 800dd64:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800dd66:	bf00      	nop
 800dd68:	370c      	adds	r7, #12
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd70:	4770      	bx	lr
 800dd72:	bf00      	nop
 800dd74:	40010400 	.word	0x40010400

0800dd78 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b084      	sub	sp, #16
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 800dd80:	2300      	movs	r3, #0
 800dd82:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	7a1b      	ldrb	r3, [r3, #8]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	f000 80c8 	beq.w	800df1e <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d05d      	beq.n	800de52 <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	7a5b      	ldrb	r3, [r3, #9]
 800dd9a:	2b01      	cmp	r3, #1
 800dd9c:	d00e      	beq.n	800ddbc <LL_EXTI_Init+0x44>
 800dd9e:	2b02      	cmp	r3, #2
 800dda0:	d017      	beq.n	800ddd2 <LL_EXTI_Init+0x5a>
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d120      	bne.n	800dde8 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	4618      	mov	r0, r3
 800ddac:	f7ff ff24 	bl	800dbf8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	f7ff feaf 	bl	800db18 <LL_EXTI_EnableIT_0_31>
          break;
 800ddba:	e018      	b.n	800ddee <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	f7ff fecd 	bl	800db60 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	4618      	mov	r0, r3
 800ddcc:	f7ff fef0 	bl	800dbb0 <LL_EXTI_EnableEvent_0_31>
          break;
 800ddd0:	e00d      	b.n	800ddee <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	f7ff fe9e 	bl	800db18 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	4618      	mov	r0, r3
 800dde2:	f7ff fee5 	bl	800dbb0 <LL_EXTI_EnableEvent_0_31>
          break;
 800dde6:	e002      	b.n	800ddee <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 800dde8:	2301      	movs	r3, #1
 800ddea:	60fb      	str	r3, [r7, #12]
          break;
 800ddec:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	7a9b      	ldrb	r3, [r3, #10]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d02d      	beq.n	800de52 <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	7a9b      	ldrb	r3, [r3, #10]
 800ddfa:	2b02      	cmp	r3, #2
 800ddfc:	d00e      	beq.n	800de1c <LL_EXTI_Init+0xa4>
 800ddfe:	2b03      	cmp	r3, #3
 800de00:	d017      	beq.n	800de32 <LL_EXTI_Init+0xba>
 800de02:	2b01      	cmp	r3, #1
 800de04:	d120      	bne.n	800de48 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	4618      	mov	r0, r3
 800de0c:	f7ff ff8c 	bl	800dd28 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	4618      	mov	r0, r3
 800de16:	f7ff ff17 	bl	800dc48 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800de1a:	e01b      	b.n	800de54 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	4618      	mov	r0, r3
 800de22:	f7ff ff35 	bl	800dc90 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	4618      	mov	r0, r3
 800de2c:	f7ff ff58 	bl	800dce0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800de30:	e010      	b.n	800de54 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	4618      	mov	r0, r3
 800de38:	f7ff ff06 	bl	800dc48 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	4618      	mov	r0, r3
 800de42:	f7ff ff4d 	bl	800dce0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800de46:	e005      	b.n	800de54 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	f043 0302 	orr.w	r3, r3, #2
 800de4e:	60fb      	str	r3, [r7, #12]
            break;
 800de50:	e000      	b.n	800de54 <LL_EXTI_Init+0xdc>
        }
      }
 800de52:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	685b      	ldr	r3, [r3, #4]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d075      	beq.n	800df48 <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	7a5b      	ldrb	r3, [r3, #9]
 800de60:	2b01      	cmp	r3, #1
 800de62:	d00e      	beq.n	800de82 <LL_EXTI_Init+0x10a>
 800de64:	2b02      	cmp	r3, #2
 800de66:	d017      	beq.n	800de98 <LL_EXTI_Init+0x120>
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d120      	bne.n	800deae <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	685b      	ldr	r3, [r3, #4]
 800de70:	4618      	mov	r0, r3
 800de72:	f7ff fed5 	bl	800dc20 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	685b      	ldr	r3, [r3, #4]
 800de7a:	4618      	mov	r0, r3
 800de7c:	f7ff fe5e 	bl	800db3c <LL_EXTI_EnableIT_32_63>
          break;
 800de80:	e01a      	b.n	800deb8 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	685b      	ldr	r3, [r3, #4]
 800de86:	4618      	mov	r0, r3
 800de88:	f7ff fe7e 	bl	800db88 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	685b      	ldr	r3, [r3, #4]
 800de90:	4618      	mov	r0, r3
 800de92:	f7ff fe9f 	bl	800dbd4 <LL_EXTI_EnableEvent_32_63>
          break;
 800de96:	e00f      	b.n	800deb8 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	685b      	ldr	r3, [r3, #4]
 800de9c:	4618      	mov	r0, r3
 800de9e:	f7ff fe4d 	bl	800db3c <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	685b      	ldr	r3, [r3, #4]
 800dea6:	4618      	mov	r0, r3
 800dea8:	f7ff fe94 	bl	800dbd4 <LL_EXTI_EnableEvent_32_63>
          break;
 800deac:	e004      	b.n	800deb8 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	f043 0304 	orr.w	r3, r3, #4
 800deb4:	60fb      	str	r3, [r7, #12]
          break;
 800deb6:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	7a9b      	ldrb	r3, [r3, #10]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d043      	beq.n	800df48 <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	7a9b      	ldrb	r3, [r3, #10]
 800dec4:	2b02      	cmp	r3, #2
 800dec6:	d00e      	beq.n	800dee6 <LL_EXTI_Init+0x16e>
 800dec8:	2b03      	cmp	r3, #3
 800deca:	d017      	beq.n	800defc <LL_EXTI_Init+0x184>
 800decc:	2b01      	cmp	r3, #1
 800dece:	d120      	bne.n	800df12 <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	685b      	ldr	r3, [r3, #4]
 800ded4:	4618      	mov	r0, r3
 800ded6:	f7ff ff3b 	bl	800dd50 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	685b      	ldr	r3, [r3, #4]
 800dede:	4618      	mov	r0, r3
 800dee0:	f7ff fec4 	bl	800dc6c <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800dee4:	e031      	b.n	800df4a <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	685b      	ldr	r3, [r3, #4]
 800deea:	4618      	mov	r0, r3
 800deec:	f7ff fee4 	bl	800dcb8 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	685b      	ldr	r3, [r3, #4]
 800def4:	4618      	mov	r0, r3
 800def6:	f7ff ff05 	bl	800dd04 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800defa:	e026      	b.n	800df4a <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	685b      	ldr	r3, [r3, #4]
 800df00:	4618      	mov	r0, r3
 800df02:	f7ff feb3 	bl	800dc6c <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	685b      	ldr	r3, [r3, #4]
 800df0a:	4618      	mov	r0, r3
 800df0c:	f7ff fefa 	bl	800dd04 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800df10:	e01b      	b.n	800df4a <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	f043 0305 	orr.w	r3, r3, #5
 800df18:	60fb      	str	r3, [r7, #12]
            break;
 800df1a:	bf00      	nop
 800df1c:	e015      	b.n	800df4a <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	4618      	mov	r0, r3
 800df24:	f7ff fe1c 	bl	800db60 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	4618      	mov	r0, r3
 800df2e:	f7ff fe63 	bl	800dbf8 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	685b      	ldr	r3, [r3, #4]
 800df36:	4618      	mov	r0, r3
 800df38:	f7ff fe26 	bl	800db88 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	685b      	ldr	r3, [r3, #4]
 800df40:	4618      	mov	r0, r3
 800df42:	f7ff fe6d 	bl	800dc20 <LL_EXTI_DisableEvent_32_63>
 800df46:	e000      	b.n	800df4a <LL_EXTI_Init+0x1d2>
      }
 800df48:	bf00      	nop
  }

  return status;
 800df4a:	68fb      	ldr	r3, [r7, #12]
}
 800df4c:	4618      	mov	r0, r3
 800df4e:	3710      	adds	r7, #16
 800df50:	46bd      	mov	sp, r7
 800df52:	bd80      	pop	{r7, pc}

0800df54 <LL_GPIO_SetPinMode>:
{
 800df54:	b480      	push	{r7}
 800df56:	b089      	sub	sp, #36	; 0x24
 800df58:	af00      	add	r7, sp, #0
 800df5a:	60f8      	str	r0, [r7, #12]
 800df5c:	60b9      	str	r1, [r7, #8]
 800df5e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	681a      	ldr	r2, [r3, #0]
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800df68:	697b      	ldr	r3, [r7, #20]
 800df6a:	fa93 f3a3 	rbit	r3, r3
 800df6e:	613b      	str	r3, [r7, #16]
  return result;
 800df70:	693b      	ldr	r3, [r7, #16]
 800df72:	fab3 f383 	clz	r3, r3
 800df76:	b2db      	uxtb	r3, r3
 800df78:	005b      	lsls	r3, r3, #1
 800df7a:	2103      	movs	r1, #3
 800df7c:	fa01 f303 	lsl.w	r3, r1, r3
 800df80:	43db      	mvns	r3, r3
 800df82:	401a      	ands	r2, r3
 800df84:	68bb      	ldr	r3, [r7, #8]
 800df86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800df88:	69fb      	ldr	r3, [r7, #28]
 800df8a:	fa93 f3a3 	rbit	r3, r3
 800df8e:	61bb      	str	r3, [r7, #24]
  return result;
 800df90:	69bb      	ldr	r3, [r7, #24]
 800df92:	fab3 f383 	clz	r3, r3
 800df96:	b2db      	uxtb	r3, r3
 800df98:	005b      	lsls	r3, r3, #1
 800df9a:	6879      	ldr	r1, [r7, #4]
 800df9c:	fa01 f303 	lsl.w	r3, r1, r3
 800dfa0:	431a      	orrs	r2, r3
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	601a      	str	r2, [r3, #0]
}
 800dfa6:	bf00      	nop
 800dfa8:	3724      	adds	r7, #36	; 0x24
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb0:	4770      	bx	lr

0800dfb2 <LL_GPIO_SetPinOutputType>:
{
 800dfb2:	b480      	push	{r7}
 800dfb4:	b085      	sub	sp, #20
 800dfb6:	af00      	add	r7, sp, #0
 800dfb8:	60f8      	str	r0, [r7, #12]
 800dfba:	60b9      	str	r1, [r7, #8]
 800dfbc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	685a      	ldr	r2, [r3, #4]
 800dfc2:	68bb      	ldr	r3, [r7, #8]
 800dfc4:	43db      	mvns	r3, r3
 800dfc6:	401a      	ands	r2, r3
 800dfc8:	68bb      	ldr	r3, [r7, #8]
 800dfca:	6879      	ldr	r1, [r7, #4]
 800dfcc:	fb01 f303 	mul.w	r3, r1, r3
 800dfd0:	431a      	orrs	r2, r3
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	605a      	str	r2, [r3, #4]
}
 800dfd6:	bf00      	nop
 800dfd8:	3714      	adds	r7, #20
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe0:	4770      	bx	lr

0800dfe2 <LL_GPIO_SetPinSpeed>:
{
 800dfe2:	b480      	push	{r7}
 800dfe4:	b089      	sub	sp, #36	; 0x24
 800dfe6:	af00      	add	r7, sp, #0
 800dfe8:	60f8      	str	r0, [r7, #12]
 800dfea:	60b9      	str	r1, [r7, #8]
 800dfec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	689a      	ldr	r2, [r3, #8]
 800dff2:	68bb      	ldr	r3, [r7, #8]
 800dff4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dff6:	697b      	ldr	r3, [r7, #20]
 800dff8:	fa93 f3a3 	rbit	r3, r3
 800dffc:	613b      	str	r3, [r7, #16]
  return result;
 800dffe:	693b      	ldr	r3, [r7, #16]
 800e000:	fab3 f383 	clz	r3, r3
 800e004:	b2db      	uxtb	r3, r3
 800e006:	005b      	lsls	r3, r3, #1
 800e008:	2103      	movs	r1, #3
 800e00a:	fa01 f303 	lsl.w	r3, r1, r3
 800e00e:	43db      	mvns	r3, r3
 800e010:	401a      	ands	r2, r3
 800e012:	68bb      	ldr	r3, [r7, #8]
 800e014:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e016:	69fb      	ldr	r3, [r7, #28]
 800e018:	fa93 f3a3 	rbit	r3, r3
 800e01c:	61bb      	str	r3, [r7, #24]
  return result;
 800e01e:	69bb      	ldr	r3, [r7, #24]
 800e020:	fab3 f383 	clz	r3, r3
 800e024:	b2db      	uxtb	r3, r3
 800e026:	005b      	lsls	r3, r3, #1
 800e028:	6879      	ldr	r1, [r7, #4]
 800e02a:	fa01 f303 	lsl.w	r3, r1, r3
 800e02e:	431a      	orrs	r2, r3
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	609a      	str	r2, [r3, #8]
}
 800e034:	bf00      	nop
 800e036:	3724      	adds	r7, #36	; 0x24
 800e038:	46bd      	mov	sp, r7
 800e03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03e:	4770      	bx	lr

0800e040 <LL_GPIO_SetPinPull>:
{
 800e040:	b480      	push	{r7}
 800e042:	b089      	sub	sp, #36	; 0x24
 800e044:	af00      	add	r7, sp, #0
 800e046:	60f8      	str	r0, [r7, #12]
 800e048:	60b9      	str	r1, [r7, #8]
 800e04a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	68da      	ldr	r2, [r3, #12]
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e054:	697b      	ldr	r3, [r7, #20]
 800e056:	fa93 f3a3 	rbit	r3, r3
 800e05a:	613b      	str	r3, [r7, #16]
  return result;
 800e05c:	693b      	ldr	r3, [r7, #16]
 800e05e:	fab3 f383 	clz	r3, r3
 800e062:	b2db      	uxtb	r3, r3
 800e064:	005b      	lsls	r3, r3, #1
 800e066:	2103      	movs	r1, #3
 800e068:	fa01 f303 	lsl.w	r3, r1, r3
 800e06c:	43db      	mvns	r3, r3
 800e06e:	401a      	ands	r2, r3
 800e070:	68bb      	ldr	r3, [r7, #8]
 800e072:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e074:	69fb      	ldr	r3, [r7, #28]
 800e076:	fa93 f3a3 	rbit	r3, r3
 800e07a:	61bb      	str	r3, [r7, #24]
  return result;
 800e07c:	69bb      	ldr	r3, [r7, #24]
 800e07e:	fab3 f383 	clz	r3, r3
 800e082:	b2db      	uxtb	r3, r3
 800e084:	005b      	lsls	r3, r3, #1
 800e086:	6879      	ldr	r1, [r7, #4]
 800e088:	fa01 f303 	lsl.w	r3, r1, r3
 800e08c:	431a      	orrs	r2, r3
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	60da      	str	r2, [r3, #12]
}
 800e092:	bf00      	nop
 800e094:	3724      	adds	r7, #36	; 0x24
 800e096:	46bd      	mov	sp, r7
 800e098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09c:	4770      	bx	lr

0800e09e <LL_GPIO_SetAFPin_0_7>:
{
 800e09e:	b480      	push	{r7}
 800e0a0:	b089      	sub	sp, #36	; 0x24
 800e0a2:	af00      	add	r7, sp, #0
 800e0a4:	60f8      	str	r0, [r7, #12]
 800e0a6:	60b9      	str	r1, [r7, #8]
 800e0a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	6a1a      	ldr	r2, [r3, #32]
 800e0ae:	68bb      	ldr	r3, [r7, #8]
 800e0b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	fa93 f3a3 	rbit	r3, r3
 800e0b8:	613b      	str	r3, [r7, #16]
  return result;
 800e0ba:	693b      	ldr	r3, [r7, #16]
 800e0bc:	fab3 f383 	clz	r3, r3
 800e0c0:	b2db      	uxtb	r3, r3
 800e0c2:	009b      	lsls	r3, r3, #2
 800e0c4:	210f      	movs	r1, #15
 800e0c6:	fa01 f303 	lsl.w	r3, r1, r3
 800e0ca:	43db      	mvns	r3, r3
 800e0cc:	401a      	ands	r2, r3
 800e0ce:	68bb      	ldr	r3, [r7, #8]
 800e0d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e0d2:	69fb      	ldr	r3, [r7, #28]
 800e0d4:	fa93 f3a3 	rbit	r3, r3
 800e0d8:	61bb      	str	r3, [r7, #24]
  return result;
 800e0da:	69bb      	ldr	r3, [r7, #24]
 800e0dc:	fab3 f383 	clz	r3, r3
 800e0e0:	b2db      	uxtb	r3, r3
 800e0e2:	009b      	lsls	r3, r3, #2
 800e0e4:	6879      	ldr	r1, [r7, #4]
 800e0e6:	fa01 f303 	lsl.w	r3, r1, r3
 800e0ea:	431a      	orrs	r2, r3
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	621a      	str	r2, [r3, #32]
}
 800e0f0:	bf00      	nop
 800e0f2:	3724      	adds	r7, #36	; 0x24
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fa:	4770      	bx	lr

0800e0fc <LL_GPIO_SetAFPin_8_15>:
{
 800e0fc:	b480      	push	{r7}
 800e0fe:	b089      	sub	sp, #36	; 0x24
 800e100:	af00      	add	r7, sp, #0
 800e102:	60f8      	str	r0, [r7, #12]
 800e104:	60b9      	str	r1, [r7, #8]
 800e106:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e10c:	68bb      	ldr	r3, [r7, #8]
 800e10e:	0a1b      	lsrs	r3, r3, #8
 800e110:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e112:	697b      	ldr	r3, [r7, #20]
 800e114:	fa93 f3a3 	rbit	r3, r3
 800e118:	613b      	str	r3, [r7, #16]
  return result;
 800e11a:	693b      	ldr	r3, [r7, #16]
 800e11c:	fab3 f383 	clz	r3, r3
 800e120:	b2db      	uxtb	r3, r3
 800e122:	009b      	lsls	r3, r3, #2
 800e124:	210f      	movs	r1, #15
 800e126:	fa01 f303 	lsl.w	r3, r1, r3
 800e12a:	43db      	mvns	r3, r3
 800e12c:	401a      	ands	r2, r3
 800e12e:	68bb      	ldr	r3, [r7, #8]
 800e130:	0a1b      	lsrs	r3, r3, #8
 800e132:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e134:	69fb      	ldr	r3, [r7, #28]
 800e136:	fa93 f3a3 	rbit	r3, r3
 800e13a:	61bb      	str	r3, [r7, #24]
  return result;
 800e13c:	69bb      	ldr	r3, [r7, #24]
 800e13e:	fab3 f383 	clz	r3, r3
 800e142:	b2db      	uxtb	r3, r3
 800e144:	009b      	lsls	r3, r3, #2
 800e146:	6879      	ldr	r1, [r7, #4]
 800e148:	fa01 f303 	lsl.w	r3, r1, r3
 800e14c:	431a      	orrs	r2, r3
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	625a      	str	r2, [r3, #36]	; 0x24
}
 800e152:	bf00      	nop
 800e154:	3724      	adds	r7, #36	; 0x24
 800e156:	46bd      	mov	sp, r7
 800e158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15c:	4770      	bx	lr

0800e15e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800e15e:	b580      	push	{r7, lr}
 800e160:	b086      	sub	sp, #24
 800e162:	af00      	add	r7, sp, #0
 800e164:	6078      	str	r0, [r7, #4]
 800e166:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	fa93 f3a3 	rbit	r3, r3
 800e174:	60bb      	str	r3, [r7, #8]
  return result;
 800e176:	68bb      	ldr	r3, [r7, #8]
 800e178:	fab3 f383 	clz	r3, r3
 800e17c:	b2db      	uxtb	r3, r3
 800e17e:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800e180:	e040      	b.n	800e204 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	681a      	ldr	r2, [r3, #0]
 800e186:	2101      	movs	r1, #1
 800e188:	697b      	ldr	r3, [r7, #20]
 800e18a:	fa01 f303 	lsl.w	r3, r1, r3
 800e18e:	4013      	ands	r3, r2
 800e190:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 800e192:	693b      	ldr	r3, [r7, #16]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d032      	beq.n	800e1fe <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	685b      	ldr	r3, [r3, #4]
 800e19c:	461a      	mov	r2, r3
 800e19e:	6939      	ldr	r1, [r7, #16]
 800e1a0:	6878      	ldr	r0, [r7, #4]
 800e1a2:	f7ff fed7 	bl	800df54 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	685b      	ldr	r3, [r3, #4]
 800e1aa:	2b01      	cmp	r3, #1
 800e1ac:	d003      	beq.n	800e1b6 <LL_GPIO_Init+0x58>
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	685b      	ldr	r3, [r3, #4]
 800e1b2:	2b02      	cmp	r3, #2
 800e1b4:	d106      	bne.n	800e1c4 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	689b      	ldr	r3, [r3, #8]
 800e1ba:	461a      	mov	r2, r3
 800e1bc:	6939      	ldr	r1, [r7, #16]
 800e1be:	6878      	ldr	r0, [r7, #4]
 800e1c0:	f7ff ff0f 	bl	800dfe2 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	691b      	ldr	r3, [r3, #16]
 800e1c8:	461a      	mov	r2, r3
 800e1ca:	6939      	ldr	r1, [r7, #16]
 800e1cc:	6878      	ldr	r0, [r7, #4]
 800e1ce:	f7ff ff37 	bl	800e040 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800e1d2:	683b      	ldr	r3, [r7, #0]
 800e1d4:	685b      	ldr	r3, [r3, #4]
 800e1d6:	2b02      	cmp	r3, #2
 800e1d8:	d111      	bne.n	800e1fe <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800e1da:	693b      	ldr	r3, [r7, #16]
 800e1dc:	2bff      	cmp	r3, #255	; 0xff
 800e1de:	d807      	bhi.n	800e1f0 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800e1e0:	683b      	ldr	r3, [r7, #0]
 800e1e2:	695b      	ldr	r3, [r3, #20]
 800e1e4:	461a      	mov	r2, r3
 800e1e6:	6939      	ldr	r1, [r7, #16]
 800e1e8:	6878      	ldr	r0, [r7, #4]
 800e1ea:	f7ff ff58 	bl	800e09e <LL_GPIO_SetAFPin_0_7>
 800e1ee:	e006      	b.n	800e1fe <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	695b      	ldr	r3, [r3, #20]
 800e1f4:	461a      	mov	r2, r3
 800e1f6:	6939      	ldr	r1, [r7, #16]
 800e1f8:	6878      	ldr	r0, [r7, #4]
 800e1fa:	f7ff ff7f 	bl	800e0fc <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800e1fe:	697b      	ldr	r3, [r7, #20]
 800e200:	3301      	adds	r3, #1
 800e202:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800e204:	683b      	ldr	r3, [r7, #0]
 800e206:	681a      	ldr	r2, [r3, #0]
 800e208:	697b      	ldr	r3, [r7, #20]
 800e20a:	fa22 f303 	lsr.w	r3, r2, r3
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d1b7      	bne.n	800e182 <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800e212:	683b      	ldr	r3, [r7, #0]
 800e214:	685b      	ldr	r3, [r3, #4]
 800e216:	2b01      	cmp	r3, #1
 800e218:	d003      	beq.n	800e222 <LL_GPIO_Init+0xc4>
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	685b      	ldr	r3, [r3, #4]
 800e21e:	2b02      	cmp	r3, #2
 800e220:	d107      	bne.n	800e232 <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	6819      	ldr	r1, [r3, #0]
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	68db      	ldr	r3, [r3, #12]
 800e22a:	461a      	mov	r2, r3
 800e22c:	6878      	ldr	r0, [r7, #4]
 800e22e:	f7ff fec0 	bl	800dfb2 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800e232:	2300      	movs	r3, #0
}
 800e234:	4618      	mov	r0, r3
 800e236:	3718      	adds	r7, #24
 800e238:	46bd      	mov	sp, r7
 800e23a:	bd80      	pop	{r7, pc}

0800e23c <ILI9341_Draw_Wave>:

 extern uint16_t BURST_MAX_SIZE;


void ILI9341_Draw_Wave(uint16_t x, uint16_t y, uint8_t weight, uint16_t colour, uint8_t scale, uint32_t* data_table, uint16_t data_table_size)
{
 800e23c:	b590      	push	{r4, r7, lr}
 800e23e:	b085      	sub	sp, #20
 800e240:	af00      	add	r7, sp, #0
 800e242:	4604      	mov	r4, r0
 800e244:	4608      	mov	r0, r1
 800e246:	4611      	mov	r1, r2
 800e248:	461a      	mov	r2, r3
 800e24a:	4623      	mov	r3, r4
 800e24c:	80fb      	strh	r3, [r7, #6]
 800e24e:	4603      	mov	r3, r0
 800e250:	80bb      	strh	r3, [r7, #4]
 800e252:	460b      	mov	r3, r1
 800e254:	70fb      	strb	r3, [r7, #3]
 800e256:	4613      	mov	r3, r2
 800e258:	803b      	strh	r3, [r7, #0]
	for(int w = 0; w < weight; w++ )
 800e25a:	2300      	movs	r3, #0
 800e25c:	60fb      	str	r3, [r7, #12]
 800e25e:	e026      	b.n	800e2ae <ILI9341_Draw_Wave+0x72>
	{
		for(int i = 0; i < data_table_size; i++)
 800e260:	2300      	movs	r3, #0
 800e262:	60bb      	str	r3, [r7, #8]
 800e264:	e01c      	b.n	800e2a0 <ILI9341_Draw_Wave+0x64>
		{
			ILI9341_Draw_Pixel(	x + i,	(y + data_table[i] / scale) + w, colour);
 800e266:	68bb      	ldr	r3, [r7, #8]
 800e268:	b29a      	uxth	r2, r3
 800e26a:	88fb      	ldrh	r3, [r7, #6]
 800e26c:	4413      	add	r3, r2
 800e26e:	b298      	uxth	r0, r3
 800e270:	68bb      	ldr	r3, [r7, #8]
 800e272:	009b      	lsls	r3, r3, #2
 800e274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e276:	4413      	add	r3, r2
 800e278:	681a      	ldr	r2, [r3, #0]
 800e27a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e27e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e282:	b29a      	uxth	r2, r3
 800e284:	88bb      	ldrh	r3, [r7, #4]
 800e286:	4413      	add	r3, r2
 800e288:	b29a      	uxth	r2, r3
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	b29b      	uxth	r3, r3
 800e28e:	4413      	add	r3, r2
 800e290:	b29b      	uxth	r3, r3
 800e292:	883a      	ldrh	r2, [r7, #0]
 800e294:	4619      	mov	r1, r3
 800e296:	f000 fc1f 	bl	800ead8 <ILI9341_Draw_Pixel>
		for(int i = 0; i < data_table_size; i++)
 800e29a:	68bb      	ldr	r3, [r7, #8]
 800e29c:	3301      	adds	r3, #1
 800e29e:	60bb      	str	r3, [r7, #8]
 800e2a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e2a2:	68ba      	ldr	r2, [r7, #8]
 800e2a4:	429a      	cmp	r2, r3
 800e2a6:	dbde      	blt.n	800e266 <ILI9341_Draw_Wave+0x2a>
	for(int w = 0; w < weight; w++ )
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	3301      	adds	r3, #1
 800e2ac:	60fb      	str	r3, [r7, #12]
 800e2ae:	78fb      	ldrb	r3, [r7, #3]
 800e2b0:	68fa      	ldr	r2, [r7, #12]
 800e2b2:	429a      	cmp	r2, r3
 800e2b4:	dbd4      	blt.n	800e260 <ILI9341_Draw_Wave+0x24>

		}
	}

}
 800e2b6:	bf00      	nop
 800e2b8:	3714      	adds	r7, #20
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd90      	pop	{r4, r7, pc}

0800e2be <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 *
 */
void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint16_t border_colour)
{
 800e2be:	b590      	push	{r4, r7, lr}
 800e2c0:	b087      	sub	sp, #28
 800e2c2:	af02      	add	r7, sp, #8
 800e2c4:	4604      	mov	r4, r0
 800e2c6:	4608      	mov	r0, r1
 800e2c8:	4611      	mov	r1, r2
 800e2ca:	461a      	mov	r2, r3
 800e2cc:	4623      	mov	r3, r4
 800e2ce:	80fb      	strh	r3, [r7, #6]
 800e2d0:	4603      	mov	r3, r0
 800e2d2:	80bb      	strh	r3, [r7, #4]
 800e2d4:	460b      	mov	r3, r1
 800e2d6:	807b      	strh	r3, [r7, #2]
 800e2d8:	4613      	mov	r3, r2
 800e2da:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 800e2dc:	2300      	movs	r3, #0
 800e2de:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 800e2e0:	7bfa      	ldrb	r2, [r7, #15]
 800e2e2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e2e6:	429a      	cmp	r2, r3
 800e2e8:	d939      	bls.n	800e35e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa0>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 800e2ea:	88ba      	ldrh	r2, [r7, #4]
 800e2ec:	7bfb      	ldrb	r3, [r7, #15]
 800e2ee:	441a      	add	r2, r3
 800e2f0:	88b9      	ldrh	r1, [r7, #4]
 800e2f2:	883b      	ldrh	r3, [r7, #0]
 800e2f4:	4419      	add	r1, r3
 800e2f6:	7bfb      	ldrb	r3, [r7, #15]
 800e2f8:	1acb      	subs	r3, r1, r3
 800e2fa:	429a      	cmp	r2, r3
 800e2fc:	f000 8089 	beq.w	800e412 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
 800e300:	88fa      	ldrh	r2, [r7, #6]
 800e302:	7bfb      	ldrb	r3, [r7, #15]
 800e304:	441a      	add	r2, r3
 800e306:	88f9      	ldrh	r1, [r7, #6]
 800e308:	887b      	ldrh	r3, [r7, #2]
 800e30a:	4419      	add	r1, r3
 800e30c:	7bfb      	ldrb	r3, [r7, #15]
 800e30e:	1acb      	subs	r3, r1, r3
 800e310:	429a      	cmp	r2, r3
 800e312:	d07e      	beq.n	800e412 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 800e314:	7bfb      	ldrb	r3, [r7, #15]
 800e316:	b29a      	uxth	r2, r3
 800e318:	88fb      	ldrh	r3, [r7, #6]
 800e31a:	4413      	add	r3, r2
 800e31c:	b298      	uxth	r0, r3
 800e31e:	7bfb      	ldrb	r3, [r7, #15]
 800e320:	b29a      	uxth	r2, r3
 800e322:	88bb      	ldrh	r3, [r7, #4]
 800e324:	4413      	add	r3, r2
 800e326:	b299      	uxth	r1, r3
 800e328:	7bfb      	ldrb	r3, [r7, #15]
 800e32a:	b29b      	uxth	r3, r3
 800e32c:	005b      	lsls	r3, r3, #1
 800e32e:	b29b      	uxth	r3, r3
 800e330:	887a      	ldrh	r2, [r7, #2]
 800e332:	1ad3      	subs	r3, r2, r3
 800e334:	b29b      	uxth	r3, r3
 800e336:	3301      	adds	r3, #1
 800e338:	b29c      	uxth	r4, r3
 800e33a:	7bfb      	ldrb	r3, [r7, #15]
 800e33c:	b29b      	uxth	r3, r3
 800e33e:	005b      	lsls	r3, r3, #1
 800e340:	b29b      	uxth	r3, r3
 800e342:	883a      	ldrh	r2, [r7, #0]
 800e344:	1ad3      	subs	r3, r2, r3
 800e346:	b29b      	uxth	r3, r3
 800e348:	3301      	adds	r3, #1
 800e34a:	b29a      	uxth	r2, r3
 800e34c:	2304      	movs	r3, #4
 800e34e:	9301      	str	r3, [sp, #4]
 800e350:	8c3b      	ldrh	r3, [r7, #32]
 800e352:	9300      	str	r3, [sp, #0]
 800e354:	4613      	mov	r3, r2
 800e356:	4622      	mov	r2, r4
 800e358:	f000 fd18 	bl	800ed8c <ILI9341_Draw_Rectangle>
				goto finish;
 800e35c:	e05a      	b.n	800e414 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x156>
			}
		}

		// Horizontal line - Top
		ILI9341_Draw_Horizontal_Line(	x + b,
 800e35e:	7bfb      	ldrb	r3, [r7, #15]
 800e360:	b29a      	uxth	r2, r3
 800e362:	88fb      	ldrh	r3, [r7, #6]
 800e364:	4413      	add	r3, r2
 800e366:	b298      	uxth	r0, r3
 800e368:	7bfb      	ldrb	r3, [r7, #15]
 800e36a:	b29a      	uxth	r2, r3
 800e36c:	88bb      	ldrh	r3, [r7, #4]
 800e36e:	4413      	add	r3, r2
 800e370:	b299      	uxth	r1, r3
										y + b,
										(w - b)+1,
 800e372:	7bfb      	ldrb	r3, [r7, #15]
 800e374:	b29b      	uxth	r3, r3
 800e376:	887a      	ldrh	r2, [r7, #2]
 800e378:	1ad3      	subs	r3, r2, r3
 800e37a:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800e37c:	3301      	adds	r3, #1
 800e37e:	b29a      	uxth	r2, r3
 800e380:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e382:	f000 fa6b 	bl	800e85c <ILI9341_Draw_Horizontal_Line>
										border_colour);
		// Horizontal line - Bottom
		ILI9341_Draw_Horizontal_Line(	x + b,
 800e386:	7bfb      	ldrb	r3, [r7, #15]
 800e388:	b29a      	uxth	r2, r3
 800e38a:	88fb      	ldrh	r3, [r7, #6]
 800e38c:	4413      	add	r3, r2
 800e38e:	b298      	uxth	r0, r3
										(y + h) - b,
 800e390:	88ba      	ldrh	r2, [r7, #4]
 800e392:	883b      	ldrh	r3, [r7, #0]
 800e394:	4413      	add	r3, r2
 800e396:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800e398:	7bfb      	ldrb	r3, [r7, #15]
 800e39a:	b29b      	uxth	r3, r3
 800e39c:	1ad3      	subs	r3, r2, r3
 800e39e:	b299      	uxth	r1, r3
										(w - b)+1,
 800e3a0:	7bfb      	ldrb	r3, [r7, #15]
 800e3a2:	b29b      	uxth	r3, r3
 800e3a4:	887a      	ldrh	r2, [r7, #2]
 800e3a6:	1ad3      	subs	r3, r2, r3
 800e3a8:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800e3aa:	3301      	adds	r3, #1
 800e3ac:	b29a      	uxth	r2, r3
 800e3ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e3b0:	f000 fa54 	bl	800e85c <ILI9341_Draw_Horizontal_Line>
										border_colour);


		// Vertical line - left
		ILI9341_Draw_Vertical_Line(		x + b,
 800e3b4:	7bfb      	ldrb	r3, [r7, #15]
 800e3b6:	b29a      	uxth	r2, r3
 800e3b8:	88fb      	ldrh	r3, [r7, #6]
 800e3ba:	4413      	add	r3, r2
 800e3bc:	b298      	uxth	r0, r3
 800e3be:	7bfb      	ldrb	r3, [r7, #15]
 800e3c0:	b29a      	uxth	r2, r3
 800e3c2:	88bb      	ldrh	r3, [r7, #4]
 800e3c4:	4413      	add	r3, r2
 800e3c6:	b299      	uxth	r1, r3
 800e3c8:	7bfb      	ldrb	r3, [r7, #15]
 800e3ca:	b29b      	uxth	r3, r3
 800e3cc:	005b      	lsls	r3, r3, #1
 800e3ce:	b29b      	uxth	r3, r3
 800e3d0:	883a      	ldrh	r2, [r7, #0]
 800e3d2:	1ad3      	subs	r3, r2, r3
 800e3d4:	b29a      	uxth	r2, r3
 800e3d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e3d8:	f000 faa4 	bl	800e924 <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);
		// Vertical line - right
		ILI9341_Draw_Vertical_Line(		((x + w)) - (b),
 800e3dc:	88fa      	ldrh	r2, [r7, #6]
 800e3de:	887b      	ldrh	r3, [r7, #2]
 800e3e0:	4413      	add	r3, r2
 800e3e2:	b29a      	uxth	r2, r3
 800e3e4:	7bfb      	ldrb	r3, [r7, #15]
 800e3e6:	b29b      	uxth	r3, r3
 800e3e8:	1ad3      	subs	r3, r2, r3
 800e3ea:	b298      	uxth	r0, r3
 800e3ec:	7bfb      	ldrb	r3, [r7, #15]
 800e3ee:	b29a      	uxth	r2, r3
 800e3f0:	88bb      	ldrh	r3, [r7, #4]
 800e3f2:	4413      	add	r3, r2
 800e3f4:	b299      	uxth	r1, r3
 800e3f6:	7bfb      	ldrb	r3, [r7, #15]
 800e3f8:	b29b      	uxth	r3, r3
 800e3fa:	005b      	lsls	r3, r3, #1
 800e3fc:	b29b      	uxth	r3, r3
 800e3fe:	883a      	ldrh	r2, [r7, #0]
 800e400:	1ad3      	subs	r3, r2, r3
 800e402:	b29a      	uxth	r2, r3
 800e404:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e406:	f000 fa8d 	bl	800e924 <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 800e40a:	7bfb      	ldrb	r3, [r7, #15]
 800e40c:	3301      	adds	r3, #1
 800e40e:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 800e410:	e766      	b.n	800e2e0 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 800e412:	bf00      	nop
	// done
	return;
 800e414:	bf00      	nop
}
 800e416:	3714      	adds	r7, #20
 800e418:	46bd      	mov	sp, r7
 800e41a:	bd90      	pop	{r4, r7, pc}

0800e41c <ILI9341_Draw_Char>:
 *	@retval None
 *
 */

void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800e41c:	b590      	push	{r4, r7, lr}
 800e41e:	b089      	sub	sp, #36	; 0x24
 800e420:	af02      	add	r7, sp, #8
 800e422:	4604      	mov	r4, r0
 800e424:	4608      	mov	r0, r1
 800e426:	4611      	mov	r1, r2
 800e428:	461a      	mov	r2, r3
 800e42a:	4623      	mov	r3, r4
 800e42c:	71fb      	strb	r3, [r7, #7]
 800e42e:	4603      	mov	r3, r0
 800e430:	80bb      	strh	r3, [r7, #4]
 800e432:	460b      	mov	r3, r1
 800e434:	807b      	strh	r3, [r7, #2]
 800e436:	4613      	mov	r3, r2
 800e438:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 800e43a:	79fb      	ldrb	r3, [r7, #7]
 800e43c:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 800e43e:	7dfb      	ldrb	r3, [r7, #23]
 800e440:	2b1f      	cmp	r3, #31
 800e442:	d802      	bhi.n	800e44a <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 800e444:	2300      	movs	r3, #0
 800e446:	71fb      	strb	r3, [r7, #7]
 800e448:	e002      	b.n	800e450 <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 800e44a:	7dfb      	ldrb	r3, [r7, #23]
 800e44c:	3b20      	subs	r3, #32
 800e44e:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800e450:	2300      	movs	r3, #0
 800e452:	753b      	strb	r3, [r7, #20]
 800e454:	e012      	b.n	800e47c <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 800e456:	7dfa      	ldrb	r2, [r7, #23]
 800e458:	7d38      	ldrb	r0, [r7, #20]
 800e45a:	7d39      	ldrb	r1, [r7, #20]
 800e45c:	4c48      	ldr	r4, [pc, #288]	; (800e580 <ILI9341_Draw_Char+0x164>)
 800e45e:	4613      	mov	r3, r2
 800e460:	005b      	lsls	r3, r3, #1
 800e462:	4413      	add	r3, r2
 800e464:	005b      	lsls	r3, r3, #1
 800e466:	4423      	add	r3, r4
 800e468:	4403      	add	r3, r0
 800e46a:	781a      	ldrb	r2, [r3, #0]
 800e46c:	f107 0318 	add.w	r3, r7, #24
 800e470:	440b      	add	r3, r1
 800e472:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800e476:	7d3b      	ldrb	r3, [r7, #20]
 800e478:	3301      	adds	r3, #1
 800e47a:	753b      	strb	r3, [r7, #20]
 800e47c:	7d3b      	ldrb	r3, [r7, #20]
 800e47e:	2b05      	cmp	r3, #5
 800e480:	d9e9      	bls.n	800e456 <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 800e482:	2300      	movs	r3, #0
 800e484:	757b      	strb	r3, [r7, #21]
 800e486:	e074      	b.n	800e572 <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 800e488:	2300      	movs	r3, #0
 800e48a:	75bb      	strb	r3, [r7, #22]
 800e48c:	e06b      	b.n	800e566 <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 800e48e:	7d7b      	ldrb	r3, [r7, #21]
 800e490:	f107 0218 	add.w	r2, r7, #24
 800e494:	4413      	add	r3, r2
 800e496:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800e49a:	461a      	mov	r2, r3
 800e49c:	7dbb      	ldrb	r3, [r7, #22]
 800e49e:	fa42 f303 	asr.w	r3, r2, r3
 800e4a2:	f003 0301 	and.w	r3, r3, #1
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d02d      	beq.n	800e506 <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 800e4aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e4ac:	2b01      	cmp	r3, #1
 800e4ae:	d10e      	bne.n	800e4ce <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 800e4b0:	7d7b      	ldrb	r3, [r7, #21]
 800e4b2:	b29a      	uxth	r2, r3
 800e4b4:	88bb      	ldrh	r3, [r7, #4]
 800e4b6:	4413      	add	r3, r2
 800e4b8:	b298      	uxth	r0, r3
 800e4ba:	7dbb      	ldrb	r3, [r7, #22]
 800e4bc:	b29a      	uxth	r2, r3
 800e4be:	887b      	ldrh	r3, [r7, #2]
 800e4c0:	4413      	add	r3, r2
 800e4c2:	b29b      	uxth	r3, r3
 800e4c4:	883a      	ldrh	r2, [r7, #0]
 800e4c6:	4619      	mov	r1, r3
 800e4c8:	f000 fb06 	bl	800ead8 <ILI9341_Draw_Pixel>
 800e4cc:	e048      	b.n	800e560 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 800e4ce:	7d7b      	ldrb	r3, [r7, #21]
 800e4d0:	b29b      	uxth	r3, r3
 800e4d2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e4d4:	fb12 f303 	smulbb	r3, r2, r3
 800e4d8:	b29a      	uxth	r2, r3
 800e4da:	88bb      	ldrh	r3, [r7, #4]
 800e4dc:	4413      	add	r3, r2
 800e4de:	b298      	uxth	r0, r3
 800e4e0:	7dbb      	ldrb	r3, [r7, #22]
 800e4e2:	b29b      	uxth	r3, r3
 800e4e4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e4e6:	fb12 f303 	smulbb	r3, r2, r3
 800e4ea:	b29a      	uxth	r2, r3
 800e4ec:	887b      	ldrh	r3, [r7, #2]
 800e4ee:	4413      	add	r3, r2
 800e4f0:	b299      	uxth	r1, r3
 800e4f2:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800e4f4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e4f6:	2301      	movs	r3, #1
 800e4f8:	9301      	str	r3, [sp, #4]
 800e4fa:	883b      	ldrh	r3, [r7, #0]
 800e4fc:	9300      	str	r3, [sp, #0]
 800e4fe:	4623      	mov	r3, r4
 800e500:	f000 fc44 	bl	800ed8c <ILI9341_Draw_Rectangle>
 800e504:	e02c      	b.n	800e560 <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 800e506:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e508:	2b01      	cmp	r3, #1
 800e50a:	d10e      	bne.n	800e52a <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 800e50c:	7d7b      	ldrb	r3, [r7, #21]
 800e50e:	b29a      	uxth	r2, r3
 800e510:	88bb      	ldrh	r3, [r7, #4]
 800e512:	4413      	add	r3, r2
 800e514:	b298      	uxth	r0, r3
 800e516:	7dbb      	ldrb	r3, [r7, #22]
 800e518:	b29a      	uxth	r2, r3
 800e51a:	887b      	ldrh	r3, [r7, #2]
 800e51c:	4413      	add	r3, r2
 800e51e:	b29b      	uxth	r3, r3
 800e520:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800e522:	4619      	mov	r1, r3
 800e524:	f000 fad8 	bl	800ead8 <ILI9341_Draw_Pixel>
 800e528:	e01a      	b.n	800e560 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 800e52a:	7d7b      	ldrb	r3, [r7, #21]
 800e52c:	b29b      	uxth	r3, r3
 800e52e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e530:	fb12 f303 	smulbb	r3, r2, r3
 800e534:	b29a      	uxth	r2, r3
 800e536:	88bb      	ldrh	r3, [r7, #4]
 800e538:	4413      	add	r3, r2
 800e53a:	b298      	uxth	r0, r3
 800e53c:	7dbb      	ldrb	r3, [r7, #22]
 800e53e:	b29b      	uxth	r3, r3
 800e540:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e542:	fb12 f303 	smulbb	r3, r2, r3
 800e546:	b29a      	uxth	r2, r3
 800e548:	887b      	ldrh	r3, [r7, #2]
 800e54a:	4413      	add	r3, r2
 800e54c:	b299      	uxth	r1, r3
 800e54e:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800e550:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e552:	2301      	movs	r3, #1
 800e554:	9301      	str	r3, [sp, #4]
 800e556:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e558:	9300      	str	r3, [sp, #0]
 800e55a:	4623      	mov	r3, r4
 800e55c:	f000 fc16 	bl	800ed8c <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 800e560:	7dbb      	ldrb	r3, [r7, #22]
 800e562:	3301      	adds	r3, #1
 800e564:	75bb      	strb	r3, [r7, #22]
 800e566:	7dbb      	ldrb	r3, [r7, #22]
 800e568:	2b07      	cmp	r3, #7
 800e56a:	d990      	bls.n	800e48e <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 800e56c:	7d7b      	ldrb	r3, [r7, #21]
 800e56e:	3301      	adds	r3, #1
 800e570:	757b      	strb	r3, [r7, #21]
 800e572:	7d7b      	ldrb	r3, [r7, #21]
 800e574:	2b05      	cmp	r3, #5
 800e576:	d987      	bls.n	800e488 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 800e578:	bf00      	nop
 800e57a:	371c      	adds	r7, #28
 800e57c:	46bd      	mov	sp, r7
 800e57e:	bd90      	pop	{r4, r7, pc}
 800e580:	08014294 	.word	0x08014294

0800e584 <ILI9341_Draw_Text>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800e584:	b590      	push	{r4, r7, lr}
 800e586:	b087      	sub	sp, #28
 800e588:	af02      	add	r7, sp, #8
 800e58a:	60f8      	str	r0, [r7, #12]
 800e58c:	4608      	mov	r0, r1
 800e58e:	4611      	mov	r1, r2
 800e590:	461a      	mov	r2, r3
 800e592:	4603      	mov	r3, r0
 800e594:	817b      	strh	r3, [r7, #10]
 800e596:	460b      	mov	r3, r1
 800e598:	813b      	strh	r3, [r7, #8]
 800e59a:	4613      	mov	r3, r2
 800e59c:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Vertical_Line(x-1, y, CHAR_HEIGHT*size, bgcolour);
 800e59e:	897b      	ldrh	r3, [r7, #10]
 800e5a0:	3b01      	subs	r3, #1
 800e5a2:	b298      	uxth	r0, r3
 800e5a4:	8c3b      	ldrh	r3, [r7, #32]
 800e5a6:	00db      	lsls	r3, r3, #3
 800e5a8:	b29a      	uxth	r2, r3
 800e5aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e5ac:	8939      	ldrh	r1, [r7, #8]
 800e5ae:	f000 f9b9 	bl	800e924 <ILI9341_Draw_Vertical_Line>
    ILI9341_Draw_Vertical_Line(x-2, y, CHAR_HEIGHT*size, bgcolour);
 800e5b2:	897b      	ldrh	r3, [r7, #10]
 800e5b4:	3b02      	subs	r3, #2
 800e5b6:	b298      	uxth	r0, r3
 800e5b8:	8c3b      	ldrh	r3, [r7, #32]
 800e5ba:	00db      	lsls	r3, r3, #3
 800e5bc:	b29a      	uxth	r2, r3
 800e5be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e5c0:	8939      	ldrh	r1, [r7, #8]
 800e5c2:	f000 f9af 	bl	800e924 <ILI9341_Draw_Vertical_Line>

    while (*Text) {
 800e5c6:	e016      	b.n	800e5f6 <ILI9341_Draw_Text+0x72>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	1c5a      	adds	r2, r3, #1
 800e5cc:	60fa      	str	r2, [r7, #12]
 800e5ce:	7818      	ldrb	r0, [r3, #0]
 800e5d0:	88fc      	ldrh	r4, [r7, #6]
 800e5d2:	893a      	ldrh	r2, [r7, #8]
 800e5d4:	8979      	ldrh	r1, [r7, #10]
 800e5d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e5d8:	9301      	str	r3, [sp, #4]
 800e5da:	8c3b      	ldrh	r3, [r7, #32]
 800e5dc:	9300      	str	r3, [sp, #0]
 800e5de:	4623      	mov	r3, r4
 800e5e0:	f7ff ff1c 	bl	800e41c <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 800e5e4:	8c3b      	ldrh	r3, [r7, #32]
 800e5e6:	461a      	mov	r2, r3
 800e5e8:	0052      	lsls	r2, r2, #1
 800e5ea:	4413      	add	r3, r2
 800e5ec:	005b      	lsls	r3, r3, #1
 800e5ee:	b29a      	uxth	r2, r3
 800e5f0:	897b      	ldrh	r3, [r7, #10]
 800e5f2:	4413      	add	r3, r2
 800e5f4:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	781b      	ldrb	r3, [r3, #0]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d1e4      	bne.n	800e5c8 <ILI9341_Draw_Text+0x44>
    }


}
 800e5fe:	bf00      	nop
 800e600:	3714      	adds	r7, #20
 800e602:	46bd      	mov	sp, r7
 800e604:	bd90      	pop	{r4, r7, pc}

0800e606 <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 800e606:	b580      	push	{r7, lr}
 800e608:	af00      	add	r7, sp, #0

	_LCD_Enable();
 800e60a:	f000 fca3 	bl	800ef54 <_LCD_Enable>
	ILI9341_SPI_Init();
 800e60e:	f000 f907 	bl	800e820 <ILI9341_SPI_Init>
	_LCD_Reset();
 800e612:	f000 fcaf 	bl	800ef74 <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 800e616:	2001      	movs	r0, #1
 800e618:	f000 fd7a 	bl	800f110 <_LCD_SendCommand>
	HAL_Delay(2000);
 800e61c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800e620:	f7f9 fd90 	bl	8008144 <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 800e624:	20cb      	movs	r0, #203	; 0xcb
 800e626:	f000 fd73 	bl	800f110 <_LCD_SendCommand>
	_LCD_SendData(0x39);
 800e62a:	2039      	movs	r0, #57	; 0x39
 800e62c:	f000 fda2 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(0x2C);
 800e630:	202c      	movs	r0, #44	; 0x2c
 800e632:	f000 fd9f 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(0x00);
 800e636:	2000      	movs	r0, #0
 800e638:	f000 fd9c 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(0x34);
 800e63c:	2034      	movs	r0, #52	; 0x34
 800e63e:	f000 fd99 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(0x02);
 800e642:	2002      	movs	r0, #2
 800e644:	f000 fd96 	bl	800f174 <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 800e648:	20cf      	movs	r0, #207	; 0xcf
 800e64a:	f000 fd61 	bl	800f110 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800e64e:	2000      	movs	r0, #0
 800e650:	f000 fd90 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800e654:	20c1      	movs	r0, #193	; 0xc1
 800e656:	f000 fd8d 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(0x30);
 800e65a:	2030      	movs	r0, #48	; 0x30
 800e65c:	f000 fd8a 	bl	800f174 <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 800e660:	20e8      	movs	r0, #232	; 0xe8
 800e662:	f000 fd55 	bl	800f110 <_LCD_SendCommand>
	_LCD_SendData(0x85);
 800e666:	2085      	movs	r0, #133	; 0x85
 800e668:	f000 fd84 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(0x00);
 800e66c:	2000      	movs	r0, #0
 800e66e:	f000 fd81 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(0x78);
 800e672:	2078      	movs	r0, #120	; 0x78
 800e674:	f000 fd7e 	bl	800f174 <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 800e678:	20ea      	movs	r0, #234	; 0xea
 800e67a:	f000 fd49 	bl	800f110 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800e67e:	2000      	movs	r0, #0
 800e680:	f000 fd78 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(0x00);
 800e684:	2000      	movs	r0, #0
 800e686:	f000 fd75 	bl	800f174 <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 800e68a:	20ed      	movs	r0, #237	; 0xed
 800e68c:	f000 fd40 	bl	800f110 <_LCD_SendCommand>
	_LCD_SendData(0x64);
 800e690:	2064      	movs	r0, #100	; 0x64
 800e692:	f000 fd6f 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(0x03);
 800e696:	2003      	movs	r0, #3
 800e698:	f000 fd6c 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(0x12);
 800e69c:	2012      	movs	r0, #18
 800e69e:	f000 fd69 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(0x81);
 800e6a2:	2081      	movs	r0, #129	; 0x81
 800e6a4:	f000 fd66 	bl	800f174 <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 800e6a8:	20f7      	movs	r0, #247	; 0xf7
 800e6aa:	f000 fd31 	bl	800f110 <_LCD_SendCommand>
	_LCD_SendData(0x20);
 800e6ae:	2020      	movs	r0, #32
 800e6b0:	f000 fd60 	bl	800f174 <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 800e6b4:	20c0      	movs	r0, #192	; 0xc0
 800e6b6:	f000 fd2b 	bl	800f110 <_LCD_SendCommand>
	_LCD_SendData(0x23);
 800e6ba:	2023      	movs	r0, #35	; 0x23
 800e6bc:	f000 fd5a 	bl	800f174 <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 800e6c0:	20c1      	movs	r0, #193	; 0xc1
 800e6c2:	f000 fd25 	bl	800f110 <_LCD_SendCommand>
	_LCD_SendData(0x10);
 800e6c6:	2010      	movs	r0, #16
 800e6c8:	f000 fd54 	bl	800f174 <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 800e6cc:	20c5      	movs	r0, #197	; 0xc5
 800e6ce:	f000 fd1f 	bl	800f110 <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 800e6d2:	203e      	movs	r0, #62	; 0x3e
 800e6d4:	f000 fd4e 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(0x28);
 800e6d8:	2028      	movs	r0, #40	; 0x28
 800e6da:	f000 fd4b 	bl	800f174 <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 800e6de:	20c7      	movs	r0, #199	; 0xc7
 800e6e0:	f000 fd16 	bl	800f110 <_LCD_SendCommand>
	_LCD_SendData(0x86);
 800e6e4:	2086      	movs	r0, #134	; 0x86
 800e6e6:	f000 fd45 	bl	800f174 <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 800e6ea:	2036      	movs	r0, #54	; 0x36
 800e6ec:	f000 fd10 	bl	800f110 <_LCD_SendCommand>
	_LCD_SendData(0x48);
 800e6f0:	2048      	movs	r0, #72	; 0x48
 800e6f2:	f000 fd3f 	bl	800f174 <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 800e6f6:	203a      	movs	r0, #58	; 0x3a
 800e6f8:	f000 fd0a 	bl	800f110 <_LCD_SendCommand>
	_LCD_SendData(0x55);
 800e6fc:	2055      	movs	r0, #85	; 0x55
 800e6fe:	f000 fd39 	bl	800f174 <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 800e702:	20b1      	movs	r0, #177	; 0xb1
 800e704:	f000 fd04 	bl	800f110 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800e708:	2000      	movs	r0, #0
 800e70a:	f000 fd33 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(0x18);
 800e70e:	2018      	movs	r0, #24
 800e710:	f000 fd30 	bl	800f174 <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 800e714:	20b6      	movs	r0, #182	; 0xb6
 800e716:	f000 fcfb 	bl	800f110 <_LCD_SendCommand>
	_LCD_SendData(0x08);
 800e71a:	2008      	movs	r0, #8
 800e71c:	f000 fd2a 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(0x82);
 800e720:	2082      	movs	r0, #130	; 0x82
 800e722:	f000 fd27 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(0x27);
 800e726:	2027      	movs	r0, #39	; 0x27
 800e728:	f000 fd24 	bl	800f174 <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 800e72c:	20f2      	movs	r0, #242	; 0xf2
 800e72e:	f000 fcef 	bl	800f110 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800e732:	2000      	movs	r0, #0
 800e734:	f000 fd1e 	bl	800f174 <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 800e738:	2026      	movs	r0, #38	; 0x26
 800e73a:	f000 fce9 	bl	800f110 <_LCD_SendCommand>
	_LCD_SendData(0x01);
 800e73e:	2001      	movs	r0, #1
 800e740:	f000 fd18 	bl	800f174 <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 800e744:	20e0      	movs	r0, #224	; 0xe0
 800e746:	f000 fce3 	bl	800f110 <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 800e74a:	200f      	movs	r0, #15
 800e74c:	f000 fd12 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(0x31);
 800e750:	2031      	movs	r0, #49	; 0x31
 800e752:	f000 fd0f 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(0x2B);
 800e756:	202b      	movs	r0, #43	; 0x2b
 800e758:	f000 fd0c 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800e75c:	200c      	movs	r0, #12
 800e75e:	f000 fd09 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800e762:	200e      	movs	r0, #14
 800e764:	f000 fd06 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(0x08);
 800e768:	2008      	movs	r0, #8
 800e76a:	f000 fd03 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(0x4E);
 800e76e:	204e      	movs	r0, #78	; 0x4e
 800e770:	f000 fd00 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(0xF1);
 800e774:	20f1      	movs	r0, #241	; 0xf1
 800e776:	f000 fcfd 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(0x37);
 800e77a:	2037      	movs	r0, #55	; 0x37
 800e77c:	f000 fcfa 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(0x07);
 800e780:	2007      	movs	r0, #7
 800e782:	f000 fcf7 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(0x10);
 800e786:	2010      	movs	r0, #16
 800e788:	f000 fcf4 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(0x03);
 800e78c:	2003      	movs	r0, #3
 800e78e:	f000 fcf1 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800e792:	200e      	movs	r0, #14
 800e794:	f000 fcee 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(0x09);
 800e798:	2009      	movs	r0, #9
 800e79a:	f000 fceb 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(0x00);
 800e79e:	2000      	movs	r0, #0
 800e7a0:	f000 fce8 	bl	800f174 <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 800e7a4:	20e1      	movs	r0, #225	; 0xe1
 800e7a6:	f000 fcb3 	bl	800f110 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800e7aa:	2000      	movs	r0, #0
 800e7ac:	f000 fce2 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800e7b0:	200e      	movs	r0, #14
 800e7b2:	f000 fcdf 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(0x14);
 800e7b6:	2014      	movs	r0, #20
 800e7b8:	f000 fcdc 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(0x03);
 800e7bc:	2003      	movs	r0, #3
 800e7be:	f000 fcd9 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(0x11);
 800e7c2:	2011      	movs	r0, #17
 800e7c4:	f000 fcd6 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(0x07);
 800e7c8:	2007      	movs	r0, #7
 800e7ca:	f000 fcd3 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(0x31);
 800e7ce:	2031      	movs	r0, #49	; 0x31
 800e7d0:	f000 fcd0 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800e7d4:	20c1      	movs	r0, #193	; 0xc1
 800e7d6:	f000 fccd 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(0x48);
 800e7da:	2048      	movs	r0, #72	; 0x48
 800e7dc:	f000 fcca 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(0x08);
 800e7e0:	2008      	movs	r0, #8
 800e7e2:	f000 fcc7 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800e7e6:	200f      	movs	r0, #15
 800e7e8:	f000 fcc4 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800e7ec:	200c      	movs	r0, #12
 800e7ee:	f000 fcc1 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(0x31);
 800e7f2:	2031      	movs	r0, #49	; 0x31
 800e7f4:	f000 fcbe 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(0x36);
 800e7f8:	2036      	movs	r0, #54	; 0x36
 800e7fa:	f000 fcbb 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800e7fe:	200f      	movs	r0, #15
 800e800:	f000 fcb8 	bl	800f174 <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 800e804:	2011      	movs	r0, #17
 800e806:	f000 fc83 	bl	800f110 <_LCD_SendCommand>
	HAL_Delay(240);
 800e80a:	20f0      	movs	r0, #240	; 0xf0
 800e80c:	f7f9 fc9a 	bl	8008144 <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 800e810:	2029      	movs	r0, #41	; 0x29
 800e812:	f000 fc7d 	bl	800f110 <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800e816:	2000      	movs	r0, #0
 800e818:	f000 fb4e 	bl	800eeb8 <ILI9341_Set_Rotation>
}
 800e81c:	bf00      	nop
 800e81e:	bd80      	pop	{r7, pc}

0800e820 <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 800e820:	b480      	push	{r7}
 800e822:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e824:	4b0b      	ldr	r3, [pc, #44]	; (800e854 <ILI9341_SPI_Init+0x34>)
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e82c:	2b40      	cmp	r3, #64	; 0x40
 800e82e:	d005      	beq.n	800e83c <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 800e830:	4b08      	ldr	r3, [pc, #32]	; (800e854 <ILI9341_SPI_Init+0x34>)
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	4a07      	ldr	r2, [pc, #28]	; (800e854 <ILI9341_SPI_Init+0x34>)
 800e836:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e83a:	6013      	str	r3, [r2, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e83c:	4b06      	ldr	r3, [pc, #24]	; (800e858 <ILI9341_SPI_Init+0x38>)
 800e83e:	695b      	ldr	r3, [r3, #20]
 800e840:	4a05      	ldr	r2, [pc, #20]	; (800e858 <ILI9341_SPI_Init+0x38>)
 800e842:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e846:	6153      	str	r3, [r2, #20]
}
 800e848:	bf00      	nop
 800e84a:	46bd      	mov	sp, r7
 800e84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e850:	4770      	bx	lr
 800e852:	bf00      	nop
 800e854:	40003c00 	.word	0x40003c00
 800e858:	48000400 	.word	0x48000400

0800e85c <ILI9341_Draw_Horizontal_Line>:
 *	Draw horizontal line
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 800e85c:	b590      	push	{r4, r7, lr}
 800e85e:	b087      	sub	sp, #28
 800e860:	af02      	add	r7, sp, #8
 800e862:	4604      	mov	r4, r0
 800e864:	4608      	mov	r0, r1
 800e866:	4611      	mov	r1, r2
 800e868:	461a      	mov	r2, r3
 800e86a:	4623      	mov	r3, r4
 800e86c:	80fb      	strh	r3, [r7, #6]
 800e86e:	4603      	mov	r3, r0
 800e870:	80bb      	strh	r3, [r7, #4]
 800e872:	460b      	mov	r3, r1
 800e874:	807b      	strh	r3, [r7, #2]
 800e876:	4613      	mov	r3, r2
 800e878:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800e87a:	4b28      	ldr	r3, [pc, #160]	; (800e91c <ILI9341_Draw_Horizontal_Line+0xc0>)
 800e87c:	881b      	ldrh	r3, [r3, #0]
 800e87e:	b29b      	uxth	r3, r3
 800e880:	88fa      	ldrh	r2, [r7, #6]
 800e882:	429a      	cmp	r2, r3
 800e884:	d246      	bcs.n	800e914 <ILI9341_Draw_Horizontal_Line+0xb8>
 800e886:	4b26      	ldr	r3, [pc, #152]	; (800e920 <ILI9341_Draw_Horizontal_Line+0xc4>)
 800e888:	881b      	ldrh	r3, [r3, #0]
 800e88a:	b29b      	uxth	r3, r3
 800e88c:	88ba      	ldrh	r2, [r7, #4]
 800e88e:	429a      	cmp	r2, r3
 800e890:	d240      	bcs.n	800e914 <ILI9341_Draw_Horizontal_Line+0xb8>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 800e892:	88fa      	ldrh	r2, [r7, #6]
 800e894:	887b      	ldrh	r3, [r7, #2]
 800e896:	4413      	add	r3, r2
 800e898:	3b01      	subs	r3, #1
 800e89a:	4a20      	ldr	r2, [pc, #128]	; (800e91c <ILI9341_Draw_Horizontal_Line+0xc0>)
 800e89c:	8812      	ldrh	r2, [r2, #0]
 800e89e:	b292      	uxth	r2, r2
 800e8a0:	4293      	cmp	r3, r2
 800e8a2:	db05      	blt.n	800e8b0 <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 800e8a4:	4b1d      	ldr	r3, [pc, #116]	; (800e91c <ILI9341_Draw_Horizontal_Line+0xc0>)
 800e8a6:	881b      	ldrh	r3, [r3, #0]
 800e8a8:	b29a      	uxth	r2, r3
 800e8aa:	88fb      	ldrh	r3, [r7, #6]
 800e8ac:	1ad3      	subs	r3, r2, r3
 800e8ae:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(	xpos,
							ypos,
							(xpos + width) - 1,
 800e8b0:	88fa      	ldrh	r2, [r7, #6]
 800e8b2:	887b      	ldrh	r3, [r7, #2]
 800e8b4:	4413      	add	r3, r2
 800e8b6:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800e8b8:	3b01      	subs	r3, #1
 800e8ba:	b29a      	uxth	r2, r3
 800e8bc:	88bb      	ldrh	r3, [r7, #4]
 800e8be:	88b9      	ldrh	r1, [r7, #4]
 800e8c0:	88f8      	ldrh	r0, [r7, #6]
 800e8c2:	f000 f893 	bl	800e9ec <ILI9341_Set_Frame>
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.


	uint8_t truncated = 0;
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	73fb      	strb	r3, [r7, #15]

	if((width & 1) && (width > 1))		// don't round down to zero!
 800e8ca:	887b      	ldrh	r3, [r7, #2]
 800e8cc:	f003 0301 	and.w	r3, r3, #1
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d009      	beq.n	800e8e8 <ILI9341_Draw_Horizontal_Line+0x8c>
 800e8d4:	887b      	ldrh	r3, [r7, #2]
 800e8d6:	2b01      	cmp	r3, #1
 800e8d8:	d906      	bls.n	800e8e8 <ILI9341_Draw_Horizontal_Line+0x8c>
	{
		truncated = 1;
 800e8da:	2301      	movs	r3, #1
 800e8dc:	73fb      	strb	r3, [r7, #15]
		width = ((width >> 1) * 2);
 800e8de:	887b      	ldrh	r3, [r7, #2]
 800e8e0:	085b      	lsrs	r3, r3, #1
 800e8e2:	b29b      	uxth	r3, r3
 800e8e4:	005b      	lsls	r3, r3, #1
 800e8e6:	807b      	strh	r3, [r7, #2]
	}
	_LCD_Write_Frame(xpos, ypos, colour, width, LINE_CHUNK);
 800e8e8:	887c      	ldrh	r4, [r7, #2]
 800e8ea:	883a      	ldrh	r2, [r7, #0]
 800e8ec:	88b9      	ldrh	r1, [r7, #4]
 800e8ee:	88f8      	ldrh	r0, [r7, #6]
 800e8f0:	2303      	movs	r3, #3
 800e8f2:	9300      	str	r3, [sp, #0]
 800e8f4:	4623      	mov	r3, r4
 800e8f6:	f000 fb5b 	bl	800efb0 <_LCD_Write_Frame>
	//
//TODO
	// add the truncated pixel now
	if(truncated)
 800e8fa:	7bfb      	ldrb	r3, [r7, #15]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d00a      	beq.n	800e916 <ILI9341_Draw_Horizontal_Line+0xba>
	{
		ILI9341_Draw_Pixel(	(xpos + width),
 800e900:	88fa      	ldrh	r2, [r7, #6]
 800e902:	887b      	ldrh	r3, [r7, #2]
 800e904:	4413      	add	r3, r2
 800e906:	b29b      	uxth	r3, r3
 800e908:	883a      	ldrh	r2, [r7, #0]
 800e90a:	88b9      	ldrh	r1, [r7, #4]
 800e90c:	4618      	mov	r0, r3
 800e90e:	f000 f8e3 	bl	800ead8 <ILI9341_Draw_Pixel>
 800e912:	e000      	b.n	800e916 <ILI9341_Draw_Horizontal_Line+0xba>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800e914:	bf00      	nop
							(ypos),
							colour);
	}


}
 800e916:	3714      	adds	r7, #20
 800e918:	46bd      	mov	sp, r7
 800e91a:	bd90      	pop	{r4, r7, pc}
 800e91c:	20000c3e 	.word	0x20000c3e
 800e920:	20000c3c 	.word	0x20000c3c

0800e924 <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 800e924:	b590      	push	{r4, r7, lr}
 800e926:	b087      	sub	sp, #28
 800e928:	af02      	add	r7, sp, #8
 800e92a:	4604      	mov	r4, r0
 800e92c:	4608      	mov	r0, r1
 800e92e:	4611      	mov	r1, r2
 800e930:	461a      	mov	r2, r3
 800e932:	4623      	mov	r3, r4
 800e934:	80fb      	strh	r3, [r7, #6]
 800e936:	4603      	mov	r3, r0
 800e938:	80bb      	strh	r3, [r7, #4]
 800e93a:	460b      	mov	r3, r1
 800e93c:	807b      	strh	r3, [r7, #2]
 800e93e:	4613      	mov	r3, r2
 800e940:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800e942:	4b28      	ldr	r3, [pc, #160]	; (800e9e4 <ILI9341_Draw_Vertical_Line+0xc0>)
 800e944:	881b      	ldrh	r3, [r3, #0]
 800e946:	b29b      	uxth	r3, r3
 800e948:	88fa      	ldrh	r2, [r7, #6]
 800e94a:	429a      	cmp	r2, r3
 800e94c:	d246      	bcs.n	800e9dc <ILI9341_Draw_Vertical_Line+0xb8>
 800e94e:	4b26      	ldr	r3, [pc, #152]	; (800e9e8 <ILI9341_Draw_Vertical_Line+0xc4>)
 800e950:	881b      	ldrh	r3, [r3, #0]
 800e952:	b29b      	uxth	r3, r3
 800e954:	88ba      	ldrh	r2, [r7, #4]
 800e956:	429a      	cmp	r2, r3
 800e958:	d240      	bcs.n	800e9dc <ILI9341_Draw_Vertical_Line+0xb8>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 800e95a:	88ba      	ldrh	r2, [r7, #4]
 800e95c:	887b      	ldrh	r3, [r7, #2]
 800e95e:	4413      	add	r3, r2
 800e960:	3b01      	subs	r3, #1
 800e962:	4a21      	ldr	r2, [pc, #132]	; (800e9e8 <ILI9341_Draw_Vertical_Line+0xc4>)
 800e964:	8812      	ldrh	r2, [r2, #0]
 800e966:	b292      	uxth	r2, r2
 800e968:	4293      	cmp	r3, r2
 800e96a:	db05      	blt.n	800e978 <ILI9341_Draw_Vertical_Line+0x54>
	{
		height= LCD_HEIGHT - ypos;
 800e96c:	4b1e      	ldr	r3, [pc, #120]	; (800e9e8 <ILI9341_Draw_Vertical_Line+0xc4>)
 800e96e:	881b      	ldrh	r3, [r3, #0]
 800e970:	b29a      	uxth	r2, r3
 800e972:	88bb      	ldrh	r3, [r7, #4]
 800e974:	1ad3      	subs	r3, r2, r3
 800e976:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 800e978:	88ba      	ldrh	r2, [r7, #4]
 800e97a:	887b      	ldrh	r3, [r7, #2]
 800e97c:	4413      	add	r3, r2
 800e97e:	b29b      	uxth	r3, r3
 800e980:	3b01      	subs	r3, #1
 800e982:	b29b      	uxth	r3, r3
 800e984:	88fa      	ldrh	r2, [r7, #6]
 800e986:	88b9      	ldrh	r1, [r7, #4]
 800e988:	88f8      	ldrh	r0, [r7, #6]
 800e98a:	f000 f82f 	bl	800e9ec <ILI9341_Set_Frame>

	uint8_t truncated = 0;
 800e98e:	2300      	movs	r3, #0
 800e990:	73fb      	strb	r3, [r7, #15]

	if((height & 1) && (height > 1))		// don't round down to zero!
 800e992:	887b      	ldrh	r3, [r7, #2]
 800e994:	f003 0301 	and.w	r3, r3, #1
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d009      	beq.n	800e9b0 <ILI9341_Draw_Vertical_Line+0x8c>
 800e99c:	887b      	ldrh	r3, [r7, #2]
 800e99e:	2b01      	cmp	r3, #1
 800e9a0:	d906      	bls.n	800e9b0 <ILI9341_Draw_Vertical_Line+0x8c>
	{
		truncated = 1;
 800e9a2:	2301      	movs	r3, #1
 800e9a4:	73fb      	strb	r3, [r7, #15]
		height = ((height >> 1) * 2);
 800e9a6:	887b      	ldrh	r3, [r7, #2]
 800e9a8:	085b      	lsrs	r3, r3, #1
 800e9aa:	b29b      	uxth	r3, r3
 800e9ac:	005b      	lsls	r3, r3, #1
 800e9ae:	807b      	strh	r3, [r7, #2]
//TODO


	//

	if(truncated)
 800e9b0:	7bfb      	ldrb	r3, [r7, #15]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d008      	beq.n	800e9c8 <ILI9341_Draw_Vertical_Line+0xa4>
	{
		ILI9341_Draw_Pixel(	(xpos),
 800e9b6:	88ba      	ldrh	r2, [r7, #4]
 800e9b8:	887b      	ldrh	r3, [r7, #2]
 800e9ba:	4413      	add	r3, r2
 800e9bc:	b299      	uxth	r1, r3
 800e9be:	883a      	ldrh	r2, [r7, #0]
 800e9c0:	88fb      	ldrh	r3, [r7, #6]
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	f000 f888 	bl	800ead8 <ILI9341_Draw_Pixel>
							(ypos + height),
							colour);
	}

	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 800e9c8:	887c      	ldrh	r4, [r7, #2]
 800e9ca:	883a      	ldrh	r2, [r7, #0]
 800e9cc:	88b9      	ldrh	r1, [r7, #4]
 800e9ce:	88f8      	ldrh	r0, [r7, #6]
 800e9d0:	2303      	movs	r3, #3
 800e9d2:	9300      	str	r3, [sp, #0]
 800e9d4:	4623      	mov	r3, r4
 800e9d6:	f000 faeb 	bl	800efb0 <_LCD_Write_Frame>
 800e9da:	e000      	b.n	800e9de <ILI9341_Draw_Vertical_Line+0xba>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800e9dc:	bf00      	nop
}
 800e9de:	3714      	adds	r7, #20
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	bd90      	pop	{r4, r7, pc}
 800e9e4:	20000c3e 	.word	0x20000c3e
 800e9e8:	20000c3c 	.word	0x20000c3c

0800e9ec <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 800e9ec:	b590      	push	{r4, r7, lr}
 800e9ee:	b083      	sub	sp, #12
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	4604      	mov	r4, r0
 800e9f4:	4608      	mov	r0, r1
 800e9f6:	4611      	mov	r1, r2
 800e9f8:	461a      	mov	r2, r3
 800e9fa:	4623      	mov	r3, r4
 800e9fc:	80fb      	strh	r3, [r7, #6]
 800e9fe:	4603      	mov	r3, r0
 800ea00:	80bb      	strh	r3, [r7, #4]
 800ea02:	460b      	mov	r3, r1
 800ea04:	807b      	strh	r3, [r7, #2]
 800ea06:	4613      	mov	r3, r2
 800ea08:	803b      	strh	r3, [r7, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 800ea0a:	202a      	movs	r0, #42	; 0x2a
 800ea0c:	f000 fb80 	bl	800f110 <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 800ea10:	88fb      	ldrh	r3, [r7, #6]
 800ea12:	0a1b      	lsrs	r3, r3, #8
 800ea14:	b29b      	uxth	r3, r3
 800ea16:	b2db      	uxtb	r3, r3
 800ea18:	4618      	mov	r0, r3
 800ea1a:	f000 fbab 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(sc);
 800ea1e:	88fb      	ldrh	r3, [r7, #6]
 800ea20:	b2db      	uxtb	r3, r3
 800ea22:	4618      	mov	r0, r3
 800ea24:	f000 fba6 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 800ea28:	887b      	ldrh	r3, [r7, #2]
 800ea2a:	0a1b      	lsrs	r3, r3, #8
 800ea2c:	b29b      	uxth	r3, r3
 800ea2e:	b2db      	uxtb	r3, r3
 800ea30:	4618      	mov	r0, r3
 800ea32:	f000 fb9f 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(ec);
 800ea36:	887b      	ldrh	r3, [r7, #2]
 800ea38:	b2db      	uxtb	r3, r3
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	f000 fb9a 	bl	800f174 <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 800ea40:	202b      	movs	r0, #43	; 0x2b
 800ea42:	f000 fb65 	bl	800f110 <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 800ea46:	88bb      	ldrh	r3, [r7, #4]
 800ea48:	0a1b      	lsrs	r3, r3, #8
 800ea4a:	b29b      	uxth	r3, r3
 800ea4c:	b2db      	uxtb	r3, r3
 800ea4e:	4618      	mov	r0, r3
 800ea50:	f000 fb90 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(sp);
 800ea54:	88bb      	ldrh	r3, [r7, #4]
 800ea56:	b2db      	uxtb	r3, r3
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f000 fb8b 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 800ea5e:	883b      	ldrh	r3, [r7, #0]
 800ea60:	0a1b      	lsrs	r3, r3, #8
 800ea62:	b29b      	uxth	r3, r3
 800ea64:	b2db      	uxtb	r3, r3
 800ea66:	4618      	mov	r0, r3
 800ea68:	f000 fb84 	bl	800f174 <_LCD_SendData>
	_LCD_SendData(ep);
 800ea6c:	883b      	ldrh	r3, [r7, #0]
 800ea6e:	b2db      	uxtb	r3, r3
 800ea70:	4618      	mov	r0, r3
 800ea72:	f000 fb7f 	bl	800f174 <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 800ea76:	202c      	movs	r0, #44	; 0x2c
 800ea78:	f000 fb4a 	bl	800f110 <_LCD_SendCommand>
}
 800ea7c:	bf00      	nop
 800ea7e:	370c      	adds	r7, #12
 800ea80:	46bd      	mov	sp, r7
 800ea82:	bd90      	pop	{r4, r7, pc}

0800ea84 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b084      	sub	sp, #16
 800ea88:	af02      	add	r7, sp, #8
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 800ea8e:	4b10      	ldr	r3, [pc, #64]	; (800ead0 <ILI9341_Fill_Screen+0x4c>)
 800ea90:	881b      	ldrh	r3, [r3, #0]
 800ea92:	b29a      	uxth	r2, r3
 800ea94:	4b0f      	ldr	r3, [pc, #60]	; (800ead4 <ILI9341_Fill_Screen+0x50>)
 800ea96:	881b      	ldrh	r3, [r3, #0]
 800ea98:	b29b      	uxth	r3, r3
 800ea9a:	2100      	movs	r1, #0
 800ea9c:	2000      	movs	r0, #0
 800ea9e:	f7ff ffa5 	bl	800e9ec <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 800eaa2:	4b0b      	ldr	r3, [pc, #44]	; (800ead0 <ILI9341_Fill_Screen+0x4c>)
 800eaa4:	881b      	ldrh	r3, [r3, #0]
 800eaa6:	b29b      	uxth	r3, r3
 800eaa8:	461a      	mov	r2, r3
 800eaaa:	4b0a      	ldr	r3, [pc, #40]	; (800ead4 <ILI9341_Fill_Screen+0x50>)
 800eaac:	881b      	ldrh	r3, [r3, #0]
 800eaae:	b29b      	uxth	r3, r3
 800eab0:	fb03 f302 	mul.w	r3, r3, r2
 800eab4:	4619      	mov	r1, r3
 800eab6:	88fa      	ldrh	r2, [r7, #6]
 800eab8:	2304      	movs	r3, #4
 800eaba:	9300      	str	r3, [sp, #0]
 800eabc:	460b      	mov	r3, r1
 800eabe:	2100      	movs	r1, #0
 800eac0:	2000      	movs	r0, #0
 800eac2:	f000 fa75 	bl	800efb0 <_LCD_Write_Frame>
}
 800eac6:	bf00      	nop
 800eac8:	3708      	adds	r7, #8
 800eaca:	46bd      	mov	sp, r7
 800eacc:	bd80      	pop	{r7, pc}
 800eace:	bf00      	nop
 800ead0:	20000c3e 	.word	0x20000c3e
 800ead4:	20000c3c 	.word	0x20000c3c

0800ead8 <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b08e      	sub	sp, #56	; 0x38
 800eadc:	af00      	add	r7, sp, #0
 800eade:	4603      	mov	r3, r0
 800eae0:	80fb      	strh	r3, [r7, #6]
 800eae2:	460b      	mov	r3, r1
 800eae4:	80bb      	strh	r3, [r7, #4]
 800eae6:	4613      	mov	r3, r2
 800eae8:	807b      	strh	r3, [r7, #2]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800eaea:	4b98      	ldr	r3, [pc, #608]	; (800ed4c <ILI9341_Draw_Pixel+0x274>)
 800eaec:	881b      	ldrh	r3, [r3, #0]
 800eaee:	b29b      	uxth	r3, r3
 800eaf0:	88fa      	ldrh	r2, [r7, #6]
 800eaf2:	429a      	cmp	r2, r3
 800eaf4:	f080 8143 	bcs.w	800ed7e <ILI9341_Draw_Pixel+0x2a6>
 800eaf8:	4b95      	ldr	r3, [pc, #596]	; (800ed50 <ILI9341_Draw_Pixel+0x278>)
 800eafa:	881b      	ldrh	r3, [r3, #0]
 800eafc:	b29b      	uxth	r3, r3
 800eafe:	88ba      	ldrh	r2, [r7, #4]
 800eb00:	429a      	cmp	r2, r3
 800eb02:	f080 813c 	bcs.w	800ed7e <ILI9341_Draw_Pixel+0x2a6>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800eb06:	4b93      	ldr	r3, [pc, #588]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800eb08:	695b      	ldr	r3, [r3, #20]
 800eb0a:	4a92      	ldr	r2, [pc, #584]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800eb0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eb10:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800eb12:	4b90      	ldr	r3, [pc, #576]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800eb14:	695b      	ldr	r3, [r3, #20]
 800eb16:	4a8f      	ldr	r2, [pc, #572]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800eb18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eb1c:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2A, 0, 10);
 800eb1e:	220a      	movs	r2, #10
 800eb20:	2100      	movs	r1, #0
 800eb22:	202a      	movs	r0, #42	; 0x2a
 800eb24:	f000 fb58 	bl	800f1d8 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800eb28:	2300      	movs	r3, #0
 800eb2a:	637b      	str	r3, [r7, #52]	; 0x34
 800eb2c:	e008      	b.n	800eb40 <ILI9341_Draw_Pixel+0x68>
 800eb2e:	4b89      	ldr	r3, [pc, #548]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800eb30:	695b      	ldr	r3, [r3, #20]
 800eb32:	4a88      	ldr	r2, [pc, #544]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800eb34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eb38:	6153      	str	r3, [r2, #20]
 800eb3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb3c:	3301      	adds	r3, #1
 800eb3e:	637b      	str	r3, [r7, #52]	; 0x34
 800eb40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb42:	2b02      	cmp	r3, #2
 800eb44:	ddf3      	ble.n	800eb2e <ILI9341_Draw_Pixel+0x56>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800eb46:	4b83      	ldr	r3, [pc, #524]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800eb48:	695b      	ldr	r3, [r3, #20]
 800eb4a:	4a82      	ldr	r2, [pc, #520]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800eb4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb50:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800eb52:	4b80      	ldr	r3, [pc, #512]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800eb54:	695b      	ldr	r3, [r3, #20]
 800eb56:	4a7f      	ldr	r2, [pc, #508]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800eb58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb5c:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800eb5e:	4b7d      	ldr	r3, [pc, #500]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800eb60:	695b      	ldr	r3, [r3, #20]
 800eb62:	4a7c      	ldr	r2, [pc, #496]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800eb64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eb68:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] = { x >> 8, x, (x + 1) >> 8, (x + 1) };
 800eb6a:	88fb      	ldrh	r3, [r7, #6]
 800eb6c:	0a1b      	lsrs	r3, r3, #8
 800eb6e:	b29b      	uxth	r3, r3
 800eb70:	b2db      	uxtb	r3, r3
 800eb72:	753b      	strb	r3, [r7, #20]
 800eb74:	88fb      	ldrh	r3, [r7, #6]
 800eb76:	b2db      	uxtb	r3, r3
 800eb78:	757b      	strb	r3, [r7, #21]
 800eb7a:	88fb      	ldrh	r3, [r7, #6]
 800eb7c:	3301      	adds	r3, #1
 800eb7e:	121b      	asrs	r3, r3, #8
 800eb80:	b2db      	uxtb	r3, r3
 800eb82:	75bb      	strb	r3, [r7, #22]
 800eb84:	88fb      	ldrh	r3, [r7, #6]
 800eb86:	b2db      	uxtb	r3, r3
 800eb88:	3301      	adds	r3, #1
 800eb8a:	b2db      	uxtb	r3, r3
 800eb8c:	75fb      	strb	r3, [r7, #23]
	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 800eb8e:	f107 0014 	add.w	r0, r7, #20
 800eb92:	230a      	movs	r3, #10
 800eb94:	2200      	movs	r2, #0
 800eb96:	2104      	movs	r1, #4
 800eb98:	f000 fb50 	bl	800f23c <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	633b      	str	r3, [r7, #48]	; 0x30
 800eba0:	e008      	b.n	800ebb4 <ILI9341_Draw_Pixel+0xdc>
 800eba2:	4b6c      	ldr	r3, [pc, #432]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800eba4:	695b      	ldr	r3, [r3, #20]
 800eba6:	4a6b      	ldr	r2, [pc, #428]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800eba8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ebac:	6153      	str	r3, [r2, #20]
 800ebae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebb0:	3301      	adds	r3, #1
 800ebb2:	633b      	str	r3, [r7, #48]	; 0x30
 800ebb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebb6:	2b02      	cmp	r3, #2
 800ebb8:	ddf3      	ble.n	800eba2 <ILI9341_Draw_Pixel+0xca>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800ebba:	4b66      	ldr	r3, [pc, #408]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800ebbc:	695b      	ldr	r3, [r3, #20]
 800ebbe:	4a65      	ldr	r2, [pc, #404]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800ebc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ebc4:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800ebc6:	4b63      	ldr	r3, [pc, #396]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800ebc8:	695b      	ldr	r3, [r3, #20]
 800ebca:	4a62      	ldr	r2, [pc, #392]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800ebcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ebd0:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ebd2:	4b60      	ldr	r3, [pc, #384]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800ebd4:	695b      	ldr	r3, [r3, #20]
 800ebd6:	4a5f      	ldr	r2, [pc, #380]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800ebd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ebdc:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2B, 0, 10);
 800ebde:	220a      	movs	r2, #10
 800ebe0:	2100      	movs	r1, #0
 800ebe2:	202b      	movs	r0, #43	; 0x2b
 800ebe4:	f000 faf8 	bl	800f1d8 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ebe8:	2300      	movs	r3, #0
 800ebea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ebec:	e008      	b.n	800ec00 <ILI9341_Draw_Pixel+0x128>
 800ebee:	4b59      	ldr	r3, [pc, #356]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800ebf0:	695b      	ldr	r3, [r3, #20]
 800ebf2:	4a58      	ldr	r2, [pc, #352]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800ebf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ebf8:	6153      	str	r3, [r2, #20]
 800ebfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebfc:	3301      	adds	r3, #1
 800ebfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ec00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec02:	2b02      	cmp	r3, #2
 800ec04:	ddf3      	ble.n	800ebee <ILI9341_Draw_Pixel+0x116>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800ec06:	4b53      	ldr	r3, [pc, #332]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800ec08:	695b      	ldr	r3, [r3, #20]
 800ec0a:	4a52      	ldr	r2, [pc, #328]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800ec0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec10:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800ec12:	4b50      	ldr	r3, [pc, #320]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800ec14:	695b      	ldr	r3, [r3, #20]
 800ec16:	4a4f      	ldr	r2, [pc, #316]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800ec18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec1c:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ec1e:	4b4d      	ldr	r3, [pc, #308]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800ec20:	695b      	ldr	r3, [r3, #20]
 800ec22:	4a4c      	ldr	r2, [pc, #304]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800ec24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ec28:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] = { y >> 8, y, (y + 1) >> 8, (y + 1) };
 800ec2a:	88bb      	ldrh	r3, [r7, #4]
 800ec2c:	0a1b      	lsrs	r3, r3, #8
 800ec2e:	b29b      	uxth	r3, r3
 800ec30:	b2db      	uxtb	r3, r3
 800ec32:	743b      	strb	r3, [r7, #16]
 800ec34:	88bb      	ldrh	r3, [r7, #4]
 800ec36:	b2db      	uxtb	r3, r3
 800ec38:	747b      	strb	r3, [r7, #17]
 800ec3a:	88bb      	ldrh	r3, [r7, #4]
 800ec3c:	3301      	adds	r3, #1
 800ec3e:	121b      	asrs	r3, r3, #8
 800ec40:	b2db      	uxtb	r3, r3
 800ec42:	74bb      	strb	r3, [r7, #18]
 800ec44:	88bb      	ldrh	r3, [r7, #4]
 800ec46:	b2db      	uxtb	r3, r3
 800ec48:	3301      	adds	r3, #1
 800ec4a:	b2db      	uxtb	r3, r3
 800ec4c:	74fb      	strb	r3, [r7, #19]
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 800ec4e:	f107 0010 	add.w	r0, r7, #16
 800ec52:	230a      	movs	r3, #10
 800ec54:	2200      	movs	r2, #0
 800ec56:	2104      	movs	r1, #4
 800ec58:	f000 faf0 	bl	800f23c <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ec60:	e008      	b.n	800ec74 <ILI9341_Draw_Pixel+0x19c>
 800ec62:	4b3c      	ldr	r3, [pc, #240]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800ec64:	695b      	ldr	r3, [r3, #20]
 800ec66:	4a3b      	ldr	r2, [pc, #236]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800ec68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ec6c:	6153      	str	r3, [r2, #20]
 800ec6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec70:	3301      	adds	r3, #1
 800ec72:	62bb      	str	r3, [r7, #40]	; 0x28
 800ec74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec76:	2b02      	cmp	r3, #2
 800ec78:	ddf3      	ble.n	800ec62 <ILI9341_Draw_Pixel+0x18a>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800ec7a:	4b36      	ldr	r3, [pc, #216]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800ec7c:	695b      	ldr	r3, [r3, #20]
 800ec7e:	4a35      	ldr	r2, [pc, #212]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800ec80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec84:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800ec86:	4b33      	ldr	r3, [pc, #204]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800ec88:	695b      	ldr	r3, [r3, #20]
 800ec8a:	4a32      	ldr	r2, [pc, #200]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800ec8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec90:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ec92:	4b30      	ldr	r3, [pc, #192]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800ec94:	695b      	ldr	r3, [r3, #20]
 800ec96:	4a2f      	ldr	r2, [pc, #188]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800ec98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ec9c:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2C, 0, 10);
 800ec9e:	220a      	movs	r2, #10
 800eca0:	2100      	movs	r1, #0
 800eca2:	202c      	movs	r0, #44	; 0x2c
 800eca4:	f000 fa98 	bl	800f1d8 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800eca8:	2300      	movs	r3, #0
 800ecaa:	627b      	str	r3, [r7, #36]	; 0x24
 800ecac:	e008      	b.n	800ecc0 <ILI9341_Draw_Pixel+0x1e8>
 800ecae:	4b29      	ldr	r3, [pc, #164]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800ecb0:	695b      	ldr	r3, [r3, #20]
 800ecb2:	4a28      	ldr	r2, [pc, #160]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800ecb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ecb8:	6153      	str	r3, [r2, #20]
 800ecba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecbc:	3301      	adds	r3, #1
 800ecbe:	627b      	str	r3, [r7, #36]	; 0x24
 800ecc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecc2:	2b02      	cmp	r3, #2
 800ecc4:	ddf3      	ble.n	800ecae <ILI9341_Draw_Pixel+0x1d6>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800ecc6:	4b23      	ldr	r3, [pc, #140]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800ecc8:	695b      	ldr	r3, [r3, #20]
 800ecca:	4a22      	ldr	r2, [pc, #136]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800eccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ecd0:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800ecd2:	4b20      	ldr	r3, [pc, #128]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800ecd4:	695b      	ldr	r3, [r3, #20]
 800ecd6:	4a1f      	ldr	r2, [pc, #124]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800ecd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ecdc:	6153      	str	r3, [r2, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ecde:	4b1d      	ldr	r3, [pc, #116]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800ece0:	695b      	ldr	r3, [r3, #20]
 800ece2:	4a1c      	ldr	r2, [pc, #112]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800ece4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ece8:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 800ecea:	887b      	ldrh	r3, [r7, #2]
 800ecec:	0a1b      	lsrs	r3, r3, #8
 800ecee:	b29b      	uxth	r3, r3
 800ecf0:	b2db      	uxtb	r3, r3
 800ecf2:	733b      	strb	r3, [r7, #12]
 800ecf4:	887b      	ldrh	r3, [r7, #2]
 800ecf6:	b2db      	uxtb	r3, r3
 800ecf8:	737b      	strb	r3, [r7, #13]
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 2, 0, 1);
 800ecfa:	f107 000c 	add.w	r0, r7, #12
 800ecfe:	2301      	movs	r3, #1
 800ed00:	2200      	movs	r2, #0
 800ed02:	2102      	movs	r1, #2
 800ed04:	f000 fa9a 	bl	800f23c <_SPI_SendByteMultiByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ed08:	2300      	movs	r3, #0
 800ed0a:	623b      	str	r3, [r7, #32]
 800ed0c:	e008      	b.n	800ed20 <ILI9341_Draw_Pixel+0x248>
 800ed0e:	4b11      	ldr	r3, [pc, #68]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800ed10:	695b      	ldr	r3, [r3, #20]
 800ed12:	4a10      	ldr	r2, [pc, #64]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800ed14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ed18:	6153      	str	r3, [r2, #20]
 800ed1a:	6a3b      	ldr	r3, [r7, #32]
 800ed1c:	3301      	adds	r3, #1
 800ed1e:	623b      	str	r3, [r7, #32]
 800ed20:	6a3b      	ldr	r3, [r7, #32]
 800ed22:	2b02      	cmp	r3, #2
 800ed24:	ddf3      	ble.n	800ed0e <ILI9341_Draw_Pixel+0x236>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ed26:	2300      	movs	r3, #0
 800ed28:	61fb      	str	r3, [r7, #28]
 800ed2a:	e008      	b.n	800ed3e <ILI9341_Draw_Pixel+0x266>
 800ed2c:	4b09      	ldr	r3, [pc, #36]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800ed2e:	695b      	ldr	r3, [r3, #20]
 800ed30:	4a08      	ldr	r2, [pc, #32]	; (800ed54 <ILI9341_Draw_Pixel+0x27c>)
 800ed32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ed36:	6153      	str	r3, [r2, #20]
 800ed38:	69fb      	ldr	r3, [r7, #28]
 800ed3a:	3301      	adds	r3, #1
 800ed3c:	61fb      	str	r3, [r7, #28]
 800ed3e:	69fb      	ldr	r3, [r7, #28]
 800ed40:	2b02      	cmp	r3, #2
 800ed42:	ddf3      	ble.n	800ed2c <ILI9341_Draw_Pixel+0x254>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ed44:	2300      	movs	r3, #0
 800ed46:	61bb      	str	r3, [r7, #24]
 800ed48:	e00f      	b.n	800ed6a <ILI9341_Draw_Pixel+0x292>
 800ed4a:	bf00      	nop
 800ed4c:	20000c3e 	.word	0x20000c3e
 800ed50:	20000c3c 	.word	0x20000c3c
 800ed54:	48000400 	.word	0x48000400
 800ed58:	4b0b      	ldr	r3, [pc, #44]	; (800ed88 <ILI9341_Draw_Pixel+0x2b0>)
 800ed5a:	695b      	ldr	r3, [r3, #20]
 800ed5c:	4a0a      	ldr	r2, [pc, #40]	; (800ed88 <ILI9341_Draw_Pixel+0x2b0>)
 800ed5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ed62:	6153      	str	r3, [r2, #20]
 800ed64:	69bb      	ldr	r3, [r7, #24]
 800ed66:	3301      	adds	r3, #1
 800ed68:	61bb      	str	r3, [r7, #24]
 800ed6a:	69bb      	ldr	r3, [r7, #24]
 800ed6c:	2b02      	cmp	r3, #2
 800ed6e:	ddf3      	ble.n	800ed58 <ILI9341_Draw_Pixel+0x280>


	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800ed70:	4b05      	ldr	r3, [pc, #20]	; (800ed88 <ILI9341_Draw_Pixel+0x2b0>)
 800ed72:	695b      	ldr	r3, [r3, #20]
 800ed74:	4a04      	ldr	r2, [pc, #16]	; (800ed88 <ILI9341_Draw_Pixel+0x2b0>)
 800ed76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed7a:	6153      	str	r3, [r2, #20]
 800ed7c:	e000      	b.n	800ed80 <ILI9341_Draw_Pixel+0x2a8>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800ed7e:	bf00      	nop


}
 800ed80:	3738      	adds	r7, #56	; 0x38
 800ed82:	46bd      	mov	sp, r7
 800ed84:	bd80      	pop	{r7, pc}
 800ed86:	bf00      	nop
 800ed88:	48000400 	.word	0x48000400

0800ed8c <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 800ed8c:	b590      	push	{r4, r7, lr}
 800ed8e:	b087      	sub	sp, #28
 800ed90:	af02      	add	r7, sp, #8
 800ed92:	4604      	mov	r4, r0
 800ed94:	4608      	mov	r0, r1
 800ed96:	4611      	mov	r1, r2
 800ed98:	461a      	mov	r2, r3
 800ed9a:	4623      	mov	r3, r4
 800ed9c:	80fb      	strh	r3, [r7, #6]
 800ed9e:	4603      	mov	r3, r0
 800eda0:	80bb      	strh	r3, [r7, #4]
 800eda2:	460b      	mov	r3, r1
 800eda4:	807b      	strh	r3, [r7, #2]
 800eda6:	4613      	mov	r3, r2
 800eda8:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800edaa:	4b41      	ldr	r3, [pc, #260]	; (800eeb0 <ILI9341_Draw_Rectangle+0x124>)
 800edac:	881b      	ldrh	r3, [r3, #0]
 800edae:	b29b      	uxth	r3, r3
 800edb0:	88fa      	ldrh	r2, [r7, #6]
 800edb2:	429a      	cmp	r2, r3
 800edb4:	d278      	bcs.n	800eea8 <ILI9341_Draw_Rectangle+0x11c>
 800edb6:	4b3f      	ldr	r3, [pc, #252]	; (800eeb4 <ILI9341_Draw_Rectangle+0x128>)
 800edb8:	881b      	ldrh	r3, [r3, #0]
 800edba:	b29b      	uxth	r3, r3
 800edbc:	88ba      	ldrh	r2, [r7, #4]
 800edbe:	429a      	cmp	r2, r3
 800edc0:	d272      	bcs.n	800eea8 <ILI9341_Draw_Rectangle+0x11c>
	if((xpos+width-1)>=LCD_WIDTH)
 800edc2:	88fa      	ldrh	r2, [r7, #6]
 800edc4:	887b      	ldrh	r3, [r7, #2]
 800edc6:	4413      	add	r3, r2
 800edc8:	3b01      	subs	r3, #1
 800edca:	4a39      	ldr	r2, [pc, #228]	; (800eeb0 <ILI9341_Draw_Rectangle+0x124>)
 800edcc:	8812      	ldrh	r2, [r2, #0]
 800edce:	b292      	uxth	r2, r2
 800edd0:	4293      	cmp	r3, r2
 800edd2:	db05      	blt.n	800ede0 <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 800edd4:	4b36      	ldr	r3, [pc, #216]	; (800eeb0 <ILI9341_Draw_Rectangle+0x124>)
 800edd6:	881b      	ldrh	r3, [r3, #0]
 800edd8:	b29a      	uxth	r2, r3
 800edda:	88fb      	ldrh	r3, [r7, #6]
 800eddc:	1ad3      	subs	r3, r2, r3
 800edde:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 800ede0:	88ba      	ldrh	r2, [r7, #4]
 800ede2:	883b      	ldrh	r3, [r7, #0]
 800ede4:	4413      	add	r3, r2
 800ede6:	3b01      	subs	r3, #1
 800ede8:	4a32      	ldr	r2, [pc, #200]	; (800eeb4 <ILI9341_Draw_Rectangle+0x128>)
 800edea:	8812      	ldrh	r2, [r2, #0]
 800edec:	b292      	uxth	r2, r2
 800edee:	4293      	cmp	r3, r2
 800edf0:	db05      	blt.n	800edfe <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 800edf2:	4b30      	ldr	r3, [pc, #192]	; (800eeb4 <ILI9341_Draw_Rectangle+0x128>)
 800edf4:	881b      	ldrh	r3, [r3, #0]
 800edf6:	b29a      	uxth	r2, r3
 800edf8:	88bb      	ldrh	r3, [r7, #4]
 800edfa:	1ad3      	subs	r3, r2, r3
 800edfc:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 800edfe:	88fa      	ldrh	r2, [r7, #6]
 800ee00:	887b      	ldrh	r3, [r7, #2]
 800ee02:	4413      	add	r3, r2
 800ee04:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800ee06:	3b01      	subs	r3, #1
 800ee08:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 800ee0a:	88ba      	ldrh	r2, [r7, #4]
 800ee0c:	883b      	ldrh	r3, [r7, #0]
 800ee0e:	4413      	add	r3, r2
 800ee10:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800ee12:	3b01      	subs	r3, #1
 800ee14:	b29b      	uxth	r3, r3
 800ee16:	88b9      	ldrh	r1, [r7, #4]
 800ee18:	88f8      	ldrh	r0, [r7, #6]
 800ee1a:	4622      	mov	r2, r4
 800ee1c:	f7ff fde6 	bl	800e9ec <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 800ee20:	883a      	ldrh	r2, [r7, #0]
 800ee22:	887b      	ldrh	r3, [r7, #2]
 800ee24:	fb12 f303 	smulbb	r3, r2, r3
 800ee28:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 800ee2e:	89fb      	ldrh	r3, [r7, #14]
 800ee30:	f003 0301 	and.w	r3, r3, #1
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d009      	beq.n	800ee4c <ILI9341_Draw_Rectangle+0xc0>
 800ee38:	89fb      	ldrh	r3, [r7, #14]
 800ee3a:	2b01      	cmp	r3, #1
 800ee3c:	d906      	bls.n	800ee4c <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 800ee3e:	2301      	movs	r3, #1
 800ee40:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 800ee42:	89fb      	ldrh	r3, [r7, #14]
 800ee44:	085b      	lsrs	r3, r3, #1
 800ee46:	b29b      	uxth	r3, r3
 800ee48:	005b      	lsls	r3, r3, #1
 800ee4a:	81fb      	strh	r3, [r7, #14]
	}

	_LCD_Write_Frame(	xpos,
 800ee4c:	89fc      	ldrh	r4, [r7, #14]
 800ee4e:	8c3a      	ldrh	r2, [r7, #32]
 800ee50:	88b9      	ldrh	r1, [r7, #4]
 800ee52:	88f8      	ldrh	r0, [r7, #6]
 800ee54:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ee58:	9300      	str	r3, [sp, #0]
 800ee5a:	4623      	mov	r3, r4
 800ee5c:	f000 f8a8 	bl	800efb0 <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 800ee60:	7b7b      	ldrb	r3, [r7, #13]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d021      	beq.n	800eeaa <ILI9341_Draw_Rectangle+0x11e>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 800ee66:	88fa      	ldrh	r2, [r7, #6]
 800ee68:	887b      	ldrh	r3, [r7, #2]
 800ee6a:	4413      	add	r3, r2
 800ee6c:	b29b      	uxth	r3, r3
 800ee6e:	3b02      	subs	r3, #2
 800ee70:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800ee72:	88ba      	ldrh	r2, [r7, #4]
 800ee74:	883b      	ldrh	r3, [r7, #0]
 800ee76:	4413      	add	r3, r2
 800ee78:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 800ee7a:	3b01      	subs	r3, #1
 800ee7c:	b29b      	uxth	r3, r3
 800ee7e:	8c3a      	ldrh	r2, [r7, #32]
 800ee80:	4619      	mov	r1, r3
 800ee82:	f7ff fe29 	bl	800ead8 <ILI9341_Draw_Pixel>
							colour);
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800ee86:	88fa      	ldrh	r2, [r7, #6]
 800ee88:	887b      	ldrh	r3, [r7, #2]
 800ee8a:	4413      	add	r3, r2
 800ee8c:	b29b      	uxth	r3, r3
 800ee8e:	3b01      	subs	r3, #1
 800ee90:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800ee92:	88ba      	ldrh	r2, [r7, #4]
 800ee94:	883b      	ldrh	r3, [r7, #0]
 800ee96:	4413      	add	r3, r2
 800ee98:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800ee9a:	3b01      	subs	r3, #1
 800ee9c:	b29b      	uxth	r3, r3
 800ee9e:	8c3a      	ldrh	r2, [r7, #32]
 800eea0:	4619      	mov	r1, r3
 800eea2:	f7ff fe19 	bl	800ead8 <ILI9341_Draw_Pixel>
 800eea6:	e000      	b.n	800eeaa <ILI9341_Draw_Rectangle+0x11e>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800eea8:	bf00      	nop
							colour);
	}
}
 800eeaa:	3714      	adds	r7, #20
 800eeac:	46bd      	mov	sp, r7
 800eeae:	bd90      	pop	{r4, r7, pc}
 800eeb0:	20000c3e 	.word	0x20000c3e
 800eeb4:	20000c3c 	.word	0x20000c3c

0800eeb8 <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b084      	sub	sp, #16
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	4603      	mov	r3, r0
 800eec0:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = rotation;
 800eec2:	79fb      	ldrb	r3, [r7, #7]
 800eec4:	73fb      	strb	r3, [r7, #15]

	_LCD_SendCommand(0x36);
 800eec6:	2036      	movs	r0, #54	; 0x36
 800eec8:	f000 f922 	bl	800f110 <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 800eecc:	7bfb      	ldrb	r3, [r7, #15]
 800eece:	2b03      	cmp	r3, #3
 800eed0:	d836      	bhi.n	800ef40 <ILI9341_Set_Rotation+0x88>
 800eed2:	a201      	add	r2, pc, #4	; (adr r2, 800eed8 <ILI9341_Set_Rotation+0x20>)
 800eed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eed8:	0800eee9 	.word	0x0800eee9
 800eedc:	0800eeff 	.word	0x0800eeff
 800eee0:	0800ef15 	.word	0x0800ef15
 800eee4:	0800ef2b 	.word	0x0800ef2b
	{
		case SCREEN_VERTICAL_1:
			_LCD_SendData(0x40|0x08);
 800eee8:	2048      	movs	r0, #72	; 0x48
 800eeea:	f000 f943 	bl	800f174 <_LCD_SendData>
			LCD_WIDTH = 240;
 800eeee:	4b17      	ldr	r3, [pc, #92]	; (800ef4c <ILI9341_Set_Rotation+0x94>)
 800eef0:	22f0      	movs	r2, #240	; 0xf0
 800eef2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800eef4:	4b16      	ldr	r3, [pc, #88]	; (800ef50 <ILI9341_Set_Rotation+0x98>)
 800eef6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800eefa:	801a      	strh	r2, [r3, #0]
			break;
 800eefc:	e021      	b.n	800ef42 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			_LCD_SendData(0x20|0x08);
 800eefe:	2028      	movs	r0, #40	; 0x28
 800ef00:	f000 f938 	bl	800f174 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800ef04:	4b11      	ldr	r3, [pc, #68]	; (800ef4c <ILI9341_Set_Rotation+0x94>)
 800ef06:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800ef0a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800ef0c:	4b10      	ldr	r3, [pc, #64]	; (800ef50 <ILI9341_Set_Rotation+0x98>)
 800ef0e:	22f0      	movs	r2, #240	; 0xf0
 800ef10:	801a      	strh	r2, [r3, #0]
			break;
 800ef12:	e016      	b.n	800ef42 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			_LCD_SendData(0x80|0x08);
 800ef14:	2088      	movs	r0, #136	; 0x88
 800ef16:	f000 f92d 	bl	800f174 <_LCD_SendData>
			LCD_WIDTH  = 240;
 800ef1a:	4b0c      	ldr	r3, [pc, #48]	; (800ef4c <ILI9341_Set_Rotation+0x94>)
 800ef1c:	22f0      	movs	r2, #240	; 0xf0
 800ef1e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800ef20:	4b0b      	ldr	r3, [pc, #44]	; (800ef50 <ILI9341_Set_Rotation+0x98>)
 800ef22:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800ef26:	801a      	strh	r2, [r3, #0]
			break;
 800ef28:	e00b      	b.n	800ef42 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			_LCD_SendData(0x40|0x80|0x20|0x08);
 800ef2a:	20e8      	movs	r0, #232	; 0xe8
 800ef2c:	f000 f922 	bl	800f174 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800ef30:	4b06      	ldr	r3, [pc, #24]	; (800ef4c <ILI9341_Set_Rotation+0x94>)
 800ef32:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800ef36:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800ef38:	4b05      	ldr	r3, [pc, #20]	; (800ef50 <ILI9341_Set_Rotation+0x98>)
 800ef3a:	22f0      	movs	r2, #240	; 0xf0
 800ef3c:	801a      	strh	r2, [r3, #0]
			break;
 800ef3e:	e000      	b.n	800ef42 <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800ef40:	bf00      	nop
	}
}
 800ef42:	bf00      	nop
 800ef44:	3710      	adds	r7, #16
 800ef46:	46bd      	mov	sp, r7
 800ef48:	bd80      	pop	{r7, pc}
 800ef4a:	bf00      	nop
 800ef4c:	20000c3e 	.word	0x20000c3e
 800ef50:	20000c3c 	.word	0x20000c3c

0800ef54 <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 800ef54:	b480      	push	{r7}
 800ef56:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800ef58:	4b05      	ldr	r3, [pc, #20]	; (800ef70 <_LCD_Enable+0x1c>)
 800ef5a:	695b      	ldr	r3, [r3, #20]
 800ef5c:	4a04      	ldr	r2, [pc, #16]	; (800ef70 <_LCD_Enable+0x1c>)
 800ef5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ef62:	6153      	str	r3, [r2, #20]
}
 800ef64:	bf00      	nop
 800ef66:	46bd      	mov	sp, r7
 800ef68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef6c:	4770      	bx	lr
 800ef6e:	bf00      	nop
 800ef70:	48000400 	.word	0x48000400

0800ef74 <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 800ef78:	4b0c      	ldr	r3, [pc, #48]	; (800efac <_LCD_Reset+0x38>)
 800ef7a:	695b      	ldr	r3, [r3, #20]
 800ef7c:	4a0b      	ldr	r2, [pc, #44]	; (800efac <_LCD_Reset+0x38>)
 800ef7e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ef82:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800ef84:	20c8      	movs	r0, #200	; 0xc8
 800ef86:	f7f9 f8dd 	bl	8008144 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ef8a:	4b08      	ldr	r3, [pc, #32]	; (800efac <_LCD_Reset+0x38>)
 800ef8c:	695b      	ldr	r3, [r3, #20]
 800ef8e:	4a07      	ldr	r2, [pc, #28]	; (800efac <_LCD_Reset+0x38>)
 800ef90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ef94:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800ef96:	20c8      	movs	r0, #200	; 0xc8
 800ef98:	f7f9 f8d4 	bl	8008144 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800ef9c:	4b03      	ldr	r3, [pc, #12]	; (800efac <_LCD_Reset+0x38>)
 800ef9e:	695b      	ldr	r3, [r3, #20]
 800efa0:	4a02      	ldr	r2, [pc, #8]	; (800efac <_LCD_Reset+0x38>)
 800efa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800efa6:	6153      	str	r3, [r2, #20]
}
 800efa8:	bf00      	nop
 800efaa:	bd80      	pop	{r7, pc}
 800efac:	48000400 	.word	0x48000400

0800efb0 <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 800efb0:	b5b0      	push	{r4, r5, r7, lr}
 800efb2:	b08e      	sub	sp, #56	; 0x38
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	607b      	str	r3, [r7, #4]
 800efb8:	4603      	mov	r3, r0
 800efba:	81fb      	strh	r3, [r7, #14]
 800efbc:	460b      	mov	r3, r1
 800efbe:	81bb      	strh	r3, [r7, #12]
 800efc0:	4613      	mov	r3, r2
 800efc2:	817b      	strh	r3, [r7, #10]
 800efc4:	466b      	mov	r3, sp
 800efc6:	461d      	mov	r5, r3

	uint32_t buffer_size = 0;
 800efc8:	2300      	movs	r3, #0
 800efca:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	005b      	lsls	r3, r3, #1
 800efd0:	4a4d      	ldr	r2, [pc, #308]	; (800f108 <_LCD_Write_Frame+0x158>)
 800efd2:	8812      	ldrh	r2, [r2, #0]
 800efd4:	4293      	cmp	r3, r2
 800efd6:	d202      	bcs.n	800efde <_LCD_Write_Frame+0x2e>
	{
		buffer_size = chunk_size;
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	62fb      	str	r3, [r7, #44]	; 0x2c
 800efdc:	e002      	b.n	800efe4 <_LCD_Write_Frame+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 800efde:	4b4a      	ldr	r3, [pc, #296]	; (800f108 <_LCD_Write_Frame+0x158>)
 800efe0:	881b      	ldrh	r3, [r3, #0]
 800efe2:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	unsigned char chifted = 	colour>>8;;
 800efe4:	897b      	ldrh	r3, [r7, #10]
 800efe6:	0a1b      	lsrs	r3, r3, #8
 800efe8:	b29b      	uxth	r3, r3
 800efea:	77fb      	strb	r3, [r7, #31]
	unsigned char burst_buffer[buffer_size];
 800efec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800efee:	4603      	mov	r3, r0
 800eff0:	3b01      	subs	r3, #1
 800eff2:	61bb      	str	r3, [r7, #24]
 800eff4:	4601      	mov	r1, r0
 800eff6:	f04f 0200 	mov.w	r2, #0
 800effa:	f04f 0300 	mov.w	r3, #0
 800effe:	f04f 0400 	mov.w	r4, #0
 800f002:	00d4      	lsls	r4, r2, #3
 800f004:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800f008:	00cb      	lsls	r3, r1, #3
 800f00a:	4601      	mov	r1, r0
 800f00c:	f04f 0200 	mov.w	r2, #0
 800f010:	f04f 0300 	mov.w	r3, #0
 800f014:	f04f 0400 	mov.w	r4, #0
 800f018:	00d4      	lsls	r4, r2, #3
 800f01a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800f01e:	00cb      	lsls	r3, r1, #3
 800f020:	1dc3      	adds	r3, r0, #7
 800f022:	08db      	lsrs	r3, r3, #3
 800f024:	00db      	lsls	r3, r3, #3
 800f026:	ebad 0d03 	sub.w	sp, sp, r3
 800f02a:	466b      	mov	r3, sp
 800f02c:	3300      	adds	r3, #0
 800f02e:	617b      	str	r3, [r7, #20]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800f030:	2300      	movs	r3, #0
 800f032:	633b      	str	r3, [r7, #48]	; 0x30
 800f034:	e00d      	b.n	800f052 <_LCD_Write_Frame+0xa2>
	{
			burst_buffer[j] = 	chifted;
 800f036:	697a      	ldr	r2, [r7, #20]
 800f038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f03a:	4413      	add	r3, r2
 800f03c:	7ffa      	ldrb	r2, [r7, #31]
 800f03e:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 800f040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f042:	3301      	adds	r3, #1
 800f044:	897a      	ldrh	r2, [r7, #10]
 800f046:	b2d1      	uxtb	r1, r2
 800f048:	697a      	ldr	r2, [r7, #20]
 800f04a:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800f04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f04e:	3302      	adds	r3, #2
 800f050:	633b      	str	r3, [r7, #48]	; 0x30
 800f052:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f056:	429a      	cmp	r2, r3
 800f058:	d3ed      	bcc.n	800f036 <_LCD_Write_Frame+0x86>
	}
	
	uint32_t Sending_size = chunk_size*2;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	005b      	lsls	r3, r3, #1
 800f05e:	613b      	str	r3, [r7, #16]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 800f060:	2301      	movs	r3, #1
 800f062:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 800f064:	2300      	movs	r3, #0
 800f066:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d00d      	beq.n	800f08a <_LCD_Write_Frame+0xda>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 800f06e:	693a      	ldr	r2, [r7, #16]
 800f070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f072:	fbb2 f3f3 	udiv	r3, r2, r3
 800f076:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 800f078:	693b      	ldr	r3, [r7, #16]
 800f07a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f07c:	fbb3 f2f2 	udiv	r2, r3, r2
 800f080:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f082:	fb01 f202 	mul.w	r2, r1, r2
 800f086:	1a9b      	subs	r3, r3, r2
 800f088:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800f08a:	4b20      	ldr	r3, [pc, #128]	; (800f10c <_LCD_Write_Frame+0x15c>)
 800f08c:	695b      	ldr	r3, [r3, #20]
 800f08e:	4a1f      	ldr	r2, [pc, #124]	; (800f10c <_LCD_Write_Frame+0x15c>)
 800f090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f094:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f096:	4b1d      	ldr	r3, [pc, #116]	; (800f10c <_LCD_Write_Frame+0x15c>)
 800f098:	695b      	ldr	r3, [r3, #20]
 800f09a:	4a1c      	ldr	r2, [pc, #112]	; (800f10c <_LCD_Write_Frame+0x15c>)
 800f09c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f0a0:	6153      	str	r3, [r2, #20]
//TODO
	if(Sending_in_Block != 0)
 800f0a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d00f      	beq.n	800f0c8 <_LCD_Write_Frame+0x118>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	627b      	str	r3, [r7, #36]	; 0x24
 800f0ac:	e008      	b.n	800f0c0 <_LCD_Write_Frame+0x110>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 800f0ae:	6978      	ldr	r0, [r7, #20]
 800f0b0:	230a      	movs	r3, #10
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f0b6:	f000 f8c1 	bl	800f23c <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800f0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0bc:	3301      	adds	r3, #1
 800f0be:	627b      	str	r3, [r7, #36]	; 0x24
 800f0c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0c4:	429a      	cmp	r2, r3
 800f0c6:	d3f2      	bcc.n	800f0ae <_LCD_Write_Frame+0xfe>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 800f0c8:	6978      	ldr	r0, [r7, #20]
 800f0ca:	230a      	movs	r3, #10
 800f0cc:	2200      	movs	r2, #0
 800f0ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f0d0:	f000 f8b4 	bl	800f23c <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	623b      	str	r3, [r7, #32]
 800f0d8:	e008      	b.n	800f0ec <_LCD_Write_Frame+0x13c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f0da:	4b0c      	ldr	r3, [pc, #48]	; (800f10c <_LCD_Write_Frame+0x15c>)
 800f0dc:	695b      	ldr	r3, [r3, #20]
 800f0de:	4a0b      	ldr	r2, [pc, #44]	; (800f10c <_LCD_Write_Frame+0x15c>)
 800f0e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f0e4:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800f0e6:	6a3b      	ldr	r3, [r7, #32]
 800f0e8:	3301      	adds	r3, #1
 800f0ea:	623b      	str	r3, [r7, #32]
 800f0ec:	6a3b      	ldr	r3, [r7, #32]
 800f0ee:	2b02      	cmp	r3, #2
 800f0f0:	ddf3      	ble.n	800f0da <_LCD_Write_Frame+0x12a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800f0f2:	4b06      	ldr	r3, [pc, #24]	; (800f10c <_LCD_Write_Frame+0x15c>)
 800f0f4:	695b      	ldr	r3, [r3, #20]
 800f0f6:	4a05      	ldr	r2, [pc, #20]	; (800f10c <_LCD_Write_Frame+0x15c>)
 800f0f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0fc:	6153      	str	r3, [r2, #20]
 800f0fe:	46ad      	mov	sp, r5

}
 800f100:	bf00      	nop
 800f102:	3738      	adds	r7, #56	; 0x38
 800f104:	46bd      	mov	sp, r7
 800f106:	bdb0      	pop	{r4, r5, r7, pc}
 800f108:	20000c40 	.word	0x20000c40
 800f10c:	48000400 	.word	0x48000400

0800f110 <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 800f110:	b580      	push	{r7, lr}
 800f112:	b084      	sub	sp, #16
 800f114:	af00      	add	r7, sp, #0
 800f116:	4603      	mov	r3, r0
 800f118:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f11a:	4b15      	ldr	r3, [pc, #84]	; (800f170 <_LCD_SendCommand+0x60>)
 800f11c:	695b      	ldr	r3, [r3, #20]
 800f11e:	4a14      	ldr	r2, [pc, #80]	; (800f170 <_LCD_SendCommand+0x60>)
 800f120:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f124:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800f126:	4b12      	ldr	r3, [pc, #72]	; (800f170 <_LCD_SendCommand+0x60>)
 800f128:	695b      	ldr	r3, [r3, #20]
 800f12a:	4a11      	ldr	r2, [pc, #68]	; (800f170 <_LCD_SendCommand+0x60>)
 800f12c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f130:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(command, 0 , 0);
 800f132:	79fb      	ldrb	r3, [r7, #7]
 800f134:	2200      	movs	r2, #0
 800f136:	2100      	movs	r1, #0
 800f138:	4618      	mov	r0, r3
 800f13a:	f000 f84d 	bl	800f1d8 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800f13e:	2300      	movs	r3, #0
 800f140:	60fb      	str	r3, [r7, #12]
 800f142:	e008      	b.n	800f156 <_LCD_SendCommand+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f144:	4b0a      	ldr	r3, [pc, #40]	; (800f170 <_LCD_SendCommand+0x60>)
 800f146:	695b      	ldr	r3, [r3, #20]
 800f148:	4a09      	ldr	r2, [pc, #36]	; (800f170 <_LCD_SendCommand+0x60>)
 800f14a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f14e:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	3301      	adds	r3, #1
 800f154:	60fb      	str	r3, [r7, #12]
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	2b02      	cmp	r3, #2
 800f15a:	ddf3      	ble.n	800f144 <_LCD_SendCommand+0x34>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800f15c:	4b04      	ldr	r3, [pc, #16]	; (800f170 <_LCD_SendCommand+0x60>)
 800f15e:	695b      	ldr	r3, [r3, #20]
 800f160:	4a03      	ldr	r2, [pc, #12]	; (800f170 <_LCD_SendCommand+0x60>)
 800f162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f166:	6153      	str	r3, [r2, #20]
}
 800f168:	bf00      	nop
 800f16a:	3710      	adds	r7, #16
 800f16c:	46bd      	mov	sp, r7
 800f16e:	bd80      	pop	{r7, pc}
 800f170:	48000400 	.word	0x48000400

0800f174 <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 800f174:	b580      	push	{r7, lr}
 800f176:	b084      	sub	sp, #16
 800f178:	af00      	add	r7, sp, #0
 800f17a:	4603      	mov	r3, r0
 800f17c:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800f17e:	4b15      	ldr	r3, [pc, #84]	; (800f1d4 <_LCD_SendData+0x60>)
 800f180:	695b      	ldr	r3, [r3, #20]
 800f182:	4a14      	ldr	r2, [pc, #80]	; (800f1d4 <_LCD_SendData+0x60>)
 800f184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f188:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f18a:	4b12      	ldr	r3, [pc, #72]	; (800f1d4 <_LCD_SendData+0x60>)
 800f18c:	695b      	ldr	r3, [r3, #20]
 800f18e:	4a11      	ldr	r2, [pc, #68]	; (800f1d4 <_LCD_SendData+0x60>)
 800f190:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f194:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(data, 0 , 0);
 800f196:	79fb      	ldrb	r3, [r7, #7]
 800f198:	2200      	movs	r2, #0
 800f19a:	2100      	movs	r1, #0
 800f19c:	4618      	mov	r0, r3
 800f19e:	f000 f81b 	bl	800f1d8 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	60fb      	str	r3, [r7, #12]
 800f1a6:	e008      	b.n	800f1ba <_LCD_SendData+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f1a8:	4b0a      	ldr	r3, [pc, #40]	; (800f1d4 <_LCD_SendData+0x60>)
 800f1aa:	695b      	ldr	r3, [r3, #20]
 800f1ac:	4a09      	ldr	r2, [pc, #36]	; (800f1d4 <_LCD_SendData+0x60>)
 800f1ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f1b2:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	3301      	adds	r3, #1
 800f1b8:	60fb      	str	r3, [r7, #12]
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	2b02      	cmp	r3, #2
 800f1be:	ddf3      	ble.n	800f1a8 <_LCD_SendData+0x34>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800f1c0:	4b04      	ldr	r3, [pc, #16]	; (800f1d4 <_LCD_SendData+0x60>)
 800f1c2:	695b      	ldr	r3, [r3, #20]
 800f1c4:	4a03      	ldr	r2, [pc, #12]	; (800f1d4 <_LCD_SendData+0x60>)
 800f1c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f1ca:	6153      	str	r3, [r2, #20]
}
 800f1cc:	bf00      	nop
 800f1ce:	3710      	adds	r7, #16
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	bd80      	pop	{r7, pc}
 800f1d4:	48000400 	.word	0x48000400

0800f1d8 <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800f1d8:	b480      	push	{r7}
 800f1da:	b085      	sub	sp, #20
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	4603      	mov	r3, r0
 800f1e0:	71fb      	strb	r3, [r7, #7]
 800f1e2:	460b      	mov	r3, r1
 800f1e4:	71bb      	strb	r3, [r7, #6]
 800f1e6:	4613      	mov	r3, r2
 800f1e8:	717b      	strb	r3, [r7, #5]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	60fb      	str	r3, [r7, #12]
 800f1ee:	e003      	b.n	800f1f8 <_SPI_SendByte+0x20>
   		asm("nop");
 800f1f0:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	3301      	adds	r3, #1
 800f1f6:	60fb      	str	r3, [r7, #12]
 800f1f8:	79bb      	ldrb	r3, [r7, #6]
 800f1fa:	68fa      	ldr	r2, [r7, #12]
 800f1fc:	429a      	cmp	r2, r3
 800f1fe:	dbf7      	blt.n	800f1f0 <_SPI_SendByte+0x18>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800f200:	4b0c      	ldr	r3, [pc, #48]	; (800f234 <_SPI_SendByte+0x5c>)
 800f202:	689b      	ldr	r3, [r3, #8]
 800f204:	f003 0302 	and.w	r3, r3, #2
 800f208:	2b02      	cmp	r3, #2
 800f20a:	d102      	bne.n	800f212 <_SPI_SendByte+0x3a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 800f20c:	4a0a      	ldr	r2, [pc, #40]	; (800f238 <_SPI_SendByte+0x60>)
 800f20e:	79fb      	ldrb	r3, [r7, #7]
 800f210:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800f212:	2300      	movs	r3, #0
 800f214:	60bb      	str	r3, [r7, #8]
 800f216:	e003      	b.n	800f220 <_SPI_SendByte+0x48>
   		asm("nop");
 800f218:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800f21a:	68bb      	ldr	r3, [r7, #8]
 800f21c:	3301      	adds	r3, #1
 800f21e:	60bb      	str	r3, [r7, #8]
 800f220:	797b      	ldrb	r3, [r7, #5]
 800f222:	68ba      	ldr	r2, [r7, #8]
 800f224:	429a      	cmp	r2, r3
 800f226:	dbf7      	blt.n	800f218 <_SPI_SendByte+0x40>

#endif

}
 800f228:	bf00      	nop
 800f22a:	3714      	adds	r7, #20
 800f22c:	46bd      	mov	sp, r7
 800f22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f232:	4770      	bx	lr
 800f234:	40003c00 	.word	0x40003c00
 800f238:	40003c0c 	.word	0x40003c0c

0800f23c <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800f23c:	b480      	push	{r7}
 800f23e:	b089      	sub	sp, #36	; 0x24
 800f240:	af00      	add	r7, sp, #0
 800f242:	60f8      	str	r0, [r7, #12]
 800f244:	60b9      	str	r1, [r7, #8]
 800f246:	4611      	mov	r1, r2
 800f248:	461a      	mov	r2, r3
 800f24a:	460b      	mov	r3, r1
 800f24c:	71fb      	strb	r3, [r7, #7]
 800f24e:	4613      	mov	r3, r2
 800f250:	71bb      	strb	r3, [r7, #6]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800f252:	2300      	movs	r3, #0
 800f254:	61fb      	str	r3, [r7, #28]
 800f256:	e003      	b.n	800f260 <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 800f258:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800f25a:	69fb      	ldr	r3, [r7, #28]
 800f25c:	3301      	adds	r3, #1
 800f25e:	61fb      	str	r3, [r7, #28]
 800f260:	79fb      	ldrb	r3, [r7, #7]
 800f262:	69fa      	ldr	r2, [r7, #28]
 800f264:	429a      	cmp	r2, r3
 800f266:	dbf7      	blt.n	800f258 <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 800f26c:	e01d      	b.n	800f2aa <_SPI_SendByteMultiByte+0x6e>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800f26e:	4b1c      	ldr	r3, [pc, #112]	; (800f2e0 <_SPI_SendByteMultiByte+0xa4>)
 800f270:	689b      	ldr	r3, [r3, #8]
 800f272:	f003 0302 	and.w	r3, r3, #2
 800f276:	2b02      	cmp	r3, #2
 800f278:	d117      	bne.n	800f2aa <_SPI_SendByteMultiByte+0x6e>
		{
			if (buffer_size > 1U)
 800f27a:	68bb      	ldr	r3, [r7, #8]
 800f27c:	2b01      	cmp	r3, #1
 800f27e:	d90a      	bls.n	800f296 <_SPI_SendByteMultiByte+0x5a>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 800f280:	69bb      	ldr	r3, [r7, #24]
 800f282:	881a      	ldrh	r2, [r3, #0]
 800f284:	4b16      	ldr	r3, [pc, #88]	; (800f2e0 <_SPI_SendByteMultiByte+0xa4>)
 800f286:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 800f288:	69bb      	ldr	r3, [r7, #24]
 800f28a:	3302      	adds	r3, #2
 800f28c:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 800f28e:	68bb      	ldr	r3, [r7, #8]
 800f290:	3b02      	subs	r3, #2
 800f292:	60bb      	str	r3, [r7, #8]
 800f294:	e009      	b.n	800f2aa <_SPI_SendByteMultiByte+0x6e>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 800f296:	4a13      	ldr	r2, [pc, #76]	; (800f2e4 <_SPI_SendByteMultiByte+0xa8>)
 800f298:	69bb      	ldr	r3, [r7, #24]
 800f29a:	781b      	ldrb	r3, [r3, #0]
 800f29c:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 800f29e:	69bb      	ldr	r3, [r7, #24]
 800f2a0:	3301      	adds	r3, #1
 800f2a2:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 800f2a4:	68bb      	ldr	r3, [r7, #8]
 800f2a6:	3b01      	subs	r3, #1
 800f2a8:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 800f2aa:	68bb      	ldr	r3, [r7, #8]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d1de      	bne.n	800f26e <_SPI_SendByteMultiByte+0x32>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 800f2b0:	4b0b      	ldr	r3, [pc, #44]	; (800f2e0 <_SPI_SendByteMultiByte+0xa4>)
 800f2b2:	689b      	ldr	r3, [r3, #8]
 800f2b4:	4a0a      	ldr	r2, [pc, #40]	; (800f2e0 <_SPI_SendByteMultiByte+0xa4>)
 800f2b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f2ba:	6093      	str	r3, [r2, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800f2bc:	2300      	movs	r3, #0
 800f2be:	617b      	str	r3, [r7, #20]
 800f2c0:	e003      	b.n	800f2ca <_SPI_SendByteMultiByte+0x8e>
   		asm("nop");
 800f2c2:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800f2c4:	697b      	ldr	r3, [r7, #20]
 800f2c6:	3301      	adds	r3, #1
 800f2c8:	617b      	str	r3, [r7, #20]
 800f2ca:	79bb      	ldrb	r3, [r7, #6]
 800f2cc:	697a      	ldr	r2, [r7, #20]
 800f2ce:	429a      	cmp	r2, r3
 800f2d0:	dbf7      	blt.n	800f2c2 <_SPI_SendByteMultiByte+0x86>

#endif

}
 800f2d2:	bf00      	nop
 800f2d4:	3724      	adds	r7, #36	; 0x24
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2dc:	4770      	bx	lr
 800f2de:	bf00      	nop
 800f2e0:	40003c00 	.word	0x40003c00
 800f2e4:	40003c0c 	.word	0x40003c0c

0800f2e8 <__errno>:
 800f2e8:	4b01      	ldr	r3, [pc, #4]	; (800f2f0 <__errno+0x8>)
 800f2ea:	6818      	ldr	r0, [r3, #0]
 800f2ec:	4770      	bx	lr
 800f2ee:	bf00      	nop
 800f2f0:	20001c34 	.word	0x20001c34

0800f2f4 <__libc_init_array>:
 800f2f4:	b570      	push	{r4, r5, r6, lr}
 800f2f6:	4e0d      	ldr	r6, [pc, #52]	; (800f32c <__libc_init_array+0x38>)
 800f2f8:	4c0d      	ldr	r4, [pc, #52]	; (800f330 <__libc_init_array+0x3c>)
 800f2fa:	1ba4      	subs	r4, r4, r6
 800f2fc:	10a4      	asrs	r4, r4, #2
 800f2fe:	2500      	movs	r5, #0
 800f300:	42a5      	cmp	r5, r4
 800f302:	d109      	bne.n	800f318 <__libc_init_array+0x24>
 800f304:	4e0b      	ldr	r6, [pc, #44]	; (800f334 <__libc_init_array+0x40>)
 800f306:	4c0c      	ldr	r4, [pc, #48]	; (800f338 <__libc_init_array+0x44>)
 800f308:	f004 f8a0 	bl	801344c <_init>
 800f30c:	1ba4      	subs	r4, r4, r6
 800f30e:	10a4      	asrs	r4, r4, #2
 800f310:	2500      	movs	r5, #0
 800f312:	42a5      	cmp	r5, r4
 800f314:	d105      	bne.n	800f322 <__libc_init_array+0x2e>
 800f316:	bd70      	pop	{r4, r5, r6, pc}
 800f318:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f31c:	4798      	blx	r3
 800f31e:	3501      	adds	r5, #1
 800f320:	e7ee      	b.n	800f300 <__libc_init_array+0xc>
 800f322:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f326:	4798      	blx	r3
 800f328:	3501      	adds	r5, #1
 800f32a:	e7f2      	b.n	800f312 <__libc_init_array+0x1e>
 800f32c:	080147e0 	.word	0x080147e0
 800f330:	080147e0 	.word	0x080147e0
 800f334:	080147e0 	.word	0x080147e0
 800f338:	080147e4 	.word	0x080147e4

0800f33c <memset>:
 800f33c:	4402      	add	r2, r0
 800f33e:	4603      	mov	r3, r0
 800f340:	4293      	cmp	r3, r2
 800f342:	d100      	bne.n	800f346 <memset+0xa>
 800f344:	4770      	bx	lr
 800f346:	f803 1b01 	strb.w	r1, [r3], #1
 800f34a:	e7f9      	b.n	800f340 <memset+0x4>

0800f34c <__cvt>:
 800f34c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f350:	ec55 4b10 	vmov	r4, r5, d0
 800f354:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800f356:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f35a:	2d00      	cmp	r5, #0
 800f35c:	460e      	mov	r6, r1
 800f35e:	4691      	mov	r9, r2
 800f360:	4619      	mov	r1, r3
 800f362:	bfb8      	it	lt
 800f364:	4622      	movlt	r2, r4
 800f366:	462b      	mov	r3, r5
 800f368:	f027 0720 	bic.w	r7, r7, #32
 800f36c:	bfbb      	ittet	lt
 800f36e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f372:	461d      	movlt	r5, r3
 800f374:	2300      	movge	r3, #0
 800f376:	232d      	movlt	r3, #45	; 0x2d
 800f378:	bfb8      	it	lt
 800f37a:	4614      	movlt	r4, r2
 800f37c:	2f46      	cmp	r7, #70	; 0x46
 800f37e:	700b      	strb	r3, [r1, #0]
 800f380:	d004      	beq.n	800f38c <__cvt+0x40>
 800f382:	2f45      	cmp	r7, #69	; 0x45
 800f384:	d100      	bne.n	800f388 <__cvt+0x3c>
 800f386:	3601      	adds	r6, #1
 800f388:	2102      	movs	r1, #2
 800f38a:	e000      	b.n	800f38e <__cvt+0x42>
 800f38c:	2103      	movs	r1, #3
 800f38e:	ab03      	add	r3, sp, #12
 800f390:	9301      	str	r3, [sp, #4]
 800f392:	ab02      	add	r3, sp, #8
 800f394:	9300      	str	r3, [sp, #0]
 800f396:	4632      	mov	r2, r6
 800f398:	4653      	mov	r3, sl
 800f39a:	ec45 4b10 	vmov	d0, r4, r5
 800f39e:	f000 fe3f 	bl	8010020 <_dtoa_r>
 800f3a2:	2f47      	cmp	r7, #71	; 0x47
 800f3a4:	4680      	mov	r8, r0
 800f3a6:	d102      	bne.n	800f3ae <__cvt+0x62>
 800f3a8:	f019 0f01 	tst.w	r9, #1
 800f3ac:	d026      	beq.n	800f3fc <__cvt+0xb0>
 800f3ae:	2f46      	cmp	r7, #70	; 0x46
 800f3b0:	eb08 0906 	add.w	r9, r8, r6
 800f3b4:	d111      	bne.n	800f3da <__cvt+0x8e>
 800f3b6:	f898 3000 	ldrb.w	r3, [r8]
 800f3ba:	2b30      	cmp	r3, #48	; 0x30
 800f3bc:	d10a      	bne.n	800f3d4 <__cvt+0x88>
 800f3be:	2200      	movs	r2, #0
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	4620      	mov	r0, r4
 800f3c4:	4629      	mov	r1, r5
 800f3c6:	f7f1 fba7 	bl	8000b18 <__aeabi_dcmpeq>
 800f3ca:	b918      	cbnz	r0, 800f3d4 <__cvt+0x88>
 800f3cc:	f1c6 0601 	rsb	r6, r6, #1
 800f3d0:	f8ca 6000 	str.w	r6, [sl]
 800f3d4:	f8da 3000 	ldr.w	r3, [sl]
 800f3d8:	4499      	add	r9, r3
 800f3da:	2200      	movs	r2, #0
 800f3dc:	2300      	movs	r3, #0
 800f3de:	4620      	mov	r0, r4
 800f3e0:	4629      	mov	r1, r5
 800f3e2:	f7f1 fb99 	bl	8000b18 <__aeabi_dcmpeq>
 800f3e6:	b938      	cbnz	r0, 800f3f8 <__cvt+0xac>
 800f3e8:	2230      	movs	r2, #48	; 0x30
 800f3ea:	9b03      	ldr	r3, [sp, #12]
 800f3ec:	454b      	cmp	r3, r9
 800f3ee:	d205      	bcs.n	800f3fc <__cvt+0xb0>
 800f3f0:	1c59      	adds	r1, r3, #1
 800f3f2:	9103      	str	r1, [sp, #12]
 800f3f4:	701a      	strb	r2, [r3, #0]
 800f3f6:	e7f8      	b.n	800f3ea <__cvt+0x9e>
 800f3f8:	f8cd 900c 	str.w	r9, [sp, #12]
 800f3fc:	9b03      	ldr	r3, [sp, #12]
 800f3fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f400:	eba3 0308 	sub.w	r3, r3, r8
 800f404:	4640      	mov	r0, r8
 800f406:	6013      	str	r3, [r2, #0]
 800f408:	b004      	add	sp, #16
 800f40a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800f40e <__exponent>:
 800f40e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f410:	2900      	cmp	r1, #0
 800f412:	4604      	mov	r4, r0
 800f414:	bfba      	itte	lt
 800f416:	4249      	neglt	r1, r1
 800f418:	232d      	movlt	r3, #45	; 0x2d
 800f41a:	232b      	movge	r3, #43	; 0x2b
 800f41c:	2909      	cmp	r1, #9
 800f41e:	f804 2b02 	strb.w	r2, [r4], #2
 800f422:	7043      	strb	r3, [r0, #1]
 800f424:	dd20      	ble.n	800f468 <__exponent+0x5a>
 800f426:	f10d 0307 	add.w	r3, sp, #7
 800f42a:	461f      	mov	r7, r3
 800f42c:	260a      	movs	r6, #10
 800f42e:	fb91 f5f6 	sdiv	r5, r1, r6
 800f432:	fb06 1115 	mls	r1, r6, r5, r1
 800f436:	3130      	adds	r1, #48	; 0x30
 800f438:	2d09      	cmp	r5, #9
 800f43a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f43e:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800f442:	4629      	mov	r1, r5
 800f444:	dc09      	bgt.n	800f45a <__exponent+0x4c>
 800f446:	3130      	adds	r1, #48	; 0x30
 800f448:	3b02      	subs	r3, #2
 800f44a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f44e:	42bb      	cmp	r3, r7
 800f450:	4622      	mov	r2, r4
 800f452:	d304      	bcc.n	800f45e <__exponent+0x50>
 800f454:	1a10      	subs	r0, r2, r0
 800f456:	b003      	add	sp, #12
 800f458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f45a:	4613      	mov	r3, r2
 800f45c:	e7e7      	b.n	800f42e <__exponent+0x20>
 800f45e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f462:	f804 2b01 	strb.w	r2, [r4], #1
 800f466:	e7f2      	b.n	800f44e <__exponent+0x40>
 800f468:	2330      	movs	r3, #48	; 0x30
 800f46a:	4419      	add	r1, r3
 800f46c:	7083      	strb	r3, [r0, #2]
 800f46e:	1d02      	adds	r2, r0, #4
 800f470:	70c1      	strb	r1, [r0, #3]
 800f472:	e7ef      	b.n	800f454 <__exponent+0x46>

0800f474 <_printf_float>:
 800f474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f478:	b08d      	sub	sp, #52	; 0x34
 800f47a:	460c      	mov	r4, r1
 800f47c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800f480:	4616      	mov	r6, r2
 800f482:	461f      	mov	r7, r3
 800f484:	4605      	mov	r5, r0
 800f486:	f001 fcfd 	bl	8010e84 <_localeconv_r>
 800f48a:	6803      	ldr	r3, [r0, #0]
 800f48c:	9304      	str	r3, [sp, #16]
 800f48e:	4618      	mov	r0, r3
 800f490:	f7f0 fec6 	bl	8000220 <strlen>
 800f494:	2300      	movs	r3, #0
 800f496:	930a      	str	r3, [sp, #40]	; 0x28
 800f498:	f8d8 3000 	ldr.w	r3, [r8]
 800f49c:	9005      	str	r0, [sp, #20]
 800f49e:	3307      	adds	r3, #7
 800f4a0:	f023 0307 	bic.w	r3, r3, #7
 800f4a4:	f103 0208 	add.w	r2, r3, #8
 800f4a8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f4ac:	f8d4 b000 	ldr.w	fp, [r4]
 800f4b0:	f8c8 2000 	str.w	r2, [r8]
 800f4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4b8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f4bc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f4c0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f4c4:	9307      	str	r3, [sp, #28]
 800f4c6:	f8cd 8018 	str.w	r8, [sp, #24]
 800f4ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f4ce:	4ba7      	ldr	r3, [pc, #668]	; (800f76c <_printf_float+0x2f8>)
 800f4d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f4d4:	f7f1 fb52 	bl	8000b7c <__aeabi_dcmpun>
 800f4d8:	bb70      	cbnz	r0, 800f538 <_printf_float+0xc4>
 800f4da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f4de:	4ba3      	ldr	r3, [pc, #652]	; (800f76c <_printf_float+0x2f8>)
 800f4e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f4e4:	f7f1 fb2c 	bl	8000b40 <__aeabi_dcmple>
 800f4e8:	bb30      	cbnz	r0, 800f538 <_printf_float+0xc4>
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	4640      	mov	r0, r8
 800f4f0:	4649      	mov	r1, r9
 800f4f2:	f7f1 fb1b 	bl	8000b2c <__aeabi_dcmplt>
 800f4f6:	b110      	cbz	r0, 800f4fe <_printf_float+0x8a>
 800f4f8:	232d      	movs	r3, #45	; 0x2d
 800f4fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f4fe:	4a9c      	ldr	r2, [pc, #624]	; (800f770 <_printf_float+0x2fc>)
 800f500:	4b9c      	ldr	r3, [pc, #624]	; (800f774 <_printf_float+0x300>)
 800f502:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800f506:	bf8c      	ite	hi
 800f508:	4690      	movhi	r8, r2
 800f50a:	4698      	movls	r8, r3
 800f50c:	2303      	movs	r3, #3
 800f50e:	f02b 0204 	bic.w	r2, fp, #4
 800f512:	6123      	str	r3, [r4, #16]
 800f514:	6022      	str	r2, [r4, #0]
 800f516:	f04f 0900 	mov.w	r9, #0
 800f51a:	9700      	str	r7, [sp, #0]
 800f51c:	4633      	mov	r3, r6
 800f51e:	aa0b      	add	r2, sp, #44	; 0x2c
 800f520:	4621      	mov	r1, r4
 800f522:	4628      	mov	r0, r5
 800f524:	f000 f9e6 	bl	800f8f4 <_printf_common>
 800f528:	3001      	adds	r0, #1
 800f52a:	f040 808d 	bne.w	800f648 <_printf_float+0x1d4>
 800f52e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f532:	b00d      	add	sp, #52	; 0x34
 800f534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f538:	4642      	mov	r2, r8
 800f53a:	464b      	mov	r3, r9
 800f53c:	4640      	mov	r0, r8
 800f53e:	4649      	mov	r1, r9
 800f540:	f7f1 fb1c 	bl	8000b7c <__aeabi_dcmpun>
 800f544:	b110      	cbz	r0, 800f54c <_printf_float+0xd8>
 800f546:	4a8c      	ldr	r2, [pc, #560]	; (800f778 <_printf_float+0x304>)
 800f548:	4b8c      	ldr	r3, [pc, #560]	; (800f77c <_printf_float+0x308>)
 800f54a:	e7da      	b.n	800f502 <_printf_float+0x8e>
 800f54c:	6861      	ldr	r1, [r4, #4]
 800f54e:	1c4b      	adds	r3, r1, #1
 800f550:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800f554:	a80a      	add	r0, sp, #40	; 0x28
 800f556:	d13e      	bne.n	800f5d6 <_printf_float+0x162>
 800f558:	2306      	movs	r3, #6
 800f55a:	6063      	str	r3, [r4, #4]
 800f55c:	2300      	movs	r3, #0
 800f55e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800f562:	ab09      	add	r3, sp, #36	; 0x24
 800f564:	9300      	str	r3, [sp, #0]
 800f566:	ec49 8b10 	vmov	d0, r8, r9
 800f56a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f56e:	6022      	str	r2, [r4, #0]
 800f570:	f8cd a004 	str.w	sl, [sp, #4]
 800f574:	6861      	ldr	r1, [r4, #4]
 800f576:	4628      	mov	r0, r5
 800f578:	f7ff fee8 	bl	800f34c <__cvt>
 800f57c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800f580:	2b47      	cmp	r3, #71	; 0x47
 800f582:	4680      	mov	r8, r0
 800f584:	d109      	bne.n	800f59a <_printf_float+0x126>
 800f586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f588:	1cd8      	adds	r0, r3, #3
 800f58a:	db02      	blt.n	800f592 <_printf_float+0x11e>
 800f58c:	6862      	ldr	r2, [r4, #4]
 800f58e:	4293      	cmp	r3, r2
 800f590:	dd47      	ble.n	800f622 <_printf_float+0x1ae>
 800f592:	f1aa 0a02 	sub.w	sl, sl, #2
 800f596:	fa5f fa8a 	uxtb.w	sl, sl
 800f59a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800f59e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f5a0:	d824      	bhi.n	800f5ec <_printf_float+0x178>
 800f5a2:	3901      	subs	r1, #1
 800f5a4:	4652      	mov	r2, sl
 800f5a6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f5aa:	9109      	str	r1, [sp, #36]	; 0x24
 800f5ac:	f7ff ff2f 	bl	800f40e <__exponent>
 800f5b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f5b2:	1813      	adds	r3, r2, r0
 800f5b4:	2a01      	cmp	r2, #1
 800f5b6:	4681      	mov	r9, r0
 800f5b8:	6123      	str	r3, [r4, #16]
 800f5ba:	dc02      	bgt.n	800f5c2 <_printf_float+0x14e>
 800f5bc:	6822      	ldr	r2, [r4, #0]
 800f5be:	07d1      	lsls	r1, r2, #31
 800f5c0:	d501      	bpl.n	800f5c6 <_printf_float+0x152>
 800f5c2:	3301      	adds	r3, #1
 800f5c4:	6123      	str	r3, [r4, #16]
 800f5c6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d0a5      	beq.n	800f51a <_printf_float+0xa6>
 800f5ce:	232d      	movs	r3, #45	; 0x2d
 800f5d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f5d4:	e7a1      	b.n	800f51a <_printf_float+0xa6>
 800f5d6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800f5da:	f000 8177 	beq.w	800f8cc <_printf_float+0x458>
 800f5de:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800f5e2:	d1bb      	bne.n	800f55c <_printf_float+0xe8>
 800f5e4:	2900      	cmp	r1, #0
 800f5e6:	d1b9      	bne.n	800f55c <_printf_float+0xe8>
 800f5e8:	2301      	movs	r3, #1
 800f5ea:	e7b6      	b.n	800f55a <_printf_float+0xe6>
 800f5ec:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800f5f0:	d119      	bne.n	800f626 <_printf_float+0x1b2>
 800f5f2:	2900      	cmp	r1, #0
 800f5f4:	6863      	ldr	r3, [r4, #4]
 800f5f6:	dd0c      	ble.n	800f612 <_printf_float+0x19e>
 800f5f8:	6121      	str	r1, [r4, #16]
 800f5fa:	b913      	cbnz	r3, 800f602 <_printf_float+0x18e>
 800f5fc:	6822      	ldr	r2, [r4, #0]
 800f5fe:	07d2      	lsls	r2, r2, #31
 800f600:	d502      	bpl.n	800f608 <_printf_float+0x194>
 800f602:	3301      	adds	r3, #1
 800f604:	440b      	add	r3, r1
 800f606:	6123      	str	r3, [r4, #16]
 800f608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f60a:	65a3      	str	r3, [r4, #88]	; 0x58
 800f60c:	f04f 0900 	mov.w	r9, #0
 800f610:	e7d9      	b.n	800f5c6 <_printf_float+0x152>
 800f612:	b913      	cbnz	r3, 800f61a <_printf_float+0x1a6>
 800f614:	6822      	ldr	r2, [r4, #0]
 800f616:	07d0      	lsls	r0, r2, #31
 800f618:	d501      	bpl.n	800f61e <_printf_float+0x1aa>
 800f61a:	3302      	adds	r3, #2
 800f61c:	e7f3      	b.n	800f606 <_printf_float+0x192>
 800f61e:	2301      	movs	r3, #1
 800f620:	e7f1      	b.n	800f606 <_printf_float+0x192>
 800f622:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800f626:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f62a:	4293      	cmp	r3, r2
 800f62c:	db05      	blt.n	800f63a <_printf_float+0x1c6>
 800f62e:	6822      	ldr	r2, [r4, #0]
 800f630:	6123      	str	r3, [r4, #16]
 800f632:	07d1      	lsls	r1, r2, #31
 800f634:	d5e8      	bpl.n	800f608 <_printf_float+0x194>
 800f636:	3301      	adds	r3, #1
 800f638:	e7e5      	b.n	800f606 <_printf_float+0x192>
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	bfd4      	ite	le
 800f63e:	f1c3 0302 	rsble	r3, r3, #2
 800f642:	2301      	movgt	r3, #1
 800f644:	4413      	add	r3, r2
 800f646:	e7de      	b.n	800f606 <_printf_float+0x192>
 800f648:	6823      	ldr	r3, [r4, #0]
 800f64a:	055a      	lsls	r2, r3, #21
 800f64c:	d407      	bmi.n	800f65e <_printf_float+0x1ea>
 800f64e:	6923      	ldr	r3, [r4, #16]
 800f650:	4642      	mov	r2, r8
 800f652:	4631      	mov	r1, r6
 800f654:	4628      	mov	r0, r5
 800f656:	47b8      	blx	r7
 800f658:	3001      	adds	r0, #1
 800f65a:	d12b      	bne.n	800f6b4 <_printf_float+0x240>
 800f65c:	e767      	b.n	800f52e <_printf_float+0xba>
 800f65e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800f662:	f240 80dc 	bls.w	800f81e <_printf_float+0x3aa>
 800f666:	2200      	movs	r2, #0
 800f668:	2300      	movs	r3, #0
 800f66a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f66e:	f7f1 fa53 	bl	8000b18 <__aeabi_dcmpeq>
 800f672:	2800      	cmp	r0, #0
 800f674:	d033      	beq.n	800f6de <_printf_float+0x26a>
 800f676:	2301      	movs	r3, #1
 800f678:	4a41      	ldr	r2, [pc, #260]	; (800f780 <_printf_float+0x30c>)
 800f67a:	4631      	mov	r1, r6
 800f67c:	4628      	mov	r0, r5
 800f67e:	47b8      	blx	r7
 800f680:	3001      	adds	r0, #1
 800f682:	f43f af54 	beq.w	800f52e <_printf_float+0xba>
 800f686:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f68a:	429a      	cmp	r2, r3
 800f68c:	db02      	blt.n	800f694 <_printf_float+0x220>
 800f68e:	6823      	ldr	r3, [r4, #0]
 800f690:	07d8      	lsls	r0, r3, #31
 800f692:	d50f      	bpl.n	800f6b4 <_printf_float+0x240>
 800f694:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f698:	4631      	mov	r1, r6
 800f69a:	4628      	mov	r0, r5
 800f69c:	47b8      	blx	r7
 800f69e:	3001      	adds	r0, #1
 800f6a0:	f43f af45 	beq.w	800f52e <_printf_float+0xba>
 800f6a4:	f04f 0800 	mov.w	r8, #0
 800f6a8:	f104 091a 	add.w	r9, r4, #26
 800f6ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6ae:	3b01      	subs	r3, #1
 800f6b0:	4543      	cmp	r3, r8
 800f6b2:	dc09      	bgt.n	800f6c8 <_printf_float+0x254>
 800f6b4:	6823      	ldr	r3, [r4, #0]
 800f6b6:	079b      	lsls	r3, r3, #30
 800f6b8:	f100 8103 	bmi.w	800f8c2 <_printf_float+0x44e>
 800f6bc:	68e0      	ldr	r0, [r4, #12]
 800f6be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f6c0:	4298      	cmp	r0, r3
 800f6c2:	bfb8      	it	lt
 800f6c4:	4618      	movlt	r0, r3
 800f6c6:	e734      	b.n	800f532 <_printf_float+0xbe>
 800f6c8:	2301      	movs	r3, #1
 800f6ca:	464a      	mov	r2, r9
 800f6cc:	4631      	mov	r1, r6
 800f6ce:	4628      	mov	r0, r5
 800f6d0:	47b8      	blx	r7
 800f6d2:	3001      	adds	r0, #1
 800f6d4:	f43f af2b 	beq.w	800f52e <_printf_float+0xba>
 800f6d8:	f108 0801 	add.w	r8, r8, #1
 800f6dc:	e7e6      	b.n	800f6ac <_printf_float+0x238>
 800f6de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	dc2b      	bgt.n	800f73c <_printf_float+0x2c8>
 800f6e4:	2301      	movs	r3, #1
 800f6e6:	4a26      	ldr	r2, [pc, #152]	; (800f780 <_printf_float+0x30c>)
 800f6e8:	4631      	mov	r1, r6
 800f6ea:	4628      	mov	r0, r5
 800f6ec:	47b8      	blx	r7
 800f6ee:	3001      	adds	r0, #1
 800f6f0:	f43f af1d 	beq.w	800f52e <_printf_float+0xba>
 800f6f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6f6:	b923      	cbnz	r3, 800f702 <_printf_float+0x28e>
 800f6f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6fa:	b913      	cbnz	r3, 800f702 <_printf_float+0x28e>
 800f6fc:	6823      	ldr	r3, [r4, #0]
 800f6fe:	07d9      	lsls	r1, r3, #31
 800f700:	d5d8      	bpl.n	800f6b4 <_printf_float+0x240>
 800f702:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f706:	4631      	mov	r1, r6
 800f708:	4628      	mov	r0, r5
 800f70a:	47b8      	blx	r7
 800f70c:	3001      	adds	r0, #1
 800f70e:	f43f af0e 	beq.w	800f52e <_printf_float+0xba>
 800f712:	f04f 0900 	mov.w	r9, #0
 800f716:	f104 0a1a 	add.w	sl, r4, #26
 800f71a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f71c:	425b      	negs	r3, r3
 800f71e:	454b      	cmp	r3, r9
 800f720:	dc01      	bgt.n	800f726 <_printf_float+0x2b2>
 800f722:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f724:	e794      	b.n	800f650 <_printf_float+0x1dc>
 800f726:	2301      	movs	r3, #1
 800f728:	4652      	mov	r2, sl
 800f72a:	4631      	mov	r1, r6
 800f72c:	4628      	mov	r0, r5
 800f72e:	47b8      	blx	r7
 800f730:	3001      	adds	r0, #1
 800f732:	f43f aefc 	beq.w	800f52e <_printf_float+0xba>
 800f736:	f109 0901 	add.w	r9, r9, #1
 800f73a:	e7ee      	b.n	800f71a <_printf_float+0x2a6>
 800f73c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f73e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f740:	429a      	cmp	r2, r3
 800f742:	bfa8      	it	ge
 800f744:	461a      	movge	r2, r3
 800f746:	2a00      	cmp	r2, #0
 800f748:	4691      	mov	r9, r2
 800f74a:	dd07      	ble.n	800f75c <_printf_float+0x2e8>
 800f74c:	4613      	mov	r3, r2
 800f74e:	4631      	mov	r1, r6
 800f750:	4642      	mov	r2, r8
 800f752:	4628      	mov	r0, r5
 800f754:	47b8      	blx	r7
 800f756:	3001      	adds	r0, #1
 800f758:	f43f aee9 	beq.w	800f52e <_printf_float+0xba>
 800f75c:	f104 031a 	add.w	r3, r4, #26
 800f760:	f04f 0b00 	mov.w	fp, #0
 800f764:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f768:	9306      	str	r3, [sp, #24]
 800f76a:	e015      	b.n	800f798 <_printf_float+0x324>
 800f76c:	7fefffff 	.word	0x7fefffff
 800f770:	080144dc 	.word	0x080144dc
 800f774:	080144d8 	.word	0x080144d8
 800f778:	080144e4 	.word	0x080144e4
 800f77c:	080144e0 	.word	0x080144e0
 800f780:	08014794 	.word	0x08014794
 800f784:	2301      	movs	r3, #1
 800f786:	9a06      	ldr	r2, [sp, #24]
 800f788:	4631      	mov	r1, r6
 800f78a:	4628      	mov	r0, r5
 800f78c:	47b8      	blx	r7
 800f78e:	3001      	adds	r0, #1
 800f790:	f43f aecd 	beq.w	800f52e <_printf_float+0xba>
 800f794:	f10b 0b01 	add.w	fp, fp, #1
 800f798:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800f79c:	ebaa 0309 	sub.w	r3, sl, r9
 800f7a0:	455b      	cmp	r3, fp
 800f7a2:	dcef      	bgt.n	800f784 <_printf_float+0x310>
 800f7a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f7a8:	429a      	cmp	r2, r3
 800f7aa:	44d0      	add	r8, sl
 800f7ac:	db15      	blt.n	800f7da <_printf_float+0x366>
 800f7ae:	6823      	ldr	r3, [r4, #0]
 800f7b0:	07da      	lsls	r2, r3, #31
 800f7b2:	d412      	bmi.n	800f7da <_printf_float+0x366>
 800f7b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f7b8:	eba3 020a 	sub.w	r2, r3, sl
 800f7bc:	eba3 0a01 	sub.w	sl, r3, r1
 800f7c0:	4592      	cmp	sl, r2
 800f7c2:	bfa8      	it	ge
 800f7c4:	4692      	movge	sl, r2
 800f7c6:	f1ba 0f00 	cmp.w	sl, #0
 800f7ca:	dc0e      	bgt.n	800f7ea <_printf_float+0x376>
 800f7cc:	f04f 0800 	mov.w	r8, #0
 800f7d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f7d4:	f104 091a 	add.w	r9, r4, #26
 800f7d8:	e019      	b.n	800f80e <_printf_float+0x39a>
 800f7da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f7de:	4631      	mov	r1, r6
 800f7e0:	4628      	mov	r0, r5
 800f7e2:	47b8      	blx	r7
 800f7e4:	3001      	adds	r0, #1
 800f7e6:	d1e5      	bne.n	800f7b4 <_printf_float+0x340>
 800f7e8:	e6a1      	b.n	800f52e <_printf_float+0xba>
 800f7ea:	4653      	mov	r3, sl
 800f7ec:	4642      	mov	r2, r8
 800f7ee:	4631      	mov	r1, r6
 800f7f0:	4628      	mov	r0, r5
 800f7f2:	47b8      	blx	r7
 800f7f4:	3001      	adds	r0, #1
 800f7f6:	d1e9      	bne.n	800f7cc <_printf_float+0x358>
 800f7f8:	e699      	b.n	800f52e <_printf_float+0xba>
 800f7fa:	2301      	movs	r3, #1
 800f7fc:	464a      	mov	r2, r9
 800f7fe:	4631      	mov	r1, r6
 800f800:	4628      	mov	r0, r5
 800f802:	47b8      	blx	r7
 800f804:	3001      	adds	r0, #1
 800f806:	f43f ae92 	beq.w	800f52e <_printf_float+0xba>
 800f80a:	f108 0801 	add.w	r8, r8, #1
 800f80e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f812:	1a9b      	subs	r3, r3, r2
 800f814:	eba3 030a 	sub.w	r3, r3, sl
 800f818:	4543      	cmp	r3, r8
 800f81a:	dcee      	bgt.n	800f7fa <_printf_float+0x386>
 800f81c:	e74a      	b.n	800f6b4 <_printf_float+0x240>
 800f81e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f820:	2a01      	cmp	r2, #1
 800f822:	dc01      	bgt.n	800f828 <_printf_float+0x3b4>
 800f824:	07db      	lsls	r3, r3, #31
 800f826:	d53a      	bpl.n	800f89e <_printf_float+0x42a>
 800f828:	2301      	movs	r3, #1
 800f82a:	4642      	mov	r2, r8
 800f82c:	4631      	mov	r1, r6
 800f82e:	4628      	mov	r0, r5
 800f830:	47b8      	blx	r7
 800f832:	3001      	adds	r0, #1
 800f834:	f43f ae7b 	beq.w	800f52e <_printf_float+0xba>
 800f838:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f83c:	4631      	mov	r1, r6
 800f83e:	4628      	mov	r0, r5
 800f840:	47b8      	blx	r7
 800f842:	3001      	adds	r0, #1
 800f844:	f108 0801 	add.w	r8, r8, #1
 800f848:	f43f ae71 	beq.w	800f52e <_printf_float+0xba>
 800f84c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f84e:	2200      	movs	r2, #0
 800f850:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800f854:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f858:	2300      	movs	r3, #0
 800f85a:	f7f1 f95d 	bl	8000b18 <__aeabi_dcmpeq>
 800f85e:	b9c8      	cbnz	r0, 800f894 <_printf_float+0x420>
 800f860:	4653      	mov	r3, sl
 800f862:	4642      	mov	r2, r8
 800f864:	4631      	mov	r1, r6
 800f866:	4628      	mov	r0, r5
 800f868:	47b8      	blx	r7
 800f86a:	3001      	adds	r0, #1
 800f86c:	d10e      	bne.n	800f88c <_printf_float+0x418>
 800f86e:	e65e      	b.n	800f52e <_printf_float+0xba>
 800f870:	2301      	movs	r3, #1
 800f872:	4652      	mov	r2, sl
 800f874:	4631      	mov	r1, r6
 800f876:	4628      	mov	r0, r5
 800f878:	47b8      	blx	r7
 800f87a:	3001      	adds	r0, #1
 800f87c:	f43f ae57 	beq.w	800f52e <_printf_float+0xba>
 800f880:	f108 0801 	add.w	r8, r8, #1
 800f884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f886:	3b01      	subs	r3, #1
 800f888:	4543      	cmp	r3, r8
 800f88a:	dcf1      	bgt.n	800f870 <_printf_float+0x3fc>
 800f88c:	464b      	mov	r3, r9
 800f88e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f892:	e6de      	b.n	800f652 <_printf_float+0x1de>
 800f894:	f04f 0800 	mov.w	r8, #0
 800f898:	f104 0a1a 	add.w	sl, r4, #26
 800f89c:	e7f2      	b.n	800f884 <_printf_float+0x410>
 800f89e:	2301      	movs	r3, #1
 800f8a0:	e7df      	b.n	800f862 <_printf_float+0x3ee>
 800f8a2:	2301      	movs	r3, #1
 800f8a4:	464a      	mov	r2, r9
 800f8a6:	4631      	mov	r1, r6
 800f8a8:	4628      	mov	r0, r5
 800f8aa:	47b8      	blx	r7
 800f8ac:	3001      	adds	r0, #1
 800f8ae:	f43f ae3e 	beq.w	800f52e <_printf_float+0xba>
 800f8b2:	f108 0801 	add.w	r8, r8, #1
 800f8b6:	68e3      	ldr	r3, [r4, #12]
 800f8b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f8ba:	1a9b      	subs	r3, r3, r2
 800f8bc:	4543      	cmp	r3, r8
 800f8be:	dcf0      	bgt.n	800f8a2 <_printf_float+0x42e>
 800f8c0:	e6fc      	b.n	800f6bc <_printf_float+0x248>
 800f8c2:	f04f 0800 	mov.w	r8, #0
 800f8c6:	f104 0919 	add.w	r9, r4, #25
 800f8ca:	e7f4      	b.n	800f8b6 <_printf_float+0x442>
 800f8cc:	2900      	cmp	r1, #0
 800f8ce:	f43f ae8b 	beq.w	800f5e8 <_printf_float+0x174>
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800f8d8:	ab09      	add	r3, sp, #36	; 0x24
 800f8da:	9300      	str	r3, [sp, #0]
 800f8dc:	ec49 8b10 	vmov	d0, r8, r9
 800f8e0:	6022      	str	r2, [r4, #0]
 800f8e2:	f8cd a004 	str.w	sl, [sp, #4]
 800f8e6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f8ea:	4628      	mov	r0, r5
 800f8ec:	f7ff fd2e 	bl	800f34c <__cvt>
 800f8f0:	4680      	mov	r8, r0
 800f8f2:	e648      	b.n	800f586 <_printf_float+0x112>

0800f8f4 <_printf_common>:
 800f8f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8f8:	4691      	mov	r9, r2
 800f8fa:	461f      	mov	r7, r3
 800f8fc:	688a      	ldr	r2, [r1, #8]
 800f8fe:	690b      	ldr	r3, [r1, #16]
 800f900:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f904:	4293      	cmp	r3, r2
 800f906:	bfb8      	it	lt
 800f908:	4613      	movlt	r3, r2
 800f90a:	f8c9 3000 	str.w	r3, [r9]
 800f90e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f912:	4606      	mov	r6, r0
 800f914:	460c      	mov	r4, r1
 800f916:	b112      	cbz	r2, 800f91e <_printf_common+0x2a>
 800f918:	3301      	adds	r3, #1
 800f91a:	f8c9 3000 	str.w	r3, [r9]
 800f91e:	6823      	ldr	r3, [r4, #0]
 800f920:	0699      	lsls	r1, r3, #26
 800f922:	bf42      	ittt	mi
 800f924:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f928:	3302      	addmi	r3, #2
 800f92a:	f8c9 3000 	strmi.w	r3, [r9]
 800f92e:	6825      	ldr	r5, [r4, #0]
 800f930:	f015 0506 	ands.w	r5, r5, #6
 800f934:	d107      	bne.n	800f946 <_printf_common+0x52>
 800f936:	f104 0a19 	add.w	sl, r4, #25
 800f93a:	68e3      	ldr	r3, [r4, #12]
 800f93c:	f8d9 2000 	ldr.w	r2, [r9]
 800f940:	1a9b      	subs	r3, r3, r2
 800f942:	42ab      	cmp	r3, r5
 800f944:	dc28      	bgt.n	800f998 <_printf_common+0xa4>
 800f946:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800f94a:	6822      	ldr	r2, [r4, #0]
 800f94c:	3300      	adds	r3, #0
 800f94e:	bf18      	it	ne
 800f950:	2301      	movne	r3, #1
 800f952:	0692      	lsls	r2, r2, #26
 800f954:	d42d      	bmi.n	800f9b2 <_printf_common+0xbe>
 800f956:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f95a:	4639      	mov	r1, r7
 800f95c:	4630      	mov	r0, r6
 800f95e:	47c0      	blx	r8
 800f960:	3001      	adds	r0, #1
 800f962:	d020      	beq.n	800f9a6 <_printf_common+0xb2>
 800f964:	6823      	ldr	r3, [r4, #0]
 800f966:	68e5      	ldr	r5, [r4, #12]
 800f968:	f8d9 2000 	ldr.w	r2, [r9]
 800f96c:	f003 0306 	and.w	r3, r3, #6
 800f970:	2b04      	cmp	r3, #4
 800f972:	bf08      	it	eq
 800f974:	1aad      	subeq	r5, r5, r2
 800f976:	68a3      	ldr	r3, [r4, #8]
 800f978:	6922      	ldr	r2, [r4, #16]
 800f97a:	bf0c      	ite	eq
 800f97c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f980:	2500      	movne	r5, #0
 800f982:	4293      	cmp	r3, r2
 800f984:	bfc4      	itt	gt
 800f986:	1a9b      	subgt	r3, r3, r2
 800f988:	18ed      	addgt	r5, r5, r3
 800f98a:	f04f 0900 	mov.w	r9, #0
 800f98e:	341a      	adds	r4, #26
 800f990:	454d      	cmp	r5, r9
 800f992:	d11a      	bne.n	800f9ca <_printf_common+0xd6>
 800f994:	2000      	movs	r0, #0
 800f996:	e008      	b.n	800f9aa <_printf_common+0xb6>
 800f998:	2301      	movs	r3, #1
 800f99a:	4652      	mov	r2, sl
 800f99c:	4639      	mov	r1, r7
 800f99e:	4630      	mov	r0, r6
 800f9a0:	47c0      	blx	r8
 800f9a2:	3001      	adds	r0, #1
 800f9a4:	d103      	bne.n	800f9ae <_printf_common+0xba>
 800f9a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f9aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9ae:	3501      	adds	r5, #1
 800f9b0:	e7c3      	b.n	800f93a <_printf_common+0x46>
 800f9b2:	18e1      	adds	r1, r4, r3
 800f9b4:	1c5a      	adds	r2, r3, #1
 800f9b6:	2030      	movs	r0, #48	; 0x30
 800f9b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f9bc:	4422      	add	r2, r4
 800f9be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f9c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f9c6:	3302      	adds	r3, #2
 800f9c8:	e7c5      	b.n	800f956 <_printf_common+0x62>
 800f9ca:	2301      	movs	r3, #1
 800f9cc:	4622      	mov	r2, r4
 800f9ce:	4639      	mov	r1, r7
 800f9d0:	4630      	mov	r0, r6
 800f9d2:	47c0      	blx	r8
 800f9d4:	3001      	adds	r0, #1
 800f9d6:	d0e6      	beq.n	800f9a6 <_printf_common+0xb2>
 800f9d8:	f109 0901 	add.w	r9, r9, #1
 800f9dc:	e7d8      	b.n	800f990 <_printf_common+0x9c>
	...

0800f9e0 <_printf_i>:
 800f9e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f9e4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800f9e8:	460c      	mov	r4, r1
 800f9ea:	7e09      	ldrb	r1, [r1, #24]
 800f9ec:	b085      	sub	sp, #20
 800f9ee:	296e      	cmp	r1, #110	; 0x6e
 800f9f0:	4617      	mov	r7, r2
 800f9f2:	4606      	mov	r6, r0
 800f9f4:	4698      	mov	r8, r3
 800f9f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f9f8:	f000 80b3 	beq.w	800fb62 <_printf_i+0x182>
 800f9fc:	d822      	bhi.n	800fa44 <_printf_i+0x64>
 800f9fe:	2963      	cmp	r1, #99	; 0x63
 800fa00:	d036      	beq.n	800fa70 <_printf_i+0x90>
 800fa02:	d80a      	bhi.n	800fa1a <_printf_i+0x3a>
 800fa04:	2900      	cmp	r1, #0
 800fa06:	f000 80b9 	beq.w	800fb7c <_printf_i+0x19c>
 800fa0a:	2958      	cmp	r1, #88	; 0x58
 800fa0c:	f000 8083 	beq.w	800fb16 <_printf_i+0x136>
 800fa10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fa14:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800fa18:	e032      	b.n	800fa80 <_printf_i+0xa0>
 800fa1a:	2964      	cmp	r1, #100	; 0x64
 800fa1c:	d001      	beq.n	800fa22 <_printf_i+0x42>
 800fa1e:	2969      	cmp	r1, #105	; 0x69
 800fa20:	d1f6      	bne.n	800fa10 <_printf_i+0x30>
 800fa22:	6820      	ldr	r0, [r4, #0]
 800fa24:	6813      	ldr	r3, [r2, #0]
 800fa26:	0605      	lsls	r5, r0, #24
 800fa28:	f103 0104 	add.w	r1, r3, #4
 800fa2c:	d52a      	bpl.n	800fa84 <_printf_i+0xa4>
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	6011      	str	r1, [r2, #0]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	da03      	bge.n	800fa3e <_printf_i+0x5e>
 800fa36:	222d      	movs	r2, #45	; 0x2d
 800fa38:	425b      	negs	r3, r3
 800fa3a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800fa3e:	486f      	ldr	r0, [pc, #444]	; (800fbfc <_printf_i+0x21c>)
 800fa40:	220a      	movs	r2, #10
 800fa42:	e039      	b.n	800fab8 <_printf_i+0xd8>
 800fa44:	2973      	cmp	r1, #115	; 0x73
 800fa46:	f000 809d 	beq.w	800fb84 <_printf_i+0x1a4>
 800fa4a:	d808      	bhi.n	800fa5e <_printf_i+0x7e>
 800fa4c:	296f      	cmp	r1, #111	; 0x6f
 800fa4e:	d020      	beq.n	800fa92 <_printf_i+0xb2>
 800fa50:	2970      	cmp	r1, #112	; 0x70
 800fa52:	d1dd      	bne.n	800fa10 <_printf_i+0x30>
 800fa54:	6823      	ldr	r3, [r4, #0]
 800fa56:	f043 0320 	orr.w	r3, r3, #32
 800fa5a:	6023      	str	r3, [r4, #0]
 800fa5c:	e003      	b.n	800fa66 <_printf_i+0x86>
 800fa5e:	2975      	cmp	r1, #117	; 0x75
 800fa60:	d017      	beq.n	800fa92 <_printf_i+0xb2>
 800fa62:	2978      	cmp	r1, #120	; 0x78
 800fa64:	d1d4      	bne.n	800fa10 <_printf_i+0x30>
 800fa66:	2378      	movs	r3, #120	; 0x78
 800fa68:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fa6c:	4864      	ldr	r0, [pc, #400]	; (800fc00 <_printf_i+0x220>)
 800fa6e:	e055      	b.n	800fb1c <_printf_i+0x13c>
 800fa70:	6813      	ldr	r3, [r2, #0]
 800fa72:	1d19      	adds	r1, r3, #4
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	6011      	str	r1, [r2, #0]
 800fa78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fa7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fa80:	2301      	movs	r3, #1
 800fa82:	e08c      	b.n	800fb9e <_printf_i+0x1be>
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	6011      	str	r1, [r2, #0]
 800fa88:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fa8c:	bf18      	it	ne
 800fa8e:	b21b      	sxthne	r3, r3
 800fa90:	e7cf      	b.n	800fa32 <_printf_i+0x52>
 800fa92:	6813      	ldr	r3, [r2, #0]
 800fa94:	6825      	ldr	r5, [r4, #0]
 800fa96:	1d18      	adds	r0, r3, #4
 800fa98:	6010      	str	r0, [r2, #0]
 800fa9a:	0628      	lsls	r0, r5, #24
 800fa9c:	d501      	bpl.n	800faa2 <_printf_i+0xc2>
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	e002      	b.n	800faa8 <_printf_i+0xc8>
 800faa2:	0668      	lsls	r0, r5, #25
 800faa4:	d5fb      	bpl.n	800fa9e <_printf_i+0xbe>
 800faa6:	881b      	ldrh	r3, [r3, #0]
 800faa8:	4854      	ldr	r0, [pc, #336]	; (800fbfc <_printf_i+0x21c>)
 800faaa:	296f      	cmp	r1, #111	; 0x6f
 800faac:	bf14      	ite	ne
 800faae:	220a      	movne	r2, #10
 800fab0:	2208      	moveq	r2, #8
 800fab2:	2100      	movs	r1, #0
 800fab4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fab8:	6865      	ldr	r5, [r4, #4]
 800faba:	60a5      	str	r5, [r4, #8]
 800fabc:	2d00      	cmp	r5, #0
 800fabe:	f2c0 8095 	blt.w	800fbec <_printf_i+0x20c>
 800fac2:	6821      	ldr	r1, [r4, #0]
 800fac4:	f021 0104 	bic.w	r1, r1, #4
 800fac8:	6021      	str	r1, [r4, #0]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d13d      	bne.n	800fb4a <_printf_i+0x16a>
 800face:	2d00      	cmp	r5, #0
 800fad0:	f040 808e 	bne.w	800fbf0 <_printf_i+0x210>
 800fad4:	4665      	mov	r5, ip
 800fad6:	2a08      	cmp	r2, #8
 800fad8:	d10b      	bne.n	800faf2 <_printf_i+0x112>
 800fada:	6823      	ldr	r3, [r4, #0]
 800fadc:	07db      	lsls	r3, r3, #31
 800fade:	d508      	bpl.n	800faf2 <_printf_i+0x112>
 800fae0:	6923      	ldr	r3, [r4, #16]
 800fae2:	6862      	ldr	r2, [r4, #4]
 800fae4:	429a      	cmp	r2, r3
 800fae6:	bfde      	ittt	le
 800fae8:	2330      	movle	r3, #48	; 0x30
 800faea:	f805 3c01 	strble.w	r3, [r5, #-1]
 800faee:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800faf2:	ebac 0305 	sub.w	r3, ip, r5
 800faf6:	6123      	str	r3, [r4, #16]
 800faf8:	f8cd 8000 	str.w	r8, [sp]
 800fafc:	463b      	mov	r3, r7
 800fafe:	aa03      	add	r2, sp, #12
 800fb00:	4621      	mov	r1, r4
 800fb02:	4630      	mov	r0, r6
 800fb04:	f7ff fef6 	bl	800f8f4 <_printf_common>
 800fb08:	3001      	adds	r0, #1
 800fb0a:	d14d      	bne.n	800fba8 <_printf_i+0x1c8>
 800fb0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fb10:	b005      	add	sp, #20
 800fb12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb16:	4839      	ldr	r0, [pc, #228]	; (800fbfc <_printf_i+0x21c>)
 800fb18:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800fb1c:	6813      	ldr	r3, [r2, #0]
 800fb1e:	6821      	ldr	r1, [r4, #0]
 800fb20:	1d1d      	adds	r5, r3, #4
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	6015      	str	r5, [r2, #0]
 800fb26:	060a      	lsls	r2, r1, #24
 800fb28:	d50b      	bpl.n	800fb42 <_printf_i+0x162>
 800fb2a:	07ca      	lsls	r2, r1, #31
 800fb2c:	bf44      	itt	mi
 800fb2e:	f041 0120 	orrmi.w	r1, r1, #32
 800fb32:	6021      	strmi	r1, [r4, #0]
 800fb34:	b91b      	cbnz	r3, 800fb3e <_printf_i+0x15e>
 800fb36:	6822      	ldr	r2, [r4, #0]
 800fb38:	f022 0220 	bic.w	r2, r2, #32
 800fb3c:	6022      	str	r2, [r4, #0]
 800fb3e:	2210      	movs	r2, #16
 800fb40:	e7b7      	b.n	800fab2 <_printf_i+0xd2>
 800fb42:	064d      	lsls	r5, r1, #25
 800fb44:	bf48      	it	mi
 800fb46:	b29b      	uxthmi	r3, r3
 800fb48:	e7ef      	b.n	800fb2a <_printf_i+0x14a>
 800fb4a:	4665      	mov	r5, ip
 800fb4c:	fbb3 f1f2 	udiv	r1, r3, r2
 800fb50:	fb02 3311 	mls	r3, r2, r1, r3
 800fb54:	5cc3      	ldrb	r3, [r0, r3]
 800fb56:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800fb5a:	460b      	mov	r3, r1
 800fb5c:	2900      	cmp	r1, #0
 800fb5e:	d1f5      	bne.n	800fb4c <_printf_i+0x16c>
 800fb60:	e7b9      	b.n	800fad6 <_printf_i+0xf6>
 800fb62:	6813      	ldr	r3, [r2, #0]
 800fb64:	6825      	ldr	r5, [r4, #0]
 800fb66:	6961      	ldr	r1, [r4, #20]
 800fb68:	1d18      	adds	r0, r3, #4
 800fb6a:	6010      	str	r0, [r2, #0]
 800fb6c:	0628      	lsls	r0, r5, #24
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	d501      	bpl.n	800fb76 <_printf_i+0x196>
 800fb72:	6019      	str	r1, [r3, #0]
 800fb74:	e002      	b.n	800fb7c <_printf_i+0x19c>
 800fb76:	066a      	lsls	r2, r5, #25
 800fb78:	d5fb      	bpl.n	800fb72 <_printf_i+0x192>
 800fb7a:	8019      	strh	r1, [r3, #0]
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	6123      	str	r3, [r4, #16]
 800fb80:	4665      	mov	r5, ip
 800fb82:	e7b9      	b.n	800faf8 <_printf_i+0x118>
 800fb84:	6813      	ldr	r3, [r2, #0]
 800fb86:	1d19      	adds	r1, r3, #4
 800fb88:	6011      	str	r1, [r2, #0]
 800fb8a:	681d      	ldr	r5, [r3, #0]
 800fb8c:	6862      	ldr	r2, [r4, #4]
 800fb8e:	2100      	movs	r1, #0
 800fb90:	4628      	mov	r0, r5
 800fb92:	f7f0 fb4d 	bl	8000230 <memchr>
 800fb96:	b108      	cbz	r0, 800fb9c <_printf_i+0x1bc>
 800fb98:	1b40      	subs	r0, r0, r5
 800fb9a:	6060      	str	r0, [r4, #4]
 800fb9c:	6863      	ldr	r3, [r4, #4]
 800fb9e:	6123      	str	r3, [r4, #16]
 800fba0:	2300      	movs	r3, #0
 800fba2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fba6:	e7a7      	b.n	800faf8 <_printf_i+0x118>
 800fba8:	6923      	ldr	r3, [r4, #16]
 800fbaa:	462a      	mov	r2, r5
 800fbac:	4639      	mov	r1, r7
 800fbae:	4630      	mov	r0, r6
 800fbb0:	47c0      	blx	r8
 800fbb2:	3001      	adds	r0, #1
 800fbb4:	d0aa      	beq.n	800fb0c <_printf_i+0x12c>
 800fbb6:	6823      	ldr	r3, [r4, #0]
 800fbb8:	079b      	lsls	r3, r3, #30
 800fbba:	d413      	bmi.n	800fbe4 <_printf_i+0x204>
 800fbbc:	68e0      	ldr	r0, [r4, #12]
 800fbbe:	9b03      	ldr	r3, [sp, #12]
 800fbc0:	4298      	cmp	r0, r3
 800fbc2:	bfb8      	it	lt
 800fbc4:	4618      	movlt	r0, r3
 800fbc6:	e7a3      	b.n	800fb10 <_printf_i+0x130>
 800fbc8:	2301      	movs	r3, #1
 800fbca:	464a      	mov	r2, r9
 800fbcc:	4639      	mov	r1, r7
 800fbce:	4630      	mov	r0, r6
 800fbd0:	47c0      	blx	r8
 800fbd2:	3001      	adds	r0, #1
 800fbd4:	d09a      	beq.n	800fb0c <_printf_i+0x12c>
 800fbd6:	3501      	adds	r5, #1
 800fbd8:	68e3      	ldr	r3, [r4, #12]
 800fbda:	9a03      	ldr	r2, [sp, #12]
 800fbdc:	1a9b      	subs	r3, r3, r2
 800fbde:	42ab      	cmp	r3, r5
 800fbe0:	dcf2      	bgt.n	800fbc8 <_printf_i+0x1e8>
 800fbe2:	e7eb      	b.n	800fbbc <_printf_i+0x1dc>
 800fbe4:	2500      	movs	r5, #0
 800fbe6:	f104 0919 	add.w	r9, r4, #25
 800fbea:	e7f5      	b.n	800fbd8 <_printf_i+0x1f8>
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d1ac      	bne.n	800fb4a <_printf_i+0x16a>
 800fbf0:	7803      	ldrb	r3, [r0, #0]
 800fbf2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fbf6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fbfa:	e76c      	b.n	800fad6 <_printf_i+0xf6>
 800fbfc:	080144e8 	.word	0x080144e8
 800fc00:	080144f9 	.word	0x080144f9

0800fc04 <iprintf>:
 800fc04:	b40f      	push	{r0, r1, r2, r3}
 800fc06:	4b0a      	ldr	r3, [pc, #40]	; (800fc30 <iprintf+0x2c>)
 800fc08:	b513      	push	{r0, r1, r4, lr}
 800fc0a:	681c      	ldr	r4, [r3, #0]
 800fc0c:	b124      	cbz	r4, 800fc18 <iprintf+0x14>
 800fc0e:	69a3      	ldr	r3, [r4, #24]
 800fc10:	b913      	cbnz	r3, 800fc18 <iprintf+0x14>
 800fc12:	4620      	mov	r0, r4
 800fc14:	f001 f8ac 	bl	8010d70 <__sinit>
 800fc18:	ab05      	add	r3, sp, #20
 800fc1a:	9a04      	ldr	r2, [sp, #16]
 800fc1c:	68a1      	ldr	r1, [r4, #8]
 800fc1e:	9301      	str	r3, [sp, #4]
 800fc20:	4620      	mov	r0, r4
 800fc22:	f001 fec1 	bl	80119a8 <_vfiprintf_r>
 800fc26:	b002      	add	sp, #8
 800fc28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc2c:	b004      	add	sp, #16
 800fc2e:	4770      	bx	lr
 800fc30:	20001c34 	.word	0x20001c34

0800fc34 <_puts_r>:
 800fc34:	b570      	push	{r4, r5, r6, lr}
 800fc36:	460e      	mov	r6, r1
 800fc38:	4605      	mov	r5, r0
 800fc3a:	b118      	cbz	r0, 800fc44 <_puts_r+0x10>
 800fc3c:	6983      	ldr	r3, [r0, #24]
 800fc3e:	b90b      	cbnz	r3, 800fc44 <_puts_r+0x10>
 800fc40:	f001 f896 	bl	8010d70 <__sinit>
 800fc44:	69ab      	ldr	r3, [r5, #24]
 800fc46:	68ac      	ldr	r4, [r5, #8]
 800fc48:	b913      	cbnz	r3, 800fc50 <_puts_r+0x1c>
 800fc4a:	4628      	mov	r0, r5
 800fc4c:	f001 f890 	bl	8010d70 <__sinit>
 800fc50:	4b23      	ldr	r3, [pc, #140]	; (800fce0 <_puts_r+0xac>)
 800fc52:	429c      	cmp	r4, r3
 800fc54:	d117      	bne.n	800fc86 <_puts_r+0x52>
 800fc56:	686c      	ldr	r4, [r5, #4]
 800fc58:	89a3      	ldrh	r3, [r4, #12]
 800fc5a:	071b      	lsls	r3, r3, #28
 800fc5c:	d51d      	bpl.n	800fc9a <_puts_r+0x66>
 800fc5e:	6923      	ldr	r3, [r4, #16]
 800fc60:	b1db      	cbz	r3, 800fc9a <_puts_r+0x66>
 800fc62:	3e01      	subs	r6, #1
 800fc64:	68a3      	ldr	r3, [r4, #8]
 800fc66:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fc6a:	3b01      	subs	r3, #1
 800fc6c:	60a3      	str	r3, [r4, #8]
 800fc6e:	b9e9      	cbnz	r1, 800fcac <_puts_r+0x78>
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	da2e      	bge.n	800fcd2 <_puts_r+0x9e>
 800fc74:	4622      	mov	r2, r4
 800fc76:	210a      	movs	r1, #10
 800fc78:	4628      	mov	r0, r5
 800fc7a:	f000 f883 	bl	800fd84 <__swbuf_r>
 800fc7e:	3001      	adds	r0, #1
 800fc80:	d011      	beq.n	800fca6 <_puts_r+0x72>
 800fc82:	200a      	movs	r0, #10
 800fc84:	e011      	b.n	800fcaa <_puts_r+0x76>
 800fc86:	4b17      	ldr	r3, [pc, #92]	; (800fce4 <_puts_r+0xb0>)
 800fc88:	429c      	cmp	r4, r3
 800fc8a:	d101      	bne.n	800fc90 <_puts_r+0x5c>
 800fc8c:	68ac      	ldr	r4, [r5, #8]
 800fc8e:	e7e3      	b.n	800fc58 <_puts_r+0x24>
 800fc90:	4b15      	ldr	r3, [pc, #84]	; (800fce8 <_puts_r+0xb4>)
 800fc92:	429c      	cmp	r4, r3
 800fc94:	bf08      	it	eq
 800fc96:	68ec      	ldreq	r4, [r5, #12]
 800fc98:	e7de      	b.n	800fc58 <_puts_r+0x24>
 800fc9a:	4621      	mov	r1, r4
 800fc9c:	4628      	mov	r0, r5
 800fc9e:	f000 f8c3 	bl	800fe28 <__swsetup_r>
 800fca2:	2800      	cmp	r0, #0
 800fca4:	d0dd      	beq.n	800fc62 <_puts_r+0x2e>
 800fca6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fcaa:	bd70      	pop	{r4, r5, r6, pc}
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	da04      	bge.n	800fcba <_puts_r+0x86>
 800fcb0:	69a2      	ldr	r2, [r4, #24]
 800fcb2:	429a      	cmp	r2, r3
 800fcb4:	dc06      	bgt.n	800fcc4 <_puts_r+0x90>
 800fcb6:	290a      	cmp	r1, #10
 800fcb8:	d004      	beq.n	800fcc4 <_puts_r+0x90>
 800fcba:	6823      	ldr	r3, [r4, #0]
 800fcbc:	1c5a      	adds	r2, r3, #1
 800fcbe:	6022      	str	r2, [r4, #0]
 800fcc0:	7019      	strb	r1, [r3, #0]
 800fcc2:	e7cf      	b.n	800fc64 <_puts_r+0x30>
 800fcc4:	4622      	mov	r2, r4
 800fcc6:	4628      	mov	r0, r5
 800fcc8:	f000 f85c 	bl	800fd84 <__swbuf_r>
 800fccc:	3001      	adds	r0, #1
 800fcce:	d1c9      	bne.n	800fc64 <_puts_r+0x30>
 800fcd0:	e7e9      	b.n	800fca6 <_puts_r+0x72>
 800fcd2:	6823      	ldr	r3, [r4, #0]
 800fcd4:	200a      	movs	r0, #10
 800fcd6:	1c5a      	adds	r2, r3, #1
 800fcd8:	6022      	str	r2, [r4, #0]
 800fcda:	7018      	strb	r0, [r3, #0]
 800fcdc:	e7e5      	b.n	800fcaa <_puts_r+0x76>
 800fcde:	bf00      	nop
 800fce0:	08014538 	.word	0x08014538
 800fce4:	08014558 	.word	0x08014558
 800fce8:	08014518 	.word	0x08014518

0800fcec <puts>:
 800fcec:	4b02      	ldr	r3, [pc, #8]	; (800fcf8 <puts+0xc>)
 800fcee:	4601      	mov	r1, r0
 800fcf0:	6818      	ldr	r0, [r3, #0]
 800fcf2:	f7ff bf9f 	b.w	800fc34 <_puts_r>
 800fcf6:	bf00      	nop
 800fcf8:	20001c34 	.word	0x20001c34

0800fcfc <sniprintf>:
 800fcfc:	b40c      	push	{r2, r3}
 800fcfe:	b530      	push	{r4, r5, lr}
 800fd00:	4b17      	ldr	r3, [pc, #92]	; (800fd60 <sniprintf+0x64>)
 800fd02:	1e0c      	subs	r4, r1, #0
 800fd04:	b09d      	sub	sp, #116	; 0x74
 800fd06:	681d      	ldr	r5, [r3, #0]
 800fd08:	da08      	bge.n	800fd1c <sniprintf+0x20>
 800fd0a:	238b      	movs	r3, #139	; 0x8b
 800fd0c:	602b      	str	r3, [r5, #0]
 800fd0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fd12:	b01d      	add	sp, #116	; 0x74
 800fd14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fd18:	b002      	add	sp, #8
 800fd1a:	4770      	bx	lr
 800fd1c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800fd20:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fd24:	bf14      	ite	ne
 800fd26:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800fd2a:	4623      	moveq	r3, r4
 800fd2c:	9304      	str	r3, [sp, #16]
 800fd2e:	9307      	str	r3, [sp, #28]
 800fd30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fd34:	9002      	str	r0, [sp, #8]
 800fd36:	9006      	str	r0, [sp, #24]
 800fd38:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fd3c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800fd3e:	ab21      	add	r3, sp, #132	; 0x84
 800fd40:	a902      	add	r1, sp, #8
 800fd42:	4628      	mov	r0, r5
 800fd44:	9301      	str	r3, [sp, #4]
 800fd46:	f001 fd0d 	bl	8011764 <_svfiprintf_r>
 800fd4a:	1c43      	adds	r3, r0, #1
 800fd4c:	bfbc      	itt	lt
 800fd4e:	238b      	movlt	r3, #139	; 0x8b
 800fd50:	602b      	strlt	r3, [r5, #0]
 800fd52:	2c00      	cmp	r4, #0
 800fd54:	d0dd      	beq.n	800fd12 <sniprintf+0x16>
 800fd56:	9b02      	ldr	r3, [sp, #8]
 800fd58:	2200      	movs	r2, #0
 800fd5a:	701a      	strb	r2, [r3, #0]
 800fd5c:	e7d9      	b.n	800fd12 <sniprintf+0x16>
 800fd5e:	bf00      	nop
 800fd60:	20001c34 	.word	0x20001c34

0800fd64 <strcat>:
 800fd64:	b510      	push	{r4, lr}
 800fd66:	4603      	mov	r3, r0
 800fd68:	781a      	ldrb	r2, [r3, #0]
 800fd6a:	1c5c      	adds	r4, r3, #1
 800fd6c:	b93a      	cbnz	r2, 800fd7e <strcat+0x1a>
 800fd6e:	3b01      	subs	r3, #1
 800fd70:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fd74:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fd78:	2a00      	cmp	r2, #0
 800fd7a:	d1f9      	bne.n	800fd70 <strcat+0xc>
 800fd7c:	bd10      	pop	{r4, pc}
 800fd7e:	4623      	mov	r3, r4
 800fd80:	e7f2      	b.n	800fd68 <strcat+0x4>
	...

0800fd84 <__swbuf_r>:
 800fd84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd86:	460e      	mov	r6, r1
 800fd88:	4614      	mov	r4, r2
 800fd8a:	4605      	mov	r5, r0
 800fd8c:	b118      	cbz	r0, 800fd96 <__swbuf_r+0x12>
 800fd8e:	6983      	ldr	r3, [r0, #24]
 800fd90:	b90b      	cbnz	r3, 800fd96 <__swbuf_r+0x12>
 800fd92:	f000 ffed 	bl	8010d70 <__sinit>
 800fd96:	4b21      	ldr	r3, [pc, #132]	; (800fe1c <__swbuf_r+0x98>)
 800fd98:	429c      	cmp	r4, r3
 800fd9a:	d12a      	bne.n	800fdf2 <__swbuf_r+0x6e>
 800fd9c:	686c      	ldr	r4, [r5, #4]
 800fd9e:	69a3      	ldr	r3, [r4, #24]
 800fda0:	60a3      	str	r3, [r4, #8]
 800fda2:	89a3      	ldrh	r3, [r4, #12]
 800fda4:	071a      	lsls	r2, r3, #28
 800fda6:	d52e      	bpl.n	800fe06 <__swbuf_r+0x82>
 800fda8:	6923      	ldr	r3, [r4, #16]
 800fdaa:	b363      	cbz	r3, 800fe06 <__swbuf_r+0x82>
 800fdac:	6923      	ldr	r3, [r4, #16]
 800fdae:	6820      	ldr	r0, [r4, #0]
 800fdb0:	1ac0      	subs	r0, r0, r3
 800fdb2:	6963      	ldr	r3, [r4, #20]
 800fdb4:	b2f6      	uxtb	r6, r6
 800fdb6:	4283      	cmp	r3, r0
 800fdb8:	4637      	mov	r7, r6
 800fdba:	dc04      	bgt.n	800fdc6 <__swbuf_r+0x42>
 800fdbc:	4621      	mov	r1, r4
 800fdbe:	4628      	mov	r0, r5
 800fdc0:	f000 ff6c 	bl	8010c9c <_fflush_r>
 800fdc4:	bb28      	cbnz	r0, 800fe12 <__swbuf_r+0x8e>
 800fdc6:	68a3      	ldr	r3, [r4, #8]
 800fdc8:	3b01      	subs	r3, #1
 800fdca:	60a3      	str	r3, [r4, #8]
 800fdcc:	6823      	ldr	r3, [r4, #0]
 800fdce:	1c5a      	adds	r2, r3, #1
 800fdd0:	6022      	str	r2, [r4, #0]
 800fdd2:	701e      	strb	r6, [r3, #0]
 800fdd4:	6963      	ldr	r3, [r4, #20]
 800fdd6:	3001      	adds	r0, #1
 800fdd8:	4283      	cmp	r3, r0
 800fdda:	d004      	beq.n	800fde6 <__swbuf_r+0x62>
 800fddc:	89a3      	ldrh	r3, [r4, #12]
 800fdde:	07db      	lsls	r3, r3, #31
 800fde0:	d519      	bpl.n	800fe16 <__swbuf_r+0x92>
 800fde2:	2e0a      	cmp	r6, #10
 800fde4:	d117      	bne.n	800fe16 <__swbuf_r+0x92>
 800fde6:	4621      	mov	r1, r4
 800fde8:	4628      	mov	r0, r5
 800fdea:	f000 ff57 	bl	8010c9c <_fflush_r>
 800fdee:	b190      	cbz	r0, 800fe16 <__swbuf_r+0x92>
 800fdf0:	e00f      	b.n	800fe12 <__swbuf_r+0x8e>
 800fdf2:	4b0b      	ldr	r3, [pc, #44]	; (800fe20 <__swbuf_r+0x9c>)
 800fdf4:	429c      	cmp	r4, r3
 800fdf6:	d101      	bne.n	800fdfc <__swbuf_r+0x78>
 800fdf8:	68ac      	ldr	r4, [r5, #8]
 800fdfa:	e7d0      	b.n	800fd9e <__swbuf_r+0x1a>
 800fdfc:	4b09      	ldr	r3, [pc, #36]	; (800fe24 <__swbuf_r+0xa0>)
 800fdfe:	429c      	cmp	r4, r3
 800fe00:	bf08      	it	eq
 800fe02:	68ec      	ldreq	r4, [r5, #12]
 800fe04:	e7cb      	b.n	800fd9e <__swbuf_r+0x1a>
 800fe06:	4621      	mov	r1, r4
 800fe08:	4628      	mov	r0, r5
 800fe0a:	f000 f80d 	bl	800fe28 <__swsetup_r>
 800fe0e:	2800      	cmp	r0, #0
 800fe10:	d0cc      	beq.n	800fdac <__swbuf_r+0x28>
 800fe12:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800fe16:	4638      	mov	r0, r7
 800fe18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe1a:	bf00      	nop
 800fe1c:	08014538 	.word	0x08014538
 800fe20:	08014558 	.word	0x08014558
 800fe24:	08014518 	.word	0x08014518

0800fe28 <__swsetup_r>:
 800fe28:	4b32      	ldr	r3, [pc, #200]	; (800fef4 <__swsetup_r+0xcc>)
 800fe2a:	b570      	push	{r4, r5, r6, lr}
 800fe2c:	681d      	ldr	r5, [r3, #0]
 800fe2e:	4606      	mov	r6, r0
 800fe30:	460c      	mov	r4, r1
 800fe32:	b125      	cbz	r5, 800fe3e <__swsetup_r+0x16>
 800fe34:	69ab      	ldr	r3, [r5, #24]
 800fe36:	b913      	cbnz	r3, 800fe3e <__swsetup_r+0x16>
 800fe38:	4628      	mov	r0, r5
 800fe3a:	f000 ff99 	bl	8010d70 <__sinit>
 800fe3e:	4b2e      	ldr	r3, [pc, #184]	; (800fef8 <__swsetup_r+0xd0>)
 800fe40:	429c      	cmp	r4, r3
 800fe42:	d10f      	bne.n	800fe64 <__swsetup_r+0x3c>
 800fe44:	686c      	ldr	r4, [r5, #4]
 800fe46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe4a:	b29a      	uxth	r2, r3
 800fe4c:	0715      	lsls	r5, r2, #28
 800fe4e:	d42c      	bmi.n	800feaa <__swsetup_r+0x82>
 800fe50:	06d0      	lsls	r0, r2, #27
 800fe52:	d411      	bmi.n	800fe78 <__swsetup_r+0x50>
 800fe54:	2209      	movs	r2, #9
 800fe56:	6032      	str	r2, [r6, #0]
 800fe58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe5c:	81a3      	strh	r3, [r4, #12]
 800fe5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fe62:	e03e      	b.n	800fee2 <__swsetup_r+0xba>
 800fe64:	4b25      	ldr	r3, [pc, #148]	; (800fefc <__swsetup_r+0xd4>)
 800fe66:	429c      	cmp	r4, r3
 800fe68:	d101      	bne.n	800fe6e <__swsetup_r+0x46>
 800fe6a:	68ac      	ldr	r4, [r5, #8]
 800fe6c:	e7eb      	b.n	800fe46 <__swsetup_r+0x1e>
 800fe6e:	4b24      	ldr	r3, [pc, #144]	; (800ff00 <__swsetup_r+0xd8>)
 800fe70:	429c      	cmp	r4, r3
 800fe72:	bf08      	it	eq
 800fe74:	68ec      	ldreq	r4, [r5, #12]
 800fe76:	e7e6      	b.n	800fe46 <__swsetup_r+0x1e>
 800fe78:	0751      	lsls	r1, r2, #29
 800fe7a:	d512      	bpl.n	800fea2 <__swsetup_r+0x7a>
 800fe7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fe7e:	b141      	cbz	r1, 800fe92 <__swsetup_r+0x6a>
 800fe80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fe84:	4299      	cmp	r1, r3
 800fe86:	d002      	beq.n	800fe8e <__swsetup_r+0x66>
 800fe88:	4630      	mov	r0, r6
 800fe8a:	f001 fb69 	bl	8011560 <_free_r>
 800fe8e:	2300      	movs	r3, #0
 800fe90:	6363      	str	r3, [r4, #52]	; 0x34
 800fe92:	89a3      	ldrh	r3, [r4, #12]
 800fe94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fe98:	81a3      	strh	r3, [r4, #12]
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	6063      	str	r3, [r4, #4]
 800fe9e:	6923      	ldr	r3, [r4, #16]
 800fea0:	6023      	str	r3, [r4, #0]
 800fea2:	89a3      	ldrh	r3, [r4, #12]
 800fea4:	f043 0308 	orr.w	r3, r3, #8
 800fea8:	81a3      	strh	r3, [r4, #12]
 800feaa:	6923      	ldr	r3, [r4, #16]
 800feac:	b94b      	cbnz	r3, 800fec2 <__swsetup_r+0x9a>
 800feae:	89a3      	ldrh	r3, [r4, #12]
 800feb0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800feb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800feb8:	d003      	beq.n	800fec2 <__swsetup_r+0x9a>
 800feba:	4621      	mov	r1, r4
 800febc:	4630      	mov	r0, r6
 800febe:	f001 f813 	bl	8010ee8 <__smakebuf_r>
 800fec2:	89a2      	ldrh	r2, [r4, #12]
 800fec4:	f012 0301 	ands.w	r3, r2, #1
 800fec8:	d00c      	beq.n	800fee4 <__swsetup_r+0xbc>
 800feca:	2300      	movs	r3, #0
 800fecc:	60a3      	str	r3, [r4, #8]
 800fece:	6963      	ldr	r3, [r4, #20]
 800fed0:	425b      	negs	r3, r3
 800fed2:	61a3      	str	r3, [r4, #24]
 800fed4:	6923      	ldr	r3, [r4, #16]
 800fed6:	b953      	cbnz	r3, 800feee <__swsetup_r+0xc6>
 800fed8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fedc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800fee0:	d1ba      	bne.n	800fe58 <__swsetup_r+0x30>
 800fee2:	bd70      	pop	{r4, r5, r6, pc}
 800fee4:	0792      	lsls	r2, r2, #30
 800fee6:	bf58      	it	pl
 800fee8:	6963      	ldrpl	r3, [r4, #20]
 800feea:	60a3      	str	r3, [r4, #8]
 800feec:	e7f2      	b.n	800fed4 <__swsetup_r+0xac>
 800feee:	2000      	movs	r0, #0
 800fef0:	e7f7      	b.n	800fee2 <__swsetup_r+0xba>
 800fef2:	bf00      	nop
 800fef4:	20001c34 	.word	0x20001c34
 800fef8:	08014538 	.word	0x08014538
 800fefc:	08014558 	.word	0x08014558
 800ff00:	08014518 	.word	0x08014518

0800ff04 <quorem>:
 800ff04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff08:	6903      	ldr	r3, [r0, #16]
 800ff0a:	690c      	ldr	r4, [r1, #16]
 800ff0c:	42a3      	cmp	r3, r4
 800ff0e:	4680      	mov	r8, r0
 800ff10:	f2c0 8082 	blt.w	8010018 <quorem+0x114>
 800ff14:	3c01      	subs	r4, #1
 800ff16:	f101 0714 	add.w	r7, r1, #20
 800ff1a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800ff1e:	f100 0614 	add.w	r6, r0, #20
 800ff22:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800ff26:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800ff2a:	eb06 030c 	add.w	r3, r6, ip
 800ff2e:	3501      	adds	r5, #1
 800ff30:	eb07 090c 	add.w	r9, r7, ip
 800ff34:	9301      	str	r3, [sp, #4]
 800ff36:	fbb0 f5f5 	udiv	r5, r0, r5
 800ff3a:	b395      	cbz	r5, 800ffa2 <quorem+0x9e>
 800ff3c:	f04f 0a00 	mov.w	sl, #0
 800ff40:	4638      	mov	r0, r7
 800ff42:	46b6      	mov	lr, r6
 800ff44:	46d3      	mov	fp, sl
 800ff46:	f850 2b04 	ldr.w	r2, [r0], #4
 800ff4a:	b293      	uxth	r3, r2
 800ff4c:	fb05 a303 	mla	r3, r5, r3, sl
 800ff50:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ff54:	b29b      	uxth	r3, r3
 800ff56:	ebab 0303 	sub.w	r3, fp, r3
 800ff5a:	0c12      	lsrs	r2, r2, #16
 800ff5c:	f8de b000 	ldr.w	fp, [lr]
 800ff60:	fb05 a202 	mla	r2, r5, r2, sl
 800ff64:	fa13 f38b 	uxtah	r3, r3, fp
 800ff68:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800ff6c:	fa1f fb82 	uxth.w	fp, r2
 800ff70:	f8de 2000 	ldr.w	r2, [lr]
 800ff74:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800ff78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ff7c:	b29b      	uxth	r3, r3
 800ff7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ff82:	4581      	cmp	r9, r0
 800ff84:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800ff88:	f84e 3b04 	str.w	r3, [lr], #4
 800ff8c:	d2db      	bcs.n	800ff46 <quorem+0x42>
 800ff8e:	f856 300c 	ldr.w	r3, [r6, ip]
 800ff92:	b933      	cbnz	r3, 800ffa2 <quorem+0x9e>
 800ff94:	9b01      	ldr	r3, [sp, #4]
 800ff96:	3b04      	subs	r3, #4
 800ff98:	429e      	cmp	r6, r3
 800ff9a:	461a      	mov	r2, r3
 800ff9c:	d330      	bcc.n	8010000 <quorem+0xfc>
 800ff9e:	f8c8 4010 	str.w	r4, [r8, #16]
 800ffa2:	4640      	mov	r0, r8
 800ffa4:	f001 fa08 	bl	80113b8 <__mcmp>
 800ffa8:	2800      	cmp	r0, #0
 800ffaa:	db25      	blt.n	800fff8 <quorem+0xf4>
 800ffac:	3501      	adds	r5, #1
 800ffae:	4630      	mov	r0, r6
 800ffb0:	f04f 0c00 	mov.w	ip, #0
 800ffb4:	f857 2b04 	ldr.w	r2, [r7], #4
 800ffb8:	f8d0 e000 	ldr.w	lr, [r0]
 800ffbc:	b293      	uxth	r3, r2
 800ffbe:	ebac 0303 	sub.w	r3, ip, r3
 800ffc2:	0c12      	lsrs	r2, r2, #16
 800ffc4:	fa13 f38e 	uxtah	r3, r3, lr
 800ffc8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ffcc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ffd0:	b29b      	uxth	r3, r3
 800ffd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ffd6:	45b9      	cmp	r9, r7
 800ffd8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ffdc:	f840 3b04 	str.w	r3, [r0], #4
 800ffe0:	d2e8      	bcs.n	800ffb4 <quorem+0xb0>
 800ffe2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800ffe6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800ffea:	b92a      	cbnz	r2, 800fff8 <quorem+0xf4>
 800ffec:	3b04      	subs	r3, #4
 800ffee:	429e      	cmp	r6, r3
 800fff0:	461a      	mov	r2, r3
 800fff2:	d30b      	bcc.n	801000c <quorem+0x108>
 800fff4:	f8c8 4010 	str.w	r4, [r8, #16]
 800fff8:	4628      	mov	r0, r5
 800fffa:	b003      	add	sp, #12
 800fffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010000:	6812      	ldr	r2, [r2, #0]
 8010002:	3b04      	subs	r3, #4
 8010004:	2a00      	cmp	r2, #0
 8010006:	d1ca      	bne.n	800ff9e <quorem+0x9a>
 8010008:	3c01      	subs	r4, #1
 801000a:	e7c5      	b.n	800ff98 <quorem+0x94>
 801000c:	6812      	ldr	r2, [r2, #0]
 801000e:	3b04      	subs	r3, #4
 8010010:	2a00      	cmp	r2, #0
 8010012:	d1ef      	bne.n	800fff4 <quorem+0xf0>
 8010014:	3c01      	subs	r4, #1
 8010016:	e7ea      	b.n	800ffee <quorem+0xea>
 8010018:	2000      	movs	r0, #0
 801001a:	e7ee      	b.n	800fffa <quorem+0xf6>
 801001c:	0000      	movs	r0, r0
	...

08010020 <_dtoa_r>:
 8010020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010024:	ec57 6b10 	vmov	r6, r7, d0
 8010028:	b097      	sub	sp, #92	; 0x5c
 801002a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801002c:	9106      	str	r1, [sp, #24]
 801002e:	4604      	mov	r4, r0
 8010030:	920b      	str	r2, [sp, #44]	; 0x2c
 8010032:	9312      	str	r3, [sp, #72]	; 0x48
 8010034:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010038:	e9cd 6700 	strd	r6, r7, [sp]
 801003c:	b93d      	cbnz	r5, 801004e <_dtoa_r+0x2e>
 801003e:	2010      	movs	r0, #16
 8010040:	f000 ff92 	bl	8010f68 <malloc>
 8010044:	6260      	str	r0, [r4, #36]	; 0x24
 8010046:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801004a:	6005      	str	r5, [r0, #0]
 801004c:	60c5      	str	r5, [r0, #12]
 801004e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010050:	6819      	ldr	r1, [r3, #0]
 8010052:	b151      	cbz	r1, 801006a <_dtoa_r+0x4a>
 8010054:	685a      	ldr	r2, [r3, #4]
 8010056:	604a      	str	r2, [r1, #4]
 8010058:	2301      	movs	r3, #1
 801005a:	4093      	lsls	r3, r2
 801005c:	608b      	str	r3, [r1, #8]
 801005e:	4620      	mov	r0, r4
 8010060:	f000 ffc9 	bl	8010ff6 <_Bfree>
 8010064:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010066:	2200      	movs	r2, #0
 8010068:	601a      	str	r2, [r3, #0]
 801006a:	1e3b      	subs	r3, r7, #0
 801006c:	bfbb      	ittet	lt
 801006e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010072:	9301      	strlt	r3, [sp, #4]
 8010074:	2300      	movge	r3, #0
 8010076:	2201      	movlt	r2, #1
 8010078:	bfac      	ite	ge
 801007a:	f8c8 3000 	strge.w	r3, [r8]
 801007e:	f8c8 2000 	strlt.w	r2, [r8]
 8010082:	4baf      	ldr	r3, [pc, #700]	; (8010340 <_dtoa_r+0x320>)
 8010084:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010088:	ea33 0308 	bics.w	r3, r3, r8
 801008c:	d114      	bne.n	80100b8 <_dtoa_r+0x98>
 801008e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010090:	f242 730f 	movw	r3, #9999	; 0x270f
 8010094:	6013      	str	r3, [r2, #0]
 8010096:	9b00      	ldr	r3, [sp, #0]
 8010098:	b923      	cbnz	r3, 80100a4 <_dtoa_r+0x84>
 801009a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801009e:	2800      	cmp	r0, #0
 80100a0:	f000 8542 	beq.w	8010b28 <_dtoa_r+0xb08>
 80100a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80100a6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8010354 <_dtoa_r+0x334>
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	f000 8544 	beq.w	8010b38 <_dtoa_r+0xb18>
 80100b0:	f10b 0303 	add.w	r3, fp, #3
 80100b4:	f000 bd3e 	b.w	8010b34 <_dtoa_r+0xb14>
 80100b8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80100bc:	2200      	movs	r2, #0
 80100be:	2300      	movs	r3, #0
 80100c0:	4630      	mov	r0, r6
 80100c2:	4639      	mov	r1, r7
 80100c4:	f7f0 fd28 	bl	8000b18 <__aeabi_dcmpeq>
 80100c8:	4681      	mov	r9, r0
 80100ca:	b168      	cbz	r0, 80100e8 <_dtoa_r+0xc8>
 80100cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80100ce:	2301      	movs	r3, #1
 80100d0:	6013      	str	r3, [r2, #0]
 80100d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	f000 8524 	beq.w	8010b22 <_dtoa_r+0xb02>
 80100da:	4b9a      	ldr	r3, [pc, #616]	; (8010344 <_dtoa_r+0x324>)
 80100dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80100de:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 80100e2:	6013      	str	r3, [r2, #0]
 80100e4:	f000 bd28 	b.w	8010b38 <_dtoa_r+0xb18>
 80100e8:	aa14      	add	r2, sp, #80	; 0x50
 80100ea:	a915      	add	r1, sp, #84	; 0x54
 80100ec:	ec47 6b10 	vmov	d0, r6, r7
 80100f0:	4620      	mov	r0, r4
 80100f2:	f001 f9d8 	bl	80114a6 <__d2b>
 80100f6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80100fa:	9004      	str	r0, [sp, #16]
 80100fc:	2d00      	cmp	r5, #0
 80100fe:	d07c      	beq.n	80101fa <_dtoa_r+0x1da>
 8010100:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010104:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8010108:	46b2      	mov	sl, r6
 801010a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801010e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010112:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8010116:	2200      	movs	r2, #0
 8010118:	4b8b      	ldr	r3, [pc, #556]	; (8010348 <_dtoa_r+0x328>)
 801011a:	4650      	mov	r0, sl
 801011c:	4659      	mov	r1, fp
 801011e:	f7f0 f8db 	bl	80002d8 <__aeabi_dsub>
 8010122:	a381      	add	r3, pc, #516	; (adr r3, 8010328 <_dtoa_r+0x308>)
 8010124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010128:	f7f0 fa8e 	bl	8000648 <__aeabi_dmul>
 801012c:	a380      	add	r3, pc, #512	; (adr r3, 8010330 <_dtoa_r+0x310>)
 801012e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010132:	f7f0 f8d3 	bl	80002dc <__adddf3>
 8010136:	4606      	mov	r6, r0
 8010138:	4628      	mov	r0, r5
 801013a:	460f      	mov	r7, r1
 801013c:	f7f0 fa1a 	bl	8000574 <__aeabi_i2d>
 8010140:	a37d      	add	r3, pc, #500	; (adr r3, 8010338 <_dtoa_r+0x318>)
 8010142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010146:	f7f0 fa7f 	bl	8000648 <__aeabi_dmul>
 801014a:	4602      	mov	r2, r0
 801014c:	460b      	mov	r3, r1
 801014e:	4630      	mov	r0, r6
 8010150:	4639      	mov	r1, r7
 8010152:	f7f0 f8c3 	bl	80002dc <__adddf3>
 8010156:	4606      	mov	r6, r0
 8010158:	460f      	mov	r7, r1
 801015a:	f7f0 fd25 	bl	8000ba8 <__aeabi_d2iz>
 801015e:	2200      	movs	r2, #0
 8010160:	4682      	mov	sl, r0
 8010162:	2300      	movs	r3, #0
 8010164:	4630      	mov	r0, r6
 8010166:	4639      	mov	r1, r7
 8010168:	f7f0 fce0 	bl	8000b2c <__aeabi_dcmplt>
 801016c:	b148      	cbz	r0, 8010182 <_dtoa_r+0x162>
 801016e:	4650      	mov	r0, sl
 8010170:	f7f0 fa00 	bl	8000574 <__aeabi_i2d>
 8010174:	4632      	mov	r2, r6
 8010176:	463b      	mov	r3, r7
 8010178:	f7f0 fcce 	bl	8000b18 <__aeabi_dcmpeq>
 801017c:	b908      	cbnz	r0, 8010182 <_dtoa_r+0x162>
 801017e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010182:	f1ba 0f16 	cmp.w	sl, #22
 8010186:	d859      	bhi.n	801023c <_dtoa_r+0x21c>
 8010188:	4970      	ldr	r1, [pc, #448]	; (801034c <_dtoa_r+0x32c>)
 801018a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801018e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010192:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010196:	f7f0 fce7 	bl	8000b68 <__aeabi_dcmpgt>
 801019a:	2800      	cmp	r0, #0
 801019c:	d050      	beq.n	8010240 <_dtoa_r+0x220>
 801019e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80101a2:	2300      	movs	r3, #0
 80101a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80101a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80101a8:	1b5d      	subs	r5, r3, r5
 80101aa:	f1b5 0801 	subs.w	r8, r5, #1
 80101ae:	bf49      	itett	mi
 80101b0:	f1c5 0301 	rsbmi	r3, r5, #1
 80101b4:	2300      	movpl	r3, #0
 80101b6:	9305      	strmi	r3, [sp, #20]
 80101b8:	f04f 0800 	movmi.w	r8, #0
 80101bc:	bf58      	it	pl
 80101be:	9305      	strpl	r3, [sp, #20]
 80101c0:	f1ba 0f00 	cmp.w	sl, #0
 80101c4:	db3e      	blt.n	8010244 <_dtoa_r+0x224>
 80101c6:	2300      	movs	r3, #0
 80101c8:	44d0      	add	r8, sl
 80101ca:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80101ce:	9307      	str	r3, [sp, #28]
 80101d0:	9b06      	ldr	r3, [sp, #24]
 80101d2:	2b09      	cmp	r3, #9
 80101d4:	f200 8090 	bhi.w	80102f8 <_dtoa_r+0x2d8>
 80101d8:	2b05      	cmp	r3, #5
 80101da:	bfc4      	itt	gt
 80101dc:	3b04      	subgt	r3, #4
 80101de:	9306      	strgt	r3, [sp, #24]
 80101e0:	9b06      	ldr	r3, [sp, #24]
 80101e2:	f1a3 0302 	sub.w	r3, r3, #2
 80101e6:	bfcc      	ite	gt
 80101e8:	2500      	movgt	r5, #0
 80101ea:	2501      	movle	r5, #1
 80101ec:	2b03      	cmp	r3, #3
 80101ee:	f200 808f 	bhi.w	8010310 <_dtoa_r+0x2f0>
 80101f2:	e8df f003 	tbb	[pc, r3]
 80101f6:	7f7d      	.short	0x7f7d
 80101f8:	7131      	.short	0x7131
 80101fa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80101fe:	441d      	add	r5, r3
 8010200:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8010204:	2820      	cmp	r0, #32
 8010206:	dd13      	ble.n	8010230 <_dtoa_r+0x210>
 8010208:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801020c:	9b00      	ldr	r3, [sp, #0]
 801020e:	fa08 f800 	lsl.w	r8, r8, r0
 8010212:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8010216:	fa23 f000 	lsr.w	r0, r3, r0
 801021a:	ea48 0000 	orr.w	r0, r8, r0
 801021e:	f7f0 f999 	bl	8000554 <__aeabi_ui2d>
 8010222:	2301      	movs	r3, #1
 8010224:	4682      	mov	sl, r0
 8010226:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801022a:	3d01      	subs	r5, #1
 801022c:	9313      	str	r3, [sp, #76]	; 0x4c
 801022e:	e772      	b.n	8010116 <_dtoa_r+0xf6>
 8010230:	9b00      	ldr	r3, [sp, #0]
 8010232:	f1c0 0020 	rsb	r0, r0, #32
 8010236:	fa03 f000 	lsl.w	r0, r3, r0
 801023a:	e7f0      	b.n	801021e <_dtoa_r+0x1fe>
 801023c:	2301      	movs	r3, #1
 801023e:	e7b1      	b.n	80101a4 <_dtoa_r+0x184>
 8010240:	900f      	str	r0, [sp, #60]	; 0x3c
 8010242:	e7b0      	b.n	80101a6 <_dtoa_r+0x186>
 8010244:	9b05      	ldr	r3, [sp, #20]
 8010246:	eba3 030a 	sub.w	r3, r3, sl
 801024a:	9305      	str	r3, [sp, #20]
 801024c:	f1ca 0300 	rsb	r3, sl, #0
 8010250:	9307      	str	r3, [sp, #28]
 8010252:	2300      	movs	r3, #0
 8010254:	930e      	str	r3, [sp, #56]	; 0x38
 8010256:	e7bb      	b.n	80101d0 <_dtoa_r+0x1b0>
 8010258:	2301      	movs	r3, #1
 801025a:	930a      	str	r3, [sp, #40]	; 0x28
 801025c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801025e:	2b00      	cmp	r3, #0
 8010260:	dd59      	ble.n	8010316 <_dtoa_r+0x2f6>
 8010262:	9302      	str	r3, [sp, #8]
 8010264:	4699      	mov	r9, r3
 8010266:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010268:	2200      	movs	r2, #0
 801026a:	6072      	str	r2, [r6, #4]
 801026c:	2204      	movs	r2, #4
 801026e:	f102 0014 	add.w	r0, r2, #20
 8010272:	4298      	cmp	r0, r3
 8010274:	6871      	ldr	r1, [r6, #4]
 8010276:	d953      	bls.n	8010320 <_dtoa_r+0x300>
 8010278:	4620      	mov	r0, r4
 801027a:	f000 fe88 	bl	8010f8e <_Balloc>
 801027e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010280:	6030      	str	r0, [r6, #0]
 8010282:	f1b9 0f0e 	cmp.w	r9, #14
 8010286:	f8d3 b000 	ldr.w	fp, [r3]
 801028a:	f200 80e6 	bhi.w	801045a <_dtoa_r+0x43a>
 801028e:	2d00      	cmp	r5, #0
 8010290:	f000 80e3 	beq.w	801045a <_dtoa_r+0x43a>
 8010294:	ed9d 7b00 	vldr	d7, [sp]
 8010298:	f1ba 0f00 	cmp.w	sl, #0
 801029c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80102a0:	dd74      	ble.n	801038c <_dtoa_r+0x36c>
 80102a2:	4a2a      	ldr	r2, [pc, #168]	; (801034c <_dtoa_r+0x32c>)
 80102a4:	f00a 030f 	and.w	r3, sl, #15
 80102a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80102ac:	ed93 7b00 	vldr	d7, [r3]
 80102b0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80102b4:	06f0      	lsls	r0, r6, #27
 80102b6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80102ba:	d565      	bpl.n	8010388 <_dtoa_r+0x368>
 80102bc:	4b24      	ldr	r3, [pc, #144]	; (8010350 <_dtoa_r+0x330>)
 80102be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80102c2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80102c6:	f7f0 fae9 	bl	800089c <__aeabi_ddiv>
 80102ca:	e9cd 0100 	strd	r0, r1, [sp]
 80102ce:	f006 060f 	and.w	r6, r6, #15
 80102d2:	2503      	movs	r5, #3
 80102d4:	4f1e      	ldr	r7, [pc, #120]	; (8010350 <_dtoa_r+0x330>)
 80102d6:	e04c      	b.n	8010372 <_dtoa_r+0x352>
 80102d8:	2301      	movs	r3, #1
 80102da:	930a      	str	r3, [sp, #40]	; 0x28
 80102dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80102de:	4453      	add	r3, sl
 80102e0:	f103 0901 	add.w	r9, r3, #1
 80102e4:	9302      	str	r3, [sp, #8]
 80102e6:	464b      	mov	r3, r9
 80102e8:	2b01      	cmp	r3, #1
 80102ea:	bfb8      	it	lt
 80102ec:	2301      	movlt	r3, #1
 80102ee:	e7ba      	b.n	8010266 <_dtoa_r+0x246>
 80102f0:	2300      	movs	r3, #0
 80102f2:	e7b2      	b.n	801025a <_dtoa_r+0x23a>
 80102f4:	2300      	movs	r3, #0
 80102f6:	e7f0      	b.n	80102da <_dtoa_r+0x2ba>
 80102f8:	2501      	movs	r5, #1
 80102fa:	2300      	movs	r3, #0
 80102fc:	9306      	str	r3, [sp, #24]
 80102fe:	950a      	str	r5, [sp, #40]	; 0x28
 8010300:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010304:	9302      	str	r3, [sp, #8]
 8010306:	4699      	mov	r9, r3
 8010308:	2200      	movs	r2, #0
 801030a:	2312      	movs	r3, #18
 801030c:	920b      	str	r2, [sp, #44]	; 0x2c
 801030e:	e7aa      	b.n	8010266 <_dtoa_r+0x246>
 8010310:	2301      	movs	r3, #1
 8010312:	930a      	str	r3, [sp, #40]	; 0x28
 8010314:	e7f4      	b.n	8010300 <_dtoa_r+0x2e0>
 8010316:	2301      	movs	r3, #1
 8010318:	9302      	str	r3, [sp, #8]
 801031a:	4699      	mov	r9, r3
 801031c:	461a      	mov	r2, r3
 801031e:	e7f5      	b.n	801030c <_dtoa_r+0x2ec>
 8010320:	3101      	adds	r1, #1
 8010322:	6071      	str	r1, [r6, #4]
 8010324:	0052      	lsls	r2, r2, #1
 8010326:	e7a2      	b.n	801026e <_dtoa_r+0x24e>
 8010328:	636f4361 	.word	0x636f4361
 801032c:	3fd287a7 	.word	0x3fd287a7
 8010330:	8b60c8b3 	.word	0x8b60c8b3
 8010334:	3fc68a28 	.word	0x3fc68a28
 8010338:	509f79fb 	.word	0x509f79fb
 801033c:	3fd34413 	.word	0x3fd34413
 8010340:	7ff00000 	.word	0x7ff00000
 8010344:	08014795 	.word	0x08014795
 8010348:	3ff80000 	.word	0x3ff80000
 801034c:	080145a0 	.word	0x080145a0
 8010350:	08014578 	.word	0x08014578
 8010354:	08014513 	.word	0x08014513
 8010358:	07f1      	lsls	r1, r6, #31
 801035a:	d508      	bpl.n	801036e <_dtoa_r+0x34e>
 801035c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010360:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010364:	f7f0 f970 	bl	8000648 <__aeabi_dmul>
 8010368:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801036c:	3501      	adds	r5, #1
 801036e:	1076      	asrs	r6, r6, #1
 8010370:	3708      	adds	r7, #8
 8010372:	2e00      	cmp	r6, #0
 8010374:	d1f0      	bne.n	8010358 <_dtoa_r+0x338>
 8010376:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801037a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801037e:	f7f0 fa8d 	bl	800089c <__aeabi_ddiv>
 8010382:	e9cd 0100 	strd	r0, r1, [sp]
 8010386:	e01a      	b.n	80103be <_dtoa_r+0x39e>
 8010388:	2502      	movs	r5, #2
 801038a:	e7a3      	b.n	80102d4 <_dtoa_r+0x2b4>
 801038c:	f000 80a0 	beq.w	80104d0 <_dtoa_r+0x4b0>
 8010390:	f1ca 0600 	rsb	r6, sl, #0
 8010394:	4b9f      	ldr	r3, [pc, #636]	; (8010614 <_dtoa_r+0x5f4>)
 8010396:	4fa0      	ldr	r7, [pc, #640]	; (8010618 <_dtoa_r+0x5f8>)
 8010398:	f006 020f 	and.w	r2, r6, #15
 801039c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80103a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80103a8:	f7f0 f94e 	bl	8000648 <__aeabi_dmul>
 80103ac:	e9cd 0100 	strd	r0, r1, [sp]
 80103b0:	1136      	asrs	r6, r6, #4
 80103b2:	2300      	movs	r3, #0
 80103b4:	2502      	movs	r5, #2
 80103b6:	2e00      	cmp	r6, #0
 80103b8:	d17f      	bne.n	80104ba <_dtoa_r+0x49a>
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d1e1      	bne.n	8010382 <_dtoa_r+0x362>
 80103be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	f000 8087 	beq.w	80104d4 <_dtoa_r+0x4b4>
 80103c6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80103ca:	2200      	movs	r2, #0
 80103cc:	4b93      	ldr	r3, [pc, #588]	; (801061c <_dtoa_r+0x5fc>)
 80103ce:	4630      	mov	r0, r6
 80103d0:	4639      	mov	r1, r7
 80103d2:	f7f0 fbab 	bl	8000b2c <__aeabi_dcmplt>
 80103d6:	2800      	cmp	r0, #0
 80103d8:	d07c      	beq.n	80104d4 <_dtoa_r+0x4b4>
 80103da:	f1b9 0f00 	cmp.w	r9, #0
 80103de:	d079      	beq.n	80104d4 <_dtoa_r+0x4b4>
 80103e0:	9b02      	ldr	r3, [sp, #8]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	dd35      	ble.n	8010452 <_dtoa_r+0x432>
 80103e6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80103ea:	9308      	str	r3, [sp, #32]
 80103ec:	4639      	mov	r1, r7
 80103ee:	2200      	movs	r2, #0
 80103f0:	4b8b      	ldr	r3, [pc, #556]	; (8010620 <_dtoa_r+0x600>)
 80103f2:	4630      	mov	r0, r6
 80103f4:	f7f0 f928 	bl	8000648 <__aeabi_dmul>
 80103f8:	e9cd 0100 	strd	r0, r1, [sp]
 80103fc:	9f02      	ldr	r7, [sp, #8]
 80103fe:	3501      	adds	r5, #1
 8010400:	4628      	mov	r0, r5
 8010402:	f7f0 f8b7 	bl	8000574 <__aeabi_i2d>
 8010406:	e9dd 2300 	ldrd	r2, r3, [sp]
 801040a:	f7f0 f91d 	bl	8000648 <__aeabi_dmul>
 801040e:	2200      	movs	r2, #0
 8010410:	4b84      	ldr	r3, [pc, #528]	; (8010624 <_dtoa_r+0x604>)
 8010412:	f7ef ff63 	bl	80002dc <__adddf3>
 8010416:	4605      	mov	r5, r0
 8010418:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801041c:	2f00      	cmp	r7, #0
 801041e:	d15d      	bne.n	80104dc <_dtoa_r+0x4bc>
 8010420:	2200      	movs	r2, #0
 8010422:	4b81      	ldr	r3, [pc, #516]	; (8010628 <_dtoa_r+0x608>)
 8010424:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010428:	f7ef ff56 	bl	80002d8 <__aeabi_dsub>
 801042c:	462a      	mov	r2, r5
 801042e:	4633      	mov	r3, r6
 8010430:	e9cd 0100 	strd	r0, r1, [sp]
 8010434:	f7f0 fb98 	bl	8000b68 <__aeabi_dcmpgt>
 8010438:	2800      	cmp	r0, #0
 801043a:	f040 8288 	bne.w	801094e <_dtoa_r+0x92e>
 801043e:	462a      	mov	r2, r5
 8010440:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8010444:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010448:	f7f0 fb70 	bl	8000b2c <__aeabi_dcmplt>
 801044c:	2800      	cmp	r0, #0
 801044e:	f040 827c 	bne.w	801094a <_dtoa_r+0x92a>
 8010452:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010456:	e9cd 2300 	strd	r2, r3, [sp]
 801045a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801045c:	2b00      	cmp	r3, #0
 801045e:	f2c0 8150 	blt.w	8010702 <_dtoa_r+0x6e2>
 8010462:	f1ba 0f0e 	cmp.w	sl, #14
 8010466:	f300 814c 	bgt.w	8010702 <_dtoa_r+0x6e2>
 801046a:	4b6a      	ldr	r3, [pc, #424]	; (8010614 <_dtoa_r+0x5f4>)
 801046c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010470:	ed93 7b00 	vldr	d7, [r3]
 8010474:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010476:	2b00      	cmp	r3, #0
 8010478:	ed8d 7b02 	vstr	d7, [sp, #8]
 801047c:	f280 80d8 	bge.w	8010630 <_dtoa_r+0x610>
 8010480:	f1b9 0f00 	cmp.w	r9, #0
 8010484:	f300 80d4 	bgt.w	8010630 <_dtoa_r+0x610>
 8010488:	f040 825e 	bne.w	8010948 <_dtoa_r+0x928>
 801048c:	2200      	movs	r2, #0
 801048e:	4b66      	ldr	r3, [pc, #408]	; (8010628 <_dtoa_r+0x608>)
 8010490:	ec51 0b17 	vmov	r0, r1, d7
 8010494:	f7f0 f8d8 	bl	8000648 <__aeabi_dmul>
 8010498:	e9dd 2300 	ldrd	r2, r3, [sp]
 801049c:	f7f0 fb5a 	bl	8000b54 <__aeabi_dcmpge>
 80104a0:	464f      	mov	r7, r9
 80104a2:	464e      	mov	r6, r9
 80104a4:	2800      	cmp	r0, #0
 80104a6:	f040 8234 	bne.w	8010912 <_dtoa_r+0x8f2>
 80104aa:	2331      	movs	r3, #49	; 0x31
 80104ac:	f10b 0501 	add.w	r5, fp, #1
 80104b0:	f88b 3000 	strb.w	r3, [fp]
 80104b4:	f10a 0a01 	add.w	sl, sl, #1
 80104b8:	e22f      	b.n	801091a <_dtoa_r+0x8fa>
 80104ba:	07f2      	lsls	r2, r6, #31
 80104bc:	d505      	bpl.n	80104ca <_dtoa_r+0x4aa>
 80104be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80104c2:	f7f0 f8c1 	bl	8000648 <__aeabi_dmul>
 80104c6:	3501      	adds	r5, #1
 80104c8:	2301      	movs	r3, #1
 80104ca:	1076      	asrs	r6, r6, #1
 80104cc:	3708      	adds	r7, #8
 80104ce:	e772      	b.n	80103b6 <_dtoa_r+0x396>
 80104d0:	2502      	movs	r5, #2
 80104d2:	e774      	b.n	80103be <_dtoa_r+0x39e>
 80104d4:	f8cd a020 	str.w	sl, [sp, #32]
 80104d8:	464f      	mov	r7, r9
 80104da:	e791      	b.n	8010400 <_dtoa_r+0x3e0>
 80104dc:	4b4d      	ldr	r3, [pc, #308]	; (8010614 <_dtoa_r+0x5f4>)
 80104de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80104e2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80104e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d047      	beq.n	801057c <_dtoa_r+0x55c>
 80104ec:	4602      	mov	r2, r0
 80104ee:	460b      	mov	r3, r1
 80104f0:	2000      	movs	r0, #0
 80104f2:	494e      	ldr	r1, [pc, #312]	; (801062c <_dtoa_r+0x60c>)
 80104f4:	f7f0 f9d2 	bl	800089c <__aeabi_ddiv>
 80104f8:	462a      	mov	r2, r5
 80104fa:	4633      	mov	r3, r6
 80104fc:	f7ef feec 	bl	80002d8 <__aeabi_dsub>
 8010500:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010504:	465d      	mov	r5, fp
 8010506:	e9dd 0100 	ldrd	r0, r1, [sp]
 801050a:	f7f0 fb4d 	bl	8000ba8 <__aeabi_d2iz>
 801050e:	4606      	mov	r6, r0
 8010510:	f7f0 f830 	bl	8000574 <__aeabi_i2d>
 8010514:	4602      	mov	r2, r0
 8010516:	460b      	mov	r3, r1
 8010518:	e9dd 0100 	ldrd	r0, r1, [sp]
 801051c:	f7ef fedc 	bl	80002d8 <__aeabi_dsub>
 8010520:	3630      	adds	r6, #48	; 0x30
 8010522:	f805 6b01 	strb.w	r6, [r5], #1
 8010526:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801052a:	e9cd 0100 	strd	r0, r1, [sp]
 801052e:	f7f0 fafd 	bl	8000b2c <__aeabi_dcmplt>
 8010532:	2800      	cmp	r0, #0
 8010534:	d163      	bne.n	80105fe <_dtoa_r+0x5de>
 8010536:	e9dd 2300 	ldrd	r2, r3, [sp]
 801053a:	2000      	movs	r0, #0
 801053c:	4937      	ldr	r1, [pc, #220]	; (801061c <_dtoa_r+0x5fc>)
 801053e:	f7ef fecb 	bl	80002d8 <__aeabi_dsub>
 8010542:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010546:	f7f0 faf1 	bl	8000b2c <__aeabi_dcmplt>
 801054a:	2800      	cmp	r0, #0
 801054c:	f040 80b7 	bne.w	80106be <_dtoa_r+0x69e>
 8010550:	eba5 030b 	sub.w	r3, r5, fp
 8010554:	429f      	cmp	r7, r3
 8010556:	f77f af7c 	ble.w	8010452 <_dtoa_r+0x432>
 801055a:	2200      	movs	r2, #0
 801055c:	4b30      	ldr	r3, [pc, #192]	; (8010620 <_dtoa_r+0x600>)
 801055e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010562:	f7f0 f871 	bl	8000648 <__aeabi_dmul>
 8010566:	2200      	movs	r2, #0
 8010568:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801056c:	4b2c      	ldr	r3, [pc, #176]	; (8010620 <_dtoa_r+0x600>)
 801056e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010572:	f7f0 f869 	bl	8000648 <__aeabi_dmul>
 8010576:	e9cd 0100 	strd	r0, r1, [sp]
 801057a:	e7c4      	b.n	8010506 <_dtoa_r+0x4e6>
 801057c:	462a      	mov	r2, r5
 801057e:	4633      	mov	r3, r6
 8010580:	f7f0 f862 	bl	8000648 <__aeabi_dmul>
 8010584:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010588:	eb0b 0507 	add.w	r5, fp, r7
 801058c:	465e      	mov	r6, fp
 801058e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010592:	f7f0 fb09 	bl	8000ba8 <__aeabi_d2iz>
 8010596:	4607      	mov	r7, r0
 8010598:	f7ef ffec 	bl	8000574 <__aeabi_i2d>
 801059c:	3730      	adds	r7, #48	; 0x30
 801059e:	4602      	mov	r2, r0
 80105a0:	460b      	mov	r3, r1
 80105a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80105a6:	f7ef fe97 	bl	80002d8 <__aeabi_dsub>
 80105aa:	f806 7b01 	strb.w	r7, [r6], #1
 80105ae:	42ae      	cmp	r6, r5
 80105b0:	e9cd 0100 	strd	r0, r1, [sp]
 80105b4:	f04f 0200 	mov.w	r2, #0
 80105b8:	d126      	bne.n	8010608 <_dtoa_r+0x5e8>
 80105ba:	4b1c      	ldr	r3, [pc, #112]	; (801062c <_dtoa_r+0x60c>)
 80105bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80105c0:	f7ef fe8c 	bl	80002dc <__adddf3>
 80105c4:	4602      	mov	r2, r0
 80105c6:	460b      	mov	r3, r1
 80105c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80105cc:	f7f0 facc 	bl	8000b68 <__aeabi_dcmpgt>
 80105d0:	2800      	cmp	r0, #0
 80105d2:	d174      	bne.n	80106be <_dtoa_r+0x69e>
 80105d4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80105d8:	2000      	movs	r0, #0
 80105da:	4914      	ldr	r1, [pc, #80]	; (801062c <_dtoa_r+0x60c>)
 80105dc:	f7ef fe7c 	bl	80002d8 <__aeabi_dsub>
 80105e0:	4602      	mov	r2, r0
 80105e2:	460b      	mov	r3, r1
 80105e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80105e8:	f7f0 faa0 	bl	8000b2c <__aeabi_dcmplt>
 80105ec:	2800      	cmp	r0, #0
 80105ee:	f43f af30 	beq.w	8010452 <_dtoa_r+0x432>
 80105f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80105f6:	2b30      	cmp	r3, #48	; 0x30
 80105f8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80105fc:	d002      	beq.n	8010604 <_dtoa_r+0x5e4>
 80105fe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8010602:	e04a      	b.n	801069a <_dtoa_r+0x67a>
 8010604:	4615      	mov	r5, r2
 8010606:	e7f4      	b.n	80105f2 <_dtoa_r+0x5d2>
 8010608:	4b05      	ldr	r3, [pc, #20]	; (8010620 <_dtoa_r+0x600>)
 801060a:	f7f0 f81d 	bl	8000648 <__aeabi_dmul>
 801060e:	e9cd 0100 	strd	r0, r1, [sp]
 8010612:	e7bc      	b.n	801058e <_dtoa_r+0x56e>
 8010614:	080145a0 	.word	0x080145a0
 8010618:	08014578 	.word	0x08014578
 801061c:	3ff00000 	.word	0x3ff00000
 8010620:	40240000 	.word	0x40240000
 8010624:	401c0000 	.word	0x401c0000
 8010628:	40140000 	.word	0x40140000
 801062c:	3fe00000 	.word	0x3fe00000
 8010630:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010634:	465d      	mov	r5, fp
 8010636:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801063a:	4630      	mov	r0, r6
 801063c:	4639      	mov	r1, r7
 801063e:	f7f0 f92d 	bl	800089c <__aeabi_ddiv>
 8010642:	f7f0 fab1 	bl	8000ba8 <__aeabi_d2iz>
 8010646:	4680      	mov	r8, r0
 8010648:	f7ef ff94 	bl	8000574 <__aeabi_i2d>
 801064c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010650:	f7ef fffa 	bl	8000648 <__aeabi_dmul>
 8010654:	4602      	mov	r2, r0
 8010656:	460b      	mov	r3, r1
 8010658:	4630      	mov	r0, r6
 801065a:	4639      	mov	r1, r7
 801065c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8010660:	f7ef fe3a 	bl	80002d8 <__aeabi_dsub>
 8010664:	f805 6b01 	strb.w	r6, [r5], #1
 8010668:	eba5 060b 	sub.w	r6, r5, fp
 801066c:	45b1      	cmp	r9, r6
 801066e:	4602      	mov	r2, r0
 8010670:	460b      	mov	r3, r1
 8010672:	d139      	bne.n	80106e8 <_dtoa_r+0x6c8>
 8010674:	f7ef fe32 	bl	80002dc <__adddf3>
 8010678:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801067c:	4606      	mov	r6, r0
 801067e:	460f      	mov	r7, r1
 8010680:	f7f0 fa72 	bl	8000b68 <__aeabi_dcmpgt>
 8010684:	b9c8      	cbnz	r0, 80106ba <_dtoa_r+0x69a>
 8010686:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801068a:	4630      	mov	r0, r6
 801068c:	4639      	mov	r1, r7
 801068e:	f7f0 fa43 	bl	8000b18 <__aeabi_dcmpeq>
 8010692:	b110      	cbz	r0, 801069a <_dtoa_r+0x67a>
 8010694:	f018 0f01 	tst.w	r8, #1
 8010698:	d10f      	bne.n	80106ba <_dtoa_r+0x69a>
 801069a:	9904      	ldr	r1, [sp, #16]
 801069c:	4620      	mov	r0, r4
 801069e:	f000 fcaa 	bl	8010ff6 <_Bfree>
 80106a2:	2300      	movs	r3, #0
 80106a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80106a6:	702b      	strb	r3, [r5, #0]
 80106a8:	f10a 0301 	add.w	r3, sl, #1
 80106ac:	6013      	str	r3, [r2, #0]
 80106ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	f000 8241 	beq.w	8010b38 <_dtoa_r+0xb18>
 80106b6:	601d      	str	r5, [r3, #0]
 80106b8:	e23e      	b.n	8010b38 <_dtoa_r+0xb18>
 80106ba:	f8cd a020 	str.w	sl, [sp, #32]
 80106be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80106c2:	2a39      	cmp	r2, #57	; 0x39
 80106c4:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 80106c8:	d108      	bne.n	80106dc <_dtoa_r+0x6bc>
 80106ca:	459b      	cmp	fp, r3
 80106cc:	d10a      	bne.n	80106e4 <_dtoa_r+0x6c4>
 80106ce:	9b08      	ldr	r3, [sp, #32]
 80106d0:	3301      	adds	r3, #1
 80106d2:	9308      	str	r3, [sp, #32]
 80106d4:	2330      	movs	r3, #48	; 0x30
 80106d6:	f88b 3000 	strb.w	r3, [fp]
 80106da:	465b      	mov	r3, fp
 80106dc:	781a      	ldrb	r2, [r3, #0]
 80106de:	3201      	adds	r2, #1
 80106e0:	701a      	strb	r2, [r3, #0]
 80106e2:	e78c      	b.n	80105fe <_dtoa_r+0x5de>
 80106e4:	461d      	mov	r5, r3
 80106e6:	e7ea      	b.n	80106be <_dtoa_r+0x69e>
 80106e8:	2200      	movs	r2, #0
 80106ea:	4b9b      	ldr	r3, [pc, #620]	; (8010958 <_dtoa_r+0x938>)
 80106ec:	f7ef ffac 	bl	8000648 <__aeabi_dmul>
 80106f0:	2200      	movs	r2, #0
 80106f2:	2300      	movs	r3, #0
 80106f4:	4606      	mov	r6, r0
 80106f6:	460f      	mov	r7, r1
 80106f8:	f7f0 fa0e 	bl	8000b18 <__aeabi_dcmpeq>
 80106fc:	2800      	cmp	r0, #0
 80106fe:	d09a      	beq.n	8010636 <_dtoa_r+0x616>
 8010700:	e7cb      	b.n	801069a <_dtoa_r+0x67a>
 8010702:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010704:	2a00      	cmp	r2, #0
 8010706:	f000 808b 	beq.w	8010820 <_dtoa_r+0x800>
 801070a:	9a06      	ldr	r2, [sp, #24]
 801070c:	2a01      	cmp	r2, #1
 801070e:	dc6e      	bgt.n	80107ee <_dtoa_r+0x7ce>
 8010710:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010712:	2a00      	cmp	r2, #0
 8010714:	d067      	beq.n	80107e6 <_dtoa_r+0x7c6>
 8010716:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801071a:	9f07      	ldr	r7, [sp, #28]
 801071c:	9d05      	ldr	r5, [sp, #20]
 801071e:	9a05      	ldr	r2, [sp, #20]
 8010720:	2101      	movs	r1, #1
 8010722:	441a      	add	r2, r3
 8010724:	4620      	mov	r0, r4
 8010726:	9205      	str	r2, [sp, #20]
 8010728:	4498      	add	r8, r3
 801072a:	f000 fd04 	bl	8011136 <__i2b>
 801072e:	4606      	mov	r6, r0
 8010730:	2d00      	cmp	r5, #0
 8010732:	dd0c      	ble.n	801074e <_dtoa_r+0x72e>
 8010734:	f1b8 0f00 	cmp.w	r8, #0
 8010738:	dd09      	ble.n	801074e <_dtoa_r+0x72e>
 801073a:	4545      	cmp	r5, r8
 801073c:	9a05      	ldr	r2, [sp, #20]
 801073e:	462b      	mov	r3, r5
 8010740:	bfa8      	it	ge
 8010742:	4643      	movge	r3, r8
 8010744:	1ad2      	subs	r2, r2, r3
 8010746:	9205      	str	r2, [sp, #20]
 8010748:	1aed      	subs	r5, r5, r3
 801074a:	eba8 0803 	sub.w	r8, r8, r3
 801074e:	9b07      	ldr	r3, [sp, #28]
 8010750:	b1eb      	cbz	r3, 801078e <_dtoa_r+0x76e>
 8010752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010754:	2b00      	cmp	r3, #0
 8010756:	d067      	beq.n	8010828 <_dtoa_r+0x808>
 8010758:	b18f      	cbz	r7, 801077e <_dtoa_r+0x75e>
 801075a:	4631      	mov	r1, r6
 801075c:	463a      	mov	r2, r7
 801075e:	4620      	mov	r0, r4
 8010760:	f000 fd88 	bl	8011274 <__pow5mult>
 8010764:	9a04      	ldr	r2, [sp, #16]
 8010766:	4601      	mov	r1, r0
 8010768:	4606      	mov	r6, r0
 801076a:	4620      	mov	r0, r4
 801076c:	f000 fcec 	bl	8011148 <__multiply>
 8010770:	9904      	ldr	r1, [sp, #16]
 8010772:	9008      	str	r0, [sp, #32]
 8010774:	4620      	mov	r0, r4
 8010776:	f000 fc3e 	bl	8010ff6 <_Bfree>
 801077a:	9b08      	ldr	r3, [sp, #32]
 801077c:	9304      	str	r3, [sp, #16]
 801077e:	9b07      	ldr	r3, [sp, #28]
 8010780:	1bda      	subs	r2, r3, r7
 8010782:	d004      	beq.n	801078e <_dtoa_r+0x76e>
 8010784:	9904      	ldr	r1, [sp, #16]
 8010786:	4620      	mov	r0, r4
 8010788:	f000 fd74 	bl	8011274 <__pow5mult>
 801078c:	9004      	str	r0, [sp, #16]
 801078e:	2101      	movs	r1, #1
 8010790:	4620      	mov	r0, r4
 8010792:	f000 fcd0 	bl	8011136 <__i2b>
 8010796:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010798:	4607      	mov	r7, r0
 801079a:	2b00      	cmp	r3, #0
 801079c:	f000 81d0 	beq.w	8010b40 <_dtoa_r+0xb20>
 80107a0:	461a      	mov	r2, r3
 80107a2:	4601      	mov	r1, r0
 80107a4:	4620      	mov	r0, r4
 80107a6:	f000 fd65 	bl	8011274 <__pow5mult>
 80107aa:	9b06      	ldr	r3, [sp, #24]
 80107ac:	2b01      	cmp	r3, #1
 80107ae:	4607      	mov	r7, r0
 80107b0:	dc40      	bgt.n	8010834 <_dtoa_r+0x814>
 80107b2:	9b00      	ldr	r3, [sp, #0]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d139      	bne.n	801082c <_dtoa_r+0x80c>
 80107b8:	9b01      	ldr	r3, [sp, #4]
 80107ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d136      	bne.n	8010830 <_dtoa_r+0x810>
 80107c2:	9b01      	ldr	r3, [sp, #4]
 80107c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80107c8:	0d1b      	lsrs	r3, r3, #20
 80107ca:	051b      	lsls	r3, r3, #20
 80107cc:	b12b      	cbz	r3, 80107da <_dtoa_r+0x7ba>
 80107ce:	9b05      	ldr	r3, [sp, #20]
 80107d0:	3301      	adds	r3, #1
 80107d2:	9305      	str	r3, [sp, #20]
 80107d4:	f108 0801 	add.w	r8, r8, #1
 80107d8:	2301      	movs	r3, #1
 80107da:	9307      	str	r3, [sp, #28]
 80107dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d12a      	bne.n	8010838 <_dtoa_r+0x818>
 80107e2:	2001      	movs	r0, #1
 80107e4:	e030      	b.n	8010848 <_dtoa_r+0x828>
 80107e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80107e8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80107ec:	e795      	b.n	801071a <_dtoa_r+0x6fa>
 80107ee:	9b07      	ldr	r3, [sp, #28]
 80107f0:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 80107f4:	42bb      	cmp	r3, r7
 80107f6:	bfbf      	itttt	lt
 80107f8:	9b07      	ldrlt	r3, [sp, #28]
 80107fa:	9707      	strlt	r7, [sp, #28]
 80107fc:	1afa      	sublt	r2, r7, r3
 80107fe:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8010800:	bfbb      	ittet	lt
 8010802:	189b      	addlt	r3, r3, r2
 8010804:	930e      	strlt	r3, [sp, #56]	; 0x38
 8010806:	1bdf      	subge	r7, r3, r7
 8010808:	2700      	movlt	r7, #0
 801080a:	f1b9 0f00 	cmp.w	r9, #0
 801080e:	bfb5      	itete	lt
 8010810:	9b05      	ldrlt	r3, [sp, #20]
 8010812:	9d05      	ldrge	r5, [sp, #20]
 8010814:	eba3 0509 	sublt.w	r5, r3, r9
 8010818:	464b      	movge	r3, r9
 801081a:	bfb8      	it	lt
 801081c:	2300      	movlt	r3, #0
 801081e:	e77e      	b.n	801071e <_dtoa_r+0x6fe>
 8010820:	9f07      	ldr	r7, [sp, #28]
 8010822:	9d05      	ldr	r5, [sp, #20]
 8010824:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8010826:	e783      	b.n	8010730 <_dtoa_r+0x710>
 8010828:	9a07      	ldr	r2, [sp, #28]
 801082a:	e7ab      	b.n	8010784 <_dtoa_r+0x764>
 801082c:	2300      	movs	r3, #0
 801082e:	e7d4      	b.n	80107da <_dtoa_r+0x7ba>
 8010830:	9b00      	ldr	r3, [sp, #0]
 8010832:	e7d2      	b.n	80107da <_dtoa_r+0x7ba>
 8010834:	2300      	movs	r3, #0
 8010836:	9307      	str	r3, [sp, #28]
 8010838:	693b      	ldr	r3, [r7, #16]
 801083a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801083e:	6918      	ldr	r0, [r3, #16]
 8010840:	f000 fc2b 	bl	801109a <__hi0bits>
 8010844:	f1c0 0020 	rsb	r0, r0, #32
 8010848:	4440      	add	r0, r8
 801084a:	f010 001f 	ands.w	r0, r0, #31
 801084e:	d047      	beq.n	80108e0 <_dtoa_r+0x8c0>
 8010850:	f1c0 0320 	rsb	r3, r0, #32
 8010854:	2b04      	cmp	r3, #4
 8010856:	dd3b      	ble.n	80108d0 <_dtoa_r+0x8b0>
 8010858:	9b05      	ldr	r3, [sp, #20]
 801085a:	f1c0 001c 	rsb	r0, r0, #28
 801085e:	4403      	add	r3, r0
 8010860:	9305      	str	r3, [sp, #20]
 8010862:	4405      	add	r5, r0
 8010864:	4480      	add	r8, r0
 8010866:	9b05      	ldr	r3, [sp, #20]
 8010868:	2b00      	cmp	r3, #0
 801086a:	dd05      	ble.n	8010878 <_dtoa_r+0x858>
 801086c:	461a      	mov	r2, r3
 801086e:	9904      	ldr	r1, [sp, #16]
 8010870:	4620      	mov	r0, r4
 8010872:	f000 fd4d 	bl	8011310 <__lshift>
 8010876:	9004      	str	r0, [sp, #16]
 8010878:	f1b8 0f00 	cmp.w	r8, #0
 801087c:	dd05      	ble.n	801088a <_dtoa_r+0x86a>
 801087e:	4639      	mov	r1, r7
 8010880:	4642      	mov	r2, r8
 8010882:	4620      	mov	r0, r4
 8010884:	f000 fd44 	bl	8011310 <__lshift>
 8010888:	4607      	mov	r7, r0
 801088a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801088c:	b353      	cbz	r3, 80108e4 <_dtoa_r+0x8c4>
 801088e:	4639      	mov	r1, r7
 8010890:	9804      	ldr	r0, [sp, #16]
 8010892:	f000 fd91 	bl	80113b8 <__mcmp>
 8010896:	2800      	cmp	r0, #0
 8010898:	da24      	bge.n	80108e4 <_dtoa_r+0x8c4>
 801089a:	2300      	movs	r3, #0
 801089c:	220a      	movs	r2, #10
 801089e:	9904      	ldr	r1, [sp, #16]
 80108a0:	4620      	mov	r0, r4
 80108a2:	f000 fbbf 	bl	8011024 <__multadd>
 80108a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80108a8:	9004      	str	r0, [sp, #16]
 80108aa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	f000 814d 	beq.w	8010b4e <_dtoa_r+0xb2e>
 80108b4:	2300      	movs	r3, #0
 80108b6:	4631      	mov	r1, r6
 80108b8:	220a      	movs	r2, #10
 80108ba:	4620      	mov	r0, r4
 80108bc:	f000 fbb2 	bl	8011024 <__multadd>
 80108c0:	9b02      	ldr	r3, [sp, #8]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	4606      	mov	r6, r0
 80108c6:	dc4f      	bgt.n	8010968 <_dtoa_r+0x948>
 80108c8:	9b06      	ldr	r3, [sp, #24]
 80108ca:	2b02      	cmp	r3, #2
 80108cc:	dd4c      	ble.n	8010968 <_dtoa_r+0x948>
 80108ce:	e011      	b.n	80108f4 <_dtoa_r+0x8d4>
 80108d0:	d0c9      	beq.n	8010866 <_dtoa_r+0x846>
 80108d2:	9a05      	ldr	r2, [sp, #20]
 80108d4:	331c      	adds	r3, #28
 80108d6:	441a      	add	r2, r3
 80108d8:	9205      	str	r2, [sp, #20]
 80108da:	441d      	add	r5, r3
 80108dc:	4498      	add	r8, r3
 80108de:	e7c2      	b.n	8010866 <_dtoa_r+0x846>
 80108e0:	4603      	mov	r3, r0
 80108e2:	e7f6      	b.n	80108d2 <_dtoa_r+0x8b2>
 80108e4:	f1b9 0f00 	cmp.w	r9, #0
 80108e8:	dc38      	bgt.n	801095c <_dtoa_r+0x93c>
 80108ea:	9b06      	ldr	r3, [sp, #24]
 80108ec:	2b02      	cmp	r3, #2
 80108ee:	dd35      	ble.n	801095c <_dtoa_r+0x93c>
 80108f0:	f8cd 9008 	str.w	r9, [sp, #8]
 80108f4:	9b02      	ldr	r3, [sp, #8]
 80108f6:	b963      	cbnz	r3, 8010912 <_dtoa_r+0x8f2>
 80108f8:	4639      	mov	r1, r7
 80108fa:	2205      	movs	r2, #5
 80108fc:	4620      	mov	r0, r4
 80108fe:	f000 fb91 	bl	8011024 <__multadd>
 8010902:	4601      	mov	r1, r0
 8010904:	4607      	mov	r7, r0
 8010906:	9804      	ldr	r0, [sp, #16]
 8010908:	f000 fd56 	bl	80113b8 <__mcmp>
 801090c:	2800      	cmp	r0, #0
 801090e:	f73f adcc 	bgt.w	80104aa <_dtoa_r+0x48a>
 8010912:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010914:	465d      	mov	r5, fp
 8010916:	ea6f 0a03 	mvn.w	sl, r3
 801091a:	f04f 0900 	mov.w	r9, #0
 801091e:	4639      	mov	r1, r7
 8010920:	4620      	mov	r0, r4
 8010922:	f000 fb68 	bl	8010ff6 <_Bfree>
 8010926:	2e00      	cmp	r6, #0
 8010928:	f43f aeb7 	beq.w	801069a <_dtoa_r+0x67a>
 801092c:	f1b9 0f00 	cmp.w	r9, #0
 8010930:	d005      	beq.n	801093e <_dtoa_r+0x91e>
 8010932:	45b1      	cmp	r9, r6
 8010934:	d003      	beq.n	801093e <_dtoa_r+0x91e>
 8010936:	4649      	mov	r1, r9
 8010938:	4620      	mov	r0, r4
 801093a:	f000 fb5c 	bl	8010ff6 <_Bfree>
 801093e:	4631      	mov	r1, r6
 8010940:	4620      	mov	r0, r4
 8010942:	f000 fb58 	bl	8010ff6 <_Bfree>
 8010946:	e6a8      	b.n	801069a <_dtoa_r+0x67a>
 8010948:	2700      	movs	r7, #0
 801094a:	463e      	mov	r6, r7
 801094c:	e7e1      	b.n	8010912 <_dtoa_r+0x8f2>
 801094e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8010952:	463e      	mov	r6, r7
 8010954:	e5a9      	b.n	80104aa <_dtoa_r+0x48a>
 8010956:	bf00      	nop
 8010958:	40240000 	.word	0x40240000
 801095c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801095e:	f8cd 9008 	str.w	r9, [sp, #8]
 8010962:	2b00      	cmp	r3, #0
 8010964:	f000 80fa 	beq.w	8010b5c <_dtoa_r+0xb3c>
 8010968:	2d00      	cmp	r5, #0
 801096a:	dd05      	ble.n	8010978 <_dtoa_r+0x958>
 801096c:	4631      	mov	r1, r6
 801096e:	462a      	mov	r2, r5
 8010970:	4620      	mov	r0, r4
 8010972:	f000 fccd 	bl	8011310 <__lshift>
 8010976:	4606      	mov	r6, r0
 8010978:	9b07      	ldr	r3, [sp, #28]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d04c      	beq.n	8010a18 <_dtoa_r+0x9f8>
 801097e:	6871      	ldr	r1, [r6, #4]
 8010980:	4620      	mov	r0, r4
 8010982:	f000 fb04 	bl	8010f8e <_Balloc>
 8010986:	6932      	ldr	r2, [r6, #16]
 8010988:	3202      	adds	r2, #2
 801098a:	4605      	mov	r5, r0
 801098c:	0092      	lsls	r2, r2, #2
 801098e:	f106 010c 	add.w	r1, r6, #12
 8010992:	300c      	adds	r0, #12
 8010994:	f000 faf0 	bl	8010f78 <memcpy>
 8010998:	2201      	movs	r2, #1
 801099a:	4629      	mov	r1, r5
 801099c:	4620      	mov	r0, r4
 801099e:	f000 fcb7 	bl	8011310 <__lshift>
 80109a2:	9b00      	ldr	r3, [sp, #0]
 80109a4:	f8cd b014 	str.w	fp, [sp, #20]
 80109a8:	f003 0301 	and.w	r3, r3, #1
 80109ac:	46b1      	mov	r9, r6
 80109ae:	9307      	str	r3, [sp, #28]
 80109b0:	4606      	mov	r6, r0
 80109b2:	4639      	mov	r1, r7
 80109b4:	9804      	ldr	r0, [sp, #16]
 80109b6:	f7ff faa5 	bl	800ff04 <quorem>
 80109ba:	4649      	mov	r1, r9
 80109bc:	4605      	mov	r5, r0
 80109be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80109c2:	9804      	ldr	r0, [sp, #16]
 80109c4:	f000 fcf8 	bl	80113b8 <__mcmp>
 80109c8:	4632      	mov	r2, r6
 80109ca:	9000      	str	r0, [sp, #0]
 80109cc:	4639      	mov	r1, r7
 80109ce:	4620      	mov	r0, r4
 80109d0:	f000 fd0c 	bl	80113ec <__mdiff>
 80109d4:	68c3      	ldr	r3, [r0, #12]
 80109d6:	4602      	mov	r2, r0
 80109d8:	bb03      	cbnz	r3, 8010a1c <_dtoa_r+0x9fc>
 80109da:	4601      	mov	r1, r0
 80109dc:	9008      	str	r0, [sp, #32]
 80109de:	9804      	ldr	r0, [sp, #16]
 80109e0:	f000 fcea 	bl	80113b8 <__mcmp>
 80109e4:	9a08      	ldr	r2, [sp, #32]
 80109e6:	4603      	mov	r3, r0
 80109e8:	4611      	mov	r1, r2
 80109ea:	4620      	mov	r0, r4
 80109ec:	9308      	str	r3, [sp, #32]
 80109ee:	f000 fb02 	bl	8010ff6 <_Bfree>
 80109f2:	9b08      	ldr	r3, [sp, #32]
 80109f4:	b9a3      	cbnz	r3, 8010a20 <_dtoa_r+0xa00>
 80109f6:	9a06      	ldr	r2, [sp, #24]
 80109f8:	b992      	cbnz	r2, 8010a20 <_dtoa_r+0xa00>
 80109fa:	9a07      	ldr	r2, [sp, #28]
 80109fc:	b982      	cbnz	r2, 8010a20 <_dtoa_r+0xa00>
 80109fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010a02:	d029      	beq.n	8010a58 <_dtoa_r+0xa38>
 8010a04:	9b00      	ldr	r3, [sp, #0]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	dd01      	ble.n	8010a0e <_dtoa_r+0x9ee>
 8010a0a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8010a0e:	9b05      	ldr	r3, [sp, #20]
 8010a10:	1c5d      	adds	r5, r3, #1
 8010a12:	f883 8000 	strb.w	r8, [r3]
 8010a16:	e782      	b.n	801091e <_dtoa_r+0x8fe>
 8010a18:	4630      	mov	r0, r6
 8010a1a:	e7c2      	b.n	80109a2 <_dtoa_r+0x982>
 8010a1c:	2301      	movs	r3, #1
 8010a1e:	e7e3      	b.n	80109e8 <_dtoa_r+0x9c8>
 8010a20:	9a00      	ldr	r2, [sp, #0]
 8010a22:	2a00      	cmp	r2, #0
 8010a24:	db04      	blt.n	8010a30 <_dtoa_r+0xa10>
 8010a26:	d125      	bne.n	8010a74 <_dtoa_r+0xa54>
 8010a28:	9a06      	ldr	r2, [sp, #24]
 8010a2a:	bb1a      	cbnz	r2, 8010a74 <_dtoa_r+0xa54>
 8010a2c:	9a07      	ldr	r2, [sp, #28]
 8010a2e:	bb0a      	cbnz	r2, 8010a74 <_dtoa_r+0xa54>
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	ddec      	ble.n	8010a0e <_dtoa_r+0x9ee>
 8010a34:	2201      	movs	r2, #1
 8010a36:	9904      	ldr	r1, [sp, #16]
 8010a38:	4620      	mov	r0, r4
 8010a3a:	f000 fc69 	bl	8011310 <__lshift>
 8010a3e:	4639      	mov	r1, r7
 8010a40:	9004      	str	r0, [sp, #16]
 8010a42:	f000 fcb9 	bl	80113b8 <__mcmp>
 8010a46:	2800      	cmp	r0, #0
 8010a48:	dc03      	bgt.n	8010a52 <_dtoa_r+0xa32>
 8010a4a:	d1e0      	bne.n	8010a0e <_dtoa_r+0x9ee>
 8010a4c:	f018 0f01 	tst.w	r8, #1
 8010a50:	d0dd      	beq.n	8010a0e <_dtoa_r+0x9ee>
 8010a52:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010a56:	d1d8      	bne.n	8010a0a <_dtoa_r+0x9ea>
 8010a58:	9b05      	ldr	r3, [sp, #20]
 8010a5a:	9a05      	ldr	r2, [sp, #20]
 8010a5c:	1c5d      	adds	r5, r3, #1
 8010a5e:	2339      	movs	r3, #57	; 0x39
 8010a60:	7013      	strb	r3, [r2, #0]
 8010a62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010a66:	2b39      	cmp	r3, #57	; 0x39
 8010a68:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8010a6c:	d04f      	beq.n	8010b0e <_dtoa_r+0xaee>
 8010a6e:	3301      	adds	r3, #1
 8010a70:	7013      	strb	r3, [r2, #0]
 8010a72:	e754      	b.n	801091e <_dtoa_r+0x8fe>
 8010a74:	9a05      	ldr	r2, [sp, #20]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	f102 0501 	add.w	r5, r2, #1
 8010a7c:	dd06      	ble.n	8010a8c <_dtoa_r+0xa6c>
 8010a7e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010a82:	d0e9      	beq.n	8010a58 <_dtoa_r+0xa38>
 8010a84:	f108 0801 	add.w	r8, r8, #1
 8010a88:	9b05      	ldr	r3, [sp, #20]
 8010a8a:	e7c2      	b.n	8010a12 <_dtoa_r+0x9f2>
 8010a8c:	9a02      	ldr	r2, [sp, #8]
 8010a8e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8010a92:	eba5 030b 	sub.w	r3, r5, fp
 8010a96:	4293      	cmp	r3, r2
 8010a98:	d021      	beq.n	8010ade <_dtoa_r+0xabe>
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	220a      	movs	r2, #10
 8010a9e:	9904      	ldr	r1, [sp, #16]
 8010aa0:	4620      	mov	r0, r4
 8010aa2:	f000 fabf 	bl	8011024 <__multadd>
 8010aa6:	45b1      	cmp	r9, r6
 8010aa8:	9004      	str	r0, [sp, #16]
 8010aaa:	f04f 0300 	mov.w	r3, #0
 8010aae:	f04f 020a 	mov.w	r2, #10
 8010ab2:	4649      	mov	r1, r9
 8010ab4:	4620      	mov	r0, r4
 8010ab6:	d105      	bne.n	8010ac4 <_dtoa_r+0xaa4>
 8010ab8:	f000 fab4 	bl	8011024 <__multadd>
 8010abc:	4681      	mov	r9, r0
 8010abe:	4606      	mov	r6, r0
 8010ac0:	9505      	str	r5, [sp, #20]
 8010ac2:	e776      	b.n	80109b2 <_dtoa_r+0x992>
 8010ac4:	f000 faae 	bl	8011024 <__multadd>
 8010ac8:	4631      	mov	r1, r6
 8010aca:	4681      	mov	r9, r0
 8010acc:	2300      	movs	r3, #0
 8010ace:	220a      	movs	r2, #10
 8010ad0:	4620      	mov	r0, r4
 8010ad2:	f000 faa7 	bl	8011024 <__multadd>
 8010ad6:	4606      	mov	r6, r0
 8010ad8:	e7f2      	b.n	8010ac0 <_dtoa_r+0xaa0>
 8010ada:	f04f 0900 	mov.w	r9, #0
 8010ade:	2201      	movs	r2, #1
 8010ae0:	9904      	ldr	r1, [sp, #16]
 8010ae2:	4620      	mov	r0, r4
 8010ae4:	f000 fc14 	bl	8011310 <__lshift>
 8010ae8:	4639      	mov	r1, r7
 8010aea:	9004      	str	r0, [sp, #16]
 8010aec:	f000 fc64 	bl	80113b8 <__mcmp>
 8010af0:	2800      	cmp	r0, #0
 8010af2:	dcb6      	bgt.n	8010a62 <_dtoa_r+0xa42>
 8010af4:	d102      	bne.n	8010afc <_dtoa_r+0xadc>
 8010af6:	f018 0f01 	tst.w	r8, #1
 8010afa:	d1b2      	bne.n	8010a62 <_dtoa_r+0xa42>
 8010afc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010b00:	2b30      	cmp	r3, #48	; 0x30
 8010b02:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8010b06:	f47f af0a 	bne.w	801091e <_dtoa_r+0x8fe>
 8010b0a:	4615      	mov	r5, r2
 8010b0c:	e7f6      	b.n	8010afc <_dtoa_r+0xadc>
 8010b0e:	4593      	cmp	fp, r2
 8010b10:	d105      	bne.n	8010b1e <_dtoa_r+0xafe>
 8010b12:	2331      	movs	r3, #49	; 0x31
 8010b14:	f10a 0a01 	add.w	sl, sl, #1
 8010b18:	f88b 3000 	strb.w	r3, [fp]
 8010b1c:	e6ff      	b.n	801091e <_dtoa_r+0x8fe>
 8010b1e:	4615      	mov	r5, r2
 8010b20:	e79f      	b.n	8010a62 <_dtoa_r+0xa42>
 8010b22:	f8df b064 	ldr.w	fp, [pc, #100]	; 8010b88 <_dtoa_r+0xb68>
 8010b26:	e007      	b.n	8010b38 <_dtoa_r+0xb18>
 8010b28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010b2a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8010b8c <_dtoa_r+0xb6c>
 8010b2e:	b11b      	cbz	r3, 8010b38 <_dtoa_r+0xb18>
 8010b30:	f10b 0308 	add.w	r3, fp, #8
 8010b34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010b36:	6013      	str	r3, [r2, #0]
 8010b38:	4658      	mov	r0, fp
 8010b3a:	b017      	add	sp, #92	; 0x5c
 8010b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b40:	9b06      	ldr	r3, [sp, #24]
 8010b42:	2b01      	cmp	r3, #1
 8010b44:	f77f ae35 	ble.w	80107b2 <_dtoa_r+0x792>
 8010b48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010b4a:	9307      	str	r3, [sp, #28]
 8010b4c:	e649      	b.n	80107e2 <_dtoa_r+0x7c2>
 8010b4e:	9b02      	ldr	r3, [sp, #8]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	dc03      	bgt.n	8010b5c <_dtoa_r+0xb3c>
 8010b54:	9b06      	ldr	r3, [sp, #24]
 8010b56:	2b02      	cmp	r3, #2
 8010b58:	f73f aecc 	bgt.w	80108f4 <_dtoa_r+0x8d4>
 8010b5c:	465d      	mov	r5, fp
 8010b5e:	4639      	mov	r1, r7
 8010b60:	9804      	ldr	r0, [sp, #16]
 8010b62:	f7ff f9cf 	bl	800ff04 <quorem>
 8010b66:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8010b6a:	f805 8b01 	strb.w	r8, [r5], #1
 8010b6e:	9a02      	ldr	r2, [sp, #8]
 8010b70:	eba5 030b 	sub.w	r3, r5, fp
 8010b74:	429a      	cmp	r2, r3
 8010b76:	ddb0      	ble.n	8010ada <_dtoa_r+0xaba>
 8010b78:	2300      	movs	r3, #0
 8010b7a:	220a      	movs	r2, #10
 8010b7c:	9904      	ldr	r1, [sp, #16]
 8010b7e:	4620      	mov	r0, r4
 8010b80:	f000 fa50 	bl	8011024 <__multadd>
 8010b84:	9004      	str	r0, [sp, #16]
 8010b86:	e7ea      	b.n	8010b5e <_dtoa_r+0xb3e>
 8010b88:	08014794 	.word	0x08014794
 8010b8c:	0801450a 	.word	0x0801450a

08010b90 <__sflush_r>:
 8010b90:	898a      	ldrh	r2, [r1, #12]
 8010b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b96:	4605      	mov	r5, r0
 8010b98:	0710      	lsls	r0, r2, #28
 8010b9a:	460c      	mov	r4, r1
 8010b9c:	d458      	bmi.n	8010c50 <__sflush_r+0xc0>
 8010b9e:	684b      	ldr	r3, [r1, #4]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	dc05      	bgt.n	8010bb0 <__sflush_r+0x20>
 8010ba4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	dc02      	bgt.n	8010bb0 <__sflush_r+0x20>
 8010baa:	2000      	movs	r0, #0
 8010bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010bb2:	2e00      	cmp	r6, #0
 8010bb4:	d0f9      	beq.n	8010baa <__sflush_r+0x1a>
 8010bb6:	2300      	movs	r3, #0
 8010bb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010bbc:	682f      	ldr	r7, [r5, #0]
 8010bbe:	6a21      	ldr	r1, [r4, #32]
 8010bc0:	602b      	str	r3, [r5, #0]
 8010bc2:	d032      	beq.n	8010c2a <__sflush_r+0x9a>
 8010bc4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010bc6:	89a3      	ldrh	r3, [r4, #12]
 8010bc8:	075a      	lsls	r2, r3, #29
 8010bca:	d505      	bpl.n	8010bd8 <__sflush_r+0x48>
 8010bcc:	6863      	ldr	r3, [r4, #4]
 8010bce:	1ac0      	subs	r0, r0, r3
 8010bd0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010bd2:	b10b      	cbz	r3, 8010bd8 <__sflush_r+0x48>
 8010bd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010bd6:	1ac0      	subs	r0, r0, r3
 8010bd8:	2300      	movs	r3, #0
 8010bda:	4602      	mov	r2, r0
 8010bdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010bde:	6a21      	ldr	r1, [r4, #32]
 8010be0:	4628      	mov	r0, r5
 8010be2:	47b0      	blx	r6
 8010be4:	1c43      	adds	r3, r0, #1
 8010be6:	89a3      	ldrh	r3, [r4, #12]
 8010be8:	d106      	bne.n	8010bf8 <__sflush_r+0x68>
 8010bea:	6829      	ldr	r1, [r5, #0]
 8010bec:	291d      	cmp	r1, #29
 8010bee:	d848      	bhi.n	8010c82 <__sflush_r+0xf2>
 8010bf0:	4a29      	ldr	r2, [pc, #164]	; (8010c98 <__sflush_r+0x108>)
 8010bf2:	40ca      	lsrs	r2, r1
 8010bf4:	07d6      	lsls	r6, r2, #31
 8010bf6:	d544      	bpl.n	8010c82 <__sflush_r+0xf2>
 8010bf8:	2200      	movs	r2, #0
 8010bfa:	6062      	str	r2, [r4, #4]
 8010bfc:	04d9      	lsls	r1, r3, #19
 8010bfe:	6922      	ldr	r2, [r4, #16]
 8010c00:	6022      	str	r2, [r4, #0]
 8010c02:	d504      	bpl.n	8010c0e <__sflush_r+0x7e>
 8010c04:	1c42      	adds	r2, r0, #1
 8010c06:	d101      	bne.n	8010c0c <__sflush_r+0x7c>
 8010c08:	682b      	ldr	r3, [r5, #0]
 8010c0a:	b903      	cbnz	r3, 8010c0e <__sflush_r+0x7e>
 8010c0c:	6560      	str	r0, [r4, #84]	; 0x54
 8010c0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010c10:	602f      	str	r7, [r5, #0]
 8010c12:	2900      	cmp	r1, #0
 8010c14:	d0c9      	beq.n	8010baa <__sflush_r+0x1a>
 8010c16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010c1a:	4299      	cmp	r1, r3
 8010c1c:	d002      	beq.n	8010c24 <__sflush_r+0x94>
 8010c1e:	4628      	mov	r0, r5
 8010c20:	f000 fc9e 	bl	8011560 <_free_r>
 8010c24:	2000      	movs	r0, #0
 8010c26:	6360      	str	r0, [r4, #52]	; 0x34
 8010c28:	e7c0      	b.n	8010bac <__sflush_r+0x1c>
 8010c2a:	2301      	movs	r3, #1
 8010c2c:	4628      	mov	r0, r5
 8010c2e:	47b0      	blx	r6
 8010c30:	1c41      	adds	r1, r0, #1
 8010c32:	d1c8      	bne.n	8010bc6 <__sflush_r+0x36>
 8010c34:	682b      	ldr	r3, [r5, #0]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d0c5      	beq.n	8010bc6 <__sflush_r+0x36>
 8010c3a:	2b1d      	cmp	r3, #29
 8010c3c:	d001      	beq.n	8010c42 <__sflush_r+0xb2>
 8010c3e:	2b16      	cmp	r3, #22
 8010c40:	d101      	bne.n	8010c46 <__sflush_r+0xb6>
 8010c42:	602f      	str	r7, [r5, #0]
 8010c44:	e7b1      	b.n	8010baa <__sflush_r+0x1a>
 8010c46:	89a3      	ldrh	r3, [r4, #12]
 8010c48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c4c:	81a3      	strh	r3, [r4, #12]
 8010c4e:	e7ad      	b.n	8010bac <__sflush_r+0x1c>
 8010c50:	690f      	ldr	r7, [r1, #16]
 8010c52:	2f00      	cmp	r7, #0
 8010c54:	d0a9      	beq.n	8010baa <__sflush_r+0x1a>
 8010c56:	0793      	lsls	r3, r2, #30
 8010c58:	680e      	ldr	r6, [r1, #0]
 8010c5a:	bf08      	it	eq
 8010c5c:	694b      	ldreq	r3, [r1, #20]
 8010c5e:	600f      	str	r7, [r1, #0]
 8010c60:	bf18      	it	ne
 8010c62:	2300      	movne	r3, #0
 8010c64:	eba6 0807 	sub.w	r8, r6, r7
 8010c68:	608b      	str	r3, [r1, #8]
 8010c6a:	f1b8 0f00 	cmp.w	r8, #0
 8010c6e:	dd9c      	ble.n	8010baa <__sflush_r+0x1a>
 8010c70:	4643      	mov	r3, r8
 8010c72:	463a      	mov	r2, r7
 8010c74:	6a21      	ldr	r1, [r4, #32]
 8010c76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010c78:	4628      	mov	r0, r5
 8010c7a:	47b0      	blx	r6
 8010c7c:	2800      	cmp	r0, #0
 8010c7e:	dc06      	bgt.n	8010c8e <__sflush_r+0xfe>
 8010c80:	89a3      	ldrh	r3, [r4, #12]
 8010c82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c86:	81a3      	strh	r3, [r4, #12]
 8010c88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010c8c:	e78e      	b.n	8010bac <__sflush_r+0x1c>
 8010c8e:	4407      	add	r7, r0
 8010c90:	eba8 0800 	sub.w	r8, r8, r0
 8010c94:	e7e9      	b.n	8010c6a <__sflush_r+0xda>
 8010c96:	bf00      	nop
 8010c98:	20400001 	.word	0x20400001

08010c9c <_fflush_r>:
 8010c9c:	b538      	push	{r3, r4, r5, lr}
 8010c9e:	690b      	ldr	r3, [r1, #16]
 8010ca0:	4605      	mov	r5, r0
 8010ca2:	460c      	mov	r4, r1
 8010ca4:	b1db      	cbz	r3, 8010cde <_fflush_r+0x42>
 8010ca6:	b118      	cbz	r0, 8010cb0 <_fflush_r+0x14>
 8010ca8:	6983      	ldr	r3, [r0, #24]
 8010caa:	b90b      	cbnz	r3, 8010cb0 <_fflush_r+0x14>
 8010cac:	f000 f860 	bl	8010d70 <__sinit>
 8010cb0:	4b0c      	ldr	r3, [pc, #48]	; (8010ce4 <_fflush_r+0x48>)
 8010cb2:	429c      	cmp	r4, r3
 8010cb4:	d109      	bne.n	8010cca <_fflush_r+0x2e>
 8010cb6:	686c      	ldr	r4, [r5, #4]
 8010cb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010cbc:	b17b      	cbz	r3, 8010cde <_fflush_r+0x42>
 8010cbe:	4621      	mov	r1, r4
 8010cc0:	4628      	mov	r0, r5
 8010cc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010cc6:	f7ff bf63 	b.w	8010b90 <__sflush_r>
 8010cca:	4b07      	ldr	r3, [pc, #28]	; (8010ce8 <_fflush_r+0x4c>)
 8010ccc:	429c      	cmp	r4, r3
 8010cce:	d101      	bne.n	8010cd4 <_fflush_r+0x38>
 8010cd0:	68ac      	ldr	r4, [r5, #8]
 8010cd2:	e7f1      	b.n	8010cb8 <_fflush_r+0x1c>
 8010cd4:	4b05      	ldr	r3, [pc, #20]	; (8010cec <_fflush_r+0x50>)
 8010cd6:	429c      	cmp	r4, r3
 8010cd8:	bf08      	it	eq
 8010cda:	68ec      	ldreq	r4, [r5, #12]
 8010cdc:	e7ec      	b.n	8010cb8 <_fflush_r+0x1c>
 8010cde:	2000      	movs	r0, #0
 8010ce0:	bd38      	pop	{r3, r4, r5, pc}
 8010ce2:	bf00      	nop
 8010ce4:	08014538 	.word	0x08014538
 8010ce8:	08014558 	.word	0x08014558
 8010cec:	08014518 	.word	0x08014518

08010cf0 <std>:
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	b510      	push	{r4, lr}
 8010cf4:	4604      	mov	r4, r0
 8010cf6:	e9c0 3300 	strd	r3, r3, [r0]
 8010cfa:	6083      	str	r3, [r0, #8]
 8010cfc:	8181      	strh	r1, [r0, #12]
 8010cfe:	6643      	str	r3, [r0, #100]	; 0x64
 8010d00:	81c2      	strh	r2, [r0, #14]
 8010d02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010d06:	6183      	str	r3, [r0, #24]
 8010d08:	4619      	mov	r1, r3
 8010d0a:	2208      	movs	r2, #8
 8010d0c:	305c      	adds	r0, #92	; 0x5c
 8010d0e:	f7fe fb15 	bl	800f33c <memset>
 8010d12:	4b05      	ldr	r3, [pc, #20]	; (8010d28 <std+0x38>)
 8010d14:	6263      	str	r3, [r4, #36]	; 0x24
 8010d16:	4b05      	ldr	r3, [pc, #20]	; (8010d2c <std+0x3c>)
 8010d18:	62a3      	str	r3, [r4, #40]	; 0x28
 8010d1a:	4b05      	ldr	r3, [pc, #20]	; (8010d30 <std+0x40>)
 8010d1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010d1e:	4b05      	ldr	r3, [pc, #20]	; (8010d34 <std+0x44>)
 8010d20:	6224      	str	r4, [r4, #32]
 8010d22:	6323      	str	r3, [r4, #48]	; 0x30
 8010d24:	bd10      	pop	{r4, pc}
 8010d26:	bf00      	nop
 8010d28:	08011bf5 	.word	0x08011bf5
 8010d2c:	08011c17 	.word	0x08011c17
 8010d30:	08011c4f 	.word	0x08011c4f
 8010d34:	08011c73 	.word	0x08011c73

08010d38 <_cleanup_r>:
 8010d38:	4901      	ldr	r1, [pc, #4]	; (8010d40 <_cleanup_r+0x8>)
 8010d3a:	f000 b885 	b.w	8010e48 <_fwalk_reent>
 8010d3e:	bf00      	nop
 8010d40:	08010c9d 	.word	0x08010c9d

08010d44 <__sfmoreglue>:
 8010d44:	b570      	push	{r4, r5, r6, lr}
 8010d46:	1e4a      	subs	r2, r1, #1
 8010d48:	2568      	movs	r5, #104	; 0x68
 8010d4a:	4355      	muls	r5, r2
 8010d4c:	460e      	mov	r6, r1
 8010d4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010d52:	f000 fc53 	bl	80115fc <_malloc_r>
 8010d56:	4604      	mov	r4, r0
 8010d58:	b140      	cbz	r0, 8010d6c <__sfmoreglue+0x28>
 8010d5a:	2100      	movs	r1, #0
 8010d5c:	e9c0 1600 	strd	r1, r6, [r0]
 8010d60:	300c      	adds	r0, #12
 8010d62:	60a0      	str	r0, [r4, #8]
 8010d64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010d68:	f7fe fae8 	bl	800f33c <memset>
 8010d6c:	4620      	mov	r0, r4
 8010d6e:	bd70      	pop	{r4, r5, r6, pc}

08010d70 <__sinit>:
 8010d70:	6983      	ldr	r3, [r0, #24]
 8010d72:	b510      	push	{r4, lr}
 8010d74:	4604      	mov	r4, r0
 8010d76:	bb33      	cbnz	r3, 8010dc6 <__sinit+0x56>
 8010d78:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8010d7c:	6503      	str	r3, [r0, #80]	; 0x50
 8010d7e:	4b12      	ldr	r3, [pc, #72]	; (8010dc8 <__sinit+0x58>)
 8010d80:	4a12      	ldr	r2, [pc, #72]	; (8010dcc <__sinit+0x5c>)
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	6282      	str	r2, [r0, #40]	; 0x28
 8010d86:	4298      	cmp	r0, r3
 8010d88:	bf04      	itt	eq
 8010d8a:	2301      	moveq	r3, #1
 8010d8c:	6183      	streq	r3, [r0, #24]
 8010d8e:	f000 f81f 	bl	8010dd0 <__sfp>
 8010d92:	6060      	str	r0, [r4, #4]
 8010d94:	4620      	mov	r0, r4
 8010d96:	f000 f81b 	bl	8010dd0 <__sfp>
 8010d9a:	60a0      	str	r0, [r4, #8]
 8010d9c:	4620      	mov	r0, r4
 8010d9e:	f000 f817 	bl	8010dd0 <__sfp>
 8010da2:	2200      	movs	r2, #0
 8010da4:	60e0      	str	r0, [r4, #12]
 8010da6:	2104      	movs	r1, #4
 8010da8:	6860      	ldr	r0, [r4, #4]
 8010daa:	f7ff ffa1 	bl	8010cf0 <std>
 8010dae:	2201      	movs	r2, #1
 8010db0:	2109      	movs	r1, #9
 8010db2:	68a0      	ldr	r0, [r4, #8]
 8010db4:	f7ff ff9c 	bl	8010cf0 <std>
 8010db8:	2202      	movs	r2, #2
 8010dba:	2112      	movs	r1, #18
 8010dbc:	68e0      	ldr	r0, [r4, #12]
 8010dbe:	f7ff ff97 	bl	8010cf0 <std>
 8010dc2:	2301      	movs	r3, #1
 8010dc4:	61a3      	str	r3, [r4, #24]
 8010dc6:	bd10      	pop	{r4, pc}
 8010dc8:	080144d4 	.word	0x080144d4
 8010dcc:	08010d39 	.word	0x08010d39

08010dd0 <__sfp>:
 8010dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dd2:	4b1b      	ldr	r3, [pc, #108]	; (8010e40 <__sfp+0x70>)
 8010dd4:	681e      	ldr	r6, [r3, #0]
 8010dd6:	69b3      	ldr	r3, [r6, #24]
 8010dd8:	4607      	mov	r7, r0
 8010dda:	b913      	cbnz	r3, 8010de2 <__sfp+0x12>
 8010ddc:	4630      	mov	r0, r6
 8010dde:	f7ff ffc7 	bl	8010d70 <__sinit>
 8010de2:	3648      	adds	r6, #72	; 0x48
 8010de4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010de8:	3b01      	subs	r3, #1
 8010dea:	d503      	bpl.n	8010df4 <__sfp+0x24>
 8010dec:	6833      	ldr	r3, [r6, #0]
 8010dee:	b133      	cbz	r3, 8010dfe <__sfp+0x2e>
 8010df0:	6836      	ldr	r6, [r6, #0]
 8010df2:	e7f7      	b.n	8010de4 <__sfp+0x14>
 8010df4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010df8:	b16d      	cbz	r5, 8010e16 <__sfp+0x46>
 8010dfa:	3468      	adds	r4, #104	; 0x68
 8010dfc:	e7f4      	b.n	8010de8 <__sfp+0x18>
 8010dfe:	2104      	movs	r1, #4
 8010e00:	4638      	mov	r0, r7
 8010e02:	f7ff ff9f 	bl	8010d44 <__sfmoreglue>
 8010e06:	6030      	str	r0, [r6, #0]
 8010e08:	2800      	cmp	r0, #0
 8010e0a:	d1f1      	bne.n	8010df0 <__sfp+0x20>
 8010e0c:	230c      	movs	r3, #12
 8010e0e:	603b      	str	r3, [r7, #0]
 8010e10:	4604      	mov	r4, r0
 8010e12:	4620      	mov	r0, r4
 8010e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e16:	4b0b      	ldr	r3, [pc, #44]	; (8010e44 <__sfp+0x74>)
 8010e18:	6665      	str	r5, [r4, #100]	; 0x64
 8010e1a:	e9c4 5500 	strd	r5, r5, [r4]
 8010e1e:	60a5      	str	r5, [r4, #8]
 8010e20:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8010e24:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8010e28:	2208      	movs	r2, #8
 8010e2a:	4629      	mov	r1, r5
 8010e2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010e30:	f7fe fa84 	bl	800f33c <memset>
 8010e34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010e38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010e3c:	e7e9      	b.n	8010e12 <__sfp+0x42>
 8010e3e:	bf00      	nop
 8010e40:	080144d4 	.word	0x080144d4
 8010e44:	ffff0001 	.word	0xffff0001

08010e48 <_fwalk_reent>:
 8010e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e4c:	4680      	mov	r8, r0
 8010e4e:	4689      	mov	r9, r1
 8010e50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010e54:	2600      	movs	r6, #0
 8010e56:	b914      	cbnz	r4, 8010e5e <_fwalk_reent+0x16>
 8010e58:	4630      	mov	r0, r6
 8010e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e5e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8010e62:	3f01      	subs	r7, #1
 8010e64:	d501      	bpl.n	8010e6a <_fwalk_reent+0x22>
 8010e66:	6824      	ldr	r4, [r4, #0]
 8010e68:	e7f5      	b.n	8010e56 <_fwalk_reent+0xe>
 8010e6a:	89ab      	ldrh	r3, [r5, #12]
 8010e6c:	2b01      	cmp	r3, #1
 8010e6e:	d907      	bls.n	8010e80 <_fwalk_reent+0x38>
 8010e70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010e74:	3301      	adds	r3, #1
 8010e76:	d003      	beq.n	8010e80 <_fwalk_reent+0x38>
 8010e78:	4629      	mov	r1, r5
 8010e7a:	4640      	mov	r0, r8
 8010e7c:	47c8      	blx	r9
 8010e7e:	4306      	orrs	r6, r0
 8010e80:	3568      	adds	r5, #104	; 0x68
 8010e82:	e7ee      	b.n	8010e62 <_fwalk_reent+0x1a>

08010e84 <_localeconv_r>:
 8010e84:	4b04      	ldr	r3, [pc, #16]	; (8010e98 <_localeconv_r+0x14>)
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	6a18      	ldr	r0, [r3, #32]
 8010e8a:	4b04      	ldr	r3, [pc, #16]	; (8010e9c <_localeconv_r+0x18>)
 8010e8c:	2800      	cmp	r0, #0
 8010e8e:	bf08      	it	eq
 8010e90:	4618      	moveq	r0, r3
 8010e92:	30f0      	adds	r0, #240	; 0xf0
 8010e94:	4770      	bx	lr
 8010e96:	bf00      	nop
 8010e98:	20001c34 	.word	0x20001c34
 8010e9c:	20001c98 	.word	0x20001c98

08010ea0 <__swhatbuf_r>:
 8010ea0:	b570      	push	{r4, r5, r6, lr}
 8010ea2:	460e      	mov	r6, r1
 8010ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ea8:	2900      	cmp	r1, #0
 8010eaa:	b096      	sub	sp, #88	; 0x58
 8010eac:	4614      	mov	r4, r2
 8010eae:	461d      	mov	r5, r3
 8010eb0:	da07      	bge.n	8010ec2 <__swhatbuf_r+0x22>
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	602b      	str	r3, [r5, #0]
 8010eb6:	89b3      	ldrh	r3, [r6, #12]
 8010eb8:	061a      	lsls	r2, r3, #24
 8010eba:	d410      	bmi.n	8010ede <__swhatbuf_r+0x3e>
 8010ebc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ec0:	e00e      	b.n	8010ee0 <__swhatbuf_r+0x40>
 8010ec2:	466a      	mov	r2, sp
 8010ec4:	f000 fefc 	bl	8011cc0 <_fstat_r>
 8010ec8:	2800      	cmp	r0, #0
 8010eca:	dbf2      	blt.n	8010eb2 <__swhatbuf_r+0x12>
 8010ecc:	9a01      	ldr	r2, [sp, #4]
 8010ece:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010ed2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010ed6:	425a      	negs	r2, r3
 8010ed8:	415a      	adcs	r2, r3
 8010eda:	602a      	str	r2, [r5, #0]
 8010edc:	e7ee      	b.n	8010ebc <__swhatbuf_r+0x1c>
 8010ede:	2340      	movs	r3, #64	; 0x40
 8010ee0:	2000      	movs	r0, #0
 8010ee2:	6023      	str	r3, [r4, #0]
 8010ee4:	b016      	add	sp, #88	; 0x58
 8010ee6:	bd70      	pop	{r4, r5, r6, pc}

08010ee8 <__smakebuf_r>:
 8010ee8:	898b      	ldrh	r3, [r1, #12]
 8010eea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010eec:	079d      	lsls	r5, r3, #30
 8010eee:	4606      	mov	r6, r0
 8010ef0:	460c      	mov	r4, r1
 8010ef2:	d507      	bpl.n	8010f04 <__smakebuf_r+0x1c>
 8010ef4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010ef8:	6023      	str	r3, [r4, #0]
 8010efa:	6123      	str	r3, [r4, #16]
 8010efc:	2301      	movs	r3, #1
 8010efe:	6163      	str	r3, [r4, #20]
 8010f00:	b002      	add	sp, #8
 8010f02:	bd70      	pop	{r4, r5, r6, pc}
 8010f04:	ab01      	add	r3, sp, #4
 8010f06:	466a      	mov	r2, sp
 8010f08:	f7ff ffca 	bl	8010ea0 <__swhatbuf_r>
 8010f0c:	9900      	ldr	r1, [sp, #0]
 8010f0e:	4605      	mov	r5, r0
 8010f10:	4630      	mov	r0, r6
 8010f12:	f000 fb73 	bl	80115fc <_malloc_r>
 8010f16:	b948      	cbnz	r0, 8010f2c <__smakebuf_r+0x44>
 8010f18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f1c:	059a      	lsls	r2, r3, #22
 8010f1e:	d4ef      	bmi.n	8010f00 <__smakebuf_r+0x18>
 8010f20:	f023 0303 	bic.w	r3, r3, #3
 8010f24:	f043 0302 	orr.w	r3, r3, #2
 8010f28:	81a3      	strh	r3, [r4, #12]
 8010f2a:	e7e3      	b.n	8010ef4 <__smakebuf_r+0xc>
 8010f2c:	4b0d      	ldr	r3, [pc, #52]	; (8010f64 <__smakebuf_r+0x7c>)
 8010f2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8010f30:	89a3      	ldrh	r3, [r4, #12]
 8010f32:	6020      	str	r0, [r4, #0]
 8010f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f38:	81a3      	strh	r3, [r4, #12]
 8010f3a:	9b00      	ldr	r3, [sp, #0]
 8010f3c:	6163      	str	r3, [r4, #20]
 8010f3e:	9b01      	ldr	r3, [sp, #4]
 8010f40:	6120      	str	r0, [r4, #16]
 8010f42:	b15b      	cbz	r3, 8010f5c <__smakebuf_r+0x74>
 8010f44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010f48:	4630      	mov	r0, r6
 8010f4a:	f000 fecb 	bl	8011ce4 <_isatty_r>
 8010f4e:	b128      	cbz	r0, 8010f5c <__smakebuf_r+0x74>
 8010f50:	89a3      	ldrh	r3, [r4, #12]
 8010f52:	f023 0303 	bic.w	r3, r3, #3
 8010f56:	f043 0301 	orr.w	r3, r3, #1
 8010f5a:	81a3      	strh	r3, [r4, #12]
 8010f5c:	89a3      	ldrh	r3, [r4, #12]
 8010f5e:	431d      	orrs	r5, r3
 8010f60:	81a5      	strh	r5, [r4, #12]
 8010f62:	e7cd      	b.n	8010f00 <__smakebuf_r+0x18>
 8010f64:	08010d39 	.word	0x08010d39

08010f68 <malloc>:
 8010f68:	4b02      	ldr	r3, [pc, #8]	; (8010f74 <malloc+0xc>)
 8010f6a:	4601      	mov	r1, r0
 8010f6c:	6818      	ldr	r0, [r3, #0]
 8010f6e:	f000 bb45 	b.w	80115fc <_malloc_r>
 8010f72:	bf00      	nop
 8010f74:	20001c34 	.word	0x20001c34

08010f78 <memcpy>:
 8010f78:	b510      	push	{r4, lr}
 8010f7a:	1e43      	subs	r3, r0, #1
 8010f7c:	440a      	add	r2, r1
 8010f7e:	4291      	cmp	r1, r2
 8010f80:	d100      	bne.n	8010f84 <memcpy+0xc>
 8010f82:	bd10      	pop	{r4, pc}
 8010f84:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010f88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010f8c:	e7f7      	b.n	8010f7e <memcpy+0x6>

08010f8e <_Balloc>:
 8010f8e:	b570      	push	{r4, r5, r6, lr}
 8010f90:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010f92:	4604      	mov	r4, r0
 8010f94:	460e      	mov	r6, r1
 8010f96:	b93d      	cbnz	r5, 8010fa8 <_Balloc+0x1a>
 8010f98:	2010      	movs	r0, #16
 8010f9a:	f7ff ffe5 	bl	8010f68 <malloc>
 8010f9e:	6260      	str	r0, [r4, #36]	; 0x24
 8010fa0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010fa4:	6005      	str	r5, [r0, #0]
 8010fa6:	60c5      	str	r5, [r0, #12]
 8010fa8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8010faa:	68eb      	ldr	r3, [r5, #12]
 8010fac:	b183      	cbz	r3, 8010fd0 <_Balloc+0x42>
 8010fae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010fb0:	68db      	ldr	r3, [r3, #12]
 8010fb2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8010fb6:	b9b8      	cbnz	r0, 8010fe8 <_Balloc+0x5a>
 8010fb8:	2101      	movs	r1, #1
 8010fba:	fa01 f506 	lsl.w	r5, r1, r6
 8010fbe:	1d6a      	adds	r2, r5, #5
 8010fc0:	0092      	lsls	r2, r2, #2
 8010fc2:	4620      	mov	r0, r4
 8010fc4:	f000 fabe 	bl	8011544 <_calloc_r>
 8010fc8:	b160      	cbz	r0, 8010fe4 <_Balloc+0x56>
 8010fca:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8010fce:	e00e      	b.n	8010fee <_Balloc+0x60>
 8010fd0:	2221      	movs	r2, #33	; 0x21
 8010fd2:	2104      	movs	r1, #4
 8010fd4:	4620      	mov	r0, r4
 8010fd6:	f000 fab5 	bl	8011544 <_calloc_r>
 8010fda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010fdc:	60e8      	str	r0, [r5, #12]
 8010fde:	68db      	ldr	r3, [r3, #12]
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d1e4      	bne.n	8010fae <_Balloc+0x20>
 8010fe4:	2000      	movs	r0, #0
 8010fe6:	bd70      	pop	{r4, r5, r6, pc}
 8010fe8:	6802      	ldr	r2, [r0, #0]
 8010fea:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8010fee:	2300      	movs	r3, #0
 8010ff0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010ff4:	e7f7      	b.n	8010fe6 <_Balloc+0x58>

08010ff6 <_Bfree>:
 8010ff6:	b570      	push	{r4, r5, r6, lr}
 8010ff8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8010ffa:	4606      	mov	r6, r0
 8010ffc:	460d      	mov	r5, r1
 8010ffe:	b93c      	cbnz	r4, 8011010 <_Bfree+0x1a>
 8011000:	2010      	movs	r0, #16
 8011002:	f7ff ffb1 	bl	8010f68 <malloc>
 8011006:	6270      	str	r0, [r6, #36]	; 0x24
 8011008:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801100c:	6004      	str	r4, [r0, #0]
 801100e:	60c4      	str	r4, [r0, #12]
 8011010:	b13d      	cbz	r5, 8011022 <_Bfree+0x2c>
 8011012:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011014:	686a      	ldr	r2, [r5, #4]
 8011016:	68db      	ldr	r3, [r3, #12]
 8011018:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801101c:	6029      	str	r1, [r5, #0]
 801101e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8011022:	bd70      	pop	{r4, r5, r6, pc}

08011024 <__multadd>:
 8011024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011028:	690d      	ldr	r5, [r1, #16]
 801102a:	461f      	mov	r7, r3
 801102c:	4606      	mov	r6, r0
 801102e:	460c      	mov	r4, r1
 8011030:	f101 0c14 	add.w	ip, r1, #20
 8011034:	2300      	movs	r3, #0
 8011036:	f8dc 0000 	ldr.w	r0, [ip]
 801103a:	b281      	uxth	r1, r0
 801103c:	fb02 7101 	mla	r1, r2, r1, r7
 8011040:	0c0f      	lsrs	r7, r1, #16
 8011042:	0c00      	lsrs	r0, r0, #16
 8011044:	fb02 7000 	mla	r0, r2, r0, r7
 8011048:	b289      	uxth	r1, r1
 801104a:	3301      	adds	r3, #1
 801104c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8011050:	429d      	cmp	r5, r3
 8011052:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8011056:	f84c 1b04 	str.w	r1, [ip], #4
 801105a:	dcec      	bgt.n	8011036 <__multadd+0x12>
 801105c:	b1d7      	cbz	r7, 8011094 <__multadd+0x70>
 801105e:	68a3      	ldr	r3, [r4, #8]
 8011060:	42ab      	cmp	r3, r5
 8011062:	dc12      	bgt.n	801108a <__multadd+0x66>
 8011064:	6861      	ldr	r1, [r4, #4]
 8011066:	4630      	mov	r0, r6
 8011068:	3101      	adds	r1, #1
 801106a:	f7ff ff90 	bl	8010f8e <_Balloc>
 801106e:	6922      	ldr	r2, [r4, #16]
 8011070:	3202      	adds	r2, #2
 8011072:	f104 010c 	add.w	r1, r4, #12
 8011076:	4680      	mov	r8, r0
 8011078:	0092      	lsls	r2, r2, #2
 801107a:	300c      	adds	r0, #12
 801107c:	f7ff ff7c 	bl	8010f78 <memcpy>
 8011080:	4621      	mov	r1, r4
 8011082:	4630      	mov	r0, r6
 8011084:	f7ff ffb7 	bl	8010ff6 <_Bfree>
 8011088:	4644      	mov	r4, r8
 801108a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801108e:	3501      	adds	r5, #1
 8011090:	615f      	str	r7, [r3, #20]
 8011092:	6125      	str	r5, [r4, #16]
 8011094:	4620      	mov	r0, r4
 8011096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801109a <__hi0bits>:
 801109a:	0c02      	lsrs	r2, r0, #16
 801109c:	0412      	lsls	r2, r2, #16
 801109e:	4603      	mov	r3, r0
 80110a0:	b9b2      	cbnz	r2, 80110d0 <__hi0bits+0x36>
 80110a2:	0403      	lsls	r3, r0, #16
 80110a4:	2010      	movs	r0, #16
 80110a6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80110aa:	bf04      	itt	eq
 80110ac:	021b      	lsleq	r3, r3, #8
 80110ae:	3008      	addeq	r0, #8
 80110b0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80110b4:	bf04      	itt	eq
 80110b6:	011b      	lsleq	r3, r3, #4
 80110b8:	3004      	addeq	r0, #4
 80110ba:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80110be:	bf04      	itt	eq
 80110c0:	009b      	lsleq	r3, r3, #2
 80110c2:	3002      	addeq	r0, #2
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	db06      	blt.n	80110d6 <__hi0bits+0x3c>
 80110c8:	005b      	lsls	r3, r3, #1
 80110ca:	d503      	bpl.n	80110d4 <__hi0bits+0x3a>
 80110cc:	3001      	adds	r0, #1
 80110ce:	4770      	bx	lr
 80110d0:	2000      	movs	r0, #0
 80110d2:	e7e8      	b.n	80110a6 <__hi0bits+0xc>
 80110d4:	2020      	movs	r0, #32
 80110d6:	4770      	bx	lr

080110d8 <__lo0bits>:
 80110d8:	6803      	ldr	r3, [r0, #0]
 80110da:	f013 0207 	ands.w	r2, r3, #7
 80110de:	4601      	mov	r1, r0
 80110e0:	d00b      	beq.n	80110fa <__lo0bits+0x22>
 80110e2:	07da      	lsls	r2, r3, #31
 80110e4:	d423      	bmi.n	801112e <__lo0bits+0x56>
 80110e6:	0798      	lsls	r0, r3, #30
 80110e8:	bf49      	itett	mi
 80110ea:	085b      	lsrmi	r3, r3, #1
 80110ec:	089b      	lsrpl	r3, r3, #2
 80110ee:	2001      	movmi	r0, #1
 80110f0:	600b      	strmi	r3, [r1, #0]
 80110f2:	bf5c      	itt	pl
 80110f4:	600b      	strpl	r3, [r1, #0]
 80110f6:	2002      	movpl	r0, #2
 80110f8:	4770      	bx	lr
 80110fa:	b298      	uxth	r0, r3
 80110fc:	b9a8      	cbnz	r0, 801112a <__lo0bits+0x52>
 80110fe:	0c1b      	lsrs	r3, r3, #16
 8011100:	2010      	movs	r0, #16
 8011102:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011106:	bf04      	itt	eq
 8011108:	0a1b      	lsreq	r3, r3, #8
 801110a:	3008      	addeq	r0, #8
 801110c:	071a      	lsls	r2, r3, #28
 801110e:	bf04      	itt	eq
 8011110:	091b      	lsreq	r3, r3, #4
 8011112:	3004      	addeq	r0, #4
 8011114:	079a      	lsls	r2, r3, #30
 8011116:	bf04      	itt	eq
 8011118:	089b      	lsreq	r3, r3, #2
 801111a:	3002      	addeq	r0, #2
 801111c:	07da      	lsls	r2, r3, #31
 801111e:	d402      	bmi.n	8011126 <__lo0bits+0x4e>
 8011120:	085b      	lsrs	r3, r3, #1
 8011122:	d006      	beq.n	8011132 <__lo0bits+0x5a>
 8011124:	3001      	adds	r0, #1
 8011126:	600b      	str	r3, [r1, #0]
 8011128:	4770      	bx	lr
 801112a:	4610      	mov	r0, r2
 801112c:	e7e9      	b.n	8011102 <__lo0bits+0x2a>
 801112e:	2000      	movs	r0, #0
 8011130:	4770      	bx	lr
 8011132:	2020      	movs	r0, #32
 8011134:	4770      	bx	lr

08011136 <__i2b>:
 8011136:	b510      	push	{r4, lr}
 8011138:	460c      	mov	r4, r1
 801113a:	2101      	movs	r1, #1
 801113c:	f7ff ff27 	bl	8010f8e <_Balloc>
 8011140:	2201      	movs	r2, #1
 8011142:	6144      	str	r4, [r0, #20]
 8011144:	6102      	str	r2, [r0, #16]
 8011146:	bd10      	pop	{r4, pc}

08011148 <__multiply>:
 8011148:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801114c:	4614      	mov	r4, r2
 801114e:	690a      	ldr	r2, [r1, #16]
 8011150:	6923      	ldr	r3, [r4, #16]
 8011152:	429a      	cmp	r2, r3
 8011154:	bfb8      	it	lt
 8011156:	460b      	movlt	r3, r1
 8011158:	4688      	mov	r8, r1
 801115a:	bfbc      	itt	lt
 801115c:	46a0      	movlt	r8, r4
 801115e:	461c      	movlt	r4, r3
 8011160:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011164:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011168:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801116c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011170:	eb07 0609 	add.w	r6, r7, r9
 8011174:	42b3      	cmp	r3, r6
 8011176:	bfb8      	it	lt
 8011178:	3101      	addlt	r1, #1
 801117a:	f7ff ff08 	bl	8010f8e <_Balloc>
 801117e:	f100 0514 	add.w	r5, r0, #20
 8011182:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8011186:	462b      	mov	r3, r5
 8011188:	2200      	movs	r2, #0
 801118a:	4573      	cmp	r3, lr
 801118c:	d316      	bcc.n	80111bc <__multiply+0x74>
 801118e:	f104 0214 	add.w	r2, r4, #20
 8011192:	f108 0114 	add.w	r1, r8, #20
 8011196:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801119a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801119e:	9300      	str	r3, [sp, #0]
 80111a0:	9b00      	ldr	r3, [sp, #0]
 80111a2:	9201      	str	r2, [sp, #4]
 80111a4:	4293      	cmp	r3, r2
 80111a6:	d80c      	bhi.n	80111c2 <__multiply+0x7a>
 80111a8:	2e00      	cmp	r6, #0
 80111aa:	dd03      	ble.n	80111b4 <__multiply+0x6c>
 80111ac:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d05d      	beq.n	8011270 <__multiply+0x128>
 80111b4:	6106      	str	r6, [r0, #16]
 80111b6:	b003      	add	sp, #12
 80111b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111bc:	f843 2b04 	str.w	r2, [r3], #4
 80111c0:	e7e3      	b.n	801118a <__multiply+0x42>
 80111c2:	f8b2 b000 	ldrh.w	fp, [r2]
 80111c6:	f1bb 0f00 	cmp.w	fp, #0
 80111ca:	d023      	beq.n	8011214 <__multiply+0xcc>
 80111cc:	4689      	mov	r9, r1
 80111ce:	46ac      	mov	ip, r5
 80111d0:	f04f 0800 	mov.w	r8, #0
 80111d4:	f859 4b04 	ldr.w	r4, [r9], #4
 80111d8:	f8dc a000 	ldr.w	sl, [ip]
 80111dc:	b2a3      	uxth	r3, r4
 80111de:	fa1f fa8a 	uxth.w	sl, sl
 80111e2:	fb0b a303 	mla	r3, fp, r3, sl
 80111e6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80111ea:	f8dc 4000 	ldr.w	r4, [ip]
 80111ee:	4443      	add	r3, r8
 80111f0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80111f4:	fb0b 840a 	mla	r4, fp, sl, r8
 80111f8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80111fc:	46e2      	mov	sl, ip
 80111fe:	b29b      	uxth	r3, r3
 8011200:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011204:	454f      	cmp	r7, r9
 8011206:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801120a:	f84a 3b04 	str.w	r3, [sl], #4
 801120e:	d82b      	bhi.n	8011268 <__multiply+0x120>
 8011210:	f8cc 8004 	str.w	r8, [ip, #4]
 8011214:	9b01      	ldr	r3, [sp, #4]
 8011216:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801121a:	3204      	adds	r2, #4
 801121c:	f1ba 0f00 	cmp.w	sl, #0
 8011220:	d020      	beq.n	8011264 <__multiply+0x11c>
 8011222:	682b      	ldr	r3, [r5, #0]
 8011224:	4689      	mov	r9, r1
 8011226:	46a8      	mov	r8, r5
 8011228:	f04f 0b00 	mov.w	fp, #0
 801122c:	f8b9 c000 	ldrh.w	ip, [r9]
 8011230:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8011234:	fb0a 440c 	mla	r4, sl, ip, r4
 8011238:	445c      	add	r4, fp
 801123a:	46c4      	mov	ip, r8
 801123c:	b29b      	uxth	r3, r3
 801123e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011242:	f84c 3b04 	str.w	r3, [ip], #4
 8011246:	f859 3b04 	ldr.w	r3, [r9], #4
 801124a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801124e:	0c1b      	lsrs	r3, r3, #16
 8011250:	fb0a b303 	mla	r3, sl, r3, fp
 8011254:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8011258:	454f      	cmp	r7, r9
 801125a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801125e:	d805      	bhi.n	801126c <__multiply+0x124>
 8011260:	f8c8 3004 	str.w	r3, [r8, #4]
 8011264:	3504      	adds	r5, #4
 8011266:	e79b      	b.n	80111a0 <__multiply+0x58>
 8011268:	46d4      	mov	ip, sl
 801126a:	e7b3      	b.n	80111d4 <__multiply+0x8c>
 801126c:	46e0      	mov	r8, ip
 801126e:	e7dd      	b.n	801122c <__multiply+0xe4>
 8011270:	3e01      	subs	r6, #1
 8011272:	e799      	b.n	80111a8 <__multiply+0x60>

08011274 <__pow5mult>:
 8011274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011278:	4615      	mov	r5, r2
 801127a:	f012 0203 	ands.w	r2, r2, #3
 801127e:	4606      	mov	r6, r0
 8011280:	460f      	mov	r7, r1
 8011282:	d007      	beq.n	8011294 <__pow5mult+0x20>
 8011284:	3a01      	subs	r2, #1
 8011286:	4c21      	ldr	r4, [pc, #132]	; (801130c <__pow5mult+0x98>)
 8011288:	2300      	movs	r3, #0
 801128a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801128e:	f7ff fec9 	bl	8011024 <__multadd>
 8011292:	4607      	mov	r7, r0
 8011294:	10ad      	asrs	r5, r5, #2
 8011296:	d035      	beq.n	8011304 <__pow5mult+0x90>
 8011298:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801129a:	b93c      	cbnz	r4, 80112ac <__pow5mult+0x38>
 801129c:	2010      	movs	r0, #16
 801129e:	f7ff fe63 	bl	8010f68 <malloc>
 80112a2:	6270      	str	r0, [r6, #36]	; 0x24
 80112a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80112a8:	6004      	str	r4, [r0, #0]
 80112aa:	60c4      	str	r4, [r0, #12]
 80112ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80112b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80112b4:	b94c      	cbnz	r4, 80112ca <__pow5mult+0x56>
 80112b6:	f240 2171 	movw	r1, #625	; 0x271
 80112ba:	4630      	mov	r0, r6
 80112bc:	f7ff ff3b 	bl	8011136 <__i2b>
 80112c0:	2300      	movs	r3, #0
 80112c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80112c6:	4604      	mov	r4, r0
 80112c8:	6003      	str	r3, [r0, #0]
 80112ca:	f04f 0800 	mov.w	r8, #0
 80112ce:	07eb      	lsls	r3, r5, #31
 80112d0:	d50a      	bpl.n	80112e8 <__pow5mult+0x74>
 80112d2:	4639      	mov	r1, r7
 80112d4:	4622      	mov	r2, r4
 80112d6:	4630      	mov	r0, r6
 80112d8:	f7ff ff36 	bl	8011148 <__multiply>
 80112dc:	4639      	mov	r1, r7
 80112de:	4681      	mov	r9, r0
 80112e0:	4630      	mov	r0, r6
 80112e2:	f7ff fe88 	bl	8010ff6 <_Bfree>
 80112e6:	464f      	mov	r7, r9
 80112e8:	106d      	asrs	r5, r5, #1
 80112ea:	d00b      	beq.n	8011304 <__pow5mult+0x90>
 80112ec:	6820      	ldr	r0, [r4, #0]
 80112ee:	b938      	cbnz	r0, 8011300 <__pow5mult+0x8c>
 80112f0:	4622      	mov	r2, r4
 80112f2:	4621      	mov	r1, r4
 80112f4:	4630      	mov	r0, r6
 80112f6:	f7ff ff27 	bl	8011148 <__multiply>
 80112fa:	6020      	str	r0, [r4, #0]
 80112fc:	f8c0 8000 	str.w	r8, [r0]
 8011300:	4604      	mov	r4, r0
 8011302:	e7e4      	b.n	80112ce <__pow5mult+0x5a>
 8011304:	4638      	mov	r0, r7
 8011306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801130a:	bf00      	nop
 801130c:	08014668 	.word	0x08014668

08011310 <__lshift>:
 8011310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011314:	460c      	mov	r4, r1
 8011316:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801131a:	6923      	ldr	r3, [r4, #16]
 801131c:	6849      	ldr	r1, [r1, #4]
 801131e:	eb0a 0903 	add.w	r9, sl, r3
 8011322:	68a3      	ldr	r3, [r4, #8]
 8011324:	4607      	mov	r7, r0
 8011326:	4616      	mov	r6, r2
 8011328:	f109 0501 	add.w	r5, r9, #1
 801132c:	42ab      	cmp	r3, r5
 801132e:	db32      	blt.n	8011396 <__lshift+0x86>
 8011330:	4638      	mov	r0, r7
 8011332:	f7ff fe2c 	bl	8010f8e <_Balloc>
 8011336:	2300      	movs	r3, #0
 8011338:	4680      	mov	r8, r0
 801133a:	f100 0114 	add.w	r1, r0, #20
 801133e:	461a      	mov	r2, r3
 8011340:	4553      	cmp	r3, sl
 8011342:	db2b      	blt.n	801139c <__lshift+0x8c>
 8011344:	6920      	ldr	r0, [r4, #16]
 8011346:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801134a:	f104 0314 	add.w	r3, r4, #20
 801134e:	f016 021f 	ands.w	r2, r6, #31
 8011352:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011356:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801135a:	d025      	beq.n	80113a8 <__lshift+0x98>
 801135c:	f1c2 0e20 	rsb	lr, r2, #32
 8011360:	2000      	movs	r0, #0
 8011362:	681e      	ldr	r6, [r3, #0]
 8011364:	468a      	mov	sl, r1
 8011366:	4096      	lsls	r6, r2
 8011368:	4330      	orrs	r0, r6
 801136a:	f84a 0b04 	str.w	r0, [sl], #4
 801136e:	f853 0b04 	ldr.w	r0, [r3], #4
 8011372:	459c      	cmp	ip, r3
 8011374:	fa20 f00e 	lsr.w	r0, r0, lr
 8011378:	d814      	bhi.n	80113a4 <__lshift+0x94>
 801137a:	6048      	str	r0, [r1, #4]
 801137c:	b108      	cbz	r0, 8011382 <__lshift+0x72>
 801137e:	f109 0502 	add.w	r5, r9, #2
 8011382:	3d01      	subs	r5, #1
 8011384:	4638      	mov	r0, r7
 8011386:	f8c8 5010 	str.w	r5, [r8, #16]
 801138a:	4621      	mov	r1, r4
 801138c:	f7ff fe33 	bl	8010ff6 <_Bfree>
 8011390:	4640      	mov	r0, r8
 8011392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011396:	3101      	adds	r1, #1
 8011398:	005b      	lsls	r3, r3, #1
 801139a:	e7c7      	b.n	801132c <__lshift+0x1c>
 801139c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80113a0:	3301      	adds	r3, #1
 80113a2:	e7cd      	b.n	8011340 <__lshift+0x30>
 80113a4:	4651      	mov	r1, sl
 80113a6:	e7dc      	b.n	8011362 <__lshift+0x52>
 80113a8:	3904      	subs	r1, #4
 80113aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80113ae:	f841 2f04 	str.w	r2, [r1, #4]!
 80113b2:	459c      	cmp	ip, r3
 80113b4:	d8f9      	bhi.n	80113aa <__lshift+0x9a>
 80113b6:	e7e4      	b.n	8011382 <__lshift+0x72>

080113b8 <__mcmp>:
 80113b8:	6903      	ldr	r3, [r0, #16]
 80113ba:	690a      	ldr	r2, [r1, #16]
 80113bc:	1a9b      	subs	r3, r3, r2
 80113be:	b530      	push	{r4, r5, lr}
 80113c0:	d10c      	bne.n	80113dc <__mcmp+0x24>
 80113c2:	0092      	lsls	r2, r2, #2
 80113c4:	3014      	adds	r0, #20
 80113c6:	3114      	adds	r1, #20
 80113c8:	1884      	adds	r4, r0, r2
 80113ca:	4411      	add	r1, r2
 80113cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80113d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80113d4:	4295      	cmp	r5, r2
 80113d6:	d003      	beq.n	80113e0 <__mcmp+0x28>
 80113d8:	d305      	bcc.n	80113e6 <__mcmp+0x2e>
 80113da:	2301      	movs	r3, #1
 80113dc:	4618      	mov	r0, r3
 80113de:	bd30      	pop	{r4, r5, pc}
 80113e0:	42a0      	cmp	r0, r4
 80113e2:	d3f3      	bcc.n	80113cc <__mcmp+0x14>
 80113e4:	e7fa      	b.n	80113dc <__mcmp+0x24>
 80113e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80113ea:	e7f7      	b.n	80113dc <__mcmp+0x24>

080113ec <__mdiff>:
 80113ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113f0:	460d      	mov	r5, r1
 80113f2:	4607      	mov	r7, r0
 80113f4:	4611      	mov	r1, r2
 80113f6:	4628      	mov	r0, r5
 80113f8:	4614      	mov	r4, r2
 80113fa:	f7ff ffdd 	bl	80113b8 <__mcmp>
 80113fe:	1e06      	subs	r6, r0, #0
 8011400:	d108      	bne.n	8011414 <__mdiff+0x28>
 8011402:	4631      	mov	r1, r6
 8011404:	4638      	mov	r0, r7
 8011406:	f7ff fdc2 	bl	8010f8e <_Balloc>
 801140a:	2301      	movs	r3, #1
 801140c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8011410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011414:	bfa4      	itt	ge
 8011416:	4623      	movge	r3, r4
 8011418:	462c      	movge	r4, r5
 801141a:	4638      	mov	r0, r7
 801141c:	6861      	ldr	r1, [r4, #4]
 801141e:	bfa6      	itte	ge
 8011420:	461d      	movge	r5, r3
 8011422:	2600      	movge	r6, #0
 8011424:	2601      	movlt	r6, #1
 8011426:	f7ff fdb2 	bl	8010f8e <_Balloc>
 801142a:	692b      	ldr	r3, [r5, #16]
 801142c:	60c6      	str	r6, [r0, #12]
 801142e:	6926      	ldr	r6, [r4, #16]
 8011430:	f105 0914 	add.w	r9, r5, #20
 8011434:	f104 0214 	add.w	r2, r4, #20
 8011438:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801143c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8011440:	f100 0514 	add.w	r5, r0, #20
 8011444:	f04f 0e00 	mov.w	lr, #0
 8011448:	f852 ab04 	ldr.w	sl, [r2], #4
 801144c:	f859 4b04 	ldr.w	r4, [r9], #4
 8011450:	fa1e f18a 	uxtah	r1, lr, sl
 8011454:	b2a3      	uxth	r3, r4
 8011456:	1ac9      	subs	r1, r1, r3
 8011458:	0c23      	lsrs	r3, r4, #16
 801145a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801145e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8011462:	b289      	uxth	r1, r1
 8011464:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8011468:	45c8      	cmp	r8, r9
 801146a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801146e:	4694      	mov	ip, r2
 8011470:	f845 3b04 	str.w	r3, [r5], #4
 8011474:	d8e8      	bhi.n	8011448 <__mdiff+0x5c>
 8011476:	45bc      	cmp	ip, r7
 8011478:	d304      	bcc.n	8011484 <__mdiff+0x98>
 801147a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801147e:	b183      	cbz	r3, 80114a2 <__mdiff+0xb6>
 8011480:	6106      	str	r6, [r0, #16]
 8011482:	e7c5      	b.n	8011410 <__mdiff+0x24>
 8011484:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011488:	fa1e f381 	uxtah	r3, lr, r1
 801148c:	141a      	asrs	r2, r3, #16
 801148e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011492:	b29b      	uxth	r3, r3
 8011494:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011498:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801149c:	f845 3b04 	str.w	r3, [r5], #4
 80114a0:	e7e9      	b.n	8011476 <__mdiff+0x8a>
 80114a2:	3e01      	subs	r6, #1
 80114a4:	e7e9      	b.n	801147a <__mdiff+0x8e>

080114a6 <__d2b>:
 80114a6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80114aa:	460e      	mov	r6, r1
 80114ac:	2101      	movs	r1, #1
 80114ae:	ec59 8b10 	vmov	r8, r9, d0
 80114b2:	4615      	mov	r5, r2
 80114b4:	f7ff fd6b 	bl	8010f8e <_Balloc>
 80114b8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80114bc:	4607      	mov	r7, r0
 80114be:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80114c2:	bb34      	cbnz	r4, 8011512 <__d2b+0x6c>
 80114c4:	9301      	str	r3, [sp, #4]
 80114c6:	f1b8 0300 	subs.w	r3, r8, #0
 80114ca:	d027      	beq.n	801151c <__d2b+0x76>
 80114cc:	a802      	add	r0, sp, #8
 80114ce:	f840 3d08 	str.w	r3, [r0, #-8]!
 80114d2:	f7ff fe01 	bl	80110d8 <__lo0bits>
 80114d6:	9900      	ldr	r1, [sp, #0]
 80114d8:	b1f0      	cbz	r0, 8011518 <__d2b+0x72>
 80114da:	9a01      	ldr	r2, [sp, #4]
 80114dc:	f1c0 0320 	rsb	r3, r0, #32
 80114e0:	fa02 f303 	lsl.w	r3, r2, r3
 80114e4:	430b      	orrs	r3, r1
 80114e6:	40c2      	lsrs	r2, r0
 80114e8:	617b      	str	r3, [r7, #20]
 80114ea:	9201      	str	r2, [sp, #4]
 80114ec:	9b01      	ldr	r3, [sp, #4]
 80114ee:	61bb      	str	r3, [r7, #24]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	bf14      	ite	ne
 80114f4:	2102      	movne	r1, #2
 80114f6:	2101      	moveq	r1, #1
 80114f8:	6139      	str	r1, [r7, #16]
 80114fa:	b1c4      	cbz	r4, 801152e <__d2b+0x88>
 80114fc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8011500:	4404      	add	r4, r0
 8011502:	6034      	str	r4, [r6, #0]
 8011504:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011508:	6028      	str	r0, [r5, #0]
 801150a:	4638      	mov	r0, r7
 801150c:	b003      	add	sp, #12
 801150e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011512:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011516:	e7d5      	b.n	80114c4 <__d2b+0x1e>
 8011518:	6179      	str	r1, [r7, #20]
 801151a:	e7e7      	b.n	80114ec <__d2b+0x46>
 801151c:	a801      	add	r0, sp, #4
 801151e:	f7ff fddb 	bl	80110d8 <__lo0bits>
 8011522:	9b01      	ldr	r3, [sp, #4]
 8011524:	617b      	str	r3, [r7, #20]
 8011526:	2101      	movs	r1, #1
 8011528:	6139      	str	r1, [r7, #16]
 801152a:	3020      	adds	r0, #32
 801152c:	e7e5      	b.n	80114fa <__d2b+0x54>
 801152e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8011532:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011536:	6030      	str	r0, [r6, #0]
 8011538:	6918      	ldr	r0, [r3, #16]
 801153a:	f7ff fdae 	bl	801109a <__hi0bits>
 801153e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8011542:	e7e1      	b.n	8011508 <__d2b+0x62>

08011544 <_calloc_r>:
 8011544:	b538      	push	{r3, r4, r5, lr}
 8011546:	fb02 f401 	mul.w	r4, r2, r1
 801154a:	4621      	mov	r1, r4
 801154c:	f000 f856 	bl	80115fc <_malloc_r>
 8011550:	4605      	mov	r5, r0
 8011552:	b118      	cbz	r0, 801155c <_calloc_r+0x18>
 8011554:	4622      	mov	r2, r4
 8011556:	2100      	movs	r1, #0
 8011558:	f7fd fef0 	bl	800f33c <memset>
 801155c:	4628      	mov	r0, r5
 801155e:	bd38      	pop	{r3, r4, r5, pc}

08011560 <_free_r>:
 8011560:	b538      	push	{r3, r4, r5, lr}
 8011562:	4605      	mov	r5, r0
 8011564:	2900      	cmp	r1, #0
 8011566:	d045      	beq.n	80115f4 <_free_r+0x94>
 8011568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801156c:	1f0c      	subs	r4, r1, #4
 801156e:	2b00      	cmp	r3, #0
 8011570:	bfb8      	it	lt
 8011572:	18e4      	addlt	r4, r4, r3
 8011574:	f000 fc03 	bl	8011d7e <__malloc_lock>
 8011578:	4a1f      	ldr	r2, [pc, #124]	; (80115f8 <_free_r+0x98>)
 801157a:	6813      	ldr	r3, [r2, #0]
 801157c:	4610      	mov	r0, r2
 801157e:	b933      	cbnz	r3, 801158e <_free_r+0x2e>
 8011580:	6063      	str	r3, [r4, #4]
 8011582:	6014      	str	r4, [r2, #0]
 8011584:	4628      	mov	r0, r5
 8011586:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801158a:	f000 bbf9 	b.w	8011d80 <__malloc_unlock>
 801158e:	42a3      	cmp	r3, r4
 8011590:	d90c      	bls.n	80115ac <_free_r+0x4c>
 8011592:	6821      	ldr	r1, [r4, #0]
 8011594:	1862      	adds	r2, r4, r1
 8011596:	4293      	cmp	r3, r2
 8011598:	bf04      	itt	eq
 801159a:	681a      	ldreq	r2, [r3, #0]
 801159c:	685b      	ldreq	r3, [r3, #4]
 801159e:	6063      	str	r3, [r4, #4]
 80115a0:	bf04      	itt	eq
 80115a2:	1852      	addeq	r2, r2, r1
 80115a4:	6022      	streq	r2, [r4, #0]
 80115a6:	6004      	str	r4, [r0, #0]
 80115a8:	e7ec      	b.n	8011584 <_free_r+0x24>
 80115aa:	4613      	mov	r3, r2
 80115ac:	685a      	ldr	r2, [r3, #4]
 80115ae:	b10a      	cbz	r2, 80115b4 <_free_r+0x54>
 80115b0:	42a2      	cmp	r2, r4
 80115b2:	d9fa      	bls.n	80115aa <_free_r+0x4a>
 80115b4:	6819      	ldr	r1, [r3, #0]
 80115b6:	1858      	adds	r0, r3, r1
 80115b8:	42a0      	cmp	r0, r4
 80115ba:	d10b      	bne.n	80115d4 <_free_r+0x74>
 80115bc:	6820      	ldr	r0, [r4, #0]
 80115be:	4401      	add	r1, r0
 80115c0:	1858      	adds	r0, r3, r1
 80115c2:	4282      	cmp	r2, r0
 80115c4:	6019      	str	r1, [r3, #0]
 80115c6:	d1dd      	bne.n	8011584 <_free_r+0x24>
 80115c8:	6810      	ldr	r0, [r2, #0]
 80115ca:	6852      	ldr	r2, [r2, #4]
 80115cc:	605a      	str	r2, [r3, #4]
 80115ce:	4401      	add	r1, r0
 80115d0:	6019      	str	r1, [r3, #0]
 80115d2:	e7d7      	b.n	8011584 <_free_r+0x24>
 80115d4:	d902      	bls.n	80115dc <_free_r+0x7c>
 80115d6:	230c      	movs	r3, #12
 80115d8:	602b      	str	r3, [r5, #0]
 80115da:	e7d3      	b.n	8011584 <_free_r+0x24>
 80115dc:	6820      	ldr	r0, [r4, #0]
 80115de:	1821      	adds	r1, r4, r0
 80115e0:	428a      	cmp	r2, r1
 80115e2:	bf04      	itt	eq
 80115e4:	6811      	ldreq	r1, [r2, #0]
 80115e6:	6852      	ldreq	r2, [r2, #4]
 80115e8:	6062      	str	r2, [r4, #4]
 80115ea:	bf04      	itt	eq
 80115ec:	1809      	addeq	r1, r1, r0
 80115ee:	6021      	streq	r1, [r4, #0]
 80115f0:	605c      	str	r4, [r3, #4]
 80115f2:	e7c7      	b.n	8011584 <_free_r+0x24>
 80115f4:	bd38      	pop	{r3, r4, r5, pc}
 80115f6:	bf00      	nop
 80115f8:	20001ea0 	.word	0x20001ea0

080115fc <_malloc_r>:
 80115fc:	b570      	push	{r4, r5, r6, lr}
 80115fe:	1ccd      	adds	r5, r1, #3
 8011600:	f025 0503 	bic.w	r5, r5, #3
 8011604:	3508      	adds	r5, #8
 8011606:	2d0c      	cmp	r5, #12
 8011608:	bf38      	it	cc
 801160a:	250c      	movcc	r5, #12
 801160c:	2d00      	cmp	r5, #0
 801160e:	4606      	mov	r6, r0
 8011610:	db01      	blt.n	8011616 <_malloc_r+0x1a>
 8011612:	42a9      	cmp	r1, r5
 8011614:	d903      	bls.n	801161e <_malloc_r+0x22>
 8011616:	230c      	movs	r3, #12
 8011618:	6033      	str	r3, [r6, #0]
 801161a:	2000      	movs	r0, #0
 801161c:	bd70      	pop	{r4, r5, r6, pc}
 801161e:	f000 fbae 	bl	8011d7e <__malloc_lock>
 8011622:	4a21      	ldr	r2, [pc, #132]	; (80116a8 <_malloc_r+0xac>)
 8011624:	6814      	ldr	r4, [r2, #0]
 8011626:	4621      	mov	r1, r4
 8011628:	b991      	cbnz	r1, 8011650 <_malloc_r+0x54>
 801162a:	4c20      	ldr	r4, [pc, #128]	; (80116ac <_malloc_r+0xb0>)
 801162c:	6823      	ldr	r3, [r4, #0]
 801162e:	b91b      	cbnz	r3, 8011638 <_malloc_r+0x3c>
 8011630:	4630      	mov	r0, r6
 8011632:	f000 facf 	bl	8011bd4 <_sbrk_r>
 8011636:	6020      	str	r0, [r4, #0]
 8011638:	4629      	mov	r1, r5
 801163a:	4630      	mov	r0, r6
 801163c:	f000 faca 	bl	8011bd4 <_sbrk_r>
 8011640:	1c43      	adds	r3, r0, #1
 8011642:	d124      	bne.n	801168e <_malloc_r+0x92>
 8011644:	230c      	movs	r3, #12
 8011646:	6033      	str	r3, [r6, #0]
 8011648:	4630      	mov	r0, r6
 801164a:	f000 fb99 	bl	8011d80 <__malloc_unlock>
 801164e:	e7e4      	b.n	801161a <_malloc_r+0x1e>
 8011650:	680b      	ldr	r3, [r1, #0]
 8011652:	1b5b      	subs	r3, r3, r5
 8011654:	d418      	bmi.n	8011688 <_malloc_r+0x8c>
 8011656:	2b0b      	cmp	r3, #11
 8011658:	d90f      	bls.n	801167a <_malloc_r+0x7e>
 801165a:	600b      	str	r3, [r1, #0]
 801165c:	50cd      	str	r5, [r1, r3]
 801165e:	18cc      	adds	r4, r1, r3
 8011660:	4630      	mov	r0, r6
 8011662:	f000 fb8d 	bl	8011d80 <__malloc_unlock>
 8011666:	f104 000b 	add.w	r0, r4, #11
 801166a:	1d23      	adds	r3, r4, #4
 801166c:	f020 0007 	bic.w	r0, r0, #7
 8011670:	1ac3      	subs	r3, r0, r3
 8011672:	d0d3      	beq.n	801161c <_malloc_r+0x20>
 8011674:	425a      	negs	r2, r3
 8011676:	50e2      	str	r2, [r4, r3]
 8011678:	e7d0      	b.n	801161c <_malloc_r+0x20>
 801167a:	428c      	cmp	r4, r1
 801167c:	684b      	ldr	r3, [r1, #4]
 801167e:	bf16      	itet	ne
 8011680:	6063      	strne	r3, [r4, #4]
 8011682:	6013      	streq	r3, [r2, #0]
 8011684:	460c      	movne	r4, r1
 8011686:	e7eb      	b.n	8011660 <_malloc_r+0x64>
 8011688:	460c      	mov	r4, r1
 801168a:	6849      	ldr	r1, [r1, #4]
 801168c:	e7cc      	b.n	8011628 <_malloc_r+0x2c>
 801168e:	1cc4      	adds	r4, r0, #3
 8011690:	f024 0403 	bic.w	r4, r4, #3
 8011694:	42a0      	cmp	r0, r4
 8011696:	d005      	beq.n	80116a4 <_malloc_r+0xa8>
 8011698:	1a21      	subs	r1, r4, r0
 801169a:	4630      	mov	r0, r6
 801169c:	f000 fa9a 	bl	8011bd4 <_sbrk_r>
 80116a0:	3001      	adds	r0, #1
 80116a2:	d0cf      	beq.n	8011644 <_malloc_r+0x48>
 80116a4:	6025      	str	r5, [r4, #0]
 80116a6:	e7db      	b.n	8011660 <_malloc_r+0x64>
 80116a8:	20001ea0 	.word	0x20001ea0
 80116ac:	20001ea4 	.word	0x20001ea4

080116b0 <__ssputs_r>:
 80116b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116b4:	688e      	ldr	r6, [r1, #8]
 80116b6:	429e      	cmp	r6, r3
 80116b8:	4682      	mov	sl, r0
 80116ba:	460c      	mov	r4, r1
 80116bc:	4690      	mov	r8, r2
 80116be:	4699      	mov	r9, r3
 80116c0:	d837      	bhi.n	8011732 <__ssputs_r+0x82>
 80116c2:	898a      	ldrh	r2, [r1, #12]
 80116c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80116c8:	d031      	beq.n	801172e <__ssputs_r+0x7e>
 80116ca:	6825      	ldr	r5, [r4, #0]
 80116cc:	6909      	ldr	r1, [r1, #16]
 80116ce:	1a6f      	subs	r7, r5, r1
 80116d0:	6965      	ldr	r5, [r4, #20]
 80116d2:	2302      	movs	r3, #2
 80116d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80116d8:	fb95 f5f3 	sdiv	r5, r5, r3
 80116dc:	f109 0301 	add.w	r3, r9, #1
 80116e0:	443b      	add	r3, r7
 80116e2:	429d      	cmp	r5, r3
 80116e4:	bf38      	it	cc
 80116e6:	461d      	movcc	r5, r3
 80116e8:	0553      	lsls	r3, r2, #21
 80116ea:	d530      	bpl.n	801174e <__ssputs_r+0x9e>
 80116ec:	4629      	mov	r1, r5
 80116ee:	f7ff ff85 	bl	80115fc <_malloc_r>
 80116f2:	4606      	mov	r6, r0
 80116f4:	b950      	cbnz	r0, 801170c <__ssputs_r+0x5c>
 80116f6:	230c      	movs	r3, #12
 80116f8:	f8ca 3000 	str.w	r3, [sl]
 80116fc:	89a3      	ldrh	r3, [r4, #12]
 80116fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011702:	81a3      	strh	r3, [r4, #12]
 8011704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801170c:	463a      	mov	r2, r7
 801170e:	6921      	ldr	r1, [r4, #16]
 8011710:	f7ff fc32 	bl	8010f78 <memcpy>
 8011714:	89a3      	ldrh	r3, [r4, #12]
 8011716:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801171a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801171e:	81a3      	strh	r3, [r4, #12]
 8011720:	6126      	str	r6, [r4, #16]
 8011722:	6165      	str	r5, [r4, #20]
 8011724:	443e      	add	r6, r7
 8011726:	1bed      	subs	r5, r5, r7
 8011728:	6026      	str	r6, [r4, #0]
 801172a:	60a5      	str	r5, [r4, #8]
 801172c:	464e      	mov	r6, r9
 801172e:	454e      	cmp	r6, r9
 8011730:	d900      	bls.n	8011734 <__ssputs_r+0x84>
 8011732:	464e      	mov	r6, r9
 8011734:	4632      	mov	r2, r6
 8011736:	4641      	mov	r1, r8
 8011738:	6820      	ldr	r0, [r4, #0]
 801173a:	f000 fb07 	bl	8011d4c <memmove>
 801173e:	68a3      	ldr	r3, [r4, #8]
 8011740:	1b9b      	subs	r3, r3, r6
 8011742:	60a3      	str	r3, [r4, #8]
 8011744:	6823      	ldr	r3, [r4, #0]
 8011746:	441e      	add	r6, r3
 8011748:	6026      	str	r6, [r4, #0]
 801174a:	2000      	movs	r0, #0
 801174c:	e7dc      	b.n	8011708 <__ssputs_r+0x58>
 801174e:	462a      	mov	r2, r5
 8011750:	f000 fb17 	bl	8011d82 <_realloc_r>
 8011754:	4606      	mov	r6, r0
 8011756:	2800      	cmp	r0, #0
 8011758:	d1e2      	bne.n	8011720 <__ssputs_r+0x70>
 801175a:	6921      	ldr	r1, [r4, #16]
 801175c:	4650      	mov	r0, sl
 801175e:	f7ff feff 	bl	8011560 <_free_r>
 8011762:	e7c8      	b.n	80116f6 <__ssputs_r+0x46>

08011764 <_svfiprintf_r>:
 8011764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011768:	461d      	mov	r5, r3
 801176a:	898b      	ldrh	r3, [r1, #12]
 801176c:	061f      	lsls	r7, r3, #24
 801176e:	b09d      	sub	sp, #116	; 0x74
 8011770:	4680      	mov	r8, r0
 8011772:	460c      	mov	r4, r1
 8011774:	4616      	mov	r6, r2
 8011776:	d50f      	bpl.n	8011798 <_svfiprintf_r+0x34>
 8011778:	690b      	ldr	r3, [r1, #16]
 801177a:	b96b      	cbnz	r3, 8011798 <_svfiprintf_r+0x34>
 801177c:	2140      	movs	r1, #64	; 0x40
 801177e:	f7ff ff3d 	bl	80115fc <_malloc_r>
 8011782:	6020      	str	r0, [r4, #0]
 8011784:	6120      	str	r0, [r4, #16]
 8011786:	b928      	cbnz	r0, 8011794 <_svfiprintf_r+0x30>
 8011788:	230c      	movs	r3, #12
 801178a:	f8c8 3000 	str.w	r3, [r8]
 801178e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011792:	e0c8      	b.n	8011926 <_svfiprintf_r+0x1c2>
 8011794:	2340      	movs	r3, #64	; 0x40
 8011796:	6163      	str	r3, [r4, #20]
 8011798:	2300      	movs	r3, #0
 801179a:	9309      	str	r3, [sp, #36]	; 0x24
 801179c:	2320      	movs	r3, #32
 801179e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80117a2:	2330      	movs	r3, #48	; 0x30
 80117a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80117a8:	9503      	str	r5, [sp, #12]
 80117aa:	f04f 0b01 	mov.w	fp, #1
 80117ae:	4637      	mov	r7, r6
 80117b0:	463d      	mov	r5, r7
 80117b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80117b6:	b10b      	cbz	r3, 80117bc <_svfiprintf_r+0x58>
 80117b8:	2b25      	cmp	r3, #37	; 0x25
 80117ba:	d13e      	bne.n	801183a <_svfiprintf_r+0xd6>
 80117bc:	ebb7 0a06 	subs.w	sl, r7, r6
 80117c0:	d00b      	beq.n	80117da <_svfiprintf_r+0x76>
 80117c2:	4653      	mov	r3, sl
 80117c4:	4632      	mov	r2, r6
 80117c6:	4621      	mov	r1, r4
 80117c8:	4640      	mov	r0, r8
 80117ca:	f7ff ff71 	bl	80116b0 <__ssputs_r>
 80117ce:	3001      	adds	r0, #1
 80117d0:	f000 80a4 	beq.w	801191c <_svfiprintf_r+0x1b8>
 80117d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117d6:	4453      	add	r3, sl
 80117d8:	9309      	str	r3, [sp, #36]	; 0x24
 80117da:	783b      	ldrb	r3, [r7, #0]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	f000 809d 	beq.w	801191c <_svfiprintf_r+0x1b8>
 80117e2:	2300      	movs	r3, #0
 80117e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80117e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80117ec:	9304      	str	r3, [sp, #16]
 80117ee:	9307      	str	r3, [sp, #28]
 80117f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80117f4:	931a      	str	r3, [sp, #104]	; 0x68
 80117f6:	462f      	mov	r7, r5
 80117f8:	2205      	movs	r2, #5
 80117fa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80117fe:	4850      	ldr	r0, [pc, #320]	; (8011940 <_svfiprintf_r+0x1dc>)
 8011800:	f7ee fd16 	bl	8000230 <memchr>
 8011804:	9b04      	ldr	r3, [sp, #16]
 8011806:	b9d0      	cbnz	r0, 801183e <_svfiprintf_r+0xda>
 8011808:	06d9      	lsls	r1, r3, #27
 801180a:	bf44      	itt	mi
 801180c:	2220      	movmi	r2, #32
 801180e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011812:	071a      	lsls	r2, r3, #28
 8011814:	bf44      	itt	mi
 8011816:	222b      	movmi	r2, #43	; 0x2b
 8011818:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801181c:	782a      	ldrb	r2, [r5, #0]
 801181e:	2a2a      	cmp	r2, #42	; 0x2a
 8011820:	d015      	beq.n	801184e <_svfiprintf_r+0xea>
 8011822:	9a07      	ldr	r2, [sp, #28]
 8011824:	462f      	mov	r7, r5
 8011826:	2000      	movs	r0, #0
 8011828:	250a      	movs	r5, #10
 801182a:	4639      	mov	r1, r7
 801182c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011830:	3b30      	subs	r3, #48	; 0x30
 8011832:	2b09      	cmp	r3, #9
 8011834:	d94d      	bls.n	80118d2 <_svfiprintf_r+0x16e>
 8011836:	b1b8      	cbz	r0, 8011868 <_svfiprintf_r+0x104>
 8011838:	e00f      	b.n	801185a <_svfiprintf_r+0xf6>
 801183a:	462f      	mov	r7, r5
 801183c:	e7b8      	b.n	80117b0 <_svfiprintf_r+0x4c>
 801183e:	4a40      	ldr	r2, [pc, #256]	; (8011940 <_svfiprintf_r+0x1dc>)
 8011840:	1a80      	subs	r0, r0, r2
 8011842:	fa0b f000 	lsl.w	r0, fp, r0
 8011846:	4318      	orrs	r0, r3
 8011848:	9004      	str	r0, [sp, #16]
 801184a:	463d      	mov	r5, r7
 801184c:	e7d3      	b.n	80117f6 <_svfiprintf_r+0x92>
 801184e:	9a03      	ldr	r2, [sp, #12]
 8011850:	1d11      	adds	r1, r2, #4
 8011852:	6812      	ldr	r2, [r2, #0]
 8011854:	9103      	str	r1, [sp, #12]
 8011856:	2a00      	cmp	r2, #0
 8011858:	db01      	blt.n	801185e <_svfiprintf_r+0xfa>
 801185a:	9207      	str	r2, [sp, #28]
 801185c:	e004      	b.n	8011868 <_svfiprintf_r+0x104>
 801185e:	4252      	negs	r2, r2
 8011860:	f043 0302 	orr.w	r3, r3, #2
 8011864:	9207      	str	r2, [sp, #28]
 8011866:	9304      	str	r3, [sp, #16]
 8011868:	783b      	ldrb	r3, [r7, #0]
 801186a:	2b2e      	cmp	r3, #46	; 0x2e
 801186c:	d10c      	bne.n	8011888 <_svfiprintf_r+0x124>
 801186e:	787b      	ldrb	r3, [r7, #1]
 8011870:	2b2a      	cmp	r3, #42	; 0x2a
 8011872:	d133      	bne.n	80118dc <_svfiprintf_r+0x178>
 8011874:	9b03      	ldr	r3, [sp, #12]
 8011876:	1d1a      	adds	r2, r3, #4
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	9203      	str	r2, [sp, #12]
 801187c:	2b00      	cmp	r3, #0
 801187e:	bfb8      	it	lt
 8011880:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011884:	3702      	adds	r7, #2
 8011886:	9305      	str	r3, [sp, #20]
 8011888:	4d2e      	ldr	r5, [pc, #184]	; (8011944 <_svfiprintf_r+0x1e0>)
 801188a:	7839      	ldrb	r1, [r7, #0]
 801188c:	2203      	movs	r2, #3
 801188e:	4628      	mov	r0, r5
 8011890:	f7ee fcce 	bl	8000230 <memchr>
 8011894:	b138      	cbz	r0, 80118a6 <_svfiprintf_r+0x142>
 8011896:	2340      	movs	r3, #64	; 0x40
 8011898:	1b40      	subs	r0, r0, r5
 801189a:	fa03 f000 	lsl.w	r0, r3, r0
 801189e:	9b04      	ldr	r3, [sp, #16]
 80118a0:	4303      	orrs	r3, r0
 80118a2:	3701      	adds	r7, #1
 80118a4:	9304      	str	r3, [sp, #16]
 80118a6:	7839      	ldrb	r1, [r7, #0]
 80118a8:	4827      	ldr	r0, [pc, #156]	; (8011948 <_svfiprintf_r+0x1e4>)
 80118aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80118ae:	2206      	movs	r2, #6
 80118b0:	1c7e      	adds	r6, r7, #1
 80118b2:	f7ee fcbd 	bl	8000230 <memchr>
 80118b6:	2800      	cmp	r0, #0
 80118b8:	d038      	beq.n	801192c <_svfiprintf_r+0x1c8>
 80118ba:	4b24      	ldr	r3, [pc, #144]	; (801194c <_svfiprintf_r+0x1e8>)
 80118bc:	bb13      	cbnz	r3, 8011904 <_svfiprintf_r+0x1a0>
 80118be:	9b03      	ldr	r3, [sp, #12]
 80118c0:	3307      	adds	r3, #7
 80118c2:	f023 0307 	bic.w	r3, r3, #7
 80118c6:	3308      	adds	r3, #8
 80118c8:	9303      	str	r3, [sp, #12]
 80118ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118cc:	444b      	add	r3, r9
 80118ce:	9309      	str	r3, [sp, #36]	; 0x24
 80118d0:	e76d      	b.n	80117ae <_svfiprintf_r+0x4a>
 80118d2:	fb05 3202 	mla	r2, r5, r2, r3
 80118d6:	2001      	movs	r0, #1
 80118d8:	460f      	mov	r7, r1
 80118da:	e7a6      	b.n	801182a <_svfiprintf_r+0xc6>
 80118dc:	2300      	movs	r3, #0
 80118de:	3701      	adds	r7, #1
 80118e0:	9305      	str	r3, [sp, #20]
 80118e2:	4619      	mov	r1, r3
 80118e4:	250a      	movs	r5, #10
 80118e6:	4638      	mov	r0, r7
 80118e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80118ec:	3a30      	subs	r2, #48	; 0x30
 80118ee:	2a09      	cmp	r2, #9
 80118f0:	d903      	bls.n	80118fa <_svfiprintf_r+0x196>
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d0c8      	beq.n	8011888 <_svfiprintf_r+0x124>
 80118f6:	9105      	str	r1, [sp, #20]
 80118f8:	e7c6      	b.n	8011888 <_svfiprintf_r+0x124>
 80118fa:	fb05 2101 	mla	r1, r5, r1, r2
 80118fe:	2301      	movs	r3, #1
 8011900:	4607      	mov	r7, r0
 8011902:	e7f0      	b.n	80118e6 <_svfiprintf_r+0x182>
 8011904:	ab03      	add	r3, sp, #12
 8011906:	9300      	str	r3, [sp, #0]
 8011908:	4622      	mov	r2, r4
 801190a:	4b11      	ldr	r3, [pc, #68]	; (8011950 <_svfiprintf_r+0x1ec>)
 801190c:	a904      	add	r1, sp, #16
 801190e:	4640      	mov	r0, r8
 8011910:	f7fd fdb0 	bl	800f474 <_printf_float>
 8011914:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8011918:	4681      	mov	r9, r0
 801191a:	d1d6      	bne.n	80118ca <_svfiprintf_r+0x166>
 801191c:	89a3      	ldrh	r3, [r4, #12]
 801191e:	065b      	lsls	r3, r3, #25
 8011920:	f53f af35 	bmi.w	801178e <_svfiprintf_r+0x2a>
 8011924:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011926:	b01d      	add	sp, #116	; 0x74
 8011928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801192c:	ab03      	add	r3, sp, #12
 801192e:	9300      	str	r3, [sp, #0]
 8011930:	4622      	mov	r2, r4
 8011932:	4b07      	ldr	r3, [pc, #28]	; (8011950 <_svfiprintf_r+0x1ec>)
 8011934:	a904      	add	r1, sp, #16
 8011936:	4640      	mov	r0, r8
 8011938:	f7fe f852 	bl	800f9e0 <_printf_i>
 801193c:	e7ea      	b.n	8011914 <_svfiprintf_r+0x1b0>
 801193e:	bf00      	nop
 8011940:	08014674 	.word	0x08014674
 8011944:	0801467a 	.word	0x0801467a
 8011948:	0801467e 	.word	0x0801467e
 801194c:	0800f475 	.word	0x0800f475
 8011950:	080116b1 	.word	0x080116b1

08011954 <__sfputc_r>:
 8011954:	6893      	ldr	r3, [r2, #8]
 8011956:	3b01      	subs	r3, #1
 8011958:	2b00      	cmp	r3, #0
 801195a:	b410      	push	{r4}
 801195c:	6093      	str	r3, [r2, #8]
 801195e:	da08      	bge.n	8011972 <__sfputc_r+0x1e>
 8011960:	6994      	ldr	r4, [r2, #24]
 8011962:	42a3      	cmp	r3, r4
 8011964:	db01      	blt.n	801196a <__sfputc_r+0x16>
 8011966:	290a      	cmp	r1, #10
 8011968:	d103      	bne.n	8011972 <__sfputc_r+0x1e>
 801196a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801196e:	f7fe ba09 	b.w	800fd84 <__swbuf_r>
 8011972:	6813      	ldr	r3, [r2, #0]
 8011974:	1c58      	adds	r0, r3, #1
 8011976:	6010      	str	r0, [r2, #0]
 8011978:	7019      	strb	r1, [r3, #0]
 801197a:	4608      	mov	r0, r1
 801197c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011980:	4770      	bx	lr

08011982 <__sfputs_r>:
 8011982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011984:	4606      	mov	r6, r0
 8011986:	460f      	mov	r7, r1
 8011988:	4614      	mov	r4, r2
 801198a:	18d5      	adds	r5, r2, r3
 801198c:	42ac      	cmp	r4, r5
 801198e:	d101      	bne.n	8011994 <__sfputs_r+0x12>
 8011990:	2000      	movs	r0, #0
 8011992:	e007      	b.n	80119a4 <__sfputs_r+0x22>
 8011994:	463a      	mov	r2, r7
 8011996:	f814 1b01 	ldrb.w	r1, [r4], #1
 801199a:	4630      	mov	r0, r6
 801199c:	f7ff ffda 	bl	8011954 <__sfputc_r>
 80119a0:	1c43      	adds	r3, r0, #1
 80119a2:	d1f3      	bne.n	801198c <__sfputs_r+0xa>
 80119a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080119a8 <_vfiprintf_r>:
 80119a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119ac:	460c      	mov	r4, r1
 80119ae:	b09d      	sub	sp, #116	; 0x74
 80119b0:	4617      	mov	r7, r2
 80119b2:	461d      	mov	r5, r3
 80119b4:	4606      	mov	r6, r0
 80119b6:	b118      	cbz	r0, 80119c0 <_vfiprintf_r+0x18>
 80119b8:	6983      	ldr	r3, [r0, #24]
 80119ba:	b90b      	cbnz	r3, 80119c0 <_vfiprintf_r+0x18>
 80119bc:	f7ff f9d8 	bl	8010d70 <__sinit>
 80119c0:	4b7c      	ldr	r3, [pc, #496]	; (8011bb4 <_vfiprintf_r+0x20c>)
 80119c2:	429c      	cmp	r4, r3
 80119c4:	d158      	bne.n	8011a78 <_vfiprintf_r+0xd0>
 80119c6:	6874      	ldr	r4, [r6, #4]
 80119c8:	89a3      	ldrh	r3, [r4, #12]
 80119ca:	0718      	lsls	r0, r3, #28
 80119cc:	d55e      	bpl.n	8011a8c <_vfiprintf_r+0xe4>
 80119ce:	6923      	ldr	r3, [r4, #16]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d05b      	beq.n	8011a8c <_vfiprintf_r+0xe4>
 80119d4:	2300      	movs	r3, #0
 80119d6:	9309      	str	r3, [sp, #36]	; 0x24
 80119d8:	2320      	movs	r3, #32
 80119da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80119de:	2330      	movs	r3, #48	; 0x30
 80119e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80119e4:	9503      	str	r5, [sp, #12]
 80119e6:	f04f 0b01 	mov.w	fp, #1
 80119ea:	46b8      	mov	r8, r7
 80119ec:	4645      	mov	r5, r8
 80119ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 80119f2:	b10b      	cbz	r3, 80119f8 <_vfiprintf_r+0x50>
 80119f4:	2b25      	cmp	r3, #37	; 0x25
 80119f6:	d154      	bne.n	8011aa2 <_vfiprintf_r+0xfa>
 80119f8:	ebb8 0a07 	subs.w	sl, r8, r7
 80119fc:	d00b      	beq.n	8011a16 <_vfiprintf_r+0x6e>
 80119fe:	4653      	mov	r3, sl
 8011a00:	463a      	mov	r2, r7
 8011a02:	4621      	mov	r1, r4
 8011a04:	4630      	mov	r0, r6
 8011a06:	f7ff ffbc 	bl	8011982 <__sfputs_r>
 8011a0a:	3001      	adds	r0, #1
 8011a0c:	f000 80c2 	beq.w	8011b94 <_vfiprintf_r+0x1ec>
 8011a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a12:	4453      	add	r3, sl
 8011a14:	9309      	str	r3, [sp, #36]	; 0x24
 8011a16:	f898 3000 	ldrb.w	r3, [r8]
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	f000 80ba 	beq.w	8011b94 <_vfiprintf_r+0x1ec>
 8011a20:	2300      	movs	r3, #0
 8011a22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011a26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011a2a:	9304      	str	r3, [sp, #16]
 8011a2c:	9307      	str	r3, [sp, #28]
 8011a2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011a32:	931a      	str	r3, [sp, #104]	; 0x68
 8011a34:	46a8      	mov	r8, r5
 8011a36:	2205      	movs	r2, #5
 8011a38:	f818 1b01 	ldrb.w	r1, [r8], #1
 8011a3c:	485e      	ldr	r0, [pc, #376]	; (8011bb8 <_vfiprintf_r+0x210>)
 8011a3e:	f7ee fbf7 	bl	8000230 <memchr>
 8011a42:	9b04      	ldr	r3, [sp, #16]
 8011a44:	bb78      	cbnz	r0, 8011aa6 <_vfiprintf_r+0xfe>
 8011a46:	06d9      	lsls	r1, r3, #27
 8011a48:	bf44      	itt	mi
 8011a4a:	2220      	movmi	r2, #32
 8011a4c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011a50:	071a      	lsls	r2, r3, #28
 8011a52:	bf44      	itt	mi
 8011a54:	222b      	movmi	r2, #43	; 0x2b
 8011a56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011a5a:	782a      	ldrb	r2, [r5, #0]
 8011a5c:	2a2a      	cmp	r2, #42	; 0x2a
 8011a5e:	d02a      	beq.n	8011ab6 <_vfiprintf_r+0x10e>
 8011a60:	9a07      	ldr	r2, [sp, #28]
 8011a62:	46a8      	mov	r8, r5
 8011a64:	2000      	movs	r0, #0
 8011a66:	250a      	movs	r5, #10
 8011a68:	4641      	mov	r1, r8
 8011a6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011a6e:	3b30      	subs	r3, #48	; 0x30
 8011a70:	2b09      	cmp	r3, #9
 8011a72:	d969      	bls.n	8011b48 <_vfiprintf_r+0x1a0>
 8011a74:	b360      	cbz	r0, 8011ad0 <_vfiprintf_r+0x128>
 8011a76:	e024      	b.n	8011ac2 <_vfiprintf_r+0x11a>
 8011a78:	4b50      	ldr	r3, [pc, #320]	; (8011bbc <_vfiprintf_r+0x214>)
 8011a7a:	429c      	cmp	r4, r3
 8011a7c:	d101      	bne.n	8011a82 <_vfiprintf_r+0xda>
 8011a7e:	68b4      	ldr	r4, [r6, #8]
 8011a80:	e7a2      	b.n	80119c8 <_vfiprintf_r+0x20>
 8011a82:	4b4f      	ldr	r3, [pc, #316]	; (8011bc0 <_vfiprintf_r+0x218>)
 8011a84:	429c      	cmp	r4, r3
 8011a86:	bf08      	it	eq
 8011a88:	68f4      	ldreq	r4, [r6, #12]
 8011a8a:	e79d      	b.n	80119c8 <_vfiprintf_r+0x20>
 8011a8c:	4621      	mov	r1, r4
 8011a8e:	4630      	mov	r0, r6
 8011a90:	f7fe f9ca 	bl	800fe28 <__swsetup_r>
 8011a94:	2800      	cmp	r0, #0
 8011a96:	d09d      	beq.n	80119d4 <_vfiprintf_r+0x2c>
 8011a98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011a9c:	b01d      	add	sp, #116	; 0x74
 8011a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011aa2:	46a8      	mov	r8, r5
 8011aa4:	e7a2      	b.n	80119ec <_vfiprintf_r+0x44>
 8011aa6:	4a44      	ldr	r2, [pc, #272]	; (8011bb8 <_vfiprintf_r+0x210>)
 8011aa8:	1a80      	subs	r0, r0, r2
 8011aaa:	fa0b f000 	lsl.w	r0, fp, r0
 8011aae:	4318      	orrs	r0, r3
 8011ab0:	9004      	str	r0, [sp, #16]
 8011ab2:	4645      	mov	r5, r8
 8011ab4:	e7be      	b.n	8011a34 <_vfiprintf_r+0x8c>
 8011ab6:	9a03      	ldr	r2, [sp, #12]
 8011ab8:	1d11      	adds	r1, r2, #4
 8011aba:	6812      	ldr	r2, [r2, #0]
 8011abc:	9103      	str	r1, [sp, #12]
 8011abe:	2a00      	cmp	r2, #0
 8011ac0:	db01      	blt.n	8011ac6 <_vfiprintf_r+0x11e>
 8011ac2:	9207      	str	r2, [sp, #28]
 8011ac4:	e004      	b.n	8011ad0 <_vfiprintf_r+0x128>
 8011ac6:	4252      	negs	r2, r2
 8011ac8:	f043 0302 	orr.w	r3, r3, #2
 8011acc:	9207      	str	r2, [sp, #28]
 8011ace:	9304      	str	r3, [sp, #16]
 8011ad0:	f898 3000 	ldrb.w	r3, [r8]
 8011ad4:	2b2e      	cmp	r3, #46	; 0x2e
 8011ad6:	d10e      	bne.n	8011af6 <_vfiprintf_r+0x14e>
 8011ad8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011adc:	2b2a      	cmp	r3, #42	; 0x2a
 8011ade:	d138      	bne.n	8011b52 <_vfiprintf_r+0x1aa>
 8011ae0:	9b03      	ldr	r3, [sp, #12]
 8011ae2:	1d1a      	adds	r2, r3, #4
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	9203      	str	r2, [sp, #12]
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	bfb8      	it	lt
 8011aec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011af0:	f108 0802 	add.w	r8, r8, #2
 8011af4:	9305      	str	r3, [sp, #20]
 8011af6:	4d33      	ldr	r5, [pc, #204]	; (8011bc4 <_vfiprintf_r+0x21c>)
 8011af8:	f898 1000 	ldrb.w	r1, [r8]
 8011afc:	2203      	movs	r2, #3
 8011afe:	4628      	mov	r0, r5
 8011b00:	f7ee fb96 	bl	8000230 <memchr>
 8011b04:	b140      	cbz	r0, 8011b18 <_vfiprintf_r+0x170>
 8011b06:	2340      	movs	r3, #64	; 0x40
 8011b08:	1b40      	subs	r0, r0, r5
 8011b0a:	fa03 f000 	lsl.w	r0, r3, r0
 8011b0e:	9b04      	ldr	r3, [sp, #16]
 8011b10:	4303      	orrs	r3, r0
 8011b12:	f108 0801 	add.w	r8, r8, #1
 8011b16:	9304      	str	r3, [sp, #16]
 8011b18:	f898 1000 	ldrb.w	r1, [r8]
 8011b1c:	482a      	ldr	r0, [pc, #168]	; (8011bc8 <_vfiprintf_r+0x220>)
 8011b1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011b22:	2206      	movs	r2, #6
 8011b24:	f108 0701 	add.w	r7, r8, #1
 8011b28:	f7ee fb82 	bl	8000230 <memchr>
 8011b2c:	2800      	cmp	r0, #0
 8011b2e:	d037      	beq.n	8011ba0 <_vfiprintf_r+0x1f8>
 8011b30:	4b26      	ldr	r3, [pc, #152]	; (8011bcc <_vfiprintf_r+0x224>)
 8011b32:	bb1b      	cbnz	r3, 8011b7c <_vfiprintf_r+0x1d4>
 8011b34:	9b03      	ldr	r3, [sp, #12]
 8011b36:	3307      	adds	r3, #7
 8011b38:	f023 0307 	bic.w	r3, r3, #7
 8011b3c:	3308      	adds	r3, #8
 8011b3e:	9303      	str	r3, [sp, #12]
 8011b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b42:	444b      	add	r3, r9
 8011b44:	9309      	str	r3, [sp, #36]	; 0x24
 8011b46:	e750      	b.n	80119ea <_vfiprintf_r+0x42>
 8011b48:	fb05 3202 	mla	r2, r5, r2, r3
 8011b4c:	2001      	movs	r0, #1
 8011b4e:	4688      	mov	r8, r1
 8011b50:	e78a      	b.n	8011a68 <_vfiprintf_r+0xc0>
 8011b52:	2300      	movs	r3, #0
 8011b54:	f108 0801 	add.w	r8, r8, #1
 8011b58:	9305      	str	r3, [sp, #20]
 8011b5a:	4619      	mov	r1, r3
 8011b5c:	250a      	movs	r5, #10
 8011b5e:	4640      	mov	r0, r8
 8011b60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011b64:	3a30      	subs	r2, #48	; 0x30
 8011b66:	2a09      	cmp	r2, #9
 8011b68:	d903      	bls.n	8011b72 <_vfiprintf_r+0x1ca>
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d0c3      	beq.n	8011af6 <_vfiprintf_r+0x14e>
 8011b6e:	9105      	str	r1, [sp, #20]
 8011b70:	e7c1      	b.n	8011af6 <_vfiprintf_r+0x14e>
 8011b72:	fb05 2101 	mla	r1, r5, r1, r2
 8011b76:	2301      	movs	r3, #1
 8011b78:	4680      	mov	r8, r0
 8011b7a:	e7f0      	b.n	8011b5e <_vfiprintf_r+0x1b6>
 8011b7c:	ab03      	add	r3, sp, #12
 8011b7e:	9300      	str	r3, [sp, #0]
 8011b80:	4622      	mov	r2, r4
 8011b82:	4b13      	ldr	r3, [pc, #76]	; (8011bd0 <_vfiprintf_r+0x228>)
 8011b84:	a904      	add	r1, sp, #16
 8011b86:	4630      	mov	r0, r6
 8011b88:	f7fd fc74 	bl	800f474 <_printf_float>
 8011b8c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8011b90:	4681      	mov	r9, r0
 8011b92:	d1d5      	bne.n	8011b40 <_vfiprintf_r+0x198>
 8011b94:	89a3      	ldrh	r3, [r4, #12]
 8011b96:	065b      	lsls	r3, r3, #25
 8011b98:	f53f af7e 	bmi.w	8011a98 <_vfiprintf_r+0xf0>
 8011b9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011b9e:	e77d      	b.n	8011a9c <_vfiprintf_r+0xf4>
 8011ba0:	ab03      	add	r3, sp, #12
 8011ba2:	9300      	str	r3, [sp, #0]
 8011ba4:	4622      	mov	r2, r4
 8011ba6:	4b0a      	ldr	r3, [pc, #40]	; (8011bd0 <_vfiprintf_r+0x228>)
 8011ba8:	a904      	add	r1, sp, #16
 8011baa:	4630      	mov	r0, r6
 8011bac:	f7fd ff18 	bl	800f9e0 <_printf_i>
 8011bb0:	e7ec      	b.n	8011b8c <_vfiprintf_r+0x1e4>
 8011bb2:	bf00      	nop
 8011bb4:	08014538 	.word	0x08014538
 8011bb8:	08014674 	.word	0x08014674
 8011bbc:	08014558 	.word	0x08014558
 8011bc0:	08014518 	.word	0x08014518
 8011bc4:	0801467a 	.word	0x0801467a
 8011bc8:	0801467e 	.word	0x0801467e
 8011bcc:	0800f475 	.word	0x0800f475
 8011bd0:	08011983 	.word	0x08011983

08011bd4 <_sbrk_r>:
 8011bd4:	b538      	push	{r3, r4, r5, lr}
 8011bd6:	4c06      	ldr	r4, [pc, #24]	; (8011bf0 <_sbrk_r+0x1c>)
 8011bd8:	2300      	movs	r3, #0
 8011bda:	4605      	mov	r5, r0
 8011bdc:	4608      	mov	r0, r1
 8011bde:	6023      	str	r3, [r4, #0]
 8011be0:	f7f5 fe2a 	bl	8007838 <_sbrk>
 8011be4:	1c43      	adds	r3, r0, #1
 8011be6:	d102      	bne.n	8011bee <_sbrk_r+0x1a>
 8011be8:	6823      	ldr	r3, [r4, #0]
 8011bea:	b103      	cbz	r3, 8011bee <_sbrk_r+0x1a>
 8011bec:	602b      	str	r3, [r5, #0]
 8011bee:	bd38      	pop	{r3, r4, r5, pc}
 8011bf0:	20002928 	.word	0x20002928

08011bf4 <__sread>:
 8011bf4:	b510      	push	{r4, lr}
 8011bf6:	460c      	mov	r4, r1
 8011bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bfc:	f000 f8e8 	bl	8011dd0 <_read_r>
 8011c00:	2800      	cmp	r0, #0
 8011c02:	bfab      	itete	ge
 8011c04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011c06:	89a3      	ldrhlt	r3, [r4, #12]
 8011c08:	181b      	addge	r3, r3, r0
 8011c0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011c0e:	bfac      	ite	ge
 8011c10:	6563      	strge	r3, [r4, #84]	; 0x54
 8011c12:	81a3      	strhlt	r3, [r4, #12]
 8011c14:	bd10      	pop	{r4, pc}

08011c16 <__swrite>:
 8011c16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c1a:	461f      	mov	r7, r3
 8011c1c:	898b      	ldrh	r3, [r1, #12]
 8011c1e:	05db      	lsls	r3, r3, #23
 8011c20:	4605      	mov	r5, r0
 8011c22:	460c      	mov	r4, r1
 8011c24:	4616      	mov	r6, r2
 8011c26:	d505      	bpl.n	8011c34 <__swrite+0x1e>
 8011c28:	2302      	movs	r3, #2
 8011c2a:	2200      	movs	r2, #0
 8011c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c30:	f000 f868 	bl	8011d04 <_lseek_r>
 8011c34:	89a3      	ldrh	r3, [r4, #12]
 8011c36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011c3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011c3e:	81a3      	strh	r3, [r4, #12]
 8011c40:	4632      	mov	r2, r6
 8011c42:	463b      	mov	r3, r7
 8011c44:	4628      	mov	r0, r5
 8011c46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011c4a:	f000 b817 	b.w	8011c7c <_write_r>

08011c4e <__sseek>:
 8011c4e:	b510      	push	{r4, lr}
 8011c50:	460c      	mov	r4, r1
 8011c52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c56:	f000 f855 	bl	8011d04 <_lseek_r>
 8011c5a:	1c43      	adds	r3, r0, #1
 8011c5c:	89a3      	ldrh	r3, [r4, #12]
 8011c5e:	bf15      	itete	ne
 8011c60:	6560      	strne	r0, [r4, #84]	; 0x54
 8011c62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011c66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011c6a:	81a3      	strheq	r3, [r4, #12]
 8011c6c:	bf18      	it	ne
 8011c6e:	81a3      	strhne	r3, [r4, #12]
 8011c70:	bd10      	pop	{r4, pc}

08011c72 <__sclose>:
 8011c72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c76:	f000 b813 	b.w	8011ca0 <_close_r>
	...

08011c7c <_write_r>:
 8011c7c:	b538      	push	{r3, r4, r5, lr}
 8011c7e:	4c07      	ldr	r4, [pc, #28]	; (8011c9c <_write_r+0x20>)
 8011c80:	4605      	mov	r5, r0
 8011c82:	4608      	mov	r0, r1
 8011c84:	4611      	mov	r1, r2
 8011c86:	2200      	movs	r2, #0
 8011c88:	6022      	str	r2, [r4, #0]
 8011c8a:	461a      	mov	r2, r3
 8011c8c:	f7f5 faa5 	bl	80071da <_write>
 8011c90:	1c43      	adds	r3, r0, #1
 8011c92:	d102      	bne.n	8011c9a <_write_r+0x1e>
 8011c94:	6823      	ldr	r3, [r4, #0]
 8011c96:	b103      	cbz	r3, 8011c9a <_write_r+0x1e>
 8011c98:	602b      	str	r3, [r5, #0]
 8011c9a:	bd38      	pop	{r3, r4, r5, pc}
 8011c9c:	20002928 	.word	0x20002928

08011ca0 <_close_r>:
 8011ca0:	b538      	push	{r3, r4, r5, lr}
 8011ca2:	4c06      	ldr	r4, [pc, #24]	; (8011cbc <_close_r+0x1c>)
 8011ca4:	2300      	movs	r3, #0
 8011ca6:	4605      	mov	r5, r0
 8011ca8:	4608      	mov	r0, r1
 8011caa:	6023      	str	r3, [r4, #0]
 8011cac:	f7f5 fd8f 	bl	80077ce <_close>
 8011cb0:	1c43      	adds	r3, r0, #1
 8011cb2:	d102      	bne.n	8011cba <_close_r+0x1a>
 8011cb4:	6823      	ldr	r3, [r4, #0]
 8011cb6:	b103      	cbz	r3, 8011cba <_close_r+0x1a>
 8011cb8:	602b      	str	r3, [r5, #0]
 8011cba:	bd38      	pop	{r3, r4, r5, pc}
 8011cbc:	20002928 	.word	0x20002928

08011cc0 <_fstat_r>:
 8011cc0:	b538      	push	{r3, r4, r5, lr}
 8011cc2:	4c07      	ldr	r4, [pc, #28]	; (8011ce0 <_fstat_r+0x20>)
 8011cc4:	2300      	movs	r3, #0
 8011cc6:	4605      	mov	r5, r0
 8011cc8:	4608      	mov	r0, r1
 8011cca:	4611      	mov	r1, r2
 8011ccc:	6023      	str	r3, [r4, #0]
 8011cce:	f7f5 fd8a 	bl	80077e6 <_fstat>
 8011cd2:	1c43      	adds	r3, r0, #1
 8011cd4:	d102      	bne.n	8011cdc <_fstat_r+0x1c>
 8011cd6:	6823      	ldr	r3, [r4, #0]
 8011cd8:	b103      	cbz	r3, 8011cdc <_fstat_r+0x1c>
 8011cda:	602b      	str	r3, [r5, #0]
 8011cdc:	bd38      	pop	{r3, r4, r5, pc}
 8011cde:	bf00      	nop
 8011ce0:	20002928 	.word	0x20002928

08011ce4 <_isatty_r>:
 8011ce4:	b538      	push	{r3, r4, r5, lr}
 8011ce6:	4c06      	ldr	r4, [pc, #24]	; (8011d00 <_isatty_r+0x1c>)
 8011ce8:	2300      	movs	r3, #0
 8011cea:	4605      	mov	r5, r0
 8011cec:	4608      	mov	r0, r1
 8011cee:	6023      	str	r3, [r4, #0]
 8011cf0:	f7f5 fd89 	bl	8007806 <_isatty>
 8011cf4:	1c43      	adds	r3, r0, #1
 8011cf6:	d102      	bne.n	8011cfe <_isatty_r+0x1a>
 8011cf8:	6823      	ldr	r3, [r4, #0]
 8011cfa:	b103      	cbz	r3, 8011cfe <_isatty_r+0x1a>
 8011cfc:	602b      	str	r3, [r5, #0]
 8011cfe:	bd38      	pop	{r3, r4, r5, pc}
 8011d00:	20002928 	.word	0x20002928

08011d04 <_lseek_r>:
 8011d04:	b538      	push	{r3, r4, r5, lr}
 8011d06:	4c07      	ldr	r4, [pc, #28]	; (8011d24 <_lseek_r+0x20>)
 8011d08:	4605      	mov	r5, r0
 8011d0a:	4608      	mov	r0, r1
 8011d0c:	4611      	mov	r1, r2
 8011d0e:	2200      	movs	r2, #0
 8011d10:	6022      	str	r2, [r4, #0]
 8011d12:	461a      	mov	r2, r3
 8011d14:	f7f5 fd82 	bl	800781c <_lseek>
 8011d18:	1c43      	adds	r3, r0, #1
 8011d1a:	d102      	bne.n	8011d22 <_lseek_r+0x1e>
 8011d1c:	6823      	ldr	r3, [r4, #0]
 8011d1e:	b103      	cbz	r3, 8011d22 <_lseek_r+0x1e>
 8011d20:	602b      	str	r3, [r5, #0]
 8011d22:	bd38      	pop	{r3, r4, r5, pc}
 8011d24:	20002928 	.word	0x20002928

08011d28 <__ascii_mbtowc>:
 8011d28:	b082      	sub	sp, #8
 8011d2a:	b901      	cbnz	r1, 8011d2e <__ascii_mbtowc+0x6>
 8011d2c:	a901      	add	r1, sp, #4
 8011d2e:	b142      	cbz	r2, 8011d42 <__ascii_mbtowc+0x1a>
 8011d30:	b14b      	cbz	r3, 8011d46 <__ascii_mbtowc+0x1e>
 8011d32:	7813      	ldrb	r3, [r2, #0]
 8011d34:	600b      	str	r3, [r1, #0]
 8011d36:	7812      	ldrb	r2, [r2, #0]
 8011d38:	1c10      	adds	r0, r2, #0
 8011d3a:	bf18      	it	ne
 8011d3c:	2001      	movne	r0, #1
 8011d3e:	b002      	add	sp, #8
 8011d40:	4770      	bx	lr
 8011d42:	4610      	mov	r0, r2
 8011d44:	e7fb      	b.n	8011d3e <__ascii_mbtowc+0x16>
 8011d46:	f06f 0001 	mvn.w	r0, #1
 8011d4a:	e7f8      	b.n	8011d3e <__ascii_mbtowc+0x16>

08011d4c <memmove>:
 8011d4c:	4288      	cmp	r0, r1
 8011d4e:	b510      	push	{r4, lr}
 8011d50:	eb01 0302 	add.w	r3, r1, r2
 8011d54:	d807      	bhi.n	8011d66 <memmove+0x1a>
 8011d56:	1e42      	subs	r2, r0, #1
 8011d58:	4299      	cmp	r1, r3
 8011d5a:	d00a      	beq.n	8011d72 <memmove+0x26>
 8011d5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011d60:	f802 4f01 	strb.w	r4, [r2, #1]!
 8011d64:	e7f8      	b.n	8011d58 <memmove+0xc>
 8011d66:	4283      	cmp	r3, r0
 8011d68:	d9f5      	bls.n	8011d56 <memmove+0xa>
 8011d6a:	1881      	adds	r1, r0, r2
 8011d6c:	1ad2      	subs	r2, r2, r3
 8011d6e:	42d3      	cmn	r3, r2
 8011d70:	d100      	bne.n	8011d74 <memmove+0x28>
 8011d72:	bd10      	pop	{r4, pc}
 8011d74:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011d78:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8011d7c:	e7f7      	b.n	8011d6e <memmove+0x22>

08011d7e <__malloc_lock>:
 8011d7e:	4770      	bx	lr

08011d80 <__malloc_unlock>:
 8011d80:	4770      	bx	lr

08011d82 <_realloc_r>:
 8011d82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d84:	4607      	mov	r7, r0
 8011d86:	4614      	mov	r4, r2
 8011d88:	460e      	mov	r6, r1
 8011d8a:	b921      	cbnz	r1, 8011d96 <_realloc_r+0x14>
 8011d8c:	4611      	mov	r1, r2
 8011d8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011d92:	f7ff bc33 	b.w	80115fc <_malloc_r>
 8011d96:	b922      	cbnz	r2, 8011da2 <_realloc_r+0x20>
 8011d98:	f7ff fbe2 	bl	8011560 <_free_r>
 8011d9c:	4625      	mov	r5, r4
 8011d9e:	4628      	mov	r0, r5
 8011da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011da2:	f000 f834 	bl	8011e0e <_malloc_usable_size_r>
 8011da6:	42a0      	cmp	r0, r4
 8011da8:	d20f      	bcs.n	8011dca <_realloc_r+0x48>
 8011daa:	4621      	mov	r1, r4
 8011dac:	4638      	mov	r0, r7
 8011dae:	f7ff fc25 	bl	80115fc <_malloc_r>
 8011db2:	4605      	mov	r5, r0
 8011db4:	2800      	cmp	r0, #0
 8011db6:	d0f2      	beq.n	8011d9e <_realloc_r+0x1c>
 8011db8:	4631      	mov	r1, r6
 8011dba:	4622      	mov	r2, r4
 8011dbc:	f7ff f8dc 	bl	8010f78 <memcpy>
 8011dc0:	4631      	mov	r1, r6
 8011dc2:	4638      	mov	r0, r7
 8011dc4:	f7ff fbcc 	bl	8011560 <_free_r>
 8011dc8:	e7e9      	b.n	8011d9e <_realloc_r+0x1c>
 8011dca:	4635      	mov	r5, r6
 8011dcc:	e7e7      	b.n	8011d9e <_realloc_r+0x1c>
	...

08011dd0 <_read_r>:
 8011dd0:	b538      	push	{r3, r4, r5, lr}
 8011dd2:	4c07      	ldr	r4, [pc, #28]	; (8011df0 <_read_r+0x20>)
 8011dd4:	4605      	mov	r5, r0
 8011dd6:	4608      	mov	r0, r1
 8011dd8:	4611      	mov	r1, r2
 8011dda:	2200      	movs	r2, #0
 8011ddc:	6022      	str	r2, [r4, #0]
 8011dde:	461a      	mov	r2, r3
 8011de0:	f7f5 fcd8 	bl	8007794 <_read>
 8011de4:	1c43      	adds	r3, r0, #1
 8011de6:	d102      	bne.n	8011dee <_read_r+0x1e>
 8011de8:	6823      	ldr	r3, [r4, #0]
 8011dea:	b103      	cbz	r3, 8011dee <_read_r+0x1e>
 8011dec:	602b      	str	r3, [r5, #0]
 8011dee:	bd38      	pop	{r3, r4, r5, pc}
 8011df0:	20002928 	.word	0x20002928

08011df4 <__ascii_wctomb>:
 8011df4:	b149      	cbz	r1, 8011e0a <__ascii_wctomb+0x16>
 8011df6:	2aff      	cmp	r2, #255	; 0xff
 8011df8:	bf85      	ittet	hi
 8011dfa:	238a      	movhi	r3, #138	; 0x8a
 8011dfc:	6003      	strhi	r3, [r0, #0]
 8011dfe:	700a      	strbls	r2, [r1, #0]
 8011e00:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8011e04:	bf98      	it	ls
 8011e06:	2001      	movls	r0, #1
 8011e08:	4770      	bx	lr
 8011e0a:	4608      	mov	r0, r1
 8011e0c:	4770      	bx	lr

08011e0e <_malloc_usable_size_r>:
 8011e0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011e12:	1f18      	subs	r0, r3, #4
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	bfbc      	itt	lt
 8011e18:	580b      	ldrlt	r3, [r1, r0]
 8011e1a:	18c0      	addlt	r0, r0, r3
 8011e1c:	4770      	bx	lr
	...

08011e20 <log10>:
 8011e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e22:	ed2d 8b02 	vpush	{d8}
 8011e26:	b08b      	sub	sp, #44	; 0x2c
 8011e28:	ec55 4b10 	vmov	r4, r5, d0
 8011e2c:	f000 f9e8 	bl	8012200 <__ieee754_log10>
 8011e30:	4b36      	ldr	r3, [pc, #216]	; (8011f0c <log10+0xec>)
 8011e32:	eeb0 8a40 	vmov.f32	s16, s0
 8011e36:	eef0 8a60 	vmov.f32	s17, s1
 8011e3a:	f993 6000 	ldrsb.w	r6, [r3]
 8011e3e:	1c73      	adds	r3, r6, #1
 8011e40:	d05c      	beq.n	8011efc <log10+0xdc>
 8011e42:	4622      	mov	r2, r4
 8011e44:	462b      	mov	r3, r5
 8011e46:	4620      	mov	r0, r4
 8011e48:	4629      	mov	r1, r5
 8011e4a:	f7ee fe97 	bl	8000b7c <__aeabi_dcmpun>
 8011e4e:	4607      	mov	r7, r0
 8011e50:	2800      	cmp	r0, #0
 8011e52:	d153      	bne.n	8011efc <log10+0xdc>
 8011e54:	2200      	movs	r2, #0
 8011e56:	2300      	movs	r3, #0
 8011e58:	4620      	mov	r0, r4
 8011e5a:	4629      	mov	r1, r5
 8011e5c:	f7ee fe70 	bl	8000b40 <__aeabi_dcmple>
 8011e60:	2800      	cmp	r0, #0
 8011e62:	d04b      	beq.n	8011efc <log10+0xdc>
 8011e64:	4b2a      	ldr	r3, [pc, #168]	; (8011f10 <log10+0xf0>)
 8011e66:	9301      	str	r3, [sp, #4]
 8011e68:	9708      	str	r7, [sp, #32]
 8011e6a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8011e6e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8011e72:	b9a6      	cbnz	r6, 8011e9e <log10+0x7e>
 8011e74:	4b27      	ldr	r3, [pc, #156]	; (8011f14 <log10+0xf4>)
 8011e76:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8011e7a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011e7e:	4620      	mov	r0, r4
 8011e80:	2200      	movs	r2, #0
 8011e82:	2300      	movs	r3, #0
 8011e84:	4629      	mov	r1, r5
 8011e86:	f7ee fe47 	bl	8000b18 <__aeabi_dcmpeq>
 8011e8a:	bb40      	cbnz	r0, 8011ede <log10+0xbe>
 8011e8c:	2301      	movs	r3, #1
 8011e8e:	2e02      	cmp	r6, #2
 8011e90:	9300      	str	r3, [sp, #0]
 8011e92:	d119      	bne.n	8011ec8 <log10+0xa8>
 8011e94:	f7fd fa28 	bl	800f2e8 <__errno>
 8011e98:	2321      	movs	r3, #33	; 0x21
 8011e9a:	6003      	str	r3, [r0, #0]
 8011e9c:	e019      	b.n	8011ed2 <log10+0xb2>
 8011e9e:	4b1e      	ldr	r3, [pc, #120]	; (8011f18 <log10+0xf8>)
 8011ea0:	2200      	movs	r2, #0
 8011ea2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011ea6:	4620      	mov	r0, r4
 8011ea8:	2200      	movs	r2, #0
 8011eaa:	2300      	movs	r3, #0
 8011eac:	4629      	mov	r1, r5
 8011eae:	f7ee fe33 	bl	8000b18 <__aeabi_dcmpeq>
 8011eb2:	2800      	cmp	r0, #0
 8011eb4:	d0ea      	beq.n	8011e8c <log10+0x6c>
 8011eb6:	2302      	movs	r3, #2
 8011eb8:	429e      	cmp	r6, r3
 8011eba:	9300      	str	r3, [sp, #0]
 8011ebc:	d111      	bne.n	8011ee2 <log10+0xc2>
 8011ebe:	f7fd fa13 	bl	800f2e8 <__errno>
 8011ec2:	2322      	movs	r3, #34	; 0x22
 8011ec4:	6003      	str	r3, [r0, #0]
 8011ec6:	e011      	b.n	8011eec <log10+0xcc>
 8011ec8:	4668      	mov	r0, sp
 8011eca:	f000 fff4 	bl	8012eb6 <matherr>
 8011ece:	2800      	cmp	r0, #0
 8011ed0:	d0e0      	beq.n	8011e94 <log10+0x74>
 8011ed2:	4812      	ldr	r0, [pc, #72]	; (8011f1c <log10+0xfc>)
 8011ed4:	f000 fff4 	bl	8012ec0 <nan>
 8011ed8:	ed8d 0b06 	vstr	d0, [sp, #24]
 8011edc:	e006      	b.n	8011eec <log10+0xcc>
 8011ede:	2302      	movs	r3, #2
 8011ee0:	9300      	str	r3, [sp, #0]
 8011ee2:	4668      	mov	r0, sp
 8011ee4:	f000 ffe7 	bl	8012eb6 <matherr>
 8011ee8:	2800      	cmp	r0, #0
 8011eea:	d0e8      	beq.n	8011ebe <log10+0x9e>
 8011eec:	9b08      	ldr	r3, [sp, #32]
 8011eee:	b11b      	cbz	r3, 8011ef8 <log10+0xd8>
 8011ef0:	f7fd f9fa 	bl	800f2e8 <__errno>
 8011ef4:	9b08      	ldr	r3, [sp, #32]
 8011ef6:	6003      	str	r3, [r0, #0]
 8011ef8:	ed9d 8b06 	vldr	d8, [sp, #24]
 8011efc:	eeb0 0a48 	vmov.f32	s0, s16
 8011f00:	eef0 0a68 	vmov.f32	s1, s17
 8011f04:	b00b      	add	sp, #44	; 0x2c
 8011f06:	ecbd 8b02 	vpop	{d8}
 8011f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f0c:	20001e04 	.word	0x20001e04
 8011f10:	08014790 	.word	0x08014790
 8011f14:	c7efffff 	.word	0xc7efffff
 8011f18:	fff00000 	.word	0xfff00000
 8011f1c:	08014679 	.word	0x08014679

08011f20 <pow>:
 8011f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f24:	ed2d 8b04 	vpush	{d8-d9}
 8011f28:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80121fc <pow+0x2dc>
 8011f2c:	b08d      	sub	sp, #52	; 0x34
 8011f2e:	ec57 6b10 	vmov	r6, r7, d0
 8011f32:	ec55 4b11 	vmov	r4, r5, d1
 8011f36:	f000 f9ef 	bl	8012318 <__ieee754_pow>
 8011f3a:	f999 3000 	ldrsb.w	r3, [r9]
 8011f3e:	9300      	str	r3, [sp, #0]
 8011f40:	3301      	adds	r3, #1
 8011f42:	eeb0 8a40 	vmov.f32	s16, s0
 8011f46:	eef0 8a60 	vmov.f32	s17, s1
 8011f4a:	46c8      	mov	r8, r9
 8011f4c:	d05f      	beq.n	801200e <pow+0xee>
 8011f4e:	4622      	mov	r2, r4
 8011f50:	462b      	mov	r3, r5
 8011f52:	4620      	mov	r0, r4
 8011f54:	4629      	mov	r1, r5
 8011f56:	f7ee fe11 	bl	8000b7c <__aeabi_dcmpun>
 8011f5a:	4683      	mov	fp, r0
 8011f5c:	2800      	cmp	r0, #0
 8011f5e:	d156      	bne.n	801200e <pow+0xee>
 8011f60:	4632      	mov	r2, r6
 8011f62:	463b      	mov	r3, r7
 8011f64:	4630      	mov	r0, r6
 8011f66:	4639      	mov	r1, r7
 8011f68:	f7ee fe08 	bl	8000b7c <__aeabi_dcmpun>
 8011f6c:	9001      	str	r0, [sp, #4]
 8011f6e:	b1e8      	cbz	r0, 8011fac <pow+0x8c>
 8011f70:	2200      	movs	r2, #0
 8011f72:	2300      	movs	r3, #0
 8011f74:	4620      	mov	r0, r4
 8011f76:	4629      	mov	r1, r5
 8011f78:	f7ee fdce 	bl	8000b18 <__aeabi_dcmpeq>
 8011f7c:	2800      	cmp	r0, #0
 8011f7e:	d046      	beq.n	801200e <pow+0xee>
 8011f80:	2301      	movs	r3, #1
 8011f82:	9302      	str	r3, [sp, #8]
 8011f84:	4b96      	ldr	r3, [pc, #600]	; (80121e0 <pow+0x2c0>)
 8011f86:	9303      	str	r3, [sp, #12]
 8011f88:	4b96      	ldr	r3, [pc, #600]	; (80121e4 <pow+0x2c4>)
 8011f8a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8011f8e:	2200      	movs	r2, #0
 8011f90:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011f94:	9b00      	ldr	r3, [sp, #0]
 8011f96:	2b02      	cmp	r3, #2
 8011f98:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011f9c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8011fa0:	d033      	beq.n	801200a <pow+0xea>
 8011fa2:	a802      	add	r0, sp, #8
 8011fa4:	f000 ff87 	bl	8012eb6 <matherr>
 8011fa8:	bb48      	cbnz	r0, 8011ffe <pow+0xde>
 8011faa:	e05d      	b.n	8012068 <pow+0x148>
 8011fac:	f04f 0a00 	mov.w	sl, #0
 8011fb0:	f04f 0b00 	mov.w	fp, #0
 8011fb4:	4652      	mov	r2, sl
 8011fb6:	465b      	mov	r3, fp
 8011fb8:	4630      	mov	r0, r6
 8011fba:	4639      	mov	r1, r7
 8011fbc:	f7ee fdac 	bl	8000b18 <__aeabi_dcmpeq>
 8011fc0:	ec4b ab19 	vmov	d9, sl, fp
 8011fc4:	2800      	cmp	r0, #0
 8011fc6:	d054      	beq.n	8012072 <pow+0x152>
 8011fc8:	4652      	mov	r2, sl
 8011fca:	465b      	mov	r3, fp
 8011fcc:	4620      	mov	r0, r4
 8011fce:	4629      	mov	r1, r5
 8011fd0:	f7ee fda2 	bl	8000b18 <__aeabi_dcmpeq>
 8011fd4:	4680      	mov	r8, r0
 8011fd6:	b318      	cbz	r0, 8012020 <pow+0x100>
 8011fd8:	2301      	movs	r3, #1
 8011fda:	9302      	str	r3, [sp, #8]
 8011fdc:	4b80      	ldr	r3, [pc, #512]	; (80121e0 <pow+0x2c0>)
 8011fde:	9303      	str	r3, [sp, #12]
 8011fe0:	9b01      	ldr	r3, [sp, #4]
 8011fe2:	930a      	str	r3, [sp, #40]	; 0x28
 8011fe4:	9b00      	ldr	r3, [sp, #0]
 8011fe6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011fea:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8011fee:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d0d5      	beq.n	8011fa2 <pow+0x82>
 8011ff6:	4b7b      	ldr	r3, [pc, #492]	; (80121e4 <pow+0x2c4>)
 8011ff8:	2200      	movs	r2, #0
 8011ffa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011ffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012000:	b11b      	cbz	r3, 801200a <pow+0xea>
 8012002:	f7fd f971 	bl	800f2e8 <__errno>
 8012006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012008:	6003      	str	r3, [r0, #0]
 801200a:	ed9d 8b08 	vldr	d8, [sp, #32]
 801200e:	eeb0 0a48 	vmov.f32	s0, s16
 8012012:	eef0 0a68 	vmov.f32	s1, s17
 8012016:	b00d      	add	sp, #52	; 0x34
 8012018:	ecbd 8b04 	vpop	{d8-d9}
 801201c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012020:	ec45 4b10 	vmov	d0, r4, r5
 8012024:	f000 ff3f 	bl	8012ea6 <finite>
 8012028:	2800      	cmp	r0, #0
 801202a:	d0f0      	beq.n	801200e <pow+0xee>
 801202c:	4652      	mov	r2, sl
 801202e:	465b      	mov	r3, fp
 8012030:	4620      	mov	r0, r4
 8012032:	4629      	mov	r1, r5
 8012034:	f7ee fd7a 	bl	8000b2c <__aeabi_dcmplt>
 8012038:	2800      	cmp	r0, #0
 801203a:	d0e8      	beq.n	801200e <pow+0xee>
 801203c:	2301      	movs	r3, #1
 801203e:	9302      	str	r3, [sp, #8]
 8012040:	4b67      	ldr	r3, [pc, #412]	; (80121e0 <pow+0x2c0>)
 8012042:	9303      	str	r3, [sp, #12]
 8012044:	f999 3000 	ldrsb.w	r3, [r9]
 8012048:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801204c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012050:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8012054:	b913      	cbnz	r3, 801205c <pow+0x13c>
 8012056:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801205a:	e7a2      	b.n	8011fa2 <pow+0x82>
 801205c:	4962      	ldr	r1, [pc, #392]	; (80121e8 <pow+0x2c8>)
 801205e:	2000      	movs	r0, #0
 8012060:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012064:	2b02      	cmp	r3, #2
 8012066:	d19c      	bne.n	8011fa2 <pow+0x82>
 8012068:	f7fd f93e 	bl	800f2e8 <__errno>
 801206c:	2321      	movs	r3, #33	; 0x21
 801206e:	6003      	str	r3, [r0, #0]
 8012070:	e7c5      	b.n	8011ffe <pow+0xde>
 8012072:	eeb0 0a48 	vmov.f32	s0, s16
 8012076:	eef0 0a68 	vmov.f32	s1, s17
 801207a:	f000 ff14 	bl	8012ea6 <finite>
 801207e:	9000      	str	r0, [sp, #0]
 8012080:	2800      	cmp	r0, #0
 8012082:	f040 8081 	bne.w	8012188 <pow+0x268>
 8012086:	ec47 6b10 	vmov	d0, r6, r7
 801208a:	f000 ff0c 	bl	8012ea6 <finite>
 801208e:	2800      	cmp	r0, #0
 8012090:	d07a      	beq.n	8012188 <pow+0x268>
 8012092:	ec45 4b10 	vmov	d0, r4, r5
 8012096:	f000 ff06 	bl	8012ea6 <finite>
 801209a:	2800      	cmp	r0, #0
 801209c:	d074      	beq.n	8012188 <pow+0x268>
 801209e:	ec53 2b18 	vmov	r2, r3, d8
 80120a2:	ee18 0a10 	vmov	r0, s16
 80120a6:	4619      	mov	r1, r3
 80120a8:	f7ee fd68 	bl	8000b7c <__aeabi_dcmpun>
 80120ac:	f999 9000 	ldrsb.w	r9, [r9]
 80120b0:	4b4b      	ldr	r3, [pc, #300]	; (80121e0 <pow+0x2c0>)
 80120b2:	b1b0      	cbz	r0, 80120e2 <pow+0x1c2>
 80120b4:	2201      	movs	r2, #1
 80120b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80120ba:	9b00      	ldr	r3, [sp, #0]
 80120bc:	930a      	str	r3, [sp, #40]	; 0x28
 80120be:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80120c2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80120c6:	f1b9 0f00 	cmp.w	r9, #0
 80120ca:	d0c4      	beq.n	8012056 <pow+0x136>
 80120cc:	4652      	mov	r2, sl
 80120ce:	465b      	mov	r3, fp
 80120d0:	4650      	mov	r0, sl
 80120d2:	4659      	mov	r1, fp
 80120d4:	f7ee fbe2 	bl	800089c <__aeabi_ddiv>
 80120d8:	f1b9 0f02 	cmp.w	r9, #2
 80120dc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80120e0:	e7c1      	b.n	8012066 <pow+0x146>
 80120e2:	2203      	movs	r2, #3
 80120e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80120e8:	900a      	str	r0, [sp, #40]	; 0x28
 80120ea:	4629      	mov	r1, r5
 80120ec:	4620      	mov	r0, r4
 80120ee:	2200      	movs	r2, #0
 80120f0:	4b3e      	ldr	r3, [pc, #248]	; (80121ec <pow+0x2cc>)
 80120f2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80120f6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80120fa:	f7ee faa5 	bl	8000648 <__aeabi_dmul>
 80120fe:	4604      	mov	r4, r0
 8012100:	460d      	mov	r5, r1
 8012102:	f1b9 0f00 	cmp.w	r9, #0
 8012106:	d124      	bne.n	8012152 <pow+0x232>
 8012108:	4b39      	ldr	r3, [pc, #228]	; (80121f0 <pow+0x2d0>)
 801210a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801210e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012112:	4630      	mov	r0, r6
 8012114:	4652      	mov	r2, sl
 8012116:	465b      	mov	r3, fp
 8012118:	4639      	mov	r1, r7
 801211a:	f7ee fd07 	bl	8000b2c <__aeabi_dcmplt>
 801211e:	2800      	cmp	r0, #0
 8012120:	d056      	beq.n	80121d0 <pow+0x2b0>
 8012122:	ec45 4b10 	vmov	d0, r4, r5
 8012126:	f000 fed3 	bl	8012ed0 <rint>
 801212a:	4622      	mov	r2, r4
 801212c:	462b      	mov	r3, r5
 801212e:	ec51 0b10 	vmov	r0, r1, d0
 8012132:	f7ee fcf1 	bl	8000b18 <__aeabi_dcmpeq>
 8012136:	b920      	cbnz	r0, 8012142 <pow+0x222>
 8012138:	4b2e      	ldr	r3, [pc, #184]	; (80121f4 <pow+0x2d4>)
 801213a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801213e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012142:	f998 3000 	ldrsb.w	r3, [r8]
 8012146:	2b02      	cmp	r3, #2
 8012148:	d142      	bne.n	80121d0 <pow+0x2b0>
 801214a:	f7fd f8cd 	bl	800f2e8 <__errno>
 801214e:	2322      	movs	r3, #34	; 0x22
 8012150:	e78d      	b.n	801206e <pow+0x14e>
 8012152:	4b29      	ldr	r3, [pc, #164]	; (80121f8 <pow+0x2d8>)
 8012154:	2200      	movs	r2, #0
 8012156:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801215a:	4630      	mov	r0, r6
 801215c:	4652      	mov	r2, sl
 801215e:	465b      	mov	r3, fp
 8012160:	4639      	mov	r1, r7
 8012162:	f7ee fce3 	bl	8000b2c <__aeabi_dcmplt>
 8012166:	2800      	cmp	r0, #0
 8012168:	d0eb      	beq.n	8012142 <pow+0x222>
 801216a:	ec45 4b10 	vmov	d0, r4, r5
 801216e:	f000 feaf 	bl	8012ed0 <rint>
 8012172:	4622      	mov	r2, r4
 8012174:	462b      	mov	r3, r5
 8012176:	ec51 0b10 	vmov	r0, r1, d0
 801217a:	f7ee fccd 	bl	8000b18 <__aeabi_dcmpeq>
 801217e:	2800      	cmp	r0, #0
 8012180:	d1df      	bne.n	8012142 <pow+0x222>
 8012182:	2200      	movs	r2, #0
 8012184:	4b18      	ldr	r3, [pc, #96]	; (80121e8 <pow+0x2c8>)
 8012186:	e7da      	b.n	801213e <pow+0x21e>
 8012188:	2200      	movs	r2, #0
 801218a:	2300      	movs	r3, #0
 801218c:	ec51 0b18 	vmov	r0, r1, d8
 8012190:	f7ee fcc2 	bl	8000b18 <__aeabi_dcmpeq>
 8012194:	2800      	cmp	r0, #0
 8012196:	f43f af3a 	beq.w	801200e <pow+0xee>
 801219a:	ec47 6b10 	vmov	d0, r6, r7
 801219e:	f000 fe82 	bl	8012ea6 <finite>
 80121a2:	2800      	cmp	r0, #0
 80121a4:	f43f af33 	beq.w	801200e <pow+0xee>
 80121a8:	ec45 4b10 	vmov	d0, r4, r5
 80121ac:	f000 fe7b 	bl	8012ea6 <finite>
 80121b0:	2800      	cmp	r0, #0
 80121b2:	f43f af2c 	beq.w	801200e <pow+0xee>
 80121b6:	2304      	movs	r3, #4
 80121b8:	9302      	str	r3, [sp, #8]
 80121ba:	4b09      	ldr	r3, [pc, #36]	; (80121e0 <pow+0x2c0>)
 80121bc:	9303      	str	r3, [sp, #12]
 80121be:	2300      	movs	r3, #0
 80121c0:	930a      	str	r3, [sp, #40]	; 0x28
 80121c2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80121c6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80121ca:	ed8d 9b08 	vstr	d9, [sp, #32]
 80121ce:	e7b8      	b.n	8012142 <pow+0x222>
 80121d0:	a802      	add	r0, sp, #8
 80121d2:	f000 fe70 	bl	8012eb6 <matherr>
 80121d6:	2800      	cmp	r0, #0
 80121d8:	f47f af11 	bne.w	8011ffe <pow+0xde>
 80121dc:	e7b5      	b.n	801214a <pow+0x22a>
 80121de:	bf00      	nop
 80121e0:	08014796 	.word	0x08014796
 80121e4:	3ff00000 	.word	0x3ff00000
 80121e8:	fff00000 	.word	0xfff00000
 80121ec:	3fe00000 	.word	0x3fe00000
 80121f0:	47efffff 	.word	0x47efffff
 80121f4:	c7efffff 	.word	0xc7efffff
 80121f8:	7ff00000 	.word	0x7ff00000
 80121fc:	20001e04 	.word	0x20001e04

08012200 <__ieee754_log10>:
 8012200:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012204:	ec55 4b10 	vmov	r4, r5, d0
 8012208:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 801220c:	462b      	mov	r3, r5
 801220e:	da2f      	bge.n	8012270 <__ieee754_log10+0x70>
 8012210:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8012214:	4322      	orrs	r2, r4
 8012216:	d10a      	bne.n	801222e <__ieee754_log10+0x2e>
 8012218:	493b      	ldr	r1, [pc, #236]	; (8012308 <__ieee754_log10+0x108>)
 801221a:	2200      	movs	r2, #0
 801221c:	2300      	movs	r3, #0
 801221e:	2000      	movs	r0, #0
 8012220:	f7ee fb3c 	bl	800089c <__aeabi_ddiv>
 8012224:	ec41 0b10 	vmov	d0, r0, r1
 8012228:	b003      	add	sp, #12
 801222a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801222e:	2d00      	cmp	r5, #0
 8012230:	da08      	bge.n	8012244 <__ieee754_log10+0x44>
 8012232:	ee10 2a10 	vmov	r2, s0
 8012236:	4620      	mov	r0, r4
 8012238:	4629      	mov	r1, r5
 801223a:	f7ee f84d 	bl	80002d8 <__aeabi_dsub>
 801223e:	2200      	movs	r2, #0
 8012240:	2300      	movs	r3, #0
 8012242:	e7ed      	b.n	8012220 <__ieee754_log10+0x20>
 8012244:	2200      	movs	r2, #0
 8012246:	4b31      	ldr	r3, [pc, #196]	; (801230c <__ieee754_log10+0x10c>)
 8012248:	4629      	mov	r1, r5
 801224a:	ee10 0a10 	vmov	r0, s0
 801224e:	f7ee f9fb 	bl	8000648 <__aeabi_dmul>
 8012252:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8012256:	4604      	mov	r4, r0
 8012258:	460d      	mov	r5, r1
 801225a:	460b      	mov	r3, r1
 801225c:	492c      	ldr	r1, [pc, #176]	; (8012310 <__ieee754_log10+0x110>)
 801225e:	428b      	cmp	r3, r1
 8012260:	dd08      	ble.n	8012274 <__ieee754_log10+0x74>
 8012262:	4622      	mov	r2, r4
 8012264:	462b      	mov	r3, r5
 8012266:	4620      	mov	r0, r4
 8012268:	4629      	mov	r1, r5
 801226a:	f7ee f837 	bl	80002dc <__adddf3>
 801226e:	e7d9      	b.n	8012224 <__ieee754_log10+0x24>
 8012270:	2200      	movs	r2, #0
 8012272:	e7f3      	b.n	801225c <__ieee754_log10+0x5c>
 8012274:	1518      	asrs	r0, r3, #20
 8012276:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 801227a:	4410      	add	r0, r2
 801227c:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8012280:	4448      	add	r0, r9
 8012282:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8012286:	f7ee f975 	bl	8000574 <__aeabi_i2d>
 801228a:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 801228e:	3303      	adds	r3, #3
 8012290:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8012294:	ec45 4b10 	vmov	d0, r4, r5
 8012298:	4606      	mov	r6, r0
 801229a:	460f      	mov	r7, r1
 801229c:	f000 ff14 	bl	80130c8 <__ieee754_log>
 80122a0:	a313      	add	r3, pc, #76	; (adr r3, 80122f0 <__ieee754_log10+0xf0>)
 80122a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122a6:	4630      	mov	r0, r6
 80122a8:	4639      	mov	r1, r7
 80122aa:	ed8d 0b00 	vstr	d0, [sp]
 80122ae:	f7ee f9cb 	bl	8000648 <__aeabi_dmul>
 80122b2:	ed9d 0b00 	vldr	d0, [sp]
 80122b6:	4604      	mov	r4, r0
 80122b8:	460d      	mov	r5, r1
 80122ba:	a30f      	add	r3, pc, #60	; (adr r3, 80122f8 <__ieee754_log10+0xf8>)
 80122bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122c0:	ec51 0b10 	vmov	r0, r1, d0
 80122c4:	f7ee f9c0 	bl	8000648 <__aeabi_dmul>
 80122c8:	4602      	mov	r2, r0
 80122ca:	460b      	mov	r3, r1
 80122cc:	4620      	mov	r0, r4
 80122ce:	4629      	mov	r1, r5
 80122d0:	f7ee f804 	bl	80002dc <__adddf3>
 80122d4:	a30a      	add	r3, pc, #40	; (adr r3, 8012300 <__ieee754_log10+0x100>)
 80122d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122da:	4604      	mov	r4, r0
 80122dc:	460d      	mov	r5, r1
 80122de:	4630      	mov	r0, r6
 80122e0:	4639      	mov	r1, r7
 80122e2:	f7ee f9b1 	bl	8000648 <__aeabi_dmul>
 80122e6:	4602      	mov	r2, r0
 80122e8:	460b      	mov	r3, r1
 80122ea:	4620      	mov	r0, r4
 80122ec:	4629      	mov	r1, r5
 80122ee:	e7bc      	b.n	801226a <__ieee754_log10+0x6a>
 80122f0:	11f12b36 	.word	0x11f12b36
 80122f4:	3d59fef3 	.word	0x3d59fef3
 80122f8:	1526e50e 	.word	0x1526e50e
 80122fc:	3fdbcb7b 	.word	0x3fdbcb7b
 8012300:	509f6000 	.word	0x509f6000
 8012304:	3fd34413 	.word	0x3fd34413
 8012308:	c3500000 	.word	0xc3500000
 801230c:	43500000 	.word	0x43500000
 8012310:	7fefffff 	.word	0x7fefffff
 8012314:	00000000 	.word	0x00000000

08012318 <__ieee754_pow>:
 8012318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801231c:	b091      	sub	sp, #68	; 0x44
 801231e:	ed8d 1b00 	vstr	d1, [sp]
 8012322:	e9dd 2900 	ldrd	r2, r9, [sp]
 8012326:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801232a:	ea58 0302 	orrs.w	r3, r8, r2
 801232e:	ec57 6b10 	vmov	r6, r7, d0
 8012332:	f000 84be 	beq.w	8012cb2 <__ieee754_pow+0x99a>
 8012336:	4b7a      	ldr	r3, [pc, #488]	; (8012520 <__ieee754_pow+0x208>)
 8012338:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801233c:	429c      	cmp	r4, r3
 801233e:	463d      	mov	r5, r7
 8012340:	ee10 aa10 	vmov	sl, s0
 8012344:	dc09      	bgt.n	801235a <__ieee754_pow+0x42>
 8012346:	d103      	bne.n	8012350 <__ieee754_pow+0x38>
 8012348:	b93e      	cbnz	r6, 801235a <__ieee754_pow+0x42>
 801234a:	45a0      	cmp	r8, r4
 801234c:	dc0d      	bgt.n	801236a <__ieee754_pow+0x52>
 801234e:	e001      	b.n	8012354 <__ieee754_pow+0x3c>
 8012350:	4598      	cmp	r8, r3
 8012352:	dc02      	bgt.n	801235a <__ieee754_pow+0x42>
 8012354:	4598      	cmp	r8, r3
 8012356:	d10e      	bne.n	8012376 <__ieee754_pow+0x5e>
 8012358:	b16a      	cbz	r2, 8012376 <__ieee754_pow+0x5e>
 801235a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801235e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8012362:	ea54 030a 	orrs.w	r3, r4, sl
 8012366:	f000 84a4 	beq.w	8012cb2 <__ieee754_pow+0x99a>
 801236a:	486e      	ldr	r0, [pc, #440]	; (8012524 <__ieee754_pow+0x20c>)
 801236c:	b011      	add	sp, #68	; 0x44
 801236e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012372:	f000 bda5 	b.w	8012ec0 <nan>
 8012376:	2d00      	cmp	r5, #0
 8012378:	da53      	bge.n	8012422 <__ieee754_pow+0x10a>
 801237a:	4b6b      	ldr	r3, [pc, #428]	; (8012528 <__ieee754_pow+0x210>)
 801237c:	4598      	cmp	r8, r3
 801237e:	dc4d      	bgt.n	801241c <__ieee754_pow+0x104>
 8012380:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8012384:	4598      	cmp	r8, r3
 8012386:	dd4c      	ble.n	8012422 <__ieee754_pow+0x10a>
 8012388:	ea4f 5328 	mov.w	r3, r8, asr #20
 801238c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012390:	2b14      	cmp	r3, #20
 8012392:	dd26      	ble.n	80123e2 <__ieee754_pow+0xca>
 8012394:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8012398:	fa22 f103 	lsr.w	r1, r2, r3
 801239c:	fa01 f303 	lsl.w	r3, r1, r3
 80123a0:	4293      	cmp	r3, r2
 80123a2:	d13e      	bne.n	8012422 <__ieee754_pow+0x10a>
 80123a4:	f001 0101 	and.w	r1, r1, #1
 80123a8:	f1c1 0b02 	rsb	fp, r1, #2
 80123ac:	2a00      	cmp	r2, #0
 80123ae:	d15b      	bne.n	8012468 <__ieee754_pow+0x150>
 80123b0:	4b5b      	ldr	r3, [pc, #364]	; (8012520 <__ieee754_pow+0x208>)
 80123b2:	4598      	cmp	r8, r3
 80123b4:	d124      	bne.n	8012400 <__ieee754_pow+0xe8>
 80123b6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80123ba:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80123be:	ea53 030a 	orrs.w	r3, r3, sl
 80123c2:	f000 8476 	beq.w	8012cb2 <__ieee754_pow+0x99a>
 80123c6:	4b59      	ldr	r3, [pc, #356]	; (801252c <__ieee754_pow+0x214>)
 80123c8:	429c      	cmp	r4, r3
 80123ca:	dd2d      	ble.n	8012428 <__ieee754_pow+0x110>
 80123cc:	f1b9 0f00 	cmp.w	r9, #0
 80123d0:	f280 8473 	bge.w	8012cba <__ieee754_pow+0x9a2>
 80123d4:	2000      	movs	r0, #0
 80123d6:	2100      	movs	r1, #0
 80123d8:	ec41 0b10 	vmov	d0, r0, r1
 80123dc:	b011      	add	sp, #68	; 0x44
 80123de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123e2:	2a00      	cmp	r2, #0
 80123e4:	d13e      	bne.n	8012464 <__ieee754_pow+0x14c>
 80123e6:	f1c3 0314 	rsb	r3, r3, #20
 80123ea:	fa48 f103 	asr.w	r1, r8, r3
 80123ee:	fa01 f303 	lsl.w	r3, r1, r3
 80123f2:	4543      	cmp	r3, r8
 80123f4:	f040 8469 	bne.w	8012cca <__ieee754_pow+0x9b2>
 80123f8:	f001 0101 	and.w	r1, r1, #1
 80123fc:	f1c1 0b02 	rsb	fp, r1, #2
 8012400:	4b4b      	ldr	r3, [pc, #300]	; (8012530 <__ieee754_pow+0x218>)
 8012402:	4598      	cmp	r8, r3
 8012404:	d118      	bne.n	8012438 <__ieee754_pow+0x120>
 8012406:	f1b9 0f00 	cmp.w	r9, #0
 801240a:	f280 845a 	bge.w	8012cc2 <__ieee754_pow+0x9aa>
 801240e:	4948      	ldr	r1, [pc, #288]	; (8012530 <__ieee754_pow+0x218>)
 8012410:	4632      	mov	r2, r6
 8012412:	463b      	mov	r3, r7
 8012414:	2000      	movs	r0, #0
 8012416:	f7ee fa41 	bl	800089c <__aeabi_ddiv>
 801241a:	e7dd      	b.n	80123d8 <__ieee754_pow+0xc0>
 801241c:	f04f 0b02 	mov.w	fp, #2
 8012420:	e7c4      	b.n	80123ac <__ieee754_pow+0x94>
 8012422:	f04f 0b00 	mov.w	fp, #0
 8012426:	e7c1      	b.n	80123ac <__ieee754_pow+0x94>
 8012428:	f1b9 0f00 	cmp.w	r9, #0
 801242c:	dad2      	bge.n	80123d4 <__ieee754_pow+0xbc>
 801242e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8012432:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012436:	e7cf      	b.n	80123d8 <__ieee754_pow+0xc0>
 8012438:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801243c:	d106      	bne.n	801244c <__ieee754_pow+0x134>
 801243e:	4632      	mov	r2, r6
 8012440:	463b      	mov	r3, r7
 8012442:	4610      	mov	r0, r2
 8012444:	4619      	mov	r1, r3
 8012446:	f7ee f8ff 	bl	8000648 <__aeabi_dmul>
 801244a:	e7c5      	b.n	80123d8 <__ieee754_pow+0xc0>
 801244c:	4b39      	ldr	r3, [pc, #228]	; (8012534 <__ieee754_pow+0x21c>)
 801244e:	4599      	cmp	r9, r3
 8012450:	d10a      	bne.n	8012468 <__ieee754_pow+0x150>
 8012452:	2d00      	cmp	r5, #0
 8012454:	db08      	blt.n	8012468 <__ieee754_pow+0x150>
 8012456:	ec47 6b10 	vmov	d0, r6, r7
 801245a:	b011      	add	sp, #68	; 0x44
 801245c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012460:	f000 bc68 	b.w	8012d34 <__ieee754_sqrt>
 8012464:	f04f 0b00 	mov.w	fp, #0
 8012468:	ec47 6b10 	vmov	d0, r6, r7
 801246c:	f000 fd12 	bl	8012e94 <fabs>
 8012470:	ec51 0b10 	vmov	r0, r1, d0
 8012474:	f1ba 0f00 	cmp.w	sl, #0
 8012478:	d127      	bne.n	80124ca <__ieee754_pow+0x1b2>
 801247a:	b124      	cbz	r4, 8012486 <__ieee754_pow+0x16e>
 801247c:	4b2c      	ldr	r3, [pc, #176]	; (8012530 <__ieee754_pow+0x218>)
 801247e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8012482:	429a      	cmp	r2, r3
 8012484:	d121      	bne.n	80124ca <__ieee754_pow+0x1b2>
 8012486:	f1b9 0f00 	cmp.w	r9, #0
 801248a:	da05      	bge.n	8012498 <__ieee754_pow+0x180>
 801248c:	4602      	mov	r2, r0
 801248e:	460b      	mov	r3, r1
 8012490:	2000      	movs	r0, #0
 8012492:	4927      	ldr	r1, [pc, #156]	; (8012530 <__ieee754_pow+0x218>)
 8012494:	f7ee fa02 	bl	800089c <__aeabi_ddiv>
 8012498:	2d00      	cmp	r5, #0
 801249a:	da9d      	bge.n	80123d8 <__ieee754_pow+0xc0>
 801249c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80124a0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80124a4:	ea54 030b 	orrs.w	r3, r4, fp
 80124a8:	d108      	bne.n	80124bc <__ieee754_pow+0x1a4>
 80124aa:	4602      	mov	r2, r0
 80124ac:	460b      	mov	r3, r1
 80124ae:	4610      	mov	r0, r2
 80124b0:	4619      	mov	r1, r3
 80124b2:	f7ed ff11 	bl	80002d8 <__aeabi_dsub>
 80124b6:	4602      	mov	r2, r0
 80124b8:	460b      	mov	r3, r1
 80124ba:	e7ac      	b.n	8012416 <__ieee754_pow+0xfe>
 80124bc:	f1bb 0f01 	cmp.w	fp, #1
 80124c0:	d18a      	bne.n	80123d8 <__ieee754_pow+0xc0>
 80124c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80124c6:	4619      	mov	r1, r3
 80124c8:	e786      	b.n	80123d8 <__ieee754_pow+0xc0>
 80124ca:	0fed      	lsrs	r5, r5, #31
 80124cc:	1e6b      	subs	r3, r5, #1
 80124ce:	930d      	str	r3, [sp, #52]	; 0x34
 80124d0:	ea5b 0303 	orrs.w	r3, fp, r3
 80124d4:	d102      	bne.n	80124dc <__ieee754_pow+0x1c4>
 80124d6:	4632      	mov	r2, r6
 80124d8:	463b      	mov	r3, r7
 80124da:	e7e8      	b.n	80124ae <__ieee754_pow+0x196>
 80124dc:	4b16      	ldr	r3, [pc, #88]	; (8012538 <__ieee754_pow+0x220>)
 80124de:	4598      	cmp	r8, r3
 80124e0:	f340 80fe 	ble.w	80126e0 <__ieee754_pow+0x3c8>
 80124e4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80124e8:	4598      	cmp	r8, r3
 80124ea:	dd0a      	ble.n	8012502 <__ieee754_pow+0x1ea>
 80124ec:	4b0f      	ldr	r3, [pc, #60]	; (801252c <__ieee754_pow+0x214>)
 80124ee:	429c      	cmp	r4, r3
 80124f0:	dc0d      	bgt.n	801250e <__ieee754_pow+0x1f6>
 80124f2:	f1b9 0f00 	cmp.w	r9, #0
 80124f6:	f6bf af6d 	bge.w	80123d4 <__ieee754_pow+0xbc>
 80124fa:	a307      	add	r3, pc, #28	; (adr r3, 8012518 <__ieee754_pow+0x200>)
 80124fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012500:	e79f      	b.n	8012442 <__ieee754_pow+0x12a>
 8012502:	4b0e      	ldr	r3, [pc, #56]	; (801253c <__ieee754_pow+0x224>)
 8012504:	429c      	cmp	r4, r3
 8012506:	ddf4      	ble.n	80124f2 <__ieee754_pow+0x1da>
 8012508:	4b09      	ldr	r3, [pc, #36]	; (8012530 <__ieee754_pow+0x218>)
 801250a:	429c      	cmp	r4, r3
 801250c:	dd18      	ble.n	8012540 <__ieee754_pow+0x228>
 801250e:	f1b9 0f00 	cmp.w	r9, #0
 8012512:	dcf2      	bgt.n	80124fa <__ieee754_pow+0x1e2>
 8012514:	e75e      	b.n	80123d4 <__ieee754_pow+0xbc>
 8012516:	bf00      	nop
 8012518:	8800759c 	.word	0x8800759c
 801251c:	7e37e43c 	.word	0x7e37e43c
 8012520:	7ff00000 	.word	0x7ff00000
 8012524:	08014679 	.word	0x08014679
 8012528:	433fffff 	.word	0x433fffff
 801252c:	3fefffff 	.word	0x3fefffff
 8012530:	3ff00000 	.word	0x3ff00000
 8012534:	3fe00000 	.word	0x3fe00000
 8012538:	41e00000 	.word	0x41e00000
 801253c:	3feffffe 	.word	0x3feffffe
 8012540:	2200      	movs	r2, #0
 8012542:	4b63      	ldr	r3, [pc, #396]	; (80126d0 <__ieee754_pow+0x3b8>)
 8012544:	f7ed fec8 	bl	80002d8 <__aeabi_dsub>
 8012548:	a355      	add	r3, pc, #340	; (adr r3, 80126a0 <__ieee754_pow+0x388>)
 801254a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801254e:	4604      	mov	r4, r0
 8012550:	460d      	mov	r5, r1
 8012552:	f7ee f879 	bl	8000648 <__aeabi_dmul>
 8012556:	a354      	add	r3, pc, #336	; (adr r3, 80126a8 <__ieee754_pow+0x390>)
 8012558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801255c:	4606      	mov	r6, r0
 801255e:	460f      	mov	r7, r1
 8012560:	4620      	mov	r0, r4
 8012562:	4629      	mov	r1, r5
 8012564:	f7ee f870 	bl	8000648 <__aeabi_dmul>
 8012568:	2200      	movs	r2, #0
 801256a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801256e:	4b59      	ldr	r3, [pc, #356]	; (80126d4 <__ieee754_pow+0x3bc>)
 8012570:	4620      	mov	r0, r4
 8012572:	4629      	mov	r1, r5
 8012574:	f7ee f868 	bl	8000648 <__aeabi_dmul>
 8012578:	4602      	mov	r2, r0
 801257a:	460b      	mov	r3, r1
 801257c:	a14c      	add	r1, pc, #304	; (adr r1, 80126b0 <__ieee754_pow+0x398>)
 801257e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012582:	f7ed fea9 	bl	80002d8 <__aeabi_dsub>
 8012586:	4622      	mov	r2, r4
 8012588:	462b      	mov	r3, r5
 801258a:	f7ee f85d 	bl	8000648 <__aeabi_dmul>
 801258e:	4602      	mov	r2, r0
 8012590:	460b      	mov	r3, r1
 8012592:	2000      	movs	r0, #0
 8012594:	4950      	ldr	r1, [pc, #320]	; (80126d8 <__ieee754_pow+0x3c0>)
 8012596:	f7ed fe9f 	bl	80002d8 <__aeabi_dsub>
 801259a:	4622      	mov	r2, r4
 801259c:	462b      	mov	r3, r5
 801259e:	4680      	mov	r8, r0
 80125a0:	4689      	mov	r9, r1
 80125a2:	4620      	mov	r0, r4
 80125a4:	4629      	mov	r1, r5
 80125a6:	f7ee f84f 	bl	8000648 <__aeabi_dmul>
 80125aa:	4602      	mov	r2, r0
 80125ac:	460b      	mov	r3, r1
 80125ae:	4640      	mov	r0, r8
 80125b0:	4649      	mov	r1, r9
 80125b2:	f7ee f849 	bl	8000648 <__aeabi_dmul>
 80125b6:	a340      	add	r3, pc, #256	; (adr r3, 80126b8 <__ieee754_pow+0x3a0>)
 80125b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125bc:	f7ee f844 	bl	8000648 <__aeabi_dmul>
 80125c0:	4602      	mov	r2, r0
 80125c2:	460b      	mov	r3, r1
 80125c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80125c8:	f7ed fe86 	bl	80002d8 <__aeabi_dsub>
 80125cc:	4602      	mov	r2, r0
 80125ce:	460b      	mov	r3, r1
 80125d0:	4604      	mov	r4, r0
 80125d2:	460d      	mov	r5, r1
 80125d4:	4630      	mov	r0, r6
 80125d6:	4639      	mov	r1, r7
 80125d8:	f7ed fe80 	bl	80002dc <__adddf3>
 80125dc:	2000      	movs	r0, #0
 80125de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80125e2:	4632      	mov	r2, r6
 80125e4:	463b      	mov	r3, r7
 80125e6:	f7ed fe77 	bl	80002d8 <__aeabi_dsub>
 80125ea:	4602      	mov	r2, r0
 80125ec:	460b      	mov	r3, r1
 80125ee:	4620      	mov	r0, r4
 80125f0:	4629      	mov	r1, r5
 80125f2:	f7ed fe71 	bl	80002d8 <__aeabi_dsub>
 80125f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80125f8:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80125fc:	4313      	orrs	r3, r2
 80125fe:	4606      	mov	r6, r0
 8012600:	460f      	mov	r7, r1
 8012602:	f040 81eb 	bne.w	80129dc <__ieee754_pow+0x6c4>
 8012606:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80126c0 <__ieee754_pow+0x3a8>
 801260a:	e9dd 4500 	ldrd	r4, r5, [sp]
 801260e:	2400      	movs	r4, #0
 8012610:	4622      	mov	r2, r4
 8012612:	462b      	mov	r3, r5
 8012614:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012618:	ed8d 7b02 	vstr	d7, [sp, #8]
 801261c:	f7ed fe5c 	bl	80002d8 <__aeabi_dsub>
 8012620:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012624:	f7ee f810 	bl	8000648 <__aeabi_dmul>
 8012628:	e9dd 2300 	ldrd	r2, r3, [sp]
 801262c:	4680      	mov	r8, r0
 801262e:	4689      	mov	r9, r1
 8012630:	4630      	mov	r0, r6
 8012632:	4639      	mov	r1, r7
 8012634:	f7ee f808 	bl	8000648 <__aeabi_dmul>
 8012638:	4602      	mov	r2, r0
 801263a:	460b      	mov	r3, r1
 801263c:	4640      	mov	r0, r8
 801263e:	4649      	mov	r1, r9
 8012640:	f7ed fe4c 	bl	80002dc <__adddf3>
 8012644:	4622      	mov	r2, r4
 8012646:	462b      	mov	r3, r5
 8012648:	4680      	mov	r8, r0
 801264a:	4689      	mov	r9, r1
 801264c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012650:	f7ed fffa 	bl	8000648 <__aeabi_dmul>
 8012654:	460b      	mov	r3, r1
 8012656:	4604      	mov	r4, r0
 8012658:	460d      	mov	r5, r1
 801265a:	4602      	mov	r2, r0
 801265c:	4649      	mov	r1, r9
 801265e:	4640      	mov	r0, r8
 8012660:	e9cd 4500 	strd	r4, r5, [sp]
 8012664:	f7ed fe3a 	bl	80002dc <__adddf3>
 8012668:	4b1c      	ldr	r3, [pc, #112]	; (80126dc <__ieee754_pow+0x3c4>)
 801266a:	4299      	cmp	r1, r3
 801266c:	4606      	mov	r6, r0
 801266e:	460f      	mov	r7, r1
 8012670:	468b      	mov	fp, r1
 8012672:	f340 82f7 	ble.w	8012c64 <__ieee754_pow+0x94c>
 8012676:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801267a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801267e:	4303      	orrs	r3, r0
 8012680:	f000 81ea 	beq.w	8012a58 <__ieee754_pow+0x740>
 8012684:	a310      	add	r3, pc, #64	; (adr r3, 80126c8 <__ieee754_pow+0x3b0>)
 8012686:	e9d3 2300 	ldrd	r2, r3, [r3]
 801268a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801268e:	f7ed ffdb 	bl	8000648 <__aeabi_dmul>
 8012692:	a30d      	add	r3, pc, #52	; (adr r3, 80126c8 <__ieee754_pow+0x3b0>)
 8012694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012698:	e6d5      	b.n	8012446 <__ieee754_pow+0x12e>
 801269a:	bf00      	nop
 801269c:	f3af 8000 	nop.w
 80126a0:	60000000 	.word	0x60000000
 80126a4:	3ff71547 	.word	0x3ff71547
 80126a8:	f85ddf44 	.word	0xf85ddf44
 80126ac:	3e54ae0b 	.word	0x3e54ae0b
 80126b0:	55555555 	.word	0x55555555
 80126b4:	3fd55555 	.word	0x3fd55555
 80126b8:	652b82fe 	.word	0x652b82fe
 80126bc:	3ff71547 	.word	0x3ff71547
 80126c0:	00000000 	.word	0x00000000
 80126c4:	bff00000 	.word	0xbff00000
 80126c8:	8800759c 	.word	0x8800759c
 80126cc:	7e37e43c 	.word	0x7e37e43c
 80126d0:	3ff00000 	.word	0x3ff00000
 80126d4:	3fd00000 	.word	0x3fd00000
 80126d8:	3fe00000 	.word	0x3fe00000
 80126dc:	408fffff 	.word	0x408fffff
 80126e0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80126e4:	f04f 0200 	mov.w	r2, #0
 80126e8:	da05      	bge.n	80126f6 <__ieee754_pow+0x3de>
 80126ea:	4bd3      	ldr	r3, [pc, #844]	; (8012a38 <__ieee754_pow+0x720>)
 80126ec:	f7ed ffac 	bl	8000648 <__aeabi_dmul>
 80126f0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80126f4:	460c      	mov	r4, r1
 80126f6:	1523      	asrs	r3, r4, #20
 80126f8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80126fc:	4413      	add	r3, r2
 80126fe:	9309      	str	r3, [sp, #36]	; 0x24
 8012700:	4bce      	ldr	r3, [pc, #824]	; (8012a3c <__ieee754_pow+0x724>)
 8012702:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8012706:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801270a:	429c      	cmp	r4, r3
 801270c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8012710:	dd08      	ble.n	8012724 <__ieee754_pow+0x40c>
 8012712:	4bcb      	ldr	r3, [pc, #812]	; (8012a40 <__ieee754_pow+0x728>)
 8012714:	429c      	cmp	r4, r3
 8012716:	f340 815e 	ble.w	80129d6 <__ieee754_pow+0x6be>
 801271a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801271c:	3301      	adds	r3, #1
 801271e:	9309      	str	r3, [sp, #36]	; 0x24
 8012720:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8012724:	f04f 0a00 	mov.w	sl, #0
 8012728:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801272c:	930c      	str	r3, [sp, #48]	; 0x30
 801272e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012730:	4bc4      	ldr	r3, [pc, #784]	; (8012a44 <__ieee754_pow+0x72c>)
 8012732:	4413      	add	r3, r2
 8012734:	ed93 7b00 	vldr	d7, [r3]
 8012738:	4629      	mov	r1, r5
 801273a:	ec53 2b17 	vmov	r2, r3, d7
 801273e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012742:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8012746:	f7ed fdc7 	bl	80002d8 <__aeabi_dsub>
 801274a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801274e:	4606      	mov	r6, r0
 8012750:	460f      	mov	r7, r1
 8012752:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012756:	f7ed fdc1 	bl	80002dc <__adddf3>
 801275a:	4602      	mov	r2, r0
 801275c:	460b      	mov	r3, r1
 801275e:	2000      	movs	r0, #0
 8012760:	49b9      	ldr	r1, [pc, #740]	; (8012a48 <__ieee754_pow+0x730>)
 8012762:	f7ee f89b 	bl	800089c <__aeabi_ddiv>
 8012766:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801276a:	4602      	mov	r2, r0
 801276c:	460b      	mov	r3, r1
 801276e:	4630      	mov	r0, r6
 8012770:	4639      	mov	r1, r7
 8012772:	f7ed ff69 	bl	8000648 <__aeabi_dmul>
 8012776:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801277a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801277e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8012782:	2300      	movs	r3, #0
 8012784:	9302      	str	r3, [sp, #8]
 8012786:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801278a:	106d      	asrs	r5, r5, #1
 801278c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8012790:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8012794:	2200      	movs	r2, #0
 8012796:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801279a:	4640      	mov	r0, r8
 801279c:	4649      	mov	r1, r9
 801279e:	4614      	mov	r4, r2
 80127a0:	461d      	mov	r5, r3
 80127a2:	f7ed ff51 	bl	8000648 <__aeabi_dmul>
 80127a6:	4602      	mov	r2, r0
 80127a8:	460b      	mov	r3, r1
 80127aa:	4630      	mov	r0, r6
 80127ac:	4639      	mov	r1, r7
 80127ae:	f7ed fd93 	bl	80002d8 <__aeabi_dsub>
 80127b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80127b6:	4606      	mov	r6, r0
 80127b8:	460f      	mov	r7, r1
 80127ba:	4620      	mov	r0, r4
 80127bc:	4629      	mov	r1, r5
 80127be:	f7ed fd8b 	bl	80002d8 <__aeabi_dsub>
 80127c2:	4602      	mov	r2, r0
 80127c4:	460b      	mov	r3, r1
 80127c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80127ca:	f7ed fd85 	bl	80002d8 <__aeabi_dsub>
 80127ce:	4642      	mov	r2, r8
 80127d0:	464b      	mov	r3, r9
 80127d2:	f7ed ff39 	bl	8000648 <__aeabi_dmul>
 80127d6:	4602      	mov	r2, r0
 80127d8:	460b      	mov	r3, r1
 80127da:	4630      	mov	r0, r6
 80127dc:	4639      	mov	r1, r7
 80127de:	f7ed fd7b 	bl	80002d8 <__aeabi_dsub>
 80127e2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80127e6:	f7ed ff2f 	bl	8000648 <__aeabi_dmul>
 80127ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80127ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80127f2:	4610      	mov	r0, r2
 80127f4:	4619      	mov	r1, r3
 80127f6:	f7ed ff27 	bl	8000648 <__aeabi_dmul>
 80127fa:	a37b      	add	r3, pc, #492	; (adr r3, 80129e8 <__ieee754_pow+0x6d0>)
 80127fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012800:	4604      	mov	r4, r0
 8012802:	460d      	mov	r5, r1
 8012804:	f7ed ff20 	bl	8000648 <__aeabi_dmul>
 8012808:	a379      	add	r3, pc, #484	; (adr r3, 80129f0 <__ieee754_pow+0x6d8>)
 801280a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801280e:	f7ed fd65 	bl	80002dc <__adddf3>
 8012812:	4622      	mov	r2, r4
 8012814:	462b      	mov	r3, r5
 8012816:	f7ed ff17 	bl	8000648 <__aeabi_dmul>
 801281a:	a377      	add	r3, pc, #476	; (adr r3, 80129f8 <__ieee754_pow+0x6e0>)
 801281c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012820:	f7ed fd5c 	bl	80002dc <__adddf3>
 8012824:	4622      	mov	r2, r4
 8012826:	462b      	mov	r3, r5
 8012828:	f7ed ff0e 	bl	8000648 <__aeabi_dmul>
 801282c:	a374      	add	r3, pc, #464	; (adr r3, 8012a00 <__ieee754_pow+0x6e8>)
 801282e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012832:	f7ed fd53 	bl	80002dc <__adddf3>
 8012836:	4622      	mov	r2, r4
 8012838:	462b      	mov	r3, r5
 801283a:	f7ed ff05 	bl	8000648 <__aeabi_dmul>
 801283e:	a372      	add	r3, pc, #456	; (adr r3, 8012a08 <__ieee754_pow+0x6f0>)
 8012840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012844:	f7ed fd4a 	bl	80002dc <__adddf3>
 8012848:	4622      	mov	r2, r4
 801284a:	462b      	mov	r3, r5
 801284c:	f7ed fefc 	bl	8000648 <__aeabi_dmul>
 8012850:	a36f      	add	r3, pc, #444	; (adr r3, 8012a10 <__ieee754_pow+0x6f8>)
 8012852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012856:	f7ed fd41 	bl	80002dc <__adddf3>
 801285a:	4622      	mov	r2, r4
 801285c:	4606      	mov	r6, r0
 801285e:	460f      	mov	r7, r1
 8012860:	462b      	mov	r3, r5
 8012862:	4620      	mov	r0, r4
 8012864:	4629      	mov	r1, r5
 8012866:	f7ed feef 	bl	8000648 <__aeabi_dmul>
 801286a:	4602      	mov	r2, r0
 801286c:	460b      	mov	r3, r1
 801286e:	4630      	mov	r0, r6
 8012870:	4639      	mov	r1, r7
 8012872:	f7ed fee9 	bl	8000648 <__aeabi_dmul>
 8012876:	4642      	mov	r2, r8
 8012878:	4604      	mov	r4, r0
 801287a:	460d      	mov	r5, r1
 801287c:	464b      	mov	r3, r9
 801287e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012882:	f7ed fd2b 	bl	80002dc <__adddf3>
 8012886:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801288a:	f7ed fedd 	bl	8000648 <__aeabi_dmul>
 801288e:	4622      	mov	r2, r4
 8012890:	462b      	mov	r3, r5
 8012892:	f7ed fd23 	bl	80002dc <__adddf3>
 8012896:	4642      	mov	r2, r8
 8012898:	4606      	mov	r6, r0
 801289a:	460f      	mov	r7, r1
 801289c:	464b      	mov	r3, r9
 801289e:	4640      	mov	r0, r8
 80128a0:	4649      	mov	r1, r9
 80128a2:	f7ed fed1 	bl	8000648 <__aeabi_dmul>
 80128a6:	2200      	movs	r2, #0
 80128a8:	4b68      	ldr	r3, [pc, #416]	; (8012a4c <__ieee754_pow+0x734>)
 80128aa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80128ae:	f7ed fd15 	bl	80002dc <__adddf3>
 80128b2:	4632      	mov	r2, r6
 80128b4:	463b      	mov	r3, r7
 80128b6:	f7ed fd11 	bl	80002dc <__adddf3>
 80128ba:	9802      	ldr	r0, [sp, #8]
 80128bc:	460d      	mov	r5, r1
 80128be:	4604      	mov	r4, r0
 80128c0:	4602      	mov	r2, r0
 80128c2:	460b      	mov	r3, r1
 80128c4:	4640      	mov	r0, r8
 80128c6:	4649      	mov	r1, r9
 80128c8:	f7ed febe 	bl	8000648 <__aeabi_dmul>
 80128cc:	2200      	movs	r2, #0
 80128ce:	4680      	mov	r8, r0
 80128d0:	4689      	mov	r9, r1
 80128d2:	4b5e      	ldr	r3, [pc, #376]	; (8012a4c <__ieee754_pow+0x734>)
 80128d4:	4620      	mov	r0, r4
 80128d6:	4629      	mov	r1, r5
 80128d8:	f7ed fcfe 	bl	80002d8 <__aeabi_dsub>
 80128dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80128e0:	f7ed fcfa 	bl	80002d8 <__aeabi_dsub>
 80128e4:	4602      	mov	r2, r0
 80128e6:	460b      	mov	r3, r1
 80128e8:	4630      	mov	r0, r6
 80128ea:	4639      	mov	r1, r7
 80128ec:	f7ed fcf4 	bl	80002d8 <__aeabi_dsub>
 80128f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80128f4:	f7ed fea8 	bl	8000648 <__aeabi_dmul>
 80128f8:	4622      	mov	r2, r4
 80128fa:	4606      	mov	r6, r0
 80128fc:	460f      	mov	r7, r1
 80128fe:	462b      	mov	r3, r5
 8012900:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012904:	f7ed fea0 	bl	8000648 <__aeabi_dmul>
 8012908:	4602      	mov	r2, r0
 801290a:	460b      	mov	r3, r1
 801290c:	4630      	mov	r0, r6
 801290e:	4639      	mov	r1, r7
 8012910:	f7ed fce4 	bl	80002dc <__adddf3>
 8012914:	4606      	mov	r6, r0
 8012916:	460f      	mov	r7, r1
 8012918:	4602      	mov	r2, r0
 801291a:	460b      	mov	r3, r1
 801291c:	4640      	mov	r0, r8
 801291e:	4649      	mov	r1, r9
 8012920:	f7ed fcdc 	bl	80002dc <__adddf3>
 8012924:	9802      	ldr	r0, [sp, #8]
 8012926:	a33c      	add	r3, pc, #240	; (adr r3, 8012a18 <__ieee754_pow+0x700>)
 8012928:	e9d3 2300 	ldrd	r2, r3, [r3]
 801292c:	4604      	mov	r4, r0
 801292e:	460d      	mov	r5, r1
 8012930:	f7ed fe8a 	bl	8000648 <__aeabi_dmul>
 8012934:	4642      	mov	r2, r8
 8012936:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801293a:	464b      	mov	r3, r9
 801293c:	4620      	mov	r0, r4
 801293e:	4629      	mov	r1, r5
 8012940:	f7ed fcca 	bl	80002d8 <__aeabi_dsub>
 8012944:	4602      	mov	r2, r0
 8012946:	460b      	mov	r3, r1
 8012948:	4630      	mov	r0, r6
 801294a:	4639      	mov	r1, r7
 801294c:	f7ed fcc4 	bl	80002d8 <__aeabi_dsub>
 8012950:	a333      	add	r3, pc, #204	; (adr r3, 8012a20 <__ieee754_pow+0x708>)
 8012952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012956:	f7ed fe77 	bl	8000648 <__aeabi_dmul>
 801295a:	a333      	add	r3, pc, #204	; (adr r3, 8012a28 <__ieee754_pow+0x710>)
 801295c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012960:	4606      	mov	r6, r0
 8012962:	460f      	mov	r7, r1
 8012964:	4620      	mov	r0, r4
 8012966:	4629      	mov	r1, r5
 8012968:	f7ed fe6e 	bl	8000648 <__aeabi_dmul>
 801296c:	4602      	mov	r2, r0
 801296e:	460b      	mov	r3, r1
 8012970:	4630      	mov	r0, r6
 8012972:	4639      	mov	r1, r7
 8012974:	f7ed fcb2 	bl	80002dc <__adddf3>
 8012978:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801297a:	4b35      	ldr	r3, [pc, #212]	; (8012a50 <__ieee754_pow+0x738>)
 801297c:	4413      	add	r3, r2
 801297e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012982:	f7ed fcab 	bl	80002dc <__adddf3>
 8012986:	4604      	mov	r4, r0
 8012988:	9809      	ldr	r0, [sp, #36]	; 0x24
 801298a:	460d      	mov	r5, r1
 801298c:	f7ed fdf2 	bl	8000574 <__aeabi_i2d>
 8012990:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012992:	4b30      	ldr	r3, [pc, #192]	; (8012a54 <__ieee754_pow+0x73c>)
 8012994:	4413      	add	r3, r2
 8012996:	e9d3 8900 	ldrd	r8, r9, [r3]
 801299a:	4606      	mov	r6, r0
 801299c:	460f      	mov	r7, r1
 801299e:	4622      	mov	r2, r4
 80129a0:	462b      	mov	r3, r5
 80129a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80129a6:	f7ed fc99 	bl	80002dc <__adddf3>
 80129aa:	4642      	mov	r2, r8
 80129ac:	464b      	mov	r3, r9
 80129ae:	f7ed fc95 	bl	80002dc <__adddf3>
 80129b2:	4632      	mov	r2, r6
 80129b4:	463b      	mov	r3, r7
 80129b6:	f7ed fc91 	bl	80002dc <__adddf3>
 80129ba:	9802      	ldr	r0, [sp, #8]
 80129bc:	4632      	mov	r2, r6
 80129be:	463b      	mov	r3, r7
 80129c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80129c4:	f7ed fc88 	bl	80002d8 <__aeabi_dsub>
 80129c8:	4642      	mov	r2, r8
 80129ca:	464b      	mov	r3, r9
 80129cc:	f7ed fc84 	bl	80002d8 <__aeabi_dsub>
 80129d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80129d4:	e607      	b.n	80125e6 <__ieee754_pow+0x2ce>
 80129d6:	f04f 0a01 	mov.w	sl, #1
 80129da:	e6a5      	b.n	8012728 <__ieee754_pow+0x410>
 80129dc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8012a30 <__ieee754_pow+0x718>
 80129e0:	e613      	b.n	801260a <__ieee754_pow+0x2f2>
 80129e2:	bf00      	nop
 80129e4:	f3af 8000 	nop.w
 80129e8:	4a454eef 	.word	0x4a454eef
 80129ec:	3fca7e28 	.word	0x3fca7e28
 80129f0:	93c9db65 	.word	0x93c9db65
 80129f4:	3fcd864a 	.word	0x3fcd864a
 80129f8:	a91d4101 	.word	0xa91d4101
 80129fc:	3fd17460 	.word	0x3fd17460
 8012a00:	518f264d 	.word	0x518f264d
 8012a04:	3fd55555 	.word	0x3fd55555
 8012a08:	db6fabff 	.word	0xdb6fabff
 8012a0c:	3fdb6db6 	.word	0x3fdb6db6
 8012a10:	33333303 	.word	0x33333303
 8012a14:	3fe33333 	.word	0x3fe33333
 8012a18:	e0000000 	.word	0xe0000000
 8012a1c:	3feec709 	.word	0x3feec709
 8012a20:	dc3a03fd 	.word	0xdc3a03fd
 8012a24:	3feec709 	.word	0x3feec709
 8012a28:	145b01f5 	.word	0x145b01f5
 8012a2c:	be3e2fe0 	.word	0xbe3e2fe0
 8012a30:	00000000 	.word	0x00000000
 8012a34:	3ff00000 	.word	0x3ff00000
 8012a38:	43400000 	.word	0x43400000
 8012a3c:	0003988e 	.word	0x0003988e
 8012a40:	000bb679 	.word	0x000bb679
 8012a44:	080147a0 	.word	0x080147a0
 8012a48:	3ff00000 	.word	0x3ff00000
 8012a4c:	40080000 	.word	0x40080000
 8012a50:	080147c0 	.word	0x080147c0
 8012a54:	080147b0 	.word	0x080147b0
 8012a58:	a3b4      	add	r3, pc, #720	; (adr r3, 8012d2c <__ieee754_pow+0xa14>)
 8012a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a5e:	4640      	mov	r0, r8
 8012a60:	4649      	mov	r1, r9
 8012a62:	f7ed fc3b 	bl	80002dc <__adddf3>
 8012a66:	4622      	mov	r2, r4
 8012a68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012a6c:	462b      	mov	r3, r5
 8012a6e:	4630      	mov	r0, r6
 8012a70:	4639      	mov	r1, r7
 8012a72:	f7ed fc31 	bl	80002d8 <__aeabi_dsub>
 8012a76:	4602      	mov	r2, r0
 8012a78:	460b      	mov	r3, r1
 8012a7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012a7e:	f7ee f873 	bl	8000b68 <__aeabi_dcmpgt>
 8012a82:	2800      	cmp	r0, #0
 8012a84:	f47f adfe 	bne.w	8012684 <__ieee754_pow+0x36c>
 8012a88:	4aa3      	ldr	r2, [pc, #652]	; (8012d18 <__ieee754_pow+0xa00>)
 8012a8a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012a8e:	4293      	cmp	r3, r2
 8012a90:	f340 810a 	ble.w	8012ca8 <__ieee754_pow+0x990>
 8012a94:	151b      	asrs	r3, r3, #20
 8012a96:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8012a9a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8012a9e:	fa4a f303 	asr.w	r3, sl, r3
 8012aa2:	445b      	add	r3, fp
 8012aa4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8012aa8:	4e9c      	ldr	r6, [pc, #624]	; (8012d1c <__ieee754_pow+0xa04>)
 8012aaa:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8012aae:	4116      	asrs	r6, r2
 8012ab0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8012ab4:	2000      	movs	r0, #0
 8012ab6:	ea23 0106 	bic.w	r1, r3, r6
 8012aba:	f1c2 0214 	rsb	r2, r2, #20
 8012abe:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8012ac2:	fa4a fa02 	asr.w	sl, sl, r2
 8012ac6:	f1bb 0f00 	cmp.w	fp, #0
 8012aca:	4602      	mov	r2, r0
 8012acc:	460b      	mov	r3, r1
 8012ace:	4620      	mov	r0, r4
 8012ad0:	4629      	mov	r1, r5
 8012ad2:	bfb8      	it	lt
 8012ad4:	f1ca 0a00 	rsblt	sl, sl, #0
 8012ad8:	f7ed fbfe 	bl	80002d8 <__aeabi_dsub>
 8012adc:	e9cd 0100 	strd	r0, r1, [sp]
 8012ae0:	4642      	mov	r2, r8
 8012ae2:	464b      	mov	r3, r9
 8012ae4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012ae8:	f7ed fbf8 	bl	80002dc <__adddf3>
 8012aec:	2000      	movs	r0, #0
 8012aee:	a378      	add	r3, pc, #480	; (adr r3, 8012cd0 <__ieee754_pow+0x9b8>)
 8012af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012af4:	4604      	mov	r4, r0
 8012af6:	460d      	mov	r5, r1
 8012af8:	f7ed fda6 	bl	8000648 <__aeabi_dmul>
 8012afc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012b00:	4606      	mov	r6, r0
 8012b02:	460f      	mov	r7, r1
 8012b04:	4620      	mov	r0, r4
 8012b06:	4629      	mov	r1, r5
 8012b08:	f7ed fbe6 	bl	80002d8 <__aeabi_dsub>
 8012b0c:	4602      	mov	r2, r0
 8012b0e:	460b      	mov	r3, r1
 8012b10:	4640      	mov	r0, r8
 8012b12:	4649      	mov	r1, r9
 8012b14:	f7ed fbe0 	bl	80002d8 <__aeabi_dsub>
 8012b18:	a36f      	add	r3, pc, #444	; (adr r3, 8012cd8 <__ieee754_pow+0x9c0>)
 8012b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b1e:	f7ed fd93 	bl	8000648 <__aeabi_dmul>
 8012b22:	a36f      	add	r3, pc, #444	; (adr r3, 8012ce0 <__ieee754_pow+0x9c8>)
 8012b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b28:	4680      	mov	r8, r0
 8012b2a:	4689      	mov	r9, r1
 8012b2c:	4620      	mov	r0, r4
 8012b2e:	4629      	mov	r1, r5
 8012b30:	f7ed fd8a 	bl	8000648 <__aeabi_dmul>
 8012b34:	4602      	mov	r2, r0
 8012b36:	460b      	mov	r3, r1
 8012b38:	4640      	mov	r0, r8
 8012b3a:	4649      	mov	r1, r9
 8012b3c:	f7ed fbce 	bl	80002dc <__adddf3>
 8012b40:	4604      	mov	r4, r0
 8012b42:	460d      	mov	r5, r1
 8012b44:	4602      	mov	r2, r0
 8012b46:	460b      	mov	r3, r1
 8012b48:	4630      	mov	r0, r6
 8012b4a:	4639      	mov	r1, r7
 8012b4c:	f7ed fbc6 	bl	80002dc <__adddf3>
 8012b50:	4632      	mov	r2, r6
 8012b52:	463b      	mov	r3, r7
 8012b54:	4680      	mov	r8, r0
 8012b56:	4689      	mov	r9, r1
 8012b58:	f7ed fbbe 	bl	80002d8 <__aeabi_dsub>
 8012b5c:	4602      	mov	r2, r0
 8012b5e:	460b      	mov	r3, r1
 8012b60:	4620      	mov	r0, r4
 8012b62:	4629      	mov	r1, r5
 8012b64:	f7ed fbb8 	bl	80002d8 <__aeabi_dsub>
 8012b68:	4642      	mov	r2, r8
 8012b6a:	4606      	mov	r6, r0
 8012b6c:	460f      	mov	r7, r1
 8012b6e:	464b      	mov	r3, r9
 8012b70:	4640      	mov	r0, r8
 8012b72:	4649      	mov	r1, r9
 8012b74:	f7ed fd68 	bl	8000648 <__aeabi_dmul>
 8012b78:	a35b      	add	r3, pc, #364	; (adr r3, 8012ce8 <__ieee754_pow+0x9d0>)
 8012b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b7e:	4604      	mov	r4, r0
 8012b80:	460d      	mov	r5, r1
 8012b82:	f7ed fd61 	bl	8000648 <__aeabi_dmul>
 8012b86:	a35a      	add	r3, pc, #360	; (adr r3, 8012cf0 <__ieee754_pow+0x9d8>)
 8012b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b8c:	f7ed fba4 	bl	80002d8 <__aeabi_dsub>
 8012b90:	4622      	mov	r2, r4
 8012b92:	462b      	mov	r3, r5
 8012b94:	f7ed fd58 	bl	8000648 <__aeabi_dmul>
 8012b98:	a357      	add	r3, pc, #348	; (adr r3, 8012cf8 <__ieee754_pow+0x9e0>)
 8012b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b9e:	f7ed fb9d 	bl	80002dc <__adddf3>
 8012ba2:	4622      	mov	r2, r4
 8012ba4:	462b      	mov	r3, r5
 8012ba6:	f7ed fd4f 	bl	8000648 <__aeabi_dmul>
 8012baa:	a355      	add	r3, pc, #340	; (adr r3, 8012d00 <__ieee754_pow+0x9e8>)
 8012bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bb0:	f7ed fb92 	bl	80002d8 <__aeabi_dsub>
 8012bb4:	4622      	mov	r2, r4
 8012bb6:	462b      	mov	r3, r5
 8012bb8:	f7ed fd46 	bl	8000648 <__aeabi_dmul>
 8012bbc:	a352      	add	r3, pc, #328	; (adr r3, 8012d08 <__ieee754_pow+0x9f0>)
 8012bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bc2:	f7ed fb8b 	bl	80002dc <__adddf3>
 8012bc6:	4622      	mov	r2, r4
 8012bc8:	462b      	mov	r3, r5
 8012bca:	f7ed fd3d 	bl	8000648 <__aeabi_dmul>
 8012bce:	4602      	mov	r2, r0
 8012bd0:	460b      	mov	r3, r1
 8012bd2:	4640      	mov	r0, r8
 8012bd4:	4649      	mov	r1, r9
 8012bd6:	f7ed fb7f 	bl	80002d8 <__aeabi_dsub>
 8012bda:	4604      	mov	r4, r0
 8012bdc:	460d      	mov	r5, r1
 8012bde:	4602      	mov	r2, r0
 8012be0:	460b      	mov	r3, r1
 8012be2:	4640      	mov	r0, r8
 8012be4:	4649      	mov	r1, r9
 8012be6:	f7ed fd2f 	bl	8000648 <__aeabi_dmul>
 8012bea:	2200      	movs	r2, #0
 8012bec:	e9cd 0100 	strd	r0, r1, [sp]
 8012bf0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012bf4:	4620      	mov	r0, r4
 8012bf6:	4629      	mov	r1, r5
 8012bf8:	f7ed fb6e 	bl	80002d8 <__aeabi_dsub>
 8012bfc:	4602      	mov	r2, r0
 8012bfe:	460b      	mov	r3, r1
 8012c00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012c04:	f7ed fe4a 	bl	800089c <__aeabi_ddiv>
 8012c08:	4632      	mov	r2, r6
 8012c0a:	4604      	mov	r4, r0
 8012c0c:	460d      	mov	r5, r1
 8012c0e:	463b      	mov	r3, r7
 8012c10:	4640      	mov	r0, r8
 8012c12:	4649      	mov	r1, r9
 8012c14:	f7ed fd18 	bl	8000648 <__aeabi_dmul>
 8012c18:	4632      	mov	r2, r6
 8012c1a:	463b      	mov	r3, r7
 8012c1c:	f7ed fb5e 	bl	80002dc <__adddf3>
 8012c20:	4602      	mov	r2, r0
 8012c22:	460b      	mov	r3, r1
 8012c24:	4620      	mov	r0, r4
 8012c26:	4629      	mov	r1, r5
 8012c28:	f7ed fb56 	bl	80002d8 <__aeabi_dsub>
 8012c2c:	4642      	mov	r2, r8
 8012c2e:	464b      	mov	r3, r9
 8012c30:	f7ed fb52 	bl	80002d8 <__aeabi_dsub>
 8012c34:	4602      	mov	r2, r0
 8012c36:	460b      	mov	r3, r1
 8012c38:	2000      	movs	r0, #0
 8012c3a:	4939      	ldr	r1, [pc, #228]	; (8012d20 <__ieee754_pow+0xa08>)
 8012c3c:	f7ed fb4c 	bl	80002d8 <__aeabi_dsub>
 8012c40:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8012c44:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8012c48:	4602      	mov	r2, r0
 8012c4a:	460b      	mov	r3, r1
 8012c4c:	da2f      	bge.n	8012cae <__ieee754_pow+0x996>
 8012c4e:	4650      	mov	r0, sl
 8012c50:	ec43 2b10 	vmov	d0, r2, r3
 8012c54:	f000 f9c0 	bl	8012fd8 <scalbn>
 8012c58:	ec51 0b10 	vmov	r0, r1, d0
 8012c5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012c60:	f7ff bbf1 	b.w	8012446 <__ieee754_pow+0x12e>
 8012c64:	4b2f      	ldr	r3, [pc, #188]	; (8012d24 <__ieee754_pow+0xa0c>)
 8012c66:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8012c6a:	429e      	cmp	r6, r3
 8012c6c:	f77f af0c 	ble.w	8012a88 <__ieee754_pow+0x770>
 8012c70:	4b2d      	ldr	r3, [pc, #180]	; (8012d28 <__ieee754_pow+0xa10>)
 8012c72:	440b      	add	r3, r1
 8012c74:	4303      	orrs	r3, r0
 8012c76:	d00b      	beq.n	8012c90 <__ieee754_pow+0x978>
 8012c78:	a325      	add	r3, pc, #148	; (adr r3, 8012d10 <__ieee754_pow+0x9f8>)
 8012c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012c82:	f7ed fce1 	bl	8000648 <__aeabi_dmul>
 8012c86:	a322      	add	r3, pc, #136	; (adr r3, 8012d10 <__ieee754_pow+0x9f8>)
 8012c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c8c:	f7ff bbdb 	b.w	8012446 <__ieee754_pow+0x12e>
 8012c90:	4622      	mov	r2, r4
 8012c92:	462b      	mov	r3, r5
 8012c94:	f7ed fb20 	bl	80002d8 <__aeabi_dsub>
 8012c98:	4642      	mov	r2, r8
 8012c9a:	464b      	mov	r3, r9
 8012c9c:	f7ed ff5a 	bl	8000b54 <__aeabi_dcmpge>
 8012ca0:	2800      	cmp	r0, #0
 8012ca2:	f43f aef1 	beq.w	8012a88 <__ieee754_pow+0x770>
 8012ca6:	e7e7      	b.n	8012c78 <__ieee754_pow+0x960>
 8012ca8:	f04f 0a00 	mov.w	sl, #0
 8012cac:	e718      	b.n	8012ae0 <__ieee754_pow+0x7c8>
 8012cae:	4621      	mov	r1, r4
 8012cb0:	e7d4      	b.n	8012c5c <__ieee754_pow+0x944>
 8012cb2:	2000      	movs	r0, #0
 8012cb4:	491a      	ldr	r1, [pc, #104]	; (8012d20 <__ieee754_pow+0xa08>)
 8012cb6:	f7ff bb8f 	b.w	80123d8 <__ieee754_pow+0xc0>
 8012cba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012cbe:	f7ff bb8b 	b.w	80123d8 <__ieee754_pow+0xc0>
 8012cc2:	4630      	mov	r0, r6
 8012cc4:	4639      	mov	r1, r7
 8012cc6:	f7ff bb87 	b.w	80123d8 <__ieee754_pow+0xc0>
 8012cca:	4693      	mov	fp, r2
 8012ccc:	f7ff bb98 	b.w	8012400 <__ieee754_pow+0xe8>
 8012cd0:	00000000 	.word	0x00000000
 8012cd4:	3fe62e43 	.word	0x3fe62e43
 8012cd8:	fefa39ef 	.word	0xfefa39ef
 8012cdc:	3fe62e42 	.word	0x3fe62e42
 8012ce0:	0ca86c39 	.word	0x0ca86c39
 8012ce4:	be205c61 	.word	0xbe205c61
 8012ce8:	72bea4d0 	.word	0x72bea4d0
 8012cec:	3e663769 	.word	0x3e663769
 8012cf0:	c5d26bf1 	.word	0xc5d26bf1
 8012cf4:	3ebbbd41 	.word	0x3ebbbd41
 8012cf8:	af25de2c 	.word	0xaf25de2c
 8012cfc:	3f11566a 	.word	0x3f11566a
 8012d00:	16bebd93 	.word	0x16bebd93
 8012d04:	3f66c16c 	.word	0x3f66c16c
 8012d08:	5555553e 	.word	0x5555553e
 8012d0c:	3fc55555 	.word	0x3fc55555
 8012d10:	c2f8f359 	.word	0xc2f8f359
 8012d14:	01a56e1f 	.word	0x01a56e1f
 8012d18:	3fe00000 	.word	0x3fe00000
 8012d1c:	000fffff 	.word	0x000fffff
 8012d20:	3ff00000 	.word	0x3ff00000
 8012d24:	4090cbff 	.word	0x4090cbff
 8012d28:	3f6f3400 	.word	0x3f6f3400
 8012d2c:	652b82fe 	.word	0x652b82fe
 8012d30:	3c971547 	.word	0x3c971547

08012d34 <__ieee754_sqrt>:
 8012d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d38:	4955      	ldr	r1, [pc, #340]	; (8012e90 <__ieee754_sqrt+0x15c>)
 8012d3a:	ec55 4b10 	vmov	r4, r5, d0
 8012d3e:	43a9      	bics	r1, r5
 8012d40:	462b      	mov	r3, r5
 8012d42:	462a      	mov	r2, r5
 8012d44:	d112      	bne.n	8012d6c <__ieee754_sqrt+0x38>
 8012d46:	ee10 2a10 	vmov	r2, s0
 8012d4a:	ee10 0a10 	vmov	r0, s0
 8012d4e:	4629      	mov	r1, r5
 8012d50:	f7ed fc7a 	bl	8000648 <__aeabi_dmul>
 8012d54:	4602      	mov	r2, r0
 8012d56:	460b      	mov	r3, r1
 8012d58:	4620      	mov	r0, r4
 8012d5a:	4629      	mov	r1, r5
 8012d5c:	f7ed fabe 	bl	80002dc <__adddf3>
 8012d60:	4604      	mov	r4, r0
 8012d62:	460d      	mov	r5, r1
 8012d64:	ec45 4b10 	vmov	d0, r4, r5
 8012d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d6c:	2d00      	cmp	r5, #0
 8012d6e:	ee10 0a10 	vmov	r0, s0
 8012d72:	4621      	mov	r1, r4
 8012d74:	dc0f      	bgt.n	8012d96 <__ieee754_sqrt+0x62>
 8012d76:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012d7a:	4330      	orrs	r0, r6
 8012d7c:	d0f2      	beq.n	8012d64 <__ieee754_sqrt+0x30>
 8012d7e:	b155      	cbz	r5, 8012d96 <__ieee754_sqrt+0x62>
 8012d80:	ee10 2a10 	vmov	r2, s0
 8012d84:	4620      	mov	r0, r4
 8012d86:	4629      	mov	r1, r5
 8012d88:	f7ed faa6 	bl	80002d8 <__aeabi_dsub>
 8012d8c:	4602      	mov	r2, r0
 8012d8e:	460b      	mov	r3, r1
 8012d90:	f7ed fd84 	bl	800089c <__aeabi_ddiv>
 8012d94:	e7e4      	b.n	8012d60 <__ieee754_sqrt+0x2c>
 8012d96:	151b      	asrs	r3, r3, #20
 8012d98:	d073      	beq.n	8012e82 <__ieee754_sqrt+0x14e>
 8012d9a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012d9e:	07dd      	lsls	r5, r3, #31
 8012da0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8012da4:	bf48      	it	mi
 8012da6:	0fc8      	lsrmi	r0, r1, #31
 8012da8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8012dac:	bf44      	itt	mi
 8012dae:	0049      	lslmi	r1, r1, #1
 8012db0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8012db4:	2500      	movs	r5, #0
 8012db6:	1058      	asrs	r0, r3, #1
 8012db8:	0fcb      	lsrs	r3, r1, #31
 8012dba:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8012dbe:	0049      	lsls	r1, r1, #1
 8012dc0:	2316      	movs	r3, #22
 8012dc2:	462c      	mov	r4, r5
 8012dc4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8012dc8:	19a7      	adds	r7, r4, r6
 8012dca:	4297      	cmp	r7, r2
 8012dcc:	bfde      	ittt	le
 8012dce:	19bc      	addle	r4, r7, r6
 8012dd0:	1bd2      	suble	r2, r2, r7
 8012dd2:	19ad      	addle	r5, r5, r6
 8012dd4:	0fcf      	lsrs	r7, r1, #31
 8012dd6:	3b01      	subs	r3, #1
 8012dd8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8012ddc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012de0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8012de4:	d1f0      	bne.n	8012dc8 <__ieee754_sqrt+0x94>
 8012de6:	f04f 0c20 	mov.w	ip, #32
 8012dea:	469e      	mov	lr, r3
 8012dec:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8012df0:	42a2      	cmp	r2, r4
 8012df2:	eb06 070e 	add.w	r7, r6, lr
 8012df6:	dc02      	bgt.n	8012dfe <__ieee754_sqrt+0xca>
 8012df8:	d112      	bne.n	8012e20 <__ieee754_sqrt+0xec>
 8012dfa:	428f      	cmp	r7, r1
 8012dfc:	d810      	bhi.n	8012e20 <__ieee754_sqrt+0xec>
 8012dfe:	2f00      	cmp	r7, #0
 8012e00:	eb07 0e06 	add.w	lr, r7, r6
 8012e04:	da42      	bge.n	8012e8c <__ieee754_sqrt+0x158>
 8012e06:	f1be 0f00 	cmp.w	lr, #0
 8012e0a:	db3f      	blt.n	8012e8c <__ieee754_sqrt+0x158>
 8012e0c:	f104 0801 	add.w	r8, r4, #1
 8012e10:	1b12      	subs	r2, r2, r4
 8012e12:	428f      	cmp	r7, r1
 8012e14:	bf88      	it	hi
 8012e16:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8012e1a:	1bc9      	subs	r1, r1, r7
 8012e1c:	4433      	add	r3, r6
 8012e1e:	4644      	mov	r4, r8
 8012e20:	0052      	lsls	r2, r2, #1
 8012e22:	f1bc 0c01 	subs.w	ip, ip, #1
 8012e26:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8012e2a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8012e2e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012e32:	d1dd      	bne.n	8012df0 <__ieee754_sqrt+0xbc>
 8012e34:	430a      	orrs	r2, r1
 8012e36:	d006      	beq.n	8012e46 <__ieee754_sqrt+0x112>
 8012e38:	1c5c      	adds	r4, r3, #1
 8012e3a:	bf13      	iteet	ne
 8012e3c:	3301      	addne	r3, #1
 8012e3e:	3501      	addeq	r5, #1
 8012e40:	4663      	moveq	r3, ip
 8012e42:	f023 0301 	bicne.w	r3, r3, #1
 8012e46:	106a      	asrs	r2, r5, #1
 8012e48:	085b      	lsrs	r3, r3, #1
 8012e4a:	07e9      	lsls	r1, r5, #31
 8012e4c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8012e50:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8012e54:	bf48      	it	mi
 8012e56:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8012e5a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8012e5e:	461c      	mov	r4, r3
 8012e60:	e780      	b.n	8012d64 <__ieee754_sqrt+0x30>
 8012e62:	0aca      	lsrs	r2, r1, #11
 8012e64:	3815      	subs	r0, #21
 8012e66:	0549      	lsls	r1, r1, #21
 8012e68:	2a00      	cmp	r2, #0
 8012e6a:	d0fa      	beq.n	8012e62 <__ieee754_sqrt+0x12e>
 8012e6c:	02d6      	lsls	r6, r2, #11
 8012e6e:	d50a      	bpl.n	8012e86 <__ieee754_sqrt+0x152>
 8012e70:	f1c3 0420 	rsb	r4, r3, #32
 8012e74:	fa21 f404 	lsr.w	r4, r1, r4
 8012e78:	1e5d      	subs	r5, r3, #1
 8012e7a:	4099      	lsls	r1, r3
 8012e7c:	4322      	orrs	r2, r4
 8012e7e:	1b43      	subs	r3, r0, r5
 8012e80:	e78b      	b.n	8012d9a <__ieee754_sqrt+0x66>
 8012e82:	4618      	mov	r0, r3
 8012e84:	e7f0      	b.n	8012e68 <__ieee754_sqrt+0x134>
 8012e86:	0052      	lsls	r2, r2, #1
 8012e88:	3301      	adds	r3, #1
 8012e8a:	e7ef      	b.n	8012e6c <__ieee754_sqrt+0x138>
 8012e8c:	46a0      	mov	r8, r4
 8012e8e:	e7bf      	b.n	8012e10 <__ieee754_sqrt+0xdc>
 8012e90:	7ff00000 	.word	0x7ff00000

08012e94 <fabs>:
 8012e94:	ec51 0b10 	vmov	r0, r1, d0
 8012e98:	ee10 2a10 	vmov	r2, s0
 8012e9c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012ea0:	ec43 2b10 	vmov	d0, r2, r3
 8012ea4:	4770      	bx	lr

08012ea6 <finite>:
 8012ea6:	ee10 3a90 	vmov	r3, s1
 8012eaa:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8012eae:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8012eb2:	0fc0      	lsrs	r0, r0, #31
 8012eb4:	4770      	bx	lr

08012eb6 <matherr>:
 8012eb6:	2000      	movs	r0, #0
 8012eb8:	4770      	bx	lr
 8012eba:	0000      	movs	r0, r0
 8012ebc:	0000      	movs	r0, r0
	...

08012ec0 <nan>:
 8012ec0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012ec8 <nan+0x8>
 8012ec4:	4770      	bx	lr
 8012ec6:	bf00      	nop
 8012ec8:	00000000 	.word	0x00000000
 8012ecc:	7ff80000 	.word	0x7ff80000

08012ed0 <rint>:
 8012ed0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012ed2:	ec51 0b10 	vmov	r0, r1, d0
 8012ed6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012eda:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8012ede:	2e13      	cmp	r6, #19
 8012ee0:	460b      	mov	r3, r1
 8012ee2:	ee10 4a10 	vmov	r4, s0
 8012ee6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8012eea:	dc56      	bgt.n	8012f9a <rint+0xca>
 8012eec:	2e00      	cmp	r6, #0
 8012eee:	da2b      	bge.n	8012f48 <rint+0x78>
 8012ef0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8012ef4:	4302      	orrs	r2, r0
 8012ef6:	d023      	beq.n	8012f40 <rint+0x70>
 8012ef8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8012efc:	4302      	orrs	r2, r0
 8012efe:	4254      	negs	r4, r2
 8012f00:	4314      	orrs	r4, r2
 8012f02:	0c4b      	lsrs	r3, r1, #17
 8012f04:	0b24      	lsrs	r4, r4, #12
 8012f06:	045b      	lsls	r3, r3, #17
 8012f08:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8012f0c:	ea44 0103 	orr.w	r1, r4, r3
 8012f10:	460b      	mov	r3, r1
 8012f12:	492f      	ldr	r1, [pc, #188]	; (8012fd0 <rint+0x100>)
 8012f14:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8012f18:	e9d1 6700 	ldrd	r6, r7, [r1]
 8012f1c:	4602      	mov	r2, r0
 8012f1e:	4639      	mov	r1, r7
 8012f20:	4630      	mov	r0, r6
 8012f22:	f7ed f9db 	bl	80002dc <__adddf3>
 8012f26:	e9cd 0100 	strd	r0, r1, [sp]
 8012f2a:	463b      	mov	r3, r7
 8012f2c:	4632      	mov	r2, r6
 8012f2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012f32:	f7ed f9d1 	bl	80002d8 <__aeabi_dsub>
 8012f36:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012f3a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8012f3e:	4639      	mov	r1, r7
 8012f40:	ec41 0b10 	vmov	d0, r0, r1
 8012f44:	b003      	add	sp, #12
 8012f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f48:	4a22      	ldr	r2, [pc, #136]	; (8012fd4 <rint+0x104>)
 8012f4a:	4132      	asrs	r2, r6
 8012f4c:	ea01 0702 	and.w	r7, r1, r2
 8012f50:	4307      	orrs	r7, r0
 8012f52:	d0f5      	beq.n	8012f40 <rint+0x70>
 8012f54:	0852      	lsrs	r2, r2, #1
 8012f56:	4011      	ands	r1, r2
 8012f58:	430c      	orrs	r4, r1
 8012f5a:	d00b      	beq.n	8012f74 <rint+0xa4>
 8012f5c:	ea23 0202 	bic.w	r2, r3, r2
 8012f60:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012f64:	2e13      	cmp	r6, #19
 8012f66:	fa43 f306 	asr.w	r3, r3, r6
 8012f6a:	bf0c      	ite	eq
 8012f6c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8012f70:	2400      	movne	r4, #0
 8012f72:	4313      	orrs	r3, r2
 8012f74:	4916      	ldr	r1, [pc, #88]	; (8012fd0 <rint+0x100>)
 8012f76:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8012f7a:	4622      	mov	r2, r4
 8012f7c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012f80:	4620      	mov	r0, r4
 8012f82:	4629      	mov	r1, r5
 8012f84:	f7ed f9aa 	bl	80002dc <__adddf3>
 8012f88:	e9cd 0100 	strd	r0, r1, [sp]
 8012f8c:	4622      	mov	r2, r4
 8012f8e:	462b      	mov	r3, r5
 8012f90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012f94:	f7ed f9a0 	bl	80002d8 <__aeabi_dsub>
 8012f98:	e7d2      	b.n	8012f40 <rint+0x70>
 8012f9a:	2e33      	cmp	r6, #51	; 0x33
 8012f9c:	dd07      	ble.n	8012fae <rint+0xde>
 8012f9e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012fa2:	d1cd      	bne.n	8012f40 <rint+0x70>
 8012fa4:	ee10 2a10 	vmov	r2, s0
 8012fa8:	f7ed f998 	bl	80002dc <__adddf3>
 8012fac:	e7c8      	b.n	8012f40 <rint+0x70>
 8012fae:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8012fb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012fb6:	40f2      	lsrs	r2, r6
 8012fb8:	4210      	tst	r0, r2
 8012fba:	d0c1      	beq.n	8012f40 <rint+0x70>
 8012fbc:	0852      	lsrs	r2, r2, #1
 8012fbe:	4210      	tst	r0, r2
 8012fc0:	bf1f      	itttt	ne
 8012fc2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8012fc6:	ea20 0202 	bicne.w	r2, r0, r2
 8012fca:	4134      	asrne	r4, r6
 8012fcc:	4314      	orrne	r4, r2
 8012fce:	e7d1      	b.n	8012f74 <rint+0xa4>
 8012fd0:	080147d0 	.word	0x080147d0
 8012fd4:	000fffff 	.word	0x000fffff

08012fd8 <scalbn>:
 8012fd8:	b570      	push	{r4, r5, r6, lr}
 8012fda:	ec55 4b10 	vmov	r4, r5, d0
 8012fde:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012fe2:	4606      	mov	r6, r0
 8012fe4:	462b      	mov	r3, r5
 8012fe6:	b9aa      	cbnz	r2, 8013014 <scalbn+0x3c>
 8012fe8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012fec:	4323      	orrs	r3, r4
 8012fee:	d03b      	beq.n	8013068 <scalbn+0x90>
 8012ff0:	4b31      	ldr	r3, [pc, #196]	; (80130b8 <scalbn+0xe0>)
 8012ff2:	4629      	mov	r1, r5
 8012ff4:	2200      	movs	r2, #0
 8012ff6:	ee10 0a10 	vmov	r0, s0
 8012ffa:	f7ed fb25 	bl	8000648 <__aeabi_dmul>
 8012ffe:	4b2f      	ldr	r3, [pc, #188]	; (80130bc <scalbn+0xe4>)
 8013000:	429e      	cmp	r6, r3
 8013002:	4604      	mov	r4, r0
 8013004:	460d      	mov	r5, r1
 8013006:	da12      	bge.n	801302e <scalbn+0x56>
 8013008:	a327      	add	r3, pc, #156	; (adr r3, 80130a8 <scalbn+0xd0>)
 801300a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801300e:	f7ed fb1b 	bl	8000648 <__aeabi_dmul>
 8013012:	e009      	b.n	8013028 <scalbn+0x50>
 8013014:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8013018:	428a      	cmp	r2, r1
 801301a:	d10c      	bne.n	8013036 <scalbn+0x5e>
 801301c:	ee10 2a10 	vmov	r2, s0
 8013020:	4620      	mov	r0, r4
 8013022:	4629      	mov	r1, r5
 8013024:	f7ed f95a 	bl	80002dc <__adddf3>
 8013028:	4604      	mov	r4, r0
 801302a:	460d      	mov	r5, r1
 801302c:	e01c      	b.n	8013068 <scalbn+0x90>
 801302e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013032:	460b      	mov	r3, r1
 8013034:	3a36      	subs	r2, #54	; 0x36
 8013036:	4432      	add	r2, r6
 8013038:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801303c:	428a      	cmp	r2, r1
 801303e:	dd0b      	ble.n	8013058 <scalbn+0x80>
 8013040:	ec45 4b11 	vmov	d1, r4, r5
 8013044:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80130b0 <scalbn+0xd8>
 8013048:	f000 f9f0 	bl	801342c <copysign>
 801304c:	a318      	add	r3, pc, #96	; (adr r3, 80130b0 <scalbn+0xd8>)
 801304e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013052:	ec51 0b10 	vmov	r0, r1, d0
 8013056:	e7da      	b.n	801300e <scalbn+0x36>
 8013058:	2a00      	cmp	r2, #0
 801305a:	dd08      	ble.n	801306e <scalbn+0x96>
 801305c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013060:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013064:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013068:	ec45 4b10 	vmov	d0, r4, r5
 801306c:	bd70      	pop	{r4, r5, r6, pc}
 801306e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013072:	da0d      	bge.n	8013090 <scalbn+0xb8>
 8013074:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013078:	429e      	cmp	r6, r3
 801307a:	ec45 4b11 	vmov	d1, r4, r5
 801307e:	dce1      	bgt.n	8013044 <scalbn+0x6c>
 8013080:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80130a8 <scalbn+0xd0>
 8013084:	f000 f9d2 	bl	801342c <copysign>
 8013088:	a307      	add	r3, pc, #28	; (adr r3, 80130a8 <scalbn+0xd0>)
 801308a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801308e:	e7e0      	b.n	8013052 <scalbn+0x7a>
 8013090:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013094:	3236      	adds	r2, #54	; 0x36
 8013096:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801309a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801309e:	4620      	mov	r0, r4
 80130a0:	4629      	mov	r1, r5
 80130a2:	2200      	movs	r2, #0
 80130a4:	4b06      	ldr	r3, [pc, #24]	; (80130c0 <scalbn+0xe8>)
 80130a6:	e7b2      	b.n	801300e <scalbn+0x36>
 80130a8:	c2f8f359 	.word	0xc2f8f359
 80130ac:	01a56e1f 	.word	0x01a56e1f
 80130b0:	8800759c 	.word	0x8800759c
 80130b4:	7e37e43c 	.word	0x7e37e43c
 80130b8:	43500000 	.word	0x43500000
 80130bc:	ffff3cb0 	.word	0xffff3cb0
 80130c0:	3c900000 	.word	0x3c900000
 80130c4:	00000000 	.word	0x00000000

080130c8 <__ieee754_log>:
 80130c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130cc:	ec51 0b10 	vmov	r0, r1, d0
 80130d0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80130d4:	b087      	sub	sp, #28
 80130d6:	460d      	mov	r5, r1
 80130d8:	da27      	bge.n	801312a <__ieee754_log+0x62>
 80130da:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80130de:	4303      	orrs	r3, r0
 80130e0:	ee10 2a10 	vmov	r2, s0
 80130e4:	d10a      	bne.n	80130fc <__ieee754_log+0x34>
 80130e6:	49cc      	ldr	r1, [pc, #816]	; (8013418 <__ieee754_log+0x350>)
 80130e8:	2200      	movs	r2, #0
 80130ea:	2300      	movs	r3, #0
 80130ec:	2000      	movs	r0, #0
 80130ee:	f7ed fbd5 	bl	800089c <__aeabi_ddiv>
 80130f2:	ec41 0b10 	vmov	d0, r0, r1
 80130f6:	b007      	add	sp, #28
 80130f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130fc:	2900      	cmp	r1, #0
 80130fe:	da05      	bge.n	801310c <__ieee754_log+0x44>
 8013100:	460b      	mov	r3, r1
 8013102:	f7ed f8e9 	bl	80002d8 <__aeabi_dsub>
 8013106:	2200      	movs	r2, #0
 8013108:	2300      	movs	r3, #0
 801310a:	e7f0      	b.n	80130ee <__ieee754_log+0x26>
 801310c:	4bc3      	ldr	r3, [pc, #780]	; (801341c <__ieee754_log+0x354>)
 801310e:	2200      	movs	r2, #0
 8013110:	f7ed fa9a 	bl	8000648 <__aeabi_dmul>
 8013114:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8013118:	460d      	mov	r5, r1
 801311a:	4ac1      	ldr	r2, [pc, #772]	; (8013420 <__ieee754_log+0x358>)
 801311c:	4295      	cmp	r5, r2
 801311e:	dd06      	ble.n	801312e <__ieee754_log+0x66>
 8013120:	4602      	mov	r2, r0
 8013122:	460b      	mov	r3, r1
 8013124:	f7ed f8da 	bl	80002dc <__adddf3>
 8013128:	e7e3      	b.n	80130f2 <__ieee754_log+0x2a>
 801312a:	2300      	movs	r3, #0
 801312c:	e7f5      	b.n	801311a <__ieee754_log+0x52>
 801312e:	152c      	asrs	r4, r5, #20
 8013130:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8013134:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8013138:	441c      	add	r4, r3
 801313a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 801313e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8013142:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013146:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 801314a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 801314e:	ea42 0105 	orr.w	r1, r2, r5
 8013152:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8013156:	2200      	movs	r2, #0
 8013158:	4bb2      	ldr	r3, [pc, #712]	; (8013424 <__ieee754_log+0x35c>)
 801315a:	f7ed f8bd 	bl	80002d8 <__aeabi_dsub>
 801315e:	1cab      	adds	r3, r5, #2
 8013160:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013164:	2b02      	cmp	r3, #2
 8013166:	4682      	mov	sl, r0
 8013168:	468b      	mov	fp, r1
 801316a:	f04f 0200 	mov.w	r2, #0
 801316e:	dc53      	bgt.n	8013218 <__ieee754_log+0x150>
 8013170:	2300      	movs	r3, #0
 8013172:	f7ed fcd1 	bl	8000b18 <__aeabi_dcmpeq>
 8013176:	b1d0      	cbz	r0, 80131ae <__ieee754_log+0xe6>
 8013178:	2c00      	cmp	r4, #0
 801317a:	f000 8120 	beq.w	80133be <__ieee754_log+0x2f6>
 801317e:	4620      	mov	r0, r4
 8013180:	f7ed f9f8 	bl	8000574 <__aeabi_i2d>
 8013184:	a390      	add	r3, pc, #576	; (adr r3, 80133c8 <__ieee754_log+0x300>)
 8013186:	e9d3 2300 	ldrd	r2, r3, [r3]
 801318a:	4606      	mov	r6, r0
 801318c:	460f      	mov	r7, r1
 801318e:	f7ed fa5b 	bl	8000648 <__aeabi_dmul>
 8013192:	a38f      	add	r3, pc, #572	; (adr r3, 80133d0 <__ieee754_log+0x308>)
 8013194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013198:	4604      	mov	r4, r0
 801319a:	460d      	mov	r5, r1
 801319c:	4630      	mov	r0, r6
 801319e:	4639      	mov	r1, r7
 80131a0:	f7ed fa52 	bl	8000648 <__aeabi_dmul>
 80131a4:	4602      	mov	r2, r0
 80131a6:	460b      	mov	r3, r1
 80131a8:	4620      	mov	r0, r4
 80131aa:	4629      	mov	r1, r5
 80131ac:	e7ba      	b.n	8013124 <__ieee754_log+0x5c>
 80131ae:	a38a      	add	r3, pc, #552	; (adr r3, 80133d8 <__ieee754_log+0x310>)
 80131b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131b4:	4650      	mov	r0, sl
 80131b6:	4659      	mov	r1, fp
 80131b8:	f7ed fa46 	bl	8000648 <__aeabi_dmul>
 80131bc:	4602      	mov	r2, r0
 80131be:	460b      	mov	r3, r1
 80131c0:	2000      	movs	r0, #0
 80131c2:	4999      	ldr	r1, [pc, #612]	; (8013428 <__ieee754_log+0x360>)
 80131c4:	f7ed f888 	bl	80002d8 <__aeabi_dsub>
 80131c8:	4652      	mov	r2, sl
 80131ca:	4606      	mov	r6, r0
 80131cc:	460f      	mov	r7, r1
 80131ce:	465b      	mov	r3, fp
 80131d0:	4650      	mov	r0, sl
 80131d2:	4659      	mov	r1, fp
 80131d4:	f7ed fa38 	bl	8000648 <__aeabi_dmul>
 80131d8:	4602      	mov	r2, r0
 80131da:	460b      	mov	r3, r1
 80131dc:	4630      	mov	r0, r6
 80131de:	4639      	mov	r1, r7
 80131e0:	f7ed fa32 	bl	8000648 <__aeabi_dmul>
 80131e4:	4606      	mov	r6, r0
 80131e6:	460f      	mov	r7, r1
 80131e8:	b914      	cbnz	r4, 80131f0 <__ieee754_log+0x128>
 80131ea:	4632      	mov	r2, r6
 80131ec:	463b      	mov	r3, r7
 80131ee:	e0a0      	b.n	8013332 <__ieee754_log+0x26a>
 80131f0:	4620      	mov	r0, r4
 80131f2:	f7ed f9bf 	bl	8000574 <__aeabi_i2d>
 80131f6:	a374      	add	r3, pc, #464	; (adr r3, 80133c8 <__ieee754_log+0x300>)
 80131f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131fc:	4680      	mov	r8, r0
 80131fe:	4689      	mov	r9, r1
 8013200:	f7ed fa22 	bl	8000648 <__aeabi_dmul>
 8013204:	a372      	add	r3, pc, #456	; (adr r3, 80133d0 <__ieee754_log+0x308>)
 8013206:	e9d3 2300 	ldrd	r2, r3, [r3]
 801320a:	4604      	mov	r4, r0
 801320c:	460d      	mov	r5, r1
 801320e:	4640      	mov	r0, r8
 8013210:	4649      	mov	r1, r9
 8013212:	f7ed fa19 	bl	8000648 <__aeabi_dmul>
 8013216:	e0a5      	b.n	8013364 <__ieee754_log+0x29c>
 8013218:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801321c:	f7ed f85e 	bl	80002dc <__adddf3>
 8013220:	4602      	mov	r2, r0
 8013222:	460b      	mov	r3, r1
 8013224:	4650      	mov	r0, sl
 8013226:	4659      	mov	r1, fp
 8013228:	f7ed fb38 	bl	800089c <__aeabi_ddiv>
 801322c:	e9cd 0100 	strd	r0, r1, [sp]
 8013230:	4620      	mov	r0, r4
 8013232:	f7ed f99f 	bl	8000574 <__aeabi_i2d>
 8013236:	e9dd 2300 	ldrd	r2, r3, [sp]
 801323a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801323e:	4610      	mov	r0, r2
 8013240:	4619      	mov	r1, r3
 8013242:	f7ed fa01 	bl	8000648 <__aeabi_dmul>
 8013246:	4602      	mov	r2, r0
 8013248:	460b      	mov	r3, r1
 801324a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801324e:	f7ed f9fb 	bl	8000648 <__aeabi_dmul>
 8013252:	a363      	add	r3, pc, #396	; (adr r3, 80133e0 <__ieee754_log+0x318>)
 8013254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013258:	4680      	mov	r8, r0
 801325a:	4689      	mov	r9, r1
 801325c:	f7ed f9f4 	bl	8000648 <__aeabi_dmul>
 8013260:	a361      	add	r3, pc, #388	; (adr r3, 80133e8 <__ieee754_log+0x320>)
 8013262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013266:	f7ed f839 	bl	80002dc <__adddf3>
 801326a:	4642      	mov	r2, r8
 801326c:	464b      	mov	r3, r9
 801326e:	f7ed f9eb 	bl	8000648 <__aeabi_dmul>
 8013272:	a35f      	add	r3, pc, #380	; (adr r3, 80133f0 <__ieee754_log+0x328>)
 8013274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013278:	f7ed f830 	bl	80002dc <__adddf3>
 801327c:	4642      	mov	r2, r8
 801327e:	464b      	mov	r3, r9
 8013280:	f7ed f9e2 	bl	8000648 <__aeabi_dmul>
 8013284:	a35c      	add	r3, pc, #368	; (adr r3, 80133f8 <__ieee754_log+0x330>)
 8013286:	e9d3 2300 	ldrd	r2, r3, [r3]
 801328a:	f7ed f827 	bl	80002dc <__adddf3>
 801328e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013292:	f7ed f9d9 	bl	8000648 <__aeabi_dmul>
 8013296:	a35a      	add	r3, pc, #360	; (adr r3, 8013400 <__ieee754_log+0x338>)
 8013298:	e9d3 2300 	ldrd	r2, r3, [r3]
 801329c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80132a0:	4640      	mov	r0, r8
 80132a2:	4649      	mov	r1, r9
 80132a4:	f7ed f9d0 	bl	8000648 <__aeabi_dmul>
 80132a8:	a357      	add	r3, pc, #348	; (adr r3, 8013408 <__ieee754_log+0x340>)
 80132aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132ae:	f7ed f815 	bl	80002dc <__adddf3>
 80132b2:	4642      	mov	r2, r8
 80132b4:	464b      	mov	r3, r9
 80132b6:	f7ed f9c7 	bl	8000648 <__aeabi_dmul>
 80132ba:	a355      	add	r3, pc, #340	; (adr r3, 8013410 <__ieee754_log+0x348>)
 80132bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132c0:	f7ed f80c 	bl	80002dc <__adddf3>
 80132c4:	4642      	mov	r2, r8
 80132c6:	464b      	mov	r3, r9
 80132c8:	f7ed f9be 	bl	8000648 <__aeabi_dmul>
 80132cc:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 80132d0:	4602      	mov	r2, r0
 80132d2:	460b      	mov	r3, r1
 80132d4:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80132d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80132dc:	f7ec fffe 	bl	80002dc <__adddf3>
 80132e0:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 80132e4:	3551      	adds	r5, #81	; 0x51
 80132e6:	4335      	orrs	r5, r6
 80132e8:	2d00      	cmp	r5, #0
 80132ea:	4680      	mov	r8, r0
 80132ec:	4689      	mov	r9, r1
 80132ee:	dd48      	ble.n	8013382 <__ieee754_log+0x2ba>
 80132f0:	2200      	movs	r2, #0
 80132f2:	4b4d      	ldr	r3, [pc, #308]	; (8013428 <__ieee754_log+0x360>)
 80132f4:	4650      	mov	r0, sl
 80132f6:	4659      	mov	r1, fp
 80132f8:	f7ed f9a6 	bl	8000648 <__aeabi_dmul>
 80132fc:	4652      	mov	r2, sl
 80132fe:	465b      	mov	r3, fp
 8013300:	f7ed f9a2 	bl	8000648 <__aeabi_dmul>
 8013304:	4602      	mov	r2, r0
 8013306:	460b      	mov	r3, r1
 8013308:	4606      	mov	r6, r0
 801330a:	460f      	mov	r7, r1
 801330c:	4640      	mov	r0, r8
 801330e:	4649      	mov	r1, r9
 8013310:	f7ec ffe4 	bl	80002dc <__adddf3>
 8013314:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013318:	f7ed f996 	bl	8000648 <__aeabi_dmul>
 801331c:	4680      	mov	r8, r0
 801331e:	4689      	mov	r9, r1
 8013320:	b964      	cbnz	r4, 801333c <__ieee754_log+0x274>
 8013322:	4602      	mov	r2, r0
 8013324:	460b      	mov	r3, r1
 8013326:	4630      	mov	r0, r6
 8013328:	4639      	mov	r1, r7
 801332a:	f7ec ffd5 	bl	80002d8 <__aeabi_dsub>
 801332e:	4602      	mov	r2, r0
 8013330:	460b      	mov	r3, r1
 8013332:	4650      	mov	r0, sl
 8013334:	4659      	mov	r1, fp
 8013336:	f7ec ffcf 	bl	80002d8 <__aeabi_dsub>
 801333a:	e6da      	b.n	80130f2 <__ieee754_log+0x2a>
 801333c:	a322      	add	r3, pc, #136	; (adr r3, 80133c8 <__ieee754_log+0x300>)
 801333e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013342:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013346:	f7ed f97f 	bl	8000648 <__aeabi_dmul>
 801334a:	a321      	add	r3, pc, #132	; (adr r3, 80133d0 <__ieee754_log+0x308>)
 801334c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013350:	4604      	mov	r4, r0
 8013352:	460d      	mov	r5, r1
 8013354:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013358:	f7ed f976 	bl	8000648 <__aeabi_dmul>
 801335c:	4642      	mov	r2, r8
 801335e:	464b      	mov	r3, r9
 8013360:	f7ec ffbc 	bl	80002dc <__adddf3>
 8013364:	4602      	mov	r2, r0
 8013366:	460b      	mov	r3, r1
 8013368:	4630      	mov	r0, r6
 801336a:	4639      	mov	r1, r7
 801336c:	f7ec ffb4 	bl	80002d8 <__aeabi_dsub>
 8013370:	4652      	mov	r2, sl
 8013372:	465b      	mov	r3, fp
 8013374:	f7ec ffb0 	bl	80002d8 <__aeabi_dsub>
 8013378:	4602      	mov	r2, r0
 801337a:	460b      	mov	r3, r1
 801337c:	4620      	mov	r0, r4
 801337e:	4629      	mov	r1, r5
 8013380:	e7d9      	b.n	8013336 <__ieee754_log+0x26e>
 8013382:	4602      	mov	r2, r0
 8013384:	460b      	mov	r3, r1
 8013386:	4650      	mov	r0, sl
 8013388:	4659      	mov	r1, fp
 801338a:	f7ec ffa5 	bl	80002d8 <__aeabi_dsub>
 801338e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013392:	f7ed f959 	bl	8000648 <__aeabi_dmul>
 8013396:	4606      	mov	r6, r0
 8013398:	460f      	mov	r7, r1
 801339a:	2c00      	cmp	r4, #0
 801339c:	f43f af25 	beq.w	80131ea <__ieee754_log+0x122>
 80133a0:	a309      	add	r3, pc, #36	; (adr r3, 80133c8 <__ieee754_log+0x300>)
 80133a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80133aa:	f7ed f94d 	bl	8000648 <__aeabi_dmul>
 80133ae:	a308      	add	r3, pc, #32	; (adr r3, 80133d0 <__ieee754_log+0x308>)
 80133b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133b4:	4604      	mov	r4, r0
 80133b6:	460d      	mov	r5, r1
 80133b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80133bc:	e729      	b.n	8013212 <__ieee754_log+0x14a>
 80133be:	2000      	movs	r0, #0
 80133c0:	2100      	movs	r1, #0
 80133c2:	e696      	b.n	80130f2 <__ieee754_log+0x2a>
 80133c4:	f3af 8000 	nop.w
 80133c8:	fee00000 	.word	0xfee00000
 80133cc:	3fe62e42 	.word	0x3fe62e42
 80133d0:	35793c76 	.word	0x35793c76
 80133d4:	3dea39ef 	.word	0x3dea39ef
 80133d8:	55555555 	.word	0x55555555
 80133dc:	3fd55555 	.word	0x3fd55555
 80133e0:	df3e5244 	.word	0xdf3e5244
 80133e4:	3fc2f112 	.word	0x3fc2f112
 80133e8:	96cb03de 	.word	0x96cb03de
 80133ec:	3fc74664 	.word	0x3fc74664
 80133f0:	94229359 	.word	0x94229359
 80133f4:	3fd24924 	.word	0x3fd24924
 80133f8:	55555593 	.word	0x55555593
 80133fc:	3fe55555 	.word	0x3fe55555
 8013400:	d078c69f 	.word	0xd078c69f
 8013404:	3fc39a09 	.word	0x3fc39a09
 8013408:	1d8e78af 	.word	0x1d8e78af
 801340c:	3fcc71c5 	.word	0x3fcc71c5
 8013410:	9997fa04 	.word	0x9997fa04
 8013414:	3fd99999 	.word	0x3fd99999
 8013418:	c3500000 	.word	0xc3500000
 801341c:	43500000 	.word	0x43500000
 8013420:	7fefffff 	.word	0x7fefffff
 8013424:	3ff00000 	.word	0x3ff00000
 8013428:	3fe00000 	.word	0x3fe00000

0801342c <copysign>:
 801342c:	ec51 0b10 	vmov	r0, r1, d0
 8013430:	ee11 0a90 	vmov	r0, s3
 8013434:	ee10 2a10 	vmov	r2, s0
 8013438:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801343c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8013440:	ea41 0300 	orr.w	r3, r1, r0
 8013444:	ec43 2b10 	vmov	d0, r2, r3
 8013448:	4770      	bx	lr
	...

0801344c <_init>:
 801344c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801344e:	bf00      	nop
 8013450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013452:	bc08      	pop	{r3}
 8013454:	469e      	mov	lr, r3
 8013456:	4770      	bx	lr

08013458 <_fini>:
 8013458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801345a:	bf00      	nop
 801345c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801345e:	bc08      	pop	{r3}
 8013460:	469e      	mov	lr, r3
 8013462:	4770      	bx	lr
