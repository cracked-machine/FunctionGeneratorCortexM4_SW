
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012c9c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001498  08012e80  08012e80  00022e80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014318  08014318  00031e80  2**0
                  CONTENTS
  4 .ARM          00000000  08014318  08014318  00031e80  2**0
                  CONTENTS
  5 .preinit_array 00000000  08014318  08014318  00031e80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014318  08014318  00024318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801431c  0801431c  0002431c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001e80  20000000  08014320  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ad4  20001e80  080161a0  00031e80  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002954  080161a0  00032954  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031e80  2**0
                  CONTENTS, READONLY
 12 .debug_info   00045c12  00000000  00000000  00031eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000798a  00000000  00000000  00077ac2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002260  00000000  00000000  0007f450  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001e18  00000000  00000000  000816b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003533b  00000000  00000000  000834c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002eec5  00000000  00000000  000b8803  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001267be  00000000  00000000  000e76c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0020de86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000096fc  00000000  00000000  0020df04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001e80 	.word	0x20001e80
 80001fc:	00000000 	.word	0x00000000
 8000200:	08012e64 	.word	0x08012e64

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001e84 	.word	0x20001e84
 800021c:	08012e64 	.word	0x08012e64

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <BiasMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMenu(eBiasMenu_Status pMenu)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d000      	beq.n	8000cea <BiasMenu_DrawMenu+0x12>
		case ENABLE_BIAS_MENU:
			BiasMenu_DrawMainMenu();
			break;

		default:
			break;
 8000ce8:	e002      	b.n	8000cf0 <BiasMenu_DrawMenu+0x18>
			BiasMenu_DrawMainMenu();
 8000cea:	f000 f805 	bl	8000cf8 <BiasMenu_DrawMainMenu>
			break;
 8000cee:	bf00      	nop

	}
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <BiasMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMainMenu()
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->BIAS", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8000cfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d02:	9301      	str	r3, [sp, #4]
 8000d04:	2302      	movs	r3, #2
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2300      	movs	r3, #0
 8000d0a:	220a      	movs	r2, #10
 8000d0c:	210a      	movs	r1, #10
 8000d0e:	4804      	ldr	r0, [pc, #16]	; (8000d20 <BiasMenu_DrawMainMenu+0x28>)
 8000d10:	f00d fa9c 	bl	800e24c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8000d14:	f000 f8f0 	bl	8000ef8 <DM_DisplayFormattedOutput>

}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	08012e80 	.word	0x08012e80

08000d24 <DM_Init>:
 *	@param None
 *	@retval None
 *
 */
void DM_Init()
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 8000d28:	f00d fad1 	bl	800e2ce <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f00d ff27 	bl	800eb80 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 8000d32:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d36:	f00d fd09 	bl	800e74c <ILI9341_Fill_Screen>

}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <DM_PostInit>:
 *	@param None
 *	@retval None
 *
 */
void DM_PostInit()
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("Initialising", 10, 10, NORMAL_TEXT_FGCOLOUR, 1, NORMAL_TEXT_BGCOLOUR);
 8000d46:	2300      	movs	r3, #0
 8000d48:	9301      	str	r3, [sp, #4]
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000d52:	220a      	movs	r2, #10
 8000d54:	210a      	movs	r1, #10
 8000d56:	4807      	ldr	r0, [pc, #28]	; (8000d74 <DM_PostInit+0x34>)
 8000d58:	f00d fa78 	bl	800e24c <ILI9341_Draw_Text>
	HAL_Delay(500);
 8000d5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d60:	f007 fa0c 	bl	800817c <HAL_Delay>

	DM_RefreshScreen();
 8000d64:	f000 fb88 	bl	8001478 <DM_RefreshScreen>

	#ifdef SWV_DEBUG_ENABLED
		  printf("Init Completed\n");
 8000d68:	4803      	ldr	r0, [pc, #12]	; (8000d78 <DM_PostInit+0x38>)
 8000d6a:	f00e fe0b 	bl	800f984 <puts>
	#endif


}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	08012e8c 	.word	0x08012e8c
 8000d78:	08012e9c 	.word	0x08012e9c

08000d7c <DM_UpdateDisplay>:
 *	@param None
 *	@retval None
 *
 */
void DM_UpdateDisplay()
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af02      	add	r7, sp, #8
	/*
	 * 	Top level menu
	 */
	if(ToplevelMenu_getStatus())
 8000d82:	f003 ffbb 	bl	8004cfc <ToplevelMenu_getStatus>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d018      	beq.n	8000dbe <DM_UpdateDisplay+0x42>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("FuncMenu_DrawMenu\n");
 8000d8c:	4854      	ldr	r0, [pc, #336]	; (8000ee0 <DM_UpdateDisplay+0x164>)
 8000d8e:	f00e fdf9 	bl	800f984 <puts>
		#endif

		switch(ToplevelMenu_getStatus())
 8000d92:	f003 ffb3 	bl	8004cfc <ToplevelMenu_getStatus>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d008      	beq.n	8000dae <DM_UpdateDisplay+0x32>
 8000d9c:	2b03      	cmp	r3, #3
 8000d9e:	d00a      	beq.n	8000db6 <DM_UpdateDisplay+0x3a>
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d000      	beq.n	8000da6 <DM_UpdateDisplay+0x2a>

				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
				break;

			default:
				break;
 8000da4:	e089      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_MAIN_MENU);
 8000da6:	2001      	movs	r0, #1
 8000da8:	f002 fe50 	bl	8003a4c <ToplevelMenu_DrawMenu>
				break;
 8000dac:	e085      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8000dae:	2002      	movs	r0, #2
 8000db0:	f002 fe4c 	bl	8003a4c <ToplevelMenu_DrawMenu>
				break;
 8000db4:	e081      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
 8000db6:	2003      	movs	r0, #3
 8000db8:	f002 fe48 	bl	8003a4c <ToplevelMenu_DrawMenu>
				break;
 8000dbc:	e07d      	b.n	8000eba <DM_UpdateDisplay+0x13e>
	}

	/*
	 * 	Function menus
	 */
	else if(FuncMenu_getStatus())		//  != DISABLE_FUNC_MENU
 8000dbe:	f003 fd35 	bl	800482c <FuncMenu_getStatus>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d018      	beq.n	8000dfa <DM_UpdateDisplay+0x7e>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("FuncMenu_DrawMenu\n");
 8000dc8:	4845      	ldr	r0, [pc, #276]	; (8000ee0 <DM_UpdateDisplay+0x164>)
 8000dca:	f00e fddb 	bl	800f984 <puts>
		#endif

		switch(FuncMenu_getStatus())
 8000dce:	f003 fd2d 	bl	800482c <FuncMenu_getStatus>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d008      	beq.n	8000dea <DM_UpdateDisplay+0x6e>
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	d00a      	beq.n	8000df2 <DM_UpdateDisplay+0x76>
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d000      	beq.n	8000de2 <DM_UpdateDisplay+0x66>
				FuncMenu_DrawMenu(ENABLE_FUNC_SYNC_MENU);

				break;

			default:
				break;
 8000de0:	e06b      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				FuncMenu_DrawMenu(ENABLE_FUNC_MAIN_MENU);
 8000de2:	2001      	movs	r0, #1
 8000de4:	f002 f8f6 	bl	8002fd4 <FuncMenu_DrawMenu>
				break;
 8000de8:	e067      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				FuncMenu_DrawMenu(ENABLE_FUNC_SIGNAL_MENU);
 8000dea:	2002      	movs	r0, #2
 8000dec:	f002 f8f2 	bl	8002fd4 <FuncMenu_DrawMenu>
				break;
 8000df0:	e063      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				FuncMenu_DrawMenu(ENABLE_FUNC_SYNC_MENU);
 8000df2:	2003      	movs	r0, #3
 8000df4:	f002 f8ee 	bl	8002fd4 <FuncMenu_DrawMenu>
				break;
 8000df8:	e05f      	b.n	8000eba <DM_UpdateDisplay+0x13e>

	}
	/*
	 * 	Gain menus
	 */
	else if(GainMenu_getStatus())		//  != DISABLE_GAIN_MENU
 8000dfa:	f003 fe61 	bl	8004ac0 <GainMenu_getStatus>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d018      	beq.n	8000e36 <DM_UpdateDisplay+0xba>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("GainMenu_DrawMenu\n");
 8000e04:	4837      	ldr	r0, [pc, #220]	; (8000ee4 <DM_UpdateDisplay+0x168>)
 8000e06:	f00e fdbd 	bl	800f984 <puts>
		#endif

		switch(GainMenu_getStatus())
 8000e0a:	f003 fe59 	bl	8004ac0 <GainMenu_getStatus>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d008      	beq.n	8000e26 <DM_UpdateDisplay+0xaa>
 8000e14:	2b03      	cmp	r3, #3
 8000e16:	d00a      	beq.n	8000e2e <DM_UpdateDisplay+0xb2>
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d000      	beq.n	8000e1e <DM_UpdateDisplay+0xa2>
				GainMenu_DrawMenu(ENABLE_GAIN_SYNC_MENU);

				break;

			default:
				break;
 8000e1c:	e04d      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				GainMenu_DrawMenu(ENABLE_GAIN_MAIN_MENU);
 8000e1e:	2001      	movs	r0, #1
 8000e20:	f002 fd86 	bl	8003930 <GainMenu_DrawMenu>
				break;
 8000e24:	e049      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				GainMenu_DrawMenu(ENABLE_GAIN_SIGNAL_MENU);
 8000e26:	2002      	movs	r0, #2
 8000e28:	f002 fd82 	bl	8003930 <GainMenu_DrawMenu>
				break;
 8000e2c:	e045      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				GainMenu_DrawMenu(ENABLE_GAIN_SYNC_MENU);
 8000e2e:	2003      	movs	r0, #3
 8000e30:	f002 fd7e 	bl	8003930 <GainMenu_DrawMenu>
				break;
 8000e34:	e041      	b.n	8000eba <DM_UpdateDisplay+0x13e>
	}

	/*
	 * 	 Frequency menus
	 */
	else if(FreqMenu_getStatus())		//  != DISABLE_FREQ_MENU
 8000e36:	f003 fced 	bl	8004814 <FreqMenu_getStatus>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d023      	beq.n	8000e88 <DM_UpdateDisplay+0x10c>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("FreqMenu_DrawMenu\n");
 8000e40:	4829      	ldr	r0, [pc, #164]	; (8000ee8 <DM_UpdateDisplay+0x16c>)
 8000e42:	f00e fd9f 	bl	800f984 <puts>
		#endif

		//ILI9341_Draw_Text("FREQUENCY MENU", 	30, 10, WHITE, 3, BLACK);

		switch(FreqMenu_getStatus())
 8000e46:	f003 fce5 	bl	8004814 <FreqMenu_getStatus>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	2b03      	cmp	r3, #3
 8000e50:	d832      	bhi.n	8000eb8 <DM_UpdateDisplay+0x13c>
 8000e52:	a201      	add	r2, pc, #4	; (adr r2, 8000e58 <DM_UpdateDisplay+0xdc>)
 8000e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e58:	08000e69 	.word	0x08000e69
 8000e5c:	08000e71 	.word	0x08000e71
 8000e60:	08000e79 	.word	0x08000e79
 8000e64:	08000e81 	.word	0x08000e81
		{
			case ENABLE_FREQ_MAIN_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_MAIN_MENU);
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f000 fb5d 	bl	8001528 <FreqMenu_DrawMenu>

				break;
 8000e6e:	e024      	b.n	8000eba <DM_UpdateDisplay+0x13e>

			case ENABLE_FREQ_PRESET_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_PRESET_MENU);
 8000e70:	2002      	movs	r0, #2
 8000e72:	f000 fb59 	bl	8001528 <FreqMenu_DrawMenu>
				break;
 8000e76:	e020      	b.n	8000eba <DM_UpdateDisplay+0x13e>

			case ENABLE_FREQ_ADJUST_MENU:


				FreqMenu_DrawMenu(ENABLE_FREQ_ADJUST_MENU);
 8000e78:	2003      	movs	r0, #3
 8000e7a:	f000 fb55 	bl	8001528 <FreqMenu_DrawMenu>

				break;
 8000e7e:	e01c      	b.n	8000eba <DM_UpdateDisplay+0x13e>

			case ENABLE_FREQ_SWEEP_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_SWEEP_MENU);
 8000e80:	2004      	movs	r0, #4
 8000e82:	f000 fb51 	bl	8001528 <FreqMenu_DrawMenu>
				break;
 8000e86:	e018      	b.n	8000eba <DM_UpdateDisplay+0x13e>
	}

	/*
	 * 	Bias menu
	 */
	else if(BiasMenu_getStatus())		//  != DISABLE_BIAS_MENU
 8000e88:	f002 fe9a 	bl	8003bc0 <BiasMenu_getStatus>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d006      	beq.n	8000ea0 <DM_UpdateDisplay+0x124>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("BiasMenu_DrawMenu\n");
 8000e92:	4816      	ldr	r0, [pc, #88]	; (8000eec <DM_UpdateDisplay+0x170>)
 8000e94:	f00e fd76 	bl	800f984 <puts>
		#endif

		BiasMenu_DrawMenu(ENABLE_BIAS_MENU);
 8000e98:	2001      	movs	r0, #1
 8000e9a:	f7ff ff1d 	bl	8000cd8 <BiasMenu_DrawMenu>
 8000e9e:	e00c      	b.n	8000eba <DM_UpdateDisplay+0x13e>
	/*
	 * 		Error
	 */
	else
	{
		ILI9341_Draw_Text("DisplayManager: no menu status set!", 10, 50, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000ea0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000ea4:	9301      	str	r3, [sp, #4]
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	2300      	movs	r3, #0
 8000eac:	2232      	movs	r2, #50	; 0x32
 8000eae:	210a      	movs	r1, #10
 8000eb0:	480f      	ldr	r0, [pc, #60]	; (8000ef0 <DM_UpdateDisplay+0x174>)
 8000eb2:	f00d f9cb 	bl	800e24c <ILI9341_Draw_Text>
 8000eb6:	e000      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				break;
 8000eb8:	bf00      	nop
		char encoder_value[50] = "";
		snprintf(encoder_value, sizeof(encoder_value), "SWEEP_TIMER->ARR: %5lu - ENCODER: %5lu", SWEEP_TIMER->ARR, ENCODER_TIMER->CNT);
		ILI9341_Draw_Text(encoder_value, 10, 190, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
	#endif //ENCODER_DEBUG

	if(*ErrorDebugMsg)
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <DM_UpdateDisplay+0x178>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d00a      	beq.n	8000ed8 <DM_UpdateDisplay+0x15c>
		ILI9341_Draw_Text(ErrorDebugMsg, 10, 190, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000ec2:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000ec6:	9301      	str	r3, [sp, #4]
 8000ec8:	2301      	movs	r3, #1
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	2300      	movs	r3, #0
 8000ece:	22be      	movs	r2, #190	; 0xbe
 8000ed0:	210a      	movs	r1, #10
 8000ed2:	4808      	ldr	r0, [pc, #32]	; (8000ef4 <DM_UpdateDisplay+0x178>)
 8000ed4:	f00d f9ba 	bl	800e24c <ILI9341_Draw_Text>

}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	08012eac 	.word	0x08012eac
 8000ee4:	08012ec0 	.word	0x08012ec0
 8000ee8:	08012ed4 	.word	0x08012ed4
 8000eec:	08012ee8 	.word	0x08012ee8
 8000ef0:	08012efc 	.word	0x08012efc
 8000ef4:	20001e9c 	.word	0x20001e9c

08000ef8 <DM_DisplayFormattedOutput>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayFormattedOutput()
{
 8000ef8:	b590      	push	{r4, r7, lr}
 8000efa:	b09f      	sub	sp, #124	; 0x7c
 8000efc:	af04      	add	r7, sp, #16
	uint8_t text_size = 2;
 8000efe:	2302      	movs	r3, #2
 8000f00:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	char out_hertz[15] = "";
 8000f04:	2300      	movs	r3, #0
 8000f06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f08:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t out_hertz_x = 140;
 8000f16:	238c      	movs	r3, #140	; 0x8c
 8000f18:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	uint8_t out_hertz_y = 40;
 8000f1c:	2328      	movs	r3, #40	; 0x28
 8000f1e:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

	char out_vpp[18] = "";
 8000f22:	2300      	movs	r3, #0
 8000f24:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	819a      	strh	r2, [r3, #12]
	uint8_t out_vpp_x = 175;
 8000f34:	23af      	movs	r3, #175	; 0xaf
 8000f36:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	uint8_t out_vpp_y = 70;
 8000f3a:	2346      	movs	r3, #70	; 0x46
 8000f3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	char out_decibels[20] = "";
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	f107 0318 	add.w	r3, r7, #24
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
	uint8_t out_decibels_x = 138;
 8000f52:	238a      	movs	r3, #138	; 0x8a
 8000f54:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t out_decibels_y = 100;
 8000f58:	2364      	movs	r3, #100	; 0x64
 8000f5a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d


	float volts_per_thou = 0.00075;
 8000f5e:	4bc4      	ldr	r3, [pc, #784]	; (8001270 <DM_DisplayFormattedOutput+0x378>)
 8000f60:	65bb      	str	r3, [r7, #88]	; 0x58
	char out_dcvolts[12] = "";
 8000f62:	2300      	movs	r3, #0
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	f107 030c 	add.w	r3, r7, #12
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
	uint8_t out_dcvolts_x = 161;
 8000f70:	23a1      	movs	r3, #161	; 0xa1
 8000f72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t out_dcvolts_y = 130;
 8000f76:	2382      	movs	r3, #130	; 0x82
 8000f78:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

	ILI9341_Draw_Text(" FREQ   ....", 3, out_hertz_y , NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000f7c:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8000f80:	b299      	uxth	r1, r3
 8000f82:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	2200      	movs	r2, #0
 8000f8a:	9201      	str	r2, [sp, #4]
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000f92:	460a      	mov	r2, r1
 8000f94:	2103      	movs	r1, #3
 8000f96:	48b7      	ldr	r0, [pc, #732]	; (8001274 <DM_DisplayFormattedOutput+0x37c>)
 8000f98:	f00d f958 	bl	800e24c <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" VPP    ....", 3, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000f9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000fa0:	b299      	uxth	r1, r3
 8000fa2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	2200      	movs	r2, #0
 8000faa:	9201      	str	r2, [sp, #4]
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000fb2:	460a      	mov	r2, r1
 8000fb4:	2103      	movs	r1, #3
 8000fb6:	48b0      	ldr	r0, [pc, #704]	; (8001278 <DM_DisplayFormattedOutput+0x380>)
 8000fb8:	f00d f948 	bl	800e24c <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" GAIN   ....", 3, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000fbc:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8000fc0:	b299      	uxth	r1, r3
 8000fc2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	2200      	movs	r2, #0
 8000fca:	9201      	str	r2, [sp, #4]
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000fd2:	460a      	mov	r2, r1
 8000fd4:	2103      	movs	r1, #3
 8000fd6:	48a9      	ldr	r0, [pc, #676]	; (800127c <DM_DisplayFormattedOutput+0x384>)
 8000fd8:	f00d f938 	bl	800e24c <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" OFFSET ....", 3, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000fdc:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000fe0:	b299      	uxth	r1, r3
 8000fe2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	2200      	movs	r2, #0
 8000fea:	9201      	str	r2, [sp, #4]
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000ff2:	460a      	mov	r2, r1
 8000ff4:	2103      	movs	r1, #3
 8000ff6:	48a2      	ldr	r0, [pc, #648]	; (8001280 <DM_DisplayFormattedOutput+0x388>)
 8000ff8:	f00d f928 	bl	800e24c <ILI9341_Draw_Text>

	// display output in hertz
	snprintf(out_hertz, sizeof(out_hertz), " %4.2f   Hz ", SM_GetOutputInHertz());
 8000ffc:	f005 f94e 	bl	800629c <SM_GetOutputInHertz>
 8001000:	ee10 3a10 	vmov	r3, s0
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff fac7 	bl	8000598 <__aeabi_f2d>
 800100a:	4603      	mov	r3, r0
 800100c:	460c      	mov	r4, r1
 800100e:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001012:	e9cd 3400 	strd	r3, r4, [sp]
 8001016:	4a9b      	ldr	r2, [pc, #620]	; (8001284 <DM_DisplayFormattedOutput+0x38c>)
 8001018:	210f      	movs	r1, #15
 800101a:	f00e fcbb 	bl	800f994 <sniprintf>
	ILI9341_Draw_Text(out_hertz, out_hertz_x, out_hertz_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800101e:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8001022:	b299      	uxth	r1, r3
 8001024:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8001028:	b29c      	uxth	r4, r3
 800102a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800102e:	b29b      	uxth	r3, r3
 8001030:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001034:	2200      	movs	r2, #0
 8001036:	9201      	str	r2, [sp, #4]
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800103e:	4622      	mov	r2, r4
 8001040:	f00d f904 	bl	800e24c <ILI9341_Draw_Text>

	// display output in volts peak-to-peak and decibels
	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 8001044:	2000      	movs	r0, #0
 8001046:	f004 ff6d 	bl	8005f24 <SM_GetOutputChannel>
 800104a:	4603      	mov	r3, r0
 800104c:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8001050:	653b      	str	r3, [r7, #80]	; 0x50

	if(pTmpVppPreset)
 8001052:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001054:	2b00      	cmp	r3, #0
 8001056:	d01d      	beq.n	8001094 <DM_DisplayFormattedOutput+0x19c>
	{
		snprintf(out_vpp, sizeof(out_vpp), " %2.2f   V ", pTmpVppPreset->amp_value);
 8001058:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fa9b 	bl	8000598 <__aeabi_f2d>
 8001062:	4603      	mov	r3, r0
 8001064:	460c      	mov	r4, r1
 8001066:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800106a:	e9cd 3400 	strd	r3, r4, [sp]
 800106e:	4a86      	ldr	r2, [pc, #536]	; (8001288 <DM_DisplayFormattedOutput+0x390>)
 8001070:	2112      	movs	r1, #18
 8001072:	f00e fc8f 	bl	800f994 <sniprintf>
		snprintf(out_decibels, sizeof(out_decibels), " %+7.2f ", pTmpVppPreset->gain_decibels);
 8001076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fa8c 	bl	8000598 <__aeabi_f2d>
 8001080:	4603      	mov	r3, r0
 8001082:	460c      	mov	r4, r1
 8001084:	f107 0014 	add.w	r0, r7, #20
 8001088:	e9cd 3400 	strd	r3, r4, [sp]
 800108c:	4a7f      	ldr	r2, [pc, #508]	; (800128c <DM_DisplayFormattedOutput+0x394>)
 800108e:	2114      	movs	r1, #20
 8001090:	f00e fc80 	bl	800f994 <sniprintf>
	}
	ILI9341_Draw_Text(out_vpp, out_vpp_x, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001094:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001098:	b299      	uxth	r1, r3
 800109a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800109e:	b29c      	uxth	r4, r3
 80010a0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80010aa:	2200      	movs	r2, #0
 80010ac:	9201      	str	r2, [sp, #4]
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80010b4:	4622      	mov	r2, r4
 80010b6:	f00d f8c9 	bl	800e24c <ILI9341_Draw_Text>
	ILI9341_Draw_Text(out_decibels, out_decibels_x, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80010ba:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80010be:	b299      	uxth	r1, r3
 80010c0:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80010c4:	b29c      	uxth	r4, r3
 80010c6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	f107 0014 	add.w	r0, r7, #20
 80010d0:	2200      	movs	r2, #0
 80010d2:	9201      	str	r2, [sp, #4]
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80010da:	4622      	mov	r2, r4
 80010dc:	f00d f8b6 	bl	800e24c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("dBmV", out_decibels_x + 128, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80010e0:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	3380      	adds	r3, #128	; 0x80
 80010e8:	b299      	uxth	r1, r3
 80010ea:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80010ee:	b298      	uxth	r0, r3
 80010f0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	2200      	movs	r2, #0
 80010f8:	9201      	str	r2, [sp, #4]
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001100:	4602      	mov	r2, r0
 8001102:	4863      	ldr	r0, [pc, #396]	; (8001290 <DM_DisplayFormattedOutput+0x398>)
 8001104:	f00d f8a2 	bl	800e24c <ILI9341_Draw_Text>


	// display output bias in +/- Volts
	float dc_volts;
	(BO_GetOutputBias() == 0) ? (dc_volts = 0) : (dc_volts = volts_per_thou * (float)BO_GetOutputBias());
 8001108:	f004 f862 	bl	80051d0 <BO_GetOutputBias>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d103      	bne.n	800111a <DM_DisplayFormattedOutput+0x222>
 8001112:	f04f 0300 	mov.w	r3, #0
 8001116:	667b      	str	r3, [r7, #100]	; 0x64
 8001118:	e00b      	b.n	8001132 <DM_DisplayFormattedOutput+0x23a>
 800111a:	f004 f859 	bl	80051d0 <BO_GetOutputBias>
 800111e:	ee07 0a90 	vmov	s15, r0
 8001122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001126:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800112a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800112e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

	snprintf(out_dcvolts, sizeof(out_dcvolts), "%05.2f   v ", dc_volts);
 8001132:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001134:	f7ff fa30 	bl	8000598 <__aeabi_f2d>
 8001138:	4603      	mov	r3, r0
 800113a:	460c      	mov	r4, r1
 800113c:	f107 0008 	add.w	r0, r7, #8
 8001140:	e9cd 3400 	strd	r3, r4, [sp]
 8001144:	4a53      	ldr	r2, [pc, #332]	; (8001294 <DM_DisplayFormattedOutput+0x39c>)
 8001146:	210c      	movs	r1, #12
 8001148:	f00e fc24 	bl	800f994 <sniprintf>
	if(BO_GetBiasPolarity())
 800114c:	f003 ffa6 	bl	800509c <BO_GetBiasPolarity>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d022      	beq.n	800119c <DM_DisplayFormattedOutput+0x2a4>
	{
		char symbol[3] = "+\0";
 8001156:	4a50      	ldr	r2, [pc, #320]	; (8001298 <DM_DisplayFormattedOutput+0x3a0>)
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	6812      	ldr	r2, [r2, #0]
 800115c:	4611      	mov	r1, r2
 800115e:	8019      	strh	r1, [r3, #0]
 8001160:	3302      	adds	r3, #2
 8001162:	0c12      	lsrs	r2, r2, #16
 8001164:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001166:	f107 0208 	add.w	r2, r7, #8
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	4611      	mov	r1, r2
 800116e:	4618      	mov	r0, r3
 8001170:	f00e fc44 	bl	800f9fc <strcat>
 8001174:	4604      	mov	r4, r0
 8001176:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800117a:	b299      	uxth	r1, r3
 800117c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001180:	b298      	uxth	r0, r3
 8001182:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001186:	b29b      	uxth	r3, r3
 8001188:	2200      	movs	r2, #0
 800118a:	9201      	str	r2, [sp, #4]
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001192:	4602      	mov	r2, r0
 8001194:	4620      	mov	r0, r4
 8001196:	f00d f859 	bl	800e24c <ILI9341_Draw_Text>
 800119a:	e021      	b.n	80011e0 <DM_DisplayFormattedOutput+0x2e8>
	}
	else
	{
		char symbol[3] = "-\0";
 800119c:	4a3f      	ldr	r2, [pc, #252]	; (800129c <DM_DisplayFormattedOutput+0x3a4>)
 800119e:	463b      	mov	r3, r7
 80011a0:	6812      	ldr	r2, [r2, #0]
 80011a2:	4611      	mov	r1, r2
 80011a4:	8019      	strh	r1, [r3, #0]
 80011a6:	3302      	adds	r3, #2
 80011a8:	0c12      	lsrs	r2, r2, #16
 80011aa:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80011ac:	f107 0208 	add.w	r2, r7, #8
 80011b0:	463b      	mov	r3, r7
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f00e fc21 	bl	800f9fc <strcat>
 80011ba:	4604      	mov	r4, r0
 80011bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80011c0:	b299      	uxth	r1, r3
 80011c2:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80011c6:	b298      	uxth	r0, r3
 80011c8:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	2200      	movs	r2, #0
 80011d0:	9201      	str	r2, [sp, #4]
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80011d8:	4602      	mov	r2, r0
 80011da:	4620      	mov	r0, r4
 80011dc:	f00d f836 	bl	800e24c <ILI9341_Draw_Text>
	}

	ILI9341_Draw_Text(" OUT:", 3, 170, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80011e0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	2200      	movs	r2, #0
 80011e8:	9201      	str	r2, [sp, #4]
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80011f0:	22aa      	movs	r2, #170	; 0xaa
 80011f2:	2103      	movs	r1, #3
 80011f4:	482a      	ldr	r0, [pc, #168]	; (80012a0 <DM_DisplayFormattedOutput+0x3a8>)
 80011f6:	f00d f829 	bl	800e24c <ILI9341_Draw_Text>
	eOutput_mode signal_output_func = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 80011fa:	2000      	movs	r0, #0
 80011fc:	f004 fe92 	bl	8005f24 <SM_GetOutputChannel>
 8001200:	4603      	mov	r3, r0
 8001202:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	switch(signal_output_func)
 800120c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001210:	2b06      	cmp	r3, #6
 8001212:	f200 8091 	bhi.w	8001338 <DM_DisplayFormattedOutput+0x440>
 8001216:	a201      	add	r2, pc, #4	; (adr r2, 800121c <DM_DisplayFormattedOutput+0x324>)
 8001218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800121c:	08001239 	.word	0x08001239
 8001220:	08001255 	.word	0x08001255
 8001224:	080012ad 	.word	0x080012ad
 8001228:	080012c9 	.word	0x080012c9
 800122c:	080012e5 	.word	0x080012e5
 8001230:	08001301 	.word	0x08001301
 8001234:	0800131d 	.word	0x0800131d
	{
		case SINE_FUNC_MODE:

			ILI9341_Draw_Wave(80, 140, 3, SIGNAL_OUTPUT_ICON, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 8001238:	233c      	movs	r3, #60	; 0x3c
 800123a:	9302      	str	r3, [sp, #8]
 800123c:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <DM_DisplayFormattedOutput+0x3ac>)
 800123e:	9301      	str	r3, [sp, #4]
 8001240:	2364      	movs	r3, #100	; 0x64
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001248:	2203      	movs	r2, #3
 800124a:	218c      	movs	r1, #140	; 0x8c
 800124c:	2050      	movs	r0, #80	; 0x50
 800124e:	f00c fe59 	bl	800df04 <ILI9341_Draw_Wave>
			break;
 8001252:	e071      	b.n	8001338 <DM_DisplayFormattedOutput+0x440>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 8001254:	233c      	movs	r3, #60	; 0x3c
 8001256:	9302      	str	r3, [sp, #8]
 8001258:	4b13      	ldr	r3, [pc, #76]	; (80012a8 <DM_DisplayFormattedOutput+0x3b0>)
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	23c8      	movs	r3, #200	; 0xc8
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001264:	2203      	movs	r2, #3
 8001266:	21a0      	movs	r1, #160	; 0xa0
 8001268:	2050      	movs	r0, #80	; 0x50
 800126a:	f00c fe4b 	bl	800df04 <ILI9341_Draw_Wave>
			break;
 800126e:	e063      	b.n	8001338 <DM_DisplayFormattedOutput+0x440>
 8001270:	3a449ba6 	.word	0x3a449ba6
 8001274:	08012f20 	.word	0x08012f20
 8001278:	08012f30 	.word	0x08012f30
 800127c:	08012f40 	.word	0x08012f40
 8001280:	08012f50 	.word	0x08012f50
 8001284:	08012f60 	.word	0x08012f60
 8001288:	08012f70 	.word	0x08012f70
 800128c:	08012f7c 	.word	0x08012f7c
 8001290:	08012f88 	.word	0x08012f88
 8001294:	08012f90 	.word	0x08012f90
 8001298:	08012fb0 	.word	0x08012fb0
 800129c:	08012fb4 	.word	0x08012fb4
 80012a0:	08012f9c 	.word	0x08012f9c
 80012a4:	20000e9c 	.word	0x20000e9c
 80012a8:	20000f8c 	.word	0x20000f8c
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 80012ac:	233c      	movs	r3, #60	; 0x3c
 80012ae:	9302      	str	r3, [sp, #8]
 80012b0:	4b6a      	ldr	r3, [pc, #424]	; (800145c <DM_DisplayFormattedOutput+0x564>)
 80012b2:	9301      	str	r3, [sp, #4]
 80012b4:	23c8      	movs	r3, #200	; 0xc8
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	f240 23fd 	movw	r3, #765	; 0x2fd
 80012bc:	2203      	movs	r2, #3
 80012be:	21a0      	movs	r1, #160	; 0xa0
 80012c0:	2050      	movs	r0, #80	; 0x50
 80012c2:	f00c fe1f 	bl	800df04 <ILI9341_Draw_Wave>
			break;
 80012c6:	e037      	b.n	8001338 <DM_DisplayFormattedOutput+0x440>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 80012c8:	233c      	movs	r3, #60	; 0x3c
 80012ca:	9302      	str	r3, [sp, #8]
 80012cc:	4b64      	ldr	r3, [pc, #400]	; (8001460 <DM_DisplayFormattedOutput+0x568>)
 80012ce:	9301      	str	r3, [sp, #4]
 80012d0:	23c8      	movs	r3, #200	; 0xc8
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	f240 23fd 	movw	r3, #765	; 0x2fd
 80012d8:	2203      	movs	r2, #3
 80012da:	21a0      	movs	r1, #160	; 0xa0
 80012dc:	2050      	movs	r0, #80	; 0x50
 80012de:	f00c fe11 	bl	800df04 <ILI9341_Draw_Wave>
			break;
 80012e2:	e029      	b.n	8001338 <DM_DisplayFormattedOutput+0x440>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 80012e4:	233c      	movs	r3, #60	; 0x3c
 80012e6:	9302      	str	r3, [sp, #8]
 80012e8:	4b5e      	ldr	r3, [pc, #376]	; (8001464 <DM_DisplayFormattedOutput+0x56c>)
 80012ea:	9301      	str	r3, [sp, #4]
 80012ec:	23c8      	movs	r3, #200	; 0xc8
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	f240 23fd 	movw	r3, #765	; 0x2fd
 80012f4:	2203      	movs	r2, #3
 80012f6:	21a0      	movs	r1, #160	; 0xa0
 80012f8:	2050      	movs	r0, #80	; 0x50
 80012fa:	f00c fe03 	bl	800df04 <ILI9341_Draw_Wave>
			break;
 80012fe:	e01b      	b.n	8001338 <DM_DisplayFormattedOutput+0x440>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001300:	233c      	movs	r3, #60	; 0x3c
 8001302:	9302      	str	r3, [sp, #8]
 8001304:	4b57      	ldr	r3, [pc, #348]	; (8001464 <DM_DisplayFormattedOutput+0x56c>)
 8001306:	9301      	str	r3, [sp, #4]
 8001308:	23c8      	movs	r3, #200	; 0xc8
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001310:	2203      	movs	r2, #3
 8001312:	21a0      	movs	r1, #160	; 0xa0
 8001314:	2050      	movs	r0, #80	; 0x50
 8001316:	f00c fdf5 	bl	800df04 <ILI9341_Draw_Wave>
			break;
 800131a:	e00d      	b.n	8001338 <DM_DisplayFormattedOutput+0x440>
		case PWM_FUNC_MODE:
			ILI9341_Draw_Text("PWM", 80, 170, SIGNAL_OUTPUT_ICON, text_size, NORMAL_TEXT_BGCOLOUR);
 800131c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001320:	b29b      	uxth	r3, r3
 8001322:	2200      	movs	r2, #0
 8001324:	9201      	str	r2, [sp, #4]
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	f240 23fd 	movw	r3, #765	; 0x2fd
 800132c:	22aa      	movs	r2, #170	; 0xaa
 800132e:	2150      	movs	r1, #80	; 0x50
 8001330:	484d      	ldr	r0, [pc, #308]	; (8001468 <DM_DisplayFormattedOutput+0x570>)
 8001332:	f00c ff8b 	bl	800e24c <ILI9341_Draw_Text>
			break;
 8001336:	bf00      	nop
	}

	ILI9341_Draw_Text("AUX:", 180, 170, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001338:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800133c:	b29b      	uxth	r3, r3
 800133e:	2200      	movs	r2, #0
 8001340:	9201      	str	r2, [sp, #4]
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001348:	22aa      	movs	r2, #170	; 0xaa
 800134a:	21b4      	movs	r1, #180	; 0xb4
 800134c:	4847      	ldr	r0, [pc, #284]	; (800146c <DM_DisplayFormattedOutput+0x574>)
 800134e:	f00c ff7d 	bl	800e24c <ILI9341_Draw_Text>
	eOutput_mode sync_output_func = SM_GetOutputChannel(SYNC_CHANNEL)->func_profile->func;
 8001352:	2001      	movs	r0, #1
 8001354:	f004 fde6 	bl	8005f24 <SM_GetOutputChannel>
 8001358:	4603      	mov	r3, r0
 800135a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	switch(sync_output_func)
 8001364:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001368:	2b06      	cmp	r3, #6
 800136a:	d873      	bhi.n	8001454 <DM_DisplayFormattedOutput+0x55c>
 800136c:	a201      	add	r2, pc, #4	; (adr r2, 8001374 <DM_DisplayFormattedOutput+0x47c>)
 800136e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001372:	bf00      	nop
 8001374:	08001391 	.word	0x08001391
 8001378:	080013ad 	.word	0x080013ad
 800137c:	080013c9 	.word	0x080013c9
 8001380:	080013e5 	.word	0x080013e5
 8001384:	08001401 	.word	0x08001401
 8001388:	0800141d 	.word	0x0800141d
 800138c:	08001439 	.word	0x08001439
	{
		case SINE_FUNC_MODE:

			ILI9341_Draw_Wave(245, 140, 3, SYNC_OUTPUT_ICON, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 8001390:	233c      	movs	r3, #60	; 0x3c
 8001392:	9302      	str	r3, [sp, #8]
 8001394:	4b36      	ldr	r3, [pc, #216]	; (8001470 <DM_DisplayFormattedOutput+0x578>)
 8001396:	9301      	str	r3, [sp, #4]
 8001398:	2364      	movs	r3, #100	; 0x64
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013a0:	2203      	movs	r2, #3
 80013a2:	218c      	movs	r1, #140	; 0x8c
 80013a4:	20f5      	movs	r0, #245	; 0xf5
 80013a6:	f00c fdad 	bl	800df04 <ILI9341_Draw_Wave>
			break;
 80013aa:	e053      	b.n	8001454 <DM_DisplayFormattedOutput+0x55c>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, SYNC_OUTPUT_ICON, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 80013ac:	233c      	movs	r3, #60	; 0x3c
 80013ae:	9302      	str	r3, [sp, #8]
 80013b0:	4b30      	ldr	r3, [pc, #192]	; (8001474 <DM_DisplayFormattedOutput+0x57c>)
 80013b2:	9301      	str	r3, [sp, #4]
 80013b4:	23c8      	movs	r3, #200	; 0xc8
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013bc:	2203      	movs	r2, #3
 80013be:	21a0      	movs	r1, #160	; 0xa0
 80013c0:	20f5      	movs	r0, #245	; 0xf5
 80013c2:	f00c fd9f 	bl	800df04 <ILI9341_Draw_Wave>
			break;
 80013c6:	e045      	b.n	8001454 <DM_DisplayFormattedOutput+0x55c>
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, SYNC_OUTPUT_ICON, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 80013c8:	233c      	movs	r3, #60	; 0x3c
 80013ca:	9302      	str	r3, [sp, #8]
 80013cc:	4b23      	ldr	r3, [pc, #140]	; (800145c <DM_DisplayFormattedOutput+0x564>)
 80013ce:	9301      	str	r3, [sp, #4]
 80013d0:	23c8      	movs	r3, #200	; 0xc8
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013d8:	2203      	movs	r2, #3
 80013da:	21a0      	movs	r1, #160	; 0xa0
 80013dc:	20f5      	movs	r0, #245	; 0xf5
 80013de:	f00c fd91 	bl	800df04 <ILI9341_Draw_Wave>
			break;
 80013e2:	e037      	b.n	8001454 <DM_DisplayFormattedOutput+0x55c>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, SYNC_OUTPUT_ICON, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 80013e4:	233c      	movs	r3, #60	; 0x3c
 80013e6:	9302      	str	r3, [sp, #8]
 80013e8:	4b1d      	ldr	r3, [pc, #116]	; (8001460 <DM_DisplayFormattedOutput+0x568>)
 80013ea:	9301      	str	r3, [sp, #4]
 80013ec:	23c8      	movs	r3, #200	; 0xc8
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013f4:	2203      	movs	r2, #3
 80013f6:	21a0      	movs	r1, #160	; 0xa0
 80013f8:	20f5      	movs	r0, #245	; 0xf5
 80013fa:	f00c fd83 	bl	800df04 <ILI9341_Draw_Wave>
			break;
 80013fe:	e029      	b.n	8001454 <DM_DisplayFormattedOutput+0x55c>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, SYNC_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001400:	233c      	movs	r3, #60	; 0x3c
 8001402:	9302      	str	r3, [sp, #8]
 8001404:	4b17      	ldr	r3, [pc, #92]	; (8001464 <DM_DisplayFormattedOutput+0x56c>)
 8001406:	9301      	str	r3, [sp, #4]
 8001408:	23c8      	movs	r3, #200	; 0xc8
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001410:	2203      	movs	r2, #3
 8001412:	21a0      	movs	r1, #160	; 0xa0
 8001414:	20f5      	movs	r0, #245	; 0xf5
 8001416:	f00c fd75 	bl	800df04 <ILI9341_Draw_Wave>
			break;
 800141a:	e01b      	b.n	8001454 <DM_DisplayFormattedOutput+0x55c>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, SYNC_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 800141c:	233c      	movs	r3, #60	; 0x3c
 800141e:	9302      	str	r3, [sp, #8]
 8001420:	4b10      	ldr	r3, [pc, #64]	; (8001464 <DM_DisplayFormattedOutput+0x56c>)
 8001422:	9301      	str	r3, [sp, #4]
 8001424:	23c8      	movs	r3, #200	; 0xc8
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800142c:	2203      	movs	r2, #3
 800142e:	21a0      	movs	r1, #160	; 0xa0
 8001430:	20f5      	movs	r0, #245	; 0xf5
 8001432:	f00c fd67 	bl	800df04 <ILI9341_Draw_Wave>
			break;
 8001436:	e00d      	b.n	8001454 <DM_DisplayFormattedOutput+0x55c>
		case PWM_FUNC_MODE:
			ILI9341_Draw_Text("PWM", 245, 170, SYNC_OUTPUT_ICON, text_size, NORMAL_TEXT_BGCOLOUR);
 8001438:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800143c:	b29b      	uxth	r3, r3
 800143e:	2200      	movs	r2, #0
 8001440:	9201      	str	r2, [sp, #4]
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001448:	22aa      	movs	r2, #170	; 0xaa
 800144a:	21f5      	movs	r1, #245	; 0xf5
 800144c:	4806      	ldr	r0, [pc, #24]	; (8001468 <DM_DisplayFormattedOutput+0x570>)
 800144e:	f00c fefd 	bl	800e24c <ILI9341_Draw_Text>
			break;
 8001452:	bf00      	nop
	}



}
 8001454:	bf00      	nop
 8001456:	376c      	adds	r7, #108	; 0x6c
 8001458:	46bd      	mov	sp, r7
 800145a:	bd90      	pop	{r4, r7, pc}
 800145c:	20000cbc 	.word	0x20000cbc
 8001460:	20000dac 	.word	0x20000dac
 8001464:	2000107c 	.word	0x2000107c
 8001468:	08012fa4 	.word	0x08012fa4
 800146c:	08012fa8 	.word	0x08012fa8
 8001470:	20000e9c 	.word	0x20000e9c
 8001474:	20000f8c 	.word	0x20000f8c

08001478 <DM_RefreshScreen>:
 *	@param None
 *	@retval None
 *
 */
void DM_RefreshScreen()
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af04      	add	r7, sp, #16



	// pause display interrupts
	HAL_TIM_Base_Stop_IT(&htim15);
 800147e:	4820      	ldr	r0, [pc, #128]	; (8001500 <DM_RefreshScreen+0x88>)
 8001480:	f00a fdca 	bl	800c018 <HAL_TIM_Base_Stop_IT>


	ILI9341_Fill_Screen(SCREEN_BGCOLOUR);
 8001484:	2000      	movs	r0, #0
 8001486:	f00d f961 	bl	800e74c <ILI9341_Fill_Screen>
	GUI_DrawPolygon(Points, 3, RED);
	GUI_FillPolygon(Points2, 3, BLUE);
	GUI_DrawEllipse(250, 110, 20, 30, GREEN);
	GUI_FillEllipse(250, 110, 20, 30, WHITE);
*/
	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	0,
 800148a:	2300      	movs	r3, #0
 800148c:	9302      	str	r3, [sp, #8]
 800148e:	2302      	movs	r3, #2
 8001490:	9301      	str	r3, [sp, #4]
 8001492:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	2328      	movs	r3, #40	; 0x28
 800149a:	2250      	movs	r2, #80	; 0x50
 800149c:	21c8      	movs	r1, #200	; 0xc8
 800149e:	2000      	movs	r0, #0
 80014a0:	f00c fd71 	bl	800df86 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN1_FILL_COLOUR,
													BTN1_BORDER_WEIGHT,
													BTN1_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH,
 80014a4:	2300      	movs	r3, #0
 80014a6:	9302      	str	r3, [sp, #8]
 80014a8:	2302      	movs	r3, #2
 80014aa:	9301      	str	r3, [sp, #4]
 80014ac:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	2328      	movs	r3, #40	; 0x28
 80014b4:	2250      	movs	r2, #80	; 0x50
 80014b6:	21c8      	movs	r1, #200	; 0xc8
 80014b8:	2050      	movs	r0, #80	; 0x50
 80014ba:	f00c fd64 	bl	800df86 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN2_FILL_COLOUR,
													BTN2_BORDER_WEIGHT,
													BTN2_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*2,
 80014be:	2300      	movs	r3, #0
 80014c0:	9302      	str	r3, [sp, #8]
 80014c2:	2302      	movs	r3, #2
 80014c4:	9301      	str	r3, [sp, #4]
 80014c6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	2328      	movs	r3, #40	; 0x28
 80014ce:	2250      	movs	r2, #80	; 0x50
 80014d0:	21c8      	movs	r1, #200	; 0xc8
 80014d2:	20a0      	movs	r0, #160	; 0xa0
 80014d4:	f00c fd57 	bl	800df86 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN3_FILL_COLOUR,
													BTN3_BORDER_WEIGHT,
													BTN3_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*3,
 80014d8:	2300      	movs	r3, #0
 80014da:	9302      	str	r3, [sp, #8]
 80014dc:	2302      	movs	r3, #2
 80014de:	9301      	str	r3, [sp, #4]
 80014e0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	2328      	movs	r3, #40	; 0x28
 80014e8:	2250      	movs	r2, #80	; 0x50
 80014ea:	21c8      	movs	r1, #200	; 0xc8
 80014ec:	20f0      	movs	r0, #240	; 0xf0
 80014ee:	f00c fd4a 	bl	800df86 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN4_FILL_COLOUR,
													BTN4_BORDER_WEIGHT,
													BTN4_BORDER_COLOUR);

	// resume diaplay interrupts
	HAL_TIM_Base_Start_IT(&htim15);
 80014f2:	4803      	ldr	r0, [pc, #12]	; (8001500 <DM_RefreshScreen+0x88>)
 80014f4:	f00a fd5a 	bl	800bfac <HAL_TIM_Base_Start_IT>


}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	200027d0 	.word	0x200027d0

08001504 <DM_SetErrorDebugMsg>:
	ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
	*/
}

void DM_SetErrorDebugMsg(char* msg)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
	snprintf(ErrorDebugMsg, sizeof(ErrorDebugMsg), "%s", msg);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a04      	ldr	r2, [pc, #16]	; (8001520 <DM_SetErrorDebugMsg+0x1c>)
 8001510:	212d      	movs	r1, #45	; 0x2d
 8001512:	4804      	ldr	r0, [pc, #16]	; (8001524 <DM_SetErrorDebugMsg+0x20>)
 8001514:	f00e fa3e 	bl	800f994 <sniprintf>
}
 8001518:	bf00      	nop
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	08013034 	.word	0x08013034
 8001524:	20001e9c 	.word	0x20001e9c

08001528 <FreqMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMenu(eFreqMenu_Status pMenu)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	3b01      	subs	r3, #1
 8001536:	2b03      	cmp	r3, #3
 8001538:	d816      	bhi.n	8001568 <FreqMenu_DrawMenu+0x40>
 800153a:	a201      	add	r2, pc, #4	; (adr r2, 8001540 <FreqMenu_DrawMenu+0x18>)
 800153c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001540:	08001551 	.word	0x08001551
 8001544:	08001557 	.word	0x08001557
 8001548:	0800155d 	.word	0x0800155d
 800154c:	08001563 	.word	0x08001563
	{
		case ENABLE_FREQ_MAIN_MENU:
			FreqMenu_DrawMainMenu();
 8001550:	f000 f810 	bl	8001574 <FreqMenu_DrawMainMenu>
			break;
 8001554:	e009      	b.n	800156a <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_PRESET_MENU:
			FreqMenu_DrawPresetMenu();
 8001556:	f000 f849 	bl	80015ec <FreqMenu_DrawPresetMenu>
			break;
 800155a:	e006      	b.n	800156a <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_ADJUST_MENU:
			FreqMenu_DrawAdjustMenu();
 800155c:	f001 faf4 	bl	8002b48 <FreqMenu_DrawAdjustMenu>
			break;
 8001560:	e003      	b.n	800156a <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_SWEEP_MENU:
			FreqMenu_DrawSweepMenu();
 8001562:	f001 fb07 	bl	8002b74 <FreqMenu_DrawSweepMenu>
			break;
 8001566:	e000      	b.n	800156a <FreqMenu_DrawMenu+0x42>

		default:
			break;
 8001568:	bf00      	nop

	}
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop

08001574 <FreqMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMainMenu()
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af02      	add	r7, sp, #8
	// main
	ILI9341_Draw_Text("OUT->FREQ", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 800157a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800157e:	9301      	str	r3, [sp, #4]
 8001580:	2302      	movs	r3, #2
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	2300      	movs	r3, #0
 8001586:	220a      	movs	r2, #10
 8001588:	2105      	movs	r1, #5
 800158a:	4814      	ldr	r0, [pc, #80]	; (80015dc <FreqMenu_DrawMainMenu+0x68>)
 800158c:	f00c fe5e 	bl	800e24c <ILI9341_Draw_Text>
//	ILI9341_Draw_Text("Select an option below", 	30, 165, BLACK, 2, WHITE);

	DM_DisplayFormattedOutput();
 8001590:	f7ff fcb2 	bl	8000ef8 <DM_DisplayFormattedOutput>

	// buttons
	ILI9341_Draw_Text("PRESET", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8001594:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001598:	9301      	str	r3, [sp, #4]
 800159a:	2302      	movs	r3, #2
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	2300      	movs	r3, #0
 80015a0:	22d2      	movs	r2, #210	; 0xd2
 80015a2:	2105      	movs	r1, #5
 80015a4:	480e      	ldr	r0, [pc, #56]	; (80015e0 <FreqMenu_DrawMainMenu+0x6c>)
 80015a6:	f00c fe51 	bl	800e24c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("ADJUST", 87,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80015aa:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80015ae:	9301      	str	r3, [sp, #4]
 80015b0:	2302      	movs	r3, #2
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	2300      	movs	r3, #0
 80015b6:	22d2      	movs	r2, #210	; 0xd2
 80015b8:	2157      	movs	r1, #87	; 0x57
 80015ba:	480a      	ldr	r0, [pc, #40]	; (80015e4 <FreqMenu_DrawMainMenu+0x70>)
 80015bc:	f00c fe46 	bl	800e24c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SWEEP",  174, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80015c0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80015c4:	9301      	str	r3, [sp, #4]
 80015c6:	2302      	movs	r3, #2
 80015c8:	9300      	str	r3, [sp, #0]
 80015ca:	2300      	movs	r3, #0
 80015cc:	22d2      	movs	r2, #210	; 0xd2
 80015ce:	21ae      	movs	r1, #174	; 0xae
 80015d0:	4805      	ldr	r0, [pc, #20]	; (80015e8 <FreqMenu_DrawMainMenu+0x74>)
 80015d2:	f00c fe3b 	bl	800e24c <ILI9341_Draw_Text>
	//ILI9341_Draw_Text("    ", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	08013038 	.word	0x08013038
 80015e0:	08013044 	.word	0x08013044
 80015e4:	0801304c 	.word	0x0801304c
 80015e8:	08013054 	.word	0x08013054

080015ec <FreqMenu_DrawPresetMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawPresetMenu()
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->FREQ->PRESET", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80015f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015f6:	9301      	str	r3, [sp, #4]
 80015f8:	2302      	movs	r3, #2
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	2300      	movs	r3, #0
 80015fe:	220a      	movs	r2, #10
 8001600:	2105      	movs	r1, #5
 8001602:	4886      	ldr	r0, [pc, #536]	; (800181c <FreqMenu_DrawPresetMenu+0x230>)
 8001604:	f00c fe22 	bl	800e24c <ILI9341_Draw_Text>
	uint8_t menu_pos_y1 = 40;
 8001608:	2328      	movs	r3, #40	; 0x28
 800160a:	73fb      	strb	r3, [r7, #15]
	uint8_t menu_pos_y2 = 60;
 800160c:	233c      	movs	r3, #60	; 0x3c
 800160e:	73bb      	strb	r3, [r7, #14]
	uint8_t menu_pos_y3 = 80;
 8001610:	2350      	movs	r3, #80	; 0x50
 8001612:	737b      	strb	r3, [r7, #13]
	uint8_t menu_pos_y4 = 100;
 8001614:	2364      	movs	r3, #100	; 0x64
 8001616:	733b      	strb	r3, [r7, #12]
	uint8_t menu_pos_y5 = 120;
 8001618:	2378      	movs	r3, #120	; 0x78
 800161a:	72fb      	strb	r3, [r7, #11]
	uint8_t menu_pos_y6 = 140;
 800161c:	238c      	movs	r3, #140	; 0x8c
 800161e:	72bb      	strb	r3, [r7, #10]
	uint8_t menu_pos_y7 = 160;
 8001620:	23a0      	movs	r3, #160	; 0xa0
 8001622:	727b      	strb	r3, [r7, #9]
	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8001624:	f003 ffd0 	bl	80055c8 <FreqO_GetFPresetObject>
 8001628:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	f001 825d 	beq.w	8002aec <FreqMenu_DrawPresetMenu+0x1500>
	{
		switch(pFreqPresetTmp->hertz)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f240 22ee 	movw	r2, #750	; 0x2ee
 800163a:	4293      	cmp	r3, r2
 800163c:	f000 849a 	beq.w	8001f74 <FreqMenu_DrawPresetMenu+0x988>
 8001640:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001644:	4293      	cmp	r3, r2
 8001646:	d817      	bhi.n	8001678 <FreqMenu_DrawPresetMenu+0x8c>
 8001648:	2b32      	cmp	r3, #50	; 0x32
 800164a:	f000 81b3 	beq.w	80019b4 <FreqMenu_DrawPresetMenu+0x3c8>
 800164e:	2b32      	cmp	r3, #50	; 0x32
 8001650:	d806      	bhi.n	8001660 <FreqMenu_DrawPresetMenu+0x74>
 8001652:	2b01      	cmp	r3, #1
 8001654:	d038      	beq.n	80016c8 <FreqMenu_DrawPresetMenu+0xdc>
 8001656:	2b0a      	cmp	r3, #10
 8001658:	f000 8102 	beq.w	8001860 <FreqMenu_DrawPresetMenu+0x274>
	else
	{
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
	}

}
 800165c:	f001 ba52 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 8001660:	2bfa      	cmp	r3, #250	; 0xfa
 8001662:	f000 8317 	beq.w	8001c94 <FreqMenu_DrawPresetMenu+0x6a8>
 8001666:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800166a:	f000 83d9 	beq.w	8001e20 <FreqMenu_DrawPresetMenu+0x834>
 800166e:	2b64      	cmp	r3, #100	; 0x64
 8001670:	f000 8266 	beq.w	8001b40 <FreqMenu_DrawPresetMenu+0x554>
}
 8001674:	f001 ba46 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 8001678:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800167c:	4293      	cmp	r3, r2
 800167e:	f000 8758 	beq.w	8002532 <FreqMenu_DrawPresetMenu+0xf46>
 8001682:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001686:	4293      	cmp	r3, r2
 8001688:	d80f      	bhi.n	80016aa <FreqMenu_DrawPresetMenu+0xbe>
 800168a:	f241 3288 	movw	r2, #5000	; 0x1388
 800168e:	4293      	cmp	r3, r2
 8001690:	f000 85e0 	beq.w	8002254 <FreqMenu_DrawPresetMenu+0xc68>
 8001694:	f242 7210 	movw	r2, #10000	; 0x2710
 8001698:	4293      	cmp	r3, r2
 800169a:	f000 86a1 	beq.w	80023e0 <FreqMenu_DrawPresetMenu+0xdf4>
 800169e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016a2:	f000 852d 	beq.w	8002100 <FreqMenu_DrawPresetMenu+0xb14>
}
 80016a6:	f001 ba2d 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 80016aa:	4a5d      	ldr	r2, [pc, #372]	; (8001820 <FreqMenu_DrawPresetMenu+0x234>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	f001 80ae 	beq.w	800280e <FreqMenu_DrawPresetMenu+0x1222>
 80016b2:	4a5c      	ldr	r2, [pc, #368]	; (8001824 <FreqMenu_DrawPresetMenu+0x238>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	f001 816f 	beq.w	8002998 <FreqMenu_DrawPresetMenu+0x13ac>
 80016ba:	f24c 3250 	movw	r2, #50000	; 0xc350
 80016be:	4293      	cmp	r3, r2
 80016c0:	f000 87fc 	beq.w	80026bc <FreqMenu_DrawPresetMenu+0x10d0>
}
 80016c4:	f001 ba1e 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80016d0:	9301      	str	r3, [sp, #4]
 80016d2:	2302      	movs	r3, #2
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	2300      	movs	r3, #0
 80016d8:	2105      	movs	r1, #5
 80016da:	4853      	ldr	r0, [pc, #332]	; (8001828 <FreqMenu_DrawPresetMenu+0x23c>)
 80016dc:	f00c fdb6 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80016e0:	7bbb      	ldrb	r3, [r7, #14]
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	2300      	movs	r3, #0
 80016e6:	9301      	str	r3, [sp, #4]
 80016e8:	2302      	movs	r3, #2
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80016f0:	2105      	movs	r1, #5
 80016f2:	484e      	ldr	r0, [pc, #312]	; (800182c <FreqMenu_DrawPresetMenu+0x240>)
 80016f4:	f00c fdaa 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80016f8:	7b7b      	ldrb	r3, [r7, #13]
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	2300      	movs	r3, #0
 80016fe:	9301      	str	r3, [sp, #4]
 8001700:	2302      	movs	r3, #2
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001708:	2105      	movs	r1, #5
 800170a:	4849      	ldr	r0, [pc, #292]	; (8001830 <FreqMenu_DrawPresetMenu+0x244>)
 800170c:	f00c fd9e 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001710:	7b3b      	ldrb	r3, [r7, #12]
 8001712:	b29a      	uxth	r2, r3
 8001714:	2300      	movs	r3, #0
 8001716:	9301      	str	r3, [sp, #4]
 8001718:	2302      	movs	r3, #2
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001720:	2105      	movs	r1, #5
 8001722:	4844      	ldr	r0, [pc, #272]	; (8001834 <FreqMenu_DrawPresetMenu+0x248>)
 8001724:	f00c fd92 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001728:	7afb      	ldrb	r3, [r7, #11]
 800172a:	b29a      	uxth	r2, r3
 800172c:	2300      	movs	r3, #0
 800172e:	9301      	str	r3, [sp, #4]
 8001730:	2302      	movs	r3, #2
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001738:	2105      	movs	r1, #5
 800173a:	483f      	ldr	r0, [pc, #252]	; (8001838 <FreqMenu_DrawPresetMenu+0x24c>)
 800173c:	f00c fd86 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001740:	7abb      	ldrb	r3, [r7, #10]
 8001742:	b29a      	uxth	r2, r3
 8001744:	2300      	movs	r3, #0
 8001746:	9301      	str	r3, [sp, #4]
 8001748:	2302      	movs	r3, #2
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001750:	2105      	movs	r1, #5
 8001752:	483a      	ldr	r0, [pc, #232]	; (800183c <FreqMenu_DrawPresetMenu+0x250>)
 8001754:	f00c fd7a 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001758:	7a7b      	ldrb	r3, [r7, #9]
 800175a:	b29a      	uxth	r2, r3
 800175c:	2300      	movs	r3, #0
 800175e:	9301      	str	r3, [sp, #4]
 8001760:	2302      	movs	r3, #2
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001768:	2105      	movs	r1, #5
 800176a:	4835      	ldr	r0, [pc, #212]	; (8001840 <FreqMenu_DrawPresetMenu+0x254>)
 800176c:	f00c fd6e 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001770:	7bfb      	ldrb	r3, [r7, #15]
 8001772:	b29a      	uxth	r2, r3
 8001774:	2300      	movs	r3, #0
 8001776:	9301      	str	r3, [sp, #4]
 8001778:	2302      	movs	r3, #2
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001780:	2178      	movs	r1, #120	; 0x78
 8001782:	4830      	ldr	r0, [pc, #192]	; (8001844 <FreqMenu_DrawPresetMenu+0x258>)
 8001784:	f00c fd62 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001788:	7bbb      	ldrb	r3, [r7, #14]
 800178a:	b29a      	uxth	r2, r3
 800178c:	2300      	movs	r3, #0
 800178e:	9301      	str	r3, [sp, #4]
 8001790:	2302      	movs	r3, #2
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001798:	2178      	movs	r1, #120	; 0x78
 800179a:	482b      	ldr	r0, [pc, #172]	; (8001848 <FreqMenu_DrawPresetMenu+0x25c>)
 800179c:	f00c fd56 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017a0:	7b7b      	ldrb	r3, [r7, #13]
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	2300      	movs	r3, #0
 80017a6:	9301      	str	r3, [sp, #4]
 80017a8:	2302      	movs	r3, #2
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017b0:	2178      	movs	r1, #120	; 0x78
 80017b2:	4826      	ldr	r0, [pc, #152]	; (800184c <FreqMenu_DrawPresetMenu+0x260>)
 80017b4:	f00c fd4a 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017b8:	7b3b      	ldrb	r3, [r7, #12]
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	2300      	movs	r3, #0
 80017be:	9301      	str	r3, [sp, #4]
 80017c0:	2302      	movs	r3, #2
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017c8:	2178      	movs	r1, #120	; 0x78
 80017ca:	4821      	ldr	r0, [pc, #132]	; (8001850 <FreqMenu_DrawPresetMenu+0x264>)
 80017cc:	f00c fd3e 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017d0:	7afb      	ldrb	r3, [r7, #11]
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	2300      	movs	r3, #0
 80017d6:	9301      	str	r3, [sp, #4]
 80017d8:	2302      	movs	r3, #2
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017e0:	2178      	movs	r1, #120	; 0x78
 80017e2:	481c      	ldr	r0, [pc, #112]	; (8001854 <FreqMenu_DrawPresetMenu+0x268>)
 80017e4:	f00c fd32 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017e8:	7abb      	ldrb	r3, [r7, #10]
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	2300      	movs	r3, #0
 80017ee:	9301      	str	r3, [sp, #4]
 80017f0:	2302      	movs	r3, #2
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017f8:	2178      	movs	r1, #120	; 0x78
 80017fa:	4817      	ldr	r0, [pc, #92]	; (8001858 <FreqMenu_DrawPresetMenu+0x26c>)
 80017fc:	f00c fd26 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001800:	7a7b      	ldrb	r3, [r7, #9]
 8001802:	b29a      	uxth	r2, r3
 8001804:	2300      	movs	r3, #0
 8001806:	9301      	str	r3, [sp, #4]
 8001808:	2302      	movs	r3, #2
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001810:	2178      	movs	r1, #120	; 0x78
 8001812:	4812      	ldr	r0, [pc, #72]	; (800185c <FreqMenu_DrawPresetMenu+0x270>)
 8001814:	f00c fd1a 	bl	800e24c <ILI9341_Draw_Text>
				break;
 8001818:	f001 b974 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
 800181c:	0801305c 	.word	0x0801305c
 8001820:	000124f8 	.word	0x000124f8
 8001824:	000186a0 	.word	0x000186a0
 8001828:	08013070 	.word	0x08013070
 800182c:	08013078 	.word	0x08013078
 8001830:	08013080 	.word	0x08013080
 8001834:	08013088 	.word	0x08013088
 8001838:	08013090 	.word	0x08013090
 800183c:	08013098 	.word	0x08013098
 8001840:	080130a0 	.word	0x080130a0
 8001844:	080130a8 	.word	0x080130a8
 8001848:	080130b0 	.word	0x080130b0
 800184c:	080130b8 	.word	0x080130b8
 8001850:	080130c0 	.word	0x080130c0
 8001854:	080130c8 	.word	0x080130c8
 8001858:	080130d0 	.word	0x080130d0
 800185c:	080130d8 	.word	0x080130d8
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001860:	7bfb      	ldrb	r3, [r7, #15]
 8001862:	b29a      	uxth	r2, r3
 8001864:	2300      	movs	r3, #0
 8001866:	9301      	str	r3, [sp, #4]
 8001868:	2302      	movs	r3, #2
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001870:	2105      	movs	r1, #5
 8001872:	48a5      	ldr	r0, [pc, #660]	; (8001b08 <FreqMenu_DrawPresetMenu+0x51c>)
 8001874:	f00c fcea 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001878:	7bbb      	ldrb	r3, [r7, #14]
 800187a:	b29a      	uxth	r2, r3
 800187c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001880:	9301      	str	r3, [sp, #4]
 8001882:	2302      	movs	r3, #2
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	2300      	movs	r3, #0
 8001888:	2105      	movs	r1, #5
 800188a:	48a0      	ldr	r0, [pc, #640]	; (8001b0c <FreqMenu_DrawPresetMenu+0x520>)
 800188c:	f00c fcde 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001890:	7b7b      	ldrb	r3, [r7, #13]
 8001892:	b29a      	uxth	r2, r3
 8001894:	2300      	movs	r3, #0
 8001896:	9301      	str	r3, [sp, #4]
 8001898:	2302      	movs	r3, #2
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018a0:	2105      	movs	r1, #5
 80018a2:	489b      	ldr	r0, [pc, #620]	; (8001b10 <FreqMenu_DrawPresetMenu+0x524>)
 80018a4:	f00c fcd2 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018a8:	7b3b      	ldrb	r3, [r7, #12]
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	2300      	movs	r3, #0
 80018ae:	9301      	str	r3, [sp, #4]
 80018b0:	2302      	movs	r3, #2
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018b8:	2105      	movs	r1, #5
 80018ba:	4896      	ldr	r0, [pc, #600]	; (8001b14 <FreqMenu_DrawPresetMenu+0x528>)
 80018bc:	f00c fcc6 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018c0:	7afb      	ldrb	r3, [r7, #11]
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	2300      	movs	r3, #0
 80018c6:	9301      	str	r3, [sp, #4]
 80018c8:	2302      	movs	r3, #2
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018d0:	2105      	movs	r1, #5
 80018d2:	4891      	ldr	r0, [pc, #580]	; (8001b18 <FreqMenu_DrawPresetMenu+0x52c>)
 80018d4:	f00c fcba 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018d8:	7abb      	ldrb	r3, [r7, #10]
 80018da:	b29a      	uxth	r2, r3
 80018dc:	2300      	movs	r3, #0
 80018de:	9301      	str	r3, [sp, #4]
 80018e0:	2302      	movs	r3, #2
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018e8:	2105      	movs	r1, #5
 80018ea:	488c      	ldr	r0, [pc, #560]	; (8001b1c <FreqMenu_DrawPresetMenu+0x530>)
 80018ec:	f00c fcae 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018f0:	7a7b      	ldrb	r3, [r7, #9]
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	2300      	movs	r3, #0
 80018f6:	9301      	str	r3, [sp, #4]
 80018f8:	2302      	movs	r3, #2
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001900:	2105      	movs	r1, #5
 8001902:	4887      	ldr	r0, [pc, #540]	; (8001b20 <FreqMenu_DrawPresetMenu+0x534>)
 8001904:	f00c fca2 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	b29a      	uxth	r2, r3
 800190c:	2300      	movs	r3, #0
 800190e:	9301      	str	r3, [sp, #4]
 8001910:	2302      	movs	r3, #2
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001918:	2178      	movs	r1, #120	; 0x78
 800191a:	4882      	ldr	r0, [pc, #520]	; (8001b24 <FreqMenu_DrawPresetMenu+0x538>)
 800191c:	f00c fc96 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001920:	7bbb      	ldrb	r3, [r7, #14]
 8001922:	b29a      	uxth	r2, r3
 8001924:	2300      	movs	r3, #0
 8001926:	9301      	str	r3, [sp, #4]
 8001928:	2302      	movs	r3, #2
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001930:	2178      	movs	r1, #120	; 0x78
 8001932:	487d      	ldr	r0, [pc, #500]	; (8001b28 <FreqMenu_DrawPresetMenu+0x53c>)
 8001934:	f00c fc8a 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001938:	7b7b      	ldrb	r3, [r7, #13]
 800193a:	b29a      	uxth	r2, r3
 800193c:	2300      	movs	r3, #0
 800193e:	9301      	str	r3, [sp, #4]
 8001940:	2302      	movs	r3, #2
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001948:	2178      	movs	r1, #120	; 0x78
 800194a:	4878      	ldr	r0, [pc, #480]	; (8001b2c <FreqMenu_DrawPresetMenu+0x540>)
 800194c:	f00c fc7e 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001950:	7b3b      	ldrb	r3, [r7, #12]
 8001952:	b29a      	uxth	r2, r3
 8001954:	2300      	movs	r3, #0
 8001956:	9301      	str	r3, [sp, #4]
 8001958:	2302      	movs	r3, #2
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001960:	2178      	movs	r1, #120	; 0x78
 8001962:	4873      	ldr	r0, [pc, #460]	; (8001b30 <FreqMenu_DrawPresetMenu+0x544>)
 8001964:	f00c fc72 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001968:	7afb      	ldrb	r3, [r7, #11]
 800196a:	b29a      	uxth	r2, r3
 800196c:	2300      	movs	r3, #0
 800196e:	9301      	str	r3, [sp, #4]
 8001970:	2302      	movs	r3, #2
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001978:	2178      	movs	r1, #120	; 0x78
 800197a:	486e      	ldr	r0, [pc, #440]	; (8001b34 <FreqMenu_DrawPresetMenu+0x548>)
 800197c:	f00c fc66 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001980:	7abb      	ldrb	r3, [r7, #10]
 8001982:	b29a      	uxth	r2, r3
 8001984:	2300      	movs	r3, #0
 8001986:	9301      	str	r3, [sp, #4]
 8001988:	2302      	movs	r3, #2
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001990:	2178      	movs	r1, #120	; 0x78
 8001992:	4869      	ldr	r0, [pc, #420]	; (8001b38 <FreqMenu_DrawPresetMenu+0x54c>)
 8001994:	f00c fc5a 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001998:	7a7b      	ldrb	r3, [r7, #9]
 800199a:	b29a      	uxth	r2, r3
 800199c:	2300      	movs	r3, #0
 800199e:	9301      	str	r3, [sp, #4]
 80019a0:	2302      	movs	r3, #2
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019a8:	2178      	movs	r1, #120	; 0x78
 80019aa:	4864      	ldr	r0, [pc, #400]	; (8001b3c <FreqMenu_DrawPresetMenu+0x550>)
 80019ac:	f00c fc4e 	bl	800e24c <ILI9341_Draw_Text>
				break;
 80019b0:	f001 b8a8 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	2300      	movs	r3, #0
 80019ba:	9301      	str	r3, [sp, #4]
 80019bc:	2302      	movs	r3, #2
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019c4:	2105      	movs	r1, #5
 80019c6:	4850      	ldr	r0, [pc, #320]	; (8001b08 <FreqMenu_DrawPresetMenu+0x51c>)
 80019c8:	f00c fc40 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019cc:	7bbb      	ldrb	r3, [r7, #14]
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	2300      	movs	r3, #0
 80019d2:	9301      	str	r3, [sp, #4]
 80019d4:	2302      	movs	r3, #2
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019dc:	2105      	movs	r1, #5
 80019de:	484b      	ldr	r0, [pc, #300]	; (8001b0c <FreqMenu_DrawPresetMenu+0x520>)
 80019e0:	f00c fc34 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80019e4:	7b7b      	ldrb	r3, [r7, #13]
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80019ec:	9301      	str	r3, [sp, #4]
 80019ee:	2302      	movs	r3, #2
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	2300      	movs	r3, #0
 80019f4:	2105      	movs	r1, #5
 80019f6:	4846      	ldr	r0, [pc, #280]	; (8001b10 <FreqMenu_DrawPresetMenu+0x524>)
 80019f8:	f00c fc28 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019fc:	7b3b      	ldrb	r3, [r7, #12]
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	2300      	movs	r3, #0
 8001a02:	9301      	str	r3, [sp, #4]
 8001a04:	2302      	movs	r3, #2
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a0c:	2105      	movs	r1, #5
 8001a0e:	4841      	ldr	r0, [pc, #260]	; (8001b14 <FreqMenu_DrawPresetMenu+0x528>)
 8001a10:	f00c fc1c 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a14:	7afb      	ldrb	r3, [r7, #11]
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	2300      	movs	r3, #0
 8001a1a:	9301      	str	r3, [sp, #4]
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a24:	2105      	movs	r1, #5
 8001a26:	483c      	ldr	r0, [pc, #240]	; (8001b18 <FreqMenu_DrawPresetMenu+0x52c>)
 8001a28:	f00c fc10 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a2c:	7abb      	ldrb	r3, [r7, #10]
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	2300      	movs	r3, #0
 8001a32:	9301      	str	r3, [sp, #4]
 8001a34:	2302      	movs	r3, #2
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a3c:	2105      	movs	r1, #5
 8001a3e:	4837      	ldr	r0, [pc, #220]	; (8001b1c <FreqMenu_DrawPresetMenu+0x530>)
 8001a40:	f00c fc04 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a44:	7a7b      	ldrb	r3, [r7, #9]
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	2300      	movs	r3, #0
 8001a4a:	9301      	str	r3, [sp, #4]
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a54:	2105      	movs	r1, #5
 8001a56:	4832      	ldr	r0, [pc, #200]	; (8001b20 <FreqMenu_DrawPresetMenu+0x534>)
 8001a58:	f00c fbf8 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	2300      	movs	r3, #0
 8001a62:	9301      	str	r3, [sp, #4]
 8001a64:	2302      	movs	r3, #2
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a6c:	2178      	movs	r1, #120	; 0x78
 8001a6e:	482d      	ldr	r0, [pc, #180]	; (8001b24 <FreqMenu_DrawPresetMenu+0x538>)
 8001a70:	f00c fbec 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a74:	7bbb      	ldrb	r3, [r7, #14]
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	2300      	movs	r3, #0
 8001a7a:	9301      	str	r3, [sp, #4]
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a84:	2178      	movs	r1, #120	; 0x78
 8001a86:	4828      	ldr	r0, [pc, #160]	; (8001b28 <FreqMenu_DrawPresetMenu+0x53c>)
 8001a88:	f00c fbe0 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a8c:	7b7b      	ldrb	r3, [r7, #13]
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	2300      	movs	r3, #0
 8001a92:	9301      	str	r3, [sp, #4]
 8001a94:	2302      	movs	r3, #2
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a9c:	2178      	movs	r1, #120	; 0x78
 8001a9e:	4823      	ldr	r0, [pc, #140]	; (8001b2c <FreqMenu_DrawPresetMenu+0x540>)
 8001aa0:	f00c fbd4 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001aa4:	7b3b      	ldrb	r3, [r7, #12]
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	9301      	str	r3, [sp, #4]
 8001aac:	2302      	movs	r3, #2
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ab4:	2178      	movs	r1, #120	; 0x78
 8001ab6:	481e      	ldr	r0, [pc, #120]	; (8001b30 <FreqMenu_DrawPresetMenu+0x544>)
 8001ab8:	f00c fbc8 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001abc:	7afb      	ldrb	r3, [r7, #11]
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	9301      	str	r3, [sp, #4]
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001acc:	2178      	movs	r1, #120	; 0x78
 8001ace:	4819      	ldr	r0, [pc, #100]	; (8001b34 <FreqMenu_DrawPresetMenu+0x548>)
 8001ad0:	f00c fbbc 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ad4:	7abb      	ldrb	r3, [r7, #10]
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	2300      	movs	r3, #0
 8001ada:	9301      	str	r3, [sp, #4]
 8001adc:	2302      	movs	r3, #2
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ae4:	2178      	movs	r1, #120	; 0x78
 8001ae6:	4814      	ldr	r0, [pc, #80]	; (8001b38 <FreqMenu_DrawPresetMenu+0x54c>)
 8001ae8:	f00c fbb0 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001aec:	7a7b      	ldrb	r3, [r7, #9]
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	2300      	movs	r3, #0
 8001af2:	9301      	str	r3, [sp, #4]
 8001af4:	2302      	movs	r3, #2
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001afc:	2178      	movs	r1, #120	; 0x78
 8001afe:	480f      	ldr	r0, [pc, #60]	; (8001b3c <FreqMenu_DrawPresetMenu+0x550>)
 8001b00:	f00c fba4 	bl	800e24c <ILI9341_Draw_Text>
				break;
 8001b04:	f000 bffe 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
 8001b08:	08013070 	.word	0x08013070
 8001b0c:	08013078 	.word	0x08013078
 8001b10:	08013080 	.word	0x08013080
 8001b14:	08013088 	.word	0x08013088
 8001b18:	08013090 	.word	0x08013090
 8001b1c:	08013098 	.word	0x08013098
 8001b20:	080130a0 	.word	0x080130a0
 8001b24:	080130a8 	.word	0x080130a8
 8001b28:	080130b0 	.word	0x080130b0
 8001b2c:	080130b8 	.word	0x080130b8
 8001b30:	080130c0 	.word	0x080130c0
 8001b34:	080130c8 	.word	0x080130c8
 8001b38:	080130d0 	.word	0x080130d0
 8001b3c:	080130d8 	.word	0x080130d8
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	2300      	movs	r3, #0
 8001b46:	9301      	str	r3, [sp, #4]
 8001b48:	2302      	movs	r3, #2
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b50:	2105      	movs	r1, #5
 8001b52:	48a5      	ldr	r0, [pc, #660]	; (8001de8 <FreqMenu_DrawPresetMenu+0x7fc>)
 8001b54:	f00c fb7a 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b58:	7bbb      	ldrb	r3, [r7, #14]
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	9301      	str	r3, [sp, #4]
 8001b60:	2302      	movs	r3, #2
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b68:	2105      	movs	r1, #5
 8001b6a:	48a0      	ldr	r0, [pc, #640]	; (8001dec <FreqMenu_DrawPresetMenu+0x800>)
 8001b6c:	f00c fb6e 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b70:	7b7b      	ldrb	r3, [r7, #13]
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	2300      	movs	r3, #0
 8001b76:	9301      	str	r3, [sp, #4]
 8001b78:	2302      	movs	r3, #2
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b80:	2105      	movs	r1, #5
 8001b82:	489b      	ldr	r0, [pc, #620]	; (8001df0 <FreqMenu_DrawPresetMenu+0x804>)
 8001b84:	f00c fb62 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001b88:	7b3b      	ldrb	r3, [r7, #12]
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001b90:	9301      	str	r3, [sp, #4]
 8001b92:	2302      	movs	r3, #2
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	2300      	movs	r3, #0
 8001b98:	2105      	movs	r1, #5
 8001b9a:	4896      	ldr	r0, [pc, #600]	; (8001df4 <FreqMenu_DrawPresetMenu+0x808>)
 8001b9c:	f00c fb56 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ba0:	7afb      	ldrb	r3, [r7, #11]
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	9301      	str	r3, [sp, #4]
 8001ba8:	2302      	movs	r3, #2
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bb0:	2105      	movs	r1, #5
 8001bb2:	4891      	ldr	r0, [pc, #580]	; (8001df8 <FreqMenu_DrawPresetMenu+0x80c>)
 8001bb4:	f00c fb4a 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bb8:	7abb      	ldrb	r3, [r7, #10]
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	9301      	str	r3, [sp, #4]
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bc8:	2105      	movs	r1, #5
 8001bca:	488c      	ldr	r0, [pc, #560]	; (8001dfc <FreqMenu_DrawPresetMenu+0x810>)
 8001bcc:	f00c fb3e 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bd0:	7a7b      	ldrb	r3, [r7, #9]
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	9301      	str	r3, [sp, #4]
 8001bd8:	2302      	movs	r3, #2
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001be0:	2105      	movs	r1, #5
 8001be2:	4887      	ldr	r0, [pc, #540]	; (8001e00 <FreqMenu_DrawPresetMenu+0x814>)
 8001be4:	f00c fb32 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	2300      	movs	r3, #0
 8001bee:	9301      	str	r3, [sp, #4]
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bf8:	2178      	movs	r1, #120	; 0x78
 8001bfa:	4882      	ldr	r0, [pc, #520]	; (8001e04 <FreqMenu_DrawPresetMenu+0x818>)
 8001bfc:	f00c fb26 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c00:	7bbb      	ldrb	r3, [r7, #14]
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	2300      	movs	r3, #0
 8001c06:	9301      	str	r3, [sp, #4]
 8001c08:	2302      	movs	r3, #2
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c10:	2178      	movs	r1, #120	; 0x78
 8001c12:	487d      	ldr	r0, [pc, #500]	; (8001e08 <FreqMenu_DrawPresetMenu+0x81c>)
 8001c14:	f00c fb1a 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c18:	7b7b      	ldrb	r3, [r7, #13]
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	9301      	str	r3, [sp, #4]
 8001c20:	2302      	movs	r3, #2
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c28:	2178      	movs	r1, #120	; 0x78
 8001c2a:	4878      	ldr	r0, [pc, #480]	; (8001e0c <FreqMenu_DrawPresetMenu+0x820>)
 8001c2c:	f00c fb0e 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c30:	7b3b      	ldrb	r3, [r7, #12]
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	2300      	movs	r3, #0
 8001c36:	9301      	str	r3, [sp, #4]
 8001c38:	2302      	movs	r3, #2
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c40:	2178      	movs	r1, #120	; 0x78
 8001c42:	4873      	ldr	r0, [pc, #460]	; (8001e10 <FreqMenu_DrawPresetMenu+0x824>)
 8001c44:	f00c fb02 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c48:	7afb      	ldrb	r3, [r7, #11]
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	9301      	str	r3, [sp, #4]
 8001c50:	2302      	movs	r3, #2
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c58:	2178      	movs	r1, #120	; 0x78
 8001c5a:	486e      	ldr	r0, [pc, #440]	; (8001e14 <FreqMenu_DrawPresetMenu+0x828>)
 8001c5c:	f00c faf6 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c60:	7abb      	ldrb	r3, [r7, #10]
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	2300      	movs	r3, #0
 8001c66:	9301      	str	r3, [sp, #4]
 8001c68:	2302      	movs	r3, #2
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c70:	2178      	movs	r1, #120	; 0x78
 8001c72:	4869      	ldr	r0, [pc, #420]	; (8001e18 <FreqMenu_DrawPresetMenu+0x82c>)
 8001c74:	f00c faea 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c78:	7a7b      	ldrb	r3, [r7, #9]
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	9301      	str	r3, [sp, #4]
 8001c80:	2302      	movs	r3, #2
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c88:	2178      	movs	r1, #120	; 0x78
 8001c8a:	4864      	ldr	r0, [pc, #400]	; (8001e1c <FreqMenu_DrawPresetMenu+0x830>)
 8001c8c:	f00c fade 	bl	800e24c <ILI9341_Draw_Text>
				break;
 8001c90:	f000 bf38 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	2300      	movs	r3, #0
 8001c9a:	9301      	str	r3, [sp, #4]
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ca4:	2105      	movs	r1, #5
 8001ca6:	4850      	ldr	r0, [pc, #320]	; (8001de8 <FreqMenu_DrawPresetMenu+0x7fc>)
 8001ca8:	f00c fad0 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cac:	7bbb      	ldrb	r3, [r7, #14]
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	9301      	str	r3, [sp, #4]
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cbc:	2105      	movs	r1, #5
 8001cbe:	484b      	ldr	r0, [pc, #300]	; (8001dec <FreqMenu_DrawPresetMenu+0x800>)
 8001cc0:	f00c fac4 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cc4:	7b7b      	ldrb	r3, [r7, #13]
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	2300      	movs	r3, #0
 8001cca:	9301      	str	r3, [sp, #4]
 8001ccc:	2302      	movs	r3, #2
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cd4:	2105      	movs	r1, #5
 8001cd6:	4846      	ldr	r0, [pc, #280]	; (8001df0 <FreqMenu_DrawPresetMenu+0x804>)
 8001cd8:	f00c fab8 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cdc:	7b3b      	ldrb	r3, [r7, #12]
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	9301      	str	r3, [sp, #4]
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cec:	2105      	movs	r1, #5
 8001cee:	4841      	ldr	r0, [pc, #260]	; (8001df4 <FreqMenu_DrawPresetMenu+0x808>)
 8001cf0:	f00c faac 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001cf4:	7afb      	ldrb	r3, [r7, #11]
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001cfc:	9301      	str	r3, [sp, #4]
 8001cfe:	2302      	movs	r3, #2
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	2300      	movs	r3, #0
 8001d04:	2105      	movs	r1, #5
 8001d06:	483c      	ldr	r0, [pc, #240]	; (8001df8 <FreqMenu_DrawPresetMenu+0x80c>)
 8001d08:	f00c faa0 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d0c:	7abb      	ldrb	r3, [r7, #10]
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	2300      	movs	r3, #0
 8001d12:	9301      	str	r3, [sp, #4]
 8001d14:	2302      	movs	r3, #2
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d1c:	2105      	movs	r1, #5
 8001d1e:	4837      	ldr	r0, [pc, #220]	; (8001dfc <FreqMenu_DrawPresetMenu+0x810>)
 8001d20:	f00c fa94 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d24:	7a7b      	ldrb	r3, [r7, #9]
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	2300      	movs	r3, #0
 8001d2a:	9301      	str	r3, [sp, #4]
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d34:	2105      	movs	r1, #5
 8001d36:	4832      	ldr	r0, [pc, #200]	; (8001e00 <FreqMenu_DrawPresetMenu+0x814>)
 8001d38:	f00c fa88 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	2300      	movs	r3, #0
 8001d42:	9301      	str	r3, [sp, #4]
 8001d44:	2302      	movs	r3, #2
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d4c:	2178      	movs	r1, #120	; 0x78
 8001d4e:	482d      	ldr	r0, [pc, #180]	; (8001e04 <FreqMenu_DrawPresetMenu+0x818>)
 8001d50:	f00c fa7c 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d54:	7bbb      	ldrb	r3, [r7, #14]
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	2300      	movs	r3, #0
 8001d5a:	9301      	str	r3, [sp, #4]
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d64:	2178      	movs	r1, #120	; 0x78
 8001d66:	4828      	ldr	r0, [pc, #160]	; (8001e08 <FreqMenu_DrawPresetMenu+0x81c>)
 8001d68:	f00c fa70 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d6c:	7b7b      	ldrb	r3, [r7, #13]
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	2300      	movs	r3, #0
 8001d72:	9301      	str	r3, [sp, #4]
 8001d74:	2302      	movs	r3, #2
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d7c:	2178      	movs	r1, #120	; 0x78
 8001d7e:	4823      	ldr	r0, [pc, #140]	; (8001e0c <FreqMenu_DrawPresetMenu+0x820>)
 8001d80:	f00c fa64 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d84:	7b3b      	ldrb	r3, [r7, #12]
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	2300      	movs	r3, #0
 8001d8a:	9301      	str	r3, [sp, #4]
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d94:	2178      	movs	r1, #120	; 0x78
 8001d96:	481e      	ldr	r0, [pc, #120]	; (8001e10 <FreqMenu_DrawPresetMenu+0x824>)
 8001d98:	f00c fa58 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d9c:	7afb      	ldrb	r3, [r7, #11]
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	2300      	movs	r3, #0
 8001da2:	9301      	str	r3, [sp, #4]
 8001da4:	2302      	movs	r3, #2
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001dac:	2178      	movs	r1, #120	; 0x78
 8001dae:	4819      	ldr	r0, [pc, #100]	; (8001e14 <FreqMenu_DrawPresetMenu+0x828>)
 8001db0:	f00c fa4c 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001db4:	7abb      	ldrb	r3, [r7, #10]
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	2300      	movs	r3, #0
 8001dba:	9301      	str	r3, [sp, #4]
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001dc4:	2178      	movs	r1, #120	; 0x78
 8001dc6:	4814      	ldr	r0, [pc, #80]	; (8001e18 <FreqMenu_DrawPresetMenu+0x82c>)
 8001dc8:	f00c fa40 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001dcc:	7a7b      	ldrb	r3, [r7, #9]
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	9301      	str	r3, [sp, #4]
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ddc:	2178      	movs	r1, #120	; 0x78
 8001dde:	480f      	ldr	r0, [pc, #60]	; (8001e1c <FreqMenu_DrawPresetMenu+0x830>)
 8001de0:	f00c fa34 	bl	800e24c <ILI9341_Draw_Text>
				break;
 8001de4:	f000 be8e 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
 8001de8:	08013070 	.word	0x08013070
 8001dec:	08013078 	.word	0x08013078
 8001df0:	08013080 	.word	0x08013080
 8001df4:	08013088 	.word	0x08013088
 8001df8:	08013090 	.word	0x08013090
 8001dfc:	08013098 	.word	0x08013098
 8001e00:	080130a0 	.word	0x080130a0
 8001e04:	080130a8 	.word	0x080130a8
 8001e08:	080130b0 	.word	0x080130b0
 8001e0c:	080130b8 	.word	0x080130b8
 8001e10:	080130c0 	.word	0x080130c0
 8001e14:	080130c8 	.word	0x080130c8
 8001e18:	080130d0 	.word	0x080130d0
 8001e1c:	080130d8 	.word	0x080130d8
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e20:	7bfb      	ldrb	r3, [r7, #15]
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	2300      	movs	r3, #0
 8001e26:	9301      	str	r3, [sp, #4]
 8001e28:	2302      	movs	r3, #2
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e30:	2105      	movs	r1, #5
 8001e32:	48a5      	ldr	r0, [pc, #660]	; (80020c8 <FreqMenu_DrawPresetMenu+0xadc>)
 8001e34:	f00c fa0a 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e38:	7bbb      	ldrb	r3, [r7, #14]
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	9301      	str	r3, [sp, #4]
 8001e40:	2302      	movs	r3, #2
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e48:	2105      	movs	r1, #5
 8001e4a:	48a0      	ldr	r0, [pc, #640]	; (80020cc <FreqMenu_DrawPresetMenu+0xae0>)
 8001e4c:	f00c f9fe 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e50:	7b7b      	ldrb	r3, [r7, #13]
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	2300      	movs	r3, #0
 8001e56:	9301      	str	r3, [sp, #4]
 8001e58:	2302      	movs	r3, #2
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e60:	2105      	movs	r1, #5
 8001e62:	489b      	ldr	r0, [pc, #620]	; (80020d0 <FreqMenu_DrawPresetMenu+0xae4>)
 8001e64:	f00c f9f2 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e68:	7b3b      	ldrb	r3, [r7, #12]
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	9301      	str	r3, [sp, #4]
 8001e70:	2302      	movs	r3, #2
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e78:	2105      	movs	r1, #5
 8001e7a:	4896      	ldr	r0, [pc, #600]	; (80020d4 <FreqMenu_DrawPresetMenu+0xae8>)
 8001e7c:	f00c f9e6 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e80:	7afb      	ldrb	r3, [r7, #11]
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	2300      	movs	r3, #0
 8001e86:	9301      	str	r3, [sp, #4]
 8001e88:	2302      	movs	r3, #2
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e90:	2105      	movs	r1, #5
 8001e92:	4891      	ldr	r0, [pc, #580]	; (80020d8 <FreqMenu_DrawPresetMenu+0xaec>)
 8001e94:	f00c f9da 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001e98:	7abb      	ldrb	r3, [r7, #10]
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001ea0:	9301      	str	r3, [sp, #4]
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	9300      	str	r3, [sp, #0]
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	2105      	movs	r1, #5
 8001eaa:	488c      	ldr	r0, [pc, #560]	; (80020dc <FreqMenu_DrawPresetMenu+0xaf0>)
 8001eac:	f00c f9ce 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001eb0:	7a7b      	ldrb	r3, [r7, #9]
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	9301      	str	r3, [sp, #4]
 8001eb8:	2302      	movs	r3, #2
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ec0:	2105      	movs	r1, #5
 8001ec2:	4887      	ldr	r0, [pc, #540]	; (80020e0 <FreqMenu_DrawPresetMenu+0xaf4>)
 8001ec4:	f00c f9c2 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	2300      	movs	r3, #0
 8001ece:	9301      	str	r3, [sp, #4]
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ed8:	2178      	movs	r1, #120	; 0x78
 8001eda:	4882      	ldr	r0, [pc, #520]	; (80020e4 <FreqMenu_DrawPresetMenu+0xaf8>)
 8001edc:	f00c f9b6 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ee0:	7bbb      	ldrb	r3, [r7, #14]
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	9301      	str	r3, [sp, #4]
 8001ee8:	2302      	movs	r3, #2
 8001eea:	9300      	str	r3, [sp, #0]
 8001eec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ef0:	2178      	movs	r1, #120	; 0x78
 8001ef2:	487d      	ldr	r0, [pc, #500]	; (80020e8 <FreqMenu_DrawPresetMenu+0xafc>)
 8001ef4:	f00c f9aa 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ef8:	7b7b      	ldrb	r3, [r7, #13]
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	2300      	movs	r3, #0
 8001efe:	9301      	str	r3, [sp, #4]
 8001f00:	2302      	movs	r3, #2
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f08:	2178      	movs	r1, #120	; 0x78
 8001f0a:	4878      	ldr	r0, [pc, #480]	; (80020ec <FreqMenu_DrawPresetMenu+0xb00>)
 8001f0c:	f00c f99e 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f10:	7b3b      	ldrb	r3, [r7, #12]
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	2300      	movs	r3, #0
 8001f16:	9301      	str	r3, [sp, #4]
 8001f18:	2302      	movs	r3, #2
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f20:	2178      	movs	r1, #120	; 0x78
 8001f22:	4873      	ldr	r0, [pc, #460]	; (80020f0 <FreqMenu_DrawPresetMenu+0xb04>)
 8001f24:	f00c f992 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f28:	7afb      	ldrb	r3, [r7, #11]
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	9301      	str	r3, [sp, #4]
 8001f30:	2302      	movs	r3, #2
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f38:	2178      	movs	r1, #120	; 0x78
 8001f3a:	486e      	ldr	r0, [pc, #440]	; (80020f4 <FreqMenu_DrawPresetMenu+0xb08>)
 8001f3c:	f00c f986 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f40:	7abb      	ldrb	r3, [r7, #10]
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	2300      	movs	r3, #0
 8001f46:	9301      	str	r3, [sp, #4]
 8001f48:	2302      	movs	r3, #2
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f50:	2178      	movs	r1, #120	; 0x78
 8001f52:	4869      	ldr	r0, [pc, #420]	; (80020f8 <FreqMenu_DrawPresetMenu+0xb0c>)
 8001f54:	f00c f97a 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f58:	7a7b      	ldrb	r3, [r7, #9]
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	9301      	str	r3, [sp, #4]
 8001f60:	2302      	movs	r3, #2
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f68:	2178      	movs	r1, #120	; 0x78
 8001f6a:	4864      	ldr	r0, [pc, #400]	; (80020fc <FreqMenu_DrawPresetMenu+0xb10>)
 8001f6c:	f00c f96e 	bl	800e24c <ILI9341_Draw_Text>
				break;
 8001f70:	f000 bdc8 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f74:	7bfb      	ldrb	r3, [r7, #15]
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	2300      	movs	r3, #0
 8001f7a:	9301      	str	r3, [sp, #4]
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f84:	2105      	movs	r1, #5
 8001f86:	4850      	ldr	r0, [pc, #320]	; (80020c8 <FreqMenu_DrawPresetMenu+0xadc>)
 8001f88:	f00c f960 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f8c:	7bbb      	ldrb	r3, [r7, #14]
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	2300      	movs	r3, #0
 8001f92:	9301      	str	r3, [sp, #4]
 8001f94:	2302      	movs	r3, #2
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f9c:	2105      	movs	r1, #5
 8001f9e:	484b      	ldr	r0, [pc, #300]	; (80020cc <FreqMenu_DrawPresetMenu+0xae0>)
 8001fa0:	f00c f954 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fa4:	7b7b      	ldrb	r3, [r7, #13]
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	2300      	movs	r3, #0
 8001faa:	9301      	str	r3, [sp, #4]
 8001fac:	2302      	movs	r3, #2
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fb4:	2105      	movs	r1, #5
 8001fb6:	4846      	ldr	r0, [pc, #280]	; (80020d0 <FreqMenu_DrawPresetMenu+0xae4>)
 8001fb8:	f00c f948 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fbc:	7b3b      	ldrb	r3, [r7, #12]
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	9301      	str	r3, [sp, #4]
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fcc:	2105      	movs	r1, #5
 8001fce:	4841      	ldr	r0, [pc, #260]	; (80020d4 <FreqMenu_DrawPresetMenu+0xae8>)
 8001fd0:	f00c f93c 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fd4:	7afb      	ldrb	r3, [r7, #11]
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	2300      	movs	r3, #0
 8001fda:	9301      	str	r3, [sp, #4]
 8001fdc:	2302      	movs	r3, #2
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fe4:	2105      	movs	r1, #5
 8001fe6:	483c      	ldr	r0, [pc, #240]	; (80020d8 <FreqMenu_DrawPresetMenu+0xaec>)
 8001fe8:	f00c f930 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fec:	7abb      	ldrb	r3, [r7, #10]
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	9301      	str	r3, [sp, #4]
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ffc:	2105      	movs	r1, #5
 8001ffe:	4837      	ldr	r0, [pc, #220]	; (80020dc <FreqMenu_DrawPresetMenu+0xaf0>)
 8002000:	f00c f924 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002004:	7a7b      	ldrb	r3, [r7, #9]
 8002006:	b29a      	uxth	r2, r3
 8002008:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800200c:	9301      	str	r3, [sp, #4]
 800200e:	2302      	movs	r3, #2
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	2300      	movs	r3, #0
 8002014:	2105      	movs	r1, #5
 8002016:	4832      	ldr	r0, [pc, #200]	; (80020e0 <FreqMenu_DrawPresetMenu+0xaf4>)
 8002018:	f00c f918 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800201c:	7bfb      	ldrb	r3, [r7, #15]
 800201e:	b29a      	uxth	r2, r3
 8002020:	2300      	movs	r3, #0
 8002022:	9301      	str	r3, [sp, #4]
 8002024:	2302      	movs	r3, #2
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800202c:	2178      	movs	r1, #120	; 0x78
 800202e:	482d      	ldr	r0, [pc, #180]	; (80020e4 <FreqMenu_DrawPresetMenu+0xaf8>)
 8002030:	f00c f90c 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002034:	7bbb      	ldrb	r3, [r7, #14]
 8002036:	b29a      	uxth	r2, r3
 8002038:	2300      	movs	r3, #0
 800203a:	9301      	str	r3, [sp, #4]
 800203c:	2302      	movs	r3, #2
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002044:	2178      	movs	r1, #120	; 0x78
 8002046:	4828      	ldr	r0, [pc, #160]	; (80020e8 <FreqMenu_DrawPresetMenu+0xafc>)
 8002048:	f00c f900 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800204c:	7b7b      	ldrb	r3, [r7, #13]
 800204e:	b29a      	uxth	r2, r3
 8002050:	2300      	movs	r3, #0
 8002052:	9301      	str	r3, [sp, #4]
 8002054:	2302      	movs	r3, #2
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800205c:	2178      	movs	r1, #120	; 0x78
 800205e:	4823      	ldr	r0, [pc, #140]	; (80020ec <FreqMenu_DrawPresetMenu+0xb00>)
 8002060:	f00c f8f4 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002064:	7b3b      	ldrb	r3, [r7, #12]
 8002066:	b29a      	uxth	r2, r3
 8002068:	2300      	movs	r3, #0
 800206a:	9301      	str	r3, [sp, #4]
 800206c:	2302      	movs	r3, #2
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002074:	2178      	movs	r1, #120	; 0x78
 8002076:	481e      	ldr	r0, [pc, #120]	; (80020f0 <FreqMenu_DrawPresetMenu+0xb04>)
 8002078:	f00c f8e8 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800207c:	7afb      	ldrb	r3, [r7, #11]
 800207e:	b29a      	uxth	r2, r3
 8002080:	2300      	movs	r3, #0
 8002082:	9301      	str	r3, [sp, #4]
 8002084:	2302      	movs	r3, #2
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800208c:	2178      	movs	r1, #120	; 0x78
 800208e:	4819      	ldr	r0, [pc, #100]	; (80020f4 <FreqMenu_DrawPresetMenu+0xb08>)
 8002090:	f00c f8dc 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002094:	7abb      	ldrb	r3, [r7, #10]
 8002096:	b29a      	uxth	r2, r3
 8002098:	2300      	movs	r3, #0
 800209a:	9301      	str	r3, [sp, #4]
 800209c:	2302      	movs	r3, #2
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020a4:	2178      	movs	r1, #120	; 0x78
 80020a6:	4814      	ldr	r0, [pc, #80]	; (80020f8 <FreqMenu_DrawPresetMenu+0xb0c>)
 80020a8:	f00c f8d0 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020ac:	7a7b      	ldrb	r3, [r7, #9]
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	2300      	movs	r3, #0
 80020b2:	9301      	str	r3, [sp, #4]
 80020b4:	2302      	movs	r3, #2
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020bc:	2178      	movs	r1, #120	; 0x78
 80020be:	480f      	ldr	r0, [pc, #60]	; (80020fc <FreqMenu_DrawPresetMenu+0xb10>)
 80020c0:	f00c f8c4 	bl	800e24c <ILI9341_Draw_Text>
				break;
 80020c4:	f000 bd1e 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
 80020c8:	08013070 	.word	0x08013070
 80020cc:	08013078 	.word	0x08013078
 80020d0:	08013080 	.word	0x08013080
 80020d4:	08013088 	.word	0x08013088
 80020d8:	08013090 	.word	0x08013090
 80020dc:	08013098 	.word	0x08013098
 80020e0:	080130a0 	.word	0x080130a0
 80020e4:	080130a8 	.word	0x080130a8
 80020e8:	080130b0 	.word	0x080130b0
 80020ec:	080130b8 	.word	0x080130b8
 80020f0:	080130c0 	.word	0x080130c0
 80020f4:	080130c8 	.word	0x080130c8
 80020f8:	080130d0 	.word	0x080130d0
 80020fc:	080130d8 	.word	0x080130d8
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002100:	7bfb      	ldrb	r3, [r7, #15]
 8002102:	b29a      	uxth	r2, r3
 8002104:	2300      	movs	r3, #0
 8002106:	9301      	str	r3, [sp, #4]
 8002108:	2302      	movs	r3, #2
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002110:	2105      	movs	r1, #5
 8002112:	48a5      	ldr	r0, [pc, #660]	; (80023a8 <FreqMenu_DrawPresetMenu+0xdbc>)
 8002114:	f00c f89a 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002118:	7bbb      	ldrb	r3, [r7, #14]
 800211a:	b29a      	uxth	r2, r3
 800211c:	2300      	movs	r3, #0
 800211e:	9301      	str	r3, [sp, #4]
 8002120:	2302      	movs	r3, #2
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002128:	2105      	movs	r1, #5
 800212a:	48a0      	ldr	r0, [pc, #640]	; (80023ac <FreqMenu_DrawPresetMenu+0xdc0>)
 800212c:	f00c f88e 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002130:	7b7b      	ldrb	r3, [r7, #13]
 8002132:	b29a      	uxth	r2, r3
 8002134:	2300      	movs	r3, #0
 8002136:	9301      	str	r3, [sp, #4]
 8002138:	2302      	movs	r3, #2
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002140:	2105      	movs	r1, #5
 8002142:	489b      	ldr	r0, [pc, #620]	; (80023b0 <FreqMenu_DrawPresetMenu+0xdc4>)
 8002144:	f00c f882 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002148:	7b3b      	ldrb	r3, [r7, #12]
 800214a:	b29a      	uxth	r2, r3
 800214c:	2300      	movs	r3, #0
 800214e:	9301      	str	r3, [sp, #4]
 8002150:	2302      	movs	r3, #2
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002158:	2105      	movs	r1, #5
 800215a:	4896      	ldr	r0, [pc, #600]	; (80023b4 <FreqMenu_DrawPresetMenu+0xdc8>)
 800215c:	f00c f876 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002160:	7afb      	ldrb	r3, [r7, #11]
 8002162:	b29a      	uxth	r2, r3
 8002164:	2300      	movs	r3, #0
 8002166:	9301      	str	r3, [sp, #4]
 8002168:	2302      	movs	r3, #2
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002170:	2105      	movs	r1, #5
 8002172:	4891      	ldr	r0, [pc, #580]	; (80023b8 <FreqMenu_DrawPresetMenu+0xdcc>)
 8002174:	f00c f86a 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002178:	7abb      	ldrb	r3, [r7, #10]
 800217a:	b29a      	uxth	r2, r3
 800217c:	2300      	movs	r3, #0
 800217e:	9301      	str	r3, [sp, #4]
 8002180:	2302      	movs	r3, #2
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002188:	2105      	movs	r1, #5
 800218a:	488c      	ldr	r0, [pc, #560]	; (80023bc <FreqMenu_DrawPresetMenu+0xdd0>)
 800218c:	f00c f85e 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002190:	7a7b      	ldrb	r3, [r7, #9]
 8002192:	b29a      	uxth	r2, r3
 8002194:	2300      	movs	r3, #0
 8002196:	9301      	str	r3, [sp, #4]
 8002198:	2302      	movs	r3, #2
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021a0:	2105      	movs	r1, #5
 80021a2:	4887      	ldr	r0, [pc, #540]	; (80023c0 <FreqMenu_DrawPresetMenu+0xdd4>)
 80021a4:	f00c f852 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80021a8:	7bfb      	ldrb	r3, [r7, #15]
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80021b0:	9301      	str	r3, [sp, #4]
 80021b2:	2302      	movs	r3, #2
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	2300      	movs	r3, #0
 80021b8:	2178      	movs	r1, #120	; 0x78
 80021ba:	4882      	ldr	r0, [pc, #520]	; (80023c4 <FreqMenu_DrawPresetMenu+0xdd8>)
 80021bc:	f00c f846 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021c0:	7bbb      	ldrb	r3, [r7, #14]
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	2300      	movs	r3, #0
 80021c6:	9301      	str	r3, [sp, #4]
 80021c8:	2302      	movs	r3, #2
 80021ca:	9300      	str	r3, [sp, #0]
 80021cc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021d0:	2178      	movs	r1, #120	; 0x78
 80021d2:	487d      	ldr	r0, [pc, #500]	; (80023c8 <FreqMenu_DrawPresetMenu+0xddc>)
 80021d4:	f00c f83a 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021d8:	7b7b      	ldrb	r3, [r7, #13]
 80021da:	b29a      	uxth	r2, r3
 80021dc:	2300      	movs	r3, #0
 80021de:	9301      	str	r3, [sp, #4]
 80021e0:	2302      	movs	r3, #2
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021e8:	2178      	movs	r1, #120	; 0x78
 80021ea:	4878      	ldr	r0, [pc, #480]	; (80023cc <FreqMenu_DrawPresetMenu+0xde0>)
 80021ec:	f00c f82e 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021f0:	7b3b      	ldrb	r3, [r7, #12]
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	2300      	movs	r3, #0
 80021f6:	9301      	str	r3, [sp, #4]
 80021f8:	2302      	movs	r3, #2
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002200:	2178      	movs	r1, #120	; 0x78
 8002202:	4873      	ldr	r0, [pc, #460]	; (80023d0 <FreqMenu_DrawPresetMenu+0xde4>)
 8002204:	f00c f822 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002208:	7afb      	ldrb	r3, [r7, #11]
 800220a:	b29a      	uxth	r2, r3
 800220c:	2300      	movs	r3, #0
 800220e:	9301      	str	r3, [sp, #4]
 8002210:	2302      	movs	r3, #2
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002218:	2178      	movs	r1, #120	; 0x78
 800221a:	486e      	ldr	r0, [pc, #440]	; (80023d4 <FreqMenu_DrawPresetMenu+0xde8>)
 800221c:	f00c f816 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002220:	7abb      	ldrb	r3, [r7, #10]
 8002222:	b29a      	uxth	r2, r3
 8002224:	2300      	movs	r3, #0
 8002226:	9301      	str	r3, [sp, #4]
 8002228:	2302      	movs	r3, #2
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002230:	2178      	movs	r1, #120	; 0x78
 8002232:	4869      	ldr	r0, [pc, #420]	; (80023d8 <FreqMenu_DrawPresetMenu+0xdec>)
 8002234:	f00c f80a 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002238:	7a7b      	ldrb	r3, [r7, #9]
 800223a:	b29a      	uxth	r2, r3
 800223c:	2300      	movs	r3, #0
 800223e:	9301      	str	r3, [sp, #4]
 8002240:	2302      	movs	r3, #2
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002248:	2178      	movs	r1, #120	; 0x78
 800224a:	4864      	ldr	r0, [pc, #400]	; (80023dc <FreqMenu_DrawPresetMenu+0xdf0>)
 800224c:	f00b fffe 	bl	800e24c <ILI9341_Draw_Text>
				break;
 8002250:	f000 bc58 	b.w	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002254:	7bfb      	ldrb	r3, [r7, #15]
 8002256:	b29a      	uxth	r2, r3
 8002258:	2300      	movs	r3, #0
 800225a:	9301      	str	r3, [sp, #4]
 800225c:	2302      	movs	r3, #2
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002264:	2105      	movs	r1, #5
 8002266:	4850      	ldr	r0, [pc, #320]	; (80023a8 <FreqMenu_DrawPresetMenu+0xdbc>)
 8002268:	f00b fff0 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800226c:	7bbb      	ldrb	r3, [r7, #14]
 800226e:	b29a      	uxth	r2, r3
 8002270:	2300      	movs	r3, #0
 8002272:	9301      	str	r3, [sp, #4]
 8002274:	2302      	movs	r3, #2
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800227c:	2105      	movs	r1, #5
 800227e:	484b      	ldr	r0, [pc, #300]	; (80023ac <FreqMenu_DrawPresetMenu+0xdc0>)
 8002280:	f00b ffe4 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002284:	7b7b      	ldrb	r3, [r7, #13]
 8002286:	b29a      	uxth	r2, r3
 8002288:	2300      	movs	r3, #0
 800228a:	9301      	str	r3, [sp, #4]
 800228c:	2302      	movs	r3, #2
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002294:	2105      	movs	r1, #5
 8002296:	4846      	ldr	r0, [pc, #280]	; (80023b0 <FreqMenu_DrawPresetMenu+0xdc4>)
 8002298:	f00b ffd8 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800229c:	7b3b      	ldrb	r3, [r7, #12]
 800229e:	b29a      	uxth	r2, r3
 80022a0:	2300      	movs	r3, #0
 80022a2:	9301      	str	r3, [sp, #4]
 80022a4:	2302      	movs	r3, #2
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022ac:	2105      	movs	r1, #5
 80022ae:	4841      	ldr	r0, [pc, #260]	; (80023b4 <FreqMenu_DrawPresetMenu+0xdc8>)
 80022b0:	f00b ffcc 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022b4:	7afb      	ldrb	r3, [r7, #11]
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	2300      	movs	r3, #0
 80022ba:	9301      	str	r3, [sp, #4]
 80022bc:	2302      	movs	r3, #2
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022c4:	2105      	movs	r1, #5
 80022c6:	483c      	ldr	r0, [pc, #240]	; (80023b8 <FreqMenu_DrawPresetMenu+0xdcc>)
 80022c8:	f00b ffc0 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022cc:	7abb      	ldrb	r3, [r7, #10]
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	2300      	movs	r3, #0
 80022d2:	9301      	str	r3, [sp, #4]
 80022d4:	2302      	movs	r3, #2
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022dc:	2105      	movs	r1, #5
 80022de:	4837      	ldr	r0, [pc, #220]	; (80023bc <FreqMenu_DrawPresetMenu+0xdd0>)
 80022e0:	f00b ffb4 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022e4:	7a7b      	ldrb	r3, [r7, #9]
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	2300      	movs	r3, #0
 80022ea:	9301      	str	r3, [sp, #4]
 80022ec:	2302      	movs	r3, #2
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022f4:	2105      	movs	r1, #5
 80022f6:	4832      	ldr	r0, [pc, #200]	; (80023c0 <FreqMenu_DrawPresetMenu+0xdd4>)
 80022f8:	f00b ffa8 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
 80022fe:	b29a      	uxth	r2, r3
 8002300:	2300      	movs	r3, #0
 8002302:	9301      	str	r3, [sp, #4]
 8002304:	2302      	movs	r3, #2
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800230c:	2178      	movs	r1, #120	; 0x78
 800230e:	482d      	ldr	r0, [pc, #180]	; (80023c4 <FreqMenu_DrawPresetMenu+0xdd8>)
 8002310:	f00b ff9c 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002314:	7bbb      	ldrb	r3, [r7, #14]
 8002316:	b29a      	uxth	r2, r3
 8002318:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800231c:	9301      	str	r3, [sp, #4]
 800231e:	2302      	movs	r3, #2
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	2300      	movs	r3, #0
 8002324:	2178      	movs	r1, #120	; 0x78
 8002326:	4828      	ldr	r0, [pc, #160]	; (80023c8 <FreqMenu_DrawPresetMenu+0xddc>)
 8002328:	f00b ff90 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800232c:	7b7b      	ldrb	r3, [r7, #13]
 800232e:	b29a      	uxth	r2, r3
 8002330:	2300      	movs	r3, #0
 8002332:	9301      	str	r3, [sp, #4]
 8002334:	2302      	movs	r3, #2
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800233c:	2178      	movs	r1, #120	; 0x78
 800233e:	4823      	ldr	r0, [pc, #140]	; (80023cc <FreqMenu_DrawPresetMenu+0xde0>)
 8002340:	f00b ff84 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002344:	7b3b      	ldrb	r3, [r7, #12]
 8002346:	b29a      	uxth	r2, r3
 8002348:	2300      	movs	r3, #0
 800234a:	9301      	str	r3, [sp, #4]
 800234c:	2302      	movs	r3, #2
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002354:	2178      	movs	r1, #120	; 0x78
 8002356:	481e      	ldr	r0, [pc, #120]	; (80023d0 <FreqMenu_DrawPresetMenu+0xde4>)
 8002358:	f00b ff78 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800235c:	7afb      	ldrb	r3, [r7, #11]
 800235e:	b29a      	uxth	r2, r3
 8002360:	2300      	movs	r3, #0
 8002362:	9301      	str	r3, [sp, #4]
 8002364:	2302      	movs	r3, #2
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800236c:	2178      	movs	r1, #120	; 0x78
 800236e:	4819      	ldr	r0, [pc, #100]	; (80023d4 <FreqMenu_DrawPresetMenu+0xde8>)
 8002370:	f00b ff6c 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002374:	7abb      	ldrb	r3, [r7, #10]
 8002376:	b29a      	uxth	r2, r3
 8002378:	2300      	movs	r3, #0
 800237a:	9301      	str	r3, [sp, #4]
 800237c:	2302      	movs	r3, #2
 800237e:	9300      	str	r3, [sp, #0]
 8002380:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002384:	2178      	movs	r1, #120	; 0x78
 8002386:	4814      	ldr	r0, [pc, #80]	; (80023d8 <FreqMenu_DrawPresetMenu+0xdec>)
 8002388:	f00b ff60 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800238c:	7a7b      	ldrb	r3, [r7, #9]
 800238e:	b29a      	uxth	r2, r3
 8002390:	2300      	movs	r3, #0
 8002392:	9301      	str	r3, [sp, #4]
 8002394:	2302      	movs	r3, #2
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800239c:	2178      	movs	r1, #120	; 0x78
 800239e:	480f      	ldr	r0, [pc, #60]	; (80023dc <FreqMenu_DrawPresetMenu+0xdf0>)
 80023a0:	f00b ff54 	bl	800e24c <ILI9341_Draw_Text>
				break;
 80023a4:	e3ae      	b.n	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
 80023a6:	bf00      	nop
 80023a8:	08013070 	.word	0x08013070
 80023ac:	08013078 	.word	0x08013078
 80023b0:	08013080 	.word	0x08013080
 80023b4:	08013088 	.word	0x08013088
 80023b8:	08013090 	.word	0x08013090
 80023bc:	08013098 	.word	0x08013098
 80023c0:	080130a0 	.word	0x080130a0
 80023c4:	080130a8 	.word	0x080130a8
 80023c8:	080130b0 	.word	0x080130b0
 80023cc:	080130b8 	.word	0x080130b8
 80023d0:	080130c0 	.word	0x080130c0
 80023d4:	080130c8 	.word	0x080130c8
 80023d8:	080130d0 	.word	0x080130d0
 80023dc:	080130d8 	.word	0x080130d8
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	2300      	movs	r3, #0
 80023e6:	9301      	str	r3, [sp, #4]
 80023e8:	2302      	movs	r3, #2
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023f0:	2105      	movs	r1, #5
 80023f2:	48a4      	ldr	r0, [pc, #656]	; (8002684 <FreqMenu_DrawPresetMenu+0x1098>)
 80023f4:	f00b ff2a 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023f8:	7bbb      	ldrb	r3, [r7, #14]
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	2300      	movs	r3, #0
 80023fe:	9301      	str	r3, [sp, #4]
 8002400:	2302      	movs	r3, #2
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002408:	2105      	movs	r1, #5
 800240a:	489f      	ldr	r0, [pc, #636]	; (8002688 <FreqMenu_DrawPresetMenu+0x109c>)
 800240c:	f00b ff1e 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002410:	7b7b      	ldrb	r3, [r7, #13]
 8002412:	b29a      	uxth	r2, r3
 8002414:	2300      	movs	r3, #0
 8002416:	9301      	str	r3, [sp, #4]
 8002418:	2302      	movs	r3, #2
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002420:	2105      	movs	r1, #5
 8002422:	489a      	ldr	r0, [pc, #616]	; (800268c <FreqMenu_DrawPresetMenu+0x10a0>)
 8002424:	f00b ff12 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002428:	7b3b      	ldrb	r3, [r7, #12]
 800242a:	b29a      	uxth	r2, r3
 800242c:	2300      	movs	r3, #0
 800242e:	9301      	str	r3, [sp, #4]
 8002430:	2302      	movs	r3, #2
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002438:	2105      	movs	r1, #5
 800243a:	4895      	ldr	r0, [pc, #596]	; (8002690 <FreqMenu_DrawPresetMenu+0x10a4>)
 800243c:	f00b ff06 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002440:	7afb      	ldrb	r3, [r7, #11]
 8002442:	b29a      	uxth	r2, r3
 8002444:	2300      	movs	r3, #0
 8002446:	9301      	str	r3, [sp, #4]
 8002448:	2302      	movs	r3, #2
 800244a:	9300      	str	r3, [sp, #0]
 800244c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002450:	2105      	movs	r1, #5
 8002452:	4890      	ldr	r0, [pc, #576]	; (8002694 <FreqMenu_DrawPresetMenu+0x10a8>)
 8002454:	f00b fefa 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002458:	7abb      	ldrb	r3, [r7, #10]
 800245a:	b29a      	uxth	r2, r3
 800245c:	2300      	movs	r3, #0
 800245e:	9301      	str	r3, [sp, #4]
 8002460:	2302      	movs	r3, #2
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002468:	2105      	movs	r1, #5
 800246a:	488b      	ldr	r0, [pc, #556]	; (8002698 <FreqMenu_DrawPresetMenu+0x10ac>)
 800246c:	f00b feee 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002470:	7a7b      	ldrb	r3, [r7, #9]
 8002472:	b29a      	uxth	r2, r3
 8002474:	2300      	movs	r3, #0
 8002476:	9301      	str	r3, [sp, #4]
 8002478:	2302      	movs	r3, #2
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002480:	2105      	movs	r1, #5
 8002482:	4886      	ldr	r0, [pc, #536]	; (800269c <FreqMenu_DrawPresetMenu+0x10b0>)
 8002484:	f00b fee2 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002488:	7bfb      	ldrb	r3, [r7, #15]
 800248a:	b29a      	uxth	r2, r3
 800248c:	2300      	movs	r3, #0
 800248e:	9301      	str	r3, [sp, #4]
 8002490:	2302      	movs	r3, #2
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002498:	2178      	movs	r1, #120	; 0x78
 800249a:	4881      	ldr	r0, [pc, #516]	; (80026a0 <FreqMenu_DrawPresetMenu+0x10b4>)
 800249c:	f00b fed6 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024a0:	7bbb      	ldrb	r3, [r7, #14]
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	2300      	movs	r3, #0
 80024a6:	9301      	str	r3, [sp, #4]
 80024a8:	2302      	movs	r3, #2
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024b0:	2178      	movs	r1, #120	; 0x78
 80024b2:	487c      	ldr	r0, [pc, #496]	; (80026a4 <FreqMenu_DrawPresetMenu+0x10b8>)
 80024b4:	f00b feca 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80024b8:	7b7b      	ldrb	r3, [r7, #13]
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80024c0:	9301      	str	r3, [sp, #4]
 80024c2:	2302      	movs	r3, #2
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	2300      	movs	r3, #0
 80024c8:	2178      	movs	r1, #120	; 0x78
 80024ca:	4877      	ldr	r0, [pc, #476]	; (80026a8 <FreqMenu_DrawPresetMenu+0x10bc>)
 80024cc:	f00b febe 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024d0:	7b3b      	ldrb	r3, [r7, #12]
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	2300      	movs	r3, #0
 80024d6:	9301      	str	r3, [sp, #4]
 80024d8:	2302      	movs	r3, #2
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024e0:	2178      	movs	r1, #120	; 0x78
 80024e2:	4872      	ldr	r0, [pc, #456]	; (80026ac <FreqMenu_DrawPresetMenu+0x10c0>)
 80024e4:	f00b feb2 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024e8:	7afb      	ldrb	r3, [r7, #11]
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	2300      	movs	r3, #0
 80024ee:	9301      	str	r3, [sp, #4]
 80024f0:	2302      	movs	r3, #2
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024f8:	2178      	movs	r1, #120	; 0x78
 80024fa:	486d      	ldr	r0, [pc, #436]	; (80026b0 <FreqMenu_DrawPresetMenu+0x10c4>)
 80024fc:	f00b fea6 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002500:	7abb      	ldrb	r3, [r7, #10]
 8002502:	b29a      	uxth	r2, r3
 8002504:	2300      	movs	r3, #0
 8002506:	9301      	str	r3, [sp, #4]
 8002508:	2302      	movs	r3, #2
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002510:	2178      	movs	r1, #120	; 0x78
 8002512:	4868      	ldr	r0, [pc, #416]	; (80026b4 <FreqMenu_DrawPresetMenu+0x10c8>)
 8002514:	f00b fe9a 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002518:	7a7b      	ldrb	r3, [r7, #9]
 800251a:	b29a      	uxth	r2, r3
 800251c:	2300      	movs	r3, #0
 800251e:	9301      	str	r3, [sp, #4]
 8002520:	2302      	movs	r3, #2
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002528:	2178      	movs	r1, #120	; 0x78
 800252a:	4863      	ldr	r0, [pc, #396]	; (80026b8 <FreqMenu_DrawPresetMenu+0x10cc>)
 800252c:	f00b fe8e 	bl	800e24c <ILI9341_Draw_Text>
				break;
 8002530:	e2e8      	b.n	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002532:	7bfb      	ldrb	r3, [r7, #15]
 8002534:	b29a      	uxth	r2, r3
 8002536:	2300      	movs	r3, #0
 8002538:	9301      	str	r3, [sp, #4]
 800253a:	2302      	movs	r3, #2
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002542:	2105      	movs	r1, #5
 8002544:	484f      	ldr	r0, [pc, #316]	; (8002684 <FreqMenu_DrawPresetMenu+0x1098>)
 8002546:	f00b fe81 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800254a:	7bbb      	ldrb	r3, [r7, #14]
 800254c:	b29a      	uxth	r2, r3
 800254e:	2300      	movs	r3, #0
 8002550:	9301      	str	r3, [sp, #4]
 8002552:	2302      	movs	r3, #2
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800255a:	2105      	movs	r1, #5
 800255c:	484a      	ldr	r0, [pc, #296]	; (8002688 <FreqMenu_DrawPresetMenu+0x109c>)
 800255e:	f00b fe75 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002562:	7b7b      	ldrb	r3, [r7, #13]
 8002564:	b29a      	uxth	r2, r3
 8002566:	2300      	movs	r3, #0
 8002568:	9301      	str	r3, [sp, #4]
 800256a:	2302      	movs	r3, #2
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002572:	2105      	movs	r1, #5
 8002574:	4845      	ldr	r0, [pc, #276]	; (800268c <FreqMenu_DrawPresetMenu+0x10a0>)
 8002576:	f00b fe69 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800257a:	7b3b      	ldrb	r3, [r7, #12]
 800257c:	b29a      	uxth	r2, r3
 800257e:	2300      	movs	r3, #0
 8002580:	9301      	str	r3, [sp, #4]
 8002582:	2302      	movs	r3, #2
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800258a:	2105      	movs	r1, #5
 800258c:	4840      	ldr	r0, [pc, #256]	; (8002690 <FreqMenu_DrawPresetMenu+0x10a4>)
 800258e:	f00b fe5d 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002592:	7afb      	ldrb	r3, [r7, #11]
 8002594:	b29a      	uxth	r2, r3
 8002596:	2300      	movs	r3, #0
 8002598:	9301      	str	r3, [sp, #4]
 800259a:	2302      	movs	r3, #2
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025a2:	2105      	movs	r1, #5
 80025a4:	483b      	ldr	r0, [pc, #236]	; (8002694 <FreqMenu_DrawPresetMenu+0x10a8>)
 80025a6:	f00b fe51 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025aa:	7abb      	ldrb	r3, [r7, #10]
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	2300      	movs	r3, #0
 80025b0:	9301      	str	r3, [sp, #4]
 80025b2:	2302      	movs	r3, #2
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025ba:	2105      	movs	r1, #5
 80025bc:	4836      	ldr	r0, [pc, #216]	; (8002698 <FreqMenu_DrawPresetMenu+0x10ac>)
 80025be:	f00b fe45 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025c2:	7a7b      	ldrb	r3, [r7, #9]
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	2300      	movs	r3, #0
 80025c8:	9301      	str	r3, [sp, #4]
 80025ca:	2302      	movs	r3, #2
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025d2:	2105      	movs	r1, #5
 80025d4:	4831      	ldr	r0, [pc, #196]	; (800269c <FreqMenu_DrawPresetMenu+0x10b0>)
 80025d6:	f00b fe39 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025da:	7bfb      	ldrb	r3, [r7, #15]
 80025dc:	b29a      	uxth	r2, r3
 80025de:	2300      	movs	r3, #0
 80025e0:	9301      	str	r3, [sp, #4]
 80025e2:	2302      	movs	r3, #2
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025ea:	2178      	movs	r1, #120	; 0x78
 80025ec:	482c      	ldr	r0, [pc, #176]	; (80026a0 <FreqMenu_DrawPresetMenu+0x10b4>)
 80025ee:	f00b fe2d 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025f2:	7bbb      	ldrb	r3, [r7, #14]
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	2300      	movs	r3, #0
 80025f8:	9301      	str	r3, [sp, #4]
 80025fa:	2302      	movs	r3, #2
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002602:	2178      	movs	r1, #120	; 0x78
 8002604:	4827      	ldr	r0, [pc, #156]	; (80026a4 <FreqMenu_DrawPresetMenu+0x10b8>)
 8002606:	f00b fe21 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800260a:	7b7b      	ldrb	r3, [r7, #13]
 800260c:	b29a      	uxth	r2, r3
 800260e:	2300      	movs	r3, #0
 8002610:	9301      	str	r3, [sp, #4]
 8002612:	2302      	movs	r3, #2
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800261a:	2178      	movs	r1, #120	; 0x78
 800261c:	4822      	ldr	r0, [pc, #136]	; (80026a8 <FreqMenu_DrawPresetMenu+0x10bc>)
 800261e:	f00b fe15 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002622:	7b3b      	ldrb	r3, [r7, #12]
 8002624:	b29a      	uxth	r2, r3
 8002626:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800262a:	9301      	str	r3, [sp, #4]
 800262c:	2302      	movs	r3, #2
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	2300      	movs	r3, #0
 8002632:	2178      	movs	r1, #120	; 0x78
 8002634:	481d      	ldr	r0, [pc, #116]	; (80026ac <FreqMenu_DrawPresetMenu+0x10c0>)
 8002636:	f00b fe09 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800263a:	7afb      	ldrb	r3, [r7, #11]
 800263c:	b29a      	uxth	r2, r3
 800263e:	2300      	movs	r3, #0
 8002640:	9301      	str	r3, [sp, #4]
 8002642:	2302      	movs	r3, #2
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800264a:	2178      	movs	r1, #120	; 0x78
 800264c:	4818      	ldr	r0, [pc, #96]	; (80026b0 <FreqMenu_DrawPresetMenu+0x10c4>)
 800264e:	f00b fdfd 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002652:	7abb      	ldrb	r3, [r7, #10]
 8002654:	b29a      	uxth	r2, r3
 8002656:	2300      	movs	r3, #0
 8002658:	9301      	str	r3, [sp, #4]
 800265a:	2302      	movs	r3, #2
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002662:	2178      	movs	r1, #120	; 0x78
 8002664:	4813      	ldr	r0, [pc, #76]	; (80026b4 <FreqMenu_DrawPresetMenu+0x10c8>)
 8002666:	f00b fdf1 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800266a:	7a7b      	ldrb	r3, [r7, #9]
 800266c:	b29a      	uxth	r2, r3
 800266e:	2300      	movs	r3, #0
 8002670:	9301      	str	r3, [sp, #4]
 8002672:	2302      	movs	r3, #2
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800267a:	2178      	movs	r1, #120	; 0x78
 800267c:	480e      	ldr	r0, [pc, #56]	; (80026b8 <FreqMenu_DrawPresetMenu+0x10cc>)
 800267e:	f00b fde5 	bl	800e24c <ILI9341_Draw_Text>
				break;
 8002682:	e23f      	b.n	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
 8002684:	08013070 	.word	0x08013070
 8002688:	08013078 	.word	0x08013078
 800268c:	08013080 	.word	0x08013080
 8002690:	08013088 	.word	0x08013088
 8002694:	08013090 	.word	0x08013090
 8002698:	08013098 	.word	0x08013098
 800269c:	080130a0 	.word	0x080130a0
 80026a0:	080130a8 	.word	0x080130a8
 80026a4:	080130b0 	.word	0x080130b0
 80026a8:	080130b8 	.word	0x080130b8
 80026ac:	080130c0 	.word	0x080130c0
 80026b0:	080130c8 	.word	0x080130c8
 80026b4:	080130d0 	.word	0x080130d0
 80026b8:	080130d8 	.word	0x080130d8
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
 80026be:	b29a      	uxth	r2, r3
 80026c0:	2300      	movs	r3, #0
 80026c2:	9301      	str	r3, [sp, #4]
 80026c4:	2302      	movs	r3, #2
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026cc:	2105      	movs	r1, #5
 80026ce:	48a4      	ldr	r0, [pc, #656]	; (8002960 <FreqMenu_DrawPresetMenu+0x1374>)
 80026d0:	f00b fdbc 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026d4:	7bbb      	ldrb	r3, [r7, #14]
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	2300      	movs	r3, #0
 80026da:	9301      	str	r3, [sp, #4]
 80026dc:	2302      	movs	r3, #2
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026e4:	2105      	movs	r1, #5
 80026e6:	489f      	ldr	r0, [pc, #636]	; (8002964 <FreqMenu_DrawPresetMenu+0x1378>)
 80026e8:	f00b fdb0 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026ec:	7b7b      	ldrb	r3, [r7, #13]
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	2300      	movs	r3, #0
 80026f2:	9301      	str	r3, [sp, #4]
 80026f4:	2302      	movs	r3, #2
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026fc:	2105      	movs	r1, #5
 80026fe:	489a      	ldr	r0, [pc, #616]	; (8002968 <FreqMenu_DrawPresetMenu+0x137c>)
 8002700:	f00b fda4 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002704:	7b3b      	ldrb	r3, [r7, #12]
 8002706:	b29a      	uxth	r2, r3
 8002708:	2300      	movs	r3, #0
 800270a:	9301      	str	r3, [sp, #4]
 800270c:	2302      	movs	r3, #2
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002714:	2105      	movs	r1, #5
 8002716:	4895      	ldr	r0, [pc, #596]	; (800296c <FreqMenu_DrawPresetMenu+0x1380>)
 8002718:	f00b fd98 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800271c:	7afb      	ldrb	r3, [r7, #11]
 800271e:	b29a      	uxth	r2, r3
 8002720:	2300      	movs	r3, #0
 8002722:	9301      	str	r3, [sp, #4]
 8002724:	2302      	movs	r3, #2
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800272c:	2105      	movs	r1, #5
 800272e:	4890      	ldr	r0, [pc, #576]	; (8002970 <FreqMenu_DrawPresetMenu+0x1384>)
 8002730:	f00b fd8c 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002734:	7abb      	ldrb	r3, [r7, #10]
 8002736:	b29a      	uxth	r2, r3
 8002738:	2300      	movs	r3, #0
 800273a:	9301      	str	r3, [sp, #4]
 800273c:	2302      	movs	r3, #2
 800273e:	9300      	str	r3, [sp, #0]
 8002740:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002744:	2105      	movs	r1, #5
 8002746:	488b      	ldr	r0, [pc, #556]	; (8002974 <FreqMenu_DrawPresetMenu+0x1388>)
 8002748:	f00b fd80 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800274c:	7a7b      	ldrb	r3, [r7, #9]
 800274e:	b29a      	uxth	r2, r3
 8002750:	2300      	movs	r3, #0
 8002752:	9301      	str	r3, [sp, #4]
 8002754:	2302      	movs	r3, #2
 8002756:	9300      	str	r3, [sp, #0]
 8002758:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800275c:	2105      	movs	r1, #5
 800275e:	4886      	ldr	r0, [pc, #536]	; (8002978 <FreqMenu_DrawPresetMenu+0x138c>)
 8002760:	f00b fd74 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	b29a      	uxth	r2, r3
 8002768:	2300      	movs	r3, #0
 800276a:	9301      	str	r3, [sp, #4]
 800276c:	2302      	movs	r3, #2
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002774:	2178      	movs	r1, #120	; 0x78
 8002776:	4881      	ldr	r0, [pc, #516]	; (800297c <FreqMenu_DrawPresetMenu+0x1390>)
 8002778:	f00b fd68 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800277c:	7bbb      	ldrb	r3, [r7, #14]
 800277e:	b29a      	uxth	r2, r3
 8002780:	2300      	movs	r3, #0
 8002782:	9301      	str	r3, [sp, #4]
 8002784:	2302      	movs	r3, #2
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800278c:	2178      	movs	r1, #120	; 0x78
 800278e:	487c      	ldr	r0, [pc, #496]	; (8002980 <FreqMenu_DrawPresetMenu+0x1394>)
 8002790:	f00b fd5c 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002794:	7b7b      	ldrb	r3, [r7, #13]
 8002796:	b29a      	uxth	r2, r3
 8002798:	2300      	movs	r3, #0
 800279a:	9301      	str	r3, [sp, #4]
 800279c:	2302      	movs	r3, #2
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027a4:	2178      	movs	r1, #120	; 0x78
 80027a6:	4877      	ldr	r0, [pc, #476]	; (8002984 <FreqMenu_DrawPresetMenu+0x1398>)
 80027a8:	f00b fd50 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027ac:	7b3b      	ldrb	r3, [r7, #12]
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	2300      	movs	r3, #0
 80027b2:	9301      	str	r3, [sp, #4]
 80027b4:	2302      	movs	r3, #2
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027bc:	2178      	movs	r1, #120	; 0x78
 80027be:	4872      	ldr	r0, [pc, #456]	; (8002988 <FreqMenu_DrawPresetMenu+0x139c>)
 80027c0:	f00b fd44 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80027c4:	7afb      	ldrb	r3, [r7, #11]
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80027cc:	9301      	str	r3, [sp, #4]
 80027ce:	2302      	movs	r3, #2
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	2300      	movs	r3, #0
 80027d4:	2178      	movs	r1, #120	; 0x78
 80027d6:	486d      	ldr	r0, [pc, #436]	; (800298c <FreqMenu_DrawPresetMenu+0x13a0>)
 80027d8:	f00b fd38 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027dc:	7abb      	ldrb	r3, [r7, #10]
 80027de:	b29a      	uxth	r2, r3
 80027e0:	2300      	movs	r3, #0
 80027e2:	9301      	str	r3, [sp, #4]
 80027e4:	2302      	movs	r3, #2
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027ec:	2178      	movs	r1, #120	; 0x78
 80027ee:	4868      	ldr	r0, [pc, #416]	; (8002990 <FreqMenu_DrawPresetMenu+0x13a4>)
 80027f0:	f00b fd2c 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027f4:	7a7b      	ldrb	r3, [r7, #9]
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	2300      	movs	r3, #0
 80027fa:	9301      	str	r3, [sp, #4]
 80027fc:	2302      	movs	r3, #2
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002804:	2178      	movs	r1, #120	; 0x78
 8002806:	4863      	ldr	r0, [pc, #396]	; (8002994 <FreqMenu_DrawPresetMenu+0x13a8>)
 8002808:	f00b fd20 	bl	800e24c <ILI9341_Draw_Text>
			break;
 800280c:	e17a      	b.n	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800280e:	7bfb      	ldrb	r3, [r7, #15]
 8002810:	b29a      	uxth	r2, r3
 8002812:	2300      	movs	r3, #0
 8002814:	9301      	str	r3, [sp, #4]
 8002816:	2302      	movs	r3, #2
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800281e:	2105      	movs	r1, #5
 8002820:	484f      	ldr	r0, [pc, #316]	; (8002960 <FreqMenu_DrawPresetMenu+0x1374>)
 8002822:	f00b fd13 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002826:	7bbb      	ldrb	r3, [r7, #14]
 8002828:	b29a      	uxth	r2, r3
 800282a:	2300      	movs	r3, #0
 800282c:	9301      	str	r3, [sp, #4]
 800282e:	2302      	movs	r3, #2
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002836:	2105      	movs	r1, #5
 8002838:	484a      	ldr	r0, [pc, #296]	; (8002964 <FreqMenu_DrawPresetMenu+0x1378>)
 800283a:	f00b fd07 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800283e:	7b7b      	ldrb	r3, [r7, #13]
 8002840:	b29a      	uxth	r2, r3
 8002842:	2300      	movs	r3, #0
 8002844:	9301      	str	r3, [sp, #4]
 8002846:	2302      	movs	r3, #2
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800284e:	2105      	movs	r1, #5
 8002850:	4845      	ldr	r0, [pc, #276]	; (8002968 <FreqMenu_DrawPresetMenu+0x137c>)
 8002852:	f00b fcfb 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002856:	7b3b      	ldrb	r3, [r7, #12]
 8002858:	b29a      	uxth	r2, r3
 800285a:	2300      	movs	r3, #0
 800285c:	9301      	str	r3, [sp, #4]
 800285e:	2302      	movs	r3, #2
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002866:	2105      	movs	r1, #5
 8002868:	4840      	ldr	r0, [pc, #256]	; (800296c <FreqMenu_DrawPresetMenu+0x1380>)
 800286a:	f00b fcef 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800286e:	7afb      	ldrb	r3, [r7, #11]
 8002870:	b29a      	uxth	r2, r3
 8002872:	2300      	movs	r3, #0
 8002874:	9301      	str	r3, [sp, #4]
 8002876:	2302      	movs	r3, #2
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800287e:	2105      	movs	r1, #5
 8002880:	483b      	ldr	r0, [pc, #236]	; (8002970 <FreqMenu_DrawPresetMenu+0x1384>)
 8002882:	f00b fce3 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002886:	7abb      	ldrb	r3, [r7, #10]
 8002888:	b29a      	uxth	r2, r3
 800288a:	2300      	movs	r3, #0
 800288c:	9301      	str	r3, [sp, #4]
 800288e:	2302      	movs	r3, #2
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002896:	2105      	movs	r1, #5
 8002898:	4836      	ldr	r0, [pc, #216]	; (8002974 <FreqMenu_DrawPresetMenu+0x1388>)
 800289a:	f00b fcd7 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800289e:	7a7b      	ldrb	r3, [r7, #9]
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	2300      	movs	r3, #0
 80028a4:	9301      	str	r3, [sp, #4]
 80028a6:	2302      	movs	r3, #2
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028ae:	2105      	movs	r1, #5
 80028b0:	4831      	ldr	r0, [pc, #196]	; (8002978 <FreqMenu_DrawPresetMenu+0x138c>)
 80028b2:	f00b fccb 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028b6:	7bfb      	ldrb	r3, [r7, #15]
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	2300      	movs	r3, #0
 80028bc:	9301      	str	r3, [sp, #4]
 80028be:	2302      	movs	r3, #2
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028c6:	2178      	movs	r1, #120	; 0x78
 80028c8:	482c      	ldr	r0, [pc, #176]	; (800297c <FreqMenu_DrawPresetMenu+0x1390>)
 80028ca:	f00b fcbf 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028ce:	7bbb      	ldrb	r3, [r7, #14]
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	2300      	movs	r3, #0
 80028d4:	9301      	str	r3, [sp, #4]
 80028d6:	2302      	movs	r3, #2
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028de:	2178      	movs	r1, #120	; 0x78
 80028e0:	4827      	ldr	r0, [pc, #156]	; (8002980 <FreqMenu_DrawPresetMenu+0x1394>)
 80028e2:	f00b fcb3 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028e6:	7b7b      	ldrb	r3, [r7, #13]
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	2300      	movs	r3, #0
 80028ec:	9301      	str	r3, [sp, #4]
 80028ee:	2302      	movs	r3, #2
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028f6:	2178      	movs	r1, #120	; 0x78
 80028f8:	4822      	ldr	r0, [pc, #136]	; (8002984 <FreqMenu_DrawPresetMenu+0x1398>)
 80028fa:	f00b fca7 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028fe:	7b3b      	ldrb	r3, [r7, #12]
 8002900:	b29a      	uxth	r2, r3
 8002902:	2300      	movs	r3, #0
 8002904:	9301      	str	r3, [sp, #4]
 8002906:	2302      	movs	r3, #2
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800290e:	2178      	movs	r1, #120	; 0x78
 8002910:	481d      	ldr	r0, [pc, #116]	; (8002988 <FreqMenu_DrawPresetMenu+0x139c>)
 8002912:	f00b fc9b 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002916:	7afb      	ldrb	r3, [r7, #11]
 8002918:	b29a      	uxth	r2, r3
 800291a:	2300      	movs	r3, #0
 800291c:	9301      	str	r3, [sp, #4]
 800291e:	2302      	movs	r3, #2
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002926:	2178      	movs	r1, #120	; 0x78
 8002928:	4818      	ldr	r0, [pc, #96]	; (800298c <FreqMenu_DrawPresetMenu+0x13a0>)
 800292a:	f00b fc8f 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800292e:	7abb      	ldrb	r3, [r7, #10]
 8002930:	b29a      	uxth	r2, r3
 8002932:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002936:	9301      	str	r3, [sp, #4]
 8002938:	2302      	movs	r3, #2
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	2300      	movs	r3, #0
 800293e:	2178      	movs	r1, #120	; 0x78
 8002940:	4813      	ldr	r0, [pc, #76]	; (8002990 <FreqMenu_DrawPresetMenu+0x13a4>)
 8002942:	f00b fc83 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002946:	7a7b      	ldrb	r3, [r7, #9]
 8002948:	b29a      	uxth	r2, r3
 800294a:	2300      	movs	r3, #0
 800294c:	9301      	str	r3, [sp, #4]
 800294e:	2302      	movs	r3, #2
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002956:	2178      	movs	r1, #120	; 0x78
 8002958:	480e      	ldr	r0, [pc, #56]	; (8002994 <FreqMenu_DrawPresetMenu+0x13a8>)
 800295a:	f00b fc77 	bl	800e24c <ILI9341_Draw_Text>
			break;
 800295e:	e0d1      	b.n	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
 8002960:	08013070 	.word	0x08013070
 8002964:	08013078 	.word	0x08013078
 8002968:	08013080 	.word	0x08013080
 800296c:	08013088 	.word	0x08013088
 8002970:	08013090 	.word	0x08013090
 8002974:	08013098 	.word	0x08013098
 8002978:	080130a0 	.word	0x080130a0
 800297c:	080130a8 	.word	0x080130a8
 8002980:	080130b0 	.word	0x080130b0
 8002984:	080130b8 	.word	0x080130b8
 8002988:	080130c0 	.word	0x080130c0
 800298c:	080130c8 	.word	0x080130c8
 8002990:	080130d0 	.word	0x080130d0
 8002994:	080130d8 	.word	0x080130d8
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002998:	7bfb      	ldrb	r3, [r7, #15]
 800299a:	b29a      	uxth	r2, r3
 800299c:	2300      	movs	r3, #0
 800299e:	9301      	str	r3, [sp, #4]
 80029a0:	2302      	movs	r3, #2
 80029a2:	9300      	str	r3, [sp, #0]
 80029a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029a8:	2105      	movs	r1, #5
 80029aa:	4858      	ldr	r0, [pc, #352]	; (8002b0c <FreqMenu_DrawPresetMenu+0x1520>)
 80029ac:	f00b fc4e 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029b0:	7bbb      	ldrb	r3, [r7, #14]
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	2300      	movs	r3, #0
 80029b6:	9301      	str	r3, [sp, #4]
 80029b8:	2302      	movs	r3, #2
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029c0:	2105      	movs	r1, #5
 80029c2:	4853      	ldr	r0, [pc, #332]	; (8002b10 <FreqMenu_DrawPresetMenu+0x1524>)
 80029c4:	f00b fc42 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029c8:	7b7b      	ldrb	r3, [r7, #13]
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	2300      	movs	r3, #0
 80029ce:	9301      	str	r3, [sp, #4]
 80029d0:	2302      	movs	r3, #2
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029d8:	2105      	movs	r1, #5
 80029da:	484e      	ldr	r0, [pc, #312]	; (8002b14 <FreqMenu_DrawPresetMenu+0x1528>)
 80029dc:	f00b fc36 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029e0:	7b3b      	ldrb	r3, [r7, #12]
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	2300      	movs	r3, #0
 80029e6:	9301      	str	r3, [sp, #4]
 80029e8:	2302      	movs	r3, #2
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029f0:	2105      	movs	r1, #5
 80029f2:	4849      	ldr	r0, [pc, #292]	; (8002b18 <FreqMenu_DrawPresetMenu+0x152c>)
 80029f4:	f00b fc2a 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029f8:	7afb      	ldrb	r3, [r7, #11]
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	2300      	movs	r3, #0
 80029fe:	9301      	str	r3, [sp, #4]
 8002a00:	2302      	movs	r3, #2
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a08:	2105      	movs	r1, #5
 8002a0a:	4844      	ldr	r0, [pc, #272]	; (8002b1c <FreqMenu_DrawPresetMenu+0x1530>)
 8002a0c:	f00b fc1e 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a10:	7abb      	ldrb	r3, [r7, #10]
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	2300      	movs	r3, #0
 8002a16:	9301      	str	r3, [sp, #4]
 8002a18:	2302      	movs	r3, #2
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a20:	2105      	movs	r1, #5
 8002a22:	483f      	ldr	r0, [pc, #252]	; (8002b20 <FreqMenu_DrawPresetMenu+0x1534>)
 8002a24:	f00b fc12 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a28:	7a7b      	ldrb	r3, [r7, #9]
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	9301      	str	r3, [sp, #4]
 8002a30:	2302      	movs	r3, #2
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a38:	2105      	movs	r1, #5
 8002a3a:	483a      	ldr	r0, [pc, #232]	; (8002b24 <FreqMenu_DrawPresetMenu+0x1538>)
 8002a3c:	f00b fc06 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a40:	7bfb      	ldrb	r3, [r7, #15]
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	2300      	movs	r3, #0
 8002a46:	9301      	str	r3, [sp, #4]
 8002a48:	2302      	movs	r3, #2
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a50:	2178      	movs	r1, #120	; 0x78
 8002a52:	4835      	ldr	r0, [pc, #212]	; (8002b28 <FreqMenu_DrawPresetMenu+0x153c>)
 8002a54:	f00b fbfa 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a58:	7bbb      	ldrb	r3, [r7, #14]
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	9301      	str	r3, [sp, #4]
 8002a60:	2302      	movs	r3, #2
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a68:	2178      	movs	r1, #120	; 0x78
 8002a6a:	4830      	ldr	r0, [pc, #192]	; (8002b2c <FreqMenu_DrawPresetMenu+0x1540>)
 8002a6c:	f00b fbee 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a70:	7b7b      	ldrb	r3, [r7, #13]
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	2300      	movs	r3, #0
 8002a76:	9301      	str	r3, [sp, #4]
 8002a78:	2302      	movs	r3, #2
 8002a7a:	9300      	str	r3, [sp, #0]
 8002a7c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a80:	2178      	movs	r1, #120	; 0x78
 8002a82:	482b      	ldr	r0, [pc, #172]	; (8002b30 <FreqMenu_DrawPresetMenu+0x1544>)
 8002a84:	f00b fbe2 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a88:	7b3b      	ldrb	r3, [r7, #12]
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	9301      	str	r3, [sp, #4]
 8002a90:	2302      	movs	r3, #2
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a98:	2178      	movs	r1, #120	; 0x78
 8002a9a:	4826      	ldr	r0, [pc, #152]	; (8002b34 <FreqMenu_DrawPresetMenu+0x1548>)
 8002a9c:	f00b fbd6 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002aa0:	7afb      	ldrb	r3, [r7, #11]
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	9301      	str	r3, [sp, #4]
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	9300      	str	r3, [sp, #0]
 8002aac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ab0:	2178      	movs	r1, #120	; 0x78
 8002ab2:	4821      	ldr	r0, [pc, #132]	; (8002b38 <FreqMenu_DrawPresetMenu+0x154c>)
 8002ab4:	f00b fbca 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ab8:	7abb      	ldrb	r3, [r7, #10]
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	2300      	movs	r3, #0
 8002abe:	9301      	str	r3, [sp, #4]
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ac8:	2178      	movs	r1, #120	; 0x78
 8002aca:	481c      	ldr	r0, [pc, #112]	; (8002b3c <FreqMenu_DrawPresetMenu+0x1550>)
 8002acc:	f00b fbbe 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002ad0:	7a7b      	ldrb	r3, [r7, #9]
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002ad8:	9301      	str	r3, [sp, #4]
 8002ada:	2302      	movs	r3, #2
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	2300      	movs	r3, #0
 8002ae0:	2178      	movs	r1, #120	; 0x78
 8002ae2:	4817      	ldr	r0, [pc, #92]	; (8002b40 <FreqMenu_DrawPresetMenu+0x1554>)
 8002ae4:	f00b fbb2 	bl	800e24c <ILI9341_Draw_Text>
			break;
 8002ae8:	bf00      	nop
 8002aea:	e00b      	b.n	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8002aec:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002af0:	9301      	str	r3, [sp, #4]
 8002af2:	2301      	movs	r3, #1
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	2300      	movs	r3, #0
 8002af8:	22b4      	movs	r2, #180	; 0xb4
 8002afa:	2105      	movs	r1, #5
 8002afc:	4811      	ldr	r0, [pc, #68]	; (8002b44 <FreqMenu_DrawPresetMenu+0x1558>)
 8002afe:	f00b fba5 	bl	800e24c <ILI9341_Draw_Text>
}
 8002b02:	e7ff      	b.n	8002b04 <FreqMenu_DrawPresetMenu+0x1518>
 8002b04:	bf00      	nop
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	08013070 	.word	0x08013070
 8002b10:	08013078 	.word	0x08013078
 8002b14:	08013080 	.word	0x08013080
 8002b18:	08013088 	.word	0x08013088
 8002b1c:	08013090 	.word	0x08013090
 8002b20:	08013098 	.word	0x08013098
 8002b24:	080130a0 	.word	0x080130a0
 8002b28:	080130a8 	.word	0x080130a8
 8002b2c:	080130b0 	.word	0x080130b0
 8002b30:	080130b8 	.word	0x080130b8
 8002b34:	080130c0 	.word	0x080130c0
 8002b38:	080130c8 	.word	0x080130c8
 8002b3c:	080130d0 	.word	0x080130d0
 8002b40:	080130d8 	.word	0x080130d8
 8002b44:	080130e4 	.word	0x080130e4

08002b48 <FreqMenu_DrawAdjustMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawAdjustMenu()
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->ADJUST", 5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002b4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b52:	9301      	str	r3, [sp, #4]
 8002b54:	2302      	movs	r3, #2
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	2300      	movs	r3, #0
 8002b5a:	220a      	movs	r2, #10
 8002b5c:	2105      	movs	r1, #5
 8002b5e:	4804      	ldr	r0, [pc, #16]	; (8002b70 <FreqMenu_DrawAdjustMenu+0x28>)
 8002b60:	f00b fb74 	bl	800e24c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8002b64:	f7fe f9c8 	bl	8000ef8 <DM_DisplayFormattedOutput>
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
		ILI9341_Draw_Text(freq, 250, 150, WHITE, 1, BLACK);
*/

}
 8002b68:	bf00      	nop
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	08013114 	.word	0x08013114

08002b74 <FreqMenu_DrawSweepMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawSweepMenu()
{
 8002b74:	b5b0      	push	{r4, r5, r7, lr}
 8002b76:	b0a0      	sub	sp, #128	; 0x80
 8002b78:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->SWEEP", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002b7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b7e:	9301      	str	r3, [sp, #4]
 8002b80:	2302      	movs	r3, #2
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	2300      	movs	r3, #0
 8002b86:	220a      	movs	r2, #10
 8002b88:	2105      	movs	r1, #5
 8002b8a:	48a1      	ldr	r0, [pc, #644]	; (8002e10 <FreqMenu_DrawSweepMenu+0x29c>)
 8002b8c:	f00b fb5e 	bl	800e24c <ILI9341_Draw_Text>


	// draw enabled status


	char enabled_text[20] = "";
 8002b90:	2300      	movs	r3, #0
 8002b92:	667b      	str	r3, [r7, #100]	; 0x64
 8002b94:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	605a      	str	r2, [r3, #4]
 8002b9e:	609a      	str	r2, [r3, #8]
 8002ba0:	60da      	str	r2, [r3, #12]
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8002ba2:	4b9c      	ldr	r3, [pc, #624]	; (8002e14 <FreqMenu_DrawSweepMenu+0x2a0>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d109      	bne.n	8002bc2 <FreqMenu_DrawSweepMenu+0x4e>
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  RUNNING");
 8002bae:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002bb2:	4a99      	ldr	r2, [pc, #612]	; (8002e18 <FreqMenu_DrawSweepMenu+0x2a4>)
 8002bb4:	461c      	mov	r4, r3
 8002bb6:	4615      	mov	r5, r2
 8002bb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bbc:	682b      	ldr	r3, [r5, #0]
 8002bbe:	7023      	strb	r3, [r4, #0]
 8002bc0:	e008      	b.n	8002bd4 <FreqMenu_DrawSweepMenu+0x60>
	}
	else
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  STOPPED");
 8002bc2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002bc6:	4a95      	ldr	r2, [pc, #596]	; (8002e1c <FreqMenu_DrawSweepMenu+0x2a8>)
 8002bc8:	461c      	mov	r4, r3
 8002bca:	4615      	mov	r5, r2
 8002bcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bd0:	682b      	ldr	r3, [r5, #0]
 8002bd2:	7023      	strb	r3, [r4, #0]
	}

	ILI9341_Draw_Text(enabled_text, 5, 40, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002bd4:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8002bd8:	2300      	movs	r3, #0
 8002bda:	9301      	str	r3, [sp, #4]
 8002bdc:	2302      	movs	r3, #2
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002be4:	2228      	movs	r2, #40	; 0x28
 8002be6:	2105      	movs	r1, #5
 8002be8:	f00b fb30 	bl	800e24c <ILI9341_Draw_Text>

	// draw output freq status
	char out_hertz[25] = "";
 8002bec:	2300      	movs	r3, #0
 8002bee:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bf0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	605a      	str	r2, [r3, #4]
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	60da      	str	r2, [r3, #12]
 8002bfe:	611a      	str	r2, [r3, #16]
 8002c00:	751a      	strb	r2, [r3, #20]
	snprintf(out_hertz, sizeof(out_hertz), "OUTPUT: %7.2f Hz", SM_GetOutputInHertz());
 8002c02:	f003 fb4b 	bl	800629c <SM_GetOutputInHertz>
 8002c06:	ee10 3a10 	vmov	r3, s0
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fd fcc4 	bl	8000598 <__aeabi_f2d>
 8002c10:	4603      	mov	r3, r0
 8002c12:	460c      	mov	r4, r1
 8002c14:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002c18:	e9cd 3400 	strd	r3, r4, [sp]
 8002c1c:	4a80      	ldr	r2, [pc, #512]	; (8002e20 <FreqMenu_DrawSweepMenu+0x2ac>)
 8002c1e:	2119      	movs	r1, #25
 8002c20:	f00c feb8 	bl	800f994 <sniprintf>
	ILI9341_Draw_Text(out_hertz, 5, 60, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c24:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002c28:	2300      	movs	r3, #0
 8002c2a:	9301      	str	r3, [sp, #4]
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c34:	223c      	movs	r2, #60	; 0x3c
 8002c36:	2105      	movs	r1, #5
 8002c38:	f00b fb08 	bl	800e24c <ILI9341_Draw_Text>
		//snprintf(dir_text, sizeof(dir_text), "DIRECTION:  N/A");
	}
	else
	{
*/
		ILI9341_Draw_Text("SWEEP MODE:", 5, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	9301      	str	r3, [sp, #4]
 8002c40:	2302      	movs	r3, #2
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c48:	2264      	movs	r2, #100	; 0x64
 8002c4a:	2105      	movs	r1, #5
 8002c4c:	4875      	ldr	r0, [pc, #468]	; (8002e24 <FreqMenu_DrawSweepMenu+0x2b0>)
 8002c4e:	f00b fafd 	bl	800e24c <ILI9341_Draw_Text>

		// get direction
		if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 8002c52:	4b70      	ldr	r3, [pc, #448]	; (8002e14 <FreqMenu_DrawSweepMenu+0x2a0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0310 	and.w	r3, r3, #16
 8002c5a:	2b10      	cmp	r3, #16
 8002c5c:	d117      	bne.n	8002c8e <FreqMenu_DrawSweepMenu+0x11a>
		{
			ILI9341_Draw_Text("UP", 235, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c5e:	2300      	movs	r3, #0
 8002c60:	9301      	str	r3, [sp, #4]
 8002c62:	2302      	movs	r3, #2
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c6a:	2264      	movs	r2, #100	; 0x64
 8002c6c:	21eb      	movs	r1, #235	; 0xeb
 8002c6e:	486e      	ldr	r0, [pc, #440]	; (8002e28 <FreqMenu_DrawSweepMenu+0x2b4>)
 8002c70:	f00b faec 	bl	800e24c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("DOWN", 265, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002c74:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002c78:	9301      	str	r3, [sp, #4]
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	9300      	str	r3, [sp, #0]
 8002c7e:	2300      	movs	r3, #0
 8002c80:	2264      	movs	r2, #100	; 0x64
 8002c82:	f240 1109 	movw	r1, #265	; 0x109
 8002c86:	4869      	ldr	r0, [pc, #420]	; (8002e2c <FreqMenu_DrawSweepMenu+0x2b8>)
 8002c88:	f00b fae0 	bl	800e24c <ILI9341_Draw_Text>
 8002c8c:	e016      	b.n	8002cbc <FreqMenu_DrawSweepMenu+0x148>
		}
		else
		{
			ILI9341_Draw_Text("DOWN", 265, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c8e:	2300      	movs	r3, #0
 8002c90:	9301      	str	r3, [sp, #4]
 8002c92:	2302      	movs	r3, #2
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c9a:	2264      	movs	r2, #100	; 0x64
 8002c9c:	f240 1109 	movw	r1, #265	; 0x109
 8002ca0:	4862      	ldr	r0, [pc, #392]	; (8002e2c <FreqMenu_DrawSweepMenu+0x2b8>)
 8002ca2:	f00b fad3 	bl	800e24c <ILI9341_Draw_Text>
			ILI9341_Draw_Text("UP", 235, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002ca6:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002caa:	9301      	str	r3, [sp, #4]
 8002cac:	2302      	movs	r3, #2
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	2264      	movs	r2, #100	; 0x64
 8002cb4:	21eb      	movs	r1, #235	; 0xeb
 8002cb6:	485c      	ldr	r0, [pc, #368]	; (8002e28 <FreqMenu_DrawSweepMenu+0x2b4>)
 8002cb8:	f00b fac8 	bl	800e24c <ILI9341_Draw_Text>




	// draw rate status
	if(theCurrentEncoderSweepFunction == ENCODER_SWEEP_SPEED_FUNCTION)
 8002cbc:	4b5c      	ldr	r3, [pc, #368]	; (8002e30 <FreqMenu_DrawSweepMenu+0x2bc>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10b      	bne.n	8002cdc <FreqMenu_DrawSweepMenu+0x168>
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002cc4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002cc8:	9301      	str	r3, [sp, #4]
 8002cca:	2302      	movs	r3, #2
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	2300      	movs	r3, #0
 8002cd0:	2278      	movs	r2, #120	; 0x78
 8002cd2:	2105      	movs	r1, #5
 8002cd4:	4857      	ldr	r0, [pc, #348]	; (8002e34 <FreqMenu_DrawSweepMenu+0x2c0>)
 8002cd6:	f00b fab9 	bl	800e24c <ILI9341_Draw_Text>
 8002cda:	e00a      	b.n	8002cf2 <FreqMenu_DrawSweepMenu+0x17e>
	}
	else
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002cdc:	2300      	movs	r3, #0
 8002cde:	9301      	str	r3, [sp, #4]
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ce8:	2278      	movs	r2, #120	; 0x78
 8002cea:	2105      	movs	r1, #5
 8002cec:	4851      	ldr	r0, [pc, #324]	; (8002e34 <FreqMenu_DrawSweepMenu+0x2c0>)
 8002cee:	f00b faad 	bl	800e24c <ILI9341_Draw_Text>
	}
	char arr_text[25] = "";
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cf6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	605a      	str	r2, [r3, #4]
 8002d00:	609a      	str	r2, [r3, #8]
 8002d02:	60da      	str	r2, [r3, #12]
 8002d04:	611a      	str	r2, [r3, #16]
 8002d06:	751a      	strb	r2, [r3, #20]
	snprintf(arr_text, sizeof(arr_text), "%8.3f Hz", calculated_sweep_in_hertz);
 8002d08:	4b4b      	ldr	r3, [pc, #300]	; (8002e38 <FreqMenu_DrawSweepMenu+0x2c4>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7fd fc43 	bl	8000598 <__aeabi_f2d>
 8002d12:	4603      	mov	r3, r0
 8002d14:	460c      	mov	r4, r1
 8002d16:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002d1a:	e9cd 3400 	strd	r3, r4, [sp]
 8002d1e:	4a47      	ldr	r2, [pc, #284]	; (8002e3c <FreqMenu_DrawSweepMenu+0x2c8>)
 8002d20:	2119      	movs	r1, #25
 8002d22:	f00c fe37 	bl	800f994 <sniprintf>
	ILI9341_Draw_Text(arr_text, 182, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d26:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	9301      	str	r3, [sp, #4]
 8002d2e:	2302      	movs	r3, #2
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d36:	2278      	movs	r2, #120	; 0x78
 8002d38:	21b6      	movs	r1, #182	; 0xb6
 8002d3a:	f00b fa87 	bl	800e24c <ILI9341_Draw_Text>


	// draw upper sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_UP) )
 8002d3e:	4b3c      	ldr	r3, [pc, #240]	; (8002e30 <FreqMenu_DrawSweepMenu+0x2bc>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d10f      	bne.n	8002d66 <FreqMenu_DrawSweepMenu+0x1f2>
 8002d46:	4b3e      	ldr	r3, [pc, #248]	; (8002e40 <FreqMenu_DrawSweepMenu+0x2cc>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10b      	bne.n	8002d66 <FreqMenu_DrawSweepMenu+0x1f2>
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);	// highlighted
 8002d4e:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002d52:	9301      	str	r3, [sp, #4]
 8002d54:	2302      	movs	r3, #2
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	2300      	movs	r3, #0
 8002d5a:	228c      	movs	r2, #140	; 0x8c
 8002d5c:	2105      	movs	r1, #5
 8002d5e:	4839      	ldr	r0, [pc, #228]	; (8002e44 <FreqMenu_DrawSweepMenu+0x2d0>)
 8002d60:	f00b fa74 	bl	800e24c <ILI9341_Draw_Text>
 8002d64:	e00a      	b.n	8002d7c <FreqMenu_DrawSweepMenu+0x208>
		//ILI9341_Draw_Arrow(ARROW_UP, 280, 120, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d66:	2300      	movs	r3, #0
 8002d68:	9301      	str	r3, [sp, #4]
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d72:	228c      	movs	r2, #140	; 0x8c
 8002d74:	2105      	movs	r1, #5
 8002d76:	4833      	ldr	r0, [pc, #204]	; (8002e44 <FreqMenu_DrawSweepMenu+0x2d0>)
 8002d78:	f00b fa68 	bl	800e24c <ILI9341_Draw_Text>
	}
	char sweep_lower_text[20] = "";
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	61bb      	str	r3, [r7, #24]
 8002d80:	f107 031c 	add.w	r3, r7, #28
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	605a      	str	r2, [r3, #4]
 8002d8a:	609a      	str	r2, [r3, #8]
 8002d8c:	60da      	str	r2, [r3, #12]
	snprintf(sweep_lower_text, sizeof(sweep_lower_text), "%9.2f  Hz", SM_ConvertPeriodToHertz(sweep_lower_bounds_shortest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP);
 8002d8e:	4b2e      	ldr	r3, [pc, #184]	; (8002e48 <FreqMenu_DrawSweepMenu+0x2d4>)
 8002d90:	edd3 7a00 	vldr	s15, [r3]
 8002d94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d98:	4b2c      	ldr	r3, [pc, #176]	; (8002e4c <FreqMenu_DrawSweepMenu+0x2d8>)
 8002d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	4619      	mov	r1, r3
 8002da0:	ee17 0a90 	vmov	r0, s15
 8002da4:	f003 fabe 	bl	8006324 <SM_ConvertPeriodToHertz>
 8002da8:	eeb0 7a40 	vmov.f32	s14, s0
 8002dac:	eddf 7a28 	vldr	s15, [pc, #160]	; 8002e50 <FreqMenu_DrawSweepMenu+0x2dc>
 8002db0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002db4:	ee16 0a90 	vmov	r0, s13
 8002db8:	f7fd fbee 	bl	8000598 <__aeabi_f2d>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	460c      	mov	r4, r1
 8002dc0:	f107 0018 	add.w	r0, r7, #24
 8002dc4:	e9cd 3400 	strd	r3, r4, [sp]
 8002dc8:	4a22      	ldr	r2, [pc, #136]	; (8002e54 <FreqMenu_DrawSweepMenu+0x2e0>)
 8002dca:	2114      	movs	r1, #20
 8002dcc:	f00c fde2 	bl	800f994 <sniprintf>
	ILI9341_Draw_Text(sweep_lower_text, 158, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002dd0:	f107 0018 	add.w	r0, r7, #24
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	9301      	str	r3, [sp, #4]
 8002dd8:	2302      	movs	r3, #2
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002de0:	228c      	movs	r2, #140	; 0x8c
 8002de2:	219e      	movs	r1, #158	; 0x9e
 8002de4:	f00b fa32 	bl	800e24c <ILI9341_Draw_Text>


	// draw lower sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_DOWN) )
 8002de8:	4b11      	ldr	r3, [pc, #68]	; (8002e30 <FreqMenu_DrawSweepMenu+0x2bc>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d135      	bne.n	8002e5c <FreqMenu_DrawSweepMenu+0x2e8>
 8002df0:	4b13      	ldr	r3, [pc, #76]	; (8002e40 <FreqMenu_DrawSweepMenu+0x2cc>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d131      	bne.n	8002e5c <FreqMenu_DrawSweepMenu+0x2e8>
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR); 	// highlighted
 8002df8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002dfc:	9301      	str	r3, [sp, #4]
 8002dfe:	2302      	movs	r3, #2
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	2300      	movs	r3, #0
 8002e04:	22a0      	movs	r2, #160	; 0xa0
 8002e06:	2105      	movs	r1, #5
 8002e08:	4813      	ldr	r0, [pc, #76]	; (8002e58 <FreqMenu_DrawSweepMenu+0x2e4>)
 8002e0a:	f00b fa1f 	bl	800e24c <ILI9341_Draw_Text>
 8002e0e:	e030      	b.n	8002e72 <FreqMenu_DrawSweepMenu+0x2fe>
 8002e10:	08013128 	.word	0x08013128
 8002e14:	40000c00 	.word	0x40000c00
 8002e18:	0801313c 	.word	0x0801313c
 8002e1c:	08013150 	.word	0x08013150
 8002e20:	08013164 	.word	0x08013164
 8002e24:	08013178 	.word	0x08013178
 8002e28:	08013184 	.word	0x08013184
 8002e2c:	08013188 	.word	0x08013188
 8002e30:	20001ecd 	.word	0x20001ecd
 8002e34:	08013190 	.word	0x08013190
 8002e38:	20001f20 	.word	0x20001f20
 8002e3c:	080131a0 	.word	0x080131a0
 8002e40:	20001ecc 	.word	0x20001ecc
 8002e44:	080131ac 	.word	0x080131ac
 8002e48:	20000000 	.word	0x20000000
 8002e4c:	40013400 	.word	0x40013400
 8002e50:	42f00000 	.word	0x42f00000
 8002e54:	080131bc 	.word	0x080131bc
 8002e58:	080131c8 	.word	0x080131c8
		//ILI9341_Draw_Arrow(ARROW_DOWN, 280, 130, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	9301      	str	r3, [sp, #4]
 8002e60:	2302      	movs	r3, #2
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e68:	22a0      	movs	r2, #160	; 0xa0
 8002e6a:	2105      	movs	r1, #5
 8002e6c:	484d      	ldr	r0, [pc, #308]	; (8002fa4 <FreqMenu_DrawSweepMenu+0x430>)
 8002e6e:	f00b f9ed 	bl	800e24c <ILI9341_Draw_Text>
	}
	char sweep_upper_text[20] = "";
 8002e72:	2300      	movs	r3, #0
 8002e74:	607b      	str	r3, [r7, #4]
 8002e76:	f107 0308 	add.w	r3, r7, #8
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	605a      	str	r2, [r3, #4]
 8002e80:	609a      	str	r2, [r3, #8]
 8002e82:	60da      	str	r2, [r3, #12]
	snprintf(sweep_upper_text, sizeof(sweep_upper_text), "%8.2f  Hz", SM_ConvertPeriodToHertz(sweep_upper_bounds_longest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP );
 8002e84:	4b48      	ldr	r3, [pc, #288]	; (8002fa8 <FreqMenu_DrawSweepMenu+0x434>)
 8002e86:	edd3 7a00 	vldr	s15, [r3]
 8002e8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e8e:	4b47      	ldr	r3, [pc, #284]	; (8002fac <FreqMenu_DrawSweepMenu+0x438>)
 8002e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	4619      	mov	r1, r3
 8002e96:	ee17 0a90 	vmov	r0, s15
 8002e9a:	f003 fa43 	bl	8006324 <SM_ConvertPeriodToHertz>
 8002e9e:	eeb0 7a40 	vmov.f32	s14, s0
 8002ea2:	eddf 7a43 	vldr	s15, [pc, #268]	; 8002fb0 <FreqMenu_DrawSweepMenu+0x43c>
 8002ea6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002eaa:	ee16 0a90 	vmov	r0, s13
 8002eae:	f7fd fb73 	bl	8000598 <__aeabi_f2d>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	460c      	mov	r4, r1
 8002eb6:	1d38      	adds	r0, r7, #4
 8002eb8:	e9cd 3400 	strd	r3, r4, [sp]
 8002ebc:	4a3d      	ldr	r2, [pc, #244]	; (8002fb4 <FreqMenu_DrawSweepMenu+0x440>)
 8002ebe:	2114      	movs	r1, #20
 8002ec0:	f00c fd68 	bl	800f994 <sniprintf>
	ILI9341_Draw_Text(sweep_upper_text, 170, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ec4:	1d38      	adds	r0, r7, #4
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	9301      	str	r3, [sp, #4]
 8002eca:	2302      	movs	r3, #2
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ed2:	22a0      	movs	r2, #160	; 0xa0
 8002ed4:	21aa      	movs	r1, #170	; 0xaa
 8002ed6:	f00b f9b9 	bl	800e24c <ILI9341_Draw_Text>


	// draw bottom menu button text
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8002eda:	4b37      	ldr	r3, [pc, #220]	; (8002fb8 <FreqMenu_DrawSweepMenu+0x444>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d10b      	bne.n	8002efe <FreqMenu_DrawSweepMenu+0x38a>
		ILI9341_Draw_Text("PAUSE ", 6, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8002ee6:	f240 23fd 	movw	r3, #765	; 0x2fd
 8002eea:	9301      	str	r3, [sp, #4]
 8002eec:	2302      	movs	r3, #2
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	22d5      	movs	r2, #213	; 0xd5
 8002ef4:	2106      	movs	r1, #6
 8002ef6:	4831      	ldr	r0, [pc, #196]	; (8002fbc <FreqMenu_DrawSweepMenu+0x448>)
 8002ef8:	f00b f9a8 	bl	800e24c <ILI9341_Draw_Text>
 8002efc:	e00a      	b.n	8002f14 <FreqMenu_DrawSweepMenu+0x3a0>
	else
		ILI9341_Draw_Text("RESUME", 5, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8002efe:	f240 23fd 	movw	r3, #765	; 0x2fd
 8002f02:	9301      	str	r3, [sp, #4]
 8002f04:	2302      	movs	r3, #2
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	2300      	movs	r3, #0
 8002f0a:	22d5      	movs	r2, #213	; 0xd5
 8002f0c:	2105      	movs	r1, #5
 8002f0e:	482c      	ldr	r0, [pc, #176]	; (8002fc0 <FreqMenu_DrawSweepMenu+0x44c>)
 8002f10:	f00b f99c 	bl	800e24c <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	105,	204, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8002f14:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8002f18:	9301      	str	r3, [sp, #4]
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	2300      	movs	r3, #0
 8002f20:	22cc      	movs	r2, #204	; 0xcc
 8002f22:	2169      	movs	r1, #105	; 0x69
 8002f24:	4827      	ldr	r0, [pc, #156]	; (8002fc4 <FreqMenu_DrawSweepMenu+0x450>)
 8002f26:	f00b f991 	bl	800e24c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("MODE",	98, 	222, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8002f2a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8002f2e:	9301      	str	r3, [sp, #4]
 8002f30:	2302      	movs	r3, #2
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	2300      	movs	r3, #0
 8002f36:	22de      	movs	r2, #222	; 0xde
 8002f38:	2162      	movs	r1, #98	; 0x62
 8002f3a:	4823      	ldr	r0, [pc, #140]	; (8002fc8 <FreqMenu_DrawSweepMenu+0x454>)
 8002f3c:	f00b f986 	bl	800e24c <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	183,	204, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8002f40:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002f44:	9301      	str	r3, [sp, #4]
 8002f46:	2302      	movs	r3, #2
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	22cc      	movs	r2, #204	; 0xcc
 8002f4e:	21b7      	movs	r1, #183	; 0xb7
 8002f50:	481c      	ldr	r0, [pc, #112]	; (8002fc4 <FreqMenu_DrawSweepMenu+0x450>)
 8002f52:	f00b f97b 	bl	800e24c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SPEED",	173, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8002f56:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002f5a:	9301      	str	r3, [sp, #4]
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	2300      	movs	r3, #0
 8002f62:	22de      	movs	r2, #222	; 0xde
 8002f64:	21ad      	movs	r1, #173	; 0xad
 8002f66:	4819      	ldr	r0, [pc, #100]	; (8002fcc <FreqMenu_DrawSweepMenu+0x458>)
 8002f68:	f00b f970 	bl	800e24c <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	263, 	204, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8002f6c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002f70:	9301      	str	r3, [sp, #4]
 8002f72:	2302      	movs	r3, #2
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	2300      	movs	r3, #0
 8002f78:	22cc      	movs	r2, #204	; 0xcc
 8002f7a:	f240 1107 	movw	r1, #263	; 0x107
 8002f7e:	4811      	ldr	r0, [pc, #68]	; (8002fc4 <FreqMenu_DrawSweepMenu+0x450>)
 8002f80:	f00b f964 	bl	800e24c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("LIMIT", 	252, 	222, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8002f84:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002f88:	9301      	str	r3, [sp, #4]
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	2300      	movs	r3, #0
 8002f90:	22de      	movs	r2, #222	; 0xde
 8002f92:	21fc      	movs	r1, #252	; 0xfc
 8002f94:	480e      	ldr	r0, [pc, #56]	; (8002fd0 <FreqMenu_DrawSweepMenu+0x45c>)
 8002f96:	f00b f959 	bl	800e24c <ILI9341_Draw_Text>
}
 8002f9a:	bf00      	nop
 8002f9c:	3778      	adds	r7, #120	; 0x78
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bdb0      	pop	{r4, r5, r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	080131c8 	.word	0x080131c8
 8002fa8:	20000004 	.word	0x20000004
 8002fac:	40013400 	.word	0x40013400
 8002fb0:	42f00000 	.word	0x42f00000
 8002fb4:	080131d8 	.word	0x080131d8
 8002fb8:	40000c00 	.word	0x40000c00
 8002fbc:	080131e4 	.word	0x080131e4
 8002fc0:	080131ec 	.word	0x080131ec
 8002fc4:	080131f4 	.word	0x080131f4
 8002fc8:	080131f8 	.word	0x080131f8
 8002fcc:	08013200 	.word	0x08013200
 8002fd0:	08013208 	.word	0x08013208

08002fd4 <FuncMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMenu(eFuncMenu_Status pMenu)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	4603      	mov	r3, r0
 8002fdc:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8002fde:	79fb      	ldrb	r3, [r7, #7]
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d007      	beq.n	8002ff4 <FuncMenu_DrawMenu+0x20>
 8002fe4:	2b03      	cmp	r3, #3
 8002fe6:	d009      	beq.n	8002ffc <FuncMenu_DrawMenu+0x28>
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d000      	beq.n	8002fee <FuncMenu_DrawMenu+0x1a>
		case ENABLE_FUNC_SYNC_MENU:
			FuncMenu_DrawOutputMenu(SYNC_CHANNEL);
			break;

		default:
			break;
 8002fec:	e00a      	b.n	8003004 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawMainMenu();
 8002fee:	f000 f80d 	bl	800300c <FuncMenu_DrawMainMenu>
			break;
 8002ff2:	e007      	b.n	8003004 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(SIGNAL_CHANNEL);
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	f000 f851 	bl	800309c <FuncMenu_DrawOutputMenu>
			break;
 8002ffa:	e003      	b.n	8003004 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(SYNC_CHANNEL);
 8002ffc:	2001      	movs	r0, #1
 8002ffe:	f000 f84d 	bl	800309c <FuncMenu_DrawOutputMenu>
			break;
 8003002:	bf00      	nop

	}
}
 8003004:	bf00      	nop
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <FuncMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMainMenu()
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FUNC", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003012:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003016:	9301      	str	r3, [sp, #4]
 8003018:	2302      	movs	r3, #2
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	2300      	movs	r3, #0
 800301e:	220a      	movs	r2, #10
 8003020:	210a      	movs	r1, #10
 8003022:	481a      	ldr	r0, [pc, #104]	; (800308c <FuncMenu_DrawMainMenu+0x80>)
 8003024:	f00b f912 	bl	800e24c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003028:	f7fd ff66 	bl	8000ef8 <DM_DisplayFormattedOutput>

 	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800302c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003030:	9301      	str	r3, [sp, #4]
 8003032:	2302      	movs	r3, #2
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	2300      	movs	r3, #0
 8003038:	22d2      	movs	r2, #210	; 0xd2
 800303a:	2105      	movs	r1, #5
 800303c:	4814      	ldr	r0, [pc, #80]	; (8003090 <FuncMenu_DrawMainMenu+0x84>)
 800303e:	f00b f905 	bl	800e24c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SYNC", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003042:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003046:	9301      	str	r3, [sp, #4]
 8003048:	2302      	movs	r3, #2
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	2300      	movs	r3, #0
 800304e:	22d2      	movs	r2, #210	; 0xd2
 8003050:	2161      	movs	r1, #97	; 0x61
 8003052:	4810      	ldr	r0, [pc, #64]	; (8003094 <FuncMenu_DrawMainMenu+0x88>)
 8003054:	f00b f8fa 	bl	800e24c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003058:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800305c:	9301      	str	r3, [sp, #4]
 800305e:	2302      	movs	r3, #2
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	2300      	movs	r3, #0
 8003064:	22d2      	movs	r2, #210	; 0xd2
 8003066:	21af      	movs	r1, #175	; 0xaf
 8003068:	480b      	ldr	r0, [pc, #44]	; (8003098 <FuncMenu_DrawMainMenu+0x8c>)
 800306a:	f00b f8ef 	bl	800e24c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800306e:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003072:	9301      	str	r3, [sp, #4]
 8003074:	2302      	movs	r3, #2
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	2300      	movs	r3, #0
 800307a:	22d2      	movs	r2, #210	; 0xd2
 800307c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003080:	4805      	ldr	r0, [pc, #20]	; (8003098 <FuncMenu_DrawMainMenu+0x8c>)
 8003082:	f00b f8e3 	bl	800e24c <ILI9341_Draw_Text>
}
 8003086:	bf00      	nop
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	08013210 	.word	0x08013210
 8003090:	0801321c 	.word	0x0801321c
 8003094:	08013224 	.word	0x08013224
 8003098:	0801322c 	.word	0x0801322c

0800309c <FuncMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawOutputMenu(eOutputChannel_t pOutChan)
{
 800309c:	b590      	push	{r4, r7, lr}
 800309e:	b089      	sub	sp, #36	; 0x24
 80030a0:	af02      	add	r7, sp, #8
 80030a2:	4603      	mov	r3, r0
 80030a4:	71fb      	strb	r3, [r7, #7]
	if(pOutChan)
 80030a6:	79fb      	ldrb	r3, [r7, #7]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00b      	beq.n	80030c4 <FuncMenu_DrawOutputMenu+0x28>
		ILI9341_Draw_Text("OUT->FUNC->SYNC", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80030ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030b0:	9301      	str	r3, [sp, #4]
 80030b2:	2302      	movs	r3, #2
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	2300      	movs	r3, #0
 80030b8:	220a      	movs	r2, #10
 80030ba:	210a      	movs	r1, #10
 80030bc:	4893      	ldr	r0, [pc, #588]	; (800330c <FuncMenu_DrawOutputMenu+0x270>)
 80030be:	f00b f8c5 	bl	800e24c <ILI9341_Draw_Text>
 80030c2:	e00a      	b.n	80030da <FuncMenu_DrawOutputMenu+0x3e>
	else
		ILI9341_Draw_Text("OUT->FUNC->SIG", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80030c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030c8:	9301      	str	r3, [sp, #4]
 80030ca:	2302      	movs	r3, #2
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	2300      	movs	r3, #0
 80030d0:	220a      	movs	r2, #10
 80030d2:	210a      	movs	r1, #10
 80030d4:	488e      	ldr	r0, [pc, #568]	; (8003310 <FuncMenu_DrawOutputMenu+0x274>)
 80030d6:	f00b f8b9 	bl	800e24c <ILI9341_Draw_Text>

	//FunctionProfile_t *func_profileTmp = FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(pOutChan)->func_profile;
 80030da:	79fb      	ldrb	r3, [r7, #7]
 80030dc:	4618      	mov	r0, r3
 80030de:	f002 ff21 	bl	8005f24 <SM_GetOutputChannel>
 80030e2:	4603      	mov	r3, r0
 80030e4:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80030e8:	617b      	str	r3, [r7, #20]
	if(func_profileTmp)
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 83ff 	beq.w	80038f0 <FuncMenu_DrawOutputMenu+0x854>
	{
		switch(func_profileTmp->func)
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	2b06      	cmp	r3, #6
 80030f8:	f200 83fa 	bhi.w	80038f0 <FuncMenu_DrawOutputMenu+0x854>
 80030fc:	a201      	add	r2, pc, #4	; (adr r2, 8003104 <FuncMenu_DrawOutputMenu+0x68>)
 80030fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003102:	bf00      	nop
 8003104:	08003121 	.word	0x08003121
 8003108:	08003217 	.word	0x08003217
 800310c:	08003335 	.word	0x08003335
 8003110:	0800342b 	.word	0x0800342b
 8003114:	08003521 	.word	0x08003521
 8003118:	08003651 	.word	0x08003651
 800311c:	0800375d 	.word	0x0800375d
		{
			case SINE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003120:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003124:	9301      	str	r3, [sp, #4]
 8003126:	2302      	movs	r3, #2
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	2300      	movs	r3, #0
 800312c:	2232      	movs	r2, #50	; 0x32
 800312e:	210a      	movs	r1, #10
 8003130:	4878      	ldr	r0, [pc, #480]	; (8003314 <FuncMenu_DrawOutputMenu+0x278>)
 8003132:	f00b f88b 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003136:	2300      	movs	r3, #0
 8003138:	9301      	str	r3, [sp, #4]
 800313a:	2302      	movs	r3, #2
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003142:	2246      	movs	r2, #70	; 0x46
 8003144:	210a      	movs	r1, #10
 8003146:	4874      	ldr	r0, [pc, #464]	; (8003318 <FuncMenu_DrawOutputMenu+0x27c>)
 8003148:	f00b f880 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800314c:	2300      	movs	r3, #0
 800314e:	9301      	str	r3, [sp, #4]
 8003150:	2302      	movs	r3, #2
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003158:	225a      	movs	r2, #90	; 0x5a
 800315a:	210a      	movs	r1, #10
 800315c:	486f      	ldr	r0, [pc, #444]	; (800331c <FuncMenu_DrawOutputMenu+0x280>)
 800315e:	f00b f875 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003162:	2300      	movs	r3, #0
 8003164:	9301      	str	r3, [sp, #4]
 8003166:	2302      	movs	r3, #2
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800316e:	226e      	movs	r2, #110	; 0x6e
 8003170:	210a      	movs	r1, #10
 8003172:	486b      	ldr	r0, [pc, #428]	; (8003320 <FuncMenu_DrawOutputMenu+0x284>)
 8003174:	f00b f86a 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003178:	2300      	movs	r3, #0
 800317a:	9301      	str	r3, [sp, #4]
 800317c:	2302      	movs	r3, #2
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003184:	2282      	movs	r2, #130	; 0x82
 8003186:	210a      	movs	r1, #10
 8003188:	4866      	ldr	r0, [pc, #408]	; (8003324 <FuncMenu_DrawOutputMenu+0x288>)
 800318a:	f00b f85f 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800318e:	2300      	movs	r3, #0
 8003190:	9301      	str	r3, [sp, #4]
 8003192:	2302      	movs	r3, #2
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800319a:	2296      	movs	r2, #150	; 0x96
 800319c:	210a      	movs	r1, #10
 800319e:	4862      	ldr	r0, [pc, #392]	; (8003328 <FuncMenu_DrawOutputMenu+0x28c>)
 80031a0:	f00b f854 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80031a4:	2300      	movs	r3, #0
 80031a6:	9301      	str	r3, [sp, #4]
 80031a8:	2302      	movs	r3, #2
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80031b0:	22aa      	movs	r2, #170	; 0xaa
 80031b2:	210a      	movs	r1, #10
 80031b4:	485d      	ldr	r0, [pc, #372]	; (800332c <FuncMenu_DrawOutputMenu+0x290>)
 80031b6:	f00b f849 	bl	800e24c <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80031ba:	f240 23fd 	movw	r3, #765	; 0x2fd
 80031be:	9301      	str	r3, [sp, #4]
 80031c0:	2302      	movs	r3, #2
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	2300      	movs	r3, #0
 80031c6:	22d2      	movs	r2, #210	; 0xd2
 80031c8:	2105      	movs	r1, #5
 80031ca:	4859      	ldr	r0, [pc, #356]	; (8003330 <FuncMenu_DrawOutputMenu+0x294>)
 80031cc:	f00b f83e 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80031d0:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80031d4:	9301      	str	r3, [sp, #4]
 80031d6:	2302      	movs	r3, #2
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	2300      	movs	r3, #0
 80031dc:	22d2      	movs	r2, #210	; 0xd2
 80031de:	2161      	movs	r1, #97	; 0x61
 80031e0:	4853      	ldr	r0, [pc, #332]	; (8003330 <FuncMenu_DrawOutputMenu+0x294>)
 80031e2:	f00b f833 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80031e6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80031ea:	9301      	str	r3, [sp, #4]
 80031ec:	2302      	movs	r3, #2
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	2300      	movs	r3, #0
 80031f2:	22d2      	movs	r2, #210	; 0xd2
 80031f4:	21af      	movs	r1, #175	; 0xaf
 80031f6:	484e      	ldr	r0, [pc, #312]	; (8003330 <FuncMenu_DrawOutputMenu+0x294>)
 80031f8:	f00b f828 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80031fc:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003200:	9301      	str	r3, [sp, #4]
 8003202:	2302      	movs	r3, #2
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	2300      	movs	r3, #0
 8003208:	22d2      	movs	r2, #210	; 0xd2
 800320a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800320e:	4848      	ldr	r0, [pc, #288]	; (8003330 <FuncMenu_DrawOutputMenu+0x294>)
 8003210:	f00b f81c 	bl	800e24c <ILI9341_Draw_Text>
				break;
 8003214:	e36c      	b.n	80038f0 <FuncMenu_DrawOutputMenu+0x854>
			case SQUARE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003216:	2300      	movs	r3, #0
 8003218:	9301      	str	r3, [sp, #4]
 800321a:	2302      	movs	r3, #2
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003222:	2232      	movs	r2, #50	; 0x32
 8003224:	210a      	movs	r1, #10
 8003226:	483b      	ldr	r0, [pc, #236]	; (8003314 <FuncMenu_DrawOutputMenu+0x278>)
 8003228:	f00b f810 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800322c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003230:	9301      	str	r3, [sp, #4]
 8003232:	2302      	movs	r3, #2
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	2300      	movs	r3, #0
 8003238:	2246      	movs	r2, #70	; 0x46
 800323a:	210a      	movs	r1, #10
 800323c:	4836      	ldr	r0, [pc, #216]	; (8003318 <FuncMenu_DrawOutputMenu+0x27c>)
 800323e:	f00b f805 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003242:	2300      	movs	r3, #0
 8003244:	9301      	str	r3, [sp, #4]
 8003246:	2302      	movs	r3, #2
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800324e:	225a      	movs	r2, #90	; 0x5a
 8003250:	210a      	movs	r1, #10
 8003252:	4832      	ldr	r0, [pc, #200]	; (800331c <FuncMenu_DrawOutputMenu+0x280>)
 8003254:	f00a fffa 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003258:	2300      	movs	r3, #0
 800325a:	9301      	str	r3, [sp, #4]
 800325c:	2302      	movs	r3, #2
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003264:	226e      	movs	r2, #110	; 0x6e
 8003266:	210a      	movs	r1, #10
 8003268:	482d      	ldr	r0, [pc, #180]	; (8003320 <FuncMenu_DrawOutputMenu+0x284>)
 800326a:	f00a ffef 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800326e:	2300      	movs	r3, #0
 8003270:	9301      	str	r3, [sp, #4]
 8003272:	2302      	movs	r3, #2
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800327a:	2282      	movs	r2, #130	; 0x82
 800327c:	210a      	movs	r1, #10
 800327e:	4829      	ldr	r0, [pc, #164]	; (8003324 <FuncMenu_DrawOutputMenu+0x288>)
 8003280:	f00a ffe4 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003284:	2300      	movs	r3, #0
 8003286:	9301      	str	r3, [sp, #4]
 8003288:	2302      	movs	r3, #2
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003290:	2296      	movs	r2, #150	; 0x96
 8003292:	210a      	movs	r1, #10
 8003294:	4824      	ldr	r0, [pc, #144]	; (8003328 <FuncMenu_DrawOutputMenu+0x28c>)
 8003296:	f00a ffd9 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800329a:	2300      	movs	r3, #0
 800329c:	9301      	str	r3, [sp, #4]
 800329e:	2302      	movs	r3, #2
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032a6:	22aa      	movs	r2, #170	; 0xaa
 80032a8:	210a      	movs	r1, #10
 80032aa:	4820      	ldr	r0, [pc, #128]	; (800332c <FuncMenu_DrawOutputMenu+0x290>)
 80032ac:	f00a ffce 	bl	800e24c <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80032b0:	f240 23fd 	movw	r3, #765	; 0x2fd
 80032b4:	9301      	str	r3, [sp, #4]
 80032b6:	2302      	movs	r3, #2
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	2300      	movs	r3, #0
 80032bc:	22d2      	movs	r2, #210	; 0xd2
 80032be:	2105      	movs	r1, #5
 80032c0:	481b      	ldr	r0, [pc, #108]	; (8003330 <FuncMenu_DrawOutputMenu+0x294>)
 80032c2:	f00a ffc3 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80032c6:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80032ca:	9301      	str	r3, [sp, #4]
 80032cc:	2302      	movs	r3, #2
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	2300      	movs	r3, #0
 80032d2:	22d2      	movs	r2, #210	; 0xd2
 80032d4:	2161      	movs	r1, #97	; 0x61
 80032d6:	4816      	ldr	r0, [pc, #88]	; (8003330 <FuncMenu_DrawOutputMenu+0x294>)
 80032d8:	f00a ffb8 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80032dc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80032e0:	9301      	str	r3, [sp, #4]
 80032e2:	2302      	movs	r3, #2
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	2300      	movs	r3, #0
 80032e8:	22d2      	movs	r2, #210	; 0xd2
 80032ea:	21af      	movs	r1, #175	; 0xaf
 80032ec:	4810      	ldr	r0, [pc, #64]	; (8003330 <FuncMenu_DrawOutputMenu+0x294>)
 80032ee:	f00a ffad 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80032f2:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80032f6:	9301      	str	r3, [sp, #4]
 80032f8:	2302      	movs	r3, #2
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	2300      	movs	r3, #0
 80032fe:	22d2      	movs	r2, #210	; 0xd2
 8003300:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003304:	480a      	ldr	r0, [pc, #40]	; (8003330 <FuncMenu_DrawOutputMenu+0x294>)
 8003306:	f00a ffa1 	bl	800e24c <ILI9341_Draw_Text>
				break;
 800330a:	e2f1      	b.n	80038f0 <FuncMenu_DrawOutputMenu+0x854>
 800330c:	08013234 	.word	0x08013234
 8003310:	08013244 	.word	0x08013244
 8003314:	08013254 	.word	0x08013254
 8003318:	0801325c 	.word	0x0801325c
 800331c:	08013268 	.word	0x08013268
 8003320:	08013270 	.word	0x08013270
 8003324:	0801327c 	.word	0x0801327c
 8003328:	08013288 	.word	0x08013288
 800332c:	08013290 	.word	0x08013290
 8003330:	0801322c 	.word	0x0801322c
			case SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003334:	2300      	movs	r3, #0
 8003336:	9301      	str	r3, [sp, #4]
 8003338:	2302      	movs	r3, #2
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003340:	2232      	movs	r2, #50	; 0x32
 8003342:	210a      	movs	r1, #10
 8003344:	48b9      	ldr	r0, [pc, #740]	; (800362c <FuncMenu_DrawOutputMenu+0x590>)
 8003346:	f00a ff81 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800334a:	2300      	movs	r3, #0
 800334c:	9301      	str	r3, [sp, #4]
 800334e:	2302      	movs	r3, #2
 8003350:	9300      	str	r3, [sp, #0]
 8003352:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003356:	2246      	movs	r2, #70	; 0x46
 8003358:	210a      	movs	r1, #10
 800335a:	48b5      	ldr	r0, [pc, #724]	; (8003630 <FuncMenu_DrawOutputMenu+0x594>)
 800335c:	f00a ff76 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003360:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003364:	9301      	str	r3, [sp, #4]
 8003366:	2302      	movs	r3, #2
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	2300      	movs	r3, #0
 800336c:	225a      	movs	r2, #90	; 0x5a
 800336e:	210a      	movs	r1, #10
 8003370:	48b0      	ldr	r0, [pc, #704]	; (8003634 <FuncMenu_DrawOutputMenu+0x598>)
 8003372:	f00a ff6b 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003376:	2300      	movs	r3, #0
 8003378:	9301      	str	r3, [sp, #4]
 800337a:	2302      	movs	r3, #2
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003382:	226e      	movs	r2, #110	; 0x6e
 8003384:	210a      	movs	r1, #10
 8003386:	48ac      	ldr	r0, [pc, #688]	; (8003638 <FuncMenu_DrawOutputMenu+0x59c>)
 8003388:	f00a ff60 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800338c:	2300      	movs	r3, #0
 800338e:	9301      	str	r3, [sp, #4]
 8003390:	2302      	movs	r3, #2
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003398:	2282      	movs	r2, #130	; 0x82
 800339a:	210a      	movs	r1, #10
 800339c:	48a7      	ldr	r0, [pc, #668]	; (800363c <FuncMenu_DrawOutputMenu+0x5a0>)
 800339e:	f00a ff55 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80033a2:	2300      	movs	r3, #0
 80033a4:	9301      	str	r3, [sp, #4]
 80033a6:	2302      	movs	r3, #2
 80033a8:	9300      	str	r3, [sp, #0]
 80033aa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80033ae:	2296      	movs	r2, #150	; 0x96
 80033b0:	210a      	movs	r1, #10
 80033b2:	48a3      	ldr	r0, [pc, #652]	; (8003640 <FuncMenu_DrawOutputMenu+0x5a4>)
 80033b4:	f00a ff4a 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80033b8:	2300      	movs	r3, #0
 80033ba:	9301      	str	r3, [sp, #4]
 80033bc:	2302      	movs	r3, #2
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80033c4:	22aa      	movs	r2, #170	; 0xaa
 80033c6:	210a      	movs	r1, #10
 80033c8:	489e      	ldr	r0, [pc, #632]	; (8003644 <FuncMenu_DrawOutputMenu+0x5a8>)
 80033ca:	f00a ff3f 	bl	800e24c <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80033ce:	f240 23fd 	movw	r3, #765	; 0x2fd
 80033d2:	9301      	str	r3, [sp, #4]
 80033d4:	2302      	movs	r3, #2
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	2300      	movs	r3, #0
 80033da:	22d2      	movs	r2, #210	; 0xd2
 80033dc:	2105      	movs	r1, #5
 80033de:	489a      	ldr	r0, [pc, #616]	; (8003648 <FuncMenu_DrawOutputMenu+0x5ac>)
 80033e0:	f00a ff34 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80033e4:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80033e8:	9301      	str	r3, [sp, #4]
 80033ea:	2302      	movs	r3, #2
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	2300      	movs	r3, #0
 80033f0:	22d2      	movs	r2, #210	; 0xd2
 80033f2:	2161      	movs	r1, #97	; 0x61
 80033f4:	4894      	ldr	r0, [pc, #592]	; (8003648 <FuncMenu_DrawOutputMenu+0x5ac>)
 80033f6:	f00a ff29 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80033fa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80033fe:	9301      	str	r3, [sp, #4]
 8003400:	2302      	movs	r3, #2
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	2300      	movs	r3, #0
 8003406:	22d2      	movs	r2, #210	; 0xd2
 8003408:	21af      	movs	r1, #175	; 0xaf
 800340a:	488f      	ldr	r0, [pc, #572]	; (8003648 <FuncMenu_DrawOutputMenu+0x5ac>)
 800340c:	f00a ff1e 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003410:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003414:	9301      	str	r3, [sp, #4]
 8003416:	2302      	movs	r3, #2
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	2300      	movs	r3, #0
 800341c:	22d2      	movs	r2, #210	; 0xd2
 800341e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003422:	4889      	ldr	r0, [pc, #548]	; (8003648 <FuncMenu_DrawOutputMenu+0x5ac>)
 8003424:	f00a ff12 	bl	800e24c <ILI9341_Draw_Text>
				break;
 8003428:	e262      	b.n	80038f0 <FuncMenu_DrawOutputMenu+0x854>
			case REV_SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800342a:	2300      	movs	r3, #0
 800342c:	9301      	str	r3, [sp, #4]
 800342e:	2302      	movs	r3, #2
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003436:	2232      	movs	r2, #50	; 0x32
 8003438:	210a      	movs	r1, #10
 800343a:	487c      	ldr	r0, [pc, #496]	; (800362c <FuncMenu_DrawOutputMenu+0x590>)
 800343c:	f00a ff06 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003440:	2300      	movs	r3, #0
 8003442:	9301      	str	r3, [sp, #4]
 8003444:	2302      	movs	r3, #2
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800344c:	2246      	movs	r2, #70	; 0x46
 800344e:	210a      	movs	r1, #10
 8003450:	4877      	ldr	r0, [pc, #476]	; (8003630 <FuncMenu_DrawOutputMenu+0x594>)
 8003452:	f00a fefb 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003456:	2300      	movs	r3, #0
 8003458:	9301      	str	r3, [sp, #4]
 800345a:	2302      	movs	r3, #2
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003462:	225a      	movs	r2, #90	; 0x5a
 8003464:	210a      	movs	r1, #10
 8003466:	4873      	ldr	r0, [pc, #460]	; (8003634 <FuncMenu_DrawOutputMenu+0x598>)
 8003468:	f00a fef0 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800346c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003470:	9301      	str	r3, [sp, #4]
 8003472:	2302      	movs	r3, #2
 8003474:	9300      	str	r3, [sp, #0]
 8003476:	2300      	movs	r3, #0
 8003478:	226e      	movs	r2, #110	; 0x6e
 800347a:	210a      	movs	r1, #10
 800347c:	486e      	ldr	r0, [pc, #440]	; (8003638 <FuncMenu_DrawOutputMenu+0x59c>)
 800347e:	f00a fee5 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003482:	2300      	movs	r3, #0
 8003484:	9301      	str	r3, [sp, #4]
 8003486:	2302      	movs	r3, #2
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800348e:	2282      	movs	r2, #130	; 0x82
 8003490:	210a      	movs	r1, #10
 8003492:	486a      	ldr	r0, [pc, #424]	; (800363c <FuncMenu_DrawOutputMenu+0x5a0>)
 8003494:	f00a feda 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003498:	2300      	movs	r3, #0
 800349a:	9301      	str	r3, [sp, #4]
 800349c:	2302      	movs	r3, #2
 800349e:	9300      	str	r3, [sp, #0]
 80034a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80034a4:	2296      	movs	r2, #150	; 0x96
 80034a6:	210a      	movs	r1, #10
 80034a8:	4865      	ldr	r0, [pc, #404]	; (8003640 <FuncMenu_DrawOutputMenu+0x5a4>)
 80034aa:	f00a fecf 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034ae:	2300      	movs	r3, #0
 80034b0:	9301      	str	r3, [sp, #4]
 80034b2:	2302      	movs	r3, #2
 80034b4:	9300      	str	r3, [sp, #0]
 80034b6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80034ba:	22aa      	movs	r2, #170	; 0xaa
 80034bc:	210a      	movs	r1, #10
 80034be:	4861      	ldr	r0, [pc, #388]	; (8003644 <FuncMenu_DrawOutputMenu+0x5a8>)
 80034c0:	f00a fec4 	bl	800e24c <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80034c4:	f240 23fd 	movw	r3, #765	; 0x2fd
 80034c8:	9301      	str	r3, [sp, #4]
 80034ca:	2302      	movs	r3, #2
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	2300      	movs	r3, #0
 80034d0:	22d2      	movs	r2, #210	; 0xd2
 80034d2:	2105      	movs	r1, #5
 80034d4:	485c      	ldr	r0, [pc, #368]	; (8003648 <FuncMenu_DrawOutputMenu+0x5ac>)
 80034d6:	f00a feb9 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80034da:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80034de:	9301      	str	r3, [sp, #4]
 80034e0:	2302      	movs	r3, #2
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	2300      	movs	r3, #0
 80034e6:	22d2      	movs	r2, #210	; 0xd2
 80034e8:	2161      	movs	r1, #97	; 0x61
 80034ea:	4857      	ldr	r0, [pc, #348]	; (8003648 <FuncMenu_DrawOutputMenu+0x5ac>)
 80034ec:	f00a feae 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80034f0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80034f4:	9301      	str	r3, [sp, #4]
 80034f6:	2302      	movs	r3, #2
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	2300      	movs	r3, #0
 80034fc:	22d2      	movs	r2, #210	; 0xd2
 80034fe:	21af      	movs	r1, #175	; 0xaf
 8003500:	4851      	ldr	r0, [pc, #324]	; (8003648 <FuncMenu_DrawOutputMenu+0x5ac>)
 8003502:	f00a fea3 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003506:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800350a:	9301      	str	r3, [sp, #4]
 800350c:	2302      	movs	r3, #2
 800350e:	9300      	str	r3, [sp, #0]
 8003510:	2300      	movs	r3, #0
 8003512:	22d2      	movs	r2, #210	; 0xd2
 8003514:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003518:	484b      	ldr	r0, [pc, #300]	; (8003648 <FuncMenu_DrawOutputMenu+0x5ac>)
 800351a:	f00a fe97 	bl	800e24c <ILI9341_Draw_Text>
				break;
 800351e:	e1e7      	b.n	80038f0 <FuncMenu_DrawOutputMenu+0x854>
			case TRIANGLE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003520:	2300      	movs	r3, #0
 8003522:	9301      	str	r3, [sp, #4]
 8003524:	2302      	movs	r3, #2
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800352c:	2232      	movs	r2, #50	; 0x32
 800352e:	210a      	movs	r1, #10
 8003530:	483e      	ldr	r0, [pc, #248]	; (800362c <FuncMenu_DrawOutputMenu+0x590>)
 8003532:	f00a fe8b 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003536:	2300      	movs	r3, #0
 8003538:	9301      	str	r3, [sp, #4]
 800353a:	2302      	movs	r3, #2
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003542:	2246      	movs	r2, #70	; 0x46
 8003544:	210a      	movs	r1, #10
 8003546:	483a      	ldr	r0, [pc, #232]	; (8003630 <FuncMenu_DrawOutputMenu+0x594>)
 8003548:	f00a fe80 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800354c:	2300      	movs	r3, #0
 800354e:	9301      	str	r3, [sp, #4]
 8003550:	2302      	movs	r3, #2
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003558:	225a      	movs	r2, #90	; 0x5a
 800355a:	210a      	movs	r1, #10
 800355c:	4835      	ldr	r0, [pc, #212]	; (8003634 <FuncMenu_DrawOutputMenu+0x598>)
 800355e:	f00a fe75 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003562:	2300      	movs	r3, #0
 8003564:	9301      	str	r3, [sp, #4]
 8003566:	2302      	movs	r3, #2
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800356e:	226e      	movs	r2, #110	; 0x6e
 8003570:	210a      	movs	r1, #10
 8003572:	4831      	ldr	r0, [pc, #196]	; (8003638 <FuncMenu_DrawOutputMenu+0x59c>)
 8003574:	f00a fe6a 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003578:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800357c:	9301      	str	r3, [sp, #4]
 800357e:	2302      	movs	r3, #2
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	2300      	movs	r3, #0
 8003584:	2282      	movs	r2, #130	; 0x82
 8003586:	210a      	movs	r1, #10
 8003588:	482c      	ldr	r0, [pc, #176]	; (800363c <FuncMenu_DrawOutputMenu+0x5a0>)
 800358a:	f00a fe5f 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800358e:	2300      	movs	r3, #0
 8003590:	9301      	str	r3, [sp, #4]
 8003592:	2302      	movs	r3, #2
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800359a:	2296      	movs	r2, #150	; 0x96
 800359c:	210a      	movs	r1, #10
 800359e:	4828      	ldr	r0, [pc, #160]	; (8003640 <FuncMenu_DrawOutputMenu+0x5a4>)
 80035a0:	f00a fe54 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035a4:	2300      	movs	r3, #0
 80035a6:	9301      	str	r3, [sp, #4]
 80035a8:	2302      	movs	r3, #2
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035b0:	22aa      	movs	r2, #170	; 0xaa
 80035b2:	210a      	movs	r1, #10
 80035b4:	4823      	ldr	r0, [pc, #140]	; (8003644 <FuncMenu_DrawOutputMenu+0x5a8>)
 80035b6:	f00a fe49 	bl	800e24c <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80035ba:	f240 23fd 	movw	r3, #765	; 0x2fd
 80035be:	9301      	str	r3, [sp, #4]
 80035c0:	2302      	movs	r3, #2
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	2300      	movs	r3, #0
 80035c6:	22d2      	movs	r2, #210	; 0xd2
 80035c8:	2105      	movs	r1, #5
 80035ca:	481f      	ldr	r0, [pc, #124]	; (8003648 <FuncMenu_DrawOutputMenu+0x5ac>)
 80035cc:	f00a fe3e 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80035d0:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80035d4:	9301      	str	r3, [sp, #4]
 80035d6:	2302      	movs	r3, #2
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	2300      	movs	r3, #0
 80035dc:	22d2      	movs	r2, #210	; 0xd2
 80035de:	2161      	movs	r1, #97	; 0x61
 80035e0:	4819      	ldr	r0, [pc, #100]	; (8003648 <FuncMenu_DrawOutputMenu+0x5ac>)
 80035e2:	f00a fe33 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80035e6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80035ea:	9301      	str	r3, [sp, #4]
 80035ec:	2302      	movs	r3, #2
 80035ee:	9300      	str	r3, [sp, #0]
 80035f0:	2300      	movs	r3, #0
 80035f2:	22d2      	movs	r2, #210	; 0xd2
 80035f4:	21af      	movs	r1, #175	; 0xaf
 80035f6:	4814      	ldr	r0, [pc, #80]	; (8003648 <FuncMenu_DrawOutputMenu+0x5ac>)
 80035f8:	f00a fe28 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80035fc:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003600:	9301      	str	r3, [sp, #4]
 8003602:	2302      	movs	r3, #2
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	2300      	movs	r3, #0
 8003608:	22d2      	movs	r2, #210	; 0xd2
 800360a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800360e:	480e      	ldr	r0, [pc, #56]	; (8003648 <FuncMenu_DrawOutputMenu+0x5ac>)
 8003610:	f00a fe1c 	bl	800e24c <ILI9341_Draw_Text>

				ILI9341_Draw_Text("               ", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003614:	2300      	movs	r3, #0
 8003616:	9301      	str	r3, [sp, #4]
 8003618:	2302      	movs	r3, #2
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003620:	2232      	movs	r2, #50	; 0x32
 8003622:	2196      	movs	r1, #150	; 0x96
 8003624:	4809      	ldr	r0, [pc, #36]	; (800364c <FuncMenu_DrawOutputMenu+0x5b0>)
 8003626:	f00a fe11 	bl	800e24c <ILI9341_Draw_Text>
				break;
 800362a:	e161      	b.n	80038f0 <FuncMenu_DrawOutputMenu+0x854>
 800362c:	08013254 	.word	0x08013254
 8003630:	0801325c 	.word	0x0801325c
 8003634:	08013268 	.word	0x08013268
 8003638:	08013270 	.word	0x08013270
 800363c:	0801327c 	.word	0x0801327c
 8003640:	08013288 	.word	0x08013288
 8003644:	08013290 	.word	0x08013290
 8003648:	0801322c 	.word	0x0801322c
 800364c:	08013298 	.word	0x08013298
			case IMPULSE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003650:	2300      	movs	r3, #0
 8003652:	9301      	str	r3, [sp, #4]
 8003654:	2302      	movs	r3, #2
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800365c:	2232      	movs	r2, #50	; 0x32
 800365e:	210a      	movs	r1, #10
 8003660:	48a5      	ldr	r0, [pc, #660]	; (80038f8 <FuncMenu_DrawOutputMenu+0x85c>)
 8003662:	f00a fdf3 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003666:	2300      	movs	r3, #0
 8003668:	9301      	str	r3, [sp, #4]
 800366a:	2302      	movs	r3, #2
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003672:	2246      	movs	r2, #70	; 0x46
 8003674:	210a      	movs	r1, #10
 8003676:	48a1      	ldr	r0, [pc, #644]	; (80038fc <FuncMenu_DrawOutputMenu+0x860>)
 8003678:	f00a fde8 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800367c:	2300      	movs	r3, #0
 800367e:	9301      	str	r3, [sp, #4]
 8003680:	2302      	movs	r3, #2
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003688:	225a      	movs	r2, #90	; 0x5a
 800368a:	210a      	movs	r1, #10
 800368c:	489c      	ldr	r0, [pc, #624]	; (8003900 <FuncMenu_DrawOutputMenu+0x864>)
 800368e:	f00a fddd 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003692:	2300      	movs	r3, #0
 8003694:	9301      	str	r3, [sp, #4]
 8003696:	2302      	movs	r3, #2
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800369e:	226e      	movs	r2, #110	; 0x6e
 80036a0:	210a      	movs	r1, #10
 80036a2:	4898      	ldr	r0, [pc, #608]	; (8003904 <FuncMenu_DrawOutputMenu+0x868>)
 80036a4:	f00a fdd2 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036a8:	2300      	movs	r3, #0
 80036aa:	9301      	str	r3, [sp, #4]
 80036ac:	2302      	movs	r3, #2
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036b4:	2282      	movs	r2, #130	; 0x82
 80036b6:	210a      	movs	r1, #10
 80036b8:	4893      	ldr	r0, [pc, #588]	; (8003908 <FuncMenu_DrawOutputMenu+0x86c>)
 80036ba:	f00a fdc7 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80036be:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80036c2:	9301      	str	r3, [sp, #4]
 80036c4:	2302      	movs	r3, #2
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	2300      	movs	r3, #0
 80036ca:	2296      	movs	r2, #150	; 0x96
 80036cc:	210a      	movs	r1, #10
 80036ce:	488f      	ldr	r0, [pc, #572]	; (800390c <FuncMenu_DrawOutputMenu+0x870>)
 80036d0:	f00a fdbc 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036d4:	2300      	movs	r3, #0
 80036d6:	9301      	str	r3, [sp, #4]
 80036d8:	2302      	movs	r3, #2
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036e0:	22aa      	movs	r2, #170	; 0xaa
 80036e2:	210a      	movs	r1, #10
 80036e4:	488a      	ldr	r0, [pc, #552]	; (8003910 <FuncMenu_DrawOutputMenu+0x874>)
 80036e6:	f00a fdb1 	bl	800e24c <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80036ea:	f240 23fd 	movw	r3, #765	; 0x2fd
 80036ee:	9301      	str	r3, [sp, #4]
 80036f0:	2302      	movs	r3, #2
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	2300      	movs	r3, #0
 80036f6:	22d2      	movs	r2, #210	; 0xd2
 80036f8:	2105      	movs	r1, #5
 80036fa:	4886      	ldr	r0, [pc, #536]	; (8003914 <FuncMenu_DrawOutputMenu+0x878>)
 80036fc:	f00a fda6 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003700:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003704:	9301      	str	r3, [sp, #4]
 8003706:	2302      	movs	r3, #2
 8003708:	9300      	str	r3, [sp, #0]
 800370a:	2300      	movs	r3, #0
 800370c:	22d2      	movs	r2, #210	; 0xd2
 800370e:	2161      	movs	r1, #97	; 0x61
 8003710:	4880      	ldr	r0, [pc, #512]	; (8003914 <FuncMenu_DrawOutputMenu+0x878>)
 8003712:	f00a fd9b 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003716:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800371a:	9301      	str	r3, [sp, #4]
 800371c:	2302      	movs	r3, #2
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	2300      	movs	r3, #0
 8003722:	22d2      	movs	r2, #210	; 0xd2
 8003724:	21af      	movs	r1, #175	; 0xaf
 8003726:	487b      	ldr	r0, [pc, #492]	; (8003914 <FuncMenu_DrawOutputMenu+0x878>)
 8003728:	f00a fd90 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800372c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003730:	9301      	str	r3, [sp, #4]
 8003732:	2302      	movs	r3, #2
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	2300      	movs	r3, #0
 8003738:	22d2      	movs	r2, #210	; 0xd2
 800373a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800373e:	4875      	ldr	r0, [pc, #468]	; (8003914 <FuncMenu_DrawOutputMenu+0x878>)
 8003740:	f00a fd84 	bl	800e24c <ILI9341_Draw_Text>

				ILI9341_Draw_Text("               ", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003744:	2300      	movs	r3, #0
 8003746:	9301      	str	r3, [sp, #4]
 8003748:	2302      	movs	r3, #2
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003750:	2232      	movs	r2, #50	; 0x32
 8003752:	2196      	movs	r1, #150	; 0x96
 8003754:	4870      	ldr	r0, [pc, #448]	; (8003918 <FuncMenu_DrawOutputMenu+0x87c>)
 8003756:	f00a fd79 	bl	800e24c <ILI9341_Draw_Text>
				break;
 800375a:	e0c9      	b.n	80038f0 <FuncMenu_DrawOutputMenu+0x854>
			case PWM_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800375c:	2300      	movs	r3, #0
 800375e:	9301      	str	r3, [sp, #4]
 8003760:	2302      	movs	r3, #2
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003768:	2232      	movs	r2, #50	; 0x32
 800376a:	210a      	movs	r1, #10
 800376c:	4862      	ldr	r0, [pc, #392]	; (80038f8 <FuncMenu_DrawOutputMenu+0x85c>)
 800376e:	f00a fd6d 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003772:	2300      	movs	r3, #0
 8003774:	9301      	str	r3, [sp, #4]
 8003776:	2302      	movs	r3, #2
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800377e:	2246      	movs	r2, #70	; 0x46
 8003780:	210a      	movs	r1, #10
 8003782:	485e      	ldr	r0, [pc, #376]	; (80038fc <FuncMenu_DrawOutputMenu+0x860>)
 8003784:	f00a fd62 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003788:	2300      	movs	r3, #0
 800378a:	9301      	str	r3, [sp, #4]
 800378c:	2302      	movs	r3, #2
 800378e:	9300      	str	r3, [sp, #0]
 8003790:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003794:	225a      	movs	r2, #90	; 0x5a
 8003796:	210a      	movs	r1, #10
 8003798:	4859      	ldr	r0, [pc, #356]	; (8003900 <FuncMenu_DrawOutputMenu+0x864>)
 800379a:	f00a fd57 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800379e:	2300      	movs	r3, #0
 80037a0:	9301      	str	r3, [sp, #4]
 80037a2:	2302      	movs	r3, #2
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037aa:	226e      	movs	r2, #110	; 0x6e
 80037ac:	210a      	movs	r1, #10
 80037ae:	4855      	ldr	r0, [pc, #340]	; (8003904 <FuncMenu_DrawOutputMenu+0x868>)
 80037b0:	f00a fd4c 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037b4:	2300      	movs	r3, #0
 80037b6:	9301      	str	r3, [sp, #4]
 80037b8:	2302      	movs	r3, #2
 80037ba:	9300      	str	r3, [sp, #0]
 80037bc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037c0:	2282      	movs	r2, #130	; 0x82
 80037c2:	210a      	movs	r1, #10
 80037c4:	4850      	ldr	r0, [pc, #320]	; (8003908 <FuncMenu_DrawOutputMenu+0x86c>)
 80037c6:	f00a fd41 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037ca:	2300      	movs	r3, #0
 80037cc:	9301      	str	r3, [sp, #4]
 80037ce:	2302      	movs	r3, #2
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037d6:	2296      	movs	r2, #150	; 0x96
 80037d8:	210a      	movs	r1, #10
 80037da:	484c      	ldr	r0, [pc, #304]	; (800390c <FuncMenu_DrawOutputMenu+0x870>)
 80037dc:	f00a fd36 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- PWM", 		10, 170, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80037e0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80037e4:	9301      	str	r3, [sp, #4]
 80037e6:	2302      	movs	r3, #2
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	2300      	movs	r3, #0
 80037ec:	22aa      	movs	r2, #170	; 0xaa
 80037ee:	210a      	movs	r1, #10
 80037f0:	4847      	ldr	r0, [pc, #284]	; (8003910 <FuncMenu_DrawOutputMenu+0x874>)
 80037f2:	f00a fd2b 	bl	800e24c <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80037f6:	f240 23fd 	movw	r3, #765	; 0x2fd
 80037fa:	9301      	str	r3, [sp, #4]
 80037fc:	2302      	movs	r3, #2
 80037fe:	9300      	str	r3, [sp, #0]
 8003800:	2300      	movs	r3, #0
 8003802:	22d2      	movs	r2, #210	; 0xd2
 8003804:	2105      	movs	r1, #5
 8003806:	4843      	ldr	r0, [pc, #268]	; (8003914 <FuncMenu_DrawOutputMenu+0x878>)
 8003808:	f00a fd20 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800380c:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003810:	9301      	str	r3, [sp, #4]
 8003812:	2302      	movs	r3, #2
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	2300      	movs	r3, #0
 8003818:	22d2      	movs	r2, #210	; 0xd2
 800381a:	2161      	movs	r1, #97	; 0x61
 800381c:	483d      	ldr	r0, [pc, #244]	; (8003914 <FuncMenu_DrawOutputMenu+0x878>)
 800381e:	f00a fd15 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("DUTY", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003822:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003826:	9301      	str	r3, [sp, #4]
 8003828:	2302      	movs	r3, #2
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	2300      	movs	r3, #0
 800382e:	22d2      	movs	r2, #210	; 0xd2
 8003830:	21af      	movs	r1, #175	; 0xaf
 8003832:	483a      	ldr	r0, [pc, #232]	; (800391c <FuncMenu_DrawOutputMenu+0x880>)
 8003834:	f00a fd0a 	bl	800e24c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003838:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800383c:	9301      	str	r3, [sp, #4]
 800383e:	2302      	movs	r3, #2
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	2300      	movs	r3, #0
 8003844:	22d2      	movs	r2, #210	; 0xd2
 8003846:	f44f 7182 	mov.w	r1, #260	; 0x104
 800384a:	4832      	ldr	r0, [pc, #200]	; (8003914 <FuncMenu_DrawOutputMenu+0x878>)
 800384c:	f00a fcfe 	bl	800e24c <ILI9341_Draw_Text>

				if(SM_IsFuncPwmDutyMode())
 8003850:	f002 fd8e 	bl	8006370 <SM_IsFuncPwmDutyMode>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00b      	beq.n	8003872 <FuncMenu_DrawOutputMenu+0x7d6>
					ILI9341_Draw_Text("DUTY:", 	150, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800385a:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800385e:	9301      	str	r3, [sp, #4]
 8003860:	2302      	movs	r3, #2
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	2300      	movs	r3, #0
 8003866:	2232      	movs	r2, #50	; 0x32
 8003868:	2196      	movs	r1, #150	; 0x96
 800386a:	482d      	ldr	r0, [pc, #180]	; (8003920 <FuncMenu_DrawOutputMenu+0x884>)
 800386c:	f00a fcee 	bl	800e24c <ILI9341_Draw_Text>
 8003870:	e00a      	b.n	8003888 <FuncMenu_DrawOutputMenu+0x7ec>
				else
					ILI9341_Draw_Text("DUTY:", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003872:	2300      	movs	r3, #0
 8003874:	9301      	str	r3, [sp, #4]
 8003876:	2302      	movs	r3, #2
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800387e:	2232      	movs	r2, #50	; 0x32
 8003880:	2196      	movs	r1, #150	; 0x96
 8003882:	4827      	ldr	r0, [pc, #156]	; (8003920 <FuncMenu_DrawOutputMenu+0x884>)
 8003884:	f00a fce2 	bl	800e24c <ILI9341_Draw_Text>

				char duty[10] = "";
 8003888:	2300      	movs	r3, #0
 800388a:	60bb      	str	r3, [r7, #8]
 800388c:	f107 030c 	add.w	r3, r7, #12
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	809a      	strh	r2, [r3, #4]
				snprintf(duty, sizeof(duty), "%0.2f%%", ((float)TIM3->CCR2 / (float)TIM3->ARR) * 100);
 8003896:	4b23      	ldr	r3, [pc, #140]	; (8003924 <FuncMenu_DrawOutputMenu+0x888>)
 8003898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389a:	ee07 3a90 	vmov	s15, r3
 800389e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038a2:	4b20      	ldr	r3, [pc, #128]	; (8003924 <FuncMenu_DrawOutputMenu+0x888>)
 80038a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a6:	ee07 3a90 	vmov	s15, r3
 80038aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038b2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003928 <FuncMenu_DrawOutputMenu+0x88c>
 80038b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038ba:	ee17 0a90 	vmov	r0, s15
 80038be:	f7fc fe6b 	bl	8000598 <__aeabi_f2d>
 80038c2:	4603      	mov	r3, r0
 80038c4:	460c      	mov	r4, r1
 80038c6:	f107 0008 	add.w	r0, r7, #8
 80038ca:	e9cd 3400 	strd	r3, r4, [sp]
 80038ce:	4a17      	ldr	r2, [pc, #92]	; (800392c <FuncMenu_DrawOutputMenu+0x890>)
 80038d0:	210a      	movs	r1, #10
 80038d2:	f00c f85f 	bl	800f994 <sniprintf>
				ILI9341_Draw_Text(duty, 	220, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80038d6:	f107 0008 	add.w	r0, r7, #8
 80038da:	2300      	movs	r3, #0
 80038dc:	9301      	str	r3, [sp, #4]
 80038de:	2302      	movs	r3, #2
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80038e6:	2232      	movs	r2, #50	; 0x32
 80038e8:	21dc      	movs	r1, #220	; 0xdc
 80038ea:	f00a fcaf 	bl	800e24c <ILI9341_Draw_Text>
				break;
 80038ee:	bf00      	nop
		}

	}


}
 80038f0:	bf00      	nop
 80038f2:	371c      	adds	r7, #28
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd90      	pop	{r4, r7, pc}
 80038f8:	08013254 	.word	0x08013254
 80038fc:	0801325c 	.word	0x0801325c
 8003900:	08013268 	.word	0x08013268
 8003904:	08013270 	.word	0x08013270
 8003908:	0801327c 	.word	0x0801327c
 800390c:	08013288 	.word	0x08013288
 8003910:	08013290 	.word	0x08013290
 8003914:	0801322c 	.word	0x0801322c
 8003918:	08013298 	.word	0x08013298
 800391c:	080132a8 	.word	0x080132a8
 8003920:	080132b0 	.word	0x080132b0
 8003924:	40000400 	.word	0x40000400
 8003928:	42c80000 	.word	0x42c80000
 800392c:	080132b8 	.word	0x080132b8

08003930 <GainMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMenu(eGainMenu_Status pMenu)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	4603      	mov	r3, r0
 8003938:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 800393a:	79fb      	ldrb	r3, [r7, #7]
 800393c:	2b02      	cmp	r3, #2
 800393e:	d007      	beq.n	8003950 <GainMenu_DrawMenu+0x20>
 8003940:	2b03      	cmp	r3, #3
 8003942:	d008      	beq.n	8003956 <GainMenu_DrawMenu+0x26>
 8003944:	2b01      	cmp	r3, #1
 8003946:	d000      	beq.n	800394a <GainMenu_DrawMenu+0x1a>
		case ENABLE_GAIN_SYNC_MENU:
			GainMenu_DrawSyncMenu();
			break;

		default:
			break;
 8003948:	e008      	b.n	800395c <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawMainMenu();
 800394a:	f000 f80b 	bl	8003964 <GainMenu_DrawMainMenu>
			break;
 800394e:	e005      	b.n	800395c <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSignalMenu();
 8003950:	f000 f850 	bl	80039f4 <GainMenu_DrawSignalMenu>
			break;
 8003954:	e002      	b.n	800395c <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSyncMenu();
 8003956:	f000 f863 	bl	8003a20 <GainMenu_DrawSyncMenu>
			break;
 800395a:	bf00      	nop

	}
}
 800395c:	bf00      	nop
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <GainMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMainMenu()
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->GAIN", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 800396a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800396e:	9301      	str	r3, [sp, #4]
 8003970:	2302      	movs	r3, #2
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	2300      	movs	r3, #0
 8003976:	220a      	movs	r2, #10
 8003978:	210a      	movs	r1, #10
 800397a:	481a      	ldr	r0, [pc, #104]	; (80039e4 <GainMenu_DrawMainMenu+0x80>)
 800397c:	f00a fc66 	bl	800e24c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003980:	f7fd faba 	bl	8000ef8 <DM_DisplayFormattedOutput>

	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5, 	 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003984:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003988:	9301      	str	r3, [sp, #4]
 800398a:	2302      	movs	r3, #2
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	2300      	movs	r3, #0
 8003990:	22d2      	movs	r2, #210	; 0xd2
 8003992:	2105      	movs	r1, #5
 8003994:	4814      	ldr	r0, [pc, #80]	; (80039e8 <GainMenu_DrawMainMenu+0x84>)
 8003996:	f00a fc59 	bl	800e24c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SYNC",	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800399a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800399e:	9301      	str	r3, [sp, #4]
 80039a0:	2302      	movs	r3, #2
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	2300      	movs	r3, #0
 80039a6:	22d2      	movs	r2, #210	; 0xd2
 80039a8:	2161      	movs	r1, #97	; 0x61
 80039aa:	4810      	ldr	r0, [pc, #64]	; (80039ec <GainMenu_DrawMainMenu+0x88>)
 80039ac:	f00a fc4e 	bl	800e24c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80039b0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80039b4:	9301      	str	r3, [sp, #4]
 80039b6:	2302      	movs	r3, #2
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	2300      	movs	r3, #0
 80039bc:	22d2      	movs	r2, #210	; 0xd2
 80039be:	21af      	movs	r1, #175	; 0xaf
 80039c0:	480b      	ldr	r0, [pc, #44]	; (80039f0 <GainMenu_DrawMainMenu+0x8c>)
 80039c2:	f00a fc43 	bl	800e24c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80039c6:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80039ca:	9301      	str	r3, [sp, #4]
 80039cc:	2302      	movs	r3, #2
 80039ce:	9300      	str	r3, [sp, #0]
 80039d0:	2300      	movs	r3, #0
 80039d2:	22d2      	movs	r2, #210	; 0xd2
 80039d4:	f44f 7182 	mov.w	r1, #260	; 0x104
 80039d8:	4805      	ldr	r0, [pc, #20]	; (80039f0 <GainMenu_DrawMainMenu+0x8c>)
 80039da:	f00a fc37 	bl	800e24c <ILI9341_Draw_Text>
}
 80039de:	bf00      	nop
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	080132c0 	.word	0x080132c0
 80039e8:	080132cc 	.word	0x080132cc
 80039ec:	080132d4 	.word	0x080132d4
 80039f0:	080132dc 	.word	0x080132dc

080039f4 <GainMenu_DrawSignalMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSignalMenu()
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->SIG", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80039fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039fe:	9301      	str	r3, [sp, #4]
 8003a00:	2302      	movs	r3, #2
 8003a02:	9300      	str	r3, [sp, #0]
 8003a04:	2300      	movs	r3, #0
 8003a06:	220a      	movs	r2, #10
 8003a08:	210a      	movs	r1, #10
 8003a0a:	4804      	ldr	r0, [pc, #16]	; (8003a1c <GainMenu_DrawSignalMenu+0x28>)
 8003a0c:	f00a fc1e 	bl	800e24c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003a10:	f7fd fa72 	bl	8000ef8 <DM_DisplayFormattedOutput>
}
 8003a14:	bf00      	nop
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	080132e4 	.word	0x080132e4

08003a20 <GainMenu_DrawSyncMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSyncMenu()
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->SYNC", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003a26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a2a:	9301      	str	r3, [sp, #4]
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	2300      	movs	r3, #0
 8003a32:	220a      	movs	r2, #10
 8003a34:	210a      	movs	r1, #10
 8003a36:	4804      	ldr	r0, [pc, #16]	; (8003a48 <GainMenu_DrawSyncMenu+0x28>)
 8003a38:	f00a fc08 	bl	800e24c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003a3c:	f7fd fa5c 	bl	8000ef8 <DM_DisplayFormattedOutput>
}
 8003a40:	bf00      	nop
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	080132f4 	.word	0x080132f4

08003a4c <ToplevelMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMenu(eToplevelMenu_Status pMenu)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	4603      	mov	r3, r0
 8003a54:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003a56:	79fb      	ldrb	r3, [r7, #7]
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d007      	beq.n	8003a6c <ToplevelMenu_DrawMenu+0x20>
 8003a5c:	2b03      	cmp	r3, #3
 8003a5e:	d008      	beq.n	8003a72 <ToplevelMenu_DrawMenu+0x26>
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d000      	beq.n	8003a66 <ToplevelMenu_DrawMenu+0x1a>
		case ENABLE_TOPLEVEL_INPUT_MENU:
			ToplevelMenu_DrawInputMenu();
			break;

		default:
			break;
 8003a64:	e008      	b.n	8003a78 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawMainMenu();
 8003a66:	f000 f80b 	bl	8003a80 <ToplevelMenu_DrawMainMenu>
			break;
 8003a6a:	e005      	b.n	8003a78 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawOutputMenu();
 8003a6c:	f000 f848 	bl	8003b00 <ToplevelMenu_DrawOutputMenu>
			break;
 8003a70:	e002      	b.n	8003a78 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawInputMenu();
 8003a72:	f000 f88f 	bl	8003b94 <ToplevelMenu_DrawInputMenu>
			break;
 8003a76:	bf00      	nop

	}
}
 8003a78:	bf00      	nop
 8003a7a:	3708      	adds	r7, #8
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <ToplevelMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMainMenu()
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af02      	add	r7, sp, #8
	// Top Level screen
	#ifdef SWV_DEBUG_ENABLED
		  printf("Drawing Main screen\n");
 8003a86:	481a      	ldr	r0, [pc, #104]	; (8003af0 <ToplevelMenu_DrawMainMenu+0x70>)
 8003a88:	f00b ff7c 	bl	800f984 <puts>
	#endif

	// Main screen
	//ILI9341_Draw_Text("SIGNAL GENERATOR", 	10, 10, WHITE, 2, BLACK);

	DM_DisplayFormattedOutput();
 8003a8c:	f7fd fa34 	bl	8000ef8 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("OUTPUT", 6, 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003a90:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003a94:	9301      	str	r3, [sp, #4]
 8003a96:	2302      	movs	r3, #2
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	22d2      	movs	r2, #210	; 0xd2
 8003a9e:	2106      	movs	r1, #6
 8003aa0:	4814      	ldr	r0, [pc, #80]	; (8003af4 <ToplevelMenu_DrawMainMenu+0x74>)
 8003aa2:	f00a fbd3 	bl	800e24c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("INPUT", 93, 210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003aa6:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003aaa:	9301      	str	r3, [sp, #4]
 8003aac:	2302      	movs	r3, #2
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	22d2      	movs	r2, #210	; 0xd2
 8003ab4:	215d      	movs	r1, #93	; 0x5d
 8003ab6:	4810      	ldr	r0, [pc, #64]	; (8003af8 <ToplevelMenu_DrawMainMenu+0x78>)
 8003ab8:	f00a fbc8 	bl	800e24c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003abc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003ac0:	9301      	str	r3, [sp, #4]
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	22d2      	movs	r2, #210	; 0xd2
 8003aca:	21af      	movs	r1, #175	; 0xaf
 8003acc:	480b      	ldr	r0, [pc, #44]	; (8003afc <ToplevelMenu_DrawMainMenu+0x7c>)
 8003ace:	f00a fbbd 	bl	800e24c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003ad2:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003ad6:	9301      	str	r3, [sp, #4]
 8003ad8:	2302      	movs	r3, #2
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	2300      	movs	r3, #0
 8003ade:	22d2      	movs	r2, #210	; 0xd2
 8003ae0:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003ae4:	4805      	ldr	r0, [pc, #20]	; (8003afc <ToplevelMenu_DrawMainMenu+0x7c>)
 8003ae6:	f00a fbb1 	bl	800e24c <ILI9341_Draw_Text>


}
 8003aea:	bf00      	nop
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	08013304 	.word	0x08013304
 8003af4:	08013318 	.word	0x08013318
 8003af8:	08013320 	.word	0x08013320
 8003afc:	08013328 	.word	0x08013328

08003b00 <ToplevelMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawOutputMenu()
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003b06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b0a:	9301      	str	r3, [sp, #4]
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	2300      	movs	r3, #0
 8003b12:	220a      	movs	r2, #10
 8003b14:	210a      	movs	r1, #10
 8003b16:	481a      	ldr	r0, [pc, #104]	; (8003b80 <ToplevelMenu_DrawOutputMenu+0x80>)
 8003b18:	f00a fb98 	bl	800e24c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003b1c:	f7fd f9ec 	bl	8000ef8 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("FUNC", 13,  210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003b20:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003b24:	9301      	str	r3, [sp, #4]
 8003b26:	2302      	movs	r3, #2
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	22d2      	movs	r2, #210	; 0xd2
 8003b2e:	210d      	movs	r1, #13
 8003b30:	4814      	ldr	r0, [pc, #80]	; (8003b84 <ToplevelMenu_DrawOutputMenu+0x84>)
 8003b32:	f00a fb8b 	bl	800e24c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FREQ", 99,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003b36:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003b3a:	9301      	str	r3, [sp, #4]
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	2300      	movs	r3, #0
 8003b42:	22d2      	movs	r2, #210	; 0xd2
 8003b44:	2163      	movs	r1, #99	; 0x63
 8003b46:	4810      	ldr	r0, [pc, #64]	; (8003b88 <ToplevelMenu_DrawOutputMenu+0x88>)
 8003b48:	f00a fb80 	bl	800e24c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GAIN", 176, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003b4c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003b50:	9301      	str	r3, [sp, #4]
 8003b52:	2302      	movs	r3, #2
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	2300      	movs	r3, #0
 8003b58:	22d2      	movs	r2, #210	; 0xd2
 8003b5a:	21b0      	movs	r1, #176	; 0xb0
 8003b5c:	480b      	ldr	r0, [pc, #44]	; (8003b8c <ToplevelMenu_DrawOutputMenu+0x8c>)
 8003b5e:	f00a fb75 	bl	800e24c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("OFFSET", 245, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003b62:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003b66:	9301      	str	r3, [sp, #4]
 8003b68:	2302      	movs	r3, #2
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	22d2      	movs	r2, #210	; 0xd2
 8003b70:	21f5      	movs	r1, #245	; 0xf5
 8003b72:	4807      	ldr	r0, [pc, #28]	; (8003b90 <ToplevelMenu_DrawOutputMenu+0x90>)
 8003b74:	f00a fb6a 	bl	800e24c <ILI9341_Draw_Text>
}
 8003b78:	bf00      	nop
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	08013330 	.word	0x08013330
 8003b84:	08013338 	.word	0x08013338
 8003b88:	08013340 	.word	0x08013340
 8003b8c:	08013348 	.word	0x08013348
 8003b90:	08013350 	.word	0x08013350

08003b94 <ToplevelMenu_DrawInputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawInputMenu()
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("IN->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003b9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b9e:	9301      	str	r3, [sp, #4]
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	220a      	movs	r2, #10
 8003ba8:	210a      	movs	r1, #10
 8003baa:	4804      	ldr	r0, [pc, #16]	; (8003bbc <ToplevelMenu_DrawInputMenu+0x28>)
 8003bac:	f00a fb4e 	bl	800e24c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003bb0:	f7fd f9a2 	bl	8000ef8 <DM_DisplayFormattedOutput>
}
 8003bb4:	bf00      	nop
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	08013358 	.word	0x08013358

08003bc0 <BiasMenu_getStatus>:
 *	@param None
 *	@retval None
 *
 */
eBiasMenu_Status BiasMenu_getStatus()
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
	return eNextBiasMenuStatus;
 8003bc4:	4b03      	ldr	r3, [pc, #12]	; (8003bd4 <BiasMenu_getStatus+0x14>)
 8003bc6:	781b      	ldrb	r3, [r3, #0]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	20001ec9 	.word	0x20001ec9

08003bd8 <BiasMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuEntryHandler()
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("BiasMenuEntryHandler Event captured\n");
 8003bdc:	480b      	ldr	r0, [pc, #44]	; (8003c0c <BiasMenuEntryHandler+0x34>)
 8003bde:	f00b fed1 	bl	800f984 <puts>
	#endif

	DM_RefreshScreen();
 8003be2:	f7fd fc49 	bl	8001478 <DM_RefreshScreen>

	eNextBiasMenuStatus = ENABLE_BIAS_MENU;
 8003be6:	4b0a      	ldr	r3, [pc, #40]	; (8003c10 <BiasMenuEntryHandler+0x38>)
 8003be8:	2201      	movs	r2, #1
 8003bea:	701a      	strb	r2, [r3, #0]

	ENCODER_TIMER->ARR = BIAS_MAX;
 8003bec:	4b09      	ldr	r3, [pc, #36]	; (8003c14 <BiasMenuEntryHandler+0x3c>)
 8003bee:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003bf2:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BO_GetDcBiasEncoderValue();
 8003bf4:	f001 fa5e 	bl	80050b4 <BO_GetDcBiasEncoderValue>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	4b05      	ldr	r3, [pc, #20]	; (8003c14 <BiasMenuEntryHandler+0x3c>)
 8003bfe:	625a      	str	r2, [r3, #36]	; 0x24

	eNewEvent = evIdle;
 8003c00:	4b05      	ldr	r3, [pc, #20]	; (8003c18 <BiasMenuEntryHandler+0x40>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8003c06:	230e      	movs	r3, #14
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	08013360 	.word	0x08013360
 8003c10:	20001ec9 	.word	0x20001ec9
 8003c14:	40012c00 	.word	0x40012c00
 8003c18:	20001ecb 	.word	0x20001ecb

08003c1c <BiasMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuInputHandler()
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("BiasMenuInputHandler Event captured\n");
 8003c20:	4807      	ldr	r0, [pc, #28]	; (8003c40 <BiasMenuInputHandler+0x24>)
 8003c22:	f00b feaf 	bl	800f984 <puts>
	#endif

	BO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8003c26:	2001      	movs	r0, #1
 8003c28:	f002 fb1c 	bl	8006264 <SM_GetEncoderValue>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f001 fa4c 	bl	80050cc <BO_MapEncoderPositionToSignalOutput>

	eNewEvent = evIdle;
 8003c34:	4b03      	ldr	r3, [pc, #12]	; (8003c44 <BiasMenuInputHandler+0x28>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8003c3a:	230e      	movs	r3, #14
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	08013384 	.word	0x08013384
 8003c44:	20001ecb 	.word	0x20001ecb

08003c48 <BiasMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuExitHandler()
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("BiasMenuExitHandler Event captured\n");
 8003c4c:	4808      	ldr	r0, [pc, #32]	; (8003c70 <BiasMenuExitHandler+0x28>)
 8003c4e:	f00b fe99 	bl	800f984 <puts>
	#endif


	// disable the menu
	eNextBiasMenuStatus = DISABLE_BIAS_MENU;
 8003c52:	4b08      	ldr	r3, [pc, #32]	; (8003c74 <BiasMenuExitHandler+0x2c>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8003c58:	f7fd fc0e 	bl	8001478 <DM_RefreshScreen>

	#ifdef SWV_DEBUG_ENABLED
		  printf("returning to Idle State\n");
 8003c5c:	4806      	ldr	r0, [pc, #24]	; (8003c78 <BiasMenuExitHandler+0x30>)
 8003c5e:	f00b fe91 	bl	800f984 <puts>
	#endif

	eNewEvent = evIdle;
 8003c62:	4b06      	ldr	r3, [pc, #24]	; (8003c7c <BiasMenuExitHandler+0x34>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8003c68:	2301      	movs	r3, #1
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	080133a8 	.word	0x080133a8
 8003c74:	20001ec9 	.word	0x20001ec9
 8003c78:	080133cc 	.word	0x080133cc
 8003c7c:	20001ecb 	.word	0x20001ecb

08003c80 <EM_ProcessEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_ProcessEvent()
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0

	switch(eNextState)
 8003c84:	4bbb      	ldr	r3, [pc, #748]	; (8003f74 <EM_ProcessEvent+0x2f4>)
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	2b0e      	cmp	r3, #14
 8003c8a:	f200 821c 	bhi.w	80040c6 <EM_ProcessEvent+0x446>
 8003c8e:	a201      	add	r2, pc, #4	; (adr r2, 8003c94 <EM_ProcessEvent+0x14>)
 8003c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c94:	08003cd1 	.word	0x08003cd1
 8003c98:	08003d03 	.word	0x08003d03
 8003c9c:	08003d89 	.word	0x08003d89
 8003ca0:	08003da7 	.word	0x08003da7
 8003ca4:	08003ded 	.word	0x08003ded
 8003ca8:	08003e33 	.word	0x08003e33
 8003cac:	08003e65 	.word	0x08003e65
 8003cb0:	08003eb1 	.word	0x08003eb1
 8003cb4:	08003ee3 	.word	0x08003ee3
 8003cb8:	080040c7 	.word	0x080040c7
 8003cbc:	08003f15 	.word	0x08003f15
 8003cc0:	08003fa5 	.word	0x08003fa5
 8003cc4:	08003fd7 	.word	0x08003fd7
 8003cc8:	08004007 	.word	0x08004007
 8003ccc:	08004091 	.word	0x08004091
// MAIN MENU
		case Idle_State:


			#ifdef SWV_DEBUG_ENABLED
			  printf("Idle_State\n");
 8003cd0:	48a9      	ldr	r0, [pc, #676]	; (8003f78 <EM_ProcessEvent+0x2f8>)
 8003cd2:	f00b fe57 	bl	800f984 <puts>
			#endif

			if(eNewEvent == evBlueBtn)
 8003cd6:	4ba9      	ldr	r3, [pc, #676]	; (8003f7c <EM_ProcessEvent+0x2fc>)
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d105      	bne.n	8003cea <EM_ProcessEvent+0x6a>
			{
				eNextState = ToplevelOutputMenuEntryHandler();
 8003cde:	f001 f829 	bl	8004d34 <ToplevelOutputMenuEntryHandler>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	4ba3      	ldr	r3, [pc, #652]	; (8003f74 <EM_ProcessEvent+0x2f4>)
 8003ce8:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003cea:	4ba4      	ldr	r3, [pc, #656]	; (8003f7c <EM_ProcessEvent+0x2fc>)
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	f040 81eb 	bne.w	80040ca <EM_ProcessEvent+0x44a>
			{
				eNextState = ToplevelInputMenuEntryHandler();
 8003cf4:	f001 f84a 	bl	8004d8c <ToplevelInputMenuEntryHandler>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	4b9d      	ldr	r3, [pc, #628]	; (8003f74 <EM_ProcessEvent+0x2f4>)
 8003cfe:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
			{
				// no menu action
			}
			break;
 8003d00:	e1e3      	b.n	80040ca <EM_ProcessEvent+0x44a>

		case Toplevel_Output_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
			  printf("Toplevel_Output_Menu_State\n");
 8003d02:	489f      	ldr	r0, [pc, #636]	; (8003f80 <EM_ProcessEvent+0x300>)
 8003d04:	f00b fe3e 	bl	800f984 <puts>
			#endif

			if(eNewEvent == evEncoderPush)
 8003d08:	4b9c      	ldr	r3, [pc, #624]	; (8003f7c <EM_ProcessEvent+0x2fc>)
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2b06      	cmp	r3, #6
 8003d0e:	d105      	bne.n	8003d1c <EM_ProcessEvent+0x9c>
			{
				eNextState = ToplevelOutputMenuExitHandler();
 8003d10:	f001 f826 	bl	8004d60 <ToplevelOutputMenuExitHandler>
 8003d14:	4603      	mov	r3, r0
 8003d16:	461a      	mov	r2, r3
 8003d18:	4b96      	ldr	r3, [pc, #600]	; (8003f74 <EM_ProcessEvent+0x2f4>)
 8003d1a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 8003d1c:	4b97      	ldr	r3, [pc, #604]	; (8003f7c <EM_ProcessEvent+0x2fc>)
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d108      	bne.n	8003d36 <EM_ProcessEvent+0xb6>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003d24:	2000      	movs	r0, #0
 8003d26:	f000 fff5 	bl	8004d14 <ToplevelMenu_setStatus>
				eNextState = FuncMainMenuEntryHandler();
 8003d2a:	f000 fd8b 	bl	8004844 <FuncMainMenuEntryHandler>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	461a      	mov	r2, r3
 8003d32:	4b90      	ldr	r3, [pc, #576]	; (8003f74 <EM_ProcessEvent+0x2f4>)
 8003d34:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003d36:	4b91      	ldr	r3, [pc, #580]	; (8003f7c <EM_ProcessEvent+0x2fc>)
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d108      	bne.n	8003d50 <EM_ProcessEvent+0xd0>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003d3e:	2000      	movs	r0, #0
 8003d40:	f000 ffe8 	bl	8004d14 <ToplevelMenu_setStatus>
				eNextState = FreqMainMenuEntryHandler();
 8003d44:	f000 fb62 	bl	800440c <FreqMainMenuEntryHandler>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	4b89      	ldr	r3, [pc, #548]	; (8003f74 <EM_ProcessEvent+0x2f4>)
 8003d4e:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8003d50:	4b8a      	ldr	r3, [pc, #552]	; (8003f7c <EM_ProcessEvent+0x2fc>)
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	2b03      	cmp	r3, #3
 8003d56:	d108      	bne.n	8003d6a <EM_ProcessEvent+0xea>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003d58:	2000      	movs	r0, #0
 8003d5a:	f000 ffdb 	bl	8004d14 <ToplevelMenu_setStatus>
				eNextState = GainMainMenuEntryHandler();
 8003d5e:	f000 febb 	bl	8004ad8 <GainMainMenuEntryHandler>
 8003d62:	4603      	mov	r3, r0
 8003d64:	461a      	mov	r2, r3
 8003d66:	4b83      	ldr	r3, [pc, #524]	; (8003f74 <EM_ProcessEvent+0x2f4>)
 8003d68:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 8003d6a:	4b84      	ldr	r3, [pc, #528]	; (8003f7c <EM_ProcessEvent+0x2fc>)
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	2b04      	cmp	r3, #4
 8003d70:	f040 81ad 	bne.w	80040ce <EM_ProcessEvent+0x44e>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003d74:	2000      	movs	r0, #0
 8003d76:	f000 ffcd 	bl	8004d14 <ToplevelMenu_setStatus>
				eNextState = BiasMenuEntryHandler();
 8003d7a:	f7ff ff2d 	bl	8003bd8 <BiasMenuEntryHandler>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	461a      	mov	r2, r3
 8003d82:	4b7c      	ldr	r3, [pc, #496]	; (8003f74 <EM_ProcessEvent+0x2f4>)
 8003d84:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003d86:	e1a2      	b.n	80040ce <EM_ProcessEvent+0x44e>

		case Toplevel_Input_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
			  printf("Toplevel_Input_Menu_State\n");
 8003d88:	487e      	ldr	r0, [pc, #504]	; (8003f84 <EM_ProcessEvent+0x304>)
 8003d8a:	f00b fdfb 	bl	800f984 <puts>
			#endif

			if(eNewEvent == evEncoderPush)
 8003d8e:	4b7b      	ldr	r3, [pc, #492]	; (8003f7c <EM_ProcessEvent+0x2fc>)
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	2b06      	cmp	r3, #6
 8003d94:	f040 819d 	bne.w	80040d2 <EM_ProcessEvent+0x452>
			{
				eNextState = ToplevelInputMenuExitHandler();
 8003d98:	f001 f80e 	bl	8004db8 <ToplevelInputMenuExitHandler>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	461a      	mov	r2, r3
 8003da0:	4b74      	ldr	r3, [pc, #464]	; (8003f74 <EM_ProcessEvent+0x2f4>)
 8003da2:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003da4:	e195      	b.n	80040d2 <EM_ProcessEvent+0x452>
// FUNC MENUS

		case Func_Main_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Func_Main_Menu_State\n");
 8003da6:	4878      	ldr	r0, [pc, #480]	; (8003f88 <EM_ProcessEvent+0x308>)
 8003da8:	f00b fdec 	bl	800f984 <puts>

			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 8003dac:	4b73      	ldr	r3, [pc, #460]	; (8003f7c <EM_ProcessEvent+0x2fc>)
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	2b06      	cmp	r3, #6
 8003db2:	d105      	bne.n	8003dc0 <EM_ProcessEvent+0x140>
			{
				eNextState = FuncMainMenuExitHandler();
 8003db4:	f000 fd5c 	bl	8004870 <FuncMainMenuExitHandler>
 8003db8:	4603      	mov	r3, r0
 8003dba:	461a      	mov	r2, r3
 8003dbc:	4b6d      	ldr	r3, [pc, #436]	; (8003f74 <EM_ProcessEvent+0x2f4>)
 8003dbe:	701a      	strb	r2, [r3, #0]

			}
			if(eNewEvent == evBlueBtn)
 8003dc0:	4b6e      	ldr	r3, [pc, #440]	; (8003f7c <EM_ProcessEvent+0x2fc>)
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d105      	bne.n	8003dd4 <EM_ProcessEvent+0x154>
			{
				eNextState = FuncSignalMenuEntryHandler();
 8003dc8:	f000 fd70 	bl	80048ac <FuncSignalMenuEntryHandler>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	461a      	mov	r2, r3
 8003dd0:	4b68      	ldr	r3, [pc, #416]	; (8003f74 <EM_ProcessEvent+0x2f4>)
 8003dd2:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003dd4:	4b69      	ldr	r3, [pc, #420]	; (8003f7c <EM_ProcessEvent+0x2fc>)
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	f040 817c 	bne.w	80040d6 <EM_ProcessEvent+0x456>
			{
				eNextState = FuncSyncMenuEntryHandler();
 8003dde:	f000 fe0b 	bl	80049f8 <FuncSyncMenuEntryHandler>
 8003de2:	4603      	mov	r3, r0
 8003de4:	461a      	mov	r2, r3
 8003de6:	4b63      	ldr	r3, [pc, #396]	; (8003f74 <EM_ProcessEvent+0x2f4>)
 8003de8:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003dea:	e174      	b.n	80040d6 <EM_ProcessEvent+0x456>

		case Func_Signal_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Func_Signal_Menu_State\n");
 8003dec:	4867      	ldr	r0, [pc, #412]	; (8003f8c <EM_ProcessEvent+0x30c>)
 8003dee:	f00b fdc9 	bl	800f984 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003df2:	4b62      	ldr	r3, [pc, #392]	; (8003f7c <EM_ProcessEvent+0x2fc>)
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2b05      	cmp	r3, #5
 8003df8:	d105      	bne.n	8003e06 <EM_ProcessEvent+0x186>
			{
				eNextState = FuncSignalMenuInputHandler();
 8003dfa:	f000 fd91 	bl	8004920 <FuncSignalMenuInputHandler>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	461a      	mov	r2, r3
 8003e02:	4b5c      	ldr	r3, [pc, #368]	; (8003f74 <EM_ProcessEvent+0x2f4>)
 8003e04:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003e06:	4b5d      	ldr	r3, [pc, #372]	; (8003f7c <EM_ProcessEvent+0x2fc>)
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	2b06      	cmp	r3, #6
 8003e0c:	d105      	bne.n	8003e1a <EM_ProcessEvent+0x19a>
			{
				eNextState = FuncSignalMenuExitHandler();
 8003e0e:	f000 fddb 	bl	80049c8 <FuncSignalMenuExitHandler>
 8003e12:	4603      	mov	r3, r0
 8003e14:	461a      	mov	r2, r3
 8003e16:	4b57      	ldr	r3, [pc, #348]	; (8003f74 <EM_ProcessEvent+0x2f4>)
 8003e18:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8003e1a:	4b58      	ldr	r3, [pc, #352]	; (8003f7c <EM_ProcessEvent+0x2fc>)
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	2b03      	cmp	r3, #3
 8003e20:	f040 815b 	bne.w	80040da <EM_ProcessEvent+0x45a>
			{
				eNextState = FuncSignalToggleDutyMode();
 8003e24:	f000 fdbe 	bl	80049a4 <FuncSignalToggleDutyMode>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	4b51      	ldr	r3, [pc, #324]	; (8003f74 <EM_ProcessEvent+0x2f4>)
 8003e2e:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003e30:	e153      	b.n	80040da <EM_ProcessEvent+0x45a>

		case Func_Sync_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Func_Sync_Menu_State\n");
 8003e32:	4857      	ldr	r0, [pc, #348]	; (8003f90 <EM_ProcessEvent+0x310>)
 8003e34:	f00b fda6 	bl	800f984 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003e38:	4b50      	ldr	r3, [pc, #320]	; (8003f7c <EM_ProcessEvent+0x2fc>)
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	2b05      	cmp	r3, #5
 8003e3e:	d105      	bne.n	8003e4c <EM_ProcessEvent+0x1cc>
			{
				eNextState = FuncSyncMenuInputHandler();
 8003e40:	f000 fe12 	bl	8004a68 <FuncSyncMenuInputHandler>
 8003e44:	4603      	mov	r3, r0
 8003e46:	461a      	mov	r2, r3
 8003e48:	4b4a      	ldr	r3, [pc, #296]	; (8003f74 <EM_ProcessEvent+0x2f4>)
 8003e4a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003e4c:	4b4b      	ldr	r3, [pc, #300]	; (8003f7c <EM_ProcessEvent+0x2fc>)
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	2b06      	cmp	r3, #6
 8003e52:	f040 8144 	bne.w	80040de <EM_ProcessEvent+0x45e>
			{
				eNextState = FuncSyncMenuExitHandler();
 8003e56:	f000 fe1d 	bl	8004a94 <FuncSyncMenuExitHandler>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	4b45      	ldr	r3, [pc, #276]	; (8003f74 <EM_ProcessEvent+0x2f4>)
 8003e60:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003e62:	e13c      	b.n	80040de <EM_ProcessEvent+0x45e>
// GAIN MENUS

		case Gain_Main_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Gain_Main_Menu_State\n");
 8003e64:	484b      	ldr	r0, [pc, #300]	; (8003f94 <EM_ProcessEvent+0x314>)
 8003e66:	f00b fd8d 	bl	800f984 <puts>
			#endif
			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 8003e6a:	4b44      	ldr	r3, [pc, #272]	; (8003f7c <EM_ProcessEvent+0x2fc>)
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	2b06      	cmp	r3, #6
 8003e70:	d108      	bne.n	8003e84 <EM_ProcessEvent+0x204>
			{
				eNextState = GainMainMenuExitHandler();
 8003e72:	f000 fe47 	bl	8004b04 <GainMainMenuExitHandler>
 8003e76:	4603      	mov	r3, r0
 8003e78:	461a      	mov	r2, r3
 8003e7a:	4b3e      	ldr	r3, [pc, #248]	; (8003f74 <EM_ProcessEvent+0x2f4>)
 8003e7c:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8003e7e:	2002      	movs	r0, #2
 8003e80:	f000 ff48 	bl	8004d14 <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 8003e84:	4b3d      	ldr	r3, [pc, #244]	; (8003f7c <EM_ProcessEvent+0x2fc>)
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d105      	bne.n	8003e98 <EM_ProcessEvent+0x218>
			{
				eNextState = GainSignalMenuEntryHandler();
 8003e8c:	f000 fe56 	bl	8004b3c <GainSignalMenuEntryHandler>
 8003e90:	4603      	mov	r3, r0
 8003e92:	461a      	mov	r2, r3
 8003e94:	4b37      	ldr	r3, [pc, #220]	; (8003f74 <EM_ProcessEvent+0x2f4>)
 8003e96:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003e98:	4b38      	ldr	r3, [pc, #224]	; (8003f7c <EM_ProcessEvent+0x2fc>)
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	f040 8120 	bne.w	80040e2 <EM_ProcessEvent+0x462>
			{
				eNextState = GainSyncMenuEntryHandler();
 8003ea2:	f000 fec9 	bl	8004c38 <GainSyncMenuEntryHandler>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	4b32      	ldr	r3, [pc, #200]	; (8003f74 <EM_ProcessEvent+0x2f4>)
 8003eac:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003eae:	e118      	b.n	80040e2 <EM_ProcessEvent+0x462>

		case Gain_Signal_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Gain_Signal_Menu_State\n");
 8003eb0:	4839      	ldr	r0, [pc, #228]	; (8003f98 <EM_ProcessEvent+0x318>)
 8003eb2:	f00b fd67 	bl	800f984 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003eb6:	4b31      	ldr	r3, [pc, #196]	; (8003f7c <EM_ProcessEvent+0x2fc>)
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	2b05      	cmp	r3, #5
 8003ebc:	d105      	bne.n	8003eca <EM_ProcessEvent+0x24a>
			{
				eNextState = GainSignalMenuInputHandler();
 8003ebe:	f000 fe75 	bl	8004bac <GainSignalMenuInputHandler>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	4b2b      	ldr	r3, [pc, #172]	; (8003f74 <EM_ProcessEvent+0x2f4>)
 8003ec8:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003eca:	4b2c      	ldr	r3, [pc, #176]	; (8003f7c <EM_ProcessEvent+0x2fc>)
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	2b06      	cmp	r3, #6
 8003ed0:	f040 8109 	bne.w	80040e6 <EM_ProcessEvent+0x466>
			{
				eNextState = GainSignalMenuExitHandler();
 8003ed4:	f000 fe9a 	bl	8004c0c <GainSignalMenuExitHandler>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	461a      	mov	r2, r3
 8003edc:	4b25      	ldr	r3, [pc, #148]	; (8003f74 <EM_ProcessEvent+0x2f4>)
 8003ede:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003ee0:	e101      	b.n	80040e6 <EM_ProcessEvent+0x466>

		case Gain_Sync_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Gain_Sync_Menu_State\n");
 8003ee2:	482e      	ldr	r0, [pc, #184]	; (8003f9c <EM_ProcessEvent+0x31c>)
 8003ee4:	f00b fd4e 	bl	800f984 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003ee8:	4b24      	ldr	r3, [pc, #144]	; (8003f7c <EM_ProcessEvent+0x2fc>)
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	2b05      	cmp	r3, #5
 8003eee:	d105      	bne.n	8003efc <EM_ProcessEvent+0x27c>
			{
				eNextState = GainSyncMenuInputHandler();
 8003ef0:	f000 fed8 	bl	8004ca4 <GainSyncMenuInputHandler>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	4b1e      	ldr	r3, [pc, #120]	; (8003f74 <EM_ProcessEvent+0x2f4>)
 8003efa:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003efc:	4b1f      	ldr	r3, [pc, #124]	; (8003f7c <EM_ProcessEvent+0x2fc>)
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	2b06      	cmp	r3, #6
 8003f02:	f040 80f2 	bne.w	80040ea <EM_ProcessEvent+0x46a>
			{
				eNextState = GainSyncMenuExitHandler();
 8003f06:	f000 fee3 	bl	8004cd0 <GainSyncMenuExitHandler>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	4b19      	ldr	r3, [pc, #100]	; (8003f74 <EM_ProcessEvent+0x2f4>)
 8003f10:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003f12:	e0ea      	b.n	80040ea <EM_ProcessEvent+0x46a>
// FREQ MENUS

		case Freq_Main_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Main_Menu_State\n");
 8003f14:	4822      	ldr	r0, [pc, #136]	; (8003fa0 <EM_ProcessEvent+0x320>)
 8003f16:	f00b fd35 	bl	800f984 <puts>
			#endif

			if(eNewEvent == evEncoderPush)
 8003f1a:	4b18      	ldr	r3, [pc, #96]	; (8003f7c <EM_ProcessEvent+0x2fc>)
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	2b06      	cmp	r3, #6
 8003f20:	d108      	bne.n	8003f34 <EM_ProcessEvent+0x2b4>
			{
				eNextState = FreqMainMenuExitHandler();
 8003f22:	f000 fa89 	bl	8004438 <FreqMainMenuExitHandler>
 8003f26:	4603      	mov	r3, r0
 8003f28:	461a      	mov	r2, r3
 8003f2a:	4b12      	ldr	r3, [pc, #72]	; (8003f74 <EM_ProcessEvent+0x2f4>)
 8003f2c:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8003f2e:	2002      	movs	r0, #2
 8003f30:	f000 fef0 	bl	8004d14 <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 8003f34:	4b11      	ldr	r3, [pc, #68]	; (8003f7c <EM_ProcessEvent+0x2fc>)
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d105      	bne.n	8003f48 <EM_ProcessEvent+0x2c8>
			{
				eNextState = FreqPresetMenuEntryHandler();
 8003f3c:	f000 fa9e 	bl	800447c <FreqPresetMenuEntryHandler>
 8003f40:	4603      	mov	r3, r0
 8003f42:	461a      	mov	r2, r3
 8003f44:	4b0b      	ldr	r3, [pc, #44]	; (8003f74 <EM_ProcessEvent+0x2f4>)
 8003f46:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003f48:	4b0c      	ldr	r3, [pc, #48]	; (8003f7c <EM_ProcessEvent+0x2fc>)
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d105      	bne.n	8003f5c <EM_ProcessEvent+0x2dc>
			{
				eNextState = FreqAdjustMenuEntryHandler();
 8003f50:	f000 faf4 	bl	800453c <FreqAdjustMenuEntryHandler>
 8003f54:	4603      	mov	r3, r0
 8003f56:	461a      	mov	r2, r3
 8003f58:	4b06      	ldr	r3, [pc, #24]	; (8003f74 <EM_ProcessEvent+0x2f4>)
 8003f5a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8003f5c:	4b07      	ldr	r3, [pc, #28]	; (8003f7c <EM_ProcessEvent+0x2fc>)
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	2b03      	cmp	r3, #3
 8003f62:	f040 80c4 	bne.w	80040ee <EM_ProcessEvent+0x46e>
			{
				eNextState = FreqSweepMenuEntryHandler();
 8003f66:	f000 f8e9 	bl	800413c <FreqSweepMenuEntryHandler>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	4b01      	ldr	r3, [pc, #4]	; (8003f74 <EM_ProcessEvent+0x2f4>)
 8003f70:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003f72:	e0bc      	b.n	80040ee <EM_ProcessEvent+0x46e>
 8003f74:	20001eca 	.word	0x20001eca
 8003f78:	080133e4 	.word	0x080133e4
 8003f7c:	20001ecb 	.word	0x20001ecb
 8003f80:	080133f0 	.word	0x080133f0
 8003f84:	0801340c 	.word	0x0801340c
 8003f88:	08013428 	.word	0x08013428
 8003f8c:	08013440 	.word	0x08013440
 8003f90:	08013458 	.word	0x08013458
 8003f94:	08013470 	.word	0x08013470
 8003f98:	08013488 	.word	0x08013488
 8003f9c:	080134a0 	.word	0x080134a0
 8003fa0:	080134b8 	.word	0x080134b8

		case Freq_Preset_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Preset_Menu_State\n");
 8003fa4:	4857      	ldr	r0, [pc, #348]	; (8004104 <EM_ProcessEvent+0x484>)
 8003fa6:	f00b fced 	bl	800f984 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003faa:	4b57      	ldr	r3, [pc, #348]	; (8004108 <EM_ProcessEvent+0x488>)
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	2b05      	cmp	r3, #5
 8003fb0:	d105      	bne.n	8003fbe <EM_ProcessEvent+0x33e>
			{
				eNextState = FreqPresetMenuInputHandler();
 8003fb2:	f000 fa97 	bl	80044e4 <FreqPresetMenuInputHandler>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	461a      	mov	r2, r3
 8003fba:	4b54      	ldr	r3, [pc, #336]	; (800410c <EM_ProcessEvent+0x48c>)
 8003fbc:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003fbe:	4b52      	ldr	r3, [pc, #328]	; (8004108 <EM_ProcessEvent+0x488>)
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	2b06      	cmp	r3, #6
 8003fc4:	f040 8095 	bne.w	80040f2 <EM_ProcessEvent+0x472>
			{
				eNextState = FreqPresetMenuExitHandler();
 8003fc8:	f000 faa2 	bl	8004510 <FreqPresetMenuExitHandler>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	461a      	mov	r2, r3
 8003fd0:	4b4e      	ldr	r3, [pc, #312]	; (800410c <EM_ProcessEvent+0x48c>)
 8003fd2:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003fd4:	e08d      	b.n	80040f2 <EM_ProcessEvent+0x472>

		case Freq_Adjust_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Adjust_Menu_State\n");
 8003fd6:	484e      	ldr	r0, [pc, #312]	; (8004110 <EM_ProcessEvent+0x490>)
 8003fd8:	f00b fcd4 	bl	800f984 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003fdc:	4b4a      	ldr	r3, [pc, #296]	; (8004108 <EM_ProcessEvent+0x488>)
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	2b05      	cmp	r3, #5
 8003fe2:	d105      	bne.n	8003ff0 <EM_ProcessEvent+0x370>
			{
				eNextState = FreqAdjustMenuInputHandler();
 8003fe4:	f000 facc 	bl	8004580 <FreqAdjustMenuInputHandler>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	461a      	mov	r2, r3
 8003fec:	4b47      	ldr	r3, [pc, #284]	; (800410c <EM_ProcessEvent+0x48c>)
 8003fee:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003ff0:	4b45      	ldr	r3, [pc, #276]	; (8004108 <EM_ProcessEvent+0x488>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	2b06      	cmp	r3, #6
 8003ff6:	d17e      	bne.n	80040f6 <EM_ProcessEvent+0x476>
			{
				eNextState = FreqAdjustMenuExitHandler();
 8003ff8:	f000 fad4 	bl	80045a4 <FreqAdjustMenuExitHandler>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	461a      	mov	r2, r3
 8004000:	4b42      	ldr	r3, [pc, #264]	; (800410c <EM_ProcessEvent+0x48c>)
 8004002:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004004:	e077      	b.n	80040f6 <EM_ProcessEvent+0x476>

		case Freq_Sweep_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Sweep_Menu_State\n");
 8004006:	4843      	ldr	r0, [pc, #268]	; (8004114 <EM_ProcessEvent+0x494>)
 8004008:	f00b fcbc 	bl	800f984 <puts>
			#endif

			if(eNewEvent == evBlueBtn)
 800400c:	4b3e      	ldr	r3, [pc, #248]	; (8004108 <EM_ProcessEvent+0x488>)
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d106      	bne.n	8004022 <EM_ProcessEvent+0x3a2>
			{
				// enable
				eNextState = FreqSweepMenuInputHandler(evSweepEnableBtn);
 8004014:	2007      	movs	r0, #7
 8004016:	f000 f8ed 	bl	80041f4 <FreqSweepMenuInputHandler>
 800401a:	4603      	mov	r3, r0
 800401c:	461a      	mov	r2, r3
 800401e:	4b3b      	ldr	r3, [pc, #236]	; (800410c <EM_ProcessEvent+0x48c>)
 8004020:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8004022:	4b39      	ldr	r3, [pc, #228]	; (8004108 <EM_ProcessEvent+0x488>)
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	2b02      	cmp	r3, #2
 8004028:	d106      	bne.n	8004038 <EM_ProcessEvent+0x3b8>
			{
				// direction
				eNextState = FreqSweepMenuInputHandler(evSweepModeBtn);
 800402a:	2008      	movs	r0, #8
 800402c:	f000 f8e2 	bl	80041f4 <FreqSweepMenuInputHandler>
 8004030:	4603      	mov	r3, r0
 8004032:	461a      	mov	r2, r3
 8004034:	4b35      	ldr	r3, [pc, #212]	; (800410c <EM_ProcessEvent+0x48c>)
 8004036:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8004038:	4b33      	ldr	r3, [pc, #204]	; (8004108 <EM_ProcessEvent+0x488>)
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	2b03      	cmp	r3, #3
 800403e:	d106      	bne.n	800404e <EM_ProcessEvent+0x3ce>
			{
				// set sweep speed
				eNextState = FreqSweepMenuInputHandler(evSweepSpeedBtn);
 8004040:	2009      	movs	r0, #9
 8004042:	f000 f8d7 	bl	80041f4 <FreqSweepMenuInputHandler>
 8004046:	4603      	mov	r3, r0
 8004048:	461a      	mov	r2, r3
 800404a:	4b30      	ldr	r3, [pc, #192]	; (800410c <EM_ProcessEvent+0x48c>)
 800404c:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 800404e:	4b2e      	ldr	r3, [pc, #184]	; (8004108 <EM_ProcessEvent+0x488>)
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	2b04      	cmp	r3, #4
 8004054:	d106      	bne.n	8004064 <EM_ProcessEvent+0x3e4>
			{
				// set lower/upper sweep limit
				eNextState = FreqSweepMenuInputHandler(evSweepLimitBtn);
 8004056:	200a      	movs	r0, #10
 8004058:	f000 f8cc 	bl	80041f4 <FreqSweepMenuInputHandler>
 800405c:	4603      	mov	r3, r0
 800405e:	461a      	mov	r2, r3
 8004060:	4b2a      	ldr	r3, [pc, #168]	; (800410c <EM_ProcessEvent+0x48c>)
 8004062:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderSet)
 8004064:	4b28      	ldr	r3, [pc, #160]	; (8004108 <EM_ProcessEvent+0x488>)
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	2b05      	cmp	r3, #5
 800406a:	d106      	bne.n	800407a <EM_ProcessEvent+0x3fa>
			{
				eNextState = FreqSweepMenuInputHandler(evEncoderSweep);
 800406c:	200b      	movs	r0, #11
 800406e:	f000 f8c1 	bl	80041f4 <FreqSweepMenuInputHandler>
 8004072:	4603      	mov	r3, r0
 8004074:	461a      	mov	r2, r3
 8004076:	4b25      	ldr	r3, [pc, #148]	; (800410c <EM_ProcessEvent+0x48c>)
 8004078:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 800407a:	4b23      	ldr	r3, [pc, #140]	; (8004108 <EM_ProcessEvent+0x488>)
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	2b06      	cmp	r3, #6
 8004080:	d13b      	bne.n	80040fa <EM_ProcessEvent+0x47a>
			{
				eNextState = FreqSweepMenuExitHandler();
 8004082:	f000 f99f 	bl	80043c4 <FreqSweepMenuExitHandler>
 8004086:	4603      	mov	r3, r0
 8004088:	461a      	mov	r2, r3
 800408a:	4b20      	ldr	r3, [pc, #128]	; (800410c <EM_ProcessEvent+0x48c>)
 800408c:	701a      	strb	r2, [r3, #0]
			}

			break;
 800408e:	e034      	b.n	80040fa <EM_ProcessEvent+0x47a>
// BIAS MENUS

		case Bias_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Bias_Menu_State\n");
 8004090:	4821      	ldr	r0, [pc, #132]	; (8004118 <EM_ProcessEvent+0x498>)
 8004092:	f00b fc77 	bl	800f984 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8004096:	4b1c      	ldr	r3, [pc, #112]	; (8004108 <EM_ProcessEvent+0x488>)
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	2b05      	cmp	r3, #5
 800409c:	d105      	bne.n	80040aa <EM_ProcessEvent+0x42a>
			{
				eNextState = BiasMenuInputHandler();
 800409e:	f7ff fdbd 	bl	8003c1c <BiasMenuInputHandler>
 80040a2:	4603      	mov	r3, r0
 80040a4:	461a      	mov	r2, r3
 80040a6:	4b19      	ldr	r3, [pc, #100]	; (800410c <EM_ProcessEvent+0x48c>)
 80040a8:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 80040aa:	4b17      	ldr	r3, [pc, #92]	; (8004108 <EM_ProcessEvent+0x488>)
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	2b06      	cmp	r3, #6
 80040b0:	d125      	bne.n	80040fe <EM_ProcessEvent+0x47e>
			{
				eNextState = BiasMenuExitHandler();
 80040b2:	f7ff fdc9 	bl	8003c48 <BiasMenuExitHandler>
 80040b6:	4603      	mov	r3, r0
 80040b8:	461a      	mov	r2, r3
 80040ba:	4b14      	ldr	r3, [pc, #80]	; (800410c <EM_ProcessEvent+0x48c>)
 80040bc:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 80040be:	2002      	movs	r0, #2
 80040c0:	f000 fe28 	bl	8004d14 <ToplevelMenu_setStatus>
			}

			break;
 80040c4:	e01b      	b.n	80040fe <EM_ProcessEvent+0x47e>

		default:
			break;
 80040c6:	bf00      	nop
 80040c8:	e01a      	b.n	8004100 <EM_ProcessEvent+0x480>
			break;
 80040ca:	bf00      	nop
 80040cc:	e018      	b.n	8004100 <EM_ProcessEvent+0x480>
			break;
 80040ce:	bf00      	nop
 80040d0:	e016      	b.n	8004100 <EM_ProcessEvent+0x480>
			break;
 80040d2:	bf00      	nop
 80040d4:	e014      	b.n	8004100 <EM_ProcessEvent+0x480>
			break;
 80040d6:	bf00      	nop
 80040d8:	e012      	b.n	8004100 <EM_ProcessEvent+0x480>
			break;
 80040da:	bf00      	nop
 80040dc:	e010      	b.n	8004100 <EM_ProcessEvent+0x480>
			break;
 80040de:	bf00      	nop
 80040e0:	e00e      	b.n	8004100 <EM_ProcessEvent+0x480>
			break;
 80040e2:	bf00      	nop
 80040e4:	e00c      	b.n	8004100 <EM_ProcessEvent+0x480>
			break;
 80040e6:	bf00      	nop
 80040e8:	e00a      	b.n	8004100 <EM_ProcessEvent+0x480>
			break;
 80040ea:	bf00      	nop
 80040ec:	e008      	b.n	8004100 <EM_ProcessEvent+0x480>
			break;
 80040ee:	bf00      	nop
 80040f0:	e006      	b.n	8004100 <EM_ProcessEvent+0x480>
			break;
 80040f2:	bf00      	nop
 80040f4:	e004      	b.n	8004100 <EM_ProcessEvent+0x480>
			break;
 80040f6:	bf00      	nop
 80040f8:	e002      	b.n	8004100 <EM_ProcessEvent+0x480>
			break;
 80040fa:	bf00      	nop
 80040fc:	e000      	b.n	8004100 <EM_ProcessEvent+0x480>
			break;
 80040fe:	bf00      	nop
	}

}
 8004100:	bf00      	nop
 8004102:	bd80      	pop	{r7, pc}
 8004104:	080134d0 	.word	0x080134d0
 8004108:	20001ecb 	.word	0x20001ecb
 800410c:	20001eca 	.word	0x20001eca
 8004110:	080134e8 	.word	0x080134e8
 8004114:	08013500 	.word	0x08013500
 8004118:	08013518 	.word	0x08013518

0800411c <EM_SetNewEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	4603      	mov	r3, r0
 8004124:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 8004126:	4a04      	ldr	r2, [pc, #16]	; (8004138 <EM_SetNewEvent+0x1c>)
 8004128:	79fb      	ldrb	r3, [r7, #7]
 800412a:	7013      	strb	r3, [r2, #0]
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr
 8004138:	20001ecb 	.word	0x20001ecb

0800413c <FreqSweepMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuEntryHandler()
{
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqSweepMenuEntryHandler captured\n");
 8004140:	4825      	ldr	r0, [pc, #148]	; (80041d8 <FreqSweepMenuEntryHandler+0x9c>)
 8004142:	f00b fc1f 	bl	800f984 <puts>
	#endif

	DM_RefreshScreen();
 8004146:	f7fd f997 	bl	8001478 <DM_RefreshScreen>

	if( sweep_upper_bounds_longest_output_arr != OUTPUT_TIMER->ARR)
 800414a:	4b24      	ldr	r3, [pc, #144]	; (80041dc <FreqSweepMenuEntryHandler+0xa0>)
 800414c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414e:	ee07 3a90 	vmov	s15, r3
 8004152:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004156:	4b22      	ldr	r3, [pc, #136]	; (80041e0 <FreqSweepMenuEntryHandler+0xa4>)
 8004158:	edd3 7a00 	vldr	s15, [r3]
 800415c:	eeb4 7a67 	vcmp.f32	s14, s15
 8004160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004164:	d008      	beq.n	8004178 <FreqSweepMenuEntryHandler+0x3c>
		sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 8004166:	4b1d      	ldr	r3, [pc, #116]	; (80041dc <FreqSweepMenuEntryHandler+0xa0>)
 8004168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416a:	ee07 3a90 	vmov	s15, r3
 800416e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004172:	4b1b      	ldr	r3, [pc, #108]	; (80041e0 <FreqSweepMenuEntryHandler+0xa4>)
 8004174:	edc3 7a00 	vstr	s15, [r3]

	if( sweep_upper_bounds_longest_output_arr == MIN_OUTPUT_ARR)
 8004178:	4b19      	ldr	r3, [pc, #100]	; (80041e0 <FreqSweepMenuEntryHandler+0xa4>)
 800417a:	edd3 7a00 	vldr	s15, [r3]
 800417e:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 8004182:	eef4 7a47 	vcmp.f32	s15, s14
 8004186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800418a:	d101      	bne.n	8004190 <FreqSweepMenuEntryHandler+0x54>
	{
		_setSweepModeDown();
 800418c:	f000 fa20 	bl	80045d0 <_setSweepModeDown>
	}

	_setEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 8004190:	2000      	movs	r0, #0
 8004192:	f000 fa77 	bl	8004684 <_setEncoderControlMode>
	_setSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 8004196:	2000      	movs	r0, #0
 8004198:	f000 fad2 	bl	8004740 <_setSweepTimerAutoReloadForEncoderControl>
	calculated_sweep_in_hertz = _getCalculatedSweepFrequencyInHertz();
 800419c:	f000 fb0c 	bl	80047b8 <_getCalculatedSweepFrequencyInHertz>
 80041a0:	eef0 7a40 	vmov.f32	s15, s0
 80041a4:	4b0f      	ldr	r3, [pc, #60]	; (80041e4 <FreqSweepMenuEntryHandler+0xa8>)
 80041a6:	edc3 7a00 	vstr	s15, [r3]

	// reset sweep start value
	SWEEP_TIMER->CNT = 0;
 80041aa:	4b0f      	ldr	r3, [pc, #60]	; (80041e8 <FreqSweepMenuEntryHandler+0xac>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	625a      	str	r2, [r3, #36]	; 0x24

	// set default mode to sweep speed control
	FreqSweepMenuInputHandler(evSweepSpeedBtn);
 80041b0:	2009      	movs	r0, #9
 80041b2:	f000 f81f 	bl	80041f4 <FreqSweepMenuInputHandler>

	// sweep start speed
	SWEEP_TIMER->ARR = MIN_SWEEP_ARR;
 80041b6:	4b0c      	ldr	r3, [pc, #48]	; (80041e8 <FreqSweepMenuEntryHandler+0xac>)
 80041b8:	f244 12a0 	movw	r2, #16800	; 0x41a0
 80041bc:	62da      	str	r2, [r3, #44]	; 0x2c
	SWEEP_TIMER->PSC = 0;
 80041be:	4b0a      	ldr	r3, [pc, #40]	; (80041e8 <FreqSweepMenuEntryHandler+0xac>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	629a      	str	r2, [r3, #40]	; 0x28



	// get ready to load menu
	eNextFreqMenuStatus = ENABLE_FREQ_SWEEP_MENU;
 80041c4:	4b09      	ldr	r3, [pc, #36]	; (80041ec <FreqSweepMenuEntryHandler+0xb0>)
 80041c6:	2204      	movs	r2, #4
 80041c8:	701a      	strb	r2, [r3, #0]


	// stay in this state
	eNewEvent = evIdle;
 80041ca:	4b09      	ldr	r3, [pc, #36]	; (80041f0 <FreqSweepMenuEntryHandler+0xb4>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 80041d0:	230d      	movs	r3, #13
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	08013528 	.word	0x08013528
 80041dc:	40013400 	.word	0x40013400
 80041e0:	20000004 	.word	0x20000004
 80041e4:	20001f20 	.word	0x20001f20
 80041e8:	40000c00 	.word	0x40000c00
 80041ec:	20001ece 	.word	0x20001ece
 80041f0:	20001ecb 	.word	0x20001ecb

080041f4 <FreqSweepMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuInputHandler(eSystemEvent pEvent)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	4603      	mov	r3, r0
 80041fc:	71fb      	strb	r3, [r7, #7]
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuInputHandler Event captured\n");
 80041fe:	4865      	ldr	r0, [pc, #404]	; (8004394 <FreqSweepMenuInputHandler+0x1a0>)
 8004200:	f00b fbc0 	bl	800f984 <puts>
	#endif



	switch(pEvent)
 8004204:	79fb      	ldrb	r3, [r7, #7]
 8004206:	3b07      	subs	r3, #7
 8004208:	2b04      	cmp	r3, #4
 800420a:	f200 80ba 	bhi.w	8004382 <FreqSweepMenuInputHandler+0x18e>
 800420e:	a201      	add	r2, pc, #4	; (adr r2, 8004214 <FreqSweepMenuInputHandler+0x20>)
 8004210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004214:	08004229 	.word	0x08004229
 8004218:	08004249 	.word	0x08004249
 800421c:	08004373 	.word	0x08004373
 8004220:	0800437b 	.word	0x0800437b
 8004224:	08004289 	.word	0x08004289
	{
		case evSweepEnableBtn:

			#ifdef SWV_DEBUG_ENABLED
				printf("evSweepEnable captured\n");
 8004228:	485b      	ldr	r0, [pc, #364]	; (8004398 <FreqSweepMenuInputHandler+0x1a4>)
 800422a:	f00b fbab 	bl	800f984 <puts>
			#endif

			// toggle enable/disable
			SWEEP_TIMER->DIER 	^= TIM_DIER_UIE;
 800422e:	4b5b      	ldr	r3, [pc, #364]	; (800439c <FreqSweepMenuInputHandler+0x1a8>)
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	4a5a      	ldr	r2, [pc, #360]	; (800439c <FreqSweepMenuInputHandler+0x1a8>)
 8004234:	f083 0301 	eor.w	r3, r3, #1
 8004238:	60d3      	str	r3, [r2, #12]
			SWEEP_TIMER->CR1	^= TIM_CR1_CEN;
 800423a:	4b58      	ldr	r3, [pc, #352]	; (800439c <FreqSweepMenuInputHandler+0x1a8>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a57      	ldr	r2, [pc, #348]	; (800439c <FreqSweepMenuInputHandler+0x1a8>)
 8004240:	f083 0301 	eor.w	r3, r3, #1
 8004244:	6013      	str	r3, [r2, #0]
			break;
 8004246:	e09d      	b.n	8004384 <FreqSweepMenuInputHandler+0x190>

		case evSweepModeBtn:

			#ifdef SWV_DEBUG_ENABLED
				printf("evSweepMode captured\n");
 8004248:	4855      	ldr	r0, [pc, #340]	; (80043a0 <FreqSweepMenuInputHandler+0x1ac>)
 800424a:	f00b fb9b 	bl	800f984 <puts>
			#endif

			// flip between 0:Upcounter and 1:Downcounter
			active_sweep_mode ^= 1U;
 800424e:	4b55      	ldr	r3, [pc, #340]	; (80043a4 <FreqSweepMenuInputHandler+0x1b0>)
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	f083 0301 	eor.w	r3, r3, #1
 8004256:	b2da      	uxtb	r2, r3
 8004258:	4b52      	ldr	r3, [pc, #328]	; (80043a4 <FreqSweepMenuInputHandler+0x1b0>)
 800425a:	701a      	strb	r2, [r3, #0]

			switch(active_sweep_mode)
 800425c:	4b51      	ldr	r3, [pc, #324]	; (80043a4 <FreqSweepMenuInputHandler+0x1b0>)
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d004      	beq.n	800426e <FreqSweepMenuInputHandler+0x7a>
 8004264:	2b02      	cmp	r3, #2
 8004266:	d008      	beq.n	800427a <FreqSweepMenuInputHandler+0x86>
 8004268:	2b00      	cmp	r3, #0
 800426a:	d003      	beq.n	8004274 <FreqSweepMenuInputHandler+0x80>
 800426c:	e006      	b.n	800427c <FreqSweepMenuInputHandler+0x88>
			{
				case SWEEP_MODE_DOWN:
					_setSweepModeDown();
 800426e:	f000 f9af 	bl	80045d0 <_setSweepModeDown>
					break;
 8004272:	e003      	b.n	800427c <FreqSweepMenuInputHandler+0x88>

				case SWEEP_MODE_UP:
					_setSweepModeUp();
 8004274:	f000 f9dc 	bl	8004630 <_setSweepModeUp>
					break;
 8004278:	e000      	b.n	800427c <FreqSweepMenuInputHandler+0x88>

				case SWEEP_MODE_BIDIR:	// not used
					//SWEEP_TIMER->CR1 |= (TIM_CR1_CMS_0);
					break;
 800427a:	bf00      	nop
			}
			// switch(active_sweep_mode)
			// TODO
			_setEncoderControlMode(theCurrentEncoderSweepFunction);
 800427c:	4b4a      	ldr	r3, [pc, #296]	; (80043a8 <FreqSweepMenuInputHandler+0x1b4>)
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	4618      	mov	r0, r3
 8004282:	f000 f9ff 	bl	8004684 <_setEncoderControlMode>

			break;
 8004286:	e07d      	b.n	8004384 <FreqSweepMenuInputHandler+0x190>

		// rotary encoder is turned
		case evEncoderSweep:

			#ifdef SWV_DEBUG_ENABLED
				printf("evEncoderSweep captured\n");
 8004288:	4848      	ldr	r0, [pc, #288]	; (80043ac <FreqSweepMenuInputHandler+0x1b8>)
 800428a:	f00b fb7b 	bl	800f984 <puts>
			#endif

			switch(theCurrentEncoderSweepFunction)
 800428e:	4b46      	ldr	r3, [pc, #280]	; (80043a8 <FreqSweepMenuInputHandler+0x1b4>)
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d002      	beq.n	800429c <FreqSweepMenuInputHandler+0xa8>
 8004296:	2b01      	cmp	r3, #1
 8004298:	d00b      	beq.n	80042b2 <FreqSweepMenuInputHandler+0xbe>
					break;

			}
			// switch(theCurrentEncoderSweepFunction)

			break;
 800429a:	e073      	b.n	8004384 <FreqSweepMenuInputHandler+0x190>
					_setSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 800429c:	2000      	movs	r0, #0
 800429e:	f000 fa4f 	bl	8004740 <_setSweepTimerAutoReloadForEncoderControl>
					calculated_sweep_in_hertz = _getCalculatedSweepFrequencyInHertz();
 80042a2:	f000 fa89 	bl	80047b8 <_getCalculatedSweepFrequencyInHertz>
 80042a6:	eef0 7a40 	vmov.f32	s15, s0
 80042aa:	4b41      	ldr	r3, [pc, #260]	; (80043b0 <FreqSweepMenuInputHandler+0x1bc>)
 80042ac:	edc3 7a00 	vstr	s15, [r3]
					break;
 80042b0:	e05e      	b.n	8004370 <FreqSweepMenuInputHandler+0x17c>
					switch(active_sweep_mode)
 80042b2:	4b3c      	ldr	r3, [pc, #240]	; (80043a4 <FreqSweepMenuInputHandler+0x1b0>)
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d002      	beq.n	80042c0 <FreqSweepMenuInputHandler+0xcc>
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d02a      	beq.n	8004314 <FreqSweepMenuInputHandler+0x120>
							break;
 80042be:	e056      	b.n	800436e <FreqSweepMenuInputHandler+0x17a>
							if(ENCODER_TIMER->CNT < MIN_OUTPUT_ARR)
 80042c0:	4b3c      	ldr	r3, [pc, #240]	; (80043b4 <FreqSweepMenuInputHandler+0x1c0>)
 80042c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c4:	2b0c      	cmp	r3, #12
 80042c6:	d803      	bhi.n	80042d0 <FreqSweepMenuInputHandler+0xdc>
								ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 80042c8:	4b3a      	ldr	r3, [pc, #232]	; (80043b4 <FreqSweepMenuInputHandler+0x1c0>)
 80042ca:	220d      	movs	r2, #13
 80042cc:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 80042ce:	e04e      	b.n	800436e <FreqSweepMenuInputHandler+0x17a>
							else if (ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 80042d0:	4b38      	ldr	r3, [pc, #224]	; (80043b4 <FreqSweepMenuInputHandler+0x1c0>)
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	ee07 3a90 	vmov	s15, r3
 80042d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80042dc:	4b36      	ldr	r3, [pc, #216]	; (80043b8 <FreqSweepMenuInputHandler+0x1c4>)
 80042de:	edd3 7a00 	vldr	s15, [r3]
 80042e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ea:	dd09      	ble.n	8004300 <FreqSweepMenuInputHandler+0x10c>
								ENCODER_TIMER->CNT = sweep_upper_bounds_longest_output_arr;
 80042ec:	4b32      	ldr	r3, [pc, #200]	; (80043b8 <FreqSweepMenuInputHandler+0x1c4>)
 80042ee:	edd3 7a00 	vldr	s15, [r3]
 80042f2:	4b30      	ldr	r3, [pc, #192]	; (80043b4 <FreqSweepMenuInputHandler+0x1c0>)
 80042f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042f8:	ee17 2a90 	vmov	r2, s15
 80042fc:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 80042fe:	e036      	b.n	800436e <FreqSweepMenuInputHandler+0x17a>
								sweep_lower_bounds_shortest_output_arr = ENCODER_TIMER->CNT;
 8004300:	4b2c      	ldr	r3, [pc, #176]	; (80043b4 <FreqSweepMenuInputHandler+0x1c0>)
 8004302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004304:	ee07 3a90 	vmov	s15, r3
 8004308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800430c:	4b2b      	ldr	r3, [pc, #172]	; (80043bc <FreqSweepMenuInputHandler+0x1c8>)
 800430e:	edc3 7a00 	vstr	s15, [r3]
							break;
 8004312:	e02c      	b.n	800436e <FreqSweepMenuInputHandler+0x17a>
							if(ENCODER_TIMER->CNT >= MAX_OUTPUT_ARR)
 8004314:	4b27      	ldr	r3, [pc, #156]	; (80043b4 <FreqSweepMenuInputHandler+0x1c0>)
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800431c:	4293      	cmp	r3, r2
 800431e:	d904      	bls.n	800432a <FreqSweepMenuInputHandler+0x136>
								ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 8004320:	4b24      	ldr	r3, [pc, #144]	; (80043b4 <FreqSweepMenuInputHandler+0x1c0>)
 8004322:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004326:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004328:	e020      	b.n	800436c <FreqSweepMenuInputHandler+0x178>
							else if (ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 800432a:	4b22      	ldr	r3, [pc, #136]	; (80043b4 <FreqSweepMenuInputHandler+0x1c0>)
 800432c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432e:	ee07 3a90 	vmov	s15, r3
 8004332:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004336:	4b21      	ldr	r3, [pc, #132]	; (80043bc <FreqSweepMenuInputHandler+0x1c8>)
 8004338:	edd3 7a00 	vldr	s15, [r3]
 800433c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004344:	d509      	bpl.n	800435a <FreqSweepMenuInputHandler+0x166>
								ENCODER_TIMER->CNT = sweep_lower_bounds_shortest_output_arr;
 8004346:	4b1d      	ldr	r3, [pc, #116]	; (80043bc <FreqSweepMenuInputHandler+0x1c8>)
 8004348:	edd3 7a00 	vldr	s15, [r3]
 800434c:	4b19      	ldr	r3, [pc, #100]	; (80043b4 <FreqSweepMenuInputHandler+0x1c0>)
 800434e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004352:	ee17 2a90 	vmov	r2, s15
 8004356:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004358:	e008      	b.n	800436c <FreqSweepMenuInputHandler+0x178>
								sweep_upper_bounds_longest_output_arr = ENCODER_TIMER->CNT;
 800435a:	4b16      	ldr	r3, [pc, #88]	; (80043b4 <FreqSweepMenuInputHandler+0x1c0>)
 800435c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435e:	ee07 3a90 	vmov	s15, r3
 8004362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004366:	4b14      	ldr	r3, [pc, #80]	; (80043b8 <FreqSweepMenuInputHandler+0x1c4>)
 8004368:	edc3 7a00 	vstr	s15, [r3]
							break;
 800436c:	bf00      	nop
					break;
 800436e:	bf00      	nop
			break;
 8004370:	e008      	b.n	8004384 <FreqSweepMenuInputHandler+0x190>

		// set sweep speed button
		case evSweepSpeedBtn:
			_setEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 8004372:	2000      	movs	r0, #0
 8004374:	f000 f986 	bl	8004684 <_setEncoderControlMode>

			break;
 8004378:	e004      	b.n	8004384 <FreqSweepMenuInputHandler+0x190>

		// set sweep limit button
		case evSweepLimitBtn:
			_setEncoderControlMode(ENCODER_SWEEP_LIMIT_FUNCTION);
 800437a:	2001      	movs	r0, #1
 800437c:	f000 f982 	bl	8004684 <_setEncoderControlMode>
					break;
			}
			*/
			// switch(active_sweep_mode)

			break;
 8004380:	e000      	b.n	8004384 <FreqSweepMenuInputHandler+0x190>

		default:
			break;
 8004382:	bf00      	nop
	}
	// switch(pEvent)


	// stay in this state
	eNewEvent = evIdle;
 8004384:	4b0e      	ldr	r3, [pc, #56]	; (80043c0 <FreqSweepMenuInputHandler+0x1cc>)
 8004386:	2200      	movs	r2, #0
 8004388:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 800438a:	230d      	movs	r3, #13
}
 800438c:	4618      	mov	r0, r3
 800438e:	3708      	adds	r7, #8
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	0801354c 	.word	0x0801354c
 8004398:	08013578 	.word	0x08013578
 800439c:	40000c00 	.word	0x40000c00
 80043a0:	08013590 	.word	0x08013590
 80043a4:	20001ecc 	.word	0x20001ecc
 80043a8:	20001ecd 	.word	0x20001ecd
 80043ac:	080135a8 	.word	0x080135a8
 80043b0:	20001f20 	.word	0x20001f20
 80043b4:	40012c00 	.word	0x40012c00
 80043b8:	20000004 	.word	0x20000004
 80043bc:	20000000 	.word	0x20000000
 80043c0:	20001ecb 	.word	0x20001ecb

080043c4 <FreqSweepMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuExitHandler()
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqSweepMenuExitHandler Event captured\n");
 80043c8:	480c      	ldr	r0, [pc, #48]	; (80043fc <FreqSweepMenuExitHandler+0x38>)
 80043ca:	f00b fadb 	bl	800f984 <puts>
	#endif

	DM_RefreshScreen();
 80043ce:	f7fd f853 	bl	8001478 <DM_RefreshScreen>

	// disable sweep timer and interrupts
	SWEEP_TIMER->DIER 	&= ~(TIM_DIER_UIE);
 80043d2:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <FreqSweepMenuExitHandler+0x3c>)
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	4a0a      	ldr	r2, [pc, #40]	; (8004400 <FreqSweepMenuExitHandler+0x3c>)
 80043d8:	f023 0301 	bic.w	r3, r3, #1
 80043dc:	60d3      	str	r3, [r2, #12]
	SWEEP_TIMER->CR1 	&= ~(TIM_CR1_CEN);
 80043de:	4b08      	ldr	r3, [pc, #32]	; (8004400 <FreqSweepMenuExitHandler+0x3c>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a07      	ldr	r2, [pc, #28]	; (8004400 <FreqSweepMenuExitHandler+0x3c>)
 80043e4:	f023 0301 	bic.w	r3, r3, #1
 80043e8:	6013      	str	r3, [r2, #0]



	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 80043ea:	4b06      	ldr	r3, [pc, #24]	; (8004404 <FreqSweepMenuExitHandler+0x40>)
 80043ec:	2201      	movs	r2, #1
 80043ee:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 80043f0:	4b05      	ldr	r3, [pc, #20]	; (8004408 <FreqSweepMenuExitHandler+0x44>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 80043f6:	230a      	movs	r3, #10
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	080135c0 	.word	0x080135c0
 8004400:	40000c00 	.word	0x40000c00
 8004404:	20001ece 	.word	0x20001ece
 8004408:	20001ecb 	.word	0x20001ecb

0800440c <FreqMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuEntryHandler()
{
 800440c:	b580      	push	{r7, lr}
 800440e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqMainMenuEntryHandler Event captured\n");
 8004410:	4806      	ldr	r0, [pc, #24]	; (800442c <FreqMainMenuEntryHandler+0x20>)
 8004412:	f00b fab7 	bl	800f984 <puts>
	#endif

	DM_RefreshScreen();
 8004416:	f7fd f82f 	bl	8001478 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 800441a:	4b05      	ldr	r3, [pc, #20]	; (8004430 <FreqMainMenuEntryHandler+0x24>)
 800441c:	2201      	movs	r2, #1
 800441e:	701a      	strb	r2, [r3, #0]

	// stay in this state
	eNewEvent = evIdle;
 8004420:	4b04      	ldr	r3, [pc, #16]	; (8004434 <FreqMainMenuEntryHandler+0x28>)
 8004422:	2200      	movs	r2, #0
 8004424:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004426:	230a      	movs	r3, #10
}
 8004428:	4618      	mov	r0, r3
 800442a:	bd80      	pop	{r7, pc}
 800442c:	080135e8 	.word	0x080135e8
 8004430:	20001ece 	.word	0x20001ece
 8004434:	20001ecb 	.word	0x20001ecb

08004438 <FreqMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuExitHandler()
{
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqMainMenuExitHandler Event captured\n");
 800443c:	480a      	ldr	r0, [pc, #40]	; (8004468 <FreqMainMenuExitHandler+0x30>)
 800443e:	f00b faa1 	bl	800f984 <puts>
	#endif


	// disable the menu
	eNextFreqMenuStatus = DISABLE_FREQ_MENU;
 8004442:	4b0a      	ldr	r3, [pc, #40]	; (800446c <FreqMainMenuExitHandler+0x34>)
 8004444:	2200      	movs	r2, #0
 8004446:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8004448:	4b09      	ldr	r3, [pc, #36]	; (8004470 <FreqMainMenuExitHandler+0x38>)
 800444a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800444e:	62da      	str	r2, [r3, #44]	; 0x2c

	DM_RefreshScreen();
 8004450:	f7fd f812 	bl	8001478 <DM_RefreshScreen>

	#ifdef SWV_DEBUG_ENABLED
		  printf("returning to Idle State\n");
 8004454:	4807      	ldr	r0, [pc, #28]	; (8004474 <FreqMainMenuExitHandler+0x3c>)
 8004456:	f00b fa95 	bl	800f984 <puts>
	#endif

	eNewEvent = evIdle;
 800445a:	4b07      	ldr	r3, [pc, #28]	; (8004478 <FreqMainMenuExitHandler+0x40>)
 800445c:	2200      	movs	r2, #0
 800445e:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004460:	2301      	movs	r3, #1
}
 8004462:	4618      	mov	r0, r3
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	08013638 	.word	0x08013638
 800446c:	20001ece 	.word	0x20001ece
 8004470:	40012c00 	.word	0x40012c00
 8004474:	08013660 	.word	0x08013660
 8004478:	20001ecb 	.word	0x20001ecb

0800447c <FreqPresetMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuEntryHandler()
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuEntryHandler Event captured\n");
 8004482:	4813      	ldr	r0, [pc, #76]	; (80044d0 <FreqPresetMenuEntryHandler+0x54>)
 8004484:	f00b fa7e 	bl	800f984 <puts>
	#endif

	DM_RefreshScreen();
 8004488:	f7fc fff6 	bl	8001478 <DM_RefreshScreen>
	FreqO_ResetLastEncoderValue();
 800448c:	f000 ff56 	bl	800533c <FreqO_ResetLastEncoderValue>

	eNextFreqMenuStatus = ENABLE_FREQ_PRESET_MENU;
 8004490:	4b10      	ldr	r3, [pc, #64]	; (80044d4 <FreqPresetMenuEntryHandler+0x58>)
 8004492:	2202      	movs	r2, #2
 8004494:	701a      	strb	r2, [r3, #0]

	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8004496:	f001 f897 	bl	80055c8 <FreqO_GetFPresetObject>
 800449a:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00a      	beq.n	80044b8 <FreqPresetMenuEntryHandler+0x3c>
	{
		ENCODER_TIMER->CNT = pFreqPresetTmp->epos;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	791a      	ldrb	r2, [r3, #4]
 80044a6:	4b0c      	ldr	r3, [pc, #48]	; (80044d8 <FreqPresetMenuEntryHandler+0x5c>)
 80044a8:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FreqO_GetFreqPresetEncoderRange();
 80044aa:	f001 f8bf 	bl	800562c <FreqO_GetFreqPresetEncoderRange>
 80044ae:	4603      	mov	r3, r0
 80044b0:	461a      	mov	r2, r3
 80044b2:	4b09      	ldr	r3, [pc, #36]	; (80044d8 <FreqPresetMenuEntryHandler+0x5c>)
 80044b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80044b6:	e002      	b.n	80044be <FreqPresetMenuEntryHandler+0x42>
	}
	else
	{
		DM_SetErrorDebugMsg("_FreqPresetMenuEntryHandler: pFreqPresetTmp null pointer");
 80044b8:	4808      	ldr	r0, [pc, #32]	; (80044dc <FreqPresetMenuEntryHandler+0x60>)
 80044ba:	f7fd f823 	bl	8001504 <DM_SetErrorDebugMsg>
	}


	// stay in this state
	eNewEvent = evIdle;
 80044be:	4b08      	ldr	r3, [pc, #32]	; (80044e0 <FreqPresetMenuEntryHandler+0x64>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 80044c4:	230b      	movs	r3, #11
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	08013678 	.word	0x08013678
 80044d4:	20001ece 	.word	0x20001ece
 80044d8:	40012c00 	.word	0x40012c00
 80044dc:	080136a4 	.word	0x080136a4
 80044e0:	20001ecb 	.word	0x20001ecb

080044e4 <FreqPresetMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuInputHandler()
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuInputHandler Event captured\n");
 80044e8:	4807      	ldr	r0, [pc, #28]	; (8004508 <FreqPresetMenuInputHandler+0x24>)
 80044ea:	f00b fa4b 	bl	800f984 <puts>
	#endif

	FreqO_MapEncoderPositionToBothOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 80044ee:	2001      	movs	r0, #1
 80044f0:	f001 feb8 	bl	8006264 <SM_GetEncoderValue>
 80044f4:	4603      	mov	r3, r0
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 ff5a 	bl	80053b0 <FreqO_MapEncoderPositionToBothOutput>

	// stay in this state
	eNewEvent = evIdle;
 80044fc:	4b03      	ldr	r3, [pc, #12]	; (800450c <FreqPresetMenuInputHandler+0x28>)
 80044fe:	2200      	movs	r2, #0
 8004500:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8004502:	230b      	movs	r3, #11
}
 8004504:	4618      	mov	r0, r3
 8004506:	bd80      	pop	{r7, pc}
 8004508:	080136e0 	.word	0x080136e0
 800450c:	20001ecb 	.word	0x20001ecb

08004510 <FreqPresetMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuExitHandler()
{
 8004510:	b580      	push	{r7, lr}
 8004512:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuExitHandler Event captured\n");
 8004514:	4806      	ldr	r0, [pc, #24]	; (8004530 <FreqPresetMenuExitHandler+0x20>)
 8004516:	f00b fa35 	bl	800f984 <puts>
	#endif

	DM_RefreshScreen();
 800451a:	f7fc ffad 	bl	8001478 <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 800451e:	4b05      	ldr	r3, [pc, #20]	; (8004534 <FreqPresetMenuExitHandler+0x24>)
 8004520:	2201      	movs	r2, #1
 8004522:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004524:	4b04      	ldr	r3, [pc, #16]	; (8004538 <FreqPresetMenuExitHandler+0x28>)
 8004526:	2200      	movs	r2, #0
 8004528:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 800452a:	230a      	movs	r3, #10
}
 800452c:	4618      	mov	r0, r3
 800452e:	bd80      	pop	{r7, pc}
 8004530:	0801370c 	.word	0x0801370c
 8004534:	20001ece 	.word	0x20001ece
 8004538:	20001ecb 	.word	0x20001ecb

0800453c <FreqAdjustMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuEntryHandler()
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuEntryHandler Event captured\n");
 8004540:	480a      	ldr	r0, [pc, #40]	; (800456c <FreqAdjustMenuEntryHandler+0x30>)
 8004542:	f00b fa1f 	bl	800f984 <puts>
	#endif

	DM_RefreshScreen();
 8004546:	f7fc ff97 	bl	8001478 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_ADJUST_MENU;
 800454a:	4b09      	ldr	r3, [pc, #36]	; (8004570 <FreqAdjustMenuEntryHandler+0x34>)
 800454c:	2203      	movs	r2, #3
 800454e:	701a      	strb	r2, [r3, #0]

	// set the rotary encoder limits to 0-? for this menu
	ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8004550:	4b08      	ldr	r3, [pc, #32]	; (8004574 <FreqAdjustMenuEntryHandler+0x38>)
 8004552:	4a09      	ldr	r2, [pc, #36]	; (8004578 <FreqAdjustMenuEntryHandler+0x3c>)
 8004554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004556:	6253      	str	r3, [r2, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004558:	4b07      	ldr	r3, [pc, #28]	; (8004578 <FreqAdjustMenuEntryHandler+0x3c>)
 800455a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800455e:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 8004560:	4b06      	ldr	r3, [pc, #24]	; (800457c <FreqAdjustMenuEntryHandler+0x40>)
 8004562:	2200      	movs	r2, #0
 8004564:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8004566:	230c      	movs	r3, #12
}
 8004568:	4618      	mov	r0, r3
 800456a:	bd80      	pop	{r7, pc}
 800456c:	08013738 	.word	0x08013738
 8004570:	20001ece 	.word	0x20001ece
 8004574:	40013400 	.word	0x40013400
 8004578:	40012c00 	.word	0x40012c00
 800457c:	20001ecb 	.word	0x20001ecb

08004580 <FreqAdjustMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuInputHandler()
{
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuInputHandler Event captured\n");
 8004584:	4805      	ldr	r0, [pc, #20]	; (800459c <FreqAdjustMenuInputHandler+0x1c>)
 8004586:	f00b f9fd 	bl	800f984 <puts>
	#endif

	FreqO_AdjustFreq();
 800458a:	f000 fee3 	bl	8005354 <FreqO_AdjustFreq>

	// stay in this state
	eNewEvent = evIdle;
 800458e:	4b04      	ldr	r3, [pc, #16]	; (80045a0 <FreqAdjustMenuInputHandler+0x20>)
 8004590:	2200      	movs	r2, #0
 8004592:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8004594:	230c      	movs	r3, #12
}
 8004596:	4618      	mov	r0, r3
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	0801354c 	.word	0x0801354c
 80045a0:	20001ecb 	.word	0x20001ecb

080045a4 <FreqAdjustMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuExitHandler()
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuExitHandler Event captured\n");
 80045a8:	4806      	ldr	r0, [pc, #24]	; (80045c4 <FreqAdjustMenuExitHandler+0x20>)
 80045aa:	f00b f9eb 	bl	800f984 <puts>
	#endif

	DM_RefreshScreen();
 80045ae:	f7fc ff63 	bl	8001478 <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 80045b2:	4b05      	ldr	r3, [pc, #20]	; (80045c8 <FreqAdjustMenuExitHandler+0x24>)
 80045b4:	2201      	movs	r2, #1
 80045b6:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 80045b8:	4b04      	ldr	r3, [pc, #16]	; (80045cc <FreqAdjustMenuExitHandler+0x28>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 80045be:	230a      	movs	r3, #10
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	08013764 	.word	0x08013764
 80045c8:	20001ece 	.word	0x20001ece
 80045cc:	20001ecb 	.word	0x20001ecb

080045d0 <_setSweepModeDown>:
 *	@param None
 *	@retval None
 *
 */
void _setSweepModeDown()
{
 80045d0:	b480      	push	{r7}
 80045d2:	af00      	add	r7, sp, #0
	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 80045d4:	4b10      	ldr	r3, [pc, #64]	; (8004618 <_setSweepModeDown+0x48>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a0f      	ldr	r2, [pc, #60]	; (8004618 <_setSweepModeDown+0x48>)
 80045da:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80045de:	6013      	str	r3, [r2, #0]

	// 0: Counter used as upcounter
	SWEEP_TIMER->CR1 |= (TIM_CR1_DIR);
 80045e0:	4b0d      	ldr	r3, [pc, #52]	; (8004618 <_setSweepModeDown+0x48>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a0c      	ldr	r2, [pc, #48]	; (8004618 <_setSweepModeDown+0x48>)
 80045e6:	f043 0310 	orr.w	r3, r3, #16
 80045ea:	6013      	str	r3, [r2, #0]

	sweep_lower_bounds_shortest_output_arr  = OUTPUT_TIMER->ARR;
 80045ec:	4b0b      	ldr	r3, [pc, #44]	; (800461c <_setSweepModeDown+0x4c>)
 80045ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f0:	ee07 3a90 	vmov	s15, r3
 80045f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045f8:	4b09      	ldr	r3, [pc, #36]	; (8004620 <_setSweepModeDown+0x50>)
 80045fa:	edc3 7a00 	vstr	s15, [r3]
	sweep_upper_bounds_longest_output_arr  = MAX_OUTPUT_ARR;
 80045fe:	4b09      	ldr	r3, [pc, #36]	; (8004624 <_setSweepModeDown+0x54>)
 8004600:	4a09      	ldr	r2, [pc, #36]	; (8004628 <_setSweepModeDown+0x58>)
 8004602:	601a      	str	r2, [r3, #0]
	ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 8004604:	4b09      	ldr	r3, [pc, #36]	; (800462c <_setSweepModeDown+0x5c>)
 8004606:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800460a:	625a      	str	r2, [r3, #36]	; 0x24

}
 800460c:	bf00      	nop
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	40000c00 	.word	0x40000c00
 800461c:	40013400 	.word	0x40013400
 8004620:	20000000 	.word	0x20000000
 8004624:	20000004 	.word	0x20000004
 8004628:	477fff00 	.word	0x477fff00
 800462c:	40012c00 	.word	0x40012c00

08004630 <_setSweepModeUp>:
 *	@param None
 *	@retval None
 *
 */
void _setSweepModeUp()
{
 8004630:	b480      	push	{r7}
 8004632:	af00      	add	r7, sp, #0

	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 8004634:	4b0e      	ldr	r3, [pc, #56]	; (8004670 <_setSweepModeUp+0x40>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a0d      	ldr	r2, [pc, #52]	; (8004670 <_setSweepModeUp+0x40>)
 800463a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800463e:	6013      	str	r3, [r2, #0]

	// 1: Counter used as downcounter
	SWEEP_TIMER->CR1 &= ~(TIM_CR1_DIR);
 8004640:	4b0b      	ldr	r3, [pc, #44]	; (8004670 <_setSweepModeUp+0x40>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a0a      	ldr	r2, [pc, #40]	; (8004670 <_setSweepModeUp+0x40>)
 8004646:	f023 0310 	bic.w	r3, r3, #16
 800464a:	6013      	str	r3, [r2, #0]

	sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 800464c:	4b09      	ldr	r3, [pc, #36]	; (8004674 <_setSweepModeUp+0x44>)
 800464e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004650:	ee07 3a90 	vmov	s15, r3
 8004654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004658:	4b07      	ldr	r3, [pc, #28]	; (8004678 <_setSweepModeUp+0x48>)
 800465a:	edc3 7a00 	vstr	s15, [r3]
	sweep_lower_bounds_shortest_output_arr  = MIN_OUTPUT_ARR;
 800465e:	4b07      	ldr	r3, [pc, #28]	; (800467c <_setSweepModeUp+0x4c>)
 8004660:	4a07      	ldr	r2, [pc, #28]	; (8004680 <_setSweepModeUp+0x50>)
 8004662:	601a      	str	r2, [r3, #0]


}
 8004664:	bf00      	nop
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	40000c00 	.word	0x40000c00
 8004674:	40013400 	.word	0x40013400
 8004678:	20000004 	.word	0x20000004
 800467c:	20000000 	.word	0x20000000
 8004680:	41500000 	.word	0x41500000

08004684 <_setEncoderControlMode>:

void _setEncoderControlMode(eEncoderSweepFunctions pFunction)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	4603      	mov	r3, r0
 800468c:	71fb      	strb	r3, [r7, #7]
	if(pFunction)
 800468e:	79fb      	ldrb	r3, [r7, #7]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d038      	beq.n	8004706 <_setEncoderControlMode+0x82>
	{
		//	ENCODER_SWEEP_LIMIT_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 8004694:	4a24      	ldr	r2, [pc, #144]	; (8004728 <_setEncoderControlMode+0xa4>)
 8004696:	79fb      	ldrb	r3, [r7, #7]
 8004698:	7013      	strb	r3, [r2, #0]
		ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 800469a:	4b24      	ldr	r3, [pc, #144]	; (800472c <_setEncoderControlMode+0xa8>)
 800469c:	220d      	movs	r2, #13
 800469e:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_OUTPUT_ARR;
 80046a0:	4b22      	ldr	r3, [pc, #136]	; (800472c <_setEncoderControlMode+0xa8>)
 80046a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046a6:	62da      	str	r2, [r3, #44]	; 0x2c

		switch(active_sweep_mode)
 80046a8:	4b21      	ldr	r3, [pc, #132]	; (8004730 <_setEncoderControlMode+0xac>)
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d002      	beq.n	80046b6 <_setEncoderControlMode+0x32>
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d014      	beq.n	80046de <_setEncoderControlMode+0x5a>
					// if encoder position is below the lower bounds set it above it
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
				break;
			default:
				break;
 80046b4:	e031      	b.n	800471a <_setEncoderControlMode+0x96>
					if(ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 80046b6:	4b1d      	ldr	r3, [pc, #116]	; (800472c <_setEncoderControlMode+0xa8>)
 80046b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ba:	ee07 3a90 	vmov	s15, r3
 80046be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046c2:	4b1c      	ldr	r3, [pc, #112]	; (8004734 <_setEncoderControlMode+0xb0>)
 80046c4:	edd3 7a00 	vldr	s15, [r3]
 80046c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046d0:	dc00      	bgt.n	80046d4 <_setEncoderControlMode+0x50>
				break;
 80046d2:	e022      	b.n	800471a <_setEncoderControlMode+0x96>
						 ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 80046d4:	4b18      	ldr	r3, [pc, #96]	; (8004738 <_setEncoderControlMode+0xb4>)
 80046d6:	4a15      	ldr	r2, [pc, #84]	; (800472c <_setEncoderControlMode+0xa8>)
 80046d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046da:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 80046dc:	e01d      	b.n	800471a <_setEncoderControlMode+0x96>
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 80046de:	4b13      	ldr	r3, [pc, #76]	; (800472c <_setEncoderControlMode+0xa8>)
 80046e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e2:	ee07 3a90 	vmov	s15, r3
 80046e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046ea:	4b14      	ldr	r3, [pc, #80]	; (800473c <_setEncoderControlMode+0xb8>)
 80046ec:	edd3 7a00 	vldr	s15, [r3]
 80046f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046f8:	d400      	bmi.n	80046fc <_setEncoderControlMode+0x78>
				break;
 80046fa:	e00e      	b.n	800471a <_setEncoderControlMode+0x96>
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 80046fc:	4b0e      	ldr	r3, [pc, #56]	; (8004738 <_setEncoderControlMode+0xb4>)
 80046fe:	4a0b      	ldr	r2, [pc, #44]	; (800472c <_setEncoderControlMode+0xa8>)
 8004700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004702:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 8004704:	e009      	b.n	800471a <_setEncoderControlMode+0x96>
		// switch(active_sweep_mode)
	}
	else
	{
		// ENCODER_SWEEP_SPEED_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 8004706:	4a08      	ldr	r2, [pc, #32]	; (8004728 <_setEncoderControlMode+0xa4>)
 8004708:	79fb      	ldrb	r3, [r7, #7]
 800470a:	7013      	strb	r3, [r2, #0]
		// encoder start value
		ENCODER_TIMER->CNT = 1;
 800470c:	4b07      	ldr	r3, [pc, #28]	; (800472c <_setEncoderControlMode+0xa8>)
 800470e:	2201      	movs	r2, #1
 8004710:	625a      	str	r2, [r3, #36]	; 0x24
		// encoder limit for default (set speed)
		ENCODER_TIMER->ARR = 1600;
 8004712:	4b06      	ldr	r3, [pc, #24]	; (800472c <_setEncoderControlMode+0xa8>)
 8004714:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004718:	62da      	str	r2, [r3, #44]	; 0x2c
	}



}
 800471a:	bf00      	nop
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	20001ecd 	.word	0x20001ecd
 800472c:	40012c00 	.word	0x40012c00
 8004730:	20001ecc 	.word	0x20001ecc
 8004734:	20000004 	.word	0x20000004
 8004738:	40013400 	.word	0x40013400
 800473c:	20000000 	.word	0x20000000

08004740 <_setSweepTimerAutoReloadForEncoderControl>:


void _setSweepTimerAutoReloadForEncoderControl(eEncoderSweepFunctions pFunction)
{
 8004740:	b590      	push	{r4, r7, lr}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	4603      	mov	r3, r0
 8004748:	71fb      	strb	r3, [r7, #7]
	uint32_t next_sweep_tim_arr;

	if(pFunction)
 800474a:	79fb      	ldrb	r3, [r7, #7]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d122      	bne.n	8004796 <_setSweepTimerAutoReloadForEncoderControl+0x56>

	}
	else
	{
		// get logarithmic curve to speed up turns at low end
		next_sweep_tim_arr = MIN_SWEEP_ARR + (pow(ENCODER_TIMER->CNT, 3));
 8004750:	4b17      	ldr	r3, [pc, #92]	; (80047b0 <_setSweepTimerAutoReloadForEncoderControl+0x70>)
 8004752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004754:	4618      	mov	r0, r3
 8004756:	f7fb fefd 	bl	8000554 <__aeabi_ui2d>
 800475a:	4603      	mov	r3, r0
 800475c:	460c      	mov	r4, r1
 800475e:	ed9f 1b10 	vldr	d1, [pc, #64]	; 80047a0 <_setSweepTimerAutoReloadForEncoderControl+0x60>
 8004762:	ec44 3b10 	vmov	d0, r3, r4
 8004766:	f00d f8e7 	bl	8011938 <pow>
 800476a:	ec51 0b10 	vmov	r0, r1, d0
 800476e:	a30e      	add	r3, pc, #56	; (adr r3, 80047a8 <_setSweepTimerAutoReloadForEncoderControl+0x68>)
 8004770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004774:	f7fb fdb2 	bl	80002dc <__adddf3>
 8004778:	4603      	mov	r3, r0
 800477a:	460c      	mov	r4, r1
 800477c:	4618      	mov	r0, r3
 800477e:	4621      	mov	r1, r4
 8004780:	f7fc fa3a 	bl	8000bf8 <__aeabi_d2uiz>
 8004784:	4603      	mov	r3, r0
 8004786:	60fb      	str	r3, [r7, #12]

		if(next_sweep_tim_arr < 0xFFFFFFFF)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800478e:	d002      	beq.n	8004796 <_setSweepTimerAutoReloadForEncoderControl+0x56>
		{
			SWEEP_TIMER->ARR = next_sweep_tim_arr;
 8004790:	4a08      	ldr	r2, [pc, #32]	; (80047b4 <_setSweepTimerAutoReloadForEncoderControl+0x74>)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	62d3      	str	r3, [r2, #44]	; 0x2c

		}
	}
}
 8004796:	bf00      	nop
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	bd90      	pop	{r4, r7, pc}
 800479e:	bf00      	nop
 80047a0:	00000000 	.word	0x00000000
 80047a4:	40080000 	.word	0x40080000
 80047a8:	00000000 	.word	0x00000000
 80047ac:	40d06800 	.word	0x40d06800
 80047b0:	40012c00 	.word	0x40012c00
 80047b4:	40000c00 	.word	0x40000c00

080047b8 <_getCalculatedSweepFrequencyInHertz>:

float _getCalculatedSweepFrequencyInHertz()
{
 80047b8:	b480      	push	{r7}
 80047ba:	af00      	add	r7, sp, #0
	if(SWEEP_TIMER->PSC == 0)
 80047bc:	4b13      	ldr	r3, [pc, #76]	; (800480c <_getCalculatedSweepFrequencyInHertz+0x54>)
 80047be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10a      	bne.n	80047da <_getCalculatedSweepFrequencyInHertz+0x22>
	{
		return (float)SM_MCLK / ((float)1 * (float)SWEEP_TIMER->ARR);
 80047c4:	4b11      	ldr	r3, [pc, #68]	; (800480c <_getCalculatedSweepFrequencyInHertz+0x54>)
 80047c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c8:	ee07 3a90 	vmov	s15, r3
 80047cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80047d0:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8004810 <_getCalculatedSweepFrequencyInHertz+0x58>
 80047d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047d8:	e011      	b.n	80047fe <_getCalculatedSweepFrequencyInHertz+0x46>
	}
	else
	{
		return (float)SM_MCLK / ((float)SWEEP_TIMER->PSC * (float)SWEEP_TIMER->ARR);
 80047da:	4b0c      	ldr	r3, [pc, #48]	; (800480c <_getCalculatedSweepFrequencyInHertz+0x54>)
 80047dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047de:	ee07 3a90 	vmov	s15, r3
 80047e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80047e6:	4b09      	ldr	r3, [pc, #36]	; (800480c <_getCalculatedSweepFrequencyInHertz+0x54>)
 80047e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ea:	ee07 3a90 	vmov	s15, r3
 80047ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80047f6:	eddf 6a06 	vldr	s13, [pc, #24]	; 8004810 <_getCalculatedSweepFrequencyInHertz+0x58>
 80047fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
	}

}
 80047fe:	eeb0 0a67 	vmov.f32	s0, s15
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	40000c00 	.word	0x40000c00
 8004810:	4d2037a0 	.word	0x4d2037a0

08004814 <FreqMenu_getStatus>:
 *	@param None
 *	@retval None
 *
 */
eFreqMenu_Status FreqMenu_getStatus()
{
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0
	return eNextFreqMenuStatus;
 8004818:	4b03      	ldr	r3, [pc, #12]	; (8004828 <FreqMenu_getStatus+0x14>)
 800481a:	781b      	ldrb	r3, [r3, #0]
}
 800481c:	4618      	mov	r0, r3
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	20001ece 	.word	0x20001ece

0800482c <FuncMenu_getStatus>:
eFuncMenu_Status eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;



eFuncMenu_Status FuncMenu_getStatus()
{
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0
	return eNextFuncMenuStatus;
 8004830:	4b03      	ldr	r3, [pc, #12]	; (8004840 <FuncMenu_getStatus+0x14>)
 8004832:	781b      	ldrb	r3, [r3, #0]
}
 8004834:	4618      	mov	r0, r3
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	20001ecf 	.word	0x20001ecf

08004844 <FuncMainMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuEntryHandler(void)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncMainMenuEntryHandler Event captured\n");
 8004848:	4806      	ldr	r0, [pc, #24]	; (8004864 <FuncMainMenuEntryHandler+0x20>)
 800484a:	f00b f89b 	bl	800f984 <puts>
	#endif

	DM_RefreshScreen();
 800484e:	f7fc fe13 	bl	8001478 <DM_RefreshScreen>



	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8004852:	4b05      	ldr	r3, [pc, #20]	; (8004868 <FuncMainMenuEntryHandler+0x24>)
 8004854:	2201      	movs	r2, #1
 8004856:	701a      	strb	r2, [r3, #0]
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
	}
*/
	eNewEvent = evIdle;
 8004858:	4b04      	ldr	r3, [pc, #16]	; (800486c <FuncMainMenuEntryHandler+0x28>)
 800485a:	2200      	movs	r2, #0
 800485c:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 800485e:	2303      	movs	r3, #3
}
 8004860:	4618      	mov	r0, r3
 8004862:	bd80      	pop	{r7, pc}
 8004864:	08013790 	.word	0x08013790
 8004868:	20001ecf 	.word	0x20001ecf
 800486c:	20001ecb 	.word	0x20001ecb

08004870 <FuncMainMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuExitHandler()
{
 8004870:	b580      	push	{r7, lr}
 8004872:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncMainMenuExitHandler Event captured\n");
 8004874:	4809      	ldr	r0, [pc, #36]	; (800489c <FuncMainMenuExitHandler+0x2c>)
 8004876:	f00b f885 	bl	800f984 <puts>
	#endif

	// disable the menu

	eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;
 800487a:	4b09      	ldr	r3, [pc, #36]	; (80048a0 <FuncMainMenuExitHandler+0x30>)
 800487c:	2200      	movs	r2, #0
 800487e:	701a      	strb	r2, [r3, #0]

	// reset the encoder range
	ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8004880:	2002      	movs	r0, #2
 8004882:	f000 fa47 	bl	8004d14 <ToplevelMenu_setStatus>
//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8004886:	f7fc fdf7 	bl	8001478 <DM_RefreshScreen>

	#ifdef SWV_DEBUG_ENABLED
		  printf("returning to Idle State\n");
 800488a:	4806      	ldr	r0, [pc, #24]	; (80048a4 <FuncMainMenuExitHandler+0x34>)
 800488c:	f00b f87a 	bl	800f984 <puts>
	#endif

	eNewEvent = evIdle;
 8004890:	4b05      	ldr	r3, [pc, #20]	; (80048a8 <FuncMainMenuExitHandler+0x38>)
 8004892:	2200      	movs	r2, #0
 8004894:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004896:	2301      	movs	r3, #1
}
 8004898:	4618      	mov	r0, r3
 800489a:	bd80      	pop	{r7, pc}
 800489c:	080137e0 	.word	0x080137e0
 80048a0:	20001ecf 	.word	0x20001ecf
 80048a4:	08013808 	.word	0x08013808
 80048a8:	20001ecb 	.word	0x20001ecb

080048ac <FuncSignalMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuEntryHandler(void)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncSignalMenuEntryHandler Event captured\n");
 80048b2:	4815      	ldr	r0, [pc, #84]	; (8004908 <FuncSignalMenuEntryHandler+0x5c>)
 80048b4:	f00b f866 	bl	800f984 <puts>
	#endif

	DM_RefreshScreen();
 80048b8:	f7fc fdde 	bl	8001478 <DM_RefreshScreen>
	FuncO_ResetLastEncoderValue();
 80048bc:	f000 fec2 	bl	8005644 <FuncO_ResetLastEncoderValue>

	eNextFuncMenuStatus = 	ENABLE_FUNC_SIGNAL_MENU;
 80048c0:	4b12      	ldr	r3, [pc, #72]	; (800490c <FuncSignalMenuEntryHandler+0x60>)
 80048c2:	2202      	movs	r2, #2
 80048c4:	701a      	strb	r2, [r3, #0]

	//FunctionProfile_t *func_profileTmp =  FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile;
 80048c6:	2000      	movs	r0, #0
 80048c8:	f001 fb2c 	bl	8005f24 <SM_GetOutputChannel>
 80048cc:	4603      	mov	r3, r0
 80048ce:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80048d2:	607b      	str	r3, [r7, #4]
	if(func_profileTmp)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00a      	beq.n	80048f0 <FuncSignalMenuEntryHandler+0x44>
	{
		ENCODER_TIMER->CNT = func_profileTmp->epos;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	785a      	ldrb	r2, [r3, #1]
 80048de:	4b0c      	ldr	r3, [pc, #48]	; (8004910 <FuncSignalMenuEntryHandler+0x64>)
 80048e0:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FuncO_GetFuncPresetEncoderRange();
 80048e2:	f001 f867 	bl	80059b4 <FuncO_GetFuncPresetEncoderRange>
 80048e6:	4603      	mov	r3, r0
 80048e8:	461a      	mov	r2, r3
 80048ea:	4b09      	ldr	r3, [pc, #36]	; (8004910 <FuncSignalMenuEntryHandler+0x64>)
 80048ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80048ee:	e002      	b.n	80048f6 <FuncSignalMenuEntryHandler+0x4a>
	}
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
 80048f0:	4808      	ldr	r0, [pc, #32]	; (8004914 <FuncSignalMenuEntryHandler+0x68>)
 80048f2:	f7fc fe07 	bl	8001504 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 80048f6:	4b08      	ldr	r3, [pc, #32]	; (8004918 <FuncSignalMenuEntryHandler+0x6c>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 80048fc:	2304      	movs	r3, #4
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3708      	adds	r7, #8
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	08013820 	.word	0x08013820
 800490c:	20001ecf 	.word	0x20001ecf
 8004910:	40012c00 	.word	0x40012c00
 8004914:	0801384c 	.word	0x0801384c
 8004918:	20001ecb 	.word	0x20001ecb
 800491c:	00000000 	.word	0x00000000

08004920 <FuncSignalMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuInputHandler(void)
{
 8004920:	b590      	push	{r4, r7, lr}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncSignalMenuInputHandler Event captured\n");
 8004926:	481c      	ldr	r0, [pc, #112]	; (8004998 <FuncSignalMenuInputHandler+0x78>)
 8004928:	f00b f82c 	bl	800f984 <puts>
	#endif

	if(SM_IsFuncPwmDutyMode())
 800492c:	f001 fd20 	bl	8006370 <SM_IsFuncPwmDutyMode>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d01a      	beq.n	800496c <FuncSignalMenuInputHandler+0x4c>
	{
		uint16_t enc_value = SM_GetEncoderValue(ENCODER_FORWARD);
 8004936:	2000      	movs	r0, #0
 8004938:	f001 fc94 	bl	8006264 <SM_GetEncoderValue>
 800493c:	4603      	mov	r3, r0
 800493e:	80fb      	strh	r3, [r7, #6]
		TIM3->CCR2 = (pow(enc_value, 2));
 8004940:	88fb      	ldrh	r3, [r7, #6]
 8004942:	4618      	mov	r0, r3
 8004944:	f7fb fe06 	bl	8000554 <__aeabi_ui2d>
 8004948:	4603      	mov	r3, r0
 800494a:	460c      	mov	r4, r1
 800494c:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8004990 <FuncSignalMenuInputHandler+0x70>
 8004950:	ec44 3b10 	vmov	d0, r3, r4
 8004954:	f00c fff0 	bl	8011938 <pow>
 8004958:	ec53 2b10 	vmov	r2, r3, d0
 800495c:	4c0f      	ldr	r4, [pc, #60]	; (800499c <FuncSignalMenuInputHandler+0x7c>)
 800495e:	4610      	mov	r0, r2
 8004960:	4619      	mov	r1, r3
 8004962:	f7fc f949 	bl	8000bf8 <__aeabi_d2uiz>
 8004966:	4603      	mov	r3, r0
 8004968:	63a3      	str	r3, [r4, #56]	; 0x38
 800496a:	e006      	b.n	800497a <FuncSignalMenuInputHandler+0x5a>

	}
	else
	{
		FuncO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 800496c:	2001      	movs	r0, #1
 800496e:	f001 fc79 	bl	8006264 <SM_GetEncoderValue>
 8004972:	4603      	mov	r3, r0
 8004974:	4618      	mov	r0, r3
 8004976:	f000 fe71 	bl	800565c <FuncO_MapEncoderPositionToSignalOutput>
	}

	eNewEvent = evIdle;
 800497a:	4b09      	ldr	r3, [pc, #36]	; (80049a0 <FuncSignalMenuInputHandler+0x80>)
 800497c:	2200      	movs	r2, #0
 800497e:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 8004980:	2304      	movs	r3, #4
}
 8004982:	4618      	mov	r0, r3
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	bd90      	pop	{r4, r7, pc}
 800498a:	bf00      	nop
 800498c:	f3af 8000 	nop.w
 8004990:	00000000 	.word	0x00000000
 8004994:	40000000 	.word	0x40000000
 8004998:	08013880 	.word	0x08013880
 800499c:	40000400 	.word	0x40000400
 80049a0:	20001ecb 	.word	0x20001ecb

080049a4 <FuncSignalToggleDutyMode>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FuncSignalToggleDutyMode()
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	af00      	add	r7, sp, #0
	SM_ToggleFuncPwmDutyMode();
 80049a8:	f001 fcee 	bl	8006388 <SM_ToggleFuncPwmDutyMode>
	ENCODER_TIMER->ARR = 16384;
 80049ac:	4b04      	ldr	r3, [pc, #16]	; (80049c0 <FuncSignalToggleDutyMode+0x1c>)
 80049ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80049b2:	62da      	str	r2, [r3, #44]	; 0x2c
	eNewEvent = evIdle;
 80049b4:	4b03      	ldr	r3, [pc, #12]	; (80049c4 <FuncSignalToggleDutyMode+0x20>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 80049ba:	2304      	movs	r3, #4
}
 80049bc:	4618      	mov	r0, r3
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	40012c00 	.word	0x40012c00
 80049c4:	20001ecb 	.word	0x20001ecb

080049c8 <FuncSignalMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuExitHandler()
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncSignalMenuExitHandler Event captured\n");
 80049cc:	4807      	ldr	r0, [pc, #28]	; (80049ec <FuncSignalMenuExitHandler+0x24>)
 80049ce:	f00a ffd9 	bl	800f984 <puts>
	#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 80049d2:	4b07      	ldr	r3, [pc, #28]	; (80049f0 <FuncSignalMenuExitHandler+0x28>)
 80049d4:	2201      	movs	r2, #1
 80049d6:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 80049d8:	f7fc fd4e 	bl	8001478 <DM_RefreshScreen>
	SM_ResetFuncPwmDutyMode();
 80049dc:	f001 fce4 	bl	80063a8 <SM_ResetFuncPwmDutyMode>
	eNewEvent = evIdle;
 80049e0:	4b04      	ldr	r3, [pc, #16]	; (80049f4 <FuncSignalMenuExitHandler+0x2c>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 80049e6:	2303      	movs	r3, #3
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	080138ac 	.word	0x080138ac
 80049f0:	20001ecf 	.word	0x20001ecf
 80049f4:	20001ecb 	.word	0x20001ecb

080049f8 <FuncSyncMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuEntryHandler(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncSyncMenuEntryHandler Event captured\n");
 80049fe:	4815      	ldr	r0, [pc, #84]	; (8004a54 <FuncSyncMenuEntryHandler+0x5c>)
 8004a00:	f00a ffc0 	bl	800f984 <puts>
	#endif

	DM_RefreshScreen();
 8004a04:	f7fc fd38 	bl	8001478 <DM_RefreshScreen>
	FuncO_ResetLastEncoderValue();
 8004a08:	f000 fe1c 	bl	8005644 <FuncO_ResetLastEncoderValue>

	eNextFuncMenuStatus = 	ENABLE_FUNC_SYNC_MENU;
 8004a0c:	4b12      	ldr	r3, [pc, #72]	; (8004a58 <FuncSyncMenuEntryHandler+0x60>)
 8004a0e:	2203      	movs	r2, #3
 8004a10:	701a      	strb	r2, [r3, #0]

	//FunctionProfile_t *func_profileTmp =  FuncO_GetSyncFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(SYNC_CHANNEL)->func_profile;
 8004a12:	2001      	movs	r0, #1
 8004a14:	f001 fa86 	bl	8005f24 <SM_GetOutputChannel>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004a1e:	607b      	str	r3, [r7, #4]
	if(func_profileTmp)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00a      	beq.n	8004a3c <FuncSyncMenuEntryHandler+0x44>
	{
		ENCODER_TIMER->CNT = func_profileTmp->epos;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	785a      	ldrb	r2, [r3, #1]
 8004a2a:	4b0c      	ldr	r3, [pc, #48]	; (8004a5c <FuncSyncMenuEntryHandler+0x64>)
 8004a2c:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FuncO_GetFuncPresetEncoderRange();
 8004a2e:	f000 ffc1 	bl	80059b4 <FuncO_GetFuncPresetEncoderRange>
 8004a32:	4603      	mov	r3, r0
 8004a34:	461a      	mov	r2, r3
 8004a36:	4b09      	ldr	r3, [pc, #36]	; (8004a5c <FuncSyncMenuEntryHandler+0x64>)
 8004a38:	62da      	str	r2, [r3, #44]	; 0x2c
 8004a3a:	e002      	b.n	8004a42 <FuncSyncMenuEntryHandler+0x4a>
	}
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
 8004a3c:	4808      	ldr	r0, [pc, #32]	; (8004a60 <FuncSyncMenuEntryHandler+0x68>)
 8004a3e:	f7fc fd61 	bl	8001504 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8004a42:	4b08      	ldr	r3, [pc, #32]	; (8004a64 <FuncSyncMenuEntryHandler+0x6c>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	701a      	strb	r2, [r3, #0]
	return Func_Sync_Menu_State;
 8004a48:	2305      	movs	r3, #5
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3708      	adds	r7, #8
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	080138d8 	.word	0x080138d8
 8004a58:	20001ecf 	.word	0x20001ecf
 8004a5c:	40012c00 	.word	0x40012c00
 8004a60:	0801384c 	.word	0x0801384c
 8004a64:	20001ecb 	.word	0x20001ecb

08004a68 <FuncSyncMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuInputHandler(void)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncSyncMenuInputHandler Event captured\n");
 8004a6c:	4807      	ldr	r0, [pc, #28]	; (8004a8c <FuncSyncMenuInputHandler+0x24>)
 8004a6e:	f00a ff89 	bl	800f984 <puts>
	#endif


	FuncO_MapEncoderPositionToSyncOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8004a72:	2001      	movs	r0, #1
 8004a74:	f001 fbf6 	bl	8006264 <SM_GetEncoderValue>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f000 fe28 	bl	80056d0 <FuncO_MapEncoderPositionToSyncOutput>
	eNewEvent = evBlueBtn;
 8004a80:	4b03      	ldr	r3, [pc, #12]	; (8004a90 <FuncSyncMenuInputHandler+0x28>)
 8004a82:	2201      	movs	r2, #1
 8004a84:	701a      	strb	r2, [r3, #0]
	return Func_Sync_Menu_State;
 8004a86:	2305      	movs	r3, #5
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	08013900 	.word	0x08013900
 8004a90:	20001ecb 	.word	0x20001ecb

08004a94 <FuncSyncMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuExitHandler()
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FuncSyncMenuExitHandler Event captured\n");
 8004a98:	4806      	ldr	r0, [pc, #24]	; (8004ab4 <FuncSyncMenuExitHandler+0x20>)
 8004a9a:	f00a ff73 	bl	800f984 <puts>
	#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8004a9e:	4b06      	ldr	r3, [pc, #24]	; (8004ab8 <FuncSyncMenuExitHandler+0x24>)
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8004aa4:	f7fc fce8 	bl	8001478 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004aa8:	4b04      	ldr	r3, [pc, #16]	; (8004abc <FuncSyncMenuExitHandler+0x28>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8004aae:	2303      	movs	r3, #3
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	08013928 	.word	0x08013928
 8004ab8:	20001ecf 	.word	0x20001ecf
 8004abc:	20001ecb 	.word	0x20001ecb

08004ac0 <GainMenu_getStatus>:
#include <stdio.h>

eGainMenu_Status eNextGainMenuStatus = 	DISABLE_GAIN_MENU;

eGainMenu_Status GainMenu_getStatus()
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	af00      	add	r7, sp, #0
	return eNextGainMenuStatus;
 8004ac4:	4b03      	ldr	r3, [pc, #12]	; (8004ad4 <GainMenu_getStatus+0x14>)
 8004ac6:	781b      	ldrb	r3, [r3, #0]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	20001ed0 	.word	0x20001ed0

08004ad8 <GainMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuEntryHandler()
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainMainMenuEntryHandler Event captured\n");
 8004adc:	4806      	ldr	r0, [pc, #24]	; (8004af8 <GainMainMenuEntryHandler+0x20>)
 8004ade:	f00a ff51 	bl	800f984 <puts>
	#endif

	DM_RefreshScreen();
 8004ae2:	f7fc fcc9 	bl	8001478 <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8004ae6:	4b05      	ldr	r3, [pc, #20]	; (8004afc <GainMainMenuEntryHandler+0x24>)
 8004ae8:	2201      	movs	r2, #1
 8004aea:	701a      	strb	r2, [r3, #0]

	eNewEvent = evIdle;
 8004aec:	4b04      	ldr	r3, [pc, #16]	; (8004b00 <GainMainMenuEntryHandler+0x28>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004af2:	2306      	movs	r3, #6
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	08013950 	.word	0x08013950
 8004afc:	20001ed0 	.word	0x20001ed0
 8004b00:	20001ecb 	.word	0x20001ecb

08004b04 <GainMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuExitHandler()
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainMainMenuExitHandler Event captured\n");
 8004b08:	4808      	ldr	r0, [pc, #32]	; (8004b2c <GainMainMenuExitHandler+0x28>)
 8004b0a:	f00a ff3b 	bl	800f984 <puts>
	#endif

	eNextGainMenuStatus = DISABLE_GAIN_MENU;
 8004b0e:	4b08      	ldr	r3, [pc, #32]	; (8004b30 <GainMainMenuExitHandler+0x2c>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004b14:	f7fc fcb0 	bl	8001478 <DM_RefreshScreen>

	#ifdef SWV_DEBUG_ENABLED
		  printf("returning to Idle State\n");
 8004b18:	4806      	ldr	r0, [pc, #24]	; (8004b34 <GainMainMenuExitHandler+0x30>)
 8004b1a:	f00a ff33 	bl	800f984 <puts>
	#endif

	eNewEvent = evIdle;
 8004b1e:	4b06      	ldr	r3, [pc, #24]	; (8004b38 <GainMainMenuExitHandler+0x34>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004b24:	2301      	movs	r3, #1
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	080139a0 	.word	0x080139a0
 8004b30:	20001ed0 	.word	0x20001ed0
 8004b34:	080139c8 	.word	0x080139c8
 8004b38:	20001ecb 	.word	0x20001ecb

08004b3c <GainSignalMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuEntryHandler()
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainSignalMenuEntryHandler Event captured\n");
 8004b42:	4815      	ldr	r0, [pc, #84]	; (8004b98 <GainSignalMenuEntryHandler+0x5c>)
 8004b44:	f00a ff1e 	bl	800f984 <puts>
	#endif

	DM_RefreshScreen();
 8004b48:	f7fc fc96 	bl	8001478 <DM_RefreshScreen>
	GO_ResetLastEncoderValue();
 8004b4c:	f000 ff3e 	bl	80059cc <GO_ResetLastEncoderValue>
	VPP_ResetLastEncoderValue();
 8004b50:	f001 fc36 	bl	80063c0 <VPP_ResetLastEncoderValue>

	eNextGainMenuStatus = ENABLE_GAIN_SIGNAL_MENU;
 8004b54:	4b11      	ldr	r3, [pc, #68]	; (8004b9c <GainSignalMenuEntryHandler+0x60>)
 8004b56:	2202      	movs	r2, #2
 8004b58:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 8004b5a:	2000      	movs	r0, #0
 8004b5c:	f001 f9e2 	bl	8005f24 <SM_GetOutputChannel>
 8004b60:	4603      	mov	r3, r0
 8004b62:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004b66:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d008      	beq.n	8004b80 <GainSignalMenuEntryHandler+0x44>
	{
		ENCODER_TIMER->CNT = pTmpVppPreset->epos;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	8b1a      	ldrh	r2, [r3, #24]
 8004b72:	4b0b      	ldr	r3, [pc, #44]	; (8004ba0 <GainSignalMenuEntryHandler+0x64>)
 8004b74:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;
 8004b76:	4b0a      	ldr	r3, [pc, #40]	; (8004ba0 <GainSignalMenuEntryHandler+0x64>)
 8004b78:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 8004b7c:	62da      	str	r2, [r3, #44]	; 0x2c
 8004b7e:	e002      	b.n	8004b86 <GainSignalMenuEntryHandler+0x4a>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8004b80:	4808      	ldr	r0, [pc, #32]	; (8004ba4 <GainSignalMenuEntryHandler+0x68>)
 8004b82:	f7fc fcbf 	bl	8001504 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8004b86:	4b08      	ldr	r3, [pc, #32]	; (8004ba8 <GainSignalMenuEntryHandler+0x6c>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 8004b8c:	2307      	movs	r3, #7
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3708      	adds	r7, #8
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	080139e0 	.word	0x080139e0
 8004b9c:	20001ed0 	.word	0x20001ed0
 8004ba0:	40012c00 	.word	0x40012c00
 8004ba4:	08013a0c 	.word	0x08013a0c
 8004ba8:	20001ecb 	.word	0x20001ecb

08004bac <GainSignalMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuInputHandler()
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainSignalMenuInputHandler Event captured\n");
 8004bb2:	4814      	ldr	r0, [pc, #80]	; (8004c04 <GainSignalMenuInputHandler+0x58>)
 8004bb4:	f00a fee6 	bl	800f984 <puts>
	#endif

	FunctionProfile_t *tmpFuncProfile = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile;
 8004bb8:	2000      	movs	r0, #0
 8004bba:	f001 f9b3 	bl	8005f24 <SM_GetOutputChannel>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004bc4:	607b      	str	r3, [r7, #4]
	if(tmpFuncProfile)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d012      	beq.n	8004bf2 <GainSignalMenuInputHandler+0x46>
	{
		if(tmpFuncProfile->func == PWM_FUNC_MODE)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	2b06      	cmp	r3, #6
 8004bd2:	d107      	bne.n	8004be4 <GainSignalMenuInputHandler+0x38>
		{
			GO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8004bd4:	2001      	movs	r0, #1
 8004bd6:	f001 fb45 	bl	8006264 <SM_GetEncoderValue>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f000 ff01 	bl	80059e4 <GO_MapEncoderPositionToSignalOutput>
 8004be2:	e006      	b.n	8004bf2 <GainSignalMenuInputHandler+0x46>

		}
		else
		{
			VPP_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8004be4:	2001      	movs	r0, #1
 8004be6:	f001 fb3d 	bl	8006264 <SM_GetEncoderValue>
 8004bea:	4603      	mov	r3, r0
 8004bec:	4618      	mov	r0, r3
 8004bee:	f001 fd5d 	bl	80066ac <VPP_MapEncoderPositionToSignalOutput>
		}
	}
	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_REVERSE));
	//

	eNewEvent = evYellowBtn;
 8004bf2:	4b05      	ldr	r3, [pc, #20]	; (8004c08 <GainSignalMenuInputHandler+0x5c>)
 8004bf4:	2203      	movs	r2, #3
 8004bf6:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 8004bf8:	2307      	movs	r3, #7
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	08013a44 	.word	0x08013a44
 8004c08:	20001ecb 	.word	0x20001ecb

08004c0c <GainSignalMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuExitHandler()
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainSignalMenuExitHandler Event captured\n");
 8004c10:	4806      	ldr	r0, [pc, #24]	; (8004c2c <GainSignalMenuExitHandler+0x20>)
 8004c12:	f00a feb7 	bl	800f984 <puts>
	#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8004c16:	4b06      	ldr	r3, [pc, #24]	; (8004c30 <GainSignalMenuExitHandler+0x24>)
 8004c18:	2201      	movs	r2, #1
 8004c1a:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004c1c:	f7fc fc2c 	bl	8001478 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004c20:	4b04      	ldr	r3, [pc, #16]	; (8004c34 <GainSignalMenuExitHandler+0x28>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004c26:	2306      	movs	r3, #6
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	08013a70 	.word	0x08013a70
 8004c30:	20001ed0 	.word	0x20001ed0
 8004c34:	20001ecb 	.word	0x20001ecb

08004c38 <GainSyncMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuEntryHandler()
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainSyncMenuEntryHandler Event captured\n");
 8004c3e:	4814      	ldr	r0, [pc, #80]	; (8004c90 <GainSyncMenuEntryHandler+0x58>)
 8004c40:	f00a fea0 	bl	800f984 <puts>
	#endif

	DM_RefreshScreen();
 8004c44:	f7fc fc18 	bl	8001478 <DM_RefreshScreen>
	VPP_ResetLastEncoderValue();
 8004c48:	f001 fbba 	bl	80063c0 <VPP_ResetLastEncoderValue>

	eNextGainMenuStatus = ENABLE_GAIN_SYNC_MENU;
 8004c4c:	4b11      	ldr	r3, [pc, #68]	; (8004c94 <GainSyncMenuEntryHandler+0x5c>)
 8004c4e:	2203      	movs	r2, #3
 8004c50:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile;
 8004c52:	2001      	movs	r0, #1
 8004c54:	f001 f966 	bl	8005f24 <SM_GetOutputChannel>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004c5e:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d008      	beq.n	8004c78 <GainSyncMenuEntryHandler+0x40>
	{
		ENCODER_TIMER->CNT = pTmpVppPreset->epos;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	8b1a      	ldrh	r2, [r3, #24]
 8004c6a:	4b0b      	ldr	r3, [pc, #44]	; (8004c98 <GainSyncMenuEntryHandler+0x60>)
 8004c6c:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;
 8004c6e:	4b0a      	ldr	r3, [pc, #40]	; (8004c98 <GainSyncMenuEntryHandler+0x60>)
 8004c70:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 8004c74:	62da      	str	r2, [r3, #44]	; 0x2c
 8004c76:	e002      	b.n	8004c7e <GainSyncMenuEntryHandler+0x46>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8004c78:	4808      	ldr	r0, [pc, #32]	; (8004c9c <GainSyncMenuEntryHandler+0x64>)
 8004c7a:	f7fc fc43 	bl	8001504 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8004c7e:	4b08      	ldr	r3, [pc, #32]	; (8004ca0 <GainSyncMenuEntryHandler+0x68>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	701a      	strb	r2, [r3, #0]
	return Gain_Sync_Menu_State;
 8004c84:	2308      	movs	r3, #8
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	08013a9c 	.word	0x08013a9c
 8004c94:	20001ed0 	.word	0x20001ed0
 8004c98:	40012c00 	.word	0x40012c00
 8004c9c:	08013a0c 	.word	0x08013a0c
 8004ca0:	20001ecb 	.word	0x20001ecb

08004ca4 <GainSyncMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuInputHandler()
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainSyncMenuInputHandler Event captured\n");
 8004ca8:	4807      	ldr	r0, [pc, #28]	; (8004cc8 <GainSyncMenuInputHandler+0x24>)
 8004caa:	f00a fe6b 	bl	800f984 <puts>
	#endif

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_REVERSE));
	VPP_MapEncoderPositionToSyncOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8004cae:	2001      	movs	r0, #1
 8004cb0:	f001 fad8 	bl	8006264 <SM_GetEncoderValue>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f001 fd32 	bl	8006720 <VPP_MapEncoderPositionToSyncOutput>

	eNewEvent = evYellowBtn;
 8004cbc:	4b03      	ldr	r3, [pc, #12]	; (8004ccc <GainSyncMenuInputHandler+0x28>)
 8004cbe:	2203      	movs	r2, #3
 8004cc0:	701a      	strb	r2, [r3, #0]
	return Gain_Sync_Menu_State;
 8004cc2:	2308      	movs	r3, #8
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	08013ac4 	.word	0x08013ac4
 8004ccc:	20001ecb 	.word	0x20001ecb

08004cd0 <GainSyncMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuExitHandler()
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("GainSyncMenuExitHandler Event captured\n");
 8004cd4:	4806      	ldr	r0, [pc, #24]	; (8004cf0 <GainSyncMenuExitHandler+0x20>)
 8004cd6:	f00a fe55 	bl	800f984 <puts>
	#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8004cda:	4b06      	ldr	r3, [pc, #24]	; (8004cf4 <GainSyncMenuExitHandler+0x24>)
 8004cdc:	2201      	movs	r2, #1
 8004cde:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004ce0:	f7fc fbca 	bl	8001478 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004ce4:	4b04      	ldr	r3, [pc, #16]	; (8004cf8 <GainSyncMenuExitHandler+0x28>)
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004cea:	2306      	movs	r3, #6
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	08013aec 	.word	0x08013aec
 8004cf4:	20001ed0 	.word	0x20001ed0
 8004cf8:	20001ecb 	.word	0x20001ecb

08004cfc <ToplevelMenu_getStatus>:
eToplevelMenu_Status eNextToplevelMenuStatus = 	ENABLE_TOPLEVEL_MAIN_MENU;



eToplevelMenu_Status ToplevelMenu_getStatus()
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	af00      	add	r7, sp, #0
	return eNextToplevelMenuStatus;
 8004d00:	4b03      	ldr	r3, [pc, #12]	; (8004d10 <ToplevelMenu_getStatus+0x14>)
 8004d02:	781b      	ldrb	r3, [r3, #0]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	20000008 	.word	0x20000008

08004d14 <ToplevelMenu_setStatus>:

void ToplevelMenu_setStatus(eToplevelMenu_Status pStatus)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	71fb      	strb	r3, [r7, #7]
	eNextToplevelMenuStatus = pStatus;
 8004d1e:	4a04      	ldr	r2, [pc, #16]	; (8004d30 <ToplevelMenu_setStatus+0x1c>)
 8004d20:	79fb      	ldrb	r3, [r7, #7]
 8004d22:	7013      	strb	r3, [r2, #0]
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr
 8004d30:	20000008 	.word	0x20000008

08004d34 <ToplevelOutputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuEntryHandler()
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelOutputMenuEntryHandler Event captured\n");
 8004d38:	4806      	ldr	r0, [pc, #24]	; (8004d54 <ToplevelOutputMenuEntryHandler+0x20>)
 8004d3a:	f00a fe23 	bl	800f984 <puts>
	#endif

	DM_RefreshScreen();
 8004d3e:	f7fc fb9b 	bl	8001478 <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_OUTPUT_MENU;
 8004d42:	4b05      	ldr	r3, [pc, #20]	; (8004d58 <ToplevelOutputMenuEntryHandler+0x24>)
 8004d44:	2202      	movs	r2, #2
 8004d46:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 8004d48:	4b04      	ldr	r3, [pc, #16]	; (8004d5c <ToplevelOutputMenuEntryHandler+0x28>)
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004d4e:	2301      	movs	r3, #1
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	08013bb0 	.word	0x08013bb0
 8004d58:	20000008 	.word	0x20000008
 8004d5c:	20001ecb 	.word	0x20001ecb

08004d60 <ToplevelOutputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuExitHandler()
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelOutputMenuExitHandler Event captured\n");
 8004d64:	4806      	ldr	r0, [pc, #24]	; (8004d80 <ToplevelOutputMenuExitHandler+0x20>)
 8004d66:	f00a fe0d 	bl	800f984 <puts>
	#endif

	DM_RefreshScreen();
 8004d6a:	f7fc fb85 	bl	8001478 <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 8004d6e:	4b05      	ldr	r3, [pc, #20]	; (8004d84 <ToplevelOutputMenuExitHandler+0x24>)
 8004d70:	2201      	movs	r2, #1
 8004d72:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004d74:	4b04      	ldr	r3, [pc, #16]	; (8004d88 <ToplevelOutputMenuExitHandler+0x28>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	08013c10 	.word	0x08013c10
 8004d84:	20000008 	.word	0x20000008
 8004d88:	20001ecb 	.word	0x20001ecb

08004d8c <ToplevelInputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuEntryHandler()
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelInputMenuEntryHandler Event captured\n");
 8004d90:	4806      	ldr	r0, [pc, #24]	; (8004dac <ToplevelInputMenuEntryHandler+0x20>)
 8004d92:	f00a fdf7 	bl	800f984 <puts>
	#endif

	DM_RefreshScreen();
 8004d96:	f7fc fb6f 	bl	8001478 <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_INPUT_MENU;
 8004d9a:	4b05      	ldr	r3, [pc, #20]	; (8004db0 <ToplevelInputMenuEntryHandler+0x24>)
 8004d9c:	2203      	movs	r2, #3
 8004d9e:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 8004da0:	4b04      	ldr	r3, [pc, #16]	; (8004db4 <ToplevelInputMenuEntryHandler+0x28>)
 8004da2:	2200      	movs	r2, #0
 8004da4:	701a      	strb	r2, [r3, #0]
	return Toplevel_Input_Menu_State;
 8004da6:	2302      	movs	r3, #2
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	08013c40 	.word	0x08013c40
 8004db0:	20000008 	.word	0x20000008
 8004db4:	20001ecb 	.word	0x20001ecb

08004db8 <ToplevelInputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuExitHandler()
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelInputMenuExitHandler Event captured\n");
 8004dbc:	4806      	ldr	r0, [pc, #24]	; (8004dd8 <ToplevelInputMenuExitHandler+0x20>)
 8004dbe:	f00a fde1 	bl	800f984 <puts>
	#endif

	DM_RefreshScreen();
 8004dc2:	f7fc fb59 	bl	8001478 <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 8004dc6:	4b05      	ldr	r3, [pc, #20]	; (8004ddc <ToplevelInputMenuExitHandler+0x24>)
 8004dc8:	2201      	movs	r2, #1
 8004dca:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004dcc:	4b04      	ldr	r3, [pc, #16]	; (8004de0 <ToplevelInputMenuExitHandler+0x28>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	08013ca0 	.word	0x08013ca0
 8004ddc:	20000008 	.word	0x20000008
 8004de0:	20001ecb 	.word	0x20001ecb

08004de4 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8004dec:	4b07      	ldr	r3, [pc, #28]	; (8004e0c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8004dee:	695a      	ldr	r2, [r3, #20]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4013      	ands	r3, r2
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d101      	bne.n	8004dfe <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e000      	b.n	8004e00 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr
 8004e0c:	40010400 	.word	0x40010400

08004e10 <IM_Init>:
uint16_t btn4_last_interrupt_time = 0;
uint16_t encbtn_last_interrupt_time = 0;


void IM_Init()
{
 8004e10:	b480      	push	{r7}
 8004e12:	af00      	add	r7, sp, #0
	  // debounce timer
	  DEBOUNCE_TIMER->CR1 |= TIM_CR1_CEN;
 8004e14:	4b05      	ldr	r3, [pc, #20]	; (8004e2c <IM_Init+0x1c>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a04      	ldr	r2, [pc, #16]	; (8004e2c <IM_Init+0x1c>)
 8004e1a:	f043 0301 	orr.w	r3, r3, #1
 8004e1e:	6013      	str	r3, [r2, #0]
}
 8004e20:	bf00      	nop
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	40014400 	.word	0x40014400

08004e30 <IM_SWEEP_UPDATE_TIM_IRQHandler>:
 *	@param None
 *	@retval None
 *
 */
void IM_SWEEP_UPDATE_TIM_IRQHandler()
{
 8004e30:	b480      	push	{r7}
 8004e32:	af00      	add	r7, sp, #0
	// upcounter (decreasing freq)
	if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 8004e34:	4b26      	ldr	r3, [pc, #152]	; (8004ed0 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa0>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0310 	and.w	r3, r3, #16
 8004e3c:	2b10      	cmp	r3, #16
 8004e3e:	d11c      	bne.n	8004e7a <IM_SWEEP_UPDATE_TIM_IRQHandler+0x4a>
	{
		// if we reach lower freq limit for sweep, reset to highest freq limit
		if(OUTPUT_TIMER->ARR >= sweep_upper_bounds_longest_output_arr)
 8004e40:	4b24      	ldr	r3, [pc, #144]	; (8004ed4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e44:	ee07 3a90 	vmov	s15, r3
 8004e48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004e4c:	4b22      	ldr	r3, [pc, #136]	; (8004ed8 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa8>)
 8004e4e:	edd3 7a00 	vldr	s15, [r3]
 8004e52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e5a:	db09      	blt.n	8004e70 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x40>
		{
			OUTPUT_TIMER->ARR = sweep_lower_bounds_shortest_output_arr;
 8004e5c:	4b1f      	ldr	r3, [pc, #124]	; (8004edc <IM_SWEEP_UPDATE_TIM_IRQHandler+0xac>)
 8004e5e:	edd3 7a00 	vldr	s15, [r3]
 8004e62:	4b1c      	ldr	r3, [pc, #112]	; (8004ed4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004e64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e68:	ee17 2a90 	vmov	r2, s15
 8004e6c:	62da      	str	r2, [r3, #44]	; 0x2c
			}
		}
	}

	//SWEEP_TIMER->ARR--;
}
 8004e6e:	e029      	b.n	8004ec4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
			OUTPUT_TIMER->ARR++;
 8004e70:	4b18      	ldr	r3, [pc, #96]	; (8004ed4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e74:	3201      	adds	r2, #1
 8004e76:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004e78:	e024      	b.n	8004ec4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
		if(OUTPUT_TIMER->ARR == 0x1U)
 8004e7a:	4b16      	ldr	r3, [pc, #88]	; (8004ed4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d104      	bne.n	8004e8c <IM_SWEEP_UPDATE_TIM_IRQHandler+0x5c>
			OUTPUT_TIMER->ARR = MAX_OUTPUT_ARR;
 8004e82:	4b14      	ldr	r3, [pc, #80]	; (8004ed4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004e84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e88:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004e8a:	e01b      	b.n	8004ec4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
			if(OUTPUT_TIMER->ARR <= sweep_lower_bounds_shortest_output_arr)
 8004e8c:	4b11      	ldr	r3, [pc, #68]	; (8004ed4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e90:	ee07 3a90 	vmov	s15, r3
 8004e94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004e98:	4b10      	ldr	r3, [pc, #64]	; (8004edc <IM_SWEEP_UPDATE_TIM_IRQHandler+0xac>)
 8004e9a:	edd3 7a00 	vldr	s15, [r3]
 8004e9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ea6:	d809      	bhi.n	8004ebc <IM_SWEEP_UPDATE_TIM_IRQHandler+0x8c>
				OUTPUT_TIMER->ARR = sweep_upper_bounds_longest_output_arr;
 8004ea8:	4b0b      	ldr	r3, [pc, #44]	; (8004ed8 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa8>)
 8004eaa:	edd3 7a00 	vldr	s15, [r3]
 8004eae:	4b09      	ldr	r3, [pc, #36]	; (8004ed4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004eb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004eb4:	ee17 2a90 	vmov	r2, s15
 8004eb8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004eba:	e003      	b.n	8004ec4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
				OUTPUT_TIMER->ARR--;
 8004ebc:	4b05      	ldr	r3, [pc, #20]	; (8004ed4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec0:	3a01      	subs	r2, #1
 8004ec2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004ec4:	bf00      	nop
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	40000c00 	.word	0x40000c00
 8004ed4:	40013400 	.word	0x40013400
 8004ed8:	20000004 	.word	0x20000004
 8004edc:	20000000 	.word	0x20000000

08004ee0 <IM_BTN1_EXTI14_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN1_EXTI14_Handler()
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004ee6:	4b0f      	ldr	r3, [pc, #60]	; (8004f24 <IM_BTN1_EXTI14_Handler+0x44>)
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eea:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn1_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004eec:	88fb      	ldrh	r3, [r7, #6]
 8004eee:	4a0e      	ldr	r2, [pc, #56]	; (8004f28 <IM_BTN1_EXTI14_Handler+0x48>)
 8004ef0:	8812      	ldrh	r2, [r2, #0]
 8004ef2:	1a9b      	subs	r3, r3, r2
 8004ef4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ef8:	dd0c      	ble.n	8004f14 <IM_BTN1_EXTI14_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14))
 8004efa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004efe:	f7ff ff71 	bl	8004de4 <LL_EXTI_IsActiveFlag_0_31>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d005      	beq.n	8004f14 <IM_BTN1_EXTI14_Handler+0x34>
		{

			EM_SetNewEvent(evBlueBtn);
 8004f08:	2001      	movs	r0, #1
 8004f0a:	f7ff f907 	bl	800411c <EM_SetNewEvent>
			printf("'Blue' BTN1_EXTI14_Pin\n");
 8004f0e:	4807      	ldr	r0, [pc, #28]	; (8004f2c <IM_BTN1_EXTI14_Handler+0x4c>)
 8004f10:	f00a fd38 	bl	800f984 <puts>
		}
	}
	btn1_last_interrupt_time = interrupt_time;
 8004f14:	4a04      	ldr	r2, [pc, #16]	; (8004f28 <IM_BTN1_EXTI14_Handler+0x48>)
 8004f16:	88fb      	ldrh	r3, [r7, #6]
 8004f18:	8013      	strh	r3, [r2, #0]


}
 8004f1a:	bf00      	nop
 8004f1c:	3708      	adds	r7, #8
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	40014400 	.word	0x40014400
 8004f28:	20001ed2 	.word	0x20001ed2
 8004f2c:	08013ccc 	.word	0x08013ccc

08004f30 <IM_BTN2_EXTI15_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN2_EXTI15_Handler()
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004f36:	4b0f      	ldr	r3, [pc, #60]	; (8004f74 <IM_BTN2_EXTI15_Handler+0x44>)
 8004f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3a:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn2_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004f3c:	88fb      	ldrh	r3, [r7, #6]
 8004f3e:	4a0e      	ldr	r2, [pc, #56]	; (8004f78 <IM_BTN2_EXTI15_Handler+0x48>)
 8004f40:	8812      	ldrh	r2, [r2, #0]
 8004f42:	1a9b      	subs	r3, r3, r2
 8004f44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f48:	dd0c      	ble.n	8004f64 <IM_BTN2_EXTI15_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15))
 8004f4a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004f4e:	f7ff ff49 	bl	8004de4 <LL_EXTI_IsActiveFlag_0_31>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d005      	beq.n	8004f64 <IM_BTN2_EXTI15_Handler+0x34>
		{
			EM_SetNewEvent(evYellowBtn);
 8004f58:	2003      	movs	r0, #3
 8004f5a:	f7ff f8df 	bl	800411c <EM_SetNewEvent>
			printf("'Yellow' BTN2_EXTI15_Pin\n");
 8004f5e:	4807      	ldr	r0, [pc, #28]	; (8004f7c <IM_BTN2_EXTI15_Handler+0x4c>)
 8004f60:	f00a fd10 	bl	800f984 <puts>
		}
	}
	btn2_last_interrupt_time = interrupt_time;
 8004f64:	4a04      	ldr	r2, [pc, #16]	; (8004f78 <IM_BTN2_EXTI15_Handler+0x48>)
 8004f66:	88fb      	ldrh	r3, [r7, #6]
 8004f68:	8013      	strh	r3, [r2, #0]


}
 8004f6a:	bf00      	nop
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	40014400 	.word	0x40014400
 8004f78:	20001ed4 	.word	0x20001ed4
 8004f7c:	08013ce4 	.word	0x08013ce4

08004f80 <IM_BTN3_EXTI0_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN3_EXTI0_Handler()
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004f86:	4b0e      	ldr	r3, [pc, #56]	; (8004fc0 <IM_BTN3_EXTI0_Handler+0x40>)
 8004f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8a:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn3_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004f8c:	88fb      	ldrh	r3, [r7, #6]
 8004f8e:	4a0d      	ldr	r2, [pc, #52]	; (8004fc4 <IM_BTN3_EXTI0_Handler+0x44>)
 8004f90:	8812      	ldrh	r2, [r2, #0]
 8004f92:	1a9b      	subs	r3, r3, r2
 8004f94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f98:	dd0b      	ble.n	8004fb2 <IM_BTN3_EXTI0_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0))
 8004f9a:	2001      	movs	r0, #1
 8004f9c:	f7ff ff22 	bl	8004de4 <LL_EXTI_IsActiveFlag_0_31>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d005      	beq.n	8004fb2 <IM_BTN3_EXTI0_Handler+0x32>
		{
			EM_SetNewEvent(evRedBtn);
 8004fa6:	2004      	movs	r0, #4
 8004fa8:	f7ff f8b8 	bl	800411c <EM_SetNewEvent>
			printf("'Red' BTN3_EXTI0_Pin\n");
 8004fac:	4806      	ldr	r0, [pc, #24]	; (8004fc8 <IM_BTN3_EXTI0_Handler+0x48>)
 8004fae:	f00a fce9 	bl	800f984 <puts>
		}
	}
	btn3_last_interrupt_time = interrupt_time;
 8004fb2:	4a04      	ldr	r2, [pc, #16]	; (8004fc4 <IM_BTN3_EXTI0_Handler+0x44>)
 8004fb4:	88fb      	ldrh	r3, [r7, #6]
 8004fb6:	8013      	strh	r3, [r2, #0]


}
 8004fb8:	bf00      	nop
 8004fba:	3708      	adds	r7, #8
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	40014400 	.word	0x40014400
 8004fc4:	20001ed6 	.word	0x20001ed6
 8004fc8:	08013d00 	.word	0x08013d00

08004fcc <IM_BTN4_EXTI1_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN4_EXTI1_Handler()
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004fd2:	4b0e      	ldr	r3, [pc, #56]	; (800500c <IM_BTN4_EXTI1_Handler+0x40>)
 8004fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd6:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn4_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004fd8:	88fb      	ldrh	r3, [r7, #6]
 8004fda:	4a0d      	ldr	r2, [pc, #52]	; (8005010 <IM_BTN4_EXTI1_Handler+0x44>)
 8004fdc:	8812      	ldrh	r2, [r2, #0]
 8004fde:	1a9b      	subs	r3, r3, r2
 8004fe0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fe4:	dd0b      	ble.n	8004ffe <IM_BTN4_EXTI1_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1))
 8004fe6:	2002      	movs	r0, #2
 8004fe8:	f7ff fefc 	bl	8004de4 <LL_EXTI_IsActiveFlag_0_31>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d005      	beq.n	8004ffe <IM_BTN4_EXTI1_Handler+0x32>
		{
			EM_SetNewEvent(evGreenBtn);
 8004ff2:	2002      	movs	r0, #2
 8004ff4:	f7ff f892 	bl	800411c <EM_SetNewEvent>
			printf("'Green' BTN4_EXTI1_Pin\n");
 8004ff8:	4806      	ldr	r0, [pc, #24]	; (8005014 <IM_BTN4_EXTI1_Handler+0x48>)
 8004ffa:	f00a fcc3 	bl	800f984 <puts>
		}
	}
	btn4_last_interrupt_time = interrupt_time;
 8004ffe:	4a04      	ldr	r2, [pc, #16]	; (8005010 <IM_BTN4_EXTI1_Handler+0x44>)
 8005000:	88fb      	ldrh	r3, [r7, #6]
 8005002:	8013      	strh	r3, [r2, #0]


}
 8005004:	bf00      	nop
 8005006:	3708      	adds	r7, #8
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	40014400 	.word	0x40014400
 8005010:	20001ed8 	.word	0x20001ed8
 8005014:	08013d18 	.word	0x08013d18

08005018 <IM_ENC_EXTI2_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_EXTI2_Handler()
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 800501e:	4b0e      	ldr	r3, [pc, #56]	; (8005058 <IM_ENC_EXTI2_Handler+0x40>)
 8005020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005022:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - encbtn_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8005024:	88fb      	ldrh	r3, [r7, #6]
 8005026:	4a0d      	ldr	r2, [pc, #52]	; (800505c <IM_ENC_EXTI2_Handler+0x44>)
 8005028:	8812      	ldrh	r2, [r2, #0]
 800502a:	1a9b      	subs	r3, r3, r2
 800502c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005030:	dd0b      	ble.n	800504a <IM_ENC_EXTI2_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2))
 8005032:	2004      	movs	r0, #4
 8005034:	f7ff fed6 	bl	8004de4 <LL_EXTI_IsActiveFlag_0_31>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d005      	beq.n	800504a <IM_ENC_EXTI2_Handler+0x32>
		{
			EM_SetNewEvent(evEncoderPush);
 800503e:	2006      	movs	r0, #6
 8005040:	f7ff f86c 	bl	800411c <EM_SetNewEvent>
			printf("'EncoderPush' ENC_EXTI2_Pin\n");
 8005044:	4806      	ldr	r0, [pc, #24]	; (8005060 <IM_ENC_EXTI2_Handler+0x48>)
 8005046:	f00a fc9d 	bl	800f984 <puts>
		}
	}
	encbtn_last_interrupt_time = interrupt_time;
 800504a:	4a04      	ldr	r2, [pc, #16]	; (800505c <IM_ENC_EXTI2_Handler+0x44>)
 800504c:	88fb      	ldrh	r3, [r7, #6]
 800504e:	8013      	strh	r3, [r2, #0]


}
 8005050:	bf00      	nop
 8005052:	3708      	adds	r7, #8
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	40014400 	.word	0x40014400
 800505c:	20001eda 	.word	0x20001eda
 8005060:	08013d30 	.word	0x08013d30

08005064 <IM_ENC_DIRF_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_DIRF_Handler()
{
 8005064:	b580      	push	{r7, lr}
 8005066:	af00      	add	r7, sp, #0

	if((TIM1->SR & TIM_SR_DIRF) == TIM_SR_DIRF)
 8005068:	4b0a      	ldr	r3, [pc, #40]	; (8005094 <IM_ENC_DIRF_Handler+0x30>)
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005070:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005074:	d10b      	bne.n	800508e <IM_ENC_DIRF_Handler+0x2a>
	{
		EM_SetNewEvent(evEncoderSet);
 8005076:	2005      	movs	r0, #5
 8005078:	f7ff f850 	bl	800411c <EM_SetNewEvent>
		printf("Encoder new direction\n");
 800507c:	4806      	ldr	r0, [pc, #24]	; (8005098 <IM_ENC_DIRF_Handler+0x34>)
 800507e:	f00a fc81 	bl	800f984 <puts>
		TIM1->SR &= ~(TIM_SR_DIRF);
 8005082:	4b04      	ldr	r3, [pc, #16]	; (8005094 <IM_ENC_DIRF_Handler+0x30>)
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	4a03      	ldr	r2, [pc, #12]	; (8005094 <IM_ENC_DIRF_Handler+0x30>)
 8005088:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800508c:	6113      	str	r3, [r2, #16]

	}
}
 800508e:	bf00      	nop
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	40012c00 	.word	0x40012c00
 8005098:	08013d4c 	.word	0x08013d4c

0800509c <BO_GetBiasPolarity>:
 *	@param None
 *	@retval None
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
 800509c:	b480      	push	{r7}
 800509e:	af00      	add	r7, sp, #0
	return eBiasPolarity;
 80050a0:	4b03      	ldr	r3, [pc, #12]	; (80050b0 <BO_GetBiasPolarity+0x14>)
 80050a2:	781b      	ldrb	r3, [r3, #0]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	20000009 	.word	0x20000009

080050b4 <BO_GetDcBiasEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t BO_GetDcBiasEncoderValue()
{
 80050b4:	b480      	push	{r7}
 80050b6:	af00      	add	r7, sp, #0
	return dc_bias_encoder_value;
 80050b8:	4b03      	ldr	r3, [pc, #12]	; (80050c8 <BO_GetDcBiasEncoderValue+0x14>)
 80050ba:	881b      	ldrh	r3, [r3, #0]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	2000000a 	.word	0x2000000a

080050cc <BO_MapEncoderPositionToSignalOutput>:
 *	@param None
 *	@retval None
 *
 */
void BO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	4603      	mov	r3, r0
 80050d4:	80fb      	strh	r3, [r7, #6]
	// pEncoderValue is reversed for correct rotary encoder operation.
	// However, we want to retain the forward direction value to prevent polarity flip!
	dc_bias_encoder_value = SM_GetEncoderValue(ENCODER_FORWARD);
 80050d6:	2000      	movs	r0, #0
 80050d8:	f001 f8c4 	bl	8006264 <SM_GetEncoderValue>
 80050dc:	4603      	mov	r3, r0
 80050de:	461a      	mov	r2, r3
 80050e0:	4b1b      	ldr	r3, [pc, #108]	; (8005150 <BO_MapEncoderPositionToSignalOutput+0x84>)
 80050e2:	801a      	strh	r2, [r3, #0]

	// apply negative dc bias
	if(pEncoderValue < BIAS_CENTER) {
 80050e4:	88fb      	ldrh	r3, [r7, #6]
 80050e6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80050ea:	d214      	bcs.n	8005116 <BO_MapEncoderPositionToSignalOutput+0x4a>

		eBiasPolarity = INVERSEBIAS;
 80050ec:	4b19      	ldr	r3, [pc, #100]	; (8005154 <BO_MapEncoderPositionToSignalOutput+0x88>)
 80050ee:	2200      	movs	r2, #0
 80050f0:	701a      	strb	r2, [r3, #0]


		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((BIAS_CENTER - pEncoderValue) * BIAS_MAG));
 80050f2:	88fb      	ldrh	r3, [r7, #6]
 80050f4:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 80050f8:	4613      	mov	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	4413      	add	r3, r2
 80050fe:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8005100:	2200      	movs	r2, #0
 8005102:	2110      	movs	r1, #16
 8005104:	4814      	ldr	r0, [pc, #80]	; (8005158 <BO_MapEncoderPositionToSignalOutput+0x8c>)
 8005106:	f004 fe67 	bl	8009dd8 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 800510a:	2201      	movs	r2, #1
 800510c:	2108      	movs	r1, #8
 800510e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005112:	f005 fe23 	bl	800ad5c <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(pEncoderValue >= BIAS_CENTER) {
 8005116:	88fb      	ldrh	r3, [r7, #6]
 8005118:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800511c:	d314      	bcc.n	8005148 <BO_MapEncoderPositionToSignalOutput+0x7c>

		eBiasPolarity = NORMALBIAS;
 800511e:	4b0d      	ldr	r3, [pc, #52]	; (8005154 <BO_MapEncoderPositionToSignalOutput+0x88>)
 8005120:	2201      	movs	r2, #1
 8005122:	701a      	strb	r2, [r3, #0]
		//TIM1->CNT = pEncoderValue;

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((pEncoderValue - BIAS_CENTER) * BIAS_MAG));
 8005124:	88fb      	ldrh	r3, [r7, #6]
 8005126:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 800512a:	4613      	mov	r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	4413      	add	r3, r2
 8005130:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8005132:	2200      	movs	r2, #0
 8005134:	2110      	movs	r1, #16
 8005136:	4808      	ldr	r0, [pc, #32]	; (8005158 <BO_MapEncoderPositionToSignalOutput+0x8c>)
 8005138:	f004 fe4e 	bl	8009dd8 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 800513c:	2200      	movs	r2, #0
 800513e:	2108      	movs	r1, #8
 8005140:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005144:	f005 fe0a 	bl	800ad5c <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_RESET);
	}
}
 8005148:	bf00      	nop
 800514a:	3708      	adds	r7, #8
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	2000000a 	.word	0x2000000a
 8005154:	20000009 	.word	0x20000009
 8005158:	200026ac 	.word	0x200026ac

0800515c <BO_SetPwmSignalOffsetForGain>:

void BO_SetPwmSignalOffsetForGain(eGainSettings_t temp_gain)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	4603      	mov	r3, r0
 8005164:	71fb      	strb	r3, [r7, #7]
	// artifically offset PWM signal above DC
	uint16_t new_bias_value;
	switch(temp_gain)
 8005166:	79fb      	ldrb	r3, [r7, #7]
 8005168:	3b01      	subs	r3, #1
 800516a:	2b06      	cmp	r3, #6
 800516c:	d81c      	bhi.n	80051a8 <BO_SetPwmSignalOffsetForGain+0x4c>
 800516e:	a201      	add	r2, pc, #4	; (adr r2, 8005174 <BO_SetPwmSignalOffsetForGain+0x18>)
 8005170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005174:	08005191 	.word	0x08005191
 8005178:	08005199 	.word	0x08005199
 800517c:	080051a1 	.word	0x080051a1
 8005180:	080051a1 	.word	0x080051a1
 8005184:	080051a1 	.word	0x080051a1
 8005188:	080051a1 	.word	0x080051a1
 800518c:	080051a1 	.word	0x080051a1
	{

		case ONE_GAIN:
			new_bias_value = 2500;
 8005190:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8005194:	81fb      	strh	r3, [r7, #14]
			break;
 8005196:	e008      	b.n	80051aa <BO_SetPwmSignalOffsetForGain+0x4e>
		case TWO_GAIN:
			new_bias_value = 3000;
 8005198:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800519c:	81fb      	strh	r3, [r7, #14]
			break;
 800519e:	e004      	b.n	80051aa <BO_SetPwmSignalOffsetForGain+0x4e>
		case THREE_GAIN:
		case FOUR_GAIN:
		case FIVE_GAIN:
		case SIX_GAIN:
		case SEVEN_GAIN:
			new_bias_value = 4095;
 80051a0:	f640 73ff 	movw	r3, #4095	; 0xfff
 80051a4:	81fb      	strh	r3, [r7, #14]
			break;
 80051a6:	e000      	b.n	80051aa <BO_SetPwmSignalOffsetForGain+0x4e>

		default:
			break;
 80051a8:	bf00      	nop

	}

	HAL_DAC_SetValue(	&hdac1,
 80051aa:	89fb      	ldrh	r3, [r7, #14]
 80051ac:	2200      	movs	r2, #0
 80051ae:	2110      	movs	r1, #16
 80051b0:	4806      	ldr	r0, [pc, #24]	; (80051cc <BO_SetPwmSignalOffsetForGain+0x70>)
 80051b2:	f004 fe11 	bl	8009dd8 <HAL_DAC_SetValue>
						DAC1_CHANNEL_2,
						DAC_ALIGN_12B_R,
						new_bias_value);

	HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 80051b6:	2200      	movs	r2, #0
 80051b8:	2108      	movs	r1, #8
 80051ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80051be:	f005 fdcd 	bl	800ad5c <HAL_GPIO_WritePin>
						DCBIAS_INVERT_Pin,
						GPIO_PIN_RESET);
}
 80051c2:	bf00      	nop
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	200026ac 	.word	0x200026ac

080051d0 <BO_GetOutputBias>:
 *	@param None
 *	@retval None
 *
 */
uint32_t BO_GetOutputBias()
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 80051d4:	2110      	movs	r1, #16
 80051d6:	4803      	ldr	r0, [pc, #12]	; (80051e4 <BO_GetOutputBias+0x14>)
 80051d8:	f004 fe44 	bl	8009e64 <HAL_DAC_GetValue>
 80051dc:	4603      	mov	r3, r0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	200026ac 	.word	0x200026ac

080051e8 <DT_InitRegister>:
 *	@param None
 *	@retval None
 *
 */
void DT_InitRegister()
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 80051ee:	2300      	movs	r3, #0
 80051f0:	607b      	str	r3, [r7, #4]
 80051f2:	e06b      	b.n	80052cc <DT_InitRegister+0xe4>
	{
		// prevent divide by zero (prescaler)
		if(DacTimerReg[i].psc == 0)
 80051f4:	493a      	ldr	r1, [pc, #232]	; (80052e0 <DT_InitRegister+0xf8>)
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	4613      	mov	r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4413      	add	r3, r2
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	440b      	add	r3, r1
 8005202:	3308      	adds	r3, #8
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d129      	bne.n	800525e <DT_InitRegister+0x76>
			DacTimerReg[i].arr = ((SM_MCLK / DacTimerReg[i].hertz) / SM_FSAMP) * DacTimerReg[i].error;
 800520a:	4935      	ldr	r1, [pc, #212]	; (80052e0 <DT_InitRegister+0xf8>)
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	4613      	mov	r3, r2
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	4413      	add	r3, r2
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	440b      	add	r3, r1
 8005218:	3304      	adds	r3, #4
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a31      	ldr	r2, [pc, #196]	; (80052e4 <DT_InitRegister+0xfc>)
 800521e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005222:	ee07 3a90 	vmov	s15, r3
 8005226:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800522a:	492d      	ldr	r1, [pc, #180]	; (80052e0 <DT_InitRegister+0xf8>)
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	4613      	mov	r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	4413      	add	r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	440b      	add	r3, r1
 8005238:	3310      	adds	r3, #16
 800523a:	edd3 7a00 	vldr	s15, [r3]
 800523e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005242:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005246:	ee17 0a90 	vmov	r0, s15
 800524a:	4925      	ldr	r1, [pc, #148]	; (80052e0 <DT_InitRegister+0xf8>)
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	4613      	mov	r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	4413      	add	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	440b      	add	r3, r1
 8005258:	330c      	adds	r3, #12
 800525a:	6018      	str	r0, [r3, #0]
 800525c:	e033      	b.n	80052c6 <DT_InitRegister+0xde>
		else
			DacTimerReg[i].arr = (((SM_MCLK / DacTimerReg[i].hertz) / DacTimerReg[i].psc) / SM_FSAMP) * DacTimerReg[i].error;
 800525e:	4920      	ldr	r1, [pc, #128]	; (80052e0 <DT_InitRegister+0xf8>)
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	4613      	mov	r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	4413      	add	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	440b      	add	r3, r1
 800526c:	3304      	adds	r3, #4
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a1c      	ldr	r2, [pc, #112]	; (80052e4 <DT_InitRegister+0xfc>)
 8005272:	fbb2 f1f3 	udiv	r1, r2, r3
 8005276:	481a      	ldr	r0, [pc, #104]	; (80052e0 <DT_InitRegister+0xf8>)
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	4613      	mov	r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	4413      	add	r3, r2
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	4403      	add	r3, r0
 8005284:	3308      	adds	r3, #8
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	fbb1 f3f3 	udiv	r3, r1, r3
 800528c:	ee07 3a90 	vmov	s15, r3
 8005290:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005294:	4912      	ldr	r1, [pc, #72]	; (80052e0 <DT_InitRegister+0xf8>)
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	4613      	mov	r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	4413      	add	r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	440b      	add	r3, r1
 80052a2:	3310      	adds	r3, #16
 80052a4:	edd3 7a00 	vldr	s15, [r3]
 80052a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052b0:	ee17 0a90 	vmov	r0, s15
 80052b4:	490a      	ldr	r1, [pc, #40]	; (80052e0 <DT_InitRegister+0xf8>)
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	4613      	mov	r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	4413      	add	r3, r2
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	440b      	add	r3, r1
 80052c2:	330c      	adds	r3, #12
 80052c4:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	3301      	adds	r3, #1
 80052ca:	607b      	str	r3, [r7, #4]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b0d      	cmp	r3, #13
 80052d0:	dd90      	ble.n	80051f4 <DT_InitRegister+0xc>
	}
}
 80052d2:	bf00      	nop
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	2000000c 	.word	0x2000000c
 80052e4:	00155cc0 	.word	0x00155cc0

080052e8 <DT_GetRegisterByEnum>:
 *	@param pEnum Enummeration (eFreqSettings_t) search criteria. Not an index
 *	@retval Pointer to the found DacTimeReg_t struct. Null if no result!
 *
 */
DacTimeReg_t* DT_GetRegisterByEnum(eFreqSettings_t pEnum)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 80052f0:	2300      	movs	r3, #0
 80052f2:	60fb      	str	r3, [r7, #12]
 80052f4:	e016      	b.n	8005324 <DT_GetRegisterByEnum+0x3c>
		if(DacTimerReg[i].hertz == pEnum)
 80052f6:	4910      	ldr	r1, [pc, #64]	; (8005338 <DT_GetRegisterByEnum+0x50>)
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	4613      	mov	r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	4413      	add	r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	440b      	add	r3, r1
 8005304:	3304      	adds	r3, #4
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	429a      	cmp	r2, r3
 800530c:	d107      	bne.n	800531e <DT_GetRegisterByEnum+0x36>
			return &DacTimerReg[i];
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	4613      	mov	r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4413      	add	r3, r2
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	4a07      	ldr	r2, [pc, #28]	; (8005338 <DT_GetRegisterByEnum+0x50>)
 800531a:	4413      	add	r3, r2
 800531c:	e006      	b.n	800532c <DT_GetRegisterByEnum+0x44>
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	3301      	adds	r3, #1
 8005322:	60fb      	str	r3, [r7, #12]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2b0d      	cmp	r3, #13
 8005328:	dde5      	ble.n	80052f6 <DT_GetRegisterByEnum+0xe>

	return 0;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3714      	adds	r7, #20
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr
 8005338:	2000000c 	.word	0x2000000c

0800533c <FreqO_ResetLastEncoderValue>:
uint8_t FreqPresetEncoderRange = 56;

uint16_t freq_last_encoder_value = 0;

void FreqO_ResetLastEncoderValue()
{
 800533c:	b480      	push	{r7}
 800533e:	af00      	add	r7, sp, #0
	freq_last_encoder_value = 0;
 8005340:	4b03      	ldr	r3, [pc, #12]	; (8005350 <FreqO_ResetLastEncoderValue+0x14>)
 8005342:	2200      	movs	r2, #0
 8005344:	801a      	strh	r2, [r3, #0]
}
 8005346:	bf00      	nop
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr
 8005350:	20001edc 	.word	0x20001edc

08005354 <FreqO_AdjustFreq>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustFreq()
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0

		OUTPUT_TIMER->ARR = SM_GetEncoderValue(ENCODER_FORWARD); //* FREQ_ENCODER_MIDFREQ_MAG;
 800535a:	2000      	movs	r0, #0
 800535c:	f000 ff82 	bl	8006264 <SM_GetEncoderValue>
 8005360:	4603      	mov	r3, r0
 8005362:	461a      	mov	r2, r3
 8005364:	4b10      	ldr	r3, [pc, #64]	; (80053a8 <FreqO_AdjustFreq+0x54>)
 8005366:	62da      	str	r2, [r3, #44]	; 0x2c

		eOutput_mode tmpOut = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 8005368:	2000      	movs	r0, #0
 800536a:	f000 fddb 	bl	8005f24 <SM_GetOutputChannel>
 800536e:	4603      	mov	r3, r0
 8005370:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	71fb      	strb	r3, [r7, #7]
		if(tmpOut == PWM_FUNC_MODE)
 8005378:	79fb      	ldrb	r3, [r7, #7]
 800537a:	2b06      	cmp	r3, #6
 800537c:	d110      	bne.n	80053a0 <FreqO_AdjustFreq+0x4c>
		{
			// duty cycle of PWM require slower settings to get the
			// same frequency as normal output functions
			TIM3->PSC = 256;
 800537e:	4b0b      	ldr	r3, [pc, #44]	; (80053ac <FreqO_AdjustFreq+0x58>)
 8005380:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005384:	629a      	str	r2, [r3, #40]	; 0x28
			TIM3->ARR = SM_GetEncoderValue(ENCODER_FORWARD)/2;
 8005386:	2000      	movs	r0, #0
 8005388:	f000 ff6c 	bl	8006264 <SM_GetEncoderValue>
 800538c:	4603      	mov	r3, r0
 800538e:	085b      	lsrs	r3, r3, #1
 8005390:	b29a      	uxth	r2, r3
 8005392:	4b06      	ldr	r3, [pc, #24]	; (80053ac <FreqO_AdjustFreq+0x58>)
 8005394:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM3->CCR2 = TIM3->ARR/2;
 8005396:	4b05      	ldr	r3, [pc, #20]	; (80053ac <FreqO_AdjustFreq+0x58>)
 8005398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539a:	4a04      	ldr	r2, [pc, #16]	; (80053ac <FreqO_AdjustFreq+0x58>)
 800539c:	085b      	lsrs	r3, r3, #1
 800539e:	6393      	str	r3, [r2, #56]	; 0x38

		}
}
 80053a0:	bf00      	nop
 80053a2:	3708      	adds	r7, #8
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	40013400 	.word	0x40013400
 80053ac:	40000400 	.word	0x40000400

080053b0 <FreqO_MapEncoderPositionToBothOutput>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_MapEncoderPositionToBothOutput(uint16_t pEncValue)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	4603      	mov	r3, r0
 80053b8:	80fb      	strh	r3, [r7, #6]

	switch(pEncValue)
 80053ba:	88fb      	ldrh	r3, [r7, #6]
 80053bc:	2b38      	cmp	r3, #56	; 0x38
 80053be:	f200 80b4 	bhi.w	800552a <FreqO_MapEncoderPositionToBothOutput+0x17a>
 80053c2:	a201      	add	r2, pc, #4	; (adr r2, 80053c8 <FreqO_MapEncoderPositionToBothOutput+0x18>)
 80053c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c8:	080054ad 	.word	0x080054ad
 80053cc:	080054ad 	.word	0x080054ad
 80053d0:	080054ad 	.word	0x080054ad
 80053d4:	080054ad 	.word	0x080054ad
 80053d8:	080054b5 	.word	0x080054b5
 80053dc:	080054b5 	.word	0x080054b5
 80053e0:	080054b5 	.word	0x080054b5
 80053e4:	080054b5 	.word	0x080054b5
 80053e8:	080054bd 	.word	0x080054bd
 80053ec:	080054bd 	.word	0x080054bd
 80053f0:	080054bd 	.word	0x080054bd
 80053f4:	080054bd 	.word	0x080054bd
 80053f8:	080054c5 	.word	0x080054c5
 80053fc:	080054c5 	.word	0x080054c5
 8005400:	080054c5 	.word	0x080054c5
 8005404:	080054c5 	.word	0x080054c5
 8005408:	080054cd 	.word	0x080054cd
 800540c:	080054cd 	.word	0x080054cd
 8005410:	080054cd 	.word	0x080054cd
 8005414:	080054cd 	.word	0x080054cd
 8005418:	080054d5 	.word	0x080054d5
 800541c:	080054d5 	.word	0x080054d5
 8005420:	080054d5 	.word	0x080054d5
 8005424:	080054d5 	.word	0x080054d5
 8005428:	080054df 	.word	0x080054df
 800542c:	080054df 	.word	0x080054df
 8005430:	080054df 	.word	0x080054df
 8005434:	080054df 	.word	0x080054df
 8005438:	080054e9 	.word	0x080054e9
 800543c:	080054e9 	.word	0x080054e9
 8005440:	080054e9 	.word	0x080054e9
 8005444:	0800552b 	.word	0x0800552b
 8005448:	080054e9 	.word	0x080054e9
 800544c:	080054f3 	.word	0x080054f3
 8005450:	080054f3 	.word	0x080054f3
 8005454:	080054f3 	.word	0x080054f3
 8005458:	080054f3 	.word	0x080054f3
 800545c:	080054fd 	.word	0x080054fd
 8005460:	080054fd 	.word	0x080054fd
 8005464:	080054fd 	.word	0x080054fd
 8005468:	080054fd 	.word	0x080054fd
 800546c:	08005507 	.word	0x08005507
 8005470:	08005507 	.word	0x08005507
 8005474:	08005507 	.word	0x08005507
 8005478:	08005507 	.word	0x08005507
 800547c:	08005511 	.word	0x08005511
 8005480:	08005511 	.word	0x08005511
 8005484:	08005511 	.word	0x08005511
 8005488:	08005511 	.word	0x08005511
 800548c:	0800551b 	.word	0x0800551b
 8005490:	0800551b 	.word	0x0800551b
 8005494:	0800551b 	.word	0x0800551b
 8005498:	0800551b 	.word	0x0800551b
 800549c:	08005523 	.word	0x08005523
 80054a0:	08005523 	.word	0x08005523
 80054a4:	08005523 	.word	0x08005523
 80054a8:	08005523 	.word	0x08005523
	{
		case 0:
		case 1:
		case 2:
		case 3:
			FreqO_ApplyPreset(FPRESET_1HZ);
 80054ac:	2001      	movs	r0, #1
 80054ae:	f000 f845 	bl	800553c <FreqO_ApplyPreset>
			break;
 80054b2:	e03a      	b.n	800552a <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 4:
		case 5:
		case 6:
		case 7:
			FreqO_ApplyPreset(FPRESET_10HZ);
 80054b4:	200a      	movs	r0, #10
 80054b6:	f000 f841 	bl	800553c <FreqO_ApplyPreset>
			break;
 80054ba:	e036      	b.n	800552a <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 8:
		case 9:
		case 10:
		case 11:
			FreqO_ApplyPreset(FPRESET_50HZ);
 80054bc:	2032      	movs	r0, #50	; 0x32
 80054be:	f000 f83d 	bl	800553c <FreqO_ApplyPreset>
			break;
 80054c2:	e032      	b.n	800552a <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 12:
		case 13:
		case 14:
		case 15:
			FreqO_ApplyPreset(FPRESET_100HZ);
 80054c4:	2064      	movs	r0, #100	; 0x64
 80054c6:	f000 f839 	bl	800553c <FreqO_ApplyPreset>
			break;
 80054ca:	e02e      	b.n	800552a <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 16:
		case 17:
		case 18:
		case 19:
			FreqO_ApplyPreset(FPRESET_250HZ);
 80054cc:	20fa      	movs	r0, #250	; 0xfa
 80054ce:	f000 f835 	bl	800553c <FreqO_ApplyPreset>
			break;
 80054d2:	e02a      	b.n	800552a <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 20:
		case 21:
		case 22:
		case 23:
			FreqO_ApplyPreset(FPRESET_500HZ);
 80054d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80054d8:	f000 f830 	bl	800553c <FreqO_ApplyPreset>
			break;
 80054dc:	e025      	b.n	800552a <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 24:
		case 25:
		case 26:
		case 27:
			FreqO_ApplyPreset(FPRESET_750HZ);
 80054de:	f240 20ee 	movw	r0, #750	; 0x2ee
 80054e2:	f000 f82b 	bl	800553c <FreqO_ApplyPreset>
			break;
 80054e6:	e020      	b.n	800552a <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 28:
		case 29:
		case 30:
		case 32:
			FreqO_ApplyPreset(FPRESET_1KHZ);
 80054e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80054ec:	f000 f826 	bl	800553c <FreqO_ApplyPreset>
			break;
 80054f0:	e01b      	b.n	800552a <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 33:
		case 34:
		case 35:
		case 36:
			FreqO_ApplyPreset(FPRESET_5KHZ);
 80054f2:	f241 3088 	movw	r0, #5000	; 0x1388
 80054f6:	f000 f821 	bl	800553c <FreqO_ApplyPreset>
			break;
 80054fa:	e016      	b.n	800552a <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 37:
		case 38:
		case 39:
		case 40:
			FreqO_ApplyPreset(FPRESET_10KHZ);
 80054fc:	f242 7010 	movw	r0, #10000	; 0x2710
 8005500:	f000 f81c 	bl	800553c <FreqO_ApplyPreset>
			break;
 8005504:	e011      	b.n	800552a <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 41:
		case 42:
		case 43:
		case 44:
			FreqO_ApplyPreset(FPRESET_25KHZ);
 8005506:	f246 10a8 	movw	r0, #25000	; 0x61a8
 800550a:	f000 f817 	bl	800553c <FreqO_ApplyPreset>
			break;
 800550e:	e00c      	b.n	800552a <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 45:
		case 46:
		case 47:
		case 48:
			FreqO_ApplyPreset(FPRESET_50KHZ);
 8005510:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005514:	f000 f812 	bl	800553c <FreqO_ApplyPreset>
			break;
 8005518:	e007      	b.n	800552a <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 49:
		case 50:
		case 51:
		case 52:
			FreqO_ApplyPreset(FPRESET_75KHZ);
 800551a:	4806      	ldr	r0, [pc, #24]	; (8005534 <FreqO_MapEncoderPositionToBothOutput+0x184>)
 800551c:	f000 f80e 	bl	800553c <FreqO_ApplyPreset>
			break;
 8005520:	e003      	b.n	800552a <FreqO_MapEncoderPositionToBothOutput+0x17a>
		case 53:
		case 54:
		case 55:
		case 56:
			FreqO_ApplyPreset(FPRESET_100KHZ);
 8005522:	4805      	ldr	r0, [pc, #20]	; (8005538 <FreqO_MapEncoderPositionToBothOutput+0x188>)
 8005524:	f000 f80a 	bl	800553c <FreqO_ApplyPreset>
			break;
 8005528:	bf00      	nop
		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = FPRESET_100KHZ;
		FreqO_ApplyPreset_Fast(_FindFPresetObjectByIndex(tmpFreqIndex));
	}
	freq_last_encoder_value = pEncValue;
	*/
}
 800552a:	bf00      	nop
 800552c:	3708      	adds	r7, #8
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	000124f8 	.word	0x000124f8
 8005538:	000186a0 	.word	0x000186a0

0800553c <FreqO_ApplyPreset>:

 *	@retval None
 *
 */
void FreqO_ApplyPreset(eFreqSettings_t pPresetEnum)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
	DacTimeReg_t* tmpDT = DT_GetRegisterByEnum(pPresetEnum);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f7ff fecf 	bl	80052e8 <DT_GetRegisterByEnum>
 800554a:	6178      	str	r0, [r7, #20]
	if(tmpDT)
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d02e      	beq.n	80055b0 <FreqO_ApplyPreset+0x74>
	{
		OUTPUT_TIMER->PSC = tmpDT->psc;
 8005552:	4a19      	ldr	r2, [pc, #100]	; (80055b8 <FreqO_ApplyPreset+0x7c>)
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	6293      	str	r3, [r2, #40]	; 0x28
		OUTPUT_TIMER->ARR = tmpDT->arr;
 800555a:	4a17      	ldr	r2, [pc, #92]	; (80055b8 <FreqO_ApplyPreset+0x7c>)
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	62d3      	str	r3, [r2, #44]	; 0x2c

		eOutput_mode tmpOut = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 8005562:	2000      	movs	r0, #0
 8005564:	f000 fcde 	bl	8005f24 <SM_GetOutputChannel>
 8005568:	4603      	mov	r3, r0
 800556a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	74fb      	strb	r3, [r7, #19]
		if(tmpOut == PWM_FUNC_MODE)
 8005572:	7cfb      	ldrb	r3, [r7, #19]
 8005574:	2b06      	cmp	r3, #6
 8005576:	d10d      	bne.n	8005594 <FreqO_ApplyPreset+0x58>
		{
			// duty cycle of PWM require slower settings to get the
			// same frequency as normal output functions
			TIM3->PSC = 256;
 8005578:	4b10      	ldr	r3, [pc, #64]	; (80055bc <FreqO_ApplyPreset+0x80>)
 800557a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800557e:	629a      	str	r2, [r3, #40]	; 0x28
			TIM3->ARR = tmpDT->arr/2;
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	4a0d      	ldr	r2, [pc, #52]	; (80055bc <FreqO_ApplyPreset+0x80>)
 8005586:	085b      	lsrs	r3, r3, #1
 8005588:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM3->CCR2 = TIM3->ARR/2;
 800558a:	4b0c      	ldr	r3, [pc, #48]	; (80055bc <FreqO_ApplyPreset+0x80>)
 800558c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558e:	4a0b      	ldr	r2, [pc, #44]	; (80055bc <FreqO_ApplyPreset+0x80>)
 8005590:	085b      	lsrs	r3, r3, #1
 8005592:	6393      	str	r3, [r2, #56]	; 0x38
		}

		//eNewFreqPreset = pPresetEnum;
		FreqProfile_t * tmpFreq = FreqO_FindFPresetObject(pPresetEnum);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 f823 	bl	80055e0 <FreqO_FindFPresetObject>
 800559a:	60f8      	str	r0, [r7, #12]
		if(tmpFreq)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d003      	beq.n	80055aa <FreqO_ApplyPreset+0x6e>
		{
			freq_profile = tmpFreq;
 80055a2:	4a07      	ldr	r2, [pc, #28]	; (80055c0 <FreqO_ApplyPreset+0x84>)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6013      	str	r3, [r2, #0]
		}



	}
}
 80055a8:	e002      	b.n	80055b0 <FreqO_ApplyPreset+0x74>
			DM_SetErrorDebugMsg("FreqO_ApplyPreset() null pointer error");
 80055aa:	4806      	ldr	r0, [pc, #24]	; (80055c4 <FreqO_ApplyPreset+0x88>)
 80055ac:	f7fb ffaa 	bl	8001504 <DM_SetErrorDebugMsg>
}
 80055b0:	bf00      	nop
 80055b2:	3718      	adds	r7, #24
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	40013400 	.word	0x40013400
 80055bc:	40000400 	.word	0x40000400
 80055c0:	20000198 	.word	0x20000198
 80055c4:	08013d64 	.word	0x08013d64

080055c8 <FreqO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_GetFPresetObject()
{
 80055c8:	b480      	push	{r7}
 80055ca:	af00      	add	r7, sp, #0
	return freq_profile;
 80055cc:	4b03      	ldr	r3, [pc, #12]	; (80055dc <FreqO_GetFPresetObject+0x14>)
 80055ce:	681b      	ldr	r3, [r3, #0]
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	20000198 	.word	0x20000198

080055e0 <FreqO_FindFPresetObject>:

 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_FindFPresetObject(eFreqSettings_t pEnum)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 80055e8:	2300      	movs	r3, #0
 80055ea:	60fb      	str	r3, [r7, #12]
 80055ec:	e00e      	b.n	800560c <FreqO_FindFPresetObject+0x2c>
	{
		if(theFreqProfiles[i].hertz == pEnum)
 80055ee:	4a0d      	ldr	r2, [pc, #52]	; (8005624 <FreqO_FindFPresetObject+0x44>)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d104      	bne.n	8005606 <FreqO_FindFPresetObject+0x26>
		{
			return &theFreqProfiles[i];
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	00db      	lsls	r3, r3, #3
 8005600:	4a08      	ldr	r2, [pc, #32]	; (8005624 <FreqO_FindFPresetObject+0x44>)
 8005602:	4413      	add	r3, r2
 8005604:	e009      	b.n	800561a <FreqO_FindFPresetObject+0x3a>
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	3301      	adds	r3, #1
 800560a:	60fb      	str	r3, [r7, #12]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2b0d      	cmp	r3, #13
 8005610:	dded      	ble.n	80055ee <FreqO_FindFPresetObject+0xe>
		}
	}
	// error!
	DM_SetErrorDebugMsg("FreqO_FindFPresetObject(): no FPreset obj found");
 8005612:	4805      	ldr	r0, [pc, #20]	; (8005628 <FreqO_FindFPresetObject+0x48>)
 8005614:	f7fb ff76 	bl	8001504 <DM_SetErrorDebugMsg>
	return 0;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	20000128 	.word	0x20000128
 8005628:	08013d8c 	.word	0x08013d8c

0800562c <FreqO_GetFreqPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FreqO_GetFreqPresetEncoderRange()
{
 800562c:	b480      	push	{r7}
 800562e:	af00      	add	r7, sp, #0
	return FreqPresetEncoderRange;
 8005630:	4b03      	ldr	r3, [pc, #12]	; (8005640 <FreqO_GetFreqPresetEncoderRange+0x14>)
 8005632:	781b      	ldrb	r3, [r3, #0]
}
 8005634:	4618      	mov	r0, r3
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	20000124 	.word	0x20000124

08005644 <FuncO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void FuncO_ResetLastEncoderValue()
{
 8005644:	b480      	push	{r7}
 8005646:	af00      	add	r7, sp, #0
	func_last_encoder_value = 0;
 8005648:	4b03      	ldr	r3, [pc, #12]	; (8005658 <FuncO_ResetLastEncoderValue+0x14>)
 800564a:	2200      	movs	r2, #0
 800564c:	801a      	strh	r2, [r3, #0]
}
 800564e:	bf00      	nop
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr
 8005658:	20001f0a 	.word	0x20001f0a

0800565c <FuncO_MapEncoderPositionToSignalOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	4603      	mov	r3, r0
 8005664:	80fb      	strh	r3, [r7, #6]
	eOutput_mode tmpFunc = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 8005666:	2000      	movs	r0, #0
 8005668:	f000 fc5c 	bl	8005f24 <SM_GetOutputChannel>
 800566c:	4603      	mov	r3, r0
 800566e:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > func_last_encoder_value)
 8005676:	4b15      	ldr	r3, [pc, #84]	; (80056cc <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005678:	881b      	ldrh	r3, [r3, #0]
 800567a:	88fa      	ldrh	r2, [r7, #6]
 800567c:	429a      	cmp	r2, r3
 800567e:	d90c      	bls.n	800569a <FuncO_MapEncoderPositionToSignalOutput+0x3e>
	{
		tmpFunc++;
 8005680:	7bfb      	ldrb	r3, [r7, #15]
 8005682:	3301      	adds	r3, #1
 8005684:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = PWM_FUNC_MODE;
 8005686:	7bfb      	ldrb	r3, [r7, #15]
 8005688:	2b06      	cmp	r3, #6
 800568a:	d901      	bls.n	8005690 <FuncO_MapEncoderPositionToSignalOutput+0x34>
 800568c:	2306      	movs	r3, #6
 800568e:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyPresetToSignal(tmpFunc);
 8005690:	7bfb      	ldrb	r3, [r7, #15]
 8005692:	4618      	mov	r0, r3
 8005694:	f000 f856 	bl	8005744 <FuncO_ApplyPresetToSignal>
 8005698:	e010      	b.n	80056bc <FuncO_MapEncoderPositionToSignalOutput+0x60>
	}
	else if (pEncoderValue < func_last_encoder_value)
 800569a:	4b0c      	ldr	r3, [pc, #48]	; (80056cc <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 800569c:	881b      	ldrh	r3, [r3, #0]
 800569e:	88fa      	ldrh	r2, [r7, #6]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d20b      	bcs.n	80056bc <FuncO_MapEncoderPositionToSignalOutput+0x60>
	{
		tmpFunc--;
 80056a4:	7bfb      	ldrb	r3, [r7, #15]
 80056a6:	3b01      	subs	r3, #1
 80056a8:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = SINE_FUNC_MODE;
 80056aa:	7bfb      	ldrb	r3, [r7, #15]
 80056ac:	2b06      	cmp	r3, #6
 80056ae:	d901      	bls.n	80056b4 <FuncO_MapEncoderPositionToSignalOutput+0x58>
 80056b0:	2300      	movs	r3, #0
 80056b2:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyPresetToSignal(tmpFunc);
 80056b4:	7bfb      	ldrb	r3, [r7, #15]
 80056b6:	4618      	mov	r0, r3
 80056b8:	f000 f844 	bl	8005744 <FuncO_ApplyPresetToSignal>
	}
	func_last_encoder_value = pEncoderValue;
 80056bc:	4a03      	ldr	r2, [pc, #12]	; (80056cc <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 80056be:	88fb      	ldrh	r3, [r7, #6]
 80056c0:	8013      	strh	r3, [r2, #0]
}
 80056c2:	bf00      	nop
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	20001f0a 	.word	0x20001f0a

080056d0 <FuncO_MapEncoderPositionToSyncOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_MapEncoderPositionToSyncOutput(uint16_t pEncoderValue)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	4603      	mov	r3, r0
 80056d8:	80fb      	strh	r3, [r7, #6]
	eOutput_mode tmpFunc = SM_GetOutputChannel(SYNC_CHANNEL)->func_profile->func;
 80056da:	2001      	movs	r0, #1
 80056dc:	f000 fc22 	bl	8005f24 <SM_GetOutputChannel>
 80056e0:	4603      	mov	r3, r0
 80056e2:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > func_last_encoder_value)
 80056ea:	4b15      	ldr	r3, [pc, #84]	; (8005740 <FuncO_MapEncoderPositionToSyncOutput+0x70>)
 80056ec:	881b      	ldrh	r3, [r3, #0]
 80056ee:	88fa      	ldrh	r2, [r7, #6]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d90c      	bls.n	800570e <FuncO_MapEncoderPositionToSyncOutput+0x3e>
	{
		tmpFunc++;
 80056f4:	7bfb      	ldrb	r3, [r7, #15]
 80056f6:	3301      	adds	r3, #1
 80056f8:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = PWM_FUNC_MODE;
 80056fa:	7bfb      	ldrb	r3, [r7, #15]
 80056fc:	2b06      	cmp	r3, #6
 80056fe:	d901      	bls.n	8005704 <FuncO_MapEncoderPositionToSyncOutput+0x34>
 8005700:	2306      	movs	r3, #6
 8005702:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyPresetToSync(tmpFunc);
 8005704:	7bfb      	ldrb	r3, [r7, #15]
 8005706:	4618      	mov	r0, r3
 8005708:	f000 f8f4 	bl	80058f4 <FuncO_ApplyPresetToSync>
 800570c:	e010      	b.n	8005730 <FuncO_MapEncoderPositionToSyncOutput+0x60>
	}
	else if (pEncoderValue < func_last_encoder_value)
 800570e:	4b0c      	ldr	r3, [pc, #48]	; (8005740 <FuncO_MapEncoderPositionToSyncOutput+0x70>)
 8005710:	881b      	ldrh	r3, [r3, #0]
 8005712:	88fa      	ldrh	r2, [r7, #6]
 8005714:	429a      	cmp	r2, r3
 8005716:	d20b      	bcs.n	8005730 <FuncO_MapEncoderPositionToSyncOutput+0x60>
	{
		tmpFunc--;
 8005718:	7bfb      	ldrb	r3, [r7, #15]
 800571a:	3b01      	subs	r3, #1
 800571c:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = SINE_FUNC_MODE;
 800571e:	7bfb      	ldrb	r3, [r7, #15]
 8005720:	2b06      	cmp	r3, #6
 8005722:	d901      	bls.n	8005728 <FuncO_MapEncoderPositionToSyncOutput+0x58>
 8005724:	2300      	movs	r3, #0
 8005726:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyPresetToSync(tmpFunc);
 8005728:	7bfb      	ldrb	r3, [r7, #15]
 800572a:	4618      	mov	r0, r3
 800572c:	f000 f8e2 	bl	80058f4 <FuncO_ApplyPresetToSync>
	}
	func_last_encoder_value = pEncoderValue;
 8005730:	4a03      	ldr	r2, [pc, #12]	; (8005740 <FuncO_MapEncoderPositionToSyncOutput+0x70>)
 8005732:	88fb      	ldrh	r3, [r7, #6]
 8005734:	8013      	strh	r3, [r2, #0]
}
 8005736:	bf00      	nop
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	20001f0a 	.word	0x20001f0a

08005744 <FuncO_ApplyPresetToSignal>:

 *	@retval None
 *
 */
void FuncO_ApplyPresetToSignal(eOutput_mode pPresetEnum)
{
 8005744:	b590      	push	{r4, r7, lr}
 8005746:	b087      	sub	sp, #28
 8005748:	af02      	add	r7, sp, #8
 800574a:	4603      	mov	r3, r0
 800574c:	71fb      	strb	r3, [r7, #7]
	// set the next function output
	SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 800574e:	79fc      	ldrb	r4, [r7, #7]
 8005750:	2000      	movs	r0, #0
 8005752:	f000 fbe7 	bl	8005f24 <SM_GetOutputChannel>
 8005756:	4601      	mov	r1, r0
 8005758:	00e3      	lsls	r3, r4, #3
 800575a:	4a61      	ldr	r2, [pc, #388]	; (80058e0 <FuncO_ApplyPresetToSignal+0x19c>)
 800575c:	4413      	add	r3, r2
 800575e:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8

	if(pPresetEnum == PWM_FUNC_MODE)
 8005762:	79fb      	ldrb	r3, [r7, #7]
 8005764:	2b06      	cmp	r3, #6
 8005766:	d122      	bne.n	80057ae <FuncO_ApplyPresetToSignal+0x6a>
	{
		// set preset for PGA gain and dsp amplitude adjustment
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 8005768:	2000      	movs	r0, #0
 800576a:	f000 fbdb 	bl	8005f24 <SM_GetOutputChannel>
 800576e:	4603      	mov	r3, r0
 8005770:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	737b      	strb	r3, [r7, #13]
		VPP_ApplyProfileToSignal(eTmpVppPreset);
 8005778:	7b7b      	ldrb	r3, [r7, #13]
 800577a:	4618      	mov	r0, r3
 800577c:	f000 fe2c 	bl	80063d8 <VPP_ApplyProfileToSignal>


		// switch output signal from DAC to PWM
		SM_DisableDacToSignal();
 8005780:	f000 fd66 	bl	8006250 <SM_DisableDacToSignal>
		SM_EnablePwmToSignal();
 8005784:	f000 fbe4 	bl	8005f50 <SM_EnablePwmToSignal>

		GO_ApplyPresetToSignal(ONE_GAIN);
 8005788:	2001      	movs	r0, #1
 800578a:	f000 f969 	bl	8005a60 <GO_ApplyPresetToSignal>

		// artifically offset PWM signal above DC
		eGainSettings_t temp_gain = SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile->gain;
 800578e:	2000      	movs	r0, #0
 8005790:	f000 fbc8 	bl	8005f24 <SM_GetOutputChannel>
 8005794:	4603      	mov	r3, r0
 8005796:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	733b      	strb	r3, [r7, #12]
		BO_SetPwmSignalOffsetForGain(temp_gain);
 800579e:	7b3b      	ldrb	r3, [r7, #12]
 80057a0:	4618      	mov	r0, r3
 80057a2:	f7ff fcdb 	bl	800515c <BO_SetPwmSignalOffsetForGain>

		last_output_mode_was_pwm = 1;
 80057a6:	4b4f      	ldr	r3, [pc, #316]	; (80058e4 <FuncO_ApplyPresetToSignal+0x1a0>)
 80057a8:	2201      	movs	r2, #1
 80057aa:	701a      	strb	r2, [r3, #0]
		//HAL_TIM_Base_Start(&htim8);
		OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);

	}

}
 80057ac:	e093      	b.n	80058d6 <FuncO_ApplyPresetToSignal+0x192>
	else if(last_output_mode_was_pwm)
 80057ae:	4b4d      	ldr	r3, [pc, #308]	; (80058e4 <FuncO_ApplyPresetToSignal+0x1a0>)
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d04b      	beq.n	800584e <FuncO_ApplyPresetToSignal+0x10a>
		SM_DisablePwmToSignal();
 80057b6:	f000 fc8b 	bl	80060d0 <SM_DisablePwmToSignal>
		SM_EnableDacToSignal();
 80057ba:	f000 fc99 	bl	80060f0 <SM_EnableDacToSignal>
		SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 80057be:	79fc      	ldrb	r4, [r7, #7]
 80057c0:	2000      	movs	r0, #0
 80057c2:	f000 fbaf 	bl	8005f24 <SM_GetOutputChannel>
 80057c6:	4601      	mov	r1, r0
 80057c8:	4a45      	ldr	r2, [pc, #276]	; (80058e0 <FuncO_ApplyPresetToSignal+0x19c>)
 80057ca:	00e3      	lsls	r3, r4, #3
 80057cc:	4413      	add	r3, r2
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	604b      	str	r3, [r1, #4]
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 80057d2:	2000      	movs	r0, #0
 80057d4:	f000 fba6 	bl	8005f24 <SM_GetOutputChannel>
 80057d8:	4603      	mov	r3, r0
 80057da:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	73bb      	strb	r3, [r7, #14]
		VPP_ApplyProfileToSignal(eTmpVppPreset);
 80057e2:	7bbb      	ldrb	r3, [r7, #14]
 80057e4:	4618      	mov	r0, r3
 80057e6:	f000 fdf7 	bl	80063d8 <VPP_ApplyProfileToSignal>
		OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 80057ea:	4b3f      	ldr	r3, [pc, #252]	; (80058e8 <FuncO_ApplyPresetToSignal+0x1a4>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a3e      	ldr	r2, [pc, #248]	; (80058e8 <FuncO_ApplyPresetToSignal+0x1a4>)
 80057f0:	f023 0301 	bic.w	r3, r3, #1
 80057f4:	6013      	str	r3, [r2, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80057f6:	2100      	movs	r1, #0
 80057f8:	483c      	ldr	r0, [pc, #240]	; (80058ec <FuncO_ApplyPresetToSignal+0x1a8>)
 80057fa:	f004 fa97 	bl	8009d2c <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80057fe:	2000      	movs	r0, #0
 8005800:	f000 fb90 	bl	8005f24 <SM_GetOutputChannel>
 8005804:	4603      	mov	r3, r0
 8005806:	f103 0208 	add.w	r2, r3, #8
 800580a:	2300      	movs	r3, #0
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	2378      	movs	r3, #120	; 0x78
 8005810:	2100      	movs	r1, #0
 8005812:	4836      	ldr	r0, [pc, #216]	; (80058ec <FuncO_ApplyPresetToSignal+0x1a8>)
 8005814:	f004 f9c8 	bl	8009ba8 <HAL_DAC_Start_DMA>
		HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8005818:	2100      	movs	r1, #0
 800581a:	4835      	ldr	r0, [pc, #212]	; (80058f0 <FuncO_ApplyPresetToSignal+0x1ac>)
 800581c:	f004 fa86 	bl	8009d2c <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005820:	2001      	movs	r0, #1
 8005822:	f000 fb7f 	bl	8005f24 <SM_GetOutputChannel>
 8005826:	4603      	mov	r3, r0
 8005828:	f103 0208 	add.w	r2, r3, #8
 800582c:	2300      	movs	r3, #0
 800582e:	9300      	str	r3, [sp, #0]
 8005830:	2378      	movs	r3, #120	; 0x78
 8005832:	2100      	movs	r1, #0
 8005834:	482e      	ldr	r0, [pc, #184]	; (80058f0 <FuncO_ApplyPresetToSignal+0x1ac>)
 8005836:	f004 f9b7 	bl	8009ba8 <HAL_DAC_Start_DMA>
		OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 800583a:	4b2b      	ldr	r3, [pc, #172]	; (80058e8 <FuncO_ApplyPresetToSignal+0x1a4>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a2a      	ldr	r2, [pc, #168]	; (80058e8 <FuncO_ApplyPresetToSignal+0x1a4>)
 8005840:	f043 0301 	orr.w	r3, r3, #1
 8005844:	6013      	str	r3, [r2, #0]
		last_output_mode_was_pwm = 0;
 8005846:	4b27      	ldr	r3, [pc, #156]	; (80058e4 <FuncO_ApplyPresetToSignal+0x1a0>)
 8005848:	2200      	movs	r2, #0
 800584a:	701a      	strb	r2, [r3, #0]
}
 800584c:	e043      	b.n	80058d6 <FuncO_ApplyPresetToSignal+0x192>
		SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 800584e:	79fc      	ldrb	r4, [r7, #7]
 8005850:	2000      	movs	r0, #0
 8005852:	f000 fb67 	bl	8005f24 <SM_GetOutputChannel>
 8005856:	4601      	mov	r1, r0
 8005858:	4a21      	ldr	r2, [pc, #132]	; (80058e0 <FuncO_ApplyPresetToSignal+0x19c>)
 800585a:	00e3      	lsls	r3, r4, #3
 800585c:	4413      	add	r3, r2
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	604b      	str	r3, [r1, #4]
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 8005862:	2000      	movs	r0, #0
 8005864:	f000 fb5e 	bl	8005f24 <SM_GetOutputChannel>
 8005868:	4603      	mov	r3, r0
 800586a:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(eTmpVppPreset);
 8005872:	7bfb      	ldrb	r3, [r7, #15]
 8005874:	4618      	mov	r0, r3
 8005876:	f000 fdaf 	bl	80063d8 <VPP_ApplyProfileToSignal>
		OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 800587a:	4b1b      	ldr	r3, [pc, #108]	; (80058e8 <FuncO_ApplyPresetToSignal+0x1a4>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a1a      	ldr	r2, [pc, #104]	; (80058e8 <FuncO_ApplyPresetToSignal+0x1a4>)
 8005880:	f023 0301 	bic.w	r3, r3, #1
 8005884:	6013      	str	r3, [r2, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8005886:	2100      	movs	r1, #0
 8005888:	4818      	ldr	r0, [pc, #96]	; (80058ec <FuncO_ApplyPresetToSignal+0x1a8>)
 800588a:	f004 fa4f 	bl	8009d2c <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 800588e:	2000      	movs	r0, #0
 8005890:	f000 fb48 	bl	8005f24 <SM_GetOutputChannel>
 8005894:	4603      	mov	r3, r0
 8005896:	f103 0208 	add.w	r2, r3, #8
 800589a:	2300      	movs	r3, #0
 800589c:	9300      	str	r3, [sp, #0]
 800589e:	2378      	movs	r3, #120	; 0x78
 80058a0:	2100      	movs	r1, #0
 80058a2:	4812      	ldr	r0, [pc, #72]	; (80058ec <FuncO_ApplyPresetToSignal+0x1a8>)
 80058a4:	f004 f980 	bl	8009ba8 <HAL_DAC_Start_DMA>
		HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 80058a8:	2100      	movs	r1, #0
 80058aa:	4811      	ldr	r0, [pc, #68]	; (80058f0 <FuncO_ApplyPresetToSignal+0x1ac>)
 80058ac:	f004 fa3e 	bl	8009d2c <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80058b0:	2001      	movs	r0, #1
 80058b2:	f000 fb37 	bl	8005f24 <SM_GetOutputChannel>
 80058b6:	4603      	mov	r3, r0
 80058b8:	f103 0208 	add.w	r2, r3, #8
 80058bc:	2300      	movs	r3, #0
 80058be:	9300      	str	r3, [sp, #0]
 80058c0:	2378      	movs	r3, #120	; 0x78
 80058c2:	2100      	movs	r1, #0
 80058c4:	480a      	ldr	r0, [pc, #40]	; (80058f0 <FuncO_ApplyPresetToSignal+0x1ac>)
 80058c6:	f004 f96f 	bl	8009ba8 <HAL_DAC_Start_DMA>
		OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 80058ca:	4b07      	ldr	r3, [pc, #28]	; (80058e8 <FuncO_ApplyPresetToSignal+0x1a4>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a06      	ldr	r2, [pc, #24]	; (80058e8 <FuncO_ApplyPresetToSignal+0x1a4>)
 80058d0:	f043 0301 	orr.w	r3, r3, #1
 80058d4:	6013      	str	r3, [r2, #0]
}
 80058d6:	bf00      	nop
 80058d8:	3714      	adds	r7, #20
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd90      	pop	{r4, r7, pc}
 80058de:	bf00      	nop
 80058e0:	200001a0 	.word	0x200001a0
 80058e4:	20001f08 	.word	0x20001f08
 80058e8:	40013400 	.word	0x40013400
 80058ec:	200026ac 	.word	0x200026ac
 80058f0:	20002698 	.word	0x20002698

080058f4 <FuncO_ApplyPresetToSync>:

 *	@retval None
 *
 */
void FuncO_ApplyPresetToSync(eOutput_mode pPresetEnum)
{
 80058f4:	b590      	push	{r4, r7, lr}
 80058f6:	b087      	sub	sp, #28
 80058f8:	af02      	add	r7, sp, #8
 80058fa:	4603      	mov	r3, r0
 80058fc:	71fb      	strb	r3, [r7, #7]
	// set the next output function
	SM_GetOutputChannel(SYNC_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 80058fe:	79fc      	ldrb	r4, [r7, #7]
 8005900:	2001      	movs	r0, #1
 8005902:	f000 fb0f 	bl	8005f24 <SM_GetOutputChannel>
 8005906:	4601      	mov	r1, r0
 8005908:	00e3      	lsls	r3, r4, #3
 800590a:	4a26      	ldr	r2, [pc, #152]	; (80059a4 <FuncO_ApplyPresetToSync+0xb0>)
 800590c:	4413      	add	r3, r2
 800590e:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8


	// copy the lookup table for the next output function in to SyncChannel object
	SM_GetOutputChannel(SYNC_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8005912:	79fc      	ldrb	r4, [r7, #7]
 8005914:	2001      	movs	r0, #1
 8005916:	f000 fb05 	bl	8005f24 <SM_GetOutputChannel>
 800591a:	4601      	mov	r1, r0
 800591c:	4a21      	ldr	r2, [pc, #132]	; (80059a4 <FuncO_ApplyPresetToSync+0xb0>)
 800591e:	00e3      	lsls	r3, r4, #3
 8005920:	4413      	add	r3, r2
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	604b      	str	r3, [r1, #4]

	// set preset PGA gain and dsp amplitude adjustment
	eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile->amp_setting;
 8005926:	2001      	movs	r0, #1
 8005928:	f000 fafc 	bl	8005f24 <SM_GetOutputChannel>
 800592c:	4603      	mov	r3, r0
 800592e:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	73fb      	strb	r3, [r7, #15]
	VPP_ApplyProfileToSync(eTmpVppPreset);
 8005936:	7bfb      	ldrb	r3, [r7, #15]
 8005938:	4618      	mov	r0, r3
 800593a:	f000 fd7b 	bl	8006434 <VPP_ApplyProfileToSync>

	// pause timer to resync both outputs
	//HAL_TIM_Base_Stop(&htim8);
	OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 800593e:	4b1a      	ldr	r3, [pc, #104]	; (80059a8 <FuncO_ApplyPresetToSync+0xb4>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a19      	ldr	r2, [pc, #100]	; (80059a8 <FuncO_ApplyPresetToSync+0xb4>)
 8005944:	f023 0301 	bic.w	r3, r3, #1
 8005948:	6013      	str	r3, [r2, #0]

	// restart the DAC with the new data
	HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 800594a:	2100      	movs	r1, #0
 800594c:	4817      	ldr	r0, [pc, #92]	; (80059ac <FuncO_ApplyPresetToSync+0xb8>)
 800594e:	f004 f9ed 	bl	8009d2c <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005952:	2001      	movs	r0, #1
 8005954:	f000 fae6 	bl	8005f24 <SM_GetOutputChannel>
 8005958:	4603      	mov	r3, r0
 800595a:	f103 0208 	add.w	r2, r3, #8
 800595e:	2300      	movs	r3, #0
 8005960:	9300      	str	r3, [sp, #0]
 8005962:	2378      	movs	r3, #120	; 0x78
 8005964:	2100      	movs	r1, #0
 8005966:	4811      	ldr	r0, [pc, #68]	; (80059ac <FuncO_ApplyPresetToSync+0xb8>)
 8005968:	f004 f91e 	bl	8009ba8 <HAL_DAC_Start_DMA>

	// restart the the other DAC
	HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800596c:	2100      	movs	r1, #0
 800596e:	4810      	ldr	r0, [pc, #64]	; (80059b0 <FuncO_ApplyPresetToSync+0xbc>)
 8005970:	f004 f9dc 	bl	8009d2c <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005974:	2000      	movs	r0, #0
 8005976:	f000 fad5 	bl	8005f24 <SM_GetOutputChannel>
 800597a:	4603      	mov	r3, r0
 800597c:	f103 0208 	add.w	r2, r3, #8
 8005980:	2300      	movs	r3, #0
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	2378      	movs	r3, #120	; 0x78
 8005986:	2100      	movs	r1, #0
 8005988:	4809      	ldr	r0, [pc, #36]	; (80059b0 <FuncO_ApplyPresetToSync+0xbc>)
 800598a:	f004 f90d 	bl	8009ba8 <HAL_DAC_Start_DMA>

	// resume timer to resync both outputs
	//HAL_TIM_Base_Start(&htim8);
	OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 800598e:	4b06      	ldr	r3, [pc, #24]	; (80059a8 <FuncO_ApplyPresetToSync+0xb4>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a05      	ldr	r2, [pc, #20]	; (80059a8 <FuncO_ApplyPresetToSync+0xb4>)
 8005994:	f043 0301 	orr.w	r3, r3, #1
 8005998:	6013      	str	r3, [r2, #0]
}
 800599a:	bf00      	nop
 800599c:	3714      	adds	r7, #20
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd90      	pop	{r4, r7, pc}
 80059a2:	bf00      	nop
 80059a4:	200001a0 	.word	0x200001a0
 80059a8:	40013400 	.word	0x40013400
 80059ac:	20002698 	.word	0x20002698
 80059b0:	200026ac 	.word	0x200026ac

080059b4 <FuncO_GetFuncPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FuncO_GetFuncPresetEncoderRange()
{
 80059b4:	b480      	push	{r7}
 80059b6:	af00      	add	r7, sp, #0
	return FuncPresetEncoderRange;
 80059b8:	4b03      	ldr	r3, [pc, #12]	; (80059c8 <FuncO_GetFuncPresetEncoderRange+0x14>)
 80059ba:	781b      	ldrb	r3, [r3, #0]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	2000019c 	.word	0x2000019c

080059cc <GO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void GO_ResetLastEncoderValue()
{
 80059cc:	b480      	push	{r7}
 80059ce:	af00      	add	r7, sp, #0
	gain_last_encoder_value = 0;
 80059d0:	4b03      	ldr	r3, [pc, #12]	; (80059e0 <GO_ResetLastEncoderValue+0x14>)
 80059d2:	2200      	movs	r2, #0
 80059d4:	801a      	strh	r2, [r3, #0]
}
 80059d6:	bf00      	nop
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	20001f0c 	.word	0x20001f0c

080059e4 <GO_MapEncoderPositionToSignalOutput>:
 *	@param None
 *	@retval None
 *
 */
void GO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	4603      	mov	r3, r0
 80059ec:	80fb      	strh	r3, [r7, #6]
	eGainSettings_t temp_gain = SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile->gain;
 80059ee:	2000      	movs	r0, #0
 80059f0:	f000 fa98 	bl	8005f24 <SM_GetOutputChannel>
 80059f4:	4603      	mov	r3, r0
 80059f6:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > gain_last_encoder_value)
 80059fe:	4b17      	ldr	r3, [pc, #92]	; (8005a5c <GO_MapEncoderPositionToSignalOutput+0x78>)
 8005a00:	881b      	ldrh	r3, [r3, #0]
 8005a02:	88fa      	ldrh	r2, [r7, #6]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d90c      	bls.n	8005a22 <GO_MapEncoderPositionToSignalOutput+0x3e>
	{
		temp_gain++;
 8005a08:	7bfb      	ldrb	r3, [r7, #15]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	73fb      	strb	r3, [r7, #15]
		if(temp_gain > MAX_NUM_GAIN_PRESETS-1) temp_gain = SEVEN_GAIN;
 8005a0e:	7bfb      	ldrb	r3, [r7, #15]
 8005a10:	2b07      	cmp	r3, #7
 8005a12:	d901      	bls.n	8005a18 <GO_MapEncoderPositionToSignalOutput+0x34>
 8005a14:	2307      	movs	r3, #7
 8005a16:	73fb      	strb	r3, [r7, #15]
		GO_ApplyPresetToSignal(temp_gain);
 8005a18:	7bfb      	ldrb	r3, [r7, #15]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f000 f820 	bl	8005a60 <GO_ApplyPresetToSignal>
 8005a20:	e010      	b.n	8005a44 <GO_MapEncoderPositionToSignalOutput+0x60>

	}
	else if (pEncoderValue < gain_last_encoder_value)
 8005a22:	4b0e      	ldr	r3, [pc, #56]	; (8005a5c <GO_MapEncoderPositionToSignalOutput+0x78>)
 8005a24:	881b      	ldrh	r3, [r3, #0]
 8005a26:	88fa      	ldrh	r2, [r7, #6]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d20b      	bcs.n	8005a44 <GO_MapEncoderPositionToSignalOutput+0x60>
	{
		temp_gain--;
 8005a2c:	7bfb      	ldrb	r3, [r7, #15]
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	73fb      	strb	r3, [r7, #15]
		if(temp_gain > MAX_NUM_GAIN_PRESETS-1) temp_gain = ZERO_GAIN;
 8005a32:	7bfb      	ldrb	r3, [r7, #15]
 8005a34:	2b07      	cmp	r3, #7
 8005a36:	d901      	bls.n	8005a3c <GO_MapEncoderPositionToSignalOutput+0x58>
 8005a38:	2300      	movs	r3, #0
 8005a3a:	73fb      	strb	r3, [r7, #15]
		GO_ApplyPresetToSignal(temp_gain);
 8005a3c:	7bfb      	ldrb	r3, [r7, #15]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f000 f80e 	bl	8005a60 <GO_ApplyPresetToSignal>
	}
	gain_last_encoder_value = pEncoderValue;
 8005a44:	4a05      	ldr	r2, [pc, #20]	; (8005a5c <GO_MapEncoderPositionToSignalOutput+0x78>)
 8005a46:	88fb      	ldrh	r3, [r7, #6]
 8005a48:	8013      	strh	r3, [r2, #0]

	// artifically offset PWM signal above DC
	BO_SetPwmSignalOffsetForGain(temp_gain);
 8005a4a:	7bfb      	ldrb	r3, [r7, #15]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7ff fb85 	bl	800515c <BO_SetPwmSignalOffsetForGain>

}
 8005a52:	bf00      	nop
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	20001f0c 	.word	0x20001f0c

08005a60 <GO_ApplyPresetToSignal>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSignal(eGainSettings_t pPresetEnum)
{
 8005a60:	b590      	push	{r4, r7, lr}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	4603      	mov	r3, r0
 8005a68:	71fb      	strb	r3, [r7, #7]




	SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 8005a6a:	79fc      	ldrb	r4, [r7, #7]
 8005a6c:	2000      	movs	r0, #0
 8005a6e:	f000 fa59 	bl	8005f24 <SM_GetOutputChannel>
 8005a72:	4601      	mov	r1, r0
 8005a74:	4623      	mov	r3, r4
 8005a76:	005b      	lsls	r3, r3, #1
 8005a78:	4423      	add	r3, r4
 8005a7a:	4a4f      	ldr	r2, [pc, #316]	; (8005bb8 <GO_ApplyPresetToSignal+0x158>)
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 8005a82:	79fb      	ldrb	r3, [r7, #7]
 8005a84:	2b07      	cmp	r3, #7
 8005a86:	f200 8093 	bhi.w	8005bb0 <GO_ApplyPresetToSignal+0x150>
 8005a8a:	a201      	add	r2, pc, #4	; (adr r2, 8005a90 <GO_ApplyPresetToSignal+0x30>)
 8005a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a90:	08005ab1 	.word	0x08005ab1
 8005a94:	08005ad1 	.word	0x08005ad1
 8005a98:	08005af1 	.word	0x08005af1
 8005a9c:	08005b11 	.word	0x08005b11
 8005aa0:	08005b31 	.word	0x08005b31
 8005aa4:	08005b51 	.word	0x08005b51
 8005aa8:	08005b71 	.word	0x08005b71
 8005aac:	08005b91 	.word	0x08005b91
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	2101      	movs	r1, #1
 8005ab4:	4841      	ldr	r0, [pc, #260]	; (8005bbc <GO_ApplyPresetToSignal+0x15c>)
 8005ab6:	f005 f951 	bl	800ad5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005aba:	2200      	movs	r2, #0
 8005abc:	2120      	movs	r1, #32
 8005abe:	4840      	ldr	r0, [pc, #256]	; (8005bc0 <GO_ApplyPresetToSignal+0x160>)
 8005ac0:	f005 f94c 	bl	800ad5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	2110      	movs	r1, #16
 8005ac8:	483d      	ldr	r0, [pc, #244]	; (8005bc0 <GO_ApplyPresetToSignal+0x160>)
 8005aca:	f005 f947 	bl	800ad5c <HAL_GPIO_WritePin>
			break;
 8005ace:	e06f      	b.n	8005bb0 <GO_ApplyPresetToSignal+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	2101      	movs	r1, #1
 8005ad4:	4839      	ldr	r0, [pc, #228]	; (8005bbc <GO_ApplyPresetToSignal+0x15c>)
 8005ad6:	f005 f941 	bl	800ad5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005ada:	2200      	movs	r2, #0
 8005adc:	2120      	movs	r1, #32
 8005ade:	4838      	ldr	r0, [pc, #224]	; (8005bc0 <GO_ApplyPresetToSignal+0x160>)
 8005ae0:	f005 f93c 	bl	800ad5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	2110      	movs	r1, #16
 8005ae8:	4835      	ldr	r0, [pc, #212]	; (8005bc0 <GO_ApplyPresetToSignal+0x160>)
 8005aea:	f005 f937 	bl	800ad5c <HAL_GPIO_WritePin>
			break;
 8005aee:	e05f      	b.n	8005bb0 <GO_ApplyPresetToSignal+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005af0:	2200      	movs	r2, #0
 8005af2:	2101      	movs	r1, #1
 8005af4:	4831      	ldr	r0, [pc, #196]	; (8005bbc <GO_ApplyPresetToSignal+0x15c>)
 8005af6:	f005 f931 	bl	800ad5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005afa:	2201      	movs	r2, #1
 8005afc:	2120      	movs	r1, #32
 8005afe:	4830      	ldr	r0, [pc, #192]	; (8005bc0 <GO_ApplyPresetToSignal+0x160>)
 8005b00:	f005 f92c 	bl	800ad5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005b04:	2200      	movs	r2, #0
 8005b06:	2110      	movs	r1, #16
 8005b08:	482d      	ldr	r0, [pc, #180]	; (8005bc0 <GO_ApplyPresetToSignal+0x160>)
 8005b0a:	f005 f927 	bl	800ad5c <HAL_GPIO_WritePin>
			break;
 8005b0e:	e04f      	b.n	8005bb0 <GO_ApplyPresetToSignal+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005b10:	2201      	movs	r2, #1
 8005b12:	2101      	movs	r1, #1
 8005b14:	4829      	ldr	r0, [pc, #164]	; (8005bbc <GO_ApplyPresetToSignal+0x15c>)
 8005b16:	f005 f921 	bl	800ad5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	2120      	movs	r1, #32
 8005b1e:	4828      	ldr	r0, [pc, #160]	; (8005bc0 <GO_ApplyPresetToSignal+0x160>)
 8005b20:	f005 f91c 	bl	800ad5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005b24:	2200      	movs	r2, #0
 8005b26:	2110      	movs	r1, #16
 8005b28:	4825      	ldr	r0, [pc, #148]	; (8005bc0 <GO_ApplyPresetToSignal+0x160>)
 8005b2a:	f005 f917 	bl	800ad5c <HAL_GPIO_WritePin>
			break;
 8005b2e:	e03f      	b.n	8005bb0 <GO_ApplyPresetToSignal+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005b30:	2200      	movs	r2, #0
 8005b32:	2101      	movs	r1, #1
 8005b34:	4821      	ldr	r0, [pc, #132]	; (8005bbc <GO_ApplyPresetToSignal+0x15c>)
 8005b36:	f005 f911 	bl	800ad5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	2120      	movs	r1, #32
 8005b3e:	4820      	ldr	r0, [pc, #128]	; (8005bc0 <GO_ApplyPresetToSignal+0x160>)
 8005b40:	f005 f90c 	bl	800ad5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005b44:	2201      	movs	r2, #1
 8005b46:	2110      	movs	r1, #16
 8005b48:	481d      	ldr	r0, [pc, #116]	; (8005bc0 <GO_ApplyPresetToSignal+0x160>)
 8005b4a:	f005 f907 	bl	800ad5c <HAL_GPIO_WritePin>
			break;
 8005b4e:	e02f      	b.n	8005bb0 <GO_ApplyPresetToSignal+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005b50:	2201      	movs	r2, #1
 8005b52:	2101      	movs	r1, #1
 8005b54:	4819      	ldr	r0, [pc, #100]	; (8005bbc <GO_ApplyPresetToSignal+0x15c>)
 8005b56:	f005 f901 	bl	800ad5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	2120      	movs	r1, #32
 8005b5e:	4818      	ldr	r0, [pc, #96]	; (8005bc0 <GO_ApplyPresetToSignal+0x160>)
 8005b60:	f005 f8fc 	bl	800ad5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005b64:	2201      	movs	r2, #1
 8005b66:	2110      	movs	r1, #16
 8005b68:	4815      	ldr	r0, [pc, #84]	; (8005bc0 <GO_ApplyPresetToSignal+0x160>)
 8005b6a:	f005 f8f7 	bl	800ad5c <HAL_GPIO_WritePin>
			break;
 8005b6e:	e01f      	b.n	8005bb0 <GO_ApplyPresetToSignal+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005b70:	2200      	movs	r2, #0
 8005b72:	2101      	movs	r1, #1
 8005b74:	4811      	ldr	r0, [pc, #68]	; (8005bbc <GO_ApplyPresetToSignal+0x15c>)
 8005b76:	f005 f8f1 	bl	800ad5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	2120      	movs	r1, #32
 8005b7e:	4810      	ldr	r0, [pc, #64]	; (8005bc0 <GO_ApplyPresetToSignal+0x160>)
 8005b80:	f005 f8ec 	bl	800ad5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005b84:	2201      	movs	r2, #1
 8005b86:	2110      	movs	r1, #16
 8005b88:	480d      	ldr	r0, [pc, #52]	; (8005bc0 <GO_ApplyPresetToSignal+0x160>)
 8005b8a:	f005 f8e7 	bl	800ad5c <HAL_GPIO_WritePin>
			break;
 8005b8e:	e00f      	b.n	8005bb0 <GO_ApplyPresetToSignal+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005b90:	2201      	movs	r2, #1
 8005b92:	2101      	movs	r1, #1
 8005b94:	4809      	ldr	r0, [pc, #36]	; (8005bbc <GO_ApplyPresetToSignal+0x15c>)
 8005b96:	f005 f8e1 	bl	800ad5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	2120      	movs	r1, #32
 8005b9e:	4808      	ldr	r0, [pc, #32]	; (8005bc0 <GO_ApplyPresetToSignal+0x160>)
 8005ba0:	f005 f8dc 	bl	800ad5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	2110      	movs	r1, #16
 8005ba8:	4805      	ldr	r0, [pc, #20]	; (8005bc0 <GO_ApplyPresetToSignal+0x160>)
 8005baa:	f005 f8d7 	bl	800ad5c <HAL_GPIO_WritePin>
			break;
 8005bae:	bf00      	nop
	}

}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd90      	pop	{r4, r7, pc}
 8005bb8:	200001d8 	.word	0x200001d8
 8005bbc:	48000400 	.word	0x48000400
 8005bc0:	48000800 	.word	0x48000800

08005bc4 <GO_ApplyPresetToSync>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSync(eGainSettings_t pPresetEnum)
{
 8005bc4:	b590      	push	{r4, r7, lr}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	4603      	mov	r3, r0
 8005bcc:	71fb      	strb	r3, [r7, #7]
	SM_GetOutputChannel(SYNC_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 8005bce:	79fc      	ldrb	r4, [r7, #7]
 8005bd0:	2001      	movs	r0, #1
 8005bd2:	f000 f9a7 	bl	8005f24 <SM_GetOutputChannel>
 8005bd6:	4601      	mov	r1, r0
 8005bd8:	4623      	mov	r3, r4
 8005bda:	005b      	lsls	r3, r3, #1
 8005bdc:	4423      	add	r3, r4
 8005bde:	4a4f      	ldr	r2, [pc, #316]	; (8005d1c <GO_ApplyPresetToSync+0x158>)
 8005be0:	4413      	add	r3, r2
 8005be2:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 8005be6:	79fb      	ldrb	r3, [r7, #7]
 8005be8:	2b07      	cmp	r3, #7
 8005bea:	f200 8093 	bhi.w	8005d14 <GO_ApplyPresetToSync+0x150>
 8005bee:	a201      	add	r2, pc, #4	; (adr r2, 8005bf4 <GO_ApplyPresetToSync+0x30>)
 8005bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf4:	08005c15 	.word	0x08005c15
 8005bf8:	08005c35 	.word	0x08005c35
 8005bfc:	08005c55 	.word	0x08005c55
 8005c00:	08005c75 	.word	0x08005c75
 8005c04:	08005c95 	.word	0x08005c95
 8005c08:	08005cb5 	.word	0x08005cb5
 8005c0c:	08005cd5 	.word	0x08005cd5
 8005c10:	08005cf5 	.word	0x08005cf5
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005c14:	2200      	movs	r2, #0
 8005c16:	2101      	movs	r1, #1
 8005c18:	4841      	ldr	r0, [pc, #260]	; (8005d20 <GO_ApplyPresetToSync+0x15c>)
 8005c1a:	f005 f89f 	bl	800ad5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005c1e:	2200      	movs	r2, #0
 8005c20:	2120      	movs	r1, #32
 8005c22:	4840      	ldr	r0, [pc, #256]	; (8005d24 <GO_ApplyPresetToSync+0x160>)
 8005c24:	f005 f89a 	bl	800ad5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005c28:	2200      	movs	r2, #0
 8005c2a:	2110      	movs	r1, #16
 8005c2c:	483d      	ldr	r0, [pc, #244]	; (8005d24 <GO_ApplyPresetToSync+0x160>)
 8005c2e:	f005 f895 	bl	800ad5c <HAL_GPIO_WritePin>
			break;
 8005c32:	e06f      	b.n	8005d14 <GO_ApplyPresetToSync+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005c34:	2201      	movs	r2, #1
 8005c36:	2101      	movs	r1, #1
 8005c38:	4839      	ldr	r0, [pc, #228]	; (8005d20 <GO_ApplyPresetToSync+0x15c>)
 8005c3a:	f005 f88f 	bl	800ad5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005c3e:	2200      	movs	r2, #0
 8005c40:	2120      	movs	r1, #32
 8005c42:	4838      	ldr	r0, [pc, #224]	; (8005d24 <GO_ApplyPresetToSync+0x160>)
 8005c44:	f005 f88a 	bl	800ad5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005c48:	2200      	movs	r2, #0
 8005c4a:	2110      	movs	r1, #16
 8005c4c:	4835      	ldr	r0, [pc, #212]	; (8005d24 <GO_ApplyPresetToSync+0x160>)
 8005c4e:	f005 f885 	bl	800ad5c <HAL_GPIO_WritePin>
			break;
 8005c52:	e05f      	b.n	8005d14 <GO_ApplyPresetToSync+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005c54:	2200      	movs	r2, #0
 8005c56:	2101      	movs	r1, #1
 8005c58:	4831      	ldr	r0, [pc, #196]	; (8005d20 <GO_ApplyPresetToSync+0x15c>)
 8005c5a:	f005 f87f 	bl	800ad5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005c5e:	2201      	movs	r2, #1
 8005c60:	2120      	movs	r1, #32
 8005c62:	4830      	ldr	r0, [pc, #192]	; (8005d24 <GO_ApplyPresetToSync+0x160>)
 8005c64:	f005 f87a 	bl	800ad5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005c68:	2200      	movs	r2, #0
 8005c6a:	2110      	movs	r1, #16
 8005c6c:	482d      	ldr	r0, [pc, #180]	; (8005d24 <GO_ApplyPresetToSync+0x160>)
 8005c6e:	f005 f875 	bl	800ad5c <HAL_GPIO_WritePin>
			break;
 8005c72:	e04f      	b.n	8005d14 <GO_ApplyPresetToSync+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005c74:	2201      	movs	r2, #1
 8005c76:	2101      	movs	r1, #1
 8005c78:	4829      	ldr	r0, [pc, #164]	; (8005d20 <GO_ApplyPresetToSync+0x15c>)
 8005c7a:	f005 f86f 	bl	800ad5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005c7e:	2201      	movs	r2, #1
 8005c80:	2120      	movs	r1, #32
 8005c82:	4828      	ldr	r0, [pc, #160]	; (8005d24 <GO_ApplyPresetToSync+0x160>)
 8005c84:	f005 f86a 	bl	800ad5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005c88:	2200      	movs	r2, #0
 8005c8a:	2110      	movs	r1, #16
 8005c8c:	4825      	ldr	r0, [pc, #148]	; (8005d24 <GO_ApplyPresetToSync+0x160>)
 8005c8e:	f005 f865 	bl	800ad5c <HAL_GPIO_WritePin>
			break;
 8005c92:	e03f      	b.n	8005d14 <GO_ApplyPresetToSync+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005c94:	2200      	movs	r2, #0
 8005c96:	2101      	movs	r1, #1
 8005c98:	4821      	ldr	r0, [pc, #132]	; (8005d20 <GO_ApplyPresetToSync+0x15c>)
 8005c9a:	f005 f85f 	bl	800ad5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	2120      	movs	r1, #32
 8005ca2:	4820      	ldr	r0, [pc, #128]	; (8005d24 <GO_ApplyPresetToSync+0x160>)
 8005ca4:	f005 f85a 	bl	800ad5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005ca8:	2201      	movs	r2, #1
 8005caa:	2110      	movs	r1, #16
 8005cac:	481d      	ldr	r0, [pc, #116]	; (8005d24 <GO_ApplyPresetToSync+0x160>)
 8005cae:	f005 f855 	bl	800ad5c <HAL_GPIO_WritePin>
			break;
 8005cb2:	e02f      	b.n	8005d14 <GO_ApplyPresetToSync+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	2101      	movs	r1, #1
 8005cb8:	4819      	ldr	r0, [pc, #100]	; (8005d20 <GO_ApplyPresetToSync+0x15c>)
 8005cba:	f005 f84f 	bl	800ad5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	2120      	movs	r1, #32
 8005cc2:	4818      	ldr	r0, [pc, #96]	; (8005d24 <GO_ApplyPresetToSync+0x160>)
 8005cc4:	f005 f84a 	bl	800ad5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005cc8:	2201      	movs	r2, #1
 8005cca:	2110      	movs	r1, #16
 8005ccc:	4815      	ldr	r0, [pc, #84]	; (8005d24 <GO_ApplyPresetToSync+0x160>)
 8005cce:	f005 f845 	bl	800ad5c <HAL_GPIO_WritePin>
			break;
 8005cd2:	e01f      	b.n	8005d14 <GO_ApplyPresetToSync+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	2101      	movs	r1, #1
 8005cd8:	4811      	ldr	r0, [pc, #68]	; (8005d20 <GO_ApplyPresetToSync+0x15c>)
 8005cda:	f005 f83f 	bl	800ad5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005cde:	2201      	movs	r2, #1
 8005ce0:	2120      	movs	r1, #32
 8005ce2:	4810      	ldr	r0, [pc, #64]	; (8005d24 <GO_ApplyPresetToSync+0x160>)
 8005ce4:	f005 f83a 	bl	800ad5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005ce8:	2201      	movs	r2, #1
 8005cea:	2110      	movs	r1, #16
 8005cec:	480d      	ldr	r0, [pc, #52]	; (8005d24 <GO_ApplyPresetToSync+0x160>)
 8005cee:	f005 f835 	bl	800ad5c <HAL_GPIO_WritePin>
			break;
 8005cf2:	e00f      	b.n	8005d14 <GO_ApplyPresetToSync+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	2101      	movs	r1, #1
 8005cf8:	4809      	ldr	r0, [pc, #36]	; (8005d20 <GO_ApplyPresetToSync+0x15c>)
 8005cfa:	f005 f82f 	bl	800ad5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005cfe:	2201      	movs	r2, #1
 8005d00:	2120      	movs	r1, #32
 8005d02:	4808      	ldr	r0, [pc, #32]	; (8005d24 <GO_ApplyPresetToSync+0x160>)
 8005d04:	f005 f82a 	bl	800ad5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005d08:	2201      	movs	r2, #1
 8005d0a:	2110      	movs	r1, #16
 8005d0c:	4805      	ldr	r0, [pc, #20]	; (8005d24 <GO_ApplyPresetToSync+0x160>)
 8005d0e:	f005 f825 	bl	800ad5c <HAL_GPIO_WritePin>
			break;
 8005d12:	bf00      	nop
	}
}
 8005d14:	bf00      	nop
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd90      	pop	{r4, r7, pc}
 8005d1c:	200001d8 	.word	0x200001d8
 8005d20:	48000400 	.word	0x48000400
 8005d24:	48000800 	.word	0x48000800

08005d28 <SM_Init>:
void _InitOutputChannels();
void _InitNegGainCoefficients();
void _InitGainInDecibels();

void SM_Init()
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	af00      	add	r7, sp, #0

	_InitOutputChannels();
 8005d2c:	f000 f89a 	bl	8005e64 <_InitOutputChannels>
	_InitNegGainCoefficients();
 8005d30:	f000 f850 	bl	8005dd4 <_InitNegGainCoefficients>
	_InitGainInDecibels();
 8005d34:	f000 f802 	bl	8005d3c <_InitGainInDecibels>

}
 8005d38:	bf00      	nop
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <_InitGainInDecibels>:

void _InitGainInDecibels()
{
 8005d3c:	b590      	push	{r4, r7, lr}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0

	// =20*LOG10(TARGETVPP/0.001)
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8005d42:	2300      	movs	r3, #0
 8005d44:	60fb      	str	r3, [r7, #12]
 8005d46:	e037      	b.n	8005db8 <_InitGainInDecibels+0x7c>
	{
		float decibel_mvolt_ref = 0.001;
 8005d48:	4b1f      	ldr	r3, [pc, #124]	; (8005dc8 <_InitGainInDecibels+0x8c>)
 8005d4a:	60bb      	str	r3, [r7, #8]
		float this_amp_value = theAmpProfiles[i].amp_value;
 8005d4c:	491f      	ldr	r1, [pc, #124]	; (8005dcc <_InitGainInDecibels+0x90>)
 8005d4e:	68fa      	ldr	r2, [r7, #12]
 8005d50:	4613      	mov	r3, r2
 8005d52:	00db      	lsls	r3, r3, #3
 8005d54:	1a9b      	subs	r3, r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	440b      	add	r3, r1
 8005d5a:	3304      	adds	r3, #4
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	607b      	str	r3, [r7, #4]
		float new_gain_decibels = 20 * log10( this_amp_value / decibel_mvolt_ref );
 8005d60:	ed97 7a01 	vldr	s14, [r7, #4]
 8005d64:	edd7 7a02 	vldr	s15, [r7, #8]
 8005d68:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005d6c:	ee16 0a90 	vmov	r0, s13
 8005d70:	f7fa fc12 	bl	8000598 <__aeabi_f2d>
 8005d74:	4603      	mov	r3, r0
 8005d76:	460c      	mov	r4, r1
 8005d78:	ec44 3b10 	vmov	d0, r3, r4
 8005d7c:	f00b fd5c 	bl	8011838 <log10>
 8005d80:	ec51 0b10 	vmov	r0, r1, d0
 8005d84:	f04f 0200 	mov.w	r2, #0
 8005d88:	4b11      	ldr	r3, [pc, #68]	; (8005dd0 <_InitGainInDecibels+0x94>)
 8005d8a:	f7fa fc5d 	bl	8000648 <__aeabi_dmul>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	460c      	mov	r4, r1
 8005d92:	4618      	mov	r0, r3
 8005d94:	4621      	mov	r1, r4
 8005d96:	f7fa ff4f 	bl	8000c38 <__aeabi_d2f>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	603b      	str	r3, [r7, #0]
		theAmpProfiles[i].gain_decibels = new_gain_decibels;
 8005d9e:	490b      	ldr	r1, [pc, #44]	; (8005dcc <_InitGainInDecibels+0x90>)
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	4613      	mov	r3, r2
 8005da4:	00db      	lsls	r3, r3, #3
 8005da6:	1a9b      	subs	r3, r3, r2
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	440b      	add	r3, r1
 8005dac:	330c      	adds	r3, #12
 8005dae:	683a      	ldr	r2, [r7, #0]
 8005db0:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	3301      	adds	r3, #1
 8005db6:	60fb      	str	r3, [r7, #12]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2b61      	cmp	r3, #97	; 0x61
 8005dbc:	ddc4      	ble.n	8005d48 <_InitGainInDecibels+0xc>

	}
}
 8005dbe:	bf00      	nop
 8005dc0:	3714      	adds	r7, #20
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd90      	pop	{r4, r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	3a83126f 	.word	0x3a83126f
 8005dcc:	200001f0 	.word	0x200001f0
 8005dd0:	40340000 	.word	0x40340000

08005dd4 <_InitNegGainCoefficients>:

void _InitNegGainCoefficients()
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b087      	sub	sp, #28
 8005dd8:	af00      	add	r7, sp, #0

	// =(TARGETVPP/LUTVPP)/GAIN
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8005dda:	2300      	movs	r3, #0
 8005ddc:	617b      	str	r3, [r7, #20]
 8005dde:	e033      	b.n	8005e48 <_InitNegGainCoefficients+0x74>
	{
		float this_amp_value = theAmpProfiles[i].amp_value;
 8005de0:	491e      	ldr	r1, [pc, #120]	; (8005e5c <_InitNegGainCoefficients+0x88>)
 8005de2:	697a      	ldr	r2, [r7, #20]
 8005de4:	4613      	mov	r3, r2
 8005de6:	00db      	lsls	r3, r3, #3
 8005de8:	1a9b      	subs	r3, r3, r2
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	440b      	add	r3, r1
 8005dee:	3304      	adds	r3, #4
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	613b      	str	r3, [r7, #16]
		float this_lut_vpp = LUT_VPP;
 8005df4:	4b1a      	ldr	r3, [pc, #104]	; (8005e60 <_InitNegGainCoefficients+0x8c>)
 8005df6:	60fb      	str	r3, [r7, #12]
		float this_gain_preset = (float)theAmpProfiles[i].gain_preset;
 8005df8:	4918      	ldr	r1, [pc, #96]	; (8005e5c <_InitNegGainCoefficients+0x88>)
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	00db      	lsls	r3, r3, #3
 8005e00:	1a9b      	subs	r3, r3, r2
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	440b      	add	r3, r1
 8005e06:	3308      	adds	r3, #8
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	ee07 3a90 	vmov	s15, r3
 8005e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e12:	edc7 7a02 	vstr	s15, [r7, #8]
		float new_ngc = ( (this_amp_value / this_lut_vpp) / this_gain_preset);
 8005e16:	ed97 7a04 	vldr	s14, [r7, #16]
 8005e1a:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e1e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005e22:	ed97 7a02 	vldr	s14, [r7, #8]
 8005e26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e2a:	edc7 7a01 	vstr	s15, [r7, #4]
		theAmpProfiles[i].neg_gain_coeff = new_ngc;
 8005e2e:	490b      	ldr	r1, [pc, #44]	; (8005e5c <_InitNegGainCoefficients+0x88>)
 8005e30:	697a      	ldr	r2, [r7, #20]
 8005e32:	4613      	mov	r3, r2
 8005e34:	00db      	lsls	r3, r3, #3
 8005e36:	1a9b      	subs	r3, r3, r2
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	440b      	add	r3, r1
 8005e3c:	3310      	adds	r3, #16
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	3301      	adds	r3, #1
 8005e46:	617b      	str	r3, [r7, #20]
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	2b61      	cmp	r3, #97	; 0x61
 8005e4c:	ddc8      	ble.n	8005de0 <_InitNegGainCoefficients+0xc>
	}
}
 8005e4e:	bf00      	nop
 8005e50:	371c      	adds	r7, #28
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	200001f0 	.word	0x200001f0
 8005e60:	402ccccd 	.word	0x402ccccd

08005e64 <_InitOutputChannels>:

void _InitOutputChannels()
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
	// initialise the SIGNAL output channel
	SignalChannel.channel = SIGNAL_CHANNEL;
 8005e6a:	4b28      	ldr	r3, [pc, #160]	; (8005f0c <_InitOutputChannels+0xa8>)
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	701a      	strb	r2, [r3, #0]
	SignalChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 8005e70:	4b27      	ldr	r3, [pc, #156]	; (8005f10 <_InitOutputChannels+0xac>)
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	4a25      	ldr	r2, [pc, #148]	; (8005f0c <_InitOutputChannels+0xa8>)
 8005e76:	6053      	str	r3, [r2, #4]
	SignalChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 8005e78:	4b24      	ldr	r3, [pc, #144]	; (8005f0c <_InitOutputChannels+0xa8>)
 8005e7a:	4a25      	ldr	r2, [pc, #148]	; (8005f10 <_InitOutputChannels+0xac>)
 8005e7c:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005e80:	2300      	movs	r3, #0
 8005e82:	607b      	str	r3, [r7, #4]
 8005e84:	e00b      	b.n	8005e9e <_InitOutputChannels+0x3a>
		SignalChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8005e86:	4a23      	ldr	r2, [pc, #140]	; (8005f14 <_InitOutputChannels+0xb0>)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005e8e:	491f      	ldr	r1, [pc, #124]	; (8005f0c <_InitOutputChannels+0xa8>)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	3302      	adds	r3, #2
 8005e94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	607b      	str	r3, [r7, #4]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2b77      	cmp	r3, #119	; 0x77
 8005ea2:	ddf0      	ble.n	8005e86 <_InitOutputChannels+0x22>

	SignalChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 8005ea4:	4b19      	ldr	r3, [pc, #100]	; (8005f0c <_InitOutputChannels+0xa8>)
 8005ea6:	4a1c      	ldr	r2, [pc, #112]	; (8005f18 <_InitOutputChannels+0xb4>)
 8005ea8:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SignalChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 8005eac:	4b17      	ldr	r3, [pc, #92]	; (8005f0c <_InitOutputChannels+0xa8>)
 8005eae:	4a1b      	ldr	r2, [pc, #108]	; (8005f1c <_InitOutputChannels+0xb8>)
 8005eb0:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0

	// initialise the SYNC output channel
	SyncChannel.channel = SYNC_CHANNEL;
 8005eb4:	4b1a      	ldr	r3, [pc, #104]	; (8005f20 <_InitOutputChannels+0xbc>)
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	701a      	strb	r2, [r3, #0]
	SyncChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 8005eba:	4b15      	ldr	r3, [pc, #84]	; (8005f10 <_InitOutputChannels+0xac>)
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	4a18      	ldr	r2, [pc, #96]	; (8005f20 <_InitOutputChannels+0xbc>)
 8005ec0:	6053      	str	r3, [r2, #4]
	SyncChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 8005ec2:	4b17      	ldr	r3, [pc, #92]	; (8005f20 <_InitOutputChannels+0xbc>)
 8005ec4:	4a12      	ldr	r2, [pc, #72]	; (8005f10 <_InitOutputChannels+0xac>)
 8005ec6:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005eca:	2300      	movs	r3, #0
 8005ecc:	603b      	str	r3, [r7, #0]
 8005ece:	e00b      	b.n	8005ee8 <_InitOutputChannels+0x84>
		SyncChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8005ed0:	4a10      	ldr	r2, [pc, #64]	; (8005f14 <_InitOutputChannels+0xb0>)
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005ed8:	4911      	ldr	r1, [pc, #68]	; (8005f20 <_InitOutputChannels+0xbc>)
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	3302      	adds	r3, #2
 8005ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	603b      	str	r3, [r7, #0]
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	2b77      	cmp	r3, #119	; 0x77
 8005eec:	ddf0      	ble.n	8005ed0 <_InitOutputChannels+0x6c>

	SyncChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 8005eee:	4b0c      	ldr	r3, [pc, #48]	; (8005f20 <_InitOutputChannels+0xbc>)
 8005ef0:	4a09      	ldr	r2, [pc, #36]	; (8005f18 <_InitOutputChannels+0xb4>)
 8005ef2:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SyncChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 8005ef6:	4b0a      	ldr	r3, [pc, #40]	; (8005f20 <_InitOutputChannels+0xbc>)
 8005ef8:	4a08      	ldr	r2, [pc, #32]	; (8005f1c <_InitOutputChannels+0xb8>)
 8005efa:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 8005efe:	bf00      	nop
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	200021d4 	.word	0x200021d4
 8005f10:	200001a0 	.word	0x200001a0
 8005f14:	2000152c 	.word	0x2000152c
 8005f18:	20000bac 	.word	0x20000bac
 8005f1c:	200001ed 	.word	0x200001ed
 8005f20:	20001fe0 	.word	0x20001fe0

08005f24 <SM_GetOutputChannel>:

sOutputChannel_t * SM_GetOutputChannel(eOutputChannel_t pChannel)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	71fb      	strb	r3, [r7, #7]
	if(!pChannel)
 8005f2e:	79fb      	ldrb	r3, [r7, #7]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d101      	bne.n	8005f38 <SM_GetOutputChannel+0x14>
		return &SignalChannel;
 8005f34:	4b04      	ldr	r3, [pc, #16]	; (8005f48 <SM_GetOutputChannel+0x24>)
 8005f36:	e000      	b.n	8005f3a <SM_GetOutputChannel+0x16>
	else
		return &SyncChannel;
 8005f38:	4b04      	ldr	r3, [pc, #16]	; (8005f4c <SM_GetOutputChannel+0x28>)
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	370c      	adds	r7, #12
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	200021d4 	.word	0x200021d4
 8005f4c:	20001fe0 	.word	0x20001fe0

08005f50 <SM_EnablePwmToSignal>:
 *	@param None
 *	@retval None
 *
 */
void SM_EnablePwmToSignal()
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b096      	sub	sp, #88	; 0x58
 8005f54:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005f56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	601a      	str	r2, [r3, #0]
 8005f5e:	605a      	str	r2, [r3, #4]
 8005f60:	609a      	str	r2, [r3, #8]
 8005f62:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005f68:	2200      	movs	r2, #0
 8005f6a:	601a      	str	r2, [r3, #0]
 8005f6c:	605a      	str	r2, [r3, #4]
 8005f6e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8005f70:	f107 0320 	add.w	r3, r7, #32
 8005f74:	2200      	movs	r2, #0
 8005f76:	601a      	str	r2, [r3, #0]
 8005f78:	605a      	str	r2, [r3, #4]
 8005f7a:	609a      	str	r2, [r3, #8]
 8005f7c:	60da      	str	r2, [r3, #12]
 8005f7e:	611a      	str	r2, [r3, #16]
 8005f80:	615a      	str	r2, [r3, #20]
 8005f82:	619a      	str	r2, [r3, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f84:	f107 030c 	add.w	r3, r7, #12
 8005f88:	2200      	movs	r2, #0
 8005f8a:	601a      	str	r2, [r3, #0]
 8005f8c:	605a      	str	r2, [r3, #4]
 8005f8e:	609a      	str	r2, [r3, #8]
 8005f90:	60da      	str	r2, [r3, #12]
 8005f92:	611a      	str	r2, [r3, #16]


	htim3.Instance = TIM3;
 8005f94:	4b4b      	ldr	r3, [pc, #300]	; (80060c4 <SM_EnablePwmToSignal+0x174>)
 8005f96:	4a4c      	ldr	r2, [pc, #304]	; (80060c8 <SM_EnablePwmToSignal+0x178>)
 8005f98:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8005f9a:	4b4a      	ldr	r3, [pc, #296]	; (80060c4 <SM_EnablePwmToSignal+0x174>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8005fa0:	4b48      	ldr	r3, [pc, #288]	; (80060c4 <SM_EnablePwmToSignal+0x174>)
 8005fa2:	2210      	movs	r2, #16
 8005fa4:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1;
 8005fa6:	4b47      	ldr	r3, [pc, #284]	; (80060c4 <SM_EnablePwmToSignal+0x174>)
 8005fa8:	2201      	movs	r2, #1
 8005faa:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8005fac:	4b45      	ldr	r3, [pc, #276]	; (80060c4 <SM_EnablePwmToSignal+0x174>)
 8005fae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fb2:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005fb4:	4b43      	ldr	r3, [pc, #268]	; (80060c4 <SM_EnablePwmToSignal+0x174>)
 8005fb6:	2280      	movs	r2, #128	; 0x80
 8005fb8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005fba:	4842      	ldr	r0, [pc, #264]	; (80060c4 <SM_EnablePwmToSignal+0x174>)
 8005fbc:	f005 ff70 	bl	800bea0 <HAL_TIM_Base_Init>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d001      	beq.n	8005fca <SM_EnablePwmToSignal+0x7a>
	{
		Error_Handler();
 8005fc6:	f001 fa99 	bl	80074fc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005fca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005fce:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005fd0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	483b      	ldr	r0, [pc, #236]	; (80060c4 <SM_EnablePwmToSignal+0x174>)
 8005fd8:	f006 fcbe 	bl	800c958 <HAL_TIM_ConfigClockSource>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d001      	beq.n	8005fe6 <SM_EnablePwmToSignal+0x96>
	{
		Error_Handler();
 8005fe2:	f001 fa8b 	bl	80074fc <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005fe6:	4837      	ldr	r0, [pc, #220]	; (80060c4 <SM_EnablePwmToSignal+0x174>)
 8005fe8:	f006 f845 	bl	800c076 <HAL_TIM_PWM_Init>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d001      	beq.n	8005ff6 <SM_EnablePwmToSignal+0xa6>
	{
		Error_Handler();
 8005ff2:	f001 fa83 	bl	80074fc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005ff6:	2320      	movs	r3, #32
 8005ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005ffe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006002:	4619      	mov	r1, r3
 8006004:	482f      	ldr	r0, [pc, #188]	; (80060c4 <SM_EnablePwmToSignal+0x174>)
 8006006:	f007 fa5d 	bl	800d4c4 <HAL_TIMEx_MasterConfigSynchronization>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d001      	beq.n	8006014 <SM_EnablePwmToSignal+0xc4>
	{
		Error_Handler();
 8006010:	f001 fa74 	bl	80074fc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006014:	2360      	movs	r3, #96	; 0x60
 8006016:	623b      	str	r3, [r7, #32]
	sConfigOC.Pulse = 0;
 8006018:	2300      	movs	r3, #0
 800601a:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800601c:	2300      	movs	r3, #0
 800601e:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006020:	2300      	movs	r3, #0
 8006022:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006024:	f107 0320 	add.w	r3, r7, #32
 8006028:	2204      	movs	r2, #4
 800602a:	4619      	mov	r1, r3
 800602c:	4825      	ldr	r0, [pc, #148]	; (80060c4 <SM_EnablePwmToSignal+0x174>)
 800602e:	f006 fb83 	bl	800c738 <HAL_TIM_PWM_ConfigChannel>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d001      	beq.n	800603c <SM_EnablePwmToSignal+0xec>
	{
		Error_Handler();
 8006038:	f001 fa60 	bl	80074fc <Error_Handler>
	}


	// Timer Post Initialization

	__HAL_RCC_GPIOA_CLK_ENABLE();
 800603c:	4b23      	ldr	r3, [pc, #140]	; (80060cc <SM_EnablePwmToSignal+0x17c>)
 800603e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006040:	4a22      	ldr	r2, [pc, #136]	; (80060cc <SM_EnablePwmToSignal+0x17c>)
 8006042:	f043 0301 	orr.w	r3, r3, #1
 8006046:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006048:	4b20      	ldr	r3, [pc, #128]	; (80060cc <SM_EnablePwmToSignal+0x17c>)
 800604a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800604c:	f003 0301 	and.w	r3, r3, #1
 8006050:	60bb      	str	r3, [r7, #8]
 8006052:	68bb      	ldr	r3, [r7, #8]
	/**TIM3 GPIO Configuration
	PA4     ------> TIM3_CH2
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006054:	2310      	movs	r3, #16
 8006056:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006058:	2302      	movs	r3, #2
 800605a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800605c:	2300      	movs	r3, #0
 800605e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006060:	2300      	movs	r3, #0
 8006062:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006064:	2302      	movs	r3, #2
 8006066:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006068:	f107 030c 	add.w	r3, r7, #12
 800606c:	4619      	mov	r1, r3
 800606e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006072:	f004 fc0f 	bl	800a894 <HAL_GPIO_Init>


	// TIM3_MspInit 0

	/* TIM3 clock enable */
	__HAL_RCC_TIM3_CLK_ENABLE();
 8006076:	4b15      	ldr	r3, [pc, #84]	; (80060cc <SM_EnablePwmToSignal+0x17c>)
 8006078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800607a:	4a14      	ldr	r2, [pc, #80]	; (80060cc <SM_EnablePwmToSignal+0x17c>)
 800607c:	f043 0302 	orr.w	r3, r3, #2
 8006080:	6593      	str	r3, [r2, #88]	; 0x58
 8006082:	4b12      	ldr	r3, [pc, #72]	; (80060cc <SM_EnablePwmToSignal+0x17c>)
 8006084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006086:	f003 0302 	and.w	r3, r3, #2
 800608a:	607b      	str	r3, [r7, #4]
 800608c:	687b      	ldr	r3, [r7, #4]

	/* TIM3 interrupt Init */
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800608e:	2200      	movs	r2, #0
 8006090:	2100      	movs	r1, #0
 8006092:	201d      	movs	r0, #29
 8006094:	f003 fcd1 	bl	8009a3a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006098:	201d      	movs	r0, #29
 800609a:	f003 fce8 	bl	8009a6e <HAL_NVIC_EnableIRQ>
	/* USER CODE BEGIN TIM3_MspInit 1 */

	/* USER CODE END TIM3_MspInit 1 */

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800609e:	2104      	movs	r1, #4
 80060a0:	4808      	ldr	r0, [pc, #32]	; (80060c4 <SM_EnablePwmToSignal+0x174>)
 80060a2:	f006 f849 	bl	800c138 <HAL_TIM_PWM_Start>
	GO_ApplyPresetToSignal(eDefaultGainPreset);
 80060a6:	2007      	movs	r0, #7
 80060a8:	f7ff fcda 	bl	8005a60 <GO_ApplyPresetToSignal>
	// 50% duty cycle
	TIM3->CCR2 = 32768;
 80060ac:	4b06      	ldr	r3, [pc, #24]	; (80060c8 <SM_EnablePwmToSignal+0x178>)
 80060ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80060b2:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->ARR = 65535;
 80060b4:	4b04      	ldr	r3, [pc, #16]	; (80060c8 <SM_EnablePwmToSignal+0x178>)
 80060b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060ba:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80060bc:	bf00      	nop
 80060be:	3758      	adds	r7, #88	; 0x58
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	20001f90 	.word	0x20001f90
 80060c8:	40000400 	.word	0x40000400
 80060cc:	40021000 	.word	0x40021000

080060d0 <SM_DisablePwmToSignal>:

void SM_DisablePwmToSignal()
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM3_MspDeInit 0 */

	/* USER CODE END TIM3_MspDeInit 0 */
	/* Peripheral clock disable */
	__HAL_RCC_TIM3_CLK_DISABLE();
 80060d4:	4b05      	ldr	r3, [pc, #20]	; (80060ec <SM_DisablePwmToSignal+0x1c>)
 80060d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060d8:	4a04      	ldr	r2, [pc, #16]	; (80060ec <SM_DisablePwmToSignal+0x1c>)
 80060da:	f023 0302 	bic.w	r3, r3, #2
 80060de:	6593      	str	r3, [r2, #88]	; 0x58

	/* TIM3 interrupt Deinit */
	HAL_NVIC_DisableIRQ(TIM3_IRQn);
 80060e0:	201d      	movs	r0, #29
 80060e2:	f003 fcd2 	bl	8009a8a <HAL_NVIC_DisableIRQ>
	/* USER CODE BEGIN TIM3_MspDeInit 1 */

	/* USER CODE END TIM3_MspDeInit 1 */
}
 80060e6:	bf00      	nop
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	40021000 	.word	0x40021000

080060f0 <SM_EnableDacToSignal>:
 *	@param None
 *	@retval None
 *
 */
void SM_EnableDacToSignal()
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b094      	sub	sp, #80	; 0x50
 80060f4:	af00      	add	r7, sp, #0
	DAC_ChannelConfTypeDef sConfig = {0};
 80060f6:	f107 0320 	add.w	r3, r7, #32
 80060fa:	2230      	movs	r2, #48	; 0x30
 80060fc:	2100      	movs	r1, #0
 80060fe:	4618      	mov	r0, r3
 8006100:	f008 ff80 	bl	800f004 <memset>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006104:	f107 030c 	add.w	r3, r7, #12
 8006108:	2200      	movs	r2, #0
 800610a:	601a      	str	r2, [r3, #0]
 800610c:	605a      	str	r2, [r3, #4]
 800610e:	609a      	str	r2, [r3, #8]
 8006110:	60da      	str	r2, [r3, #12]
 8006112:	611a      	str	r2, [r3, #16]

	/** DAC Initialization
	*/
	hdac1.Instance = DAC1;
 8006114:	4b49      	ldr	r3, [pc, #292]	; (800623c <SM_EnableDacToSignal+0x14c>)
 8006116:	4a4a      	ldr	r2, [pc, #296]	; (8006240 <SM_EnableDacToSignal+0x150>)
 8006118:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800611a:	4848      	ldr	r0, [pc, #288]	; (800623c <SM_EnableDacToSignal+0x14c>)
 800611c:	f003 fccf 	bl	8009abe <HAL_DAC_Init>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d001      	beq.n	800612a <SM_EnableDacToSignal+0x3a>
	{
		Error_Handler();
 8006126:	f001 f9e9 	bl	80074fc <Error_Handler>
	}
	/** DAC channel OUT1 config
	*/
	sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800612a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800612e:	623b      	str	r3, [r7, #32]
	sConfig.DAC_DMADoubleDataMode = DISABLE;
 8006130:	2300      	movs	r3, #0
 8006132:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	sConfig.DAC_SignedFormat = DISABLE;
 8006136:	2300      	movs	r3, #0
 8006138:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800613c:	2300      	movs	r3, #0
 800613e:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8006140:	2306      	movs	r3, #6
 8006142:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8006144:	2300      	movs	r3, #0
 8006146:	633b      	str	r3, [r7, #48]	; 0x30
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006148:	2300      	movs	r3, #0
 800614a:	637b      	str	r3, [r7, #52]	; 0x34
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800614c:	2301      	movs	r3, #1
 800614e:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006150:	2300      	movs	r3, #0
 8006152:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8006154:	f107 0320 	add.w	r3, r7, #32
 8006158:	2200      	movs	r2, #0
 800615a:	4619      	mov	r1, r3
 800615c:	4837      	ldr	r0, [pc, #220]	; (800623c <SM_EnableDacToSignal+0x14c>)
 800615e:	f003 fe97 	bl	8009e90 <HAL_DAC_ConfigChannel>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d001      	beq.n	800616c <SM_EnableDacToSignal+0x7c>
	{
		Error_Handler();
 8006168:	f001 f9c8 	bl	80074fc <Error_Handler>
	}
	/** DAC channel OUT2 config
	*/
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800616c:	2300      	movs	r3, #0
 800616e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006170:	2301      	movs	r3, #1
 8006172:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8006174:	f107 0320 	add.w	r3, r7, #32
 8006178:	2210      	movs	r2, #16
 800617a:	4619      	mov	r1, r3
 800617c:	482f      	ldr	r0, [pc, #188]	; (800623c <SM_EnableDacToSignal+0x14c>)
 800617e:	f003 fe87 	bl	8009e90 <HAL_DAC_ConfigChannel>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d001      	beq.n	800618c <SM_EnableDacToSignal+0x9c>
	{
		Error_Handler();
 8006188:	f001 f9b8 	bl	80074fc <Error_Handler>
	}

    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800618c:	4b2d      	ldr	r3, [pc, #180]	; (8006244 <SM_EnableDacToSignal+0x154>)
 800618e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006190:	4a2c      	ldr	r2, [pc, #176]	; (8006244 <SM_EnableDacToSignal+0x154>)
 8006192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006196:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006198:	4b2a      	ldr	r3, [pc, #168]	; (8006244 <SM_EnableDacToSignal+0x154>)
 800619a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800619c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061a0:	60bb      	str	r3, [r7, #8]
 80061a2:	68bb      	ldr	r3, [r7, #8]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061a4:	4b27      	ldr	r3, [pc, #156]	; (8006244 <SM_EnableDacToSignal+0x154>)
 80061a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061a8:	4a26      	ldr	r2, [pc, #152]	; (8006244 <SM_EnableDacToSignal+0x154>)
 80061aa:	f043 0301 	orr.w	r3, r3, #1
 80061ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80061b0:	4b24      	ldr	r3, [pc, #144]	; (8006244 <SM_EnableDacToSignal+0x154>)
 80061b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061b4:	f003 0301 	and.w	r3, r3, #1
 80061b8:	607b      	str	r3, [r7, #4]
 80061ba:	687b      	ldr	r3, [r7, #4]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80061bc:	2330      	movs	r3, #48	; 0x30
 80061be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80061c0:	2303      	movs	r3, #3
 80061c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061c4:	2300      	movs	r3, #0
 80061c6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061c8:	f107 030c 	add.w	r3, r7, #12
 80061cc:	4619      	mov	r1, r3
 80061ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80061d2:	f004 fb5f 	bl	800a894 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 80061d6:	4b1c      	ldr	r3, [pc, #112]	; (8006248 <SM_EnableDacToSignal+0x158>)
 80061d8:	4a1c      	ldr	r2, [pc, #112]	; (800624c <SM_EnableDacToSignal+0x15c>)
 80061da:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 80061dc:	4b1a      	ldr	r3, [pc, #104]	; (8006248 <SM_EnableDacToSignal+0x158>)
 80061de:	2206      	movs	r2, #6
 80061e0:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80061e2:	4b19      	ldr	r3, [pc, #100]	; (8006248 <SM_EnableDacToSignal+0x158>)
 80061e4:	2210      	movs	r2, #16
 80061e6:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80061e8:	4b17      	ldr	r3, [pc, #92]	; (8006248 <SM_EnableDacToSignal+0x158>)
 80061ea:	2200      	movs	r2, #0
 80061ec:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80061ee:	4b16      	ldr	r3, [pc, #88]	; (8006248 <SM_EnableDacToSignal+0x158>)
 80061f0:	2280      	movs	r2, #128	; 0x80
 80061f2:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80061f4:	4b14      	ldr	r3, [pc, #80]	; (8006248 <SM_EnableDacToSignal+0x158>)
 80061f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061fa:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80061fc:	4b12      	ldr	r3, [pc, #72]	; (8006248 <SM_EnableDacToSignal+0x158>)
 80061fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006202:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8006204:	4b10      	ldr	r3, [pc, #64]	; (8006248 <SM_EnableDacToSignal+0x158>)
 8006206:	2220      	movs	r2, #32
 8006208:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800620a:	4b0f      	ldr	r3, [pc, #60]	; (8006248 <SM_EnableDacToSignal+0x158>)
 800620c:	2200      	movs	r2, #0
 800620e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8006210:	480d      	ldr	r0, [pc, #52]	; (8006248 <SM_EnableDacToSignal+0x158>)
 8006212:	f004 f873 	bl	800a2fc <HAL_DMA_Init>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d001      	beq.n	8006220 <SM_EnableDacToSignal+0x130>
    {
      Error_Handler();
 800621c:	f001 f96e 	bl	80074fc <Error_Handler>
    }

    __HAL_LINKDMA(&hdac1,DMA_Handle1,hdma_dac1_ch1);
 8006220:	4b06      	ldr	r3, [pc, #24]	; (800623c <SM_EnableDacToSignal+0x14c>)
 8006222:	4a09      	ldr	r2, [pc, #36]	; (8006248 <SM_EnableDacToSignal+0x158>)
 8006224:	609a      	str	r2, [r3, #8]
 8006226:	4b08      	ldr	r3, [pc, #32]	; (8006248 <SM_EnableDacToSignal+0x158>)
 8006228:	4a04      	ldr	r2, [pc, #16]	; (800623c <SM_EnableDacToSignal+0x14c>)
 800622a:	629a      	str	r2, [r3, #40]	; 0x28

    GO_ApplyPresetToSignal(eDefaultGainPreset);
 800622c:	2007      	movs	r0, #7
 800622e:	f7ff fc17 	bl	8005a60 <GO_ApplyPresetToSignal>
}
 8006232:	bf00      	nop
 8006234:	3750      	adds	r7, #80	; 0x50
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	200026ac 	.word	0x200026ac
 8006240:	50000800 	.word	0x50000800
 8006244:	40021000 	.word	0x40021000
 8006248:	20001f24 	.word	0x20001f24
 800624c:	4002001c 	.word	0x4002001c

08006250 <SM_DisableDacToSignal>:
 *	@param None
 *	@retval None
 *
 */
void SM_DisableDacToSignal()
{
 8006250:	b580      	push	{r7, lr}
 8006252:	af00      	add	r7, sp, #0

	    /**DAC1 GPIO Configuration
	    PA4     ------> DAC1_OUT1
	    PA5     ------> DAC1_OUT2
	    */
	    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
 8006254:	2110      	movs	r1, #16
 8006256:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800625a:	f004 fc9d 	bl	800ab98 <HAL_GPIO_DeInit>
	    /* DAC1 DMA DeInit */
	   //HAL_DMA_DeInit(hdac1.DMA_Handle1);
	  /* USER CODE BEGIN DAC1_MspDeInit 1 */

	  /* USER CODE END DAC1_MspDeInit 1 */
}
 800625e:	bf00      	nop
 8006260:	bd80      	pop	{r7, pc}
	...

08006264 <SM_GetEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t SM_GetEncoderValue(eEncoder_Direction direction)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	4603      	mov	r3, r0
 800626c:	71fb      	strb	r3, [r7, #7]
	if(direction)
 800626e:	79fb      	ldrb	r3, [r7, #7]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d008      	beq.n	8006286 <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 8006274:	4b08      	ldr	r3, [pc, #32]	; (8006298 <SM_GetEncoderValue+0x34>)
 8006276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006278:	b29a      	uxth	r2, r3
 800627a:	4b07      	ldr	r3, [pc, #28]	; (8006298 <SM_GetEncoderValue+0x34>)
 800627c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627e:	b29b      	uxth	r3, r3
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	b29b      	uxth	r3, r3
 8006284:	e002      	b.n	800628c <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 8006286:	4b04      	ldr	r3, [pc, #16]	; (8006298 <SM_GetEncoderValue+0x34>)
 8006288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628a:	b29b      	uxth	r3, r3
	}
}
 800628c:	4618      	mov	r0, r3
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr
 8006298:	40012c00 	.word	0x40012c00

0800629c <SM_GetOutputInHertz>:
 *	@param None
 *	@retval None
 *
 */
float SM_GetOutputInHertz()
{
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
	volatile float output_tm_psc;
	volatile float output_tm_arr;

	// safe-guard against divide by zero
	(OUTPUT_TIMER->PSC == 0) ? (output_tm_psc = 1) : (output_tm_psc = OUTPUT_TIMER->PSC);
 80062a2:	4b1d      	ldr	r3, [pc, #116]	; (8006318 <SM_GetOutputInHertz+0x7c>)
 80062a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d103      	bne.n	80062b2 <SM_GetOutputInHertz+0x16>
 80062aa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80062ae:	60bb      	str	r3, [r7, #8]
 80062b0:	e007      	b.n	80062c2 <SM_GetOutputInHertz+0x26>
 80062b2:	4b19      	ldr	r3, [pc, #100]	; (8006318 <SM_GetOutputInHertz+0x7c>)
 80062b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b6:	ee07 3a90 	vmov	s15, r3
 80062ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062be:	edc7 7a02 	vstr	s15, [r7, #8]
	(OUTPUT_TIMER->ARR == 0) ? (output_tm_arr = 1) : (output_tm_arr = OUTPUT_TIMER->ARR);
 80062c2:	4b15      	ldr	r3, [pc, #84]	; (8006318 <SM_GetOutputInHertz+0x7c>)
 80062c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d103      	bne.n	80062d2 <SM_GetOutputInHertz+0x36>
 80062ca:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80062ce:	607b      	str	r3, [r7, #4]
 80062d0:	e007      	b.n	80062e2 <SM_GetOutputInHertz+0x46>
 80062d2:	4b11      	ldr	r3, [pc, #68]	; (8006318 <SM_GetOutputInHertz+0x7c>)
 80062d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d6:	ee07 3a90 	vmov	s15, r3
 80062da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062de:	edc7 7a01 	vstr	s15, [r7, #4]

	float output_tm_freq = SM_MCLK / (output_tm_psc * output_tm_arr);
 80062e2:	ed97 7a02 	vldr	s14, [r7, #8]
 80062e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80062ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80062ee:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800631c <SM_GetOutputInHertz+0x80>
 80062f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062f6:	edc7 7a03 	vstr	s15, [r7, #12]


	return output_tm_freq / SM_FSAMP;
 80062fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80062fe:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8006320 <SM_GetOutputInHertz+0x84>
 8006302:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006306:	eef0 7a66 	vmov.f32	s15, s13
}
 800630a:	eeb0 0a67 	vmov.f32	s0, s15
 800630e:	3714      	adds	r7, #20
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr
 8006318:	40013400 	.word	0x40013400
 800631c:	4d2037a0 	.word	0x4d2037a0
 8006320:	42f00000 	.word	0x42f00000

08006324 <SM_ConvertPeriodToHertz>:


float SM_ConvertPeriodToHertz(uint32_t period, uint16_t psc)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	460b      	mov	r3, r1
 800632e:	807b      	strh	r3, [r7, #2]
	(psc == 0) ? (psc = 1) : psc;
 8006330:	887b      	ldrh	r3, [r7, #2]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d101      	bne.n	800633a <SM_ConvertPeriodToHertz+0x16>
 8006336:	2301      	movs	r3, #1
 8006338:	807b      	strh	r3, [r7, #2]

	return (float)SM_MCLK / ( (float)psc * (float)period );
 800633a:	887b      	ldrh	r3, [r7, #2]
 800633c:	ee07 3a90 	vmov	s15, r3
 8006340:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	ee07 3a90 	vmov	s15, r3
 800634a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800634e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006352:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800636c <SM_ConvertPeriodToHertz+0x48>
 8006356:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800635a:	eef0 7a66 	vmov.f32	s15, s13
}
 800635e:	eeb0 0a67 	vmov.f32	s0, s15
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr
 800636c:	4d2037a0 	.word	0x4d2037a0

08006370 <SM_IsFuncPwmDutyMode>:
	return (SM_MCLK / hertz) / psc;
}


uint8_t SM_IsFuncPwmDutyMode()
{
 8006370:	b480      	push	{r7}
 8006372:	af00      	add	r7, sp, #0
	return duty_adjust_mode;
 8006374:	4b03      	ldr	r3, [pc, #12]	; (8006384 <SM_IsFuncPwmDutyMode+0x14>)
 8006376:	781b      	ldrb	r3, [r3, #0]
}
 8006378:	4618      	mov	r0, r3
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	20001f0e 	.word	0x20001f0e

08006388 <SM_ToggleFuncPwmDutyMode>:

void SM_ToggleFuncPwmDutyMode()
{
 8006388:	b480      	push	{r7}
 800638a:	af00      	add	r7, sp, #0
	duty_adjust_mode ^= 1;
 800638c:	4b05      	ldr	r3, [pc, #20]	; (80063a4 <SM_ToggleFuncPwmDutyMode+0x1c>)
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	f083 0301 	eor.w	r3, r3, #1
 8006394:	b2da      	uxtb	r2, r3
 8006396:	4b03      	ldr	r3, [pc, #12]	; (80063a4 <SM_ToggleFuncPwmDutyMode+0x1c>)
 8006398:	701a      	strb	r2, [r3, #0]
}
 800639a:	bf00      	nop
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr
 80063a4:	20001f0e 	.word	0x20001f0e

080063a8 <SM_ResetFuncPwmDutyMode>:

void SM_ResetFuncPwmDutyMode()
{
 80063a8:	b480      	push	{r7}
 80063aa:	af00      	add	r7, sp, #0
	duty_adjust_mode = 0;
 80063ac:	4b03      	ldr	r3, [pc, #12]	; (80063bc <SM_ResetFuncPwmDutyMode+0x14>)
 80063ae:	2200      	movs	r2, #0
 80063b0:	701a      	strb	r2, [r3, #0]

}
 80063b2:	bf00      	nop
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr
 80063bc:	20001f0e 	.word	0x20001f0e

080063c0 <VPP_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ResetLastEncoderValue()
{
 80063c0:	b480      	push	{r7}
 80063c2:	af00      	add	r7, sp, #0
	amp_last_encoder_value = 0;
 80063c4:	4b03      	ldr	r3, [pc, #12]	; (80063d4 <VPP_ResetLastEncoderValue+0x14>)
 80063c6:	2200      	movs	r2, #0
 80063c8:	801a      	strh	r2, [r3, #0]
}
 80063ca:	bf00      	nop
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr
 80063d4:	20001f10 	.word	0x20001f10

080063d8 <VPP_ApplyProfileToSignal>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyProfileToSignal(eAmpSettings_t pPresetEnum)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	4603      	mov	r3, r0
 80063e0:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 80063e2:	79fa      	ldrb	r2, [r7, #7]
 80063e4:	4613      	mov	r3, r2
 80063e6:	00db      	lsls	r3, r3, #3
 80063e8:	1a9b      	subs	r3, r3, r2
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	4a10      	ldr	r2, [pc, #64]	; (8006430 <VPP_ApplyProfileToSignal+0x58>)
 80063ee:	4413      	add	r3, r2
 80063f0:	60fb      	str	r3, [r7, #12]

	// Set the new  amp profile to the SignalChannel object
	SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile = pNextEncPreset;
 80063f2:	2000      	movs	r0, #0
 80063f4:	f7ff fd96 	bl	8005f24 <SM_GetOutputChannel>
 80063f8:	4602      	mov	r2, r0
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

    // set the gain preset
	GO_ApplyPresetToSignal(pNextEncPreset->gain_preset);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	7a1b      	ldrb	r3, [r3, #8]
 8006404:	4618      	mov	r0, r3
 8006406:	f7ff fb2b 	bl	8005a60 <GO_ApplyPresetToSignal>

    // Apply the next amplitude setting to the SignalChannel object
    _ProcessSignalDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	edd3 7a04 	vldr	s15, [r3, #16]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	ed93 7a05 	vldr	s14, [r3, #20]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	8b1b      	ldrh	r3, [r3, #24]
 800641a:	4618      	mov	r0, r3
 800641c:	eef0 0a47 	vmov.f32	s1, s14
 8006420:	eeb0 0a67 	vmov.f32	s0, s15
 8006424:	f000 f834 	bl	8006490 <_ProcessSignalDataTable>


}
 8006428:	bf00      	nop
 800642a:	3710      	adds	r7, #16
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	200001f0 	.word	0x200001f0

08006434 <VPP_ApplyProfileToSync>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyProfileToSync(eAmpSettings_t pPresetEnum)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	4603      	mov	r3, r0
 800643c:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 800643e:	79fa      	ldrb	r2, [r7, #7]
 8006440:	4613      	mov	r3, r2
 8006442:	00db      	lsls	r3, r3, #3
 8006444:	1a9b      	subs	r3, r3, r2
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	4a10      	ldr	r2, [pc, #64]	; (800648c <VPP_ApplyProfileToSync+0x58>)
 800644a:	4413      	add	r3, r2
 800644c:	60fb      	str	r3, [r7, #12]

	// Set the new VPP Preset to the SyncChannel object
	SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile = pNextEncPreset;
 800644e:	2001      	movs	r0, #1
 8006450:	f7ff fd68 	bl	8005f24 <SM_GetOutputChannel>
 8006454:	4602      	mov	r2, r0
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

	 // set the gain preset
	GO_ApplyPresetToSync(pNextEncPreset->gain_preset);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	7a1b      	ldrb	r3, [r3, #8]
 8006460:	4618      	mov	r0, r3
 8006462:	f7ff fbaf 	bl	8005bc4 <GO_ApplyPresetToSync>

	// Apply the next amplitude setting to the SyncChannel object
	_ProcessSyncDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	edd3 7a04 	vldr	s15, [r3, #16]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	ed93 7a05 	vldr	s14, [r3, #20]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	8b1b      	ldrh	r3, [r3, #24]
 8006476:	4618      	mov	r0, r3
 8006478:	eef0 0a47 	vmov.f32	s1, s14
 800647c:	eeb0 0a67 	vmov.f32	s0, s15
 8006480:	f000 f88c 	bl	800659c <_ProcessSyncDataTable>



}
 8006484:	bf00      	nop
 8006486:	3710      	adds	r7, #16
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}
 800648c:	200001f0 	.word	0x200001f0

08006490 <_ProcessSignalDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSignalDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b08a      	sub	sp, #40	; 0x28
 8006494:	af00      	add	r7, sp, #0
 8006496:	ed87 0a03 	vstr	s0, [r7, #12]
 800649a:	edc7 0a02 	vstr	s1, [r7, #8]
 800649e:	4603      	mov	r3, r0
 80064a0:	80fb      	strh	r3, [r7, #6]
	sOutputChannel_t * pTmpOutputChannel = SM_GetOutputChannel(SIGNAL_CHANNEL);
 80064a2:	2000      	movs	r0, #0
 80064a4:	f7ff fd3e 	bl	8005f24 <SM_GetOutputChannel>
 80064a8:	6178      	str	r0, [r7, #20]
	if(pTmpOutputChannel->func_profile->func != PWM_FUNC_MODE)
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	2b06      	cmp	r3, #6
 80064b4:	d06b      	beq.n	800658e <_ProcessSignalDataTable+0xfe>
	{
		// copy refer lookup datat table from SignalChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80064b6:	2300      	movs	r3, #0
 80064b8:	627b      	str	r3, [r7, #36]	; 0x24
 80064ba:	e00c      	b.n	80064d6 <_ProcessSignalDataTable+0x46>
		{
			tmpDataTable[i] = pTmpOutputChannel->ref_lut_data[i];
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	685a      	ldr	r2, [r3, #4]
 80064c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	4413      	add	r3, r2
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	4933      	ldr	r1, [pc, #204]	; (8006598 <_ProcessSignalDataTable+0x108>)
 80064ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80064d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d2:	3301      	adds	r3, #1
 80064d4:	627b      	str	r3, [r7, #36]	; 0x24
 80064d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d8:	2b77      	cmp	r3, #119	; 0x77
 80064da:	ddef      	ble.n	80064bc <_ProcessSignalDataTable+0x2c>
		}

		// calculate positive offset coefficient from encoder position
		float pos_offset_coeff = 1;
 80064dc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80064e0:	623b      	str	r3, [r7, #32]
		if(_encoder_value)
 80064e2:	88fb      	ldrh	r3, [r7, #6]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d008      	beq.n	80064fa <_ProcessSignalDataTable+0x6a>
		{
			pos_offset_coeff = (_encoder_value/4);
 80064e8:	88fb      	ldrh	r3, [r7, #6]
 80064ea:	089b      	lsrs	r3, r3, #2
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	ee07 3a90 	vmov	s15, r3
 80064f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064f6:	edc7 7a08 	vstr	s15, [r7, #32]
		}

		// adjust amplitude and offset of lookup table copy
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80064fa:	2300      	movs	r3, #0
 80064fc:	61fb      	str	r3, [r7, #28]
 80064fe:	e02e      	b.n	800655e <_ProcessSignalDataTable+0xce>
		{
			tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 8006500:	4a25      	ldr	r2, [pc, #148]	; (8006598 <_ProcessSignalDataTable+0x108>)
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006508:	ee07 3a90 	vmov	s15, r3
 800650c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006510:	edd7 7a03 	vldr	s15, [r7, #12]
 8006514:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006518:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800651c:	ee17 1a90 	vmov	r1, s15
 8006520:	4a1d      	ldr	r2, [pc, #116]	; (8006598 <_ProcessSignalDataTable+0x108>)
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 8006528:	4a1b      	ldr	r2, [pc, #108]	; (8006598 <_ProcessSignalDataTable+0x108>)
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006530:	ee07 3a90 	vmov	s15, r3
 8006534:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006538:	edd7 7a08 	vldr	s15, [r7, #32]
 800653c:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8006540:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006544:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800654c:	ee17 1a90 	vmov	r1, s15
 8006550:	4a11      	ldr	r2, [pc, #68]	; (8006598 <_ProcessSignalDataTable+0x108>)
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	3301      	adds	r3, #1
 800655c:	61fb      	str	r3, [r7, #28]
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	2b77      	cmp	r3, #119	; 0x77
 8006562:	ddcd      	ble.n	8006500 <_ProcessSignalDataTable+0x70>
		}

		// restore lookup table copy to active lookup table in SignalChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006564:	2300      	movs	r3, #0
 8006566:	61bb      	str	r3, [r7, #24]
 8006568:	e00e      	b.n	8006588 <_ProcessSignalDataTable+0xf8>
		{
			SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 800656a:	2000      	movs	r0, #0
 800656c:	f7ff fcda 	bl	8005f24 <SM_GetOutputChannel>
 8006570:	4601      	mov	r1, r0
 8006572:	4a09      	ldr	r2, [pc, #36]	; (8006598 <_ProcessSignalDataTable+0x108>)
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	3302      	adds	r3, #2
 800657e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	3301      	adds	r3, #1
 8006586:	61bb      	str	r3, [r7, #24]
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	2b77      	cmp	r3, #119	; 0x77
 800658c:	dded      	ble.n	800656a <_ProcessSignalDataTable+0xda>
		}
	}

}
 800658e:	bf00      	nop
 8006590:	3728      	adds	r7, #40	; 0x28
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	200023c8 	.word	0x200023c8

0800659c <_ProcessSyncDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSyncDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b088      	sub	sp, #32
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	ed87 0a03 	vstr	s0, [r7, #12]
 80065a6:	edc7 0a02 	vstr	s1, [r7, #8]
 80065aa:	4603      	mov	r3, r0
 80065ac:	80fb      	strh	r3, [r7, #6]
	if(SM_GetOutputChannel(SYNC_CHANNEL)->func_profile->func != PWM_FUNC_MODE)
 80065ae:	2001      	movs	r0, #1
 80065b0:	f7ff fcb8 	bl	8005f24 <SM_GetOutputChannel>
 80065b4:	4603      	mov	r3, r0
 80065b6:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	2b06      	cmp	r3, #6
 80065be:	d059      	beq.n	8006674 <_ProcessSyncDataTable+0xd8>
	{
		// copy refer lookup datat table from SyncChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80065c0:	2300      	movs	r3, #0
 80065c2:	61fb      	str	r3, [r7, #28]
 80065c4:	e00f      	b.n	80065e6 <_ProcessSyncDataTable+0x4a>
		{
			tmpDataTable[i] = SM_GetOutputChannel(SYNC_CHANNEL)->ref_lut_data[i];
 80065c6:	2001      	movs	r0, #1
 80065c8:	f7ff fcac 	bl	8005f24 <SM_GetOutputChannel>
 80065cc:	4603      	mov	r3, r0
 80065ce:	685a      	ldr	r2, [r3, #4]
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	4413      	add	r3, r2
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	4933      	ldr	r1, [pc, #204]	; (80066a8 <_ProcessSyncDataTable+0x10c>)
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	3301      	adds	r3, #1
 80065e4:	61fb      	str	r3, [r7, #28]
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	2b77      	cmp	r3, #119	; 0x77
 80065ea:	ddec      	ble.n	80065c6 <_ProcessSyncDataTable+0x2a>
		}

		// calculate positive offset coefficient from encoder position
		float pos_offset_coeff = 1;
 80065ec:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80065f0:	61bb      	str	r3, [r7, #24]
		if(_encoder_value)
 80065f2:	88fb      	ldrh	r3, [r7, #6]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d008      	beq.n	800660a <_ProcessSyncDataTable+0x6e>
		{
			pos_offset_coeff = (_encoder_value/4);
 80065f8:	88fb      	ldrh	r3, [r7, #6]
 80065fa:	089b      	lsrs	r3, r3, #2
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	ee07 3a90 	vmov	s15, r3
 8006602:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006606:	edc7 7a06 	vstr	s15, [r7, #24]
		}

		// adjust amplitude and offset of lookup table copy
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 800660a:	2300      	movs	r3, #0
 800660c:	617b      	str	r3, [r7, #20]
 800660e:	e02e      	b.n	800666e <_ProcessSyncDataTable+0xd2>
		{

			tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 8006610:	4a25      	ldr	r2, [pc, #148]	; (80066a8 <_ProcessSyncDataTable+0x10c>)
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006618:	ee07 3a90 	vmov	s15, r3
 800661c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006620:	edd7 7a03 	vldr	s15, [r7, #12]
 8006624:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006628:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800662c:	ee17 1a90 	vmov	r1, s15
 8006630:	4a1d      	ldr	r2, [pc, #116]	; (80066a8 <_ProcessSyncDataTable+0x10c>)
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 8006638:	4a1b      	ldr	r2, [pc, #108]	; (80066a8 <_ProcessSyncDataTable+0x10c>)
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006640:	ee07 3a90 	vmov	s15, r3
 8006644:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006648:	edd7 7a06 	vldr	s15, [r7, #24]
 800664c:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8006650:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006654:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006658:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800665c:	ee17 1a90 	vmov	r1, s15
 8006660:	4a11      	ldr	r2, [pc, #68]	; (80066a8 <_ProcessSyncDataTable+0x10c>)
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	3301      	adds	r3, #1
 800666c:	617b      	str	r3, [r7, #20]
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	2b77      	cmp	r3, #119	; 0x77
 8006672:	ddcd      	ble.n	8006610 <_ProcessSyncDataTable+0x74>
		}
	}


	// restore lookup table copy to active lookup table in SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006674:	2300      	movs	r3, #0
 8006676:	613b      	str	r3, [r7, #16]
 8006678:	e00e      	b.n	8006698 <_ProcessSyncDataTable+0xfc>
	{
		SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 800667a:	2001      	movs	r0, #1
 800667c:	f7ff fc52 	bl	8005f24 <SM_GetOutputChannel>
 8006680:	4601      	mov	r1, r0
 8006682:	4a09      	ldr	r2, [pc, #36]	; (80066a8 <_ProcessSyncDataTable+0x10c>)
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	3302      	adds	r3, #2
 800668e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	3301      	adds	r3, #1
 8006696:	613b      	str	r3, [r7, #16]
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	2b77      	cmp	r3, #119	; 0x77
 800669c:	dded      	ble.n	800667a <_ProcessSyncDataTable+0xde>
	}
}
 800669e:	bf00      	nop
 80066a0:	3720      	adds	r7, #32
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	200023c8 	.word	0x200023c8

080066ac <VPP_MapEncoderPositionToSignalOutput>:
 *
 *	@retval None
 *
 */
void VPP_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	4603      	mov	r3, r0
 80066b4:	80fb      	strh	r3, [r7, #6]
	eAmpSettings_t tmpAmp = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 80066b6:	2000      	movs	r0, #0
 80066b8:	f7ff fc34 	bl	8005f24 <SM_GetOutputChannel>
 80066bc:	4603      	mov	r3, r0
 80066be:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > amp_last_encoder_value)
 80066c6:	4b15      	ldr	r3, [pc, #84]	; (800671c <VPP_MapEncoderPositionToSignalOutput+0x70>)
 80066c8:	881b      	ldrh	r3, [r3, #0]
 80066ca:	88fa      	ldrh	r2, [r7, #6]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d90c      	bls.n	80066ea <VPP_MapEncoderPositionToSignalOutput+0x3e>
	{
		tmpAmp++;
 80066d0:	7bfb      	ldrb	r3, [r7, #15]
 80066d2:	3301      	adds	r3, #1
 80066d4:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP98;
 80066d6:	7bfb      	ldrb	r3, [r7, #15]
 80066d8:	2b61      	cmp	r3, #97	; 0x61
 80066da:	d901      	bls.n	80066e0 <VPP_MapEncoderPositionToSignalOutput+0x34>
 80066dc:	2361      	movs	r3, #97	; 0x61
 80066de:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(tmpAmp);
 80066e0:	7bfb      	ldrb	r3, [r7, #15]
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7ff fe78 	bl	80063d8 <VPP_ApplyProfileToSignal>
 80066e8:	e010      	b.n	800670c <VPP_MapEncoderPositionToSignalOutput+0x60>
	}
	else if (pEncoderValue < amp_last_encoder_value)
 80066ea:	4b0c      	ldr	r3, [pc, #48]	; (800671c <VPP_MapEncoderPositionToSignalOutput+0x70>)
 80066ec:	881b      	ldrh	r3, [r3, #0]
 80066ee:	88fa      	ldrh	r2, [r7, #6]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d20b      	bcs.n	800670c <VPP_MapEncoderPositionToSignalOutput+0x60>
	{
		tmpAmp--;
 80066f4:	7bfb      	ldrb	r3, [r7, #15]
 80066f6:	3b01      	subs	r3, #1
 80066f8:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP01;
 80066fa:	7bfb      	ldrb	r3, [r7, #15]
 80066fc:	2b61      	cmp	r3, #97	; 0x61
 80066fe:	d901      	bls.n	8006704 <VPP_MapEncoderPositionToSignalOutput+0x58>
 8006700:	2300      	movs	r3, #0
 8006702:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(tmpAmp);
 8006704:	7bfb      	ldrb	r3, [r7, #15]
 8006706:	4618      	mov	r0, r3
 8006708:	f7ff fe66 	bl	80063d8 <VPP_ApplyProfileToSignal>
	}
	amp_last_encoder_value = pEncoderValue;
 800670c:	4a03      	ldr	r2, [pc, #12]	; (800671c <VPP_MapEncoderPositionToSignalOutput+0x70>)
 800670e:	88fb      	ldrh	r3, [r7, #6]
 8006710:	8013      	strh	r3, [r2, #0]

}
 8006712:	bf00      	nop
 8006714:	3710      	adds	r7, #16
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	20001f10 	.word	0x20001f10

08006720 <VPP_MapEncoderPositionToSyncOutput>:
 *
 *	@retval None
 *
 */
void VPP_MapEncoderPositionToSyncOutput(uint16_t pEncoderValue)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	4603      	mov	r3, r0
 8006728:	80fb      	strh	r3, [r7, #6]

	eAmpSettings_t tmpAmp = SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile->amp_setting;
 800672a:	2001      	movs	r0, #1
 800672c:	f7ff fbfa 	bl	8005f24 <SM_GetOutputChannel>
 8006730:	4603      	mov	r3, r0
 8006732:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > amp_last_encoder_value)
 800673a:	4b15      	ldr	r3, [pc, #84]	; (8006790 <VPP_MapEncoderPositionToSyncOutput+0x70>)
 800673c:	881b      	ldrh	r3, [r3, #0]
 800673e:	88fa      	ldrh	r2, [r7, #6]
 8006740:	429a      	cmp	r2, r3
 8006742:	d90c      	bls.n	800675e <VPP_MapEncoderPositionToSyncOutput+0x3e>
	{
		tmpAmp++;
 8006744:	7bfb      	ldrb	r3, [r7, #15]
 8006746:	3301      	adds	r3, #1
 8006748:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP98;
 800674a:	7bfb      	ldrb	r3, [r7, #15]
 800674c:	2b61      	cmp	r3, #97	; 0x61
 800674e:	d901      	bls.n	8006754 <VPP_MapEncoderPositionToSyncOutput+0x34>
 8006750:	2361      	movs	r3, #97	; 0x61
 8006752:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSync(tmpAmp);
 8006754:	7bfb      	ldrb	r3, [r7, #15]
 8006756:	4618      	mov	r0, r3
 8006758:	f7ff fe6c 	bl	8006434 <VPP_ApplyProfileToSync>
 800675c:	e010      	b.n	8006780 <VPP_MapEncoderPositionToSyncOutput+0x60>
	}
	else if (pEncoderValue < amp_last_encoder_value)
 800675e:	4b0c      	ldr	r3, [pc, #48]	; (8006790 <VPP_MapEncoderPositionToSyncOutput+0x70>)
 8006760:	881b      	ldrh	r3, [r3, #0]
 8006762:	88fa      	ldrh	r2, [r7, #6]
 8006764:	429a      	cmp	r2, r3
 8006766:	d20b      	bcs.n	8006780 <VPP_MapEncoderPositionToSyncOutput+0x60>
	{
		tmpAmp--;
 8006768:	7bfb      	ldrb	r3, [r7, #15]
 800676a:	3b01      	subs	r3, #1
 800676c:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP01;
 800676e:	7bfb      	ldrb	r3, [r7, #15]
 8006770:	2b61      	cmp	r3, #97	; 0x61
 8006772:	d901      	bls.n	8006778 <VPP_MapEncoderPositionToSyncOutput+0x58>
 8006774:	2300      	movs	r3, #0
 8006776:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSync(tmpAmp);
 8006778:	7bfb      	ldrb	r3, [r7, #15]
 800677a:	4618      	mov	r0, r3
 800677c:	f7ff fe5a 	bl	8006434 <VPP_ApplyProfileToSync>
	}
	amp_last_encoder_value = pEncoderValue;
 8006780:	4a03      	ldr	r2, [pc, #12]	; (8006790 <VPP_MapEncoderPositionToSyncOutput+0x70>)
 8006782:	88fb      	ldrh	r3, [r7, #6]
 8006784:	8013      	strh	r3, [r2, #0]

}
 8006786:	bf00      	nop
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	20001f10 	.word	0x20001f10

08006794 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b08c      	sub	sp, #48	; 0x30
 8006798:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 800679a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800679e:	2200      	movs	r2, #0
 80067a0:	601a      	str	r2, [r3, #0]
 80067a2:	605a      	str	r2, [r3, #4]
 80067a4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80067a6:	1d3b      	adds	r3, r7, #4
 80067a8:	2220      	movs	r2, #32
 80067aa:	2100      	movs	r1, #0
 80067ac:	4618      	mov	r0, r3
 80067ae:	f008 fc29 	bl	800f004 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80067b2:	4b32      	ldr	r3, [pc, #200]	; (800687c <MX_ADC1_Init+0xe8>)
 80067b4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80067b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80067ba:	4b30      	ldr	r3, [pc, #192]	; (800687c <MX_ADC1_Init+0xe8>)
 80067bc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80067c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80067c2:	4b2e      	ldr	r3, [pc, #184]	; (800687c <MX_ADC1_Init+0xe8>)
 80067c4:	2200      	movs	r2, #0
 80067c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80067c8:	4b2c      	ldr	r3, [pc, #176]	; (800687c <MX_ADC1_Init+0xe8>)
 80067ca:	2200      	movs	r2, #0
 80067cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80067ce:	4b2b      	ldr	r3, [pc, #172]	; (800687c <MX_ADC1_Init+0xe8>)
 80067d0:	2200      	movs	r2, #0
 80067d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80067d4:	4b29      	ldr	r3, [pc, #164]	; (800687c <MX_ADC1_Init+0xe8>)
 80067d6:	2200      	movs	r2, #0
 80067d8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80067da:	4b28      	ldr	r3, [pc, #160]	; (800687c <MX_ADC1_Init+0xe8>)
 80067dc:	2204      	movs	r2, #4
 80067de:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80067e0:	4b26      	ldr	r3, [pc, #152]	; (800687c <MX_ADC1_Init+0xe8>)
 80067e2:	2200      	movs	r2, #0
 80067e4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80067e6:	4b25      	ldr	r3, [pc, #148]	; (800687c <MX_ADC1_Init+0xe8>)
 80067e8:	2201      	movs	r2, #1
 80067ea:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80067ec:	4b23      	ldr	r3, [pc, #140]	; (800687c <MX_ADC1_Init+0xe8>)
 80067ee:	2201      	movs	r2, #1
 80067f0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80067f2:	4b22      	ldr	r3, [pc, #136]	; (800687c <MX_ADC1_Init+0xe8>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80067fa:	4b20      	ldr	r3, [pc, #128]	; (800687c <MX_ADC1_Init+0xe8>)
 80067fc:	2200      	movs	r2, #0
 80067fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006800:	4b1e      	ldr	r3, [pc, #120]	; (800687c <MX_ADC1_Init+0xe8>)
 8006802:	2200      	movs	r2, #0
 8006804:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8006806:	4b1d      	ldr	r3, [pc, #116]	; (800687c <MX_ADC1_Init+0xe8>)
 8006808:	2201      	movs	r2, #1
 800680a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800680e:	4b1b      	ldr	r3, [pc, #108]	; (800687c <MX_ADC1_Init+0xe8>)
 8006810:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006814:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8006816:	4b19      	ldr	r3, [pc, #100]	; (800687c <MX_ADC1_Init+0xe8>)
 8006818:	2200      	movs	r2, #0
 800681a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800681e:	4817      	ldr	r0, [pc, #92]	; (800687c <MX_ADC1_Init+0xe8>)
 8006820:	f001 fe90 	bl	8008544 <HAL_ADC_Init>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d001      	beq.n	800682e <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 800682a:	f000 fe67 	bl	80074fc <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800682e:	2300      	movs	r3, #0
 8006830:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8006832:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006836:	4619      	mov	r1, r3
 8006838:	4810      	ldr	r0, [pc, #64]	; (800687c <MX_ADC1_Init+0xe8>)
 800683a:	f002 fc19 	bl	8009070 <HAL_ADCEx_MultiModeConfigChannel>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d001      	beq.n	8006848 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8006844:	f000 fe5a 	bl	80074fc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8006848:	4b0d      	ldr	r3, [pc, #52]	; (8006880 <MX_ADC1_Init+0xec>)
 800684a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800684c:	2306      	movs	r3, #6
 800684e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8006850:	2300      	movs	r3, #0
 8006852:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8006854:	237f      	movs	r3, #127	; 0x7f
 8006856:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8006858:	2304      	movs	r3, #4
 800685a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800685c:	2300      	movs	r3, #0
 800685e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006860:	1d3b      	adds	r3, r7, #4
 8006862:	4619      	mov	r1, r3
 8006864:	4805      	ldr	r0, [pc, #20]	; (800687c <MX_ADC1_Init+0xe8>)
 8006866:	f002 f82d 	bl	80088c4 <HAL_ADC_ConfigChannel>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d001      	beq.n	8006874 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8006870:	f000 fe44 	bl	80074fc <Error_Handler>
  }

}
 8006874:	bf00      	nop
 8006876:	3730      	adds	r7, #48	; 0x30
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	200025a8 	.word	0x200025a8
 8006880:	0c900008 	.word	0x0c900008

08006884 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b08a      	sub	sp, #40	; 0x28
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800688c:	f107 0314 	add.w	r3, r7, #20
 8006890:	2200      	movs	r2, #0
 8006892:	601a      	str	r2, [r3, #0]
 8006894:	605a      	str	r2, [r3, #4]
 8006896:	609a      	str	r2, [r3, #8]
 8006898:	60da      	str	r2, [r3, #12]
 800689a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80068a4:	d14f      	bne.n	8006946 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80068a6:	4b2a      	ldr	r3, [pc, #168]	; (8006950 <HAL_ADC_MspInit+0xcc>)
 80068a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068aa:	4a29      	ldr	r2, [pc, #164]	; (8006950 <HAL_ADC_MspInit+0xcc>)
 80068ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80068b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80068b2:	4b27      	ldr	r3, [pc, #156]	; (8006950 <HAL_ADC_MspInit+0xcc>)
 80068b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068ba:	613b      	str	r3, [r7, #16]
 80068bc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068be:	4b24      	ldr	r3, [pc, #144]	; (8006950 <HAL_ADC_MspInit+0xcc>)
 80068c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068c2:	4a23      	ldr	r2, [pc, #140]	; (8006950 <HAL_ADC_MspInit+0xcc>)
 80068c4:	f043 0301 	orr.w	r3, r3, #1
 80068c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80068ca:	4b21      	ldr	r3, [pc, #132]	; (8006950 <HAL_ADC_MspInit+0xcc>)
 80068cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068ce:	f003 0301 	and.w	r3, r3, #1
 80068d2:	60fb      	str	r3, [r7, #12]
 80068d4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80068d6:	2304      	movs	r3, #4
 80068d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80068da:	2303      	movs	r3, #3
 80068dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068de:	2300      	movs	r3, #0
 80068e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068e2:	f107 0314 	add.w	r3, r7, #20
 80068e6:	4619      	mov	r1, r3
 80068e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80068ec:	f003 ffd2 	bl	800a894 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80068f0:	4b18      	ldr	r3, [pc, #96]	; (8006954 <HAL_ADC_MspInit+0xd0>)
 80068f2:	4a19      	ldr	r2, [pc, #100]	; (8006958 <HAL_ADC_MspInit+0xd4>)
 80068f4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80068f6:	4b17      	ldr	r3, [pc, #92]	; (8006954 <HAL_ADC_MspInit+0xd0>)
 80068f8:	2205      	movs	r2, #5
 80068fa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80068fc:	4b15      	ldr	r3, [pc, #84]	; (8006954 <HAL_ADC_MspInit+0xd0>)
 80068fe:	2200      	movs	r2, #0
 8006900:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006902:	4b14      	ldr	r3, [pc, #80]	; (8006954 <HAL_ADC_MspInit+0xd0>)
 8006904:	2200      	movs	r2, #0
 8006906:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006908:	4b12      	ldr	r3, [pc, #72]	; (8006954 <HAL_ADC_MspInit+0xd0>)
 800690a:	2280      	movs	r2, #128	; 0x80
 800690c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800690e:	4b11      	ldr	r3, [pc, #68]	; (8006954 <HAL_ADC_MspInit+0xd0>)
 8006910:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006914:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006916:	4b0f      	ldr	r3, [pc, #60]	; (8006954 <HAL_ADC_MspInit+0xd0>)
 8006918:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800691c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800691e:	4b0d      	ldr	r3, [pc, #52]	; (8006954 <HAL_ADC_MspInit+0xd0>)
 8006920:	2220      	movs	r2, #32
 8006922:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006924:	4b0b      	ldr	r3, [pc, #44]	; (8006954 <HAL_ADC_MspInit+0xd0>)
 8006926:	2200      	movs	r2, #0
 8006928:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800692a:	480a      	ldr	r0, [pc, #40]	; (8006954 <HAL_ADC_MspInit+0xd0>)
 800692c:	f003 fce6 	bl	800a2fc <HAL_DMA_Init>
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d001      	beq.n	800693a <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8006936:	f000 fde1 	bl	80074fc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a05      	ldr	r2, [pc, #20]	; (8006954 <HAL_ADC_MspInit+0xd0>)
 800693e:	655a      	str	r2, [r3, #84]	; 0x54
 8006940:	4a04      	ldr	r2, [pc, #16]	; (8006954 <HAL_ADC_MspInit+0xd0>)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8006946:	bf00      	nop
 8006948:	3728      	adds	r7, #40	; 0x28
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	40021000 	.word	0x40021000
 8006954:	20002614 	.word	0x20002614
 8006958:	40020008 	.word	0x40020008

0800695c <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8006960:	4b0f      	ldr	r3, [pc, #60]	; (80069a0 <MX_COMP1_Init+0x44>)
 8006962:	4a10      	ldr	r2, [pc, #64]	; (80069a4 <MX_COMP1_Init+0x48>)
 8006964:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8006966:	4b0e      	ldr	r3, [pc, #56]	; (80069a0 <MX_COMP1_Init+0x44>)
 8006968:	2200      	movs	r2, #0
 800696a:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 800696c:	4b0c      	ldr	r3, [pc, #48]	; (80069a0 <MX_COMP1_Init+0x44>)
 800696e:	4a0e      	ldr	r2, [pc, #56]	; (80069a8 <MX_COMP1_Init+0x4c>)
 8006970:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8006972:	4b0b      	ldr	r3, [pc, #44]	; (80069a0 <MX_COMP1_Init+0x44>)
 8006974:	2200      	movs	r2, #0
 8006976:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8006978:	4b09      	ldr	r3, [pc, #36]	; (80069a0 <MX_COMP1_Init+0x44>)
 800697a:	2200      	movs	r2, #0
 800697c:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800697e:	4b08      	ldr	r3, [pc, #32]	; (80069a0 <MX_COMP1_Init+0x44>)
 8006980:	2200      	movs	r2, #0
 8006982:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8006984:	4b06      	ldr	r3, [pc, #24]	; (80069a0 <MX_COMP1_Init+0x44>)
 8006986:	2200      	movs	r2, #0
 8006988:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800698a:	4805      	ldr	r0, [pc, #20]	; (80069a0 <MX_COMP1_Init+0x44>)
 800698c:	f002 fdc4 	bl	8009518 <HAL_COMP_Init>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d001      	beq.n	800699a <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 8006996:	f000 fdb1 	bl	80074fc <Error_Handler>
  }

}
 800699a:	bf00      	nop
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	20002674 	.word	0x20002674
 80069a4:	40010200 	.word	0x40010200
 80069a8:	00800030 	.word	0x00800030

080069ac <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b088      	sub	sp, #32
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069b4:	f107 030c 	add.w	r3, r7, #12
 80069b8:	2200      	movs	r2, #0
 80069ba:	601a      	str	r2, [r3, #0]
 80069bc:	605a      	str	r2, [r3, #4]
 80069be:	609a      	str	r2, [r3, #8]
 80069c0:	60da      	str	r2, [r3, #12]
 80069c2:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a0f      	ldr	r2, [pc, #60]	; (8006a08 <HAL_COMP_MspInit+0x5c>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d118      	bne.n	8006a00 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80069ce:	4b0f      	ldr	r3, [pc, #60]	; (8006a0c <HAL_COMP_MspInit+0x60>)
 80069d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069d2:	4a0e      	ldr	r2, [pc, #56]	; (8006a0c <HAL_COMP_MspInit+0x60>)
 80069d4:	f043 0301 	orr.w	r3, r3, #1
 80069d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80069da:	4b0c      	ldr	r3, [pc, #48]	; (8006a0c <HAL_COMP_MspInit+0x60>)
 80069dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069de:	f003 0301 	and.w	r3, r3, #1
 80069e2:	60bb      	str	r3, [r7, #8]
 80069e4:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80069e6:	2302      	movs	r3, #2
 80069e8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80069ea:	2303      	movs	r3, #3
 80069ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069ee:	2300      	movs	r3, #0
 80069f0:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069f2:	f107 030c 	add.w	r3, r7, #12
 80069f6:	4619      	mov	r1, r3
 80069f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80069fc:	f003 ff4a 	bl	800a894 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8006a00:	bf00      	nop
 8006a02:	3720      	adds	r7, #32
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	40010200 	.word	0x40010200
 8006a0c:	40021000 	.word	0x40021000

08006a10 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac2;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b08c      	sub	sp, #48	; 0x30
 8006a14:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8006a16:	463b      	mov	r3, r7
 8006a18:	2230      	movs	r2, #48	; 0x30
 8006a1a:	2100      	movs	r1, #0
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f008 faf1 	bl	800f004 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8006a22:	4b16      	ldr	r3, [pc, #88]	; (8006a7c <MX_DAC1_Init+0x6c>)
 8006a24:	4a16      	ldr	r2, [pc, #88]	; (8006a80 <MX_DAC1_Init+0x70>)
 8006a26:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8006a28:	4814      	ldr	r0, [pc, #80]	; (8006a7c <MX_DAC1_Init+0x6c>)
 8006a2a:	f003 f848 	bl	8009abe <HAL_DAC_Init>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d001      	beq.n	8006a38 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8006a34:	f000 fd62 	bl	80074fc <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8006a38:	2302      	movs	r3, #2
 8006a3a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8006a40:	2300      	movs	r3, #0
 8006a42:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006a44:	2300      	movs	r3, #0
 8006a46:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006a50:	2300      	movs	r3, #0
 8006a52:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006a54:	2301      	movs	r3, #1
 8006a56:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8006a5c:	463b      	mov	r3, r7
 8006a5e:	2210      	movs	r2, #16
 8006a60:	4619      	mov	r1, r3
 8006a62:	4806      	ldr	r0, [pc, #24]	; (8006a7c <MX_DAC1_Init+0x6c>)
 8006a64:	f003 fa14 	bl	8009e90 <HAL_DAC_ConfigChannel>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d001      	beq.n	8006a72 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8006a6e:	f000 fd45 	bl	80074fc <Error_Handler>
  }

}
 8006a72:	bf00      	nop
 8006a74:	3730      	adds	r7, #48	; 0x30
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	200026ac 	.word	0x200026ac
 8006a80:	50000800 	.word	0x50000800

08006a84 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b08c      	sub	sp, #48	; 0x30
 8006a88:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8006a8a:	463b      	mov	r3, r7
 8006a8c:	2230      	movs	r2, #48	; 0x30
 8006a8e:	2100      	movs	r1, #0
 8006a90:	4618      	mov	r0, r3
 8006a92:	f008 fab7 	bl	800f004 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 8006a96:	4b16      	ldr	r3, [pc, #88]	; (8006af0 <MX_DAC2_Init+0x6c>)
 8006a98:	4a16      	ldr	r2, [pc, #88]	; (8006af4 <MX_DAC2_Init+0x70>)
 8006a9a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8006a9c:	4814      	ldr	r0, [pc, #80]	; (8006af0 <MX_DAC2_Init+0x6c>)
 8006a9e:	f003 f80e 	bl	8009abe <HAL_DAC_Init>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d001      	beq.n	8006aac <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8006aa8:	f000 fd28 	bl	80074fc <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006aac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006ab0:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006aba:	2300      	movs	r3, #0
 8006abc:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8006abe:	2306      	movs	r3, #6
 8006ac0:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006aca:	2301      	movs	r3, #1
 8006acc:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8006ad2:	463b      	mov	r3, r7
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	4805      	ldr	r0, [pc, #20]	; (8006af0 <MX_DAC2_Init+0x6c>)
 8006ada:	f003 f9d9 	bl	8009e90 <HAL_DAC_ConfigChannel>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d001      	beq.n	8006ae8 <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 8006ae4:	f000 fd0a 	bl	80074fc <Error_Handler>
  }

}
 8006ae8:	bf00      	nop
 8006aea:	3730      	adds	r7, #48	; 0x30
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	20002698 	.word	0x20002698
 8006af4:	50000c00 	.word	0x50000c00

08006af8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b08c      	sub	sp, #48	; 0x30
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b00:	f107 031c 	add.w	r3, r7, #28
 8006b04:	2200      	movs	r2, #0
 8006b06:	601a      	str	r2, [r3, #0]
 8006b08:	605a      	str	r2, [r3, #4]
 8006b0a:	609a      	str	r2, [r3, #8]
 8006b0c:	60da      	str	r2, [r3, #12]
 8006b0e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a40      	ldr	r2, [pc, #256]	; (8006c18 <HAL_DAC_MspInit+0x120>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d125      	bne.n	8006b66 <HAL_DAC_MspInit+0x6e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8006b1a:	4b40      	ldr	r3, [pc, #256]	; (8006c1c <HAL_DAC_MspInit+0x124>)
 8006b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b1e:	4a3f      	ldr	r2, [pc, #252]	; (8006c1c <HAL_DAC_MspInit+0x124>)
 8006b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b26:	4b3d      	ldr	r3, [pc, #244]	; (8006c1c <HAL_DAC_MspInit+0x124>)
 8006b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b2e:	61bb      	str	r3, [r7, #24]
 8006b30:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b32:	4b3a      	ldr	r3, [pc, #232]	; (8006c1c <HAL_DAC_MspInit+0x124>)
 8006b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b36:	4a39      	ldr	r2, [pc, #228]	; (8006c1c <HAL_DAC_MspInit+0x124>)
 8006b38:	f043 0301 	orr.w	r3, r3, #1
 8006b3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b3e:	4b37      	ldr	r3, [pc, #220]	; (8006c1c <HAL_DAC_MspInit+0x124>)
 8006b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b42:	f003 0301 	and.w	r3, r3, #1
 8006b46:	617b      	str	r3, [r7, #20]
 8006b48:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8006b4a:	2320      	movs	r3, #32
 8006b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b52:	2300      	movs	r3, #0
 8006b54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b56:	f107 031c 	add.w	r3, r7, #28
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006b60:	f003 fe98 	bl	800a894 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 8006b64:	e054      	b.n	8006c10 <HAL_DAC_MspInit+0x118>
  else if(dacHandle->Instance==DAC2)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a2d      	ldr	r2, [pc, #180]	; (8006c20 <HAL_DAC_MspInit+0x128>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d14f      	bne.n	8006c10 <HAL_DAC_MspInit+0x118>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8006b70:	4b2a      	ldr	r3, [pc, #168]	; (8006c1c <HAL_DAC_MspInit+0x124>)
 8006b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b74:	4a29      	ldr	r2, [pc, #164]	; (8006c1c <HAL_DAC_MspInit+0x124>)
 8006b76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b7c:	4b27      	ldr	r3, [pc, #156]	; (8006c1c <HAL_DAC_MspInit+0x124>)
 8006b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b84:	613b      	str	r3, [r7, #16]
 8006b86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b88:	4b24      	ldr	r3, [pc, #144]	; (8006c1c <HAL_DAC_MspInit+0x124>)
 8006b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b8c:	4a23      	ldr	r2, [pc, #140]	; (8006c1c <HAL_DAC_MspInit+0x124>)
 8006b8e:	f043 0301 	orr.w	r3, r3, #1
 8006b92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b94:	4b21      	ldr	r3, [pc, #132]	; (8006c1c <HAL_DAC_MspInit+0x124>)
 8006b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b98:	f003 0301 	and.w	r3, r3, #1
 8006b9c:	60fb      	str	r3, [r7, #12]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006ba0:	2340      	movs	r3, #64	; 0x40
 8006ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bac:	f107 031c 	add.w	r3, r7, #28
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006bb6:	f003 fe6d 	bl	800a894 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 8006bba:	4b1a      	ldr	r3, [pc, #104]	; (8006c24 <HAL_DAC_MspInit+0x12c>)
 8006bbc:	4a1a      	ldr	r2, [pc, #104]	; (8006c28 <HAL_DAC_MspInit+0x130>)
 8006bbe:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8006bc0:	4b18      	ldr	r3, [pc, #96]	; (8006c24 <HAL_DAC_MspInit+0x12c>)
 8006bc2:	2229      	movs	r2, #41	; 0x29
 8006bc4:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006bc6:	4b17      	ldr	r3, [pc, #92]	; (8006c24 <HAL_DAC_MspInit+0x12c>)
 8006bc8:	2210      	movs	r2, #16
 8006bca:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006bcc:	4b15      	ldr	r3, [pc, #84]	; (8006c24 <HAL_DAC_MspInit+0x12c>)
 8006bce:	2200      	movs	r2, #0
 8006bd0:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006bd2:	4b14      	ldr	r3, [pc, #80]	; (8006c24 <HAL_DAC_MspInit+0x12c>)
 8006bd4:	2280      	movs	r2, #128	; 0x80
 8006bd6:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006bd8:	4b12      	ldr	r3, [pc, #72]	; (8006c24 <HAL_DAC_MspInit+0x12c>)
 8006bda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bde:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006be0:	4b10      	ldr	r3, [pc, #64]	; (8006c24 <HAL_DAC_MspInit+0x12c>)
 8006be2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006be6:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8006be8:	4b0e      	ldr	r3, [pc, #56]	; (8006c24 <HAL_DAC_MspInit+0x12c>)
 8006bea:	2220      	movs	r2, #32
 8006bec:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8006bee:	4b0d      	ldr	r3, [pc, #52]	; (8006c24 <HAL_DAC_MspInit+0x12c>)
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8006bf4:	480b      	ldr	r0, [pc, #44]	; (8006c24 <HAL_DAC_MspInit+0x12c>)
 8006bf6:	f003 fb81 	bl	800a2fc <HAL_DMA_Init>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d001      	beq.n	8006c04 <HAL_DAC_MspInit+0x10c>
      Error_Handler();
 8006c00:	f000 fc7c 	bl	80074fc <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4a07      	ldr	r2, [pc, #28]	; (8006c24 <HAL_DAC_MspInit+0x12c>)
 8006c08:	609a      	str	r2, [r3, #8]
 8006c0a:	4a06      	ldr	r2, [pc, #24]	; (8006c24 <HAL_DAC_MspInit+0x12c>)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6293      	str	r3, [r2, #40]	; 0x28
}
 8006c10:	bf00      	nop
 8006c12:	3730      	adds	r7, #48	; 0x30
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	50000800 	.word	0x50000800
 8006c1c:	40021000 	.word	0x40021000
 8006c20:	50000c00 	.word	0x50000c00
 8006c24:	200026c0 	.word	0x200026c0
 8006c28:	40020030 	.word	0x40020030

08006c2c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8006c32:	4b16      	ldr	r3, [pc, #88]	; (8006c8c <MX_DMA_Init+0x60>)
 8006c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c36:	4a15      	ldr	r2, [pc, #84]	; (8006c8c <MX_DMA_Init+0x60>)
 8006c38:	f043 0304 	orr.w	r3, r3, #4
 8006c3c:	6493      	str	r3, [r2, #72]	; 0x48
 8006c3e:	4b13      	ldr	r3, [pc, #76]	; (8006c8c <MX_DMA_Init+0x60>)
 8006c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c42:	f003 0304 	and.w	r3, r3, #4
 8006c46:	607b      	str	r3, [r7, #4]
 8006c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006c4a:	4b10      	ldr	r3, [pc, #64]	; (8006c8c <MX_DMA_Init+0x60>)
 8006c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c4e:	4a0f      	ldr	r2, [pc, #60]	; (8006c8c <MX_DMA_Init+0x60>)
 8006c50:	f043 0301 	orr.w	r3, r3, #1
 8006c54:	6493      	str	r3, [r2, #72]	; 0x48
 8006c56:	4b0d      	ldr	r3, [pc, #52]	; (8006c8c <MX_DMA_Init+0x60>)
 8006c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c5a:	f003 0301 	and.w	r3, r3, #1
 8006c5e:	603b      	str	r3, [r7, #0]
 8006c60:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8006c62:	2200      	movs	r2, #0
 8006c64:	2101      	movs	r1, #1
 8006c66:	200b      	movs	r0, #11
 8006c68:	f002 fee7 	bl	8009a3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8006c6c:	200b      	movs	r0, #11
 8006c6e:	f002 fefe 	bl	8009a6e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8006c72:	2200      	movs	r2, #0
 8006c74:	2100      	movs	r1, #0
 8006c76:	200d      	movs	r0, #13
 8006c78:	f002 fedf 	bl	8009a3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8006c7c:	200d      	movs	r0, #13
 8006c7e:	f002 fef6 	bl	8009a6e <HAL_NVIC_EnableIRQ>

}
 8006c82:	bf00      	nop
 8006c84:	3708      	adds	r7, #8
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	40021000 	.word	0x40021000

08006c90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006c90:	b480      	push	{r7}
 8006c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006c94:	4b04      	ldr	r3, [pc, #16]	; (8006ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	0a1b      	lsrs	r3, r3, #8
 8006c9a:	f003 0307 	and.w	r3, r3, #7
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr
 8006ca8:	e000ed00 	.word	0xe000ed00

08006cac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	db0b      	blt.n	8006cd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006cbe:	79fb      	ldrb	r3, [r7, #7]
 8006cc0:	f003 021f 	and.w	r2, r3, #31
 8006cc4:	4907      	ldr	r1, [pc, #28]	; (8006ce4 <__NVIC_EnableIRQ+0x38>)
 8006cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cca:	095b      	lsrs	r3, r3, #5
 8006ccc:	2001      	movs	r0, #1
 8006cce:	fa00 f202 	lsl.w	r2, r0, r2
 8006cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006cd6:	bf00      	nop
 8006cd8:	370c      	adds	r7, #12
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	e000e100 	.word	0xe000e100

08006ce8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	4603      	mov	r3, r0
 8006cf0:	6039      	str	r1, [r7, #0]
 8006cf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	db0a      	blt.n	8006d12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	b2da      	uxtb	r2, r3
 8006d00:	490c      	ldr	r1, [pc, #48]	; (8006d34 <__NVIC_SetPriority+0x4c>)
 8006d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d06:	0112      	lsls	r2, r2, #4
 8006d08:	b2d2      	uxtb	r2, r2
 8006d0a:	440b      	add	r3, r1
 8006d0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006d10:	e00a      	b.n	8006d28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	b2da      	uxtb	r2, r3
 8006d16:	4908      	ldr	r1, [pc, #32]	; (8006d38 <__NVIC_SetPriority+0x50>)
 8006d18:	79fb      	ldrb	r3, [r7, #7]
 8006d1a:	f003 030f 	and.w	r3, r3, #15
 8006d1e:	3b04      	subs	r3, #4
 8006d20:	0112      	lsls	r2, r2, #4
 8006d22:	b2d2      	uxtb	r2, r2
 8006d24:	440b      	add	r3, r1
 8006d26:	761a      	strb	r2, [r3, #24]
}
 8006d28:	bf00      	nop
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr
 8006d34:	e000e100 	.word	0xe000e100
 8006d38:	e000ed00 	.word	0xe000ed00

08006d3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b089      	sub	sp, #36	; 0x24
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f003 0307 	and.w	r3, r3, #7
 8006d4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	f1c3 0307 	rsb	r3, r3, #7
 8006d56:	2b04      	cmp	r3, #4
 8006d58:	bf28      	it	cs
 8006d5a:	2304      	movcs	r3, #4
 8006d5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	3304      	adds	r3, #4
 8006d62:	2b06      	cmp	r3, #6
 8006d64:	d902      	bls.n	8006d6c <NVIC_EncodePriority+0x30>
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	3b03      	subs	r3, #3
 8006d6a:	e000      	b.n	8006d6e <NVIC_EncodePriority+0x32>
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	fa02 f303 	lsl.w	r3, r2, r3
 8006d7a:	43da      	mvns	r2, r3
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	401a      	ands	r2, r3
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006d84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d8e:	43d9      	mvns	r1, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d94:	4313      	orrs	r3, r2
         );
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3724      	adds	r7, #36	; 0x24
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
	...

08006da4 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 8006dae:	4a14      	ldr	r2, [pc, #80]	; (8006e00 <LL_SYSCFG_SetEXTISource+0x5c>)
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	f003 0303 	and.w	r3, r3, #3
 8006db6:	3302      	adds	r3, #2
 8006db8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	0c1b      	lsrs	r3, r3, #16
 8006dc0:	43db      	mvns	r3, r3
 8006dc2:	ea02 0103 	and.w	r1, r2, r3
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	0c1b      	lsrs	r3, r3, #16
 8006dca:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	fa93 f3a3 	rbit	r3, r3
 8006dd2:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	fab3 f383 	clz	r3, r3
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	f003 031f 	and.w	r3, r3, #31
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	409a      	lsls	r2, r3
 8006de4:	4806      	ldr	r0, [pc, #24]	; (8006e00 <LL_SYSCFG_SetEXTISource+0x5c>)
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	f003 0303 	and.w	r3, r3, #3
 8006dec:	430a      	orrs	r2, r1
 8006dee:	3302      	adds	r3, #2
 8006df0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8006df4:	bf00      	nop
 8006df6:	3714      	adds	r7, #20
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr
 8006e00:	40010000 	.word	0x40010000

08006e04 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b089      	sub	sp, #36	; 0x24
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	fa93 f3a3 	rbit	r3, r3
 8006e1e:	613b      	str	r3, [r7, #16]
  return result;
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	fab3 f383 	clz	r3, r3
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	005b      	lsls	r3, r3, #1
 8006e2a:	2103      	movs	r1, #3
 8006e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e30:	43db      	mvns	r3, r3
 8006e32:	401a      	ands	r2, r3
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	fa93 f3a3 	rbit	r3, r3
 8006e3e:	61bb      	str	r3, [r7, #24]
  return result;
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	fab3 f383 	clz	r3, r3
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	005b      	lsls	r3, r3, #1
 8006e4a:	6879      	ldr	r1, [r7, #4]
 8006e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e50:	431a      	orrs	r2, r3
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	601a      	str	r2, [r3, #0]
}
 8006e56:	bf00      	nop
 8006e58:	3724      	adds	r7, #36	; 0x24
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr

08006e62 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8006e62:	b480      	push	{r7}
 8006e64:	b089      	sub	sp, #36	; 0x24
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	60f8      	str	r0, [r7, #12]
 8006e6a:	60b9      	str	r1, [r7, #8]
 8006e6c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	68da      	ldr	r2, [r3, #12]
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	fa93 f3a3 	rbit	r3, r3
 8006e7c:	613b      	str	r3, [r7, #16]
  return result;
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	fab3 f383 	clz	r3, r3
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	005b      	lsls	r3, r3, #1
 8006e88:	2103      	movs	r1, #3
 8006e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e8e:	43db      	mvns	r3, r3
 8006e90:	401a      	ands	r2, r3
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	fa93 f3a3 	rbit	r3, r3
 8006e9c:	61bb      	str	r3, [r7, #24]
  return result;
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	fab3 f383 	clz	r3, r3
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	005b      	lsls	r3, r3, #1
 8006ea8:	6879      	ldr	r1, [r7, #4]
 8006eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8006eae:	431a      	orrs	r2, r3
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	60da      	str	r2, [r3, #12]
}
 8006eb4:	bf00      	nop
 8006eb6:	3724      	adds	r7, #36	; 0x24
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	683a      	ldr	r2, [r7, #0]
 8006ece:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006ed0:	bf00      	nop
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006ee4:	4b08      	ldr	r3, [pc, #32]	; (8006f08 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006ee6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ee8:	4907      	ldr	r1, [pc, #28]	; (8006f08 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4313      	orrs	r3, r2
 8006eee:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006ef0:	4b05      	ldr	r3, [pc, #20]	; (8006f08 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006ef2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006efa:	68fb      	ldr	r3, [r7, #12]
}
 8006efc:	bf00      	nop
 8006efe:	3714      	adds	r7, #20
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr
 8006f08:	40021000 	.word	0x40021000

08006f0c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b08a      	sub	sp, #40	; 0x28
 8006f10:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8006f12:	f107 031c 	add.w	r3, r7, #28
 8006f16:	2200      	movs	r2, #0
 8006f18:	601a      	str	r2, [r3, #0]
 8006f1a:	605a      	str	r2, [r3, #4]
 8006f1c:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f1e:	1d3b      	adds	r3, r7, #4
 8006f20:	2200      	movs	r2, #0
 8006f22:	601a      	str	r2, [r3, #0]
 8006f24:	605a      	str	r2, [r3, #4]
 8006f26:	609a      	str	r2, [r3, #8]
 8006f28:	60da      	str	r2, [r3, #12]
 8006f2a:	611a      	str	r2, [r3, #16]
 8006f2c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8006f2e:	2004      	movs	r0, #4
 8006f30:	f7ff ffd4 	bl	8006edc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8006f34:	2020      	movs	r0, #32
 8006f36:	f7ff ffd1 	bl	8006edc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8006f3a:	2001      	movs	r0, #1
 8006f3c:	f7ff ffce 	bl	8006edc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8006f40:	2002      	movs	r0, #2
 8006f42:	f7ff ffcb 	bl	8006edc <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 8006f46:	2108      	movs	r1, #8
 8006f48:	48d3      	ldr	r0, [pc, #844]	; (8007298 <MX_GPIO_Init+0x38c>)
 8006f4a:	f7ff ffb9 	bl	8006ec0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 8006f4e:	2108      	movs	r1, #8
 8006f50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006f54:	f7ff ffb4 	bl	8006ec0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 8006f58:	2110      	movs	r1, #16
 8006f5a:	48cf      	ldr	r0, [pc, #828]	; (8007298 <MX_GPIO_Init+0x38c>)
 8006f5c:	f7ff ffb0 	bl	8006ec0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 8006f60:	2120      	movs	r1, #32
 8006f62:	48cd      	ldr	r0, [pc, #820]	; (8007298 <MX_GPIO_Init+0x38c>)
 8006f64:	f7ff ffac 	bl	8006ec0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 8006f68:	2101      	movs	r1, #1
 8006f6a:	48cc      	ldr	r0, [pc, #816]	; (800729c <MX_GPIO_Init+0x390>)
 8006f6c:	f7ff ffa8 	bl	8006ec0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 8006f70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006f74:	48c8      	ldr	r0, [pc, #800]	; (8007298 <MX_GPIO_Init+0x38c>)
 8006f76:	f7ff ffa3 	bl	8006ec0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 8006f7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006f7e:	48c6      	ldr	r0, [pc, #792]	; (8007298 <MX_GPIO_Init+0x38c>)
 8006f80:	f7ff ff9e 	bl	8006ec0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 8006f84:	2140      	movs	r1, #64	; 0x40
 8006f86:	48c5      	ldr	r0, [pc, #788]	; (800729c <MX_GPIO_Init+0x390>)
 8006f88:	f7ff ff9a 	bl	8006ec0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 8006f8c:	2180      	movs	r1, #128	; 0x80
 8006f8e:	48c3      	ldr	r0, [pc, #780]	; (800729c <MX_GPIO_Init+0x390>)
 8006f90:	f7ff ff96 	bl	8006ec0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 8006f94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006f98:	48c0      	ldr	r0, [pc, #768]	; (800729c <MX_GPIO_Init+0x390>)
 8006f9a:	f7ff ff91 	bl	8006ec0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 8006f9e:	49c0      	ldr	r1, [pc, #768]	; (80072a0 <MX_GPIO_Init+0x394>)
 8006fa0:	2002      	movs	r0, #2
 8006fa2:	f7ff feff 	bl	8006da4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 8006fa6:	49bf      	ldr	r1, [pc, #764]	; (80072a4 <MX_GPIO_Init+0x398>)
 8006fa8:	2002      	movs	r0, #2
 8006faa:	f7ff fefb 	bl	8006da4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 8006fae:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8006fb2:	2005      	movs	r0, #5
 8006fb4:	f7ff fef6 	bl	8006da4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 8006fb8:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8006fbc:	2005      	movs	r0, #5
 8006fbe:	f7ff fef1 	bl	8006da4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 8006fc2:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8006fc6:	2002      	movs	r0, #2
 8006fc8:	f7ff feec 	bl	8006da4 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8006fcc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006fd0:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8006fde:	2302      	movs	r3, #2
 8006fe0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8006fe4:	f107 031c 	add.w	r3, r7, #28
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f006 fd29 	bl	800da40 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8006fee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ff2:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007000:	2302      	movs	r3, #2
 8007002:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007006:	f107 031c 	add.w	r3, r7, #28
 800700a:	4618      	mov	r0, r3
 800700c:	f006 fd18 	bl	800da40 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8007010:	2301      	movs	r3, #1
 8007012:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007014:	2301      	movs	r3, #1
 8007016:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800701a:	2300      	movs	r3, #0
 800701c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007020:	2302      	movs	r3, #2
 8007022:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007026:	f107 031c 	add.w	r3, r7, #28
 800702a:	4618      	mov	r0, r3
 800702c:	f006 fd08 	bl	800da40 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8007030:	2302      	movs	r3, #2
 8007032:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007034:	2301      	movs	r3, #1
 8007036:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800703a:	2300      	movs	r3, #0
 800703c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007040:	2302      	movs	r3, #2
 8007042:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007046:	f107 031c 	add.w	r3, r7, #28
 800704a:	4618      	mov	r0, r3
 800704c:	f006 fcf8 	bl	800da40 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8007050:	2304      	movs	r3, #4
 8007052:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007054:	2301      	movs	r3, #1
 8007056:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800705a:	2300      	movs	r3, #0
 800705c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007060:	2302      	movs	r3, #2
 8007062:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007066:	f107 031c 	add.w	r3, r7, #28
 800706a:	4618      	mov	r0, r3
 800706c:	f006 fce8 	bl	800da40 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 8007070:	2201      	movs	r2, #1
 8007072:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007076:	4888      	ldr	r0, [pc, #544]	; (8007298 <MX_GPIO_Init+0x38c>)
 8007078:	f7ff fef3 	bl	8006e62 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 800707c:	2201      	movs	r2, #1
 800707e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007082:	4885      	ldr	r0, [pc, #532]	; (8007298 <MX_GPIO_Init+0x38c>)
 8007084:	f7ff feed 	bl	8006e62 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 8007088:	2201      	movs	r2, #1
 800708a:	2101      	movs	r1, #1
 800708c:	4886      	ldr	r0, [pc, #536]	; (80072a8 <MX_GPIO_Init+0x39c>)
 800708e:	f7ff fee8 	bl	8006e62 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 8007092:	2201      	movs	r2, #1
 8007094:	2102      	movs	r1, #2
 8007096:	4884      	ldr	r0, [pc, #528]	; (80072a8 <MX_GPIO_Init+0x39c>)
 8007098:	f7ff fee3 	bl	8006e62 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 800709c:	2201      	movs	r2, #1
 800709e:	2104      	movs	r1, #4
 80070a0:	487d      	ldr	r0, [pc, #500]	; (8007298 <MX_GPIO_Init+0x38c>)
 80070a2:	f7ff fede 	bl	8006e62 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 80070a6:	2200      	movs	r2, #0
 80070a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80070ac:	487a      	ldr	r0, [pc, #488]	; (8007298 <MX_GPIO_Init+0x38c>)
 80070ae:	f7ff fea9 	bl	8006e04 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 80070b2:	2200      	movs	r2, #0
 80070b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80070b8:	4877      	ldr	r0, [pc, #476]	; (8007298 <MX_GPIO_Init+0x38c>)
 80070ba:	f7ff fea3 	bl	8006e04 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 80070be:	2200      	movs	r2, #0
 80070c0:	2101      	movs	r1, #1
 80070c2:	4879      	ldr	r0, [pc, #484]	; (80072a8 <MX_GPIO_Init+0x39c>)
 80070c4:	f7ff fe9e 	bl	8006e04 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 80070c8:	2200      	movs	r2, #0
 80070ca:	2102      	movs	r1, #2
 80070cc:	4876      	ldr	r0, [pc, #472]	; (80072a8 <MX_GPIO_Init+0x39c>)
 80070ce:	f7ff fe99 	bl	8006e04 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 80070d2:	2200      	movs	r2, #0
 80070d4:	2104      	movs	r1, #4
 80070d6:	4870      	ldr	r0, [pc, #448]	; (8007298 <MX_GPIO_Init+0x38c>)
 80070d8:	f7ff fe94 	bl	8006e04 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 80070dc:	2308      	movs	r3, #8
 80070de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80070e0:	2301      	movs	r3, #1
 80070e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80070e4:	2300      	movs	r3, #0
 80070e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80070e8:	2300      	movs	r3, #0
 80070ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80070ec:	2302      	movs	r3, #2
 80070ee:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 80070f0:	1d3b      	adds	r3, r7, #4
 80070f2:	4619      	mov	r1, r3
 80070f4:	4868      	ldr	r0, [pc, #416]	; (8007298 <MX_GPIO_Init+0x38c>)
 80070f6:	f006 fe96 	bl	800de26 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 80070fa:	2308      	movs	r3, #8
 80070fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80070fe:	2301      	movs	r3, #1
 8007100:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007102:	2300      	movs	r3, #0
 8007104:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007106:	2300      	movs	r3, #0
 8007108:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800710a:	2300      	movs	r3, #0
 800710c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 800710e:	1d3b      	adds	r3, r7, #4
 8007110:	4619      	mov	r1, r3
 8007112:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007116:	f006 fe86 	bl	800de26 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 800711a:	2310      	movs	r3, #16
 800711c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800711e:	2301      	movs	r3, #1
 8007120:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007122:	2300      	movs	r3, #0
 8007124:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007126:	2300      	movs	r3, #0
 8007128:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800712a:	2300      	movs	r3, #0
 800712c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 800712e:	1d3b      	adds	r3, r7, #4
 8007130:	4619      	mov	r1, r3
 8007132:	4859      	ldr	r0, [pc, #356]	; (8007298 <MX_GPIO_Init+0x38c>)
 8007134:	f006 fe77 	bl	800de26 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 8007138:	2320      	movs	r3, #32
 800713a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800713c:	2301      	movs	r3, #1
 800713e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007140:	2300      	movs	r3, #0
 8007142:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007144:	2300      	movs	r3, #0
 8007146:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007148:	2300      	movs	r3, #0
 800714a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 800714c:	1d3b      	adds	r3, r7, #4
 800714e:	4619      	mov	r1, r3
 8007150:	4851      	ldr	r0, [pc, #324]	; (8007298 <MX_GPIO_Init+0x38c>)
 8007152:	f006 fe68 	bl	800de26 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 8007156:	2301      	movs	r3, #1
 8007158:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800715a:	2301      	movs	r3, #1
 800715c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800715e:	2300      	movs	r3, #0
 8007160:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007162:	2300      	movs	r3, #0
 8007164:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007166:	2300      	movs	r3, #0
 8007168:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 800716a:	1d3b      	adds	r3, r7, #4
 800716c:	4619      	mov	r1, r3
 800716e:	484b      	ldr	r0, [pc, #300]	; (800729c <MX_GPIO_Init+0x390>)
 8007170:	f006 fe59 	bl	800de26 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8007174:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007178:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800717a:	2301      	movs	r3, #1
 800717c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800717e:	2300      	movs	r3, #0
 8007180:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007182:	2300      	movs	r3, #0
 8007184:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007186:	2300      	movs	r3, #0
 8007188:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 800718a:	1d3b      	adds	r3, r7, #4
 800718c:	4619      	mov	r1, r3
 800718e:	4842      	ldr	r0, [pc, #264]	; (8007298 <MX_GPIO_Init+0x38c>)
 8007190:	f006 fe49 	bl	800de26 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 8007194:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007198:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800719a:	2301      	movs	r3, #1
 800719c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800719e:	2300      	movs	r3, #0
 80071a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80071a2:	2300      	movs	r3, #0
 80071a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80071a6:	2300      	movs	r3, #0
 80071a8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 80071aa:	1d3b      	adds	r3, r7, #4
 80071ac:	4619      	mov	r1, r3
 80071ae:	483a      	ldr	r0, [pc, #232]	; (8007298 <MX_GPIO_Init+0x38c>)
 80071b0:	f006 fe39 	bl	800de26 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 80071b4:	2340      	movs	r3, #64	; 0x40
 80071b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80071b8:	2301      	movs	r3, #1
 80071ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80071bc:	2303      	movs	r3, #3
 80071be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80071c0:	2300      	movs	r3, #0
 80071c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80071c4:	2300      	movs	r3, #0
 80071c6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 80071c8:	1d3b      	adds	r3, r7, #4
 80071ca:	4619      	mov	r1, r3
 80071cc:	4833      	ldr	r0, [pc, #204]	; (800729c <MX_GPIO_Init+0x390>)
 80071ce:	f006 fe2a 	bl	800de26 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 80071d2:	2380      	movs	r3, #128	; 0x80
 80071d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80071d6:	2301      	movs	r3, #1
 80071d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80071da:	2303      	movs	r3, #3
 80071dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80071de:	2300      	movs	r3, #0
 80071e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80071e2:	2300      	movs	r3, #0
 80071e4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80071e6:	1d3b      	adds	r3, r7, #4
 80071e8:	4619      	mov	r1, r3
 80071ea:	482c      	ldr	r0, [pc, #176]	; (800729c <MX_GPIO_Init+0x390>)
 80071ec:	f006 fe1b 	bl	800de26 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 80071f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80071f6:	2301      	movs	r3, #1
 80071f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80071fa:	2303      	movs	r3, #3
 80071fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80071fe:	2300      	movs	r3, #0
 8007200:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007202:	2300      	movs	r3, #0
 8007204:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8007206:	1d3b      	adds	r3, r7, #4
 8007208:	4619      	mov	r1, r3
 800720a:	4824      	ldr	r0, [pc, #144]	; (800729c <MX_GPIO_Init+0x390>)
 800720c:	f006 fe0b 	bl	800de26 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007210:	f7ff fd3e 	bl	8006c90 <__NVIC_GetPriorityGrouping>
 8007214:	4603      	mov	r3, r0
 8007216:	2200      	movs	r2, #0
 8007218:	2100      	movs	r1, #0
 800721a:	4618      	mov	r0, r3
 800721c:	f7ff fd8e 	bl	8006d3c <NVIC_EncodePriority>
 8007220:	4603      	mov	r3, r0
 8007222:	4619      	mov	r1, r3
 8007224:	2006      	movs	r0, #6
 8007226:	f7ff fd5f 	bl	8006ce8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 800722a:	2006      	movs	r0, #6
 800722c:	f7ff fd3e 	bl	8006cac <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007230:	f7ff fd2e 	bl	8006c90 <__NVIC_GetPriorityGrouping>
 8007234:	4603      	mov	r3, r0
 8007236:	2200      	movs	r2, #0
 8007238:	2100      	movs	r1, #0
 800723a:	4618      	mov	r0, r3
 800723c:	f7ff fd7e 	bl	8006d3c <NVIC_EncodePriority>
 8007240:	4603      	mov	r3, r0
 8007242:	4619      	mov	r1, r3
 8007244:	2007      	movs	r0, #7
 8007246:	f7ff fd4f 	bl	8006ce8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 800724a:	2007      	movs	r0, #7
 800724c:	f7ff fd2e 	bl	8006cac <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007250:	f7ff fd1e 	bl	8006c90 <__NVIC_GetPriorityGrouping>
 8007254:	4603      	mov	r3, r0
 8007256:	2200      	movs	r2, #0
 8007258:	2100      	movs	r1, #0
 800725a:	4618      	mov	r0, r3
 800725c:	f7ff fd6e 	bl	8006d3c <NVIC_EncodePriority>
 8007260:	4603      	mov	r3, r0
 8007262:	4619      	mov	r1, r3
 8007264:	2008      	movs	r0, #8
 8007266:	f7ff fd3f 	bl	8006ce8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 800726a:	2008      	movs	r0, #8
 800726c:	f7ff fd1e 	bl	8006cac <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007270:	f7ff fd0e 	bl	8006c90 <__NVIC_GetPriorityGrouping>
 8007274:	4603      	mov	r3, r0
 8007276:	2200      	movs	r2, #0
 8007278:	2100      	movs	r1, #0
 800727a:	4618      	mov	r0, r3
 800727c:	f7ff fd5e 	bl	8006d3c <NVIC_EncodePriority>
 8007280:	4603      	mov	r3, r0
 8007282:	4619      	mov	r1, r3
 8007284:	2028      	movs	r0, #40	; 0x28
 8007286:	f7ff fd2f 	bl	8006ce8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 800728a:	2028      	movs	r0, #40	; 0x28
 800728c:	f7ff fd0e 	bl	8006cac <__NVIC_EnableIRQ>

}
 8007290:	bf00      	nop
 8007292:	3728      	adds	r7, #40	; 0x28
 8007294:	46bd      	mov	sp, r7
 8007296:	e009      	b.n	80072ac <MX_GPIO_Init+0x3a0>
 8007298:	48000800 	.word	0x48000800
 800729c:	48000400 	.word	0x48000400
 80072a0:	0f000003 	.word	0x0f000003
 80072a4:	f0000003 	.word	0xf0000003
 80072a8:	48001400 	.word	0x48001400
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop

080072b0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80072b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80072bc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80072c0:	f003 0301 	and.w	r3, r3, #1
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d013      	beq.n	80072f0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80072c8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80072cc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80072d0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00b      	beq.n	80072f0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80072d8:	e000      	b.n	80072dc <ITM_SendChar+0x2c>
    {
      __NOP();
 80072da:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80072dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d0f9      	beq.n	80072da <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80072e6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	b2d2      	uxtb	r2, r2
 80072ee:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80072f0:	687b      	ldr	r3, [r7, #4]
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	370c      	adds	r7, #12
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr

080072fe <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// redirect printf to SWV
int _write(int file, char *ptr, int len)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b086      	sub	sp, #24
 8007302:	af00      	add	r7, sp, #0
 8007304:	60f8      	str	r0, [r7, #12]
 8007306:	60b9      	str	r1, [r7, #8]
 8007308:	607a      	str	r2, [r7, #4]
  int i=0;
 800730a:	2300      	movs	r3, #0
 800730c:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 800730e:	2300      	movs	r3, #0
 8007310:	617b      	str	r3, [r7, #20]
 8007312:	e009      	b.n	8007328 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	1c5a      	adds	r2, r3, #1
 8007318:	60ba      	str	r2, [r7, #8]
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	4618      	mov	r0, r3
 800731e:	f7ff ffc7 	bl	80072b0 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	3301      	adds	r3, #1
 8007326:	617b      	str	r3, [r7, #20]
 8007328:	697a      	ldr	r2, [r7, #20]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	429a      	cmp	r2, r3
 800732e:	dbf1      	blt.n	8007314 <_write+0x16>
  return len;
 8007330:	687b      	ldr	r3, [r7, #4]
}
 8007332:	4618      	mov	r0, r3
 8007334:	3718      	adds	r7, #24
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
	...

0800733c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007340:	f000 feab 	bl	800809a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007344:	f000 f86c 	bl	8007420 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007348:	f7ff fde0 	bl	8006f0c <MX_GPIO_Init>
  MX_DMA_Init();
 800734c:	f7ff fc6e 	bl	8006c2c <MX_DMA_Init>
  MX_DAC1_Init();
 8007350:	f7ff fb5e 	bl	8006a10 <MX_DAC1_Init>
  MX_DAC2_Init();
 8007354:	f7ff fb96 	bl	8006a84 <MX_DAC2_Init>
  MX_ADC1_Init();
 8007358:	f7ff fa1c 	bl	8006794 <MX_ADC1_Init>
  MX_COMP1_Init();
 800735c:	f7ff fafe 	bl	800695c <MX_COMP1_Init>
  MX_TIM2_Init();
 8007360:	f000 fba0 	bl	8007aa4 <MX_TIM2_Init>
  MX_SPI3_Init();
 8007364:	f000 f908 	bl	8007578 <MX_SPI3_Init>
  MX_RNG_Init();
 8007368:	f000 f8f8 	bl	800755c <MX_RNG_Init>
  MX_TIM1_Init();
 800736c:	f000 fb2a 	bl	80079c4 <MX_TIM1_Init>
  MX_TIM8_Init();
 8007370:	f000 fc80 	bl	8007c74 <MX_TIM8_Init>
  MX_TIM16_Init();
 8007374:	f000 fd38 	bl	8007de8 <MX_TIM16_Init>
  MX_TIM15_Init();
 8007378:	f000 fce4 	bl	8007d44 <MX_TIM15_Init>
  MX_TIM5_Init();
 800737c:	f000 fc2c 	bl	8007bd8 <MX_TIM5_Init>
  MX_TIM3_Init();
 8007380:	f000 fbdc 	bl	8007b3c <MX_TIM3_Init>

//  SM_EnablePwmToSignal();


//  SM_DisablePwmToSignal();
  SM_EnableDacToSignal();
 8007384:	f7fe feb4 	bl	80060f0 <SM_EnableDacToSignal>

  DT_InitRegister();
 8007388:	f7fd ff2e 	bl	80051e8 <DT_InitRegister>

  // main signal function output (external)
  SM_Init();
 800738c:	f7fe fccc 	bl	8005d28 <SM_Init>
  FuncO_ApplyPresetToSignal(eDefaultFuncPreset);
 8007390:	2000      	movs	r0, #0
 8007392:	f7fe f9d7 	bl	8005744 <FuncO_ApplyPresetToSignal>
  FuncO_ApplyPresetToSync(eDefaultFuncPreset);
 8007396:	2000      	movs	r0, #0
 8007398:	f7fe faac 	bl	80058f4 <FuncO_ApplyPresetToSync>

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 800739c:	2110      	movs	r1, #16
 800739e:	481b      	ldr	r0, [pc, #108]	; (800740c <main+0xd0>)
 80073a0:	f002 fbaf 	bl	8009b02 <HAL_DAC_Start>

  // send trigger input out to dac
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);

  // TIM2 - DAC TIMER
  OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 80073a4:	4b1a      	ldr	r3, [pc, #104]	; (8007410 <main+0xd4>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a19      	ldr	r2, [pc, #100]	; (8007410 <main+0xd4>)
 80073aa:	f043 0301 	orr.w	r3, r3, #1
 80073ae:	6013      	str	r3, [r2, #0]
  FreqO_ApplyPreset(eDefaultFreqPreset);
 80073b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80073b4:	f7fe f8c2 	bl	800553c <FreqO_ApplyPreset>



  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 80073b8:	2201      	movs	r2, #1
 80073ba:	2108      	movs	r1, #8
 80073bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80073c0:	f003 fccc 	bl	800ad5c <HAL_GPIO_WritePin>

  // PGA gain
  //GO_ApplyPreset_Fast(eDefaultGainPreset);
  VPP_ApplyProfileToSignal(eDefaultVppPreset);
 80073c4:	2059      	movs	r0, #89	; 0x59
 80073c6:	f7ff f807 	bl	80063d8 <VPP_ApplyProfileToSignal>


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 80073ca:	2200      	movs	r2, #0
 80073cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80073d0:	4810      	ldr	r0, [pc, #64]	; (8007414 <main+0xd8>)
 80073d2:	f003 fcc3 	bl	800ad5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 80073d6:	2200      	movs	r2, #0
 80073d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80073dc:	480d      	ldr	r0, [pc, #52]	; (8007414 <main+0xd8>)
 80073de:	f003 fcbd 	bl	800ad5c <HAL_GPIO_WritePin>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 80073e2:	480d      	ldr	r0, [pc, #52]	; (8007418 <main+0xdc>)
 80073e4:	f004 fdb4 	bl	800bf50 <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 80073e8:	4b0c      	ldr	r3, [pc, #48]	; (800741c <main+0xe0>)
 80073ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80073ee:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 80073f0:	4b0a      	ldr	r3, [pc, #40]	; (800741c <main+0xe0>)
 80073f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80073f6:	62da      	str	r2, [r3, #44]	; 0x2c



  // TFT lib enable
  DM_Init();
 80073f8:	f7f9 fc94 	bl	8000d24 <DM_Init>
  DM_PostInit();
 80073fc:	f7f9 fca0 	bl	8000d40 <DM_PostInit>

  // Intialise interrupt manager
  IM_Init();
 8007400:	f7fd fd06 	bl	8004e10 <IM_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	EM_ProcessEvent();
 8007404:	f7fc fc3c 	bl	8003c80 <EM_ProcessEvent>
 8007408:	e7fc      	b.n	8007404 <main+0xc8>
 800740a:	bf00      	nop
 800740c:	200026ac 	.word	0x200026ac
 8007410:	40013400 	.word	0x40013400
 8007414:	48000800 	.word	0x48000800
 8007418:	20002868 	.word	0x20002868
 800741c:	40001000 	.word	0x40001000

08007420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b0a8      	sub	sp, #160	; 0xa0
 8007424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007426:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800742a:	2238      	movs	r2, #56	; 0x38
 800742c:	2100      	movs	r1, #0
 800742e:	4618      	mov	r0, r3
 8007430:	f007 fde8 	bl	800f004 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007434:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007438:	2200      	movs	r2, #0
 800743a:	601a      	str	r2, [r3, #0]
 800743c:	605a      	str	r2, [r3, #4]
 800743e:	609a      	str	r2, [r3, #8]
 8007440:	60da      	str	r2, [r3, #12]
 8007442:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007444:	463b      	mov	r3, r7
 8007446:	2254      	movs	r2, #84	; 0x54
 8007448:	2100      	movs	r1, #0
 800744a:	4618      	mov	r0, r3
 800744c:	f007 fdda 	bl	800f004 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8007450:	2000      	movs	r0, #0
 8007452:	f003 fc9b 	bl	800ad8c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8007456:	2322      	movs	r3, #34	; 0x22
 8007458:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800745a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800745e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007460:	2340      	movs	r3, #64	; 0x40
 8007462:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8007464:	2301      	movs	r3, #1
 8007466:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800746a:	2302      	movs	r3, #2
 800746c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007470:	2302      	movs	r3, #2
 8007472:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8007476:	2302      	movs	r3, #2
 8007478:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 800747c:	232a      	movs	r3, #42	; 0x2a
 800747e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV30;
 8007482:	231e      	movs	r3, #30
 8007484:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8007488:	2304      	movs	r3, #4
 800748a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800748e:	2302      	movs	r3, #2
 8007490:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007494:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007498:	4618      	mov	r0, r3
 800749a:	f003 fd1b 	bl	800aed4 <HAL_RCC_OscConfig>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d001      	beq.n	80074a8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80074a4:	f000 f82a 	bl	80074fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80074a8:	230f      	movs	r3, #15
 80074aa:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80074ac:	2303      	movs	r3, #3
 80074ae:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80074b0:	2300      	movs	r3, #0
 80074b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80074b4:	2300      	movs	r3, #0
 80074b6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80074b8:	2300      	movs	r3, #0
 80074ba:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 80074bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80074c0:	2108      	movs	r1, #8
 80074c2:	4618      	mov	r0, r3
 80074c4:	f004 f81e 	bl	800b504 <HAL_RCC_ClockConfig>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d001      	beq.n	80074d2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80074ce:	f000 f815 	bl	80074fc <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 80074d2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80074d6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80074d8:	2300      	movs	r3, #0
 80074da:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80074dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80074e0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80074e2:	463b      	mov	r3, r7
 80074e4:	4618      	mov	r0, r3
 80074e6:	f004 f9fd 	bl	800b8e4 <HAL_RCCEx_PeriphCLKConfig>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d001      	beq.n	80074f4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80074f0:	f000 f804 	bl	80074fc <Error_Handler>
  }
}
 80074f4:	bf00      	nop
 80074f6:	37a0      	adds	r7, #160	; 0xa0
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80074fc:	b480      	push	{r7}
 80074fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007500:	bf00      	nop
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr

0800750a <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 800750a:	b480      	push	{r7}
 800750c:	b083      	sub	sp, #12
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f043 0204 	orr.w	r2, r3, #4
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	601a      	str	r2, [r3, #0]
}
 800751e:	bf00      	nop
 8007520:	370c      	adds	r7, #12
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr
	...

0800752c <LL_AHB2_GRP1_EnableClock>:
{
 800752c:	b480      	push	{r7}
 800752e:	b085      	sub	sp, #20
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007534:	4b08      	ldr	r3, [pc, #32]	; (8007558 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007536:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007538:	4907      	ldr	r1, [pc, #28]	; (8007558 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4313      	orrs	r3, r2
 800753e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007540:	4b05      	ldr	r3, [pc, #20]	; (8007558 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007542:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4013      	ands	r3, r2
 8007548:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800754a:	68fb      	ldr	r3, [r7, #12]
}
 800754c:	bf00      	nop
 800754e:	3714      	adds	r7, #20
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr
 8007558:	40021000 	.word	0x40021000

0800755c <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 8007560:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8007564:	f7ff ffe2 	bl	800752c <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 8007568:	4802      	ldr	r0, [pc, #8]	; (8007574 <MX_RNG_Init+0x18>)
 800756a:	f7ff ffce 	bl	800750a <LL_RNG_Enable>

}
 800756e:	bf00      	nop
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	50060800 	.word	0x50060800

08007578 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 800757c:	4b1b      	ldr	r3, [pc, #108]	; (80075ec <MX_SPI3_Init+0x74>)
 800757e:	4a1c      	ldr	r2, [pc, #112]	; (80075f0 <MX_SPI3_Init+0x78>)
 8007580:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8007582:	4b1a      	ldr	r3, [pc, #104]	; (80075ec <MX_SPI3_Init+0x74>)
 8007584:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007588:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800758a:	4b18      	ldr	r3, [pc, #96]	; (80075ec <MX_SPI3_Init+0x74>)
 800758c:	2200      	movs	r2, #0
 800758e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8007590:	4b16      	ldr	r3, [pc, #88]	; (80075ec <MX_SPI3_Init+0x74>)
 8007592:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007596:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007598:	4b14      	ldr	r3, [pc, #80]	; (80075ec <MX_SPI3_Init+0x74>)
 800759a:	2200      	movs	r2, #0
 800759c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800759e:	4b13      	ldr	r3, [pc, #76]	; (80075ec <MX_SPI3_Init+0x74>)
 80075a0:	2200      	movs	r2, #0
 80075a2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80075a4:	4b11      	ldr	r3, [pc, #68]	; (80075ec <MX_SPI3_Init+0x74>)
 80075a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075aa:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80075ac:	4b0f      	ldr	r3, [pc, #60]	; (80075ec <MX_SPI3_Init+0x74>)
 80075ae:	2210      	movs	r2, #16
 80075b0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80075b2:	4b0e      	ldr	r3, [pc, #56]	; (80075ec <MX_SPI3_Init+0x74>)
 80075b4:	2200      	movs	r2, #0
 80075b6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80075b8:	4b0c      	ldr	r3, [pc, #48]	; (80075ec <MX_SPI3_Init+0x74>)
 80075ba:	2200      	movs	r2, #0
 80075bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075be:	4b0b      	ldr	r3, [pc, #44]	; (80075ec <MX_SPI3_Init+0x74>)
 80075c0:	2200      	movs	r2, #0
 80075c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80075c4:	4b09      	ldr	r3, [pc, #36]	; (80075ec <MX_SPI3_Init+0x74>)
 80075c6:	2207      	movs	r2, #7
 80075c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80075ca:	4b08      	ldr	r3, [pc, #32]	; (80075ec <MX_SPI3_Init+0x74>)
 80075cc:	2200      	movs	r2, #0
 80075ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80075d0:	4b06      	ldr	r3, [pc, #24]	; (80075ec <MX_SPI3_Init+0x74>)
 80075d2:	2208      	movs	r2, #8
 80075d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80075d6:	4805      	ldr	r0, [pc, #20]	; (80075ec <MX_SPI3_Init+0x74>)
 80075d8:	f004 fbd0 	bl	800bd7c <HAL_SPI_Init>
 80075dc:	4603      	mov	r3, r0
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d001      	beq.n	80075e6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80075e2:	f7ff ff8b 	bl	80074fc <Error_Handler>
  }

}
 80075e6:	bf00      	nop
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	20002720 	.word	0x20002720
 80075f0:	40003c00 	.word	0x40003c00

080075f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b08a      	sub	sp, #40	; 0x28
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075fc:	f107 0314 	add.w	r3, r7, #20
 8007600:	2200      	movs	r2, #0
 8007602:	601a      	str	r2, [r3, #0]
 8007604:	605a      	str	r2, [r3, #4]
 8007606:	609a      	str	r2, [r3, #8]
 8007608:	60da      	str	r2, [r3, #12]
 800760a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a17      	ldr	r2, [pc, #92]	; (8007670 <HAL_SPI_MspInit+0x7c>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d128      	bne.n	8007668 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007616:	4b17      	ldr	r3, [pc, #92]	; (8007674 <HAL_SPI_MspInit+0x80>)
 8007618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800761a:	4a16      	ldr	r2, [pc, #88]	; (8007674 <HAL_SPI_MspInit+0x80>)
 800761c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007620:	6593      	str	r3, [r2, #88]	; 0x58
 8007622:	4b14      	ldr	r3, [pc, #80]	; (8007674 <HAL_SPI_MspInit+0x80>)
 8007624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007626:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800762a:	613b      	str	r3, [r7, #16]
 800762c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800762e:	4b11      	ldr	r3, [pc, #68]	; (8007674 <HAL_SPI_MspInit+0x80>)
 8007630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007632:	4a10      	ldr	r2, [pc, #64]	; (8007674 <HAL_SPI_MspInit+0x80>)
 8007634:	f043 0304 	orr.w	r3, r3, #4
 8007638:	64d3      	str	r3, [r2, #76]	; 0x4c
 800763a:	4b0e      	ldr	r3, [pc, #56]	; (8007674 <HAL_SPI_MspInit+0x80>)
 800763c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800763e:	f003 0304 	and.w	r3, r3, #4
 8007642:	60fb      	str	r3, [r7, #12]
 8007644:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8007646:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800764a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800764c:	2302      	movs	r3, #2
 800764e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007650:	2300      	movs	r3, #0
 8007652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007654:	2300      	movs	r3, #0
 8007656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007658:	2306      	movs	r3, #6
 800765a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800765c:	f107 0314 	add.w	r3, r7, #20
 8007660:	4619      	mov	r1, r3
 8007662:	4805      	ldr	r0, [pc, #20]	; (8007678 <HAL_SPI_MspInit+0x84>)
 8007664:	f003 f916 	bl	800a894 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8007668:	bf00      	nop
 800766a:	3728      	adds	r7, #40	; 0x28
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}
 8007670:	40003c00 	.word	0x40003c00
 8007674:	40021000 	.word	0x40021000
 8007678:	48000800 	.word	0x48000800

0800767c <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 800767c:	b480      	push	{r7}
 800767e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007680:	4b05      	ldr	r3, [pc, #20]	; (8007698 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	4a04      	ldr	r2, [pc, #16]	; (8007698 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8007686:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800768a:	6093      	str	r3, [r2, #8]
}
 800768c:	bf00      	nop
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
 8007696:	bf00      	nop
 8007698:	40007000 	.word	0x40007000

0800769c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80076a2:	4b0f      	ldr	r3, [pc, #60]	; (80076e0 <HAL_MspInit+0x44>)
 80076a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076a6:	4a0e      	ldr	r2, [pc, #56]	; (80076e0 <HAL_MspInit+0x44>)
 80076a8:	f043 0301 	orr.w	r3, r3, #1
 80076ac:	6613      	str	r3, [r2, #96]	; 0x60
 80076ae:	4b0c      	ldr	r3, [pc, #48]	; (80076e0 <HAL_MspInit+0x44>)
 80076b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076b2:	f003 0301 	and.w	r3, r3, #1
 80076b6:	607b      	str	r3, [r7, #4]
 80076b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80076ba:	4b09      	ldr	r3, [pc, #36]	; (80076e0 <HAL_MspInit+0x44>)
 80076bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076be:	4a08      	ldr	r2, [pc, #32]	; (80076e0 <HAL_MspInit+0x44>)
 80076c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076c4:	6593      	str	r3, [r2, #88]	; 0x58
 80076c6:	4b06      	ldr	r3, [pc, #24]	; (80076e0 <HAL_MspInit+0x44>)
 80076c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076ce:	603b      	str	r3, [r7, #0]
 80076d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 80076d2:	f7ff ffd3 	bl	800767c <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80076d6:	bf00      	nop
 80076d8:	3708      	adds	r7, #8
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	40021000 	.word	0x40021000

080076e4 <LL_EXTI_IsActiveFlag_0_31>:
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80076ec:	4b07      	ldr	r3, [pc, #28]	; (800770c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80076ee:	695a      	ldr	r2, [r3, #20]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4013      	ands	r3, r2
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d101      	bne.n	80076fe <LL_EXTI_IsActiveFlag_0_31+0x1a>
 80076fa:	2301      	movs	r3, #1
 80076fc:	e000      	b.n	8007700 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	370c      	adds	r7, #12
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr
 800770c:	40010400 	.word	0x40010400

08007710 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8007710:	b480      	push	{r7}
 8007712:	b083      	sub	sp, #12
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8007718:	4a04      	ldr	r2, [pc, #16]	; (800772c <LL_EXTI_ClearFlag_0_31+0x1c>)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6153      	str	r3, [r2, #20]
}
 800771e:	bf00      	nop
 8007720:	370c      	adds	r7, #12
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	40010400 	.word	0x40010400

08007730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007730:	b480      	push	{r7}
 8007732:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007734:	bf00      	nop
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr

0800773e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800773e:	b480      	push	{r7}
 8007740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007742:	e7fe      	b.n	8007742 <HardFault_Handler+0x4>

08007744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007744:	b480      	push	{r7}
 8007746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007748:	e7fe      	b.n	8007748 <MemManage_Handler+0x4>

0800774a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800774a:	b480      	push	{r7}
 800774c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800774e:	e7fe      	b.n	800774e <BusFault_Handler+0x4>

08007750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007750:	b480      	push	{r7}
 8007752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007754:	e7fe      	b.n	8007754 <UsageFault_Handler+0x4>

08007756 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007756:	b480      	push	{r7}
 8007758:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800775a:	bf00      	nop
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007764:	b480      	push	{r7}
 8007766:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007768:	bf00      	nop
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr

08007772 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007772:	b480      	push	{r7}
 8007774:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007776:	bf00      	nop
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007784:	f000 fcdc 	bl	8008140 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007788:	bf00      	nop
 800778a:	bd80      	pop	{r7, pc}

0800778c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	IM_BTN3_EXTI0_Handler();
 8007790:	f7fd fbf6 	bl	8004f80 <IM_BTN3_EXTI0_Handler>

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8007794:	2001      	movs	r0, #1
 8007796:	f7ff ffa5 	bl	80076e4 <LL_EXTI_IsActiveFlag_0_31>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d002      	beq.n	80077a6 <EXTI0_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 80077a0:	2001      	movs	r0, #1
 80077a2:	f7ff ffb5 	bl	8007710 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80077a6:	bf00      	nop
 80077a8:	bd80      	pop	{r7, pc}

080077aa <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	IM_BTN4_EXTI1_Handler();
 80077ae:	f7fd fc0d 	bl	8004fcc <IM_BTN4_EXTI1_Handler>

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 80077b2:	2002      	movs	r0, #2
 80077b4:	f7ff ff96 	bl	80076e4 <LL_EXTI_IsActiveFlag_0_31>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d002      	beq.n	80077c4 <EXTI1_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 80077be:	2002      	movs	r0, #2
 80077c0:	f7ff ffa6 	bl	8007710 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80077c4:	bf00      	nop
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	IM_ENC_EXTI2_Handler();
 80077cc:	f7fd fc24 	bl	8005018 <IM_ENC_EXTI2_Handler>

  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 80077d0:	2004      	movs	r0, #4
 80077d2:	f7ff ff87 	bl	80076e4 <LL_EXTI_IsActiveFlag_0_31>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d002      	beq.n	80077e2 <EXTI2_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 80077dc:	2004      	movs	r0, #4
 80077de:	f7ff ff97 	bl	8007710 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80077e2:	bf00      	nop
 80077e4:	bd80      	pop	{r7, pc}
	...

080077e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80077ec:	4802      	ldr	r0, [pc, #8]	; (80077f8 <DMA1_Channel1_IRQHandler+0x10>)
 80077ee:	f002 ff01 	bl	800a5f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80077f2:	bf00      	nop
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop
 80077f8:	20002614 	.word	0x20002614

080077fc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8007800:	4802      	ldr	r0, [pc, #8]	; (800780c <DMA1_Channel3_IRQHandler+0x10>)
 8007802:	f002 fef7 	bl	800a5f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8007806:	bf00      	nop
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	200026c0 	.word	0x200026c0

08007810 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

	DM_UpdateDisplay();
 8007814:	f7f9 fab2 	bl	8000d7c <DM_UpdateDisplay>

	IM_ENC_DIRF_Handler();
 8007818:	f7fd fc24 	bl	8005064 <IM_ENC_DIRF_Handler>

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800781c:	4803      	ldr	r0, [pc, #12]	; (800782c <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 800781e:	f004 fe0b 	bl	800c438 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8007822:	4803      	ldr	r0, [pc, #12]	; (8007830 <TIM1_BRK_TIM15_IRQHandler+0x20>)
 8007824:	f004 fe08 	bl	800c438 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8007828:	bf00      	nop
 800782a:	bd80      	pop	{r7, pc}
 800782c:	20002868 	.word	0x20002868
 8007830:	200027d0 	.word	0x200027d0

08007834 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007838:	4802      	ldr	r0, [pc, #8]	; (8007844 <TIM3_IRQHandler+0x10>)
 800783a:	f004 fdfd 	bl	800c438 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800783e:	bf00      	nop
 8007840:	bd80      	pop	{r7, pc}
 8007842:	bf00      	nop
 8007844:	20001f90 	.word	0x20001f90

08007848 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	IM_BTN1_EXTI14_Handler();
 800784c:	f7fd fb48 	bl	8004ee0 <IM_BTN1_EXTI14_Handler>
	IM_BTN2_EXTI15_Handler();
 8007850:	f7fd fb6e 	bl	8004f30 <IM_BTN2_EXTI15_Handler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8007854:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007858:	f7ff ff44 	bl	80076e4 <LL_EXTI_IsActiveFlag_0_31>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d003      	beq.n	800786a <EXTI15_10_IRQHandler+0x22>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8007862:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007866:	f7ff ff53 	bl	8007710 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 800786a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800786e:	f7ff ff39 	bl	80076e4 <LL_EXTI_IsActiveFlag_0_31>
 8007872:	4603      	mov	r3, r0
 8007874:	2b00      	cmp	r3, #0
 8007876:	d003      	beq.n	8007880 <EXTI15_10_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8007878:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800787c:	f7ff ff48 	bl	8007710 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007880:	bf00      	nop
 8007882:	bd80      	pop	{r7, pc}

08007884 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	IM_SWEEP_UPDATE_TIM_IRQHandler();
 8007888:	f7fd fad2 	bl	8004e30 <IM_SWEEP_UPDATE_TIM_IRQHandler>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800788c:	4802      	ldr	r0, [pc, #8]	; (8007898 <TIM5_IRQHandler+0x14>)
 800788e:	f004 fdd3 	bl	800c438 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8007892:	bf00      	nop
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop
 8007898:	2000281c 	.word	0x2000281c

0800789c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b086      	sub	sp, #24
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80078a8:	2300      	movs	r3, #0
 80078aa:	617b      	str	r3, [r7, #20]
 80078ac:	e00a      	b.n	80078c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80078ae:	f3af 8000 	nop.w
 80078b2:	4601      	mov	r1, r0
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	1c5a      	adds	r2, r3, #1
 80078b8:	60ba      	str	r2, [r7, #8]
 80078ba:	b2ca      	uxtb	r2, r1
 80078bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	3301      	adds	r3, #1
 80078c2:	617b      	str	r3, [r7, #20]
 80078c4:	697a      	ldr	r2, [r7, #20]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	dbf0      	blt.n	80078ae <_read+0x12>
	}

return len;
 80078cc:	687b      	ldr	r3, [r7, #4]
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3718      	adds	r7, #24
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80078d6:	b480      	push	{r7}
 80078d8:	b083      	sub	sp, #12
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
	return -1;
 80078de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	370c      	adds	r7, #12
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr

080078ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80078ee:	b480      	push	{r7}
 80078f0:	b083      	sub	sp, #12
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
 80078f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80078fe:	605a      	str	r2, [r3, #4]
	return 0;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	370c      	adds	r7, #12
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr

0800790e <_isatty>:

int _isatty(int file)
{
 800790e:	b480      	push	{r7}
 8007910:	b083      	sub	sp, #12
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
	return 1;
 8007916:	2301      	movs	r3, #1
}
 8007918:	4618      	mov	r0, r3
 800791a:	370c      	adds	r7, #12
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr

08007924 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007924:	b480      	push	{r7}
 8007926:	b085      	sub	sp, #20
 8007928:	af00      	add	r7, sp, #0
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	60b9      	str	r1, [r7, #8]
 800792e:	607a      	str	r2, [r7, #4]
	return 0;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	3714      	adds	r7, #20
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr
	...

08007940 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007948:	4b11      	ldr	r3, [pc, #68]	; (8007990 <_sbrk+0x50>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d102      	bne.n	8007956 <_sbrk+0x16>
		heap_end = &end;
 8007950:	4b0f      	ldr	r3, [pc, #60]	; (8007990 <_sbrk+0x50>)
 8007952:	4a10      	ldr	r2, [pc, #64]	; (8007994 <_sbrk+0x54>)
 8007954:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007956:	4b0e      	ldr	r3, [pc, #56]	; (8007990 <_sbrk+0x50>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800795c:	4b0c      	ldr	r3, [pc, #48]	; (8007990 <_sbrk+0x50>)
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4413      	add	r3, r2
 8007964:	466a      	mov	r2, sp
 8007966:	4293      	cmp	r3, r2
 8007968:	d907      	bls.n	800797a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800796a:	f007 fb21 	bl	800efb0 <__errno>
 800796e:	4602      	mov	r2, r0
 8007970:	230c      	movs	r3, #12
 8007972:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007974:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007978:	e006      	b.n	8007988 <_sbrk+0x48>
	}

	heap_end += incr;
 800797a:	4b05      	ldr	r3, [pc, #20]	; (8007990 <_sbrk+0x50>)
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4413      	add	r3, r2
 8007982:	4a03      	ldr	r2, [pc, #12]	; (8007990 <_sbrk+0x50>)
 8007984:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007986:	68fb      	ldr	r3, [r7, #12]
}
 8007988:	4618      	mov	r0, r3
 800798a:	3710      	adds	r7, #16
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}
 8007990:	20001f14 	.word	0x20001f14
 8007994:	20002958 	.word	0x20002958

08007998 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007998:	b480      	push	{r7}
 800799a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800799c:	4b08      	ldr	r3, [pc, #32]	; (80079c0 <SystemInit+0x28>)
 800799e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079a2:	4a07      	ldr	r2, [pc, #28]	; (80079c0 <SystemInit+0x28>)
 80079a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80079a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80079ac:	4b04      	ldr	r3, [pc, #16]	; (80079c0 <SystemInit+0x28>)
 80079ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80079b2:	609a      	str	r2, [r3, #8]
#endif
}
 80079b4:	bf00      	nop
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr
 80079be:	bf00      	nop
 80079c0:	e000ed00 	.word	0xe000ed00

080079c4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b09a      	sub	sp, #104	; 0x68
 80079c8:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80079ca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80079ce:	2224      	movs	r2, #36	; 0x24
 80079d0:	2100      	movs	r1, #0
 80079d2:	4618      	mov	r0, r3
 80079d4:	f007 fb16 	bl	800f004 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80079d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80079dc:	2200      	movs	r2, #0
 80079de:	601a      	str	r2, [r3, #0]
 80079e0:	605a      	str	r2, [r3, #4]
 80079e2:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80079e4:	1d3b      	adds	r3, r7, #4
 80079e6:	2234      	movs	r2, #52	; 0x34
 80079e8:	2100      	movs	r1, #0
 80079ea:	4618      	mov	r0, r3
 80079ec:	f007 fb0a 	bl	800f004 <memset>

  htim1.Instance = TIM1;
 80079f0:	4b2a      	ldr	r3, [pc, #168]	; (8007a9c <MX_TIM1_Init+0xd8>)
 80079f2:	4a2b      	ldr	r2, [pc, #172]	; (8007aa0 <MX_TIM1_Init+0xdc>)
 80079f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80079f6:	4b29      	ldr	r3, [pc, #164]	; (8007a9c <MX_TIM1_Init+0xd8>)
 80079f8:	2200      	movs	r2, #0
 80079fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 80079fc:	4b27      	ldr	r3, [pc, #156]	; (8007a9c <MX_TIM1_Init+0xd8>)
 80079fe:	2260      	movs	r2, #96	; 0x60
 8007a00:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 8007a02:	4b26      	ldr	r3, [pc, #152]	; (8007a9c <MX_TIM1_Init+0xd8>)
 8007a04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007a08:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007a0a:	4b24      	ldr	r3, [pc, #144]	; (8007a9c <MX_TIM1_Init+0xd8>)
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007a10:	4b22      	ldr	r3, [pc, #136]	; (8007a9c <MX_TIM1_Init+0xd8>)
 8007a12:	2200      	movs	r2, #0
 8007a14:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007a16:	4b21      	ldr	r3, [pc, #132]	; (8007a9c <MX_TIM1_Init+0xd8>)
 8007a18:	2280      	movs	r2, #128	; 0x80
 8007a1a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 8007a1c:	2302      	movs	r3, #2
 8007a1e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8007a20:	2300      	movs	r3, #0
 8007a22:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8007a24:	2301      	movs	r3, #1
 8007a26:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8007a30:	2300      	movs	r3, #0
 8007a32:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8007a34:	2301      	movs	r3, #1
 8007a36:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8007a40:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007a44:	4619      	mov	r1, r3
 8007a46:	4815      	ldr	r0, [pc, #84]	; (8007a9c <MX_TIM1_Init+0xd8>)
 8007a48:	f004 fc50 	bl	800c2ec <HAL_TIM_Encoder_Init>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d001      	beq.n	8007a56 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8007a52:	f7ff fd53 	bl	80074fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007a56:	2320      	movs	r3, #32
 8007a58:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007a62:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007a66:	4619      	mov	r1, r3
 8007a68:	480c      	ldr	r0, [pc, #48]	; (8007a9c <MX_TIM1_Init+0xd8>)
 8007a6a:	f005 fd2b 	bl	800d4c4 <HAL_TIMEx_MasterConfigSynchronization>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d001      	beq.n	8007a78 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8007a74:	f7ff fd42 	bl	80074fc <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8007a80:	1d3b      	adds	r3, r7, #4
 8007a82:	4619      	mov	r1, r3
 8007a84:	4805      	ldr	r0, [pc, #20]	; (8007a9c <MX_TIM1_Init+0xd8>)
 8007a86:	f005 fdb3 	bl	800d5f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d001      	beq.n	8007a94 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8007a90:	f7ff fd34 	bl	80074fc <Error_Handler>
  }

}
 8007a94:	bf00      	nop
 8007a96:	3768      	adds	r7, #104	; 0x68
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	20002868 	.word	0x20002868
 8007aa0:	40012c00 	.word	0x40012c00

08007aa4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b088      	sub	sp, #32
 8007aa8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007aaa:	f107 0310 	add.w	r3, r7, #16
 8007aae:	2200      	movs	r2, #0
 8007ab0:	601a      	str	r2, [r3, #0]
 8007ab2:	605a      	str	r2, [r3, #4]
 8007ab4:	609a      	str	r2, [r3, #8]
 8007ab6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007ab8:	1d3b      	adds	r3, r7, #4
 8007aba:	2200      	movs	r2, #0
 8007abc:	601a      	str	r2, [r3, #0]
 8007abe:	605a      	str	r2, [r3, #4]
 8007ac0:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8007ac2:	4b1d      	ldr	r3, [pc, #116]	; (8007b38 <MX_TIM2_Init+0x94>)
 8007ac4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007ac8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8007aca:	4b1b      	ldr	r3, [pc, #108]	; (8007b38 <MX_TIM2_Init+0x94>)
 8007acc:	2200      	movs	r2, #0
 8007ace:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007ad0:	4b19      	ldr	r3, [pc, #100]	; (8007b38 <MX_TIM2_Init+0x94>)
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8007ad6:	4b18      	ldr	r3, [pc, #96]	; (8007b38 <MX_TIM2_Init+0x94>)
 8007ad8:	2201      	movs	r2, #1
 8007ada:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007adc:	4b16      	ldr	r3, [pc, #88]	; (8007b38 <MX_TIM2_Init+0x94>)
 8007ade:	2200      	movs	r2, #0
 8007ae0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007ae2:	4b15      	ldr	r3, [pc, #84]	; (8007b38 <MX_TIM2_Init+0x94>)
 8007ae4:	2280      	movs	r2, #128	; 0x80
 8007ae6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007ae8:	4813      	ldr	r0, [pc, #76]	; (8007b38 <MX_TIM2_Init+0x94>)
 8007aea:	f004 f9d9 	bl	800bea0 <HAL_TIM_Base_Init>
 8007aee:	4603      	mov	r3, r0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d001      	beq.n	8007af8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8007af4:	f7ff fd02 	bl	80074fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007af8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007afc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007afe:	f107 0310 	add.w	r3, r7, #16
 8007b02:	4619      	mov	r1, r3
 8007b04:	480c      	ldr	r0, [pc, #48]	; (8007b38 <MX_TIM2_Init+0x94>)
 8007b06:	f004 ff27 	bl	800c958 <HAL_TIM_ConfigClockSource>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d001      	beq.n	8007b14 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8007b10:	f7ff fcf4 	bl	80074fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007b14:	2320      	movs	r3, #32
 8007b16:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007b1c:	1d3b      	adds	r3, r7, #4
 8007b1e:	4619      	mov	r1, r3
 8007b20:	4805      	ldr	r0, [pc, #20]	; (8007b38 <MX_TIM2_Init+0x94>)
 8007b22:	f005 fccf 	bl	800d4c4 <HAL_TIMEx_MasterConfigSynchronization>
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d001      	beq.n	8007b30 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8007b2c:	f7ff fce6 	bl	80074fc <Error_Handler>
  }

}
 8007b30:	bf00      	nop
 8007b32:	3720      	adds	r7, #32
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	200028b4 	.word	0x200028b4

08007b3c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b088      	sub	sp, #32
 8007b40:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007b42:	f107 0310 	add.w	r3, r7, #16
 8007b46:	2200      	movs	r2, #0
 8007b48:	601a      	str	r2, [r3, #0]
 8007b4a:	605a      	str	r2, [r3, #4]
 8007b4c:	609a      	str	r2, [r3, #8]
 8007b4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007b50:	1d3b      	adds	r3, r7, #4
 8007b52:	2200      	movs	r2, #0
 8007b54:	601a      	str	r2, [r3, #0]
 8007b56:	605a      	str	r2, [r3, #4]
 8007b58:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 8007b5a:	4b1d      	ldr	r3, [pc, #116]	; (8007bd0 <MX_TIM3_Init+0x94>)
 8007b5c:	4a1d      	ldr	r2, [pc, #116]	; (8007bd4 <MX_TIM3_Init+0x98>)
 8007b5e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8007b60:	4b1b      	ldr	r3, [pc, #108]	; (8007bd0 <MX_TIM3_Init+0x94>)
 8007b62:	2200      	movs	r2, #0
 8007b64:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8007b66:	4b1a      	ldr	r3, [pc, #104]	; (8007bd0 <MX_TIM3_Init+0x94>)
 8007b68:	2210      	movs	r2, #16
 8007b6a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8007b6c:	4b18      	ldr	r3, [pc, #96]	; (8007bd0 <MX_TIM3_Init+0x94>)
 8007b6e:	2201      	movs	r2, #1
 8007b70:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8007b72:	4b17      	ldr	r3, [pc, #92]	; (8007bd0 <MX_TIM3_Init+0x94>)
 8007b74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b78:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007b7a:	4b15      	ldr	r3, [pc, #84]	; (8007bd0 <MX_TIM3_Init+0x94>)
 8007b7c:	2280      	movs	r2, #128	; 0x80
 8007b7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007b80:	4813      	ldr	r0, [pc, #76]	; (8007bd0 <MX_TIM3_Init+0x94>)
 8007b82:	f004 f98d 	bl	800bea0 <HAL_TIM_Base_Init>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d001      	beq.n	8007b90 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8007b8c:	f7ff fcb6 	bl	80074fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007b90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b94:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8007b96:	f107 0310 	add.w	r3, r7, #16
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	480c      	ldr	r0, [pc, #48]	; (8007bd0 <MX_TIM3_Init+0x94>)
 8007b9e:	f004 fedb 	bl	800c958 <HAL_TIM_ConfigClockSource>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d001      	beq.n	8007bac <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8007ba8:	f7ff fca8 	bl	80074fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007bac:	2320      	movs	r3, #32
 8007bae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007bb4:	1d3b      	adds	r3, r7, #4
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	4805      	ldr	r0, [pc, #20]	; (8007bd0 <MX_TIM3_Init+0x94>)
 8007bba:	f005 fc83 	bl	800d4c4 <HAL_TIMEx_MasterConfigSynchronization>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d001      	beq.n	8007bc8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8007bc4:	f7ff fc9a 	bl	80074fc <Error_Handler>
  }

}
 8007bc8:	bf00      	nop
 8007bca:	3720      	adds	r7, #32
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	20001f90 	.word	0x20001f90
 8007bd4:	40000400 	.word	0x40000400

08007bd8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b088      	sub	sp, #32
 8007bdc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007bde:	f107 0310 	add.w	r3, r7, #16
 8007be2:	2200      	movs	r2, #0
 8007be4:	601a      	str	r2, [r3, #0]
 8007be6:	605a      	str	r2, [r3, #4]
 8007be8:	609a      	str	r2, [r3, #8]
 8007bea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007bec:	1d3b      	adds	r3, r7, #4
 8007bee:	2200      	movs	r2, #0
 8007bf0:	601a      	str	r2, [r3, #0]
 8007bf2:	605a      	str	r2, [r3, #4]
 8007bf4:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 8007bf6:	4b1d      	ldr	r3, [pc, #116]	; (8007c6c <MX_TIM5_Init+0x94>)
 8007bf8:	4a1d      	ldr	r2, [pc, #116]	; (8007c70 <MX_TIM5_Init+0x98>)
 8007bfa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8007bfc:	4b1b      	ldr	r3, [pc, #108]	; (8007c6c <MX_TIM5_Init+0x94>)
 8007bfe:	2200      	movs	r2, #0
 8007c00:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007c02:	4b1a      	ldr	r3, [pc, #104]	; (8007c6c <MX_TIM5_Init+0x94>)
 8007c04:	2200      	movs	r2, #0
 8007c06:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 8007c08:	4b18      	ldr	r3, [pc, #96]	; (8007c6c <MX_TIM5_Init+0x94>)
 8007c0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007c0e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007c10:	4b16      	ldr	r3, [pc, #88]	; (8007c6c <MX_TIM5_Init+0x94>)
 8007c12:	2200      	movs	r2, #0
 8007c14:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007c16:	4b15      	ldr	r3, [pc, #84]	; (8007c6c <MX_TIM5_Init+0x94>)
 8007c18:	2280      	movs	r2, #128	; 0x80
 8007c1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8007c1c:	4813      	ldr	r0, [pc, #76]	; (8007c6c <MX_TIM5_Init+0x94>)
 8007c1e:	f004 f93f 	bl	800bea0 <HAL_TIM_Base_Init>
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d001      	beq.n	8007c2c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8007c28:	f7ff fc68 	bl	80074fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007c2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c30:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8007c32:	f107 0310 	add.w	r3, r7, #16
 8007c36:	4619      	mov	r1, r3
 8007c38:	480c      	ldr	r0, [pc, #48]	; (8007c6c <MX_TIM5_Init+0x94>)
 8007c3a:	f004 fe8d 	bl	800c958 <HAL_TIM_ConfigClockSource>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d001      	beq.n	8007c48 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8007c44:	f7ff fc5a 	bl	80074fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8007c50:	1d3b      	adds	r3, r7, #4
 8007c52:	4619      	mov	r1, r3
 8007c54:	4805      	ldr	r0, [pc, #20]	; (8007c6c <MX_TIM5_Init+0x94>)
 8007c56:	f005 fc35 	bl	800d4c4 <HAL_TIMEx_MasterConfigSynchronization>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d001      	beq.n	8007c64 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8007c60:	f7ff fc4c 	bl	80074fc <Error_Handler>
  }

}
 8007c64:	bf00      	nop
 8007c66:	3720      	adds	r7, #32
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	2000281c 	.word	0x2000281c
 8007c70:	40000c00 	.word	0x40000c00

08007c74 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b094      	sub	sp, #80	; 0x50
 8007c78:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007c7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007c7e:	2200      	movs	r2, #0
 8007c80:	601a      	str	r2, [r3, #0]
 8007c82:	605a      	str	r2, [r3, #4]
 8007c84:	609a      	str	r2, [r3, #8]
 8007c86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007c88:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	601a      	str	r2, [r3, #0]
 8007c90:	605a      	str	r2, [r3, #4]
 8007c92:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007c94:	463b      	mov	r3, r7
 8007c96:	2234      	movs	r2, #52	; 0x34
 8007c98:	2100      	movs	r1, #0
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f007 f9b2 	bl	800f004 <memset>

  htim8.Instance = TIM8;
 8007ca0:	4b26      	ldr	r3, [pc, #152]	; (8007d3c <MX_TIM8_Init+0xc8>)
 8007ca2:	4a27      	ldr	r2, [pc, #156]	; (8007d40 <MX_TIM8_Init+0xcc>)
 8007ca4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8007ca6:	4b25      	ldr	r3, [pc, #148]	; (8007d3c <MX_TIM8_Init+0xc8>)
 8007ca8:	2200      	movs	r2, #0
 8007caa:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007cac:	4b23      	ldr	r3, [pc, #140]	; (8007d3c <MX_TIM8_Init+0xc8>)
 8007cae:	2200      	movs	r2, #0
 8007cb0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 8007cb2:	4b22      	ldr	r3, [pc, #136]	; (8007d3c <MX_TIM8_Init+0xc8>)
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007cb8:	4b20      	ldr	r3, [pc, #128]	; (8007d3c <MX_TIM8_Init+0xc8>)
 8007cba:	2200      	movs	r2, #0
 8007cbc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8007cbe:	4b1f      	ldr	r3, [pc, #124]	; (8007d3c <MX_TIM8_Init+0xc8>)
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007cc4:	4b1d      	ldr	r3, [pc, #116]	; (8007d3c <MX_TIM8_Init+0xc8>)
 8007cc6:	2280      	movs	r2, #128	; 0x80
 8007cc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8007cca:	481c      	ldr	r0, [pc, #112]	; (8007d3c <MX_TIM8_Init+0xc8>)
 8007ccc:	f004 f8e8 	bl	800bea0 <HAL_TIM_Base_Init>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d001      	beq.n	8007cda <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8007cd6:	f7ff fc11 	bl	80074fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007cda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007cde:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8007ce0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	4815      	ldr	r0, [pc, #84]	; (8007d3c <MX_TIM8_Init+0xc8>)
 8007ce8:	f004 fe36 	bl	800c958 <HAL_TIM_ConfigClockSource>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d001      	beq.n	8007cf6 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8007cf2:	f7ff fc03 	bl	80074fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007cf6:	2320      	movs	r3, #32
 8007cf8:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8007d02:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007d06:	4619      	mov	r1, r3
 8007d08:	480c      	ldr	r0, [pc, #48]	; (8007d3c <MX_TIM8_Init+0xc8>)
 8007d0a:	f005 fbdb 	bl	800d4c4 <HAL_TIMEx_MasterConfigSynchronization>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d001      	beq.n	8007d18 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8007d14:	f7ff fbf2 	bl	80074fc <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8007d20:	463b      	mov	r3, r7
 8007d22:	4619      	mov	r1, r3
 8007d24:	4805      	ldr	r0, [pc, #20]	; (8007d3c <MX_TIM8_Init+0xc8>)
 8007d26:	f005 fc63 	bl	800d5f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d001      	beq.n	8007d34 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8007d30:	f7ff fbe4 	bl	80074fc <Error_Handler>
  }

}
 8007d34:	bf00      	nop
 8007d36:	3750      	adds	r7, #80	; 0x50
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}
 8007d3c:	20002784 	.word	0x20002784
 8007d40:	40013400 	.word	0x40013400

08007d44 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b088      	sub	sp, #32
 8007d48:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007d4a:	f107 0310 	add.w	r3, r7, #16
 8007d4e:	2200      	movs	r2, #0
 8007d50:	601a      	str	r2, [r3, #0]
 8007d52:	605a      	str	r2, [r3, #4]
 8007d54:	609a      	str	r2, [r3, #8]
 8007d56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007d58:	1d3b      	adds	r3, r7, #4
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	601a      	str	r2, [r3, #0]
 8007d5e:	605a      	str	r2, [r3, #4]
 8007d60:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 8007d62:	4b1f      	ldr	r3, [pc, #124]	; (8007de0 <MX_TIM15_Init+0x9c>)
 8007d64:	4a1f      	ldr	r2, [pc, #124]	; (8007de4 <MX_TIM15_Init+0xa0>)
 8007d66:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 8007d68:	4b1d      	ldr	r3, [pc, #116]	; (8007de0 <MX_TIM15_Init+0x9c>)
 8007d6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007d6e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007d70:	4b1b      	ldr	r3, [pc, #108]	; (8007de0 <MX_TIM15_Init+0x9c>)
 8007d72:	2200      	movs	r2, #0
 8007d74:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 8007d76:	4b1a      	ldr	r3, [pc, #104]	; (8007de0 <MX_TIM15_Init+0x9c>)
 8007d78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007d7c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007d7e:	4b18      	ldr	r3, [pc, #96]	; (8007de0 <MX_TIM15_Init+0x9c>)
 8007d80:	2200      	movs	r2, #0
 8007d82:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8007d84:	4b16      	ldr	r3, [pc, #88]	; (8007de0 <MX_TIM15_Init+0x9c>)
 8007d86:	2200      	movs	r2, #0
 8007d88:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007d8a:	4b15      	ldr	r3, [pc, #84]	; (8007de0 <MX_TIM15_Init+0x9c>)
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8007d90:	4813      	ldr	r0, [pc, #76]	; (8007de0 <MX_TIM15_Init+0x9c>)
 8007d92:	f004 f885 	bl	800bea0 <HAL_TIM_Base_Init>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d001      	beq.n	8007da0 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8007d9c:	f7ff fbae 	bl	80074fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007da0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007da4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8007da6:	f107 0310 	add.w	r3, r7, #16
 8007daa:	4619      	mov	r1, r3
 8007dac:	480c      	ldr	r0, [pc, #48]	; (8007de0 <MX_TIM15_Init+0x9c>)
 8007dae:	f004 fdd3 	bl	800c958 <HAL_TIM_ConfigClockSource>
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d001      	beq.n	8007dbc <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8007db8:	f7ff fba0 	bl	80074fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8007dc4:	1d3b      	adds	r3, r7, #4
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	4805      	ldr	r0, [pc, #20]	; (8007de0 <MX_TIM15_Init+0x9c>)
 8007dca:	f005 fb7b 	bl	800d4c4 <HAL_TIMEx_MasterConfigSynchronization>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d001      	beq.n	8007dd8 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8007dd4:	f7ff fb92 	bl	80074fc <Error_Handler>
  }

}
 8007dd8:	bf00      	nop
 8007dda:	3720      	adds	r7, #32
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	200027d0 	.word	0x200027d0
 8007de4:	40014000 	.word	0x40014000

08007de8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8007dec:	4b10      	ldr	r3, [pc, #64]	; (8007e30 <MX_TIM16_Init+0x48>)
 8007dee:	4a11      	ldr	r2, [pc, #68]	; (8007e34 <MX_TIM16_Init+0x4c>)
 8007df0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 65535;
 8007df2:	4b0f      	ldr	r3, [pc, #60]	; (8007e30 <MX_TIM16_Init+0x48>)
 8007df4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007df8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007dfa:	4b0d      	ldr	r3, [pc, #52]	; (8007e30 <MX_TIM16_Init+0x48>)
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8007e00:	4b0b      	ldr	r3, [pc, #44]	; (8007e30 <MX_TIM16_Init+0x48>)
 8007e02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e06:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007e08:	4b09      	ldr	r3, [pc, #36]	; (8007e30 <MX_TIM16_Init+0x48>)
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8007e0e:	4b08      	ldr	r3, [pc, #32]	; (8007e30 <MX_TIM16_Init+0x48>)
 8007e10:	2200      	movs	r2, #0
 8007e12:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007e14:	4b06      	ldr	r3, [pc, #24]	; (8007e30 <MX_TIM16_Init+0x48>)
 8007e16:	2200      	movs	r2, #0
 8007e18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8007e1a:	4805      	ldr	r0, [pc, #20]	; (8007e30 <MX_TIM16_Init+0x48>)
 8007e1c:	f004 f840 	bl	800bea0 <HAL_TIM_Base_Init>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d001      	beq.n	8007e2a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8007e26:	f7ff fb69 	bl	80074fc <Error_Handler>
  }

}
 8007e2a:	bf00      	nop
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	20002900 	.word	0x20002900
 8007e34:	40014400 	.word	0x40014400

08007e38 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b08a      	sub	sp, #40	; 0x28
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e40:	f107 0314 	add.w	r3, r7, #20
 8007e44:	2200      	movs	r2, #0
 8007e46:	601a      	str	r2, [r3, #0]
 8007e48:	605a      	str	r2, [r3, #4]
 8007e4a:	609a      	str	r2, [r3, #8]
 8007e4c:	60da      	str	r2, [r3, #12]
 8007e4e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a1b      	ldr	r2, [pc, #108]	; (8007ec4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d12f      	bne.n	8007eba <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007e5a:	4b1b      	ldr	r3, [pc, #108]	; (8007ec8 <HAL_TIM_Encoder_MspInit+0x90>)
 8007e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e5e:	4a1a      	ldr	r2, [pc, #104]	; (8007ec8 <HAL_TIM_Encoder_MspInit+0x90>)
 8007e60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007e64:	6613      	str	r3, [r2, #96]	; 0x60
 8007e66:	4b18      	ldr	r3, [pc, #96]	; (8007ec8 <HAL_TIM_Encoder_MspInit+0x90>)
 8007e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e6e:	613b      	str	r3, [r7, #16]
 8007e70:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007e72:	4b15      	ldr	r3, [pc, #84]	; (8007ec8 <HAL_TIM_Encoder_MspInit+0x90>)
 8007e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e76:	4a14      	ldr	r2, [pc, #80]	; (8007ec8 <HAL_TIM_Encoder_MspInit+0x90>)
 8007e78:	f043 0304 	orr.w	r3, r3, #4
 8007e7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007e7e:	4b12      	ldr	r3, [pc, #72]	; (8007ec8 <HAL_TIM_Encoder_MspInit+0x90>)
 8007e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e82:	f003 0304 	and.w	r3, r3, #4
 8007e86:	60fb      	str	r3, [r7, #12]
 8007e88:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007e8a:	2303      	movs	r3, #3
 8007e8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e8e:	2302      	movs	r3, #2
 8007e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e92:	2300      	movs	r3, #0
 8007e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e96:	2300      	movs	r3, #0
 8007e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8007e9a:	2302      	movs	r3, #2
 8007e9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007e9e:	f107 0314 	add.w	r3, r7, #20
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	4809      	ldr	r0, [pc, #36]	; (8007ecc <HAL_TIM_Encoder_MspInit+0x94>)
 8007ea6:	f002 fcf5 	bl	800a894 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8007eaa:	2200      	movs	r2, #0
 8007eac:	2100      	movs	r1, #0
 8007eae:	2018      	movs	r0, #24
 8007eb0:	f001 fdc3 	bl	8009a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8007eb4:	2018      	movs	r0, #24
 8007eb6:	f001 fdda 	bl	8009a6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8007eba:	bf00      	nop
 8007ebc:	3728      	adds	r7, #40	; 0x28
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	40012c00 	.word	0x40012c00
 8007ec8:	40021000 	.word	0x40021000
 8007ecc:	48000800 	.word	0x48000800

08007ed0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b08e      	sub	sp, #56	; 0x38
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007edc:	2200      	movs	r2, #0
 8007ede:	601a      	str	r2, [r3, #0]
 8007ee0:	605a      	str	r2, [r3, #4]
 8007ee2:	609a      	str	r2, [r3, #8]
 8007ee4:	60da      	str	r2, [r3, #12]
 8007ee6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ef0:	d10c      	bne.n	8007f0c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007ef2:	4b4f      	ldr	r3, [pc, #316]	; (8008030 <HAL_TIM_Base_MspInit+0x160>)
 8007ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ef6:	4a4e      	ldr	r2, [pc, #312]	; (8008030 <HAL_TIM_Base_MspInit+0x160>)
 8007ef8:	f043 0301 	orr.w	r3, r3, #1
 8007efc:	6593      	str	r3, [r2, #88]	; 0x58
 8007efe:	4b4c      	ldr	r3, [pc, #304]	; (8008030 <HAL_TIM_Base_MspInit+0x160>)
 8007f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f02:	f003 0301 	and.w	r3, r3, #1
 8007f06:	623b      	str	r3, [r7, #32]
 8007f08:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8007f0a:	e08d      	b.n	8008028 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM3)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a48      	ldr	r2, [pc, #288]	; (8008034 <HAL_TIM_Base_MspInit+0x164>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d114      	bne.n	8007f40 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007f16:	4b46      	ldr	r3, [pc, #280]	; (8008030 <HAL_TIM_Base_MspInit+0x160>)
 8007f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f1a:	4a45      	ldr	r2, [pc, #276]	; (8008030 <HAL_TIM_Base_MspInit+0x160>)
 8007f1c:	f043 0302 	orr.w	r3, r3, #2
 8007f20:	6593      	str	r3, [r2, #88]	; 0x58
 8007f22:	4b43      	ldr	r3, [pc, #268]	; (8008030 <HAL_TIM_Base_MspInit+0x160>)
 8007f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f26:	f003 0302 	and.w	r3, r3, #2
 8007f2a:	61fb      	str	r3, [r7, #28]
 8007f2c:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8007f2e:	2200      	movs	r2, #0
 8007f30:	2100      	movs	r1, #0
 8007f32:	201d      	movs	r0, #29
 8007f34:	f001 fd81 	bl	8009a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007f38:	201d      	movs	r0, #29
 8007f3a:	f001 fd98 	bl	8009a6e <HAL_NVIC_EnableIRQ>
}
 8007f3e:	e073      	b.n	8008028 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM5)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a3c      	ldr	r2, [pc, #240]	; (8008038 <HAL_TIM_Base_MspInit+0x168>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d131      	bne.n	8007fae <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8007f4a:	4b39      	ldr	r3, [pc, #228]	; (8008030 <HAL_TIM_Base_MspInit+0x160>)
 8007f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f4e:	4a38      	ldr	r2, [pc, #224]	; (8008030 <HAL_TIM_Base_MspInit+0x160>)
 8007f50:	f043 0308 	orr.w	r3, r3, #8
 8007f54:	6593      	str	r3, [r2, #88]	; 0x58
 8007f56:	4b36      	ldr	r3, [pc, #216]	; (8008030 <HAL_TIM_Base_MspInit+0x160>)
 8007f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f5a:	f003 0308 	and.w	r3, r3, #8
 8007f5e:	61bb      	str	r3, [r7, #24]
 8007f60:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f62:	4b33      	ldr	r3, [pc, #204]	; (8008030 <HAL_TIM_Base_MspInit+0x160>)
 8007f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f66:	4a32      	ldr	r2, [pc, #200]	; (8008030 <HAL_TIM_Base_MspInit+0x160>)
 8007f68:	f043 0301 	orr.w	r3, r3, #1
 8007f6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007f6e:	4b30      	ldr	r3, [pc, #192]	; (8008030 <HAL_TIM_Base_MspInit+0x160>)
 8007f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f72:	f003 0301 	and.w	r3, r3, #1
 8007f76:	617b      	str	r3, [r7, #20]
 8007f78:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f7e:	2302      	movs	r3, #2
 8007f80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f82:	2300      	movs	r3, #0
 8007f84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f86:	2300      	movs	r3, #0
 8007f88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8007f8a:	2302      	movs	r3, #2
 8007f8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f92:	4619      	mov	r1, r3
 8007f94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007f98:	f002 fc7c 	bl	800a894 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 2, 0);
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	2102      	movs	r1, #2
 8007fa0:	2032      	movs	r0, #50	; 0x32
 8007fa2:	f001 fd4a 	bl	8009a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8007fa6:	2032      	movs	r0, #50	; 0x32
 8007fa8:	f001 fd61 	bl	8009a6e <HAL_NVIC_EnableIRQ>
}
 8007fac:	e03c      	b.n	8008028 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM8)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a22      	ldr	r2, [pc, #136]	; (800803c <HAL_TIM_Base_MspInit+0x16c>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d10c      	bne.n	8007fd2 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8007fb8:	4b1d      	ldr	r3, [pc, #116]	; (8008030 <HAL_TIM_Base_MspInit+0x160>)
 8007fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fbc:	4a1c      	ldr	r2, [pc, #112]	; (8008030 <HAL_TIM_Base_MspInit+0x160>)
 8007fbe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007fc2:	6613      	str	r3, [r2, #96]	; 0x60
 8007fc4:	4b1a      	ldr	r3, [pc, #104]	; (8008030 <HAL_TIM_Base_MspInit+0x160>)
 8007fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007fcc:	613b      	str	r3, [r7, #16]
 8007fce:	693b      	ldr	r3, [r7, #16]
}
 8007fd0:	e02a      	b.n	8008028 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM15)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a1a      	ldr	r2, [pc, #104]	; (8008040 <HAL_TIM_Base_MspInit+0x170>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d114      	bne.n	8008006 <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8007fdc:	4b14      	ldr	r3, [pc, #80]	; (8008030 <HAL_TIM_Base_MspInit+0x160>)
 8007fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fe0:	4a13      	ldr	r2, [pc, #76]	; (8008030 <HAL_TIM_Base_MspInit+0x160>)
 8007fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fe6:	6613      	str	r3, [r2, #96]	; 0x60
 8007fe8:	4b11      	ldr	r3, [pc, #68]	; (8008030 <HAL_TIM_Base_MspInit+0x160>)
 8007fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ff0:	60fb      	str	r3, [r7, #12]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	2100      	movs	r1, #0
 8007ff8:	2018      	movs	r0, #24
 8007ffa:	f001 fd1e 	bl	8009a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8007ffe:	2018      	movs	r0, #24
 8008000:	f001 fd35 	bl	8009a6e <HAL_NVIC_EnableIRQ>
}
 8008004:	e010      	b.n	8008028 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM16)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a0e      	ldr	r2, [pc, #56]	; (8008044 <HAL_TIM_Base_MspInit+0x174>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d10b      	bne.n	8008028 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8008010:	4b07      	ldr	r3, [pc, #28]	; (8008030 <HAL_TIM_Base_MspInit+0x160>)
 8008012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008014:	4a06      	ldr	r2, [pc, #24]	; (8008030 <HAL_TIM_Base_MspInit+0x160>)
 8008016:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800801a:	6613      	str	r3, [r2, #96]	; 0x60
 800801c:	4b04      	ldr	r3, [pc, #16]	; (8008030 <HAL_TIM_Base_MspInit+0x160>)
 800801e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008024:	60bb      	str	r3, [r7, #8]
 8008026:	68bb      	ldr	r3, [r7, #8]
}
 8008028:	bf00      	nop
 800802a:	3738      	adds	r7, #56	; 0x38
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}
 8008030:	40021000 	.word	0x40021000
 8008034:	40000400 	.word	0x40000400
 8008038:	40000c00 	.word	0x40000c00
 800803c:	40013400 	.word	0x40013400
 8008040:	40014000 	.word	0x40014000
 8008044:	40014400 	.word	0x40014400

08008048 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008048:	480d      	ldr	r0, [pc, #52]	; (8008080 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800804a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800804c:	480d      	ldr	r0, [pc, #52]	; (8008084 <LoopForever+0x6>)
  ldr r1, =_edata
 800804e:	490e      	ldr	r1, [pc, #56]	; (8008088 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008050:	4a0e      	ldr	r2, [pc, #56]	; (800808c <LoopForever+0xe>)
  movs r3, #0
 8008052:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8008054:	e002      	b.n	800805c <LoopCopyDataInit>

08008056 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008056:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008058:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800805a:	3304      	adds	r3, #4

0800805c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800805c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800805e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008060:	d3f9      	bcc.n	8008056 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008062:	4a0b      	ldr	r2, [pc, #44]	; (8008090 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008064:	4c0b      	ldr	r4, [pc, #44]	; (8008094 <LoopForever+0x16>)
  movs r3, #0
 8008066:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008068:	e001      	b.n	800806e <LoopFillZerobss>

0800806a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800806a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800806c:	3204      	adds	r2, #4

0800806e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800806e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008070:	d3fb      	bcc.n	800806a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008072:	f7ff fc91 	bl	8007998 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008076:	f006 ffa1 	bl	800efbc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800807a:	f7ff f95f 	bl	800733c <main>

0800807e <LoopForever>:

LoopForever:
    b LoopForever
 800807e:	e7fe      	b.n	800807e <LoopForever>
  ldr   r0, =_estack
 8008080:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008084:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008088:	20001e80 	.word	0x20001e80
  ldr r2, =_sidata
 800808c:	08014320 	.word	0x08014320
  ldr r2, =_sbss
 8008090:	20001e80 	.word	0x20001e80
  ldr r4, =_ebss
 8008094:	20002954 	.word	0x20002954

08008098 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008098:	e7fe      	b.n	8008098 <ADC1_2_IRQHandler>

0800809a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b082      	sub	sp, #8
 800809e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80080a0:	2300      	movs	r3, #0
 80080a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80080a4:	2003      	movs	r0, #3
 80080a6:	f001 fcbd 	bl	8009a24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80080aa:	2000      	movs	r0, #0
 80080ac:	f000 f80e 	bl	80080cc <HAL_InitTick>
 80080b0:	4603      	mov	r3, r0
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d002      	beq.n	80080bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	71fb      	strb	r3, [r7, #7]
 80080ba:	e001      	b.n	80080c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80080bc:	f7ff faee 	bl	800769c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80080c0:	79fb      	ldrb	r3, [r7, #7]

}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3708      	adds	r7, #8
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
	...

080080cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80080d4:	2300      	movs	r3, #0
 80080d6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80080d8:	4b16      	ldr	r3, [pc, #88]	; (8008134 <HAL_InitTick+0x68>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d022      	beq.n	8008126 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80080e0:	4b15      	ldr	r3, [pc, #84]	; (8008138 <HAL_InitTick+0x6c>)
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	4b13      	ldr	r3, [pc, #76]	; (8008134 <HAL_InitTick+0x68>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80080ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80080f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80080f4:	4618      	mov	r0, r3
 80080f6:	f001 fcd6 	bl	8009aa6 <HAL_SYSTICK_Config>
 80080fa:	4603      	mov	r3, r0
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d10f      	bne.n	8008120 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2b0f      	cmp	r3, #15
 8008104:	d809      	bhi.n	800811a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008106:	2200      	movs	r2, #0
 8008108:	6879      	ldr	r1, [r7, #4]
 800810a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800810e:	f001 fc94 	bl	8009a3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008112:	4a0a      	ldr	r2, [pc, #40]	; (800813c <HAL_InitTick+0x70>)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6013      	str	r3, [r2, #0]
 8008118:	e007      	b.n	800812a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	73fb      	strb	r3, [r7, #15]
 800811e:	e004      	b.n	800812a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	73fb      	strb	r3, [r7, #15]
 8008124:	e001      	b.n	800812a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800812a:	7bfb      	ldrb	r3, [r7, #15]
}
 800812c:	4618      	mov	r0, r3
 800812e:	3710      	adds	r7, #16
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	20000cb0 	.word	0x20000cb0
 8008138:	20000ca8 	.word	0x20000ca8
 800813c:	20000cac 	.word	0x20000cac

08008140 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008140:	b480      	push	{r7}
 8008142:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008144:	4b05      	ldr	r3, [pc, #20]	; (800815c <HAL_IncTick+0x1c>)
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	4b05      	ldr	r3, [pc, #20]	; (8008160 <HAL_IncTick+0x20>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4413      	add	r3, r2
 800814e:	4a03      	ldr	r2, [pc, #12]	; (800815c <HAL_IncTick+0x1c>)
 8008150:	6013      	str	r3, [r2, #0]
}
 8008152:	bf00      	nop
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr
 800815c:	2000294c 	.word	0x2000294c
 8008160:	20000cb0 	.word	0x20000cb0

08008164 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008164:	b480      	push	{r7}
 8008166:	af00      	add	r7, sp, #0
  return uwTick;
 8008168:	4b03      	ldr	r3, [pc, #12]	; (8008178 <HAL_GetTick+0x14>)
 800816a:	681b      	ldr	r3, [r3, #0]
}
 800816c:	4618      	mov	r0, r3
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr
 8008176:	bf00      	nop
 8008178:	2000294c 	.word	0x2000294c

0800817c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008184:	f7ff ffee 	bl	8008164 <HAL_GetTick>
 8008188:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008194:	d004      	beq.n	80081a0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8008196:	4b09      	ldr	r3, [pc, #36]	; (80081bc <HAL_Delay+0x40>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	4413      	add	r3, r2
 800819e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80081a0:	bf00      	nop
 80081a2:	f7ff ffdf 	bl	8008164 <HAL_GetTick>
 80081a6:	4602      	mov	r2, r0
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	1ad3      	subs	r3, r2, r3
 80081ac:	68fa      	ldr	r2, [r7, #12]
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d8f7      	bhi.n	80081a2 <HAL_Delay+0x26>
  {
  }
}
 80081b2:	bf00      	nop
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	20000cb0 	.word	0x20000cb0

080081c0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	431a      	orrs	r2, r3
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	609a      	str	r2, [r3, #8]
}
 80081da:	bf00      	nop
 80081dc:	370c      	adds	r7, #12
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr

080081e6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80081e6:	b480      	push	{r7}
 80081e8:	b083      	sub	sp, #12
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
 80081ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	431a      	orrs	r2, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	609a      	str	r2, [r3, #8]
}
 8008200:	bf00      	nop
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800821c:	4618      	mov	r0, r3
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr

08008228 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8008228:	b490      	push	{r4, r7}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	607a      	str	r2, [r7, #4]
 8008234:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	3360      	adds	r3, #96	; 0x60
 800823a:	461a      	mov	r2, r3
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	4413      	add	r3, r2
 8008242:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008244:	6822      	ldr	r2, [r4, #0]
 8008246:	4b08      	ldr	r3, [pc, #32]	; (8008268 <LL_ADC_SetOffset+0x40>)
 8008248:	4013      	ands	r3, r2
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8008250:	683a      	ldr	r2, [r7, #0]
 8008252:	430a      	orrs	r2, r1
 8008254:	4313      	orrs	r3, r2
 8008256:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800825a:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800825c:	bf00      	nop
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	bc90      	pop	{r4, r7}
 8008264:	4770      	bx	lr
 8008266:	bf00      	nop
 8008268:	03fff000 	.word	0x03fff000

0800826c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800826c:	b490      	push	{r4, r7}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	3360      	adds	r3, #96	; 0x60
 800827a:	461a      	mov	r2, r3
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	009b      	lsls	r3, r3, #2
 8008280:	4413      	add	r3, r2
 8008282:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008284:	6823      	ldr	r3, [r4, #0]
 8008286:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800828a:	4618      	mov	r0, r3
 800828c:	3708      	adds	r7, #8
 800828e:	46bd      	mov	sp, r7
 8008290:	bc90      	pop	{r4, r7}
 8008292:	4770      	bx	lr

08008294 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8008294:	b490      	push	{r4, r7}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	3360      	adds	r3, #96	; 0x60
 80082a4:	461a      	mov	r2, r3
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	4413      	add	r3, r2
 80082ac:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80082ae:	6823      	ldr	r3, [r4, #0]
 80082b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80082ba:	bf00      	nop
 80082bc:	3710      	adds	r7, #16
 80082be:	46bd      	mov	sp, r7
 80082c0:	bc90      	pop	{r4, r7}
 80082c2:	4770      	bx	lr

080082c4 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80082c4:	b490      	push	{r4, r7}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	3360      	adds	r3, #96	; 0x60
 80082d4:	461a      	mov	r2, r3
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	009b      	lsls	r3, r3, #2
 80082da:	4413      	add	r3, r2
 80082dc:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80082de:	6823      	ldr	r3, [r4, #0]
 80082e0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	4313      	orrs	r3, r2
 80082e8:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80082ea:	bf00      	nop
 80082ec:	3710      	adds	r7, #16
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bc90      	pop	{r4, r7}
 80082f2:	4770      	bx	lr

080082f4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80082f4:	b490      	push	{r4, r7}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	3360      	adds	r3, #96	; 0x60
 8008304:	461a      	mov	r2, r3
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	4413      	add	r3, r2
 800830c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800830e:	6823      	ldr	r3, [r4, #0]
 8008310:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	4313      	orrs	r3, r2
 8008318:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800831a:	bf00      	nop
 800831c:	3710      	adds	r7, #16
 800831e:	46bd      	mov	sp, r7
 8008320:	bc90      	pop	{r4, r7}
 8008322:	4770      	bx	lr

08008324 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	695b      	ldr	r3, [r3, #20]
 8008332:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	431a      	orrs	r2, r3
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	615a      	str	r2, [r3, #20]
}
 800833e:	bf00      	nop
 8008340:	370c      	adds	r7, #12
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr

0800834a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800834a:	b490      	push	{r4, r7}
 800834c:	b084      	sub	sp, #16
 800834e:	af00      	add	r7, sp, #0
 8008350:	60f8      	str	r0, [r7, #12]
 8008352:	60b9      	str	r1, [r7, #8]
 8008354:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	3330      	adds	r3, #48	; 0x30
 800835a:	461a      	mov	r2, r3
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	0a1b      	lsrs	r3, r3, #8
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	f003 030c 	and.w	r3, r3, #12
 8008366:	4413      	add	r3, r2
 8008368:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800836a:	6822      	ldr	r2, [r4, #0]
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	f003 031f 	and.w	r3, r3, #31
 8008372:	211f      	movs	r1, #31
 8008374:	fa01 f303 	lsl.w	r3, r1, r3
 8008378:	43db      	mvns	r3, r3
 800837a:	401a      	ands	r2, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	0e9b      	lsrs	r3, r3, #26
 8008380:	f003 011f 	and.w	r1, r3, #31
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	f003 031f 	and.w	r3, r3, #31
 800838a:	fa01 f303 	lsl.w	r3, r1, r3
 800838e:	4313      	orrs	r3, r2
 8008390:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8008392:	bf00      	nop
 8008394:	3710      	adds	r7, #16
 8008396:	46bd      	mov	sp, r7
 8008398:	bc90      	pop	{r4, r7}
 800839a:	4770      	bx	lr

0800839c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800839c:	b490      	push	{r4, r7}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	60f8      	str	r0, [r7, #12]
 80083a4:	60b9      	str	r1, [r7, #8]
 80083a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	3314      	adds	r3, #20
 80083ac:	461a      	mov	r2, r3
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	0e5b      	lsrs	r3, r3, #25
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	f003 0304 	and.w	r3, r3, #4
 80083b8:	4413      	add	r3, r2
 80083ba:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80083bc:	6822      	ldr	r2, [r4, #0]
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	0d1b      	lsrs	r3, r3, #20
 80083c2:	f003 031f 	and.w	r3, r3, #31
 80083c6:	2107      	movs	r1, #7
 80083c8:	fa01 f303 	lsl.w	r3, r1, r3
 80083cc:	43db      	mvns	r3, r3
 80083ce:	401a      	ands	r2, r3
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	0d1b      	lsrs	r3, r3, #20
 80083d4:	f003 031f 	and.w	r3, r3, #31
 80083d8:	6879      	ldr	r1, [r7, #4]
 80083da:	fa01 f303 	lsl.w	r3, r1, r3
 80083de:	4313      	orrs	r3, r2
 80083e0:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80083e2:	bf00      	nop
 80083e4:	3710      	adds	r7, #16
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bc90      	pop	{r4, r7}
 80083ea:	4770      	bx	lr

080083ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b085      	sub	sp, #20
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	60b9      	str	r1, [r7, #8]
 80083f6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008404:	43db      	mvns	r3, r3
 8008406:	401a      	ands	r2, r3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f003 0318 	and.w	r3, r3, #24
 800840e:	4908      	ldr	r1, [pc, #32]	; (8008430 <LL_ADC_SetChannelSingleDiff+0x44>)
 8008410:	40d9      	lsrs	r1, r3
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	400b      	ands	r3, r1
 8008416:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800841a:	431a      	orrs	r2, r3
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8008422:	bf00      	nop
 8008424:	3714      	adds	r7, #20
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr
 800842e:	bf00      	nop
 8008430:	0007ffff 	.word	0x0007ffff

08008434 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8008444:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	6093      	str	r3, [r2, #8]
}
 800844c:	bf00      	nop
 800844e:	370c      	adds	r7, #12
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008468:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800846c:	d101      	bne.n	8008472 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800846e:	2301      	movs	r3, #1
 8008470:	e000      	b.n	8008474 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8008472:	2300      	movs	r3, #0
}
 8008474:	4618      	mov	r0, r3
 8008476:	370c      	adds	r7, #12
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008480:	b480      	push	{r7}
 8008482:	b083      	sub	sp, #12
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8008490:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008494:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800849c:	bf00      	nop
 800849e:	370c      	adds	r7, #12
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr

080084a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b083      	sub	sp, #12
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084bc:	d101      	bne.n	80084c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80084be:	2301      	movs	r3, #1
 80084c0:	e000      	b.n	80084c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	370c      	adds	r7, #12
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	f003 0301 	and.w	r3, r3, #1
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	d101      	bne.n	80084e8 <LL_ADC_IsEnabled+0x18>
 80084e4:	2301      	movs	r3, #1
 80084e6:	e000      	b.n	80084ea <LL_ADC_IsEnabled+0x1a>
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	370c      	adds	r7, #12
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr

080084f6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80084f6:	b480      	push	{r7}
 80084f8:	b083      	sub	sp, #12
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	f003 0304 	and.w	r3, r3, #4
 8008506:	2b04      	cmp	r3, #4
 8008508:	d101      	bne.n	800850e <LL_ADC_REG_IsConversionOngoing+0x18>
 800850a:	2301      	movs	r3, #1
 800850c:	e000      	b.n	8008510 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800850e:	2300      	movs	r3, #0
}
 8008510:	4618      	mov	r0, r3
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	f003 0308 	and.w	r3, r3, #8
 800852c:	2b08      	cmp	r3, #8
 800852e:	d101      	bne.n	8008534 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008530:	2301      	movs	r3, #1
 8008532:	e000      	b.n	8008536 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8008534:	2300      	movs	r3, #0
}
 8008536:	4618      	mov	r0, r3
 8008538:	370c      	adds	r7, #12
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr
	...

08008544 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008544:	b590      	push	{r4, r7, lr}
 8008546:	b089      	sub	sp, #36	; 0x24
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800854c:	2300      	movs	r3, #0
 800854e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8008550:	2300      	movs	r3, #0
 8008552:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d101      	bne.n	800855e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800855a:	2301      	movs	r3, #1
 800855c:	e1ad      	b.n	80088ba <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	695b      	ldr	r3, [r3, #20]
 8008562:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008568:	2b00      	cmp	r3, #0
 800856a:	d109      	bne.n	8008580 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f7fe f989 	bl	8006884 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2200      	movs	r2, #0
 8008576:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4618      	mov	r0, r3
 8008586:	f7ff ff67 	bl	8008458 <LL_ADC_IsDeepPowerDownEnabled>
 800858a:	4603      	mov	r3, r0
 800858c:	2b00      	cmp	r3, #0
 800858e:	d004      	beq.n	800859a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4618      	mov	r0, r3
 8008596:	f7ff ff4d 	bl	8008434 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4618      	mov	r0, r3
 80085a0:	f7ff ff82 	bl	80084a8 <LL_ADC_IsInternalRegulatorEnabled>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d113      	bne.n	80085d2 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7ff ff66 	bl	8008480 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80085b4:	4b9e      	ldr	r3, [pc, #632]	; (8008830 <HAL_ADC_Init+0x2ec>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	099b      	lsrs	r3, r3, #6
 80085ba:	4a9e      	ldr	r2, [pc, #632]	; (8008834 <HAL_ADC_Init+0x2f0>)
 80085bc:	fba2 2303 	umull	r2, r3, r2, r3
 80085c0:	099b      	lsrs	r3, r3, #6
 80085c2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80085c4:	e002      	b.n	80085cc <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	3b01      	subs	r3, #1
 80085ca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d1f9      	bne.n	80085c6 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4618      	mov	r0, r3
 80085d8:	f7ff ff66 	bl	80084a8 <LL_ADC_IsInternalRegulatorEnabled>
 80085dc:	4603      	mov	r3, r0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d10d      	bne.n	80085fe <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085e6:	f043 0210 	orr.w	r2, r3, #16
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085f2:	f043 0201 	orr.w	r2, r3, #1
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80085fa:	2301      	movs	r3, #1
 80085fc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4618      	mov	r0, r3
 8008604:	f7ff ff77 	bl	80084f6 <LL_ADC_REG_IsConversionOngoing>
 8008608:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800860e:	f003 0310 	and.w	r3, r3, #16
 8008612:	2b00      	cmp	r3, #0
 8008614:	f040 8148 	bne.w	80088a8 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	2b00      	cmp	r3, #0
 800861c:	f040 8144 	bne.w	80088a8 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008624:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8008628:	f043 0202 	orr.w	r2, r3, #2
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4618      	mov	r0, r3
 8008636:	f7ff ff4b 	bl	80084d0 <LL_ADC_IsEnabled>
 800863a:	4603      	mov	r3, r0
 800863c:	2b00      	cmp	r3, #0
 800863e:	d141      	bne.n	80086c4 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008648:	d004      	beq.n	8008654 <HAL_ADC_Init+0x110>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a7a      	ldr	r2, [pc, #488]	; (8008838 <HAL_ADC_Init+0x2f4>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d10f      	bne.n	8008674 <HAL_ADC_Init+0x130>
 8008654:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008658:	f7ff ff3a 	bl	80084d0 <LL_ADC_IsEnabled>
 800865c:	4604      	mov	r4, r0
 800865e:	4876      	ldr	r0, [pc, #472]	; (8008838 <HAL_ADC_Init+0x2f4>)
 8008660:	f7ff ff36 	bl	80084d0 <LL_ADC_IsEnabled>
 8008664:	4603      	mov	r3, r0
 8008666:	4323      	orrs	r3, r4
 8008668:	2b00      	cmp	r3, #0
 800866a:	bf0c      	ite	eq
 800866c:	2301      	moveq	r3, #1
 800866e:	2300      	movne	r3, #0
 8008670:	b2db      	uxtb	r3, r3
 8008672:	e012      	b.n	800869a <HAL_ADC_Init+0x156>
 8008674:	4871      	ldr	r0, [pc, #452]	; (800883c <HAL_ADC_Init+0x2f8>)
 8008676:	f7ff ff2b 	bl	80084d0 <LL_ADC_IsEnabled>
 800867a:	4604      	mov	r4, r0
 800867c:	4870      	ldr	r0, [pc, #448]	; (8008840 <HAL_ADC_Init+0x2fc>)
 800867e:	f7ff ff27 	bl	80084d0 <LL_ADC_IsEnabled>
 8008682:	4603      	mov	r3, r0
 8008684:	431c      	orrs	r4, r3
 8008686:	486f      	ldr	r0, [pc, #444]	; (8008844 <HAL_ADC_Init+0x300>)
 8008688:	f7ff ff22 	bl	80084d0 <LL_ADC_IsEnabled>
 800868c:	4603      	mov	r3, r0
 800868e:	4323      	orrs	r3, r4
 8008690:	2b00      	cmp	r3, #0
 8008692:	bf0c      	ite	eq
 8008694:	2301      	moveq	r3, #1
 8008696:	2300      	movne	r3, #0
 8008698:	b2db      	uxtb	r3, r3
 800869a:	2b00      	cmp	r3, #0
 800869c:	d012      	beq.n	80086c4 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086a6:	d004      	beq.n	80086b2 <HAL_ADC_Init+0x16e>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a62      	ldr	r2, [pc, #392]	; (8008838 <HAL_ADC_Init+0x2f4>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d101      	bne.n	80086b6 <HAL_ADC_Init+0x172>
 80086b2:	4a65      	ldr	r2, [pc, #404]	; (8008848 <HAL_ADC_Init+0x304>)
 80086b4:	e000      	b.n	80086b8 <HAL_ADC_Init+0x174>
 80086b6:	4a65      	ldr	r2, [pc, #404]	; (800884c <HAL_ADC_Init+0x308>)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	4619      	mov	r1, r3
 80086be:	4610      	mov	r0, r2
 80086c0:	f7ff fd7e 	bl	80081c0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	7f5b      	ldrb	r3, [r3, #29]
 80086c8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80086ce:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80086d4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80086da:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80086e2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80086e4:	4313      	orrs	r3, r2
 80086e6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d106      	bne.n	8008700 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f6:	3b01      	subs	r3, #1
 80086f8:	045b      	lsls	r3, r3, #17
 80086fa:	69ba      	ldr	r2, [r7, #24]
 80086fc:	4313      	orrs	r3, r2
 80086fe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008704:	2b00      	cmp	r3, #0
 8008706:	d009      	beq.n	800871c <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800870c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008714:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008716:	69ba      	ldr	r2, [r7, #24]
 8008718:	4313      	orrs	r3, r2
 800871a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68da      	ldr	r2, [r3, #12]
 8008722:	4b4b      	ldr	r3, [pc, #300]	; (8008850 <HAL_ADC_Init+0x30c>)
 8008724:	4013      	ands	r3, r2
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	6812      	ldr	r2, [r2, #0]
 800872a:	69b9      	ldr	r1, [r7, #24]
 800872c:	430b      	orrs	r3, r1
 800872e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	691b      	ldr	r3, [r3, #16]
 8008736:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	430a      	orrs	r2, r1
 8008744:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4618      	mov	r0, r3
 800874c:	f7ff fed3 	bl	80084f6 <LL_ADC_REG_IsConversionOngoing>
 8008750:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4618      	mov	r0, r3
 8008758:	f7ff fee0 	bl	800851c <LL_ADC_INJ_IsConversionOngoing>
 800875c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d17f      	bne.n	8008864 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d17c      	bne.n	8008864 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800876e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008776:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008778:	4313      	orrs	r3, r2
 800877a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008786:	f023 0302 	bic.w	r3, r3, #2
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	6812      	ldr	r2, [r2, #0]
 800878e:	69b9      	ldr	r1, [r7, #24]
 8008790:	430b      	orrs	r3, r1
 8008792:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	691b      	ldr	r3, [r3, #16]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d017      	beq.n	80087cc <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	691a      	ldr	r2, [r3, #16]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80087aa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80087b4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80087b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	6911      	ldr	r1, [r2, #16]
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	6812      	ldr	r2, [r2, #0]
 80087c4:	430b      	orrs	r3, r1
 80087c6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80087ca:	e013      	b.n	80087f4 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	691a      	ldr	r2, [r3, #16]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80087da:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	6812      	ldr	r2, [r2, #0]
 80087e8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80087ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80087f0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d12a      	bne.n	8008854 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008808:	f023 0304 	bic.w	r3, r3, #4
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008814:	4311      	orrs	r1, r2
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800881a:	4311      	orrs	r1, r2
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008820:	430a      	orrs	r2, r1
 8008822:	431a      	orrs	r2, r3
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f042 0201 	orr.w	r2, r2, #1
 800882c:	611a      	str	r2, [r3, #16]
 800882e:	e019      	b.n	8008864 <HAL_ADC_Init+0x320>
 8008830:	20000ca8 	.word	0x20000ca8
 8008834:	053e2d63 	.word	0x053e2d63
 8008838:	50000100 	.word	0x50000100
 800883c:	50000400 	.word	0x50000400
 8008840:	50000500 	.word	0x50000500
 8008844:	50000600 	.word	0x50000600
 8008848:	50000300 	.word	0x50000300
 800884c:	50000700 	.word	0x50000700
 8008850:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	691a      	ldr	r2, [r3, #16]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f022 0201 	bic.w	r2, r2, #1
 8008862:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	695b      	ldr	r3, [r3, #20]
 8008868:	2b01      	cmp	r3, #1
 800886a:	d10c      	bne.n	8008886 <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008872:	f023 010f 	bic.w	r1, r3, #15
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6a1b      	ldr	r3, [r3, #32]
 800887a:	1e5a      	subs	r2, r3, #1
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	430a      	orrs	r2, r1
 8008882:	631a      	str	r2, [r3, #48]	; 0x30
 8008884:	e007      	b.n	8008896 <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f022 020f 	bic.w	r2, r2, #15
 8008894:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800889a:	f023 0303 	bic.w	r3, r3, #3
 800889e:	f043 0201 	orr.w	r2, r3, #1
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80088a6:	e007      	b.n	80088b8 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088ac:	f043 0210 	orr.w	r2, r3, #16
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80088b4:	2301      	movs	r3, #1
 80088b6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80088b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3724      	adds	r7, #36	; 0x24
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd90      	pop	{r4, r7, pc}
 80088c2:	bf00      	nop

080088c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b0a6      	sub	sp, #152	; 0x98
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80088ce:	2300      	movs	r3, #0
 80088d0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80088d4:	2300      	movs	r3, #0
 80088d6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d101      	bne.n	80088e6 <HAL_ADC_ConfigChannel+0x22>
 80088e2:	2302      	movs	r3, #2
 80088e4:	e38e      	b.n	8009004 <HAL_ADC_ConfigChannel+0x740>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2201      	movs	r2, #1
 80088ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7ff fdff 	bl	80084f6 <LL_ADC_REG_IsConversionOngoing>
 80088f8:	4603      	mov	r3, r0
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	f040 836f 	bne.w	8008fde <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6818      	ldr	r0, [r3, #0]
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	6859      	ldr	r1, [r3, #4]
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	461a      	mov	r2, r3
 800890e:	f7ff fd1c 	bl	800834a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4618      	mov	r0, r3
 8008918:	f7ff fded 	bl	80084f6 <LL_ADC_REG_IsConversionOngoing>
 800891c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4618      	mov	r0, r3
 8008926:	f7ff fdf9 	bl	800851c <LL_ADC_INJ_IsConversionOngoing>
 800892a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800892e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008932:	2b00      	cmp	r3, #0
 8008934:	f040 817b 	bne.w	8008c2e <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008938:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800893c:	2b00      	cmp	r3, #0
 800893e:	f040 8176 	bne.w	8008c2e <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800894a:	d10f      	bne.n	800896c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6818      	ldr	r0, [r3, #0]
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	2200      	movs	r2, #0
 8008956:	4619      	mov	r1, r3
 8008958:	f7ff fd20 	bl	800839c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008964:	4618      	mov	r0, r3
 8008966:	f7ff fcdd 	bl	8008324 <LL_ADC_SetSamplingTimeCommonConfig>
 800896a:	e00e      	b.n	800898a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6818      	ldr	r0, [r3, #0]
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	6819      	ldr	r1, [r3, #0]
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	461a      	mov	r2, r3
 800897a:	f7ff fd0f 	bl	800839c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2100      	movs	r1, #0
 8008984:	4618      	mov	r0, r3
 8008986:	f7ff fccd 	bl	8008324 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	695a      	ldr	r2, [r3, #20]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	68db      	ldr	r3, [r3, #12]
 8008994:	08db      	lsrs	r3, r3, #3
 8008996:	f003 0303 	and.w	r3, r3, #3
 800899a:	005b      	lsls	r3, r3, #1
 800899c:	fa02 f303 	lsl.w	r3, r2, r3
 80089a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	691b      	ldr	r3, [r3, #16]
 80089a8:	2b04      	cmp	r3, #4
 80089aa:	d022      	beq.n	80089f2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6818      	ldr	r0, [r3, #0]
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	6919      	ldr	r1, [r3, #16]
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80089bc:	f7ff fc34 	bl	8008228 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6818      	ldr	r0, [r3, #0]
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	6919      	ldr	r1, [r3, #16]
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	699b      	ldr	r3, [r3, #24]
 80089cc:	461a      	mov	r2, r3
 80089ce:	f7ff fc79 	bl	80082c4 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6818      	ldr	r0, [r3, #0]
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	6919      	ldr	r1, [r3, #16]
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	7f1b      	ldrb	r3, [r3, #28]
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d102      	bne.n	80089e8 <HAL_ADC_ConfigChannel+0x124>
 80089e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80089e6:	e000      	b.n	80089ea <HAL_ADC_ConfigChannel+0x126>
 80089e8:	2300      	movs	r3, #0
 80089ea:	461a      	mov	r2, r3
 80089ec:	f7ff fc82 	bl	80082f4 <LL_ADC_SetOffsetSaturation>
 80089f0:	e11d      	b.n	8008c2e <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	2100      	movs	r1, #0
 80089f8:	4618      	mov	r0, r3
 80089fa:	f7ff fc37 	bl	800826c <LL_ADC_GetOffsetChannel>
 80089fe:	4603      	mov	r3, r0
 8008a00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d10a      	bne.n	8008a1e <HAL_ADC_ConfigChannel+0x15a>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2100      	movs	r1, #0
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f7ff fc2c 	bl	800826c <LL_ADC_GetOffsetChannel>
 8008a14:	4603      	mov	r3, r0
 8008a16:	0e9b      	lsrs	r3, r3, #26
 8008a18:	f003 021f 	and.w	r2, r3, #31
 8008a1c:	e012      	b.n	8008a44 <HAL_ADC_ConfigChannel+0x180>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2100      	movs	r1, #0
 8008a24:	4618      	mov	r0, r3
 8008a26:	f7ff fc21 	bl	800826c <LL_ADC_GetOffsetChannel>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008a34:	fa93 f3a3 	rbit	r3, r3
 8008a38:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8008a3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008a3c:	fab3 f383 	clz	r3, r3
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	461a      	mov	r2, r3
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d105      	bne.n	8008a5c <HAL_ADC_ConfigChannel+0x198>
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	0e9b      	lsrs	r3, r3, #26
 8008a56:	f003 031f 	and.w	r3, r3, #31
 8008a5a:	e00a      	b.n	8008a72 <HAL_ADC_ConfigChannel+0x1ae>
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a64:	fa93 f3a3 	rbit	r3, r3
 8008a68:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8008a6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a6c:	fab3 f383 	clz	r3, r3
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d106      	bne.n	8008a84 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	2100      	movs	r1, #0
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7ff fc08 	bl	8008294 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	2101      	movs	r1, #1
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7ff fbee 	bl	800826c <LL_ADC_GetOffsetChannel>
 8008a90:	4603      	mov	r3, r0
 8008a92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d10a      	bne.n	8008ab0 <HAL_ADC_ConfigChannel+0x1ec>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	2101      	movs	r1, #1
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f7ff fbe3 	bl	800826c <LL_ADC_GetOffsetChannel>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	0e9b      	lsrs	r3, r3, #26
 8008aaa:	f003 021f 	and.w	r2, r3, #31
 8008aae:	e010      	b.n	8008ad2 <HAL_ADC_ConfigChannel+0x20e>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	2101      	movs	r1, #1
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7ff fbd8 	bl	800826c <LL_ADC_GetOffsetChannel>
 8008abc:	4603      	mov	r3, r0
 8008abe:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ac0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ac2:	fa93 f3a3 	rbit	r3, r3
 8008ac6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8008ac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008aca:	fab3 f383 	clz	r3, r3
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d105      	bne.n	8008aea <HAL_ADC_ConfigChannel+0x226>
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	0e9b      	lsrs	r3, r3, #26
 8008ae4:	f003 031f 	and.w	r3, r3, #31
 8008ae8:	e00a      	b.n	8008b00 <HAL_ADC_ConfigChannel+0x23c>
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008af0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008af2:	fa93 f3a3 	rbit	r3, r3
 8008af6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8008af8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008afa:	fab3 f383 	clz	r3, r3
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d106      	bne.n	8008b12 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	2101      	movs	r1, #1
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f7ff fbc1 	bl	8008294 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	2102      	movs	r1, #2
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f7ff fba7 	bl	800826c <LL_ADC_GetOffsetChannel>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d10a      	bne.n	8008b3e <HAL_ADC_ConfigChannel+0x27a>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	2102      	movs	r1, #2
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7ff fb9c 	bl	800826c <LL_ADC_GetOffsetChannel>
 8008b34:	4603      	mov	r3, r0
 8008b36:	0e9b      	lsrs	r3, r3, #26
 8008b38:	f003 021f 	and.w	r2, r3, #31
 8008b3c:	e010      	b.n	8008b60 <HAL_ADC_ConfigChannel+0x29c>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	2102      	movs	r1, #2
 8008b44:	4618      	mov	r0, r3
 8008b46:	f7ff fb91 	bl	800826c <LL_ADC_GetOffsetChannel>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b50:	fa93 f3a3 	rbit	r3, r3
 8008b54:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8008b56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b58:	fab3 f383 	clz	r3, r3
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	461a      	mov	r2, r3
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d105      	bne.n	8008b78 <HAL_ADC_ConfigChannel+0x2b4>
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	0e9b      	lsrs	r3, r3, #26
 8008b72:	f003 031f 	and.w	r3, r3, #31
 8008b76:	e00a      	b.n	8008b8e <HAL_ADC_ConfigChannel+0x2ca>
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b80:	fa93 f3a3 	rbit	r3, r3
 8008b84:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8008b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b88:	fab3 f383 	clz	r3, r3
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d106      	bne.n	8008ba0 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2200      	movs	r2, #0
 8008b98:	2102      	movs	r1, #2
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7ff fb7a 	bl	8008294 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	2103      	movs	r1, #3
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f7ff fb60 	bl	800826c <LL_ADC_GetOffsetChannel>
 8008bac:	4603      	mov	r3, r0
 8008bae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d10a      	bne.n	8008bcc <HAL_ADC_ConfigChannel+0x308>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	2103      	movs	r1, #3
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7ff fb55 	bl	800826c <LL_ADC_GetOffsetChannel>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	0e9b      	lsrs	r3, r3, #26
 8008bc6:	f003 021f 	and.w	r2, r3, #31
 8008bca:	e010      	b.n	8008bee <HAL_ADC_ConfigChannel+0x32a>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2103      	movs	r1, #3
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f7ff fb4a 	bl	800826c <LL_ADC_GetOffsetChannel>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bde:	fa93 f3a3 	rbit	r3, r3
 8008be2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008be6:	fab3 f383 	clz	r3, r3
 8008bea:	b2db      	uxtb	r3, r3
 8008bec:	461a      	mov	r2, r3
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d105      	bne.n	8008c06 <HAL_ADC_ConfigChannel+0x342>
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	0e9b      	lsrs	r3, r3, #26
 8008c00:	f003 031f 	and.w	r3, r3, #31
 8008c04:	e00a      	b.n	8008c1c <HAL_ADC_ConfigChannel+0x358>
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c0e:	fa93 f3a3 	rbit	r3, r3
 8008c12:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8008c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c16:	fab3 f383 	clz	r3, r3
 8008c1a:	b2db      	uxtb	r3, r3
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d106      	bne.n	8008c2e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	2200      	movs	r2, #0
 8008c26:	2103      	movs	r1, #3
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f7ff fb33 	bl	8008294 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4618      	mov	r0, r3
 8008c34:	f7ff fc4c 	bl	80084d0 <LL_ADC_IsEnabled>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	f040 810c 	bne.w	8008e58 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6818      	ldr	r0, [r3, #0]
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	6819      	ldr	r1, [r3, #0]
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	f7ff fbcd 	bl	80083ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	68db      	ldr	r3, [r3, #12]
 8008c56:	4aaf      	ldr	r2, [pc, #700]	; (8008f14 <HAL_ADC_ConfigChannel+0x650>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	f040 80fd 	bne.w	8008e58 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d10b      	bne.n	8008c86 <HAL_ADC_ConfigChannel+0x3c2>
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	0e9b      	lsrs	r3, r3, #26
 8008c74:	3301      	adds	r3, #1
 8008c76:	f003 031f 	and.w	r3, r3, #31
 8008c7a:	2b09      	cmp	r3, #9
 8008c7c:	bf94      	ite	ls
 8008c7e:	2301      	movls	r3, #1
 8008c80:	2300      	movhi	r3, #0
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	e012      	b.n	8008cac <HAL_ADC_ConfigChannel+0x3e8>
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c8e:	fa93 f3a3 	rbit	r3, r3
 8008c92:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8008c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c96:	fab3 f383 	clz	r3, r3
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	3301      	adds	r3, #1
 8008c9e:	f003 031f 	and.w	r3, r3, #31
 8008ca2:	2b09      	cmp	r3, #9
 8008ca4:	bf94      	ite	ls
 8008ca6:	2301      	movls	r3, #1
 8008ca8:	2300      	movhi	r3, #0
 8008caa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d064      	beq.n	8008d7a <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d107      	bne.n	8008ccc <HAL_ADC_ConfigChannel+0x408>
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	0e9b      	lsrs	r3, r3, #26
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	069b      	lsls	r3, r3, #26
 8008cc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008cca:	e00e      	b.n	8008cea <HAL_ADC_ConfigChannel+0x426>
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd4:	fa93 f3a3 	rbit	r3, r3
 8008cd8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cdc:	fab3 f383 	clz	r3, r3
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	069b      	lsls	r3, r3, #26
 8008ce6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d109      	bne.n	8008d0a <HAL_ADC_ConfigChannel+0x446>
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	0e9b      	lsrs	r3, r3, #26
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	f003 031f 	and.w	r3, r3, #31
 8008d02:	2101      	movs	r1, #1
 8008d04:	fa01 f303 	lsl.w	r3, r1, r3
 8008d08:	e010      	b.n	8008d2c <HAL_ADC_ConfigChannel+0x468>
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d12:	fa93 f3a3 	rbit	r3, r3
 8008d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d1a:	fab3 f383 	clz	r3, r3
 8008d1e:	b2db      	uxtb	r3, r3
 8008d20:	3301      	adds	r3, #1
 8008d22:	f003 031f 	and.w	r3, r3, #31
 8008d26:	2101      	movs	r1, #1
 8008d28:	fa01 f303 	lsl.w	r3, r1, r3
 8008d2c:	ea42 0103 	orr.w	r1, r2, r3
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d10a      	bne.n	8008d52 <HAL_ADC_ConfigChannel+0x48e>
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	0e9b      	lsrs	r3, r3, #26
 8008d42:	3301      	adds	r3, #1
 8008d44:	f003 021f 	and.w	r2, r3, #31
 8008d48:	4613      	mov	r3, r2
 8008d4a:	005b      	lsls	r3, r3, #1
 8008d4c:	4413      	add	r3, r2
 8008d4e:	051b      	lsls	r3, r3, #20
 8008d50:	e011      	b.n	8008d76 <HAL_ADC_ConfigChannel+0x4b2>
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d5a:	fa93 f3a3 	rbit	r3, r3
 8008d5e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8008d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d62:	fab3 f383 	clz	r3, r3
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	3301      	adds	r3, #1
 8008d6a:	f003 021f 	and.w	r2, r3, #31
 8008d6e:	4613      	mov	r3, r2
 8008d70:	005b      	lsls	r3, r3, #1
 8008d72:	4413      	add	r3, r2
 8008d74:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008d76:	430b      	orrs	r3, r1
 8008d78:	e069      	b.n	8008e4e <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d107      	bne.n	8008d96 <HAL_ADC_ConfigChannel+0x4d2>
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	0e9b      	lsrs	r3, r3, #26
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	069b      	lsls	r3, r3, #26
 8008d90:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008d94:	e00e      	b.n	8008db4 <HAL_ADC_ConfigChannel+0x4f0>
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d9c:	6a3b      	ldr	r3, [r7, #32]
 8008d9e:	fa93 f3a3 	rbit	r3, r3
 8008da2:	61fb      	str	r3, [r7, #28]
  return result;
 8008da4:	69fb      	ldr	r3, [r7, #28]
 8008da6:	fab3 f383 	clz	r3, r3
 8008daa:	b2db      	uxtb	r3, r3
 8008dac:	3301      	adds	r3, #1
 8008dae:	069b      	lsls	r3, r3, #26
 8008db0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d109      	bne.n	8008dd4 <HAL_ADC_ConfigChannel+0x510>
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	0e9b      	lsrs	r3, r3, #26
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	f003 031f 	and.w	r3, r3, #31
 8008dcc:	2101      	movs	r1, #1
 8008dce:	fa01 f303 	lsl.w	r3, r1, r3
 8008dd2:	e010      	b.n	8008df6 <HAL_ADC_ConfigChannel+0x532>
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008dda:	69bb      	ldr	r3, [r7, #24]
 8008ddc:	fa93 f3a3 	rbit	r3, r3
 8008de0:	617b      	str	r3, [r7, #20]
  return result;
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	fab3 f383 	clz	r3, r3
 8008de8:	b2db      	uxtb	r3, r3
 8008dea:	3301      	adds	r3, #1
 8008dec:	f003 031f 	and.w	r3, r3, #31
 8008df0:	2101      	movs	r1, #1
 8008df2:	fa01 f303 	lsl.w	r3, r1, r3
 8008df6:	ea42 0103 	orr.w	r1, r2, r3
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d10d      	bne.n	8008e22 <HAL_ADC_ConfigChannel+0x55e>
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	0e9b      	lsrs	r3, r3, #26
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	f003 021f 	and.w	r2, r3, #31
 8008e12:	4613      	mov	r3, r2
 8008e14:	005b      	lsls	r3, r3, #1
 8008e16:	4413      	add	r3, r2
 8008e18:	3b1e      	subs	r3, #30
 8008e1a:	051b      	lsls	r3, r3, #20
 8008e1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008e20:	e014      	b.n	8008e4c <HAL_ADC_ConfigChannel+0x588>
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	fa93 f3a3 	rbit	r3, r3
 8008e2e:	60fb      	str	r3, [r7, #12]
  return result;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	fab3 f383 	clz	r3, r3
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	3301      	adds	r3, #1
 8008e3a:	f003 021f 	and.w	r2, r3, #31
 8008e3e:	4613      	mov	r3, r2
 8008e40:	005b      	lsls	r3, r3, #1
 8008e42:	4413      	add	r3, r2
 8008e44:	3b1e      	subs	r3, #30
 8008e46:	051b      	lsls	r3, r3, #20
 8008e48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008e4c:	430b      	orrs	r3, r1
 8008e4e:	683a      	ldr	r2, [r7, #0]
 8008e50:	6892      	ldr	r2, [r2, #8]
 8008e52:	4619      	mov	r1, r3
 8008e54:	f7ff faa2 	bl	800839c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	4b2e      	ldr	r3, [pc, #184]	; (8008f18 <HAL_ADC_ConfigChannel+0x654>)
 8008e5e:	4013      	ands	r3, r2
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	f000 80c9 	beq.w	8008ff8 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e6e:	d004      	beq.n	8008e7a <HAL_ADC_ConfigChannel+0x5b6>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a29      	ldr	r2, [pc, #164]	; (8008f1c <HAL_ADC_ConfigChannel+0x658>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d101      	bne.n	8008e7e <HAL_ADC_ConfigChannel+0x5ba>
 8008e7a:	4b29      	ldr	r3, [pc, #164]	; (8008f20 <HAL_ADC_ConfigChannel+0x65c>)
 8008e7c:	e000      	b.n	8008e80 <HAL_ADC_ConfigChannel+0x5bc>
 8008e7e:	4b29      	ldr	r3, [pc, #164]	; (8008f24 <HAL_ADC_ConfigChannel+0x660>)
 8008e80:	4618      	mov	r0, r3
 8008e82:	f7ff f9c3 	bl	800820c <LL_ADC_GetCommonPathInternalCh>
 8008e86:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a26      	ldr	r2, [pc, #152]	; (8008f28 <HAL_ADC_ConfigChannel+0x664>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d004      	beq.n	8008e9e <HAL_ADC_ConfigChannel+0x5da>
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a24      	ldr	r2, [pc, #144]	; (8008f2c <HAL_ADC_ConfigChannel+0x668>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d14e      	bne.n	8008f3c <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008e9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ea2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d148      	bne.n	8008f3c <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008eb2:	d005      	beq.n	8008ec0 <HAL_ADC_ConfigChannel+0x5fc>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4a1d      	ldr	r2, [pc, #116]	; (8008f30 <HAL_ADC_ConfigChannel+0x66c>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	f040 8099 	bne.w	8008ff2 <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ec8:	d004      	beq.n	8008ed4 <HAL_ADC_ConfigChannel+0x610>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a13      	ldr	r2, [pc, #76]	; (8008f1c <HAL_ADC_ConfigChannel+0x658>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d101      	bne.n	8008ed8 <HAL_ADC_ConfigChannel+0x614>
 8008ed4:	4a12      	ldr	r2, [pc, #72]	; (8008f20 <HAL_ADC_ConfigChannel+0x65c>)
 8008ed6:	e000      	b.n	8008eda <HAL_ADC_ConfigChannel+0x616>
 8008ed8:	4a12      	ldr	r2, [pc, #72]	; (8008f24 <HAL_ADC_ConfigChannel+0x660>)
 8008eda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ede:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	4610      	mov	r0, r2
 8008ee6:	f7ff f97e 	bl	80081e6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8008eea:	4b12      	ldr	r3, [pc, #72]	; (8008f34 <HAL_ADC_ConfigChannel+0x670>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	099b      	lsrs	r3, r3, #6
 8008ef0:	4a11      	ldr	r2, [pc, #68]	; (8008f38 <HAL_ADC_ConfigChannel+0x674>)
 8008ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ef6:	099a      	lsrs	r2, r3, #6
 8008ef8:	4613      	mov	r3, r2
 8008efa:	005b      	lsls	r3, r3, #1
 8008efc:	4413      	add	r3, r2
 8008efe:	009b      	lsls	r3, r3, #2
 8008f00:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8008f02:	e002      	b.n	8008f0a <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	3b01      	subs	r3, #1
 8008f08:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d1f9      	bne.n	8008f04 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008f10:	e06f      	b.n	8008ff2 <HAL_ADC_ConfigChannel+0x72e>
 8008f12:	bf00      	nop
 8008f14:	407f0000 	.word	0x407f0000
 8008f18:	80080000 	.word	0x80080000
 8008f1c:	50000100 	.word	0x50000100
 8008f20:	50000300 	.word	0x50000300
 8008f24:	50000700 	.word	0x50000700
 8008f28:	c3210000 	.word	0xc3210000
 8008f2c:	90c00010 	.word	0x90c00010
 8008f30:	50000600 	.word	0x50000600
 8008f34:	20000ca8 	.word	0x20000ca8
 8008f38:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4a32      	ldr	r2, [pc, #200]	; (800900c <HAL_ADC_ConfigChannel+0x748>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d125      	bne.n	8008f92 <HAL_ADC_ConfigChannel+0x6ce>
 8008f46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d11f      	bne.n	8008f92 <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a2e      	ldr	r2, [pc, #184]	; (8009010 <HAL_ADC_ConfigChannel+0x74c>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d104      	bne.n	8008f66 <HAL_ADC_ConfigChannel+0x6a2>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a2c      	ldr	r2, [pc, #176]	; (8009014 <HAL_ADC_ConfigChannel+0x750>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d047      	beq.n	8008ff6 <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f6e:	d004      	beq.n	8008f7a <HAL_ADC_ConfigChannel+0x6b6>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a26      	ldr	r2, [pc, #152]	; (8009010 <HAL_ADC_ConfigChannel+0x74c>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d101      	bne.n	8008f7e <HAL_ADC_ConfigChannel+0x6ba>
 8008f7a:	4a27      	ldr	r2, [pc, #156]	; (8009018 <HAL_ADC_ConfigChannel+0x754>)
 8008f7c:	e000      	b.n	8008f80 <HAL_ADC_ConfigChannel+0x6bc>
 8008f7e:	4a27      	ldr	r2, [pc, #156]	; (800901c <HAL_ADC_ConfigChannel+0x758>)
 8008f80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f88:	4619      	mov	r1, r3
 8008f8a:	4610      	mov	r0, r2
 8008f8c:	f7ff f92b 	bl	80081e6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008f90:	e031      	b.n	8008ff6 <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a22      	ldr	r2, [pc, #136]	; (8009020 <HAL_ADC_ConfigChannel+0x75c>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d12d      	bne.n	8008ff8 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008f9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008fa0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d127      	bne.n	8008ff8 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a18      	ldr	r2, [pc, #96]	; (8009010 <HAL_ADC_ConfigChannel+0x74c>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d022      	beq.n	8008ff8 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008fba:	d004      	beq.n	8008fc6 <HAL_ADC_ConfigChannel+0x702>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a13      	ldr	r2, [pc, #76]	; (8009010 <HAL_ADC_ConfigChannel+0x74c>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d101      	bne.n	8008fca <HAL_ADC_ConfigChannel+0x706>
 8008fc6:	4a14      	ldr	r2, [pc, #80]	; (8009018 <HAL_ADC_ConfigChannel+0x754>)
 8008fc8:	e000      	b.n	8008fcc <HAL_ADC_ConfigChannel+0x708>
 8008fca:	4a14      	ldr	r2, [pc, #80]	; (800901c <HAL_ADC_ConfigChannel+0x758>)
 8008fcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008fd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	4610      	mov	r0, r2
 8008fd8:	f7ff f905 	bl	80081e6 <LL_ADC_SetCommonPathInternalCh>
 8008fdc:	e00c      	b.n	8008ff8 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fe2:	f043 0220 	orr.w	r2, r3, #32
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008fea:	2301      	movs	r3, #1
 8008fec:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8008ff0:	e002      	b.n	8008ff8 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008ff2:	bf00      	nop
 8008ff4:	e000      	b.n	8008ff8 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008ff6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8009000:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8009004:	4618      	mov	r0, r3
 8009006:	3798      	adds	r7, #152	; 0x98
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}
 800900c:	c7520000 	.word	0xc7520000
 8009010:	50000100 	.word	0x50000100
 8009014:	50000500 	.word	0x50000500
 8009018:	50000300 	.word	0x50000300
 800901c:	50000700 	.word	0x50000700
 8009020:	cb840000 	.word	0xcb840000

08009024 <LL_ADC_IsEnabled>:
{
 8009024:	b480      	push	{r7}
 8009026:	b083      	sub	sp, #12
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	f003 0301 	and.w	r3, r3, #1
 8009034:	2b01      	cmp	r3, #1
 8009036:	d101      	bne.n	800903c <LL_ADC_IsEnabled+0x18>
 8009038:	2301      	movs	r3, #1
 800903a:	e000      	b.n	800903e <LL_ADC_IsEnabled+0x1a>
 800903c:	2300      	movs	r3, #0
}
 800903e:	4618      	mov	r0, r3
 8009040:	370c      	adds	r7, #12
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr

0800904a <LL_ADC_REG_IsConversionOngoing>:
{
 800904a:	b480      	push	{r7}
 800904c:	b083      	sub	sp, #12
 800904e:	af00      	add	r7, sp, #0
 8009050:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	f003 0304 	and.w	r3, r3, #4
 800905a:	2b04      	cmp	r3, #4
 800905c:	d101      	bne.n	8009062 <LL_ADC_REG_IsConversionOngoing+0x18>
 800905e:	2301      	movs	r3, #1
 8009060:	e000      	b.n	8009064 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009062:	2300      	movs	r3, #0
}
 8009064:	4618      	mov	r0, r3
 8009066:	370c      	adds	r7, #12
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr

08009070 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8009070:	b590      	push	{r4, r7, lr}
 8009072:	b0a1      	sub	sp, #132	; 0x84
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800907a:	2300      	movs	r3, #0
 800907c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009086:	2b01      	cmp	r3, #1
 8009088:	d101      	bne.n	800908e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800908a:	2302      	movs	r3, #2
 800908c:	e0e3      	b.n	8009256 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2201      	movs	r2, #1
 8009092:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800909e:	d102      	bne.n	80090a6 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80090a0:	4b6f      	ldr	r3, [pc, #444]	; (8009260 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80090a2:	60bb      	str	r3, [r7, #8]
 80090a4:	e009      	b.n	80090ba <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a6e      	ldr	r2, [pc, #440]	; (8009264 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d102      	bne.n	80090b6 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 80090b0:	4b6d      	ldr	r3, [pc, #436]	; (8009268 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80090b2:	60bb      	str	r3, [r7, #8]
 80090b4:	e001      	b.n	80090ba <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80090b6:	2300      	movs	r3, #0
 80090b8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d10b      	bne.n	80090d8 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090c4:	f043 0220 	orr.w	r2, r3, #32
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80090d4:	2301      	movs	r3, #1
 80090d6:	e0be      	b.n	8009256 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	4618      	mov	r0, r3
 80090dc:	f7ff ffb5 	bl	800904a <LL_ADC_REG_IsConversionOngoing>
 80090e0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7ff ffaf 	bl	800904a <LL_ADC_REG_IsConversionOngoing>
 80090ec:	4603      	mov	r3, r0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	f040 80a0 	bne.w	8009234 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80090f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	f040 809c 	bne.w	8009234 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009104:	d004      	beq.n	8009110 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4a55      	ldr	r2, [pc, #340]	; (8009260 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d101      	bne.n	8009114 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8009110:	4b56      	ldr	r3, [pc, #344]	; (800926c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8009112:	e000      	b.n	8009116 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8009114:	4b56      	ldr	r3, [pc, #344]	; (8009270 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8009116:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d04b      	beq.n	80091b8 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8009120:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009122:	689b      	ldr	r3, [r3, #8]
 8009124:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	6859      	ldr	r1, [r3, #4]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009132:	035b      	lsls	r3, r3, #13
 8009134:	430b      	orrs	r3, r1
 8009136:	431a      	orrs	r2, r3
 8009138:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800913a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009144:	d004      	beq.n	8009150 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4a45      	ldr	r2, [pc, #276]	; (8009260 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d10f      	bne.n	8009170 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8009150:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8009154:	f7ff ff66 	bl	8009024 <LL_ADC_IsEnabled>
 8009158:	4604      	mov	r4, r0
 800915a:	4841      	ldr	r0, [pc, #260]	; (8009260 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800915c:	f7ff ff62 	bl	8009024 <LL_ADC_IsEnabled>
 8009160:	4603      	mov	r3, r0
 8009162:	4323      	orrs	r3, r4
 8009164:	2b00      	cmp	r3, #0
 8009166:	bf0c      	ite	eq
 8009168:	2301      	moveq	r3, #1
 800916a:	2300      	movne	r3, #0
 800916c:	b2db      	uxtb	r3, r3
 800916e:	e012      	b.n	8009196 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8009170:	483c      	ldr	r0, [pc, #240]	; (8009264 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8009172:	f7ff ff57 	bl	8009024 <LL_ADC_IsEnabled>
 8009176:	4604      	mov	r4, r0
 8009178:	483b      	ldr	r0, [pc, #236]	; (8009268 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800917a:	f7ff ff53 	bl	8009024 <LL_ADC_IsEnabled>
 800917e:	4603      	mov	r3, r0
 8009180:	431c      	orrs	r4, r3
 8009182:	483c      	ldr	r0, [pc, #240]	; (8009274 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8009184:	f7ff ff4e 	bl	8009024 <LL_ADC_IsEnabled>
 8009188:	4603      	mov	r3, r0
 800918a:	4323      	orrs	r3, r4
 800918c:	2b00      	cmp	r3, #0
 800918e:	bf0c      	ite	eq
 8009190:	2301      	moveq	r3, #1
 8009192:	2300      	movne	r3, #0
 8009194:	b2db      	uxtb	r3, r3
 8009196:	2b00      	cmp	r3, #0
 8009198:	d056      	beq.n	8009248 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800919a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80091a2:	f023 030f 	bic.w	r3, r3, #15
 80091a6:	683a      	ldr	r2, [r7, #0]
 80091a8:	6811      	ldr	r1, [r2, #0]
 80091aa:	683a      	ldr	r2, [r7, #0]
 80091ac:	6892      	ldr	r2, [r2, #8]
 80091ae:	430a      	orrs	r2, r1
 80091b0:	431a      	orrs	r2, r3
 80091b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091b4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80091b6:	e047      	b.n	8009248 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80091b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80091c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091c2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091cc:	d004      	beq.n	80091d8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4a23      	ldr	r2, [pc, #140]	; (8009260 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d10f      	bne.n	80091f8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80091d8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80091dc:	f7ff ff22 	bl	8009024 <LL_ADC_IsEnabled>
 80091e0:	4604      	mov	r4, r0
 80091e2:	481f      	ldr	r0, [pc, #124]	; (8009260 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80091e4:	f7ff ff1e 	bl	8009024 <LL_ADC_IsEnabled>
 80091e8:	4603      	mov	r3, r0
 80091ea:	4323      	orrs	r3, r4
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	bf0c      	ite	eq
 80091f0:	2301      	moveq	r3, #1
 80091f2:	2300      	movne	r3, #0
 80091f4:	b2db      	uxtb	r3, r3
 80091f6:	e012      	b.n	800921e <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 80091f8:	481a      	ldr	r0, [pc, #104]	; (8009264 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80091fa:	f7ff ff13 	bl	8009024 <LL_ADC_IsEnabled>
 80091fe:	4604      	mov	r4, r0
 8009200:	4819      	ldr	r0, [pc, #100]	; (8009268 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8009202:	f7ff ff0f 	bl	8009024 <LL_ADC_IsEnabled>
 8009206:	4603      	mov	r3, r0
 8009208:	431c      	orrs	r4, r3
 800920a:	481a      	ldr	r0, [pc, #104]	; (8009274 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800920c:	f7ff ff0a 	bl	8009024 <LL_ADC_IsEnabled>
 8009210:	4603      	mov	r3, r0
 8009212:	4323      	orrs	r3, r4
 8009214:	2b00      	cmp	r3, #0
 8009216:	bf0c      	ite	eq
 8009218:	2301      	moveq	r3, #1
 800921a:	2300      	movne	r3, #0
 800921c:	b2db      	uxtb	r3, r3
 800921e:	2b00      	cmp	r3, #0
 8009220:	d012      	beq.n	8009248 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8009222:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800922a:	f023 030f 	bic.w	r3, r3, #15
 800922e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009230:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009232:	e009      	b.n	8009248 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009238:	f043 0220 	orr.w	r2, r3, #32
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8009240:	2301      	movs	r3, #1
 8009242:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8009246:	e000      	b.n	800924a <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009248:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2200      	movs	r2, #0
 800924e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8009252:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8009256:	4618      	mov	r0, r3
 8009258:	3784      	adds	r7, #132	; 0x84
 800925a:	46bd      	mov	sp, r7
 800925c:	bd90      	pop	{r4, r7, pc}
 800925e:	bf00      	nop
 8009260:	50000100 	.word	0x50000100
 8009264:	50000400 	.word	0x50000400
 8009268:	50000500 	.word	0x50000500
 800926c:	50000300 	.word	0x50000300
 8009270:	50000700 	.word	0x50000700
 8009274:	50000600 	.word	0x50000600

08009278 <LL_EXTI_EnableIT_0_31>:
{
 8009278:	b480      	push	{r7}
 800927a:	b083      	sub	sp, #12
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8009280:	4b05      	ldr	r3, [pc, #20]	; (8009298 <LL_EXTI_EnableIT_0_31+0x20>)
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	4904      	ldr	r1, [pc, #16]	; (8009298 <LL_EXTI_EnableIT_0_31+0x20>)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	4313      	orrs	r3, r2
 800928a:	600b      	str	r3, [r1, #0]
}
 800928c:	bf00      	nop
 800928e:	370c      	adds	r7, #12
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr
 8009298:	40010400 	.word	0x40010400

0800929c <LL_EXTI_EnableIT_32_63>:
{
 800929c:	b480      	push	{r7}
 800929e:	b083      	sub	sp, #12
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80092a4:	4b05      	ldr	r3, [pc, #20]	; (80092bc <LL_EXTI_EnableIT_32_63+0x20>)
 80092a6:	6a1a      	ldr	r2, [r3, #32]
 80092a8:	4904      	ldr	r1, [pc, #16]	; (80092bc <LL_EXTI_EnableIT_32_63+0x20>)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	4313      	orrs	r3, r2
 80092ae:	620b      	str	r3, [r1, #32]
}
 80092b0:	bf00      	nop
 80092b2:	370c      	adds	r7, #12
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr
 80092bc:	40010400 	.word	0x40010400

080092c0 <LL_EXTI_DisableIT_0_31>:
{
 80092c0:	b480      	push	{r7}
 80092c2:	b083      	sub	sp, #12
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80092c8:	4b06      	ldr	r3, [pc, #24]	; (80092e4 <LL_EXTI_DisableIT_0_31+0x24>)
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	43db      	mvns	r3, r3
 80092d0:	4904      	ldr	r1, [pc, #16]	; (80092e4 <LL_EXTI_DisableIT_0_31+0x24>)
 80092d2:	4013      	ands	r3, r2
 80092d4:	600b      	str	r3, [r1, #0]
}
 80092d6:	bf00      	nop
 80092d8:	370c      	adds	r7, #12
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr
 80092e2:	bf00      	nop
 80092e4:	40010400 	.word	0x40010400

080092e8 <LL_EXTI_DisableIT_32_63>:
{
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80092f0:	4b06      	ldr	r3, [pc, #24]	; (800930c <LL_EXTI_DisableIT_32_63+0x24>)
 80092f2:	6a1a      	ldr	r2, [r3, #32]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	43db      	mvns	r3, r3
 80092f8:	4904      	ldr	r1, [pc, #16]	; (800930c <LL_EXTI_DisableIT_32_63+0x24>)
 80092fa:	4013      	ands	r3, r2
 80092fc:	620b      	str	r3, [r1, #32]
}
 80092fe:	bf00      	nop
 8009300:	370c      	adds	r7, #12
 8009302:	46bd      	mov	sp, r7
 8009304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009308:	4770      	bx	lr
 800930a:	bf00      	nop
 800930c:	40010400 	.word	0x40010400

08009310 <LL_EXTI_EnableEvent_0_31>:
{
 8009310:	b480      	push	{r7}
 8009312:	b083      	sub	sp, #12
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8009318:	4b05      	ldr	r3, [pc, #20]	; (8009330 <LL_EXTI_EnableEvent_0_31+0x20>)
 800931a:	685a      	ldr	r2, [r3, #4]
 800931c:	4904      	ldr	r1, [pc, #16]	; (8009330 <LL_EXTI_EnableEvent_0_31+0x20>)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	4313      	orrs	r3, r2
 8009322:	604b      	str	r3, [r1, #4]
}
 8009324:	bf00      	nop
 8009326:	370c      	adds	r7, #12
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr
 8009330:	40010400 	.word	0x40010400

08009334 <LL_EXTI_EnableEvent_32_63>:
{
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800933c:	4b05      	ldr	r3, [pc, #20]	; (8009354 <LL_EXTI_EnableEvent_32_63+0x20>)
 800933e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009340:	4904      	ldr	r1, [pc, #16]	; (8009354 <LL_EXTI_EnableEvent_32_63+0x20>)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	4313      	orrs	r3, r2
 8009346:	624b      	str	r3, [r1, #36]	; 0x24
}
 8009348:	bf00      	nop
 800934a:	370c      	adds	r7, #12
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr
 8009354:	40010400 	.word	0x40010400

08009358 <LL_EXTI_DisableEvent_0_31>:
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8009360:	4b06      	ldr	r3, [pc, #24]	; (800937c <LL_EXTI_DisableEvent_0_31+0x24>)
 8009362:	685a      	ldr	r2, [r3, #4]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	43db      	mvns	r3, r3
 8009368:	4904      	ldr	r1, [pc, #16]	; (800937c <LL_EXTI_DisableEvent_0_31+0x24>)
 800936a:	4013      	ands	r3, r2
 800936c:	604b      	str	r3, [r1, #4]
}
 800936e:	bf00      	nop
 8009370:	370c      	adds	r7, #12
 8009372:	46bd      	mov	sp, r7
 8009374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009378:	4770      	bx	lr
 800937a:	bf00      	nop
 800937c:	40010400 	.word	0x40010400

08009380 <LL_EXTI_DisableEvent_32_63>:
{
 8009380:	b480      	push	{r7}
 8009382:	b083      	sub	sp, #12
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8009388:	4b06      	ldr	r3, [pc, #24]	; (80093a4 <LL_EXTI_DisableEvent_32_63+0x24>)
 800938a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	43db      	mvns	r3, r3
 8009390:	4904      	ldr	r1, [pc, #16]	; (80093a4 <LL_EXTI_DisableEvent_32_63+0x24>)
 8009392:	4013      	ands	r3, r2
 8009394:	624b      	str	r3, [r1, #36]	; 0x24
}
 8009396:	bf00      	nop
 8009398:	370c      	adds	r7, #12
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr
 80093a2:	bf00      	nop
 80093a4:	40010400 	.word	0x40010400

080093a8 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80093a8:	b480      	push	{r7}
 80093aa:	b083      	sub	sp, #12
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80093b0:	4b05      	ldr	r3, [pc, #20]	; (80093c8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80093b2:	689a      	ldr	r2, [r3, #8]
 80093b4:	4904      	ldr	r1, [pc, #16]	; (80093c8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4313      	orrs	r3, r2
 80093ba:	608b      	str	r3, [r1, #8]
}
 80093bc:	bf00      	nop
 80093be:	370c      	adds	r7, #12
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr
 80093c8:	40010400 	.word	0x40010400

080093cc <LL_EXTI_EnableRisingTrig_32_63>:
{
 80093cc:	b480      	push	{r7}
 80093ce:	b083      	sub	sp, #12
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80093d4:	4b05      	ldr	r3, [pc, #20]	; (80093ec <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80093d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80093d8:	4904      	ldr	r1, [pc, #16]	; (80093ec <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	4313      	orrs	r3, r2
 80093de:	628b      	str	r3, [r1, #40]	; 0x28
}
 80093e0:	bf00      	nop
 80093e2:	370c      	adds	r7, #12
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr
 80093ec:	40010400 	.word	0x40010400

080093f0 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80093f0:	b480      	push	{r7}
 80093f2:	b083      	sub	sp, #12
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80093f8:	4b06      	ldr	r3, [pc, #24]	; (8009414 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80093fa:	689a      	ldr	r2, [r3, #8]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	43db      	mvns	r3, r3
 8009400:	4904      	ldr	r1, [pc, #16]	; (8009414 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8009402:	4013      	ands	r3, r2
 8009404:	608b      	str	r3, [r1, #8]
}
 8009406:	bf00      	nop
 8009408:	370c      	adds	r7, #12
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr
 8009412:	bf00      	nop
 8009414:	40010400 	.word	0x40010400

08009418 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8009420:	4b06      	ldr	r3, [pc, #24]	; (800943c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8009422:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	43db      	mvns	r3, r3
 8009428:	4904      	ldr	r1, [pc, #16]	; (800943c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800942a:	4013      	ands	r3, r2
 800942c:	628b      	str	r3, [r1, #40]	; 0x28
}
 800942e:	bf00      	nop
 8009430:	370c      	adds	r7, #12
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr
 800943a:	bf00      	nop
 800943c:	40010400 	.word	0x40010400

08009440 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8009448:	4b05      	ldr	r3, [pc, #20]	; (8009460 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800944a:	68da      	ldr	r2, [r3, #12]
 800944c:	4904      	ldr	r1, [pc, #16]	; (8009460 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4313      	orrs	r3, r2
 8009452:	60cb      	str	r3, [r1, #12]
}
 8009454:	bf00      	nop
 8009456:	370c      	adds	r7, #12
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr
 8009460:	40010400 	.word	0x40010400

08009464 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800946c:	4b05      	ldr	r3, [pc, #20]	; (8009484 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800946e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009470:	4904      	ldr	r1, [pc, #16]	; (8009484 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	4313      	orrs	r3, r2
 8009476:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8009478:	bf00      	nop
 800947a:	370c      	adds	r7, #12
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr
 8009484:	40010400 	.word	0x40010400

08009488 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8009488:	b480      	push	{r7}
 800948a:	b083      	sub	sp, #12
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8009490:	4b06      	ldr	r3, [pc, #24]	; (80094ac <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8009492:	68da      	ldr	r2, [r3, #12]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	43db      	mvns	r3, r3
 8009498:	4904      	ldr	r1, [pc, #16]	; (80094ac <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800949a:	4013      	ands	r3, r2
 800949c:	60cb      	str	r3, [r1, #12]
}
 800949e:	bf00      	nop
 80094a0:	370c      	adds	r7, #12
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr
 80094aa:	bf00      	nop
 80094ac:	40010400 	.word	0x40010400

080094b0 <LL_EXTI_DisableFallingTrig_32_63>:
{
 80094b0:	b480      	push	{r7}
 80094b2:	b083      	sub	sp, #12
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80094b8:	4b06      	ldr	r3, [pc, #24]	; (80094d4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80094ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	43db      	mvns	r3, r3
 80094c0:	4904      	ldr	r1, [pc, #16]	; (80094d4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80094c2:	4013      	ands	r3, r2
 80094c4:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80094c6:	bf00      	nop
 80094c8:	370c      	adds	r7, #12
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr
 80094d2:	bf00      	nop
 80094d4:	40010400 	.word	0x40010400

080094d8 <LL_EXTI_ClearFlag_0_31>:
{
 80094d8:	b480      	push	{r7}
 80094da:	b083      	sub	sp, #12
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80094e0:	4a04      	ldr	r2, [pc, #16]	; (80094f4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6153      	str	r3, [r2, #20]
}
 80094e6:	bf00      	nop
 80094e8:	370c      	adds	r7, #12
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr
 80094f2:	bf00      	nop
 80094f4:	40010400 	.word	0x40010400

080094f8 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8009500:	4a04      	ldr	r2, [pc, #16]	; (8009514 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6353      	str	r3, [r2, #52]	; 0x34
}
 8009506:	bf00      	nop
 8009508:	370c      	adds	r7, #12
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr
 8009512:	bf00      	nop
 8009514:	40010400 	.word	0x40010400

08009518 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b088      	sub	sp, #32
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8009520:	2300      	movs	r3, #0
 8009522:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009524:	2300      	movs	r3, #0
 8009526:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d102      	bne.n	8009534 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	77fb      	strb	r3, [r7, #31]
 8009532:	e180      	b.n	8009836 <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800953e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009542:	d102      	bne.n	800954a <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8009544:	2301      	movs	r3, #1
 8009546:	77fb      	strb	r3, [r7, #31]
 8009548:	e175      	b.n	8009836 <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	7f5b      	ldrb	r3, [r3, #29]
 800954e:	b2db      	uxtb	r3, r3
 8009550:	2b00      	cmp	r3, #0
 8009552:	d108      	bne.n	8009566 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f7fd fa23 	bl	80069ac <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009570:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	695b      	ldr	r3, [r3, #20]
 8009580:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 800958c:	4313      	orrs	r3, r2
 800958e:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	681a      	ldr	r2, [r3, #0]
 8009596:	4b98      	ldr	r3, [pc, #608]	; (80097f8 <HAL_COMP_Init+0x2e0>)
 8009598:	4013      	ands	r3, r2
 800959a:	687a      	ldr	r2, [r7, #4]
 800959c:	6812      	ldr	r2, [r2, #0]
 800959e:	6979      	ldr	r1, [r7, #20]
 80095a0:	430b      	orrs	r3, r1
 80095a2:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d015      	beq.n	80095de <HAL_COMP_Init+0xc6>
 80095b2:	69bb      	ldr	r3, [r7, #24]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d112      	bne.n	80095de <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80095b8:	4b90      	ldr	r3, [pc, #576]	; (80097fc <HAL_COMP_Init+0x2e4>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	099b      	lsrs	r3, r3, #6
 80095be:	4a90      	ldr	r2, [pc, #576]	; (8009800 <HAL_COMP_Init+0x2e8>)
 80095c0:	fba2 2303 	umull	r2, r3, r2, r3
 80095c4:	099a      	lsrs	r2, r3, #6
 80095c6:	4613      	mov	r3, r2
 80095c8:	009b      	lsls	r3, r3, #2
 80095ca:	4413      	add	r3, r2
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80095d0:	e002      	b.n	80095d8 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	3b01      	subs	r3, #1
 80095d6:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d1f9      	bne.n	80095d2 <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4a88      	ldr	r2, [pc, #544]	; (8009804 <HAL_COMP_Init+0x2ec>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d028      	beq.n	800963a <HAL_COMP_Init+0x122>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a86      	ldr	r2, [pc, #536]	; (8009808 <HAL_COMP_Init+0x2f0>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d020      	beq.n	8009634 <HAL_COMP_Init+0x11c>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a85      	ldr	r2, [pc, #532]	; (800980c <HAL_COMP_Init+0x2f4>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d018      	beq.n	800962e <HAL_COMP_Init+0x116>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a83      	ldr	r2, [pc, #524]	; (8009810 <HAL_COMP_Init+0x2f8>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d010      	beq.n	8009628 <HAL_COMP_Init+0x110>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4a82      	ldr	r2, [pc, #520]	; (8009814 <HAL_COMP_Init+0x2fc>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d008      	beq.n	8009622 <HAL_COMP_Init+0x10a>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a80      	ldr	r2, [pc, #512]	; (8009818 <HAL_COMP_Init+0x300>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d101      	bne.n	800961e <HAL_COMP_Init+0x106>
 800961a:	2301      	movs	r3, #1
 800961c:	e00f      	b.n	800963e <HAL_COMP_Init+0x126>
 800961e:	2302      	movs	r3, #2
 8009620:	e00d      	b.n	800963e <HAL_COMP_Init+0x126>
 8009622:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009626:	e00a      	b.n	800963e <HAL_COMP_Init+0x126>
 8009628:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800962c:	e007      	b.n	800963e <HAL_COMP_Init+0x126>
 800962e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8009632:	e004      	b.n	800963e <HAL_COMP_Init+0x126>
 8009634:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009638:	e001      	b.n	800963e <HAL_COMP_Init+0x126>
 800963a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800963e:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	699b      	ldr	r3, [r3, #24]
 8009644:	f003 0303 	and.w	r3, r3, #3
 8009648:	2b00      	cmp	r3, #0
 800964a:	f000 80b6 	beq.w	80097ba <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	699b      	ldr	r3, [r3, #24]
 8009652:	f003 0310 	and.w	r3, r3, #16
 8009656:	2b00      	cmp	r3, #0
 8009658:	d011      	beq.n	800967e <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4a6e      	ldr	r2, [pc, #440]	; (8009818 <HAL_COMP_Init+0x300>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d004      	beq.n	800966e <HAL_COMP_Init+0x156>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4a6c      	ldr	r2, [pc, #432]	; (800981c <HAL_COMP_Init+0x304>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d103      	bne.n	8009676 <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 800966e:	6938      	ldr	r0, [r7, #16]
 8009670:	f7ff feac 	bl	80093cc <LL_EXTI_EnableRisingTrig_32_63>
 8009674:	e014      	b.n	80096a0 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8009676:	6938      	ldr	r0, [r7, #16]
 8009678:	f7ff fe96 	bl	80093a8 <LL_EXTI_EnableRisingTrig_0_31>
 800967c:	e010      	b.n	80096a0 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4a65      	ldr	r2, [pc, #404]	; (8009818 <HAL_COMP_Init+0x300>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d004      	beq.n	8009692 <HAL_COMP_Init+0x17a>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a63      	ldr	r2, [pc, #396]	; (800981c <HAL_COMP_Init+0x304>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d103      	bne.n	800969a <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8009692:	6938      	ldr	r0, [r7, #16]
 8009694:	f7ff fec0 	bl	8009418 <LL_EXTI_DisableRisingTrig_32_63>
 8009698:	e002      	b.n	80096a0 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800969a:	6938      	ldr	r0, [r7, #16]
 800969c:	f7ff fea8 	bl	80093f0 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	699b      	ldr	r3, [r3, #24]
 80096a4:	f003 0320 	and.w	r3, r3, #32
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d011      	beq.n	80096d0 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4a59      	ldr	r2, [pc, #356]	; (8009818 <HAL_COMP_Init+0x300>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d004      	beq.n	80096c0 <HAL_COMP_Init+0x1a8>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a58      	ldr	r2, [pc, #352]	; (800981c <HAL_COMP_Init+0x304>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d103      	bne.n	80096c8 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 80096c0:	6938      	ldr	r0, [r7, #16]
 80096c2:	f7ff fecf 	bl	8009464 <LL_EXTI_EnableFallingTrig_32_63>
 80096c6:	e014      	b.n	80096f2 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80096c8:	6938      	ldr	r0, [r7, #16]
 80096ca:	f7ff feb9 	bl	8009440 <LL_EXTI_EnableFallingTrig_0_31>
 80096ce:	e010      	b.n	80096f2 <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4a50      	ldr	r2, [pc, #320]	; (8009818 <HAL_COMP_Init+0x300>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d004      	beq.n	80096e4 <HAL_COMP_Init+0x1cc>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4a4f      	ldr	r2, [pc, #316]	; (800981c <HAL_COMP_Init+0x304>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d103      	bne.n	80096ec <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 80096e4:	6938      	ldr	r0, [r7, #16]
 80096e6:	f7ff fee3 	bl	80094b0 <LL_EXTI_DisableFallingTrig_32_63>
 80096ea:	e002      	b.n	80096f2 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80096ec:	6938      	ldr	r0, [r7, #16]
 80096ee:	f7ff fecb 	bl	8009488 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a48      	ldr	r2, [pc, #288]	; (8009818 <HAL_COMP_Init+0x300>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d004      	beq.n	8009706 <HAL_COMP_Init+0x1ee>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a46      	ldr	r2, [pc, #280]	; (800981c <HAL_COMP_Init+0x304>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d103      	bne.n	800970e <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8009706:	6938      	ldr	r0, [r7, #16]
 8009708:	f7ff fef6 	bl	80094f8 <LL_EXTI_ClearFlag_32_63>
 800970c:	e002      	b.n	8009714 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 800970e:	6938      	ldr	r0, [r7, #16]
 8009710:	f7ff fee2 	bl	80094d8 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	699b      	ldr	r3, [r3, #24]
 8009718:	f003 0302 	and.w	r3, r3, #2
 800971c:	2b00      	cmp	r3, #0
 800971e:	d011      	beq.n	8009744 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a3c      	ldr	r2, [pc, #240]	; (8009818 <HAL_COMP_Init+0x300>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d004      	beq.n	8009734 <HAL_COMP_Init+0x21c>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4a3b      	ldr	r2, [pc, #236]	; (800981c <HAL_COMP_Init+0x304>)
 8009730:	4293      	cmp	r3, r2
 8009732:	d103      	bne.n	800973c <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8009734:	6938      	ldr	r0, [r7, #16]
 8009736:	f7ff fdfd 	bl	8009334 <LL_EXTI_EnableEvent_32_63>
 800973a:	e014      	b.n	8009766 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 800973c:	6938      	ldr	r0, [r7, #16]
 800973e:	f7ff fde7 	bl	8009310 <LL_EXTI_EnableEvent_0_31>
 8009742:	e010      	b.n	8009766 <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a33      	ldr	r2, [pc, #204]	; (8009818 <HAL_COMP_Init+0x300>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d004      	beq.n	8009758 <HAL_COMP_Init+0x240>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4a32      	ldr	r2, [pc, #200]	; (800981c <HAL_COMP_Init+0x304>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d103      	bne.n	8009760 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8009758:	6938      	ldr	r0, [r7, #16]
 800975a:	f7ff fe11 	bl	8009380 <LL_EXTI_DisableEvent_32_63>
 800975e:	e002      	b.n	8009766 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8009760:	6938      	ldr	r0, [r7, #16]
 8009762:	f7ff fdf9 	bl	8009358 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	699b      	ldr	r3, [r3, #24]
 800976a:	f003 0301 	and.w	r3, r3, #1
 800976e:	2b00      	cmp	r3, #0
 8009770:	d011      	beq.n	8009796 <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4a28      	ldr	r2, [pc, #160]	; (8009818 <HAL_COMP_Init+0x300>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d004      	beq.n	8009786 <HAL_COMP_Init+0x26e>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a26      	ldr	r2, [pc, #152]	; (800981c <HAL_COMP_Init+0x304>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d103      	bne.n	800978e <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8009786:	6938      	ldr	r0, [r7, #16]
 8009788:	f7ff fd88 	bl	800929c <LL_EXTI_EnableIT_32_63>
 800978c:	e04b      	b.n	8009826 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 800978e:	6938      	ldr	r0, [r7, #16]
 8009790:	f7ff fd72 	bl	8009278 <LL_EXTI_EnableIT_0_31>
 8009794:	e047      	b.n	8009826 <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a1f      	ldr	r2, [pc, #124]	; (8009818 <HAL_COMP_Init+0x300>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d004      	beq.n	80097aa <HAL_COMP_Init+0x292>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4a1d      	ldr	r2, [pc, #116]	; (800981c <HAL_COMP_Init+0x304>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d103      	bne.n	80097b2 <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 80097aa:	6938      	ldr	r0, [r7, #16]
 80097ac:	f7ff fd9c 	bl	80092e8 <LL_EXTI_DisableIT_32_63>
 80097b0:	e039      	b.n	8009826 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 80097b2:	6938      	ldr	r0, [r7, #16]
 80097b4:	f7ff fd84 	bl	80092c0 <LL_EXTI_DisableIT_0_31>
 80097b8:	e035      	b.n	8009826 <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4a16      	ldr	r2, [pc, #88]	; (8009818 <HAL_COMP_Init+0x300>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d004      	beq.n	80097ce <HAL_COMP_Init+0x2b6>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4a14      	ldr	r2, [pc, #80]	; (800981c <HAL_COMP_Init+0x304>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d103      	bne.n	80097d6 <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 80097ce:	6938      	ldr	r0, [r7, #16]
 80097d0:	f7ff fdd6 	bl	8009380 <LL_EXTI_DisableEvent_32_63>
 80097d4:	e002      	b.n	80097dc <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80097d6:	6938      	ldr	r0, [r7, #16]
 80097d8:	f7ff fdbe 	bl	8009358 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a0d      	ldr	r2, [pc, #52]	; (8009818 <HAL_COMP_Init+0x300>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d004      	beq.n	80097f0 <HAL_COMP_Init+0x2d8>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4a0c      	ldr	r2, [pc, #48]	; (800981c <HAL_COMP_Init+0x304>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d117      	bne.n	8009820 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 80097f0:	6938      	ldr	r0, [r7, #16]
 80097f2:	f7ff fd79 	bl	80092e8 <LL_EXTI_DisableIT_32_63>
 80097f6:	e016      	b.n	8009826 <HAL_COMP_Init+0x30e>
 80097f8:	ff007e0f 	.word	0xff007e0f
 80097fc:	20000ca8 	.word	0x20000ca8
 8009800:	053e2d63 	.word	0x053e2d63
 8009804:	40010200 	.word	0x40010200
 8009808:	40010204 	.word	0x40010204
 800980c:	40010208 	.word	0x40010208
 8009810:	4001020c 	.word	0x4001020c
 8009814:	40010210 	.word	0x40010210
 8009818:	40010214 	.word	0x40010214
 800981c:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8009820:	6938      	ldr	r0, [r7, #16]
 8009822:	f7ff fd4d 	bl	80092c0 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	7f5b      	ldrb	r3, [r3, #29]
 800982a:	b2db      	uxtb	r3, r3
 800982c:	2b00      	cmp	r3, #0
 800982e:	d102      	bne.n	8009836 <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2201      	movs	r2, #1
 8009834:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8009836:	7ffb      	ldrb	r3, [r7, #31]
}
 8009838:	4618      	mov	r0, r3
 800983a:	3720      	adds	r7, #32
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <__NVIC_SetPriorityGrouping>:
{
 8009840:	b480      	push	{r7}
 8009842:	b085      	sub	sp, #20
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f003 0307 	and.w	r3, r3, #7
 800984e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009850:	4b0c      	ldr	r3, [pc, #48]	; (8009884 <__NVIC_SetPriorityGrouping+0x44>)
 8009852:	68db      	ldr	r3, [r3, #12]
 8009854:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009856:	68ba      	ldr	r2, [r7, #8]
 8009858:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800985c:	4013      	ands	r3, r2
 800985e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009868:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800986c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009872:	4a04      	ldr	r2, [pc, #16]	; (8009884 <__NVIC_SetPriorityGrouping+0x44>)
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	60d3      	str	r3, [r2, #12]
}
 8009878:	bf00      	nop
 800987a:	3714      	adds	r7, #20
 800987c:	46bd      	mov	sp, r7
 800987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009882:	4770      	bx	lr
 8009884:	e000ed00 	.word	0xe000ed00

08009888 <__NVIC_GetPriorityGrouping>:
{
 8009888:	b480      	push	{r7}
 800988a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800988c:	4b04      	ldr	r3, [pc, #16]	; (80098a0 <__NVIC_GetPriorityGrouping+0x18>)
 800988e:	68db      	ldr	r3, [r3, #12]
 8009890:	0a1b      	lsrs	r3, r3, #8
 8009892:	f003 0307 	and.w	r3, r3, #7
}
 8009896:	4618      	mov	r0, r3
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr
 80098a0:	e000ed00 	.word	0xe000ed00

080098a4 <__NVIC_EnableIRQ>:
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	4603      	mov	r3, r0
 80098ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80098ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	db0b      	blt.n	80098ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80098b6:	79fb      	ldrb	r3, [r7, #7]
 80098b8:	f003 021f 	and.w	r2, r3, #31
 80098bc:	4907      	ldr	r1, [pc, #28]	; (80098dc <__NVIC_EnableIRQ+0x38>)
 80098be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098c2:	095b      	lsrs	r3, r3, #5
 80098c4:	2001      	movs	r0, #1
 80098c6:	fa00 f202 	lsl.w	r2, r0, r2
 80098ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80098ce:	bf00      	nop
 80098d0:	370c      	adds	r7, #12
 80098d2:	46bd      	mov	sp, r7
 80098d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d8:	4770      	bx	lr
 80098da:	bf00      	nop
 80098dc:	e000e100 	.word	0xe000e100

080098e0 <__NVIC_DisableIRQ>:
{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	4603      	mov	r3, r0
 80098e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80098ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	db10      	blt.n	8009914 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80098f2:	79fb      	ldrb	r3, [r7, #7]
 80098f4:	f003 021f 	and.w	r2, r3, #31
 80098f8:	4909      	ldr	r1, [pc, #36]	; (8009920 <__NVIC_DisableIRQ+0x40>)
 80098fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098fe:	095b      	lsrs	r3, r3, #5
 8009900:	2001      	movs	r0, #1
 8009902:	fa00 f202 	lsl.w	r2, r0, r2
 8009906:	3320      	adds	r3, #32
 8009908:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800990c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009910:	f3bf 8f6f 	isb	sy
}
 8009914:	bf00      	nop
 8009916:	370c      	adds	r7, #12
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr
 8009920:	e000e100 	.word	0xe000e100

08009924 <__NVIC_SetPriority>:
{
 8009924:	b480      	push	{r7}
 8009926:	b083      	sub	sp, #12
 8009928:	af00      	add	r7, sp, #0
 800992a:	4603      	mov	r3, r0
 800992c:	6039      	str	r1, [r7, #0]
 800992e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009934:	2b00      	cmp	r3, #0
 8009936:	db0a      	blt.n	800994e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	b2da      	uxtb	r2, r3
 800993c:	490c      	ldr	r1, [pc, #48]	; (8009970 <__NVIC_SetPriority+0x4c>)
 800993e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009942:	0112      	lsls	r2, r2, #4
 8009944:	b2d2      	uxtb	r2, r2
 8009946:	440b      	add	r3, r1
 8009948:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800994c:	e00a      	b.n	8009964 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	b2da      	uxtb	r2, r3
 8009952:	4908      	ldr	r1, [pc, #32]	; (8009974 <__NVIC_SetPriority+0x50>)
 8009954:	79fb      	ldrb	r3, [r7, #7]
 8009956:	f003 030f 	and.w	r3, r3, #15
 800995a:	3b04      	subs	r3, #4
 800995c:	0112      	lsls	r2, r2, #4
 800995e:	b2d2      	uxtb	r2, r2
 8009960:	440b      	add	r3, r1
 8009962:	761a      	strb	r2, [r3, #24]
}
 8009964:	bf00      	nop
 8009966:	370c      	adds	r7, #12
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr
 8009970:	e000e100 	.word	0xe000e100
 8009974:	e000ed00 	.word	0xe000ed00

08009978 <NVIC_EncodePriority>:
{
 8009978:	b480      	push	{r7}
 800997a:	b089      	sub	sp, #36	; 0x24
 800997c:	af00      	add	r7, sp, #0
 800997e:	60f8      	str	r0, [r7, #12]
 8009980:	60b9      	str	r1, [r7, #8]
 8009982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f003 0307 	and.w	r3, r3, #7
 800998a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800998c:	69fb      	ldr	r3, [r7, #28]
 800998e:	f1c3 0307 	rsb	r3, r3, #7
 8009992:	2b04      	cmp	r3, #4
 8009994:	bf28      	it	cs
 8009996:	2304      	movcs	r3, #4
 8009998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800999a:	69fb      	ldr	r3, [r7, #28]
 800999c:	3304      	adds	r3, #4
 800999e:	2b06      	cmp	r3, #6
 80099a0:	d902      	bls.n	80099a8 <NVIC_EncodePriority+0x30>
 80099a2:	69fb      	ldr	r3, [r7, #28]
 80099a4:	3b03      	subs	r3, #3
 80099a6:	e000      	b.n	80099aa <NVIC_EncodePriority+0x32>
 80099a8:	2300      	movs	r3, #0
 80099aa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80099ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099b0:	69bb      	ldr	r3, [r7, #24]
 80099b2:	fa02 f303 	lsl.w	r3, r2, r3
 80099b6:	43da      	mvns	r2, r3
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	401a      	ands	r2, r3
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80099c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	fa01 f303 	lsl.w	r3, r1, r3
 80099ca:	43d9      	mvns	r1, r3
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80099d0:	4313      	orrs	r3, r2
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3724      	adds	r7, #36	; 0x24
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr
	...

080099e0 <SysTick_Config>:
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	3b01      	subs	r3, #1
 80099ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80099f0:	d301      	bcc.n	80099f6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80099f2:	2301      	movs	r3, #1
 80099f4:	e00f      	b.n	8009a16 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80099f6:	4a0a      	ldr	r2, [pc, #40]	; (8009a20 <SysTick_Config+0x40>)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	3b01      	subs	r3, #1
 80099fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80099fe:	210f      	movs	r1, #15
 8009a00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a04:	f7ff ff8e 	bl	8009924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009a08:	4b05      	ldr	r3, [pc, #20]	; (8009a20 <SysTick_Config+0x40>)
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009a0e:	4b04      	ldr	r3, [pc, #16]	; (8009a20 <SysTick_Config+0x40>)
 8009a10:	2207      	movs	r2, #7
 8009a12:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8009a14:	2300      	movs	r3, #0
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3708      	adds	r7, #8
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	e000e010 	.word	0xe000e010

08009a24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b082      	sub	sp, #8
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f7ff ff07 	bl	8009840 <__NVIC_SetPriorityGrouping>
}
 8009a32:	bf00      	nop
 8009a34:	3708      	adds	r7, #8
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}

08009a3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009a3a:	b580      	push	{r7, lr}
 8009a3c:	b086      	sub	sp, #24
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	4603      	mov	r3, r0
 8009a42:	60b9      	str	r1, [r7, #8]
 8009a44:	607a      	str	r2, [r7, #4]
 8009a46:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009a48:	f7ff ff1e 	bl	8009888 <__NVIC_GetPriorityGrouping>
 8009a4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	68b9      	ldr	r1, [r7, #8]
 8009a52:	6978      	ldr	r0, [r7, #20]
 8009a54:	f7ff ff90 	bl	8009978 <NVIC_EncodePriority>
 8009a58:	4602      	mov	r2, r0
 8009a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a5e:	4611      	mov	r1, r2
 8009a60:	4618      	mov	r0, r3
 8009a62:	f7ff ff5f 	bl	8009924 <__NVIC_SetPriority>
}
 8009a66:	bf00      	nop
 8009a68:	3718      	adds	r7, #24
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}

08009a6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009a6e:	b580      	push	{r7, lr}
 8009a70:	b082      	sub	sp, #8
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	4603      	mov	r3, r0
 8009a76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f7ff ff11 	bl	80098a4 <__NVIC_EnableIRQ>
}
 8009a82:	bf00      	nop
 8009a84:	3708      	adds	r7, #8
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}

08009a8a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009a8a:	b580      	push	{r7, lr}
 8009a8c:	b082      	sub	sp, #8
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	4603      	mov	r3, r0
 8009a92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8009a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f7ff ff21 	bl	80098e0 <__NVIC_DisableIRQ>
}
 8009a9e:	bf00      	nop
 8009aa0:	3708      	adds	r7, #8
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}

08009aa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009aa6:	b580      	push	{r7, lr}
 8009aa8:	b082      	sub	sp, #8
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f7ff ff96 	bl	80099e0 <SysTick_Config>
 8009ab4:	4603      	mov	r3, r0
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3708      	adds	r7, #8
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}

08009abe <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8009abe:	b580      	push	{r7, lr}
 8009ac0:	b082      	sub	sp, #8
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d101      	bne.n	8009ad0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8009acc:	2301      	movs	r3, #1
 8009ace:	e014      	b.n	8009afa <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	791b      	ldrb	r3, [r3, #4]
 8009ad4:	b2db      	uxtb	r3, r3
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d105      	bne.n	8009ae6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2200      	movs	r2, #0
 8009ade:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f7fd f809 	bl	8006af8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2202      	movs	r2, #2
 8009aea:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2200      	movs	r2, #0
 8009af0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2201      	movs	r2, #1
 8009af6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8009af8:	2300      	movs	r3, #0
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3708      	adds	r7, #8
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}

08009b02 <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8009b02:	b580      	push	{r7, lr}
 8009b04:	b082      	sub	sp, #8
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	6078      	str	r0, [r7, #4]
 8009b0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	795b      	ldrb	r3, [r3, #5]
 8009b10:	2b01      	cmp	r3, #1
 8009b12:	d101      	bne.n	8009b18 <HAL_DAC_Start+0x16>
 8009b14:	2302      	movs	r3, #2
 8009b16:	e043      	b.n	8009ba0 <HAL_DAC_Start+0x9e>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2202      	movs	r2, #2
 8009b22:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	6819      	ldr	r1, [r3, #0]
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	f003 0310 	and.w	r3, r3, #16
 8009b30:	2201      	movs	r2, #1
 8009b32:	409a      	lsls	r2, r3
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	430a      	orrs	r2, r1
 8009b3a:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8009b3c:	2001      	movs	r0, #1
 8009b3e:	f7fe fb1d 	bl	800817c <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d10f      	bne.n	8009b68 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009b52:	2b02      	cmp	r3, #2
 8009b54:	d11d      	bne.n	8009b92 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	685a      	ldr	r2, [r3, #4]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f042 0201 	orr.w	r2, r2, #1
 8009b64:	605a      	str	r2, [r3, #4]
 8009b66:	e014      	b.n	8009b92 <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	f003 0310 	and.w	r3, r3, #16
 8009b78:	2102      	movs	r1, #2
 8009b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d107      	bne.n	8009b92 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	685a      	ldr	r2, [r3, #4]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f042 0202 	orr.w	r2, r2, #2
 8009b90:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2201      	movs	r2, #1
 8009b96:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8009b9e:	2300      	movs	r3, #0
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3708      	adds	r7, #8
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}

08009ba8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b086      	sub	sp, #24
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	60f8      	str	r0, [r7, #12]
 8009bb0:	60b9      	str	r1, [r7, #8]
 8009bb2:	607a      	str	r2, [r7, #4]
 8009bb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	795b      	ldrb	r3, [r3, #5]
 8009bbe:	2b01      	cmp	r3, #1
 8009bc0:	d101      	bne.n	8009bc6 <HAL_DAC_Start_DMA+0x1e>
 8009bc2:	2302      	movs	r3, #2
 8009bc4:	e0a1      	b.n	8009d0a <HAL_DAC_Start_DMA+0x162>
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2201      	movs	r2, #1
 8009bca:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2202      	movs	r2, #2
 8009bd0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d12a      	bne.n	8009c2e <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	689b      	ldr	r3, [r3, #8]
 8009bdc:	4a4d      	ldr	r2, [pc, #308]	; (8009d14 <HAL_DAC_Start_DMA+0x16c>)
 8009bde:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	689b      	ldr	r3, [r3, #8]
 8009be4:	4a4c      	ldr	r2, [pc, #304]	; (8009d18 <HAL_DAC_Start_DMA+0x170>)
 8009be6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	689b      	ldr	r3, [r3, #8]
 8009bec:	4a4b      	ldr	r2, [pc, #300]	; (8009d1c <HAL_DAC_Start_DMA+0x174>)
 8009bee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009bfe:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8009c00:	6a3b      	ldr	r3, [r7, #32]
 8009c02:	2b04      	cmp	r3, #4
 8009c04:	d009      	beq.n	8009c1a <HAL_DAC_Start_DMA+0x72>
 8009c06:	2b08      	cmp	r3, #8
 8009c08:	d00c      	beq.n	8009c24 <HAL_DAC_Start_DMA+0x7c>
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d000      	beq.n	8009c10 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8009c0e:	e039      	b.n	8009c84 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	3308      	adds	r3, #8
 8009c16:	613b      	str	r3, [r7, #16]
        break;
 8009c18:	e034      	b.n	8009c84 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	330c      	adds	r3, #12
 8009c20:	613b      	str	r3, [r7, #16]
        break;
 8009c22:	e02f      	b.n	8009c84 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	3310      	adds	r3, #16
 8009c2a:	613b      	str	r3, [r7, #16]
        break;
 8009c2c:	e02a      	b.n	8009c84 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	68db      	ldr	r3, [r3, #12]
 8009c32:	4a3b      	ldr	r2, [pc, #236]	; (8009d20 <HAL_DAC_Start_DMA+0x178>)
 8009c34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	68db      	ldr	r3, [r3, #12]
 8009c3a:	4a3a      	ldr	r2, [pc, #232]	; (8009d24 <HAL_DAC_Start_DMA+0x17c>)
 8009c3c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	68db      	ldr	r3, [r3, #12]
 8009c42:	4a39      	ldr	r2, [pc, #228]	; (8009d28 <HAL_DAC_Start_DMA+0x180>)
 8009c44:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	681a      	ldr	r2, [r3, #0]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009c54:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8009c56:	6a3b      	ldr	r3, [r7, #32]
 8009c58:	2b04      	cmp	r3, #4
 8009c5a:	d009      	beq.n	8009c70 <HAL_DAC_Start_DMA+0xc8>
 8009c5c:	2b08      	cmp	r3, #8
 8009c5e:	d00c      	beq.n	8009c7a <HAL_DAC_Start_DMA+0xd2>
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d000      	beq.n	8009c66 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8009c64:	e00e      	b.n	8009c84 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	3314      	adds	r3, #20
 8009c6c:	613b      	str	r3, [r7, #16]
        break;
 8009c6e:	e009      	b.n	8009c84 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	3318      	adds	r3, #24
 8009c76:	613b      	str	r3, [r7, #16]
        break;
 8009c78:	e004      	b.n	8009c84 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	331c      	adds	r3, #28
 8009c80:	613b      	str	r3, [r7, #16]
        break;
 8009c82:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d111      	bne.n	8009cae <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009c98:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	6898      	ldr	r0, [r3, #8]
 8009c9e:	6879      	ldr	r1, [r7, #4]
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	693a      	ldr	r2, [r7, #16]
 8009ca4:	f000 fbd2 	bl	800a44c <HAL_DMA_Start_IT>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	75fb      	strb	r3, [r7, #23]
 8009cac:	e010      	b.n	8009cd0 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	681a      	ldr	r2, [r3, #0]
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8009cbc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	68d8      	ldr	r0, [r3, #12]
 8009cc2:	6879      	ldr	r1, [r7, #4]
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	693a      	ldr	r2, [r7, #16]
 8009cc8:	f000 fbc0 	bl	800a44c <HAL_DMA_Start_IT>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8009cd6:	7dfb      	ldrb	r3, [r7, #23]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d10f      	bne.n	8009cfc <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	6819      	ldr	r1, [r3, #0]
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	f003 0310 	and.w	r3, r3, #16
 8009ce8:	2201      	movs	r2, #1
 8009cea:	409a      	lsls	r2, r3
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	430a      	orrs	r2, r1
 8009cf2:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8009cf4:	2001      	movs	r0, #1
 8009cf6:	f7fe fa41 	bl	800817c <HAL_Delay>
 8009cfa:	e005      	b.n	8009d08 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	691b      	ldr	r3, [r3, #16]
 8009d00:	f043 0204 	orr.w	r2, r3, #4
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8009d08:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3718      	adds	r7, #24
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	0800a1e9 	.word	0x0800a1e9
 8009d18:	0800a20b 	.word	0x0800a20b
 8009d1c:	0800a227 	.word	0x0800a227
 8009d20:	0800a291 	.word	0x0800a291
 8009d24:	0800a2b3 	.word	0x0800a2b3
 8009d28:	0800a2cf 	.word	0x0800a2cf

08009d2c <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b084      	sub	sp, #16
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	6819      	ldr	r1, [r3, #0]
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	f003 0310 	and.w	r3, r3, #16
 8009d42:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009d46:	fa02 f303 	lsl.w	r3, r2, r3
 8009d4a:	43da      	mvns	r2, r3
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	400a      	ands	r2, r1
 8009d52:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	6819      	ldr	r1, [r3, #0]
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	f003 0310 	and.w	r3, r3, #16
 8009d60:	2201      	movs	r2, #1
 8009d62:	fa02 f303 	lsl.w	r3, r2, r3
 8009d66:	43da      	mvns	r2, r3
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	400a      	ands	r2, r1
 8009d6e:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 8009d70:	2001      	movs	r0, #1
 8009d72:	f7fe fa03 	bl	800817c <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d10f      	bne.n	8009d9c <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	689b      	ldr	r3, [r3, #8]
 8009d80:	4618      	mov	r0, r3
 8009d82:	f000 fbde 	bl	800a542 <HAL_DMA_Abort>
 8009d86:	4603      	mov	r3, r0
 8009d88:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009d98:	601a      	str	r2, [r3, #0]
 8009d9a:	e00e      	b.n	8009dba <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	68db      	ldr	r3, [r3, #12]
 8009da0:	4618      	mov	r0, r3
 8009da2:	f000 fbce 	bl	800a542 <HAL_DMA_Abort>
 8009da6:	4603      	mov	r3, r0
 8009da8:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	681a      	ldr	r2, [r3, #0]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8009db8:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 8009dba:	7bfb      	ldrb	r3, [r7, #15]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d003      	beq.n	8009dc8 <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2204      	movs	r2, #4
 8009dc4:	711a      	strb	r2, [r3, #4]
 8009dc6:	e002      	b.n	8009dce <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2201      	movs	r2, #1
 8009dcc:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 8009dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3710      	adds	r7, #16
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}

08009dd8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b087      	sub	sp, #28
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	60f8      	str	r0, [r7, #12]
 8009de0:	60b9      	str	r1, [r7, #8]
 8009de2:	607a      	str	r2, [r7, #4]
 8009de4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8009de6:	2300      	movs	r3, #0
 8009de8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d105      	bne.n	8009e08 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8009dfc:	697a      	ldr	r2, [r7, #20]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	4413      	add	r3, r2
 8009e02:	3308      	adds	r3, #8
 8009e04:	617b      	str	r3, [r7, #20]
 8009e06:	e004      	b.n	8009e12 <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8009e08:	697a      	ldr	r2, [r7, #20]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	4413      	add	r3, r2
 8009e0e:	3314      	adds	r3, #20
 8009e10:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	461a      	mov	r2, r3
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8009e1a:	2300      	movs	r3, #0
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	371c      	adds	r7, #28
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr

08009e28 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b083      	sub	sp, #12
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8009e30:	bf00      	nop
 8009e32:	370c      	adds	r7, #12
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr

08009e3c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b083      	sub	sp, #12
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8009e44:	bf00      	nop
 8009e46:	370c      	adds	r7, #12
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr

08009e50 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b083      	sub	sp, #12
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8009e58:	bf00      	nop
 8009e5a:	370c      	adds	r7, #12
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr

08009e64 <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b083      	sub	sp, #12
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d103      	bne.n	8009e7c <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e7a:	e002      	b.n	8009e82 <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	370c      	adds	r7, #12
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr
	...

08009e90 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b08a      	sub	sp, #40	; 0x28
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	60b9      	str	r1, [r7, #8]
 8009e9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	795b      	ldrb	r3, [r3, #5]
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	d101      	bne.n	8009eac <HAL_DAC_ConfigChannel+0x1c>
 8009ea8:	2302      	movs	r3, #2
 8009eaa:	e194      	b.n	800a1d6 <HAL_DAC_ConfigChannel+0x346>
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2201      	movs	r2, #1
 8009eb0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2202      	movs	r2, #2
 8009eb6:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	689b      	ldr	r3, [r3, #8]
 8009ebc:	2b04      	cmp	r3, #4
 8009ebe:	d174      	bne.n	8009faa <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d137      	bne.n	8009f36 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8009ec6:	f7fe f94d 	bl	8008164 <HAL_GetTick>
 8009eca:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8009ecc:	e011      	b.n	8009ef2 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8009ece:	f7fe f949 	bl	8008164 <HAL_GetTick>
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	69fb      	ldr	r3, [r7, #28]
 8009ed6:	1ad3      	subs	r3, r2, r3
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d90a      	bls.n	8009ef2 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	691b      	ldr	r3, [r3, #16]
 8009ee0:	f043 0208 	orr.w	r2, r3, #8
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2203      	movs	r2, #3
 8009eec:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8009eee:	2303      	movs	r3, #3
 8009ef0:	e171      	b.n	800a1d6 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ef8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d1e6      	bne.n	8009ece <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8009f00:	2001      	movs	r0, #1
 8009f02:	f7fe f93b 	bl	800817c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	68ba      	ldr	r2, [r7, #8]
 8009f0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009f0e:	641a      	str	r2, [r3, #64]	; 0x40
 8009f10:	e01e      	b.n	8009f50 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8009f12:	f7fe f927 	bl	8008164 <HAL_GetTick>
 8009f16:	4602      	mov	r2, r0
 8009f18:	69fb      	ldr	r3, [r7, #28]
 8009f1a:	1ad3      	subs	r3, r2, r3
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	d90a      	bls.n	8009f36 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	691b      	ldr	r3, [r3, #16]
 8009f24:	f043 0208 	orr.w	r2, r3, #8
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	2203      	movs	r2, #3
 8009f30:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8009f32:	2303      	movs	r3, #3
 8009f34:	e14f      	b.n	800a1d6 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	dbe8      	blt.n	8009f12 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8009f40:	2001      	movs	r0, #1
 8009f42:	f7fe f91b 	bl	800817c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	68ba      	ldr	r2, [r7, #8]
 8009f4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009f4e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f003 0310 	and.w	r3, r3, #16
 8009f5c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8009f60:	fa01 f303 	lsl.w	r3, r1, r3
 8009f64:	43db      	mvns	r3, r3
 8009f66:	ea02 0103 	and.w	r1, r2, r3
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f003 0310 	and.w	r3, r3, #16
 8009f74:	409a      	lsls	r2, r3
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	430a      	orrs	r2, r1
 8009f7c:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f003 0310 	and.w	r3, r3, #16
 8009f8a:	21ff      	movs	r1, #255	; 0xff
 8009f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8009f90:	43db      	mvns	r3, r3
 8009f92:	ea02 0103 	and.w	r1, r2, r3
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f003 0310 	and.w	r3, r3, #16
 8009fa0:	409a      	lsls	r2, r3
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	430a      	orrs	r2, r1
 8009fa8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	69db      	ldr	r3, [r3, #28]
 8009fae:	2b01      	cmp	r3, #1
 8009fb0:	d11d      	bne.n	8009fee <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fb8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f003 0310 	and.w	r3, r3, #16
 8009fc0:	221f      	movs	r2, #31
 8009fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8009fc6:	43db      	mvns	r3, r3
 8009fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fca:	4013      	ands	r3, r2
 8009fcc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	6a1b      	ldr	r3, [r3, #32]
 8009fd2:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f003 0310 	and.w	r3, r3, #16
 8009fda:	69ba      	ldr	r2, [r7, #24]
 8009fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8009fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fec:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ff4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f003 0310 	and.w	r3, r3, #16
 8009ffc:	2207      	movs	r2, #7
 8009ffe:	fa02 f303 	lsl.w	r3, r2, r3
 800a002:	43db      	mvns	r3, r3
 800a004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a006:	4013      	ands	r3, r2
 800a008:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	699b      	ldr	r3, [r3, #24]
 800a00e:	f003 0301 	and.w	r3, r3, #1
 800a012:	2b00      	cmp	r3, #0
 800a014:	d002      	beq.n	800a01c <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 800a016:	2300      	movs	r3, #0
 800a018:	623b      	str	r3, [r7, #32]
 800a01a:	e011      	b.n	800a040 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	699b      	ldr	r3, [r3, #24]
 800a020:	f003 0302 	and.w	r3, r3, #2
 800a024:	2b00      	cmp	r3, #0
 800a026:	d002      	beq.n	800a02e <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800a028:	2301      	movs	r3, #1
 800a02a:	623b      	str	r3, [r7, #32]
 800a02c:	e008      	b.n	800a040 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	695b      	ldr	r3, [r3, #20]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d102      	bne.n	800a03c <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800a036:	2301      	movs	r3, #1
 800a038:	623b      	str	r3, [r7, #32]
 800a03a:	e001      	b.n	800a040 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800a03c:	2300      	movs	r3, #0
 800a03e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	689a      	ldr	r2, [r3, #8]
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	695b      	ldr	r3, [r3, #20]
 800a048:	4313      	orrs	r3, r2
 800a04a:	6a3a      	ldr	r2, [r7, #32]
 800a04c:	4313      	orrs	r3, r2
 800a04e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f003 0310 	and.w	r3, r3, #16
 800a056:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a05a:	fa02 f303 	lsl.w	r3, r2, r3
 800a05e:	43db      	mvns	r3, r3
 800a060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a062:	4013      	ands	r3, r2
 800a064:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	791b      	ldrb	r3, [r3, #4]
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	d102      	bne.n	800a074 <HAL_DAC_ConfigChannel+0x1e4>
 800a06e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a072:	e000      	b.n	800a076 <HAL_DAC_ConfigChannel+0x1e6>
 800a074:	2300      	movs	r3, #0
 800a076:	69ba      	ldr	r2, [r7, #24]
 800a078:	4313      	orrs	r3, r2
 800a07a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f003 0310 	and.w	r3, r3, #16
 800a082:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a086:	fa02 f303 	lsl.w	r3, r2, r3
 800a08a:	43db      	mvns	r3, r3
 800a08c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a08e:	4013      	ands	r3, r2
 800a090:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	795b      	ldrb	r3, [r3, #5]
 800a096:	2b01      	cmp	r3, #1
 800a098:	d102      	bne.n	800a0a0 <HAL_DAC_ConfigChannel+0x210>
 800a09a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a09e:	e000      	b.n	800a0a2 <HAL_DAC_ConfigChannel+0x212>
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	69ba      	ldr	r2, [r7, #24]
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800a0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0aa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800a0ae:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	2b02      	cmp	r3, #2
 800a0b6:	d114      	bne.n	800a0e2 <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800a0b8:	f001 fbc2 	bl	800b840 <HAL_RCC_GetHCLKFreq>
 800a0bc:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	4a47      	ldr	r2, [pc, #284]	; (800a1e0 <HAL_DAC_ConfigChannel+0x350>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d904      	bls.n	800a0d0 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800a0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0cc:	627b      	str	r3, [r7, #36]	; 0x24
 800a0ce:	e00d      	b.n	800a0ec <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	4a44      	ldr	r2, [pc, #272]	; (800a1e4 <HAL_DAC_ConfigChannel+0x354>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d909      	bls.n	800a0ec <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800a0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a0de:	627b      	str	r3, [r7, #36]	; 0x24
 800a0e0:	e004      	b.n	800a0ec <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f003 0310 	and.w	r3, r3, #16
 800a0f2:	69ba      	ldr	r2, [r7, #24]
 800a0f4:	fa02 f303 	lsl.w	r3, r2, r3
 800a0f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a104:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	6819      	ldr	r1, [r3, #0]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f003 0310 	and.w	r3, r3, #16
 800a112:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a116:	fa02 f303 	lsl.w	r3, r2, r3
 800a11a:	43da      	mvns	r2, r3
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	400a      	ands	r2, r1
 800a122:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f003 0310 	and.w	r3, r3, #16
 800a132:	f640 72fe 	movw	r2, #4094	; 0xffe
 800a136:	fa02 f303 	lsl.w	r3, r2, r3
 800a13a:	43db      	mvns	r3, r3
 800a13c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a13e:	4013      	ands	r3, r2
 800a140:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	68db      	ldr	r3, [r3, #12]
 800a146:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f003 0310 	and.w	r3, r3, #16
 800a14e:	69ba      	ldr	r2, [r7, #24]
 800a150:	fa02 f303 	lsl.w	r3, r2, r3
 800a154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a156:	4313      	orrs	r3, r2
 800a158:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a160:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	6819      	ldr	r1, [r3, #0]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f003 0310 	and.w	r3, r3, #16
 800a16e:	22c0      	movs	r2, #192	; 0xc0
 800a170:	fa02 f303 	lsl.w	r3, r2, r3
 800a174:	43da      	mvns	r2, r3
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	400a      	ands	r2, r1
 800a17c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	68db      	ldr	r3, [r3, #12]
 800a182:	089b      	lsrs	r3, r3, #2
 800a184:	f003 030f 	and.w	r3, r3, #15
 800a188:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	691b      	ldr	r3, [r3, #16]
 800a18e:	089b      	lsrs	r3, r3, #2
 800a190:	021b      	lsls	r3, r3, #8
 800a192:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a196:	69ba      	ldr	r2, [r7, #24]
 800a198:	4313      	orrs	r3, r2
 800a19a:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f003 0310 	and.w	r3, r3, #16
 800a1a8:	f640 710f 	movw	r1, #3855	; 0xf0f
 800a1ac:	fa01 f303 	lsl.w	r3, r1, r3
 800a1b0:	43db      	mvns	r3, r3
 800a1b2:	ea02 0103 	and.w	r1, r2, r3
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f003 0310 	and.w	r3, r3, #16
 800a1bc:	69ba      	ldr	r2, [r7, #24]
 800a1be:	409a      	lsls	r2, r3
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	430a      	orrs	r2, r1
 800a1c6:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800a1d4:	2300      	movs	r3, #0
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3728      	adds	r7, #40	; 0x28
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}
 800a1de:	bf00      	nop
 800a1e0:	09896800 	.word	0x09896800
 800a1e4:	04c4b400 	.word	0x04c4b400

0800a1e8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b084      	sub	sp, #16
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1f4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800a1f6:	68f8      	ldr	r0, [r7, #12]
 800a1f8:	f7ff fe16 	bl	8009e28 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2201      	movs	r2, #1
 800a200:	711a      	strb	r2, [r3, #4]
}
 800a202:	bf00      	nop
 800a204:	3710      	adds	r7, #16
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}

0800a20a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800a20a:	b580      	push	{r7, lr}
 800a20c:	b084      	sub	sp, #16
 800a20e:	af00      	add	r7, sp, #0
 800a210:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a216:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800a218:	68f8      	ldr	r0, [r7, #12]
 800a21a:	f7ff fe0f 	bl	8009e3c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800a21e:	bf00      	nop
 800a220:	3710      	adds	r7, #16
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}

0800a226 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800a226:	b580      	push	{r7, lr}
 800a228:	b084      	sub	sp, #16
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a232:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	691b      	ldr	r3, [r3, #16]
 800a238:	f043 0204 	orr.w	r2, r3, #4
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800a240:	68f8      	ldr	r0, [r7, #12]
 800a242:	f7ff fe05 	bl	8009e50 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2201      	movs	r2, #1
 800a24a:	711a      	strb	r2, [r3, #4]
}
 800a24c:	bf00      	nop
 800a24e:	3710      	adds	r7, #16
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}

0800a254 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800a254:	b480      	push	{r7}
 800a256:	b083      	sub	sp, #12
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800a25c:	bf00      	nop
 800a25e:	370c      	adds	r7, #12
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr

0800a268 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800a268:	b480      	push	{r7}
 800a26a:	b083      	sub	sp, #12
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800a270:	bf00      	nop
 800a272:	370c      	adds	r7, #12
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr

0800a27c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800a27c:	b480      	push	{r7}
 800a27e:	b083      	sub	sp, #12
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800a284:	bf00      	nop
 800a286:	370c      	adds	r7, #12
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr

0800a290 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b084      	sub	sp, #16
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a29c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800a29e:	68f8      	ldr	r0, [r7, #12]
 800a2a0:	f7ff ffd8 	bl	800a254 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	711a      	strb	r2, [r3, #4]
}
 800a2aa:	bf00      	nop
 800a2ac:	3710      	adds	r7, #16
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}

0800a2b2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800a2b2:	b580      	push	{r7, lr}
 800a2b4:	b084      	sub	sp, #16
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2be:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800a2c0:	68f8      	ldr	r0, [r7, #12]
 800a2c2:	f7ff ffd1 	bl	800a268 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800a2c6:	bf00      	nop
 800a2c8:	3710      	adds	r7, #16
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}

0800a2ce <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800a2ce:	b580      	push	{r7, lr}
 800a2d0:	b084      	sub	sp, #16
 800a2d2:	af00      	add	r7, sp, #0
 800a2d4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2da:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	691b      	ldr	r3, [r3, #16]
 800a2e0:	f043 0204 	orr.w	r2, r3, #4
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800a2e8:	68f8      	ldr	r0, [r7, #12]
 800a2ea:	f7ff ffc7 	bl	800a27c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2201      	movs	r2, #1
 800a2f2:	711a      	strb	r2, [r3, #4]
}
 800a2f4:	bf00      	nop
 800a2f6:	3710      	adds	r7, #16
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}

0800a2fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b084      	sub	sp, #16
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d101      	bne.n	800a30e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800a30a:	2301      	movs	r3, #1
 800a30c:	e08d      	b.n	800a42a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	461a      	mov	r2, r3
 800a314:	4b47      	ldr	r3, [pc, #284]	; (800a434 <HAL_DMA_Init+0x138>)
 800a316:	429a      	cmp	r2, r3
 800a318:	d80f      	bhi.n	800a33a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	461a      	mov	r2, r3
 800a320:	4b45      	ldr	r3, [pc, #276]	; (800a438 <HAL_DMA_Init+0x13c>)
 800a322:	4413      	add	r3, r2
 800a324:	4a45      	ldr	r2, [pc, #276]	; (800a43c <HAL_DMA_Init+0x140>)
 800a326:	fba2 2303 	umull	r2, r3, r2, r3
 800a32a:	091b      	lsrs	r3, r3, #4
 800a32c:	009a      	lsls	r2, r3, #2
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	4a42      	ldr	r2, [pc, #264]	; (800a440 <HAL_DMA_Init+0x144>)
 800a336:	641a      	str	r2, [r3, #64]	; 0x40
 800a338:	e00e      	b.n	800a358 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	461a      	mov	r2, r3
 800a340:	4b40      	ldr	r3, [pc, #256]	; (800a444 <HAL_DMA_Init+0x148>)
 800a342:	4413      	add	r3, r2
 800a344:	4a3d      	ldr	r2, [pc, #244]	; (800a43c <HAL_DMA_Init+0x140>)
 800a346:	fba2 2303 	umull	r2, r3, r2, r3
 800a34a:	091b      	lsrs	r3, r3, #4
 800a34c:	009a      	lsls	r2, r3, #2
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	4a3c      	ldr	r2, [pc, #240]	; (800a448 <HAL_DMA_Init+0x14c>)
 800a356:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2202      	movs	r2, #2
 800a35c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a36e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a372:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800a37c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	691b      	ldr	r3, [r3, #16]
 800a382:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a388:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	699b      	ldr	r3, [r3, #24]
 800a38e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a394:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6a1b      	ldr	r3, [r3, #32]
 800a39a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800a39c:	68fa      	ldr	r2, [r7, #12]
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	68fa      	ldr	r2, [r7, #12]
 800a3a8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f000 fa10 	bl	800a7d0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	689b      	ldr	r3, [r3, #8]
 800a3b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3b8:	d102      	bne.n	800a3c0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	685a      	ldr	r2, [r3, #4]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3c8:	b2d2      	uxtb	r2, r2
 800a3ca:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3d0:	687a      	ldr	r2, [r7, #4]
 800a3d2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a3d4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	685b      	ldr	r3, [r3, #4]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d010      	beq.n	800a400 <HAL_DMA_Init+0x104>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	2b04      	cmp	r3, #4
 800a3e4:	d80c      	bhi.n	800a400 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f000 fa30 	bl	800a84c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3f8:	687a      	ldr	r2, [r7, #4]
 800a3fa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a3fc:	605a      	str	r2, [r3, #4]
 800a3fe:	e008      	b.n	800a412 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2200      	movs	r2, #0
 800a404:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2200      	movs	r2, #0
 800a40a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2200      	movs	r2, #0
 800a410:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2200      	movs	r2, #0
 800a416:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2201      	movs	r2, #1
 800a41c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2200      	movs	r2, #0
 800a424:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a428:	2300      	movs	r3, #0
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3710      	adds	r7, #16
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
 800a432:	bf00      	nop
 800a434:	40020407 	.word	0x40020407
 800a438:	bffdfff8 	.word	0xbffdfff8
 800a43c:	cccccccd 	.word	0xcccccccd
 800a440:	40020000 	.word	0x40020000
 800a444:	bffdfbf8 	.word	0xbffdfbf8
 800a448:	40020400 	.word	0x40020400

0800a44c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b086      	sub	sp, #24
 800a450:	af00      	add	r7, sp, #0
 800a452:	60f8      	str	r0, [r7, #12]
 800a454:	60b9      	str	r1, [r7, #8]
 800a456:	607a      	str	r2, [r7, #4]
 800a458:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a45a:	2300      	movs	r3, #0
 800a45c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a464:	2b01      	cmp	r3, #1
 800a466:	d101      	bne.n	800a46c <HAL_DMA_Start_IT+0x20>
 800a468:	2302      	movs	r3, #2
 800a46a:	e066      	b.n	800a53a <HAL_DMA_Start_IT+0xee>
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2201      	movs	r2, #1
 800a470:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a47a:	b2db      	uxtb	r3, r3
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	d155      	bne.n	800a52c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2202      	movs	r2, #2
 800a484:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2200      	movs	r2, #0
 800a48c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	681a      	ldr	r2, [r3, #0]
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f022 0201 	bic.w	r2, r2, #1
 800a49c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	687a      	ldr	r2, [r7, #4]
 800a4a2:	68b9      	ldr	r1, [r7, #8]
 800a4a4:	68f8      	ldr	r0, [r7, #12]
 800a4a6:	f000 f954 	bl	800a752 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d008      	beq.n	800a4c4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	681a      	ldr	r2, [r3, #0]
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f042 020e 	orr.w	r2, r2, #14
 800a4c0:	601a      	str	r2, [r3, #0]
 800a4c2:	e00f      	b.n	800a4e4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	681a      	ldr	r2, [r3, #0]
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f022 0204 	bic.w	r2, r2, #4
 800a4d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	681a      	ldr	r2, [r3, #0]
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f042 020a 	orr.w	r2, r2, #10
 800a4e2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d007      	beq.n	800a502 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4f6:	681a      	ldr	r2, [r3, #0]
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a500:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a506:	2b00      	cmp	r3, #0
 800a508:	d007      	beq.n	800a51a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a50e:	681a      	ldr	r2, [r3, #0]
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a514:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a518:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	681a      	ldr	r2, [r3, #0]
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f042 0201 	orr.w	r2, r2, #1
 800a528:	601a      	str	r2, [r3, #0]
 800a52a:	e005      	b.n	800a538 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2200      	movs	r2, #0
 800a530:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800a534:	2302      	movs	r3, #2
 800a536:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800a538:	7dfb      	ldrb	r3, [r7, #23]
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3718      	adds	r7, #24
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}

0800a542 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a542:	b480      	push	{r7}
 800a544:	b085      	sub	sp, #20
 800a546:	af00      	add	r7, sp, #0
 800a548:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a54a:	2300      	movs	r3, #0
 800a54c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a554:	b2db      	uxtb	r3, r3
 800a556:	2b02      	cmp	r3, #2
 800a558:	d005      	beq.n	800a566 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2204      	movs	r2, #4
 800a55e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800a560:	2301      	movs	r3, #1
 800a562:	73fb      	strb	r3, [r7, #15]
 800a564:	e037      	b.n	800a5d6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	681a      	ldr	r2, [r3, #0]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f022 020e 	bic.w	r2, r2, #14
 800a574:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a57a:	681a      	ldr	r2, [r3, #0]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a580:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a584:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	681a      	ldr	r2, [r3, #0]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f022 0201 	bic.w	r2, r2, #1
 800a594:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a59a:	f003 021f 	and.w	r2, r3, #31
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5a2:	2101      	movs	r1, #1
 800a5a4:	fa01 f202 	lsl.w	r2, r1, r2
 800a5a8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5ae:	687a      	ldr	r2, [r7, #4]
 800a5b0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a5b2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d00c      	beq.n	800a5d6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5c0:	681a      	ldr	r2, [r3, #0]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a5ca:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5d0:	687a      	ldr	r2, [r7, #4]
 800a5d2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a5d4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2201      	movs	r2, #1
 800a5da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800a5e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3714      	adds	r7, #20
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f2:	4770      	bx	lr

0800a5f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b084      	sub	sp, #16
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a610:	f003 031f 	and.w	r3, r3, #31
 800a614:	2204      	movs	r2, #4
 800a616:	409a      	lsls	r2, r3
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	4013      	ands	r3, r2
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d026      	beq.n	800a66e <HAL_DMA_IRQHandler+0x7a>
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	f003 0304 	and.w	r3, r3, #4
 800a626:	2b00      	cmp	r3, #0
 800a628:	d021      	beq.n	800a66e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f003 0320 	and.w	r3, r3, #32
 800a634:	2b00      	cmp	r3, #0
 800a636:	d107      	bne.n	800a648 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f022 0204 	bic.w	r2, r2, #4
 800a646:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a64c:	f003 021f 	and.w	r2, r3, #31
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a654:	2104      	movs	r1, #4
 800a656:	fa01 f202 	lsl.w	r2, r1, r2
 800a65a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a660:	2b00      	cmp	r3, #0
 800a662:	d071      	beq.n	800a748 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800a66c:	e06c      	b.n	800a748 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a672:	f003 031f 	and.w	r3, r3, #31
 800a676:	2202      	movs	r2, #2
 800a678:	409a      	lsls	r2, r3
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	4013      	ands	r3, r2
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d02e      	beq.n	800a6e0 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	f003 0302 	and.w	r3, r3, #2
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d029      	beq.n	800a6e0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f003 0320 	and.w	r3, r3, #32
 800a696:	2b00      	cmp	r3, #0
 800a698:	d10b      	bne.n	800a6b2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	681a      	ldr	r2, [r3, #0]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f022 020a 	bic.w	r2, r2, #10
 800a6a8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2201      	movs	r2, #1
 800a6ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6b6:	f003 021f 	and.w	r2, r3, #31
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6be:	2102      	movs	r1, #2
 800a6c0:	fa01 f202 	lsl.w	r2, r1, r2
 800a6c4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d038      	beq.n	800a748 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800a6de:	e033      	b.n	800a748 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6e4:	f003 031f 	and.w	r3, r3, #31
 800a6e8:	2208      	movs	r2, #8
 800a6ea:	409a      	lsls	r2, r3
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	4013      	ands	r3, r2
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d02a      	beq.n	800a74a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	f003 0308 	and.w	r3, r3, #8
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d025      	beq.n	800a74a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	681a      	ldr	r2, [r3, #0]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f022 020e 	bic.w	r2, r2, #14
 800a70c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a712:	f003 021f 	and.w	r2, r3, #31
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a71a:	2101      	movs	r1, #1
 800a71c:	fa01 f202 	lsl.w	r2, r1, r2
 800a720:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2201      	movs	r2, #1
 800a726:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2201      	movs	r2, #1
 800a72c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2200      	movs	r2, #0
 800a734:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d004      	beq.n	800a74a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800a748:	bf00      	nop
 800a74a:	bf00      	nop
}
 800a74c:	3710      	adds	r7, #16
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}

0800a752 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a752:	b480      	push	{r7}
 800a754:	b085      	sub	sp, #20
 800a756:	af00      	add	r7, sp, #0
 800a758:	60f8      	str	r0, [r7, #12]
 800a75a:	60b9      	str	r1, [r7, #8]
 800a75c:	607a      	str	r2, [r7, #4]
 800a75e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a764:	68fa      	ldr	r2, [r7, #12]
 800a766:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a768:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d004      	beq.n	800a77c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a776:	68fa      	ldr	r2, [r7, #12]
 800a778:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a77a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a780:	f003 021f 	and.w	r2, r3, #31
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a788:	2101      	movs	r1, #1
 800a78a:	fa01 f202 	lsl.w	r2, r1, r2
 800a78e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	683a      	ldr	r2, [r7, #0]
 800a796:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	689b      	ldr	r3, [r3, #8]
 800a79c:	2b10      	cmp	r3, #16
 800a79e:	d108      	bne.n	800a7b2 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	687a      	ldr	r2, [r7, #4]
 800a7a6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	68ba      	ldr	r2, [r7, #8]
 800a7ae:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800a7b0:	e007      	b.n	800a7c2 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	68ba      	ldr	r2, [r7, #8]
 800a7b8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	687a      	ldr	r2, [r7, #4]
 800a7c0:	60da      	str	r2, [r3, #12]
}
 800a7c2:	bf00      	nop
 800a7c4:	3714      	adds	r7, #20
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7cc:	4770      	bx	lr
	...

0800a7d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b087      	sub	sp, #28
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	461a      	mov	r2, r3
 800a7de:	4b16      	ldr	r3, [pc, #88]	; (800a838 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	d802      	bhi.n	800a7ea <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800a7e4:	4b15      	ldr	r3, [pc, #84]	; (800a83c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800a7e6:	617b      	str	r3, [r7, #20]
 800a7e8:	e001      	b.n	800a7ee <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800a7ea:	4b15      	ldr	r3, [pc, #84]	; (800a840 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800a7ec:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800a7ee:	697b      	ldr	r3, [r7, #20]
 800a7f0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	b2db      	uxtb	r3, r3
 800a7f8:	3b08      	subs	r3, #8
 800a7fa:	4a12      	ldr	r2, [pc, #72]	; (800a844 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800a7fc:	fba2 2303 	umull	r2, r3, r2, r3
 800a800:	091b      	lsrs	r3, r3, #4
 800a802:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a808:	089b      	lsrs	r3, r3, #2
 800a80a:	009a      	lsls	r2, r3, #2
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	4413      	add	r3, r2
 800a810:	461a      	mov	r2, r3
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	4a0b      	ldr	r2, [pc, #44]	; (800a848 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800a81a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f003 031f 	and.w	r3, r3, #31
 800a822:	2201      	movs	r2, #1
 800a824:	409a      	lsls	r2, r3
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	651a      	str	r2, [r3, #80]	; 0x50
}
 800a82a:	bf00      	nop
 800a82c:	371c      	adds	r7, #28
 800a82e:	46bd      	mov	sp, r7
 800a830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a834:	4770      	bx	lr
 800a836:	bf00      	nop
 800a838:	40020407 	.word	0x40020407
 800a83c:	40020800 	.word	0x40020800
 800a840:	40020820 	.word	0x40020820
 800a844:	cccccccd 	.word	0xcccccccd
 800a848:	40020880 	.word	0x40020880

0800a84c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b085      	sub	sp, #20
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	b2db      	uxtb	r3, r3
 800a85a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a85c:	68fa      	ldr	r2, [r7, #12]
 800a85e:	4b0b      	ldr	r3, [pc, #44]	; (800a88c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800a860:	4413      	add	r3, r2
 800a862:	009b      	lsls	r3, r3, #2
 800a864:	461a      	mov	r2, r3
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	4a08      	ldr	r2, [pc, #32]	; (800a890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800a86e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	3b01      	subs	r3, #1
 800a874:	f003 031f 	and.w	r3, r3, #31
 800a878:	2201      	movs	r2, #1
 800a87a:	409a      	lsls	r2, r3
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800a880:	bf00      	nop
 800a882:	3714      	adds	r7, #20
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr
 800a88c:	1000823f 	.word	0x1000823f
 800a890:	40020940 	.word	0x40020940

0800a894 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a894:	b480      	push	{r7}
 800a896:	b087      	sub	sp, #28
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
 800a89c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a8a2:	e15a      	b.n	800ab5a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	681a      	ldr	r2, [r3, #0]
 800a8a8:	2101      	movs	r1, #1
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	fa01 f303 	lsl.w	r3, r1, r3
 800a8b0:	4013      	ands	r3, r2
 800a8b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	f000 814c 	beq.w	800ab54 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	2b01      	cmp	r3, #1
 800a8c2:	d00b      	beq.n	800a8dc <HAL_GPIO_Init+0x48>
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	2b02      	cmp	r3, #2
 800a8ca:	d007      	beq.n	800a8dc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a8d0:	2b11      	cmp	r3, #17
 800a8d2:	d003      	beq.n	800a8dc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	2b12      	cmp	r3, #18
 800a8da:	d130      	bne.n	800a93e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	689b      	ldr	r3, [r3, #8]
 800a8e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	005b      	lsls	r3, r3, #1
 800a8e6:	2203      	movs	r2, #3
 800a8e8:	fa02 f303 	lsl.w	r3, r2, r3
 800a8ec:	43db      	mvns	r3, r3
 800a8ee:	693a      	ldr	r2, [r7, #16]
 800a8f0:	4013      	ands	r3, r2
 800a8f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	68da      	ldr	r2, [r3, #12]
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	005b      	lsls	r3, r3, #1
 800a8fc:	fa02 f303 	lsl.w	r3, r2, r3
 800a900:	693a      	ldr	r2, [r7, #16]
 800a902:	4313      	orrs	r3, r2
 800a904:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	693a      	ldr	r2, [r7, #16]
 800a90a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a912:	2201      	movs	r2, #1
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	fa02 f303 	lsl.w	r3, r2, r3
 800a91a:	43db      	mvns	r3, r3
 800a91c:	693a      	ldr	r2, [r7, #16]
 800a91e:	4013      	ands	r3, r2
 800a920:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	091b      	lsrs	r3, r3, #4
 800a928:	f003 0201 	and.w	r2, r3, #1
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	fa02 f303 	lsl.w	r3, r2, r3
 800a932:	693a      	ldr	r2, [r7, #16]
 800a934:	4313      	orrs	r3, r2
 800a936:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	693a      	ldr	r2, [r7, #16]
 800a93c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	68db      	ldr	r3, [r3, #12]
 800a942:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	005b      	lsls	r3, r3, #1
 800a948:	2203      	movs	r2, #3
 800a94a:	fa02 f303 	lsl.w	r3, r2, r3
 800a94e:	43db      	mvns	r3, r3
 800a950:	693a      	ldr	r2, [r7, #16]
 800a952:	4013      	ands	r3, r2
 800a954:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	689a      	ldr	r2, [r3, #8]
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	005b      	lsls	r3, r3, #1
 800a95e:	fa02 f303 	lsl.w	r3, r2, r3
 800a962:	693a      	ldr	r2, [r7, #16]
 800a964:	4313      	orrs	r3, r2
 800a966:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	693a      	ldr	r2, [r7, #16]
 800a96c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	685b      	ldr	r3, [r3, #4]
 800a972:	2b02      	cmp	r3, #2
 800a974:	d003      	beq.n	800a97e <HAL_GPIO_Init+0xea>
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	2b12      	cmp	r3, #18
 800a97c:	d123      	bne.n	800a9c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	08da      	lsrs	r2, r3, #3
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	3208      	adds	r2, #8
 800a986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a98a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	f003 0307 	and.w	r3, r3, #7
 800a992:	009b      	lsls	r3, r3, #2
 800a994:	220f      	movs	r2, #15
 800a996:	fa02 f303 	lsl.w	r3, r2, r3
 800a99a:	43db      	mvns	r3, r3
 800a99c:	693a      	ldr	r2, [r7, #16]
 800a99e:	4013      	ands	r3, r2
 800a9a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	691a      	ldr	r2, [r3, #16]
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	f003 0307 	and.w	r3, r3, #7
 800a9ac:	009b      	lsls	r3, r3, #2
 800a9ae:	fa02 f303 	lsl.w	r3, r2, r3
 800a9b2:	693a      	ldr	r2, [r7, #16]
 800a9b4:	4313      	orrs	r3, r2
 800a9b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	08da      	lsrs	r2, r3, #3
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	3208      	adds	r2, #8
 800a9c0:	6939      	ldr	r1, [r7, #16]
 800a9c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	005b      	lsls	r3, r3, #1
 800a9d0:	2203      	movs	r2, #3
 800a9d2:	fa02 f303 	lsl.w	r3, r2, r3
 800a9d6:	43db      	mvns	r3, r3
 800a9d8:	693a      	ldr	r2, [r7, #16]
 800a9da:	4013      	ands	r3, r2
 800a9dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	f003 0203 	and.w	r2, r3, #3
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	005b      	lsls	r3, r3, #1
 800a9ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a9ee:	693a      	ldr	r2, [r7, #16]
 800a9f0:	4313      	orrs	r3, r2
 800a9f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	693a      	ldr	r2, [r7, #16]
 800a9f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	685b      	ldr	r3, [r3, #4]
 800a9fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	f000 80a6 	beq.w	800ab54 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aa08:	4b5b      	ldr	r3, [pc, #364]	; (800ab78 <HAL_GPIO_Init+0x2e4>)
 800aa0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa0c:	4a5a      	ldr	r2, [pc, #360]	; (800ab78 <HAL_GPIO_Init+0x2e4>)
 800aa0e:	f043 0301 	orr.w	r3, r3, #1
 800aa12:	6613      	str	r3, [r2, #96]	; 0x60
 800aa14:	4b58      	ldr	r3, [pc, #352]	; (800ab78 <HAL_GPIO_Init+0x2e4>)
 800aa16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa18:	f003 0301 	and.w	r3, r3, #1
 800aa1c:	60bb      	str	r3, [r7, #8]
 800aa1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800aa20:	4a56      	ldr	r2, [pc, #344]	; (800ab7c <HAL_GPIO_Init+0x2e8>)
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	089b      	lsrs	r3, r3, #2
 800aa26:	3302      	adds	r3, #2
 800aa28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	f003 0303 	and.w	r3, r3, #3
 800aa34:	009b      	lsls	r3, r3, #2
 800aa36:	220f      	movs	r2, #15
 800aa38:	fa02 f303 	lsl.w	r3, r2, r3
 800aa3c:	43db      	mvns	r3, r3
 800aa3e:	693a      	ldr	r2, [r7, #16]
 800aa40:	4013      	ands	r3, r2
 800aa42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800aa4a:	d01f      	beq.n	800aa8c <HAL_GPIO_Init+0x1f8>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	4a4c      	ldr	r2, [pc, #304]	; (800ab80 <HAL_GPIO_Init+0x2ec>)
 800aa50:	4293      	cmp	r3, r2
 800aa52:	d019      	beq.n	800aa88 <HAL_GPIO_Init+0x1f4>
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	4a4b      	ldr	r2, [pc, #300]	; (800ab84 <HAL_GPIO_Init+0x2f0>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d013      	beq.n	800aa84 <HAL_GPIO_Init+0x1f0>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	4a4a      	ldr	r2, [pc, #296]	; (800ab88 <HAL_GPIO_Init+0x2f4>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d00d      	beq.n	800aa80 <HAL_GPIO_Init+0x1ec>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	4a49      	ldr	r2, [pc, #292]	; (800ab8c <HAL_GPIO_Init+0x2f8>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d007      	beq.n	800aa7c <HAL_GPIO_Init+0x1e8>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	4a48      	ldr	r2, [pc, #288]	; (800ab90 <HAL_GPIO_Init+0x2fc>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d101      	bne.n	800aa78 <HAL_GPIO_Init+0x1e4>
 800aa74:	2305      	movs	r3, #5
 800aa76:	e00a      	b.n	800aa8e <HAL_GPIO_Init+0x1fa>
 800aa78:	2306      	movs	r3, #6
 800aa7a:	e008      	b.n	800aa8e <HAL_GPIO_Init+0x1fa>
 800aa7c:	2304      	movs	r3, #4
 800aa7e:	e006      	b.n	800aa8e <HAL_GPIO_Init+0x1fa>
 800aa80:	2303      	movs	r3, #3
 800aa82:	e004      	b.n	800aa8e <HAL_GPIO_Init+0x1fa>
 800aa84:	2302      	movs	r3, #2
 800aa86:	e002      	b.n	800aa8e <HAL_GPIO_Init+0x1fa>
 800aa88:	2301      	movs	r3, #1
 800aa8a:	e000      	b.n	800aa8e <HAL_GPIO_Init+0x1fa>
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	697a      	ldr	r2, [r7, #20]
 800aa90:	f002 0203 	and.w	r2, r2, #3
 800aa94:	0092      	lsls	r2, r2, #2
 800aa96:	4093      	lsls	r3, r2
 800aa98:	693a      	ldr	r2, [r7, #16]
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800aa9e:	4937      	ldr	r1, [pc, #220]	; (800ab7c <HAL_GPIO_Init+0x2e8>)
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	089b      	lsrs	r3, r3, #2
 800aaa4:	3302      	adds	r3, #2
 800aaa6:	693a      	ldr	r2, [r7, #16]
 800aaa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800aaac:	4b39      	ldr	r3, [pc, #228]	; (800ab94 <HAL_GPIO_Init+0x300>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	43db      	mvns	r3, r3
 800aab6:	693a      	ldr	r2, [r7, #16]
 800aab8:	4013      	ands	r3, r2
 800aaba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d003      	beq.n	800aad0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800aac8:	693a      	ldr	r2, [r7, #16]
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	4313      	orrs	r3, r2
 800aace:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800aad0:	4a30      	ldr	r2, [pc, #192]	; (800ab94 <HAL_GPIO_Init+0x300>)
 800aad2:	693b      	ldr	r3, [r7, #16]
 800aad4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800aad6:	4b2f      	ldr	r3, [pc, #188]	; (800ab94 <HAL_GPIO_Init+0x300>)
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	43db      	mvns	r3, r3
 800aae0:	693a      	ldr	r2, [r7, #16]
 800aae2:	4013      	ands	r3, r2
 800aae4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d003      	beq.n	800aafa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800aaf2:	693a      	ldr	r2, [r7, #16]
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800aafa:	4a26      	ldr	r2, [pc, #152]	; (800ab94 <HAL_GPIO_Init+0x300>)
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800ab00:	4b24      	ldr	r3, [pc, #144]	; (800ab94 <HAL_GPIO_Init+0x300>)
 800ab02:	689b      	ldr	r3, [r3, #8]
 800ab04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	43db      	mvns	r3, r3
 800ab0a:	693a      	ldr	r2, [r7, #16]
 800ab0c:	4013      	ands	r3, r2
 800ab0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d003      	beq.n	800ab24 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800ab1c:	693a      	ldr	r2, [r7, #16]
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	4313      	orrs	r3, r2
 800ab22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800ab24:	4a1b      	ldr	r2, [pc, #108]	; (800ab94 <HAL_GPIO_Init+0x300>)
 800ab26:	693b      	ldr	r3, [r7, #16]
 800ab28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800ab2a:	4b1a      	ldr	r3, [pc, #104]	; (800ab94 <HAL_GPIO_Init+0x300>)
 800ab2c:	68db      	ldr	r3, [r3, #12]
 800ab2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	43db      	mvns	r3, r3
 800ab34:	693a      	ldr	r2, [r7, #16]
 800ab36:	4013      	ands	r3, r2
 800ab38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	685b      	ldr	r3, [r3, #4]
 800ab3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d003      	beq.n	800ab4e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800ab46:	693a      	ldr	r2, [r7, #16]
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	4313      	orrs	r3, r2
 800ab4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800ab4e:	4a11      	ldr	r2, [pc, #68]	; (800ab94 <HAL_GPIO_Init+0x300>)
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	3301      	adds	r3, #1
 800ab58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	681a      	ldr	r2, [r3, #0]
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	fa22 f303 	lsr.w	r3, r2, r3
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	f47f ae9d 	bne.w	800a8a4 <HAL_GPIO_Init+0x10>
  }
}
 800ab6a:	bf00      	nop
 800ab6c:	371c      	adds	r7, #28
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab74:	4770      	bx	lr
 800ab76:	bf00      	nop
 800ab78:	40021000 	.word	0x40021000
 800ab7c:	40010000 	.word	0x40010000
 800ab80:	48000400 	.word	0x48000400
 800ab84:	48000800 	.word	0x48000800
 800ab88:	48000c00 	.word	0x48000c00
 800ab8c:	48001000 	.word	0x48001000
 800ab90:	48001400 	.word	0x48001400
 800ab94:	40010400 	.word	0x40010400

0800ab98 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b087      	sub	sp, #28
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
 800aba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800aba2:	2300      	movs	r3, #0
 800aba4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800aba6:	e0bd      	b.n	800ad24 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800aba8:	2201      	movs	r2, #1
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	fa02 f303 	lsl.w	r3, r2, r3
 800abb0:	683a      	ldr	r2, [r7, #0]
 800abb2:	4013      	ands	r3, r2
 800abb4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	f000 80b0 	beq.w	800ad1e <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800abbe:	4a60      	ldr	r2, [pc, #384]	; (800ad40 <HAL_GPIO_DeInit+0x1a8>)
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	089b      	lsrs	r3, r3, #2
 800abc4:	3302      	adds	r3, #2
 800abc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800abca:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	f003 0303 	and.w	r3, r3, #3
 800abd2:	009b      	lsls	r3, r3, #2
 800abd4:	220f      	movs	r2, #15
 800abd6:	fa02 f303 	lsl.w	r3, r2, r3
 800abda:	68fa      	ldr	r2, [r7, #12]
 800abdc:	4013      	ands	r3, r2
 800abde:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800abe6:	d01f      	beq.n	800ac28 <HAL_GPIO_DeInit+0x90>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	4a56      	ldr	r2, [pc, #344]	; (800ad44 <HAL_GPIO_DeInit+0x1ac>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d019      	beq.n	800ac24 <HAL_GPIO_DeInit+0x8c>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	4a55      	ldr	r2, [pc, #340]	; (800ad48 <HAL_GPIO_DeInit+0x1b0>)
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d013      	beq.n	800ac20 <HAL_GPIO_DeInit+0x88>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	4a54      	ldr	r2, [pc, #336]	; (800ad4c <HAL_GPIO_DeInit+0x1b4>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d00d      	beq.n	800ac1c <HAL_GPIO_DeInit+0x84>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	4a53      	ldr	r2, [pc, #332]	; (800ad50 <HAL_GPIO_DeInit+0x1b8>)
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d007      	beq.n	800ac18 <HAL_GPIO_DeInit+0x80>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	4a52      	ldr	r2, [pc, #328]	; (800ad54 <HAL_GPIO_DeInit+0x1bc>)
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	d101      	bne.n	800ac14 <HAL_GPIO_DeInit+0x7c>
 800ac10:	2305      	movs	r3, #5
 800ac12:	e00a      	b.n	800ac2a <HAL_GPIO_DeInit+0x92>
 800ac14:	2306      	movs	r3, #6
 800ac16:	e008      	b.n	800ac2a <HAL_GPIO_DeInit+0x92>
 800ac18:	2304      	movs	r3, #4
 800ac1a:	e006      	b.n	800ac2a <HAL_GPIO_DeInit+0x92>
 800ac1c:	2303      	movs	r3, #3
 800ac1e:	e004      	b.n	800ac2a <HAL_GPIO_DeInit+0x92>
 800ac20:	2302      	movs	r3, #2
 800ac22:	e002      	b.n	800ac2a <HAL_GPIO_DeInit+0x92>
 800ac24:	2301      	movs	r3, #1
 800ac26:	e000      	b.n	800ac2a <HAL_GPIO_DeInit+0x92>
 800ac28:	2300      	movs	r3, #0
 800ac2a:	697a      	ldr	r2, [r7, #20]
 800ac2c:	f002 0203 	and.w	r2, r2, #3
 800ac30:	0092      	lsls	r2, r2, #2
 800ac32:	4093      	lsls	r3, r2
 800ac34:	68fa      	ldr	r2, [r7, #12]
 800ac36:	429a      	cmp	r2, r3
 800ac38:	d132      	bne.n	800aca0 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800ac3a:	4b47      	ldr	r3, [pc, #284]	; (800ad58 <HAL_GPIO_DeInit+0x1c0>)
 800ac3c:	681a      	ldr	r2, [r3, #0]
 800ac3e:	693b      	ldr	r3, [r7, #16]
 800ac40:	43db      	mvns	r3, r3
 800ac42:	4945      	ldr	r1, [pc, #276]	; (800ad58 <HAL_GPIO_DeInit+0x1c0>)
 800ac44:	4013      	ands	r3, r2
 800ac46:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800ac48:	4b43      	ldr	r3, [pc, #268]	; (800ad58 <HAL_GPIO_DeInit+0x1c0>)
 800ac4a:	685a      	ldr	r2, [r3, #4]
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	43db      	mvns	r3, r3
 800ac50:	4941      	ldr	r1, [pc, #260]	; (800ad58 <HAL_GPIO_DeInit+0x1c0>)
 800ac52:	4013      	ands	r3, r2
 800ac54:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800ac56:	4b40      	ldr	r3, [pc, #256]	; (800ad58 <HAL_GPIO_DeInit+0x1c0>)
 800ac58:	689a      	ldr	r2, [r3, #8]
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	43db      	mvns	r3, r3
 800ac5e:	493e      	ldr	r1, [pc, #248]	; (800ad58 <HAL_GPIO_DeInit+0x1c0>)
 800ac60:	4013      	ands	r3, r2
 800ac62:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800ac64:	4b3c      	ldr	r3, [pc, #240]	; (800ad58 <HAL_GPIO_DeInit+0x1c0>)
 800ac66:	68da      	ldr	r2, [r3, #12]
 800ac68:	693b      	ldr	r3, [r7, #16]
 800ac6a:	43db      	mvns	r3, r3
 800ac6c:	493a      	ldr	r1, [pc, #232]	; (800ad58 <HAL_GPIO_DeInit+0x1c0>)
 800ac6e:	4013      	ands	r3, r2
 800ac70:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	f003 0303 	and.w	r3, r3, #3
 800ac78:	009b      	lsls	r3, r3, #2
 800ac7a:	220f      	movs	r2, #15
 800ac7c:	fa02 f303 	lsl.w	r3, r2, r3
 800ac80:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800ac82:	4a2f      	ldr	r2, [pc, #188]	; (800ad40 <HAL_GPIO_DeInit+0x1a8>)
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	089b      	lsrs	r3, r3, #2
 800ac88:	3302      	adds	r3, #2
 800ac8a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	43da      	mvns	r2, r3
 800ac92:	482b      	ldr	r0, [pc, #172]	; (800ad40 <HAL_GPIO_DeInit+0x1a8>)
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	089b      	lsrs	r3, r3, #2
 800ac98:	400a      	ands	r2, r1
 800ac9a:	3302      	adds	r3, #2
 800ac9c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681a      	ldr	r2, [r3, #0]
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	005b      	lsls	r3, r3, #1
 800aca8:	2103      	movs	r1, #3
 800acaa:	fa01 f303 	lsl.w	r3, r1, r3
 800acae:	431a      	orrs	r2, r3
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	08da      	lsrs	r2, r3, #3
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	3208      	adds	r2, #8
 800acbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	f003 0307 	and.w	r3, r3, #7
 800acc6:	009b      	lsls	r3, r3, #2
 800acc8:	220f      	movs	r2, #15
 800acca:	fa02 f303 	lsl.w	r3, r2, r3
 800acce:	43db      	mvns	r3, r3
 800acd0:	697a      	ldr	r2, [r7, #20]
 800acd2:	08d2      	lsrs	r2, r2, #3
 800acd4:	4019      	ands	r1, r3
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	3208      	adds	r2, #8
 800acda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	68da      	ldr	r2, [r3, #12]
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	005b      	lsls	r3, r3, #1
 800ace6:	2103      	movs	r1, #3
 800ace8:	fa01 f303 	lsl.w	r3, r1, r3
 800acec:	43db      	mvns	r3, r3
 800acee:	401a      	ands	r2, r3
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	685a      	ldr	r2, [r3, #4]
 800acf8:	2101      	movs	r1, #1
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	fa01 f303 	lsl.w	r3, r1, r3
 800ad00:	43db      	mvns	r3, r3
 800ad02:	401a      	ands	r2, r3
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	689a      	ldr	r2, [r3, #8]
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	005b      	lsls	r3, r3, #1
 800ad10:	2103      	movs	r1, #3
 800ad12:	fa01 f303 	lsl.w	r3, r1, r3
 800ad16:	43db      	mvns	r3, r3
 800ad18:	401a      	ands	r2, r3
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	3301      	adds	r3, #1
 800ad22:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 800ad24:	683a      	ldr	r2, [r7, #0]
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	fa22 f303 	lsr.w	r3, r2, r3
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	f47f af3b 	bne.w	800aba8 <HAL_GPIO_DeInit+0x10>
  }
}
 800ad32:	bf00      	nop
 800ad34:	371c      	adds	r7, #28
 800ad36:	46bd      	mov	sp, r7
 800ad38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3c:	4770      	bx	lr
 800ad3e:	bf00      	nop
 800ad40:	40010000 	.word	0x40010000
 800ad44:	48000400 	.word	0x48000400
 800ad48:	48000800 	.word	0x48000800
 800ad4c:	48000c00 	.word	0x48000c00
 800ad50:	48001000 	.word	0x48001000
 800ad54:	48001400 	.word	0x48001400
 800ad58:	40010400 	.word	0x40010400

0800ad5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b083      	sub	sp, #12
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	460b      	mov	r3, r1
 800ad66:	807b      	strh	r3, [r7, #2]
 800ad68:	4613      	mov	r3, r2
 800ad6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800ad6c:	787b      	ldrb	r3, [r7, #1]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d003      	beq.n	800ad7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800ad72:	887a      	ldrh	r2, [r7, #2]
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800ad78:	e002      	b.n	800ad80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800ad7a:	887a      	ldrh	r2, [r7, #2]
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 800ad80:	bf00      	nop
 800ad82:	370c      	adds	r7, #12
 800ad84:	46bd      	mov	sp, r7
 800ad86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8a:	4770      	bx	lr

0800ad8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b085      	sub	sp, #20
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d141      	bne.n	800ae1e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800ad9a:	4b4b      	ldr	r3, [pc, #300]	; (800aec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ada2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ada6:	d131      	bne.n	800ae0c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ada8:	4b47      	ldr	r3, [pc, #284]	; (800aec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800adaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800adae:	4a46      	ldr	r2, [pc, #280]	; (800aec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800adb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800adb4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800adb8:	4b43      	ldr	r3, [pc, #268]	; (800aec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800adc0:	4a41      	ldr	r2, [pc, #260]	; (800aec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800adc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800adc6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800adc8:	4b40      	ldr	r3, [pc, #256]	; (800aecc <HAL_PWREx_ControlVoltageScaling+0x140>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	2232      	movs	r2, #50	; 0x32
 800adce:	fb02 f303 	mul.w	r3, r2, r3
 800add2:	4a3f      	ldr	r2, [pc, #252]	; (800aed0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800add4:	fba2 2303 	umull	r2, r3, r2, r3
 800add8:	0c9b      	lsrs	r3, r3, #18
 800adda:	3301      	adds	r3, #1
 800addc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800adde:	e002      	b.n	800ade6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	3b01      	subs	r3, #1
 800ade4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ade6:	4b38      	ldr	r3, [pc, #224]	; (800aec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ade8:	695b      	ldr	r3, [r3, #20]
 800adea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800adee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800adf2:	d102      	bne.n	800adfa <HAL_PWREx_ControlVoltageScaling+0x6e>
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d1f2      	bne.n	800ade0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800adfa:	4b33      	ldr	r3, [pc, #204]	; (800aec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800adfc:	695b      	ldr	r3, [r3, #20]
 800adfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae06:	d158      	bne.n	800aeba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800ae08:	2303      	movs	r3, #3
 800ae0a:	e057      	b.n	800aebc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ae0c:	4b2e      	ldr	r3, [pc, #184]	; (800aec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ae0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae12:	4a2d      	ldr	r2, [pc, #180]	; (800aec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ae14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800ae1c:	e04d      	b.n	800aeba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae24:	d141      	bne.n	800aeaa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800ae26:	4b28      	ldr	r3, [pc, #160]	; (800aec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ae2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae32:	d131      	bne.n	800ae98 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ae34:	4b24      	ldr	r3, [pc, #144]	; (800aec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ae36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae3a:	4a23      	ldr	r2, [pc, #140]	; (800aec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ae3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800ae44:	4b20      	ldr	r3, [pc, #128]	; (800aec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ae4c:	4a1e      	ldr	r2, [pc, #120]	; (800aec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ae4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ae52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800ae54:	4b1d      	ldr	r3, [pc, #116]	; (800aecc <HAL_PWREx_ControlVoltageScaling+0x140>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	2232      	movs	r2, #50	; 0x32
 800ae5a:	fb02 f303 	mul.w	r3, r2, r3
 800ae5e:	4a1c      	ldr	r2, [pc, #112]	; (800aed0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800ae60:	fba2 2303 	umull	r2, r3, r2, r3
 800ae64:	0c9b      	lsrs	r3, r3, #18
 800ae66:	3301      	adds	r3, #1
 800ae68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ae6a:	e002      	b.n	800ae72 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	3b01      	subs	r3, #1
 800ae70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ae72:	4b15      	ldr	r3, [pc, #84]	; (800aec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ae74:	695b      	ldr	r3, [r3, #20]
 800ae76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae7e:	d102      	bne.n	800ae86 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d1f2      	bne.n	800ae6c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800ae86:	4b10      	ldr	r3, [pc, #64]	; (800aec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ae88:	695b      	ldr	r3, [r3, #20]
 800ae8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae92:	d112      	bne.n	800aeba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800ae94:	2303      	movs	r3, #3
 800ae96:	e011      	b.n	800aebc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ae98:	4b0b      	ldr	r3, [pc, #44]	; (800aec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ae9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae9e:	4a0a      	ldr	r2, [pc, #40]	; (800aec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aea4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800aea8:	e007      	b.n	800aeba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800aeaa:	4b07      	ldr	r3, [pc, #28]	; (800aec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800aeb2:	4a05      	ldr	r2, [pc, #20]	; (800aec8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aeb4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800aeb8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800aeba:	2300      	movs	r3, #0
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	3714      	adds	r7, #20
 800aec0:	46bd      	mov	sp, r7
 800aec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec6:	4770      	bx	lr
 800aec8:	40007000 	.word	0x40007000
 800aecc:	20000ca8 	.word	0x20000ca8
 800aed0:	431bde83 	.word	0x431bde83

0800aed4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b088      	sub	sp, #32
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d101      	bne.n	800aee6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800aee2:	2301      	movs	r3, #1
 800aee4:	e308      	b.n	800b4f8 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f003 0301 	and.w	r3, r3, #1
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d075      	beq.n	800afde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aef2:	4ba3      	ldr	r3, [pc, #652]	; (800b180 <HAL_RCC_OscConfig+0x2ac>)
 800aef4:	689b      	ldr	r3, [r3, #8]
 800aef6:	f003 030c 	and.w	r3, r3, #12
 800aefa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800aefc:	4ba0      	ldr	r3, [pc, #640]	; (800b180 <HAL_RCC_OscConfig+0x2ac>)
 800aefe:	68db      	ldr	r3, [r3, #12]
 800af00:	f003 0303 	and.w	r3, r3, #3
 800af04:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800af06:	69bb      	ldr	r3, [r7, #24]
 800af08:	2b0c      	cmp	r3, #12
 800af0a:	d102      	bne.n	800af12 <HAL_RCC_OscConfig+0x3e>
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	2b03      	cmp	r3, #3
 800af10:	d002      	beq.n	800af18 <HAL_RCC_OscConfig+0x44>
 800af12:	69bb      	ldr	r3, [r7, #24]
 800af14:	2b08      	cmp	r3, #8
 800af16:	d10b      	bne.n	800af30 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af18:	4b99      	ldr	r3, [pc, #612]	; (800b180 <HAL_RCC_OscConfig+0x2ac>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af20:	2b00      	cmp	r3, #0
 800af22:	d05b      	beq.n	800afdc <HAL_RCC_OscConfig+0x108>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	685b      	ldr	r3, [r3, #4]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d157      	bne.n	800afdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800af2c:	2301      	movs	r3, #1
 800af2e:	e2e3      	b.n	800b4f8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af38:	d106      	bne.n	800af48 <HAL_RCC_OscConfig+0x74>
 800af3a:	4b91      	ldr	r3, [pc, #580]	; (800b180 <HAL_RCC_OscConfig+0x2ac>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	4a90      	ldr	r2, [pc, #576]	; (800b180 <HAL_RCC_OscConfig+0x2ac>)
 800af40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af44:	6013      	str	r3, [r2, #0]
 800af46:	e01d      	b.n	800af84 <HAL_RCC_OscConfig+0xb0>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	685b      	ldr	r3, [r3, #4]
 800af4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800af50:	d10c      	bne.n	800af6c <HAL_RCC_OscConfig+0x98>
 800af52:	4b8b      	ldr	r3, [pc, #556]	; (800b180 <HAL_RCC_OscConfig+0x2ac>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	4a8a      	ldr	r2, [pc, #552]	; (800b180 <HAL_RCC_OscConfig+0x2ac>)
 800af58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800af5c:	6013      	str	r3, [r2, #0]
 800af5e:	4b88      	ldr	r3, [pc, #544]	; (800b180 <HAL_RCC_OscConfig+0x2ac>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	4a87      	ldr	r2, [pc, #540]	; (800b180 <HAL_RCC_OscConfig+0x2ac>)
 800af64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af68:	6013      	str	r3, [r2, #0]
 800af6a:	e00b      	b.n	800af84 <HAL_RCC_OscConfig+0xb0>
 800af6c:	4b84      	ldr	r3, [pc, #528]	; (800b180 <HAL_RCC_OscConfig+0x2ac>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	4a83      	ldr	r2, [pc, #524]	; (800b180 <HAL_RCC_OscConfig+0x2ac>)
 800af72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af76:	6013      	str	r3, [r2, #0]
 800af78:	4b81      	ldr	r3, [pc, #516]	; (800b180 <HAL_RCC_OscConfig+0x2ac>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	4a80      	ldr	r2, [pc, #512]	; (800b180 <HAL_RCC_OscConfig+0x2ac>)
 800af7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800af82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	685b      	ldr	r3, [r3, #4]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d013      	beq.n	800afb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af8c:	f7fd f8ea 	bl	8008164 <HAL_GetTick>
 800af90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800af92:	e008      	b.n	800afa6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800af94:	f7fd f8e6 	bl	8008164 <HAL_GetTick>
 800af98:	4602      	mov	r2, r0
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	1ad3      	subs	r3, r2, r3
 800af9e:	2b64      	cmp	r3, #100	; 0x64
 800afa0:	d901      	bls.n	800afa6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800afa2:	2303      	movs	r3, #3
 800afa4:	e2a8      	b.n	800b4f8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800afa6:	4b76      	ldr	r3, [pc, #472]	; (800b180 <HAL_RCC_OscConfig+0x2ac>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d0f0      	beq.n	800af94 <HAL_RCC_OscConfig+0xc0>
 800afb2:	e014      	b.n	800afde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afb4:	f7fd f8d6 	bl	8008164 <HAL_GetTick>
 800afb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800afba:	e008      	b.n	800afce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800afbc:	f7fd f8d2 	bl	8008164 <HAL_GetTick>
 800afc0:	4602      	mov	r2, r0
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	1ad3      	subs	r3, r2, r3
 800afc6:	2b64      	cmp	r3, #100	; 0x64
 800afc8:	d901      	bls.n	800afce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800afca:	2303      	movs	r3, #3
 800afcc:	e294      	b.n	800b4f8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800afce:	4b6c      	ldr	r3, [pc, #432]	; (800b180 <HAL_RCC_OscConfig+0x2ac>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d1f0      	bne.n	800afbc <HAL_RCC_OscConfig+0xe8>
 800afda:	e000      	b.n	800afde <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800afdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f003 0302 	and.w	r3, r3, #2
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d075      	beq.n	800b0d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800afea:	4b65      	ldr	r3, [pc, #404]	; (800b180 <HAL_RCC_OscConfig+0x2ac>)
 800afec:	689b      	ldr	r3, [r3, #8]
 800afee:	f003 030c 	and.w	r3, r3, #12
 800aff2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800aff4:	4b62      	ldr	r3, [pc, #392]	; (800b180 <HAL_RCC_OscConfig+0x2ac>)
 800aff6:	68db      	ldr	r3, [r3, #12]
 800aff8:	f003 0303 	and.w	r3, r3, #3
 800affc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800affe:	69bb      	ldr	r3, [r7, #24]
 800b000:	2b0c      	cmp	r3, #12
 800b002:	d102      	bne.n	800b00a <HAL_RCC_OscConfig+0x136>
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	2b02      	cmp	r3, #2
 800b008:	d002      	beq.n	800b010 <HAL_RCC_OscConfig+0x13c>
 800b00a:	69bb      	ldr	r3, [r7, #24]
 800b00c:	2b04      	cmp	r3, #4
 800b00e:	d11f      	bne.n	800b050 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b010:	4b5b      	ldr	r3, [pc, #364]	; (800b180 <HAL_RCC_OscConfig+0x2ac>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d005      	beq.n	800b028 <HAL_RCC_OscConfig+0x154>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	68db      	ldr	r3, [r3, #12]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d101      	bne.n	800b028 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800b024:	2301      	movs	r3, #1
 800b026:	e267      	b.n	800b4f8 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b028:	4b55      	ldr	r3, [pc, #340]	; (800b180 <HAL_RCC_OscConfig+0x2ac>)
 800b02a:	685b      	ldr	r3, [r3, #4]
 800b02c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	691b      	ldr	r3, [r3, #16]
 800b034:	061b      	lsls	r3, r3, #24
 800b036:	4952      	ldr	r1, [pc, #328]	; (800b180 <HAL_RCC_OscConfig+0x2ac>)
 800b038:	4313      	orrs	r3, r2
 800b03a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b03c:	4b51      	ldr	r3, [pc, #324]	; (800b184 <HAL_RCC_OscConfig+0x2b0>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	4618      	mov	r0, r3
 800b042:	f7fd f843 	bl	80080cc <HAL_InitTick>
 800b046:	4603      	mov	r3, r0
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d043      	beq.n	800b0d4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800b04c:	2301      	movs	r3, #1
 800b04e:	e253      	b.n	800b4f8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	68db      	ldr	r3, [r3, #12]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d023      	beq.n	800b0a0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b058:	4b49      	ldr	r3, [pc, #292]	; (800b180 <HAL_RCC_OscConfig+0x2ac>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	4a48      	ldr	r2, [pc, #288]	; (800b180 <HAL_RCC_OscConfig+0x2ac>)
 800b05e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b062:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b064:	f7fd f87e 	bl	8008164 <HAL_GetTick>
 800b068:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b06a:	e008      	b.n	800b07e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b06c:	f7fd f87a 	bl	8008164 <HAL_GetTick>
 800b070:	4602      	mov	r2, r0
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	1ad3      	subs	r3, r2, r3
 800b076:	2b02      	cmp	r3, #2
 800b078:	d901      	bls.n	800b07e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b07a:	2303      	movs	r3, #3
 800b07c:	e23c      	b.n	800b4f8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b07e:	4b40      	ldr	r3, [pc, #256]	; (800b180 <HAL_RCC_OscConfig+0x2ac>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b086:	2b00      	cmp	r3, #0
 800b088:	d0f0      	beq.n	800b06c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b08a:	4b3d      	ldr	r3, [pc, #244]	; (800b180 <HAL_RCC_OscConfig+0x2ac>)
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	691b      	ldr	r3, [r3, #16]
 800b096:	061b      	lsls	r3, r3, #24
 800b098:	4939      	ldr	r1, [pc, #228]	; (800b180 <HAL_RCC_OscConfig+0x2ac>)
 800b09a:	4313      	orrs	r3, r2
 800b09c:	604b      	str	r3, [r1, #4]
 800b09e:	e01a      	b.n	800b0d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b0a0:	4b37      	ldr	r3, [pc, #220]	; (800b180 <HAL_RCC_OscConfig+0x2ac>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	4a36      	ldr	r2, [pc, #216]	; (800b180 <HAL_RCC_OscConfig+0x2ac>)
 800b0a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0ac:	f7fd f85a 	bl	8008164 <HAL_GetTick>
 800b0b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b0b2:	e008      	b.n	800b0c6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b0b4:	f7fd f856 	bl	8008164 <HAL_GetTick>
 800b0b8:	4602      	mov	r2, r0
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	1ad3      	subs	r3, r2, r3
 800b0be:	2b02      	cmp	r3, #2
 800b0c0:	d901      	bls.n	800b0c6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800b0c2:	2303      	movs	r3, #3
 800b0c4:	e218      	b.n	800b4f8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b0c6:	4b2e      	ldr	r3, [pc, #184]	; (800b180 <HAL_RCC_OscConfig+0x2ac>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d1f0      	bne.n	800b0b4 <HAL_RCC_OscConfig+0x1e0>
 800b0d2:	e000      	b.n	800b0d6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b0d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f003 0308 	and.w	r3, r3, #8
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d03c      	beq.n	800b15c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	695b      	ldr	r3, [r3, #20]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d01c      	beq.n	800b124 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b0ea:	4b25      	ldr	r3, [pc, #148]	; (800b180 <HAL_RCC_OscConfig+0x2ac>)
 800b0ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b0f0:	4a23      	ldr	r2, [pc, #140]	; (800b180 <HAL_RCC_OscConfig+0x2ac>)
 800b0f2:	f043 0301 	orr.w	r3, r3, #1
 800b0f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b0fa:	f7fd f833 	bl	8008164 <HAL_GetTick>
 800b0fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b100:	e008      	b.n	800b114 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b102:	f7fd f82f 	bl	8008164 <HAL_GetTick>
 800b106:	4602      	mov	r2, r0
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	1ad3      	subs	r3, r2, r3
 800b10c:	2b02      	cmp	r3, #2
 800b10e:	d901      	bls.n	800b114 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b110:	2303      	movs	r3, #3
 800b112:	e1f1      	b.n	800b4f8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b114:	4b1a      	ldr	r3, [pc, #104]	; (800b180 <HAL_RCC_OscConfig+0x2ac>)
 800b116:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b11a:	f003 0302 	and.w	r3, r3, #2
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d0ef      	beq.n	800b102 <HAL_RCC_OscConfig+0x22e>
 800b122:	e01b      	b.n	800b15c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b124:	4b16      	ldr	r3, [pc, #88]	; (800b180 <HAL_RCC_OscConfig+0x2ac>)
 800b126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b12a:	4a15      	ldr	r2, [pc, #84]	; (800b180 <HAL_RCC_OscConfig+0x2ac>)
 800b12c:	f023 0301 	bic.w	r3, r3, #1
 800b130:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b134:	f7fd f816 	bl	8008164 <HAL_GetTick>
 800b138:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b13a:	e008      	b.n	800b14e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b13c:	f7fd f812 	bl	8008164 <HAL_GetTick>
 800b140:	4602      	mov	r2, r0
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	1ad3      	subs	r3, r2, r3
 800b146:	2b02      	cmp	r3, #2
 800b148:	d901      	bls.n	800b14e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800b14a:	2303      	movs	r3, #3
 800b14c:	e1d4      	b.n	800b4f8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b14e:	4b0c      	ldr	r3, [pc, #48]	; (800b180 <HAL_RCC_OscConfig+0x2ac>)
 800b150:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b154:	f003 0302 	and.w	r3, r3, #2
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d1ef      	bne.n	800b13c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f003 0304 	and.w	r3, r3, #4
 800b164:	2b00      	cmp	r3, #0
 800b166:	f000 80ab 	beq.w	800b2c0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b16a:	2300      	movs	r3, #0
 800b16c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b16e:	4b04      	ldr	r3, [pc, #16]	; (800b180 <HAL_RCC_OscConfig+0x2ac>)
 800b170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b176:	2b00      	cmp	r3, #0
 800b178:	d106      	bne.n	800b188 <HAL_RCC_OscConfig+0x2b4>
 800b17a:	2301      	movs	r3, #1
 800b17c:	e005      	b.n	800b18a <HAL_RCC_OscConfig+0x2b6>
 800b17e:	bf00      	nop
 800b180:	40021000 	.word	0x40021000
 800b184:	20000cac 	.word	0x20000cac
 800b188:	2300      	movs	r3, #0
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d00d      	beq.n	800b1aa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b18e:	4baf      	ldr	r3, [pc, #700]	; (800b44c <HAL_RCC_OscConfig+0x578>)
 800b190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b192:	4aae      	ldr	r2, [pc, #696]	; (800b44c <HAL_RCC_OscConfig+0x578>)
 800b194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b198:	6593      	str	r3, [r2, #88]	; 0x58
 800b19a:	4bac      	ldr	r3, [pc, #688]	; (800b44c <HAL_RCC_OscConfig+0x578>)
 800b19c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b19e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1a2:	60fb      	str	r3, [r7, #12]
 800b1a4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b1aa:	4ba9      	ldr	r3, [pc, #676]	; (800b450 <HAL_RCC_OscConfig+0x57c>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d118      	bne.n	800b1e8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b1b6:	4ba6      	ldr	r3, [pc, #664]	; (800b450 <HAL_RCC_OscConfig+0x57c>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	4aa5      	ldr	r2, [pc, #660]	; (800b450 <HAL_RCC_OscConfig+0x57c>)
 800b1bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b1c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b1c2:	f7fc ffcf 	bl	8008164 <HAL_GetTick>
 800b1c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b1c8:	e008      	b.n	800b1dc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b1ca:	f7fc ffcb 	bl	8008164 <HAL_GetTick>
 800b1ce:	4602      	mov	r2, r0
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	1ad3      	subs	r3, r2, r3
 800b1d4:	2b02      	cmp	r3, #2
 800b1d6:	d901      	bls.n	800b1dc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800b1d8:	2303      	movs	r3, #3
 800b1da:	e18d      	b.n	800b4f8 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b1dc:	4b9c      	ldr	r3, [pc, #624]	; (800b450 <HAL_RCC_OscConfig+0x57c>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d0f0      	beq.n	800b1ca <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	689b      	ldr	r3, [r3, #8]
 800b1ec:	2b01      	cmp	r3, #1
 800b1ee:	d108      	bne.n	800b202 <HAL_RCC_OscConfig+0x32e>
 800b1f0:	4b96      	ldr	r3, [pc, #600]	; (800b44c <HAL_RCC_OscConfig+0x578>)
 800b1f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1f6:	4a95      	ldr	r2, [pc, #596]	; (800b44c <HAL_RCC_OscConfig+0x578>)
 800b1f8:	f043 0301 	orr.w	r3, r3, #1
 800b1fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b200:	e024      	b.n	800b24c <HAL_RCC_OscConfig+0x378>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	689b      	ldr	r3, [r3, #8]
 800b206:	2b05      	cmp	r3, #5
 800b208:	d110      	bne.n	800b22c <HAL_RCC_OscConfig+0x358>
 800b20a:	4b90      	ldr	r3, [pc, #576]	; (800b44c <HAL_RCC_OscConfig+0x578>)
 800b20c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b210:	4a8e      	ldr	r2, [pc, #568]	; (800b44c <HAL_RCC_OscConfig+0x578>)
 800b212:	f043 0304 	orr.w	r3, r3, #4
 800b216:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b21a:	4b8c      	ldr	r3, [pc, #560]	; (800b44c <HAL_RCC_OscConfig+0x578>)
 800b21c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b220:	4a8a      	ldr	r2, [pc, #552]	; (800b44c <HAL_RCC_OscConfig+0x578>)
 800b222:	f043 0301 	orr.w	r3, r3, #1
 800b226:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b22a:	e00f      	b.n	800b24c <HAL_RCC_OscConfig+0x378>
 800b22c:	4b87      	ldr	r3, [pc, #540]	; (800b44c <HAL_RCC_OscConfig+0x578>)
 800b22e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b232:	4a86      	ldr	r2, [pc, #536]	; (800b44c <HAL_RCC_OscConfig+0x578>)
 800b234:	f023 0301 	bic.w	r3, r3, #1
 800b238:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b23c:	4b83      	ldr	r3, [pc, #524]	; (800b44c <HAL_RCC_OscConfig+0x578>)
 800b23e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b242:	4a82      	ldr	r2, [pc, #520]	; (800b44c <HAL_RCC_OscConfig+0x578>)
 800b244:	f023 0304 	bic.w	r3, r3, #4
 800b248:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	689b      	ldr	r3, [r3, #8]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d016      	beq.n	800b282 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b254:	f7fc ff86 	bl	8008164 <HAL_GetTick>
 800b258:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b25a:	e00a      	b.n	800b272 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b25c:	f7fc ff82 	bl	8008164 <HAL_GetTick>
 800b260:	4602      	mov	r2, r0
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	1ad3      	subs	r3, r2, r3
 800b266:	f241 3288 	movw	r2, #5000	; 0x1388
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d901      	bls.n	800b272 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800b26e:	2303      	movs	r3, #3
 800b270:	e142      	b.n	800b4f8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b272:	4b76      	ldr	r3, [pc, #472]	; (800b44c <HAL_RCC_OscConfig+0x578>)
 800b274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b278:	f003 0302 	and.w	r3, r3, #2
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d0ed      	beq.n	800b25c <HAL_RCC_OscConfig+0x388>
 800b280:	e015      	b.n	800b2ae <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b282:	f7fc ff6f 	bl	8008164 <HAL_GetTick>
 800b286:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b288:	e00a      	b.n	800b2a0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b28a:	f7fc ff6b 	bl	8008164 <HAL_GetTick>
 800b28e:	4602      	mov	r2, r0
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	1ad3      	subs	r3, r2, r3
 800b294:	f241 3288 	movw	r2, #5000	; 0x1388
 800b298:	4293      	cmp	r3, r2
 800b29a:	d901      	bls.n	800b2a0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800b29c:	2303      	movs	r3, #3
 800b29e:	e12b      	b.n	800b4f8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b2a0:	4b6a      	ldr	r3, [pc, #424]	; (800b44c <HAL_RCC_OscConfig+0x578>)
 800b2a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2a6:	f003 0302 	and.w	r3, r3, #2
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d1ed      	bne.n	800b28a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b2ae:	7ffb      	ldrb	r3, [r7, #31]
 800b2b0:	2b01      	cmp	r3, #1
 800b2b2:	d105      	bne.n	800b2c0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b2b4:	4b65      	ldr	r3, [pc, #404]	; (800b44c <HAL_RCC_OscConfig+0x578>)
 800b2b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2b8:	4a64      	ldr	r2, [pc, #400]	; (800b44c <HAL_RCC_OscConfig+0x578>)
 800b2ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b2be:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f003 0320 	and.w	r3, r3, #32
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d03c      	beq.n	800b346 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	699b      	ldr	r3, [r3, #24]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d01c      	beq.n	800b30e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b2d4:	4b5d      	ldr	r3, [pc, #372]	; (800b44c <HAL_RCC_OscConfig+0x578>)
 800b2d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b2da:	4a5c      	ldr	r2, [pc, #368]	; (800b44c <HAL_RCC_OscConfig+0x578>)
 800b2dc:	f043 0301 	orr.w	r3, r3, #1
 800b2e0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b2e4:	f7fc ff3e 	bl	8008164 <HAL_GetTick>
 800b2e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b2ea:	e008      	b.n	800b2fe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b2ec:	f7fc ff3a 	bl	8008164 <HAL_GetTick>
 800b2f0:	4602      	mov	r2, r0
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	1ad3      	subs	r3, r2, r3
 800b2f6:	2b02      	cmp	r3, #2
 800b2f8:	d901      	bls.n	800b2fe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800b2fa:	2303      	movs	r3, #3
 800b2fc:	e0fc      	b.n	800b4f8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b2fe:	4b53      	ldr	r3, [pc, #332]	; (800b44c <HAL_RCC_OscConfig+0x578>)
 800b300:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b304:	f003 0302 	and.w	r3, r3, #2
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d0ef      	beq.n	800b2ec <HAL_RCC_OscConfig+0x418>
 800b30c:	e01b      	b.n	800b346 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b30e:	4b4f      	ldr	r3, [pc, #316]	; (800b44c <HAL_RCC_OscConfig+0x578>)
 800b310:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b314:	4a4d      	ldr	r2, [pc, #308]	; (800b44c <HAL_RCC_OscConfig+0x578>)
 800b316:	f023 0301 	bic.w	r3, r3, #1
 800b31a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b31e:	f7fc ff21 	bl	8008164 <HAL_GetTick>
 800b322:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b324:	e008      	b.n	800b338 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b326:	f7fc ff1d 	bl	8008164 <HAL_GetTick>
 800b32a:	4602      	mov	r2, r0
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	1ad3      	subs	r3, r2, r3
 800b330:	2b02      	cmp	r3, #2
 800b332:	d901      	bls.n	800b338 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800b334:	2303      	movs	r3, #3
 800b336:	e0df      	b.n	800b4f8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b338:	4b44      	ldr	r3, [pc, #272]	; (800b44c <HAL_RCC_OscConfig+0x578>)
 800b33a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b33e:	f003 0302 	and.w	r3, r3, #2
 800b342:	2b00      	cmp	r3, #0
 800b344:	d1ef      	bne.n	800b326 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	69db      	ldr	r3, [r3, #28]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	f000 80d3 	beq.w	800b4f6 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b350:	4b3e      	ldr	r3, [pc, #248]	; (800b44c <HAL_RCC_OscConfig+0x578>)
 800b352:	689b      	ldr	r3, [r3, #8]
 800b354:	f003 030c 	and.w	r3, r3, #12
 800b358:	2b0c      	cmp	r3, #12
 800b35a:	f000 808d 	beq.w	800b478 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	69db      	ldr	r3, [r3, #28]
 800b362:	2b02      	cmp	r3, #2
 800b364:	d15a      	bne.n	800b41c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b366:	4b39      	ldr	r3, [pc, #228]	; (800b44c <HAL_RCC_OscConfig+0x578>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	4a38      	ldr	r2, [pc, #224]	; (800b44c <HAL_RCC_OscConfig+0x578>)
 800b36c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b370:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b372:	f7fc fef7 	bl	8008164 <HAL_GetTick>
 800b376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b378:	e008      	b.n	800b38c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b37a:	f7fc fef3 	bl	8008164 <HAL_GetTick>
 800b37e:	4602      	mov	r2, r0
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	1ad3      	subs	r3, r2, r3
 800b384:	2b02      	cmp	r3, #2
 800b386:	d901      	bls.n	800b38c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800b388:	2303      	movs	r3, #3
 800b38a:	e0b5      	b.n	800b4f8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b38c:	4b2f      	ldr	r3, [pc, #188]	; (800b44c <HAL_RCC_OscConfig+0x578>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b394:	2b00      	cmp	r3, #0
 800b396:	d1f0      	bne.n	800b37a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b398:	4b2c      	ldr	r3, [pc, #176]	; (800b44c <HAL_RCC_OscConfig+0x578>)
 800b39a:	68da      	ldr	r2, [r3, #12]
 800b39c:	4b2d      	ldr	r3, [pc, #180]	; (800b454 <HAL_RCC_OscConfig+0x580>)
 800b39e:	4013      	ands	r3, r2
 800b3a0:	687a      	ldr	r2, [r7, #4]
 800b3a2:	6a11      	ldr	r1, [r2, #32]
 800b3a4:	687a      	ldr	r2, [r7, #4]
 800b3a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b3a8:	3a01      	subs	r2, #1
 800b3aa:	0112      	lsls	r2, r2, #4
 800b3ac:	4311      	orrs	r1, r2
 800b3ae:	687a      	ldr	r2, [r7, #4]
 800b3b0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800b3b2:	0212      	lsls	r2, r2, #8
 800b3b4:	4311      	orrs	r1, r2
 800b3b6:	687a      	ldr	r2, [r7, #4]
 800b3b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b3ba:	0852      	lsrs	r2, r2, #1
 800b3bc:	3a01      	subs	r2, #1
 800b3be:	0552      	lsls	r2, r2, #21
 800b3c0:	4311      	orrs	r1, r2
 800b3c2:	687a      	ldr	r2, [r7, #4]
 800b3c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b3c6:	0852      	lsrs	r2, r2, #1
 800b3c8:	3a01      	subs	r2, #1
 800b3ca:	0652      	lsls	r2, r2, #25
 800b3cc:	4311      	orrs	r1, r2
 800b3ce:	687a      	ldr	r2, [r7, #4]
 800b3d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b3d2:	06d2      	lsls	r2, r2, #27
 800b3d4:	430a      	orrs	r2, r1
 800b3d6:	491d      	ldr	r1, [pc, #116]	; (800b44c <HAL_RCC_OscConfig+0x578>)
 800b3d8:	4313      	orrs	r3, r2
 800b3da:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b3dc:	4b1b      	ldr	r3, [pc, #108]	; (800b44c <HAL_RCC_OscConfig+0x578>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	4a1a      	ldr	r2, [pc, #104]	; (800b44c <HAL_RCC_OscConfig+0x578>)
 800b3e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b3e6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b3e8:	4b18      	ldr	r3, [pc, #96]	; (800b44c <HAL_RCC_OscConfig+0x578>)
 800b3ea:	68db      	ldr	r3, [r3, #12]
 800b3ec:	4a17      	ldr	r2, [pc, #92]	; (800b44c <HAL_RCC_OscConfig+0x578>)
 800b3ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b3f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3f4:	f7fc feb6 	bl	8008164 <HAL_GetTick>
 800b3f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b3fa:	e008      	b.n	800b40e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b3fc:	f7fc feb2 	bl	8008164 <HAL_GetTick>
 800b400:	4602      	mov	r2, r0
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	1ad3      	subs	r3, r2, r3
 800b406:	2b02      	cmp	r3, #2
 800b408:	d901      	bls.n	800b40e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800b40a:	2303      	movs	r3, #3
 800b40c:	e074      	b.n	800b4f8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b40e:	4b0f      	ldr	r3, [pc, #60]	; (800b44c <HAL_RCC_OscConfig+0x578>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b416:	2b00      	cmp	r3, #0
 800b418:	d0f0      	beq.n	800b3fc <HAL_RCC_OscConfig+0x528>
 800b41a:	e06c      	b.n	800b4f6 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b41c:	4b0b      	ldr	r3, [pc, #44]	; (800b44c <HAL_RCC_OscConfig+0x578>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	4a0a      	ldr	r2, [pc, #40]	; (800b44c <HAL_RCC_OscConfig+0x578>)
 800b422:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b426:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800b428:	4b08      	ldr	r3, [pc, #32]	; (800b44c <HAL_RCC_OscConfig+0x578>)
 800b42a:	68db      	ldr	r3, [r3, #12]
 800b42c:	4a07      	ldr	r2, [pc, #28]	; (800b44c <HAL_RCC_OscConfig+0x578>)
 800b42e:	f023 0303 	bic.w	r3, r3, #3
 800b432:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800b434:	4b05      	ldr	r3, [pc, #20]	; (800b44c <HAL_RCC_OscConfig+0x578>)
 800b436:	68db      	ldr	r3, [r3, #12]
 800b438:	4a04      	ldr	r2, [pc, #16]	; (800b44c <HAL_RCC_OscConfig+0x578>)
 800b43a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800b43e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b442:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b444:	f7fc fe8e 	bl	8008164 <HAL_GetTick>
 800b448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b44a:	e00e      	b.n	800b46a <HAL_RCC_OscConfig+0x596>
 800b44c:	40021000 	.word	0x40021000
 800b450:	40007000 	.word	0x40007000
 800b454:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b458:	f7fc fe84 	bl	8008164 <HAL_GetTick>
 800b45c:	4602      	mov	r2, r0
 800b45e:	693b      	ldr	r3, [r7, #16]
 800b460:	1ad3      	subs	r3, r2, r3
 800b462:	2b02      	cmp	r3, #2
 800b464:	d901      	bls.n	800b46a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800b466:	2303      	movs	r3, #3
 800b468:	e046      	b.n	800b4f8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b46a:	4b25      	ldr	r3, [pc, #148]	; (800b500 <HAL_RCC_OscConfig+0x62c>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b472:	2b00      	cmp	r3, #0
 800b474:	d1f0      	bne.n	800b458 <HAL_RCC_OscConfig+0x584>
 800b476:	e03e      	b.n	800b4f6 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	69db      	ldr	r3, [r3, #28]
 800b47c:	2b01      	cmp	r3, #1
 800b47e:	d101      	bne.n	800b484 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800b480:	2301      	movs	r3, #1
 800b482:	e039      	b.n	800b4f8 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800b484:	4b1e      	ldr	r3, [pc, #120]	; (800b500 <HAL_RCC_OscConfig+0x62c>)
 800b486:	68db      	ldr	r3, [r3, #12]
 800b488:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	f003 0203 	and.w	r2, r3, #3
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6a1b      	ldr	r3, [r3, #32]
 800b494:	429a      	cmp	r2, r3
 800b496:	d12c      	bne.n	800b4f2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4a2:	3b01      	subs	r3, #1
 800b4a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b4a6:	429a      	cmp	r2, r3
 800b4a8:	d123      	bne.n	800b4f2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d11b      	bne.n	800b4f2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4c4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b4c6:	429a      	cmp	r2, r3
 800b4c8:	d113      	bne.n	800b4f2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b4ca:	697b      	ldr	r3, [r7, #20]
 800b4cc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4d4:	085b      	lsrs	r3, r3, #1
 800b4d6:	3b01      	subs	r3, #1
 800b4d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	d109      	bne.n	800b4f2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4e8:	085b      	lsrs	r3, r3, #1
 800b4ea:	3b01      	subs	r3, #1
 800b4ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	d001      	beq.n	800b4f6 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	e000      	b.n	800b4f8 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800b4f6:	2300      	movs	r3, #0
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3720      	adds	r7, #32
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}
 800b500:	40021000 	.word	0x40021000

0800b504 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b086      	sub	sp, #24
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800b50e:	2300      	movs	r3, #0
 800b510:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d101      	bne.n	800b51c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b518:	2301      	movs	r3, #1
 800b51a:	e11e      	b.n	800b75a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b51c:	4b91      	ldr	r3, [pc, #580]	; (800b764 <HAL_RCC_ClockConfig+0x260>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f003 030f 	and.w	r3, r3, #15
 800b524:	683a      	ldr	r2, [r7, #0]
 800b526:	429a      	cmp	r2, r3
 800b528:	d910      	bls.n	800b54c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b52a:	4b8e      	ldr	r3, [pc, #568]	; (800b764 <HAL_RCC_ClockConfig+0x260>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f023 020f 	bic.w	r2, r3, #15
 800b532:	498c      	ldr	r1, [pc, #560]	; (800b764 <HAL_RCC_ClockConfig+0x260>)
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	4313      	orrs	r3, r2
 800b538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b53a:	4b8a      	ldr	r3, [pc, #552]	; (800b764 <HAL_RCC_ClockConfig+0x260>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f003 030f 	and.w	r3, r3, #15
 800b542:	683a      	ldr	r2, [r7, #0]
 800b544:	429a      	cmp	r2, r3
 800b546:	d001      	beq.n	800b54c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b548:	2301      	movs	r3, #1
 800b54a:	e106      	b.n	800b75a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f003 0301 	and.w	r3, r3, #1
 800b554:	2b00      	cmp	r3, #0
 800b556:	d073      	beq.n	800b640 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	685b      	ldr	r3, [r3, #4]
 800b55c:	2b03      	cmp	r3, #3
 800b55e:	d129      	bne.n	800b5b4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b560:	4b81      	ldr	r3, [pc, #516]	; (800b768 <HAL_RCC_ClockConfig+0x264>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d101      	bne.n	800b570 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800b56c:	2301      	movs	r3, #1
 800b56e:	e0f4      	b.n	800b75a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800b570:	f000 f972 	bl	800b858 <RCC_GetSysClockFreqFromPLLSource>
 800b574:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	4a7c      	ldr	r2, [pc, #496]	; (800b76c <HAL_RCC_ClockConfig+0x268>)
 800b57a:	4293      	cmp	r3, r2
 800b57c:	d93f      	bls.n	800b5fe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b57e:	4b7a      	ldr	r3, [pc, #488]	; (800b768 <HAL_RCC_ClockConfig+0x264>)
 800b580:	689b      	ldr	r3, [r3, #8]
 800b582:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b586:	2b00      	cmp	r3, #0
 800b588:	d009      	beq.n	800b59e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b592:	2b00      	cmp	r3, #0
 800b594:	d033      	beq.n	800b5fe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d12f      	bne.n	800b5fe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b59e:	4b72      	ldr	r3, [pc, #456]	; (800b768 <HAL_RCC_ClockConfig+0x264>)
 800b5a0:	689b      	ldr	r3, [r3, #8]
 800b5a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b5a6:	4a70      	ldr	r2, [pc, #448]	; (800b768 <HAL_RCC_ClockConfig+0x264>)
 800b5a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5ac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800b5ae:	2380      	movs	r3, #128	; 0x80
 800b5b0:	617b      	str	r3, [r7, #20]
 800b5b2:	e024      	b.n	800b5fe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	685b      	ldr	r3, [r3, #4]
 800b5b8:	2b02      	cmp	r3, #2
 800b5ba:	d107      	bne.n	800b5cc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b5bc:	4b6a      	ldr	r3, [pc, #424]	; (800b768 <HAL_RCC_ClockConfig+0x264>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d109      	bne.n	800b5dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	e0c6      	b.n	800b75a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b5cc:	4b66      	ldr	r3, [pc, #408]	; (800b768 <HAL_RCC_ClockConfig+0x264>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d101      	bne.n	800b5dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b5d8:	2301      	movs	r3, #1
 800b5da:	e0be      	b.n	800b75a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800b5dc:	f000 f8ce 	bl	800b77c <HAL_RCC_GetSysClockFreq>
 800b5e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	4a61      	ldr	r2, [pc, #388]	; (800b76c <HAL_RCC_ClockConfig+0x268>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d909      	bls.n	800b5fe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b5ea:	4b5f      	ldr	r3, [pc, #380]	; (800b768 <HAL_RCC_ClockConfig+0x264>)
 800b5ec:	689b      	ldr	r3, [r3, #8]
 800b5ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b5f2:	4a5d      	ldr	r2, [pc, #372]	; (800b768 <HAL_RCC_ClockConfig+0x264>)
 800b5f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5f8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800b5fa:	2380      	movs	r3, #128	; 0x80
 800b5fc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b5fe:	4b5a      	ldr	r3, [pc, #360]	; (800b768 <HAL_RCC_ClockConfig+0x264>)
 800b600:	689b      	ldr	r3, [r3, #8]
 800b602:	f023 0203 	bic.w	r2, r3, #3
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	685b      	ldr	r3, [r3, #4]
 800b60a:	4957      	ldr	r1, [pc, #348]	; (800b768 <HAL_RCC_ClockConfig+0x264>)
 800b60c:	4313      	orrs	r3, r2
 800b60e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b610:	f7fc fda8 	bl	8008164 <HAL_GetTick>
 800b614:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b616:	e00a      	b.n	800b62e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b618:	f7fc fda4 	bl	8008164 <HAL_GetTick>
 800b61c:	4602      	mov	r2, r0
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	1ad3      	subs	r3, r2, r3
 800b622:	f241 3288 	movw	r2, #5000	; 0x1388
 800b626:	4293      	cmp	r3, r2
 800b628:	d901      	bls.n	800b62e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800b62a:	2303      	movs	r3, #3
 800b62c:	e095      	b.n	800b75a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b62e:	4b4e      	ldr	r3, [pc, #312]	; (800b768 <HAL_RCC_ClockConfig+0x264>)
 800b630:	689b      	ldr	r3, [r3, #8]
 800b632:	f003 020c 	and.w	r2, r3, #12
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	685b      	ldr	r3, [r3, #4]
 800b63a:	009b      	lsls	r3, r3, #2
 800b63c:	429a      	cmp	r2, r3
 800b63e:	d1eb      	bne.n	800b618 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f003 0302 	and.w	r3, r3, #2
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d023      	beq.n	800b694 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f003 0304 	and.w	r3, r3, #4
 800b654:	2b00      	cmp	r3, #0
 800b656:	d005      	beq.n	800b664 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b658:	4b43      	ldr	r3, [pc, #268]	; (800b768 <HAL_RCC_ClockConfig+0x264>)
 800b65a:	689b      	ldr	r3, [r3, #8]
 800b65c:	4a42      	ldr	r2, [pc, #264]	; (800b768 <HAL_RCC_ClockConfig+0x264>)
 800b65e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b662:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	f003 0308 	and.w	r3, r3, #8
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d007      	beq.n	800b680 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800b670:	4b3d      	ldr	r3, [pc, #244]	; (800b768 <HAL_RCC_ClockConfig+0x264>)
 800b672:	689b      	ldr	r3, [r3, #8]
 800b674:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b678:	4a3b      	ldr	r2, [pc, #236]	; (800b768 <HAL_RCC_ClockConfig+0x264>)
 800b67a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b67e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b680:	4b39      	ldr	r3, [pc, #228]	; (800b768 <HAL_RCC_ClockConfig+0x264>)
 800b682:	689b      	ldr	r3, [r3, #8]
 800b684:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	689b      	ldr	r3, [r3, #8]
 800b68c:	4936      	ldr	r1, [pc, #216]	; (800b768 <HAL_RCC_ClockConfig+0x264>)
 800b68e:	4313      	orrs	r3, r2
 800b690:	608b      	str	r3, [r1, #8]
 800b692:	e008      	b.n	800b6a6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	2b80      	cmp	r3, #128	; 0x80
 800b698:	d105      	bne.n	800b6a6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800b69a:	4b33      	ldr	r3, [pc, #204]	; (800b768 <HAL_RCC_ClockConfig+0x264>)
 800b69c:	689b      	ldr	r3, [r3, #8]
 800b69e:	4a32      	ldr	r2, [pc, #200]	; (800b768 <HAL_RCC_ClockConfig+0x264>)
 800b6a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b6a4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b6a6:	4b2f      	ldr	r3, [pc, #188]	; (800b764 <HAL_RCC_ClockConfig+0x260>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	f003 030f 	and.w	r3, r3, #15
 800b6ae:	683a      	ldr	r2, [r7, #0]
 800b6b0:	429a      	cmp	r2, r3
 800b6b2:	d21d      	bcs.n	800b6f0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b6b4:	4b2b      	ldr	r3, [pc, #172]	; (800b764 <HAL_RCC_ClockConfig+0x260>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f023 020f 	bic.w	r2, r3, #15
 800b6bc:	4929      	ldr	r1, [pc, #164]	; (800b764 <HAL_RCC_ClockConfig+0x260>)
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	4313      	orrs	r3, r2
 800b6c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b6c4:	f7fc fd4e 	bl	8008164 <HAL_GetTick>
 800b6c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b6ca:	e00a      	b.n	800b6e2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b6cc:	f7fc fd4a 	bl	8008164 <HAL_GetTick>
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	1ad3      	subs	r3, r2, r3
 800b6d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d901      	bls.n	800b6e2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800b6de:	2303      	movs	r3, #3
 800b6e0:	e03b      	b.n	800b75a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b6e2:	4b20      	ldr	r3, [pc, #128]	; (800b764 <HAL_RCC_ClockConfig+0x260>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	f003 030f 	and.w	r3, r3, #15
 800b6ea:	683a      	ldr	r2, [r7, #0]
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d1ed      	bne.n	800b6cc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f003 0304 	and.w	r3, r3, #4
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d008      	beq.n	800b70e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b6fc:	4b1a      	ldr	r3, [pc, #104]	; (800b768 <HAL_RCC_ClockConfig+0x264>)
 800b6fe:	689b      	ldr	r3, [r3, #8]
 800b700:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	68db      	ldr	r3, [r3, #12]
 800b708:	4917      	ldr	r1, [pc, #92]	; (800b768 <HAL_RCC_ClockConfig+0x264>)
 800b70a:	4313      	orrs	r3, r2
 800b70c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f003 0308 	and.w	r3, r3, #8
 800b716:	2b00      	cmp	r3, #0
 800b718:	d009      	beq.n	800b72e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b71a:	4b13      	ldr	r3, [pc, #76]	; (800b768 <HAL_RCC_ClockConfig+0x264>)
 800b71c:	689b      	ldr	r3, [r3, #8]
 800b71e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	691b      	ldr	r3, [r3, #16]
 800b726:	00db      	lsls	r3, r3, #3
 800b728:	490f      	ldr	r1, [pc, #60]	; (800b768 <HAL_RCC_ClockConfig+0x264>)
 800b72a:	4313      	orrs	r3, r2
 800b72c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b72e:	f000 f825 	bl	800b77c <HAL_RCC_GetSysClockFreq>
 800b732:	4601      	mov	r1, r0
 800b734:	4b0c      	ldr	r3, [pc, #48]	; (800b768 <HAL_RCC_ClockConfig+0x264>)
 800b736:	689b      	ldr	r3, [r3, #8]
 800b738:	091b      	lsrs	r3, r3, #4
 800b73a:	f003 030f 	and.w	r3, r3, #15
 800b73e:	4a0c      	ldr	r2, [pc, #48]	; (800b770 <HAL_RCC_ClockConfig+0x26c>)
 800b740:	5cd3      	ldrb	r3, [r2, r3]
 800b742:	f003 031f 	and.w	r3, r3, #31
 800b746:	fa21 f303 	lsr.w	r3, r1, r3
 800b74a:	4a0a      	ldr	r2, [pc, #40]	; (800b774 <HAL_RCC_ClockConfig+0x270>)
 800b74c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800b74e:	4b0a      	ldr	r3, [pc, #40]	; (800b778 <HAL_RCC_ClockConfig+0x274>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	4618      	mov	r0, r3
 800b754:	f7fc fcba 	bl	80080cc <HAL_InitTick>
 800b758:	4603      	mov	r3, r0
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	3718      	adds	r7, #24
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}
 800b762:	bf00      	nop
 800b764:	40022000 	.word	0x40022000
 800b768:	40021000 	.word	0x40021000
 800b76c:	04c4b400 	.word	0x04c4b400
 800b770:	08013dbc 	.word	0x08013dbc
 800b774:	20000ca8 	.word	0x20000ca8
 800b778:	20000cac 	.word	0x20000cac

0800b77c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b087      	sub	sp, #28
 800b780:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800b782:	4b2c      	ldr	r3, [pc, #176]	; (800b834 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b784:	689b      	ldr	r3, [r3, #8]
 800b786:	f003 030c 	and.w	r3, r3, #12
 800b78a:	2b04      	cmp	r3, #4
 800b78c:	d102      	bne.n	800b794 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b78e:	4b2a      	ldr	r3, [pc, #168]	; (800b838 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b790:	613b      	str	r3, [r7, #16]
 800b792:	e047      	b.n	800b824 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800b794:	4b27      	ldr	r3, [pc, #156]	; (800b834 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b796:	689b      	ldr	r3, [r3, #8]
 800b798:	f003 030c 	and.w	r3, r3, #12
 800b79c:	2b08      	cmp	r3, #8
 800b79e:	d102      	bne.n	800b7a6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b7a0:	4b26      	ldr	r3, [pc, #152]	; (800b83c <HAL_RCC_GetSysClockFreq+0xc0>)
 800b7a2:	613b      	str	r3, [r7, #16]
 800b7a4:	e03e      	b.n	800b824 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800b7a6:	4b23      	ldr	r3, [pc, #140]	; (800b834 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b7a8:	689b      	ldr	r3, [r3, #8]
 800b7aa:	f003 030c 	and.w	r3, r3, #12
 800b7ae:	2b0c      	cmp	r3, #12
 800b7b0:	d136      	bne.n	800b820 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b7b2:	4b20      	ldr	r3, [pc, #128]	; (800b834 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b7b4:	68db      	ldr	r3, [r3, #12]
 800b7b6:	f003 0303 	and.w	r3, r3, #3
 800b7ba:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b7bc:	4b1d      	ldr	r3, [pc, #116]	; (800b834 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b7be:	68db      	ldr	r3, [r3, #12]
 800b7c0:	091b      	lsrs	r3, r3, #4
 800b7c2:	f003 030f 	and.w	r3, r3, #15
 800b7c6:	3301      	adds	r3, #1
 800b7c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	2b03      	cmp	r3, #3
 800b7ce:	d10c      	bne.n	800b7ea <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b7d0:	4a1a      	ldr	r2, [pc, #104]	; (800b83c <HAL_RCC_GetSysClockFreq+0xc0>)
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7d8:	4a16      	ldr	r2, [pc, #88]	; (800b834 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b7da:	68d2      	ldr	r2, [r2, #12]
 800b7dc:	0a12      	lsrs	r2, r2, #8
 800b7de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b7e2:	fb02 f303 	mul.w	r3, r2, r3
 800b7e6:	617b      	str	r3, [r7, #20]
      break;
 800b7e8:	e00c      	b.n	800b804 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b7ea:	4a13      	ldr	r2, [pc, #76]	; (800b838 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7f2:	4a10      	ldr	r2, [pc, #64]	; (800b834 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b7f4:	68d2      	ldr	r2, [r2, #12]
 800b7f6:	0a12      	lsrs	r2, r2, #8
 800b7f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b7fc:	fb02 f303 	mul.w	r3, r2, r3
 800b800:	617b      	str	r3, [r7, #20]
      break;
 800b802:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b804:	4b0b      	ldr	r3, [pc, #44]	; (800b834 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b806:	68db      	ldr	r3, [r3, #12]
 800b808:	0e5b      	lsrs	r3, r3, #25
 800b80a:	f003 0303 	and.w	r3, r3, #3
 800b80e:	3301      	adds	r3, #1
 800b810:	005b      	lsls	r3, r3, #1
 800b812:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800b814:	697a      	ldr	r2, [r7, #20]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	fbb2 f3f3 	udiv	r3, r2, r3
 800b81c:	613b      	str	r3, [r7, #16]
 800b81e:	e001      	b.n	800b824 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800b820:	2300      	movs	r3, #0
 800b822:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800b824:	693b      	ldr	r3, [r7, #16]
}
 800b826:	4618      	mov	r0, r3
 800b828:	371c      	adds	r7, #28
 800b82a:	46bd      	mov	sp, r7
 800b82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b830:	4770      	bx	lr
 800b832:	bf00      	nop
 800b834:	40021000 	.word	0x40021000
 800b838:	00f42400 	.word	0x00f42400
 800b83c:	007a1200 	.word	0x007a1200

0800b840 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b840:	b480      	push	{r7}
 800b842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b844:	4b03      	ldr	r3, [pc, #12]	; (800b854 <HAL_RCC_GetHCLKFreq+0x14>)
 800b846:	681b      	ldr	r3, [r3, #0]
}
 800b848:	4618      	mov	r0, r3
 800b84a:	46bd      	mov	sp, r7
 800b84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b850:	4770      	bx	lr
 800b852:	bf00      	nop
 800b854:	20000ca8 	.word	0x20000ca8

0800b858 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800b858:	b480      	push	{r7}
 800b85a:	b087      	sub	sp, #28
 800b85c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b85e:	4b1e      	ldr	r3, [pc, #120]	; (800b8d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b860:	68db      	ldr	r3, [r3, #12]
 800b862:	f003 0303 	and.w	r3, r3, #3
 800b866:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b868:	4b1b      	ldr	r3, [pc, #108]	; (800b8d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b86a:	68db      	ldr	r3, [r3, #12]
 800b86c:	091b      	lsrs	r3, r3, #4
 800b86e:	f003 030f 	and.w	r3, r3, #15
 800b872:	3301      	adds	r3, #1
 800b874:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	2b03      	cmp	r3, #3
 800b87a:	d10c      	bne.n	800b896 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b87c:	4a17      	ldr	r2, [pc, #92]	; (800b8dc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	fbb2 f3f3 	udiv	r3, r2, r3
 800b884:	4a14      	ldr	r2, [pc, #80]	; (800b8d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b886:	68d2      	ldr	r2, [r2, #12]
 800b888:	0a12      	lsrs	r2, r2, #8
 800b88a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b88e:	fb02 f303 	mul.w	r3, r2, r3
 800b892:	617b      	str	r3, [r7, #20]
    break;
 800b894:	e00c      	b.n	800b8b0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b896:	4a12      	ldr	r2, [pc, #72]	; (800b8e0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b89e:	4a0e      	ldr	r2, [pc, #56]	; (800b8d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b8a0:	68d2      	ldr	r2, [r2, #12]
 800b8a2:	0a12      	lsrs	r2, r2, #8
 800b8a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b8a8:	fb02 f303 	mul.w	r3, r2, r3
 800b8ac:	617b      	str	r3, [r7, #20]
    break;
 800b8ae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b8b0:	4b09      	ldr	r3, [pc, #36]	; (800b8d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b8b2:	68db      	ldr	r3, [r3, #12]
 800b8b4:	0e5b      	lsrs	r3, r3, #25
 800b8b6:	f003 0303 	and.w	r3, r3, #3
 800b8ba:	3301      	adds	r3, #1
 800b8bc:	005b      	lsls	r3, r3, #1
 800b8be:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800b8c0:	697a      	ldr	r2, [r7, #20]
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8c8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800b8ca:	687b      	ldr	r3, [r7, #4]
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	371c      	adds	r7, #28
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d6:	4770      	bx	lr
 800b8d8:	40021000 	.word	0x40021000
 800b8dc:	007a1200 	.word	0x007a1200
 800b8e0:	00f42400 	.word	0x00f42400

0800b8e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b086      	sub	sp, #24
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	f000 8098 	beq.w	800ba32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b902:	2300      	movs	r3, #0
 800b904:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b906:	4b43      	ldr	r3, [pc, #268]	; (800ba14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b90a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d10d      	bne.n	800b92e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b912:	4b40      	ldr	r3, [pc, #256]	; (800ba14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b916:	4a3f      	ldr	r2, [pc, #252]	; (800ba14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b91c:	6593      	str	r3, [r2, #88]	; 0x58
 800b91e:	4b3d      	ldr	r3, [pc, #244]	; (800ba14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b926:	60bb      	str	r3, [r7, #8]
 800b928:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b92a:	2301      	movs	r3, #1
 800b92c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b92e:	4b3a      	ldr	r3, [pc, #232]	; (800ba18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	4a39      	ldr	r2, [pc, #228]	; (800ba18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b938:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b93a:	f7fc fc13 	bl	8008164 <HAL_GetTick>
 800b93e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b940:	e009      	b.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b942:	f7fc fc0f 	bl	8008164 <HAL_GetTick>
 800b946:	4602      	mov	r2, r0
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	1ad3      	subs	r3, r2, r3
 800b94c:	2b02      	cmp	r3, #2
 800b94e:	d902      	bls.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800b950:	2303      	movs	r3, #3
 800b952:	74fb      	strb	r3, [r7, #19]
        break;
 800b954:	e005      	b.n	800b962 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b956:	4b30      	ldr	r3, [pc, #192]	; (800ba18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d0ef      	beq.n	800b942 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800b962:	7cfb      	ldrb	r3, [r7, #19]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d159      	bne.n	800ba1c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b968:	4b2a      	ldr	r3, [pc, #168]	; (800ba14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b96a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b96e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b972:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b974:	697b      	ldr	r3, [r7, #20]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d01e      	beq.n	800b9b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b97e:	697a      	ldr	r2, [r7, #20]
 800b980:	429a      	cmp	r2, r3
 800b982:	d019      	beq.n	800b9b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b984:	4b23      	ldr	r3, [pc, #140]	; (800ba14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b98a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b98e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b990:	4b20      	ldr	r3, [pc, #128]	; (800ba14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b996:	4a1f      	ldr	r2, [pc, #124]	; (800ba14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b99c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b9a0:	4b1c      	ldr	r3, [pc, #112]	; (800ba14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b9a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9a6:	4a1b      	ldr	r2, [pc, #108]	; (800ba14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b9a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b9ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b9b0:	4a18      	ldr	r2, [pc, #96]	; (800ba14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b9b8:	697b      	ldr	r3, [r7, #20]
 800b9ba:	f003 0301 	and.w	r3, r3, #1
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d016      	beq.n	800b9f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9c2:	f7fc fbcf 	bl	8008164 <HAL_GetTick>
 800b9c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b9c8:	e00b      	b.n	800b9e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b9ca:	f7fc fbcb 	bl	8008164 <HAL_GetTick>
 800b9ce:	4602      	mov	r2, r0
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	1ad3      	subs	r3, r2, r3
 800b9d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9d8:	4293      	cmp	r3, r2
 800b9da:	d902      	bls.n	800b9e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800b9dc:	2303      	movs	r3, #3
 800b9de:	74fb      	strb	r3, [r7, #19]
            break;
 800b9e0:	e006      	b.n	800b9f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b9e2:	4b0c      	ldr	r3, [pc, #48]	; (800ba14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b9e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9e8:	f003 0302 	and.w	r3, r3, #2
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d0ec      	beq.n	800b9ca <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800b9f0:	7cfb      	ldrb	r3, [r7, #19]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d10b      	bne.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b9f6:	4b07      	ldr	r3, [pc, #28]	; (800ba14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b9f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba04:	4903      	ldr	r1, [pc, #12]	; (800ba14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ba06:	4313      	orrs	r3, r2
 800ba08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800ba0c:	e008      	b.n	800ba20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ba0e:	7cfb      	ldrb	r3, [r7, #19]
 800ba10:	74bb      	strb	r3, [r7, #18]
 800ba12:	e005      	b.n	800ba20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800ba14:	40021000 	.word	0x40021000
 800ba18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba1c:	7cfb      	ldrb	r3, [r7, #19]
 800ba1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ba20:	7c7b      	ldrb	r3, [r7, #17]
 800ba22:	2b01      	cmp	r3, #1
 800ba24:	d105      	bne.n	800ba32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ba26:	4baf      	ldr	r3, [pc, #700]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ba28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba2a:	4aae      	ldr	r2, [pc, #696]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ba2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ba30:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	f003 0301 	and.w	r3, r3, #1
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d00a      	beq.n	800ba54 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ba3e:	4ba9      	ldr	r3, [pc, #676]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ba40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba44:	f023 0203 	bic.w	r2, r3, #3
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	685b      	ldr	r3, [r3, #4]
 800ba4c:	49a5      	ldr	r1, [pc, #660]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ba4e:	4313      	orrs	r3, r2
 800ba50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f003 0302 	and.w	r3, r3, #2
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d00a      	beq.n	800ba76 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ba60:	4ba0      	ldr	r3, [pc, #640]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ba62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba66:	f023 020c 	bic.w	r2, r3, #12
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	689b      	ldr	r3, [r3, #8]
 800ba6e:	499d      	ldr	r1, [pc, #628]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ba70:	4313      	orrs	r3, r2
 800ba72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f003 0304 	and.w	r3, r3, #4
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d00a      	beq.n	800ba98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ba82:	4b98      	ldr	r3, [pc, #608]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ba84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba88:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	68db      	ldr	r3, [r3, #12]
 800ba90:	4994      	ldr	r1, [pc, #592]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ba92:	4313      	orrs	r3, r2
 800ba94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	f003 0308 	and.w	r3, r3, #8
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d00a      	beq.n	800baba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800baa4:	4b8f      	ldr	r3, [pc, #572]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800baa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800baaa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	691b      	ldr	r3, [r3, #16]
 800bab2:	498c      	ldr	r1, [pc, #560]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bab4:	4313      	orrs	r3, r2
 800bab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f003 0310 	and.w	r3, r3, #16
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d00a      	beq.n	800badc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800bac6:	4b87      	ldr	r3, [pc, #540]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bacc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	695b      	ldr	r3, [r3, #20]
 800bad4:	4983      	ldr	r1, [pc, #524]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bad6:	4313      	orrs	r3, r2
 800bad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	f003 0320 	and.w	r3, r3, #32
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d00a      	beq.n	800bafe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bae8:	4b7e      	ldr	r3, [pc, #504]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800baea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800baee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	699b      	ldr	r3, [r3, #24]
 800baf6:	497b      	ldr	r1, [pc, #492]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800baf8:	4313      	orrs	r3, r2
 800bafa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d00a      	beq.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bb0a:	4b76      	ldr	r3, [pc, #472]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bb0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb10:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	69db      	ldr	r3, [r3, #28]
 800bb18:	4972      	ldr	r1, [pc, #456]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bb1a:	4313      	orrs	r3, r2
 800bb1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d00a      	beq.n	800bb42 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bb2c:	4b6d      	ldr	r3, [pc, #436]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bb2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb32:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6a1b      	ldr	r3, [r3, #32]
 800bb3a:	496a      	ldr	r1, [pc, #424]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bb3c:	4313      	orrs	r3, r2
 800bb3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d00a      	beq.n	800bb64 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bb4e:	4b65      	ldr	r3, [pc, #404]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bb50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb5c:	4961      	ldr	r1, [pc, #388]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bb5e:	4313      	orrs	r3, r2
 800bb60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d00a      	beq.n	800bb86 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bb70:	4b5c      	ldr	r3, [pc, #368]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bb72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bb76:	f023 0203 	bic.w	r2, r3, #3
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb7e:	4959      	ldr	r1, [pc, #356]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bb80:	4313      	orrs	r3, r2
 800bb82:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d00a      	beq.n	800bba8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bb92:	4b54      	ldr	r3, [pc, #336]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bb94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bba0:	4950      	ldr	r1, [pc, #320]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bba2:	4313      	orrs	r3, r2
 800bba4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d015      	beq.n	800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bbb4:	4b4b      	ldr	r3, [pc, #300]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bbb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbc2:	4948      	ldr	r1, [pc, #288]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bbc4:	4313      	orrs	r3, r2
 800bbc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bbd2:	d105      	bne.n	800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bbd4:	4b43      	ldr	r3, [pc, #268]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bbd6:	68db      	ldr	r3, [r3, #12]
 800bbd8:	4a42      	ldr	r2, [pc, #264]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bbda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bbde:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d015      	beq.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800bbec:	4b3d      	ldr	r3, [pc, #244]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bbee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbf2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbfa:	493a      	ldr	r1, [pc, #232]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bbfc:	4313      	orrs	r3, r2
 800bbfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc0a:	d105      	bne.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bc0c:	4b35      	ldr	r3, [pc, #212]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc0e:	68db      	ldr	r3, [r3, #12]
 800bc10:	4a34      	ldr	r2, [pc, #208]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc16:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d015      	beq.n	800bc50 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bc24:	4b2f      	ldr	r3, [pc, #188]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc2a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc32:	492c      	ldr	r1, [pc, #176]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc34:	4313      	orrs	r3, r2
 800bc36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bc42:	d105      	bne.n	800bc50 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bc44:	4b27      	ldr	r3, [pc, #156]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc46:	68db      	ldr	r3, [r3, #12]
 800bc48:	4a26      	ldr	r2, [pc, #152]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc4e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d015      	beq.n	800bc88 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bc5c:	4b21      	ldr	r3, [pc, #132]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc6a:	491e      	ldr	r1, [pc, #120]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc6c:	4313      	orrs	r3, r2
 800bc6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc7a:	d105      	bne.n	800bc88 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bc7c:	4b19      	ldr	r3, [pc, #100]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc7e:	68db      	ldr	r3, [r3, #12]
 800bc80:	4a18      	ldr	r2, [pc, #96]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc86:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d015      	beq.n	800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bc94:	4b13      	ldr	r3, [pc, #76]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bca2:	4910      	ldr	r1, [pc, #64]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bca4:	4313      	orrs	r3, r2
 800bca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bcb2:	d105      	bne.n	800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bcb4:	4b0b      	ldr	r3, [pc, #44]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bcb6:	68db      	ldr	r3, [r3, #12]
 800bcb8:	4a0a      	ldr	r2, [pc, #40]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bcba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bcbe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d018      	beq.n	800bcfe <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800bccc:	4b05      	ldr	r3, [pc, #20]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bcce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcd2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcda:	4902      	ldr	r1, [pc, #8]	; (800bce4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bcdc:	4313      	orrs	r3, r2
 800bcde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800bce2:	e001      	b.n	800bce8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800bce4:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bcf0:	d105      	bne.n	800bcfe <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800bcf2:	4b21      	ldr	r3, [pc, #132]	; (800bd78 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bcf4:	68db      	ldr	r3, [r3, #12]
 800bcf6:	4a20      	ldr	r2, [pc, #128]	; (800bd78 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bcf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bcfc:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d015      	beq.n	800bd36 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800bd0a:	4b1b      	ldr	r3, [pc, #108]	; (800bd78 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bd0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd10:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd18:	4917      	ldr	r1, [pc, #92]	; (800bd78 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bd1a:	4313      	orrs	r3, r2
 800bd1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd28:	d105      	bne.n	800bd36 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800bd2a:	4b13      	ldr	r3, [pc, #76]	; (800bd78 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bd2c:	68db      	ldr	r3, [r3, #12]
 800bd2e:	4a12      	ldr	r2, [pc, #72]	; (800bd78 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bd30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bd34:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d015      	beq.n	800bd6e <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800bd42:	4b0d      	ldr	r3, [pc, #52]	; (800bd78 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bd44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bd48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd50:	4909      	ldr	r1, [pc, #36]	; (800bd78 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bd52:	4313      	orrs	r3, r2
 800bd54:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bd60:	d105      	bne.n	800bd6e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bd62:	4b05      	ldr	r3, [pc, #20]	; (800bd78 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bd64:	68db      	ldr	r3, [r3, #12]
 800bd66:	4a04      	ldr	r2, [pc, #16]	; (800bd78 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bd68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd6c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800bd6e:	7cbb      	ldrb	r3, [r7, #18]
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3718      	adds	r7, #24
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}
 800bd78:	40021000 	.word	0x40021000

0800bd7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b084      	sub	sp, #16
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d101      	bne.n	800bd8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	e084      	b.n	800be98 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2200      	movs	r2, #0
 800bd92:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bd9a:	b2db      	uxtb	r3, r3
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d106      	bne.n	800bdae <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2200      	movs	r2, #0
 800bda4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f7fb fc23 	bl	80075f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2202      	movs	r2, #2
 800bdb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	681a      	ldr	r2, [r3, #0]
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bdc4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	68db      	ldr	r3, [r3, #12]
 800bdca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bdce:	d902      	bls.n	800bdd6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	60fb      	str	r3, [r7, #12]
 800bdd4:	e002      	b.n	800bddc <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800bdd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bdda:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	68db      	ldr	r3, [r3, #12]
 800bde0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800bde4:	d007      	beq.n	800bdf6 <HAL_SPI_Init+0x7a>
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	68db      	ldr	r3, [r3, #12]
 800bdea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bdee:	d002      	beq.n	800bdf6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d10b      	bne.n	800be16 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	68db      	ldr	r3, [r3, #12]
 800be02:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800be06:	d903      	bls.n	800be10 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2202      	movs	r2, #2
 800be0c:	631a      	str	r2, [r3, #48]	; 0x30
 800be0e:	e002      	b.n	800be16 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2201      	movs	r2, #1
 800be14:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	685a      	ldr	r2, [r3, #4]
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	689b      	ldr	r3, [r3, #8]
 800be1e:	431a      	orrs	r2, r3
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	691b      	ldr	r3, [r3, #16]
 800be24:	431a      	orrs	r2, r3
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	695b      	ldr	r3, [r3, #20]
 800be2a:	431a      	orrs	r2, r3
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	699b      	ldr	r3, [r3, #24]
 800be30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800be34:	431a      	orrs	r2, r3
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	69db      	ldr	r3, [r3, #28]
 800be3a:	431a      	orrs	r2, r3
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6a1b      	ldr	r3, [r3, #32]
 800be40:	ea42 0103 	orr.w	r1, r2, r3
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	430a      	orrs	r2, r1
 800be4e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	699b      	ldr	r3, [r3, #24]
 800be54:	0c1b      	lsrs	r3, r3, #16
 800be56:	f003 0204 	and.w	r2, r3, #4
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be5e:	431a      	orrs	r2, r3
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be64:	431a      	orrs	r2, r3
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	68db      	ldr	r3, [r3, #12]
 800be6a:	ea42 0103 	orr.w	r1, r2, r3
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	68fa      	ldr	r2, [r7, #12]
 800be74:	430a      	orrs	r2, r1
 800be76:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	69da      	ldr	r2, [r3, #28]
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800be86:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2200      	movs	r2, #0
 800be8c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2201      	movs	r2, #1
 800be92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800be96:	2300      	movs	r3, #0
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3710      	adds	r7, #16
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}

0800bea0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b082      	sub	sp, #8
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d101      	bne.n	800beb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800beae:	2301      	movs	r3, #1
 800beb0:	e049      	b.n	800bf46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800beb8:	b2db      	uxtb	r3, r3
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d106      	bne.n	800becc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2200      	movs	r2, #0
 800bec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f7fc f802 	bl	8007ed0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2202      	movs	r2, #2
 800bed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681a      	ldr	r2, [r3, #0]
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	3304      	adds	r3, #4
 800bedc:	4619      	mov	r1, r3
 800bede:	4610      	mov	r0, r2
 800bee0:	f000 fe5c 	bl	800cb9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2201      	movs	r2, #1
 800bee8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2201      	movs	r2, #1
 800bef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2201      	movs	r2, #1
 800bef8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2201      	movs	r2, #1
 800bf00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2201      	movs	r2, #1
 800bf08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2201      	movs	r2, #1
 800bf10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2201      	movs	r2, #1
 800bf18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2201      	movs	r2, #1
 800bf20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2201      	movs	r2, #1
 800bf28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2201      	movs	r2, #1
 800bf30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2201      	movs	r2, #1
 800bf38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2201      	movs	r2, #1
 800bf40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bf44:	2300      	movs	r3, #0
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	3708      	adds	r7, #8
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}
	...

0800bf50 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800bf50:	b480      	push	{r7}
 800bf52:	b085      	sub	sp, #20
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf5e:	b2db      	uxtb	r3, r3
 800bf60:	2b01      	cmp	r3, #1
 800bf62:	d001      	beq.n	800bf68 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800bf64:	2301      	movs	r3, #1
 800bf66:	e019      	b.n	800bf9c <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2202      	movs	r2, #2
 800bf6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	689a      	ldr	r2, [r3, #8]
 800bf76:	4b0c      	ldr	r3, [pc, #48]	; (800bfa8 <HAL_TIM_Base_Start+0x58>)
 800bf78:	4013      	ands	r3, r2
 800bf7a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	2b06      	cmp	r3, #6
 800bf80:	d00b      	beq.n	800bf9a <HAL_TIM_Base_Start+0x4a>
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf88:	d007      	beq.n	800bf9a <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	681a      	ldr	r2, [r3, #0]
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	f042 0201 	orr.w	r2, r2, #1
 800bf98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bf9a:	2300      	movs	r3, #0
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3714      	adds	r7, #20
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa6:	4770      	bx	lr
 800bfa8:	00010007 	.word	0x00010007

0800bfac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bfac:	b480      	push	{r7}
 800bfae:	b085      	sub	sp, #20
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bfba:	b2db      	uxtb	r3, r3
 800bfbc:	2b01      	cmp	r3, #1
 800bfbe:	d001      	beq.n	800bfc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	e021      	b.n	800c008 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2202      	movs	r2, #2
 800bfc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	68da      	ldr	r2, [r3, #12]
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f042 0201 	orr.w	r2, r2, #1
 800bfda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	689a      	ldr	r2, [r3, #8]
 800bfe2:	4b0c      	ldr	r3, [pc, #48]	; (800c014 <HAL_TIM_Base_Start_IT+0x68>)
 800bfe4:	4013      	ands	r3, r2
 800bfe6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	2b06      	cmp	r3, #6
 800bfec:	d00b      	beq.n	800c006 <HAL_TIM_Base_Start_IT+0x5a>
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bff4:	d007      	beq.n	800c006 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	681a      	ldr	r2, [r3, #0]
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	f042 0201 	orr.w	r2, r2, #1
 800c004:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c006:	2300      	movs	r3, #0
}
 800c008:	4618      	mov	r0, r3
 800c00a:	3714      	adds	r7, #20
 800c00c:	46bd      	mov	sp, r7
 800c00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c012:	4770      	bx	lr
 800c014:	00010007 	.word	0x00010007

0800c018 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800c018:	b480      	push	{r7}
 800c01a:	b083      	sub	sp, #12
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	68da      	ldr	r2, [r3, #12]
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f022 0201 	bic.w	r2, r2, #1
 800c02e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	6a1a      	ldr	r2, [r3, #32]
 800c036:	f241 1311 	movw	r3, #4369	; 0x1111
 800c03a:	4013      	ands	r3, r2
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d10f      	bne.n	800c060 <HAL_TIM_Base_Stop_IT+0x48>
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	6a1a      	ldr	r2, [r3, #32]
 800c046:	f244 4344 	movw	r3, #17476	; 0x4444
 800c04a:	4013      	ands	r3, r2
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d107      	bne.n	800c060 <HAL_TIM_Base_Stop_IT+0x48>
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	681a      	ldr	r2, [r3, #0]
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f022 0201 	bic.w	r2, r2, #1
 800c05e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2201      	movs	r2, #1
 800c064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c068:	2300      	movs	r3, #0
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	370c      	adds	r7, #12
 800c06e:	46bd      	mov	sp, r7
 800c070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c074:	4770      	bx	lr

0800c076 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c076:	b580      	push	{r7, lr}
 800c078:	b082      	sub	sp, #8
 800c07a:	af00      	add	r7, sp, #0
 800c07c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d101      	bne.n	800c088 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c084:	2301      	movs	r3, #1
 800c086:	e049      	b.n	800c11c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c08e:	b2db      	uxtb	r3, r3
 800c090:	2b00      	cmp	r3, #0
 800c092:	d106      	bne.n	800c0a2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2200      	movs	r2, #0
 800c098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f000 f841 	bl	800c124 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2202      	movs	r2, #2
 800c0a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681a      	ldr	r2, [r3, #0]
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	3304      	adds	r3, #4
 800c0b2:	4619      	mov	r1, r3
 800c0b4:	4610      	mov	r0, r2
 800c0b6:	f000 fd71 	bl	800cb9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2201      	movs	r2, #1
 800c0be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2201      	movs	r2, #1
 800c0c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2201      	movs	r2, #1
 800c0ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2201      	movs	r2, #1
 800c0d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2201      	movs	r2, #1
 800c0de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2201      	movs	r2, #1
 800c0e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2201      	movs	r2, #1
 800c0ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	2201      	movs	r2, #1
 800c0f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2201      	movs	r2, #1
 800c0fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2201      	movs	r2, #1
 800c106:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2201      	movs	r2, #1
 800c10e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2201      	movs	r2, #1
 800c116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c11a:	2300      	movs	r3, #0
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	3708      	adds	r7, #8
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}

0800c124 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c124:	b480      	push	{r7}
 800c126:	b083      	sub	sp, #12
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c12c:	bf00      	nop
 800c12e:	370c      	adds	r7, #12
 800c130:	46bd      	mov	sp, r7
 800c132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c136:	4770      	bx	lr

0800c138 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b084      	sub	sp, #16
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
 800c140:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d109      	bne.n	800c15c <HAL_TIM_PWM_Start+0x24>
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c14e:	b2db      	uxtb	r3, r3
 800c150:	2b01      	cmp	r3, #1
 800c152:	bf14      	ite	ne
 800c154:	2301      	movne	r3, #1
 800c156:	2300      	moveq	r3, #0
 800c158:	b2db      	uxtb	r3, r3
 800c15a:	e03c      	b.n	800c1d6 <HAL_TIM_PWM_Start+0x9e>
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	2b04      	cmp	r3, #4
 800c160:	d109      	bne.n	800c176 <HAL_TIM_PWM_Start+0x3e>
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c168:	b2db      	uxtb	r3, r3
 800c16a:	2b01      	cmp	r3, #1
 800c16c:	bf14      	ite	ne
 800c16e:	2301      	movne	r3, #1
 800c170:	2300      	moveq	r3, #0
 800c172:	b2db      	uxtb	r3, r3
 800c174:	e02f      	b.n	800c1d6 <HAL_TIM_PWM_Start+0x9e>
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	2b08      	cmp	r3, #8
 800c17a:	d109      	bne.n	800c190 <HAL_TIM_PWM_Start+0x58>
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c182:	b2db      	uxtb	r3, r3
 800c184:	2b01      	cmp	r3, #1
 800c186:	bf14      	ite	ne
 800c188:	2301      	movne	r3, #1
 800c18a:	2300      	moveq	r3, #0
 800c18c:	b2db      	uxtb	r3, r3
 800c18e:	e022      	b.n	800c1d6 <HAL_TIM_PWM_Start+0x9e>
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	2b0c      	cmp	r3, #12
 800c194:	d109      	bne.n	800c1aa <HAL_TIM_PWM_Start+0x72>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c19c:	b2db      	uxtb	r3, r3
 800c19e:	2b01      	cmp	r3, #1
 800c1a0:	bf14      	ite	ne
 800c1a2:	2301      	movne	r3, #1
 800c1a4:	2300      	moveq	r3, #0
 800c1a6:	b2db      	uxtb	r3, r3
 800c1a8:	e015      	b.n	800c1d6 <HAL_TIM_PWM_Start+0x9e>
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	2b10      	cmp	r3, #16
 800c1ae:	d109      	bne.n	800c1c4 <HAL_TIM_PWM_Start+0x8c>
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c1b6:	b2db      	uxtb	r3, r3
 800c1b8:	2b01      	cmp	r3, #1
 800c1ba:	bf14      	ite	ne
 800c1bc:	2301      	movne	r3, #1
 800c1be:	2300      	moveq	r3, #0
 800c1c0:	b2db      	uxtb	r3, r3
 800c1c2:	e008      	b.n	800c1d6 <HAL_TIM_PWM_Start+0x9e>
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c1ca:	b2db      	uxtb	r3, r3
 800c1cc:	2b01      	cmp	r3, #1
 800c1ce:	bf14      	ite	ne
 800c1d0:	2301      	movne	r3, #1
 800c1d2:	2300      	moveq	r3, #0
 800c1d4:	b2db      	uxtb	r3, r3
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d001      	beq.n	800c1de <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c1da:	2301      	movs	r3, #1
 800c1dc:	e073      	b.n	800c2c6 <HAL_TIM_PWM_Start+0x18e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d104      	bne.n	800c1ee <HAL_TIM_PWM_Start+0xb6>
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2202      	movs	r2, #2
 800c1e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c1ec:	e023      	b.n	800c236 <HAL_TIM_PWM_Start+0xfe>
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	2b04      	cmp	r3, #4
 800c1f2:	d104      	bne.n	800c1fe <HAL_TIM_PWM_Start+0xc6>
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2202      	movs	r2, #2
 800c1f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c1fc:	e01b      	b.n	800c236 <HAL_TIM_PWM_Start+0xfe>
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	2b08      	cmp	r3, #8
 800c202:	d104      	bne.n	800c20e <HAL_TIM_PWM_Start+0xd6>
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2202      	movs	r2, #2
 800c208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c20c:	e013      	b.n	800c236 <HAL_TIM_PWM_Start+0xfe>
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	2b0c      	cmp	r3, #12
 800c212:	d104      	bne.n	800c21e <HAL_TIM_PWM_Start+0xe6>
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2202      	movs	r2, #2
 800c218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c21c:	e00b      	b.n	800c236 <HAL_TIM_PWM_Start+0xfe>
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	2b10      	cmp	r3, #16
 800c222:	d104      	bne.n	800c22e <HAL_TIM_PWM_Start+0xf6>
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2202      	movs	r2, #2
 800c228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c22c:	e003      	b.n	800c236 <HAL_TIM_PWM_Start+0xfe>
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2202      	movs	r2, #2
 800c232:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	2201      	movs	r2, #1
 800c23c:	6839      	ldr	r1, [r7, #0]
 800c23e:	4618      	mov	r0, r3
 800c240:	f001 f91a 	bl	800d478 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	4a21      	ldr	r2, [pc, #132]	; (800c2d0 <HAL_TIM_PWM_Start+0x198>)
 800c24a:	4293      	cmp	r3, r2
 800c24c:	d018      	beq.n	800c280 <HAL_TIM_PWM_Start+0x148>
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	4a20      	ldr	r2, [pc, #128]	; (800c2d4 <HAL_TIM_PWM_Start+0x19c>)
 800c254:	4293      	cmp	r3, r2
 800c256:	d013      	beq.n	800c280 <HAL_TIM_PWM_Start+0x148>
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	4a1e      	ldr	r2, [pc, #120]	; (800c2d8 <HAL_TIM_PWM_Start+0x1a0>)
 800c25e:	4293      	cmp	r3, r2
 800c260:	d00e      	beq.n	800c280 <HAL_TIM_PWM_Start+0x148>
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	4a1d      	ldr	r2, [pc, #116]	; (800c2dc <HAL_TIM_PWM_Start+0x1a4>)
 800c268:	4293      	cmp	r3, r2
 800c26a:	d009      	beq.n	800c280 <HAL_TIM_PWM_Start+0x148>
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	4a1b      	ldr	r2, [pc, #108]	; (800c2e0 <HAL_TIM_PWM_Start+0x1a8>)
 800c272:	4293      	cmp	r3, r2
 800c274:	d004      	beq.n	800c280 <HAL_TIM_PWM_Start+0x148>
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	4a1a      	ldr	r2, [pc, #104]	; (800c2e4 <HAL_TIM_PWM_Start+0x1ac>)
 800c27c:	4293      	cmp	r3, r2
 800c27e:	d101      	bne.n	800c284 <HAL_TIM_PWM_Start+0x14c>
 800c280:	2301      	movs	r3, #1
 800c282:	e000      	b.n	800c286 <HAL_TIM_PWM_Start+0x14e>
 800c284:	2300      	movs	r3, #0
 800c286:	2b00      	cmp	r3, #0
 800c288:	d007      	beq.n	800c29a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c298:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	689a      	ldr	r2, [r3, #8]
 800c2a0:	4b11      	ldr	r3, [pc, #68]	; (800c2e8 <HAL_TIM_PWM_Start+0x1b0>)
 800c2a2:	4013      	ands	r3, r2
 800c2a4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	2b06      	cmp	r3, #6
 800c2aa:	d00b      	beq.n	800c2c4 <HAL_TIM_PWM_Start+0x18c>
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2b2:	d007      	beq.n	800c2c4 <HAL_TIM_PWM_Start+0x18c>
  {
    __HAL_TIM_ENABLE(htim);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	681a      	ldr	r2, [r3, #0]
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	f042 0201 	orr.w	r2, r2, #1
 800c2c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c2c4:	2300      	movs	r3, #0
}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	3710      	adds	r7, #16
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}
 800c2ce:	bf00      	nop
 800c2d0:	40012c00 	.word	0x40012c00
 800c2d4:	40013400 	.word	0x40013400
 800c2d8:	40014000 	.word	0x40014000
 800c2dc:	40014400 	.word	0x40014400
 800c2e0:	40014800 	.word	0x40014800
 800c2e4:	40015000 	.word	0x40015000
 800c2e8:	00010007 	.word	0x00010007

0800c2ec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b086      	sub	sp, #24
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d101      	bne.n	800c300 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	e097      	b.n	800c430 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c306:	b2db      	uxtb	r3, r3
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d106      	bne.n	800c31a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2200      	movs	r2, #0
 800c310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	f7fb fd8f 	bl	8007e38 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2202      	movs	r2, #2
 800c31e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	689b      	ldr	r3, [r3, #8]
 800c328:	687a      	ldr	r2, [r7, #4]
 800c32a:	6812      	ldr	r2, [r2, #0]
 800c32c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800c330:	f023 0307 	bic.w	r3, r3, #7
 800c334:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681a      	ldr	r2, [r3, #0]
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	3304      	adds	r3, #4
 800c33e:	4619      	mov	r1, r3
 800c340:	4610      	mov	r0, r2
 800c342:	f000 fc2b 	bl	800cb9c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	689b      	ldr	r3, [r3, #8]
 800c34c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	699b      	ldr	r3, [r3, #24]
 800c354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	6a1b      	ldr	r3, [r3, #32]
 800c35c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	697a      	ldr	r2, [r7, #20]
 800c364:	4313      	orrs	r3, r2
 800c366:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c368:	693b      	ldr	r3, [r7, #16]
 800c36a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c36e:	f023 0303 	bic.w	r3, r3, #3
 800c372:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	689a      	ldr	r2, [r3, #8]
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	699b      	ldr	r3, [r3, #24]
 800c37c:	021b      	lsls	r3, r3, #8
 800c37e:	4313      	orrs	r3, r2
 800c380:	693a      	ldr	r2, [r7, #16]
 800c382:	4313      	orrs	r3, r2
 800c384:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800c38c:	f023 030c 	bic.w	r3, r3, #12
 800c390:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c398:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c39c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	68da      	ldr	r2, [r3, #12]
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	69db      	ldr	r3, [r3, #28]
 800c3a6:	021b      	lsls	r3, r3, #8
 800c3a8:	4313      	orrs	r3, r2
 800c3aa:	693a      	ldr	r2, [r7, #16]
 800c3ac:	4313      	orrs	r3, r2
 800c3ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	691b      	ldr	r3, [r3, #16]
 800c3b4:	011a      	lsls	r2, r3, #4
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	6a1b      	ldr	r3, [r3, #32]
 800c3ba:	031b      	lsls	r3, r3, #12
 800c3bc:	4313      	orrs	r3, r2
 800c3be:	693a      	ldr	r2, [r7, #16]
 800c3c0:	4313      	orrs	r3, r2
 800c3c2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800c3ca:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800c3d2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	685a      	ldr	r2, [r3, #4]
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	695b      	ldr	r3, [r3, #20]
 800c3dc:	011b      	lsls	r3, r3, #4
 800c3de:	4313      	orrs	r3, r2
 800c3e0:	68fa      	ldr	r2, [r7, #12]
 800c3e2:	4313      	orrs	r3, r2
 800c3e4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	697a      	ldr	r2, [r7, #20]
 800c3ec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	693a      	ldr	r2, [r7, #16]
 800c3f4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	68fa      	ldr	r2, [r7, #12]
 800c3fc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2201      	movs	r2, #1
 800c402:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2201      	movs	r2, #1
 800c40a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	2201      	movs	r2, #1
 800c412:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2201      	movs	r2, #1
 800c41a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2201      	movs	r2, #1
 800c422:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2201      	movs	r2, #1
 800c42a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c42e:	2300      	movs	r3, #0
}
 800c430:	4618      	mov	r0, r3
 800c432:	3718      	adds	r7, #24
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}

0800c438 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b082      	sub	sp, #8
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	691b      	ldr	r3, [r3, #16]
 800c446:	f003 0302 	and.w	r3, r3, #2
 800c44a:	2b02      	cmp	r3, #2
 800c44c:	d122      	bne.n	800c494 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	68db      	ldr	r3, [r3, #12]
 800c454:	f003 0302 	and.w	r3, r3, #2
 800c458:	2b02      	cmp	r3, #2
 800c45a:	d11b      	bne.n	800c494 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f06f 0202 	mvn.w	r2, #2
 800c464:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2201      	movs	r2, #1
 800c46a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	699b      	ldr	r3, [r3, #24]
 800c472:	f003 0303 	and.w	r3, r3, #3
 800c476:	2b00      	cmp	r3, #0
 800c478:	d003      	beq.n	800c482 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f000 fb70 	bl	800cb60 <HAL_TIM_IC_CaptureCallback>
 800c480:	e005      	b.n	800c48e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f000 fb62 	bl	800cb4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c488:	6878      	ldr	r0, [r7, #4]
 800c48a:	f000 fb73 	bl	800cb74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2200      	movs	r2, #0
 800c492:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	691b      	ldr	r3, [r3, #16]
 800c49a:	f003 0304 	and.w	r3, r3, #4
 800c49e:	2b04      	cmp	r3, #4
 800c4a0:	d122      	bne.n	800c4e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	68db      	ldr	r3, [r3, #12]
 800c4a8:	f003 0304 	and.w	r3, r3, #4
 800c4ac:	2b04      	cmp	r3, #4
 800c4ae:	d11b      	bne.n	800c4e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	f06f 0204 	mvn.w	r2, #4
 800c4b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	2202      	movs	r2, #2
 800c4be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	699b      	ldr	r3, [r3, #24]
 800c4c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d003      	beq.n	800c4d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f000 fb46 	bl	800cb60 <HAL_TIM_IC_CaptureCallback>
 800c4d4:	e005      	b.n	800c4e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f000 fb38 	bl	800cb4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	f000 fb49 	bl	800cb74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	691b      	ldr	r3, [r3, #16]
 800c4ee:	f003 0308 	and.w	r3, r3, #8
 800c4f2:	2b08      	cmp	r3, #8
 800c4f4:	d122      	bne.n	800c53c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	68db      	ldr	r3, [r3, #12]
 800c4fc:	f003 0308 	and.w	r3, r3, #8
 800c500:	2b08      	cmp	r3, #8
 800c502:	d11b      	bne.n	800c53c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	f06f 0208 	mvn.w	r2, #8
 800c50c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2204      	movs	r2, #4
 800c512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	69db      	ldr	r3, [r3, #28]
 800c51a:	f003 0303 	and.w	r3, r3, #3
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d003      	beq.n	800c52a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f000 fb1c 	bl	800cb60 <HAL_TIM_IC_CaptureCallback>
 800c528:	e005      	b.n	800c536 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f000 fb0e 	bl	800cb4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f000 fb1f 	bl	800cb74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2200      	movs	r2, #0
 800c53a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	691b      	ldr	r3, [r3, #16]
 800c542:	f003 0310 	and.w	r3, r3, #16
 800c546:	2b10      	cmp	r3, #16
 800c548:	d122      	bne.n	800c590 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	68db      	ldr	r3, [r3, #12]
 800c550:	f003 0310 	and.w	r3, r3, #16
 800c554:	2b10      	cmp	r3, #16
 800c556:	d11b      	bne.n	800c590 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f06f 0210 	mvn.w	r2, #16
 800c560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2208      	movs	r2, #8
 800c566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	69db      	ldr	r3, [r3, #28]
 800c56e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c572:	2b00      	cmp	r3, #0
 800c574:	d003      	beq.n	800c57e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f000 faf2 	bl	800cb60 <HAL_TIM_IC_CaptureCallback>
 800c57c:	e005      	b.n	800c58a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f000 fae4 	bl	800cb4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f000 faf5 	bl	800cb74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	2200      	movs	r2, #0
 800c58e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	691b      	ldr	r3, [r3, #16]
 800c596:	f003 0301 	and.w	r3, r3, #1
 800c59a:	2b01      	cmp	r3, #1
 800c59c:	d10e      	bne.n	800c5bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	68db      	ldr	r3, [r3, #12]
 800c5a4:	f003 0301 	and.w	r3, r3, #1
 800c5a8:	2b01      	cmp	r3, #1
 800c5aa:	d107      	bne.n	800c5bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	f06f 0201 	mvn.w	r2, #1
 800c5b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	f000 fabe 	bl	800cb38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	691b      	ldr	r3, [r3, #16]
 800c5c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5c6:	2b80      	cmp	r3, #128	; 0x80
 800c5c8:	d10e      	bne.n	800c5e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	68db      	ldr	r3, [r3, #12]
 800c5d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5d4:	2b80      	cmp	r3, #128	; 0x80
 800c5d6:	d107      	bne.n	800c5e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c5e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f001 f8c0 	bl	800d768 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	691b      	ldr	r3, [r3, #16]
 800c5ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5f6:	d10e      	bne.n	800c616 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	68db      	ldr	r3, [r3, #12]
 800c5fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c602:	2b80      	cmp	r3, #128	; 0x80
 800c604:	d107      	bne.n	800c616 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c60e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	f001 f8b3 	bl	800d77c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	691b      	ldr	r3, [r3, #16]
 800c61c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c620:	2b40      	cmp	r3, #64	; 0x40
 800c622:	d10e      	bne.n	800c642 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	68db      	ldr	r3, [r3, #12]
 800c62a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c62e:	2b40      	cmp	r3, #64	; 0x40
 800c630:	d107      	bne.n	800c642 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c63a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c63c:	6878      	ldr	r0, [r7, #4]
 800c63e:	f000 faa3 	bl	800cb88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	691b      	ldr	r3, [r3, #16]
 800c648:	f003 0320 	and.w	r3, r3, #32
 800c64c:	2b20      	cmp	r3, #32
 800c64e:	d10e      	bne.n	800c66e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	68db      	ldr	r3, [r3, #12]
 800c656:	f003 0320 	and.w	r3, r3, #32
 800c65a:	2b20      	cmp	r3, #32
 800c65c:	d107      	bne.n	800c66e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	f06f 0220 	mvn.w	r2, #32
 800c666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f001 f873 	bl	800d754 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	691b      	ldr	r3, [r3, #16]
 800c674:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c678:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c67c:	d10f      	bne.n	800c69e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	68db      	ldr	r3, [r3, #12]
 800c684:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c688:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c68c:	d107      	bne.n	800c69e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800c696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	f001 f879 	bl	800d790 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	691b      	ldr	r3, [r3, #16]
 800c6a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c6a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c6ac:	d10f      	bne.n	800c6ce <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	68db      	ldr	r3, [r3, #12]
 800c6b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c6b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c6bc:	d107      	bne.n	800c6ce <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800c6c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f001 f86b 	bl	800d7a4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	691b      	ldr	r3, [r3, #16]
 800c6d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c6d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c6dc:	d10f      	bne.n	800c6fe <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	68db      	ldr	r3, [r3, #12]
 800c6e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c6e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c6ec:	d107      	bne.n	800c6fe <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800c6f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f001 f85d 	bl	800d7b8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	691b      	ldr	r3, [r3, #16]
 800c704:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c708:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c70c:	d10f      	bne.n	800c72e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	68db      	ldr	r3, [r3, #12]
 800c714:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c718:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c71c:	d107      	bne.n	800c72e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800c726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f001 f84f 	bl	800d7cc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c72e:	bf00      	nop
 800c730:	3708      	adds	r7, #8
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}
	...

0800c738 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b084      	sub	sp, #16
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	60f8      	str	r0, [r7, #12]
 800c740:	60b9      	str	r1, [r7, #8]
 800c742:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c74a:	2b01      	cmp	r3, #1
 800c74c:	d101      	bne.n	800c752 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800c74e:	2302      	movs	r3, #2
 800c750:	e0fd      	b.n	800c94e <HAL_TIM_PWM_ConfigChannel+0x216>
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	2201      	movs	r2, #1
 800c756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2b14      	cmp	r3, #20
 800c75e:	f200 80f0 	bhi.w	800c942 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800c762:	a201      	add	r2, pc, #4	; (adr r2, 800c768 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800c764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c768:	0800c7bd 	.word	0x0800c7bd
 800c76c:	0800c943 	.word	0x0800c943
 800c770:	0800c943 	.word	0x0800c943
 800c774:	0800c943 	.word	0x0800c943
 800c778:	0800c7fd 	.word	0x0800c7fd
 800c77c:	0800c943 	.word	0x0800c943
 800c780:	0800c943 	.word	0x0800c943
 800c784:	0800c943 	.word	0x0800c943
 800c788:	0800c83f 	.word	0x0800c83f
 800c78c:	0800c943 	.word	0x0800c943
 800c790:	0800c943 	.word	0x0800c943
 800c794:	0800c943 	.word	0x0800c943
 800c798:	0800c87f 	.word	0x0800c87f
 800c79c:	0800c943 	.word	0x0800c943
 800c7a0:	0800c943 	.word	0x0800c943
 800c7a4:	0800c943 	.word	0x0800c943
 800c7a8:	0800c8c1 	.word	0x0800c8c1
 800c7ac:	0800c943 	.word	0x0800c943
 800c7b0:	0800c943 	.word	0x0800c943
 800c7b4:	0800c943 	.word	0x0800c943
 800c7b8:	0800c901 	.word	0x0800c901
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	68b9      	ldr	r1, [r7, #8]
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f000 fa92 	bl	800ccec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	699a      	ldr	r2, [r3, #24]
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	f042 0208 	orr.w	r2, r2, #8
 800c7d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	699a      	ldr	r2, [r3, #24]
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	f022 0204 	bic.w	r2, r2, #4
 800c7e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	6999      	ldr	r1, [r3, #24]
 800c7ee:	68bb      	ldr	r3, [r7, #8]
 800c7f0:	691a      	ldr	r2, [r3, #16]
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	430a      	orrs	r2, r1
 800c7f8:	619a      	str	r2, [r3, #24]
      break;
 800c7fa:	e0a3      	b.n	800c944 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	68b9      	ldr	r1, [r7, #8]
 800c802:	4618      	mov	r0, r3
 800c804:	f000 fb0c 	bl	800ce20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	699a      	ldr	r2, [r3, #24]
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c816:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	699a      	ldr	r2, [r3, #24]
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c826:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	6999      	ldr	r1, [r3, #24]
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	691b      	ldr	r3, [r3, #16]
 800c832:	021a      	lsls	r2, r3, #8
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	430a      	orrs	r2, r1
 800c83a:	619a      	str	r2, [r3, #24]
      break;
 800c83c:	e082      	b.n	800c944 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	68b9      	ldr	r1, [r7, #8]
 800c844:	4618      	mov	r0, r3
 800c846:	f000 fb7f 	bl	800cf48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	69da      	ldr	r2, [r3, #28]
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	f042 0208 	orr.w	r2, r2, #8
 800c858:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	69da      	ldr	r2, [r3, #28]
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	f022 0204 	bic.w	r2, r2, #4
 800c868:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	69d9      	ldr	r1, [r3, #28]
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	691a      	ldr	r2, [r3, #16]
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	430a      	orrs	r2, r1
 800c87a:	61da      	str	r2, [r3, #28]
      break;
 800c87c:	e062      	b.n	800c944 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	68b9      	ldr	r1, [r7, #8]
 800c884:	4618      	mov	r0, r3
 800c886:	f000 fbf1 	bl	800d06c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	69da      	ldr	r2, [r3, #28]
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c898:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	69da      	ldr	r2, [r3, #28]
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c8a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	69d9      	ldr	r1, [r3, #28]
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	691b      	ldr	r3, [r3, #16]
 800c8b4:	021a      	lsls	r2, r3, #8
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	430a      	orrs	r2, r1
 800c8bc:	61da      	str	r2, [r3, #28]
      break;
 800c8be:	e041      	b.n	800c944 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	68b9      	ldr	r1, [r7, #8]
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	f000 fc64 	bl	800d194 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f042 0208 	orr.w	r2, r2, #8
 800c8da:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	f022 0204 	bic.w	r2, r2, #4
 800c8ea:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	691a      	ldr	r2, [r3, #16]
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	430a      	orrs	r2, r1
 800c8fc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800c8fe:	e021      	b.n	800c944 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	68b9      	ldr	r1, [r7, #8]
 800c906:	4618      	mov	r0, r3
 800c908:	f000 fcae 	bl	800d268 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c91a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c92a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	691b      	ldr	r3, [r3, #16]
 800c936:	021a      	lsls	r2, r3, #8
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	430a      	orrs	r2, r1
 800c93e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800c940:	e000      	b.n	800c944 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800c942:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	2200      	movs	r2, #0
 800c948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c94c:	2300      	movs	r3, #0
}
 800c94e:	4618      	mov	r0, r3
 800c950:	3710      	adds	r7, #16
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}
 800c956:	bf00      	nop

0800c958 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b084      	sub	sp, #16
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
 800c960:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c968:	2b01      	cmp	r3, #1
 800c96a:	d101      	bne.n	800c970 <HAL_TIM_ConfigClockSource+0x18>
 800c96c:	2302      	movs	r3, #2
 800c96e:	e0d2      	b.n	800cb16 <HAL_TIM_ConfigClockSource+0x1be>
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2201      	movs	r2, #1
 800c974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2202      	movs	r2, #2
 800c97c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	689b      	ldr	r3, [r3, #8]
 800c986:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800c98e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c992:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c99a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	68fa      	ldr	r2, [r7, #12]
 800c9a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c9ac:	f000 80a9 	beq.w	800cb02 <HAL_TIM_ConfigClockSource+0x1aa>
 800c9b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c9b4:	d81a      	bhi.n	800c9ec <HAL_TIM_ConfigClockSource+0x94>
 800c9b6:	2b30      	cmp	r3, #48	; 0x30
 800c9b8:	f000 809a 	beq.w	800caf0 <HAL_TIM_ConfigClockSource+0x198>
 800c9bc:	2b30      	cmp	r3, #48	; 0x30
 800c9be:	d809      	bhi.n	800c9d4 <HAL_TIM_ConfigClockSource+0x7c>
 800c9c0:	2b10      	cmp	r3, #16
 800c9c2:	f000 8095 	beq.w	800caf0 <HAL_TIM_ConfigClockSource+0x198>
 800c9c6:	2b20      	cmp	r3, #32
 800c9c8:	f000 8092 	beq.w	800caf0 <HAL_TIM_ConfigClockSource+0x198>
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	f000 808f 	beq.w	800caf0 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800c9d2:	e097      	b.n	800cb04 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c9d4:	2b50      	cmp	r3, #80	; 0x50
 800c9d6:	d05b      	beq.n	800ca90 <HAL_TIM_ConfigClockSource+0x138>
 800c9d8:	2b50      	cmp	r3, #80	; 0x50
 800c9da:	d802      	bhi.n	800c9e2 <HAL_TIM_ConfigClockSource+0x8a>
 800c9dc:	2b40      	cmp	r3, #64	; 0x40
 800c9de:	d077      	beq.n	800cad0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800c9e0:	e090      	b.n	800cb04 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c9e2:	2b60      	cmp	r3, #96	; 0x60
 800c9e4:	d064      	beq.n	800cab0 <HAL_TIM_ConfigClockSource+0x158>
 800c9e6:	2b70      	cmp	r3, #112	; 0x70
 800c9e8:	d028      	beq.n	800ca3c <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800c9ea:	e08b      	b.n	800cb04 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c9ec:	4a4c      	ldr	r2, [pc, #304]	; (800cb20 <HAL_TIM_ConfigClockSource+0x1c8>)
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	d07e      	beq.n	800caf0 <HAL_TIM_ConfigClockSource+0x198>
 800c9f2:	4a4b      	ldr	r2, [pc, #300]	; (800cb20 <HAL_TIM_ConfigClockSource+0x1c8>)
 800c9f4:	4293      	cmp	r3, r2
 800c9f6:	d810      	bhi.n	800ca1a <HAL_TIM_ConfigClockSource+0xc2>
 800c9f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c9fc:	d078      	beq.n	800caf0 <HAL_TIM_ConfigClockSource+0x198>
 800c9fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca02:	d803      	bhi.n	800ca0c <HAL_TIM_ConfigClockSource+0xb4>
 800ca04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca08:	d02f      	beq.n	800ca6a <HAL_TIM_ConfigClockSource+0x112>
      break;
 800ca0a:	e07b      	b.n	800cb04 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ca0c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ca10:	d06e      	beq.n	800caf0 <HAL_TIM_ConfigClockSource+0x198>
 800ca12:	4a44      	ldr	r2, [pc, #272]	; (800cb24 <HAL_TIM_ConfigClockSource+0x1cc>)
 800ca14:	4293      	cmp	r3, r2
 800ca16:	d06b      	beq.n	800caf0 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800ca18:	e074      	b.n	800cb04 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ca1a:	4a43      	ldr	r2, [pc, #268]	; (800cb28 <HAL_TIM_ConfigClockSource+0x1d0>)
 800ca1c:	4293      	cmp	r3, r2
 800ca1e:	d067      	beq.n	800caf0 <HAL_TIM_ConfigClockSource+0x198>
 800ca20:	4a41      	ldr	r2, [pc, #260]	; (800cb28 <HAL_TIM_ConfigClockSource+0x1d0>)
 800ca22:	4293      	cmp	r3, r2
 800ca24:	d803      	bhi.n	800ca2e <HAL_TIM_ConfigClockSource+0xd6>
 800ca26:	4a41      	ldr	r2, [pc, #260]	; (800cb2c <HAL_TIM_ConfigClockSource+0x1d4>)
 800ca28:	4293      	cmp	r3, r2
 800ca2a:	d061      	beq.n	800caf0 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800ca2c:	e06a      	b.n	800cb04 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ca2e:	4a40      	ldr	r2, [pc, #256]	; (800cb30 <HAL_TIM_ConfigClockSource+0x1d8>)
 800ca30:	4293      	cmp	r3, r2
 800ca32:	d05d      	beq.n	800caf0 <HAL_TIM_ConfigClockSource+0x198>
 800ca34:	4a3f      	ldr	r2, [pc, #252]	; (800cb34 <HAL_TIM_ConfigClockSource+0x1dc>)
 800ca36:	4293      	cmp	r3, r2
 800ca38:	d05a      	beq.n	800caf0 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800ca3a:	e063      	b.n	800cb04 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	6818      	ldr	r0, [r3, #0]
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	6899      	ldr	r1, [r3, #8]
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	685a      	ldr	r2, [r3, #4]
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	68db      	ldr	r3, [r3, #12]
 800ca4c:	f000 fcf4 	bl	800d438 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	689b      	ldr	r3, [r3, #8]
 800ca56:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ca5e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	68fa      	ldr	r2, [r7, #12]
 800ca66:	609a      	str	r2, [r3, #8]
      break;
 800ca68:	e04c      	b.n	800cb04 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6818      	ldr	r0, [r3, #0]
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	6899      	ldr	r1, [r3, #8]
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	685a      	ldr	r2, [r3, #4]
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	68db      	ldr	r3, [r3, #12]
 800ca7a:	f000 fcdd 	bl	800d438 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	689a      	ldr	r2, [r3, #8]
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ca8c:	609a      	str	r2, [r3, #8]
      break;
 800ca8e:	e039      	b.n	800cb04 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6818      	ldr	r0, [r3, #0]
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	6859      	ldr	r1, [r3, #4]
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	68db      	ldr	r3, [r3, #12]
 800ca9c:	461a      	mov	r2, r3
 800ca9e:	f000 fc4f 	bl	800d340 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	2150      	movs	r1, #80	; 0x50
 800caa8:	4618      	mov	r0, r3
 800caaa:	f000 fca8 	bl	800d3fe <TIM_ITRx_SetConfig>
      break;
 800caae:	e029      	b.n	800cb04 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	6818      	ldr	r0, [r3, #0]
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	6859      	ldr	r1, [r3, #4]
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	68db      	ldr	r3, [r3, #12]
 800cabc:	461a      	mov	r2, r3
 800cabe:	f000 fc6e 	bl	800d39e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	2160      	movs	r1, #96	; 0x60
 800cac8:	4618      	mov	r0, r3
 800caca:	f000 fc98 	bl	800d3fe <TIM_ITRx_SetConfig>
      break;
 800cace:	e019      	b.n	800cb04 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	6818      	ldr	r0, [r3, #0]
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	6859      	ldr	r1, [r3, #4]
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	68db      	ldr	r3, [r3, #12]
 800cadc:	461a      	mov	r2, r3
 800cade:	f000 fc2f 	bl	800d340 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	2140      	movs	r1, #64	; 0x40
 800cae8:	4618      	mov	r0, r3
 800caea:	f000 fc88 	bl	800d3fe <TIM_ITRx_SetConfig>
      break;
 800caee:	e009      	b.n	800cb04 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681a      	ldr	r2, [r3, #0]
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	4619      	mov	r1, r3
 800cafa:	4610      	mov	r0, r2
 800cafc:	f000 fc7f 	bl	800d3fe <TIM_ITRx_SetConfig>
      break;
 800cb00:	e000      	b.n	800cb04 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800cb02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2201      	movs	r2, #1
 800cb08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2200      	movs	r2, #0
 800cb10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cb14:	2300      	movs	r3, #0
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	3710      	adds	r7, #16
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}
 800cb1e:	bf00      	nop
 800cb20:	00100030 	.word	0x00100030
 800cb24:	00100020 	.word	0x00100020
 800cb28:	00100050 	.word	0x00100050
 800cb2c:	00100040 	.word	0x00100040
 800cb30:	00100060 	.word	0x00100060
 800cb34:	00100070 	.word	0x00100070

0800cb38 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cb38:	b480      	push	{r7}
 800cb3a:	b083      	sub	sp, #12
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800cb40:	bf00      	nop
 800cb42:	370c      	adds	r7, #12
 800cb44:	46bd      	mov	sp, r7
 800cb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4a:	4770      	bx	lr

0800cb4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cb4c:	b480      	push	{r7}
 800cb4e:	b083      	sub	sp, #12
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cb54:	bf00      	nop
 800cb56:	370c      	adds	r7, #12
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5e:	4770      	bx	lr

0800cb60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cb60:	b480      	push	{r7}
 800cb62:	b083      	sub	sp, #12
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cb68:	bf00      	nop
 800cb6a:	370c      	adds	r7, #12
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb72:	4770      	bx	lr

0800cb74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cb74:	b480      	push	{r7}
 800cb76:	b083      	sub	sp, #12
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cb7c:	bf00      	nop
 800cb7e:	370c      	adds	r7, #12
 800cb80:	46bd      	mov	sp, r7
 800cb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb86:	4770      	bx	lr

0800cb88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cb88:	b480      	push	{r7}
 800cb8a:	b083      	sub	sp, #12
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cb90:	bf00      	nop
 800cb92:	370c      	adds	r7, #12
 800cb94:	46bd      	mov	sp, r7
 800cb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9a:	4770      	bx	lr

0800cb9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cb9c:	b480      	push	{r7}
 800cb9e:	b085      	sub	sp, #20
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
 800cba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	4a46      	ldr	r2, [pc, #280]	; (800ccc8 <TIM_Base_SetConfig+0x12c>)
 800cbb0:	4293      	cmp	r3, r2
 800cbb2:	d017      	beq.n	800cbe4 <TIM_Base_SetConfig+0x48>
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cbba:	d013      	beq.n	800cbe4 <TIM_Base_SetConfig+0x48>
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	4a43      	ldr	r2, [pc, #268]	; (800cccc <TIM_Base_SetConfig+0x130>)
 800cbc0:	4293      	cmp	r3, r2
 800cbc2:	d00f      	beq.n	800cbe4 <TIM_Base_SetConfig+0x48>
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	4a42      	ldr	r2, [pc, #264]	; (800ccd0 <TIM_Base_SetConfig+0x134>)
 800cbc8:	4293      	cmp	r3, r2
 800cbca:	d00b      	beq.n	800cbe4 <TIM_Base_SetConfig+0x48>
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	4a41      	ldr	r2, [pc, #260]	; (800ccd4 <TIM_Base_SetConfig+0x138>)
 800cbd0:	4293      	cmp	r3, r2
 800cbd2:	d007      	beq.n	800cbe4 <TIM_Base_SetConfig+0x48>
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	4a40      	ldr	r2, [pc, #256]	; (800ccd8 <TIM_Base_SetConfig+0x13c>)
 800cbd8:	4293      	cmp	r3, r2
 800cbda:	d003      	beq.n	800cbe4 <TIM_Base_SetConfig+0x48>
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	4a3f      	ldr	r2, [pc, #252]	; (800ccdc <TIM_Base_SetConfig+0x140>)
 800cbe0:	4293      	cmp	r3, r2
 800cbe2:	d108      	bne.n	800cbf6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cbea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	685b      	ldr	r3, [r3, #4]
 800cbf0:	68fa      	ldr	r2, [r7, #12]
 800cbf2:	4313      	orrs	r3, r2
 800cbf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	4a33      	ldr	r2, [pc, #204]	; (800ccc8 <TIM_Base_SetConfig+0x12c>)
 800cbfa:	4293      	cmp	r3, r2
 800cbfc:	d023      	beq.n	800cc46 <TIM_Base_SetConfig+0xaa>
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc04:	d01f      	beq.n	800cc46 <TIM_Base_SetConfig+0xaa>
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	4a30      	ldr	r2, [pc, #192]	; (800cccc <TIM_Base_SetConfig+0x130>)
 800cc0a:	4293      	cmp	r3, r2
 800cc0c:	d01b      	beq.n	800cc46 <TIM_Base_SetConfig+0xaa>
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	4a2f      	ldr	r2, [pc, #188]	; (800ccd0 <TIM_Base_SetConfig+0x134>)
 800cc12:	4293      	cmp	r3, r2
 800cc14:	d017      	beq.n	800cc46 <TIM_Base_SetConfig+0xaa>
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	4a2e      	ldr	r2, [pc, #184]	; (800ccd4 <TIM_Base_SetConfig+0x138>)
 800cc1a:	4293      	cmp	r3, r2
 800cc1c:	d013      	beq.n	800cc46 <TIM_Base_SetConfig+0xaa>
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	4a2d      	ldr	r2, [pc, #180]	; (800ccd8 <TIM_Base_SetConfig+0x13c>)
 800cc22:	4293      	cmp	r3, r2
 800cc24:	d00f      	beq.n	800cc46 <TIM_Base_SetConfig+0xaa>
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	4a2d      	ldr	r2, [pc, #180]	; (800cce0 <TIM_Base_SetConfig+0x144>)
 800cc2a:	4293      	cmp	r3, r2
 800cc2c:	d00b      	beq.n	800cc46 <TIM_Base_SetConfig+0xaa>
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	4a2c      	ldr	r2, [pc, #176]	; (800cce4 <TIM_Base_SetConfig+0x148>)
 800cc32:	4293      	cmp	r3, r2
 800cc34:	d007      	beq.n	800cc46 <TIM_Base_SetConfig+0xaa>
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	4a2b      	ldr	r2, [pc, #172]	; (800cce8 <TIM_Base_SetConfig+0x14c>)
 800cc3a:	4293      	cmp	r3, r2
 800cc3c:	d003      	beq.n	800cc46 <TIM_Base_SetConfig+0xaa>
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	4a26      	ldr	r2, [pc, #152]	; (800ccdc <TIM_Base_SetConfig+0x140>)
 800cc42:	4293      	cmp	r3, r2
 800cc44:	d108      	bne.n	800cc58 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	68db      	ldr	r3, [r3, #12]
 800cc52:	68fa      	ldr	r2, [r7, #12]
 800cc54:	4313      	orrs	r3, r2
 800cc56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	695b      	ldr	r3, [r3, #20]
 800cc62:	4313      	orrs	r3, r2
 800cc64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	68fa      	ldr	r2, [r7, #12]
 800cc6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	689a      	ldr	r2, [r3, #8]
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	681a      	ldr	r2, [r3, #0]
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	4a12      	ldr	r2, [pc, #72]	; (800ccc8 <TIM_Base_SetConfig+0x12c>)
 800cc80:	4293      	cmp	r3, r2
 800cc82:	d013      	beq.n	800ccac <TIM_Base_SetConfig+0x110>
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	4a14      	ldr	r2, [pc, #80]	; (800ccd8 <TIM_Base_SetConfig+0x13c>)
 800cc88:	4293      	cmp	r3, r2
 800cc8a:	d00f      	beq.n	800ccac <TIM_Base_SetConfig+0x110>
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	4a14      	ldr	r2, [pc, #80]	; (800cce0 <TIM_Base_SetConfig+0x144>)
 800cc90:	4293      	cmp	r3, r2
 800cc92:	d00b      	beq.n	800ccac <TIM_Base_SetConfig+0x110>
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	4a13      	ldr	r2, [pc, #76]	; (800cce4 <TIM_Base_SetConfig+0x148>)
 800cc98:	4293      	cmp	r3, r2
 800cc9a:	d007      	beq.n	800ccac <TIM_Base_SetConfig+0x110>
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	4a12      	ldr	r2, [pc, #72]	; (800cce8 <TIM_Base_SetConfig+0x14c>)
 800cca0:	4293      	cmp	r3, r2
 800cca2:	d003      	beq.n	800ccac <TIM_Base_SetConfig+0x110>
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	4a0d      	ldr	r2, [pc, #52]	; (800ccdc <TIM_Base_SetConfig+0x140>)
 800cca8:	4293      	cmp	r3, r2
 800ccaa:	d103      	bne.n	800ccb4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	691a      	ldr	r2, [r3, #16]
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2201      	movs	r2, #1
 800ccb8:	615a      	str	r2, [r3, #20]
}
 800ccba:	bf00      	nop
 800ccbc:	3714      	adds	r7, #20
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc4:	4770      	bx	lr
 800ccc6:	bf00      	nop
 800ccc8:	40012c00 	.word	0x40012c00
 800cccc:	40000400 	.word	0x40000400
 800ccd0:	40000800 	.word	0x40000800
 800ccd4:	40000c00 	.word	0x40000c00
 800ccd8:	40013400 	.word	0x40013400
 800ccdc:	40015000 	.word	0x40015000
 800cce0:	40014000 	.word	0x40014000
 800cce4:	40014400 	.word	0x40014400
 800cce8:	40014800 	.word	0x40014800

0800ccec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ccec:	b480      	push	{r7}
 800ccee:	b087      	sub	sp, #28
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
 800ccf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	6a1b      	ldr	r3, [r3, #32]
 800ccfa:	f023 0201 	bic.w	r2, r3, #1
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	6a1b      	ldr	r3, [r3, #32]
 800cd06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	685b      	ldr	r3, [r3, #4]
 800cd0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	699b      	ldr	r3, [r3, #24]
 800cd12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cd1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	f023 0303 	bic.w	r3, r3, #3
 800cd26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	68fa      	ldr	r2, [r7, #12]
 800cd2e:	4313      	orrs	r3, r2
 800cd30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cd32:	697b      	ldr	r3, [r7, #20]
 800cd34:	f023 0302 	bic.w	r3, r3, #2
 800cd38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	689b      	ldr	r3, [r3, #8]
 800cd3e:	697a      	ldr	r2, [r7, #20]
 800cd40:	4313      	orrs	r3, r2
 800cd42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	4a30      	ldr	r2, [pc, #192]	; (800ce08 <TIM_OC1_SetConfig+0x11c>)
 800cd48:	4293      	cmp	r3, r2
 800cd4a:	d013      	beq.n	800cd74 <TIM_OC1_SetConfig+0x88>
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	4a2f      	ldr	r2, [pc, #188]	; (800ce0c <TIM_OC1_SetConfig+0x120>)
 800cd50:	4293      	cmp	r3, r2
 800cd52:	d00f      	beq.n	800cd74 <TIM_OC1_SetConfig+0x88>
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	4a2e      	ldr	r2, [pc, #184]	; (800ce10 <TIM_OC1_SetConfig+0x124>)
 800cd58:	4293      	cmp	r3, r2
 800cd5a:	d00b      	beq.n	800cd74 <TIM_OC1_SetConfig+0x88>
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	4a2d      	ldr	r2, [pc, #180]	; (800ce14 <TIM_OC1_SetConfig+0x128>)
 800cd60:	4293      	cmp	r3, r2
 800cd62:	d007      	beq.n	800cd74 <TIM_OC1_SetConfig+0x88>
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	4a2c      	ldr	r2, [pc, #176]	; (800ce18 <TIM_OC1_SetConfig+0x12c>)
 800cd68:	4293      	cmp	r3, r2
 800cd6a:	d003      	beq.n	800cd74 <TIM_OC1_SetConfig+0x88>
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	4a2b      	ldr	r2, [pc, #172]	; (800ce1c <TIM_OC1_SetConfig+0x130>)
 800cd70:	4293      	cmp	r3, r2
 800cd72:	d10c      	bne.n	800cd8e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cd74:	697b      	ldr	r3, [r7, #20]
 800cd76:	f023 0308 	bic.w	r3, r3, #8
 800cd7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	68db      	ldr	r3, [r3, #12]
 800cd80:	697a      	ldr	r2, [r7, #20]
 800cd82:	4313      	orrs	r3, r2
 800cd84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	f023 0304 	bic.w	r3, r3, #4
 800cd8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	4a1d      	ldr	r2, [pc, #116]	; (800ce08 <TIM_OC1_SetConfig+0x11c>)
 800cd92:	4293      	cmp	r3, r2
 800cd94:	d013      	beq.n	800cdbe <TIM_OC1_SetConfig+0xd2>
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	4a1c      	ldr	r2, [pc, #112]	; (800ce0c <TIM_OC1_SetConfig+0x120>)
 800cd9a:	4293      	cmp	r3, r2
 800cd9c:	d00f      	beq.n	800cdbe <TIM_OC1_SetConfig+0xd2>
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	4a1b      	ldr	r2, [pc, #108]	; (800ce10 <TIM_OC1_SetConfig+0x124>)
 800cda2:	4293      	cmp	r3, r2
 800cda4:	d00b      	beq.n	800cdbe <TIM_OC1_SetConfig+0xd2>
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	4a1a      	ldr	r2, [pc, #104]	; (800ce14 <TIM_OC1_SetConfig+0x128>)
 800cdaa:	4293      	cmp	r3, r2
 800cdac:	d007      	beq.n	800cdbe <TIM_OC1_SetConfig+0xd2>
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	4a19      	ldr	r2, [pc, #100]	; (800ce18 <TIM_OC1_SetConfig+0x12c>)
 800cdb2:	4293      	cmp	r3, r2
 800cdb4:	d003      	beq.n	800cdbe <TIM_OC1_SetConfig+0xd2>
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	4a18      	ldr	r2, [pc, #96]	; (800ce1c <TIM_OC1_SetConfig+0x130>)
 800cdba:	4293      	cmp	r3, r2
 800cdbc:	d111      	bne.n	800cde2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cdbe:	693b      	ldr	r3, [r7, #16]
 800cdc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cdc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cdcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	695b      	ldr	r3, [r3, #20]
 800cdd2:	693a      	ldr	r2, [r7, #16]
 800cdd4:	4313      	orrs	r3, r2
 800cdd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	699b      	ldr	r3, [r3, #24]
 800cddc:	693a      	ldr	r2, [r7, #16]
 800cdde:	4313      	orrs	r3, r2
 800cde0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	693a      	ldr	r2, [r7, #16]
 800cde6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	68fa      	ldr	r2, [r7, #12]
 800cdec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	685a      	ldr	r2, [r3, #4]
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	697a      	ldr	r2, [r7, #20]
 800cdfa:	621a      	str	r2, [r3, #32]
}
 800cdfc:	bf00      	nop
 800cdfe:	371c      	adds	r7, #28
 800ce00:	46bd      	mov	sp, r7
 800ce02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce06:	4770      	bx	lr
 800ce08:	40012c00 	.word	0x40012c00
 800ce0c:	40013400 	.word	0x40013400
 800ce10:	40014000 	.word	0x40014000
 800ce14:	40014400 	.word	0x40014400
 800ce18:	40014800 	.word	0x40014800
 800ce1c:	40015000 	.word	0x40015000

0800ce20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ce20:	b480      	push	{r7}
 800ce22:	b087      	sub	sp, #28
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
 800ce28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	6a1b      	ldr	r3, [r3, #32]
 800ce2e:	f023 0210 	bic.w	r2, r3, #16
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	6a1b      	ldr	r3, [r3, #32]
 800ce3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	685b      	ldr	r3, [r3, #4]
 800ce40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	699b      	ldr	r3, [r3, #24]
 800ce46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ce4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ce52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ce5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	021b      	lsls	r3, r3, #8
 800ce62:	68fa      	ldr	r2, [r7, #12]
 800ce64:	4313      	orrs	r3, r2
 800ce66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ce68:	697b      	ldr	r3, [r7, #20]
 800ce6a:	f023 0320 	bic.w	r3, r3, #32
 800ce6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	689b      	ldr	r3, [r3, #8]
 800ce74:	011b      	lsls	r3, r3, #4
 800ce76:	697a      	ldr	r2, [r7, #20]
 800ce78:	4313      	orrs	r3, r2
 800ce7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	4a2c      	ldr	r2, [pc, #176]	; (800cf30 <TIM_OC2_SetConfig+0x110>)
 800ce80:	4293      	cmp	r3, r2
 800ce82:	d007      	beq.n	800ce94 <TIM_OC2_SetConfig+0x74>
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	4a2b      	ldr	r2, [pc, #172]	; (800cf34 <TIM_OC2_SetConfig+0x114>)
 800ce88:	4293      	cmp	r3, r2
 800ce8a:	d003      	beq.n	800ce94 <TIM_OC2_SetConfig+0x74>
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	4a2a      	ldr	r2, [pc, #168]	; (800cf38 <TIM_OC2_SetConfig+0x118>)
 800ce90:	4293      	cmp	r3, r2
 800ce92:	d10d      	bne.n	800ceb0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ce9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	68db      	ldr	r3, [r3, #12]
 800cea0:	011b      	lsls	r3, r3, #4
 800cea2:	697a      	ldr	r2, [r7, #20]
 800cea4:	4313      	orrs	r3, r2
 800cea6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cea8:	697b      	ldr	r3, [r7, #20]
 800ceaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ceae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	4a1f      	ldr	r2, [pc, #124]	; (800cf30 <TIM_OC2_SetConfig+0x110>)
 800ceb4:	4293      	cmp	r3, r2
 800ceb6:	d013      	beq.n	800cee0 <TIM_OC2_SetConfig+0xc0>
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	4a1e      	ldr	r2, [pc, #120]	; (800cf34 <TIM_OC2_SetConfig+0x114>)
 800cebc:	4293      	cmp	r3, r2
 800cebe:	d00f      	beq.n	800cee0 <TIM_OC2_SetConfig+0xc0>
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	4a1e      	ldr	r2, [pc, #120]	; (800cf3c <TIM_OC2_SetConfig+0x11c>)
 800cec4:	4293      	cmp	r3, r2
 800cec6:	d00b      	beq.n	800cee0 <TIM_OC2_SetConfig+0xc0>
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	4a1d      	ldr	r2, [pc, #116]	; (800cf40 <TIM_OC2_SetConfig+0x120>)
 800cecc:	4293      	cmp	r3, r2
 800cece:	d007      	beq.n	800cee0 <TIM_OC2_SetConfig+0xc0>
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	4a1c      	ldr	r2, [pc, #112]	; (800cf44 <TIM_OC2_SetConfig+0x124>)
 800ced4:	4293      	cmp	r3, r2
 800ced6:	d003      	beq.n	800cee0 <TIM_OC2_SetConfig+0xc0>
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	4a17      	ldr	r2, [pc, #92]	; (800cf38 <TIM_OC2_SetConfig+0x118>)
 800cedc:	4293      	cmp	r3, r2
 800cede:	d113      	bne.n	800cf08 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cee0:	693b      	ldr	r3, [r7, #16]
 800cee2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cee6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cee8:	693b      	ldr	r3, [r7, #16]
 800ceea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ceee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	695b      	ldr	r3, [r3, #20]
 800cef4:	009b      	lsls	r3, r3, #2
 800cef6:	693a      	ldr	r2, [r7, #16]
 800cef8:	4313      	orrs	r3, r2
 800cefa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	699b      	ldr	r3, [r3, #24]
 800cf00:	009b      	lsls	r3, r3, #2
 800cf02:	693a      	ldr	r2, [r7, #16]
 800cf04:	4313      	orrs	r3, r2
 800cf06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	693a      	ldr	r2, [r7, #16]
 800cf0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	68fa      	ldr	r2, [r7, #12]
 800cf12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	685a      	ldr	r2, [r3, #4]
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	697a      	ldr	r2, [r7, #20]
 800cf20:	621a      	str	r2, [r3, #32]
}
 800cf22:	bf00      	nop
 800cf24:	371c      	adds	r7, #28
 800cf26:	46bd      	mov	sp, r7
 800cf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2c:	4770      	bx	lr
 800cf2e:	bf00      	nop
 800cf30:	40012c00 	.word	0x40012c00
 800cf34:	40013400 	.word	0x40013400
 800cf38:	40015000 	.word	0x40015000
 800cf3c:	40014000 	.word	0x40014000
 800cf40:	40014400 	.word	0x40014400
 800cf44:	40014800 	.word	0x40014800

0800cf48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cf48:	b480      	push	{r7}
 800cf4a:	b087      	sub	sp, #28
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
 800cf50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6a1b      	ldr	r3, [r3, #32]
 800cf56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	6a1b      	ldr	r3, [r3, #32]
 800cf62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	685b      	ldr	r3, [r3, #4]
 800cf68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	69db      	ldr	r3, [r3, #28]
 800cf6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cf76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	f023 0303 	bic.w	r3, r3, #3
 800cf82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	68fa      	ldr	r2, [r7, #12]
 800cf8a:	4313      	orrs	r3, r2
 800cf8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cf8e:	697b      	ldr	r3, [r7, #20]
 800cf90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cf94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	689b      	ldr	r3, [r3, #8]
 800cf9a:	021b      	lsls	r3, r3, #8
 800cf9c:	697a      	ldr	r2, [r7, #20]
 800cf9e:	4313      	orrs	r3, r2
 800cfa0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	4a2b      	ldr	r2, [pc, #172]	; (800d054 <TIM_OC3_SetConfig+0x10c>)
 800cfa6:	4293      	cmp	r3, r2
 800cfa8:	d007      	beq.n	800cfba <TIM_OC3_SetConfig+0x72>
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	4a2a      	ldr	r2, [pc, #168]	; (800d058 <TIM_OC3_SetConfig+0x110>)
 800cfae:	4293      	cmp	r3, r2
 800cfb0:	d003      	beq.n	800cfba <TIM_OC3_SetConfig+0x72>
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	4a29      	ldr	r2, [pc, #164]	; (800d05c <TIM_OC3_SetConfig+0x114>)
 800cfb6:	4293      	cmp	r3, r2
 800cfb8:	d10d      	bne.n	800cfd6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cfba:	697b      	ldr	r3, [r7, #20]
 800cfbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cfc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	68db      	ldr	r3, [r3, #12]
 800cfc6:	021b      	lsls	r3, r3, #8
 800cfc8:	697a      	ldr	r2, [r7, #20]
 800cfca:	4313      	orrs	r3, r2
 800cfcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cfce:	697b      	ldr	r3, [r7, #20]
 800cfd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cfd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	4a1e      	ldr	r2, [pc, #120]	; (800d054 <TIM_OC3_SetConfig+0x10c>)
 800cfda:	4293      	cmp	r3, r2
 800cfdc:	d013      	beq.n	800d006 <TIM_OC3_SetConfig+0xbe>
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	4a1d      	ldr	r2, [pc, #116]	; (800d058 <TIM_OC3_SetConfig+0x110>)
 800cfe2:	4293      	cmp	r3, r2
 800cfe4:	d00f      	beq.n	800d006 <TIM_OC3_SetConfig+0xbe>
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	4a1d      	ldr	r2, [pc, #116]	; (800d060 <TIM_OC3_SetConfig+0x118>)
 800cfea:	4293      	cmp	r3, r2
 800cfec:	d00b      	beq.n	800d006 <TIM_OC3_SetConfig+0xbe>
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	4a1c      	ldr	r2, [pc, #112]	; (800d064 <TIM_OC3_SetConfig+0x11c>)
 800cff2:	4293      	cmp	r3, r2
 800cff4:	d007      	beq.n	800d006 <TIM_OC3_SetConfig+0xbe>
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	4a1b      	ldr	r2, [pc, #108]	; (800d068 <TIM_OC3_SetConfig+0x120>)
 800cffa:	4293      	cmp	r3, r2
 800cffc:	d003      	beq.n	800d006 <TIM_OC3_SetConfig+0xbe>
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	4a16      	ldr	r2, [pc, #88]	; (800d05c <TIM_OC3_SetConfig+0x114>)
 800d002:	4293      	cmp	r3, r2
 800d004:	d113      	bne.n	800d02e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d006:	693b      	ldr	r3, [r7, #16]
 800d008:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d00c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d00e:	693b      	ldr	r3, [r7, #16]
 800d010:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d014:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	695b      	ldr	r3, [r3, #20]
 800d01a:	011b      	lsls	r3, r3, #4
 800d01c:	693a      	ldr	r2, [r7, #16]
 800d01e:	4313      	orrs	r3, r2
 800d020:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	699b      	ldr	r3, [r3, #24]
 800d026:	011b      	lsls	r3, r3, #4
 800d028:	693a      	ldr	r2, [r7, #16]
 800d02a:	4313      	orrs	r3, r2
 800d02c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	693a      	ldr	r2, [r7, #16]
 800d032:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	68fa      	ldr	r2, [r7, #12]
 800d038:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	685a      	ldr	r2, [r3, #4]
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	697a      	ldr	r2, [r7, #20]
 800d046:	621a      	str	r2, [r3, #32]
}
 800d048:	bf00      	nop
 800d04a:	371c      	adds	r7, #28
 800d04c:	46bd      	mov	sp, r7
 800d04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d052:	4770      	bx	lr
 800d054:	40012c00 	.word	0x40012c00
 800d058:	40013400 	.word	0x40013400
 800d05c:	40015000 	.word	0x40015000
 800d060:	40014000 	.word	0x40014000
 800d064:	40014400 	.word	0x40014400
 800d068:	40014800 	.word	0x40014800

0800d06c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d06c:	b480      	push	{r7}
 800d06e:	b087      	sub	sp, #28
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
 800d074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	6a1b      	ldr	r3, [r3, #32]
 800d07a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	6a1b      	ldr	r3, [r3, #32]
 800d086:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	685b      	ldr	r3, [r3, #4]
 800d08c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	69db      	ldr	r3, [r3, #28]
 800d092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d09a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d09e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d0a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	021b      	lsls	r3, r3, #8
 800d0ae:	68fa      	ldr	r2, [r7, #12]
 800d0b0:	4313      	orrs	r3, r2
 800d0b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d0b4:	697b      	ldr	r3, [r7, #20]
 800d0b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d0ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	689b      	ldr	r3, [r3, #8]
 800d0c0:	031b      	lsls	r3, r3, #12
 800d0c2:	697a      	ldr	r2, [r7, #20]
 800d0c4:	4313      	orrs	r3, r2
 800d0c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	4a2c      	ldr	r2, [pc, #176]	; (800d17c <TIM_OC4_SetConfig+0x110>)
 800d0cc:	4293      	cmp	r3, r2
 800d0ce:	d007      	beq.n	800d0e0 <TIM_OC4_SetConfig+0x74>
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	4a2b      	ldr	r2, [pc, #172]	; (800d180 <TIM_OC4_SetConfig+0x114>)
 800d0d4:	4293      	cmp	r3, r2
 800d0d6:	d003      	beq.n	800d0e0 <TIM_OC4_SetConfig+0x74>
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	4a2a      	ldr	r2, [pc, #168]	; (800d184 <TIM_OC4_SetConfig+0x118>)
 800d0dc:	4293      	cmp	r3, r2
 800d0de:	d10d      	bne.n	800d0fc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800d0e0:	697b      	ldr	r3, [r7, #20]
 800d0e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d0e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	68db      	ldr	r3, [r3, #12]
 800d0ec:	031b      	lsls	r3, r3, #12
 800d0ee:	697a      	ldr	r2, [r7, #20]
 800d0f0:	4313      	orrs	r3, r2
 800d0f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800d0f4:	697b      	ldr	r3, [r7, #20]
 800d0f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d0fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	4a1f      	ldr	r2, [pc, #124]	; (800d17c <TIM_OC4_SetConfig+0x110>)
 800d100:	4293      	cmp	r3, r2
 800d102:	d013      	beq.n	800d12c <TIM_OC4_SetConfig+0xc0>
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	4a1e      	ldr	r2, [pc, #120]	; (800d180 <TIM_OC4_SetConfig+0x114>)
 800d108:	4293      	cmp	r3, r2
 800d10a:	d00f      	beq.n	800d12c <TIM_OC4_SetConfig+0xc0>
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	4a1e      	ldr	r2, [pc, #120]	; (800d188 <TIM_OC4_SetConfig+0x11c>)
 800d110:	4293      	cmp	r3, r2
 800d112:	d00b      	beq.n	800d12c <TIM_OC4_SetConfig+0xc0>
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	4a1d      	ldr	r2, [pc, #116]	; (800d18c <TIM_OC4_SetConfig+0x120>)
 800d118:	4293      	cmp	r3, r2
 800d11a:	d007      	beq.n	800d12c <TIM_OC4_SetConfig+0xc0>
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	4a1c      	ldr	r2, [pc, #112]	; (800d190 <TIM_OC4_SetConfig+0x124>)
 800d120:	4293      	cmp	r3, r2
 800d122:	d003      	beq.n	800d12c <TIM_OC4_SetConfig+0xc0>
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	4a17      	ldr	r2, [pc, #92]	; (800d184 <TIM_OC4_SetConfig+0x118>)
 800d128:	4293      	cmp	r3, r2
 800d12a:	d113      	bne.n	800d154 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d12c:	693b      	ldr	r3, [r7, #16]
 800d12e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d132:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800d134:	693b      	ldr	r3, [r7, #16]
 800d136:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d13a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	695b      	ldr	r3, [r3, #20]
 800d140:	019b      	lsls	r3, r3, #6
 800d142:	693a      	ldr	r2, [r7, #16]
 800d144:	4313      	orrs	r3, r2
 800d146:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	699b      	ldr	r3, [r3, #24]
 800d14c:	019b      	lsls	r3, r3, #6
 800d14e:	693a      	ldr	r2, [r7, #16]
 800d150:	4313      	orrs	r3, r2
 800d152:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	693a      	ldr	r2, [r7, #16]
 800d158:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	68fa      	ldr	r2, [r7, #12]
 800d15e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	685a      	ldr	r2, [r3, #4]
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	697a      	ldr	r2, [r7, #20]
 800d16c:	621a      	str	r2, [r3, #32]
}
 800d16e:	bf00      	nop
 800d170:	371c      	adds	r7, #28
 800d172:	46bd      	mov	sp, r7
 800d174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d178:	4770      	bx	lr
 800d17a:	bf00      	nop
 800d17c:	40012c00 	.word	0x40012c00
 800d180:	40013400 	.word	0x40013400
 800d184:	40015000 	.word	0x40015000
 800d188:	40014000 	.word	0x40014000
 800d18c:	40014400 	.word	0x40014400
 800d190:	40014800 	.word	0x40014800

0800d194 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d194:	b480      	push	{r7}
 800d196:	b087      	sub	sp, #28
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
 800d19c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6a1b      	ldr	r3, [r3, #32]
 800d1a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6a1b      	ldr	r3, [r3, #32]
 800d1ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	685b      	ldr	r3, [r3, #4]
 800d1b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d1c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d1c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	68fa      	ldr	r2, [r7, #12]
 800d1ce:	4313      	orrs	r3, r2
 800d1d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d1d2:	693b      	ldr	r3, [r7, #16]
 800d1d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d1d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	689b      	ldr	r3, [r3, #8]
 800d1de:	041b      	lsls	r3, r3, #16
 800d1e0:	693a      	ldr	r2, [r7, #16]
 800d1e2:	4313      	orrs	r3, r2
 800d1e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	4a19      	ldr	r2, [pc, #100]	; (800d250 <TIM_OC5_SetConfig+0xbc>)
 800d1ea:	4293      	cmp	r3, r2
 800d1ec:	d013      	beq.n	800d216 <TIM_OC5_SetConfig+0x82>
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	4a18      	ldr	r2, [pc, #96]	; (800d254 <TIM_OC5_SetConfig+0xc0>)
 800d1f2:	4293      	cmp	r3, r2
 800d1f4:	d00f      	beq.n	800d216 <TIM_OC5_SetConfig+0x82>
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	4a17      	ldr	r2, [pc, #92]	; (800d258 <TIM_OC5_SetConfig+0xc4>)
 800d1fa:	4293      	cmp	r3, r2
 800d1fc:	d00b      	beq.n	800d216 <TIM_OC5_SetConfig+0x82>
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	4a16      	ldr	r2, [pc, #88]	; (800d25c <TIM_OC5_SetConfig+0xc8>)
 800d202:	4293      	cmp	r3, r2
 800d204:	d007      	beq.n	800d216 <TIM_OC5_SetConfig+0x82>
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	4a15      	ldr	r2, [pc, #84]	; (800d260 <TIM_OC5_SetConfig+0xcc>)
 800d20a:	4293      	cmp	r3, r2
 800d20c:	d003      	beq.n	800d216 <TIM_OC5_SetConfig+0x82>
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	4a14      	ldr	r2, [pc, #80]	; (800d264 <TIM_OC5_SetConfig+0xd0>)
 800d212:	4293      	cmp	r3, r2
 800d214:	d109      	bne.n	800d22a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d216:	697b      	ldr	r3, [r7, #20]
 800d218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d21c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	695b      	ldr	r3, [r3, #20]
 800d222:	021b      	lsls	r3, r3, #8
 800d224:	697a      	ldr	r2, [r7, #20]
 800d226:	4313      	orrs	r3, r2
 800d228:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	697a      	ldr	r2, [r7, #20]
 800d22e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	68fa      	ldr	r2, [r7, #12]
 800d234:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	685a      	ldr	r2, [r3, #4]
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	693a      	ldr	r2, [r7, #16]
 800d242:	621a      	str	r2, [r3, #32]
}
 800d244:	bf00      	nop
 800d246:	371c      	adds	r7, #28
 800d248:	46bd      	mov	sp, r7
 800d24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24e:	4770      	bx	lr
 800d250:	40012c00 	.word	0x40012c00
 800d254:	40013400 	.word	0x40013400
 800d258:	40014000 	.word	0x40014000
 800d25c:	40014400 	.word	0x40014400
 800d260:	40014800 	.word	0x40014800
 800d264:	40015000 	.word	0x40015000

0800d268 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d268:	b480      	push	{r7}
 800d26a:	b087      	sub	sp, #28
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
 800d270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	6a1b      	ldr	r3, [r3, #32]
 800d276:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6a1b      	ldr	r3, [r3, #32]
 800d282:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	685b      	ldr	r3, [r3, #4]
 800d288:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d28e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d29a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	021b      	lsls	r3, r3, #8
 800d2a2:	68fa      	ldr	r2, [r7, #12]
 800d2a4:	4313      	orrs	r3, r2
 800d2a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d2a8:	693b      	ldr	r3, [r7, #16]
 800d2aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d2ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	689b      	ldr	r3, [r3, #8]
 800d2b4:	051b      	lsls	r3, r3, #20
 800d2b6:	693a      	ldr	r2, [r7, #16]
 800d2b8:	4313      	orrs	r3, r2
 800d2ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	4a1a      	ldr	r2, [pc, #104]	; (800d328 <TIM_OC6_SetConfig+0xc0>)
 800d2c0:	4293      	cmp	r3, r2
 800d2c2:	d013      	beq.n	800d2ec <TIM_OC6_SetConfig+0x84>
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	4a19      	ldr	r2, [pc, #100]	; (800d32c <TIM_OC6_SetConfig+0xc4>)
 800d2c8:	4293      	cmp	r3, r2
 800d2ca:	d00f      	beq.n	800d2ec <TIM_OC6_SetConfig+0x84>
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	4a18      	ldr	r2, [pc, #96]	; (800d330 <TIM_OC6_SetConfig+0xc8>)
 800d2d0:	4293      	cmp	r3, r2
 800d2d2:	d00b      	beq.n	800d2ec <TIM_OC6_SetConfig+0x84>
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	4a17      	ldr	r2, [pc, #92]	; (800d334 <TIM_OC6_SetConfig+0xcc>)
 800d2d8:	4293      	cmp	r3, r2
 800d2da:	d007      	beq.n	800d2ec <TIM_OC6_SetConfig+0x84>
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	4a16      	ldr	r2, [pc, #88]	; (800d338 <TIM_OC6_SetConfig+0xd0>)
 800d2e0:	4293      	cmp	r3, r2
 800d2e2:	d003      	beq.n	800d2ec <TIM_OC6_SetConfig+0x84>
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	4a15      	ldr	r2, [pc, #84]	; (800d33c <TIM_OC6_SetConfig+0xd4>)
 800d2e8:	4293      	cmp	r3, r2
 800d2ea:	d109      	bne.n	800d300 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d2ec:	697b      	ldr	r3, [r7, #20]
 800d2ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d2f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	695b      	ldr	r3, [r3, #20]
 800d2f8:	029b      	lsls	r3, r3, #10
 800d2fa:	697a      	ldr	r2, [r7, #20]
 800d2fc:	4313      	orrs	r3, r2
 800d2fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	697a      	ldr	r2, [r7, #20]
 800d304:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	68fa      	ldr	r2, [r7, #12]
 800d30a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	685a      	ldr	r2, [r3, #4]
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	693a      	ldr	r2, [r7, #16]
 800d318:	621a      	str	r2, [r3, #32]
}
 800d31a:	bf00      	nop
 800d31c:	371c      	adds	r7, #28
 800d31e:	46bd      	mov	sp, r7
 800d320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d324:	4770      	bx	lr
 800d326:	bf00      	nop
 800d328:	40012c00 	.word	0x40012c00
 800d32c:	40013400 	.word	0x40013400
 800d330:	40014000 	.word	0x40014000
 800d334:	40014400 	.word	0x40014400
 800d338:	40014800 	.word	0x40014800
 800d33c:	40015000 	.word	0x40015000

0800d340 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d340:	b480      	push	{r7}
 800d342:	b087      	sub	sp, #28
 800d344:	af00      	add	r7, sp, #0
 800d346:	60f8      	str	r0, [r7, #12]
 800d348:	60b9      	str	r1, [r7, #8]
 800d34a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	6a1b      	ldr	r3, [r3, #32]
 800d350:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	6a1b      	ldr	r3, [r3, #32]
 800d356:	f023 0201 	bic.w	r2, r3, #1
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	699b      	ldr	r3, [r3, #24]
 800d362:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d364:	693b      	ldr	r3, [r7, #16]
 800d366:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d36a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	011b      	lsls	r3, r3, #4
 800d370:	693a      	ldr	r2, [r7, #16]
 800d372:	4313      	orrs	r3, r2
 800d374:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	f023 030a 	bic.w	r3, r3, #10
 800d37c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d37e:	697a      	ldr	r2, [r7, #20]
 800d380:	68bb      	ldr	r3, [r7, #8]
 800d382:	4313      	orrs	r3, r2
 800d384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	693a      	ldr	r2, [r7, #16]
 800d38a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	697a      	ldr	r2, [r7, #20]
 800d390:	621a      	str	r2, [r3, #32]
}
 800d392:	bf00      	nop
 800d394:	371c      	adds	r7, #28
 800d396:	46bd      	mov	sp, r7
 800d398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39c:	4770      	bx	lr

0800d39e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d39e:	b480      	push	{r7}
 800d3a0:	b087      	sub	sp, #28
 800d3a2:	af00      	add	r7, sp, #0
 800d3a4:	60f8      	str	r0, [r7, #12]
 800d3a6:	60b9      	str	r1, [r7, #8]
 800d3a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	6a1b      	ldr	r3, [r3, #32]
 800d3ae:	f023 0210 	bic.w	r2, r3, #16
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	699b      	ldr	r3, [r3, #24]
 800d3ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	6a1b      	ldr	r3, [r3, #32]
 800d3c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d3c2:	697b      	ldr	r3, [r7, #20]
 800d3c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d3c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	031b      	lsls	r3, r3, #12
 800d3ce:	697a      	ldr	r2, [r7, #20]
 800d3d0:	4313      	orrs	r3, r2
 800d3d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d3d4:	693b      	ldr	r3, [r7, #16]
 800d3d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d3da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	011b      	lsls	r3, r3, #4
 800d3e0:	693a      	ldr	r2, [r7, #16]
 800d3e2:	4313      	orrs	r3, r2
 800d3e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	697a      	ldr	r2, [r7, #20]
 800d3ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	693a      	ldr	r2, [r7, #16]
 800d3f0:	621a      	str	r2, [r3, #32]
}
 800d3f2:	bf00      	nop
 800d3f4:	371c      	adds	r7, #28
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fc:	4770      	bx	lr

0800d3fe <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d3fe:	b480      	push	{r7}
 800d400:	b085      	sub	sp, #20
 800d402:	af00      	add	r7, sp, #0
 800d404:	6078      	str	r0, [r7, #4]
 800d406:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	689b      	ldr	r3, [r3, #8]
 800d40c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800d414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d418:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d41a:	683a      	ldr	r2, [r7, #0]
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	4313      	orrs	r3, r2
 800d420:	f043 0307 	orr.w	r3, r3, #7
 800d424:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	68fa      	ldr	r2, [r7, #12]
 800d42a:	609a      	str	r2, [r3, #8]
}
 800d42c:	bf00      	nop
 800d42e:	3714      	adds	r7, #20
 800d430:	46bd      	mov	sp, r7
 800d432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d436:	4770      	bx	lr

0800d438 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d438:	b480      	push	{r7}
 800d43a:	b087      	sub	sp, #28
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	60f8      	str	r0, [r7, #12]
 800d440:	60b9      	str	r1, [r7, #8]
 800d442:	607a      	str	r2, [r7, #4]
 800d444:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	689b      	ldr	r3, [r3, #8]
 800d44a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d44c:	697b      	ldr	r3, [r7, #20]
 800d44e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d452:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	021a      	lsls	r2, r3, #8
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	431a      	orrs	r2, r3
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	4313      	orrs	r3, r2
 800d460:	697a      	ldr	r2, [r7, #20]
 800d462:	4313      	orrs	r3, r2
 800d464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	697a      	ldr	r2, [r7, #20]
 800d46a:	609a      	str	r2, [r3, #8]
}
 800d46c:	bf00      	nop
 800d46e:	371c      	adds	r7, #28
 800d470:	46bd      	mov	sp, r7
 800d472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d476:	4770      	bx	lr

0800d478 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d478:	b480      	push	{r7}
 800d47a:	b087      	sub	sp, #28
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	60f8      	str	r0, [r7, #12]
 800d480:	60b9      	str	r1, [r7, #8]
 800d482:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d484:	68bb      	ldr	r3, [r7, #8]
 800d486:	f003 031f 	and.w	r3, r3, #31
 800d48a:	2201      	movs	r2, #1
 800d48c:	fa02 f303 	lsl.w	r3, r2, r3
 800d490:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	6a1a      	ldr	r2, [r3, #32]
 800d496:	697b      	ldr	r3, [r7, #20]
 800d498:	43db      	mvns	r3, r3
 800d49a:	401a      	ands	r2, r3
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	6a1a      	ldr	r2, [r3, #32]
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	f003 031f 	and.w	r3, r3, #31
 800d4aa:	6879      	ldr	r1, [r7, #4]
 800d4ac:	fa01 f303 	lsl.w	r3, r1, r3
 800d4b0:	431a      	orrs	r2, r3
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	621a      	str	r2, [r3, #32]
}
 800d4b6:	bf00      	nop
 800d4b8:	371c      	adds	r7, #28
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c0:	4770      	bx	lr
	...

0800d4c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b085      	sub	sp, #20
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
 800d4cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d4d4:	2b01      	cmp	r3, #1
 800d4d6:	d101      	bne.n	800d4dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d4d8:	2302      	movs	r3, #2
 800d4da:	e074      	b.n	800d5c6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2201      	movs	r2, #1
 800d4e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2202      	movs	r2, #2
 800d4e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	685b      	ldr	r3, [r3, #4]
 800d4f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	689b      	ldr	r3, [r3, #8]
 800d4fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	4a34      	ldr	r2, [pc, #208]	; (800d5d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d502:	4293      	cmp	r3, r2
 800d504:	d009      	beq.n	800d51a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	4a33      	ldr	r2, [pc, #204]	; (800d5d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d50c:	4293      	cmp	r3, r2
 800d50e:	d004      	beq.n	800d51a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	4a31      	ldr	r2, [pc, #196]	; (800d5dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d516:	4293      	cmp	r3, r2
 800d518:	d108      	bne.n	800d52c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d520:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	685b      	ldr	r3, [r3, #4]
 800d526:	68fa      	ldr	r2, [r7, #12]
 800d528:	4313      	orrs	r3, r2
 800d52a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800d532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d536:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	68fa      	ldr	r2, [r7, #12]
 800d53e:	4313      	orrs	r3, r2
 800d540:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	68fa      	ldr	r2, [r7, #12]
 800d548:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	4a21      	ldr	r2, [pc, #132]	; (800d5d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d550:	4293      	cmp	r3, r2
 800d552:	d022      	beq.n	800d59a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d55c:	d01d      	beq.n	800d59a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	4a1f      	ldr	r2, [pc, #124]	; (800d5e0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800d564:	4293      	cmp	r3, r2
 800d566:	d018      	beq.n	800d59a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	4a1d      	ldr	r2, [pc, #116]	; (800d5e4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800d56e:	4293      	cmp	r3, r2
 800d570:	d013      	beq.n	800d59a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	4a1c      	ldr	r2, [pc, #112]	; (800d5e8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800d578:	4293      	cmp	r3, r2
 800d57a:	d00e      	beq.n	800d59a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	4a15      	ldr	r2, [pc, #84]	; (800d5d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d582:	4293      	cmp	r3, r2
 800d584:	d009      	beq.n	800d59a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	4a18      	ldr	r2, [pc, #96]	; (800d5ec <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800d58c:	4293      	cmp	r3, r2
 800d58e:	d004      	beq.n	800d59a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	4a11      	ldr	r2, [pc, #68]	; (800d5dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d596:	4293      	cmp	r3, r2
 800d598:	d10c      	bne.n	800d5b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d5a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	689b      	ldr	r3, [r3, #8]
 800d5a6:	68ba      	ldr	r2, [r7, #8]
 800d5a8:	4313      	orrs	r3, r2
 800d5aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	68ba      	ldr	r2, [r7, #8]
 800d5b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	2201      	movs	r2, #1
 800d5b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2200      	movs	r2, #0
 800d5c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d5c4:	2300      	movs	r3, #0
}
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	3714      	adds	r7, #20
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d0:	4770      	bx	lr
 800d5d2:	bf00      	nop
 800d5d4:	40012c00 	.word	0x40012c00
 800d5d8:	40013400 	.word	0x40013400
 800d5dc:	40015000 	.word	0x40015000
 800d5e0:	40000400 	.word	0x40000400
 800d5e4:	40000800 	.word	0x40000800
 800d5e8:	40000c00 	.word	0x40000c00
 800d5ec:	40014000 	.word	0x40014000

0800d5f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d5f0:	b480      	push	{r7}
 800d5f2:	b085      	sub	sp, #20
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
 800d5f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d604:	2b01      	cmp	r3, #1
 800d606:	d101      	bne.n	800d60c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d608:	2302      	movs	r3, #2
 800d60a:	e096      	b.n	800d73a <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2201      	movs	r2, #1
 800d610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	68db      	ldr	r3, [r3, #12]
 800d61e:	4313      	orrs	r3, r2
 800d620:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	689b      	ldr	r3, [r3, #8]
 800d62c:	4313      	orrs	r3, r2
 800d62e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	685b      	ldr	r3, [r3, #4]
 800d63a:	4313      	orrs	r3, r2
 800d63c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	4313      	orrs	r3, r2
 800d64a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d652:	683b      	ldr	r3, [r7, #0]
 800d654:	691b      	ldr	r3, [r3, #16]
 800d656:	4313      	orrs	r3, r2
 800d658:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d660:	683b      	ldr	r3, [r7, #0]
 800d662:	695b      	ldr	r3, [r3, #20]
 800d664:	4313      	orrs	r3, r2
 800d666:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d66e:	683b      	ldr	r3, [r7, #0]
 800d670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d672:	4313      	orrs	r3, r2
 800d674:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	699b      	ldr	r3, [r3, #24]
 800d680:	041b      	lsls	r3, r3, #16
 800d682:	4313      	orrs	r3, r2
 800d684:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	4a2f      	ldr	r2, [pc, #188]	; (800d748 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800d68c:	4293      	cmp	r3, r2
 800d68e:	d009      	beq.n	800d6a4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	4a2d      	ldr	r2, [pc, #180]	; (800d74c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800d696:	4293      	cmp	r3, r2
 800d698:	d004      	beq.n	800d6a4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	4a2c      	ldr	r2, [pc, #176]	; (800d750 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800d6a0:	4293      	cmp	r3, r2
 800d6a2:	d106      	bne.n	800d6b2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	69db      	ldr	r3, [r3, #28]
 800d6ae:	4313      	orrs	r3, r2
 800d6b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	4a24      	ldr	r2, [pc, #144]	; (800d748 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800d6b8:	4293      	cmp	r3, r2
 800d6ba:	d009      	beq.n	800d6d0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	4a22      	ldr	r2, [pc, #136]	; (800d74c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800d6c2:	4293      	cmp	r3, r2
 800d6c4:	d004      	beq.n	800d6d0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	4a21      	ldr	r2, [pc, #132]	; (800d750 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800d6cc:	4293      	cmp	r3, r2
 800d6ce:	d12b      	bne.n	800d728 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6da:	051b      	lsls	r3, r3, #20
 800d6dc:	4313      	orrs	r3, r2
 800d6de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	6a1b      	ldr	r3, [r3, #32]
 800d6ea:	4313      	orrs	r3, r2
 800d6ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6f8:	4313      	orrs	r3, r2
 800d6fa:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	4a11      	ldr	r2, [pc, #68]	; (800d748 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800d702:	4293      	cmp	r3, r2
 800d704:	d009      	beq.n	800d71a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	4a10      	ldr	r2, [pc, #64]	; (800d74c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800d70c:	4293      	cmp	r3, r2
 800d70e:	d004      	beq.n	800d71a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	4a0e      	ldr	r2, [pc, #56]	; (800d750 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800d716:	4293      	cmp	r3, r2
 800d718:	d106      	bne.n	800d728 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d724:	4313      	orrs	r3, r2
 800d726:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	68fa      	ldr	r2, [r7, #12]
 800d72e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2200      	movs	r2, #0
 800d734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d738:	2300      	movs	r3, #0
}
 800d73a:	4618      	mov	r0, r3
 800d73c:	3714      	adds	r7, #20
 800d73e:	46bd      	mov	sp, r7
 800d740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d744:	4770      	bx	lr
 800d746:	bf00      	nop
 800d748:	40012c00 	.word	0x40012c00
 800d74c:	40013400 	.word	0x40013400
 800d750:	40015000 	.word	0x40015000

0800d754 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d754:	b480      	push	{r7}
 800d756:	b083      	sub	sp, #12
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d75c:	bf00      	nop
 800d75e:	370c      	adds	r7, #12
 800d760:	46bd      	mov	sp, r7
 800d762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d766:	4770      	bx	lr

0800d768 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d768:	b480      	push	{r7}
 800d76a:	b083      	sub	sp, #12
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d770:	bf00      	nop
 800d772:	370c      	adds	r7, #12
 800d774:	46bd      	mov	sp, r7
 800d776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77a:	4770      	bx	lr

0800d77c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d77c:	b480      	push	{r7}
 800d77e:	b083      	sub	sp, #12
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d784:	bf00      	nop
 800d786:	370c      	adds	r7, #12
 800d788:	46bd      	mov	sp, r7
 800d78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78e:	4770      	bx	lr

0800d790 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800d790:	b480      	push	{r7}
 800d792:	b083      	sub	sp, #12
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800d798:	bf00      	nop
 800d79a:	370c      	adds	r7, #12
 800d79c:	46bd      	mov	sp, r7
 800d79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a2:	4770      	bx	lr

0800d7a4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800d7a4:	b480      	push	{r7}
 800d7a6:	b083      	sub	sp, #12
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800d7ac:	bf00      	nop
 800d7ae:	370c      	adds	r7, #12
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b6:	4770      	bx	lr

0800d7b8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800d7b8:	b480      	push	{r7}
 800d7ba:	b083      	sub	sp, #12
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800d7c0:	bf00      	nop
 800d7c2:	370c      	adds	r7, #12
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ca:	4770      	bx	lr

0800d7cc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800d7cc:	b480      	push	{r7}
 800d7ce:	b083      	sub	sp, #12
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800d7d4:	bf00      	nop
 800d7d6:	370c      	adds	r7, #12
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7de:	4770      	bx	lr

0800d7e0 <LL_EXTI_EnableIT_0_31>:
{
 800d7e0:	b480      	push	{r7}
 800d7e2:	b083      	sub	sp, #12
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800d7e8:	4b05      	ldr	r3, [pc, #20]	; (800d800 <LL_EXTI_EnableIT_0_31+0x20>)
 800d7ea:	681a      	ldr	r2, [r3, #0]
 800d7ec:	4904      	ldr	r1, [pc, #16]	; (800d800 <LL_EXTI_EnableIT_0_31+0x20>)
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	4313      	orrs	r3, r2
 800d7f2:	600b      	str	r3, [r1, #0]
}
 800d7f4:	bf00      	nop
 800d7f6:	370c      	adds	r7, #12
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fe:	4770      	bx	lr
 800d800:	40010400 	.word	0x40010400

0800d804 <LL_EXTI_EnableIT_32_63>:
{
 800d804:	b480      	push	{r7}
 800d806:	b083      	sub	sp, #12
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800d80c:	4b05      	ldr	r3, [pc, #20]	; (800d824 <LL_EXTI_EnableIT_32_63+0x20>)
 800d80e:	6a1a      	ldr	r2, [r3, #32]
 800d810:	4904      	ldr	r1, [pc, #16]	; (800d824 <LL_EXTI_EnableIT_32_63+0x20>)
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	4313      	orrs	r3, r2
 800d816:	620b      	str	r3, [r1, #32]
}
 800d818:	bf00      	nop
 800d81a:	370c      	adds	r7, #12
 800d81c:	46bd      	mov	sp, r7
 800d81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d822:	4770      	bx	lr
 800d824:	40010400 	.word	0x40010400

0800d828 <LL_EXTI_DisableIT_0_31>:
{
 800d828:	b480      	push	{r7}
 800d82a:	b083      	sub	sp, #12
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800d830:	4b06      	ldr	r3, [pc, #24]	; (800d84c <LL_EXTI_DisableIT_0_31+0x24>)
 800d832:	681a      	ldr	r2, [r3, #0]
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	43db      	mvns	r3, r3
 800d838:	4904      	ldr	r1, [pc, #16]	; (800d84c <LL_EXTI_DisableIT_0_31+0x24>)
 800d83a:	4013      	ands	r3, r2
 800d83c:	600b      	str	r3, [r1, #0]
}
 800d83e:	bf00      	nop
 800d840:	370c      	adds	r7, #12
 800d842:	46bd      	mov	sp, r7
 800d844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d848:	4770      	bx	lr
 800d84a:	bf00      	nop
 800d84c:	40010400 	.word	0x40010400

0800d850 <LL_EXTI_DisableIT_32_63>:
{
 800d850:	b480      	push	{r7}
 800d852:	b083      	sub	sp, #12
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800d858:	4b06      	ldr	r3, [pc, #24]	; (800d874 <LL_EXTI_DisableIT_32_63+0x24>)
 800d85a:	6a1a      	ldr	r2, [r3, #32]
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	43db      	mvns	r3, r3
 800d860:	4904      	ldr	r1, [pc, #16]	; (800d874 <LL_EXTI_DisableIT_32_63+0x24>)
 800d862:	4013      	ands	r3, r2
 800d864:	620b      	str	r3, [r1, #32]
}
 800d866:	bf00      	nop
 800d868:	370c      	adds	r7, #12
 800d86a:	46bd      	mov	sp, r7
 800d86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d870:	4770      	bx	lr
 800d872:	bf00      	nop
 800d874:	40010400 	.word	0x40010400

0800d878 <LL_EXTI_EnableEvent_0_31>:
{
 800d878:	b480      	push	{r7}
 800d87a:	b083      	sub	sp, #12
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800d880:	4b05      	ldr	r3, [pc, #20]	; (800d898 <LL_EXTI_EnableEvent_0_31+0x20>)
 800d882:	685a      	ldr	r2, [r3, #4]
 800d884:	4904      	ldr	r1, [pc, #16]	; (800d898 <LL_EXTI_EnableEvent_0_31+0x20>)
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	4313      	orrs	r3, r2
 800d88a:	604b      	str	r3, [r1, #4]
}
 800d88c:	bf00      	nop
 800d88e:	370c      	adds	r7, #12
 800d890:	46bd      	mov	sp, r7
 800d892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d896:	4770      	bx	lr
 800d898:	40010400 	.word	0x40010400

0800d89c <LL_EXTI_EnableEvent_32_63>:
{
 800d89c:	b480      	push	{r7}
 800d89e:	b083      	sub	sp, #12
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800d8a4:	4b05      	ldr	r3, [pc, #20]	; (800d8bc <LL_EXTI_EnableEvent_32_63+0x20>)
 800d8a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d8a8:	4904      	ldr	r1, [pc, #16]	; (800d8bc <LL_EXTI_EnableEvent_32_63+0x20>)
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	4313      	orrs	r3, r2
 800d8ae:	624b      	str	r3, [r1, #36]	; 0x24
}
 800d8b0:	bf00      	nop
 800d8b2:	370c      	adds	r7, #12
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ba:	4770      	bx	lr
 800d8bc:	40010400 	.word	0x40010400

0800d8c0 <LL_EXTI_DisableEvent_0_31>:
{
 800d8c0:	b480      	push	{r7}
 800d8c2:	b083      	sub	sp, #12
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800d8c8:	4b06      	ldr	r3, [pc, #24]	; (800d8e4 <LL_EXTI_DisableEvent_0_31+0x24>)
 800d8ca:	685a      	ldr	r2, [r3, #4]
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	43db      	mvns	r3, r3
 800d8d0:	4904      	ldr	r1, [pc, #16]	; (800d8e4 <LL_EXTI_DisableEvent_0_31+0x24>)
 800d8d2:	4013      	ands	r3, r2
 800d8d4:	604b      	str	r3, [r1, #4]
}
 800d8d6:	bf00      	nop
 800d8d8:	370c      	adds	r7, #12
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e0:	4770      	bx	lr
 800d8e2:	bf00      	nop
 800d8e4:	40010400 	.word	0x40010400

0800d8e8 <LL_EXTI_DisableEvent_32_63>:
{
 800d8e8:	b480      	push	{r7}
 800d8ea:	b083      	sub	sp, #12
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800d8f0:	4b06      	ldr	r3, [pc, #24]	; (800d90c <LL_EXTI_DisableEvent_32_63+0x24>)
 800d8f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	43db      	mvns	r3, r3
 800d8f8:	4904      	ldr	r1, [pc, #16]	; (800d90c <LL_EXTI_DisableEvent_32_63+0x24>)
 800d8fa:	4013      	ands	r3, r2
 800d8fc:	624b      	str	r3, [r1, #36]	; 0x24
}
 800d8fe:	bf00      	nop
 800d900:	370c      	adds	r7, #12
 800d902:	46bd      	mov	sp, r7
 800d904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d908:	4770      	bx	lr
 800d90a:	bf00      	nop
 800d90c:	40010400 	.word	0x40010400

0800d910 <LL_EXTI_EnableRisingTrig_0_31>:
{
 800d910:	b480      	push	{r7}
 800d912:	b083      	sub	sp, #12
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800d918:	4b05      	ldr	r3, [pc, #20]	; (800d930 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800d91a:	689a      	ldr	r2, [r3, #8]
 800d91c:	4904      	ldr	r1, [pc, #16]	; (800d930 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	4313      	orrs	r3, r2
 800d922:	608b      	str	r3, [r1, #8]
}
 800d924:	bf00      	nop
 800d926:	370c      	adds	r7, #12
 800d928:	46bd      	mov	sp, r7
 800d92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92e:	4770      	bx	lr
 800d930:	40010400 	.word	0x40010400

0800d934 <LL_EXTI_EnableRisingTrig_32_63>:
{
 800d934:	b480      	push	{r7}
 800d936:	b083      	sub	sp, #12
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800d93c:	4b05      	ldr	r3, [pc, #20]	; (800d954 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800d93e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d940:	4904      	ldr	r1, [pc, #16]	; (800d954 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	4313      	orrs	r3, r2
 800d946:	628b      	str	r3, [r1, #40]	; 0x28
}
 800d948:	bf00      	nop
 800d94a:	370c      	adds	r7, #12
 800d94c:	46bd      	mov	sp, r7
 800d94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d952:	4770      	bx	lr
 800d954:	40010400 	.word	0x40010400

0800d958 <LL_EXTI_DisableRisingTrig_0_31>:
{
 800d958:	b480      	push	{r7}
 800d95a:	b083      	sub	sp, #12
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800d960:	4b06      	ldr	r3, [pc, #24]	; (800d97c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800d962:	689a      	ldr	r2, [r3, #8]
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	43db      	mvns	r3, r3
 800d968:	4904      	ldr	r1, [pc, #16]	; (800d97c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800d96a:	4013      	ands	r3, r2
 800d96c:	608b      	str	r3, [r1, #8]
}
 800d96e:	bf00      	nop
 800d970:	370c      	adds	r7, #12
 800d972:	46bd      	mov	sp, r7
 800d974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d978:	4770      	bx	lr
 800d97a:	bf00      	nop
 800d97c:	40010400 	.word	0x40010400

0800d980 <LL_EXTI_DisableRisingTrig_32_63>:
{
 800d980:	b480      	push	{r7}
 800d982:	b083      	sub	sp, #12
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800d988:	4b06      	ldr	r3, [pc, #24]	; (800d9a4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800d98a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	43db      	mvns	r3, r3
 800d990:	4904      	ldr	r1, [pc, #16]	; (800d9a4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800d992:	4013      	ands	r3, r2
 800d994:	628b      	str	r3, [r1, #40]	; 0x28
}
 800d996:	bf00      	nop
 800d998:	370c      	adds	r7, #12
 800d99a:	46bd      	mov	sp, r7
 800d99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a0:	4770      	bx	lr
 800d9a2:	bf00      	nop
 800d9a4:	40010400 	.word	0x40010400

0800d9a8 <LL_EXTI_EnableFallingTrig_0_31>:
{
 800d9a8:	b480      	push	{r7}
 800d9aa:	b083      	sub	sp, #12
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800d9b0:	4b05      	ldr	r3, [pc, #20]	; (800d9c8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800d9b2:	68da      	ldr	r2, [r3, #12]
 800d9b4:	4904      	ldr	r1, [pc, #16]	; (800d9c8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	4313      	orrs	r3, r2
 800d9ba:	60cb      	str	r3, [r1, #12]
}
 800d9bc:	bf00      	nop
 800d9be:	370c      	adds	r7, #12
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c6:	4770      	bx	lr
 800d9c8:	40010400 	.word	0x40010400

0800d9cc <LL_EXTI_EnableFallingTrig_32_63>:
{
 800d9cc:	b480      	push	{r7}
 800d9ce:	b083      	sub	sp, #12
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800d9d4:	4b05      	ldr	r3, [pc, #20]	; (800d9ec <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800d9d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9d8:	4904      	ldr	r1, [pc, #16]	; (800d9ec <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	4313      	orrs	r3, r2
 800d9de:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800d9e0:	bf00      	nop
 800d9e2:	370c      	adds	r7, #12
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ea:	4770      	bx	lr
 800d9ec:	40010400 	.word	0x40010400

0800d9f0 <LL_EXTI_DisableFallingTrig_0_31>:
{
 800d9f0:	b480      	push	{r7}
 800d9f2:	b083      	sub	sp, #12
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800d9f8:	4b06      	ldr	r3, [pc, #24]	; (800da14 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800d9fa:	68da      	ldr	r2, [r3, #12]
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	43db      	mvns	r3, r3
 800da00:	4904      	ldr	r1, [pc, #16]	; (800da14 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800da02:	4013      	ands	r3, r2
 800da04:	60cb      	str	r3, [r1, #12]
}
 800da06:	bf00      	nop
 800da08:	370c      	adds	r7, #12
 800da0a:	46bd      	mov	sp, r7
 800da0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da10:	4770      	bx	lr
 800da12:	bf00      	nop
 800da14:	40010400 	.word	0x40010400

0800da18 <LL_EXTI_DisableFallingTrig_32_63>:
{
 800da18:	b480      	push	{r7}
 800da1a:	b083      	sub	sp, #12
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800da20:	4b06      	ldr	r3, [pc, #24]	; (800da3c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800da22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	43db      	mvns	r3, r3
 800da28:	4904      	ldr	r1, [pc, #16]	; (800da3c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800da2a:	4013      	ands	r3, r2
 800da2c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800da2e:	bf00      	nop
 800da30:	370c      	adds	r7, #12
 800da32:	46bd      	mov	sp, r7
 800da34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da38:	4770      	bx	lr
 800da3a:	bf00      	nop
 800da3c:	40010400 	.word	0x40010400

0800da40 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b084      	sub	sp, #16
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 800da48:	2300      	movs	r3, #0
 800da4a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	7a1b      	ldrb	r3, [r3, #8]
 800da50:	2b00      	cmp	r3, #0
 800da52:	f000 80c8 	beq.w	800dbe6 <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d05d      	beq.n	800db1a <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	7a5b      	ldrb	r3, [r3, #9]
 800da62:	2b01      	cmp	r3, #1
 800da64:	d00e      	beq.n	800da84 <LL_EXTI_Init+0x44>
 800da66:	2b02      	cmp	r3, #2
 800da68:	d017      	beq.n	800da9a <LL_EXTI_Init+0x5a>
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d120      	bne.n	800dab0 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	4618      	mov	r0, r3
 800da74:	f7ff ff24 	bl	800d8c0 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	4618      	mov	r0, r3
 800da7e:	f7ff feaf 	bl	800d7e0 <LL_EXTI_EnableIT_0_31>
          break;
 800da82:	e018      	b.n	800dab6 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	4618      	mov	r0, r3
 800da8a:	f7ff fecd 	bl	800d828 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	4618      	mov	r0, r3
 800da94:	f7ff fef0 	bl	800d878 <LL_EXTI_EnableEvent_0_31>
          break;
 800da98:	e00d      	b.n	800dab6 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	4618      	mov	r0, r3
 800daa0:	f7ff fe9e 	bl	800d7e0 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	4618      	mov	r0, r3
 800daaa:	f7ff fee5 	bl	800d878 <LL_EXTI_EnableEvent_0_31>
          break;
 800daae:	e002      	b.n	800dab6 <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 800dab0:	2301      	movs	r3, #1
 800dab2:	60fb      	str	r3, [r7, #12]
          break;
 800dab4:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	7a9b      	ldrb	r3, [r3, #10]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d02d      	beq.n	800db1a <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	7a9b      	ldrb	r3, [r3, #10]
 800dac2:	2b02      	cmp	r3, #2
 800dac4:	d00e      	beq.n	800dae4 <LL_EXTI_Init+0xa4>
 800dac6:	2b03      	cmp	r3, #3
 800dac8:	d017      	beq.n	800dafa <LL_EXTI_Init+0xba>
 800daca:	2b01      	cmp	r3, #1
 800dacc:	d120      	bne.n	800db10 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	4618      	mov	r0, r3
 800dad4:	f7ff ff8c 	bl	800d9f0 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	4618      	mov	r0, r3
 800dade:	f7ff ff17 	bl	800d910 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800dae2:	e01b      	b.n	800db1c <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	4618      	mov	r0, r3
 800daea:	f7ff ff35 	bl	800d958 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	4618      	mov	r0, r3
 800daf4:	f7ff ff58 	bl	800d9a8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800daf8:	e010      	b.n	800db1c <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	4618      	mov	r0, r3
 800db00:	f7ff ff06 	bl	800d910 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	4618      	mov	r0, r3
 800db0a:	f7ff ff4d 	bl	800d9a8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800db0e:	e005      	b.n	800db1c <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	f043 0302 	orr.w	r3, r3, #2
 800db16:	60fb      	str	r3, [r7, #12]
            break;
 800db18:	e000      	b.n	800db1c <LL_EXTI_Init+0xdc>
        }
      }
 800db1a:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	685b      	ldr	r3, [r3, #4]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d075      	beq.n	800dc10 <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	7a5b      	ldrb	r3, [r3, #9]
 800db28:	2b01      	cmp	r3, #1
 800db2a:	d00e      	beq.n	800db4a <LL_EXTI_Init+0x10a>
 800db2c:	2b02      	cmp	r3, #2
 800db2e:	d017      	beq.n	800db60 <LL_EXTI_Init+0x120>
 800db30:	2b00      	cmp	r3, #0
 800db32:	d120      	bne.n	800db76 <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	685b      	ldr	r3, [r3, #4]
 800db38:	4618      	mov	r0, r3
 800db3a:	f7ff fed5 	bl	800d8e8 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	685b      	ldr	r3, [r3, #4]
 800db42:	4618      	mov	r0, r3
 800db44:	f7ff fe5e 	bl	800d804 <LL_EXTI_EnableIT_32_63>
          break;
 800db48:	e01a      	b.n	800db80 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	685b      	ldr	r3, [r3, #4]
 800db4e:	4618      	mov	r0, r3
 800db50:	f7ff fe7e 	bl	800d850 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	685b      	ldr	r3, [r3, #4]
 800db58:	4618      	mov	r0, r3
 800db5a:	f7ff fe9f 	bl	800d89c <LL_EXTI_EnableEvent_32_63>
          break;
 800db5e:	e00f      	b.n	800db80 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	685b      	ldr	r3, [r3, #4]
 800db64:	4618      	mov	r0, r3
 800db66:	f7ff fe4d 	bl	800d804 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	685b      	ldr	r3, [r3, #4]
 800db6e:	4618      	mov	r0, r3
 800db70:	f7ff fe94 	bl	800d89c <LL_EXTI_EnableEvent_32_63>
          break;
 800db74:	e004      	b.n	800db80 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	f043 0304 	orr.w	r3, r3, #4
 800db7c:	60fb      	str	r3, [r7, #12]
          break;
 800db7e:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	7a9b      	ldrb	r3, [r3, #10]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d043      	beq.n	800dc10 <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	7a9b      	ldrb	r3, [r3, #10]
 800db8c:	2b02      	cmp	r3, #2
 800db8e:	d00e      	beq.n	800dbae <LL_EXTI_Init+0x16e>
 800db90:	2b03      	cmp	r3, #3
 800db92:	d017      	beq.n	800dbc4 <LL_EXTI_Init+0x184>
 800db94:	2b01      	cmp	r3, #1
 800db96:	d120      	bne.n	800dbda <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	685b      	ldr	r3, [r3, #4]
 800db9c:	4618      	mov	r0, r3
 800db9e:	f7ff ff3b 	bl	800da18 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	685b      	ldr	r3, [r3, #4]
 800dba6:	4618      	mov	r0, r3
 800dba8:	f7ff fec4 	bl	800d934 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800dbac:	e031      	b.n	800dc12 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	685b      	ldr	r3, [r3, #4]
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f7ff fee4 	bl	800d980 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	685b      	ldr	r3, [r3, #4]
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	f7ff ff05 	bl	800d9cc <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800dbc2:	e026      	b.n	800dc12 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	685b      	ldr	r3, [r3, #4]
 800dbc8:	4618      	mov	r0, r3
 800dbca:	f7ff feb3 	bl	800d934 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	685b      	ldr	r3, [r3, #4]
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f7ff fefa 	bl	800d9cc <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800dbd8:	e01b      	b.n	800dc12 <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	f043 0305 	orr.w	r3, r3, #5
 800dbe0:	60fb      	str	r3, [r7, #12]
            break;
 800dbe2:	bf00      	nop
 800dbe4:	e015      	b.n	800dc12 <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	4618      	mov	r0, r3
 800dbec:	f7ff fe1c 	bl	800d828 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f7ff fe63 	bl	800d8c0 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	685b      	ldr	r3, [r3, #4]
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f7ff fe26 	bl	800d850 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	685b      	ldr	r3, [r3, #4]
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f7ff fe6d 	bl	800d8e8 <LL_EXTI_DisableEvent_32_63>
 800dc0e:	e000      	b.n	800dc12 <LL_EXTI_Init+0x1d2>
      }
 800dc10:	bf00      	nop
  }

  return status;
 800dc12:	68fb      	ldr	r3, [r7, #12]
}
 800dc14:	4618      	mov	r0, r3
 800dc16:	3710      	adds	r7, #16
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bd80      	pop	{r7, pc}

0800dc1c <LL_GPIO_SetPinMode>:
{
 800dc1c:	b480      	push	{r7}
 800dc1e:	b089      	sub	sp, #36	; 0x24
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	60f8      	str	r0, [r7, #12]
 800dc24:	60b9      	str	r1, [r7, #8]
 800dc26:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	681a      	ldr	r2, [r3, #0]
 800dc2c:	68bb      	ldr	r3, [r7, #8]
 800dc2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dc30:	697b      	ldr	r3, [r7, #20]
 800dc32:	fa93 f3a3 	rbit	r3, r3
 800dc36:	613b      	str	r3, [r7, #16]
  return result;
 800dc38:	693b      	ldr	r3, [r7, #16]
 800dc3a:	fab3 f383 	clz	r3, r3
 800dc3e:	b2db      	uxtb	r3, r3
 800dc40:	005b      	lsls	r3, r3, #1
 800dc42:	2103      	movs	r1, #3
 800dc44:	fa01 f303 	lsl.w	r3, r1, r3
 800dc48:	43db      	mvns	r3, r3
 800dc4a:	401a      	ands	r2, r3
 800dc4c:	68bb      	ldr	r3, [r7, #8]
 800dc4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dc50:	69fb      	ldr	r3, [r7, #28]
 800dc52:	fa93 f3a3 	rbit	r3, r3
 800dc56:	61bb      	str	r3, [r7, #24]
  return result;
 800dc58:	69bb      	ldr	r3, [r7, #24]
 800dc5a:	fab3 f383 	clz	r3, r3
 800dc5e:	b2db      	uxtb	r3, r3
 800dc60:	005b      	lsls	r3, r3, #1
 800dc62:	6879      	ldr	r1, [r7, #4]
 800dc64:	fa01 f303 	lsl.w	r3, r1, r3
 800dc68:	431a      	orrs	r2, r3
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	601a      	str	r2, [r3, #0]
}
 800dc6e:	bf00      	nop
 800dc70:	3724      	adds	r7, #36	; 0x24
 800dc72:	46bd      	mov	sp, r7
 800dc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc78:	4770      	bx	lr

0800dc7a <LL_GPIO_SetPinOutputType>:
{
 800dc7a:	b480      	push	{r7}
 800dc7c:	b085      	sub	sp, #20
 800dc7e:	af00      	add	r7, sp, #0
 800dc80:	60f8      	str	r0, [r7, #12]
 800dc82:	60b9      	str	r1, [r7, #8]
 800dc84:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	685a      	ldr	r2, [r3, #4]
 800dc8a:	68bb      	ldr	r3, [r7, #8]
 800dc8c:	43db      	mvns	r3, r3
 800dc8e:	401a      	ands	r2, r3
 800dc90:	68bb      	ldr	r3, [r7, #8]
 800dc92:	6879      	ldr	r1, [r7, #4]
 800dc94:	fb01 f303 	mul.w	r3, r1, r3
 800dc98:	431a      	orrs	r2, r3
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	605a      	str	r2, [r3, #4]
}
 800dc9e:	bf00      	nop
 800dca0:	3714      	adds	r7, #20
 800dca2:	46bd      	mov	sp, r7
 800dca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca8:	4770      	bx	lr

0800dcaa <LL_GPIO_SetPinSpeed>:
{
 800dcaa:	b480      	push	{r7}
 800dcac:	b089      	sub	sp, #36	; 0x24
 800dcae:	af00      	add	r7, sp, #0
 800dcb0:	60f8      	str	r0, [r7, #12]
 800dcb2:	60b9      	str	r1, [r7, #8]
 800dcb4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	689a      	ldr	r2, [r3, #8]
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dcbe:	697b      	ldr	r3, [r7, #20]
 800dcc0:	fa93 f3a3 	rbit	r3, r3
 800dcc4:	613b      	str	r3, [r7, #16]
  return result;
 800dcc6:	693b      	ldr	r3, [r7, #16]
 800dcc8:	fab3 f383 	clz	r3, r3
 800dccc:	b2db      	uxtb	r3, r3
 800dcce:	005b      	lsls	r3, r3, #1
 800dcd0:	2103      	movs	r1, #3
 800dcd2:	fa01 f303 	lsl.w	r3, r1, r3
 800dcd6:	43db      	mvns	r3, r3
 800dcd8:	401a      	ands	r2, r3
 800dcda:	68bb      	ldr	r3, [r7, #8]
 800dcdc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dcde:	69fb      	ldr	r3, [r7, #28]
 800dce0:	fa93 f3a3 	rbit	r3, r3
 800dce4:	61bb      	str	r3, [r7, #24]
  return result;
 800dce6:	69bb      	ldr	r3, [r7, #24]
 800dce8:	fab3 f383 	clz	r3, r3
 800dcec:	b2db      	uxtb	r3, r3
 800dcee:	005b      	lsls	r3, r3, #1
 800dcf0:	6879      	ldr	r1, [r7, #4]
 800dcf2:	fa01 f303 	lsl.w	r3, r1, r3
 800dcf6:	431a      	orrs	r2, r3
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	609a      	str	r2, [r3, #8]
}
 800dcfc:	bf00      	nop
 800dcfe:	3724      	adds	r7, #36	; 0x24
 800dd00:	46bd      	mov	sp, r7
 800dd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd06:	4770      	bx	lr

0800dd08 <LL_GPIO_SetPinPull>:
{
 800dd08:	b480      	push	{r7}
 800dd0a:	b089      	sub	sp, #36	; 0x24
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	60f8      	str	r0, [r7, #12]
 800dd10:	60b9      	str	r1, [r7, #8]
 800dd12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	68da      	ldr	r2, [r3, #12]
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dd1c:	697b      	ldr	r3, [r7, #20]
 800dd1e:	fa93 f3a3 	rbit	r3, r3
 800dd22:	613b      	str	r3, [r7, #16]
  return result;
 800dd24:	693b      	ldr	r3, [r7, #16]
 800dd26:	fab3 f383 	clz	r3, r3
 800dd2a:	b2db      	uxtb	r3, r3
 800dd2c:	005b      	lsls	r3, r3, #1
 800dd2e:	2103      	movs	r1, #3
 800dd30:	fa01 f303 	lsl.w	r3, r1, r3
 800dd34:	43db      	mvns	r3, r3
 800dd36:	401a      	ands	r2, r3
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dd3c:	69fb      	ldr	r3, [r7, #28]
 800dd3e:	fa93 f3a3 	rbit	r3, r3
 800dd42:	61bb      	str	r3, [r7, #24]
  return result;
 800dd44:	69bb      	ldr	r3, [r7, #24]
 800dd46:	fab3 f383 	clz	r3, r3
 800dd4a:	b2db      	uxtb	r3, r3
 800dd4c:	005b      	lsls	r3, r3, #1
 800dd4e:	6879      	ldr	r1, [r7, #4]
 800dd50:	fa01 f303 	lsl.w	r3, r1, r3
 800dd54:	431a      	orrs	r2, r3
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	60da      	str	r2, [r3, #12]
}
 800dd5a:	bf00      	nop
 800dd5c:	3724      	adds	r7, #36	; 0x24
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd64:	4770      	bx	lr

0800dd66 <LL_GPIO_SetAFPin_0_7>:
{
 800dd66:	b480      	push	{r7}
 800dd68:	b089      	sub	sp, #36	; 0x24
 800dd6a:	af00      	add	r7, sp, #0
 800dd6c:	60f8      	str	r0, [r7, #12]
 800dd6e:	60b9      	str	r1, [r7, #8]
 800dd70:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	6a1a      	ldr	r2, [r3, #32]
 800dd76:	68bb      	ldr	r3, [r7, #8]
 800dd78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dd7a:	697b      	ldr	r3, [r7, #20]
 800dd7c:	fa93 f3a3 	rbit	r3, r3
 800dd80:	613b      	str	r3, [r7, #16]
  return result;
 800dd82:	693b      	ldr	r3, [r7, #16]
 800dd84:	fab3 f383 	clz	r3, r3
 800dd88:	b2db      	uxtb	r3, r3
 800dd8a:	009b      	lsls	r3, r3, #2
 800dd8c:	210f      	movs	r1, #15
 800dd8e:	fa01 f303 	lsl.w	r3, r1, r3
 800dd92:	43db      	mvns	r3, r3
 800dd94:	401a      	ands	r2, r3
 800dd96:	68bb      	ldr	r3, [r7, #8]
 800dd98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dd9a:	69fb      	ldr	r3, [r7, #28]
 800dd9c:	fa93 f3a3 	rbit	r3, r3
 800dda0:	61bb      	str	r3, [r7, #24]
  return result;
 800dda2:	69bb      	ldr	r3, [r7, #24]
 800dda4:	fab3 f383 	clz	r3, r3
 800dda8:	b2db      	uxtb	r3, r3
 800ddaa:	009b      	lsls	r3, r3, #2
 800ddac:	6879      	ldr	r1, [r7, #4]
 800ddae:	fa01 f303 	lsl.w	r3, r1, r3
 800ddb2:	431a      	orrs	r2, r3
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	621a      	str	r2, [r3, #32]
}
 800ddb8:	bf00      	nop
 800ddba:	3724      	adds	r7, #36	; 0x24
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc2:	4770      	bx	lr

0800ddc4 <LL_GPIO_SetAFPin_8_15>:
{
 800ddc4:	b480      	push	{r7}
 800ddc6:	b089      	sub	sp, #36	; 0x24
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	60f8      	str	r0, [r7, #12]
 800ddcc:	60b9      	str	r1, [r7, #8]
 800ddce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ddd4:	68bb      	ldr	r3, [r7, #8]
 800ddd6:	0a1b      	lsrs	r3, r3, #8
 800ddd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ddda:	697b      	ldr	r3, [r7, #20]
 800dddc:	fa93 f3a3 	rbit	r3, r3
 800dde0:	613b      	str	r3, [r7, #16]
  return result;
 800dde2:	693b      	ldr	r3, [r7, #16]
 800dde4:	fab3 f383 	clz	r3, r3
 800dde8:	b2db      	uxtb	r3, r3
 800ddea:	009b      	lsls	r3, r3, #2
 800ddec:	210f      	movs	r1, #15
 800ddee:	fa01 f303 	lsl.w	r3, r1, r3
 800ddf2:	43db      	mvns	r3, r3
 800ddf4:	401a      	ands	r2, r3
 800ddf6:	68bb      	ldr	r3, [r7, #8]
 800ddf8:	0a1b      	lsrs	r3, r3, #8
 800ddfa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ddfc:	69fb      	ldr	r3, [r7, #28]
 800ddfe:	fa93 f3a3 	rbit	r3, r3
 800de02:	61bb      	str	r3, [r7, #24]
  return result;
 800de04:	69bb      	ldr	r3, [r7, #24]
 800de06:	fab3 f383 	clz	r3, r3
 800de0a:	b2db      	uxtb	r3, r3
 800de0c:	009b      	lsls	r3, r3, #2
 800de0e:	6879      	ldr	r1, [r7, #4]
 800de10:	fa01 f303 	lsl.w	r3, r1, r3
 800de14:	431a      	orrs	r2, r3
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	625a      	str	r2, [r3, #36]	; 0x24
}
 800de1a:	bf00      	nop
 800de1c:	3724      	adds	r7, #36	; 0x24
 800de1e:	46bd      	mov	sp, r7
 800de20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de24:	4770      	bx	lr

0800de26 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800de26:	b580      	push	{r7, lr}
 800de28:	b086      	sub	sp, #24
 800de2a:	af00      	add	r7, sp, #0
 800de2c:	6078      	str	r0, [r7, #4]
 800de2e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800de30:	683b      	ldr	r3, [r7, #0]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	fa93 f3a3 	rbit	r3, r3
 800de3c:	60bb      	str	r3, [r7, #8]
  return result;
 800de3e:	68bb      	ldr	r3, [r7, #8]
 800de40:	fab3 f383 	clz	r3, r3
 800de44:	b2db      	uxtb	r3, r3
 800de46:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800de48:	e040      	b.n	800decc <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800de4a:	683b      	ldr	r3, [r7, #0]
 800de4c:	681a      	ldr	r2, [r3, #0]
 800de4e:	2101      	movs	r1, #1
 800de50:	697b      	ldr	r3, [r7, #20]
 800de52:	fa01 f303 	lsl.w	r3, r1, r3
 800de56:	4013      	ands	r3, r2
 800de58:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 800de5a:	693b      	ldr	r3, [r7, #16]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d032      	beq.n	800dec6 <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	685b      	ldr	r3, [r3, #4]
 800de64:	461a      	mov	r2, r3
 800de66:	6939      	ldr	r1, [r7, #16]
 800de68:	6878      	ldr	r0, [r7, #4]
 800de6a:	f7ff fed7 	bl	800dc1c <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	685b      	ldr	r3, [r3, #4]
 800de72:	2b01      	cmp	r3, #1
 800de74:	d003      	beq.n	800de7e <LL_GPIO_Init+0x58>
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	685b      	ldr	r3, [r3, #4]
 800de7a:	2b02      	cmp	r3, #2
 800de7c:	d106      	bne.n	800de8c <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	689b      	ldr	r3, [r3, #8]
 800de82:	461a      	mov	r2, r3
 800de84:	6939      	ldr	r1, [r7, #16]
 800de86:	6878      	ldr	r0, [r7, #4]
 800de88:	f7ff ff0f 	bl	800dcaa <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	691b      	ldr	r3, [r3, #16]
 800de90:	461a      	mov	r2, r3
 800de92:	6939      	ldr	r1, [r7, #16]
 800de94:	6878      	ldr	r0, [r7, #4]
 800de96:	f7ff ff37 	bl	800dd08 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	685b      	ldr	r3, [r3, #4]
 800de9e:	2b02      	cmp	r3, #2
 800dea0:	d111      	bne.n	800dec6 <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800dea2:	693b      	ldr	r3, [r7, #16]
 800dea4:	2bff      	cmp	r3, #255	; 0xff
 800dea6:	d807      	bhi.n	800deb8 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	695b      	ldr	r3, [r3, #20]
 800deac:	461a      	mov	r2, r3
 800deae:	6939      	ldr	r1, [r7, #16]
 800deb0:	6878      	ldr	r0, [r7, #4]
 800deb2:	f7ff ff58 	bl	800dd66 <LL_GPIO_SetAFPin_0_7>
 800deb6:	e006      	b.n	800dec6 <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	695b      	ldr	r3, [r3, #20]
 800debc:	461a      	mov	r2, r3
 800debe:	6939      	ldr	r1, [r7, #16]
 800dec0:	6878      	ldr	r0, [r7, #4]
 800dec2:	f7ff ff7f 	bl	800ddc4 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800dec6:	697b      	ldr	r3, [r7, #20]
 800dec8:	3301      	adds	r3, #1
 800deca:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800decc:	683b      	ldr	r3, [r7, #0]
 800dece:	681a      	ldr	r2, [r3, #0]
 800ded0:	697b      	ldr	r3, [r7, #20]
 800ded2:	fa22 f303 	lsr.w	r3, r2, r3
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d1b7      	bne.n	800de4a <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800deda:	683b      	ldr	r3, [r7, #0]
 800dedc:	685b      	ldr	r3, [r3, #4]
 800dede:	2b01      	cmp	r3, #1
 800dee0:	d003      	beq.n	800deea <LL_GPIO_Init+0xc4>
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	685b      	ldr	r3, [r3, #4]
 800dee6:	2b02      	cmp	r3, #2
 800dee8:	d107      	bne.n	800defa <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	6819      	ldr	r1, [r3, #0]
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	68db      	ldr	r3, [r3, #12]
 800def2:	461a      	mov	r2, r3
 800def4:	6878      	ldr	r0, [r7, #4]
 800def6:	f7ff fec0 	bl	800dc7a <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800defa:	2300      	movs	r3, #0
}
 800defc:	4618      	mov	r0, r3
 800defe:	3718      	adds	r7, #24
 800df00:	46bd      	mov	sp, r7
 800df02:	bd80      	pop	{r7, pc}

0800df04 <ILI9341_Draw_Wave>:

 extern uint16_t BURST_MAX_SIZE;


void ILI9341_Draw_Wave(uint16_t x, uint16_t y, uint8_t weight, uint16_t colour, uint8_t scale, uint32_t* data_table, uint16_t data_table_size)
{
 800df04:	b590      	push	{r4, r7, lr}
 800df06:	b085      	sub	sp, #20
 800df08:	af00      	add	r7, sp, #0
 800df0a:	4604      	mov	r4, r0
 800df0c:	4608      	mov	r0, r1
 800df0e:	4611      	mov	r1, r2
 800df10:	461a      	mov	r2, r3
 800df12:	4623      	mov	r3, r4
 800df14:	80fb      	strh	r3, [r7, #6]
 800df16:	4603      	mov	r3, r0
 800df18:	80bb      	strh	r3, [r7, #4]
 800df1a:	460b      	mov	r3, r1
 800df1c:	70fb      	strb	r3, [r7, #3]
 800df1e:	4613      	mov	r3, r2
 800df20:	803b      	strh	r3, [r7, #0]
	for(int w = 0; w < weight; w++ )
 800df22:	2300      	movs	r3, #0
 800df24:	60fb      	str	r3, [r7, #12]
 800df26:	e026      	b.n	800df76 <ILI9341_Draw_Wave+0x72>
	{
		for(int i = 0; i < data_table_size; i++)
 800df28:	2300      	movs	r3, #0
 800df2a:	60bb      	str	r3, [r7, #8]
 800df2c:	e01c      	b.n	800df68 <ILI9341_Draw_Wave+0x64>
		{
			ILI9341_Draw_Pixel(	x + i,	(y + data_table[i] / scale) + w, colour);
 800df2e:	68bb      	ldr	r3, [r7, #8]
 800df30:	b29a      	uxth	r2, r3
 800df32:	88fb      	ldrh	r3, [r7, #6]
 800df34:	4413      	add	r3, r2
 800df36:	b298      	uxth	r0, r3
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	009b      	lsls	r3, r3, #2
 800df3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df3e:	4413      	add	r3, r2
 800df40:	681a      	ldr	r2, [r3, #0]
 800df42:	f897 3020 	ldrb.w	r3, [r7, #32]
 800df46:	fbb2 f3f3 	udiv	r3, r2, r3
 800df4a:	b29a      	uxth	r2, r3
 800df4c:	88bb      	ldrh	r3, [r7, #4]
 800df4e:	4413      	add	r3, r2
 800df50:	b29a      	uxth	r2, r3
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	b29b      	uxth	r3, r3
 800df56:	4413      	add	r3, r2
 800df58:	b29b      	uxth	r3, r3
 800df5a:	883a      	ldrh	r2, [r7, #0]
 800df5c:	4619      	mov	r1, r3
 800df5e:	f000 fc1f 	bl	800e7a0 <ILI9341_Draw_Pixel>
		for(int i = 0; i < data_table_size; i++)
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	3301      	adds	r3, #1
 800df66:	60bb      	str	r3, [r7, #8]
 800df68:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800df6a:	68ba      	ldr	r2, [r7, #8]
 800df6c:	429a      	cmp	r2, r3
 800df6e:	dbde      	blt.n	800df2e <ILI9341_Draw_Wave+0x2a>
	for(int w = 0; w < weight; w++ )
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	3301      	adds	r3, #1
 800df74:	60fb      	str	r3, [r7, #12]
 800df76:	78fb      	ldrb	r3, [r7, #3]
 800df78:	68fa      	ldr	r2, [r7, #12]
 800df7a:	429a      	cmp	r2, r3
 800df7c:	dbd4      	blt.n	800df28 <ILI9341_Draw_Wave+0x24>

		}
	}

}
 800df7e:	bf00      	nop
 800df80:	3714      	adds	r7, #20
 800df82:	46bd      	mov	sp, r7
 800df84:	bd90      	pop	{r4, r7, pc}

0800df86 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 *
 */
void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint16_t border_colour)
{
 800df86:	b590      	push	{r4, r7, lr}
 800df88:	b087      	sub	sp, #28
 800df8a:	af02      	add	r7, sp, #8
 800df8c:	4604      	mov	r4, r0
 800df8e:	4608      	mov	r0, r1
 800df90:	4611      	mov	r1, r2
 800df92:	461a      	mov	r2, r3
 800df94:	4623      	mov	r3, r4
 800df96:	80fb      	strh	r3, [r7, #6]
 800df98:	4603      	mov	r3, r0
 800df9a:	80bb      	strh	r3, [r7, #4]
 800df9c:	460b      	mov	r3, r1
 800df9e:	807b      	strh	r3, [r7, #2]
 800dfa0:	4613      	mov	r3, r2
 800dfa2:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 800dfa8:	7bfa      	ldrb	r2, [r7, #15]
 800dfaa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dfae:	429a      	cmp	r2, r3
 800dfb0:	d939      	bls.n	800e026 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa0>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 800dfb2:	88ba      	ldrh	r2, [r7, #4]
 800dfb4:	7bfb      	ldrb	r3, [r7, #15]
 800dfb6:	441a      	add	r2, r3
 800dfb8:	88b9      	ldrh	r1, [r7, #4]
 800dfba:	883b      	ldrh	r3, [r7, #0]
 800dfbc:	4419      	add	r1, r3
 800dfbe:	7bfb      	ldrb	r3, [r7, #15]
 800dfc0:	1acb      	subs	r3, r1, r3
 800dfc2:	429a      	cmp	r2, r3
 800dfc4:	f000 8089 	beq.w	800e0da <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
 800dfc8:	88fa      	ldrh	r2, [r7, #6]
 800dfca:	7bfb      	ldrb	r3, [r7, #15]
 800dfcc:	441a      	add	r2, r3
 800dfce:	88f9      	ldrh	r1, [r7, #6]
 800dfd0:	887b      	ldrh	r3, [r7, #2]
 800dfd2:	4419      	add	r1, r3
 800dfd4:	7bfb      	ldrb	r3, [r7, #15]
 800dfd6:	1acb      	subs	r3, r1, r3
 800dfd8:	429a      	cmp	r2, r3
 800dfda:	d07e      	beq.n	800e0da <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 800dfdc:	7bfb      	ldrb	r3, [r7, #15]
 800dfde:	b29a      	uxth	r2, r3
 800dfe0:	88fb      	ldrh	r3, [r7, #6]
 800dfe2:	4413      	add	r3, r2
 800dfe4:	b298      	uxth	r0, r3
 800dfe6:	7bfb      	ldrb	r3, [r7, #15]
 800dfe8:	b29a      	uxth	r2, r3
 800dfea:	88bb      	ldrh	r3, [r7, #4]
 800dfec:	4413      	add	r3, r2
 800dfee:	b299      	uxth	r1, r3
 800dff0:	7bfb      	ldrb	r3, [r7, #15]
 800dff2:	b29b      	uxth	r3, r3
 800dff4:	005b      	lsls	r3, r3, #1
 800dff6:	b29b      	uxth	r3, r3
 800dff8:	887a      	ldrh	r2, [r7, #2]
 800dffa:	1ad3      	subs	r3, r2, r3
 800dffc:	b29b      	uxth	r3, r3
 800dffe:	3301      	adds	r3, #1
 800e000:	b29c      	uxth	r4, r3
 800e002:	7bfb      	ldrb	r3, [r7, #15]
 800e004:	b29b      	uxth	r3, r3
 800e006:	005b      	lsls	r3, r3, #1
 800e008:	b29b      	uxth	r3, r3
 800e00a:	883a      	ldrh	r2, [r7, #0]
 800e00c:	1ad3      	subs	r3, r2, r3
 800e00e:	b29b      	uxth	r3, r3
 800e010:	3301      	adds	r3, #1
 800e012:	b29a      	uxth	r2, r3
 800e014:	2304      	movs	r3, #4
 800e016:	9301      	str	r3, [sp, #4]
 800e018:	8c3b      	ldrh	r3, [r7, #32]
 800e01a:	9300      	str	r3, [sp, #0]
 800e01c:	4613      	mov	r3, r2
 800e01e:	4622      	mov	r2, r4
 800e020:	f000 fd18 	bl	800ea54 <ILI9341_Draw_Rectangle>
				goto finish;
 800e024:	e05a      	b.n	800e0dc <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x156>
			}
		}

		// Horizontal line - Top
		ILI9341_Draw_Horizontal_Line(	x + b,
 800e026:	7bfb      	ldrb	r3, [r7, #15]
 800e028:	b29a      	uxth	r2, r3
 800e02a:	88fb      	ldrh	r3, [r7, #6]
 800e02c:	4413      	add	r3, r2
 800e02e:	b298      	uxth	r0, r3
 800e030:	7bfb      	ldrb	r3, [r7, #15]
 800e032:	b29a      	uxth	r2, r3
 800e034:	88bb      	ldrh	r3, [r7, #4]
 800e036:	4413      	add	r3, r2
 800e038:	b299      	uxth	r1, r3
										y + b,
										(w - b)+1,
 800e03a:	7bfb      	ldrb	r3, [r7, #15]
 800e03c:	b29b      	uxth	r3, r3
 800e03e:	887a      	ldrh	r2, [r7, #2]
 800e040:	1ad3      	subs	r3, r2, r3
 800e042:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800e044:	3301      	adds	r3, #1
 800e046:	b29a      	uxth	r2, r3
 800e048:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e04a:	f000 fa6b 	bl	800e524 <ILI9341_Draw_Horizontal_Line>
										border_colour);
		// Horizontal line - Bottom
		ILI9341_Draw_Horizontal_Line(	x + b,
 800e04e:	7bfb      	ldrb	r3, [r7, #15]
 800e050:	b29a      	uxth	r2, r3
 800e052:	88fb      	ldrh	r3, [r7, #6]
 800e054:	4413      	add	r3, r2
 800e056:	b298      	uxth	r0, r3
										(y + h) - b,
 800e058:	88ba      	ldrh	r2, [r7, #4]
 800e05a:	883b      	ldrh	r3, [r7, #0]
 800e05c:	4413      	add	r3, r2
 800e05e:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800e060:	7bfb      	ldrb	r3, [r7, #15]
 800e062:	b29b      	uxth	r3, r3
 800e064:	1ad3      	subs	r3, r2, r3
 800e066:	b299      	uxth	r1, r3
										(w - b)+1,
 800e068:	7bfb      	ldrb	r3, [r7, #15]
 800e06a:	b29b      	uxth	r3, r3
 800e06c:	887a      	ldrh	r2, [r7, #2]
 800e06e:	1ad3      	subs	r3, r2, r3
 800e070:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800e072:	3301      	adds	r3, #1
 800e074:	b29a      	uxth	r2, r3
 800e076:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e078:	f000 fa54 	bl	800e524 <ILI9341_Draw_Horizontal_Line>
										border_colour);


		// Vertical line - left
		ILI9341_Draw_Vertical_Line(		x + b,
 800e07c:	7bfb      	ldrb	r3, [r7, #15]
 800e07e:	b29a      	uxth	r2, r3
 800e080:	88fb      	ldrh	r3, [r7, #6]
 800e082:	4413      	add	r3, r2
 800e084:	b298      	uxth	r0, r3
 800e086:	7bfb      	ldrb	r3, [r7, #15]
 800e088:	b29a      	uxth	r2, r3
 800e08a:	88bb      	ldrh	r3, [r7, #4]
 800e08c:	4413      	add	r3, r2
 800e08e:	b299      	uxth	r1, r3
 800e090:	7bfb      	ldrb	r3, [r7, #15]
 800e092:	b29b      	uxth	r3, r3
 800e094:	005b      	lsls	r3, r3, #1
 800e096:	b29b      	uxth	r3, r3
 800e098:	883a      	ldrh	r2, [r7, #0]
 800e09a:	1ad3      	subs	r3, r2, r3
 800e09c:	b29a      	uxth	r2, r3
 800e09e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e0a0:	f000 faa4 	bl	800e5ec <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);
		// Vertical line - right
		ILI9341_Draw_Vertical_Line(		((x + w)) - (b),
 800e0a4:	88fa      	ldrh	r2, [r7, #6]
 800e0a6:	887b      	ldrh	r3, [r7, #2]
 800e0a8:	4413      	add	r3, r2
 800e0aa:	b29a      	uxth	r2, r3
 800e0ac:	7bfb      	ldrb	r3, [r7, #15]
 800e0ae:	b29b      	uxth	r3, r3
 800e0b0:	1ad3      	subs	r3, r2, r3
 800e0b2:	b298      	uxth	r0, r3
 800e0b4:	7bfb      	ldrb	r3, [r7, #15]
 800e0b6:	b29a      	uxth	r2, r3
 800e0b8:	88bb      	ldrh	r3, [r7, #4]
 800e0ba:	4413      	add	r3, r2
 800e0bc:	b299      	uxth	r1, r3
 800e0be:	7bfb      	ldrb	r3, [r7, #15]
 800e0c0:	b29b      	uxth	r3, r3
 800e0c2:	005b      	lsls	r3, r3, #1
 800e0c4:	b29b      	uxth	r3, r3
 800e0c6:	883a      	ldrh	r2, [r7, #0]
 800e0c8:	1ad3      	subs	r3, r2, r3
 800e0ca:	b29a      	uxth	r2, r3
 800e0cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e0ce:	f000 fa8d 	bl	800e5ec <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 800e0d2:	7bfb      	ldrb	r3, [r7, #15]
 800e0d4:	3301      	adds	r3, #1
 800e0d6:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 800e0d8:	e766      	b.n	800dfa8 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 800e0da:	bf00      	nop
	// done
	return;
 800e0dc:	bf00      	nop
}
 800e0de:	3714      	adds	r7, #20
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	bd90      	pop	{r4, r7, pc}

0800e0e4 <ILI9341_Draw_Char>:
 *	@retval None
 *
 */

void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800e0e4:	b590      	push	{r4, r7, lr}
 800e0e6:	b089      	sub	sp, #36	; 0x24
 800e0e8:	af02      	add	r7, sp, #8
 800e0ea:	4604      	mov	r4, r0
 800e0ec:	4608      	mov	r0, r1
 800e0ee:	4611      	mov	r1, r2
 800e0f0:	461a      	mov	r2, r3
 800e0f2:	4623      	mov	r3, r4
 800e0f4:	71fb      	strb	r3, [r7, #7]
 800e0f6:	4603      	mov	r3, r0
 800e0f8:	80bb      	strh	r3, [r7, #4]
 800e0fa:	460b      	mov	r3, r1
 800e0fc:	807b      	strh	r3, [r7, #2]
 800e0fe:	4613      	mov	r3, r2
 800e100:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 800e102:	79fb      	ldrb	r3, [r7, #7]
 800e104:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 800e106:	7dfb      	ldrb	r3, [r7, #23]
 800e108:	2b1f      	cmp	r3, #31
 800e10a:	d802      	bhi.n	800e112 <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 800e10c:	2300      	movs	r3, #0
 800e10e:	71fb      	strb	r3, [r7, #7]
 800e110:	e002      	b.n	800e118 <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 800e112:	7dfb      	ldrb	r3, [r7, #23]
 800e114:	3b20      	subs	r3, #32
 800e116:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800e118:	2300      	movs	r3, #0
 800e11a:	753b      	strb	r3, [r7, #20]
 800e11c:	e012      	b.n	800e144 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 800e11e:	7dfa      	ldrb	r2, [r7, #23]
 800e120:	7d38      	ldrb	r0, [r7, #20]
 800e122:	7d39      	ldrb	r1, [r7, #20]
 800e124:	4c48      	ldr	r4, [pc, #288]	; (800e248 <ILI9341_Draw_Char+0x164>)
 800e126:	4613      	mov	r3, r2
 800e128:	005b      	lsls	r3, r3, #1
 800e12a:	4413      	add	r3, r2
 800e12c:	005b      	lsls	r3, r3, #1
 800e12e:	4423      	add	r3, r4
 800e130:	4403      	add	r3, r0
 800e132:	781a      	ldrb	r2, [r3, #0]
 800e134:	f107 0318 	add.w	r3, r7, #24
 800e138:	440b      	add	r3, r1
 800e13a:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800e13e:	7d3b      	ldrb	r3, [r7, #20]
 800e140:	3301      	adds	r3, #1
 800e142:	753b      	strb	r3, [r7, #20]
 800e144:	7d3b      	ldrb	r3, [r7, #20]
 800e146:	2b05      	cmp	r3, #5
 800e148:	d9e9      	bls.n	800e11e <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 800e14a:	2300      	movs	r3, #0
 800e14c:	757b      	strb	r3, [r7, #21]
 800e14e:	e074      	b.n	800e23a <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 800e150:	2300      	movs	r3, #0
 800e152:	75bb      	strb	r3, [r7, #22]
 800e154:	e06b      	b.n	800e22e <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 800e156:	7d7b      	ldrb	r3, [r7, #21]
 800e158:	f107 0218 	add.w	r2, r7, #24
 800e15c:	4413      	add	r3, r2
 800e15e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800e162:	461a      	mov	r2, r3
 800e164:	7dbb      	ldrb	r3, [r7, #22]
 800e166:	fa42 f303 	asr.w	r3, r2, r3
 800e16a:	f003 0301 	and.w	r3, r3, #1
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d02d      	beq.n	800e1ce <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 800e172:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e174:	2b01      	cmp	r3, #1
 800e176:	d10e      	bne.n	800e196 <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 800e178:	7d7b      	ldrb	r3, [r7, #21]
 800e17a:	b29a      	uxth	r2, r3
 800e17c:	88bb      	ldrh	r3, [r7, #4]
 800e17e:	4413      	add	r3, r2
 800e180:	b298      	uxth	r0, r3
 800e182:	7dbb      	ldrb	r3, [r7, #22]
 800e184:	b29a      	uxth	r2, r3
 800e186:	887b      	ldrh	r3, [r7, #2]
 800e188:	4413      	add	r3, r2
 800e18a:	b29b      	uxth	r3, r3
 800e18c:	883a      	ldrh	r2, [r7, #0]
 800e18e:	4619      	mov	r1, r3
 800e190:	f000 fb06 	bl	800e7a0 <ILI9341_Draw_Pixel>
 800e194:	e048      	b.n	800e228 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 800e196:	7d7b      	ldrb	r3, [r7, #21]
 800e198:	b29b      	uxth	r3, r3
 800e19a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e19c:	fb12 f303 	smulbb	r3, r2, r3
 800e1a0:	b29a      	uxth	r2, r3
 800e1a2:	88bb      	ldrh	r3, [r7, #4]
 800e1a4:	4413      	add	r3, r2
 800e1a6:	b298      	uxth	r0, r3
 800e1a8:	7dbb      	ldrb	r3, [r7, #22]
 800e1aa:	b29b      	uxth	r3, r3
 800e1ac:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e1ae:	fb12 f303 	smulbb	r3, r2, r3
 800e1b2:	b29a      	uxth	r2, r3
 800e1b4:	887b      	ldrh	r3, [r7, #2]
 800e1b6:	4413      	add	r3, r2
 800e1b8:	b299      	uxth	r1, r3
 800e1ba:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800e1bc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e1be:	2301      	movs	r3, #1
 800e1c0:	9301      	str	r3, [sp, #4]
 800e1c2:	883b      	ldrh	r3, [r7, #0]
 800e1c4:	9300      	str	r3, [sp, #0]
 800e1c6:	4623      	mov	r3, r4
 800e1c8:	f000 fc44 	bl	800ea54 <ILI9341_Draw_Rectangle>
 800e1cc:	e02c      	b.n	800e228 <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 800e1ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e1d0:	2b01      	cmp	r3, #1
 800e1d2:	d10e      	bne.n	800e1f2 <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 800e1d4:	7d7b      	ldrb	r3, [r7, #21]
 800e1d6:	b29a      	uxth	r2, r3
 800e1d8:	88bb      	ldrh	r3, [r7, #4]
 800e1da:	4413      	add	r3, r2
 800e1dc:	b298      	uxth	r0, r3
 800e1de:	7dbb      	ldrb	r3, [r7, #22]
 800e1e0:	b29a      	uxth	r2, r3
 800e1e2:	887b      	ldrh	r3, [r7, #2]
 800e1e4:	4413      	add	r3, r2
 800e1e6:	b29b      	uxth	r3, r3
 800e1e8:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800e1ea:	4619      	mov	r1, r3
 800e1ec:	f000 fad8 	bl	800e7a0 <ILI9341_Draw_Pixel>
 800e1f0:	e01a      	b.n	800e228 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 800e1f2:	7d7b      	ldrb	r3, [r7, #21]
 800e1f4:	b29b      	uxth	r3, r3
 800e1f6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e1f8:	fb12 f303 	smulbb	r3, r2, r3
 800e1fc:	b29a      	uxth	r2, r3
 800e1fe:	88bb      	ldrh	r3, [r7, #4]
 800e200:	4413      	add	r3, r2
 800e202:	b298      	uxth	r0, r3
 800e204:	7dbb      	ldrb	r3, [r7, #22]
 800e206:	b29b      	uxth	r3, r3
 800e208:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e20a:	fb12 f303 	smulbb	r3, r2, r3
 800e20e:	b29a      	uxth	r2, r3
 800e210:	887b      	ldrh	r3, [r7, #2]
 800e212:	4413      	add	r3, r2
 800e214:	b299      	uxth	r1, r3
 800e216:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800e218:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e21a:	2301      	movs	r3, #1
 800e21c:	9301      	str	r3, [sp, #4]
 800e21e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e220:	9300      	str	r3, [sp, #0]
 800e222:	4623      	mov	r3, r4
 800e224:	f000 fc16 	bl	800ea54 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 800e228:	7dbb      	ldrb	r3, [r7, #22]
 800e22a:	3301      	adds	r3, #1
 800e22c:	75bb      	strb	r3, [r7, #22]
 800e22e:	7dbb      	ldrb	r3, [r7, #22]
 800e230:	2b07      	cmp	r3, #7
 800e232:	d990      	bls.n	800e156 <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 800e234:	7d7b      	ldrb	r3, [r7, #21]
 800e236:	3301      	adds	r3, #1
 800e238:	757b      	strb	r3, [r7, #21]
 800e23a:	7d7b      	ldrb	r3, [r7, #21]
 800e23c:	2b05      	cmp	r3, #5
 800e23e:	d987      	bls.n	800e150 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 800e240:	bf00      	nop
 800e242:	371c      	adds	r7, #28
 800e244:	46bd      	mov	sp, r7
 800e246:	bd90      	pop	{r4, r7, pc}
 800e248:	08013dcc 	.word	0x08013dcc

0800e24c <ILI9341_Draw_Text>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800e24c:	b590      	push	{r4, r7, lr}
 800e24e:	b087      	sub	sp, #28
 800e250:	af02      	add	r7, sp, #8
 800e252:	60f8      	str	r0, [r7, #12]
 800e254:	4608      	mov	r0, r1
 800e256:	4611      	mov	r1, r2
 800e258:	461a      	mov	r2, r3
 800e25a:	4603      	mov	r3, r0
 800e25c:	817b      	strh	r3, [r7, #10]
 800e25e:	460b      	mov	r3, r1
 800e260:	813b      	strh	r3, [r7, #8]
 800e262:	4613      	mov	r3, r2
 800e264:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Vertical_Line(x-1, y, CHAR_HEIGHT*size, bgcolour);
 800e266:	897b      	ldrh	r3, [r7, #10]
 800e268:	3b01      	subs	r3, #1
 800e26a:	b298      	uxth	r0, r3
 800e26c:	8c3b      	ldrh	r3, [r7, #32]
 800e26e:	00db      	lsls	r3, r3, #3
 800e270:	b29a      	uxth	r2, r3
 800e272:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e274:	8939      	ldrh	r1, [r7, #8]
 800e276:	f000 f9b9 	bl	800e5ec <ILI9341_Draw_Vertical_Line>
    ILI9341_Draw_Vertical_Line(x-2, y, CHAR_HEIGHT*size, bgcolour);
 800e27a:	897b      	ldrh	r3, [r7, #10]
 800e27c:	3b02      	subs	r3, #2
 800e27e:	b298      	uxth	r0, r3
 800e280:	8c3b      	ldrh	r3, [r7, #32]
 800e282:	00db      	lsls	r3, r3, #3
 800e284:	b29a      	uxth	r2, r3
 800e286:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e288:	8939      	ldrh	r1, [r7, #8]
 800e28a:	f000 f9af 	bl	800e5ec <ILI9341_Draw_Vertical_Line>

    while (*Text) {
 800e28e:	e016      	b.n	800e2be <ILI9341_Draw_Text+0x72>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	1c5a      	adds	r2, r3, #1
 800e294:	60fa      	str	r2, [r7, #12]
 800e296:	7818      	ldrb	r0, [r3, #0]
 800e298:	88fc      	ldrh	r4, [r7, #6]
 800e29a:	893a      	ldrh	r2, [r7, #8]
 800e29c:	8979      	ldrh	r1, [r7, #10]
 800e29e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e2a0:	9301      	str	r3, [sp, #4]
 800e2a2:	8c3b      	ldrh	r3, [r7, #32]
 800e2a4:	9300      	str	r3, [sp, #0]
 800e2a6:	4623      	mov	r3, r4
 800e2a8:	f7ff ff1c 	bl	800e0e4 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 800e2ac:	8c3b      	ldrh	r3, [r7, #32]
 800e2ae:	461a      	mov	r2, r3
 800e2b0:	0052      	lsls	r2, r2, #1
 800e2b2:	4413      	add	r3, r2
 800e2b4:	005b      	lsls	r3, r3, #1
 800e2b6:	b29a      	uxth	r2, r3
 800e2b8:	897b      	ldrh	r3, [r7, #10]
 800e2ba:	4413      	add	r3, r2
 800e2bc:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	781b      	ldrb	r3, [r3, #0]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d1e4      	bne.n	800e290 <ILI9341_Draw_Text+0x44>
    }


}
 800e2c6:	bf00      	nop
 800e2c8:	3714      	adds	r7, #20
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd90      	pop	{r4, r7, pc}

0800e2ce <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 800e2ce:	b580      	push	{r7, lr}
 800e2d0:	af00      	add	r7, sp, #0

	_LCD_Enable();
 800e2d2:	f000 fca3 	bl	800ec1c <_LCD_Enable>
	ILI9341_SPI_Init();
 800e2d6:	f000 f907 	bl	800e4e8 <ILI9341_SPI_Init>
	_LCD_Reset();
 800e2da:	f000 fcaf 	bl	800ec3c <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 800e2de:	2001      	movs	r0, #1
 800e2e0:	f000 fd7a 	bl	800edd8 <_LCD_SendCommand>
	HAL_Delay(2000);
 800e2e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800e2e8:	f7f9 ff48 	bl	800817c <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 800e2ec:	20cb      	movs	r0, #203	; 0xcb
 800e2ee:	f000 fd73 	bl	800edd8 <_LCD_SendCommand>
	_LCD_SendData(0x39);
 800e2f2:	2039      	movs	r0, #57	; 0x39
 800e2f4:	f000 fda2 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(0x2C);
 800e2f8:	202c      	movs	r0, #44	; 0x2c
 800e2fa:	f000 fd9f 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(0x00);
 800e2fe:	2000      	movs	r0, #0
 800e300:	f000 fd9c 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(0x34);
 800e304:	2034      	movs	r0, #52	; 0x34
 800e306:	f000 fd99 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(0x02);
 800e30a:	2002      	movs	r0, #2
 800e30c:	f000 fd96 	bl	800ee3c <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 800e310:	20cf      	movs	r0, #207	; 0xcf
 800e312:	f000 fd61 	bl	800edd8 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800e316:	2000      	movs	r0, #0
 800e318:	f000 fd90 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(0xC1);
 800e31c:	20c1      	movs	r0, #193	; 0xc1
 800e31e:	f000 fd8d 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(0x30);
 800e322:	2030      	movs	r0, #48	; 0x30
 800e324:	f000 fd8a 	bl	800ee3c <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 800e328:	20e8      	movs	r0, #232	; 0xe8
 800e32a:	f000 fd55 	bl	800edd8 <_LCD_SendCommand>
	_LCD_SendData(0x85);
 800e32e:	2085      	movs	r0, #133	; 0x85
 800e330:	f000 fd84 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(0x00);
 800e334:	2000      	movs	r0, #0
 800e336:	f000 fd81 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(0x78);
 800e33a:	2078      	movs	r0, #120	; 0x78
 800e33c:	f000 fd7e 	bl	800ee3c <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 800e340:	20ea      	movs	r0, #234	; 0xea
 800e342:	f000 fd49 	bl	800edd8 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800e346:	2000      	movs	r0, #0
 800e348:	f000 fd78 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(0x00);
 800e34c:	2000      	movs	r0, #0
 800e34e:	f000 fd75 	bl	800ee3c <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 800e352:	20ed      	movs	r0, #237	; 0xed
 800e354:	f000 fd40 	bl	800edd8 <_LCD_SendCommand>
	_LCD_SendData(0x64);
 800e358:	2064      	movs	r0, #100	; 0x64
 800e35a:	f000 fd6f 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(0x03);
 800e35e:	2003      	movs	r0, #3
 800e360:	f000 fd6c 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(0x12);
 800e364:	2012      	movs	r0, #18
 800e366:	f000 fd69 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(0x81);
 800e36a:	2081      	movs	r0, #129	; 0x81
 800e36c:	f000 fd66 	bl	800ee3c <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 800e370:	20f7      	movs	r0, #247	; 0xf7
 800e372:	f000 fd31 	bl	800edd8 <_LCD_SendCommand>
	_LCD_SendData(0x20);
 800e376:	2020      	movs	r0, #32
 800e378:	f000 fd60 	bl	800ee3c <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 800e37c:	20c0      	movs	r0, #192	; 0xc0
 800e37e:	f000 fd2b 	bl	800edd8 <_LCD_SendCommand>
	_LCD_SendData(0x23);
 800e382:	2023      	movs	r0, #35	; 0x23
 800e384:	f000 fd5a 	bl	800ee3c <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 800e388:	20c1      	movs	r0, #193	; 0xc1
 800e38a:	f000 fd25 	bl	800edd8 <_LCD_SendCommand>
	_LCD_SendData(0x10);
 800e38e:	2010      	movs	r0, #16
 800e390:	f000 fd54 	bl	800ee3c <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 800e394:	20c5      	movs	r0, #197	; 0xc5
 800e396:	f000 fd1f 	bl	800edd8 <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 800e39a:	203e      	movs	r0, #62	; 0x3e
 800e39c:	f000 fd4e 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(0x28);
 800e3a0:	2028      	movs	r0, #40	; 0x28
 800e3a2:	f000 fd4b 	bl	800ee3c <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 800e3a6:	20c7      	movs	r0, #199	; 0xc7
 800e3a8:	f000 fd16 	bl	800edd8 <_LCD_SendCommand>
	_LCD_SendData(0x86);
 800e3ac:	2086      	movs	r0, #134	; 0x86
 800e3ae:	f000 fd45 	bl	800ee3c <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 800e3b2:	2036      	movs	r0, #54	; 0x36
 800e3b4:	f000 fd10 	bl	800edd8 <_LCD_SendCommand>
	_LCD_SendData(0x48);
 800e3b8:	2048      	movs	r0, #72	; 0x48
 800e3ba:	f000 fd3f 	bl	800ee3c <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 800e3be:	203a      	movs	r0, #58	; 0x3a
 800e3c0:	f000 fd0a 	bl	800edd8 <_LCD_SendCommand>
	_LCD_SendData(0x55);
 800e3c4:	2055      	movs	r0, #85	; 0x55
 800e3c6:	f000 fd39 	bl	800ee3c <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 800e3ca:	20b1      	movs	r0, #177	; 0xb1
 800e3cc:	f000 fd04 	bl	800edd8 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800e3d0:	2000      	movs	r0, #0
 800e3d2:	f000 fd33 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(0x18);
 800e3d6:	2018      	movs	r0, #24
 800e3d8:	f000 fd30 	bl	800ee3c <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 800e3dc:	20b6      	movs	r0, #182	; 0xb6
 800e3de:	f000 fcfb 	bl	800edd8 <_LCD_SendCommand>
	_LCD_SendData(0x08);
 800e3e2:	2008      	movs	r0, #8
 800e3e4:	f000 fd2a 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(0x82);
 800e3e8:	2082      	movs	r0, #130	; 0x82
 800e3ea:	f000 fd27 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(0x27);
 800e3ee:	2027      	movs	r0, #39	; 0x27
 800e3f0:	f000 fd24 	bl	800ee3c <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 800e3f4:	20f2      	movs	r0, #242	; 0xf2
 800e3f6:	f000 fcef 	bl	800edd8 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800e3fa:	2000      	movs	r0, #0
 800e3fc:	f000 fd1e 	bl	800ee3c <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 800e400:	2026      	movs	r0, #38	; 0x26
 800e402:	f000 fce9 	bl	800edd8 <_LCD_SendCommand>
	_LCD_SendData(0x01);
 800e406:	2001      	movs	r0, #1
 800e408:	f000 fd18 	bl	800ee3c <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 800e40c:	20e0      	movs	r0, #224	; 0xe0
 800e40e:	f000 fce3 	bl	800edd8 <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 800e412:	200f      	movs	r0, #15
 800e414:	f000 fd12 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(0x31);
 800e418:	2031      	movs	r0, #49	; 0x31
 800e41a:	f000 fd0f 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(0x2B);
 800e41e:	202b      	movs	r0, #43	; 0x2b
 800e420:	f000 fd0c 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(0x0C);
 800e424:	200c      	movs	r0, #12
 800e426:	f000 fd09 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(0x0E);
 800e42a:	200e      	movs	r0, #14
 800e42c:	f000 fd06 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(0x08);
 800e430:	2008      	movs	r0, #8
 800e432:	f000 fd03 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(0x4E);
 800e436:	204e      	movs	r0, #78	; 0x4e
 800e438:	f000 fd00 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(0xF1);
 800e43c:	20f1      	movs	r0, #241	; 0xf1
 800e43e:	f000 fcfd 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(0x37);
 800e442:	2037      	movs	r0, #55	; 0x37
 800e444:	f000 fcfa 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(0x07);
 800e448:	2007      	movs	r0, #7
 800e44a:	f000 fcf7 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(0x10);
 800e44e:	2010      	movs	r0, #16
 800e450:	f000 fcf4 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(0x03);
 800e454:	2003      	movs	r0, #3
 800e456:	f000 fcf1 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(0x0E);
 800e45a:	200e      	movs	r0, #14
 800e45c:	f000 fcee 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(0x09);
 800e460:	2009      	movs	r0, #9
 800e462:	f000 fceb 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(0x00);
 800e466:	2000      	movs	r0, #0
 800e468:	f000 fce8 	bl	800ee3c <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 800e46c:	20e1      	movs	r0, #225	; 0xe1
 800e46e:	f000 fcb3 	bl	800edd8 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800e472:	2000      	movs	r0, #0
 800e474:	f000 fce2 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(0x0E);
 800e478:	200e      	movs	r0, #14
 800e47a:	f000 fcdf 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(0x14);
 800e47e:	2014      	movs	r0, #20
 800e480:	f000 fcdc 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(0x03);
 800e484:	2003      	movs	r0, #3
 800e486:	f000 fcd9 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(0x11);
 800e48a:	2011      	movs	r0, #17
 800e48c:	f000 fcd6 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(0x07);
 800e490:	2007      	movs	r0, #7
 800e492:	f000 fcd3 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(0x31);
 800e496:	2031      	movs	r0, #49	; 0x31
 800e498:	f000 fcd0 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(0xC1);
 800e49c:	20c1      	movs	r0, #193	; 0xc1
 800e49e:	f000 fccd 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(0x48);
 800e4a2:	2048      	movs	r0, #72	; 0x48
 800e4a4:	f000 fcca 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(0x08);
 800e4a8:	2008      	movs	r0, #8
 800e4aa:	f000 fcc7 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(0x0F);
 800e4ae:	200f      	movs	r0, #15
 800e4b0:	f000 fcc4 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(0x0C);
 800e4b4:	200c      	movs	r0, #12
 800e4b6:	f000 fcc1 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(0x31);
 800e4ba:	2031      	movs	r0, #49	; 0x31
 800e4bc:	f000 fcbe 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(0x36);
 800e4c0:	2036      	movs	r0, #54	; 0x36
 800e4c2:	f000 fcbb 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(0x0F);
 800e4c6:	200f      	movs	r0, #15
 800e4c8:	f000 fcb8 	bl	800ee3c <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 800e4cc:	2011      	movs	r0, #17
 800e4ce:	f000 fc83 	bl	800edd8 <_LCD_SendCommand>
	HAL_Delay(240);
 800e4d2:	20f0      	movs	r0, #240	; 0xf0
 800e4d4:	f7f9 fe52 	bl	800817c <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 800e4d8:	2029      	movs	r0, #41	; 0x29
 800e4da:	f000 fc7d 	bl	800edd8 <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800e4de:	2000      	movs	r0, #0
 800e4e0:	f000 fb4e 	bl	800eb80 <ILI9341_Set_Rotation>
}
 800e4e4:	bf00      	nop
 800e4e6:	bd80      	pop	{r7, pc}

0800e4e8 <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 800e4e8:	b480      	push	{r7}
 800e4ea:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e4ec:	4b0b      	ldr	r3, [pc, #44]	; (800e51c <ILI9341_SPI_Init+0x34>)
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4f4:	2b40      	cmp	r3, #64	; 0x40
 800e4f6:	d005      	beq.n	800e504 <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 800e4f8:	4b08      	ldr	r3, [pc, #32]	; (800e51c <ILI9341_SPI_Init+0x34>)
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	4a07      	ldr	r2, [pc, #28]	; (800e51c <ILI9341_SPI_Init+0x34>)
 800e4fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e502:	6013      	str	r3, [r2, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e504:	4b06      	ldr	r3, [pc, #24]	; (800e520 <ILI9341_SPI_Init+0x38>)
 800e506:	695b      	ldr	r3, [r3, #20]
 800e508:	4a05      	ldr	r2, [pc, #20]	; (800e520 <ILI9341_SPI_Init+0x38>)
 800e50a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e50e:	6153      	str	r3, [r2, #20]
}
 800e510:	bf00      	nop
 800e512:	46bd      	mov	sp, r7
 800e514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e518:	4770      	bx	lr
 800e51a:	bf00      	nop
 800e51c:	40003c00 	.word	0x40003c00
 800e520:	48000400 	.word	0x48000400

0800e524 <ILI9341_Draw_Horizontal_Line>:
 *	Draw horizontal line
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 800e524:	b590      	push	{r4, r7, lr}
 800e526:	b087      	sub	sp, #28
 800e528:	af02      	add	r7, sp, #8
 800e52a:	4604      	mov	r4, r0
 800e52c:	4608      	mov	r0, r1
 800e52e:	4611      	mov	r1, r2
 800e530:	461a      	mov	r2, r3
 800e532:	4623      	mov	r3, r4
 800e534:	80fb      	strh	r3, [r7, #6]
 800e536:	4603      	mov	r3, r0
 800e538:	80bb      	strh	r3, [r7, #4]
 800e53a:	460b      	mov	r3, r1
 800e53c:	807b      	strh	r3, [r7, #2]
 800e53e:	4613      	mov	r3, r2
 800e540:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800e542:	4b28      	ldr	r3, [pc, #160]	; (800e5e4 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800e544:	881b      	ldrh	r3, [r3, #0]
 800e546:	b29b      	uxth	r3, r3
 800e548:	88fa      	ldrh	r2, [r7, #6]
 800e54a:	429a      	cmp	r2, r3
 800e54c:	d246      	bcs.n	800e5dc <ILI9341_Draw_Horizontal_Line+0xb8>
 800e54e:	4b26      	ldr	r3, [pc, #152]	; (800e5e8 <ILI9341_Draw_Horizontal_Line+0xc4>)
 800e550:	881b      	ldrh	r3, [r3, #0]
 800e552:	b29b      	uxth	r3, r3
 800e554:	88ba      	ldrh	r2, [r7, #4]
 800e556:	429a      	cmp	r2, r3
 800e558:	d240      	bcs.n	800e5dc <ILI9341_Draw_Horizontal_Line+0xb8>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 800e55a:	88fa      	ldrh	r2, [r7, #6]
 800e55c:	887b      	ldrh	r3, [r7, #2]
 800e55e:	4413      	add	r3, r2
 800e560:	3b01      	subs	r3, #1
 800e562:	4a20      	ldr	r2, [pc, #128]	; (800e5e4 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800e564:	8812      	ldrh	r2, [r2, #0]
 800e566:	b292      	uxth	r2, r2
 800e568:	4293      	cmp	r3, r2
 800e56a:	db05      	blt.n	800e578 <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 800e56c:	4b1d      	ldr	r3, [pc, #116]	; (800e5e4 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800e56e:	881b      	ldrh	r3, [r3, #0]
 800e570:	b29a      	uxth	r2, r3
 800e572:	88fb      	ldrh	r3, [r7, #6]
 800e574:	1ad3      	subs	r3, r2, r3
 800e576:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(	xpos,
							ypos,
							(xpos + width) - 1,
 800e578:	88fa      	ldrh	r2, [r7, #6]
 800e57a:	887b      	ldrh	r3, [r7, #2]
 800e57c:	4413      	add	r3, r2
 800e57e:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800e580:	3b01      	subs	r3, #1
 800e582:	b29a      	uxth	r2, r3
 800e584:	88bb      	ldrh	r3, [r7, #4]
 800e586:	88b9      	ldrh	r1, [r7, #4]
 800e588:	88f8      	ldrh	r0, [r7, #6]
 800e58a:	f000 f893 	bl	800e6b4 <ILI9341_Set_Frame>
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.


	uint8_t truncated = 0;
 800e58e:	2300      	movs	r3, #0
 800e590:	73fb      	strb	r3, [r7, #15]

	if((width & 1) && (width > 1))		// don't round down to zero!
 800e592:	887b      	ldrh	r3, [r7, #2]
 800e594:	f003 0301 	and.w	r3, r3, #1
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d009      	beq.n	800e5b0 <ILI9341_Draw_Horizontal_Line+0x8c>
 800e59c:	887b      	ldrh	r3, [r7, #2]
 800e59e:	2b01      	cmp	r3, #1
 800e5a0:	d906      	bls.n	800e5b0 <ILI9341_Draw_Horizontal_Line+0x8c>
	{
		truncated = 1;
 800e5a2:	2301      	movs	r3, #1
 800e5a4:	73fb      	strb	r3, [r7, #15]
		width = ((width >> 1) * 2);
 800e5a6:	887b      	ldrh	r3, [r7, #2]
 800e5a8:	085b      	lsrs	r3, r3, #1
 800e5aa:	b29b      	uxth	r3, r3
 800e5ac:	005b      	lsls	r3, r3, #1
 800e5ae:	807b      	strh	r3, [r7, #2]
	}
	_LCD_Write_Frame(xpos, ypos, colour, width, LINE_CHUNK);
 800e5b0:	887c      	ldrh	r4, [r7, #2]
 800e5b2:	883a      	ldrh	r2, [r7, #0]
 800e5b4:	88b9      	ldrh	r1, [r7, #4]
 800e5b6:	88f8      	ldrh	r0, [r7, #6]
 800e5b8:	2303      	movs	r3, #3
 800e5ba:	9300      	str	r3, [sp, #0]
 800e5bc:	4623      	mov	r3, r4
 800e5be:	f000 fb5b 	bl	800ec78 <_LCD_Write_Frame>
	//
//TODO
	// add the truncated pixel now
	if(truncated)
 800e5c2:	7bfb      	ldrb	r3, [r7, #15]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d00a      	beq.n	800e5de <ILI9341_Draw_Horizontal_Line+0xba>
	{
		ILI9341_Draw_Pixel(	(xpos + width),
 800e5c8:	88fa      	ldrh	r2, [r7, #6]
 800e5ca:	887b      	ldrh	r3, [r7, #2]
 800e5cc:	4413      	add	r3, r2
 800e5ce:	b29b      	uxth	r3, r3
 800e5d0:	883a      	ldrh	r2, [r7, #0]
 800e5d2:	88b9      	ldrh	r1, [r7, #4]
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	f000 f8e3 	bl	800e7a0 <ILI9341_Draw_Pixel>
 800e5da:	e000      	b.n	800e5de <ILI9341_Draw_Horizontal_Line+0xba>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800e5dc:	bf00      	nop
							(ypos),
							colour);
	}


}
 800e5de:	3714      	adds	r7, #20
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd90      	pop	{r4, r7, pc}
 800e5e4:	20000cb6 	.word	0x20000cb6
 800e5e8:	20000cb4 	.word	0x20000cb4

0800e5ec <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 800e5ec:	b590      	push	{r4, r7, lr}
 800e5ee:	b087      	sub	sp, #28
 800e5f0:	af02      	add	r7, sp, #8
 800e5f2:	4604      	mov	r4, r0
 800e5f4:	4608      	mov	r0, r1
 800e5f6:	4611      	mov	r1, r2
 800e5f8:	461a      	mov	r2, r3
 800e5fa:	4623      	mov	r3, r4
 800e5fc:	80fb      	strh	r3, [r7, #6]
 800e5fe:	4603      	mov	r3, r0
 800e600:	80bb      	strh	r3, [r7, #4]
 800e602:	460b      	mov	r3, r1
 800e604:	807b      	strh	r3, [r7, #2]
 800e606:	4613      	mov	r3, r2
 800e608:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800e60a:	4b28      	ldr	r3, [pc, #160]	; (800e6ac <ILI9341_Draw_Vertical_Line+0xc0>)
 800e60c:	881b      	ldrh	r3, [r3, #0]
 800e60e:	b29b      	uxth	r3, r3
 800e610:	88fa      	ldrh	r2, [r7, #6]
 800e612:	429a      	cmp	r2, r3
 800e614:	d246      	bcs.n	800e6a4 <ILI9341_Draw_Vertical_Line+0xb8>
 800e616:	4b26      	ldr	r3, [pc, #152]	; (800e6b0 <ILI9341_Draw_Vertical_Line+0xc4>)
 800e618:	881b      	ldrh	r3, [r3, #0]
 800e61a:	b29b      	uxth	r3, r3
 800e61c:	88ba      	ldrh	r2, [r7, #4]
 800e61e:	429a      	cmp	r2, r3
 800e620:	d240      	bcs.n	800e6a4 <ILI9341_Draw_Vertical_Line+0xb8>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 800e622:	88ba      	ldrh	r2, [r7, #4]
 800e624:	887b      	ldrh	r3, [r7, #2]
 800e626:	4413      	add	r3, r2
 800e628:	3b01      	subs	r3, #1
 800e62a:	4a21      	ldr	r2, [pc, #132]	; (800e6b0 <ILI9341_Draw_Vertical_Line+0xc4>)
 800e62c:	8812      	ldrh	r2, [r2, #0]
 800e62e:	b292      	uxth	r2, r2
 800e630:	4293      	cmp	r3, r2
 800e632:	db05      	blt.n	800e640 <ILI9341_Draw_Vertical_Line+0x54>
	{
		height= LCD_HEIGHT - ypos;
 800e634:	4b1e      	ldr	r3, [pc, #120]	; (800e6b0 <ILI9341_Draw_Vertical_Line+0xc4>)
 800e636:	881b      	ldrh	r3, [r3, #0]
 800e638:	b29a      	uxth	r2, r3
 800e63a:	88bb      	ldrh	r3, [r7, #4]
 800e63c:	1ad3      	subs	r3, r2, r3
 800e63e:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 800e640:	88ba      	ldrh	r2, [r7, #4]
 800e642:	887b      	ldrh	r3, [r7, #2]
 800e644:	4413      	add	r3, r2
 800e646:	b29b      	uxth	r3, r3
 800e648:	3b01      	subs	r3, #1
 800e64a:	b29b      	uxth	r3, r3
 800e64c:	88fa      	ldrh	r2, [r7, #6]
 800e64e:	88b9      	ldrh	r1, [r7, #4]
 800e650:	88f8      	ldrh	r0, [r7, #6]
 800e652:	f000 f82f 	bl	800e6b4 <ILI9341_Set_Frame>

	uint8_t truncated = 0;
 800e656:	2300      	movs	r3, #0
 800e658:	73fb      	strb	r3, [r7, #15]

	if((height & 1) && (height > 1))		// don't round down to zero!
 800e65a:	887b      	ldrh	r3, [r7, #2]
 800e65c:	f003 0301 	and.w	r3, r3, #1
 800e660:	2b00      	cmp	r3, #0
 800e662:	d009      	beq.n	800e678 <ILI9341_Draw_Vertical_Line+0x8c>
 800e664:	887b      	ldrh	r3, [r7, #2]
 800e666:	2b01      	cmp	r3, #1
 800e668:	d906      	bls.n	800e678 <ILI9341_Draw_Vertical_Line+0x8c>
	{
		truncated = 1;
 800e66a:	2301      	movs	r3, #1
 800e66c:	73fb      	strb	r3, [r7, #15]
		height = ((height >> 1) * 2);
 800e66e:	887b      	ldrh	r3, [r7, #2]
 800e670:	085b      	lsrs	r3, r3, #1
 800e672:	b29b      	uxth	r3, r3
 800e674:	005b      	lsls	r3, r3, #1
 800e676:	807b      	strh	r3, [r7, #2]
//TODO


	//

	if(truncated)
 800e678:	7bfb      	ldrb	r3, [r7, #15]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d008      	beq.n	800e690 <ILI9341_Draw_Vertical_Line+0xa4>
	{
		ILI9341_Draw_Pixel(	(xpos),
 800e67e:	88ba      	ldrh	r2, [r7, #4]
 800e680:	887b      	ldrh	r3, [r7, #2]
 800e682:	4413      	add	r3, r2
 800e684:	b299      	uxth	r1, r3
 800e686:	883a      	ldrh	r2, [r7, #0]
 800e688:	88fb      	ldrh	r3, [r7, #6]
 800e68a:	4618      	mov	r0, r3
 800e68c:	f000 f888 	bl	800e7a0 <ILI9341_Draw_Pixel>
							(ypos + height),
							colour);
	}

	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 800e690:	887c      	ldrh	r4, [r7, #2]
 800e692:	883a      	ldrh	r2, [r7, #0]
 800e694:	88b9      	ldrh	r1, [r7, #4]
 800e696:	88f8      	ldrh	r0, [r7, #6]
 800e698:	2303      	movs	r3, #3
 800e69a:	9300      	str	r3, [sp, #0]
 800e69c:	4623      	mov	r3, r4
 800e69e:	f000 faeb 	bl	800ec78 <_LCD_Write_Frame>
 800e6a2:	e000      	b.n	800e6a6 <ILI9341_Draw_Vertical_Line+0xba>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800e6a4:	bf00      	nop
}
 800e6a6:	3714      	adds	r7, #20
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	bd90      	pop	{r4, r7, pc}
 800e6ac:	20000cb6 	.word	0x20000cb6
 800e6b0:	20000cb4 	.word	0x20000cb4

0800e6b4 <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 800e6b4:	b590      	push	{r4, r7, lr}
 800e6b6:	b083      	sub	sp, #12
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	4604      	mov	r4, r0
 800e6bc:	4608      	mov	r0, r1
 800e6be:	4611      	mov	r1, r2
 800e6c0:	461a      	mov	r2, r3
 800e6c2:	4623      	mov	r3, r4
 800e6c4:	80fb      	strh	r3, [r7, #6]
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	80bb      	strh	r3, [r7, #4]
 800e6ca:	460b      	mov	r3, r1
 800e6cc:	807b      	strh	r3, [r7, #2]
 800e6ce:	4613      	mov	r3, r2
 800e6d0:	803b      	strh	r3, [r7, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 800e6d2:	202a      	movs	r0, #42	; 0x2a
 800e6d4:	f000 fb80 	bl	800edd8 <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 800e6d8:	88fb      	ldrh	r3, [r7, #6]
 800e6da:	0a1b      	lsrs	r3, r3, #8
 800e6dc:	b29b      	uxth	r3, r3
 800e6de:	b2db      	uxtb	r3, r3
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	f000 fbab 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(sc);
 800e6e6:	88fb      	ldrh	r3, [r7, #6]
 800e6e8:	b2db      	uxtb	r3, r3
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	f000 fba6 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 800e6f0:	887b      	ldrh	r3, [r7, #2]
 800e6f2:	0a1b      	lsrs	r3, r3, #8
 800e6f4:	b29b      	uxth	r3, r3
 800e6f6:	b2db      	uxtb	r3, r3
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	f000 fb9f 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(ec);
 800e6fe:	887b      	ldrh	r3, [r7, #2]
 800e700:	b2db      	uxtb	r3, r3
 800e702:	4618      	mov	r0, r3
 800e704:	f000 fb9a 	bl	800ee3c <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 800e708:	202b      	movs	r0, #43	; 0x2b
 800e70a:	f000 fb65 	bl	800edd8 <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 800e70e:	88bb      	ldrh	r3, [r7, #4]
 800e710:	0a1b      	lsrs	r3, r3, #8
 800e712:	b29b      	uxth	r3, r3
 800e714:	b2db      	uxtb	r3, r3
 800e716:	4618      	mov	r0, r3
 800e718:	f000 fb90 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(sp);
 800e71c:	88bb      	ldrh	r3, [r7, #4]
 800e71e:	b2db      	uxtb	r3, r3
 800e720:	4618      	mov	r0, r3
 800e722:	f000 fb8b 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 800e726:	883b      	ldrh	r3, [r7, #0]
 800e728:	0a1b      	lsrs	r3, r3, #8
 800e72a:	b29b      	uxth	r3, r3
 800e72c:	b2db      	uxtb	r3, r3
 800e72e:	4618      	mov	r0, r3
 800e730:	f000 fb84 	bl	800ee3c <_LCD_SendData>
	_LCD_SendData(ep);
 800e734:	883b      	ldrh	r3, [r7, #0]
 800e736:	b2db      	uxtb	r3, r3
 800e738:	4618      	mov	r0, r3
 800e73a:	f000 fb7f 	bl	800ee3c <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 800e73e:	202c      	movs	r0, #44	; 0x2c
 800e740:	f000 fb4a 	bl	800edd8 <_LCD_SendCommand>
}
 800e744:	bf00      	nop
 800e746:	370c      	adds	r7, #12
 800e748:	46bd      	mov	sp, r7
 800e74a:	bd90      	pop	{r4, r7, pc}

0800e74c <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b084      	sub	sp, #16
 800e750:	af02      	add	r7, sp, #8
 800e752:	4603      	mov	r3, r0
 800e754:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 800e756:	4b10      	ldr	r3, [pc, #64]	; (800e798 <ILI9341_Fill_Screen+0x4c>)
 800e758:	881b      	ldrh	r3, [r3, #0]
 800e75a:	b29a      	uxth	r2, r3
 800e75c:	4b0f      	ldr	r3, [pc, #60]	; (800e79c <ILI9341_Fill_Screen+0x50>)
 800e75e:	881b      	ldrh	r3, [r3, #0]
 800e760:	b29b      	uxth	r3, r3
 800e762:	2100      	movs	r1, #0
 800e764:	2000      	movs	r0, #0
 800e766:	f7ff ffa5 	bl	800e6b4 <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 800e76a:	4b0b      	ldr	r3, [pc, #44]	; (800e798 <ILI9341_Fill_Screen+0x4c>)
 800e76c:	881b      	ldrh	r3, [r3, #0]
 800e76e:	b29b      	uxth	r3, r3
 800e770:	461a      	mov	r2, r3
 800e772:	4b0a      	ldr	r3, [pc, #40]	; (800e79c <ILI9341_Fill_Screen+0x50>)
 800e774:	881b      	ldrh	r3, [r3, #0]
 800e776:	b29b      	uxth	r3, r3
 800e778:	fb03 f302 	mul.w	r3, r3, r2
 800e77c:	4619      	mov	r1, r3
 800e77e:	88fa      	ldrh	r2, [r7, #6]
 800e780:	2304      	movs	r3, #4
 800e782:	9300      	str	r3, [sp, #0]
 800e784:	460b      	mov	r3, r1
 800e786:	2100      	movs	r1, #0
 800e788:	2000      	movs	r0, #0
 800e78a:	f000 fa75 	bl	800ec78 <_LCD_Write_Frame>
}
 800e78e:	bf00      	nop
 800e790:	3708      	adds	r7, #8
 800e792:	46bd      	mov	sp, r7
 800e794:	bd80      	pop	{r7, pc}
 800e796:	bf00      	nop
 800e798:	20000cb6 	.word	0x20000cb6
 800e79c:	20000cb4 	.word	0x20000cb4

0800e7a0 <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b08e      	sub	sp, #56	; 0x38
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	80fb      	strh	r3, [r7, #6]
 800e7aa:	460b      	mov	r3, r1
 800e7ac:	80bb      	strh	r3, [r7, #4]
 800e7ae:	4613      	mov	r3, r2
 800e7b0:	807b      	strh	r3, [r7, #2]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800e7b2:	4b98      	ldr	r3, [pc, #608]	; (800ea14 <ILI9341_Draw_Pixel+0x274>)
 800e7b4:	881b      	ldrh	r3, [r3, #0]
 800e7b6:	b29b      	uxth	r3, r3
 800e7b8:	88fa      	ldrh	r2, [r7, #6]
 800e7ba:	429a      	cmp	r2, r3
 800e7bc:	f080 8143 	bcs.w	800ea46 <ILI9341_Draw_Pixel+0x2a6>
 800e7c0:	4b95      	ldr	r3, [pc, #596]	; (800ea18 <ILI9341_Draw_Pixel+0x278>)
 800e7c2:	881b      	ldrh	r3, [r3, #0]
 800e7c4:	b29b      	uxth	r3, r3
 800e7c6:	88ba      	ldrh	r2, [r7, #4]
 800e7c8:	429a      	cmp	r2, r3
 800e7ca:	f080 813c 	bcs.w	800ea46 <ILI9341_Draw_Pixel+0x2a6>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800e7ce:	4b93      	ldr	r3, [pc, #588]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e7d0:	695b      	ldr	r3, [r3, #20]
 800e7d2:	4a92      	ldr	r2, [pc, #584]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e7d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e7d8:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e7da:	4b90      	ldr	r3, [pc, #576]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e7dc:	695b      	ldr	r3, [r3, #20]
 800e7de:	4a8f      	ldr	r2, [pc, #572]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e7e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e7e4:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2A, 0, 10);
 800e7e6:	220a      	movs	r2, #10
 800e7e8:	2100      	movs	r1, #0
 800e7ea:	202a      	movs	r0, #42	; 0x2a
 800e7ec:	f000 fb58 	bl	800eea0 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	637b      	str	r3, [r7, #52]	; 0x34
 800e7f4:	e008      	b.n	800e808 <ILI9341_Draw_Pixel+0x68>
 800e7f6:	4b89      	ldr	r3, [pc, #548]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e7f8:	695b      	ldr	r3, [r3, #20]
 800e7fa:	4a88      	ldr	r2, [pc, #544]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e7fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e800:	6153      	str	r3, [r2, #20]
 800e802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e804:	3301      	adds	r3, #1
 800e806:	637b      	str	r3, [r7, #52]	; 0x34
 800e808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e80a:	2b02      	cmp	r3, #2
 800e80c:	ddf3      	ble.n	800e7f6 <ILI9341_Draw_Pixel+0x56>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800e80e:	4b83      	ldr	r3, [pc, #524]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e810:	695b      	ldr	r3, [r3, #20]
 800e812:	4a82      	ldr	r2, [pc, #520]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e818:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e81a:	4b80      	ldr	r3, [pc, #512]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e81c:	695b      	ldr	r3, [r3, #20]
 800e81e:	4a7f      	ldr	r2, [pc, #508]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e824:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e826:	4b7d      	ldr	r3, [pc, #500]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e828:	695b      	ldr	r3, [r3, #20]
 800e82a:	4a7c      	ldr	r2, [pc, #496]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e82c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e830:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] = { x >> 8, x, (x + 1) >> 8, (x + 1) };
 800e832:	88fb      	ldrh	r3, [r7, #6]
 800e834:	0a1b      	lsrs	r3, r3, #8
 800e836:	b29b      	uxth	r3, r3
 800e838:	b2db      	uxtb	r3, r3
 800e83a:	753b      	strb	r3, [r7, #20]
 800e83c:	88fb      	ldrh	r3, [r7, #6]
 800e83e:	b2db      	uxtb	r3, r3
 800e840:	757b      	strb	r3, [r7, #21]
 800e842:	88fb      	ldrh	r3, [r7, #6]
 800e844:	3301      	adds	r3, #1
 800e846:	121b      	asrs	r3, r3, #8
 800e848:	b2db      	uxtb	r3, r3
 800e84a:	75bb      	strb	r3, [r7, #22]
 800e84c:	88fb      	ldrh	r3, [r7, #6]
 800e84e:	b2db      	uxtb	r3, r3
 800e850:	3301      	adds	r3, #1
 800e852:	b2db      	uxtb	r3, r3
 800e854:	75fb      	strb	r3, [r7, #23]
	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 800e856:	f107 0014 	add.w	r0, r7, #20
 800e85a:	230a      	movs	r3, #10
 800e85c:	2200      	movs	r2, #0
 800e85e:	2104      	movs	r1, #4
 800e860:	f000 fb50 	bl	800ef04 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e864:	2300      	movs	r3, #0
 800e866:	633b      	str	r3, [r7, #48]	; 0x30
 800e868:	e008      	b.n	800e87c <ILI9341_Draw_Pixel+0xdc>
 800e86a:	4b6c      	ldr	r3, [pc, #432]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e86c:	695b      	ldr	r3, [r3, #20]
 800e86e:	4a6b      	ldr	r2, [pc, #428]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e870:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e874:	6153      	str	r3, [r2, #20]
 800e876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e878:	3301      	adds	r3, #1
 800e87a:	633b      	str	r3, [r7, #48]	; 0x30
 800e87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e87e:	2b02      	cmp	r3, #2
 800e880:	ddf3      	ble.n	800e86a <ILI9341_Draw_Pixel+0xca>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e882:	4b66      	ldr	r3, [pc, #408]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e884:	695b      	ldr	r3, [r3, #20]
 800e886:	4a65      	ldr	r2, [pc, #404]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e88c:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800e88e:	4b63      	ldr	r3, [pc, #396]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e890:	695b      	ldr	r3, [r3, #20]
 800e892:	4a62      	ldr	r2, [pc, #392]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e894:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e898:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e89a:	4b60      	ldr	r3, [pc, #384]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e89c:	695b      	ldr	r3, [r3, #20]
 800e89e:	4a5f      	ldr	r2, [pc, #380]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e8a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e8a4:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2B, 0, 10);
 800e8a6:	220a      	movs	r2, #10
 800e8a8:	2100      	movs	r1, #0
 800e8aa:	202b      	movs	r0, #43	; 0x2b
 800e8ac:	f000 faf8 	bl	800eea0 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e8b4:	e008      	b.n	800e8c8 <ILI9341_Draw_Pixel+0x128>
 800e8b6:	4b59      	ldr	r3, [pc, #356]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e8b8:	695b      	ldr	r3, [r3, #20]
 800e8ba:	4a58      	ldr	r2, [pc, #352]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e8bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e8c0:	6153      	str	r3, [r2, #20]
 800e8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8c4:	3301      	adds	r3, #1
 800e8c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ca:	2b02      	cmp	r3, #2
 800e8cc:	ddf3      	ble.n	800e8b6 <ILI9341_Draw_Pixel+0x116>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800e8ce:	4b53      	ldr	r3, [pc, #332]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e8d0:	695b      	ldr	r3, [r3, #20]
 800e8d2:	4a52      	ldr	r2, [pc, #328]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e8d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e8d8:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e8da:	4b50      	ldr	r3, [pc, #320]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e8dc:	695b      	ldr	r3, [r3, #20]
 800e8de:	4a4f      	ldr	r2, [pc, #316]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e8e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e8e4:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e8e6:	4b4d      	ldr	r3, [pc, #308]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e8e8:	695b      	ldr	r3, [r3, #20]
 800e8ea:	4a4c      	ldr	r2, [pc, #304]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e8ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e8f0:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] = { y >> 8, y, (y + 1) >> 8, (y + 1) };
 800e8f2:	88bb      	ldrh	r3, [r7, #4]
 800e8f4:	0a1b      	lsrs	r3, r3, #8
 800e8f6:	b29b      	uxth	r3, r3
 800e8f8:	b2db      	uxtb	r3, r3
 800e8fa:	743b      	strb	r3, [r7, #16]
 800e8fc:	88bb      	ldrh	r3, [r7, #4]
 800e8fe:	b2db      	uxtb	r3, r3
 800e900:	747b      	strb	r3, [r7, #17]
 800e902:	88bb      	ldrh	r3, [r7, #4]
 800e904:	3301      	adds	r3, #1
 800e906:	121b      	asrs	r3, r3, #8
 800e908:	b2db      	uxtb	r3, r3
 800e90a:	74bb      	strb	r3, [r7, #18]
 800e90c:	88bb      	ldrh	r3, [r7, #4]
 800e90e:	b2db      	uxtb	r3, r3
 800e910:	3301      	adds	r3, #1
 800e912:	b2db      	uxtb	r3, r3
 800e914:	74fb      	strb	r3, [r7, #19]
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 800e916:	f107 0010 	add.w	r0, r7, #16
 800e91a:	230a      	movs	r3, #10
 800e91c:	2200      	movs	r2, #0
 800e91e:	2104      	movs	r1, #4
 800e920:	f000 faf0 	bl	800ef04 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e924:	2300      	movs	r3, #0
 800e926:	62bb      	str	r3, [r7, #40]	; 0x28
 800e928:	e008      	b.n	800e93c <ILI9341_Draw_Pixel+0x19c>
 800e92a:	4b3c      	ldr	r3, [pc, #240]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e92c:	695b      	ldr	r3, [r3, #20]
 800e92e:	4a3b      	ldr	r2, [pc, #236]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e930:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e934:	6153      	str	r3, [r2, #20]
 800e936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e938:	3301      	adds	r3, #1
 800e93a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e93e:	2b02      	cmp	r3, #2
 800e940:	ddf3      	ble.n	800e92a <ILI9341_Draw_Pixel+0x18a>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e942:	4b36      	ldr	r3, [pc, #216]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e944:	695b      	ldr	r3, [r3, #20]
 800e946:	4a35      	ldr	r2, [pc, #212]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e94c:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800e94e:	4b33      	ldr	r3, [pc, #204]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e950:	695b      	ldr	r3, [r3, #20]
 800e952:	4a32      	ldr	r2, [pc, #200]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e954:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e958:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e95a:	4b30      	ldr	r3, [pc, #192]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e95c:	695b      	ldr	r3, [r3, #20]
 800e95e:	4a2f      	ldr	r2, [pc, #188]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e960:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e964:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2C, 0, 10);
 800e966:	220a      	movs	r2, #10
 800e968:	2100      	movs	r1, #0
 800e96a:	202c      	movs	r0, #44	; 0x2c
 800e96c:	f000 fa98 	bl	800eea0 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e970:	2300      	movs	r3, #0
 800e972:	627b      	str	r3, [r7, #36]	; 0x24
 800e974:	e008      	b.n	800e988 <ILI9341_Draw_Pixel+0x1e8>
 800e976:	4b29      	ldr	r3, [pc, #164]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e978:	695b      	ldr	r3, [r3, #20]
 800e97a:	4a28      	ldr	r2, [pc, #160]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e97c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e980:	6153      	str	r3, [r2, #20]
 800e982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e984:	3301      	adds	r3, #1
 800e986:	627b      	str	r3, [r7, #36]	; 0x24
 800e988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e98a:	2b02      	cmp	r3, #2
 800e98c:	ddf3      	ble.n	800e976 <ILI9341_Draw_Pixel+0x1d6>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800e98e:	4b23      	ldr	r3, [pc, #140]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e990:	695b      	ldr	r3, [r3, #20]
 800e992:	4a22      	ldr	r2, [pc, #136]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e998:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e99a:	4b20      	ldr	r3, [pc, #128]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e99c:	695b      	ldr	r3, [r3, #20]
 800e99e:	4a1f      	ldr	r2, [pc, #124]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e9a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e9a4:	6153      	str	r3, [r2, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e9a6:	4b1d      	ldr	r3, [pc, #116]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e9a8:	695b      	ldr	r3, [r3, #20]
 800e9aa:	4a1c      	ldr	r2, [pc, #112]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e9ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e9b0:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 800e9b2:	887b      	ldrh	r3, [r7, #2]
 800e9b4:	0a1b      	lsrs	r3, r3, #8
 800e9b6:	b29b      	uxth	r3, r3
 800e9b8:	b2db      	uxtb	r3, r3
 800e9ba:	733b      	strb	r3, [r7, #12]
 800e9bc:	887b      	ldrh	r3, [r7, #2]
 800e9be:	b2db      	uxtb	r3, r3
 800e9c0:	737b      	strb	r3, [r7, #13]
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 2, 0, 1);
 800e9c2:	f107 000c 	add.w	r0, r7, #12
 800e9c6:	2301      	movs	r3, #1
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	2102      	movs	r1, #2
 800e9cc:	f000 fa9a 	bl	800ef04 <_SPI_SendByteMultiByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	623b      	str	r3, [r7, #32]
 800e9d4:	e008      	b.n	800e9e8 <ILI9341_Draw_Pixel+0x248>
 800e9d6:	4b11      	ldr	r3, [pc, #68]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e9d8:	695b      	ldr	r3, [r3, #20]
 800e9da:	4a10      	ldr	r2, [pc, #64]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e9dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e9e0:	6153      	str	r3, [r2, #20]
 800e9e2:	6a3b      	ldr	r3, [r7, #32]
 800e9e4:	3301      	adds	r3, #1
 800e9e6:	623b      	str	r3, [r7, #32]
 800e9e8:	6a3b      	ldr	r3, [r7, #32]
 800e9ea:	2b02      	cmp	r3, #2
 800e9ec:	ddf3      	ble.n	800e9d6 <ILI9341_Draw_Pixel+0x236>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	61fb      	str	r3, [r7, #28]
 800e9f2:	e008      	b.n	800ea06 <ILI9341_Draw_Pixel+0x266>
 800e9f4:	4b09      	ldr	r3, [pc, #36]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e9f6:	695b      	ldr	r3, [r3, #20]
 800e9f8:	4a08      	ldr	r2, [pc, #32]	; (800ea1c <ILI9341_Draw_Pixel+0x27c>)
 800e9fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e9fe:	6153      	str	r3, [r2, #20]
 800ea00:	69fb      	ldr	r3, [r7, #28]
 800ea02:	3301      	adds	r3, #1
 800ea04:	61fb      	str	r3, [r7, #28]
 800ea06:	69fb      	ldr	r3, [r7, #28]
 800ea08:	2b02      	cmp	r3, #2
 800ea0a:	ddf3      	ble.n	800e9f4 <ILI9341_Draw_Pixel+0x254>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	61bb      	str	r3, [r7, #24]
 800ea10:	e00f      	b.n	800ea32 <ILI9341_Draw_Pixel+0x292>
 800ea12:	bf00      	nop
 800ea14:	20000cb6 	.word	0x20000cb6
 800ea18:	20000cb4 	.word	0x20000cb4
 800ea1c:	48000400 	.word	0x48000400
 800ea20:	4b0b      	ldr	r3, [pc, #44]	; (800ea50 <ILI9341_Draw_Pixel+0x2b0>)
 800ea22:	695b      	ldr	r3, [r3, #20]
 800ea24:	4a0a      	ldr	r2, [pc, #40]	; (800ea50 <ILI9341_Draw_Pixel+0x2b0>)
 800ea26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ea2a:	6153      	str	r3, [r2, #20]
 800ea2c:	69bb      	ldr	r3, [r7, #24]
 800ea2e:	3301      	adds	r3, #1
 800ea30:	61bb      	str	r3, [r7, #24]
 800ea32:	69bb      	ldr	r3, [r7, #24]
 800ea34:	2b02      	cmp	r3, #2
 800ea36:	ddf3      	ble.n	800ea20 <ILI9341_Draw_Pixel+0x280>


	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800ea38:	4b05      	ldr	r3, [pc, #20]	; (800ea50 <ILI9341_Draw_Pixel+0x2b0>)
 800ea3a:	695b      	ldr	r3, [r3, #20]
 800ea3c:	4a04      	ldr	r2, [pc, #16]	; (800ea50 <ILI9341_Draw_Pixel+0x2b0>)
 800ea3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea42:	6153      	str	r3, [r2, #20]
 800ea44:	e000      	b.n	800ea48 <ILI9341_Draw_Pixel+0x2a8>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800ea46:	bf00      	nop


}
 800ea48:	3738      	adds	r7, #56	; 0x38
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd80      	pop	{r7, pc}
 800ea4e:	bf00      	nop
 800ea50:	48000400 	.word	0x48000400

0800ea54 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 800ea54:	b590      	push	{r4, r7, lr}
 800ea56:	b087      	sub	sp, #28
 800ea58:	af02      	add	r7, sp, #8
 800ea5a:	4604      	mov	r4, r0
 800ea5c:	4608      	mov	r0, r1
 800ea5e:	4611      	mov	r1, r2
 800ea60:	461a      	mov	r2, r3
 800ea62:	4623      	mov	r3, r4
 800ea64:	80fb      	strh	r3, [r7, #6]
 800ea66:	4603      	mov	r3, r0
 800ea68:	80bb      	strh	r3, [r7, #4]
 800ea6a:	460b      	mov	r3, r1
 800ea6c:	807b      	strh	r3, [r7, #2]
 800ea6e:	4613      	mov	r3, r2
 800ea70:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800ea72:	4b41      	ldr	r3, [pc, #260]	; (800eb78 <ILI9341_Draw_Rectangle+0x124>)
 800ea74:	881b      	ldrh	r3, [r3, #0]
 800ea76:	b29b      	uxth	r3, r3
 800ea78:	88fa      	ldrh	r2, [r7, #6]
 800ea7a:	429a      	cmp	r2, r3
 800ea7c:	d278      	bcs.n	800eb70 <ILI9341_Draw_Rectangle+0x11c>
 800ea7e:	4b3f      	ldr	r3, [pc, #252]	; (800eb7c <ILI9341_Draw_Rectangle+0x128>)
 800ea80:	881b      	ldrh	r3, [r3, #0]
 800ea82:	b29b      	uxth	r3, r3
 800ea84:	88ba      	ldrh	r2, [r7, #4]
 800ea86:	429a      	cmp	r2, r3
 800ea88:	d272      	bcs.n	800eb70 <ILI9341_Draw_Rectangle+0x11c>
	if((xpos+width-1)>=LCD_WIDTH)
 800ea8a:	88fa      	ldrh	r2, [r7, #6]
 800ea8c:	887b      	ldrh	r3, [r7, #2]
 800ea8e:	4413      	add	r3, r2
 800ea90:	3b01      	subs	r3, #1
 800ea92:	4a39      	ldr	r2, [pc, #228]	; (800eb78 <ILI9341_Draw_Rectangle+0x124>)
 800ea94:	8812      	ldrh	r2, [r2, #0]
 800ea96:	b292      	uxth	r2, r2
 800ea98:	4293      	cmp	r3, r2
 800ea9a:	db05      	blt.n	800eaa8 <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 800ea9c:	4b36      	ldr	r3, [pc, #216]	; (800eb78 <ILI9341_Draw_Rectangle+0x124>)
 800ea9e:	881b      	ldrh	r3, [r3, #0]
 800eaa0:	b29a      	uxth	r2, r3
 800eaa2:	88fb      	ldrh	r3, [r7, #6]
 800eaa4:	1ad3      	subs	r3, r2, r3
 800eaa6:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 800eaa8:	88ba      	ldrh	r2, [r7, #4]
 800eaaa:	883b      	ldrh	r3, [r7, #0]
 800eaac:	4413      	add	r3, r2
 800eaae:	3b01      	subs	r3, #1
 800eab0:	4a32      	ldr	r2, [pc, #200]	; (800eb7c <ILI9341_Draw_Rectangle+0x128>)
 800eab2:	8812      	ldrh	r2, [r2, #0]
 800eab4:	b292      	uxth	r2, r2
 800eab6:	4293      	cmp	r3, r2
 800eab8:	db05      	blt.n	800eac6 <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 800eaba:	4b30      	ldr	r3, [pc, #192]	; (800eb7c <ILI9341_Draw_Rectangle+0x128>)
 800eabc:	881b      	ldrh	r3, [r3, #0]
 800eabe:	b29a      	uxth	r2, r3
 800eac0:	88bb      	ldrh	r3, [r7, #4]
 800eac2:	1ad3      	subs	r3, r2, r3
 800eac4:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 800eac6:	88fa      	ldrh	r2, [r7, #6]
 800eac8:	887b      	ldrh	r3, [r7, #2]
 800eaca:	4413      	add	r3, r2
 800eacc:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800eace:	3b01      	subs	r3, #1
 800ead0:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 800ead2:	88ba      	ldrh	r2, [r7, #4]
 800ead4:	883b      	ldrh	r3, [r7, #0]
 800ead6:	4413      	add	r3, r2
 800ead8:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800eada:	3b01      	subs	r3, #1
 800eadc:	b29b      	uxth	r3, r3
 800eade:	88b9      	ldrh	r1, [r7, #4]
 800eae0:	88f8      	ldrh	r0, [r7, #6]
 800eae2:	4622      	mov	r2, r4
 800eae4:	f7ff fde6 	bl	800e6b4 <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 800eae8:	883a      	ldrh	r2, [r7, #0]
 800eaea:	887b      	ldrh	r3, [r7, #2]
 800eaec:	fb12 f303 	smulbb	r3, r2, r3
 800eaf0:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 800eaf6:	89fb      	ldrh	r3, [r7, #14]
 800eaf8:	f003 0301 	and.w	r3, r3, #1
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d009      	beq.n	800eb14 <ILI9341_Draw_Rectangle+0xc0>
 800eb00:	89fb      	ldrh	r3, [r7, #14]
 800eb02:	2b01      	cmp	r3, #1
 800eb04:	d906      	bls.n	800eb14 <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 800eb06:	2301      	movs	r3, #1
 800eb08:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 800eb0a:	89fb      	ldrh	r3, [r7, #14]
 800eb0c:	085b      	lsrs	r3, r3, #1
 800eb0e:	b29b      	uxth	r3, r3
 800eb10:	005b      	lsls	r3, r3, #1
 800eb12:	81fb      	strh	r3, [r7, #14]
	}

	_LCD_Write_Frame(	xpos,
 800eb14:	89fc      	ldrh	r4, [r7, #14]
 800eb16:	8c3a      	ldrh	r2, [r7, #32]
 800eb18:	88b9      	ldrh	r1, [r7, #4]
 800eb1a:	88f8      	ldrh	r0, [r7, #6]
 800eb1c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800eb20:	9300      	str	r3, [sp, #0]
 800eb22:	4623      	mov	r3, r4
 800eb24:	f000 f8a8 	bl	800ec78 <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 800eb28:	7b7b      	ldrb	r3, [r7, #13]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d021      	beq.n	800eb72 <ILI9341_Draw_Rectangle+0x11e>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 800eb2e:	88fa      	ldrh	r2, [r7, #6]
 800eb30:	887b      	ldrh	r3, [r7, #2]
 800eb32:	4413      	add	r3, r2
 800eb34:	b29b      	uxth	r3, r3
 800eb36:	3b02      	subs	r3, #2
 800eb38:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800eb3a:	88ba      	ldrh	r2, [r7, #4]
 800eb3c:	883b      	ldrh	r3, [r7, #0]
 800eb3e:	4413      	add	r3, r2
 800eb40:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 800eb42:	3b01      	subs	r3, #1
 800eb44:	b29b      	uxth	r3, r3
 800eb46:	8c3a      	ldrh	r2, [r7, #32]
 800eb48:	4619      	mov	r1, r3
 800eb4a:	f7ff fe29 	bl	800e7a0 <ILI9341_Draw_Pixel>
							colour);
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800eb4e:	88fa      	ldrh	r2, [r7, #6]
 800eb50:	887b      	ldrh	r3, [r7, #2]
 800eb52:	4413      	add	r3, r2
 800eb54:	b29b      	uxth	r3, r3
 800eb56:	3b01      	subs	r3, #1
 800eb58:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800eb5a:	88ba      	ldrh	r2, [r7, #4]
 800eb5c:	883b      	ldrh	r3, [r7, #0]
 800eb5e:	4413      	add	r3, r2
 800eb60:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800eb62:	3b01      	subs	r3, #1
 800eb64:	b29b      	uxth	r3, r3
 800eb66:	8c3a      	ldrh	r2, [r7, #32]
 800eb68:	4619      	mov	r1, r3
 800eb6a:	f7ff fe19 	bl	800e7a0 <ILI9341_Draw_Pixel>
 800eb6e:	e000      	b.n	800eb72 <ILI9341_Draw_Rectangle+0x11e>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800eb70:	bf00      	nop
							colour);
	}
}
 800eb72:	3714      	adds	r7, #20
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd90      	pop	{r4, r7, pc}
 800eb78:	20000cb6 	.word	0x20000cb6
 800eb7c:	20000cb4 	.word	0x20000cb4

0800eb80 <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b084      	sub	sp, #16
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	4603      	mov	r3, r0
 800eb88:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = rotation;
 800eb8a:	79fb      	ldrb	r3, [r7, #7]
 800eb8c:	73fb      	strb	r3, [r7, #15]

	_LCD_SendCommand(0x36);
 800eb8e:	2036      	movs	r0, #54	; 0x36
 800eb90:	f000 f922 	bl	800edd8 <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 800eb94:	7bfb      	ldrb	r3, [r7, #15]
 800eb96:	2b03      	cmp	r3, #3
 800eb98:	d836      	bhi.n	800ec08 <ILI9341_Set_Rotation+0x88>
 800eb9a:	a201      	add	r2, pc, #4	; (adr r2, 800eba0 <ILI9341_Set_Rotation+0x20>)
 800eb9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eba0:	0800ebb1 	.word	0x0800ebb1
 800eba4:	0800ebc7 	.word	0x0800ebc7
 800eba8:	0800ebdd 	.word	0x0800ebdd
 800ebac:	0800ebf3 	.word	0x0800ebf3
	{
		case SCREEN_VERTICAL_1:
			_LCD_SendData(0x40|0x08);
 800ebb0:	2048      	movs	r0, #72	; 0x48
 800ebb2:	f000 f943 	bl	800ee3c <_LCD_SendData>
			LCD_WIDTH = 240;
 800ebb6:	4b17      	ldr	r3, [pc, #92]	; (800ec14 <ILI9341_Set_Rotation+0x94>)
 800ebb8:	22f0      	movs	r2, #240	; 0xf0
 800ebba:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800ebbc:	4b16      	ldr	r3, [pc, #88]	; (800ec18 <ILI9341_Set_Rotation+0x98>)
 800ebbe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800ebc2:	801a      	strh	r2, [r3, #0]
			break;
 800ebc4:	e021      	b.n	800ec0a <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			_LCD_SendData(0x20|0x08);
 800ebc6:	2028      	movs	r0, #40	; 0x28
 800ebc8:	f000 f938 	bl	800ee3c <_LCD_SendData>
			LCD_WIDTH  = 320;
 800ebcc:	4b11      	ldr	r3, [pc, #68]	; (800ec14 <ILI9341_Set_Rotation+0x94>)
 800ebce:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800ebd2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800ebd4:	4b10      	ldr	r3, [pc, #64]	; (800ec18 <ILI9341_Set_Rotation+0x98>)
 800ebd6:	22f0      	movs	r2, #240	; 0xf0
 800ebd8:	801a      	strh	r2, [r3, #0]
			break;
 800ebda:	e016      	b.n	800ec0a <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			_LCD_SendData(0x80|0x08);
 800ebdc:	2088      	movs	r0, #136	; 0x88
 800ebde:	f000 f92d 	bl	800ee3c <_LCD_SendData>
			LCD_WIDTH  = 240;
 800ebe2:	4b0c      	ldr	r3, [pc, #48]	; (800ec14 <ILI9341_Set_Rotation+0x94>)
 800ebe4:	22f0      	movs	r2, #240	; 0xf0
 800ebe6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800ebe8:	4b0b      	ldr	r3, [pc, #44]	; (800ec18 <ILI9341_Set_Rotation+0x98>)
 800ebea:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800ebee:	801a      	strh	r2, [r3, #0]
			break;
 800ebf0:	e00b      	b.n	800ec0a <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			_LCD_SendData(0x40|0x80|0x20|0x08);
 800ebf2:	20e8      	movs	r0, #232	; 0xe8
 800ebf4:	f000 f922 	bl	800ee3c <_LCD_SendData>
			LCD_WIDTH  = 320;
 800ebf8:	4b06      	ldr	r3, [pc, #24]	; (800ec14 <ILI9341_Set_Rotation+0x94>)
 800ebfa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800ebfe:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800ec00:	4b05      	ldr	r3, [pc, #20]	; (800ec18 <ILI9341_Set_Rotation+0x98>)
 800ec02:	22f0      	movs	r2, #240	; 0xf0
 800ec04:	801a      	strh	r2, [r3, #0]
			break;
 800ec06:	e000      	b.n	800ec0a <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800ec08:	bf00      	nop
	}
}
 800ec0a:	bf00      	nop
 800ec0c:	3710      	adds	r7, #16
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bd80      	pop	{r7, pc}
 800ec12:	bf00      	nop
 800ec14:	20000cb6 	.word	0x20000cb6
 800ec18:	20000cb4 	.word	0x20000cb4

0800ec1c <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 800ec1c:	b480      	push	{r7}
 800ec1e:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800ec20:	4b05      	ldr	r3, [pc, #20]	; (800ec38 <_LCD_Enable+0x1c>)
 800ec22:	695b      	ldr	r3, [r3, #20]
 800ec24:	4a04      	ldr	r2, [pc, #16]	; (800ec38 <_LCD_Enable+0x1c>)
 800ec26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ec2a:	6153      	str	r3, [r2, #20]
}
 800ec2c:	bf00      	nop
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec34:	4770      	bx	lr
 800ec36:	bf00      	nop
 800ec38:	48000400 	.word	0x48000400

0800ec3c <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 800ec40:	4b0c      	ldr	r3, [pc, #48]	; (800ec74 <_LCD_Reset+0x38>)
 800ec42:	695b      	ldr	r3, [r3, #20]
 800ec44:	4a0b      	ldr	r2, [pc, #44]	; (800ec74 <_LCD_Reset+0x38>)
 800ec46:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ec4a:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800ec4c:	20c8      	movs	r0, #200	; 0xc8
 800ec4e:	f7f9 fa95 	bl	800817c <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ec52:	4b08      	ldr	r3, [pc, #32]	; (800ec74 <_LCD_Reset+0x38>)
 800ec54:	695b      	ldr	r3, [r3, #20]
 800ec56:	4a07      	ldr	r2, [pc, #28]	; (800ec74 <_LCD_Reset+0x38>)
 800ec58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ec5c:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800ec5e:	20c8      	movs	r0, #200	; 0xc8
 800ec60:	f7f9 fa8c 	bl	800817c <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800ec64:	4b03      	ldr	r3, [pc, #12]	; (800ec74 <_LCD_Reset+0x38>)
 800ec66:	695b      	ldr	r3, [r3, #20]
 800ec68:	4a02      	ldr	r2, [pc, #8]	; (800ec74 <_LCD_Reset+0x38>)
 800ec6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ec6e:	6153      	str	r3, [r2, #20]
}
 800ec70:	bf00      	nop
 800ec72:	bd80      	pop	{r7, pc}
 800ec74:	48000400 	.word	0x48000400

0800ec78 <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 800ec78:	b5b0      	push	{r4, r5, r7, lr}
 800ec7a:	b08e      	sub	sp, #56	; 0x38
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	607b      	str	r3, [r7, #4]
 800ec80:	4603      	mov	r3, r0
 800ec82:	81fb      	strh	r3, [r7, #14]
 800ec84:	460b      	mov	r3, r1
 800ec86:	81bb      	strh	r3, [r7, #12]
 800ec88:	4613      	mov	r3, r2
 800ec8a:	817b      	strh	r3, [r7, #10]
 800ec8c:	466b      	mov	r3, sp
 800ec8e:	461d      	mov	r5, r3

	uint32_t buffer_size = 0;
 800ec90:	2300      	movs	r3, #0
 800ec92:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	005b      	lsls	r3, r3, #1
 800ec98:	4a4d      	ldr	r2, [pc, #308]	; (800edd0 <_LCD_Write_Frame+0x158>)
 800ec9a:	8812      	ldrh	r2, [r2, #0]
 800ec9c:	4293      	cmp	r3, r2
 800ec9e:	d202      	bcs.n	800eca6 <_LCD_Write_Frame+0x2e>
	{
		buffer_size = chunk_size;
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eca4:	e002      	b.n	800ecac <_LCD_Write_Frame+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 800eca6:	4b4a      	ldr	r3, [pc, #296]	; (800edd0 <_LCD_Write_Frame+0x158>)
 800eca8:	881b      	ldrh	r3, [r3, #0]
 800ecaa:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	unsigned char chifted = 	colour>>8;;
 800ecac:	897b      	ldrh	r3, [r7, #10]
 800ecae:	0a1b      	lsrs	r3, r3, #8
 800ecb0:	b29b      	uxth	r3, r3
 800ecb2:	77fb      	strb	r3, [r7, #31]
	unsigned char burst_buffer[buffer_size];
 800ecb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	3b01      	subs	r3, #1
 800ecba:	61bb      	str	r3, [r7, #24]
 800ecbc:	4601      	mov	r1, r0
 800ecbe:	f04f 0200 	mov.w	r2, #0
 800ecc2:	f04f 0300 	mov.w	r3, #0
 800ecc6:	f04f 0400 	mov.w	r4, #0
 800ecca:	00d4      	lsls	r4, r2, #3
 800eccc:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800ecd0:	00cb      	lsls	r3, r1, #3
 800ecd2:	4601      	mov	r1, r0
 800ecd4:	f04f 0200 	mov.w	r2, #0
 800ecd8:	f04f 0300 	mov.w	r3, #0
 800ecdc:	f04f 0400 	mov.w	r4, #0
 800ece0:	00d4      	lsls	r4, r2, #3
 800ece2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800ece6:	00cb      	lsls	r3, r1, #3
 800ece8:	1dc3      	adds	r3, r0, #7
 800ecea:	08db      	lsrs	r3, r3, #3
 800ecec:	00db      	lsls	r3, r3, #3
 800ecee:	ebad 0d03 	sub.w	sp, sp, r3
 800ecf2:	466b      	mov	r3, sp
 800ecf4:	3300      	adds	r3, #0
 800ecf6:	617b      	str	r3, [r7, #20]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	633b      	str	r3, [r7, #48]	; 0x30
 800ecfc:	e00d      	b.n	800ed1a <_LCD_Write_Frame+0xa2>
	{
			burst_buffer[j] = 	chifted;
 800ecfe:	697a      	ldr	r2, [r7, #20]
 800ed00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed02:	4413      	add	r3, r2
 800ed04:	7ffa      	ldrb	r2, [r7, #31]
 800ed06:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 800ed08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed0a:	3301      	adds	r3, #1
 800ed0c:	897a      	ldrh	r2, [r7, #10]
 800ed0e:	b2d1      	uxtb	r1, r2
 800ed10:	697a      	ldr	r2, [r7, #20]
 800ed12:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800ed14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed16:	3302      	adds	r3, #2
 800ed18:	633b      	str	r3, [r7, #48]	; 0x30
 800ed1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed1e:	429a      	cmp	r2, r3
 800ed20:	d3ed      	bcc.n	800ecfe <_LCD_Write_Frame+0x86>
	}
	
	uint32_t Sending_size = chunk_size*2;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	005b      	lsls	r3, r3, #1
 800ed26:	613b      	str	r3, [r7, #16]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 800ed28:	2301      	movs	r3, #1
 800ed2a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d00d      	beq.n	800ed52 <_LCD_Write_Frame+0xda>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 800ed36:	693a      	ldr	r2, [r7, #16]
 800ed38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed3e:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 800ed40:	693b      	ldr	r3, [r7, #16]
 800ed42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed44:	fbb3 f2f2 	udiv	r2, r3, r2
 800ed48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ed4a:	fb01 f202 	mul.w	r2, r1, r2
 800ed4e:	1a9b      	subs	r3, r3, r2
 800ed50:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800ed52:	4b20      	ldr	r3, [pc, #128]	; (800edd4 <_LCD_Write_Frame+0x15c>)
 800ed54:	695b      	ldr	r3, [r3, #20]
 800ed56:	4a1f      	ldr	r2, [pc, #124]	; (800edd4 <_LCD_Write_Frame+0x15c>)
 800ed58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed5c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ed5e:	4b1d      	ldr	r3, [pc, #116]	; (800edd4 <_LCD_Write_Frame+0x15c>)
 800ed60:	695b      	ldr	r3, [r3, #20]
 800ed62:	4a1c      	ldr	r2, [pc, #112]	; (800edd4 <_LCD_Write_Frame+0x15c>)
 800ed64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ed68:	6153      	str	r3, [r2, #20]
//TODO
	if(Sending_in_Block != 0)
 800ed6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d00f      	beq.n	800ed90 <_LCD_Write_Frame+0x118>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800ed70:	2300      	movs	r3, #0
 800ed72:	627b      	str	r3, [r7, #36]	; 0x24
 800ed74:	e008      	b.n	800ed88 <_LCD_Write_Frame+0x110>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 800ed76:	6978      	ldr	r0, [r7, #20]
 800ed78:	230a      	movs	r3, #10
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ed7e:	f000 f8c1 	bl	800ef04 <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800ed82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed84:	3301      	adds	r3, #1
 800ed86:	627b      	str	r3, [r7, #36]	; 0x24
 800ed88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed8c:	429a      	cmp	r2, r3
 800ed8e:	d3f2      	bcc.n	800ed76 <_LCD_Write_Frame+0xfe>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 800ed90:	6978      	ldr	r0, [r7, #20]
 800ed92:	230a      	movs	r3, #10
 800ed94:	2200      	movs	r2, #0
 800ed96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ed98:	f000 f8b4 	bl	800ef04 <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	623b      	str	r3, [r7, #32]
 800eda0:	e008      	b.n	800edb4 <_LCD_Write_Frame+0x13c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800eda2:	4b0c      	ldr	r3, [pc, #48]	; (800edd4 <_LCD_Write_Frame+0x15c>)
 800eda4:	695b      	ldr	r3, [r3, #20]
 800eda6:	4a0b      	ldr	r2, [pc, #44]	; (800edd4 <_LCD_Write_Frame+0x15c>)
 800eda8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800edac:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800edae:	6a3b      	ldr	r3, [r7, #32]
 800edb0:	3301      	adds	r3, #1
 800edb2:	623b      	str	r3, [r7, #32]
 800edb4:	6a3b      	ldr	r3, [r7, #32]
 800edb6:	2b02      	cmp	r3, #2
 800edb8:	ddf3      	ble.n	800eda2 <_LCD_Write_Frame+0x12a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800edba:	4b06      	ldr	r3, [pc, #24]	; (800edd4 <_LCD_Write_Frame+0x15c>)
 800edbc:	695b      	ldr	r3, [r3, #20]
 800edbe:	4a05      	ldr	r2, [pc, #20]	; (800edd4 <_LCD_Write_Frame+0x15c>)
 800edc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800edc4:	6153      	str	r3, [r2, #20]
 800edc6:	46ad      	mov	sp, r5

}
 800edc8:	bf00      	nop
 800edca:	3738      	adds	r7, #56	; 0x38
 800edcc:	46bd      	mov	sp, r7
 800edce:	bdb0      	pop	{r4, r5, r7, pc}
 800edd0:	20000cb8 	.word	0x20000cb8
 800edd4:	48000400 	.word	0x48000400

0800edd8 <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b084      	sub	sp, #16
 800eddc:	af00      	add	r7, sp, #0
 800edde:	4603      	mov	r3, r0
 800ede0:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ede2:	4b15      	ldr	r3, [pc, #84]	; (800ee38 <_LCD_SendCommand+0x60>)
 800ede4:	695b      	ldr	r3, [r3, #20]
 800ede6:	4a14      	ldr	r2, [pc, #80]	; (800ee38 <_LCD_SendCommand+0x60>)
 800ede8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800edec:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800edee:	4b12      	ldr	r3, [pc, #72]	; (800ee38 <_LCD_SendCommand+0x60>)
 800edf0:	695b      	ldr	r3, [r3, #20]
 800edf2:	4a11      	ldr	r2, [pc, #68]	; (800ee38 <_LCD_SendCommand+0x60>)
 800edf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800edf8:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(command, 0 , 0);
 800edfa:	79fb      	ldrb	r3, [r7, #7]
 800edfc:	2200      	movs	r2, #0
 800edfe:	2100      	movs	r1, #0
 800ee00:	4618      	mov	r0, r3
 800ee02:	f000 f84d 	bl	800eea0 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800ee06:	2300      	movs	r3, #0
 800ee08:	60fb      	str	r3, [r7, #12]
 800ee0a:	e008      	b.n	800ee1e <_LCD_SendCommand+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ee0c:	4b0a      	ldr	r3, [pc, #40]	; (800ee38 <_LCD_SendCommand+0x60>)
 800ee0e:	695b      	ldr	r3, [r3, #20]
 800ee10:	4a09      	ldr	r2, [pc, #36]	; (800ee38 <_LCD_SendCommand+0x60>)
 800ee12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ee16:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	3301      	adds	r3, #1
 800ee1c:	60fb      	str	r3, [r7, #12]
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	2b02      	cmp	r3, #2
 800ee22:	ddf3      	ble.n	800ee0c <_LCD_SendCommand+0x34>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800ee24:	4b04      	ldr	r3, [pc, #16]	; (800ee38 <_LCD_SendCommand+0x60>)
 800ee26:	695b      	ldr	r3, [r3, #20]
 800ee28:	4a03      	ldr	r2, [pc, #12]	; (800ee38 <_LCD_SendCommand+0x60>)
 800ee2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee2e:	6153      	str	r3, [r2, #20]
}
 800ee30:	bf00      	nop
 800ee32:	3710      	adds	r7, #16
 800ee34:	46bd      	mov	sp, r7
 800ee36:	bd80      	pop	{r7, pc}
 800ee38:	48000400 	.word	0x48000400

0800ee3c <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	b084      	sub	sp, #16
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	4603      	mov	r3, r0
 800ee44:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800ee46:	4b15      	ldr	r3, [pc, #84]	; (800ee9c <_LCD_SendData+0x60>)
 800ee48:	695b      	ldr	r3, [r3, #20]
 800ee4a:	4a14      	ldr	r2, [pc, #80]	; (800ee9c <_LCD_SendData+0x60>)
 800ee4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee50:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ee52:	4b12      	ldr	r3, [pc, #72]	; (800ee9c <_LCD_SendData+0x60>)
 800ee54:	695b      	ldr	r3, [r3, #20]
 800ee56:	4a11      	ldr	r2, [pc, #68]	; (800ee9c <_LCD_SendData+0x60>)
 800ee58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ee5c:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(data, 0 , 0);
 800ee5e:	79fb      	ldrb	r3, [r7, #7]
 800ee60:	2200      	movs	r2, #0
 800ee62:	2100      	movs	r1, #0
 800ee64:	4618      	mov	r0, r3
 800ee66:	f000 f81b 	bl	800eea0 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	60fb      	str	r3, [r7, #12]
 800ee6e:	e008      	b.n	800ee82 <_LCD_SendData+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ee70:	4b0a      	ldr	r3, [pc, #40]	; (800ee9c <_LCD_SendData+0x60>)
 800ee72:	695b      	ldr	r3, [r3, #20]
 800ee74:	4a09      	ldr	r2, [pc, #36]	; (800ee9c <_LCD_SendData+0x60>)
 800ee76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ee7a:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	3301      	adds	r3, #1
 800ee80:	60fb      	str	r3, [r7, #12]
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	2b02      	cmp	r3, #2
 800ee86:	ddf3      	ble.n	800ee70 <_LCD_SendData+0x34>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ee88:	4b04      	ldr	r3, [pc, #16]	; (800ee9c <_LCD_SendData+0x60>)
 800ee8a:	695b      	ldr	r3, [r3, #20]
 800ee8c:	4a03      	ldr	r2, [pc, #12]	; (800ee9c <_LCD_SendData+0x60>)
 800ee8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ee92:	6153      	str	r3, [r2, #20]
}
 800ee94:	bf00      	nop
 800ee96:	3710      	adds	r7, #16
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	bd80      	pop	{r7, pc}
 800ee9c:	48000400 	.word	0x48000400

0800eea0 <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800eea0:	b480      	push	{r7}
 800eea2:	b085      	sub	sp, #20
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	4603      	mov	r3, r0
 800eea8:	71fb      	strb	r3, [r7, #7]
 800eeaa:	460b      	mov	r3, r1
 800eeac:	71bb      	strb	r3, [r7, #6]
 800eeae:	4613      	mov	r3, r2
 800eeb0:	717b      	strb	r3, [r7, #5]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	60fb      	str	r3, [r7, #12]
 800eeb6:	e003      	b.n	800eec0 <_SPI_SendByte+0x20>
   		asm("nop");
 800eeb8:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	3301      	adds	r3, #1
 800eebe:	60fb      	str	r3, [r7, #12]
 800eec0:	79bb      	ldrb	r3, [r7, #6]
 800eec2:	68fa      	ldr	r2, [r7, #12]
 800eec4:	429a      	cmp	r2, r3
 800eec6:	dbf7      	blt.n	800eeb8 <_SPI_SendByte+0x18>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800eec8:	4b0c      	ldr	r3, [pc, #48]	; (800eefc <_SPI_SendByte+0x5c>)
 800eeca:	689b      	ldr	r3, [r3, #8]
 800eecc:	f003 0302 	and.w	r3, r3, #2
 800eed0:	2b02      	cmp	r3, #2
 800eed2:	d102      	bne.n	800eeda <_SPI_SendByte+0x3a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 800eed4:	4a0a      	ldr	r2, [pc, #40]	; (800ef00 <_SPI_SendByte+0x60>)
 800eed6:	79fb      	ldrb	r3, [r7, #7]
 800eed8:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800eeda:	2300      	movs	r3, #0
 800eedc:	60bb      	str	r3, [r7, #8]
 800eede:	e003      	b.n	800eee8 <_SPI_SendByte+0x48>
   		asm("nop");
 800eee0:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800eee2:	68bb      	ldr	r3, [r7, #8]
 800eee4:	3301      	adds	r3, #1
 800eee6:	60bb      	str	r3, [r7, #8]
 800eee8:	797b      	ldrb	r3, [r7, #5]
 800eeea:	68ba      	ldr	r2, [r7, #8]
 800eeec:	429a      	cmp	r2, r3
 800eeee:	dbf7      	blt.n	800eee0 <_SPI_SendByte+0x40>

#endif

}
 800eef0:	bf00      	nop
 800eef2:	3714      	adds	r7, #20
 800eef4:	46bd      	mov	sp, r7
 800eef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefa:	4770      	bx	lr
 800eefc:	40003c00 	.word	0x40003c00
 800ef00:	40003c0c 	.word	0x40003c0c

0800ef04 <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800ef04:	b480      	push	{r7}
 800ef06:	b089      	sub	sp, #36	; 0x24
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	60f8      	str	r0, [r7, #12]
 800ef0c:	60b9      	str	r1, [r7, #8]
 800ef0e:	4611      	mov	r1, r2
 800ef10:	461a      	mov	r2, r3
 800ef12:	460b      	mov	r3, r1
 800ef14:	71fb      	strb	r3, [r7, #7]
 800ef16:	4613      	mov	r3, r2
 800ef18:	71bb      	strb	r3, [r7, #6]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	61fb      	str	r3, [r7, #28]
 800ef1e:	e003      	b.n	800ef28 <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 800ef20:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800ef22:	69fb      	ldr	r3, [r7, #28]
 800ef24:	3301      	adds	r3, #1
 800ef26:	61fb      	str	r3, [r7, #28]
 800ef28:	79fb      	ldrb	r3, [r7, #7]
 800ef2a:	69fa      	ldr	r2, [r7, #28]
 800ef2c:	429a      	cmp	r2, r3
 800ef2e:	dbf7      	blt.n	800ef20 <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 800ef34:	e01d      	b.n	800ef72 <_SPI_SendByteMultiByte+0x6e>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800ef36:	4b1c      	ldr	r3, [pc, #112]	; (800efa8 <_SPI_SendByteMultiByte+0xa4>)
 800ef38:	689b      	ldr	r3, [r3, #8]
 800ef3a:	f003 0302 	and.w	r3, r3, #2
 800ef3e:	2b02      	cmp	r3, #2
 800ef40:	d117      	bne.n	800ef72 <_SPI_SendByteMultiByte+0x6e>
		{
			if (buffer_size > 1U)
 800ef42:	68bb      	ldr	r3, [r7, #8]
 800ef44:	2b01      	cmp	r3, #1
 800ef46:	d90a      	bls.n	800ef5e <_SPI_SendByteMultiByte+0x5a>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 800ef48:	69bb      	ldr	r3, [r7, #24]
 800ef4a:	881a      	ldrh	r2, [r3, #0]
 800ef4c:	4b16      	ldr	r3, [pc, #88]	; (800efa8 <_SPI_SendByteMultiByte+0xa4>)
 800ef4e:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 800ef50:	69bb      	ldr	r3, [r7, #24]
 800ef52:	3302      	adds	r3, #2
 800ef54:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 800ef56:	68bb      	ldr	r3, [r7, #8]
 800ef58:	3b02      	subs	r3, #2
 800ef5a:	60bb      	str	r3, [r7, #8]
 800ef5c:	e009      	b.n	800ef72 <_SPI_SendByteMultiByte+0x6e>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 800ef5e:	4a13      	ldr	r2, [pc, #76]	; (800efac <_SPI_SendByteMultiByte+0xa8>)
 800ef60:	69bb      	ldr	r3, [r7, #24]
 800ef62:	781b      	ldrb	r3, [r3, #0]
 800ef64:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 800ef66:	69bb      	ldr	r3, [r7, #24]
 800ef68:	3301      	adds	r3, #1
 800ef6a:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 800ef6c:	68bb      	ldr	r3, [r7, #8]
 800ef6e:	3b01      	subs	r3, #1
 800ef70:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 800ef72:	68bb      	ldr	r3, [r7, #8]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d1de      	bne.n	800ef36 <_SPI_SendByteMultiByte+0x32>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 800ef78:	4b0b      	ldr	r3, [pc, #44]	; (800efa8 <_SPI_SendByteMultiByte+0xa4>)
 800ef7a:	689b      	ldr	r3, [r3, #8]
 800ef7c:	4a0a      	ldr	r2, [pc, #40]	; (800efa8 <_SPI_SendByteMultiByte+0xa4>)
 800ef7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ef82:	6093      	str	r3, [r2, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800ef84:	2300      	movs	r3, #0
 800ef86:	617b      	str	r3, [r7, #20]
 800ef88:	e003      	b.n	800ef92 <_SPI_SendByteMultiByte+0x8e>
   		asm("nop");
 800ef8a:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800ef8c:	697b      	ldr	r3, [r7, #20]
 800ef8e:	3301      	adds	r3, #1
 800ef90:	617b      	str	r3, [r7, #20]
 800ef92:	79bb      	ldrb	r3, [r7, #6]
 800ef94:	697a      	ldr	r2, [r7, #20]
 800ef96:	429a      	cmp	r2, r3
 800ef98:	dbf7      	blt.n	800ef8a <_SPI_SendByteMultiByte+0x86>

#endif

}
 800ef9a:	bf00      	nop
 800ef9c:	3724      	adds	r7, #36	; 0x24
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa4:	4770      	bx	lr
 800efa6:	bf00      	nop
 800efa8:	40003c00 	.word	0x40003c00
 800efac:	40003c0c 	.word	0x40003c0c

0800efb0 <__errno>:
 800efb0:	4b01      	ldr	r3, [pc, #4]	; (800efb8 <__errno+0x8>)
 800efb2:	6818      	ldr	r0, [r3, #0]
 800efb4:	4770      	bx	lr
 800efb6:	bf00      	nop
 800efb8:	20001cac 	.word	0x20001cac

0800efbc <__libc_init_array>:
 800efbc:	b570      	push	{r4, r5, r6, lr}
 800efbe:	4e0d      	ldr	r6, [pc, #52]	; (800eff4 <__libc_init_array+0x38>)
 800efc0:	4c0d      	ldr	r4, [pc, #52]	; (800eff8 <__libc_init_array+0x3c>)
 800efc2:	1ba4      	subs	r4, r4, r6
 800efc4:	10a4      	asrs	r4, r4, #2
 800efc6:	2500      	movs	r5, #0
 800efc8:	42a5      	cmp	r5, r4
 800efca:	d109      	bne.n	800efe0 <__libc_init_array+0x24>
 800efcc:	4e0b      	ldr	r6, [pc, #44]	; (800effc <__libc_init_array+0x40>)
 800efce:	4c0c      	ldr	r4, [pc, #48]	; (800f000 <__libc_init_array+0x44>)
 800efd0:	f003 ff48 	bl	8012e64 <_init>
 800efd4:	1ba4      	subs	r4, r4, r6
 800efd6:	10a4      	asrs	r4, r4, #2
 800efd8:	2500      	movs	r5, #0
 800efda:	42a5      	cmp	r5, r4
 800efdc:	d105      	bne.n	800efea <__libc_init_array+0x2e>
 800efde:	bd70      	pop	{r4, r5, r6, pc}
 800efe0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800efe4:	4798      	blx	r3
 800efe6:	3501      	adds	r5, #1
 800efe8:	e7ee      	b.n	800efc8 <__libc_init_array+0xc>
 800efea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800efee:	4798      	blx	r3
 800eff0:	3501      	adds	r5, #1
 800eff2:	e7f2      	b.n	800efda <__libc_init_array+0x1e>
 800eff4:	08014318 	.word	0x08014318
 800eff8:	08014318 	.word	0x08014318
 800effc:	08014318 	.word	0x08014318
 800f000:	0801431c 	.word	0x0801431c

0800f004 <memset>:
 800f004:	4402      	add	r2, r0
 800f006:	4603      	mov	r3, r0
 800f008:	4293      	cmp	r3, r2
 800f00a:	d100      	bne.n	800f00e <memset+0xa>
 800f00c:	4770      	bx	lr
 800f00e:	f803 1b01 	strb.w	r1, [r3], #1
 800f012:	e7f9      	b.n	800f008 <memset+0x4>

0800f014 <__cvt>:
 800f014:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f018:	ec55 4b10 	vmov	r4, r5, d0
 800f01c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800f01e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f022:	2d00      	cmp	r5, #0
 800f024:	460e      	mov	r6, r1
 800f026:	4691      	mov	r9, r2
 800f028:	4619      	mov	r1, r3
 800f02a:	bfb8      	it	lt
 800f02c:	4622      	movlt	r2, r4
 800f02e:	462b      	mov	r3, r5
 800f030:	f027 0720 	bic.w	r7, r7, #32
 800f034:	bfbb      	ittet	lt
 800f036:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f03a:	461d      	movlt	r5, r3
 800f03c:	2300      	movge	r3, #0
 800f03e:	232d      	movlt	r3, #45	; 0x2d
 800f040:	bfb8      	it	lt
 800f042:	4614      	movlt	r4, r2
 800f044:	2f46      	cmp	r7, #70	; 0x46
 800f046:	700b      	strb	r3, [r1, #0]
 800f048:	d004      	beq.n	800f054 <__cvt+0x40>
 800f04a:	2f45      	cmp	r7, #69	; 0x45
 800f04c:	d100      	bne.n	800f050 <__cvt+0x3c>
 800f04e:	3601      	adds	r6, #1
 800f050:	2102      	movs	r1, #2
 800f052:	e000      	b.n	800f056 <__cvt+0x42>
 800f054:	2103      	movs	r1, #3
 800f056:	ab03      	add	r3, sp, #12
 800f058:	9301      	str	r3, [sp, #4]
 800f05a:	ab02      	add	r3, sp, #8
 800f05c:	9300      	str	r3, [sp, #0]
 800f05e:	4632      	mov	r2, r6
 800f060:	4653      	mov	r3, sl
 800f062:	ec45 4b10 	vmov	d0, r4, r5
 800f066:	f000 fe27 	bl	800fcb8 <_dtoa_r>
 800f06a:	2f47      	cmp	r7, #71	; 0x47
 800f06c:	4680      	mov	r8, r0
 800f06e:	d102      	bne.n	800f076 <__cvt+0x62>
 800f070:	f019 0f01 	tst.w	r9, #1
 800f074:	d026      	beq.n	800f0c4 <__cvt+0xb0>
 800f076:	2f46      	cmp	r7, #70	; 0x46
 800f078:	eb08 0906 	add.w	r9, r8, r6
 800f07c:	d111      	bne.n	800f0a2 <__cvt+0x8e>
 800f07e:	f898 3000 	ldrb.w	r3, [r8]
 800f082:	2b30      	cmp	r3, #48	; 0x30
 800f084:	d10a      	bne.n	800f09c <__cvt+0x88>
 800f086:	2200      	movs	r2, #0
 800f088:	2300      	movs	r3, #0
 800f08a:	4620      	mov	r0, r4
 800f08c:	4629      	mov	r1, r5
 800f08e:	f7f1 fd43 	bl	8000b18 <__aeabi_dcmpeq>
 800f092:	b918      	cbnz	r0, 800f09c <__cvt+0x88>
 800f094:	f1c6 0601 	rsb	r6, r6, #1
 800f098:	f8ca 6000 	str.w	r6, [sl]
 800f09c:	f8da 3000 	ldr.w	r3, [sl]
 800f0a0:	4499      	add	r9, r3
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	4620      	mov	r0, r4
 800f0a8:	4629      	mov	r1, r5
 800f0aa:	f7f1 fd35 	bl	8000b18 <__aeabi_dcmpeq>
 800f0ae:	b938      	cbnz	r0, 800f0c0 <__cvt+0xac>
 800f0b0:	2230      	movs	r2, #48	; 0x30
 800f0b2:	9b03      	ldr	r3, [sp, #12]
 800f0b4:	454b      	cmp	r3, r9
 800f0b6:	d205      	bcs.n	800f0c4 <__cvt+0xb0>
 800f0b8:	1c59      	adds	r1, r3, #1
 800f0ba:	9103      	str	r1, [sp, #12]
 800f0bc:	701a      	strb	r2, [r3, #0]
 800f0be:	e7f8      	b.n	800f0b2 <__cvt+0x9e>
 800f0c0:	f8cd 900c 	str.w	r9, [sp, #12]
 800f0c4:	9b03      	ldr	r3, [sp, #12]
 800f0c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f0c8:	eba3 0308 	sub.w	r3, r3, r8
 800f0cc:	4640      	mov	r0, r8
 800f0ce:	6013      	str	r3, [r2, #0]
 800f0d0:	b004      	add	sp, #16
 800f0d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800f0d6 <__exponent>:
 800f0d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f0d8:	2900      	cmp	r1, #0
 800f0da:	4604      	mov	r4, r0
 800f0dc:	bfba      	itte	lt
 800f0de:	4249      	neglt	r1, r1
 800f0e0:	232d      	movlt	r3, #45	; 0x2d
 800f0e2:	232b      	movge	r3, #43	; 0x2b
 800f0e4:	2909      	cmp	r1, #9
 800f0e6:	f804 2b02 	strb.w	r2, [r4], #2
 800f0ea:	7043      	strb	r3, [r0, #1]
 800f0ec:	dd20      	ble.n	800f130 <__exponent+0x5a>
 800f0ee:	f10d 0307 	add.w	r3, sp, #7
 800f0f2:	461f      	mov	r7, r3
 800f0f4:	260a      	movs	r6, #10
 800f0f6:	fb91 f5f6 	sdiv	r5, r1, r6
 800f0fa:	fb06 1115 	mls	r1, r6, r5, r1
 800f0fe:	3130      	adds	r1, #48	; 0x30
 800f100:	2d09      	cmp	r5, #9
 800f102:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f106:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800f10a:	4629      	mov	r1, r5
 800f10c:	dc09      	bgt.n	800f122 <__exponent+0x4c>
 800f10e:	3130      	adds	r1, #48	; 0x30
 800f110:	3b02      	subs	r3, #2
 800f112:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f116:	42bb      	cmp	r3, r7
 800f118:	4622      	mov	r2, r4
 800f11a:	d304      	bcc.n	800f126 <__exponent+0x50>
 800f11c:	1a10      	subs	r0, r2, r0
 800f11e:	b003      	add	sp, #12
 800f120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f122:	4613      	mov	r3, r2
 800f124:	e7e7      	b.n	800f0f6 <__exponent+0x20>
 800f126:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f12a:	f804 2b01 	strb.w	r2, [r4], #1
 800f12e:	e7f2      	b.n	800f116 <__exponent+0x40>
 800f130:	2330      	movs	r3, #48	; 0x30
 800f132:	4419      	add	r1, r3
 800f134:	7083      	strb	r3, [r0, #2]
 800f136:	1d02      	adds	r2, r0, #4
 800f138:	70c1      	strb	r1, [r0, #3]
 800f13a:	e7ef      	b.n	800f11c <__exponent+0x46>

0800f13c <_printf_float>:
 800f13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f140:	b08d      	sub	sp, #52	; 0x34
 800f142:	460c      	mov	r4, r1
 800f144:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800f148:	4616      	mov	r6, r2
 800f14a:	461f      	mov	r7, r3
 800f14c:	4605      	mov	r5, r0
 800f14e:	f001 fce5 	bl	8010b1c <_localeconv_r>
 800f152:	6803      	ldr	r3, [r0, #0]
 800f154:	9304      	str	r3, [sp, #16]
 800f156:	4618      	mov	r0, r3
 800f158:	f7f1 f862 	bl	8000220 <strlen>
 800f15c:	2300      	movs	r3, #0
 800f15e:	930a      	str	r3, [sp, #40]	; 0x28
 800f160:	f8d8 3000 	ldr.w	r3, [r8]
 800f164:	9005      	str	r0, [sp, #20]
 800f166:	3307      	adds	r3, #7
 800f168:	f023 0307 	bic.w	r3, r3, #7
 800f16c:	f103 0208 	add.w	r2, r3, #8
 800f170:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f174:	f8d4 b000 	ldr.w	fp, [r4]
 800f178:	f8c8 2000 	str.w	r2, [r8]
 800f17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f180:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f184:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f188:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f18c:	9307      	str	r3, [sp, #28]
 800f18e:	f8cd 8018 	str.w	r8, [sp, #24]
 800f192:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f196:	4ba7      	ldr	r3, [pc, #668]	; (800f434 <_printf_float+0x2f8>)
 800f198:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f19c:	f7f1 fcee 	bl	8000b7c <__aeabi_dcmpun>
 800f1a0:	bb70      	cbnz	r0, 800f200 <_printf_float+0xc4>
 800f1a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f1a6:	4ba3      	ldr	r3, [pc, #652]	; (800f434 <_printf_float+0x2f8>)
 800f1a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f1ac:	f7f1 fcc8 	bl	8000b40 <__aeabi_dcmple>
 800f1b0:	bb30      	cbnz	r0, 800f200 <_printf_float+0xc4>
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	4640      	mov	r0, r8
 800f1b8:	4649      	mov	r1, r9
 800f1ba:	f7f1 fcb7 	bl	8000b2c <__aeabi_dcmplt>
 800f1be:	b110      	cbz	r0, 800f1c6 <_printf_float+0x8a>
 800f1c0:	232d      	movs	r3, #45	; 0x2d
 800f1c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f1c6:	4a9c      	ldr	r2, [pc, #624]	; (800f438 <_printf_float+0x2fc>)
 800f1c8:	4b9c      	ldr	r3, [pc, #624]	; (800f43c <_printf_float+0x300>)
 800f1ca:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800f1ce:	bf8c      	ite	hi
 800f1d0:	4690      	movhi	r8, r2
 800f1d2:	4698      	movls	r8, r3
 800f1d4:	2303      	movs	r3, #3
 800f1d6:	f02b 0204 	bic.w	r2, fp, #4
 800f1da:	6123      	str	r3, [r4, #16]
 800f1dc:	6022      	str	r2, [r4, #0]
 800f1de:	f04f 0900 	mov.w	r9, #0
 800f1e2:	9700      	str	r7, [sp, #0]
 800f1e4:	4633      	mov	r3, r6
 800f1e6:	aa0b      	add	r2, sp, #44	; 0x2c
 800f1e8:	4621      	mov	r1, r4
 800f1ea:	4628      	mov	r0, r5
 800f1ec:	f000 f9e6 	bl	800f5bc <_printf_common>
 800f1f0:	3001      	adds	r0, #1
 800f1f2:	f040 808d 	bne.w	800f310 <_printf_float+0x1d4>
 800f1f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f1fa:	b00d      	add	sp, #52	; 0x34
 800f1fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f200:	4642      	mov	r2, r8
 800f202:	464b      	mov	r3, r9
 800f204:	4640      	mov	r0, r8
 800f206:	4649      	mov	r1, r9
 800f208:	f7f1 fcb8 	bl	8000b7c <__aeabi_dcmpun>
 800f20c:	b110      	cbz	r0, 800f214 <_printf_float+0xd8>
 800f20e:	4a8c      	ldr	r2, [pc, #560]	; (800f440 <_printf_float+0x304>)
 800f210:	4b8c      	ldr	r3, [pc, #560]	; (800f444 <_printf_float+0x308>)
 800f212:	e7da      	b.n	800f1ca <_printf_float+0x8e>
 800f214:	6861      	ldr	r1, [r4, #4]
 800f216:	1c4b      	adds	r3, r1, #1
 800f218:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800f21c:	a80a      	add	r0, sp, #40	; 0x28
 800f21e:	d13e      	bne.n	800f29e <_printf_float+0x162>
 800f220:	2306      	movs	r3, #6
 800f222:	6063      	str	r3, [r4, #4]
 800f224:	2300      	movs	r3, #0
 800f226:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800f22a:	ab09      	add	r3, sp, #36	; 0x24
 800f22c:	9300      	str	r3, [sp, #0]
 800f22e:	ec49 8b10 	vmov	d0, r8, r9
 800f232:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f236:	6022      	str	r2, [r4, #0]
 800f238:	f8cd a004 	str.w	sl, [sp, #4]
 800f23c:	6861      	ldr	r1, [r4, #4]
 800f23e:	4628      	mov	r0, r5
 800f240:	f7ff fee8 	bl	800f014 <__cvt>
 800f244:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800f248:	2b47      	cmp	r3, #71	; 0x47
 800f24a:	4680      	mov	r8, r0
 800f24c:	d109      	bne.n	800f262 <_printf_float+0x126>
 800f24e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f250:	1cd8      	adds	r0, r3, #3
 800f252:	db02      	blt.n	800f25a <_printf_float+0x11e>
 800f254:	6862      	ldr	r2, [r4, #4]
 800f256:	4293      	cmp	r3, r2
 800f258:	dd47      	ble.n	800f2ea <_printf_float+0x1ae>
 800f25a:	f1aa 0a02 	sub.w	sl, sl, #2
 800f25e:	fa5f fa8a 	uxtb.w	sl, sl
 800f262:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800f266:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f268:	d824      	bhi.n	800f2b4 <_printf_float+0x178>
 800f26a:	3901      	subs	r1, #1
 800f26c:	4652      	mov	r2, sl
 800f26e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f272:	9109      	str	r1, [sp, #36]	; 0x24
 800f274:	f7ff ff2f 	bl	800f0d6 <__exponent>
 800f278:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f27a:	1813      	adds	r3, r2, r0
 800f27c:	2a01      	cmp	r2, #1
 800f27e:	4681      	mov	r9, r0
 800f280:	6123      	str	r3, [r4, #16]
 800f282:	dc02      	bgt.n	800f28a <_printf_float+0x14e>
 800f284:	6822      	ldr	r2, [r4, #0]
 800f286:	07d1      	lsls	r1, r2, #31
 800f288:	d501      	bpl.n	800f28e <_printf_float+0x152>
 800f28a:	3301      	adds	r3, #1
 800f28c:	6123      	str	r3, [r4, #16]
 800f28e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f292:	2b00      	cmp	r3, #0
 800f294:	d0a5      	beq.n	800f1e2 <_printf_float+0xa6>
 800f296:	232d      	movs	r3, #45	; 0x2d
 800f298:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f29c:	e7a1      	b.n	800f1e2 <_printf_float+0xa6>
 800f29e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800f2a2:	f000 8177 	beq.w	800f594 <_printf_float+0x458>
 800f2a6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800f2aa:	d1bb      	bne.n	800f224 <_printf_float+0xe8>
 800f2ac:	2900      	cmp	r1, #0
 800f2ae:	d1b9      	bne.n	800f224 <_printf_float+0xe8>
 800f2b0:	2301      	movs	r3, #1
 800f2b2:	e7b6      	b.n	800f222 <_printf_float+0xe6>
 800f2b4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800f2b8:	d119      	bne.n	800f2ee <_printf_float+0x1b2>
 800f2ba:	2900      	cmp	r1, #0
 800f2bc:	6863      	ldr	r3, [r4, #4]
 800f2be:	dd0c      	ble.n	800f2da <_printf_float+0x19e>
 800f2c0:	6121      	str	r1, [r4, #16]
 800f2c2:	b913      	cbnz	r3, 800f2ca <_printf_float+0x18e>
 800f2c4:	6822      	ldr	r2, [r4, #0]
 800f2c6:	07d2      	lsls	r2, r2, #31
 800f2c8:	d502      	bpl.n	800f2d0 <_printf_float+0x194>
 800f2ca:	3301      	adds	r3, #1
 800f2cc:	440b      	add	r3, r1
 800f2ce:	6123      	str	r3, [r4, #16]
 800f2d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2d2:	65a3      	str	r3, [r4, #88]	; 0x58
 800f2d4:	f04f 0900 	mov.w	r9, #0
 800f2d8:	e7d9      	b.n	800f28e <_printf_float+0x152>
 800f2da:	b913      	cbnz	r3, 800f2e2 <_printf_float+0x1a6>
 800f2dc:	6822      	ldr	r2, [r4, #0]
 800f2de:	07d0      	lsls	r0, r2, #31
 800f2e0:	d501      	bpl.n	800f2e6 <_printf_float+0x1aa>
 800f2e2:	3302      	adds	r3, #2
 800f2e4:	e7f3      	b.n	800f2ce <_printf_float+0x192>
 800f2e6:	2301      	movs	r3, #1
 800f2e8:	e7f1      	b.n	800f2ce <_printf_float+0x192>
 800f2ea:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800f2ee:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f2f2:	4293      	cmp	r3, r2
 800f2f4:	db05      	blt.n	800f302 <_printf_float+0x1c6>
 800f2f6:	6822      	ldr	r2, [r4, #0]
 800f2f8:	6123      	str	r3, [r4, #16]
 800f2fa:	07d1      	lsls	r1, r2, #31
 800f2fc:	d5e8      	bpl.n	800f2d0 <_printf_float+0x194>
 800f2fe:	3301      	adds	r3, #1
 800f300:	e7e5      	b.n	800f2ce <_printf_float+0x192>
 800f302:	2b00      	cmp	r3, #0
 800f304:	bfd4      	ite	le
 800f306:	f1c3 0302 	rsble	r3, r3, #2
 800f30a:	2301      	movgt	r3, #1
 800f30c:	4413      	add	r3, r2
 800f30e:	e7de      	b.n	800f2ce <_printf_float+0x192>
 800f310:	6823      	ldr	r3, [r4, #0]
 800f312:	055a      	lsls	r2, r3, #21
 800f314:	d407      	bmi.n	800f326 <_printf_float+0x1ea>
 800f316:	6923      	ldr	r3, [r4, #16]
 800f318:	4642      	mov	r2, r8
 800f31a:	4631      	mov	r1, r6
 800f31c:	4628      	mov	r0, r5
 800f31e:	47b8      	blx	r7
 800f320:	3001      	adds	r0, #1
 800f322:	d12b      	bne.n	800f37c <_printf_float+0x240>
 800f324:	e767      	b.n	800f1f6 <_printf_float+0xba>
 800f326:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800f32a:	f240 80dc 	bls.w	800f4e6 <_printf_float+0x3aa>
 800f32e:	2200      	movs	r2, #0
 800f330:	2300      	movs	r3, #0
 800f332:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f336:	f7f1 fbef 	bl	8000b18 <__aeabi_dcmpeq>
 800f33a:	2800      	cmp	r0, #0
 800f33c:	d033      	beq.n	800f3a6 <_printf_float+0x26a>
 800f33e:	2301      	movs	r3, #1
 800f340:	4a41      	ldr	r2, [pc, #260]	; (800f448 <_printf_float+0x30c>)
 800f342:	4631      	mov	r1, r6
 800f344:	4628      	mov	r0, r5
 800f346:	47b8      	blx	r7
 800f348:	3001      	adds	r0, #1
 800f34a:	f43f af54 	beq.w	800f1f6 <_printf_float+0xba>
 800f34e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f352:	429a      	cmp	r2, r3
 800f354:	db02      	blt.n	800f35c <_printf_float+0x220>
 800f356:	6823      	ldr	r3, [r4, #0]
 800f358:	07d8      	lsls	r0, r3, #31
 800f35a:	d50f      	bpl.n	800f37c <_printf_float+0x240>
 800f35c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f360:	4631      	mov	r1, r6
 800f362:	4628      	mov	r0, r5
 800f364:	47b8      	blx	r7
 800f366:	3001      	adds	r0, #1
 800f368:	f43f af45 	beq.w	800f1f6 <_printf_float+0xba>
 800f36c:	f04f 0800 	mov.w	r8, #0
 800f370:	f104 091a 	add.w	r9, r4, #26
 800f374:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f376:	3b01      	subs	r3, #1
 800f378:	4543      	cmp	r3, r8
 800f37a:	dc09      	bgt.n	800f390 <_printf_float+0x254>
 800f37c:	6823      	ldr	r3, [r4, #0]
 800f37e:	079b      	lsls	r3, r3, #30
 800f380:	f100 8103 	bmi.w	800f58a <_printf_float+0x44e>
 800f384:	68e0      	ldr	r0, [r4, #12]
 800f386:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f388:	4298      	cmp	r0, r3
 800f38a:	bfb8      	it	lt
 800f38c:	4618      	movlt	r0, r3
 800f38e:	e734      	b.n	800f1fa <_printf_float+0xbe>
 800f390:	2301      	movs	r3, #1
 800f392:	464a      	mov	r2, r9
 800f394:	4631      	mov	r1, r6
 800f396:	4628      	mov	r0, r5
 800f398:	47b8      	blx	r7
 800f39a:	3001      	adds	r0, #1
 800f39c:	f43f af2b 	beq.w	800f1f6 <_printf_float+0xba>
 800f3a0:	f108 0801 	add.w	r8, r8, #1
 800f3a4:	e7e6      	b.n	800f374 <_printf_float+0x238>
 800f3a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	dc2b      	bgt.n	800f404 <_printf_float+0x2c8>
 800f3ac:	2301      	movs	r3, #1
 800f3ae:	4a26      	ldr	r2, [pc, #152]	; (800f448 <_printf_float+0x30c>)
 800f3b0:	4631      	mov	r1, r6
 800f3b2:	4628      	mov	r0, r5
 800f3b4:	47b8      	blx	r7
 800f3b6:	3001      	adds	r0, #1
 800f3b8:	f43f af1d 	beq.w	800f1f6 <_printf_float+0xba>
 800f3bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3be:	b923      	cbnz	r3, 800f3ca <_printf_float+0x28e>
 800f3c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3c2:	b913      	cbnz	r3, 800f3ca <_printf_float+0x28e>
 800f3c4:	6823      	ldr	r3, [r4, #0]
 800f3c6:	07d9      	lsls	r1, r3, #31
 800f3c8:	d5d8      	bpl.n	800f37c <_printf_float+0x240>
 800f3ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f3ce:	4631      	mov	r1, r6
 800f3d0:	4628      	mov	r0, r5
 800f3d2:	47b8      	blx	r7
 800f3d4:	3001      	adds	r0, #1
 800f3d6:	f43f af0e 	beq.w	800f1f6 <_printf_float+0xba>
 800f3da:	f04f 0900 	mov.w	r9, #0
 800f3de:	f104 0a1a 	add.w	sl, r4, #26
 800f3e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3e4:	425b      	negs	r3, r3
 800f3e6:	454b      	cmp	r3, r9
 800f3e8:	dc01      	bgt.n	800f3ee <_printf_float+0x2b2>
 800f3ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3ec:	e794      	b.n	800f318 <_printf_float+0x1dc>
 800f3ee:	2301      	movs	r3, #1
 800f3f0:	4652      	mov	r2, sl
 800f3f2:	4631      	mov	r1, r6
 800f3f4:	4628      	mov	r0, r5
 800f3f6:	47b8      	blx	r7
 800f3f8:	3001      	adds	r0, #1
 800f3fa:	f43f aefc 	beq.w	800f1f6 <_printf_float+0xba>
 800f3fe:	f109 0901 	add.w	r9, r9, #1
 800f402:	e7ee      	b.n	800f3e2 <_printf_float+0x2a6>
 800f404:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f406:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f408:	429a      	cmp	r2, r3
 800f40a:	bfa8      	it	ge
 800f40c:	461a      	movge	r2, r3
 800f40e:	2a00      	cmp	r2, #0
 800f410:	4691      	mov	r9, r2
 800f412:	dd07      	ble.n	800f424 <_printf_float+0x2e8>
 800f414:	4613      	mov	r3, r2
 800f416:	4631      	mov	r1, r6
 800f418:	4642      	mov	r2, r8
 800f41a:	4628      	mov	r0, r5
 800f41c:	47b8      	blx	r7
 800f41e:	3001      	adds	r0, #1
 800f420:	f43f aee9 	beq.w	800f1f6 <_printf_float+0xba>
 800f424:	f104 031a 	add.w	r3, r4, #26
 800f428:	f04f 0b00 	mov.w	fp, #0
 800f42c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f430:	9306      	str	r3, [sp, #24]
 800f432:	e015      	b.n	800f460 <_printf_float+0x324>
 800f434:	7fefffff 	.word	0x7fefffff
 800f438:	08014014 	.word	0x08014014
 800f43c:	08014010 	.word	0x08014010
 800f440:	0801401c 	.word	0x0801401c
 800f444:	08014018 	.word	0x08014018
 800f448:	080142cc 	.word	0x080142cc
 800f44c:	2301      	movs	r3, #1
 800f44e:	9a06      	ldr	r2, [sp, #24]
 800f450:	4631      	mov	r1, r6
 800f452:	4628      	mov	r0, r5
 800f454:	47b8      	blx	r7
 800f456:	3001      	adds	r0, #1
 800f458:	f43f aecd 	beq.w	800f1f6 <_printf_float+0xba>
 800f45c:	f10b 0b01 	add.w	fp, fp, #1
 800f460:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800f464:	ebaa 0309 	sub.w	r3, sl, r9
 800f468:	455b      	cmp	r3, fp
 800f46a:	dcef      	bgt.n	800f44c <_printf_float+0x310>
 800f46c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f470:	429a      	cmp	r2, r3
 800f472:	44d0      	add	r8, sl
 800f474:	db15      	blt.n	800f4a2 <_printf_float+0x366>
 800f476:	6823      	ldr	r3, [r4, #0]
 800f478:	07da      	lsls	r2, r3, #31
 800f47a:	d412      	bmi.n	800f4a2 <_printf_float+0x366>
 800f47c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f47e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f480:	eba3 020a 	sub.w	r2, r3, sl
 800f484:	eba3 0a01 	sub.w	sl, r3, r1
 800f488:	4592      	cmp	sl, r2
 800f48a:	bfa8      	it	ge
 800f48c:	4692      	movge	sl, r2
 800f48e:	f1ba 0f00 	cmp.w	sl, #0
 800f492:	dc0e      	bgt.n	800f4b2 <_printf_float+0x376>
 800f494:	f04f 0800 	mov.w	r8, #0
 800f498:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f49c:	f104 091a 	add.w	r9, r4, #26
 800f4a0:	e019      	b.n	800f4d6 <_printf_float+0x39a>
 800f4a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f4a6:	4631      	mov	r1, r6
 800f4a8:	4628      	mov	r0, r5
 800f4aa:	47b8      	blx	r7
 800f4ac:	3001      	adds	r0, #1
 800f4ae:	d1e5      	bne.n	800f47c <_printf_float+0x340>
 800f4b0:	e6a1      	b.n	800f1f6 <_printf_float+0xba>
 800f4b2:	4653      	mov	r3, sl
 800f4b4:	4642      	mov	r2, r8
 800f4b6:	4631      	mov	r1, r6
 800f4b8:	4628      	mov	r0, r5
 800f4ba:	47b8      	blx	r7
 800f4bc:	3001      	adds	r0, #1
 800f4be:	d1e9      	bne.n	800f494 <_printf_float+0x358>
 800f4c0:	e699      	b.n	800f1f6 <_printf_float+0xba>
 800f4c2:	2301      	movs	r3, #1
 800f4c4:	464a      	mov	r2, r9
 800f4c6:	4631      	mov	r1, r6
 800f4c8:	4628      	mov	r0, r5
 800f4ca:	47b8      	blx	r7
 800f4cc:	3001      	adds	r0, #1
 800f4ce:	f43f ae92 	beq.w	800f1f6 <_printf_float+0xba>
 800f4d2:	f108 0801 	add.w	r8, r8, #1
 800f4d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f4da:	1a9b      	subs	r3, r3, r2
 800f4dc:	eba3 030a 	sub.w	r3, r3, sl
 800f4e0:	4543      	cmp	r3, r8
 800f4e2:	dcee      	bgt.n	800f4c2 <_printf_float+0x386>
 800f4e4:	e74a      	b.n	800f37c <_printf_float+0x240>
 800f4e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f4e8:	2a01      	cmp	r2, #1
 800f4ea:	dc01      	bgt.n	800f4f0 <_printf_float+0x3b4>
 800f4ec:	07db      	lsls	r3, r3, #31
 800f4ee:	d53a      	bpl.n	800f566 <_printf_float+0x42a>
 800f4f0:	2301      	movs	r3, #1
 800f4f2:	4642      	mov	r2, r8
 800f4f4:	4631      	mov	r1, r6
 800f4f6:	4628      	mov	r0, r5
 800f4f8:	47b8      	blx	r7
 800f4fa:	3001      	adds	r0, #1
 800f4fc:	f43f ae7b 	beq.w	800f1f6 <_printf_float+0xba>
 800f500:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f504:	4631      	mov	r1, r6
 800f506:	4628      	mov	r0, r5
 800f508:	47b8      	blx	r7
 800f50a:	3001      	adds	r0, #1
 800f50c:	f108 0801 	add.w	r8, r8, #1
 800f510:	f43f ae71 	beq.w	800f1f6 <_printf_float+0xba>
 800f514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f516:	2200      	movs	r2, #0
 800f518:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800f51c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f520:	2300      	movs	r3, #0
 800f522:	f7f1 faf9 	bl	8000b18 <__aeabi_dcmpeq>
 800f526:	b9c8      	cbnz	r0, 800f55c <_printf_float+0x420>
 800f528:	4653      	mov	r3, sl
 800f52a:	4642      	mov	r2, r8
 800f52c:	4631      	mov	r1, r6
 800f52e:	4628      	mov	r0, r5
 800f530:	47b8      	blx	r7
 800f532:	3001      	adds	r0, #1
 800f534:	d10e      	bne.n	800f554 <_printf_float+0x418>
 800f536:	e65e      	b.n	800f1f6 <_printf_float+0xba>
 800f538:	2301      	movs	r3, #1
 800f53a:	4652      	mov	r2, sl
 800f53c:	4631      	mov	r1, r6
 800f53e:	4628      	mov	r0, r5
 800f540:	47b8      	blx	r7
 800f542:	3001      	adds	r0, #1
 800f544:	f43f ae57 	beq.w	800f1f6 <_printf_float+0xba>
 800f548:	f108 0801 	add.w	r8, r8, #1
 800f54c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f54e:	3b01      	subs	r3, #1
 800f550:	4543      	cmp	r3, r8
 800f552:	dcf1      	bgt.n	800f538 <_printf_float+0x3fc>
 800f554:	464b      	mov	r3, r9
 800f556:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f55a:	e6de      	b.n	800f31a <_printf_float+0x1de>
 800f55c:	f04f 0800 	mov.w	r8, #0
 800f560:	f104 0a1a 	add.w	sl, r4, #26
 800f564:	e7f2      	b.n	800f54c <_printf_float+0x410>
 800f566:	2301      	movs	r3, #1
 800f568:	e7df      	b.n	800f52a <_printf_float+0x3ee>
 800f56a:	2301      	movs	r3, #1
 800f56c:	464a      	mov	r2, r9
 800f56e:	4631      	mov	r1, r6
 800f570:	4628      	mov	r0, r5
 800f572:	47b8      	blx	r7
 800f574:	3001      	adds	r0, #1
 800f576:	f43f ae3e 	beq.w	800f1f6 <_printf_float+0xba>
 800f57a:	f108 0801 	add.w	r8, r8, #1
 800f57e:	68e3      	ldr	r3, [r4, #12]
 800f580:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f582:	1a9b      	subs	r3, r3, r2
 800f584:	4543      	cmp	r3, r8
 800f586:	dcf0      	bgt.n	800f56a <_printf_float+0x42e>
 800f588:	e6fc      	b.n	800f384 <_printf_float+0x248>
 800f58a:	f04f 0800 	mov.w	r8, #0
 800f58e:	f104 0919 	add.w	r9, r4, #25
 800f592:	e7f4      	b.n	800f57e <_printf_float+0x442>
 800f594:	2900      	cmp	r1, #0
 800f596:	f43f ae8b 	beq.w	800f2b0 <_printf_float+0x174>
 800f59a:	2300      	movs	r3, #0
 800f59c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800f5a0:	ab09      	add	r3, sp, #36	; 0x24
 800f5a2:	9300      	str	r3, [sp, #0]
 800f5a4:	ec49 8b10 	vmov	d0, r8, r9
 800f5a8:	6022      	str	r2, [r4, #0]
 800f5aa:	f8cd a004 	str.w	sl, [sp, #4]
 800f5ae:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f5b2:	4628      	mov	r0, r5
 800f5b4:	f7ff fd2e 	bl	800f014 <__cvt>
 800f5b8:	4680      	mov	r8, r0
 800f5ba:	e648      	b.n	800f24e <_printf_float+0x112>

0800f5bc <_printf_common>:
 800f5bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5c0:	4691      	mov	r9, r2
 800f5c2:	461f      	mov	r7, r3
 800f5c4:	688a      	ldr	r2, [r1, #8]
 800f5c6:	690b      	ldr	r3, [r1, #16]
 800f5c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f5cc:	4293      	cmp	r3, r2
 800f5ce:	bfb8      	it	lt
 800f5d0:	4613      	movlt	r3, r2
 800f5d2:	f8c9 3000 	str.w	r3, [r9]
 800f5d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f5da:	4606      	mov	r6, r0
 800f5dc:	460c      	mov	r4, r1
 800f5de:	b112      	cbz	r2, 800f5e6 <_printf_common+0x2a>
 800f5e0:	3301      	adds	r3, #1
 800f5e2:	f8c9 3000 	str.w	r3, [r9]
 800f5e6:	6823      	ldr	r3, [r4, #0]
 800f5e8:	0699      	lsls	r1, r3, #26
 800f5ea:	bf42      	ittt	mi
 800f5ec:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f5f0:	3302      	addmi	r3, #2
 800f5f2:	f8c9 3000 	strmi.w	r3, [r9]
 800f5f6:	6825      	ldr	r5, [r4, #0]
 800f5f8:	f015 0506 	ands.w	r5, r5, #6
 800f5fc:	d107      	bne.n	800f60e <_printf_common+0x52>
 800f5fe:	f104 0a19 	add.w	sl, r4, #25
 800f602:	68e3      	ldr	r3, [r4, #12]
 800f604:	f8d9 2000 	ldr.w	r2, [r9]
 800f608:	1a9b      	subs	r3, r3, r2
 800f60a:	42ab      	cmp	r3, r5
 800f60c:	dc28      	bgt.n	800f660 <_printf_common+0xa4>
 800f60e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800f612:	6822      	ldr	r2, [r4, #0]
 800f614:	3300      	adds	r3, #0
 800f616:	bf18      	it	ne
 800f618:	2301      	movne	r3, #1
 800f61a:	0692      	lsls	r2, r2, #26
 800f61c:	d42d      	bmi.n	800f67a <_printf_common+0xbe>
 800f61e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f622:	4639      	mov	r1, r7
 800f624:	4630      	mov	r0, r6
 800f626:	47c0      	blx	r8
 800f628:	3001      	adds	r0, #1
 800f62a:	d020      	beq.n	800f66e <_printf_common+0xb2>
 800f62c:	6823      	ldr	r3, [r4, #0]
 800f62e:	68e5      	ldr	r5, [r4, #12]
 800f630:	f8d9 2000 	ldr.w	r2, [r9]
 800f634:	f003 0306 	and.w	r3, r3, #6
 800f638:	2b04      	cmp	r3, #4
 800f63a:	bf08      	it	eq
 800f63c:	1aad      	subeq	r5, r5, r2
 800f63e:	68a3      	ldr	r3, [r4, #8]
 800f640:	6922      	ldr	r2, [r4, #16]
 800f642:	bf0c      	ite	eq
 800f644:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f648:	2500      	movne	r5, #0
 800f64a:	4293      	cmp	r3, r2
 800f64c:	bfc4      	itt	gt
 800f64e:	1a9b      	subgt	r3, r3, r2
 800f650:	18ed      	addgt	r5, r5, r3
 800f652:	f04f 0900 	mov.w	r9, #0
 800f656:	341a      	adds	r4, #26
 800f658:	454d      	cmp	r5, r9
 800f65a:	d11a      	bne.n	800f692 <_printf_common+0xd6>
 800f65c:	2000      	movs	r0, #0
 800f65e:	e008      	b.n	800f672 <_printf_common+0xb6>
 800f660:	2301      	movs	r3, #1
 800f662:	4652      	mov	r2, sl
 800f664:	4639      	mov	r1, r7
 800f666:	4630      	mov	r0, r6
 800f668:	47c0      	blx	r8
 800f66a:	3001      	adds	r0, #1
 800f66c:	d103      	bne.n	800f676 <_printf_common+0xba>
 800f66e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f676:	3501      	adds	r5, #1
 800f678:	e7c3      	b.n	800f602 <_printf_common+0x46>
 800f67a:	18e1      	adds	r1, r4, r3
 800f67c:	1c5a      	adds	r2, r3, #1
 800f67e:	2030      	movs	r0, #48	; 0x30
 800f680:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f684:	4422      	add	r2, r4
 800f686:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f68a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f68e:	3302      	adds	r3, #2
 800f690:	e7c5      	b.n	800f61e <_printf_common+0x62>
 800f692:	2301      	movs	r3, #1
 800f694:	4622      	mov	r2, r4
 800f696:	4639      	mov	r1, r7
 800f698:	4630      	mov	r0, r6
 800f69a:	47c0      	blx	r8
 800f69c:	3001      	adds	r0, #1
 800f69e:	d0e6      	beq.n	800f66e <_printf_common+0xb2>
 800f6a0:	f109 0901 	add.w	r9, r9, #1
 800f6a4:	e7d8      	b.n	800f658 <_printf_common+0x9c>
	...

0800f6a8 <_printf_i>:
 800f6a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f6ac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800f6b0:	460c      	mov	r4, r1
 800f6b2:	7e09      	ldrb	r1, [r1, #24]
 800f6b4:	b085      	sub	sp, #20
 800f6b6:	296e      	cmp	r1, #110	; 0x6e
 800f6b8:	4617      	mov	r7, r2
 800f6ba:	4606      	mov	r6, r0
 800f6bc:	4698      	mov	r8, r3
 800f6be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f6c0:	f000 80b3 	beq.w	800f82a <_printf_i+0x182>
 800f6c4:	d822      	bhi.n	800f70c <_printf_i+0x64>
 800f6c6:	2963      	cmp	r1, #99	; 0x63
 800f6c8:	d036      	beq.n	800f738 <_printf_i+0x90>
 800f6ca:	d80a      	bhi.n	800f6e2 <_printf_i+0x3a>
 800f6cc:	2900      	cmp	r1, #0
 800f6ce:	f000 80b9 	beq.w	800f844 <_printf_i+0x19c>
 800f6d2:	2958      	cmp	r1, #88	; 0x58
 800f6d4:	f000 8083 	beq.w	800f7de <_printf_i+0x136>
 800f6d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f6dc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800f6e0:	e032      	b.n	800f748 <_printf_i+0xa0>
 800f6e2:	2964      	cmp	r1, #100	; 0x64
 800f6e4:	d001      	beq.n	800f6ea <_printf_i+0x42>
 800f6e6:	2969      	cmp	r1, #105	; 0x69
 800f6e8:	d1f6      	bne.n	800f6d8 <_printf_i+0x30>
 800f6ea:	6820      	ldr	r0, [r4, #0]
 800f6ec:	6813      	ldr	r3, [r2, #0]
 800f6ee:	0605      	lsls	r5, r0, #24
 800f6f0:	f103 0104 	add.w	r1, r3, #4
 800f6f4:	d52a      	bpl.n	800f74c <_printf_i+0xa4>
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	6011      	str	r1, [r2, #0]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	da03      	bge.n	800f706 <_printf_i+0x5e>
 800f6fe:	222d      	movs	r2, #45	; 0x2d
 800f700:	425b      	negs	r3, r3
 800f702:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800f706:	486f      	ldr	r0, [pc, #444]	; (800f8c4 <_printf_i+0x21c>)
 800f708:	220a      	movs	r2, #10
 800f70a:	e039      	b.n	800f780 <_printf_i+0xd8>
 800f70c:	2973      	cmp	r1, #115	; 0x73
 800f70e:	f000 809d 	beq.w	800f84c <_printf_i+0x1a4>
 800f712:	d808      	bhi.n	800f726 <_printf_i+0x7e>
 800f714:	296f      	cmp	r1, #111	; 0x6f
 800f716:	d020      	beq.n	800f75a <_printf_i+0xb2>
 800f718:	2970      	cmp	r1, #112	; 0x70
 800f71a:	d1dd      	bne.n	800f6d8 <_printf_i+0x30>
 800f71c:	6823      	ldr	r3, [r4, #0]
 800f71e:	f043 0320 	orr.w	r3, r3, #32
 800f722:	6023      	str	r3, [r4, #0]
 800f724:	e003      	b.n	800f72e <_printf_i+0x86>
 800f726:	2975      	cmp	r1, #117	; 0x75
 800f728:	d017      	beq.n	800f75a <_printf_i+0xb2>
 800f72a:	2978      	cmp	r1, #120	; 0x78
 800f72c:	d1d4      	bne.n	800f6d8 <_printf_i+0x30>
 800f72e:	2378      	movs	r3, #120	; 0x78
 800f730:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f734:	4864      	ldr	r0, [pc, #400]	; (800f8c8 <_printf_i+0x220>)
 800f736:	e055      	b.n	800f7e4 <_printf_i+0x13c>
 800f738:	6813      	ldr	r3, [r2, #0]
 800f73a:	1d19      	adds	r1, r3, #4
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	6011      	str	r1, [r2, #0]
 800f740:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f744:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f748:	2301      	movs	r3, #1
 800f74a:	e08c      	b.n	800f866 <_printf_i+0x1be>
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	6011      	str	r1, [r2, #0]
 800f750:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f754:	bf18      	it	ne
 800f756:	b21b      	sxthne	r3, r3
 800f758:	e7cf      	b.n	800f6fa <_printf_i+0x52>
 800f75a:	6813      	ldr	r3, [r2, #0]
 800f75c:	6825      	ldr	r5, [r4, #0]
 800f75e:	1d18      	adds	r0, r3, #4
 800f760:	6010      	str	r0, [r2, #0]
 800f762:	0628      	lsls	r0, r5, #24
 800f764:	d501      	bpl.n	800f76a <_printf_i+0xc2>
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	e002      	b.n	800f770 <_printf_i+0xc8>
 800f76a:	0668      	lsls	r0, r5, #25
 800f76c:	d5fb      	bpl.n	800f766 <_printf_i+0xbe>
 800f76e:	881b      	ldrh	r3, [r3, #0]
 800f770:	4854      	ldr	r0, [pc, #336]	; (800f8c4 <_printf_i+0x21c>)
 800f772:	296f      	cmp	r1, #111	; 0x6f
 800f774:	bf14      	ite	ne
 800f776:	220a      	movne	r2, #10
 800f778:	2208      	moveq	r2, #8
 800f77a:	2100      	movs	r1, #0
 800f77c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f780:	6865      	ldr	r5, [r4, #4]
 800f782:	60a5      	str	r5, [r4, #8]
 800f784:	2d00      	cmp	r5, #0
 800f786:	f2c0 8095 	blt.w	800f8b4 <_printf_i+0x20c>
 800f78a:	6821      	ldr	r1, [r4, #0]
 800f78c:	f021 0104 	bic.w	r1, r1, #4
 800f790:	6021      	str	r1, [r4, #0]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d13d      	bne.n	800f812 <_printf_i+0x16a>
 800f796:	2d00      	cmp	r5, #0
 800f798:	f040 808e 	bne.w	800f8b8 <_printf_i+0x210>
 800f79c:	4665      	mov	r5, ip
 800f79e:	2a08      	cmp	r2, #8
 800f7a0:	d10b      	bne.n	800f7ba <_printf_i+0x112>
 800f7a2:	6823      	ldr	r3, [r4, #0]
 800f7a4:	07db      	lsls	r3, r3, #31
 800f7a6:	d508      	bpl.n	800f7ba <_printf_i+0x112>
 800f7a8:	6923      	ldr	r3, [r4, #16]
 800f7aa:	6862      	ldr	r2, [r4, #4]
 800f7ac:	429a      	cmp	r2, r3
 800f7ae:	bfde      	ittt	le
 800f7b0:	2330      	movle	r3, #48	; 0x30
 800f7b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f7b6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800f7ba:	ebac 0305 	sub.w	r3, ip, r5
 800f7be:	6123      	str	r3, [r4, #16]
 800f7c0:	f8cd 8000 	str.w	r8, [sp]
 800f7c4:	463b      	mov	r3, r7
 800f7c6:	aa03      	add	r2, sp, #12
 800f7c8:	4621      	mov	r1, r4
 800f7ca:	4630      	mov	r0, r6
 800f7cc:	f7ff fef6 	bl	800f5bc <_printf_common>
 800f7d0:	3001      	adds	r0, #1
 800f7d2:	d14d      	bne.n	800f870 <_printf_i+0x1c8>
 800f7d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f7d8:	b005      	add	sp, #20
 800f7da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f7de:	4839      	ldr	r0, [pc, #228]	; (800f8c4 <_printf_i+0x21c>)
 800f7e0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800f7e4:	6813      	ldr	r3, [r2, #0]
 800f7e6:	6821      	ldr	r1, [r4, #0]
 800f7e8:	1d1d      	adds	r5, r3, #4
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	6015      	str	r5, [r2, #0]
 800f7ee:	060a      	lsls	r2, r1, #24
 800f7f0:	d50b      	bpl.n	800f80a <_printf_i+0x162>
 800f7f2:	07ca      	lsls	r2, r1, #31
 800f7f4:	bf44      	itt	mi
 800f7f6:	f041 0120 	orrmi.w	r1, r1, #32
 800f7fa:	6021      	strmi	r1, [r4, #0]
 800f7fc:	b91b      	cbnz	r3, 800f806 <_printf_i+0x15e>
 800f7fe:	6822      	ldr	r2, [r4, #0]
 800f800:	f022 0220 	bic.w	r2, r2, #32
 800f804:	6022      	str	r2, [r4, #0]
 800f806:	2210      	movs	r2, #16
 800f808:	e7b7      	b.n	800f77a <_printf_i+0xd2>
 800f80a:	064d      	lsls	r5, r1, #25
 800f80c:	bf48      	it	mi
 800f80e:	b29b      	uxthmi	r3, r3
 800f810:	e7ef      	b.n	800f7f2 <_printf_i+0x14a>
 800f812:	4665      	mov	r5, ip
 800f814:	fbb3 f1f2 	udiv	r1, r3, r2
 800f818:	fb02 3311 	mls	r3, r2, r1, r3
 800f81c:	5cc3      	ldrb	r3, [r0, r3]
 800f81e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800f822:	460b      	mov	r3, r1
 800f824:	2900      	cmp	r1, #0
 800f826:	d1f5      	bne.n	800f814 <_printf_i+0x16c>
 800f828:	e7b9      	b.n	800f79e <_printf_i+0xf6>
 800f82a:	6813      	ldr	r3, [r2, #0]
 800f82c:	6825      	ldr	r5, [r4, #0]
 800f82e:	6961      	ldr	r1, [r4, #20]
 800f830:	1d18      	adds	r0, r3, #4
 800f832:	6010      	str	r0, [r2, #0]
 800f834:	0628      	lsls	r0, r5, #24
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	d501      	bpl.n	800f83e <_printf_i+0x196>
 800f83a:	6019      	str	r1, [r3, #0]
 800f83c:	e002      	b.n	800f844 <_printf_i+0x19c>
 800f83e:	066a      	lsls	r2, r5, #25
 800f840:	d5fb      	bpl.n	800f83a <_printf_i+0x192>
 800f842:	8019      	strh	r1, [r3, #0]
 800f844:	2300      	movs	r3, #0
 800f846:	6123      	str	r3, [r4, #16]
 800f848:	4665      	mov	r5, ip
 800f84a:	e7b9      	b.n	800f7c0 <_printf_i+0x118>
 800f84c:	6813      	ldr	r3, [r2, #0]
 800f84e:	1d19      	adds	r1, r3, #4
 800f850:	6011      	str	r1, [r2, #0]
 800f852:	681d      	ldr	r5, [r3, #0]
 800f854:	6862      	ldr	r2, [r4, #4]
 800f856:	2100      	movs	r1, #0
 800f858:	4628      	mov	r0, r5
 800f85a:	f7f0 fce9 	bl	8000230 <memchr>
 800f85e:	b108      	cbz	r0, 800f864 <_printf_i+0x1bc>
 800f860:	1b40      	subs	r0, r0, r5
 800f862:	6060      	str	r0, [r4, #4]
 800f864:	6863      	ldr	r3, [r4, #4]
 800f866:	6123      	str	r3, [r4, #16]
 800f868:	2300      	movs	r3, #0
 800f86a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f86e:	e7a7      	b.n	800f7c0 <_printf_i+0x118>
 800f870:	6923      	ldr	r3, [r4, #16]
 800f872:	462a      	mov	r2, r5
 800f874:	4639      	mov	r1, r7
 800f876:	4630      	mov	r0, r6
 800f878:	47c0      	blx	r8
 800f87a:	3001      	adds	r0, #1
 800f87c:	d0aa      	beq.n	800f7d4 <_printf_i+0x12c>
 800f87e:	6823      	ldr	r3, [r4, #0]
 800f880:	079b      	lsls	r3, r3, #30
 800f882:	d413      	bmi.n	800f8ac <_printf_i+0x204>
 800f884:	68e0      	ldr	r0, [r4, #12]
 800f886:	9b03      	ldr	r3, [sp, #12]
 800f888:	4298      	cmp	r0, r3
 800f88a:	bfb8      	it	lt
 800f88c:	4618      	movlt	r0, r3
 800f88e:	e7a3      	b.n	800f7d8 <_printf_i+0x130>
 800f890:	2301      	movs	r3, #1
 800f892:	464a      	mov	r2, r9
 800f894:	4639      	mov	r1, r7
 800f896:	4630      	mov	r0, r6
 800f898:	47c0      	blx	r8
 800f89a:	3001      	adds	r0, #1
 800f89c:	d09a      	beq.n	800f7d4 <_printf_i+0x12c>
 800f89e:	3501      	adds	r5, #1
 800f8a0:	68e3      	ldr	r3, [r4, #12]
 800f8a2:	9a03      	ldr	r2, [sp, #12]
 800f8a4:	1a9b      	subs	r3, r3, r2
 800f8a6:	42ab      	cmp	r3, r5
 800f8a8:	dcf2      	bgt.n	800f890 <_printf_i+0x1e8>
 800f8aa:	e7eb      	b.n	800f884 <_printf_i+0x1dc>
 800f8ac:	2500      	movs	r5, #0
 800f8ae:	f104 0919 	add.w	r9, r4, #25
 800f8b2:	e7f5      	b.n	800f8a0 <_printf_i+0x1f8>
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d1ac      	bne.n	800f812 <_printf_i+0x16a>
 800f8b8:	7803      	ldrb	r3, [r0, #0]
 800f8ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f8be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f8c2:	e76c      	b.n	800f79e <_printf_i+0xf6>
 800f8c4:	08014020 	.word	0x08014020
 800f8c8:	08014031 	.word	0x08014031

0800f8cc <_puts_r>:
 800f8cc:	b570      	push	{r4, r5, r6, lr}
 800f8ce:	460e      	mov	r6, r1
 800f8d0:	4605      	mov	r5, r0
 800f8d2:	b118      	cbz	r0, 800f8dc <_puts_r+0x10>
 800f8d4:	6983      	ldr	r3, [r0, #24]
 800f8d6:	b90b      	cbnz	r3, 800f8dc <_puts_r+0x10>
 800f8d8:	f001 f896 	bl	8010a08 <__sinit>
 800f8dc:	69ab      	ldr	r3, [r5, #24]
 800f8de:	68ac      	ldr	r4, [r5, #8]
 800f8e0:	b913      	cbnz	r3, 800f8e8 <_puts_r+0x1c>
 800f8e2:	4628      	mov	r0, r5
 800f8e4:	f001 f890 	bl	8010a08 <__sinit>
 800f8e8:	4b23      	ldr	r3, [pc, #140]	; (800f978 <_puts_r+0xac>)
 800f8ea:	429c      	cmp	r4, r3
 800f8ec:	d117      	bne.n	800f91e <_puts_r+0x52>
 800f8ee:	686c      	ldr	r4, [r5, #4]
 800f8f0:	89a3      	ldrh	r3, [r4, #12]
 800f8f2:	071b      	lsls	r3, r3, #28
 800f8f4:	d51d      	bpl.n	800f932 <_puts_r+0x66>
 800f8f6:	6923      	ldr	r3, [r4, #16]
 800f8f8:	b1db      	cbz	r3, 800f932 <_puts_r+0x66>
 800f8fa:	3e01      	subs	r6, #1
 800f8fc:	68a3      	ldr	r3, [r4, #8]
 800f8fe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f902:	3b01      	subs	r3, #1
 800f904:	60a3      	str	r3, [r4, #8]
 800f906:	b9e9      	cbnz	r1, 800f944 <_puts_r+0x78>
 800f908:	2b00      	cmp	r3, #0
 800f90a:	da2e      	bge.n	800f96a <_puts_r+0x9e>
 800f90c:	4622      	mov	r2, r4
 800f90e:	210a      	movs	r1, #10
 800f910:	4628      	mov	r0, r5
 800f912:	f000 f883 	bl	800fa1c <__swbuf_r>
 800f916:	3001      	adds	r0, #1
 800f918:	d011      	beq.n	800f93e <_puts_r+0x72>
 800f91a:	200a      	movs	r0, #10
 800f91c:	e011      	b.n	800f942 <_puts_r+0x76>
 800f91e:	4b17      	ldr	r3, [pc, #92]	; (800f97c <_puts_r+0xb0>)
 800f920:	429c      	cmp	r4, r3
 800f922:	d101      	bne.n	800f928 <_puts_r+0x5c>
 800f924:	68ac      	ldr	r4, [r5, #8]
 800f926:	e7e3      	b.n	800f8f0 <_puts_r+0x24>
 800f928:	4b15      	ldr	r3, [pc, #84]	; (800f980 <_puts_r+0xb4>)
 800f92a:	429c      	cmp	r4, r3
 800f92c:	bf08      	it	eq
 800f92e:	68ec      	ldreq	r4, [r5, #12]
 800f930:	e7de      	b.n	800f8f0 <_puts_r+0x24>
 800f932:	4621      	mov	r1, r4
 800f934:	4628      	mov	r0, r5
 800f936:	f000 f8c3 	bl	800fac0 <__swsetup_r>
 800f93a:	2800      	cmp	r0, #0
 800f93c:	d0dd      	beq.n	800f8fa <_puts_r+0x2e>
 800f93e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f942:	bd70      	pop	{r4, r5, r6, pc}
 800f944:	2b00      	cmp	r3, #0
 800f946:	da04      	bge.n	800f952 <_puts_r+0x86>
 800f948:	69a2      	ldr	r2, [r4, #24]
 800f94a:	429a      	cmp	r2, r3
 800f94c:	dc06      	bgt.n	800f95c <_puts_r+0x90>
 800f94e:	290a      	cmp	r1, #10
 800f950:	d004      	beq.n	800f95c <_puts_r+0x90>
 800f952:	6823      	ldr	r3, [r4, #0]
 800f954:	1c5a      	adds	r2, r3, #1
 800f956:	6022      	str	r2, [r4, #0]
 800f958:	7019      	strb	r1, [r3, #0]
 800f95a:	e7cf      	b.n	800f8fc <_puts_r+0x30>
 800f95c:	4622      	mov	r2, r4
 800f95e:	4628      	mov	r0, r5
 800f960:	f000 f85c 	bl	800fa1c <__swbuf_r>
 800f964:	3001      	adds	r0, #1
 800f966:	d1c9      	bne.n	800f8fc <_puts_r+0x30>
 800f968:	e7e9      	b.n	800f93e <_puts_r+0x72>
 800f96a:	6823      	ldr	r3, [r4, #0]
 800f96c:	200a      	movs	r0, #10
 800f96e:	1c5a      	adds	r2, r3, #1
 800f970:	6022      	str	r2, [r4, #0]
 800f972:	7018      	strb	r0, [r3, #0]
 800f974:	e7e5      	b.n	800f942 <_puts_r+0x76>
 800f976:	bf00      	nop
 800f978:	08014070 	.word	0x08014070
 800f97c:	08014090 	.word	0x08014090
 800f980:	08014050 	.word	0x08014050

0800f984 <puts>:
 800f984:	4b02      	ldr	r3, [pc, #8]	; (800f990 <puts+0xc>)
 800f986:	4601      	mov	r1, r0
 800f988:	6818      	ldr	r0, [r3, #0]
 800f98a:	f7ff bf9f 	b.w	800f8cc <_puts_r>
 800f98e:	bf00      	nop
 800f990:	20001cac 	.word	0x20001cac

0800f994 <sniprintf>:
 800f994:	b40c      	push	{r2, r3}
 800f996:	b530      	push	{r4, r5, lr}
 800f998:	4b17      	ldr	r3, [pc, #92]	; (800f9f8 <sniprintf+0x64>)
 800f99a:	1e0c      	subs	r4, r1, #0
 800f99c:	b09d      	sub	sp, #116	; 0x74
 800f99e:	681d      	ldr	r5, [r3, #0]
 800f9a0:	da08      	bge.n	800f9b4 <sniprintf+0x20>
 800f9a2:	238b      	movs	r3, #139	; 0x8b
 800f9a4:	602b      	str	r3, [r5, #0]
 800f9a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f9aa:	b01d      	add	sp, #116	; 0x74
 800f9ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f9b0:	b002      	add	sp, #8
 800f9b2:	4770      	bx	lr
 800f9b4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f9b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f9bc:	bf14      	ite	ne
 800f9be:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800f9c2:	4623      	moveq	r3, r4
 800f9c4:	9304      	str	r3, [sp, #16]
 800f9c6:	9307      	str	r3, [sp, #28]
 800f9c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f9cc:	9002      	str	r0, [sp, #8]
 800f9ce:	9006      	str	r0, [sp, #24]
 800f9d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f9d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f9d6:	ab21      	add	r3, sp, #132	; 0x84
 800f9d8:	a902      	add	r1, sp, #8
 800f9da:	4628      	mov	r0, r5
 800f9dc:	9301      	str	r3, [sp, #4]
 800f9de:	f001 fd0d 	bl	80113fc <_svfiprintf_r>
 800f9e2:	1c43      	adds	r3, r0, #1
 800f9e4:	bfbc      	itt	lt
 800f9e6:	238b      	movlt	r3, #139	; 0x8b
 800f9e8:	602b      	strlt	r3, [r5, #0]
 800f9ea:	2c00      	cmp	r4, #0
 800f9ec:	d0dd      	beq.n	800f9aa <sniprintf+0x16>
 800f9ee:	9b02      	ldr	r3, [sp, #8]
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	701a      	strb	r2, [r3, #0]
 800f9f4:	e7d9      	b.n	800f9aa <sniprintf+0x16>
 800f9f6:	bf00      	nop
 800f9f8:	20001cac 	.word	0x20001cac

0800f9fc <strcat>:
 800f9fc:	b510      	push	{r4, lr}
 800f9fe:	4603      	mov	r3, r0
 800fa00:	781a      	ldrb	r2, [r3, #0]
 800fa02:	1c5c      	adds	r4, r3, #1
 800fa04:	b93a      	cbnz	r2, 800fa16 <strcat+0x1a>
 800fa06:	3b01      	subs	r3, #1
 800fa08:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fa0c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fa10:	2a00      	cmp	r2, #0
 800fa12:	d1f9      	bne.n	800fa08 <strcat+0xc>
 800fa14:	bd10      	pop	{r4, pc}
 800fa16:	4623      	mov	r3, r4
 800fa18:	e7f2      	b.n	800fa00 <strcat+0x4>
	...

0800fa1c <__swbuf_r>:
 800fa1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa1e:	460e      	mov	r6, r1
 800fa20:	4614      	mov	r4, r2
 800fa22:	4605      	mov	r5, r0
 800fa24:	b118      	cbz	r0, 800fa2e <__swbuf_r+0x12>
 800fa26:	6983      	ldr	r3, [r0, #24]
 800fa28:	b90b      	cbnz	r3, 800fa2e <__swbuf_r+0x12>
 800fa2a:	f000 ffed 	bl	8010a08 <__sinit>
 800fa2e:	4b21      	ldr	r3, [pc, #132]	; (800fab4 <__swbuf_r+0x98>)
 800fa30:	429c      	cmp	r4, r3
 800fa32:	d12a      	bne.n	800fa8a <__swbuf_r+0x6e>
 800fa34:	686c      	ldr	r4, [r5, #4]
 800fa36:	69a3      	ldr	r3, [r4, #24]
 800fa38:	60a3      	str	r3, [r4, #8]
 800fa3a:	89a3      	ldrh	r3, [r4, #12]
 800fa3c:	071a      	lsls	r2, r3, #28
 800fa3e:	d52e      	bpl.n	800fa9e <__swbuf_r+0x82>
 800fa40:	6923      	ldr	r3, [r4, #16]
 800fa42:	b363      	cbz	r3, 800fa9e <__swbuf_r+0x82>
 800fa44:	6923      	ldr	r3, [r4, #16]
 800fa46:	6820      	ldr	r0, [r4, #0]
 800fa48:	1ac0      	subs	r0, r0, r3
 800fa4a:	6963      	ldr	r3, [r4, #20]
 800fa4c:	b2f6      	uxtb	r6, r6
 800fa4e:	4283      	cmp	r3, r0
 800fa50:	4637      	mov	r7, r6
 800fa52:	dc04      	bgt.n	800fa5e <__swbuf_r+0x42>
 800fa54:	4621      	mov	r1, r4
 800fa56:	4628      	mov	r0, r5
 800fa58:	f000 ff6c 	bl	8010934 <_fflush_r>
 800fa5c:	bb28      	cbnz	r0, 800faaa <__swbuf_r+0x8e>
 800fa5e:	68a3      	ldr	r3, [r4, #8]
 800fa60:	3b01      	subs	r3, #1
 800fa62:	60a3      	str	r3, [r4, #8]
 800fa64:	6823      	ldr	r3, [r4, #0]
 800fa66:	1c5a      	adds	r2, r3, #1
 800fa68:	6022      	str	r2, [r4, #0]
 800fa6a:	701e      	strb	r6, [r3, #0]
 800fa6c:	6963      	ldr	r3, [r4, #20]
 800fa6e:	3001      	adds	r0, #1
 800fa70:	4283      	cmp	r3, r0
 800fa72:	d004      	beq.n	800fa7e <__swbuf_r+0x62>
 800fa74:	89a3      	ldrh	r3, [r4, #12]
 800fa76:	07db      	lsls	r3, r3, #31
 800fa78:	d519      	bpl.n	800faae <__swbuf_r+0x92>
 800fa7a:	2e0a      	cmp	r6, #10
 800fa7c:	d117      	bne.n	800faae <__swbuf_r+0x92>
 800fa7e:	4621      	mov	r1, r4
 800fa80:	4628      	mov	r0, r5
 800fa82:	f000 ff57 	bl	8010934 <_fflush_r>
 800fa86:	b190      	cbz	r0, 800faae <__swbuf_r+0x92>
 800fa88:	e00f      	b.n	800faaa <__swbuf_r+0x8e>
 800fa8a:	4b0b      	ldr	r3, [pc, #44]	; (800fab8 <__swbuf_r+0x9c>)
 800fa8c:	429c      	cmp	r4, r3
 800fa8e:	d101      	bne.n	800fa94 <__swbuf_r+0x78>
 800fa90:	68ac      	ldr	r4, [r5, #8]
 800fa92:	e7d0      	b.n	800fa36 <__swbuf_r+0x1a>
 800fa94:	4b09      	ldr	r3, [pc, #36]	; (800fabc <__swbuf_r+0xa0>)
 800fa96:	429c      	cmp	r4, r3
 800fa98:	bf08      	it	eq
 800fa9a:	68ec      	ldreq	r4, [r5, #12]
 800fa9c:	e7cb      	b.n	800fa36 <__swbuf_r+0x1a>
 800fa9e:	4621      	mov	r1, r4
 800faa0:	4628      	mov	r0, r5
 800faa2:	f000 f80d 	bl	800fac0 <__swsetup_r>
 800faa6:	2800      	cmp	r0, #0
 800faa8:	d0cc      	beq.n	800fa44 <__swbuf_r+0x28>
 800faaa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800faae:	4638      	mov	r0, r7
 800fab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fab2:	bf00      	nop
 800fab4:	08014070 	.word	0x08014070
 800fab8:	08014090 	.word	0x08014090
 800fabc:	08014050 	.word	0x08014050

0800fac0 <__swsetup_r>:
 800fac0:	4b32      	ldr	r3, [pc, #200]	; (800fb8c <__swsetup_r+0xcc>)
 800fac2:	b570      	push	{r4, r5, r6, lr}
 800fac4:	681d      	ldr	r5, [r3, #0]
 800fac6:	4606      	mov	r6, r0
 800fac8:	460c      	mov	r4, r1
 800faca:	b125      	cbz	r5, 800fad6 <__swsetup_r+0x16>
 800facc:	69ab      	ldr	r3, [r5, #24]
 800face:	b913      	cbnz	r3, 800fad6 <__swsetup_r+0x16>
 800fad0:	4628      	mov	r0, r5
 800fad2:	f000 ff99 	bl	8010a08 <__sinit>
 800fad6:	4b2e      	ldr	r3, [pc, #184]	; (800fb90 <__swsetup_r+0xd0>)
 800fad8:	429c      	cmp	r4, r3
 800fada:	d10f      	bne.n	800fafc <__swsetup_r+0x3c>
 800fadc:	686c      	ldr	r4, [r5, #4]
 800fade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fae2:	b29a      	uxth	r2, r3
 800fae4:	0715      	lsls	r5, r2, #28
 800fae6:	d42c      	bmi.n	800fb42 <__swsetup_r+0x82>
 800fae8:	06d0      	lsls	r0, r2, #27
 800faea:	d411      	bmi.n	800fb10 <__swsetup_r+0x50>
 800faec:	2209      	movs	r2, #9
 800faee:	6032      	str	r2, [r6, #0]
 800faf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800faf4:	81a3      	strh	r3, [r4, #12]
 800faf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fafa:	e03e      	b.n	800fb7a <__swsetup_r+0xba>
 800fafc:	4b25      	ldr	r3, [pc, #148]	; (800fb94 <__swsetup_r+0xd4>)
 800fafe:	429c      	cmp	r4, r3
 800fb00:	d101      	bne.n	800fb06 <__swsetup_r+0x46>
 800fb02:	68ac      	ldr	r4, [r5, #8]
 800fb04:	e7eb      	b.n	800fade <__swsetup_r+0x1e>
 800fb06:	4b24      	ldr	r3, [pc, #144]	; (800fb98 <__swsetup_r+0xd8>)
 800fb08:	429c      	cmp	r4, r3
 800fb0a:	bf08      	it	eq
 800fb0c:	68ec      	ldreq	r4, [r5, #12]
 800fb0e:	e7e6      	b.n	800fade <__swsetup_r+0x1e>
 800fb10:	0751      	lsls	r1, r2, #29
 800fb12:	d512      	bpl.n	800fb3a <__swsetup_r+0x7a>
 800fb14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fb16:	b141      	cbz	r1, 800fb2a <__swsetup_r+0x6a>
 800fb18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fb1c:	4299      	cmp	r1, r3
 800fb1e:	d002      	beq.n	800fb26 <__swsetup_r+0x66>
 800fb20:	4630      	mov	r0, r6
 800fb22:	f001 fb69 	bl	80111f8 <_free_r>
 800fb26:	2300      	movs	r3, #0
 800fb28:	6363      	str	r3, [r4, #52]	; 0x34
 800fb2a:	89a3      	ldrh	r3, [r4, #12]
 800fb2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fb30:	81a3      	strh	r3, [r4, #12]
 800fb32:	2300      	movs	r3, #0
 800fb34:	6063      	str	r3, [r4, #4]
 800fb36:	6923      	ldr	r3, [r4, #16]
 800fb38:	6023      	str	r3, [r4, #0]
 800fb3a:	89a3      	ldrh	r3, [r4, #12]
 800fb3c:	f043 0308 	orr.w	r3, r3, #8
 800fb40:	81a3      	strh	r3, [r4, #12]
 800fb42:	6923      	ldr	r3, [r4, #16]
 800fb44:	b94b      	cbnz	r3, 800fb5a <__swsetup_r+0x9a>
 800fb46:	89a3      	ldrh	r3, [r4, #12]
 800fb48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fb4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fb50:	d003      	beq.n	800fb5a <__swsetup_r+0x9a>
 800fb52:	4621      	mov	r1, r4
 800fb54:	4630      	mov	r0, r6
 800fb56:	f001 f813 	bl	8010b80 <__smakebuf_r>
 800fb5a:	89a2      	ldrh	r2, [r4, #12]
 800fb5c:	f012 0301 	ands.w	r3, r2, #1
 800fb60:	d00c      	beq.n	800fb7c <__swsetup_r+0xbc>
 800fb62:	2300      	movs	r3, #0
 800fb64:	60a3      	str	r3, [r4, #8]
 800fb66:	6963      	ldr	r3, [r4, #20]
 800fb68:	425b      	negs	r3, r3
 800fb6a:	61a3      	str	r3, [r4, #24]
 800fb6c:	6923      	ldr	r3, [r4, #16]
 800fb6e:	b953      	cbnz	r3, 800fb86 <__swsetup_r+0xc6>
 800fb70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb74:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800fb78:	d1ba      	bne.n	800faf0 <__swsetup_r+0x30>
 800fb7a:	bd70      	pop	{r4, r5, r6, pc}
 800fb7c:	0792      	lsls	r2, r2, #30
 800fb7e:	bf58      	it	pl
 800fb80:	6963      	ldrpl	r3, [r4, #20]
 800fb82:	60a3      	str	r3, [r4, #8]
 800fb84:	e7f2      	b.n	800fb6c <__swsetup_r+0xac>
 800fb86:	2000      	movs	r0, #0
 800fb88:	e7f7      	b.n	800fb7a <__swsetup_r+0xba>
 800fb8a:	bf00      	nop
 800fb8c:	20001cac 	.word	0x20001cac
 800fb90:	08014070 	.word	0x08014070
 800fb94:	08014090 	.word	0x08014090
 800fb98:	08014050 	.word	0x08014050

0800fb9c <quorem>:
 800fb9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fba0:	6903      	ldr	r3, [r0, #16]
 800fba2:	690c      	ldr	r4, [r1, #16]
 800fba4:	42a3      	cmp	r3, r4
 800fba6:	4680      	mov	r8, r0
 800fba8:	f2c0 8082 	blt.w	800fcb0 <quorem+0x114>
 800fbac:	3c01      	subs	r4, #1
 800fbae:	f101 0714 	add.w	r7, r1, #20
 800fbb2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800fbb6:	f100 0614 	add.w	r6, r0, #20
 800fbba:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800fbbe:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800fbc2:	eb06 030c 	add.w	r3, r6, ip
 800fbc6:	3501      	adds	r5, #1
 800fbc8:	eb07 090c 	add.w	r9, r7, ip
 800fbcc:	9301      	str	r3, [sp, #4]
 800fbce:	fbb0 f5f5 	udiv	r5, r0, r5
 800fbd2:	b395      	cbz	r5, 800fc3a <quorem+0x9e>
 800fbd4:	f04f 0a00 	mov.w	sl, #0
 800fbd8:	4638      	mov	r0, r7
 800fbda:	46b6      	mov	lr, r6
 800fbdc:	46d3      	mov	fp, sl
 800fbde:	f850 2b04 	ldr.w	r2, [r0], #4
 800fbe2:	b293      	uxth	r3, r2
 800fbe4:	fb05 a303 	mla	r3, r5, r3, sl
 800fbe8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fbec:	b29b      	uxth	r3, r3
 800fbee:	ebab 0303 	sub.w	r3, fp, r3
 800fbf2:	0c12      	lsrs	r2, r2, #16
 800fbf4:	f8de b000 	ldr.w	fp, [lr]
 800fbf8:	fb05 a202 	mla	r2, r5, r2, sl
 800fbfc:	fa13 f38b 	uxtah	r3, r3, fp
 800fc00:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800fc04:	fa1f fb82 	uxth.w	fp, r2
 800fc08:	f8de 2000 	ldr.w	r2, [lr]
 800fc0c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800fc10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fc14:	b29b      	uxth	r3, r3
 800fc16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fc1a:	4581      	cmp	r9, r0
 800fc1c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800fc20:	f84e 3b04 	str.w	r3, [lr], #4
 800fc24:	d2db      	bcs.n	800fbde <quorem+0x42>
 800fc26:	f856 300c 	ldr.w	r3, [r6, ip]
 800fc2a:	b933      	cbnz	r3, 800fc3a <quorem+0x9e>
 800fc2c:	9b01      	ldr	r3, [sp, #4]
 800fc2e:	3b04      	subs	r3, #4
 800fc30:	429e      	cmp	r6, r3
 800fc32:	461a      	mov	r2, r3
 800fc34:	d330      	bcc.n	800fc98 <quorem+0xfc>
 800fc36:	f8c8 4010 	str.w	r4, [r8, #16]
 800fc3a:	4640      	mov	r0, r8
 800fc3c:	f001 fa08 	bl	8011050 <__mcmp>
 800fc40:	2800      	cmp	r0, #0
 800fc42:	db25      	blt.n	800fc90 <quorem+0xf4>
 800fc44:	3501      	adds	r5, #1
 800fc46:	4630      	mov	r0, r6
 800fc48:	f04f 0c00 	mov.w	ip, #0
 800fc4c:	f857 2b04 	ldr.w	r2, [r7], #4
 800fc50:	f8d0 e000 	ldr.w	lr, [r0]
 800fc54:	b293      	uxth	r3, r2
 800fc56:	ebac 0303 	sub.w	r3, ip, r3
 800fc5a:	0c12      	lsrs	r2, r2, #16
 800fc5c:	fa13 f38e 	uxtah	r3, r3, lr
 800fc60:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fc64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fc68:	b29b      	uxth	r3, r3
 800fc6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fc6e:	45b9      	cmp	r9, r7
 800fc70:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fc74:	f840 3b04 	str.w	r3, [r0], #4
 800fc78:	d2e8      	bcs.n	800fc4c <quorem+0xb0>
 800fc7a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800fc7e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800fc82:	b92a      	cbnz	r2, 800fc90 <quorem+0xf4>
 800fc84:	3b04      	subs	r3, #4
 800fc86:	429e      	cmp	r6, r3
 800fc88:	461a      	mov	r2, r3
 800fc8a:	d30b      	bcc.n	800fca4 <quorem+0x108>
 800fc8c:	f8c8 4010 	str.w	r4, [r8, #16]
 800fc90:	4628      	mov	r0, r5
 800fc92:	b003      	add	sp, #12
 800fc94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc98:	6812      	ldr	r2, [r2, #0]
 800fc9a:	3b04      	subs	r3, #4
 800fc9c:	2a00      	cmp	r2, #0
 800fc9e:	d1ca      	bne.n	800fc36 <quorem+0x9a>
 800fca0:	3c01      	subs	r4, #1
 800fca2:	e7c5      	b.n	800fc30 <quorem+0x94>
 800fca4:	6812      	ldr	r2, [r2, #0]
 800fca6:	3b04      	subs	r3, #4
 800fca8:	2a00      	cmp	r2, #0
 800fcaa:	d1ef      	bne.n	800fc8c <quorem+0xf0>
 800fcac:	3c01      	subs	r4, #1
 800fcae:	e7ea      	b.n	800fc86 <quorem+0xea>
 800fcb0:	2000      	movs	r0, #0
 800fcb2:	e7ee      	b.n	800fc92 <quorem+0xf6>
 800fcb4:	0000      	movs	r0, r0
	...

0800fcb8 <_dtoa_r>:
 800fcb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcbc:	ec57 6b10 	vmov	r6, r7, d0
 800fcc0:	b097      	sub	sp, #92	; 0x5c
 800fcc2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fcc4:	9106      	str	r1, [sp, #24]
 800fcc6:	4604      	mov	r4, r0
 800fcc8:	920b      	str	r2, [sp, #44]	; 0x2c
 800fcca:	9312      	str	r3, [sp, #72]	; 0x48
 800fccc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fcd0:	e9cd 6700 	strd	r6, r7, [sp]
 800fcd4:	b93d      	cbnz	r5, 800fce6 <_dtoa_r+0x2e>
 800fcd6:	2010      	movs	r0, #16
 800fcd8:	f000 ff92 	bl	8010c00 <malloc>
 800fcdc:	6260      	str	r0, [r4, #36]	; 0x24
 800fcde:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fce2:	6005      	str	r5, [r0, #0]
 800fce4:	60c5      	str	r5, [r0, #12]
 800fce6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fce8:	6819      	ldr	r1, [r3, #0]
 800fcea:	b151      	cbz	r1, 800fd02 <_dtoa_r+0x4a>
 800fcec:	685a      	ldr	r2, [r3, #4]
 800fcee:	604a      	str	r2, [r1, #4]
 800fcf0:	2301      	movs	r3, #1
 800fcf2:	4093      	lsls	r3, r2
 800fcf4:	608b      	str	r3, [r1, #8]
 800fcf6:	4620      	mov	r0, r4
 800fcf8:	f000 ffc9 	bl	8010c8e <_Bfree>
 800fcfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fcfe:	2200      	movs	r2, #0
 800fd00:	601a      	str	r2, [r3, #0]
 800fd02:	1e3b      	subs	r3, r7, #0
 800fd04:	bfbb      	ittet	lt
 800fd06:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fd0a:	9301      	strlt	r3, [sp, #4]
 800fd0c:	2300      	movge	r3, #0
 800fd0e:	2201      	movlt	r2, #1
 800fd10:	bfac      	ite	ge
 800fd12:	f8c8 3000 	strge.w	r3, [r8]
 800fd16:	f8c8 2000 	strlt.w	r2, [r8]
 800fd1a:	4baf      	ldr	r3, [pc, #700]	; (800ffd8 <_dtoa_r+0x320>)
 800fd1c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fd20:	ea33 0308 	bics.w	r3, r3, r8
 800fd24:	d114      	bne.n	800fd50 <_dtoa_r+0x98>
 800fd26:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fd28:	f242 730f 	movw	r3, #9999	; 0x270f
 800fd2c:	6013      	str	r3, [r2, #0]
 800fd2e:	9b00      	ldr	r3, [sp, #0]
 800fd30:	b923      	cbnz	r3, 800fd3c <_dtoa_r+0x84>
 800fd32:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800fd36:	2800      	cmp	r0, #0
 800fd38:	f000 8542 	beq.w	80107c0 <_dtoa_r+0xb08>
 800fd3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fd3e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800ffec <_dtoa_r+0x334>
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	f000 8544 	beq.w	80107d0 <_dtoa_r+0xb18>
 800fd48:	f10b 0303 	add.w	r3, fp, #3
 800fd4c:	f000 bd3e 	b.w	80107cc <_dtoa_r+0xb14>
 800fd50:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fd54:	2200      	movs	r2, #0
 800fd56:	2300      	movs	r3, #0
 800fd58:	4630      	mov	r0, r6
 800fd5a:	4639      	mov	r1, r7
 800fd5c:	f7f0 fedc 	bl	8000b18 <__aeabi_dcmpeq>
 800fd60:	4681      	mov	r9, r0
 800fd62:	b168      	cbz	r0, 800fd80 <_dtoa_r+0xc8>
 800fd64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fd66:	2301      	movs	r3, #1
 800fd68:	6013      	str	r3, [r2, #0]
 800fd6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	f000 8524 	beq.w	80107ba <_dtoa_r+0xb02>
 800fd72:	4b9a      	ldr	r3, [pc, #616]	; (800ffdc <_dtoa_r+0x324>)
 800fd74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fd76:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800fd7a:	6013      	str	r3, [r2, #0]
 800fd7c:	f000 bd28 	b.w	80107d0 <_dtoa_r+0xb18>
 800fd80:	aa14      	add	r2, sp, #80	; 0x50
 800fd82:	a915      	add	r1, sp, #84	; 0x54
 800fd84:	ec47 6b10 	vmov	d0, r6, r7
 800fd88:	4620      	mov	r0, r4
 800fd8a:	f001 f9d8 	bl	801113e <__d2b>
 800fd8e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800fd92:	9004      	str	r0, [sp, #16]
 800fd94:	2d00      	cmp	r5, #0
 800fd96:	d07c      	beq.n	800fe92 <_dtoa_r+0x1da>
 800fd98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fd9c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800fda0:	46b2      	mov	sl, r6
 800fda2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800fda6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fdaa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800fdae:	2200      	movs	r2, #0
 800fdb0:	4b8b      	ldr	r3, [pc, #556]	; (800ffe0 <_dtoa_r+0x328>)
 800fdb2:	4650      	mov	r0, sl
 800fdb4:	4659      	mov	r1, fp
 800fdb6:	f7f0 fa8f 	bl	80002d8 <__aeabi_dsub>
 800fdba:	a381      	add	r3, pc, #516	; (adr r3, 800ffc0 <_dtoa_r+0x308>)
 800fdbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdc0:	f7f0 fc42 	bl	8000648 <__aeabi_dmul>
 800fdc4:	a380      	add	r3, pc, #512	; (adr r3, 800ffc8 <_dtoa_r+0x310>)
 800fdc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdca:	f7f0 fa87 	bl	80002dc <__adddf3>
 800fdce:	4606      	mov	r6, r0
 800fdd0:	4628      	mov	r0, r5
 800fdd2:	460f      	mov	r7, r1
 800fdd4:	f7f0 fbce 	bl	8000574 <__aeabi_i2d>
 800fdd8:	a37d      	add	r3, pc, #500	; (adr r3, 800ffd0 <_dtoa_r+0x318>)
 800fdda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdde:	f7f0 fc33 	bl	8000648 <__aeabi_dmul>
 800fde2:	4602      	mov	r2, r0
 800fde4:	460b      	mov	r3, r1
 800fde6:	4630      	mov	r0, r6
 800fde8:	4639      	mov	r1, r7
 800fdea:	f7f0 fa77 	bl	80002dc <__adddf3>
 800fdee:	4606      	mov	r6, r0
 800fdf0:	460f      	mov	r7, r1
 800fdf2:	f7f0 fed9 	bl	8000ba8 <__aeabi_d2iz>
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	4682      	mov	sl, r0
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	4630      	mov	r0, r6
 800fdfe:	4639      	mov	r1, r7
 800fe00:	f7f0 fe94 	bl	8000b2c <__aeabi_dcmplt>
 800fe04:	b148      	cbz	r0, 800fe1a <_dtoa_r+0x162>
 800fe06:	4650      	mov	r0, sl
 800fe08:	f7f0 fbb4 	bl	8000574 <__aeabi_i2d>
 800fe0c:	4632      	mov	r2, r6
 800fe0e:	463b      	mov	r3, r7
 800fe10:	f7f0 fe82 	bl	8000b18 <__aeabi_dcmpeq>
 800fe14:	b908      	cbnz	r0, 800fe1a <_dtoa_r+0x162>
 800fe16:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800fe1a:	f1ba 0f16 	cmp.w	sl, #22
 800fe1e:	d859      	bhi.n	800fed4 <_dtoa_r+0x21c>
 800fe20:	4970      	ldr	r1, [pc, #448]	; (800ffe4 <_dtoa_r+0x32c>)
 800fe22:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800fe26:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe2e:	f7f0 fe9b 	bl	8000b68 <__aeabi_dcmpgt>
 800fe32:	2800      	cmp	r0, #0
 800fe34:	d050      	beq.n	800fed8 <_dtoa_r+0x220>
 800fe36:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	930f      	str	r3, [sp, #60]	; 0x3c
 800fe3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fe40:	1b5d      	subs	r5, r3, r5
 800fe42:	f1b5 0801 	subs.w	r8, r5, #1
 800fe46:	bf49      	itett	mi
 800fe48:	f1c5 0301 	rsbmi	r3, r5, #1
 800fe4c:	2300      	movpl	r3, #0
 800fe4e:	9305      	strmi	r3, [sp, #20]
 800fe50:	f04f 0800 	movmi.w	r8, #0
 800fe54:	bf58      	it	pl
 800fe56:	9305      	strpl	r3, [sp, #20]
 800fe58:	f1ba 0f00 	cmp.w	sl, #0
 800fe5c:	db3e      	blt.n	800fedc <_dtoa_r+0x224>
 800fe5e:	2300      	movs	r3, #0
 800fe60:	44d0      	add	r8, sl
 800fe62:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800fe66:	9307      	str	r3, [sp, #28]
 800fe68:	9b06      	ldr	r3, [sp, #24]
 800fe6a:	2b09      	cmp	r3, #9
 800fe6c:	f200 8090 	bhi.w	800ff90 <_dtoa_r+0x2d8>
 800fe70:	2b05      	cmp	r3, #5
 800fe72:	bfc4      	itt	gt
 800fe74:	3b04      	subgt	r3, #4
 800fe76:	9306      	strgt	r3, [sp, #24]
 800fe78:	9b06      	ldr	r3, [sp, #24]
 800fe7a:	f1a3 0302 	sub.w	r3, r3, #2
 800fe7e:	bfcc      	ite	gt
 800fe80:	2500      	movgt	r5, #0
 800fe82:	2501      	movle	r5, #1
 800fe84:	2b03      	cmp	r3, #3
 800fe86:	f200 808f 	bhi.w	800ffa8 <_dtoa_r+0x2f0>
 800fe8a:	e8df f003 	tbb	[pc, r3]
 800fe8e:	7f7d      	.short	0x7f7d
 800fe90:	7131      	.short	0x7131
 800fe92:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800fe96:	441d      	add	r5, r3
 800fe98:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800fe9c:	2820      	cmp	r0, #32
 800fe9e:	dd13      	ble.n	800fec8 <_dtoa_r+0x210>
 800fea0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800fea4:	9b00      	ldr	r3, [sp, #0]
 800fea6:	fa08 f800 	lsl.w	r8, r8, r0
 800feaa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800feae:	fa23 f000 	lsr.w	r0, r3, r0
 800feb2:	ea48 0000 	orr.w	r0, r8, r0
 800feb6:	f7f0 fb4d 	bl	8000554 <__aeabi_ui2d>
 800feba:	2301      	movs	r3, #1
 800febc:	4682      	mov	sl, r0
 800febe:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800fec2:	3d01      	subs	r5, #1
 800fec4:	9313      	str	r3, [sp, #76]	; 0x4c
 800fec6:	e772      	b.n	800fdae <_dtoa_r+0xf6>
 800fec8:	9b00      	ldr	r3, [sp, #0]
 800feca:	f1c0 0020 	rsb	r0, r0, #32
 800fece:	fa03 f000 	lsl.w	r0, r3, r0
 800fed2:	e7f0      	b.n	800feb6 <_dtoa_r+0x1fe>
 800fed4:	2301      	movs	r3, #1
 800fed6:	e7b1      	b.n	800fe3c <_dtoa_r+0x184>
 800fed8:	900f      	str	r0, [sp, #60]	; 0x3c
 800feda:	e7b0      	b.n	800fe3e <_dtoa_r+0x186>
 800fedc:	9b05      	ldr	r3, [sp, #20]
 800fede:	eba3 030a 	sub.w	r3, r3, sl
 800fee2:	9305      	str	r3, [sp, #20]
 800fee4:	f1ca 0300 	rsb	r3, sl, #0
 800fee8:	9307      	str	r3, [sp, #28]
 800feea:	2300      	movs	r3, #0
 800feec:	930e      	str	r3, [sp, #56]	; 0x38
 800feee:	e7bb      	b.n	800fe68 <_dtoa_r+0x1b0>
 800fef0:	2301      	movs	r3, #1
 800fef2:	930a      	str	r3, [sp, #40]	; 0x28
 800fef4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	dd59      	ble.n	800ffae <_dtoa_r+0x2f6>
 800fefa:	9302      	str	r3, [sp, #8]
 800fefc:	4699      	mov	r9, r3
 800fefe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ff00:	2200      	movs	r2, #0
 800ff02:	6072      	str	r2, [r6, #4]
 800ff04:	2204      	movs	r2, #4
 800ff06:	f102 0014 	add.w	r0, r2, #20
 800ff0a:	4298      	cmp	r0, r3
 800ff0c:	6871      	ldr	r1, [r6, #4]
 800ff0e:	d953      	bls.n	800ffb8 <_dtoa_r+0x300>
 800ff10:	4620      	mov	r0, r4
 800ff12:	f000 fe88 	bl	8010c26 <_Balloc>
 800ff16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ff18:	6030      	str	r0, [r6, #0]
 800ff1a:	f1b9 0f0e 	cmp.w	r9, #14
 800ff1e:	f8d3 b000 	ldr.w	fp, [r3]
 800ff22:	f200 80e6 	bhi.w	80100f2 <_dtoa_r+0x43a>
 800ff26:	2d00      	cmp	r5, #0
 800ff28:	f000 80e3 	beq.w	80100f2 <_dtoa_r+0x43a>
 800ff2c:	ed9d 7b00 	vldr	d7, [sp]
 800ff30:	f1ba 0f00 	cmp.w	sl, #0
 800ff34:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800ff38:	dd74      	ble.n	8010024 <_dtoa_r+0x36c>
 800ff3a:	4a2a      	ldr	r2, [pc, #168]	; (800ffe4 <_dtoa_r+0x32c>)
 800ff3c:	f00a 030f 	and.w	r3, sl, #15
 800ff40:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ff44:	ed93 7b00 	vldr	d7, [r3]
 800ff48:	ea4f 162a 	mov.w	r6, sl, asr #4
 800ff4c:	06f0      	lsls	r0, r6, #27
 800ff4e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800ff52:	d565      	bpl.n	8010020 <_dtoa_r+0x368>
 800ff54:	4b24      	ldr	r3, [pc, #144]	; (800ffe8 <_dtoa_r+0x330>)
 800ff56:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ff5a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ff5e:	f7f0 fc9d 	bl	800089c <__aeabi_ddiv>
 800ff62:	e9cd 0100 	strd	r0, r1, [sp]
 800ff66:	f006 060f 	and.w	r6, r6, #15
 800ff6a:	2503      	movs	r5, #3
 800ff6c:	4f1e      	ldr	r7, [pc, #120]	; (800ffe8 <_dtoa_r+0x330>)
 800ff6e:	e04c      	b.n	801000a <_dtoa_r+0x352>
 800ff70:	2301      	movs	r3, #1
 800ff72:	930a      	str	r3, [sp, #40]	; 0x28
 800ff74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff76:	4453      	add	r3, sl
 800ff78:	f103 0901 	add.w	r9, r3, #1
 800ff7c:	9302      	str	r3, [sp, #8]
 800ff7e:	464b      	mov	r3, r9
 800ff80:	2b01      	cmp	r3, #1
 800ff82:	bfb8      	it	lt
 800ff84:	2301      	movlt	r3, #1
 800ff86:	e7ba      	b.n	800fefe <_dtoa_r+0x246>
 800ff88:	2300      	movs	r3, #0
 800ff8a:	e7b2      	b.n	800fef2 <_dtoa_r+0x23a>
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	e7f0      	b.n	800ff72 <_dtoa_r+0x2ba>
 800ff90:	2501      	movs	r5, #1
 800ff92:	2300      	movs	r3, #0
 800ff94:	9306      	str	r3, [sp, #24]
 800ff96:	950a      	str	r5, [sp, #40]	; 0x28
 800ff98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ff9c:	9302      	str	r3, [sp, #8]
 800ff9e:	4699      	mov	r9, r3
 800ffa0:	2200      	movs	r2, #0
 800ffa2:	2312      	movs	r3, #18
 800ffa4:	920b      	str	r2, [sp, #44]	; 0x2c
 800ffa6:	e7aa      	b.n	800fefe <_dtoa_r+0x246>
 800ffa8:	2301      	movs	r3, #1
 800ffaa:	930a      	str	r3, [sp, #40]	; 0x28
 800ffac:	e7f4      	b.n	800ff98 <_dtoa_r+0x2e0>
 800ffae:	2301      	movs	r3, #1
 800ffb0:	9302      	str	r3, [sp, #8]
 800ffb2:	4699      	mov	r9, r3
 800ffb4:	461a      	mov	r2, r3
 800ffb6:	e7f5      	b.n	800ffa4 <_dtoa_r+0x2ec>
 800ffb8:	3101      	adds	r1, #1
 800ffba:	6071      	str	r1, [r6, #4]
 800ffbc:	0052      	lsls	r2, r2, #1
 800ffbe:	e7a2      	b.n	800ff06 <_dtoa_r+0x24e>
 800ffc0:	636f4361 	.word	0x636f4361
 800ffc4:	3fd287a7 	.word	0x3fd287a7
 800ffc8:	8b60c8b3 	.word	0x8b60c8b3
 800ffcc:	3fc68a28 	.word	0x3fc68a28
 800ffd0:	509f79fb 	.word	0x509f79fb
 800ffd4:	3fd34413 	.word	0x3fd34413
 800ffd8:	7ff00000 	.word	0x7ff00000
 800ffdc:	080142cd 	.word	0x080142cd
 800ffe0:	3ff80000 	.word	0x3ff80000
 800ffe4:	080140d8 	.word	0x080140d8
 800ffe8:	080140b0 	.word	0x080140b0
 800ffec:	0801404b 	.word	0x0801404b
 800fff0:	07f1      	lsls	r1, r6, #31
 800fff2:	d508      	bpl.n	8010006 <_dtoa_r+0x34e>
 800fff4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fff8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fffc:	f7f0 fb24 	bl	8000648 <__aeabi_dmul>
 8010000:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010004:	3501      	adds	r5, #1
 8010006:	1076      	asrs	r6, r6, #1
 8010008:	3708      	adds	r7, #8
 801000a:	2e00      	cmp	r6, #0
 801000c:	d1f0      	bne.n	800fff0 <_dtoa_r+0x338>
 801000e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010012:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010016:	f7f0 fc41 	bl	800089c <__aeabi_ddiv>
 801001a:	e9cd 0100 	strd	r0, r1, [sp]
 801001e:	e01a      	b.n	8010056 <_dtoa_r+0x39e>
 8010020:	2502      	movs	r5, #2
 8010022:	e7a3      	b.n	800ff6c <_dtoa_r+0x2b4>
 8010024:	f000 80a0 	beq.w	8010168 <_dtoa_r+0x4b0>
 8010028:	f1ca 0600 	rsb	r6, sl, #0
 801002c:	4b9f      	ldr	r3, [pc, #636]	; (80102ac <_dtoa_r+0x5f4>)
 801002e:	4fa0      	ldr	r7, [pc, #640]	; (80102b0 <_dtoa_r+0x5f8>)
 8010030:	f006 020f 	and.w	r2, r6, #15
 8010034:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801003c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010040:	f7f0 fb02 	bl	8000648 <__aeabi_dmul>
 8010044:	e9cd 0100 	strd	r0, r1, [sp]
 8010048:	1136      	asrs	r6, r6, #4
 801004a:	2300      	movs	r3, #0
 801004c:	2502      	movs	r5, #2
 801004e:	2e00      	cmp	r6, #0
 8010050:	d17f      	bne.n	8010152 <_dtoa_r+0x49a>
 8010052:	2b00      	cmp	r3, #0
 8010054:	d1e1      	bne.n	801001a <_dtoa_r+0x362>
 8010056:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010058:	2b00      	cmp	r3, #0
 801005a:	f000 8087 	beq.w	801016c <_dtoa_r+0x4b4>
 801005e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010062:	2200      	movs	r2, #0
 8010064:	4b93      	ldr	r3, [pc, #588]	; (80102b4 <_dtoa_r+0x5fc>)
 8010066:	4630      	mov	r0, r6
 8010068:	4639      	mov	r1, r7
 801006a:	f7f0 fd5f 	bl	8000b2c <__aeabi_dcmplt>
 801006e:	2800      	cmp	r0, #0
 8010070:	d07c      	beq.n	801016c <_dtoa_r+0x4b4>
 8010072:	f1b9 0f00 	cmp.w	r9, #0
 8010076:	d079      	beq.n	801016c <_dtoa_r+0x4b4>
 8010078:	9b02      	ldr	r3, [sp, #8]
 801007a:	2b00      	cmp	r3, #0
 801007c:	dd35      	ble.n	80100ea <_dtoa_r+0x432>
 801007e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8010082:	9308      	str	r3, [sp, #32]
 8010084:	4639      	mov	r1, r7
 8010086:	2200      	movs	r2, #0
 8010088:	4b8b      	ldr	r3, [pc, #556]	; (80102b8 <_dtoa_r+0x600>)
 801008a:	4630      	mov	r0, r6
 801008c:	f7f0 fadc 	bl	8000648 <__aeabi_dmul>
 8010090:	e9cd 0100 	strd	r0, r1, [sp]
 8010094:	9f02      	ldr	r7, [sp, #8]
 8010096:	3501      	adds	r5, #1
 8010098:	4628      	mov	r0, r5
 801009a:	f7f0 fa6b 	bl	8000574 <__aeabi_i2d>
 801009e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80100a2:	f7f0 fad1 	bl	8000648 <__aeabi_dmul>
 80100a6:	2200      	movs	r2, #0
 80100a8:	4b84      	ldr	r3, [pc, #528]	; (80102bc <_dtoa_r+0x604>)
 80100aa:	f7f0 f917 	bl	80002dc <__adddf3>
 80100ae:	4605      	mov	r5, r0
 80100b0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80100b4:	2f00      	cmp	r7, #0
 80100b6:	d15d      	bne.n	8010174 <_dtoa_r+0x4bc>
 80100b8:	2200      	movs	r2, #0
 80100ba:	4b81      	ldr	r3, [pc, #516]	; (80102c0 <_dtoa_r+0x608>)
 80100bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80100c0:	f7f0 f90a 	bl	80002d8 <__aeabi_dsub>
 80100c4:	462a      	mov	r2, r5
 80100c6:	4633      	mov	r3, r6
 80100c8:	e9cd 0100 	strd	r0, r1, [sp]
 80100cc:	f7f0 fd4c 	bl	8000b68 <__aeabi_dcmpgt>
 80100d0:	2800      	cmp	r0, #0
 80100d2:	f040 8288 	bne.w	80105e6 <_dtoa_r+0x92e>
 80100d6:	462a      	mov	r2, r5
 80100d8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80100dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80100e0:	f7f0 fd24 	bl	8000b2c <__aeabi_dcmplt>
 80100e4:	2800      	cmp	r0, #0
 80100e6:	f040 827c 	bne.w	80105e2 <_dtoa_r+0x92a>
 80100ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80100ee:	e9cd 2300 	strd	r2, r3, [sp]
 80100f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	f2c0 8150 	blt.w	801039a <_dtoa_r+0x6e2>
 80100fa:	f1ba 0f0e 	cmp.w	sl, #14
 80100fe:	f300 814c 	bgt.w	801039a <_dtoa_r+0x6e2>
 8010102:	4b6a      	ldr	r3, [pc, #424]	; (80102ac <_dtoa_r+0x5f4>)
 8010104:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010108:	ed93 7b00 	vldr	d7, [r3]
 801010c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801010e:	2b00      	cmp	r3, #0
 8010110:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010114:	f280 80d8 	bge.w	80102c8 <_dtoa_r+0x610>
 8010118:	f1b9 0f00 	cmp.w	r9, #0
 801011c:	f300 80d4 	bgt.w	80102c8 <_dtoa_r+0x610>
 8010120:	f040 825e 	bne.w	80105e0 <_dtoa_r+0x928>
 8010124:	2200      	movs	r2, #0
 8010126:	4b66      	ldr	r3, [pc, #408]	; (80102c0 <_dtoa_r+0x608>)
 8010128:	ec51 0b17 	vmov	r0, r1, d7
 801012c:	f7f0 fa8c 	bl	8000648 <__aeabi_dmul>
 8010130:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010134:	f7f0 fd0e 	bl	8000b54 <__aeabi_dcmpge>
 8010138:	464f      	mov	r7, r9
 801013a:	464e      	mov	r6, r9
 801013c:	2800      	cmp	r0, #0
 801013e:	f040 8234 	bne.w	80105aa <_dtoa_r+0x8f2>
 8010142:	2331      	movs	r3, #49	; 0x31
 8010144:	f10b 0501 	add.w	r5, fp, #1
 8010148:	f88b 3000 	strb.w	r3, [fp]
 801014c:	f10a 0a01 	add.w	sl, sl, #1
 8010150:	e22f      	b.n	80105b2 <_dtoa_r+0x8fa>
 8010152:	07f2      	lsls	r2, r6, #31
 8010154:	d505      	bpl.n	8010162 <_dtoa_r+0x4aa>
 8010156:	e9d7 2300 	ldrd	r2, r3, [r7]
 801015a:	f7f0 fa75 	bl	8000648 <__aeabi_dmul>
 801015e:	3501      	adds	r5, #1
 8010160:	2301      	movs	r3, #1
 8010162:	1076      	asrs	r6, r6, #1
 8010164:	3708      	adds	r7, #8
 8010166:	e772      	b.n	801004e <_dtoa_r+0x396>
 8010168:	2502      	movs	r5, #2
 801016a:	e774      	b.n	8010056 <_dtoa_r+0x39e>
 801016c:	f8cd a020 	str.w	sl, [sp, #32]
 8010170:	464f      	mov	r7, r9
 8010172:	e791      	b.n	8010098 <_dtoa_r+0x3e0>
 8010174:	4b4d      	ldr	r3, [pc, #308]	; (80102ac <_dtoa_r+0x5f4>)
 8010176:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801017a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801017e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010180:	2b00      	cmp	r3, #0
 8010182:	d047      	beq.n	8010214 <_dtoa_r+0x55c>
 8010184:	4602      	mov	r2, r0
 8010186:	460b      	mov	r3, r1
 8010188:	2000      	movs	r0, #0
 801018a:	494e      	ldr	r1, [pc, #312]	; (80102c4 <_dtoa_r+0x60c>)
 801018c:	f7f0 fb86 	bl	800089c <__aeabi_ddiv>
 8010190:	462a      	mov	r2, r5
 8010192:	4633      	mov	r3, r6
 8010194:	f7f0 f8a0 	bl	80002d8 <__aeabi_dsub>
 8010198:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801019c:	465d      	mov	r5, fp
 801019e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80101a2:	f7f0 fd01 	bl	8000ba8 <__aeabi_d2iz>
 80101a6:	4606      	mov	r6, r0
 80101a8:	f7f0 f9e4 	bl	8000574 <__aeabi_i2d>
 80101ac:	4602      	mov	r2, r0
 80101ae:	460b      	mov	r3, r1
 80101b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80101b4:	f7f0 f890 	bl	80002d8 <__aeabi_dsub>
 80101b8:	3630      	adds	r6, #48	; 0x30
 80101ba:	f805 6b01 	strb.w	r6, [r5], #1
 80101be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80101c2:	e9cd 0100 	strd	r0, r1, [sp]
 80101c6:	f7f0 fcb1 	bl	8000b2c <__aeabi_dcmplt>
 80101ca:	2800      	cmp	r0, #0
 80101cc:	d163      	bne.n	8010296 <_dtoa_r+0x5de>
 80101ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80101d2:	2000      	movs	r0, #0
 80101d4:	4937      	ldr	r1, [pc, #220]	; (80102b4 <_dtoa_r+0x5fc>)
 80101d6:	f7f0 f87f 	bl	80002d8 <__aeabi_dsub>
 80101da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80101de:	f7f0 fca5 	bl	8000b2c <__aeabi_dcmplt>
 80101e2:	2800      	cmp	r0, #0
 80101e4:	f040 80b7 	bne.w	8010356 <_dtoa_r+0x69e>
 80101e8:	eba5 030b 	sub.w	r3, r5, fp
 80101ec:	429f      	cmp	r7, r3
 80101ee:	f77f af7c 	ble.w	80100ea <_dtoa_r+0x432>
 80101f2:	2200      	movs	r2, #0
 80101f4:	4b30      	ldr	r3, [pc, #192]	; (80102b8 <_dtoa_r+0x600>)
 80101f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80101fa:	f7f0 fa25 	bl	8000648 <__aeabi_dmul>
 80101fe:	2200      	movs	r2, #0
 8010200:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010204:	4b2c      	ldr	r3, [pc, #176]	; (80102b8 <_dtoa_r+0x600>)
 8010206:	e9dd 0100 	ldrd	r0, r1, [sp]
 801020a:	f7f0 fa1d 	bl	8000648 <__aeabi_dmul>
 801020e:	e9cd 0100 	strd	r0, r1, [sp]
 8010212:	e7c4      	b.n	801019e <_dtoa_r+0x4e6>
 8010214:	462a      	mov	r2, r5
 8010216:	4633      	mov	r3, r6
 8010218:	f7f0 fa16 	bl	8000648 <__aeabi_dmul>
 801021c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010220:	eb0b 0507 	add.w	r5, fp, r7
 8010224:	465e      	mov	r6, fp
 8010226:	e9dd 0100 	ldrd	r0, r1, [sp]
 801022a:	f7f0 fcbd 	bl	8000ba8 <__aeabi_d2iz>
 801022e:	4607      	mov	r7, r0
 8010230:	f7f0 f9a0 	bl	8000574 <__aeabi_i2d>
 8010234:	3730      	adds	r7, #48	; 0x30
 8010236:	4602      	mov	r2, r0
 8010238:	460b      	mov	r3, r1
 801023a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801023e:	f7f0 f84b 	bl	80002d8 <__aeabi_dsub>
 8010242:	f806 7b01 	strb.w	r7, [r6], #1
 8010246:	42ae      	cmp	r6, r5
 8010248:	e9cd 0100 	strd	r0, r1, [sp]
 801024c:	f04f 0200 	mov.w	r2, #0
 8010250:	d126      	bne.n	80102a0 <_dtoa_r+0x5e8>
 8010252:	4b1c      	ldr	r3, [pc, #112]	; (80102c4 <_dtoa_r+0x60c>)
 8010254:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010258:	f7f0 f840 	bl	80002dc <__adddf3>
 801025c:	4602      	mov	r2, r0
 801025e:	460b      	mov	r3, r1
 8010260:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010264:	f7f0 fc80 	bl	8000b68 <__aeabi_dcmpgt>
 8010268:	2800      	cmp	r0, #0
 801026a:	d174      	bne.n	8010356 <_dtoa_r+0x69e>
 801026c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010270:	2000      	movs	r0, #0
 8010272:	4914      	ldr	r1, [pc, #80]	; (80102c4 <_dtoa_r+0x60c>)
 8010274:	f7f0 f830 	bl	80002d8 <__aeabi_dsub>
 8010278:	4602      	mov	r2, r0
 801027a:	460b      	mov	r3, r1
 801027c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010280:	f7f0 fc54 	bl	8000b2c <__aeabi_dcmplt>
 8010284:	2800      	cmp	r0, #0
 8010286:	f43f af30 	beq.w	80100ea <_dtoa_r+0x432>
 801028a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801028e:	2b30      	cmp	r3, #48	; 0x30
 8010290:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8010294:	d002      	beq.n	801029c <_dtoa_r+0x5e4>
 8010296:	f8dd a020 	ldr.w	sl, [sp, #32]
 801029a:	e04a      	b.n	8010332 <_dtoa_r+0x67a>
 801029c:	4615      	mov	r5, r2
 801029e:	e7f4      	b.n	801028a <_dtoa_r+0x5d2>
 80102a0:	4b05      	ldr	r3, [pc, #20]	; (80102b8 <_dtoa_r+0x600>)
 80102a2:	f7f0 f9d1 	bl	8000648 <__aeabi_dmul>
 80102a6:	e9cd 0100 	strd	r0, r1, [sp]
 80102aa:	e7bc      	b.n	8010226 <_dtoa_r+0x56e>
 80102ac:	080140d8 	.word	0x080140d8
 80102b0:	080140b0 	.word	0x080140b0
 80102b4:	3ff00000 	.word	0x3ff00000
 80102b8:	40240000 	.word	0x40240000
 80102bc:	401c0000 	.word	0x401c0000
 80102c0:	40140000 	.word	0x40140000
 80102c4:	3fe00000 	.word	0x3fe00000
 80102c8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80102cc:	465d      	mov	r5, fp
 80102ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80102d2:	4630      	mov	r0, r6
 80102d4:	4639      	mov	r1, r7
 80102d6:	f7f0 fae1 	bl	800089c <__aeabi_ddiv>
 80102da:	f7f0 fc65 	bl	8000ba8 <__aeabi_d2iz>
 80102de:	4680      	mov	r8, r0
 80102e0:	f7f0 f948 	bl	8000574 <__aeabi_i2d>
 80102e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80102e8:	f7f0 f9ae 	bl	8000648 <__aeabi_dmul>
 80102ec:	4602      	mov	r2, r0
 80102ee:	460b      	mov	r3, r1
 80102f0:	4630      	mov	r0, r6
 80102f2:	4639      	mov	r1, r7
 80102f4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80102f8:	f7ef ffee 	bl	80002d8 <__aeabi_dsub>
 80102fc:	f805 6b01 	strb.w	r6, [r5], #1
 8010300:	eba5 060b 	sub.w	r6, r5, fp
 8010304:	45b1      	cmp	r9, r6
 8010306:	4602      	mov	r2, r0
 8010308:	460b      	mov	r3, r1
 801030a:	d139      	bne.n	8010380 <_dtoa_r+0x6c8>
 801030c:	f7ef ffe6 	bl	80002dc <__adddf3>
 8010310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010314:	4606      	mov	r6, r0
 8010316:	460f      	mov	r7, r1
 8010318:	f7f0 fc26 	bl	8000b68 <__aeabi_dcmpgt>
 801031c:	b9c8      	cbnz	r0, 8010352 <_dtoa_r+0x69a>
 801031e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010322:	4630      	mov	r0, r6
 8010324:	4639      	mov	r1, r7
 8010326:	f7f0 fbf7 	bl	8000b18 <__aeabi_dcmpeq>
 801032a:	b110      	cbz	r0, 8010332 <_dtoa_r+0x67a>
 801032c:	f018 0f01 	tst.w	r8, #1
 8010330:	d10f      	bne.n	8010352 <_dtoa_r+0x69a>
 8010332:	9904      	ldr	r1, [sp, #16]
 8010334:	4620      	mov	r0, r4
 8010336:	f000 fcaa 	bl	8010c8e <_Bfree>
 801033a:	2300      	movs	r3, #0
 801033c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801033e:	702b      	strb	r3, [r5, #0]
 8010340:	f10a 0301 	add.w	r3, sl, #1
 8010344:	6013      	str	r3, [r2, #0]
 8010346:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010348:	2b00      	cmp	r3, #0
 801034a:	f000 8241 	beq.w	80107d0 <_dtoa_r+0xb18>
 801034e:	601d      	str	r5, [r3, #0]
 8010350:	e23e      	b.n	80107d0 <_dtoa_r+0xb18>
 8010352:	f8cd a020 	str.w	sl, [sp, #32]
 8010356:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801035a:	2a39      	cmp	r2, #57	; 0x39
 801035c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8010360:	d108      	bne.n	8010374 <_dtoa_r+0x6bc>
 8010362:	459b      	cmp	fp, r3
 8010364:	d10a      	bne.n	801037c <_dtoa_r+0x6c4>
 8010366:	9b08      	ldr	r3, [sp, #32]
 8010368:	3301      	adds	r3, #1
 801036a:	9308      	str	r3, [sp, #32]
 801036c:	2330      	movs	r3, #48	; 0x30
 801036e:	f88b 3000 	strb.w	r3, [fp]
 8010372:	465b      	mov	r3, fp
 8010374:	781a      	ldrb	r2, [r3, #0]
 8010376:	3201      	adds	r2, #1
 8010378:	701a      	strb	r2, [r3, #0]
 801037a:	e78c      	b.n	8010296 <_dtoa_r+0x5de>
 801037c:	461d      	mov	r5, r3
 801037e:	e7ea      	b.n	8010356 <_dtoa_r+0x69e>
 8010380:	2200      	movs	r2, #0
 8010382:	4b9b      	ldr	r3, [pc, #620]	; (80105f0 <_dtoa_r+0x938>)
 8010384:	f7f0 f960 	bl	8000648 <__aeabi_dmul>
 8010388:	2200      	movs	r2, #0
 801038a:	2300      	movs	r3, #0
 801038c:	4606      	mov	r6, r0
 801038e:	460f      	mov	r7, r1
 8010390:	f7f0 fbc2 	bl	8000b18 <__aeabi_dcmpeq>
 8010394:	2800      	cmp	r0, #0
 8010396:	d09a      	beq.n	80102ce <_dtoa_r+0x616>
 8010398:	e7cb      	b.n	8010332 <_dtoa_r+0x67a>
 801039a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801039c:	2a00      	cmp	r2, #0
 801039e:	f000 808b 	beq.w	80104b8 <_dtoa_r+0x800>
 80103a2:	9a06      	ldr	r2, [sp, #24]
 80103a4:	2a01      	cmp	r2, #1
 80103a6:	dc6e      	bgt.n	8010486 <_dtoa_r+0x7ce>
 80103a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80103aa:	2a00      	cmp	r2, #0
 80103ac:	d067      	beq.n	801047e <_dtoa_r+0x7c6>
 80103ae:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80103b2:	9f07      	ldr	r7, [sp, #28]
 80103b4:	9d05      	ldr	r5, [sp, #20]
 80103b6:	9a05      	ldr	r2, [sp, #20]
 80103b8:	2101      	movs	r1, #1
 80103ba:	441a      	add	r2, r3
 80103bc:	4620      	mov	r0, r4
 80103be:	9205      	str	r2, [sp, #20]
 80103c0:	4498      	add	r8, r3
 80103c2:	f000 fd04 	bl	8010dce <__i2b>
 80103c6:	4606      	mov	r6, r0
 80103c8:	2d00      	cmp	r5, #0
 80103ca:	dd0c      	ble.n	80103e6 <_dtoa_r+0x72e>
 80103cc:	f1b8 0f00 	cmp.w	r8, #0
 80103d0:	dd09      	ble.n	80103e6 <_dtoa_r+0x72e>
 80103d2:	4545      	cmp	r5, r8
 80103d4:	9a05      	ldr	r2, [sp, #20]
 80103d6:	462b      	mov	r3, r5
 80103d8:	bfa8      	it	ge
 80103da:	4643      	movge	r3, r8
 80103dc:	1ad2      	subs	r2, r2, r3
 80103de:	9205      	str	r2, [sp, #20]
 80103e0:	1aed      	subs	r5, r5, r3
 80103e2:	eba8 0803 	sub.w	r8, r8, r3
 80103e6:	9b07      	ldr	r3, [sp, #28]
 80103e8:	b1eb      	cbz	r3, 8010426 <_dtoa_r+0x76e>
 80103ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d067      	beq.n	80104c0 <_dtoa_r+0x808>
 80103f0:	b18f      	cbz	r7, 8010416 <_dtoa_r+0x75e>
 80103f2:	4631      	mov	r1, r6
 80103f4:	463a      	mov	r2, r7
 80103f6:	4620      	mov	r0, r4
 80103f8:	f000 fd88 	bl	8010f0c <__pow5mult>
 80103fc:	9a04      	ldr	r2, [sp, #16]
 80103fe:	4601      	mov	r1, r0
 8010400:	4606      	mov	r6, r0
 8010402:	4620      	mov	r0, r4
 8010404:	f000 fcec 	bl	8010de0 <__multiply>
 8010408:	9904      	ldr	r1, [sp, #16]
 801040a:	9008      	str	r0, [sp, #32]
 801040c:	4620      	mov	r0, r4
 801040e:	f000 fc3e 	bl	8010c8e <_Bfree>
 8010412:	9b08      	ldr	r3, [sp, #32]
 8010414:	9304      	str	r3, [sp, #16]
 8010416:	9b07      	ldr	r3, [sp, #28]
 8010418:	1bda      	subs	r2, r3, r7
 801041a:	d004      	beq.n	8010426 <_dtoa_r+0x76e>
 801041c:	9904      	ldr	r1, [sp, #16]
 801041e:	4620      	mov	r0, r4
 8010420:	f000 fd74 	bl	8010f0c <__pow5mult>
 8010424:	9004      	str	r0, [sp, #16]
 8010426:	2101      	movs	r1, #1
 8010428:	4620      	mov	r0, r4
 801042a:	f000 fcd0 	bl	8010dce <__i2b>
 801042e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010430:	4607      	mov	r7, r0
 8010432:	2b00      	cmp	r3, #0
 8010434:	f000 81d0 	beq.w	80107d8 <_dtoa_r+0xb20>
 8010438:	461a      	mov	r2, r3
 801043a:	4601      	mov	r1, r0
 801043c:	4620      	mov	r0, r4
 801043e:	f000 fd65 	bl	8010f0c <__pow5mult>
 8010442:	9b06      	ldr	r3, [sp, #24]
 8010444:	2b01      	cmp	r3, #1
 8010446:	4607      	mov	r7, r0
 8010448:	dc40      	bgt.n	80104cc <_dtoa_r+0x814>
 801044a:	9b00      	ldr	r3, [sp, #0]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d139      	bne.n	80104c4 <_dtoa_r+0x80c>
 8010450:	9b01      	ldr	r3, [sp, #4]
 8010452:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010456:	2b00      	cmp	r3, #0
 8010458:	d136      	bne.n	80104c8 <_dtoa_r+0x810>
 801045a:	9b01      	ldr	r3, [sp, #4]
 801045c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010460:	0d1b      	lsrs	r3, r3, #20
 8010462:	051b      	lsls	r3, r3, #20
 8010464:	b12b      	cbz	r3, 8010472 <_dtoa_r+0x7ba>
 8010466:	9b05      	ldr	r3, [sp, #20]
 8010468:	3301      	adds	r3, #1
 801046a:	9305      	str	r3, [sp, #20]
 801046c:	f108 0801 	add.w	r8, r8, #1
 8010470:	2301      	movs	r3, #1
 8010472:	9307      	str	r3, [sp, #28]
 8010474:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010476:	2b00      	cmp	r3, #0
 8010478:	d12a      	bne.n	80104d0 <_dtoa_r+0x818>
 801047a:	2001      	movs	r0, #1
 801047c:	e030      	b.n	80104e0 <_dtoa_r+0x828>
 801047e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010480:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010484:	e795      	b.n	80103b2 <_dtoa_r+0x6fa>
 8010486:	9b07      	ldr	r3, [sp, #28]
 8010488:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 801048c:	42bb      	cmp	r3, r7
 801048e:	bfbf      	itttt	lt
 8010490:	9b07      	ldrlt	r3, [sp, #28]
 8010492:	9707      	strlt	r7, [sp, #28]
 8010494:	1afa      	sublt	r2, r7, r3
 8010496:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8010498:	bfbb      	ittet	lt
 801049a:	189b      	addlt	r3, r3, r2
 801049c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801049e:	1bdf      	subge	r7, r3, r7
 80104a0:	2700      	movlt	r7, #0
 80104a2:	f1b9 0f00 	cmp.w	r9, #0
 80104a6:	bfb5      	itete	lt
 80104a8:	9b05      	ldrlt	r3, [sp, #20]
 80104aa:	9d05      	ldrge	r5, [sp, #20]
 80104ac:	eba3 0509 	sublt.w	r5, r3, r9
 80104b0:	464b      	movge	r3, r9
 80104b2:	bfb8      	it	lt
 80104b4:	2300      	movlt	r3, #0
 80104b6:	e77e      	b.n	80103b6 <_dtoa_r+0x6fe>
 80104b8:	9f07      	ldr	r7, [sp, #28]
 80104ba:	9d05      	ldr	r5, [sp, #20]
 80104bc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80104be:	e783      	b.n	80103c8 <_dtoa_r+0x710>
 80104c0:	9a07      	ldr	r2, [sp, #28]
 80104c2:	e7ab      	b.n	801041c <_dtoa_r+0x764>
 80104c4:	2300      	movs	r3, #0
 80104c6:	e7d4      	b.n	8010472 <_dtoa_r+0x7ba>
 80104c8:	9b00      	ldr	r3, [sp, #0]
 80104ca:	e7d2      	b.n	8010472 <_dtoa_r+0x7ba>
 80104cc:	2300      	movs	r3, #0
 80104ce:	9307      	str	r3, [sp, #28]
 80104d0:	693b      	ldr	r3, [r7, #16]
 80104d2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80104d6:	6918      	ldr	r0, [r3, #16]
 80104d8:	f000 fc2b 	bl	8010d32 <__hi0bits>
 80104dc:	f1c0 0020 	rsb	r0, r0, #32
 80104e0:	4440      	add	r0, r8
 80104e2:	f010 001f 	ands.w	r0, r0, #31
 80104e6:	d047      	beq.n	8010578 <_dtoa_r+0x8c0>
 80104e8:	f1c0 0320 	rsb	r3, r0, #32
 80104ec:	2b04      	cmp	r3, #4
 80104ee:	dd3b      	ble.n	8010568 <_dtoa_r+0x8b0>
 80104f0:	9b05      	ldr	r3, [sp, #20]
 80104f2:	f1c0 001c 	rsb	r0, r0, #28
 80104f6:	4403      	add	r3, r0
 80104f8:	9305      	str	r3, [sp, #20]
 80104fa:	4405      	add	r5, r0
 80104fc:	4480      	add	r8, r0
 80104fe:	9b05      	ldr	r3, [sp, #20]
 8010500:	2b00      	cmp	r3, #0
 8010502:	dd05      	ble.n	8010510 <_dtoa_r+0x858>
 8010504:	461a      	mov	r2, r3
 8010506:	9904      	ldr	r1, [sp, #16]
 8010508:	4620      	mov	r0, r4
 801050a:	f000 fd4d 	bl	8010fa8 <__lshift>
 801050e:	9004      	str	r0, [sp, #16]
 8010510:	f1b8 0f00 	cmp.w	r8, #0
 8010514:	dd05      	ble.n	8010522 <_dtoa_r+0x86a>
 8010516:	4639      	mov	r1, r7
 8010518:	4642      	mov	r2, r8
 801051a:	4620      	mov	r0, r4
 801051c:	f000 fd44 	bl	8010fa8 <__lshift>
 8010520:	4607      	mov	r7, r0
 8010522:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010524:	b353      	cbz	r3, 801057c <_dtoa_r+0x8c4>
 8010526:	4639      	mov	r1, r7
 8010528:	9804      	ldr	r0, [sp, #16]
 801052a:	f000 fd91 	bl	8011050 <__mcmp>
 801052e:	2800      	cmp	r0, #0
 8010530:	da24      	bge.n	801057c <_dtoa_r+0x8c4>
 8010532:	2300      	movs	r3, #0
 8010534:	220a      	movs	r2, #10
 8010536:	9904      	ldr	r1, [sp, #16]
 8010538:	4620      	mov	r0, r4
 801053a:	f000 fbbf 	bl	8010cbc <__multadd>
 801053e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010540:	9004      	str	r0, [sp, #16]
 8010542:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010546:	2b00      	cmp	r3, #0
 8010548:	f000 814d 	beq.w	80107e6 <_dtoa_r+0xb2e>
 801054c:	2300      	movs	r3, #0
 801054e:	4631      	mov	r1, r6
 8010550:	220a      	movs	r2, #10
 8010552:	4620      	mov	r0, r4
 8010554:	f000 fbb2 	bl	8010cbc <__multadd>
 8010558:	9b02      	ldr	r3, [sp, #8]
 801055a:	2b00      	cmp	r3, #0
 801055c:	4606      	mov	r6, r0
 801055e:	dc4f      	bgt.n	8010600 <_dtoa_r+0x948>
 8010560:	9b06      	ldr	r3, [sp, #24]
 8010562:	2b02      	cmp	r3, #2
 8010564:	dd4c      	ble.n	8010600 <_dtoa_r+0x948>
 8010566:	e011      	b.n	801058c <_dtoa_r+0x8d4>
 8010568:	d0c9      	beq.n	80104fe <_dtoa_r+0x846>
 801056a:	9a05      	ldr	r2, [sp, #20]
 801056c:	331c      	adds	r3, #28
 801056e:	441a      	add	r2, r3
 8010570:	9205      	str	r2, [sp, #20]
 8010572:	441d      	add	r5, r3
 8010574:	4498      	add	r8, r3
 8010576:	e7c2      	b.n	80104fe <_dtoa_r+0x846>
 8010578:	4603      	mov	r3, r0
 801057a:	e7f6      	b.n	801056a <_dtoa_r+0x8b2>
 801057c:	f1b9 0f00 	cmp.w	r9, #0
 8010580:	dc38      	bgt.n	80105f4 <_dtoa_r+0x93c>
 8010582:	9b06      	ldr	r3, [sp, #24]
 8010584:	2b02      	cmp	r3, #2
 8010586:	dd35      	ble.n	80105f4 <_dtoa_r+0x93c>
 8010588:	f8cd 9008 	str.w	r9, [sp, #8]
 801058c:	9b02      	ldr	r3, [sp, #8]
 801058e:	b963      	cbnz	r3, 80105aa <_dtoa_r+0x8f2>
 8010590:	4639      	mov	r1, r7
 8010592:	2205      	movs	r2, #5
 8010594:	4620      	mov	r0, r4
 8010596:	f000 fb91 	bl	8010cbc <__multadd>
 801059a:	4601      	mov	r1, r0
 801059c:	4607      	mov	r7, r0
 801059e:	9804      	ldr	r0, [sp, #16]
 80105a0:	f000 fd56 	bl	8011050 <__mcmp>
 80105a4:	2800      	cmp	r0, #0
 80105a6:	f73f adcc 	bgt.w	8010142 <_dtoa_r+0x48a>
 80105aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80105ac:	465d      	mov	r5, fp
 80105ae:	ea6f 0a03 	mvn.w	sl, r3
 80105b2:	f04f 0900 	mov.w	r9, #0
 80105b6:	4639      	mov	r1, r7
 80105b8:	4620      	mov	r0, r4
 80105ba:	f000 fb68 	bl	8010c8e <_Bfree>
 80105be:	2e00      	cmp	r6, #0
 80105c0:	f43f aeb7 	beq.w	8010332 <_dtoa_r+0x67a>
 80105c4:	f1b9 0f00 	cmp.w	r9, #0
 80105c8:	d005      	beq.n	80105d6 <_dtoa_r+0x91e>
 80105ca:	45b1      	cmp	r9, r6
 80105cc:	d003      	beq.n	80105d6 <_dtoa_r+0x91e>
 80105ce:	4649      	mov	r1, r9
 80105d0:	4620      	mov	r0, r4
 80105d2:	f000 fb5c 	bl	8010c8e <_Bfree>
 80105d6:	4631      	mov	r1, r6
 80105d8:	4620      	mov	r0, r4
 80105da:	f000 fb58 	bl	8010c8e <_Bfree>
 80105de:	e6a8      	b.n	8010332 <_dtoa_r+0x67a>
 80105e0:	2700      	movs	r7, #0
 80105e2:	463e      	mov	r6, r7
 80105e4:	e7e1      	b.n	80105aa <_dtoa_r+0x8f2>
 80105e6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80105ea:	463e      	mov	r6, r7
 80105ec:	e5a9      	b.n	8010142 <_dtoa_r+0x48a>
 80105ee:	bf00      	nop
 80105f0:	40240000 	.word	0x40240000
 80105f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105f6:	f8cd 9008 	str.w	r9, [sp, #8]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	f000 80fa 	beq.w	80107f4 <_dtoa_r+0xb3c>
 8010600:	2d00      	cmp	r5, #0
 8010602:	dd05      	ble.n	8010610 <_dtoa_r+0x958>
 8010604:	4631      	mov	r1, r6
 8010606:	462a      	mov	r2, r5
 8010608:	4620      	mov	r0, r4
 801060a:	f000 fccd 	bl	8010fa8 <__lshift>
 801060e:	4606      	mov	r6, r0
 8010610:	9b07      	ldr	r3, [sp, #28]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d04c      	beq.n	80106b0 <_dtoa_r+0x9f8>
 8010616:	6871      	ldr	r1, [r6, #4]
 8010618:	4620      	mov	r0, r4
 801061a:	f000 fb04 	bl	8010c26 <_Balloc>
 801061e:	6932      	ldr	r2, [r6, #16]
 8010620:	3202      	adds	r2, #2
 8010622:	4605      	mov	r5, r0
 8010624:	0092      	lsls	r2, r2, #2
 8010626:	f106 010c 	add.w	r1, r6, #12
 801062a:	300c      	adds	r0, #12
 801062c:	f000 faf0 	bl	8010c10 <memcpy>
 8010630:	2201      	movs	r2, #1
 8010632:	4629      	mov	r1, r5
 8010634:	4620      	mov	r0, r4
 8010636:	f000 fcb7 	bl	8010fa8 <__lshift>
 801063a:	9b00      	ldr	r3, [sp, #0]
 801063c:	f8cd b014 	str.w	fp, [sp, #20]
 8010640:	f003 0301 	and.w	r3, r3, #1
 8010644:	46b1      	mov	r9, r6
 8010646:	9307      	str	r3, [sp, #28]
 8010648:	4606      	mov	r6, r0
 801064a:	4639      	mov	r1, r7
 801064c:	9804      	ldr	r0, [sp, #16]
 801064e:	f7ff faa5 	bl	800fb9c <quorem>
 8010652:	4649      	mov	r1, r9
 8010654:	4605      	mov	r5, r0
 8010656:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801065a:	9804      	ldr	r0, [sp, #16]
 801065c:	f000 fcf8 	bl	8011050 <__mcmp>
 8010660:	4632      	mov	r2, r6
 8010662:	9000      	str	r0, [sp, #0]
 8010664:	4639      	mov	r1, r7
 8010666:	4620      	mov	r0, r4
 8010668:	f000 fd0c 	bl	8011084 <__mdiff>
 801066c:	68c3      	ldr	r3, [r0, #12]
 801066e:	4602      	mov	r2, r0
 8010670:	bb03      	cbnz	r3, 80106b4 <_dtoa_r+0x9fc>
 8010672:	4601      	mov	r1, r0
 8010674:	9008      	str	r0, [sp, #32]
 8010676:	9804      	ldr	r0, [sp, #16]
 8010678:	f000 fcea 	bl	8011050 <__mcmp>
 801067c:	9a08      	ldr	r2, [sp, #32]
 801067e:	4603      	mov	r3, r0
 8010680:	4611      	mov	r1, r2
 8010682:	4620      	mov	r0, r4
 8010684:	9308      	str	r3, [sp, #32]
 8010686:	f000 fb02 	bl	8010c8e <_Bfree>
 801068a:	9b08      	ldr	r3, [sp, #32]
 801068c:	b9a3      	cbnz	r3, 80106b8 <_dtoa_r+0xa00>
 801068e:	9a06      	ldr	r2, [sp, #24]
 8010690:	b992      	cbnz	r2, 80106b8 <_dtoa_r+0xa00>
 8010692:	9a07      	ldr	r2, [sp, #28]
 8010694:	b982      	cbnz	r2, 80106b8 <_dtoa_r+0xa00>
 8010696:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801069a:	d029      	beq.n	80106f0 <_dtoa_r+0xa38>
 801069c:	9b00      	ldr	r3, [sp, #0]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	dd01      	ble.n	80106a6 <_dtoa_r+0x9ee>
 80106a2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80106a6:	9b05      	ldr	r3, [sp, #20]
 80106a8:	1c5d      	adds	r5, r3, #1
 80106aa:	f883 8000 	strb.w	r8, [r3]
 80106ae:	e782      	b.n	80105b6 <_dtoa_r+0x8fe>
 80106b0:	4630      	mov	r0, r6
 80106b2:	e7c2      	b.n	801063a <_dtoa_r+0x982>
 80106b4:	2301      	movs	r3, #1
 80106b6:	e7e3      	b.n	8010680 <_dtoa_r+0x9c8>
 80106b8:	9a00      	ldr	r2, [sp, #0]
 80106ba:	2a00      	cmp	r2, #0
 80106bc:	db04      	blt.n	80106c8 <_dtoa_r+0xa10>
 80106be:	d125      	bne.n	801070c <_dtoa_r+0xa54>
 80106c0:	9a06      	ldr	r2, [sp, #24]
 80106c2:	bb1a      	cbnz	r2, 801070c <_dtoa_r+0xa54>
 80106c4:	9a07      	ldr	r2, [sp, #28]
 80106c6:	bb0a      	cbnz	r2, 801070c <_dtoa_r+0xa54>
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	ddec      	ble.n	80106a6 <_dtoa_r+0x9ee>
 80106cc:	2201      	movs	r2, #1
 80106ce:	9904      	ldr	r1, [sp, #16]
 80106d0:	4620      	mov	r0, r4
 80106d2:	f000 fc69 	bl	8010fa8 <__lshift>
 80106d6:	4639      	mov	r1, r7
 80106d8:	9004      	str	r0, [sp, #16]
 80106da:	f000 fcb9 	bl	8011050 <__mcmp>
 80106de:	2800      	cmp	r0, #0
 80106e0:	dc03      	bgt.n	80106ea <_dtoa_r+0xa32>
 80106e2:	d1e0      	bne.n	80106a6 <_dtoa_r+0x9ee>
 80106e4:	f018 0f01 	tst.w	r8, #1
 80106e8:	d0dd      	beq.n	80106a6 <_dtoa_r+0x9ee>
 80106ea:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80106ee:	d1d8      	bne.n	80106a2 <_dtoa_r+0x9ea>
 80106f0:	9b05      	ldr	r3, [sp, #20]
 80106f2:	9a05      	ldr	r2, [sp, #20]
 80106f4:	1c5d      	adds	r5, r3, #1
 80106f6:	2339      	movs	r3, #57	; 0x39
 80106f8:	7013      	strb	r3, [r2, #0]
 80106fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80106fe:	2b39      	cmp	r3, #57	; 0x39
 8010700:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8010704:	d04f      	beq.n	80107a6 <_dtoa_r+0xaee>
 8010706:	3301      	adds	r3, #1
 8010708:	7013      	strb	r3, [r2, #0]
 801070a:	e754      	b.n	80105b6 <_dtoa_r+0x8fe>
 801070c:	9a05      	ldr	r2, [sp, #20]
 801070e:	2b00      	cmp	r3, #0
 8010710:	f102 0501 	add.w	r5, r2, #1
 8010714:	dd06      	ble.n	8010724 <_dtoa_r+0xa6c>
 8010716:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801071a:	d0e9      	beq.n	80106f0 <_dtoa_r+0xa38>
 801071c:	f108 0801 	add.w	r8, r8, #1
 8010720:	9b05      	ldr	r3, [sp, #20]
 8010722:	e7c2      	b.n	80106aa <_dtoa_r+0x9f2>
 8010724:	9a02      	ldr	r2, [sp, #8]
 8010726:	f805 8c01 	strb.w	r8, [r5, #-1]
 801072a:	eba5 030b 	sub.w	r3, r5, fp
 801072e:	4293      	cmp	r3, r2
 8010730:	d021      	beq.n	8010776 <_dtoa_r+0xabe>
 8010732:	2300      	movs	r3, #0
 8010734:	220a      	movs	r2, #10
 8010736:	9904      	ldr	r1, [sp, #16]
 8010738:	4620      	mov	r0, r4
 801073a:	f000 fabf 	bl	8010cbc <__multadd>
 801073e:	45b1      	cmp	r9, r6
 8010740:	9004      	str	r0, [sp, #16]
 8010742:	f04f 0300 	mov.w	r3, #0
 8010746:	f04f 020a 	mov.w	r2, #10
 801074a:	4649      	mov	r1, r9
 801074c:	4620      	mov	r0, r4
 801074e:	d105      	bne.n	801075c <_dtoa_r+0xaa4>
 8010750:	f000 fab4 	bl	8010cbc <__multadd>
 8010754:	4681      	mov	r9, r0
 8010756:	4606      	mov	r6, r0
 8010758:	9505      	str	r5, [sp, #20]
 801075a:	e776      	b.n	801064a <_dtoa_r+0x992>
 801075c:	f000 faae 	bl	8010cbc <__multadd>
 8010760:	4631      	mov	r1, r6
 8010762:	4681      	mov	r9, r0
 8010764:	2300      	movs	r3, #0
 8010766:	220a      	movs	r2, #10
 8010768:	4620      	mov	r0, r4
 801076a:	f000 faa7 	bl	8010cbc <__multadd>
 801076e:	4606      	mov	r6, r0
 8010770:	e7f2      	b.n	8010758 <_dtoa_r+0xaa0>
 8010772:	f04f 0900 	mov.w	r9, #0
 8010776:	2201      	movs	r2, #1
 8010778:	9904      	ldr	r1, [sp, #16]
 801077a:	4620      	mov	r0, r4
 801077c:	f000 fc14 	bl	8010fa8 <__lshift>
 8010780:	4639      	mov	r1, r7
 8010782:	9004      	str	r0, [sp, #16]
 8010784:	f000 fc64 	bl	8011050 <__mcmp>
 8010788:	2800      	cmp	r0, #0
 801078a:	dcb6      	bgt.n	80106fa <_dtoa_r+0xa42>
 801078c:	d102      	bne.n	8010794 <_dtoa_r+0xadc>
 801078e:	f018 0f01 	tst.w	r8, #1
 8010792:	d1b2      	bne.n	80106fa <_dtoa_r+0xa42>
 8010794:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010798:	2b30      	cmp	r3, #48	; 0x30
 801079a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 801079e:	f47f af0a 	bne.w	80105b6 <_dtoa_r+0x8fe>
 80107a2:	4615      	mov	r5, r2
 80107a4:	e7f6      	b.n	8010794 <_dtoa_r+0xadc>
 80107a6:	4593      	cmp	fp, r2
 80107a8:	d105      	bne.n	80107b6 <_dtoa_r+0xafe>
 80107aa:	2331      	movs	r3, #49	; 0x31
 80107ac:	f10a 0a01 	add.w	sl, sl, #1
 80107b0:	f88b 3000 	strb.w	r3, [fp]
 80107b4:	e6ff      	b.n	80105b6 <_dtoa_r+0x8fe>
 80107b6:	4615      	mov	r5, r2
 80107b8:	e79f      	b.n	80106fa <_dtoa_r+0xa42>
 80107ba:	f8df b064 	ldr.w	fp, [pc, #100]	; 8010820 <_dtoa_r+0xb68>
 80107be:	e007      	b.n	80107d0 <_dtoa_r+0xb18>
 80107c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80107c2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8010824 <_dtoa_r+0xb6c>
 80107c6:	b11b      	cbz	r3, 80107d0 <_dtoa_r+0xb18>
 80107c8:	f10b 0308 	add.w	r3, fp, #8
 80107cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80107ce:	6013      	str	r3, [r2, #0]
 80107d0:	4658      	mov	r0, fp
 80107d2:	b017      	add	sp, #92	; 0x5c
 80107d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107d8:	9b06      	ldr	r3, [sp, #24]
 80107da:	2b01      	cmp	r3, #1
 80107dc:	f77f ae35 	ble.w	801044a <_dtoa_r+0x792>
 80107e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80107e2:	9307      	str	r3, [sp, #28]
 80107e4:	e649      	b.n	801047a <_dtoa_r+0x7c2>
 80107e6:	9b02      	ldr	r3, [sp, #8]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	dc03      	bgt.n	80107f4 <_dtoa_r+0xb3c>
 80107ec:	9b06      	ldr	r3, [sp, #24]
 80107ee:	2b02      	cmp	r3, #2
 80107f0:	f73f aecc 	bgt.w	801058c <_dtoa_r+0x8d4>
 80107f4:	465d      	mov	r5, fp
 80107f6:	4639      	mov	r1, r7
 80107f8:	9804      	ldr	r0, [sp, #16]
 80107fa:	f7ff f9cf 	bl	800fb9c <quorem>
 80107fe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8010802:	f805 8b01 	strb.w	r8, [r5], #1
 8010806:	9a02      	ldr	r2, [sp, #8]
 8010808:	eba5 030b 	sub.w	r3, r5, fp
 801080c:	429a      	cmp	r2, r3
 801080e:	ddb0      	ble.n	8010772 <_dtoa_r+0xaba>
 8010810:	2300      	movs	r3, #0
 8010812:	220a      	movs	r2, #10
 8010814:	9904      	ldr	r1, [sp, #16]
 8010816:	4620      	mov	r0, r4
 8010818:	f000 fa50 	bl	8010cbc <__multadd>
 801081c:	9004      	str	r0, [sp, #16]
 801081e:	e7ea      	b.n	80107f6 <_dtoa_r+0xb3e>
 8010820:	080142cc 	.word	0x080142cc
 8010824:	08014042 	.word	0x08014042

08010828 <__sflush_r>:
 8010828:	898a      	ldrh	r2, [r1, #12]
 801082a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801082e:	4605      	mov	r5, r0
 8010830:	0710      	lsls	r0, r2, #28
 8010832:	460c      	mov	r4, r1
 8010834:	d458      	bmi.n	80108e8 <__sflush_r+0xc0>
 8010836:	684b      	ldr	r3, [r1, #4]
 8010838:	2b00      	cmp	r3, #0
 801083a:	dc05      	bgt.n	8010848 <__sflush_r+0x20>
 801083c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801083e:	2b00      	cmp	r3, #0
 8010840:	dc02      	bgt.n	8010848 <__sflush_r+0x20>
 8010842:	2000      	movs	r0, #0
 8010844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010848:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801084a:	2e00      	cmp	r6, #0
 801084c:	d0f9      	beq.n	8010842 <__sflush_r+0x1a>
 801084e:	2300      	movs	r3, #0
 8010850:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010854:	682f      	ldr	r7, [r5, #0]
 8010856:	6a21      	ldr	r1, [r4, #32]
 8010858:	602b      	str	r3, [r5, #0]
 801085a:	d032      	beq.n	80108c2 <__sflush_r+0x9a>
 801085c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801085e:	89a3      	ldrh	r3, [r4, #12]
 8010860:	075a      	lsls	r2, r3, #29
 8010862:	d505      	bpl.n	8010870 <__sflush_r+0x48>
 8010864:	6863      	ldr	r3, [r4, #4]
 8010866:	1ac0      	subs	r0, r0, r3
 8010868:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801086a:	b10b      	cbz	r3, 8010870 <__sflush_r+0x48>
 801086c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801086e:	1ac0      	subs	r0, r0, r3
 8010870:	2300      	movs	r3, #0
 8010872:	4602      	mov	r2, r0
 8010874:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010876:	6a21      	ldr	r1, [r4, #32]
 8010878:	4628      	mov	r0, r5
 801087a:	47b0      	blx	r6
 801087c:	1c43      	adds	r3, r0, #1
 801087e:	89a3      	ldrh	r3, [r4, #12]
 8010880:	d106      	bne.n	8010890 <__sflush_r+0x68>
 8010882:	6829      	ldr	r1, [r5, #0]
 8010884:	291d      	cmp	r1, #29
 8010886:	d848      	bhi.n	801091a <__sflush_r+0xf2>
 8010888:	4a29      	ldr	r2, [pc, #164]	; (8010930 <__sflush_r+0x108>)
 801088a:	40ca      	lsrs	r2, r1
 801088c:	07d6      	lsls	r6, r2, #31
 801088e:	d544      	bpl.n	801091a <__sflush_r+0xf2>
 8010890:	2200      	movs	r2, #0
 8010892:	6062      	str	r2, [r4, #4]
 8010894:	04d9      	lsls	r1, r3, #19
 8010896:	6922      	ldr	r2, [r4, #16]
 8010898:	6022      	str	r2, [r4, #0]
 801089a:	d504      	bpl.n	80108a6 <__sflush_r+0x7e>
 801089c:	1c42      	adds	r2, r0, #1
 801089e:	d101      	bne.n	80108a4 <__sflush_r+0x7c>
 80108a0:	682b      	ldr	r3, [r5, #0]
 80108a2:	b903      	cbnz	r3, 80108a6 <__sflush_r+0x7e>
 80108a4:	6560      	str	r0, [r4, #84]	; 0x54
 80108a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80108a8:	602f      	str	r7, [r5, #0]
 80108aa:	2900      	cmp	r1, #0
 80108ac:	d0c9      	beq.n	8010842 <__sflush_r+0x1a>
 80108ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80108b2:	4299      	cmp	r1, r3
 80108b4:	d002      	beq.n	80108bc <__sflush_r+0x94>
 80108b6:	4628      	mov	r0, r5
 80108b8:	f000 fc9e 	bl	80111f8 <_free_r>
 80108bc:	2000      	movs	r0, #0
 80108be:	6360      	str	r0, [r4, #52]	; 0x34
 80108c0:	e7c0      	b.n	8010844 <__sflush_r+0x1c>
 80108c2:	2301      	movs	r3, #1
 80108c4:	4628      	mov	r0, r5
 80108c6:	47b0      	blx	r6
 80108c8:	1c41      	adds	r1, r0, #1
 80108ca:	d1c8      	bne.n	801085e <__sflush_r+0x36>
 80108cc:	682b      	ldr	r3, [r5, #0]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d0c5      	beq.n	801085e <__sflush_r+0x36>
 80108d2:	2b1d      	cmp	r3, #29
 80108d4:	d001      	beq.n	80108da <__sflush_r+0xb2>
 80108d6:	2b16      	cmp	r3, #22
 80108d8:	d101      	bne.n	80108de <__sflush_r+0xb6>
 80108da:	602f      	str	r7, [r5, #0]
 80108dc:	e7b1      	b.n	8010842 <__sflush_r+0x1a>
 80108de:	89a3      	ldrh	r3, [r4, #12]
 80108e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80108e4:	81a3      	strh	r3, [r4, #12]
 80108e6:	e7ad      	b.n	8010844 <__sflush_r+0x1c>
 80108e8:	690f      	ldr	r7, [r1, #16]
 80108ea:	2f00      	cmp	r7, #0
 80108ec:	d0a9      	beq.n	8010842 <__sflush_r+0x1a>
 80108ee:	0793      	lsls	r3, r2, #30
 80108f0:	680e      	ldr	r6, [r1, #0]
 80108f2:	bf08      	it	eq
 80108f4:	694b      	ldreq	r3, [r1, #20]
 80108f6:	600f      	str	r7, [r1, #0]
 80108f8:	bf18      	it	ne
 80108fa:	2300      	movne	r3, #0
 80108fc:	eba6 0807 	sub.w	r8, r6, r7
 8010900:	608b      	str	r3, [r1, #8]
 8010902:	f1b8 0f00 	cmp.w	r8, #0
 8010906:	dd9c      	ble.n	8010842 <__sflush_r+0x1a>
 8010908:	4643      	mov	r3, r8
 801090a:	463a      	mov	r2, r7
 801090c:	6a21      	ldr	r1, [r4, #32]
 801090e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010910:	4628      	mov	r0, r5
 8010912:	47b0      	blx	r6
 8010914:	2800      	cmp	r0, #0
 8010916:	dc06      	bgt.n	8010926 <__sflush_r+0xfe>
 8010918:	89a3      	ldrh	r3, [r4, #12]
 801091a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801091e:	81a3      	strh	r3, [r4, #12]
 8010920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010924:	e78e      	b.n	8010844 <__sflush_r+0x1c>
 8010926:	4407      	add	r7, r0
 8010928:	eba8 0800 	sub.w	r8, r8, r0
 801092c:	e7e9      	b.n	8010902 <__sflush_r+0xda>
 801092e:	bf00      	nop
 8010930:	20400001 	.word	0x20400001

08010934 <_fflush_r>:
 8010934:	b538      	push	{r3, r4, r5, lr}
 8010936:	690b      	ldr	r3, [r1, #16]
 8010938:	4605      	mov	r5, r0
 801093a:	460c      	mov	r4, r1
 801093c:	b1db      	cbz	r3, 8010976 <_fflush_r+0x42>
 801093e:	b118      	cbz	r0, 8010948 <_fflush_r+0x14>
 8010940:	6983      	ldr	r3, [r0, #24]
 8010942:	b90b      	cbnz	r3, 8010948 <_fflush_r+0x14>
 8010944:	f000 f860 	bl	8010a08 <__sinit>
 8010948:	4b0c      	ldr	r3, [pc, #48]	; (801097c <_fflush_r+0x48>)
 801094a:	429c      	cmp	r4, r3
 801094c:	d109      	bne.n	8010962 <_fflush_r+0x2e>
 801094e:	686c      	ldr	r4, [r5, #4]
 8010950:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010954:	b17b      	cbz	r3, 8010976 <_fflush_r+0x42>
 8010956:	4621      	mov	r1, r4
 8010958:	4628      	mov	r0, r5
 801095a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801095e:	f7ff bf63 	b.w	8010828 <__sflush_r>
 8010962:	4b07      	ldr	r3, [pc, #28]	; (8010980 <_fflush_r+0x4c>)
 8010964:	429c      	cmp	r4, r3
 8010966:	d101      	bne.n	801096c <_fflush_r+0x38>
 8010968:	68ac      	ldr	r4, [r5, #8]
 801096a:	e7f1      	b.n	8010950 <_fflush_r+0x1c>
 801096c:	4b05      	ldr	r3, [pc, #20]	; (8010984 <_fflush_r+0x50>)
 801096e:	429c      	cmp	r4, r3
 8010970:	bf08      	it	eq
 8010972:	68ec      	ldreq	r4, [r5, #12]
 8010974:	e7ec      	b.n	8010950 <_fflush_r+0x1c>
 8010976:	2000      	movs	r0, #0
 8010978:	bd38      	pop	{r3, r4, r5, pc}
 801097a:	bf00      	nop
 801097c:	08014070 	.word	0x08014070
 8010980:	08014090 	.word	0x08014090
 8010984:	08014050 	.word	0x08014050

08010988 <std>:
 8010988:	2300      	movs	r3, #0
 801098a:	b510      	push	{r4, lr}
 801098c:	4604      	mov	r4, r0
 801098e:	e9c0 3300 	strd	r3, r3, [r0]
 8010992:	6083      	str	r3, [r0, #8]
 8010994:	8181      	strh	r1, [r0, #12]
 8010996:	6643      	str	r3, [r0, #100]	; 0x64
 8010998:	81c2      	strh	r2, [r0, #14]
 801099a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801099e:	6183      	str	r3, [r0, #24]
 80109a0:	4619      	mov	r1, r3
 80109a2:	2208      	movs	r2, #8
 80109a4:	305c      	adds	r0, #92	; 0x5c
 80109a6:	f7fe fb2d 	bl	800f004 <memset>
 80109aa:	4b05      	ldr	r3, [pc, #20]	; (80109c0 <std+0x38>)
 80109ac:	6263      	str	r3, [r4, #36]	; 0x24
 80109ae:	4b05      	ldr	r3, [pc, #20]	; (80109c4 <std+0x3c>)
 80109b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80109b2:	4b05      	ldr	r3, [pc, #20]	; (80109c8 <std+0x40>)
 80109b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80109b6:	4b05      	ldr	r3, [pc, #20]	; (80109cc <std+0x44>)
 80109b8:	6224      	str	r4, [r4, #32]
 80109ba:	6323      	str	r3, [r4, #48]	; 0x30
 80109bc:	bd10      	pop	{r4, pc}
 80109be:	bf00      	nop
 80109c0:	0801160d 	.word	0x0801160d
 80109c4:	0801162f 	.word	0x0801162f
 80109c8:	08011667 	.word	0x08011667
 80109cc:	0801168b 	.word	0x0801168b

080109d0 <_cleanup_r>:
 80109d0:	4901      	ldr	r1, [pc, #4]	; (80109d8 <_cleanup_r+0x8>)
 80109d2:	f000 b885 	b.w	8010ae0 <_fwalk_reent>
 80109d6:	bf00      	nop
 80109d8:	08010935 	.word	0x08010935

080109dc <__sfmoreglue>:
 80109dc:	b570      	push	{r4, r5, r6, lr}
 80109de:	1e4a      	subs	r2, r1, #1
 80109e0:	2568      	movs	r5, #104	; 0x68
 80109e2:	4355      	muls	r5, r2
 80109e4:	460e      	mov	r6, r1
 80109e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80109ea:	f000 fc53 	bl	8011294 <_malloc_r>
 80109ee:	4604      	mov	r4, r0
 80109f0:	b140      	cbz	r0, 8010a04 <__sfmoreglue+0x28>
 80109f2:	2100      	movs	r1, #0
 80109f4:	e9c0 1600 	strd	r1, r6, [r0]
 80109f8:	300c      	adds	r0, #12
 80109fa:	60a0      	str	r0, [r4, #8]
 80109fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010a00:	f7fe fb00 	bl	800f004 <memset>
 8010a04:	4620      	mov	r0, r4
 8010a06:	bd70      	pop	{r4, r5, r6, pc}

08010a08 <__sinit>:
 8010a08:	6983      	ldr	r3, [r0, #24]
 8010a0a:	b510      	push	{r4, lr}
 8010a0c:	4604      	mov	r4, r0
 8010a0e:	bb33      	cbnz	r3, 8010a5e <__sinit+0x56>
 8010a10:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8010a14:	6503      	str	r3, [r0, #80]	; 0x50
 8010a16:	4b12      	ldr	r3, [pc, #72]	; (8010a60 <__sinit+0x58>)
 8010a18:	4a12      	ldr	r2, [pc, #72]	; (8010a64 <__sinit+0x5c>)
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	6282      	str	r2, [r0, #40]	; 0x28
 8010a1e:	4298      	cmp	r0, r3
 8010a20:	bf04      	itt	eq
 8010a22:	2301      	moveq	r3, #1
 8010a24:	6183      	streq	r3, [r0, #24]
 8010a26:	f000 f81f 	bl	8010a68 <__sfp>
 8010a2a:	6060      	str	r0, [r4, #4]
 8010a2c:	4620      	mov	r0, r4
 8010a2e:	f000 f81b 	bl	8010a68 <__sfp>
 8010a32:	60a0      	str	r0, [r4, #8]
 8010a34:	4620      	mov	r0, r4
 8010a36:	f000 f817 	bl	8010a68 <__sfp>
 8010a3a:	2200      	movs	r2, #0
 8010a3c:	60e0      	str	r0, [r4, #12]
 8010a3e:	2104      	movs	r1, #4
 8010a40:	6860      	ldr	r0, [r4, #4]
 8010a42:	f7ff ffa1 	bl	8010988 <std>
 8010a46:	2201      	movs	r2, #1
 8010a48:	2109      	movs	r1, #9
 8010a4a:	68a0      	ldr	r0, [r4, #8]
 8010a4c:	f7ff ff9c 	bl	8010988 <std>
 8010a50:	2202      	movs	r2, #2
 8010a52:	2112      	movs	r1, #18
 8010a54:	68e0      	ldr	r0, [r4, #12]
 8010a56:	f7ff ff97 	bl	8010988 <std>
 8010a5a:	2301      	movs	r3, #1
 8010a5c:	61a3      	str	r3, [r4, #24]
 8010a5e:	bd10      	pop	{r4, pc}
 8010a60:	0801400c 	.word	0x0801400c
 8010a64:	080109d1 	.word	0x080109d1

08010a68 <__sfp>:
 8010a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a6a:	4b1b      	ldr	r3, [pc, #108]	; (8010ad8 <__sfp+0x70>)
 8010a6c:	681e      	ldr	r6, [r3, #0]
 8010a6e:	69b3      	ldr	r3, [r6, #24]
 8010a70:	4607      	mov	r7, r0
 8010a72:	b913      	cbnz	r3, 8010a7a <__sfp+0x12>
 8010a74:	4630      	mov	r0, r6
 8010a76:	f7ff ffc7 	bl	8010a08 <__sinit>
 8010a7a:	3648      	adds	r6, #72	; 0x48
 8010a7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010a80:	3b01      	subs	r3, #1
 8010a82:	d503      	bpl.n	8010a8c <__sfp+0x24>
 8010a84:	6833      	ldr	r3, [r6, #0]
 8010a86:	b133      	cbz	r3, 8010a96 <__sfp+0x2e>
 8010a88:	6836      	ldr	r6, [r6, #0]
 8010a8a:	e7f7      	b.n	8010a7c <__sfp+0x14>
 8010a8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010a90:	b16d      	cbz	r5, 8010aae <__sfp+0x46>
 8010a92:	3468      	adds	r4, #104	; 0x68
 8010a94:	e7f4      	b.n	8010a80 <__sfp+0x18>
 8010a96:	2104      	movs	r1, #4
 8010a98:	4638      	mov	r0, r7
 8010a9a:	f7ff ff9f 	bl	80109dc <__sfmoreglue>
 8010a9e:	6030      	str	r0, [r6, #0]
 8010aa0:	2800      	cmp	r0, #0
 8010aa2:	d1f1      	bne.n	8010a88 <__sfp+0x20>
 8010aa4:	230c      	movs	r3, #12
 8010aa6:	603b      	str	r3, [r7, #0]
 8010aa8:	4604      	mov	r4, r0
 8010aaa:	4620      	mov	r0, r4
 8010aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010aae:	4b0b      	ldr	r3, [pc, #44]	; (8010adc <__sfp+0x74>)
 8010ab0:	6665      	str	r5, [r4, #100]	; 0x64
 8010ab2:	e9c4 5500 	strd	r5, r5, [r4]
 8010ab6:	60a5      	str	r5, [r4, #8]
 8010ab8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8010abc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8010ac0:	2208      	movs	r2, #8
 8010ac2:	4629      	mov	r1, r5
 8010ac4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010ac8:	f7fe fa9c 	bl	800f004 <memset>
 8010acc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010ad0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010ad4:	e7e9      	b.n	8010aaa <__sfp+0x42>
 8010ad6:	bf00      	nop
 8010ad8:	0801400c 	.word	0x0801400c
 8010adc:	ffff0001 	.word	0xffff0001

08010ae0 <_fwalk_reent>:
 8010ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ae4:	4680      	mov	r8, r0
 8010ae6:	4689      	mov	r9, r1
 8010ae8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010aec:	2600      	movs	r6, #0
 8010aee:	b914      	cbnz	r4, 8010af6 <_fwalk_reent+0x16>
 8010af0:	4630      	mov	r0, r6
 8010af2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010af6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8010afa:	3f01      	subs	r7, #1
 8010afc:	d501      	bpl.n	8010b02 <_fwalk_reent+0x22>
 8010afe:	6824      	ldr	r4, [r4, #0]
 8010b00:	e7f5      	b.n	8010aee <_fwalk_reent+0xe>
 8010b02:	89ab      	ldrh	r3, [r5, #12]
 8010b04:	2b01      	cmp	r3, #1
 8010b06:	d907      	bls.n	8010b18 <_fwalk_reent+0x38>
 8010b08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010b0c:	3301      	adds	r3, #1
 8010b0e:	d003      	beq.n	8010b18 <_fwalk_reent+0x38>
 8010b10:	4629      	mov	r1, r5
 8010b12:	4640      	mov	r0, r8
 8010b14:	47c8      	blx	r9
 8010b16:	4306      	orrs	r6, r0
 8010b18:	3568      	adds	r5, #104	; 0x68
 8010b1a:	e7ee      	b.n	8010afa <_fwalk_reent+0x1a>

08010b1c <_localeconv_r>:
 8010b1c:	4b04      	ldr	r3, [pc, #16]	; (8010b30 <_localeconv_r+0x14>)
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	6a18      	ldr	r0, [r3, #32]
 8010b22:	4b04      	ldr	r3, [pc, #16]	; (8010b34 <_localeconv_r+0x18>)
 8010b24:	2800      	cmp	r0, #0
 8010b26:	bf08      	it	eq
 8010b28:	4618      	moveq	r0, r3
 8010b2a:	30f0      	adds	r0, #240	; 0xf0
 8010b2c:	4770      	bx	lr
 8010b2e:	bf00      	nop
 8010b30:	20001cac 	.word	0x20001cac
 8010b34:	20001d10 	.word	0x20001d10

08010b38 <__swhatbuf_r>:
 8010b38:	b570      	push	{r4, r5, r6, lr}
 8010b3a:	460e      	mov	r6, r1
 8010b3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b40:	2900      	cmp	r1, #0
 8010b42:	b096      	sub	sp, #88	; 0x58
 8010b44:	4614      	mov	r4, r2
 8010b46:	461d      	mov	r5, r3
 8010b48:	da07      	bge.n	8010b5a <__swhatbuf_r+0x22>
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	602b      	str	r3, [r5, #0]
 8010b4e:	89b3      	ldrh	r3, [r6, #12]
 8010b50:	061a      	lsls	r2, r3, #24
 8010b52:	d410      	bmi.n	8010b76 <__swhatbuf_r+0x3e>
 8010b54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b58:	e00e      	b.n	8010b78 <__swhatbuf_r+0x40>
 8010b5a:	466a      	mov	r2, sp
 8010b5c:	f000 fdbc 	bl	80116d8 <_fstat_r>
 8010b60:	2800      	cmp	r0, #0
 8010b62:	dbf2      	blt.n	8010b4a <__swhatbuf_r+0x12>
 8010b64:	9a01      	ldr	r2, [sp, #4]
 8010b66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010b6a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010b6e:	425a      	negs	r2, r3
 8010b70:	415a      	adcs	r2, r3
 8010b72:	602a      	str	r2, [r5, #0]
 8010b74:	e7ee      	b.n	8010b54 <__swhatbuf_r+0x1c>
 8010b76:	2340      	movs	r3, #64	; 0x40
 8010b78:	2000      	movs	r0, #0
 8010b7a:	6023      	str	r3, [r4, #0]
 8010b7c:	b016      	add	sp, #88	; 0x58
 8010b7e:	bd70      	pop	{r4, r5, r6, pc}

08010b80 <__smakebuf_r>:
 8010b80:	898b      	ldrh	r3, [r1, #12]
 8010b82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010b84:	079d      	lsls	r5, r3, #30
 8010b86:	4606      	mov	r6, r0
 8010b88:	460c      	mov	r4, r1
 8010b8a:	d507      	bpl.n	8010b9c <__smakebuf_r+0x1c>
 8010b8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010b90:	6023      	str	r3, [r4, #0]
 8010b92:	6123      	str	r3, [r4, #16]
 8010b94:	2301      	movs	r3, #1
 8010b96:	6163      	str	r3, [r4, #20]
 8010b98:	b002      	add	sp, #8
 8010b9a:	bd70      	pop	{r4, r5, r6, pc}
 8010b9c:	ab01      	add	r3, sp, #4
 8010b9e:	466a      	mov	r2, sp
 8010ba0:	f7ff ffca 	bl	8010b38 <__swhatbuf_r>
 8010ba4:	9900      	ldr	r1, [sp, #0]
 8010ba6:	4605      	mov	r5, r0
 8010ba8:	4630      	mov	r0, r6
 8010baa:	f000 fb73 	bl	8011294 <_malloc_r>
 8010bae:	b948      	cbnz	r0, 8010bc4 <__smakebuf_r+0x44>
 8010bb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010bb4:	059a      	lsls	r2, r3, #22
 8010bb6:	d4ef      	bmi.n	8010b98 <__smakebuf_r+0x18>
 8010bb8:	f023 0303 	bic.w	r3, r3, #3
 8010bbc:	f043 0302 	orr.w	r3, r3, #2
 8010bc0:	81a3      	strh	r3, [r4, #12]
 8010bc2:	e7e3      	b.n	8010b8c <__smakebuf_r+0xc>
 8010bc4:	4b0d      	ldr	r3, [pc, #52]	; (8010bfc <__smakebuf_r+0x7c>)
 8010bc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8010bc8:	89a3      	ldrh	r3, [r4, #12]
 8010bca:	6020      	str	r0, [r4, #0]
 8010bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010bd0:	81a3      	strh	r3, [r4, #12]
 8010bd2:	9b00      	ldr	r3, [sp, #0]
 8010bd4:	6163      	str	r3, [r4, #20]
 8010bd6:	9b01      	ldr	r3, [sp, #4]
 8010bd8:	6120      	str	r0, [r4, #16]
 8010bda:	b15b      	cbz	r3, 8010bf4 <__smakebuf_r+0x74>
 8010bdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010be0:	4630      	mov	r0, r6
 8010be2:	f000 fd8b 	bl	80116fc <_isatty_r>
 8010be6:	b128      	cbz	r0, 8010bf4 <__smakebuf_r+0x74>
 8010be8:	89a3      	ldrh	r3, [r4, #12]
 8010bea:	f023 0303 	bic.w	r3, r3, #3
 8010bee:	f043 0301 	orr.w	r3, r3, #1
 8010bf2:	81a3      	strh	r3, [r4, #12]
 8010bf4:	89a3      	ldrh	r3, [r4, #12]
 8010bf6:	431d      	orrs	r5, r3
 8010bf8:	81a5      	strh	r5, [r4, #12]
 8010bfa:	e7cd      	b.n	8010b98 <__smakebuf_r+0x18>
 8010bfc:	080109d1 	.word	0x080109d1

08010c00 <malloc>:
 8010c00:	4b02      	ldr	r3, [pc, #8]	; (8010c0c <malloc+0xc>)
 8010c02:	4601      	mov	r1, r0
 8010c04:	6818      	ldr	r0, [r3, #0]
 8010c06:	f000 bb45 	b.w	8011294 <_malloc_r>
 8010c0a:	bf00      	nop
 8010c0c:	20001cac 	.word	0x20001cac

08010c10 <memcpy>:
 8010c10:	b510      	push	{r4, lr}
 8010c12:	1e43      	subs	r3, r0, #1
 8010c14:	440a      	add	r2, r1
 8010c16:	4291      	cmp	r1, r2
 8010c18:	d100      	bne.n	8010c1c <memcpy+0xc>
 8010c1a:	bd10      	pop	{r4, pc}
 8010c1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010c20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010c24:	e7f7      	b.n	8010c16 <memcpy+0x6>

08010c26 <_Balloc>:
 8010c26:	b570      	push	{r4, r5, r6, lr}
 8010c28:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010c2a:	4604      	mov	r4, r0
 8010c2c:	460e      	mov	r6, r1
 8010c2e:	b93d      	cbnz	r5, 8010c40 <_Balloc+0x1a>
 8010c30:	2010      	movs	r0, #16
 8010c32:	f7ff ffe5 	bl	8010c00 <malloc>
 8010c36:	6260      	str	r0, [r4, #36]	; 0x24
 8010c38:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010c3c:	6005      	str	r5, [r0, #0]
 8010c3e:	60c5      	str	r5, [r0, #12]
 8010c40:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8010c42:	68eb      	ldr	r3, [r5, #12]
 8010c44:	b183      	cbz	r3, 8010c68 <_Balloc+0x42>
 8010c46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010c48:	68db      	ldr	r3, [r3, #12]
 8010c4a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8010c4e:	b9b8      	cbnz	r0, 8010c80 <_Balloc+0x5a>
 8010c50:	2101      	movs	r1, #1
 8010c52:	fa01 f506 	lsl.w	r5, r1, r6
 8010c56:	1d6a      	adds	r2, r5, #5
 8010c58:	0092      	lsls	r2, r2, #2
 8010c5a:	4620      	mov	r0, r4
 8010c5c:	f000 fabe 	bl	80111dc <_calloc_r>
 8010c60:	b160      	cbz	r0, 8010c7c <_Balloc+0x56>
 8010c62:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8010c66:	e00e      	b.n	8010c86 <_Balloc+0x60>
 8010c68:	2221      	movs	r2, #33	; 0x21
 8010c6a:	2104      	movs	r1, #4
 8010c6c:	4620      	mov	r0, r4
 8010c6e:	f000 fab5 	bl	80111dc <_calloc_r>
 8010c72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010c74:	60e8      	str	r0, [r5, #12]
 8010c76:	68db      	ldr	r3, [r3, #12]
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d1e4      	bne.n	8010c46 <_Balloc+0x20>
 8010c7c:	2000      	movs	r0, #0
 8010c7e:	bd70      	pop	{r4, r5, r6, pc}
 8010c80:	6802      	ldr	r2, [r0, #0]
 8010c82:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8010c86:	2300      	movs	r3, #0
 8010c88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010c8c:	e7f7      	b.n	8010c7e <_Balloc+0x58>

08010c8e <_Bfree>:
 8010c8e:	b570      	push	{r4, r5, r6, lr}
 8010c90:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8010c92:	4606      	mov	r6, r0
 8010c94:	460d      	mov	r5, r1
 8010c96:	b93c      	cbnz	r4, 8010ca8 <_Bfree+0x1a>
 8010c98:	2010      	movs	r0, #16
 8010c9a:	f7ff ffb1 	bl	8010c00 <malloc>
 8010c9e:	6270      	str	r0, [r6, #36]	; 0x24
 8010ca0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010ca4:	6004      	str	r4, [r0, #0]
 8010ca6:	60c4      	str	r4, [r0, #12]
 8010ca8:	b13d      	cbz	r5, 8010cba <_Bfree+0x2c>
 8010caa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010cac:	686a      	ldr	r2, [r5, #4]
 8010cae:	68db      	ldr	r3, [r3, #12]
 8010cb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010cb4:	6029      	str	r1, [r5, #0]
 8010cb6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8010cba:	bd70      	pop	{r4, r5, r6, pc}

08010cbc <__multadd>:
 8010cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cc0:	690d      	ldr	r5, [r1, #16]
 8010cc2:	461f      	mov	r7, r3
 8010cc4:	4606      	mov	r6, r0
 8010cc6:	460c      	mov	r4, r1
 8010cc8:	f101 0c14 	add.w	ip, r1, #20
 8010ccc:	2300      	movs	r3, #0
 8010cce:	f8dc 0000 	ldr.w	r0, [ip]
 8010cd2:	b281      	uxth	r1, r0
 8010cd4:	fb02 7101 	mla	r1, r2, r1, r7
 8010cd8:	0c0f      	lsrs	r7, r1, #16
 8010cda:	0c00      	lsrs	r0, r0, #16
 8010cdc:	fb02 7000 	mla	r0, r2, r0, r7
 8010ce0:	b289      	uxth	r1, r1
 8010ce2:	3301      	adds	r3, #1
 8010ce4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8010ce8:	429d      	cmp	r5, r3
 8010cea:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8010cee:	f84c 1b04 	str.w	r1, [ip], #4
 8010cf2:	dcec      	bgt.n	8010cce <__multadd+0x12>
 8010cf4:	b1d7      	cbz	r7, 8010d2c <__multadd+0x70>
 8010cf6:	68a3      	ldr	r3, [r4, #8]
 8010cf8:	42ab      	cmp	r3, r5
 8010cfa:	dc12      	bgt.n	8010d22 <__multadd+0x66>
 8010cfc:	6861      	ldr	r1, [r4, #4]
 8010cfe:	4630      	mov	r0, r6
 8010d00:	3101      	adds	r1, #1
 8010d02:	f7ff ff90 	bl	8010c26 <_Balloc>
 8010d06:	6922      	ldr	r2, [r4, #16]
 8010d08:	3202      	adds	r2, #2
 8010d0a:	f104 010c 	add.w	r1, r4, #12
 8010d0e:	4680      	mov	r8, r0
 8010d10:	0092      	lsls	r2, r2, #2
 8010d12:	300c      	adds	r0, #12
 8010d14:	f7ff ff7c 	bl	8010c10 <memcpy>
 8010d18:	4621      	mov	r1, r4
 8010d1a:	4630      	mov	r0, r6
 8010d1c:	f7ff ffb7 	bl	8010c8e <_Bfree>
 8010d20:	4644      	mov	r4, r8
 8010d22:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010d26:	3501      	adds	r5, #1
 8010d28:	615f      	str	r7, [r3, #20]
 8010d2a:	6125      	str	r5, [r4, #16]
 8010d2c:	4620      	mov	r0, r4
 8010d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010d32 <__hi0bits>:
 8010d32:	0c02      	lsrs	r2, r0, #16
 8010d34:	0412      	lsls	r2, r2, #16
 8010d36:	4603      	mov	r3, r0
 8010d38:	b9b2      	cbnz	r2, 8010d68 <__hi0bits+0x36>
 8010d3a:	0403      	lsls	r3, r0, #16
 8010d3c:	2010      	movs	r0, #16
 8010d3e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8010d42:	bf04      	itt	eq
 8010d44:	021b      	lsleq	r3, r3, #8
 8010d46:	3008      	addeq	r0, #8
 8010d48:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8010d4c:	bf04      	itt	eq
 8010d4e:	011b      	lsleq	r3, r3, #4
 8010d50:	3004      	addeq	r0, #4
 8010d52:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8010d56:	bf04      	itt	eq
 8010d58:	009b      	lsleq	r3, r3, #2
 8010d5a:	3002      	addeq	r0, #2
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	db06      	blt.n	8010d6e <__hi0bits+0x3c>
 8010d60:	005b      	lsls	r3, r3, #1
 8010d62:	d503      	bpl.n	8010d6c <__hi0bits+0x3a>
 8010d64:	3001      	adds	r0, #1
 8010d66:	4770      	bx	lr
 8010d68:	2000      	movs	r0, #0
 8010d6a:	e7e8      	b.n	8010d3e <__hi0bits+0xc>
 8010d6c:	2020      	movs	r0, #32
 8010d6e:	4770      	bx	lr

08010d70 <__lo0bits>:
 8010d70:	6803      	ldr	r3, [r0, #0]
 8010d72:	f013 0207 	ands.w	r2, r3, #7
 8010d76:	4601      	mov	r1, r0
 8010d78:	d00b      	beq.n	8010d92 <__lo0bits+0x22>
 8010d7a:	07da      	lsls	r2, r3, #31
 8010d7c:	d423      	bmi.n	8010dc6 <__lo0bits+0x56>
 8010d7e:	0798      	lsls	r0, r3, #30
 8010d80:	bf49      	itett	mi
 8010d82:	085b      	lsrmi	r3, r3, #1
 8010d84:	089b      	lsrpl	r3, r3, #2
 8010d86:	2001      	movmi	r0, #1
 8010d88:	600b      	strmi	r3, [r1, #0]
 8010d8a:	bf5c      	itt	pl
 8010d8c:	600b      	strpl	r3, [r1, #0]
 8010d8e:	2002      	movpl	r0, #2
 8010d90:	4770      	bx	lr
 8010d92:	b298      	uxth	r0, r3
 8010d94:	b9a8      	cbnz	r0, 8010dc2 <__lo0bits+0x52>
 8010d96:	0c1b      	lsrs	r3, r3, #16
 8010d98:	2010      	movs	r0, #16
 8010d9a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010d9e:	bf04      	itt	eq
 8010da0:	0a1b      	lsreq	r3, r3, #8
 8010da2:	3008      	addeq	r0, #8
 8010da4:	071a      	lsls	r2, r3, #28
 8010da6:	bf04      	itt	eq
 8010da8:	091b      	lsreq	r3, r3, #4
 8010daa:	3004      	addeq	r0, #4
 8010dac:	079a      	lsls	r2, r3, #30
 8010dae:	bf04      	itt	eq
 8010db0:	089b      	lsreq	r3, r3, #2
 8010db2:	3002      	addeq	r0, #2
 8010db4:	07da      	lsls	r2, r3, #31
 8010db6:	d402      	bmi.n	8010dbe <__lo0bits+0x4e>
 8010db8:	085b      	lsrs	r3, r3, #1
 8010dba:	d006      	beq.n	8010dca <__lo0bits+0x5a>
 8010dbc:	3001      	adds	r0, #1
 8010dbe:	600b      	str	r3, [r1, #0]
 8010dc0:	4770      	bx	lr
 8010dc2:	4610      	mov	r0, r2
 8010dc4:	e7e9      	b.n	8010d9a <__lo0bits+0x2a>
 8010dc6:	2000      	movs	r0, #0
 8010dc8:	4770      	bx	lr
 8010dca:	2020      	movs	r0, #32
 8010dcc:	4770      	bx	lr

08010dce <__i2b>:
 8010dce:	b510      	push	{r4, lr}
 8010dd0:	460c      	mov	r4, r1
 8010dd2:	2101      	movs	r1, #1
 8010dd4:	f7ff ff27 	bl	8010c26 <_Balloc>
 8010dd8:	2201      	movs	r2, #1
 8010dda:	6144      	str	r4, [r0, #20]
 8010ddc:	6102      	str	r2, [r0, #16]
 8010dde:	bd10      	pop	{r4, pc}

08010de0 <__multiply>:
 8010de0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010de4:	4614      	mov	r4, r2
 8010de6:	690a      	ldr	r2, [r1, #16]
 8010de8:	6923      	ldr	r3, [r4, #16]
 8010dea:	429a      	cmp	r2, r3
 8010dec:	bfb8      	it	lt
 8010dee:	460b      	movlt	r3, r1
 8010df0:	4688      	mov	r8, r1
 8010df2:	bfbc      	itt	lt
 8010df4:	46a0      	movlt	r8, r4
 8010df6:	461c      	movlt	r4, r3
 8010df8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010dfc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010e00:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010e04:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010e08:	eb07 0609 	add.w	r6, r7, r9
 8010e0c:	42b3      	cmp	r3, r6
 8010e0e:	bfb8      	it	lt
 8010e10:	3101      	addlt	r1, #1
 8010e12:	f7ff ff08 	bl	8010c26 <_Balloc>
 8010e16:	f100 0514 	add.w	r5, r0, #20
 8010e1a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8010e1e:	462b      	mov	r3, r5
 8010e20:	2200      	movs	r2, #0
 8010e22:	4573      	cmp	r3, lr
 8010e24:	d316      	bcc.n	8010e54 <__multiply+0x74>
 8010e26:	f104 0214 	add.w	r2, r4, #20
 8010e2a:	f108 0114 	add.w	r1, r8, #20
 8010e2e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8010e32:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8010e36:	9300      	str	r3, [sp, #0]
 8010e38:	9b00      	ldr	r3, [sp, #0]
 8010e3a:	9201      	str	r2, [sp, #4]
 8010e3c:	4293      	cmp	r3, r2
 8010e3e:	d80c      	bhi.n	8010e5a <__multiply+0x7a>
 8010e40:	2e00      	cmp	r6, #0
 8010e42:	dd03      	ble.n	8010e4c <__multiply+0x6c>
 8010e44:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d05d      	beq.n	8010f08 <__multiply+0x128>
 8010e4c:	6106      	str	r6, [r0, #16]
 8010e4e:	b003      	add	sp, #12
 8010e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e54:	f843 2b04 	str.w	r2, [r3], #4
 8010e58:	e7e3      	b.n	8010e22 <__multiply+0x42>
 8010e5a:	f8b2 b000 	ldrh.w	fp, [r2]
 8010e5e:	f1bb 0f00 	cmp.w	fp, #0
 8010e62:	d023      	beq.n	8010eac <__multiply+0xcc>
 8010e64:	4689      	mov	r9, r1
 8010e66:	46ac      	mov	ip, r5
 8010e68:	f04f 0800 	mov.w	r8, #0
 8010e6c:	f859 4b04 	ldr.w	r4, [r9], #4
 8010e70:	f8dc a000 	ldr.w	sl, [ip]
 8010e74:	b2a3      	uxth	r3, r4
 8010e76:	fa1f fa8a 	uxth.w	sl, sl
 8010e7a:	fb0b a303 	mla	r3, fp, r3, sl
 8010e7e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010e82:	f8dc 4000 	ldr.w	r4, [ip]
 8010e86:	4443      	add	r3, r8
 8010e88:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8010e8c:	fb0b 840a 	mla	r4, fp, sl, r8
 8010e90:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8010e94:	46e2      	mov	sl, ip
 8010e96:	b29b      	uxth	r3, r3
 8010e98:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010e9c:	454f      	cmp	r7, r9
 8010e9e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8010ea2:	f84a 3b04 	str.w	r3, [sl], #4
 8010ea6:	d82b      	bhi.n	8010f00 <__multiply+0x120>
 8010ea8:	f8cc 8004 	str.w	r8, [ip, #4]
 8010eac:	9b01      	ldr	r3, [sp, #4]
 8010eae:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8010eb2:	3204      	adds	r2, #4
 8010eb4:	f1ba 0f00 	cmp.w	sl, #0
 8010eb8:	d020      	beq.n	8010efc <__multiply+0x11c>
 8010eba:	682b      	ldr	r3, [r5, #0]
 8010ebc:	4689      	mov	r9, r1
 8010ebe:	46a8      	mov	r8, r5
 8010ec0:	f04f 0b00 	mov.w	fp, #0
 8010ec4:	f8b9 c000 	ldrh.w	ip, [r9]
 8010ec8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8010ecc:	fb0a 440c 	mla	r4, sl, ip, r4
 8010ed0:	445c      	add	r4, fp
 8010ed2:	46c4      	mov	ip, r8
 8010ed4:	b29b      	uxth	r3, r3
 8010ed6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010eda:	f84c 3b04 	str.w	r3, [ip], #4
 8010ede:	f859 3b04 	ldr.w	r3, [r9], #4
 8010ee2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8010ee6:	0c1b      	lsrs	r3, r3, #16
 8010ee8:	fb0a b303 	mla	r3, sl, r3, fp
 8010eec:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8010ef0:	454f      	cmp	r7, r9
 8010ef2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8010ef6:	d805      	bhi.n	8010f04 <__multiply+0x124>
 8010ef8:	f8c8 3004 	str.w	r3, [r8, #4]
 8010efc:	3504      	adds	r5, #4
 8010efe:	e79b      	b.n	8010e38 <__multiply+0x58>
 8010f00:	46d4      	mov	ip, sl
 8010f02:	e7b3      	b.n	8010e6c <__multiply+0x8c>
 8010f04:	46e0      	mov	r8, ip
 8010f06:	e7dd      	b.n	8010ec4 <__multiply+0xe4>
 8010f08:	3e01      	subs	r6, #1
 8010f0a:	e799      	b.n	8010e40 <__multiply+0x60>

08010f0c <__pow5mult>:
 8010f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f10:	4615      	mov	r5, r2
 8010f12:	f012 0203 	ands.w	r2, r2, #3
 8010f16:	4606      	mov	r6, r0
 8010f18:	460f      	mov	r7, r1
 8010f1a:	d007      	beq.n	8010f2c <__pow5mult+0x20>
 8010f1c:	3a01      	subs	r2, #1
 8010f1e:	4c21      	ldr	r4, [pc, #132]	; (8010fa4 <__pow5mult+0x98>)
 8010f20:	2300      	movs	r3, #0
 8010f22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010f26:	f7ff fec9 	bl	8010cbc <__multadd>
 8010f2a:	4607      	mov	r7, r0
 8010f2c:	10ad      	asrs	r5, r5, #2
 8010f2e:	d035      	beq.n	8010f9c <__pow5mult+0x90>
 8010f30:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010f32:	b93c      	cbnz	r4, 8010f44 <__pow5mult+0x38>
 8010f34:	2010      	movs	r0, #16
 8010f36:	f7ff fe63 	bl	8010c00 <malloc>
 8010f3a:	6270      	str	r0, [r6, #36]	; 0x24
 8010f3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010f40:	6004      	str	r4, [r0, #0]
 8010f42:	60c4      	str	r4, [r0, #12]
 8010f44:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010f48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010f4c:	b94c      	cbnz	r4, 8010f62 <__pow5mult+0x56>
 8010f4e:	f240 2171 	movw	r1, #625	; 0x271
 8010f52:	4630      	mov	r0, r6
 8010f54:	f7ff ff3b 	bl	8010dce <__i2b>
 8010f58:	2300      	movs	r3, #0
 8010f5a:	f8c8 0008 	str.w	r0, [r8, #8]
 8010f5e:	4604      	mov	r4, r0
 8010f60:	6003      	str	r3, [r0, #0]
 8010f62:	f04f 0800 	mov.w	r8, #0
 8010f66:	07eb      	lsls	r3, r5, #31
 8010f68:	d50a      	bpl.n	8010f80 <__pow5mult+0x74>
 8010f6a:	4639      	mov	r1, r7
 8010f6c:	4622      	mov	r2, r4
 8010f6e:	4630      	mov	r0, r6
 8010f70:	f7ff ff36 	bl	8010de0 <__multiply>
 8010f74:	4639      	mov	r1, r7
 8010f76:	4681      	mov	r9, r0
 8010f78:	4630      	mov	r0, r6
 8010f7a:	f7ff fe88 	bl	8010c8e <_Bfree>
 8010f7e:	464f      	mov	r7, r9
 8010f80:	106d      	asrs	r5, r5, #1
 8010f82:	d00b      	beq.n	8010f9c <__pow5mult+0x90>
 8010f84:	6820      	ldr	r0, [r4, #0]
 8010f86:	b938      	cbnz	r0, 8010f98 <__pow5mult+0x8c>
 8010f88:	4622      	mov	r2, r4
 8010f8a:	4621      	mov	r1, r4
 8010f8c:	4630      	mov	r0, r6
 8010f8e:	f7ff ff27 	bl	8010de0 <__multiply>
 8010f92:	6020      	str	r0, [r4, #0]
 8010f94:	f8c0 8000 	str.w	r8, [r0]
 8010f98:	4604      	mov	r4, r0
 8010f9a:	e7e4      	b.n	8010f66 <__pow5mult+0x5a>
 8010f9c:	4638      	mov	r0, r7
 8010f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010fa2:	bf00      	nop
 8010fa4:	080141a0 	.word	0x080141a0

08010fa8 <__lshift>:
 8010fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010fac:	460c      	mov	r4, r1
 8010fae:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010fb2:	6923      	ldr	r3, [r4, #16]
 8010fb4:	6849      	ldr	r1, [r1, #4]
 8010fb6:	eb0a 0903 	add.w	r9, sl, r3
 8010fba:	68a3      	ldr	r3, [r4, #8]
 8010fbc:	4607      	mov	r7, r0
 8010fbe:	4616      	mov	r6, r2
 8010fc0:	f109 0501 	add.w	r5, r9, #1
 8010fc4:	42ab      	cmp	r3, r5
 8010fc6:	db32      	blt.n	801102e <__lshift+0x86>
 8010fc8:	4638      	mov	r0, r7
 8010fca:	f7ff fe2c 	bl	8010c26 <_Balloc>
 8010fce:	2300      	movs	r3, #0
 8010fd0:	4680      	mov	r8, r0
 8010fd2:	f100 0114 	add.w	r1, r0, #20
 8010fd6:	461a      	mov	r2, r3
 8010fd8:	4553      	cmp	r3, sl
 8010fda:	db2b      	blt.n	8011034 <__lshift+0x8c>
 8010fdc:	6920      	ldr	r0, [r4, #16]
 8010fde:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010fe2:	f104 0314 	add.w	r3, r4, #20
 8010fe6:	f016 021f 	ands.w	r2, r6, #31
 8010fea:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010fee:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010ff2:	d025      	beq.n	8011040 <__lshift+0x98>
 8010ff4:	f1c2 0e20 	rsb	lr, r2, #32
 8010ff8:	2000      	movs	r0, #0
 8010ffa:	681e      	ldr	r6, [r3, #0]
 8010ffc:	468a      	mov	sl, r1
 8010ffe:	4096      	lsls	r6, r2
 8011000:	4330      	orrs	r0, r6
 8011002:	f84a 0b04 	str.w	r0, [sl], #4
 8011006:	f853 0b04 	ldr.w	r0, [r3], #4
 801100a:	459c      	cmp	ip, r3
 801100c:	fa20 f00e 	lsr.w	r0, r0, lr
 8011010:	d814      	bhi.n	801103c <__lshift+0x94>
 8011012:	6048      	str	r0, [r1, #4]
 8011014:	b108      	cbz	r0, 801101a <__lshift+0x72>
 8011016:	f109 0502 	add.w	r5, r9, #2
 801101a:	3d01      	subs	r5, #1
 801101c:	4638      	mov	r0, r7
 801101e:	f8c8 5010 	str.w	r5, [r8, #16]
 8011022:	4621      	mov	r1, r4
 8011024:	f7ff fe33 	bl	8010c8e <_Bfree>
 8011028:	4640      	mov	r0, r8
 801102a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801102e:	3101      	adds	r1, #1
 8011030:	005b      	lsls	r3, r3, #1
 8011032:	e7c7      	b.n	8010fc4 <__lshift+0x1c>
 8011034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8011038:	3301      	adds	r3, #1
 801103a:	e7cd      	b.n	8010fd8 <__lshift+0x30>
 801103c:	4651      	mov	r1, sl
 801103e:	e7dc      	b.n	8010ffa <__lshift+0x52>
 8011040:	3904      	subs	r1, #4
 8011042:	f853 2b04 	ldr.w	r2, [r3], #4
 8011046:	f841 2f04 	str.w	r2, [r1, #4]!
 801104a:	459c      	cmp	ip, r3
 801104c:	d8f9      	bhi.n	8011042 <__lshift+0x9a>
 801104e:	e7e4      	b.n	801101a <__lshift+0x72>

08011050 <__mcmp>:
 8011050:	6903      	ldr	r3, [r0, #16]
 8011052:	690a      	ldr	r2, [r1, #16]
 8011054:	1a9b      	subs	r3, r3, r2
 8011056:	b530      	push	{r4, r5, lr}
 8011058:	d10c      	bne.n	8011074 <__mcmp+0x24>
 801105a:	0092      	lsls	r2, r2, #2
 801105c:	3014      	adds	r0, #20
 801105e:	3114      	adds	r1, #20
 8011060:	1884      	adds	r4, r0, r2
 8011062:	4411      	add	r1, r2
 8011064:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011068:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801106c:	4295      	cmp	r5, r2
 801106e:	d003      	beq.n	8011078 <__mcmp+0x28>
 8011070:	d305      	bcc.n	801107e <__mcmp+0x2e>
 8011072:	2301      	movs	r3, #1
 8011074:	4618      	mov	r0, r3
 8011076:	bd30      	pop	{r4, r5, pc}
 8011078:	42a0      	cmp	r0, r4
 801107a:	d3f3      	bcc.n	8011064 <__mcmp+0x14>
 801107c:	e7fa      	b.n	8011074 <__mcmp+0x24>
 801107e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011082:	e7f7      	b.n	8011074 <__mcmp+0x24>

08011084 <__mdiff>:
 8011084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011088:	460d      	mov	r5, r1
 801108a:	4607      	mov	r7, r0
 801108c:	4611      	mov	r1, r2
 801108e:	4628      	mov	r0, r5
 8011090:	4614      	mov	r4, r2
 8011092:	f7ff ffdd 	bl	8011050 <__mcmp>
 8011096:	1e06      	subs	r6, r0, #0
 8011098:	d108      	bne.n	80110ac <__mdiff+0x28>
 801109a:	4631      	mov	r1, r6
 801109c:	4638      	mov	r0, r7
 801109e:	f7ff fdc2 	bl	8010c26 <_Balloc>
 80110a2:	2301      	movs	r3, #1
 80110a4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80110a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110ac:	bfa4      	itt	ge
 80110ae:	4623      	movge	r3, r4
 80110b0:	462c      	movge	r4, r5
 80110b2:	4638      	mov	r0, r7
 80110b4:	6861      	ldr	r1, [r4, #4]
 80110b6:	bfa6      	itte	ge
 80110b8:	461d      	movge	r5, r3
 80110ba:	2600      	movge	r6, #0
 80110bc:	2601      	movlt	r6, #1
 80110be:	f7ff fdb2 	bl	8010c26 <_Balloc>
 80110c2:	692b      	ldr	r3, [r5, #16]
 80110c4:	60c6      	str	r6, [r0, #12]
 80110c6:	6926      	ldr	r6, [r4, #16]
 80110c8:	f105 0914 	add.w	r9, r5, #20
 80110cc:	f104 0214 	add.w	r2, r4, #20
 80110d0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80110d4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80110d8:	f100 0514 	add.w	r5, r0, #20
 80110dc:	f04f 0e00 	mov.w	lr, #0
 80110e0:	f852 ab04 	ldr.w	sl, [r2], #4
 80110e4:	f859 4b04 	ldr.w	r4, [r9], #4
 80110e8:	fa1e f18a 	uxtah	r1, lr, sl
 80110ec:	b2a3      	uxth	r3, r4
 80110ee:	1ac9      	subs	r1, r1, r3
 80110f0:	0c23      	lsrs	r3, r4, #16
 80110f2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80110f6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80110fa:	b289      	uxth	r1, r1
 80110fc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8011100:	45c8      	cmp	r8, r9
 8011102:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8011106:	4694      	mov	ip, r2
 8011108:	f845 3b04 	str.w	r3, [r5], #4
 801110c:	d8e8      	bhi.n	80110e0 <__mdiff+0x5c>
 801110e:	45bc      	cmp	ip, r7
 8011110:	d304      	bcc.n	801111c <__mdiff+0x98>
 8011112:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8011116:	b183      	cbz	r3, 801113a <__mdiff+0xb6>
 8011118:	6106      	str	r6, [r0, #16]
 801111a:	e7c5      	b.n	80110a8 <__mdiff+0x24>
 801111c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011120:	fa1e f381 	uxtah	r3, lr, r1
 8011124:	141a      	asrs	r2, r3, #16
 8011126:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801112a:	b29b      	uxth	r3, r3
 801112c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011130:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8011134:	f845 3b04 	str.w	r3, [r5], #4
 8011138:	e7e9      	b.n	801110e <__mdiff+0x8a>
 801113a:	3e01      	subs	r6, #1
 801113c:	e7e9      	b.n	8011112 <__mdiff+0x8e>

0801113e <__d2b>:
 801113e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011142:	460e      	mov	r6, r1
 8011144:	2101      	movs	r1, #1
 8011146:	ec59 8b10 	vmov	r8, r9, d0
 801114a:	4615      	mov	r5, r2
 801114c:	f7ff fd6b 	bl	8010c26 <_Balloc>
 8011150:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8011154:	4607      	mov	r7, r0
 8011156:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801115a:	bb34      	cbnz	r4, 80111aa <__d2b+0x6c>
 801115c:	9301      	str	r3, [sp, #4]
 801115e:	f1b8 0300 	subs.w	r3, r8, #0
 8011162:	d027      	beq.n	80111b4 <__d2b+0x76>
 8011164:	a802      	add	r0, sp, #8
 8011166:	f840 3d08 	str.w	r3, [r0, #-8]!
 801116a:	f7ff fe01 	bl	8010d70 <__lo0bits>
 801116e:	9900      	ldr	r1, [sp, #0]
 8011170:	b1f0      	cbz	r0, 80111b0 <__d2b+0x72>
 8011172:	9a01      	ldr	r2, [sp, #4]
 8011174:	f1c0 0320 	rsb	r3, r0, #32
 8011178:	fa02 f303 	lsl.w	r3, r2, r3
 801117c:	430b      	orrs	r3, r1
 801117e:	40c2      	lsrs	r2, r0
 8011180:	617b      	str	r3, [r7, #20]
 8011182:	9201      	str	r2, [sp, #4]
 8011184:	9b01      	ldr	r3, [sp, #4]
 8011186:	61bb      	str	r3, [r7, #24]
 8011188:	2b00      	cmp	r3, #0
 801118a:	bf14      	ite	ne
 801118c:	2102      	movne	r1, #2
 801118e:	2101      	moveq	r1, #1
 8011190:	6139      	str	r1, [r7, #16]
 8011192:	b1c4      	cbz	r4, 80111c6 <__d2b+0x88>
 8011194:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8011198:	4404      	add	r4, r0
 801119a:	6034      	str	r4, [r6, #0]
 801119c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80111a0:	6028      	str	r0, [r5, #0]
 80111a2:	4638      	mov	r0, r7
 80111a4:	b003      	add	sp, #12
 80111a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80111aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80111ae:	e7d5      	b.n	801115c <__d2b+0x1e>
 80111b0:	6179      	str	r1, [r7, #20]
 80111b2:	e7e7      	b.n	8011184 <__d2b+0x46>
 80111b4:	a801      	add	r0, sp, #4
 80111b6:	f7ff fddb 	bl	8010d70 <__lo0bits>
 80111ba:	9b01      	ldr	r3, [sp, #4]
 80111bc:	617b      	str	r3, [r7, #20]
 80111be:	2101      	movs	r1, #1
 80111c0:	6139      	str	r1, [r7, #16]
 80111c2:	3020      	adds	r0, #32
 80111c4:	e7e5      	b.n	8011192 <__d2b+0x54>
 80111c6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80111ca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80111ce:	6030      	str	r0, [r6, #0]
 80111d0:	6918      	ldr	r0, [r3, #16]
 80111d2:	f7ff fdae 	bl	8010d32 <__hi0bits>
 80111d6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80111da:	e7e1      	b.n	80111a0 <__d2b+0x62>

080111dc <_calloc_r>:
 80111dc:	b538      	push	{r3, r4, r5, lr}
 80111de:	fb02 f401 	mul.w	r4, r2, r1
 80111e2:	4621      	mov	r1, r4
 80111e4:	f000 f856 	bl	8011294 <_malloc_r>
 80111e8:	4605      	mov	r5, r0
 80111ea:	b118      	cbz	r0, 80111f4 <_calloc_r+0x18>
 80111ec:	4622      	mov	r2, r4
 80111ee:	2100      	movs	r1, #0
 80111f0:	f7fd ff08 	bl	800f004 <memset>
 80111f4:	4628      	mov	r0, r5
 80111f6:	bd38      	pop	{r3, r4, r5, pc}

080111f8 <_free_r>:
 80111f8:	b538      	push	{r3, r4, r5, lr}
 80111fa:	4605      	mov	r5, r0
 80111fc:	2900      	cmp	r1, #0
 80111fe:	d045      	beq.n	801128c <_free_r+0x94>
 8011200:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011204:	1f0c      	subs	r4, r1, #4
 8011206:	2b00      	cmp	r3, #0
 8011208:	bfb8      	it	lt
 801120a:	18e4      	addlt	r4, r4, r3
 801120c:	f000 fac3 	bl	8011796 <__malloc_lock>
 8011210:	4a1f      	ldr	r2, [pc, #124]	; (8011290 <_free_r+0x98>)
 8011212:	6813      	ldr	r3, [r2, #0]
 8011214:	4610      	mov	r0, r2
 8011216:	b933      	cbnz	r3, 8011226 <_free_r+0x2e>
 8011218:	6063      	str	r3, [r4, #4]
 801121a:	6014      	str	r4, [r2, #0]
 801121c:	4628      	mov	r0, r5
 801121e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011222:	f000 bab9 	b.w	8011798 <__malloc_unlock>
 8011226:	42a3      	cmp	r3, r4
 8011228:	d90c      	bls.n	8011244 <_free_r+0x4c>
 801122a:	6821      	ldr	r1, [r4, #0]
 801122c:	1862      	adds	r2, r4, r1
 801122e:	4293      	cmp	r3, r2
 8011230:	bf04      	itt	eq
 8011232:	681a      	ldreq	r2, [r3, #0]
 8011234:	685b      	ldreq	r3, [r3, #4]
 8011236:	6063      	str	r3, [r4, #4]
 8011238:	bf04      	itt	eq
 801123a:	1852      	addeq	r2, r2, r1
 801123c:	6022      	streq	r2, [r4, #0]
 801123e:	6004      	str	r4, [r0, #0]
 8011240:	e7ec      	b.n	801121c <_free_r+0x24>
 8011242:	4613      	mov	r3, r2
 8011244:	685a      	ldr	r2, [r3, #4]
 8011246:	b10a      	cbz	r2, 801124c <_free_r+0x54>
 8011248:	42a2      	cmp	r2, r4
 801124a:	d9fa      	bls.n	8011242 <_free_r+0x4a>
 801124c:	6819      	ldr	r1, [r3, #0]
 801124e:	1858      	adds	r0, r3, r1
 8011250:	42a0      	cmp	r0, r4
 8011252:	d10b      	bne.n	801126c <_free_r+0x74>
 8011254:	6820      	ldr	r0, [r4, #0]
 8011256:	4401      	add	r1, r0
 8011258:	1858      	adds	r0, r3, r1
 801125a:	4282      	cmp	r2, r0
 801125c:	6019      	str	r1, [r3, #0]
 801125e:	d1dd      	bne.n	801121c <_free_r+0x24>
 8011260:	6810      	ldr	r0, [r2, #0]
 8011262:	6852      	ldr	r2, [r2, #4]
 8011264:	605a      	str	r2, [r3, #4]
 8011266:	4401      	add	r1, r0
 8011268:	6019      	str	r1, [r3, #0]
 801126a:	e7d7      	b.n	801121c <_free_r+0x24>
 801126c:	d902      	bls.n	8011274 <_free_r+0x7c>
 801126e:	230c      	movs	r3, #12
 8011270:	602b      	str	r3, [r5, #0]
 8011272:	e7d3      	b.n	801121c <_free_r+0x24>
 8011274:	6820      	ldr	r0, [r4, #0]
 8011276:	1821      	adds	r1, r4, r0
 8011278:	428a      	cmp	r2, r1
 801127a:	bf04      	itt	eq
 801127c:	6811      	ldreq	r1, [r2, #0]
 801127e:	6852      	ldreq	r2, [r2, #4]
 8011280:	6062      	str	r2, [r4, #4]
 8011282:	bf04      	itt	eq
 8011284:	1809      	addeq	r1, r1, r0
 8011286:	6021      	streq	r1, [r4, #0]
 8011288:	605c      	str	r4, [r3, #4]
 801128a:	e7c7      	b.n	801121c <_free_r+0x24>
 801128c:	bd38      	pop	{r3, r4, r5, pc}
 801128e:	bf00      	nop
 8011290:	20001f18 	.word	0x20001f18

08011294 <_malloc_r>:
 8011294:	b570      	push	{r4, r5, r6, lr}
 8011296:	1ccd      	adds	r5, r1, #3
 8011298:	f025 0503 	bic.w	r5, r5, #3
 801129c:	3508      	adds	r5, #8
 801129e:	2d0c      	cmp	r5, #12
 80112a0:	bf38      	it	cc
 80112a2:	250c      	movcc	r5, #12
 80112a4:	2d00      	cmp	r5, #0
 80112a6:	4606      	mov	r6, r0
 80112a8:	db01      	blt.n	80112ae <_malloc_r+0x1a>
 80112aa:	42a9      	cmp	r1, r5
 80112ac:	d903      	bls.n	80112b6 <_malloc_r+0x22>
 80112ae:	230c      	movs	r3, #12
 80112b0:	6033      	str	r3, [r6, #0]
 80112b2:	2000      	movs	r0, #0
 80112b4:	bd70      	pop	{r4, r5, r6, pc}
 80112b6:	f000 fa6e 	bl	8011796 <__malloc_lock>
 80112ba:	4a21      	ldr	r2, [pc, #132]	; (8011340 <_malloc_r+0xac>)
 80112bc:	6814      	ldr	r4, [r2, #0]
 80112be:	4621      	mov	r1, r4
 80112c0:	b991      	cbnz	r1, 80112e8 <_malloc_r+0x54>
 80112c2:	4c20      	ldr	r4, [pc, #128]	; (8011344 <_malloc_r+0xb0>)
 80112c4:	6823      	ldr	r3, [r4, #0]
 80112c6:	b91b      	cbnz	r3, 80112d0 <_malloc_r+0x3c>
 80112c8:	4630      	mov	r0, r6
 80112ca:	f000 f98f 	bl	80115ec <_sbrk_r>
 80112ce:	6020      	str	r0, [r4, #0]
 80112d0:	4629      	mov	r1, r5
 80112d2:	4630      	mov	r0, r6
 80112d4:	f000 f98a 	bl	80115ec <_sbrk_r>
 80112d8:	1c43      	adds	r3, r0, #1
 80112da:	d124      	bne.n	8011326 <_malloc_r+0x92>
 80112dc:	230c      	movs	r3, #12
 80112de:	6033      	str	r3, [r6, #0]
 80112e0:	4630      	mov	r0, r6
 80112e2:	f000 fa59 	bl	8011798 <__malloc_unlock>
 80112e6:	e7e4      	b.n	80112b2 <_malloc_r+0x1e>
 80112e8:	680b      	ldr	r3, [r1, #0]
 80112ea:	1b5b      	subs	r3, r3, r5
 80112ec:	d418      	bmi.n	8011320 <_malloc_r+0x8c>
 80112ee:	2b0b      	cmp	r3, #11
 80112f0:	d90f      	bls.n	8011312 <_malloc_r+0x7e>
 80112f2:	600b      	str	r3, [r1, #0]
 80112f4:	50cd      	str	r5, [r1, r3]
 80112f6:	18cc      	adds	r4, r1, r3
 80112f8:	4630      	mov	r0, r6
 80112fa:	f000 fa4d 	bl	8011798 <__malloc_unlock>
 80112fe:	f104 000b 	add.w	r0, r4, #11
 8011302:	1d23      	adds	r3, r4, #4
 8011304:	f020 0007 	bic.w	r0, r0, #7
 8011308:	1ac3      	subs	r3, r0, r3
 801130a:	d0d3      	beq.n	80112b4 <_malloc_r+0x20>
 801130c:	425a      	negs	r2, r3
 801130e:	50e2      	str	r2, [r4, r3]
 8011310:	e7d0      	b.n	80112b4 <_malloc_r+0x20>
 8011312:	428c      	cmp	r4, r1
 8011314:	684b      	ldr	r3, [r1, #4]
 8011316:	bf16      	itet	ne
 8011318:	6063      	strne	r3, [r4, #4]
 801131a:	6013      	streq	r3, [r2, #0]
 801131c:	460c      	movne	r4, r1
 801131e:	e7eb      	b.n	80112f8 <_malloc_r+0x64>
 8011320:	460c      	mov	r4, r1
 8011322:	6849      	ldr	r1, [r1, #4]
 8011324:	e7cc      	b.n	80112c0 <_malloc_r+0x2c>
 8011326:	1cc4      	adds	r4, r0, #3
 8011328:	f024 0403 	bic.w	r4, r4, #3
 801132c:	42a0      	cmp	r0, r4
 801132e:	d005      	beq.n	801133c <_malloc_r+0xa8>
 8011330:	1a21      	subs	r1, r4, r0
 8011332:	4630      	mov	r0, r6
 8011334:	f000 f95a 	bl	80115ec <_sbrk_r>
 8011338:	3001      	adds	r0, #1
 801133a:	d0cf      	beq.n	80112dc <_malloc_r+0x48>
 801133c:	6025      	str	r5, [r4, #0]
 801133e:	e7db      	b.n	80112f8 <_malloc_r+0x64>
 8011340:	20001f18 	.word	0x20001f18
 8011344:	20001f1c 	.word	0x20001f1c

08011348 <__ssputs_r>:
 8011348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801134c:	688e      	ldr	r6, [r1, #8]
 801134e:	429e      	cmp	r6, r3
 8011350:	4682      	mov	sl, r0
 8011352:	460c      	mov	r4, r1
 8011354:	4690      	mov	r8, r2
 8011356:	4699      	mov	r9, r3
 8011358:	d837      	bhi.n	80113ca <__ssputs_r+0x82>
 801135a:	898a      	ldrh	r2, [r1, #12]
 801135c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011360:	d031      	beq.n	80113c6 <__ssputs_r+0x7e>
 8011362:	6825      	ldr	r5, [r4, #0]
 8011364:	6909      	ldr	r1, [r1, #16]
 8011366:	1a6f      	subs	r7, r5, r1
 8011368:	6965      	ldr	r5, [r4, #20]
 801136a:	2302      	movs	r3, #2
 801136c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011370:	fb95 f5f3 	sdiv	r5, r5, r3
 8011374:	f109 0301 	add.w	r3, r9, #1
 8011378:	443b      	add	r3, r7
 801137a:	429d      	cmp	r5, r3
 801137c:	bf38      	it	cc
 801137e:	461d      	movcc	r5, r3
 8011380:	0553      	lsls	r3, r2, #21
 8011382:	d530      	bpl.n	80113e6 <__ssputs_r+0x9e>
 8011384:	4629      	mov	r1, r5
 8011386:	f7ff ff85 	bl	8011294 <_malloc_r>
 801138a:	4606      	mov	r6, r0
 801138c:	b950      	cbnz	r0, 80113a4 <__ssputs_r+0x5c>
 801138e:	230c      	movs	r3, #12
 8011390:	f8ca 3000 	str.w	r3, [sl]
 8011394:	89a3      	ldrh	r3, [r4, #12]
 8011396:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801139a:	81a3      	strh	r3, [r4, #12]
 801139c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80113a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113a4:	463a      	mov	r2, r7
 80113a6:	6921      	ldr	r1, [r4, #16]
 80113a8:	f7ff fc32 	bl	8010c10 <memcpy>
 80113ac:	89a3      	ldrh	r3, [r4, #12]
 80113ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80113b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80113b6:	81a3      	strh	r3, [r4, #12]
 80113b8:	6126      	str	r6, [r4, #16]
 80113ba:	6165      	str	r5, [r4, #20]
 80113bc:	443e      	add	r6, r7
 80113be:	1bed      	subs	r5, r5, r7
 80113c0:	6026      	str	r6, [r4, #0]
 80113c2:	60a5      	str	r5, [r4, #8]
 80113c4:	464e      	mov	r6, r9
 80113c6:	454e      	cmp	r6, r9
 80113c8:	d900      	bls.n	80113cc <__ssputs_r+0x84>
 80113ca:	464e      	mov	r6, r9
 80113cc:	4632      	mov	r2, r6
 80113ce:	4641      	mov	r1, r8
 80113d0:	6820      	ldr	r0, [r4, #0]
 80113d2:	f000 f9c7 	bl	8011764 <memmove>
 80113d6:	68a3      	ldr	r3, [r4, #8]
 80113d8:	1b9b      	subs	r3, r3, r6
 80113da:	60a3      	str	r3, [r4, #8]
 80113dc:	6823      	ldr	r3, [r4, #0]
 80113de:	441e      	add	r6, r3
 80113e0:	6026      	str	r6, [r4, #0]
 80113e2:	2000      	movs	r0, #0
 80113e4:	e7dc      	b.n	80113a0 <__ssputs_r+0x58>
 80113e6:	462a      	mov	r2, r5
 80113e8:	f000 f9d7 	bl	801179a <_realloc_r>
 80113ec:	4606      	mov	r6, r0
 80113ee:	2800      	cmp	r0, #0
 80113f0:	d1e2      	bne.n	80113b8 <__ssputs_r+0x70>
 80113f2:	6921      	ldr	r1, [r4, #16]
 80113f4:	4650      	mov	r0, sl
 80113f6:	f7ff feff 	bl	80111f8 <_free_r>
 80113fa:	e7c8      	b.n	801138e <__ssputs_r+0x46>

080113fc <_svfiprintf_r>:
 80113fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011400:	461d      	mov	r5, r3
 8011402:	898b      	ldrh	r3, [r1, #12]
 8011404:	061f      	lsls	r7, r3, #24
 8011406:	b09d      	sub	sp, #116	; 0x74
 8011408:	4680      	mov	r8, r0
 801140a:	460c      	mov	r4, r1
 801140c:	4616      	mov	r6, r2
 801140e:	d50f      	bpl.n	8011430 <_svfiprintf_r+0x34>
 8011410:	690b      	ldr	r3, [r1, #16]
 8011412:	b96b      	cbnz	r3, 8011430 <_svfiprintf_r+0x34>
 8011414:	2140      	movs	r1, #64	; 0x40
 8011416:	f7ff ff3d 	bl	8011294 <_malloc_r>
 801141a:	6020      	str	r0, [r4, #0]
 801141c:	6120      	str	r0, [r4, #16]
 801141e:	b928      	cbnz	r0, 801142c <_svfiprintf_r+0x30>
 8011420:	230c      	movs	r3, #12
 8011422:	f8c8 3000 	str.w	r3, [r8]
 8011426:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801142a:	e0c8      	b.n	80115be <_svfiprintf_r+0x1c2>
 801142c:	2340      	movs	r3, #64	; 0x40
 801142e:	6163      	str	r3, [r4, #20]
 8011430:	2300      	movs	r3, #0
 8011432:	9309      	str	r3, [sp, #36]	; 0x24
 8011434:	2320      	movs	r3, #32
 8011436:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801143a:	2330      	movs	r3, #48	; 0x30
 801143c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011440:	9503      	str	r5, [sp, #12]
 8011442:	f04f 0b01 	mov.w	fp, #1
 8011446:	4637      	mov	r7, r6
 8011448:	463d      	mov	r5, r7
 801144a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801144e:	b10b      	cbz	r3, 8011454 <_svfiprintf_r+0x58>
 8011450:	2b25      	cmp	r3, #37	; 0x25
 8011452:	d13e      	bne.n	80114d2 <_svfiprintf_r+0xd6>
 8011454:	ebb7 0a06 	subs.w	sl, r7, r6
 8011458:	d00b      	beq.n	8011472 <_svfiprintf_r+0x76>
 801145a:	4653      	mov	r3, sl
 801145c:	4632      	mov	r2, r6
 801145e:	4621      	mov	r1, r4
 8011460:	4640      	mov	r0, r8
 8011462:	f7ff ff71 	bl	8011348 <__ssputs_r>
 8011466:	3001      	adds	r0, #1
 8011468:	f000 80a4 	beq.w	80115b4 <_svfiprintf_r+0x1b8>
 801146c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801146e:	4453      	add	r3, sl
 8011470:	9309      	str	r3, [sp, #36]	; 0x24
 8011472:	783b      	ldrb	r3, [r7, #0]
 8011474:	2b00      	cmp	r3, #0
 8011476:	f000 809d 	beq.w	80115b4 <_svfiprintf_r+0x1b8>
 801147a:	2300      	movs	r3, #0
 801147c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011480:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011484:	9304      	str	r3, [sp, #16]
 8011486:	9307      	str	r3, [sp, #28]
 8011488:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801148c:	931a      	str	r3, [sp, #104]	; 0x68
 801148e:	462f      	mov	r7, r5
 8011490:	2205      	movs	r2, #5
 8011492:	f817 1b01 	ldrb.w	r1, [r7], #1
 8011496:	4850      	ldr	r0, [pc, #320]	; (80115d8 <_svfiprintf_r+0x1dc>)
 8011498:	f7ee feca 	bl	8000230 <memchr>
 801149c:	9b04      	ldr	r3, [sp, #16]
 801149e:	b9d0      	cbnz	r0, 80114d6 <_svfiprintf_r+0xda>
 80114a0:	06d9      	lsls	r1, r3, #27
 80114a2:	bf44      	itt	mi
 80114a4:	2220      	movmi	r2, #32
 80114a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80114aa:	071a      	lsls	r2, r3, #28
 80114ac:	bf44      	itt	mi
 80114ae:	222b      	movmi	r2, #43	; 0x2b
 80114b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80114b4:	782a      	ldrb	r2, [r5, #0]
 80114b6:	2a2a      	cmp	r2, #42	; 0x2a
 80114b8:	d015      	beq.n	80114e6 <_svfiprintf_r+0xea>
 80114ba:	9a07      	ldr	r2, [sp, #28]
 80114bc:	462f      	mov	r7, r5
 80114be:	2000      	movs	r0, #0
 80114c0:	250a      	movs	r5, #10
 80114c2:	4639      	mov	r1, r7
 80114c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80114c8:	3b30      	subs	r3, #48	; 0x30
 80114ca:	2b09      	cmp	r3, #9
 80114cc:	d94d      	bls.n	801156a <_svfiprintf_r+0x16e>
 80114ce:	b1b8      	cbz	r0, 8011500 <_svfiprintf_r+0x104>
 80114d0:	e00f      	b.n	80114f2 <_svfiprintf_r+0xf6>
 80114d2:	462f      	mov	r7, r5
 80114d4:	e7b8      	b.n	8011448 <_svfiprintf_r+0x4c>
 80114d6:	4a40      	ldr	r2, [pc, #256]	; (80115d8 <_svfiprintf_r+0x1dc>)
 80114d8:	1a80      	subs	r0, r0, r2
 80114da:	fa0b f000 	lsl.w	r0, fp, r0
 80114de:	4318      	orrs	r0, r3
 80114e0:	9004      	str	r0, [sp, #16]
 80114e2:	463d      	mov	r5, r7
 80114e4:	e7d3      	b.n	801148e <_svfiprintf_r+0x92>
 80114e6:	9a03      	ldr	r2, [sp, #12]
 80114e8:	1d11      	adds	r1, r2, #4
 80114ea:	6812      	ldr	r2, [r2, #0]
 80114ec:	9103      	str	r1, [sp, #12]
 80114ee:	2a00      	cmp	r2, #0
 80114f0:	db01      	blt.n	80114f6 <_svfiprintf_r+0xfa>
 80114f2:	9207      	str	r2, [sp, #28]
 80114f4:	e004      	b.n	8011500 <_svfiprintf_r+0x104>
 80114f6:	4252      	negs	r2, r2
 80114f8:	f043 0302 	orr.w	r3, r3, #2
 80114fc:	9207      	str	r2, [sp, #28]
 80114fe:	9304      	str	r3, [sp, #16]
 8011500:	783b      	ldrb	r3, [r7, #0]
 8011502:	2b2e      	cmp	r3, #46	; 0x2e
 8011504:	d10c      	bne.n	8011520 <_svfiprintf_r+0x124>
 8011506:	787b      	ldrb	r3, [r7, #1]
 8011508:	2b2a      	cmp	r3, #42	; 0x2a
 801150a:	d133      	bne.n	8011574 <_svfiprintf_r+0x178>
 801150c:	9b03      	ldr	r3, [sp, #12]
 801150e:	1d1a      	adds	r2, r3, #4
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	9203      	str	r2, [sp, #12]
 8011514:	2b00      	cmp	r3, #0
 8011516:	bfb8      	it	lt
 8011518:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801151c:	3702      	adds	r7, #2
 801151e:	9305      	str	r3, [sp, #20]
 8011520:	4d2e      	ldr	r5, [pc, #184]	; (80115dc <_svfiprintf_r+0x1e0>)
 8011522:	7839      	ldrb	r1, [r7, #0]
 8011524:	2203      	movs	r2, #3
 8011526:	4628      	mov	r0, r5
 8011528:	f7ee fe82 	bl	8000230 <memchr>
 801152c:	b138      	cbz	r0, 801153e <_svfiprintf_r+0x142>
 801152e:	2340      	movs	r3, #64	; 0x40
 8011530:	1b40      	subs	r0, r0, r5
 8011532:	fa03 f000 	lsl.w	r0, r3, r0
 8011536:	9b04      	ldr	r3, [sp, #16]
 8011538:	4303      	orrs	r3, r0
 801153a:	3701      	adds	r7, #1
 801153c:	9304      	str	r3, [sp, #16]
 801153e:	7839      	ldrb	r1, [r7, #0]
 8011540:	4827      	ldr	r0, [pc, #156]	; (80115e0 <_svfiprintf_r+0x1e4>)
 8011542:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011546:	2206      	movs	r2, #6
 8011548:	1c7e      	adds	r6, r7, #1
 801154a:	f7ee fe71 	bl	8000230 <memchr>
 801154e:	2800      	cmp	r0, #0
 8011550:	d038      	beq.n	80115c4 <_svfiprintf_r+0x1c8>
 8011552:	4b24      	ldr	r3, [pc, #144]	; (80115e4 <_svfiprintf_r+0x1e8>)
 8011554:	bb13      	cbnz	r3, 801159c <_svfiprintf_r+0x1a0>
 8011556:	9b03      	ldr	r3, [sp, #12]
 8011558:	3307      	adds	r3, #7
 801155a:	f023 0307 	bic.w	r3, r3, #7
 801155e:	3308      	adds	r3, #8
 8011560:	9303      	str	r3, [sp, #12]
 8011562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011564:	444b      	add	r3, r9
 8011566:	9309      	str	r3, [sp, #36]	; 0x24
 8011568:	e76d      	b.n	8011446 <_svfiprintf_r+0x4a>
 801156a:	fb05 3202 	mla	r2, r5, r2, r3
 801156e:	2001      	movs	r0, #1
 8011570:	460f      	mov	r7, r1
 8011572:	e7a6      	b.n	80114c2 <_svfiprintf_r+0xc6>
 8011574:	2300      	movs	r3, #0
 8011576:	3701      	adds	r7, #1
 8011578:	9305      	str	r3, [sp, #20]
 801157a:	4619      	mov	r1, r3
 801157c:	250a      	movs	r5, #10
 801157e:	4638      	mov	r0, r7
 8011580:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011584:	3a30      	subs	r2, #48	; 0x30
 8011586:	2a09      	cmp	r2, #9
 8011588:	d903      	bls.n	8011592 <_svfiprintf_r+0x196>
 801158a:	2b00      	cmp	r3, #0
 801158c:	d0c8      	beq.n	8011520 <_svfiprintf_r+0x124>
 801158e:	9105      	str	r1, [sp, #20]
 8011590:	e7c6      	b.n	8011520 <_svfiprintf_r+0x124>
 8011592:	fb05 2101 	mla	r1, r5, r1, r2
 8011596:	2301      	movs	r3, #1
 8011598:	4607      	mov	r7, r0
 801159a:	e7f0      	b.n	801157e <_svfiprintf_r+0x182>
 801159c:	ab03      	add	r3, sp, #12
 801159e:	9300      	str	r3, [sp, #0]
 80115a0:	4622      	mov	r2, r4
 80115a2:	4b11      	ldr	r3, [pc, #68]	; (80115e8 <_svfiprintf_r+0x1ec>)
 80115a4:	a904      	add	r1, sp, #16
 80115a6:	4640      	mov	r0, r8
 80115a8:	f7fd fdc8 	bl	800f13c <_printf_float>
 80115ac:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80115b0:	4681      	mov	r9, r0
 80115b2:	d1d6      	bne.n	8011562 <_svfiprintf_r+0x166>
 80115b4:	89a3      	ldrh	r3, [r4, #12]
 80115b6:	065b      	lsls	r3, r3, #25
 80115b8:	f53f af35 	bmi.w	8011426 <_svfiprintf_r+0x2a>
 80115bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80115be:	b01d      	add	sp, #116	; 0x74
 80115c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115c4:	ab03      	add	r3, sp, #12
 80115c6:	9300      	str	r3, [sp, #0]
 80115c8:	4622      	mov	r2, r4
 80115ca:	4b07      	ldr	r3, [pc, #28]	; (80115e8 <_svfiprintf_r+0x1ec>)
 80115cc:	a904      	add	r1, sp, #16
 80115ce:	4640      	mov	r0, r8
 80115d0:	f7fe f86a 	bl	800f6a8 <_printf_i>
 80115d4:	e7ea      	b.n	80115ac <_svfiprintf_r+0x1b0>
 80115d6:	bf00      	nop
 80115d8:	080141ac 	.word	0x080141ac
 80115dc:	080141b2 	.word	0x080141b2
 80115e0:	080141b6 	.word	0x080141b6
 80115e4:	0800f13d 	.word	0x0800f13d
 80115e8:	08011349 	.word	0x08011349

080115ec <_sbrk_r>:
 80115ec:	b538      	push	{r3, r4, r5, lr}
 80115ee:	4c06      	ldr	r4, [pc, #24]	; (8011608 <_sbrk_r+0x1c>)
 80115f0:	2300      	movs	r3, #0
 80115f2:	4605      	mov	r5, r0
 80115f4:	4608      	mov	r0, r1
 80115f6:	6023      	str	r3, [r4, #0]
 80115f8:	f7f6 f9a2 	bl	8007940 <_sbrk>
 80115fc:	1c43      	adds	r3, r0, #1
 80115fe:	d102      	bne.n	8011606 <_sbrk_r+0x1a>
 8011600:	6823      	ldr	r3, [r4, #0]
 8011602:	b103      	cbz	r3, 8011606 <_sbrk_r+0x1a>
 8011604:	602b      	str	r3, [r5, #0]
 8011606:	bd38      	pop	{r3, r4, r5, pc}
 8011608:	20002950 	.word	0x20002950

0801160c <__sread>:
 801160c:	b510      	push	{r4, lr}
 801160e:	460c      	mov	r4, r1
 8011610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011614:	f000 f8e8 	bl	80117e8 <_read_r>
 8011618:	2800      	cmp	r0, #0
 801161a:	bfab      	itete	ge
 801161c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801161e:	89a3      	ldrhlt	r3, [r4, #12]
 8011620:	181b      	addge	r3, r3, r0
 8011622:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011626:	bfac      	ite	ge
 8011628:	6563      	strge	r3, [r4, #84]	; 0x54
 801162a:	81a3      	strhlt	r3, [r4, #12]
 801162c:	bd10      	pop	{r4, pc}

0801162e <__swrite>:
 801162e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011632:	461f      	mov	r7, r3
 8011634:	898b      	ldrh	r3, [r1, #12]
 8011636:	05db      	lsls	r3, r3, #23
 8011638:	4605      	mov	r5, r0
 801163a:	460c      	mov	r4, r1
 801163c:	4616      	mov	r6, r2
 801163e:	d505      	bpl.n	801164c <__swrite+0x1e>
 8011640:	2302      	movs	r3, #2
 8011642:	2200      	movs	r2, #0
 8011644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011648:	f000 f868 	bl	801171c <_lseek_r>
 801164c:	89a3      	ldrh	r3, [r4, #12]
 801164e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011652:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011656:	81a3      	strh	r3, [r4, #12]
 8011658:	4632      	mov	r2, r6
 801165a:	463b      	mov	r3, r7
 801165c:	4628      	mov	r0, r5
 801165e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011662:	f000 b817 	b.w	8011694 <_write_r>

08011666 <__sseek>:
 8011666:	b510      	push	{r4, lr}
 8011668:	460c      	mov	r4, r1
 801166a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801166e:	f000 f855 	bl	801171c <_lseek_r>
 8011672:	1c43      	adds	r3, r0, #1
 8011674:	89a3      	ldrh	r3, [r4, #12]
 8011676:	bf15      	itete	ne
 8011678:	6560      	strne	r0, [r4, #84]	; 0x54
 801167a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801167e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011682:	81a3      	strheq	r3, [r4, #12]
 8011684:	bf18      	it	ne
 8011686:	81a3      	strhne	r3, [r4, #12]
 8011688:	bd10      	pop	{r4, pc}

0801168a <__sclose>:
 801168a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801168e:	f000 b813 	b.w	80116b8 <_close_r>
	...

08011694 <_write_r>:
 8011694:	b538      	push	{r3, r4, r5, lr}
 8011696:	4c07      	ldr	r4, [pc, #28]	; (80116b4 <_write_r+0x20>)
 8011698:	4605      	mov	r5, r0
 801169a:	4608      	mov	r0, r1
 801169c:	4611      	mov	r1, r2
 801169e:	2200      	movs	r2, #0
 80116a0:	6022      	str	r2, [r4, #0]
 80116a2:	461a      	mov	r2, r3
 80116a4:	f7f5 fe2b 	bl	80072fe <_write>
 80116a8:	1c43      	adds	r3, r0, #1
 80116aa:	d102      	bne.n	80116b2 <_write_r+0x1e>
 80116ac:	6823      	ldr	r3, [r4, #0]
 80116ae:	b103      	cbz	r3, 80116b2 <_write_r+0x1e>
 80116b0:	602b      	str	r3, [r5, #0]
 80116b2:	bd38      	pop	{r3, r4, r5, pc}
 80116b4:	20002950 	.word	0x20002950

080116b8 <_close_r>:
 80116b8:	b538      	push	{r3, r4, r5, lr}
 80116ba:	4c06      	ldr	r4, [pc, #24]	; (80116d4 <_close_r+0x1c>)
 80116bc:	2300      	movs	r3, #0
 80116be:	4605      	mov	r5, r0
 80116c0:	4608      	mov	r0, r1
 80116c2:	6023      	str	r3, [r4, #0]
 80116c4:	f7f6 f907 	bl	80078d6 <_close>
 80116c8:	1c43      	adds	r3, r0, #1
 80116ca:	d102      	bne.n	80116d2 <_close_r+0x1a>
 80116cc:	6823      	ldr	r3, [r4, #0]
 80116ce:	b103      	cbz	r3, 80116d2 <_close_r+0x1a>
 80116d0:	602b      	str	r3, [r5, #0]
 80116d2:	bd38      	pop	{r3, r4, r5, pc}
 80116d4:	20002950 	.word	0x20002950

080116d8 <_fstat_r>:
 80116d8:	b538      	push	{r3, r4, r5, lr}
 80116da:	4c07      	ldr	r4, [pc, #28]	; (80116f8 <_fstat_r+0x20>)
 80116dc:	2300      	movs	r3, #0
 80116de:	4605      	mov	r5, r0
 80116e0:	4608      	mov	r0, r1
 80116e2:	4611      	mov	r1, r2
 80116e4:	6023      	str	r3, [r4, #0]
 80116e6:	f7f6 f902 	bl	80078ee <_fstat>
 80116ea:	1c43      	adds	r3, r0, #1
 80116ec:	d102      	bne.n	80116f4 <_fstat_r+0x1c>
 80116ee:	6823      	ldr	r3, [r4, #0]
 80116f0:	b103      	cbz	r3, 80116f4 <_fstat_r+0x1c>
 80116f2:	602b      	str	r3, [r5, #0]
 80116f4:	bd38      	pop	{r3, r4, r5, pc}
 80116f6:	bf00      	nop
 80116f8:	20002950 	.word	0x20002950

080116fc <_isatty_r>:
 80116fc:	b538      	push	{r3, r4, r5, lr}
 80116fe:	4c06      	ldr	r4, [pc, #24]	; (8011718 <_isatty_r+0x1c>)
 8011700:	2300      	movs	r3, #0
 8011702:	4605      	mov	r5, r0
 8011704:	4608      	mov	r0, r1
 8011706:	6023      	str	r3, [r4, #0]
 8011708:	f7f6 f901 	bl	800790e <_isatty>
 801170c:	1c43      	adds	r3, r0, #1
 801170e:	d102      	bne.n	8011716 <_isatty_r+0x1a>
 8011710:	6823      	ldr	r3, [r4, #0]
 8011712:	b103      	cbz	r3, 8011716 <_isatty_r+0x1a>
 8011714:	602b      	str	r3, [r5, #0]
 8011716:	bd38      	pop	{r3, r4, r5, pc}
 8011718:	20002950 	.word	0x20002950

0801171c <_lseek_r>:
 801171c:	b538      	push	{r3, r4, r5, lr}
 801171e:	4c07      	ldr	r4, [pc, #28]	; (801173c <_lseek_r+0x20>)
 8011720:	4605      	mov	r5, r0
 8011722:	4608      	mov	r0, r1
 8011724:	4611      	mov	r1, r2
 8011726:	2200      	movs	r2, #0
 8011728:	6022      	str	r2, [r4, #0]
 801172a:	461a      	mov	r2, r3
 801172c:	f7f6 f8fa 	bl	8007924 <_lseek>
 8011730:	1c43      	adds	r3, r0, #1
 8011732:	d102      	bne.n	801173a <_lseek_r+0x1e>
 8011734:	6823      	ldr	r3, [r4, #0]
 8011736:	b103      	cbz	r3, 801173a <_lseek_r+0x1e>
 8011738:	602b      	str	r3, [r5, #0]
 801173a:	bd38      	pop	{r3, r4, r5, pc}
 801173c:	20002950 	.word	0x20002950

08011740 <__ascii_mbtowc>:
 8011740:	b082      	sub	sp, #8
 8011742:	b901      	cbnz	r1, 8011746 <__ascii_mbtowc+0x6>
 8011744:	a901      	add	r1, sp, #4
 8011746:	b142      	cbz	r2, 801175a <__ascii_mbtowc+0x1a>
 8011748:	b14b      	cbz	r3, 801175e <__ascii_mbtowc+0x1e>
 801174a:	7813      	ldrb	r3, [r2, #0]
 801174c:	600b      	str	r3, [r1, #0]
 801174e:	7812      	ldrb	r2, [r2, #0]
 8011750:	1c10      	adds	r0, r2, #0
 8011752:	bf18      	it	ne
 8011754:	2001      	movne	r0, #1
 8011756:	b002      	add	sp, #8
 8011758:	4770      	bx	lr
 801175a:	4610      	mov	r0, r2
 801175c:	e7fb      	b.n	8011756 <__ascii_mbtowc+0x16>
 801175e:	f06f 0001 	mvn.w	r0, #1
 8011762:	e7f8      	b.n	8011756 <__ascii_mbtowc+0x16>

08011764 <memmove>:
 8011764:	4288      	cmp	r0, r1
 8011766:	b510      	push	{r4, lr}
 8011768:	eb01 0302 	add.w	r3, r1, r2
 801176c:	d807      	bhi.n	801177e <memmove+0x1a>
 801176e:	1e42      	subs	r2, r0, #1
 8011770:	4299      	cmp	r1, r3
 8011772:	d00a      	beq.n	801178a <memmove+0x26>
 8011774:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011778:	f802 4f01 	strb.w	r4, [r2, #1]!
 801177c:	e7f8      	b.n	8011770 <memmove+0xc>
 801177e:	4283      	cmp	r3, r0
 8011780:	d9f5      	bls.n	801176e <memmove+0xa>
 8011782:	1881      	adds	r1, r0, r2
 8011784:	1ad2      	subs	r2, r2, r3
 8011786:	42d3      	cmn	r3, r2
 8011788:	d100      	bne.n	801178c <memmove+0x28>
 801178a:	bd10      	pop	{r4, pc}
 801178c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011790:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8011794:	e7f7      	b.n	8011786 <memmove+0x22>

08011796 <__malloc_lock>:
 8011796:	4770      	bx	lr

08011798 <__malloc_unlock>:
 8011798:	4770      	bx	lr

0801179a <_realloc_r>:
 801179a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801179c:	4607      	mov	r7, r0
 801179e:	4614      	mov	r4, r2
 80117a0:	460e      	mov	r6, r1
 80117a2:	b921      	cbnz	r1, 80117ae <_realloc_r+0x14>
 80117a4:	4611      	mov	r1, r2
 80117a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80117aa:	f7ff bd73 	b.w	8011294 <_malloc_r>
 80117ae:	b922      	cbnz	r2, 80117ba <_realloc_r+0x20>
 80117b0:	f7ff fd22 	bl	80111f8 <_free_r>
 80117b4:	4625      	mov	r5, r4
 80117b6:	4628      	mov	r0, r5
 80117b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80117ba:	f000 f834 	bl	8011826 <_malloc_usable_size_r>
 80117be:	42a0      	cmp	r0, r4
 80117c0:	d20f      	bcs.n	80117e2 <_realloc_r+0x48>
 80117c2:	4621      	mov	r1, r4
 80117c4:	4638      	mov	r0, r7
 80117c6:	f7ff fd65 	bl	8011294 <_malloc_r>
 80117ca:	4605      	mov	r5, r0
 80117cc:	2800      	cmp	r0, #0
 80117ce:	d0f2      	beq.n	80117b6 <_realloc_r+0x1c>
 80117d0:	4631      	mov	r1, r6
 80117d2:	4622      	mov	r2, r4
 80117d4:	f7ff fa1c 	bl	8010c10 <memcpy>
 80117d8:	4631      	mov	r1, r6
 80117da:	4638      	mov	r0, r7
 80117dc:	f7ff fd0c 	bl	80111f8 <_free_r>
 80117e0:	e7e9      	b.n	80117b6 <_realloc_r+0x1c>
 80117e2:	4635      	mov	r5, r6
 80117e4:	e7e7      	b.n	80117b6 <_realloc_r+0x1c>
	...

080117e8 <_read_r>:
 80117e8:	b538      	push	{r3, r4, r5, lr}
 80117ea:	4c07      	ldr	r4, [pc, #28]	; (8011808 <_read_r+0x20>)
 80117ec:	4605      	mov	r5, r0
 80117ee:	4608      	mov	r0, r1
 80117f0:	4611      	mov	r1, r2
 80117f2:	2200      	movs	r2, #0
 80117f4:	6022      	str	r2, [r4, #0]
 80117f6:	461a      	mov	r2, r3
 80117f8:	f7f6 f850 	bl	800789c <_read>
 80117fc:	1c43      	adds	r3, r0, #1
 80117fe:	d102      	bne.n	8011806 <_read_r+0x1e>
 8011800:	6823      	ldr	r3, [r4, #0]
 8011802:	b103      	cbz	r3, 8011806 <_read_r+0x1e>
 8011804:	602b      	str	r3, [r5, #0]
 8011806:	bd38      	pop	{r3, r4, r5, pc}
 8011808:	20002950 	.word	0x20002950

0801180c <__ascii_wctomb>:
 801180c:	b149      	cbz	r1, 8011822 <__ascii_wctomb+0x16>
 801180e:	2aff      	cmp	r2, #255	; 0xff
 8011810:	bf85      	ittet	hi
 8011812:	238a      	movhi	r3, #138	; 0x8a
 8011814:	6003      	strhi	r3, [r0, #0]
 8011816:	700a      	strbls	r2, [r1, #0]
 8011818:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801181c:	bf98      	it	ls
 801181e:	2001      	movls	r0, #1
 8011820:	4770      	bx	lr
 8011822:	4608      	mov	r0, r1
 8011824:	4770      	bx	lr

08011826 <_malloc_usable_size_r>:
 8011826:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801182a:	1f18      	subs	r0, r3, #4
 801182c:	2b00      	cmp	r3, #0
 801182e:	bfbc      	itt	lt
 8011830:	580b      	ldrlt	r3, [r1, r0]
 8011832:	18c0      	addlt	r0, r0, r3
 8011834:	4770      	bx	lr
	...

08011838 <log10>:
 8011838:	b5f0      	push	{r4, r5, r6, r7, lr}
 801183a:	ed2d 8b02 	vpush	{d8}
 801183e:	b08b      	sub	sp, #44	; 0x2c
 8011840:	ec55 4b10 	vmov	r4, r5, d0
 8011844:	f000 f9e8 	bl	8011c18 <__ieee754_log10>
 8011848:	4b36      	ldr	r3, [pc, #216]	; (8011924 <log10+0xec>)
 801184a:	eeb0 8a40 	vmov.f32	s16, s0
 801184e:	eef0 8a60 	vmov.f32	s17, s1
 8011852:	f993 6000 	ldrsb.w	r6, [r3]
 8011856:	1c73      	adds	r3, r6, #1
 8011858:	d05c      	beq.n	8011914 <log10+0xdc>
 801185a:	4622      	mov	r2, r4
 801185c:	462b      	mov	r3, r5
 801185e:	4620      	mov	r0, r4
 8011860:	4629      	mov	r1, r5
 8011862:	f7ef f98b 	bl	8000b7c <__aeabi_dcmpun>
 8011866:	4607      	mov	r7, r0
 8011868:	2800      	cmp	r0, #0
 801186a:	d153      	bne.n	8011914 <log10+0xdc>
 801186c:	2200      	movs	r2, #0
 801186e:	2300      	movs	r3, #0
 8011870:	4620      	mov	r0, r4
 8011872:	4629      	mov	r1, r5
 8011874:	f7ef f964 	bl	8000b40 <__aeabi_dcmple>
 8011878:	2800      	cmp	r0, #0
 801187a:	d04b      	beq.n	8011914 <log10+0xdc>
 801187c:	4b2a      	ldr	r3, [pc, #168]	; (8011928 <log10+0xf0>)
 801187e:	9301      	str	r3, [sp, #4]
 8011880:	9708      	str	r7, [sp, #32]
 8011882:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8011886:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801188a:	b9a6      	cbnz	r6, 80118b6 <log10+0x7e>
 801188c:	4b27      	ldr	r3, [pc, #156]	; (801192c <log10+0xf4>)
 801188e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8011892:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011896:	4620      	mov	r0, r4
 8011898:	2200      	movs	r2, #0
 801189a:	2300      	movs	r3, #0
 801189c:	4629      	mov	r1, r5
 801189e:	f7ef f93b 	bl	8000b18 <__aeabi_dcmpeq>
 80118a2:	bb40      	cbnz	r0, 80118f6 <log10+0xbe>
 80118a4:	2301      	movs	r3, #1
 80118a6:	2e02      	cmp	r6, #2
 80118a8:	9300      	str	r3, [sp, #0]
 80118aa:	d119      	bne.n	80118e0 <log10+0xa8>
 80118ac:	f7fd fb80 	bl	800efb0 <__errno>
 80118b0:	2321      	movs	r3, #33	; 0x21
 80118b2:	6003      	str	r3, [r0, #0]
 80118b4:	e019      	b.n	80118ea <log10+0xb2>
 80118b6:	4b1e      	ldr	r3, [pc, #120]	; (8011930 <log10+0xf8>)
 80118b8:	2200      	movs	r2, #0
 80118ba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80118be:	4620      	mov	r0, r4
 80118c0:	2200      	movs	r2, #0
 80118c2:	2300      	movs	r3, #0
 80118c4:	4629      	mov	r1, r5
 80118c6:	f7ef f927 	bl	8000b18 <__aeabi_dcmpeq>
 80118ca:	2800      	cmp	r0, #0
 80118cc:	d0ea      	beq.n	80118a4 <log10+0x6c>
 80118ce:	2302      	movs	r3, #2
 80118d0:	429e      	cmp	r6, r3
 80118d2:	9300      	str	r3, [sp, #0]
 80118d4:	d111      	bne.n	80118fa <log10+0xc2>
 80118d6:	f7fd fb6b 	bl	800efb0 <__errno>
 80118da:	2322      	movs	r3, #34	; 0x22
 80118dc:	6003      	str	r3, [r0, #0]
 80118de:	e011      	b.n	8011904 <log10+0xcc>
 80118e0:	4668      	mov	r0, sp
 80118e2:	f000 fff4 	bl	80128ce <matherr>
 80118e6:	2800      	cmp	r0, #0
 80118e8:	d0e0      	beq.n	80118ac <log10+0x74>
 80118ea:	4812      	ldr	r0, [pc, #72]	; (8011934 <log10+0xfc>)
 80118ec:	f000 fff4 	bl	80128d8 <nan>
 80118f0:	ed8d 0b06 	vstr	d0, [sp, #24]
 80118f4:	e006      	b.n	8011904 <log10+0xcc>
 80118f6:	2302      	movs	r3, #2
 80118f8:	9300      	str	r3, [sp, #0]
 80118fa:	4668      	mov	r0, sp
 80118fc:	f000 ffe7 	bl	80128ce <matherr>
 8011900:	2800      	cmp	r0, #0
 8011902:	d0e8      	beq.n	80118d6 <log10+0x9e>
 8011904:	9b08      	ldr	r3, [sp, #32]
 8011906:	b11b      	cbz	r3, 8011910 <log10+0xd8>
 8011908:	f7fd fb52 	bl	800efb0 <__errno>
 801190c:	9b08      	ldr	r3, [sp, #32]
 801190e:	6003      	str	r3, [r0, #0]
 8011910:	ed9d 8b06 	vldr	d8, [sp, #24]
 8011914:	eeb0 0a48 	vmov.f32	s0, s16
 8011918:	eef0 0a68 	vmov.f32	s1, s17
 801191c:	b00b      	add	sp, #44	; 0x2c
 801191e:	ecbd 8b02 	vpop	{d8}
 8011922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011924:	20001e7c 	.word	0x20001e7c
 8011928:	080142c8 	.word	0x080142c8
 801192c:	c7efffff 	.word	0xc7efffff
 8011930:	fff00000 	.word	0xfff00000
 8011934:	080141b1 	.word	0x080141b1

08011938 <pow>:
 8011938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801193c:	ed2d 8b04 	vpush	{d8-d9}
 8011940:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8011c14 <pow+0x2dc>
 8011944:	b08d      	sub	sp, #52	; 0x34
 8011946:	ec57 6b10 	vmov	r6, r7, d0
 801194a:	ec55 4b11 	vmov	r4, r5, d1
 801194e:	f000 f9ef 	bl	8011d30 <__ieee754_pow>
 8011952:	f999 3000 	ldrsb.w	r3, [r9]
 8011956:	9300      	str	r3, [sp, #0]
 8011958:	3301      	adds	r3, #1
 801195a:	eeb0 8a40 	vmov.f32	s16, s0
 801195e:	eef0 8a60 	vmov.f32	s17, s1
 8011962:	46c8      	mov	r8, r9
 8011964:	d05f      	beq.n	8011a26 <pow+0xee>
 8011966:	4622      	mov	r2, r4
 8011968:	462b      	mov	r3, r5
 801196a:	4620      	mov	r0, r4
 801196c:	4629      	mov	r1, r5
 801196e:	f7ef f905 	bl	8000b7c <__aeabi_dcmpun>
 8011972:	4683      	mov	fp, r0
 8011974:	2800      	cmp	r0, #0
 8011976:	d156      	bne.n	8011a26 <pow+0xee>
 8011978:	4632      	mov	r2, r6
 801197a:	463b      	mov	r3, r7
 801197c:	4630      	mov	r0, r6
 801197e:	4639      	mov	r1, r7
 8011980:	f7ef f8fc 	bl	8000b7c <__aeabi_dcmpun>
 8011984:	9001      	str	r0, [sp, #4]
 8011986:	b1e8      	cbz	r0, 80119c4 <pow+0x8c>
 8011988:	2200      	movs	r2, #0
 801198a:	2300      	movs	r3, #0
 801198c:	4620      	mov	r0, r4
 801198e:	4629      	mov	r1, r5
 8011990:	f7ef f8c2 	bl	8000b18 <__aeabi_dcmpeq>
 8011994:	2800      	cmp	r0, #0
 8011996:	d046      	beq.n	8011a26 <pow+0xee>
 8011998:	2301      	movs	r3, #1
 801199a:	9302      	str	r3, [sp, #8]
 801199c:	4b96      	ldr	r3, [pc, #600]	; (8011bf8 <pow+0x2c0>)
 801199e:	9303      	str	r3, [sp, #12]
 80119a0:	4b96      	ldr	r3, [pc, #600]	; (8011bfc <pow+0x2c4>)
 80119a2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80119a6:	2200      	movs	r2, #0
 80119a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80119ac:	9b00      	ldr	r3, [sp, #0]
 80119ae:	2b02      	cmp	r3, #2
 80119b0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80119b4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80119b8:	d033      	beq.n	8011a22 <pow+0xea>
 80119ba:	a802      	add	r0, sp, #8
 80119bc:	f000 ff87 	bl	80128ce <matherr>
 80119c0:	bb48      	cbnz	r0, 8011a16 <pow+0xde>
 80119c2:	e05d      	b.n	8011a80 <pow+0x148>
 80119c4:	f04f 0a00 	mov.w	sl, #0
 80119c8:	f04f 0b00 	mov.w	fp, #0
 80119cc:	4652      	mov	r2, sl
 80119ce:	465b      	mov	r3, fp
 80119d0:	4630      	mov	r0, r6
 80119d2:	4639      	mov	r1, r7
 80119d4:	f7ef f8a0 	bl	8000b18 <__aeabi_dcmpeq>
 80119d8:	ec4b ab19 	vmov	d9, sl, fp
 80119dc:	2800      	cmp	r0, #0
 80119de:	d054      	beq.n	8011a8a <pow+0x152>
 80119e0:	4652      	mov	r2, sl
 80119e2:	465b      	mov	r3, fp
 80119e4:	4620      	mov	r0, r4
 80119e6:	4629      	mov	r1, r5
 80119e8:	f7ef f896 	bl	8000b18 <__aeabi_dcmpeq>
 80119ec:	4680      	mov	r8, r0
 80119ee:	b318      	cbz	r0, 8011a38 <pow+0x100>
 80119f0:	2301      	movs	r3, #1
 80119f2:	9302      	str	r3, [sp, #8]
 80119f4:	4b80      	ldr	r3, [pc, #512]	; (8011bf8 <pow+0x2c0>)
 80119f6:	9303      	str	r3, [sp, #12]
 80119f8:	9b01      	ldr	r3, [sp, #4]
 80119fa:	930a      	str	r3, [sp, #40]	; 0x28
 80119fc:	9b00      	ldr	r3, [sp, #0]
 80119fe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011a02:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8011a06:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d0d5      	beq.n	80119ba <pow+0x82>
 8011a0e:	4b7b      	ldr	r3, [pc, #492]	; (8011bfc <pow+0x2c4>)
 8011a10:	2200      	movs	r2, #0
 8011a12:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011a16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a18:	b11b      	cbz	r3, 8011a22 <pow+0xea>
 8011a1a:	f7fd fac9 	bl	800efb0 <__errno>
 8011a1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a20:	6003      	str	r3, [r0, #0]
 8011a22:	ed9d 8b08 	vldr	d8, [sp, #32]
 8011a26:	eeb0 0a48 	vmov.f32	s0, s16
 8011a2a:	eef0 0a68 	vmov.f32	s1, s17
 8011a2e:	b00d      	add	sp, #52	; 0x34
 8011a30:	ecbd 8b04 	vpop	{d8-d9}
 8011a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a38:	ec45 4b10 	vmov	d0, r4, r5
 8011a3c:	f000 ff3f 	bl	80128be <finite>
 8011a40:	2800      	cmp	r0, #0
 8011a42:	d0f0      	beq.n	8011a26 <pow+0xee>
 8011a44:	4652      	mov	r2, sl
 8011a46:	465b      	mov	r3, fp
 8011a48:	4620      	mov	r0, r4
 8011a4a:	4629      	mov	r1, r5
 8011a4c:	f7ef f86e 	bl	8000b2c <__aeabi_dcmplt>
 8011a50:	2800      	cmp	r0, #0
 8011a52:	d0e8      	beq.n	8011a26 <pow+0xee>
 8011a54:	2301      	movs	r3, #1
 8011a56:	9302      	str	r3, [sp, #8]
 8011a58:	4b67      	ldr	r3, [pc, #412]	; (8011bf8 <pow+0x2c0>)
 8011a5a:	9303      	str	r3, [sp, #12]
 8011a5c:	f999 3000 	ldrsb.w	r3, [r9]
 8011a60:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8011a64:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011a68:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8011a6c:	b913      	cbnz	r3, 8011a74 <pow+0x13c>
 8011a6e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8011a72:	e7a2      	b.n	80119ba <pow+0x82>
 8011a74:	4962      	ldr	r1, [pc, #392]	; (8011c00 <pow+0x2c8>)
 8011a76:	2000      	movs	r0, #0
 8011a78:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011a7c:	2b02      	cmp	r3, #2
 8011a7e:	d19c      	bne.n	80119ba <pow+0x82>
 8011a80:	f7fd fa96 	bl	800efb0 <__errno>
 8011a84:	2321      	movs	r3, #33	; 0x21
 8011a86:	6003      	str	r3, [r0, #0]
 8011a88:	e7c5      	b.n	8011a16 <pow+0xde>
 8011a8a:	eeb0 0a48 	vmov.f32	s0, s16
 8011a8e:	eef0 0a68 	vmov.f32	s1, s17
 8011a92:	f000 ff14 	bl	80128be <finite>
 8011a96:	9000      	str	r0, [sp, #0]
 8011a98:	2800      	cmp	r0, #0
 8011a9a:	f040 8081 	bne.w	8011ba0 <pow+0x268>
 8011a9e:	ec47 6b10 	vmov	d0, r6, r7
 8011aa2:	f000 ff0c 	bl	80128be <finite>
 8011aa6:	2800      	cmp	r0, #0
 8011aa8:	d07a      	beq.n	8011ba0 <pow+0x268>
 8011aaa:	ec45 4b10 	vmov	d0, r4, r5
 8011aae:	f000 ff06 	bl	80128be <finite>
 8011ab2:	2800      	cmp	r0, #0
 8011ab4:	d074      	beq.n	8011ba0 <pow+0x268>
 8011ab6:	ec53 2b18 	vmov	r2, r3, d8
 8011aba:	ee18 0a10 	vmov	r0, s16
 8011abe:	4619      	mov	r1, r3
 8011ac0:	f7ef f85c 	bl	8000b7c <__aeabi_dcmpun>
 8011ac4:	f999 9000 	ldrsb.w	r9, [r9]
 8011ac8:	4b4b      	ldr	r3, [pc, #300]	; (8011bf8 <pow+0x2c0>)
 8011aca:	b1b0      	cbz	r0, 8011afa <pow+0x1c2>
 8011acc:	2201      	movs	r2, #1
 8011ace:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011ad2:	9b00      	ldr	r3, [sp, #0]
 8011ad4:	930a      	str	r3, [sp, #40]	; 0x28
 8011ad6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011ada:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8011ade:	f1b9 0f00 	cmp.w	r9, #0
 8011ae2:	d0c4      	beq.n	8011a6e <pow+0x136>
 8011ae4:	4652      	mov	r2, sl
 8011ae6:	465b      	mov	r3, fp
 8011ae8:	4650      	mov	r0, sl
 8011aea:	4659      	mov	r1, fp
 8011aec:	f7ee fed6 	bl	800089c <__aeabi_ddiv>
 8011af0:	f1b9 0f02 	cmp.w	r9, #2
 8011af4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011af8:	e7c1      	b.n	8011a7e <pow+0x146>
 8011afa:	2203      	movs	r2, #3
 8011afc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011b00:	900a      	str	r0, [sp, #40]	; 0x28
 8011b02:	4629      	mov	r1, r5
 8011b04:	4620      	mov	r0, r4
 8011b06:	2200      	movs	r2, #0
 8011b08:	4b3e      	ldr	r3, [pc, #248]	; (8011c04 <pow+0x2cc>)
 8011b0a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8011b0e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011b12:	f7ee fd99 	bl	8000648 <__aeabi_dmul>
 8011b16:	4604      	mov	r4, r0
 8011b18:	460d      	mov	r5, r1
 8011b1a:	f1b9 0f00 	cmp.w	r9, #0
 8011b1e:	d124      	bne.n	8011b6a <pow+0x232>
 8011b20:	4b39      	ldr	r3, [pc, #228]	; (8011c08 <pow+0x2d0>)
 8011b22:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8011b26:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011b2a:	4630      	mov	r0, r6
 8011b2c:	4652      	mov	r2, sl
 8011b2e:	465b      	mov	r3, fp
 8011b30:	4639      	mov	r1, r7
 8011b32:	f7ee fffb 	bl	8000b2c <__aeabi_dcmplt>
 8011b36:	2800      	cmp	r0, #0
 8011b38:	d056      	beq.n	8011be8 <pow+0x2b0>
 8011b3a:	ec45 4b10 	vmov	d0, r4, r5
 8011b3e:	f000 fed3 	bl	80128e8 <rint>
 8011b42:	4622      	mov	r2, r4
 8011b44:	462b      	mov	r3, r5
 8011b46:	ec51 0b10 	vmov	r0, r1, d0
 8011b4a:	f7ee ffe5 	bl	8000b18 <__aeabi_dcmpeq>
 8011b4e:	b920      	cbnz	r0, 8011b5a <pow+0x222>
 8011b50:	4b2e      	ldr	r3, [pc, #184]	; (8011c0c <pow+0x2d4>)
 8011b52:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8011b56:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011b5a:	f998 3000 	ldrsb.w	r3, [r8]
 8011b5e:	2b02      	cmp	r3, #2
 8011b60:	d142      	bne.n	8011be8 <pow+0x2b0>
 8011b62:	f7fd fa25 	bl	800efb0 <__errno>
 8011b66:	2322      	movs	r3, #34	; 0x22
 8011b68:	e78d      	b.n	8011a86 <pow+0x14e>
 8011b6a:	4b29      	ldr	r3, [pc, #164]	; (8011c10 <pow+0x2d8>)
 8011b6c:	2200      	movs	r2, #0
 8011b6e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011b72:	4630      	mov	r0, r6
 8011b74:	4652      	mov	r2, sl
 8011b76:	465b      	mov	r3, fp
 8011b78:	4639      	mov	r1, r7
 8011b7a:	f7ee ffd7 	bl	8000b2c <__aeabi_dcmplt>
 8011b7e:	2800      	cmp	r0, #0
 8011b80:	d0eb      	beq.n	8011b5a <pow+0x222>
 8011b82:	ec45 4b10 	vmov	d0, r4, r5
 8011b86:	f000 feaf 	bl	80128e8 <rint>
 8011b8a:	4622      	mov	r2, r4
 8011b8c:	462b      	mov	r3, r5
 8011b8e:	ec51 0b10 	vmov	r0, r1, d0
 8011b92:	f7ee ffc1 	bl	8000b18 <__aeabi_dcmpeq>
 8011b96:	2800      	cmp	r0, #0
 8011b98:	d1df      	bne.n	8011b5a <pow+0x222>
 8011b9a:	2200      	movs	r2, #0
 8011b9c:	4b18      	ldr	r3, [pc, #96]	; (8011c00 <pow+0x2c8>)
 8011b9e:	e7da      	b.n	8011b56 <pow+0x21e>
 8011ba0:	2200      	movs	r2, #0
 8011ba2:	2300      	movs	r3, #0
 8011ba4:	ec51 0b18 	vmov	r0, r1, d8
 8011ba8:	f7ee ffb6 	bl	8000b18 <__aeabi_dcmpeq>
 8011bac:	2800      	cmp	r0, #0
 8011bae:	f43f af3a 	beq.w	8011a26 <pow+0xee>
 8011bb2:	ec47 6b10 	vmov	d0, r6, r7
 8011bb6:	f000 fe82 	bl	80128be <finite>
 8011bba:	2800      	cmp	r0, #0
 8011bbc:	f43f af33 	beq.w	8011a26 <pow+0xee>
 8011bc0:	ec45 4b10 	vmov	d0, r4, r5
 8011bc4:	f000 fe7b 	bl	80128be <finite>
 8011bc8:	2800      	cmp	r0, #0
 8011bca:	f43f af2c 	beq.w	8011a26 <pow+0xee>
 8011bce:	2304      	movs	r3, #4
 8011bd0:	9302      	str	r3, [sp, #8]
 8011bd2:	4b09      	ldr	r3, [pc, #36]	; (8011bf8 <pow+0x2c0>)
 8011bd4:	9303      	str	r3, [sp, #12]
 8011bd6:	2300      	movs	r3, #0
 8011bd8:	930a      	str	r3, [sp, #40]	; 0x28
 8011bda:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011bde:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8011be2:	ed8d 9b08 	vstr	d9, [sp, #32]
 8011be6:	e7b8      	b.n	8011b5a <pow+0x222>
 8011be8:	a802      	add	r0, sp, #8
 8011bea:	f000 fe70 	bl	80128ce <matherr>
 8011bee:	2800      	cmp	r0, #0
 8011bf0:	f47f af11 	bne.w	8011a16 <pow+0xde>
 8011bf4:	e7b5      	b.n	8011b62 <pow+0x22a>
 8011bf6:	bf00      	nop
 8011bf8:	080142ce 	.word	0x080142ce
 8011bfc:	3ff00000 	.word	0x3ff00000
 8011c00:	fff00000 	.word	0xfff00000
 8011c04:	3fe00000 	.word	0x3fe00000
 8011c08:	47efffff 	.word	0x47efffff
 8011c0c:	c7efffff 	.word	0xc7efffff
 8011c10:	7ff00000 	.word	0x7ff00000
 8011c14:	20001e7c 	.word	0x20001e7c

08011c18 <__ieee754_log10>:
 8011c18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011c1c:	ec55 4b10 	vmov	r4, r5, d0
 8011c20:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8011c24:	462b      	mov	r3, r5
 8011c26:	da2f      	bge.n	8011c88 <__ieee754_log10+0x70>
 8011c28:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8011c2c:	4322      	orrs	r2, r4
 8011c2e:	d10a      	bne.n	8011c46 <__ieee754_log10+0x2e>
 8011c30:	493b      	ldr	r1, [pc, #236]	; (8011d20 <__ieee754_log10+0x108>)
 8011c32:	2200      	movs	r2, #0
 8011c34:	2300      	movs	r3, #0
 8011c36:	2000      	movs	r0, #0
 8011c38:	f7ee fe30 	bl	800089c <__aeabi_ddiv>
 8011c3c:	ec41 0b10 	vmov	d0, r0, r1
 8011c40:	b003      	add	sp, #12
 8011c42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c46:	2d00      	cmp	r5, #0
 8011c48:	da08      	bge.n	8011c5c <__ieee754_log10+0x44>
 8011c4a:	ee10 2a10 	vmov	r2, s0
 8011c4e:	4620      	mov	r0, r4
 8011c50:	4629      	mov	r1, r5
 8011c52:	f7ee fb41 	bl	80002d8 <__aeabi_dsub>
 8011c56:	2200      	movs	r2, #0
 8011c58:	2300      	movs	r3, #0
 8011c5a:	e7ed      	b.n	8011c38 <__ieee754_log10+0x20>
 8011c5c:	2200      	movs	r2, #0
 8011c5e:	4b31      	ldr	r3, [pc, #196]	; (8011d24 <__ieee754_log10+0x10c>)
 8011c60:	4629      	mov	r1, r5
 8011c62:	ee10 0a10 	vmov	r0, s0
 8011c66:	f7ee fcef 	bl	8000648 <__aeabi_dmul>
 8011c6a:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8011c6e:	4604      	mov	r4, r0
 8011c70:	460d      	mov	r5, r1
 8011c72:	460b      	mov	r3, r1
 8011c74:	492c      	ldr	r1, [pc, #176]	; (8011d28 <__ieee754_log10+0x110>)
 8011c76:	428b      	cmp	r3, r1
 8011c78:	dd08      	ble.n	8011c8c <__ieee754_log10+0x74>
 8011c7a:	4622      	mov	r2, r4
 8011c7c:	462b      	mov	r3, r5
 8011c7e:	4620      	mov	r0, r4
 8011c80:	4629      	mov	r1, r5
 8011c82:	f7ee fb2b 	bl	80002dc <__adddf3>
 8011c86:	e7d9      	b.n	8011c3c <__ieee754_log10+0x24>
 8011c88:	2200      	movs	r2, #0
 8011c8a:	e7f3      	b.n	8011c74 <__ieee754_log10+0x5c>
 8011c8c:	1518      	asrs	r0, r3, #20
 8011c8e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8011c92:	4410      	add	r0, r2
 8011c94:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8011c98:	4448      	add	r0, r9
 8011c9a:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8011c9e:	f7ee fc69 	bl	8000574 <__aeabi_i2d>
 8011ca2:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8011ca6:	3303      	adds	r3, #3
 8011ca8:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8011cac:	ec45 4b10 	vmov	d0, r4, r5
 8011cb0:	4606      	mov	r6, r0
 8011cb2:	460f      	mov	r7, r1
 8011cb4:	f000 ff14 	bl	8012ae0 <__ieee754_log>
 8011cb8:	a313      	add	r3, pc, #76	; (adr r3, 8011d08 <__ieee754_log10+0xf0>)
 8011cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cbe:	4630      	mov	r0, r6
 8011cc0:	4639      	mov	r1, r7
 8011cc2:	ed8d 0b00 	vstr	d0, [sp]
 8011cc6:	f7ee fcbf 	bl	8000648 <__aeabi_dmul>
 8011cca:	ed9d 0b00 	vldr	d0, [sp]
 8011cce:	4604      	mov	r4, r0
 8011cd0:	460d      	mov	r5, r1
 8011cd2:	a30f      	add	r3, pc, #60	; (adr r3, 8011d10 <__ieee754_log10+0xf8>)
 8011cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cd8:	ec51 0b10 	vmov	r0, r1, d0
 8011cdc:	f7ee fcb4 	bl	8000648 <__aeabi_dmul>
 8011ce0:	4602      	mov	r2, r0
 8011ce2:	460b      	mov	r3, r1
 8011ce4:	4620      	mov	r0, r4
 8011ce6:	4629      	mov	r1, r5
 8011ce8:	f7ee faf8 	bl	80002dc <__adddf3>
 8011cec:	a30a      	add	r3, pc, #40	; (adr r3, 8011d18 <__ieee754_log10+0x100>)
 8011cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cf2:	4604      	mov	r4, r0
 8011cf4:	460d      	mov	r5, r1
 8011cf6:	4630      	mov	r0, r6
 8011cf8:	4639      	mov	r1, r7
 8011cfa:	f7ee fca5 	bl	8000648 <__aeabi_dmul>
 8011cfe:	4602      	mov	r2, r0
 8011d00:	460b      	mov	r3, r1
 8011d02:	4620      	mov	r0, r4
 8011d04:	4629      	mov	r1, r5
 8011d06:	e7bc      	b.n	8011c82 <__ieee754_log10+0x6a>
 8011d08:	11f12b36 	.word	0x11f12b36
 8011d0c:	3d59fef3 	.word	0x3d59fef3
 8011d10:	1526e50e 	.word	0x1526e50e
 8011d14:	3fdbcb7b 	.word	0x3fdbcb7b
 8011d18:	509f6000 	.word	0x509f6000
 8011d1c:	3fd34413 	.word	0x3fd34413
 8011d20:	c3500000 	.word	0xc3500000
 8011d24:	43500000 	.word	0x43500000
 8011d28:	7fefffff 	.word	0x7fefffff
 8011d2c:	00000000 	.word	0x00000000

08011d30 <__ieee754_pow>:
 8011d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d34:	b091      	sub	sp, #68	; 0x44
 8011d36:	ed8d 1b00 	vstr	d1, [sp]
 8011d3a:	e9dd 2900 	ldrd	r2, r9, [sp]
 8011d3e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8011d42:	ea58 0302 	orrs.w	r3, r8, r2
 8011d46:	ec57 6b10 	vmov	r6, r7, d0
 8011d4a:	f000 84be 	beq.w	80126ca <__ieee754_pow+0x99a>
 8011d4e:	4b7a      	ldr	r3, [pc, #488]	; (8011f38 <__ieee754_pow+0x208>)
 8011d50:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8011d54:	429c      	cmp	r4, r3
 8011d56:	463d      	mov	r5, r7
 8011d58:	ee10 aa10 	vmov	sl, s0
 8011d5c:	dc09      	bgt.n	8011d72 <__ieee754_pow+0x42>
 8011d5e:	d103      	bne.n	8011d68 <__ieee754_pow+0x38>
 8011d60:	b93e      	cbnz	r6, 8011d72 <__ieee754_pow+0x42>
 8011d62:	45a0      	cmp	r8, r4
 8011d64:	dc0d      	bgt.n	8011d82 <__ieee754_pow+0x52>
 8011d66:	e001      	b.n	8011d6c <__ieee754_pow+0x3c>
 8011d68:	4598      	cmp	r8, r3
 8011d6a:	dc02      	bgt.n	8011d72 <__ieee754_pow+0x42>
 8011d6c:	4598      	cmp	r8, r3
 8011d6e:	d10e      	bne.n	8011d8e <__ieee754_pow+0x5e>
 8011d70:	b16a      	cbz	r2, 8011d8e <__ieee754_pow+0x5e>
 8011d72:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011d76:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011d7a:	ea54 030a 	orrs.w	r3, r4, sl
 8011d7e:	f000 84a4 	beq.w	80126ca <__ieee754_pow+0x99a>
 8011d82:	486e      	ldr	r0, [pc, #440]	; (8011f3c <__ieee754_pow+0x20c>)
 8011d84:	b011      	add	sp, #68	; 0x44
 8011d86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d8a:	f000 bda5 	b.w	80128d8 <nan>
 8011d8e:	2d00      	cmp	r5, #0
 8011d90:	da53      	bge.n	8011e3a <__ieee754_pow+0x10a>
 8011d92:	4b6b      	ldr	r3, [pc, #428]	; (8011f40 <__ieee754_pow+0x210>)
 8011d94:	4598      	cmp	r8, r3
 8011d96:	dc4d      	bgt.n	8011e34 <__ieee754_pow+0x104>
 8011d98:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8011d9c:	4598      	cmp	r8, r3
 8011d9e:	dd4c      	ble.n	8011e3a <__ieee754_pow+0x10a>
 8011da0:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011da4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011da8:	2b14      	cmp	r3, #20
 8011daa:	dd26      	ble.n	8011dfa <__ieee754_pow+0xca>
 8011dac:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8011db0:	fa22 f103 	lsr.w	r1, r2, r3
 8011db4:	fa01 f303 	lsl.w	r3, r1, r3
 8011db8:	4293      	cmp	r3, r2
 8011dba:	d13e      	bne.n	8011e3a <__ieee754_pow+0x10a>
 8011dbc:	f001 0101 	and.w	r1, r1, #1
 8011dc0:	f1c1 0b02 	rsb	fp, r1, #2
 8011dc4:	2a00      	cmp	r2, #0
 8011dc6:	d15b      	bne.n	8011e80 <__ieee754_pow+0x150>
 8011dc8:	4b5b      	ldr	r3, [pc, #364]	; (8011f38 <__ieee754_pow+0x208>)
 8011dca:	4598      	cmp	r8, r3
 8011dcc:	d124      	bne.n	8011e18 <__ieee754_pow+0xe8>
 8011dce:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8011dd2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8011dd6:	ea53 030a 	orrs.w	r3, r3, sl
 8011dda:	f000 8476 	beq.w	80126ca <__ieee754_pow+0x99a>
 8011dde:	4b59      	ldr	r3, [pc, #356]	; (8011f44 <__ieee754_pow+0x214>)
 8011de0:	429c      	cmp	r4, r3
 8011de2:	dd2d      	ble.n	8011e40 <__ieee754_pow+0x110>
 8011de4:	f1b9 0f00 	cmp.w	r9, #0
 8011de8:	f280 8473 	bge.w	80126d2 <__ieee754_pow+0x9a2>
 8011dec:	2000      	movs	r0, #0
 8011dee:	2100      	movs	r1, #0
 8011df0:	ec41 0b10 	vmov	d0, r0, r1
 8011df4:	b011      	add	sp, #68	; 0x44
 8011df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dfa:	2a00      	cmp	r2, #0
 8011dfc:	d13e      	bne.n	8011e7c <__ieee754_pow+0x14c>
 8011dfe:	f1c3 0314 	rsb	r3, r3, #20
 8011e02:	fa48 f103 	asr.w	r1, r8, r3
 8011e06:	fa01 f303 	lsl.w	r3, r1, r3
 8011e0a:	4543      	cmp	r3, r8
 8011e0c:	f040 8469 	bne.w	80126e2 <__ieee754_pow+0x9b2>
 8011e10:	f001 0101 	and.w	r1, r1, #1
 8011e14:	f1c1 0b02 	rsb	fp, r1, #2
 8011e18:	4b4b      	ldr	r3, [pc, #300]	; (8011f48 <__ieee754_pow+0x218>)
 8011e1a:	4598      	cmp	r8, r3
 8011e1c:	d118      	bne.n	8011e50 <__ieee754_pow+0x120>
 8011e1e:	f1b9 0f00 	cmp.w	r9, #0
 8011e22:	f280 845a 	bge.w	80126da <__ieee754_pow+0x9aa>
 8011e26:	4948      	ldr	r1, [pc, #288]	; (8011f48 <__ieee754_pow+0x218>)
 8011e28:	4632      	mov	r2, r6
 8011e2a:	463b      	mov	r3, r7
 8011e2c:	2000      	movs	r0, #0
 8011e2e:	f7ee fd35 	bl	800089c <__aeabi_ddiv>
 8011e32:	e7dd      	b.n	8011df0 <__ieee754_pow+0xc0>
 8011e34:	f04f 0b02 	mov.w	fp, #2
 8011e38:	e7c4      	b.n	8011dc4 <__ieee754_pow+0x94>
 8011e3a:	f04f 0b00 	mov.w	fp, #0
 8011e3e:	e7c1      	b.n	8011dc4 <__ieee754_pow+0x94>
 8011e40:	f1b9 0f00 	cmp.w	r9, #0
 8011e44:	dad2      	bge.n	8011dec <__ieee754_pow+0xbc>
 8011e46:	e9dd 0300 	ldrd	r0, r3, [sp]
 8011e4a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011e4e:	e7cf      	b.n	8011df0 <__ieee754_pow+0xc0>
 8011e50:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8011e54:	d106      	bne.n	8011e64 <__ieee754_pow+0x134>
 8011e56:	4632      	mov	r2, r6
 8011e58:	463b      	mov	r3, r7
 8011e5a:	4610      	mov	r0, r2
 8011e5c:	4619      	mov	r1, r3
 8011e5e:	f7ee fbf3 	bl	8000648 <__aeabi_dmul>
 8011e62:	e7c5      	b.n	8011df0 <__ieee754_pow+0xc0>
 8011e64:	4b39      	ldr	r3, [pc, #228]	; (8011f4c <__ieee754_pow+0x21c>)
 8011e66:	4599      	cmp	r9, r3
 8011e68:	d10a      	bne.n	8011e80 <__ieee754_pow+0x150>
 8011e6a:	2d00      	cmp	r5, #0
 8011e6c:	db08      	blt.n	8011e80 <__ieee754_pow+0x150>
 8011e6e:	ec47 6b10 	vmov	d0, r6, r7
 8011e72:	b011      	add	sp, #68	; 0x44
 8011e74:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e78:	f000 bc68 	b.w	801274c <__ieee754_sqrt>
 8011e7c:	f04f 0b00 	mov.w	fp, #0
 8011e80:	ec47 6b10 	vmov	d0, r6, r7
 8011e84:	f000 fd12 	bl	80128ac <fabs>
 8011e88:	ec51 0b10 	vmov	r0, r1, d0
 8011e8c:	f1ba 0f00 	cmp.w	sl, #0
 8011e90:	d127      	bne.n	8011ee2 <__ieee754_pow+0x1b2>
 8011e92:	b124      	cbz	r4, 8011e9e <__ieee754_pow+0x16e>
 8011e94:	4b2c      	ldr	r3, [pc, #176]	; (8011f48 <__ieee754_pow+0x218>)
 8011e96:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8011e9a:	429a      	cmp	r2, r3
 8011e9c:	d121      	bne.n	8011ee2 <__ieee754_pow+0x1b2>
 8011e9e:	f1b9 0f00 	cmp.w	r9, #0
 8011ea2:	da05      	bge.n	8011eb0 <__ieee754_pow+0x180>
 8011ea4:	4602      	mov	r2, r0
 8011ea6:	460b      	mov	r3, r1
 8011ea8:	2000      	movs	r0, #0
 8011eaa:	4927      	ldr	r1, [pc, #156]	; (8011f48 <__ieee754_pow+0x218>)
 8011eac:	f7ee fcf6 	bl	800089c <__aeabi_ddiv>
 8011eb0:	2d00      	cmp	r5, #0
 8011eb2:	da9d      	bge.n	8011df0 <__ieee754_pow+0xc0>
 8011eb4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011eb8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011ebc:	ea54 030b 	orrs.w	r3, r4, fp
 8011ec0:	d108      	bne.n	8011ed4 <__ieee754_pow+0x1a4>
 8011ec2:	4602      	mov	r2, r0
 8011ec4:	460b      	mov	r3, r1
 8011ec6:	4610      	mov	r0, r2
 8011ec8:	4619      	mov	r1, r3
 8011eca:	f7ee fa05 	bl	80002d8 <__aeabi_dsub>
 8011ece:	4602      	mov	r2, r0
 8011ed0:	460b      	mov	r3, r1
 8011ed2:	e7ac      	b.n	8011e2e <__ieee754_pow+0xfe>
 8011ed4:	f1bb 0f01 	cmp.w	fp, #1
 8011ed8:	d18a      	bne.n	8011df0 <__ieee754_pow+0xc0>
 8011eda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011ede:	4619      	mov	r1, r3
 8011ee0:	e786      	b.n	8011df0 <__ieee754_pow+0xc0>
 8011ee2:	0fed      	lsrs	r5, r5, #31
 8011ee4:	1e6b      	subs	r3, r5, #1
 8011ee6:	930d      	str	r3, [sp, #52]	; 0x34
 8011ee8:	ea5b 0303 	orrs.w	r3, fp, r3
 8011eec:	d102      	bne.n	8011ef4 <__ieee754_pow+0x1c4>
 8011eee:	4632      	mov	r2, r6
 8011ef0:	463b      	mov	r3, r7
 8011ef2:	e7e8      	b.n	8011ec6 <__ieee754_pow+0x196>
 8011ef4:	4b16      	ldr	r3, [pc, #88]	; (8011f50 <__ieee754_pow+0x220>)
 8011ef6:	4598      	cmp	r8, r3
 8011ef8:	f340 80fe 	ble.w	80120f8 <__ieee754_pow+0x3c8>
 8011efc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8011f00:	4598      	cmp	r8, r3
 8011f02:	dd0a      	ble.n	8011f1a <__ieee754_pow+0x1ea>
 8011f04:	4b0f      	ldr	r3, [pc, #60]	; (8011f44 <__ieee754_pow+0x214>)
 8011f06:	429c      	cmp	r4, r3
 8011f08:	dc0d      	bgt.n	8011f26 <__ieee754_pow+0x1f6>
 8011f0a:	f1b9 0f00 	cmp.w	r9, #0
 8011f0e:	f6bf af6d 	bge.w	8011dec <__ieee754_pow+0xbc>
 8011f12:	a307      	add	r3, pc, #28	; (adr r3, 8011f30 <__ieee754_pow+0x200>)
 8011f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f18:	e79f      	b.n	8011e5a <__ieee754_pow+0x12a>
 8011f1a:	4b0e      	ldr	r3, [pc, #56]	; (8011f54 <__ieee754_pow+0x224>)
 8011f1c:	429c      	cmp	r4, r3
 8011f1e:	ddf4      	ble.n	8011f0a <__ieee754_pow+0x1da>
 8011f20:	4b09      	ldr	r3, [pc, #36]	; (8011f48 <__ieee754_pow+0x218>)
 8011f22:	429c      	cmp	r4, r3
 8011f24:	dd18      	ble.n	8011f58 <__ieee754_pow+0x228>
 8011f26:	f1b9 0f00 	cmp.w	r9, #0
 8011f2a:	dcf2      	bgt.n	8011f12 <__ieee754_pow+0x1e2>
 8011f2c:	e75e      	b.n	8011dec <__ieee754_pow+0xbc>
 8011f2e:	bf00      	nop
 8011f30:	8800759c 	.word	0x8800759c
 8011f34:	7e37e43c 	.word	0x7e37e43c
 8011f38:	7ff00000 	.word	0x7ff00000
 8011f3c:	080141b1 	.word	0x080141b1
 8011f40:	433fffff 	.word	0x433fffff
 8011f44:	3fefffff 	.word	0x3fefffff
 8011f48:	3ff00000 	.word	0x3ff00000
 8011f4c:	3fe00000 	.word	0x3fe00000
 8011f50:	41e00000 	.word	0x41e00000
 8011f54:	3feffffe 	.word	0x3feffffe
 8011f58:	2200      	movs	r2, #0
 8011f5a:	4b63      	ldr	r3, [pc, #396]	; (80120e8 <__ieee754_pow+0x3b8>)
 8011f5c:	f7ee f9bc 	bl	80002d8 <__aeabi_dsub>
 8011f60:	a355      	add	r3, pc, #340	; (adr r3, 80120b8 <__ieee754_pow+0x388>)
 8011f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f66:	4604      	mov	r4, r0
 8011f68:	460d      	mov	r5, r1
 8011f6a:	f7ee fb6d 	bl	8000648 <__aeabi_dmul>
 8011f6e:	a354      	add	r3, pc, #336	; (adr r3, 80120c0 <__ieee754_pow+0x390>)
 8011f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f74:	4606      	mov	r6, r0
 8011f76:	460f      	mov	r7, r1
 8011f78:	4620      	mov	r0, r4
 8011f7a:	4629      	mov	r1, r5
 8011f7c:	f7ee fb64 	bl	8000648 <__aeabi_dmul>
 8011f80:	2200      	movs	r2, #0
 8011f82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011f86:	4b59      	ldr	r3, [pc, #356]	; (80120ec <__ieee754_pow+0x3bc>)
 8011f88:	4620      	mov	r0, r4
 8011f8a:	4629      	mov	r1, r5
 8011f8c:	f7ee fb5c 	bl	8000648 <__aeabi_dmul>
 8011f90:	4602      	mov	r2, r0
 8011f92:	460b      	mov	r3, r1
 8011f94:	a14c      	add	r1, pc, #304	; (adr r1, 80120c8 <__ieee754_pow+0x398>)
 8011f96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011f9a:	f7ee f99d 	bl	80002d8 <__aeabi_dsub>
 8011f9e:	4622      	mov	r2, r4
 8011fa0:	462b      	mov	r3, r5
 8011fa2:	f7ee fb51 	bl	8000648 <__aeabi_dmul>
 8011fa6:	4602      	mov	r2, r0
 8011fa8:	460b      	mov	r3, r1
 8011faa:	2000      	movs	r0, #0
 8011fac:	4950      	ldr	r1, [pc, #320]	; (80120f0 <__ieee754_pow+0x3c0>)
 8011fae:	f7ee f993 	bl	80002d8 <__aeabi_dsub>
 8011fb2:	4622      	mov	r2, r4
 8011fb4:	462b      	mov	r3, r5
 8011fb6:	4680      	mov	r8, r0
 8011fb8:	4689      	mov	r9, r1
 8011fba:	4620      	mov	r0, r4
 8011fbc:	4629      	mov	r1, r5
 8011fbe:	f7ee fb43 	bl	8000648 <__aeabi_dmul>
 8011fc2:	4602      	mov	r2, r0
 8011fc4:	460b      	mov	r3, r1
 8011fc6:	4640      	mov	r0, r8
 8011fc8:	4649      	mov	r1, r9
 8011fca:	f7ee fb3d 	bl	8000648 <__aeabi_dmul>
 8011fce:	a340      	add	r3, pc, #256	; (adr r3, 80120d0 <__ieee754_pow+0x3a0>)
 8011fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fd4:	f7ee fb38 	bl	8000648 <__aeabi_dmul>
 8011fd8:	4602      	mov	r2, r0
 8011fda:	460b      	mov	r3, r1
 8011fdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011fe0:	f7ee f97a 	bl	80002d8 <__aeabi_dsub>
 8011fe4:	4602      	mov	r2, r0
 8011fe6:	460b      	mov	r3, r1
 8011fe8:	4604      	mov	r4, r0
 8011fea:	460d      	mov	r5, r1
 8011fec:	4630      	mov	r0, r6
 8011fee:	4639      	mov	r1, r7
 8011ff0:	f7ee f974 	bl	80002dc <__adddf3>
 8011ff4:	2000      	movs	r0, #0
 8011ff6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011ffa:	4632      	mov	r2, r6
 8011ffc:	463b      	mov	r3, r7
 8011ffe:	f7ee f96b 	bl	80002d8 <__aeabi_dsub>
 8012002:	4602      	mov	r2, r0
 8012004:	460b      	mov	r3, r1
 8012006:	4620      	mov	r0, r4
 8012008:	4629      	mov	r1, r5
 801200a:	f7ee f965 	bl	80002d8 <__aeabi_dsub>
 801200e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012010:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8012014:	4313      	orrs	r3, r2
 8012016:	4606      	mov	r6, r0
 8012018:	460f      	mov	r7, r1
 801201a:	f040 81eb 	bne.w	80123f4 <__ieee754_pow+0x6c4>
 801201e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80120d8 <__ieee754_pow+0x3a8>
 8012022:	e9dd 4500 	ldrd	r4, r5, [sp]
 8012026:	2400      	movs	r4, #0
 8012028:	4622      	mov	r2, r4
 801202a:	462b      	mov	r3, r5
 801202c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012030:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012034:	f7ee f950 	bl	80002d8 <__aeabi_dsub>
 8012038:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801203c:	f7ee fb04 	bl	8000648 <__aeabi_dmul>
 8012040:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012044:	4680      	mov	r8, r0
 8012046:	4689      	mov	r9, r1
 8012048:	4630      	mov	r0, r6
 801204a:	4639      	mov	r1, r7
 801204c:	f7ee fafc 	bl	8000648 <__aeabi_dmul>
 8012050:	4602      	mov	r2, r0
 8012052:	460b      	mov	r3, r1
 8012054:	4640      	mov	r0, r8
 8012056:	4649      	mov	r1, r9
 8012058:	f7ee f940 	bl	80002dc <__adddf3>
 801205c:	4622      	mov	r2, r4
 801205e:	462b      	mov	r3, r5
 8012060:	4680      	mov	r8, r0
 8012062:	4689      	mov	r9, r1
 8012064:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012068:	f7ee faee 	bl	8000648 <__aeabi_dmul>
 801206c:	460b      	mov	r3, r1
 801206e:	4604      	mov	r4, r0
 8012070:	460d      	mov	r5, r1
 8012072:	4602      	mov	r2, r0
 8012074:	4649      	mov	r1, r9
 8012076:	4640      	mov	r0, r8
 8012078:	e9cd 4500 	strd	r4, r5, [sp]
 801207c:	f7ee f92e 	bl	80002dc <__adddf3>
 8012080:	4b1c      	ldr	r3, [pc, #112]	; (80120f4 <__ieee754_pow+0x3c4>)
 8012082:	4299      	cmp	r1, r3
 8012084:	4606      	mov	r6, r0
 8012086:	460f      	mov	r7, r1
 8012088:	468b      	mov	fp, r1
 801208a:	f340 82f7 	ble.w	801267c <__ieee754_pow+0x94c>
 801208e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8012092:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8012096:	4303      	orrs	r3, r0
 8012098:	f000 81ea 	beq.w	8012470 <__ieee754_pow+0x740>
 801209c:	a310      	add	r3, pc, #64	; (adr r3, 80120e0 <__ieee754_pow+0x3b0>)
 801209e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80120a6:	f7ee facf 	bl	8000648 <__aeabi_dmul>
 80120aa:	a30d      	add	r3, pc, #52	; (adr r3, 80120e0 <__ieee754_pow+0x3b0>)
 80120ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120b0:	e6d5      	b.n	8011e5e <__ieee754_pow+0x12e>
 80120b2:	bf00      	nop
 80120b4:	f3af 8000 	nop.w
 80120b8:	60000000 	.word	0x60000000
 80120bc:	3ff71547 	.word	0x3ff71547
 80120c0:	f85ddf44 	.word	0xf85ddf44
 80120c4:	3e54ae0b 	.word	0x3e54ae0b
 80120c8:	55555555 	.word	0x55555555
 80120cc:	3fd55555 	.word	0x3fd55555
 80120d0:	652b82fe 	.word	0x652b82fe
 80120d4:	3ff71547 	.word	0x3ff71547
 80120d8:	00000000 	.word	0x00000000
 80120dc:	bff00000 	.word	0xbff00000
 80120e0:	8800759c 	.word	0x8800759c
 80120e4:	7e37e43c 	.word	0x7e37e43c
 80120e8:	3ff00000 	.word	0x3ff00000
 80120ec:	3fd00000 	.word	0x3fd00000
 80120f0:	3fe00000 	.word	0x3fe00000
 80120f4:	408fffff 	.word	0x408fffff
 80120f8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80120fc:	f04f 0200 	mov.w	r2, #0
 8012100:	da05      	bge.n	801210e <__ieee754_pow+0x3de>
 8012102:	4bd3      	ldr	r3, [pc, #844]	; (8012450 <__ieee754_pow+0x720>)
 8012104:	f7ee faa0 	bl	8000648 <__aeabi_dmul>
 8012108:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801210c:	460c      	mov	r4, r1
 801210e:	1523      	asrs	r3, r4, #20
 8012110:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012114:	4413      	add	r3, r2
 8012116:	9309      	str	r3, [sp, #36]	; 0x24
 8012118:	4bce      	ldr	r3, [pc, #824]	; (8012454 <__ieee754_pow+0x724>)
 801211a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801211e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8012122:	429c      	cmp	r4, r3
 8012124:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8012128:	dd08      	ble.n	801213c <__ieee754_pow+0x40c>
 801212a:	4bcb      	ldr	r3, [pc, #812]	; (8012458 <__ieee754_pow+0x728>)
 801212c:	429c      	cmp	r4, r3
 801212e:	f340 815e 	ble.w	80123ee <__ieee754_pow+0x6be>
 8012132:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012134:	3301      	adds	r3, #1
 8012136:	9309      	str	r3, [sp, #36]	; 0x24
 8012138:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801213c:	f04f 0a00 	mov.w	sl, #0
 8012140:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8012144:	930c      	str	r3, [sp, #48]	; 0x30
 8012146:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012148:	4bc4      	ldr	r3, [pc, #784]	; (801245c <__ieee754_pow+0x72c>)
 801214a:	4413      	add	r3, r2
 801214c:	ed93 7b00 	vldr	d7, [r3]
 8012150:	4629      	mov	r1, r5
 8012152:	ec53 2b17 	vmov	r2, r3, d7
 8012156:	ed8d 7b06 	vstr	d7, [sp, #24]
 801215a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801215e:	f7ee f8bb 	bl	80002d8 <__aeabi_dsub>
 8012162:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012166:	4606      	mov	r6, r0
 8012168:	460f      	mov	r7, r1
 801216a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801216e:	f7ee f8b5 	bl	80002dc <__adddf3>
 8012172:	4602      	mov	r2, r0
 8012174:	460b      	mov	r3, r1
 8012176:	2000      	movs	r0, #0
 8012178:	49b9      	ldr	r1, [pc, #740]	; (8012460 <__ieee754_pow+0x730>)
 801217a:	f7ee fb8f 	bl	800089c <__aeabi_ddiv>
 801217e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8012182:	4602      	mov	r2, r0
 8012184:	460b      	mov	r3, r1
 8012186:	4630      	mov	r0, r6
 8012188:	4639      	mov	r1, r7
 801218a:	f7ee fa5d 	bl	8000648 <__aeabi_dmul>
 801218e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012192:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8012196:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801219a:	2300      	movs	r3, #0
 801219c:	9302      	str	r3, [sp, #8]
 801219e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80121a2:	106d      	asrs	r5, r5, #1
 80121a4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80121a8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80121ac:	2200      	movs	r2, #0
 80121ae:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80121b2:	4640      	mov	r0, r8
 80121b4:	4649      	mov	r1, r9
 80121b6:	4614      	mov	r4, r2
 80121b8:	461d      	mov	r5, r3
 80121ba:	f7ee fa45 	bl	8000648 <__aeabi_dmul>
 80121be:	4602      	mov	r2, r0
 80121c0:	460b      	mov	r3, r1
 80121c2:	4630      	mov	r0, r6
 80121c4:	4639      	mov	r1, r7
 80121c6:	f7ee f887 	bl	80002d8 <__aeabi_dsub>
 80121ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80121ce:	4606      	mov	r6, r0
 80121d0:	460f      	mov	r7, r1
 80121d2:	4620      	mov	r0, r4
 80121d4:	4629      	mov	r1, r5
 80121d6:	f7ee f87f 	bl	80002d8 <__aeabi_dsub>
 80121da:	4602      	mov	r2, r0
 80121dc:	460b      	mov	r3, r1
 80121de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80121e2:	f7ee f879 	bl	80002d8 <__aeabi_dsub>
 80121e6:	4642      	mov	r2, r8
 80121e8:	464b      	mov	r3, r9
 80121ea:	f7ee fa2d 	bl	8000648 <__aeabi_dmul>
 80121ee:	4602      	mov	r2, r0
 80121f0:	460b      	mov	r3, r1
 80121f2:	4630      	mov	r0, r6
 80121f4:	4639      	mov	r1, r7
 80121f6:	f7ee f86f 	bl	80002d8 <__aeabi_dsub>
 80121fa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80121fe:	f7ee fa23 	bl	8000648 <__aeabi_dmul>
 8012202:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012206:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801220a:	4610      	mov	r0, r2
 801220c:	4619      	mov	r1, r3
 801220e:	f7ee fa1b 	bl	8000648 <__aeabi_dmul>
 8012212:	a37b      	add	r3, pc, #492	; (adr r3, 8012400 <__ieee754_pow+0x6d0>)
 8012214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012218:	4604      	mov	r4, r0
 801221a:	460d      	mov	r5, r1
 801221c:	f7ee fa14 	bl	8000648 <__aeabi_dmul>
 8012220:	a379      	add	r3, pc, #484	; (adr r3, 8012408 <__ieee754_pow+0x6d8>)
 8012222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012226:	f7ee f859 	bl	80002dc <__adddf3>
 801222a:	4622      	mov	r2, r4
 801222c:	462b      	mov	r3, r5
 801222e:	f7ee fa0b 	bl	8000648 <__aeabi_dmul>
 8012232:	a377      	add	r3, pc, #476	; (adr r3, 8012410 <__ieee754_pow+0x6e0>)
 8012234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012238:	f7ee f850 	bl	80002dc <__adddf3>
 801223c:	4622      	mov	r2, r4
 801223e:	462b      	mov	r3, r5
 8012240:	f7ee fa02 	bl	8000648 <__aeabi_dmul>
 8012244:	a374      	add	r3, pc, #464	; (adr r3, 8012418 <__ieee754_pow+0x6e8>)
 8012246:	e9d3 2300 	ldrd	r2, r3, [r3]
 801224a:	f7ee f847 	bl	80002dc <__adddf3>
 801224e:	4622      	mov	r2, r4
 8012250:	462b      	mov	r3, r5
 8012252:	f7ee f9f9 	bl	8000648 <__aeabi_dmul>
 8012256:	a372      	add	r3, pc, #456	; (adr r3, 8012420 <__ieee754_pow+0x6f0>)
 8012258:	e9d3 2300 	ldrd	r2, r3, [r3]
 801225c:	f7ee f83e 	bl	80002dc <__adddf3>
 8012260:	4622      	mov	r2, r4
 8012262:	462b      	mov	r3, r5
 8012264:	f7ee f9f0 	bl	8000648 <__aeabi_dmul>
 8012268:	a36f      	add	r3, pc, #444	; (adr r3, 8012428 <__ieee754_pow+0x6f8>)
 801226a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801226e:	f7ee f835 	bl	80002dc <__adddf3>
 8012272:	4622      	mov	r2, r4
 8012274:	4606      	mov	r6, r0
 8012276:	460f      	mov	r7, r1
 8012278:	462b      	mov	r3, r5
 801227a:	4620      	mov	r0, r4
 801227c:	4629      	mov	r1, r5
 801227e:	f7ee f9e3 	bl	8000648 <__aeabi_dmul>
 8012282:	4602      	mov	r2, r0
 8012284:	460b      	mov	r3, r1
 8012286:	4630      	mov	r0, r6
 8012288:	4639      	mov	r1, r7
 801228a:	f7ee f9dd 	bl	8000648 <__aeabi_dmul>
 801228e:	4642      	mov	r2, r8
 8012290:	4604      	mov	r4, r0
 8012292:	460d      	mov	r5, r1
 8012294:	464b      	mov	r3, r9
 8012296:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801229a:	f7ee f81f 	bl	80002dc <__adddf3>
 801229e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80122a2:	f7ee f9d1 	bl	8000648 <__aeabi_dmul>
 80122a6:	4622      	mov	r2, r4
 80122a8:	462b      	mov	r3, r5
 80122aa:	f7ee f817 	bl	80002dc <__adddf3>
 80122ae:	4642      	mov	r2, r8
 80122b0:	4606      	mov	r6, r0
 80122b2:	460f      	mov	r7, r1
 80122b4:	464b      	mov	r3, r9
 80122b6:	4640      	mov	r0, r8
 80122b8:	4649      	mov	r1, r9
 80122ba:	f7ee f9c5 	bl	8000648 <__aeabi_dmul>
 80122be:	2200      	movs	r2, #0
 80122c0:	4b68      	ldr	r3, [pc, #416]	; (8012464 <__ieee754_pow+0x734>)
 80122c2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80122c6:	f7ee f809 	bl	80002dc <__adddf3>
 80122ca:	4632      	mov	r2, r6
 80122cc:	463b      	mov	r3, r7
 80122ce:	f7ee f805 	bl	80002dc <__adddf3>
 80122d2:	9802      	ldr	r0, [sp, #8]
 80122d4:	460d      	mov	r5, r1
 80122d6:	4604      	mov	r4, r0
 80122d8:	4602      	mov	r2, r0
 80122da:	460b      	mov	r3, r1
 80122dc:	4640      	mov	r0, r8
 80122de:	4649      	mov	r1, r9
 80122e0:	f7ee f9b2 	bl	8000648 <__aeabi_dmul>
 80122e4:	2200      	movs	r2, #0
 80122e6:	4680      	mov	r8, r0
 80122e8:	4689      	mov	r9, r1
 80122ea:	4b5e      	ldr	r3, [pc, #376]	; (8012464 <__ieee754_pow+0x734>)
 80122ec:	4620      	mov	r0, r4
 80122ee:	4629      	mov	r1, r5
 80122f0:	f7ed fff2 	bl	80002d8 <__aeabi_dsub>
 80122f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80122f8:	f7ed ffee 	bl	80002d8 <__aeabi_dsub>
 80122fc:	4602      	mov	r2, r0
 80122fe:	460b      	mov	r3, r1
 8012300:	4630      	mov	r0, r6
 8012302:	4639      	mov	r1, r7
 8012304:	f7ed ffe8 	bl	80002d8 <__aeabi_dsub>
 8012308:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801230c:	f7ee f99c 	bl	8000648 <__aeabi_dmul>
 8012310:	4622      	mov	r2, r4
 8012312:	4606      	mov	r6, r0
 8012314:	460f      	mov	r7, r1
 8012316:	462b      	mov	r3, r5
 8012318:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801231c:	f7ee f994 	bl	8000648 <__aeabi_dmul>
 8012320:	4602      	mov	r2, r0
 8012322:	460b      	mov	r3, r1
 8012324:	4630      	mov	r0, r6
 8012326:	4639      	mov	r1, r7
 8012328:	f7ed ffd8 	bl	80002dc <__adddf3>
 801232c:	4606      	mov	r6, r0
 801232e:	460f      	mov	r7, r1
 8012330:	4602      	mov	r2, r0
 8012332:	460b      	mov	r3, r1
 8012334:	4640      	mov	r0, r8
 8012336:	4649      	mov	r1, r9
 8012338:	f7ed ffd0 	bl	80002dc <__adddf3>
 801233c:	9802      	ldr	r0, [sp, #8]
 801233e:	a33c      	add	r3, pc, #240	; (adr r3, 8012430 <__ieee754_pow+0x700>)
 8012340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012344:	4604      	mov	r4, r0
 8012346:	460d      	mov	r5, r1
 8012348:	f7ee f97e 	bl	8000648 <__aeabi_dmul>
 801234c:	4642      	mov	r2, r8
 801234e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012352:	464b      	mov	r3, r9
 8012354:	4620      	mov	r0, r4
 8012356:	4629      	mov	r1, r5
 8012358:	f7ed ffbe 	bl	80002d8 <__aeabi_dsub>
 801235c:	4602      	mov	r2, r0
 801235e:	460b      	mov	r3, r1
 8012360:	4630      	mov	r0, r6
 8012362:	4639      	mov	r1, r7
 8012364:	f7ed ffb8 	bl	80002d8 <__aeabi_dsub>
 8012368:	a333      	add	r3, pc, #204	; (adr r3, 8012438 <__ieee754_pow+0x708>)
 801236a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801236e:	f7ee f96b 	bl	8000648 <__aeabi_dmul>
 8012372:	a333      	add	r3, pc, #204	; (adr r3, 8012440 <__ieee754_pow+0x710>)
 8012374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012378:	4606      	mov	r6, r0
 801237a:	460f      	mov	r7, r1
 801237c:	4620      	mov	r0, r4
 801237e:	4629      	mov	r1, r5
 8012380:	f7ee f962 	bl	8000648 <__aeabi_dmul>
 8012384:	4602      	mov	r2, r0
 8012386:	460b      	mov	r3, r1
 8012388:	4630      	mov	r0, r6
 801238a:	4639      	mov	r1, r7
 801238c:	f7ed ffa6 	bl	80002dc <__adddf3>
 8012390:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012392:	4b35      	ldr	r3, [pc, #212]	; (8012468 <__ieee754_pow+0x738>)
 8012394:	4413      	add	r3, r2
 8012396:	e9d3 2300 	ldrd	r2, r3, [r3]
 801239a:	f7ed ff9f 	bl	80002dc <__adddf3>
 801239e:	4604      	mov	r4, r0
 80123a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80123a2:	460d      	mov	r5, r1
 80123a4:	f7ee f8e6 	bl	8000574 <__aeabi_i2d>
 80123a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80123aa:	4b30      	ldr	r3, [pc, #192]	; (801246c <__ieee754_pow+0x73c>)
 80123ac:	4413      	add	r3, r2
 80123ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80123b2:	4606      	mov	r6, r0
 80123b4:	460f      	mov	r7, r1
 80123b6:	4622      	mov	r2, r4
 80123b8:	462b      	mov	r3, r5
 80123ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80123be:	f7ed ff8d 	bl	80002dc <__adddf3>
 80123c2:	4642      	mov	r2, r8
 80123c4:	464b      	mov	r3, r9
 80123c6:	f7ed ff89 	bl	80002dc <__adddf3>
 80123ca:	4632      	mov	r2, r6
 80123cc:	463b      	mov	r3, r7
 80123ce:	f7ed ff85 	bl	80002dc <__adddf3>
 80123d2:	9802      	ldr	r0, [sp, #8]
 80123d4:	4632      	mov	r2, r6
 80123d6:	463b      	mov	r3, r7
 80123d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80123dc:	f7ed ff7c 	bl	80002d8 <__aeabi_dsub>
 80123e0:	4642      	mov	r2, r8
 80123e2:	464b      	mov	r3, r9
 80123e4:	f7ed ff78 	bl	80002d8 <__aeabi_dsub>
 80123e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80123ec:	e607      	b.n	8011ffe <__ieee754_pow+0x2ce>
 80123ee:	f04f 0a01 	mov.w	sl, #1
 80123f2:	e6a5      	b.n	8012140 <__ieee754_pow+0x410>
 80123f4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8012448 <__ieee754_pow+0x718>
 80123f8:	e613      	b.n	8012022 <__ieee754_pow+0x2f2>
 80123fa:	bf00      	nop
 80123fc:	f3af 8000 	nop.w
 8012400:	4a454eef 	.word	0x4a454eef
 8012404:	3fca7e28 	.word	0x3fca7e28
 8012408:	93c9db65 	.word	0x93c9db65
 801240c:	3fcd864a 	.word	0x3fcd864a
 8012410:	a91d4101 	.word	0xa91d4101
 8012414:	3fd17460 	.word	0x3fd17460
 8012418:	518f264d 	.word	0x518f264d
 801241c:	3fd55555 	.word	0x3fd55555
 8012420:	db6fabff 	.word	0xdb6fabff
 8012424:	3fdb6db6 	.word	0x3fdb6db6
 8012428:	33333303 	.word	0x33333303
 801242c:	3fe33333 	.word	0x3fe33333
 8012430:	e0000000 	.word	0xe0000000
 8012434:	3feec709 	.word	0x3feec709
 8012438:	dc3a03fd 	.word	0xdc3a03fd
 801243c:	3feec709 	.word	0x3feec709
 8012440:	145b01f5 	.word	0x145b01f5
 8012444:	be3e2fe0 	.word	0xbe3e2fe0
 8012448:	00000000 	.word	0x00000000
 801244c:	3ff00000 	.word	0x3ff00000
 8012450:	43400000 	.word	0x43400000
 8012454:	0003988e 	.word	0x0003988e
 8012458:	000bb679 	.word	0x000bb679
 801245c:	080142d8 	.word	0x080142d8
 8012460:	3ff00000 	.word	0x3ff00000
 8012464:	40080000 	.word	0x40080000
 8012468:	080142f8 	.word	0x080142f8
 801246c:	080142e8 	.word	0x080142e8
 8012470:	a3b4      	add	r3, pc, #720	; (adr r3, 8012744 <__ieee754_pow+0xa14>)
 8012472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012476:	4640      	mov	r0, r8
 8012478:	4649      	mov	r1, r9
 801247a:	f7ed ff2f 	bl	80002dc <__adddf3>
 801247e:	4622      	mov	r2, r4
 8012480:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012484:	462b      	mov	r3, r5
 8012486:	4630      	mov	r0, r6
 8012488:	4639      	mov	r1, r7
 801248a:	f7ed ff25 	bl	80002d8 <__aeabi_dsub>
 801248e:	4602      	mov	r2, r0
 8012490:	460b      	mov	r3, r1
 8012492:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012496:	f7ee fb67 	bl	8000b68 <__aeabi_dcmpgt>
 801249a:	2800      	cmp	r0, #0
 801249c:	f47f adfe 	bne.w	801209c <__ieee754_pow+0x36c>
 80124a0:	4aa3      	ldr	r2, [pc, #652]	; (8012730 <__ieee754_pow+0xa00>)
 80124a2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80124a6:	4293      	cmp	r3, r2
 80124a8:	f340 810a 	ble.w	80126c0 <__ieee754_pow+0x990>
 80124ac:	151b      	asrs	r3, r3, #20
 80124ae:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80124b2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80124b6:	fa4a f303 	asr.w	r3, sl, r3
 80124ba:	445b      	add	r3, fp
 80124bc:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80124c0:	4e9c      	ldr	r6, [pc, #624]	; (8012734 <__ieee754_pow+0xa04>)
 80124c2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80124c6:	4116      	asrs	r6, r2
 80124c8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80124cc:	2000      	movs	r0, #0
 80124ce:	ea23 0106 	bic.w	r1, r3, r6
 80124d2:	f1c2 0214 	rsb	r2, r2, #20
 80124d6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80124da:	fa4a fa02 	asr.w	sl, sl, r2
 80124de:	f1bb 0f00 	cmp.w	fp, #0
 80124e2:	4602      	mov	r2, r0
 80124e4:	460b      	mov	r3, r1
 80124e6:	4620      	mov	r0, r4
 80124e8:	4629      	mov	r1, r5
 80124ea:	bfb8      	it	lt
 80124ec:	f1ca 0a00 	rsblt	sl, sl, #0
 80124f0:	f7ed fef2 	bl	80002d8 <__aeabi_dsub>
 80124f4:	e9cd 0100 	strd	r0, r1, [sp]
 80124f8:	4642      	mov	r2, r8
 80124fa:	464b      	mov	r3, r9
 80124fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012500:	f7ed feec 	bl	80002dc <__adddf3>
 8012504:	2000      	movs	r0, #0
 8012506:	a378      	add	r3, pc, #480	; (adr r3, 80126e8 <__ieee754_pow+0x9b8>)
 8012508:	e9d3 2300 	ldrd	r2, r3, [r3]
 801250c:	4604      	mov	r4, r0
 801250e:	460d      	mov	r5, r1
 8012510:	f7ee f89a 	bl	8000648 <__aeabi_dmul>
 8012514:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012518:	4606      	mov	r6, r0
 801251a:	460f      	mov	r7, r1
 801251c:	4620      	mov	r0, r4
 801251e:	4629      	mov	r1, r5
 8012520:	f7ed feda 	bl	80002d8 <__aeabi_dsub>
 8012524:	4602      	mov	r2, r0
 8012526:	460b      	mov	r3, r1
 8012528:	4640      	mov	r0, r8
 801252a:	4649      	mov	r1, r9
 801252c:	f7ed fed4 	bl	80002d8 <__aeabi_dsub>
 8012530:	a36f      	add	r3, pc, #444	; (adr r3, 80126f0 <__ieee754_pow+0x9c0>)
 8012532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012536:	f7ee f887 	bl	8000648 <__aeabi_dmul>
 801253a:	a36f      	add	r3, pc, #444	; (adr r3, 80126f8 <__ieee754_pow+0x9c8>)
 801253c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012540:	4680      	mov	r8, r0
 8012542:	4689      	mov	r9, r1
 8012544:	4620      	mov	r0, r4
 8012546:	4629      	mov	r1, r5
 8012548:	f7ee f87e 	bl	8000648 <__aeabi_dmul>
 801254c:	4602      	mov	r2, r0
 801254e:	460b      	mov	r3, r1
 8012550:	4640      	mov	r0, r8
 8012552:	4649      	mov	r1, r9
 8012554:	f7ed fec2 	bl	80002dc <__adddf3>
 8012558:	4604      	mov	r4, r0
 801255a:	460d      	mov	r5, r1
 801255c:	4602      	mov	r2, r0
 801255e:	460b      	mov	r3, r1
 8012560:	4630      	mov	r0, r6
 8012562:	4639      	mov	r1, r7
 8012564:	f7ed feba 	bl	80002dc <__adddf3>
 8012568:	4632      	mov	r2, r6
 801256a:	463b      	mov	r3, r7
 801256c:	4680      	mov	r8, r0
 801256e:	4689      	mov	r9, r1
 8012570:	f7ed feb2 	bl	80002d8 <__aeabi_dsub>
 8012574:	4602      	mov	r2, r0
 8012576:	460b      	mov	r3, r1
 8012578:	4620      	mov	r0, r4
 801257a:	4629      	mov	r1, r5
 801257c:	f7ed feac 	bl	80002d8 <__aeabi_dsub>
 8012580:	4642      	mov	r2, r8
 8012582:	4606      	mov	r6, r0
 8012584:	460f      	mov	r7, r1
 8012586:	464b      	mov	r3, r9
 8012588:	4640      	mov	r0, r8
 801258a:	4649      	mov	r1, r9
 801258c:	f7ee f85c 	bl	8000648 <__aeabi_dmul>
 8012590:	a35b      	add	r3, pc, #364	; (adr r3, 8012700 <__ieee754_pow+0x9d0>)
 8012592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012596:	4604      	mov	r4, r0
 8012598:	460d      	mov	r5, r1
 801259a:	f7ee f855 	bl	8000648 <__aeabi_dmul>
 801259e:	a35a      	add	r3, pc, #360	; (adr r3, 8012708 <__ieee754_pow+0x9d8>)
 80125a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125a4:	f7ed fe98 	bl	80002d8 <__aeabi_dsub>
 80125a8:	4622      	mov	r2, r4
 80125aa:	462b      	mov	r3, r5
 80125ac:	f7ee f84c 	bl	8000648 <__aeabi_dmul>
 80125b0:	a357      	add	r3, pc, #348	; (adr r3, 8012710 <__ieee754_pow+0x9e0>)
 80125b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125b6:	f7ed fe91 	bl	80002dc <__adddf3>
 80125ba:	4622      	mov	r2, r4
 80125bc:	462b      	mov	r3, r5
 80125be:	f7ee f843 	bl	8000648 <__aeabi_dmul>
 80125c2:	a355      	add	r3, pc, #340	; (adr r3, 8012718 <__ieee754_pow+0x9e8>)
 80125c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125c8:	f7ed fe86 	bl	80002d8 <__aeabi_dsub>
 80125cc:	4622      	mov	r2, r4
 80125ce:	462b      	mov	r3, r5
 80125d0:	f7ee f83a 	bl	8000648 <__aeabi_dmul>
 80125d4:	a352      	add	r3, pc, #328	; (adr r3, 8012720 <__ieee754_pow+0x9f0>)
 80125d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125da:	f7ed fe7f 	bl	80002dc <__adddf3>
 80125de:	4622      	mov	r2, r4
 80125e0:	462b      	mov	r3, r5
 80125e2:	f7ee f831 	bl	8000648 <__aeabi_dmul>
 80125e6:	4602      	mov	r2, r0
 80125e8:	460b      	mov	r3, r1
 80125ea:	4640      	mov	r0, r8
 80125ec:	4649      	mov	r1, r9
 80125ee:	f7ed fe73 	bl	80002d8 <__aeabi_dsub>
 80125f2:	4604      	mov	r4, r0
 80125f4:	460d      	mov	r5, r1
 80125f6:	4602      	mov	r2, r0
 80125f8:	460b      	mov	r3, r1
 80125fa:	4640      	mov	r0, r8
 80125fc:	4649      	mov	r1, r9
 80125fe:	f7ee f823 	bl	8000648 <__aeabi_dmul>
 8012602:	2200      	movs	r2, #0
 8012604:	e9cd 0100 	strd	r0, r1, [sp]
 8012608:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801260c:	4620      	mov	r0, r4
 801260e:	4629      	mov	r1, r5
 8012610:	f7ed fe62 	bl	80002d8 <__aeabi_dsub>
 8012614:	4602      	mov	r2, r0
 8012616:	460b      	mov	r3, r1
 8012618:	e9dd 0100 	ldrd	r0, r1, [sp]
 801261c:	f7ee f93e 	bl	800089c <__aeabi_ddiv>
 8012620:	4632      	mov	r2, r6
 8012622:	4604      	mov	r4, r0
 8012624:	460d      	mov	r5, r1
 8012626:	463b      	mov	r3, r7
 8012628:	4640      	mov	r0, r8
 801262a:	4649      	mov	r1, r9
 801262c:	f7ee f80c 	bl	8000648 <__aeabi_dmul>
 8012630:	4632      	mov	r2, r6
 8012632:	463b      	mov	r3, r7
 8012634:	f7ed fe52 	bl	80002dc <__adddf3>
 8012638:	4602      	mov	r2, r0
 801263a:	460b      	mov	r3, r1
 801263c:	4620      	mov	r0, r4
 801263e:	4629      	mov	r1, r5
 8012640:	f7ed fe4a 	bl	80002d8 <__aeabi_dsub>
 8012644:	4642      	mov	r2, r8
 8012646:	464b      	mov	r3, r9
 8012648:	f7ed fe46 	bl	80002d8 <__aeabi_dsub>
 801264c:	4602      	mov	r2, r0
 801264e:	460b      	mov	r3, r1
 8012650:	2000      	movs	r0, #0
 8012652:	4939      	ldr	r1, [pc, #228]	; (8012738 <__ieee754_pow+0xa08>)
 8012654:	f7ed fe40 	bl	80002d8 <__aeabi_dsub>
 8012658:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801265c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8012660:	4602      	mov	r2, r0
 8012662:	460b      	mov	r3, r1
 8012664:	da2f      	bge.n	80126c6 <__ieee754_pow+0x996>
 8012666:	4650      	mov	r0, sl
 8012668:	ec43 2b10 	vmov	d0, r2, r3
 801266c:	f000 f9c0 	bl	80129f0 <scalbn>
 8012670:	ec51 0b10 	vmov	r0, r1, d0
 8012674:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012678:	f7ff bbf1 	b.w	8011e5e <__ieee754_pow+0x12e>
 801267c:	4b2f      	ldr	r3, [pc, #188]	; (801273c <__ieee754_pow+0xa0c>)
 801267e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8012682:	429e      	cmp	r6, r3
 8012684:	f77f af0c 	ble.w	80124a0 <__ieee754_pow+0x770>
 8012688:	4b2d      	ldr	r3, [pc, #180]	; (8012740 <__ieee754_pow+0xa10>)
 801268a:	440b      	add	r3, r1
 801268c:	4303      	orrs	r3, r0
 801268e:	d00b      	beq.n	80126a8 <__ieee754_pow+0x978>
 8012690:	a325      	add	r3, pc, #148	; (adr r3, 8012728 <__ieee754_pow+0x9f8>)
 8012692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012696:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801269a:	f7ed ffd5 	bl	8000648 <__aeabi_dmul>
 801269e:	a322      	add	r3, pc, #136	; (adr r3, 8012728 <__ieee754_pow+0x9f8>)
 80126a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126a4:	f7ff bbdb 	b.w	8011e5e <__ieee754_pow+0x12e>
 80126a8:	4622      	mov	r2, r4
 80126aa:	462b      	mov	r3, r5
 80126ac:	f7ed fe14 	bl	80002d8 <__aeabi_dsub>
 80126b0:	4642      	mov	r2, r8
 80126b2:	464b      	mov	r3, r9
 80126b4:	f7ee fa4e 	bl	8000b54 <__aeabi_dcmpge>
 80126b8:	2800      	cmp	r0, #0
 80126ba:	f43f aef1 	beq.w	80124a0 <__ieee754_pow+0x770>
 80126be:	e7e7      	b.n	8012690 <__ieee754_pow+0x960>
 80126c0:	f04f 0a00 	mov.w	sl, #0
 80126c4:	e718      	b.n	80124f8 <__ieee754_pow+0x7c8>
 80126c6:	4621      	mov	r1, r4
 80126c8:	e7d4      	b.n	8012674 <__ieee754_pow+0x944>
 80126ca:	2000      	movs	r0, #0
 80126cc:	491a      	ldr	r1, [pc, #104]	; (8012738 <__ieee754_pow+0xa08>)
 80126ce:	f7ff bb8f 	b.w	8011df0 <__ieee754_pow+0xc0>
 80126d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80126d6:	f7ff bb8b 	b.w	8011df0 <__ieee754_pow+0xc0>
 80126da:	4630      	mov	r0, r6
 80126dc:	4639      	mov	r1, r7
 80126de:	f7ff bb87 	b.w	8011df0 <__ieee754_pow+0xc0>
 80126e2:	4693      	mov	fp, r2
 80126e4:	f7ff bb98 	b.w	8011e18 <__ieee754_pow+0xe8>
 80126e8:	00000000 	.word	0x00000000
 80126ec:	3fe62e43 	.word	0x3fe62e43
 80126f0:	fefa39ef 	.word	0xfefa39ef
 80126f4:	3fe62e42 	.word	0x3fe62e42
 80126f8:	0ca86c39 	.word	0x0ca86c39
 80126fc:	be205c61 	.word	0xbe205c61
 8012700:	72bea4d0 	.word	0x72bea4d0
 8012704:	3e663769 	.word	0x3e663769
 8012708:	c5d26bf1 	.word	0xc5d26bf1
 801270c:	3ebbbd41 	.word	0x3ebbbd41
 8012710:	af25de2c 	.word	0xaf25de2c
 8012714:	3f11566a 	.word	0x3f11566a
 8012718:	16bebd93 	.word	0x16bebd93
 801271c:	3f66c16c 	.word	0x3f66c16c
 8012720:	5555553e 	.word	0x5555553e
 8012724:	3fc55555 	.word	0x3fc55555
 8012728:	c2f8f359 	.word	0xc2f8f359
 801272c:	01a56e1f 	.word	0x01a56e1f
 8012730:	3fe00000 	.word	0x3fe00000
 8012734:	000fffff 	.word	0x000fffff
 8012738:	3ff00000 	.word	0x3ff00000
 801273c:	4090cbff 	.word	0x4090cbff
 8012740:	3f6f3400 	.word	0x3f6f3400
 8012744:	652b82fe 	.word	0x652b82fe
 8012748:	3c971547 	.word	0x3c971547

0801274c <__ieee754_sqrt>:
 801274c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012750:	4955      	ldr	r1, [pc, #340]	; (80128a8 <__ieee754_sqrt+0x15c>)
 8012752:	ec55 4b10 	vmov	r4, r5, d0
 8012756:	43a9      	bics	r1, r5
 8012758:	462b      	mov	r3, r5
 801275a:	462a      	mov	r2, r5
 801275c:	d112      	bne.n	8012784 <__ieee754_sqrt+0x38>
 801275e:	ee10 2a10 	vmov	r2, s0
 8012762:	ee10 0a10 	vmov	r0, s0
 8012766:	4629      	mov	r1, r5
 8012768:	f7ed ff6e 	bl	8000648 <__aeabi_dmul>
 801276c:	4602      	mov	r2, r0
 801276e:	460b      	mov	r3, r1
 8012770:	4620      	mov	r0, r4
 8012772:	4629      	mov	r1, r5
 8012774:	f7ed fdb2 	bl	80002dc <__adddf3>
 8012778:	4604      	mov	r4, r0
 801277a:	460d      	mov	r5, r1
 801277c:	ec45 4b10 	vmov	d0, r4, r5
 8012780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012784:	2d00      	cmp	r5, #0
 8012786:	ee10 0a10 	vmov	r0, s0
 801278a:	4621      	mov	r1, r4
 801278c:	dc0f      	bgt.n	80127ae <__ieee754_sqrt+0x62>
 801278e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012792:	4330      	orrs	r0, r6
 8012794:	d0f2      	beq.n	801277c <__ieee754_sqrt+0x30>
 8012796:	b155      	cbz	r5, 80127ae <__ieee754_sqrt+0x62>
 8012798:	ee10 2a10 	vmov	r2, s0
 801279c:	4620      	mov	r0, r4
 801279e:	4629      	mov	r1, r5
 80127a0:	f7ed fd9a 	bl	80002d8 <__aeabi_dsub>
 80127a4:	4602      	mov	r2, r0
 80127a6:	460b      	mov	r3, r1
 80127a8:	f7ee f878 	bl	800089c <__aeabi_ddiv>
 80127ac:	e7e4      	b.n	8012778 <__ieee754_sqrt+0x2c>
 80127ae:	151b      	asrs	r3, r3, #20
 80127b0:	d073      	beq.n	801289a <__ieee754_sqrt+0x14e>
 80127b2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80127b6:	07dd      	lsls	r5, r3, #31
 80127b8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80127bc:	bf48      	it	mi
 80127be:	0fc8      	lsrmi	r0, r1, #31
 80127c0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80127c4:	bf44      	itt	mi
 80127c6:	0049      	lslmi	r1, r1, #1
 80127c8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80127cc:	2500      	movs	r5, #0
 80127ce:	1058      	asrs	r0, r3, #1
 80127d0:	0fcb      	lsrs	r3, r1, #31
 80127d2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80127d6:	0049      	lsls	r1, r1, #1
 80127d8:	2316      	movs	r3, #22
 80127da:	462c      	mov	r4, r5
 80127dc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80127e0:	19a7      	adds	r7, r4, r6
 80127e2:	4297      	cmp	r7, r2
 80127e4:	bfde      	ittt	le
 80127e6:	19bc      	addle	r4, r7, r6
 80127e8:	1bd2      	suble	r2, r2, r7
 80127ea:	19ad      	addle	r5, r5, r6
 80127ec:	0fcf      	lsrs	r7, r1, #31
 80127ee:	3b01      	subs	r3, #1
 80127f0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80127f4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80127f8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80127fc:	d1f0      	bne.n	80127e0 <__ieee754_sqrt+0x94>
 80127fe:	f04f 0c20 	mov.w	ip, #32
 8012802:	469e      	mov	lr, r3
 8012804:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8012808:	42a2      	cmp	r2, r4
 801280a:	eb06 070e 	add.w	r7, r6, lr
 801280e:	dc02      	bgt.n	8012816 <__ieee754_sqrt+0xca>
 8012810:	d112      	bne.n	8012838 <__ieee754_sqrt+0xec>
 8012812:	428f      	cmp	r7, r1
 8012814:	d810      	bhi.n	8012838 <__ieee754_sqrt+0xec>
 8012816:	2f00      	cmp	r7, #0
 8012818:	eb07 0e06 	add.w	lr, r7, r6
 801281c:	da42      	bge.n	80128a4 <__ieee754_sqrt+0x158>
 801281e:	f1be 0f00 	cmp.w	lr, #0
 8012822:	db3f      	blt.n	80128a4 <__ieee754_sqrt+0x158>
 8012824:	f104 0801 	add.w	r8, r4, #1
 8012828:	1b12      	subs	r2, r2, r4
 801282a:	428f      	cmp	r7, r1
 801282c:	bf88      	it	hi
 801282e:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8012832:	1bc9      	subs	r1, r1, r7
 8012834:	4433      	add	r3, r6
 8012836:	4644      	mov	r4, r8
 8012838:	0052      	lsls	r2, r2, #1
 801283a:	f1bc 0c01 	subs.w	ip, ip, #1
 801283e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8012842:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8012846:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801284a:	d1dd      	bne.n	8012808 <__ieee754_sqrt+0xbc>
 801284c:	430a      	orrs	r2, r1
 801284e:	d006      	beq.n	801285e <__ieee754_sqrt+0x112>
 8012850:	1c5c      	adds	r4, r3, #1
 8012852:	bf13      	iteet	ne
 8012854:	3301      	addne	r3, #1
 8012856:	3501      	addeq	r5, #1
 8012858:	4663      	moveq	r3, ip
 801285a:	f023 0301 	bicne.w	r3, r3, #1
 801285e:	106a      	asrs	r2, r5, #1
 8012860:	085b      	lsrs	r3, r3, #1
 8012862:	07e9      	lsls	r1, r5, #31
 8012864:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8012868:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801286c:	bf48      	it	mi
 801286e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8012872:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8012876:	461c      	mov	r4, r3
 8012878:	e780      	b.n	801277c <__ieee754_sqrt+0x30>
 801287a:	0aca      	lsrs	r2, r1, #11
 801287c:	3815      	subs	r0, #21
 801287e:	0549      	lsls	r1, r1, #21
 8012880:	2a00      	cmp	r2, #0
 8012882:	d0fa      	beq.n	801287a <__ieee754_sqrt+0x12e>
 8012884:	02d6      	lsls	r6, r2, #11
 8012886:	d50a      	bpl.n	801289e <__ieee754_sqrt+0x152>
 8012888:	f1c3 0420 	rsb	r4, r3, #32
 801288c:	fa21 f404 	lsr.w	r4, r1, r4
 8012890:	1e5d      	subs	r5, r3, #1
 8012892:	4099      	lsls	r1, r3
 8012894:	4322      	orrs	r2, r4
 8012896:	1b43      	subs	r3, r0, r5
 8012898:	e78b      	b.n	80127b2 <__ieee754_sqrt+0x66>
 801289a:	4618      	mov	r0, r3
 801289c:	e7f0      	b.n	8012880 <__ieee754_sqrt+0x134>
 801289e:	0052      	lsls	r2, r2, #1
 80128a0:	3301      	adds	r3, #1
 80128a2:	e7ef      	b.n	8012884 <__ieee754_sqrt+0x138>
 80128a4:	46a0      	mov	r8, r4
 80128a6:	e7bf      	b.n	8012828 <__ieee754_sqrt+0xdc>
 80128a8:	7ff00000 	.word	0x7ff00000

080128ac <fabs>:
 80128ac:	ec51 0b10 	vmov	r0, r1, d0
 80128b0:	ee10 2a10 	vmov	r2, s0
 80128b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80128b8:	ec43 2b10 	vmov	d0, r2, r3
 80128bc:	4770      	bx	lr

080128be <finite>:
 80128be:	ee10 3a90 	vmov	r3, s1
 80128c2:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80128c6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80128ca:	0fc0      	lsrs	r0, r0, #31
 80128cc:	4770      	bx	lr

080128ce <matherr>:
 80128ce:	2000      	movs	r0, #0
 80128d0:	4770      	bx	lr
 80128d2:	0000      	movs	r0, r0
 80128d4:	0000      	movs	r0, r0
	...

080128d8 <nan>:
 80128d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80128e0 <nan+0x8>
 80128dc:	4770      	bx	lr
 80128de:	bf00      	nop
 80128e0:	00000000 	.word	0x00000000
 80128e4:	7ff80000 	.word	0x7ff80000

080128e8 <rint>:
 80128e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80128ea:	ec51 0b10 	vmov	r0, r1, d0
 80128ee:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80128f2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80128f6:	2e13      	cmp	r6, #19
 80128f8:	460b      	mov	r3, r1
 80128fa:	ee10 4a10 	vmov	r4, s0
 80128fe:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8012902:	dc56      	bgt.n	80129b2 <rint+0xca>
 8012904:	2e00      	cmp	r6, #0
 8012906:	da2b      	bge.n	8012960 <rint+0x78>
 8012908:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801290c:	4302      	orrs	r2, r0
 801290e:	d023      	beq.n	8012958 <rint+0x70>
 8012910:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8012914:	4302      	orrs	r2, r0
 8012916:	4254      	negs	r4, r2
 8012918:	4314      	orrs	r4, r2
 801291a:	0c4b      	lsrs	r3, r1, #17
 801291c:	0b24      	lsrs	r4, r4, #12
 801291e:	045b      	lsls	r3, r3, #17
 8012920:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8012924:	ea44 0103 	orr.w	r1, r4, r3
 8012928:	460b      	mov	r3, r1
 801292a:	492f      	ldr	r1, [pc, #188]	; (80129e8 <rint+0x100>)
 801292c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8012930:	e9d1 6700 	ldrd	r6, r7, [r1]
 8012934:	4602      	mov	r2, r0
 8012936:	4639      	mov	r1, r7
 8012938:	4630      	mov	r0, r6
 801293a:	f7ed fccf 	bl	80002dc <__adddf3>
 801293e:	e9cd 0100 	strd	r0, r1, [sp]
 8012942:	463b      	mov	r3, r7
 8012944:	4632      	mov	r2, r6
 8012946:	e9dd 0100 	ldrd	r0, r1, [sp]
 801294a:	f7ed fcc5 	bl	80002d8 <__aeabi_dsub>
 801294e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012952:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8012956:	4639      	mov	r1, r7
 8012958:	ec41 0b10 	vmov	d0, r0, r1
 801295c:	b003      	add	sp, #12
 801295e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012960:	4a22      	ldr	r2, [pc, #136]	; (80129ec <rint+0x104>)
 8012962:	4132      	asrs	r2, r6
 8012964:	ea01 0702 	and.w	r7, r1, r2
 8012968:	4307      	orrs	r7, r0
 801296a:	d0f5      	beq.n	8012958 <rint+0x70>
 801296c:	0852      	lsrs	r2, r2, #1
 801296e:	4011      	ands	r1, r2
 8012970:	430c      	orrs	r4, r1
 8012972:	d00b      	beq.n	801298c <rint+0xa4>
 8012974:	ea23 0202 	bic.w	r2, r3, r2
 8012978:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801297c:	2e13      	cmp	r6, #19
 801297e:	fa43 f306 	asr.w	r3, r3, r6
 8012982:	bf0c      	ite	eq
 8012984:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8012988:	2400      	movne	r4, #0
 801298a:	4313      	orrs	r3, r2
 801298c:	4916      	ldr	r1, [pc, #88]	; (80129e8 <rint+0x100>)
 801298e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8012992:	4622      	mov	r2, r4
 8012994:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012998:	4620      	mov	r0, r4
 801299a:	4629      	mov	r1, r5
 801299c:	f7ed fc9e 	bl	80002dc <__adddf3>
 80129a0:	e9cd 0100 	strd	r0, r1, [sp]
 80129a4:	4622      	mov	r2, r4
 80129a6:	462b      	mov	r3, r5
 80129a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80129ac:	f7ed fc94 	bl	80002d8 <__aeabi_dsub>
 80129b0:	e7d2      	b.n	8012958 <rint+0x70>
 80129b2:	2e33      	cmp	r6, #51	; 0x33
 80129b4:	dd07      	ble.n	80129c6 <rint+0xde>
 80129b6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80129ba:	d1cd      	bne.n	8012958 <rint+0x70>
 80129bc:	ee10 2a10 	vmov	r2, s0
 80129c0:	f7ed fc8c 	bl	80002dc <__adddf3>
 80129c4:	e7c8      	b.n	8012958 <rint+0x70>
 80129c6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 80129ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80129ce:	40f2      	lsrs	r2, r6
 80129d0:	4210      	tst	r0, r2
 80129d2:	d0c1      	beq.n	8012958 <rint+0x70>
 80129d4:	0852      	lsrs	r2, r2, #1
 80129d6:	4210      	tst	r0, r2
 80129d8:	bf1f      	itttt	ne
 80129da:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80129de:	ea20 0202 	bicne.w	r2, r0, r2
 80129e2:	4134      	asrne	r4, r6
 80129e4:	4314      	orrne	r4, r2
 80129e6:	e7d1      	b.n	801298c <rint+0xa4>
 80129e8:	08014308 	.word	0x08014308
 80129ec:	000fffff 	.word	0x000fffff

080129f0 <scalbn>:
 80129f0:	b570      	push	{r4, r5, r6, lr}
 80129f2:	ec55 4b10 	vmov	r4, r5, d0
 80129f6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80129fa:	4606      	mov	r6, r0
 80129fc:	462b      	mov	r3, r5
 80129fe:	b9aa      	cbnz	r2, 8012a2c <scalbn+0x3c>
 8012a00:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012a04:	4323      	orrs	r3, r4
 8012a06:	d03b      	beq.n	8012a80 <scalbn+0x90>
 8012a08:	4b31      	ldr	r3, [pc, #196]	; (8012ad0 <scalbn+0xe0>)
 8012a0a:	4629      	mov	r1, r5
 8012a0c:	2200      	movs	r2, #0
 8012a0e:	ee10 0a10 	vmov	r0, s0
 8012a12:	f7ed fe19 	bl	8000648 <__aeabi_dmul>
 8012a16:	4b2f      	ldr	r3, [pc, #188]	; (8012ad4 <scalbn+0xe4>)
 8012a18:	429e      	cmp	r6, r3
 8012a1a:	4604      	mov	r4, r0
 8012a1c:	460d      	mov	r5, r1
 8012a1e:	da12      	bge.n	8012a46 <scalbn+0x56>
 8012a20:	a327      	add	r3, pc, #156	; (adr r3, 8012ac0 <scalbn+0xd0>)
 8012a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a26:	f7ed fe0f 	bl	8000648 <__aeabi_dmul>
 8012a2a:	e009      	b.n	8012a40 <scalbn+0x50>
 8012a2c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012a30:	428a      	cmp	r2, r1
 8012a32:	d10c      	bne.n	8012a4e <scalbn+0x5e>
 8012a34:	ee10 2a10 	vmov	r2, s0
 8012a38:	4620      	mov	r0, r4
 8012a3a:	4629      	mov	r1, r5
 8012a3c:	f7ed fc4e 	bl	80002dc <__adddf3>
 8012a40:	4604      	mov	r4, r0
 8012a42:	460d      	mov	r5, r1
 8012a44:	e01c      	b.n	8012a80 <scalbn+0x90>
 8012a46:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012a4a:	460b      	mov	r3, r1
 8012a4c:	3a36      	subs	r2, #54	; 0x36
 8012a4e:	4432      	add	r2, r6
 8012a50:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012a54:	428a      	cmp	r2, r1
 8012a56:	dd0b      	ble.n	8012a70 <scalbn+0x80>
 8012a58:	ec45 4b11 	vmov	d1, r4, r5
 8012a5c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8012ac8 <scalbn+0xd8>
 8012a60:	f000 f9f0 	bl	8012e44 <copysign>
 8012a64:	a318      	add	r3, pc, #96	; (adr r3, 8012ac8 <scalbn+0xd8>)
 8012a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a6a:	ec51 0b10 	vmov	r0, r1, d0
 8012a6e:	e7da      	b.n	8012a26 <scalbn+0x36>
 8012a70:	2a00      	cmp	r2, #0
 8012a72:	dd08      	ble.n	8012a86 <scalbn+0x96>
 8012a74:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012a78:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012a7c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012a80:	ec45 4b10 	vmov	d0, r4, r5
 8012a84:	bd70      	pop	{r4, r5, r6, pc}
 8012a86:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012a8a:	da0d      	bge.n	8012aa8 <scalbn+0xb8>
 8012a8c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012a90:	429e      	cmp	r6, r3
 8012a92:	ec45 4b11 	vmov	d1, r4, r5
 8012a96:	dce1      	bgt.n	8012a5c <scalbn+0x6c>
 8012a98:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8012ac0 <scalbn+0xd0>
 8012a9c:	f000 f9d2 	bl	8012e44 <copysign>
 8012aa0:	a307      	add	r3, pc, #28	; (adr r3, 8012ac0 <scalbn+0xd0>)
 8012aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aa6:	e7e0      	b.n	8012a6a <scalbn+0x7a>
 8012aa8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012aac:	3236      	adds	r2, #54	; 0x36
 8012aae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012ab2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012ab6:	4620      	mov	r0, r4
 8012ab8:	4629      	mov	r1, r5
 8012aba:	2200      	movs	r2, #0
 8012abc:	4b06      	ldr	r3, [pc, #24]	; (8012ad8 <scalbn+0xe8>)
 8012abe:	e7b2      	b.n	8012a26 <scalbn+0x36>
 8012ac0:	c2f8f359 	.word	0xc2f8f359
 8012ac4:	01a56e1f 	.word	0x01a56e1f
 8012ac8:	8800759c 	.word	0x8800759c
 8012acc:	7e37e43c 	.word	0x7e37e43c
 8012ad0:	43500000 	.word	0x43500000
 8012ad4:	ffff3cb0 	.word	0xffff3cb0
 8012ad8:	3c900000 	.word	0x3c900000
 8012adc:	00000000 	.word	0x00000000

08012ae0 <__ieee754_log>:
 8012ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ae4:	ec51 0b10 	vmov	r0, r1, d0
 8012ae8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8012aec:	b087      	sub	sp, #28
 8012aee:	460d      	mov	r5, r1
 8012af0:	da27      	bge.n	8012b42 <__ieee754_log+0x62>
 8012af2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012af6:	4303      	orrs	r3, r0
 8012af8:	ee10 2a10 	vmov	r2, s0
 8012afc:	d10a      	bne.n	8012b14 <__ieee754_log+0x34>
 8012afe:	49cc      	ldr	r1, [pc, #816]	; (8012e30 <__ieee754_log+0x350>)
 8012b00:	2200      	movs	r2, #0
 8012b02:	2300      	movs	r3, #0
 8012b04:	2000      	movs	r0, #0
 8012b06:	f7ed fec9 	bl	800089c <__aeabi_ddiv>
 8012b0a:	ec41 0b10 	vmov	d0, r0, r1
 8012b0e:	b007      	add	sp, #28
 8012b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b14:	2900      	cmp	r1, #0
 8012b16:	da05      	bge.n	8012b24 <__ieee754_log+0x44>
 8012b18:	460b      	mov	r3, r1
 8012b1a:	f7ed fbdd 	bl	80002d8 <__aeabi_dsub>
 8012b1e:	2200      	movs	r2, #0
 8012b20:	2300      	movs	r3, #0
 8012b22:	e7f0      	b.n	8012b06 <__ieee754_log+0x26>
 8012b24:	4bc3      	ldr	r3, [pc, #780]	; (8012e34 <__ieee754_log+0x354>)
 8012b26:	2200      	movs	r2, #0
 8012b28:	f7ed fd8e 	bl	8000648 <__aeabi_dmul>
 8012b2c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8012b30:	460d      	mov	r5, r1
 8012b32:	4ac1      	ldr	r2, [pc, #772]	; (8012e38 <__ieee754_log+0x358>)
 8012b34:	4295      	cmp	r5, r2
 8012b36:	dd06      	ble.n	8012b46 <__ieee754_log+0x66>
 8012b38:	4602      	mov	r2, r0
 8012b3a:	460b      	mov	r3, r1
 8012b3c:	f7ed fbce 	bl	80002dc <__adddf3>
 8012b40:	e7e3      	b.n	8012b0a <__ieee754_log+0x2a>
 8012b42:	2300      	movs	r3, #0
 8012b44:	e7f5      	b.n	8012b32 <__ieee754_log+0x52>
 8012b46:	152c      	asrs	r4, r5, #20
 8012b48:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8012b4c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8012b50:	441c      	add	r4, r3
 8012b52:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8012b56:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8012b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012b5e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8012b62:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8012b66:	ea42 0105 	orr.w	r1, r2, r5
 8012b6a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8012b6e:	2200      	movs	r2, #0
 8012b70:	4bb2      	ldr	r3, [pc, #712]	; (8012e3c <__ieee754_log+0x35c>)
 8012b72:	f7ed fbb1 	bl	80002d8 <__aeabi_dsub>
 8012b76:	1cab      	adds	r3, r5, #2
 8012b78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012b7c:	2b02      	cmp	r3, #2
 8012b7e:	4682      	mov	sl, r0
 8012b80:	468b      	mov	fp, r1
 8012b82:	f04f 0200 	mov.w	r2, #0
 8012b86:	dc53      	bgt.n	8012c30 <__ieee754_log+0x150>
 8012b88:	2300      	movs	r3, #0
 8012b8a:	f7ed ffc5 	bl	8000b18 <__aeabi_dcmpeq>
 8012b8e:	b1d0      	cbz	r0, 8012bc6 <__ieee754_log+0xe6>
 8012b90:	2c00      	cmp	r4, #0
 8012b92:	f000 8120 	beq.w	8012dd6 <__ieee754_log+0x2f6>
 8012b96:	4620      	mov	r0, r4
 8012b98:	f7ed fcec 	bl	8000574 <__aeabi_i2d>
 8012b9c:	a390      	add	r3, pc, #576	; (adr r3, 8012de0 <__ieee754_log+0x300>)
 8012b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ba2:	4606      	mov	r6, r0
 8012ba4:	460f      	mov	r7, r1
 8012ba6:	f7ed fd4f 	bl	8000648 <__aeabi_dmul>
 8012baa:	a38f      	add	r3, pc, #572	; (adr r3, 8012de8 <__ieee754_log+0x308>)
 8012bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bb0:	4604      	mov	r4, r0
 8012bb2:	460d      	mov	r5, r1
 8012bb4:	4630      	mov	r0, r6
 8012bb6:	4639      	mov	r1, r7
 8012bb8:	f7ed fd46 	bl	8000648 <__aeabi_dmul>
 8012bbc:	4602      	mov	r2, r0
 8012bbe:	460b      	mov	r3, r1
 8012bc0:	4620      	mov	r0, r4
 8012bc2:	4629      	mov	r1, r5
 8012bc4:	e7ba      	b.n	8012b3c <__ieee754_log+0x5c>
 8012bc6:	a38a      	add	r3, pc, #552	; (adr r3, 8012df0 <__ieee754_log+0x310>)
 8012bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bcc:	4650      	mov	r0, sl
 8012bce:	4659      	mov	r1, fp
 8012bd0:	f7ed fd3a 	bl	8000648 <__aeabi_dmul>
 8012bd4:	4602      	mov	r2, r0
 8012bd6:	460b      	mov	r3, r1
 8012bd8:	2000      	movs	r0, #0
 8012bda:	4999      	ldr	r1, [pc, #612]	; (8012e40 <__ieee754_log+0x360>)
 8012bdc:	f7ed fb7c 	bl	80002d8 <__aeabi_dsub>
 8012be0:	4652      	mov	r2, sl
 8012be2:	4606      	mov	r6, r0
 8012be4:	460f      	mov	r7, r1
 8012be6:	465b      	mov	r3, fp
 8012be8:	4650      	mov	r0, sl
 8012bea:	4659      	mov	r1, fp
 8012bec:	f7ed fd2c 	bl	8000648 <__aeabi_dmul>
 8012bf0:	4602      	mov	r2, r0
 8012bf2:	460b      	mov	r3, r1
 8012bf4:	4630      	mov	r0, r6
 8012bf6:	4639      	mov	r1, r7
 8012bf8:	f7ed fd26 	bl	8000648 <__aeabi_dmul>
 8012bfc:	4606      	mov	r6, r0
 8012bfe:	460f      	mov	r7, r1
 8012c00:	b914      	cbnz	r4, 8012c08 <__ieee754_log+0x128>
 8012c02:	4632      	mov	r2, r6
 8012c04:	463b      	mov	r3, r7
 8012c06:	e0a0      	b.n	8012d4a <__ieee754_log+0x26a>
 8012c08:	4620      	mov	r0, r4
 8012c0a:	f7ed fcb3 	bl	8000574 <__aeabi_i2d>
 8012c0e:	a374      	add	r3, pc, #464	; (adr r3, 8012de0 <__ieee754_log+0x300>)
 8012c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c14:	4680      	mov	r8, r0
 8012c16:	4689      	mov	r9, r1
 8012c18:	f7ed fd16 	bl	8000648 <__aeabi_dmul>
 8012c1c:	a372      	add	r3, pc, #456	; (adr r3, 8012de8 <__ieee754_log+0x308>)
 8012c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c22:	4604      	mov	r4, r0
 8012c24:	460d      	mov	r5, r1
 8012c26:	4640      	mov	r0, r8
 8012c28:	4649      	mov	r1, r9
 8012c2a:	f7ed fd0d 	bl	8000648 <__aeabi_dmul>
 8012c2e:	e0a5      	b.n	8012d7c <__ieee754_log+0x29c>
 8012c30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012c34:	f7ed fb52 	bl	80002dc <__adddf3>
 8012c38:	4602      	mov	r2, r0
 8012c3a:	460b      	mov	r3, r1
 8012c3c:	4650      	mov	r0, sl
 8012c3e:	4659      	mov	r1, fp
 8012c40:	f7ed fe2c 	bl	800089c <__aeabi_ddiv>
 8012c44:	e9cd 0100 	strd	r0, r1, [sp]
 8012c48:	4620      	mov	r0, r4
 8012c4a:	f7ed fc93 	bl	8000574 <__aeabi_i2d>
 8012c4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012c52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012c56:	4610      	mov	r0, r2
 8012c58:	4619      	mov	r1, r3
 8012c5a:	f7ed fcf5 	bl	8000648 <__aeabi_dmul>
 8012c5e:	4602      	mov	r2, r0
 8012c60:	460b      	mov	r3, r1
 8012c62:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012c66:	f7ed fcef 	bl	8000648 <__aeabi_dmul>
 8012c6a:	a363      	add	r3, pc, #396	; (adr r3, 8012df8 <__ieee754_log+0x318>)
 8012c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c70:	4680      	mov	r8, r0
 8012c72:	4689      	mov	r9, r1
 8012c74:	f7ed fce8 	bl	8000648 <__aeabi_dmul>
 8012c78:	a361      	add	r3, pc, #388	; (adr r3, 8012e00 <__ieee754_log+0x320>)
 8012c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c7e:	f7ed fb2d 	bl	80002dc <__adddf3>
 8012c82:	4642      	mov	r2, r8
 8012c84:	464b      	mov	r3, r9
 8012c86:	f7ed fcdf 	bl	8000648 <__aeabi_dmul>
 8012c8a:	a35f      	add	r3, pc, #380	; (adr r3, 8012e08 <__ieee754_log+0x328>)
 8012c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c90:	f7ed fb24 	bl	80002dc <__adddf3>
 8012c94:	4642      	mov	r2, r8
 8012c96:	464b      	mov	r3, r9
 8012c98:	f7ed fcd6 	bl	8000648 <__aeabi_dmul>
 8012c9c:	a35c      	add	r3, pc, #368	; (adr r3, 8012e10 <__ieee754_log+0x330>)
 8012c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ca2:	f7ed fb1b 	bl	80002dc <__adddf3>
 8012ca6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012caa:	f7ed fccd 	bl	8000648 <__aeabi_dmul>
 8012cae:	a35a      	add	r3, pc, #360	; (adr r3, 8012e18 <__ieee754_log+0x338>)
 8012cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cb4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012cb8:	4640      	mov	r0, r8
 8012cba:	4649      	mov	r1, r9
 8012cbc:	f7ed fcc4 	bl	8000648 <__aeabi_dmul>
 8012cc0:	a357      	add	r3, pc, #348	; (adr r3, 8012e20 <__ieee754_log+0x340>)
 8012cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cc6:	f7ed fb09 	bl	80002dc <__adddf3>
 8012cca:	4642      	mov	r2, r8
 8012ccc:	464b      	mov	r3, r9
 8012cce:	f7ed fcbb 	bl	8000648 <__aeabi_dmul>
 8012cd2:	a355      	add	r3, pc, #340	; (adr r3, 8012e28 <__ieee754_log+0x348>)
 8012cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cd8:	f7ed fb00 	bl	80002dc <__adddf3>
 8012cdc:	4642      	mov	r2, r8
 8012cde:	464b      	mov	r3, r9
 8012ce0:	f7ed fcb2 	bl	8000648 <__aeabi_dmul>
 8012ce4:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8012ce8:	4602      	mov	r2, r0
 8012cea:	460b      	mov	r3, r1
 8012cec:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8012cf0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012cf4:	f7ed faf2 	bl	80002dc <__adddf3>
 8012cf8:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 8012cfc:	3551      	adds	r5, #81	; 0x51
 8012cfe:	4335      	orrs	r5, r6
 8012d00:	2d00      	cmp	r5, #0
 8012d02:	4680      	mov	r8, r0
 8012d04:	4689      	mov	r9, r1
 8012d06:	dd48      	ble.n	8012d9a <__ieee754_log+0x2ba>
 8012d08:	2200      	movs	r2, #0
 8012d0a:	4b4d      	ldr	r3, [pc, #308]	; (8012e40 <__ieee754_log+0x360>)
 8012d0c:	4650      	mov	r0, sl
 8012d0e:	4659      	mov	r1, fp
 8012d10:	f7ed fc9a 	bl	8000648 <__aeabi_dmul>
 8012d14:	4652      	mov	r2, sl
 8012d16:	465b      	mov	r3, fp
 8012d18:	f7ed fc96 	bl	8000648 <__aeabi_dmul>
 8012d1c:	4602      	mov	r2, r0
 8012d1e:	460b      	mov	r3, r1
 8012d20:	4606      	mov	r6, r0
 8012d22:	460f      	mov	r7, r1
 8012d24:	4640      	mov	r0, r8
 8012d26:	4649      	mov	r1, r9
 8012d28:	f7ed fad8 	bl	80002dc <__adddf3>
 8012d2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012d30:	f7ed fc8a 	bl	8000648 <__aeabi_dmul>
 8012d34:	4680      	mov	r8, r0
 8012d36:	4689      	mov	r9, r1
 8012d38:	b964      	cbnz	r4, 8012d54 <__ieee754_log+0x274>
 8012d3a:	4602      	mov	r2, r0
 8012d3c:	460b      	mov	r3, r1
 8012d3e:	4630      	mov	r0, r6
 8012d40:	4639      	mov	r1, r7
 8012d42:	f7ed fac9 	bl	80002d8 <__aeabi_dsub>
 8012d46:	4602      	mov	r2, r0
 8012d48:	460b      	mov	r3, r1
 8012d4a:	4650      	mov	r0, sl
 8012d4c:	4659      	mov	r1, fp
 8012d4e:	f7ed fac3 	bl	80002d8 <__aeabi_dsub>
 8012d52:	e6da      	b.n	8012b0a <__ieee754_log+0x2a>
 8012d54:	a322      	add	r3, pc, #136	; (adr r3, 8012de0 <__ieee754_log+0x300>)
 8012d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012d5e:	f7ed fc73 	bl	8000648 <__aeabi_dmul>
 8012d62:	a321      	add	r3, pc, #132	; (adr r3, 8012de8 <__ieee754_log+0x308>)
 8012d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d68:	4604      	mov	r4, r0
 8012d6a:	460d      	mov	r5, r1
 8012d6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012d70:	f7ed fc6a 	bl	8000648 <__aeabi_dmul>
 8012d74:	4642      	mov	r2, r8
 8012d76:	464b      	mov	r3, r9
 8012d78:	f7ed fab0 	bl	80002dc <__adddf3>
 8012d7c:	4602      	mov	r2, r0
 8012d7e:	460b      	mov	r3, r1
 8012d80:	4630      	mov	r0, r6
 8012d82:	4639      	mov	r1, r7
 8012d84:	f7ed faa8 	bl	80002d8 <__aeabi_dsub>
 8012d88:	4652      	mov	r2, sl
 8012d8a:	465b      	mov	r3, fp
 8012d8c:	f7ed faa4 	bl	80002d8 <__aeabi_dsub>
 8012d90:	4602      	mov	r2, r0
 8012d92:	460b      	mov	r3, r1
 8012d94:	4620      	mov	r0, r4
 8012d96:	4629      	mov	r1, r5
 8012d98:	e7d9      	b.n	8012d4e <__ieee754_log+0x26e>
 8012d9a:	4602      	mov	r2, r0
 8012d9c:	460b      	mov	r3, r1
 8012d9e:	4650      	mov	r0, sl
 8012da0:	4659      	mov	r1, fp
 8012da2:	f7ed fa99 	bl	80002d8 <__aeabi_dsub>
 8012da6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012daa:	f7ed fc4d 	bl	8000648 <__aeabi_dmul>
 8012dae:	4606      	mov	r6, r0
 8012db0:	460f      	mov	r7, r1
 8012db2:	2c00      	cmp	r4, #0
 8012db4:	f43f af25 	beq.w	8012c02 <__ieee754_log+0x122>
 8012db8:	a309      	add	r3, pc, #36	; (adr r3, 8012de0 <__ieee754_log+0x300>)
 8012dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012dc2:	f7ed fc41 	bl	8000648 <__aeabi_dmul>
 8012dc6:	a308      	add	r3, pc, #32	; (adr r3, 8012de8 <__ieee754_log+0x308>)
 8012dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dcc:	4604      	mov	r4, r0
 8012dce:	460d      	mov	r5, r1
 8012dd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012dd4:	e729      	b.n	8012c2a <__ieee754_log+0x14a>
 8012dd6:	2000      	movs	r0, #0
 8012dd8:	2100      	movs	r1, #0
 8012dda:	e696      	b.n	8012b0a <__ieee754_log+0x2a>
 8012ddc:	f3af 8000 	nop.w
 8012de0:	fee00000 	.word	0xfee00000
 8012de4:	3fe62e42 	.word	0x3fe62e42
 8012de8:	35793c76 	.word	0x35793c76
 8012dec:	3dea39ef 	.word	0x3dea39ef
 8012df0:	55555555 	.word	0x55555555
 8012df4:	3fd55555 	.word	0x3fd55555
 8012df8:	df3e5244 	.word	0xdf3e5244
 8012dfc:	3fc2f112 	.word	0x3fc2f112
 8012e00:	96cb03de 	.word	0x96cb03de
 8012e04:	3fc74664 	.word	0x3fc74664
 8012e08:	94229359 	.word	0x94229359
 8012e0c:	3fd24924 	.word	0x3fd24924
 8012e10:	55555593 	.word	0x55555593
 8012e14:	3fe55555 	.word	0x3fe55555
 8012e18:	d078c69f 	.word	0xd078c69f
 8012e1c:	3fc39a09 	.word	0x3fc39a09
 8012e20:	1d8e78af 	.word	0x1d8e78af
 8012e24:	3fcc71c5 	.word	0x3fcc71c5
 8012e28:	9997fa04 	.word	0x9997fa04
 8012e2c:	3fd99999 	.word	0x3fd99999
 8012e30:	c3500000 	.word	0xc3500000
 8012e34:	43500000 	.word	0x43500000
 8012e38:	7fefffff 	.word	0x7fefffff
 8012e3c:	3ff00000 	.word	0x3ff00000
 8012e40:	3fe00000 	.word	0x3fe00000

08012e44 <copysign>:
 8012e44:	ec51 0b10 	vmov	r0, r1, d0
 8012e48:	ee11 0a90 	vmov	r0, s3
 8012e4c:	ee10 2a10 	vmov	r2, s0
 8012e50:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012e54:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8012e58:	ea41 0300 	orr.w	r3, r1, r0
 8012e5c:	ec43 2b10 	vmov	d0, r2, r3
 8012e60:	4770      	bx	lr
	...

08012e64 <_init>:
 8012e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e66:	bf00      	nop
 8012e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e6a:	bc08      	pop	{r3}
 8012e6c:	469e      	mov	lr, r3
 8012e6e:	4770      	bx	lr

08012e70 <_fini>:
 8012e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e72:	bf00      	nop
 8012e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e76:	bc08      	pop	{r3}
 8012e78:	469e      	mov	lr, r3
 8012e7a:	4770      	bx	lr
