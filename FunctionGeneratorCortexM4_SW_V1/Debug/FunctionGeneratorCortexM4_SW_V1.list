
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008038  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  08008218  08008218  00018218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085b4  080085b4  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080085b4  080085b4  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080085b4  080085b4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085b4  080085b4  000185b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085b8  080085b8  000185b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080085bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  20000078  08008634  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  08008634  000203cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f927  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003fea  00000000  00000000  0003f9cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001998  00000000  00000000  000439c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001780  00000000  00000000  00045358  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002bff0  00000000  00000000  00046ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000180e0  00000000  00000000  00072ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00117bc4  00000000  00000000  0008aba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a276c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000734c  00000000  00000000  001a27e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000078 	.word	0x20000078
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008200 	.word	0x08008200

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000007c 	.word	0x2000007c
 800021c:	08008200 	.word	0x08008200

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b08c      	sub	sp, #48	; 0x30
 80002c4:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80002c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2220      	movs	r2, #32
 80002d6:	2100      	movs	r1, #0
 80002d8:	4618      	mov	r0, r3
 80002da:	f006 fe69 	bl	8006fb0 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80002de:	4b32      	ldr	r3, [pc, #200]	; (80003a8 <MX_ADC1_Init+0xe8>)
 80002e0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002e6:	4b30      	ldr	r3, [pc, #192]	; (80003a8 <MX_ADC1_Init+0xe8>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002ec:	4b2e      	ldr	r3, [pc, #184]	; (80003a8 <MX_ADC1_Init+0xe8>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002f2:	4b2d      	ldr	r3, [pc, #180]	; (80003a8 <MX_ADC1_Init+0xe8>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80002f8:	4b2b      	ldr	r3, [pc, #172]	; (80003a8 <MX_ADC1_Init+0xe8>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002fe:	4b2a      	ldr	r3, [pc, #168]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000300:	2200      	movs	r2, #0
 8000302:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000304:	4b28      	ldr	r3, [pc, #160]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000306:	2204      	movs	r2, #4
 8000308:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800030a:	4b27      	ldr	r3, [pc, #156]	; (80003a8 <MX_ADC1_Init+0xe8>)
 800030c:	2200      	movs	r2, #0
 800030e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000310:	4b25      	ldr	r3, [pc, #148]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000312:	2201      	movs	r2, #1
 8000314:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000316:	4b24      	ldr	r3, [pc, #144]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000318:	2201      	movs	r2, #1
 800031a:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800031c:	4b22      	ldr	r3, [pc, #136]	; (80003a8 <MX_ADC1_Init+0xe8>)
 800031e:	2200      	movs	r2, #0
 8000320:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000324:	4b20      	ldr	r3, [pc, #128]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000326:	2200      	movs	r2, #0
 8000328:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800032a:	4b1f      	ldr	r3, [pc, #124]	; (80003a8 <MX_ADC1_Init+0xe8>)
 800032c:	2200      	movs	r2, #0
 800032e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000330:	4b1d      	ldr	r3, [pc, #116]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000332:	2201      	movs	r2, #1
 8000334:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000338:	4b1b      	ldr	r3, [pc, #108]	; (80003a8 <MX_ADC1_Init+0xe8>)
 800033a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800033e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000340:	4b19      	ldr	r3, [pc, #100]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000342:	2200      	movs	r2, #0
 8000344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000348:	4817      	ldr	r0, [pc, #92]	; (80003a8 <MX_ADC1_Init+0xe8>)
 800034a:	f001 fca7 	bl	8001c9c <HAL_ADC_Init>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000354:	f000 fd1f 	bl	8000d96 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000358:	2300      	movs	r3, #0
 800035a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800035c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000360:	4619      	mov	r1, r3
 8000362:	4811      	ldr	r0, [pc, #68]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000364:	f002 fa30 	bl	80027c8 <HAL_ADCEx_MultiModeConfigChannel>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800036e:	f000 fd12 	bl	8000d96 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000372:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <MX_ADC1_Init+0xec>)
 8000374:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000376:	2306      	movs	r3, #6
 8000378:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800037a:	2300      	movs	r3, #0
 800037c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800037e:	237f      	movs	r3, #127	; 0x7f
 8000380:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000382:	2304      	movs	r3, #4
 8000384:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000386:	2300      	movs	r3, #0
 8000388:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	4619      	mov	r1, r3
 800038e:	4806      	ldr	r0, [pc, #24]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000390:	f001 fe44 	bl	800201c <HAL_ADC_ConfigChannel>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800039a:	f000 fcfc 	bl	8000d96 <Error_Handler>
  }

}
 800039e:	bf00      	nop
 80003a0:	3730      	adds	r7, #48	; 0x30
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	200000b8 	.word	0x200000b8
 80003ac:	0c900008 	.word	0x0c900008

080003b0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b08a      	sub	sp, #40	; 0x28
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b8:	f107 0314 	add.w	r3, r7, #20
 80003bc:	2200      	movs	r2, #0
 80003be:	601a      	str	r2, [r3, #0]
 80003c0:	605a      	str	r2, [r3, #4]
 80003c2:	609a      	str	r2, [r3, #8]
 80003c4:	60da      	str	r2, [r3, #12]
 80003c6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80003d0:	d14f      	bne.n	8000472 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80003d2:	4b2a      	ldr	r3, [pc, #168]	; (800047c <HAL_ADC_MspInit+0xcc>)
 80003d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d6:	4a29      	ldr	r2, [pc, #164]	; (800047c <HAL_ADC_MspInit+0xcc>)
 80003d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003de:	4b27      	ldr	r3, [pc, #156]	; (800047c <HAL_ADC_MspInit+0xcc>)
 80003e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003e6:	613b      	str	r3, [r7, #16]
 80003e8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ea:	4b24      	ldr	r3, [pc, #144]	; (800047c <HAL_ADC_MspInit+0xcc>)
 80003ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ee:	4a23      	ldr	r2, [pc, #140]	; (800047c <HAL_ADC_MspInit+0xcc>)
 80003f0:	f043 0301 	orr.w	r3, r3, #1
 80003f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003f6:	4b21      	ldr	r3, [pc, #132]	; (800047c <HAL_ADC_MspInit+0xcc>)
 80003f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003fa:	f003 0301 	and.w	r3, r3, #1
 80003fe:	60fb      	str	r3, [r7, #12]
 8000400:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000402:	2304      	movs	r3, #4
 8000404:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000406:	2303      	movs	r3, #3
 8000408:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040a:	2300      	movs	r3, #0
 800040c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800040e:	f107 0314 	add.w	r3, r7, #20
 8000412:	4619      	mov	r1, r3
 8000414:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000418:	f003 fb08 	bl	8003a2c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800041c:	4b18      	ldr	r3, [pc, #96]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 800041e:	4a19      	ldr	r2, [pc, #100]	; (8000484 <HAL_ADC_MspInit+0xd4>)
 8000420:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000422:	4b17      	ldr	r3, [pc, #92]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 8000424:	2205      	movs	r2, #5
 8000426:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000428:	4b15      	ldr	r3, [pc, #84]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 800042a:	2200      	movs	r2, #0
 800042c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800042e:	4b14      	ldr	r3, [pc, #80]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 8000430:	2200      	movs	r2, #0
 8000432:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000434:	4b12      	ldr	r3, [pc, #72]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 8000436:	2280      	movs	r2, #128	; 0x80
 8000438:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800043a:	4b11      	ldr	r3, [pc, #68]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 800043c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000440:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000442:	4b0f      	ldr	r3, [pc, #60]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 8000444:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000448:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800044a:	4b0d      	ldr	r3, [pc, #52]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 800044c:	2220      	movs	r2, #32
 800044e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000450:	4b0b      	ldr	r3, [pc, #44]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 8000452:	2200      	movs	r2, #0
 8000454:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000456:	480a      	ldr	r0, [pc, #40]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 8000458:	f003 f92e 	bl	80036b8 <HAL_DMA_Init>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8000462:	f000 fc98 	bl	8000d96 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4a05      	ldr	r2, [pc, #20]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 800046a:	655a      	str	r2, [r3, #84]	; 0x54
 800046c:	4a04      	ldr	r2, [pc, #16]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000472:	bf00      	nop
 8000474:	3728      	adds	r7, #40	; 0x28
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	40021000 	.word	0x40021000
 8000480:	20000124 	.word	0x20000124
 8000484:	40020008 	.word	0x40020008

08000488 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 800048c:	4b0f      	ldr	r3, [pc, #60]	; (80004cc <MX_COMP1_Init+0x44>)
 800048e:	4a10      	ldr	r2, [pc, #64]	; (80004d0 <MX_COMP1_Init+0x48>)
 8000490:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000492:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <MX_COMP1_Init+0x44>)
 8000494:	2200      	movs	r2, #0
 8000496:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8000498:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <MX_COMP1_Init+0x44>)
 800049a:	4a0e      	ldr	r2, [pc, #56]	; (80004d4 <MX_COMP1_Init+0x4c>)
 800049c:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800049e:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <MX_COMP1_Init+0x44>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80004a4:	4b09      	ldr	r3, [pc, #36]	; (80004cc <MX_COMP1_Init+0x44>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80004aa:	4b08      	ldr	r3, [pc, #32]	; (80004cc <MX_COMP1_Init+0x44>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <MX_COMP1_Init+0x44>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80004b6:	4805      	ldr	r0, [pc, #20]	; (80004cc <MX_COMP1_Init+0x44>)
 80004b8:	f002 fbda 	bl	8002c70 <HAL_COMP_Init>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 80004c2:	f000 fc68 	bl	8000d96 <Error_Handler>
  }

}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	20000184 	.word	0x20000184
 80004d0:	40010200 	.word	0x40010200
 80004d4:	00800030 	.word	0x00800030

080004d8 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e0:	f107 030c 	add.w	r3, r7, #12
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]
 80004ec:	60da      	str	r2, [r3, #12]
 80004ee:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a0f      	ldr	r2, [pc, #60]	; (8000534 <HAL_COMP_MspInit+0x5c>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d118      	bne.n	800052c <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fa:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <HAL_COMP_MspInit+0x60>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	4a0e      	ldr	r2, [pc, #56]	; (8000538 <HAL_COMP_MspInit+0x60>)
 8000500:	f043 0301 	orr.w	r3, r3, #1
 8000504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000506:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <HAL_COMP_MspInit+0x60>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000512:	2302      	movs	r3, #2
 8000514:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000516:	2303      	movs	r3, #3
 8000518:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051a:	2300      	movs	r3, #0
 800051c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051e:	f107 030c 	add.w	r3, r7, #12
 8000522:	4619      	mov	r1, r3
 8000524:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000528:	f003 fa80 	bl	8003a2c <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 800052c:	bf00      	nop
 800052e:	3720      	adds	r7, #32
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	40010200 	.word	0x40010200
 8000538:	40021000 	.word	0x40021000

0800053c <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DAC_HandleTypeDef hdac2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b08c      	sub	sp, #48	; 0x30
 8000540:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000542:	463b      	mov	r3, r7
 8000544:	2230      	movs	r2, #48	; 0x30
 8000546:	2100      	movs	r1, #0
 8000548:	4618      	mov	r0, r3
 800054a:	f006 fd31 	bl	8006fb0 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 800054e:	4b23      	ldr	r3, [pc, #140]	; (80005dc <MX_DAC1_Init+0xa0>)
 8000550:	4a23      	ldr	r2, [pc, #140]	; (80005e0 <MX_DAC1_Init+0xa4>)
 8000552:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000554:	4821      	ldr	r0, [pc, #132]	; (80005dc <MX_DAC1_Init+0xa0>)
 8000556:	f002 fe2e 	bl	80031b6 <HAL_DAC_Init>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000560:	f000 fc19 	bl	8000d96 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000564:	2302      	movs	r3, #2
 8000566:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000568:	2300      	movs	r3, #0
 800056a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800056c:	2300      	movs	r3, #0
 800056e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000570:	2300      	movs	r3, #0
 8000572:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8000574:	2306      	movs	r3, #6
 8000576:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000578:	2300      	movs	r3, #0
 800057a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800057c:	2300      	movs	r3, #0
 800057e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000580:	2301      	movs	r3, #1
 8000582:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000584:	2300      	movs	r3, #0
 8000586:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000588:	463b      	mov	r3, r7
 800058a:	2200      	movs	r2, #0
 800058c:	4619      	mov	r1, r3
 800058e:	4813      	ldr	r0, [pc, #76]	; (80005dc <MX_DAC1_Init+0xa0>)
 8000590:	f002 feae 	bl	80032f0 <HAL_DAC_ConfigChannel>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800059a:	f000 fbfc 	bl	8000d96 <Error_Handler>
  }
  /** Configure Triangle wave generation on DAC OUT1 
  */
  if (HAL_DACEx_TriangleWaveGenerate(&hdac1, DAC_CHANNEL_1, DAC_TRIANGLEAMPLITUDE_4095) != HAL_OK)
 800059e:	f44f 6230 	mov.w	r2, #2816	; 0xb00
 80005a2:	2100      	movs	r1, #0
 80005a4:	480d      	ldr	r0, [pc, #52]	; (80005dc <MX_DAC1_Init+0xa0>)
 80005a6:	f003 f84f 	bl	8003648 <HAL_DACEx_TriangleWaveGenerate>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 80005b0:	f000 fbf1 	bl	8000d96 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80005b4:	2300      	movs	r3, #0
 80005b6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80005b8:	2301      	movs	r3, #1
 80005ba:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80005bc:	463b      	mov	r3, r7
 80005be:	2210      	movs	r2, #16
 80005c0:	4619      	mov	r1, r3
 80005c2:	4806      	ldr	r0, [pc, #24]	; (80005dc <MX_DAC1_Init+0xa0>)
 80005c4:	f002 fe94 	bl	80032f0 <HAL_DAC_ConfigChannel>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_DAC1_Init+0x96>
  {
    Error_Handler();
 80005ce:	f000 fbe2 	bl	8000d96 <Error_Handler>
  }

}
 80005d2:	bf00      	nop
 80005d4:	3730      	adds	r7, #48	; 0x30
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	200001bc 	.word	0x200001bc
 80005e0:	50000800 	.word	0x50000800

080005e4 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08c      	sub	sp, #48	; 0x30
 80005e8:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80005ea:	463b      	mov	r3, r7
 80005ec:	2230      	movs	r2, #48	; 0x30
 80005ee:	2100      	movs	r1, #0
 80005f0:	4618      	mov	r0, r3
 80005f2:	f006 fcdd 	bl	8006fb0 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 80005f6:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <MX_DAC2_Init+0x80>)
 80005f8:	4a1b      	ldr	r2, [pc, #108]	; (8000668 <MX_DAC2_Init+0x84>)
 80005fa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80005fc:	4819      	ldr	r0, [pc, #100]	; (8000664 <MX_DAC2_Init+0x80>)
 80005fe:	f002 fdda 	bl	80031b6 <HAL_DAC_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8000608:	f000 fbc5 	bl	8000d96 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800060c:	2302      	movs	r3, #2
 800060e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000610:	2300      	movs	r3, #0
 8000612:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000614:	2300      	movs	r3, #0
 8000616:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000618:	2300      	movs	r3, #0
 800061a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 800061c:	2306      	movs	r3, #6
 800061e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000620:	2300      	movs	r3, #0
 8000622:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000628:	2301      	movs	r3, #1
 800062a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800062c:	2300      	movs	r3, #0
 800062e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000630:	463b      	mov	r3, r7
 8000632:	2200      	movs	r2, #0
 8000634:	4619      	mov	r1, r3
 8000636:	480b      	ldr	r0, [pc, #44]	; (8000664 <MX_DAC2_Init+0x80>)
 8000638:	f002 fe5a 	bl	80032f0 <HAL_DAC_ConfigChannel>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 8000642:	f000 fba8 	bl	8000d96 <Error_Handler>
  }
  /** Configure Triangle wave generation on DAC OUT1 
  */
  if (HAL_DACEx_TriangleWaveGenerate(&hdac2, DAC_CHANNEL_1, DAC_TRIANGLEAMPLITUDE_4095) != HAL_OK)
 8000646:	f44f 6230 	mov.w	r2, #2816	; 0xb00
 800064a:	2100      	movs	r1, #0
 800064c:	4805      	ldr	r0, [pc, #20]	; (8000664 <MX_DAC2_Init+0x80>)
 800064e:	f002 fffb 	bl	8003648 <HAL_DACEx_TriangleWaveGenerate>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_DAC2_Init+0x78>
  {
    Error_Handler();
 8000658:	f000 fb9d 	bl	8000d96 <Error_Handler>
  }

}
 800065c:	bf00      	nop
 800065e:	3730      	adds	r7, #48	; 0x30
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	200001a8 	.word	0x200001a8
 8000668:	50000c00 	.word	0x50000c00

0800066c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b08c      	sub	sp, #48	; 0x30
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000674:	f107 031c 	add.w	r3, r7, #28
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a2b      	ldr	r2, [pc, #172]	; (8000738 <HAL_DAC_MspInit+0xcc>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d125      	bne.n	80006da <HAL_DAC_MspInit+0x6e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800068e:	4b2b      	ldr	r3, [pc, #172]	; (800073c <HAL_DAC_MspInit+0xd0>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	4a2a      	ldr	r2, [pc, #168]	; (800073c <HAL_DAC_MspInit+0xd0>)
 8000694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069a:	4b28      	ldr	r3, [pc, #160]	; (800073c <HAL_DAC_MspInit+0xd0>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006a2:	61bb      	str	r3, [r7, #24]
 80006a4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	4b25      	ldr	r3, [pc, #148]	; (800073c <HAL_DAC_MspInit+0xd0>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006aa:	4a24      	ldr	r2, [pc, #144]	; (800073c <HAL_DAC_MspInit+0xd0>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b2:	4b22      	ldr	r3, [pc, #136]	; (800073c <HAL_DAC_MspInit+0xd0>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	617b      	str	r3, [r7, #20]
 80006bc:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80006be:	2330      	movs	r3, #48	; 0x30
 80006c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006c2:	2303      	movs	r3, #3
 80006c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ca:	f107 031c 	add.w	r3, r7, #28
 80006ce:	4619      	mov	r1, r3
 80006d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d4:	f003 f9aa 	bl	8003a2c <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 80006d8:	e029      	b.n	800072e <HAL_DAC_MspInit+0xc2>
  else if(dacHandle->Instance==DAC2)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a18      	ldr	r2, [pc, #96]	; (8000740 <HAL_DAC_MspInit+0xd4>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d124      	bne.n	800072e <HAL_DAC_MspInit+0xc2>
    __HAL_RCC_DAC2_CLK_ENABLE();
 80006e4:	4b15      	ldr	r3, [pc, #84]	; (800073c <HAL_DAC_MspInit+0xd0>)
 80006e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e8:	4a14      	ldr	r2, [pc, #80]	; (800073c <HAL_DAC_MspInit+0xd0>)
 80006ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <HAL_DAC_MspInit+0xd0>)
 80006f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006f8:	613b      	str	r3, [r7, #16]
 80006fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <HAL_DAC_MspInit+0xd0>)
 80006fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000700:	4a0e      	ldr	r2, [pc, #56]	; (800073c <HAL_DAC_MspInit+0xd0>)
 8000702:	f043 0301 	orr.w	r3, r3, #1
 8000706:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <HAL_DAC_MspInit+0xd0>)
 800070a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070c:	f003 0301 	and.w	r3, r3, #1
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000714:	2340      	movs	r3, #64	; 0x40
 8000716:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000718:	2303      	movs	r3, #3
 800071a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000720:	f107 031c 	add.w	r3, r7, #28
 8000724:	4619      	mov	r1, r3
 8000726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072a:	f003 f97f 	bl	8003a2c <HAL_GPIO_Init>
}
 800072e:	bf00      	nop
 8000730:	3730      	adds	r7, #48	; 0x30
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	50000800 	.word	0x50000800
 800073c:	40021000 	.word	0x40021000
 8000740:	50000c00 	.word	0x50000c00

08000744 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800074a:	4b12      	ldr	r3, [pc, #72]	; (8000794 <MX_DMA_Init+0x50>)
 800074c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800074e:	4a11      	ldr	r2, [pc, #68]	; (8000794 <MX_DMA_Init+0x50>)
 8000750:	f043 0304 	orr.w	r3, r3, #4
 8000754:	6493      	str	r3, [r2, #72]	; 0x48
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_DMA_Init+0x50>)
 8000758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800075a:	f003 0304 	and.w	r3, r3, #4
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_DMA_Init+0x50>)
 8000764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000766:	4a0b      	ldr	r2, [pc, #44]	; (8000794 <MX_DMA_Init+0x50>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6493      	str	r3, [r2, #72]	; 0x48
 800076e:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_DMA_Init+0x50>)
 8000770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	2101      	movs	r1, #1
 800077e:	200b      	movs	r0, #11
 8000780:	f002 fce5 	bl	800314e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000784:	200b      	movs	r0, #11
 8000786:	f002 fcfc 	bl	8003182 <HAL_NVIC_EnableIRQ>

}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40021000 	.word	0x40021000

08000798 <update_dc_bias_sweep>:
uint16_t dcbias = 0;
int dcbias_dir = 1;
int dcinverted = 0;

void update_dc_bias_sweep()
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	  // up=1, down=0
	  (dcbias_dir) ? (dcbias++) : (dcbias--);
 800079c:	4b20      	ldr	r3, [pc, #128]	; (8000820 <update_dc_bias_sweep+0x88>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d006      	beq.n	80007b2 <update_dc_bias_sweep+0x1a>
 80007a4:	4b1f      	ldr	r3, [pc, #124]	; (8000824 <update_dc_bias_sweep+0x8c>)
 80007a6:	881b      	ldrh	r3, [r3, #0]
 80007a8:	3301      	adds	r3, #1
 80007aa:	b29a      	uxth	r2, r3
 80007ac:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <update_dc_bias_sweep+0x8c>)
 80007ae:	801a      	strh	r2, [r3, #0]
 80007b0:	e005      	b.n	80007be <update_dc_bias_sweep+0x26>
 80007b2:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <update_dc_bias_sweep+0x8c>)
 80007b4:	881b      	ldrh	r3, [r3, #0]
 80007b6:	3b01      	subs	r3, #1
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <update_dc_bias_sweep+0x8c>)
 80007bc:	801a      	strh	r2, [r3, #0]

	  // invert the bias signal at zero crossing
	  if(dcbias < 1) {
 80007be:	4b19      	ldr	r3, [pc, #100]	; (8000824 <update_dc_bias_sweep+0x8c>)
 80007c0:	881b      	ldrh	r3, [r3, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d10a      	bne.n	80007dc <update_dc_bias_sweep+0x44>
		(dcinverted) ? (dcinverted=0) : (dcinverted=1);
 80007c6:	4b18      	ldr	r3, [pc, #96]	; (8000828 <update_dc_bias_sweep+0x90>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d003      	beq.n	80007d6 <update_dc_bias_sweep+0x3e>
 80007ce:	4b16      	ldr	r3, [pc, #88]	; (8000828 <update_dc_bias_sweep+0x90>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	e002      	b.n	80007dc <update_dc_bias_sweep+0x44>
 80007d6:	4b14      	ldr	r3, [pc, #80]	; (8000828 <update_dc_bias_sweep+0x90>)
 80007d8:	2201      	movs	r2, #1
 80007da:	601a      	str	r2, [r3, #0]
	  }

	  // change direction if dac limits are reached
	  if(dcbias < 1) 	{ dcbias_dir = 1; }
 80007dc:	4b11      	ldr	r3, [pc, #68]	; (8000824 <update_dc_bias_sweep+0x8c>)
 80007de:	881b      	ldrh	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d102      	bne.n	80007ea <update_dc_bias_sweep+0x52>
 80007e4:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <update_dc_bias_sweep+0x88>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	601a      	str	r2, [r3, #0]
	  if(dcbias > 4095) { dcbias_dir = 0; }
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <update_dc_bias_sweep+0x8c>)
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80007f2:	d302      	bcc.n	80007fa <update_dc_bias_sweep+0x62>
 80007f4:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <update_dc_bias_sweep+0x88>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]


	  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, dcinverted);
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <update_dc_bias_sweep+0x90>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	461a      	mov	r2, r3
 8000802:	2108      	movs	r1, #8
 8000804:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000808:	f003 faaa 	bl	8003d60 <HAL_GPIO_WritePin>
	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, dcbias);
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <update_dc_bias_sweep+0x8c>)
 800080e:	881b      	ldrh	r3, [r3, #0]
 8000810:	2200      	movs	r2, #0
 8000812:	2110      	movs	r1, #16
 8000814:	4805      	ldr	r0, [pc, #20]	; (800082c <update_dc_bias_sweep+0x94>)
 8000816:	f002 fd43 	bl	80032a0 <HAL_DAC_SetValue>
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000000 	.word	0x20000000
 8000824:	20000094 	.word	0x20000094
 8000828:	20000098 	.word	0x20000098
 800082c:	200001bc 	.word	0x200001bc

08000830 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	; 0x28
 8000834:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000846:	4b64      	ldr	r3, [pc, #400]	; (80009d8 <MX_GPIO_Init+0x1a8>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	4a63      	ldr	r2, [pc, #396]	; (80009d8 <MX_GPIO_Init+0x1a8>)
 800084c:	f043 0304 	orr.w	r3, r3, #4
 8000850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000852:	4b61      	ldr	r3, [pc, #388]	; (80009d8 <MX_GPIO_Init+0x1a8>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	f003 0304 	and.w	r3, r3, #4
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800085e:	4b5e      	ldr	r3, [pc, #376]	; (80009d8 <MX_GPIO_Init+0x1a8>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	4a5d      	ldr	r2, [pc, #372]	; (80009d8 <MX_GPIO_Init+0x1a8>)
 8000864:	f043 0320 	orr.w	r3, r3, #32
 8000868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086a:	4b5b      	ldr	r3, [pc, #364]	; (80009d8 <MX_GPIO_Init+0x1a8>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	f003 0320 	and.w	r3, r3, #32
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	4b58      	ldr	r3, [pc, #352]	; (80009d8 <MX_GPIO_Init+0x1a8>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087a:	4a57      	ldr	r2, [pc, #348]	; (80009d8 <MX_GPIO_Init+0x1a8>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000882:	4b55      	ldr	r3, [pc, #340]	; (80009d8 <MX_GPIO_Init+0x1a8>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088e:	4b52      	ldr	r3, [pc, #328]	; (80009d8 <MX_GPIO_Init+0x1a8>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	4a51      	ldr	r2, [pc, #324]	; (80009d8 <MX_GPIO_Init+0x1a8>)
 8000894:	f043 0302 	orr.w	r3, r3, #2
 8000898:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089a:	4b4f      	ldr	r3, [pc, #316]	; (80009d8 <MX_GPIO_Init+0x1a8>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089e:	f003 0302 	and.w	r3, r3, #2
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TRIGMODE_Pin|SG2_Pin|SG1_Pin|TRIGMUX1_Pin 
 80008a6:	2200      	movs	r2, #0
 80008a8:	f44f 714e 	mov.w	r1, #824	; 0x338
 80008ac:	484b      	ldr	r0, [pc, #300]	; (80009dc <MX_GPIO_Init+0x1ac>)
 80008ae:	f003 fa57 	bl	8003d60 <HAL_GPIO_WritePin>
                          |TRIGMUX2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2108      	movs	r1, #8
 80008b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ba:	f003 fa51 	bl	8003d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SG0_Pin|DC_Pin|CS_Pin|RST_Pin, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	f240 21c1 	movw	r1, #705	; 0x2c1
 80008c4:	4846      	ldr	r0, [pc, #280]	; (80009e0 <MX_GPIO_Init+0x1b0>)
 80008c6:	f003 fa4b 	bl	8003d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = BTN1_EXTI14_Pin|BTN2_EXTI15_Pin|ENC_EXTI2_Pin;
 80008ca:	f24c 0304 	movw	r3, #49156	; 0xc004
 80008ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008d0:	4b44      	ldr	r3, [pc, #272]	; (80009e4 <MX_GPIO_Init+0x1b4>)
 80008d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	4619      	mov	r1, r3
 80008de:	483f      	ldr	r0, [pc, #252]	; (80009dc <MX_GPIO_Init+0x1ac>)
 80008e0:	f003 f8a4 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = BTN3_EXTI0_Pin|BTN4_EXTI1_Pin;
 80008e4:	2303      	movs	r3, #3
 80008e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008e8:	4b3e      	ldr	r3, [pc, #248]	; (80009e4 <MX_GPIO_Init+0x1b4>)
 80008ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008ec:	2301      	movs	r3, #1
 80008ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	4619      	mov	r1, r3
 80008f6:	483c      	ldr	r0, [pc, #240]	; (80009e8 <MX_GPIO_Init+0x1b8>)
 80008f8:	f003 f898 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 80008fc:	2308      	movs	r3, #8
 80008fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000900:	2301      	movs	r3, #1
 8000902:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000904:	2302      	movs	r3, #2
 8000906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4619      	mov	r1, r3
 8000912:	4832      	ldr	r0, [pc, #200]	; (80009dc <MX_GPIO_Init+0x1ac>)
 8000914:	f003 f88a 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 8000918:	2308      	movs	r3, #8
 800091a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091c:	2301      	movs	r3, #1
 800091e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	4619      	mov	r1, r3
 800092e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000932:	f003 f87b 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SG2_Pin|SG1_Pin|TRIGMUX1_Pin|TRIGMUX2_Pin;
 8000936:	f44f 734c 	mov.w	r3, #816	; 0x330
 800093a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093c:	2301      	movs	r3, #1
 800093e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	4619      	mov	r1, r3
 800094e:	4823      	ldr	r0, [pc, #140]	; (80009dc <MX_GPIO_Init+0x1ac>)
 8000950:	f003 f86c 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SG0_Pin;
 8000954:	2301      	movs	r3, #1
 8000956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	2301      	movs	r3, #1
 800095a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	4619      	mov	r1, r3
 800096a:	481d      	ldr	r0, [pc, #116]	; (80009e0 <MX_GPIO_Init+0x1b0>)
 800096c:	f003 f85e 	bl	8003a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DC_Pin|CS_Pin|RST_Pin;
 8000970:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097e:	2303      	movs	r3, #3
 8000980:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	4619      	mov	r1, r3
 8000988:	4815      	ldr	r0, [pc, #84]	; (80009e0 <MX_GPIO_Init+0x1b0>)
 800098a:	f003 f84f 	bl	8003a2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2100      	movs	r1, #0
 8000992:	2006      	movs	r0, #6
 8000994:	f002 fbdb 	bl	800314e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000998:	2006      	movs	r0, #6
 800099a:	f002 fbf2 	bl	8003182 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2100      	movs	r1, #0
 80009a2:	2007      	movs	r0, #7
 80009a4:	f002 fbd3 	bl	800314e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80009a8:	2007      	movs	r0, #7
 80009aa:	f002 fbea 	bl	8003182 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2100      	movs	r1, #0
 80009b2:	2008      	movs	r0, #8
 80009b4:	f002 fbcb 	bl	800314e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80009b8:	2008      	movs	r0, #8
 80009ba:	f002 fbe2 	bl	8003182 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009be:	2200      	movs	r2, #0
 80009c0:	2100      	movs	r1, #0
 80009c2:	2028      	movs	r0, #40	; 0x28
 80009c4:	f002 fbc3 	bl	800314e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009c8:	2028      	movs	r0, #40	; 0x28
 80009ca:	f002 fbda 	bl	8003182 <HAL_NVIC_EnableIRQ>

}
 80009ce:	bf00      	nop
 80009d0:	3728      	adds	r7, #40	; 0x28
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40021000 	.word	0x40021000
 80009dc:	48000800 	.word	0x48000800
 80009e0:	48000400 	.word	0x48000400
 80009e4:	10210000 	.word	0x10210000
 80009e8:	48001400 	.word	0x48001400

080009ec <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80009f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009f8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80009fc:	f003 0301 	and.w	r3, r3, #1
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d013      	beq.n	8000a2c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000a04:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a08:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000a0c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d00b      	beq.n	8000a2c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000a14:	e000      	b.n	8000a18 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000a16:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000a18:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d0f9      	beq.n	8000a16 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000a22:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	b2d2      	uxtb	r2, r2
 8000a2a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000a2c:	687b      	ldr	r3, [r7, #4]
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr

08000a3a <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b086      	sub	sp, #24
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	60f8      	str	r0, [r7, #12]
 8000a42:	60b9      	str	r1, [r7, #8]
 8000a44:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	617b      	str	r3, [r7, #20]
 8000a4e:	e009      	b.n	8000a64 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	1c5a      	adds	r2, r3, #1
 8000a54:	60ba      	str	r2, [r7, #8]
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff ffc7 	bl	80009ec <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	3301      	adds	r3, #1
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	697a      	ldr	r2, [r7, #20]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	dbf1      	blt.n	8000a50 <_write+0x16>
  return len;
 8000a6c:	687b      	ldr	r3, [r7, #4]
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <update_tft>:

void update_tft()
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08a      	sub	sp, #40	; 0x28
 8000a7c:	af02      	add	r7, sp, #8
	  //----------------------------------------------------------FILLED CIRCLES EXAMPLE


				uint32_t random_num = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
	  			uint16_t xr = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	83fb      	strh	r3, [r7, #30]
	  			uint16_t yr = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	83bb      	strh	r3, [r7, #28]
	  			uint16_t radiusr = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	837b      	strh	r3, [r7, #26]
	  			uint16_t colourr = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	833b      	strh	r3, [r7, #24]
	  			HAL_RNG_GenerateRandomNumber(&hrng, &random_num);
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	4619      	mov	r1, r3
 8000a98:	482c      	ldr	r0, [pc, #176]	; (8000b4c <update_tft+0xd4>)
 8000a9a:	f004 f9ca 	bl	8004e32 <HAL_RNG_GenerateRandomNumber>
	  			xr = random_num;
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	83fb      	strh	r3, [r7, #30]
	  			HAL_RNG_GenerateRandomNumber(&hrng, &random_num);
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4828      	ldr	r0, [pc, #160]	; (8000b4c <update_tft+0xd4>)
 8000aaa:	f004 f9c2 	bl	8004e32 <HAL_RNG_GenerateRandomNumber>
	  			yr = random_num;
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	83bb      	strh	r3, [r7, #28]
	  			HAL_RNG_GenerateRandomNumber(&hrng, &random_num);
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4824      	ldr	r0, [pc, #144]	; (8000b4c <update_tft+0xd4>)
 8000aba:	f004 f9ba 	bl	8004e32 <HAL_RNG_GenerateRandomNumber>
	  			radiusr = random_num;
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	837b      	strh	r3, [r7, #26]
	  			HAL_RNG_GenerateRandomNumber(&hrng, &random_num);
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4820      	ldr	r0, [pc, #128]	; (8000b4c <update_tft+0xd4>)
 8000aca:	f004 f9b2 	bl	8004e32 <HAL_RNG_GenerateRandomNumber>
	  			colourr = random_num;
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	833b      	strh	r3, [r7, #24]

	  			xr &= 0x01FF;
 8000ad2:	8bfb      	ldrh	r3, [r7, #30]
 8000ad4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000ad8:	83fb      	strh	r3, [r7, #30]
	  			yr &= 0x01FF;
 8000ada:	8bbb      	ldrh	r3, [r7, #28]
 8000adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000ae0:	83bb      	strh	r3, [r7, #28]
	  			radiusr &= 0x001F;
 8000ae2:	8b7b      	ldrh	r3, [r7, #26]
 8000ae4:	f003 031f 	and.w	r3, r3, #31
 8000ae8:	837b      	strh	r3, [r7, #26]
	  			//ili9341_drawpixel(xr, yr, WHITE);
	  			ILI9341_Draw_Filled_Circle(xr, yr, radiusr/2, colourr);
 8000aea:	8b7b      	ldrh	r3, [r7, #26]
 8000aec:	085b      	lsrs	r3, r3, #1
 8000aee:	b29a      	uxth	r2, r3
 8000af0:	8b3b      	ldrh	r3, [r7, #24]
 8000af2:	8bb9      	ldrh	r1, [r7, #28]
 8000af4:	8bf8      	ldrh	r0, [r7, #30]
 8000af6:	f005 fcd3 	bl	80064a0 <ILI9341_Draw_Filled_Circle>

	  			char enc_buff[13] = "";
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	f107 0308 	add.w	r3, r7, #8
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	721a      	strb	r2, [r3, #8]
	  			snprintf(enc_buff, sizeof(enc_buff), "%d\n", new_enc_value);
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <update_tft+0xd8>)
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	1d38      	adds	r0, r7, #4
 8000b10:	4a10      	ldr	r2, [pc, #64]	; (8000b54 <update_tft+0xdc>)
 8000b12:	210d      	movs	r1, #13
 8000b14:	f006 fad0 	bl	80070b8 <sniprintf>
	  			ILI9341_Draw_Text(enc_buff, 10, 20, BLACK, 5, WHITE);
 8000b18:	1d38      	adds	r0, r7, #4
 8000b1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b1e:	9301      	str	r3, [sp, #4]
 8000b20:	2305      	movs	r3, #5
 8000b22:	9300      	str	r3, [sp, #0]
 8000b24:	2300      	movs	r3, #0
 8000b26:	2214      	movs	r2, #20
 8000b28:	210a      	movs	r1, #10
 8000b2a:	f005 fddb 	bl	80066e4 <ILI9341_Draw_Text>

	  			ILI9341_Draw_Text(control_pressed, 10, 60, BLACK, 5, WHITE);
 8000b2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b32:	9301      	str	r3, [sp, #4]
 8000b34:	2305      	movs	r3, #5
 8000b36:	9300      	str	r3, [sp, #0]
 8000b38:	2300      	movs	r3, #0
 8000b3a:	223c      	movs	r2, #60	; 0x3c
 8000b3c:	210a      	movs	r1, #10
 8000b3e:	4806      	ldr	r0, [pc, #24]	; (8000b58 <update_tft+0xe0>)
 8000b40:	f005 fdd0 	bl	80066e4 <ILI9341_Draw_Text>
	  		//HAL_Delay(1);
}
 8000b44:	bf00      	nop
 8000b46:	3720      	adds	r7, #32
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	200001d0 	.word	0x200001d0
 8000b50:	2000009e 	.word	0x2000009e
 8000b54:	08008218 	.word	0x08008218
 8000b58:	200000ac 	.word	0x200000ac

08000b5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b62:	f000 fe46 	bl	80017f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b66:	f000 f8a7 	bl	8000cb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b6a:	f7ff fe61 	bl	8000830 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b6e:	f7ff fde9 	bl	8000744 <MX_DMA_Init>
  MX_DAC1_Init();
 8000b72:	f7ff fce3 	bl	800053c <MX_DAC1_Init>
  MX_DAC2_Init();
 8000b76:	f7ff fd35 	bl	80005e4 <MX_DAC2_Init>
  MX_ADC1_Init();
 8000b7a:	f7ff fba1 	bl	80002c0 <MX_ADC1_Init>
  MX_COMP1_Init();
 8000b7e:	f7ff fc83 	bl	8000488 <MX_COMP1_Init>
  MX_TIM2_Init();
 8000b82:	f000 fc07 	bl	8001394 <MX_TIM2_Init>
  MX_TIM17_Init();
 8000b86:	f000 fcfd 	bl	8001584 <MX_TIM17_Init>
  MX_SPI3_Init();
 8000b8a:	f000 f941 	bl	8000e10 <MX_SPI3_Init>
  MX_RNG_Init();
 8000b8e:	f000 f909 	bl	8000da4 <MX_RNG_Init>
  MX_TIM1_Init();
 8000b92:	f000 fb8f 	bl	80012b4 <MX_TIM1_Init>
  MX_TIM8_Init();
 8000b96:	f000 fc67 	bl	8001468 <MX_TIM8_Init>
  MX_TIM16_Init();
 8000b9a:	f000 fccd 	bl	8001538 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

  // main signal function output (external)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	483b      	ldr	r0, [pc, #236]	; (8000c90 <main+0x134>)
 8000ba2:	f002 fb2a 	bl	80031fa <HAL_DAC_Start>
  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 8000ba6:	2110      	movs	r1, #16
 8000ba8:	4839      	ldr	r0, [pc, #228]	; (8000c90 <main+0x134>)
 8000baa:	f002 fb26 	bl	80031fa <HAL_DAC_Start>
  // auxilliary signal sync output (external)
  HAL_DAC_Start(&hdac2, DAC2_CHANNEL_1);
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4838      	ldr	r0, [pc, #224]	; (8000c94 <main+0x138>)
 8000bb2:	f002 fb22 	bl	80031fa <HAL_DAC_Start>
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);
#ifndef DISABLE_ALL_TIMERS
  // single clock to run all DAC channels. TODO add independent clocks
  HAL_TIM_Base_Start(&htim8);
 8000bb6:	4838      	ldr	r0, [pc, #224]	; (8000c98 <main+0x13c>)
 8000bb8:	f004 fcf6 	bl	80055a8 <HAL_TIM_Base_Start>
#endif //DISABLE_ALL_TIMERS

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	2108      	movs	r1, #8
 8000bc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc4:	f003 f8cc 	bl	8003d60 <HAL_GPIO_WritePin>

  // PGA gain
  HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8000bc8:	2201      	movs	r2, #1
 8000bca:	2101      	movs	r1, #1
 8000bcc:	4833      	ldr	r0, [pc, #204]	; (8000c9c <main+0x140>)
 8000bce:	f003 f8c7 	bl	8003d60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2120      	movs	r1, #32
 8000bd6:	4832      	ldr	r0, [pc, #200]	; (8000ca0 <main+0x144>)
 8000bd8:	f003 f8c2 	bl	8003d60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2110      	movs	r1, #16
 8000be0:	482f      	ldr	r0, [pc, #188]	; (8000ca0 <main+0x144>)
 8000be2:	f003 f8bd 	bl	8003d60 <HAL_GPIO_WritePin>

#ifndef DISABLE_ALL_TIMERS
  // start test routine (update_dc_bias_sweep())
  HAL_TIM_Base_Start_IT(&htim17);
 8000be6:	482f      	ldr	r0, [pc, #188]	; (8000ca4 <main+0x148>)
 8000be8:	f004 fd0c 	bl	8005604 <HAL_TIM_Base_Start_IT>
#endif	//DISABLE_ALL_TIMERS


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 8000bec:	2200      	movs	r2, #0
 8000bee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bf2:	482b      	ldr	r0, [pc, #172]	; (8000ca0 <main+0x144>)
 8000bf4:	f003 f8b4 	bl	8003d60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bfe:	4828      	ldr	r0, [pc, #160]	; (8000ca0 <main+0x144>)
 8000c00:	f003 f8ae 	bl	8003d60 <HAL_GPIO_WritePin>

#ifdef TIM_TRIGGER_MODE
  // input capture on in TIM2 slave-mode TF1FP1

  // set HW switch to direct ext. trigger input to TIM pin
  HAL_GPIO_WritePin(TRIGMODE_GPIO_Port, TRIGMODE_Pin, GPIO_PIN_SET);
 8000c04:	2201      	movs	r2, #1
 8000c06:	2108      	movs	r1, #8
 8000c08:	4825      	ldr	r0, [pc, #148]	; (8000ca0 <main+0x144>)
 8000c0a:	f003 f8a9 	bl	8003d60 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);	// TS5A3357 Pin6
  //HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); // TS5A3357 Pin5

  // clear slave mode select reg
  TIM2->SMCR &= ~(TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2);
 8000c0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c18:	f023 0307 	bic.w	r3, r3, #7
 8000c1c:	6093      	str	r3, [r2, #8]

  // slave mode
  //TIM2->SMCR |= TIM_SMCR_SMS_2;						// SLAVE MODE: RESET
  TIM2->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_2;	// SLAVE MODE: GATED
 8000c1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c22:	689b      	ldr	r3, [r3, #8]
 8000c24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c28:	f043 0305 	orr.w	r3, r3, #5
 8000c2c:	6093      	str	r3, [r2, #8]
  //TIM2->SMCR |= TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;	// SLAVE MODE: TRIGGER

#ifndef DISABLE_ALL_TIMERS
  HAL_TIM_Base_Start_IT(&htim2);
 8000c2e:	481e      	ldr	r0, [pc, #120]	; (8000ca8 <main+0x14c>)
 8000c30:	f004 fce8 	bl	8005604 <HAL_TIM_Base_Start_IT>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);
 8000c34:	481d      	ldr	r0, [pc, #116]	; (8000cac <main+0x150>)
 8000c36:	f004 fcb7 	bl	80055a8 <HAL_TIM_Base_Start>
  //HAL_TIM_Base_Start_IT(&htim16);
#endif	//DISABLE_ALL_TIMERS

  // TFT lib enable
  ILI9341_Init();
 8000c3a:	f005 fe9f 	bl	800697c <ILI9341_Init>


	ILI9341_Fill_Screen(WHITE);
 8000c3e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000c42:	f006 f83f 	bl	8006cc4 <ILI9341_Fill_Screen>
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000c46:	2003      	movs	r0, #3
 8000c48:	f005 fe3e 	bl	80068c8 <ILI9341_Set_Rotation>
	ILI9341_Draw_Text("Randomly placed and sized", 10, 10, BLACK, 1, WHITE);
 8000c4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c50:	9301      	str	r3, [sp, #4]
 8000c52:	2301      	movs	r3, #1
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	2300      	movs	r3, #0
 8000c58:	220a      	movs	r2, #10
 8000c5a:	210a      	movs	r1, #10
 8000c5c:	4814      	ldr	r0, [pc, #80]	; (8000cb0 <main+0x154>)
 8000c5e:	f005 fd41 	bl	80066e4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("Filled Circles", 10, 20, BLACK, 1, WHITE);
 8000c62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c66:	9301      	str	r3, [sp, #4]
 8000c68:	2301      	movs	r3, #1
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	2214      	movs	r2, #20
 8000c70:	210a      	movs	r1, #10
 8000c72:	4810      	ldr	r0, [pc, #64]	; (8000cb4 <main+0x158>)
 8000c74:	f005 fd36 	bl	80066e4 <ILI9341_Draw_Text>
	HAL_Delay(2000);
 8000c78:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c7c:	f000 fe2a 	bl	80018d4 <HAL_Delay>
	ILI9341_Fill_Screen(WHITE);
 8000c80:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000c84:	f006 f81e 	bl	8006cc4 <ILI9341_Fill_Screen>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	//printf("TFT\n");
	update_tft();
 8000c88:	f7ff fef6 	bl	8000a78 <update_tft>
 8000c8c:	e7fc      	b.n	8000c88 <main+0x12c>
 8000c8e:	bf00      	nop
 8000c90:	200001bc 	.word	0x200001bc
 8000c94:	200001a8 	.word	0x200001a8
 8000c98:	20000248 	.word	0x20000248
 8000c9c:	48000400 	.word	0x48000400
 8000ca0:	48000800 	.word	0x48000800
 8000ca4:	20000294 	.word	0x20000294
 8000ca8:	2000032c 	.word	0x2000032c
 8000cac:	200002e0 	.word	0x200002e0
 8000cb0:	0800821c 	.word	0x0800821c
 8000cb4:	08008238 	.word	0x08008238

08000cb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b0a8      	sub	sp, #160	; 0xa0
 8000cbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cbe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000cc2:	2238      	movs	r2, #56	; 0x38
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f006 f972 	bl	8006fb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ccc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cdc:	463b      	mov	r3, r7
 8000cde:	2254      	movs	r2, #84	; 0x54
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f006 f964 	bl	8006fb0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000ce8:	2000      	movs	r0, #0
 8000cea:	f003 f875 	bl	8003dd8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000cee:	2322      	movs	r3, #34	; 0x22
 8000cf0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cf6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cf8:	2340      	movs	r3, #64	; 0x40
 8000cfa:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d02:	2302      	movs	r3, #2
 8000d04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8000d14:	232a      	movs	r3, #42	; 0x2a
 8000d16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000d20:	2304      	movs	r3, #4
 8000d22:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d26:	2302      	movs	r3, #2
 8000d28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d2c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000d30:	4618      	mov	r0, r3
 8000d32:	f003 f8f5 	bl	8003f20 <HAL_RCC_OscConfig>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000d3c:	f000 f82b 	bl	8000d96 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d40:	230f      	movs	r3, #15
 8000d42:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d44:	2303      	movs	r3, #3
 8000d46:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d4c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000d50:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d52:	2300      	movs	r3, #0
 8000d54:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8000d56:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d5a:	2108      	movs	r1, #8
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f003 fbf7 	bl	8004550 <HAL_RCC_ClockConfig>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000d68:	f000 f815 	bl	8000d96 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 8000d6c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000d70:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8000d72:	2300      	movs	r3, #0
 8000d74:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000d76:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000d7a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d7c:	463b      	mov	r3, r7
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f003 fdd6 	bl	8004930 <HAL_RCCEx_PeriphCLKConfig>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000d8a:	f000 f804 	bl	8000d96 <Error_Handler>
  }
}
 8000d8e:	bf00      	nop
 8000d90:	37a0      	adds	r7, #160	; 0xa0
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0

  hrng.Instance = RNG;
 8000da8:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <MX_RNG_Init+0x24>)
 8000daa:	4a08      	ldr	r2, [pc, #32]	; (8000dcc <MX_RNG_Init+0x28>)
 8000dac:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <MX_RNG_Init+0x24>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000db4:	4804      	ldr	r0, [pc, #16]	; (8000dc8 <MX_RNG_Init+0x24>)
 8000db6:	f004 f807 	bl	8004dc8 <HAL_RNG_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000dc0:	f7ff ffe9 	bl	8000d96 <Error_Handler>
  }

}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	200001d0 	.word	0x200001d0
 8000dcc:	50060800 	.word	0x50060800

08000dd0 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <HAL_RNG_MspInit+0x38>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d10b      	bne.n	8000dfa <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000de2:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <HAL_RNG_MspInit+0x3c>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de6:	4a09      	ldr	r2, [pc, #36]	; (8000e0c <HAL_RNG_MspInit+0x3c>)
 8000de8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000dec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dee:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <HAL_RNG_MspInit+0x3c>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8000dfa:	bf00      	nop
 8000dfc:	3714      	adds	r7, #20
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	50060800 	.word	0x50060800
 8000e0c:	40021000 	.word	0x40021000

08000e10 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8000e14:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <MX_SPI3_Init+0x74>)
 8000e16:	4a1c      	ldr	r2, [pc, #112]	; (8000e88 <MX_SPI3_Init+0x78>)
 8000e18:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000e1a:	4b1a      	ldr	r3, [pc, #104]	; (8000e84 <MX_SPI3_Init+0x74>)
 8000e1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e20:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000e22:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <MX_SPI3_Init+0x74>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e28:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <MX_SPI3_Init+0x74>)
 8000e2a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e2e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e30:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <MX_SPI3_Init+0x74>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e36:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <MX_SPI3_Init+0x74>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <MX_SPI3_Init+0x74>)
 8000e3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e42:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e44:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <MX_SPI3_Init+0x74>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <MX_SPI3_Init+0x74>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <MX_SPI3_Init+0x74>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e56:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <MX_SPI3_Init+0x74>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000e5c:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <MX_SPI3_Init+0x74>)
 8000e5e:	2207      	movs	r2, #7
 8000e60:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e62:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <MX_SPI3_Init+0x74>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <MX_SPI3_Init+0x74>)
 8000e6a:	2208      	movs	r2, #8
 8000e6c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000e6e:	4805      	ldr	r0, [pc, #20]	; (8000e84 <MX_SPI3_Init+0x74>)
 8000e70:	f004 f82e 	bl	8004ed0 <HAL_SPI_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000e7a:	f7ff ff8c 	bl	8000d96 <Error_Handler>
  }

}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	200001e4 	.word	0x200001e4
 8000e88:	40003c00 	.word	0x40003c00

08000e8c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08a      	sub	sp, #40	; 0x28
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a17      	ldr	r2, [pc, #92]	; (8000f08 <HAL_SPI_MspInit+0x7c>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d128      	bne.n	8000f00 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000eae:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <HAL_SPI_MspInit+0x80>)
 8000eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb2:	4a16      	ldr	r2, [pc, #88]	; (8000f0c <HAL_SPI_MspInit+0x80>)
 8000eb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000eb8:	6593      	str	r3, [r2, #88]	; 0x58
 8000eba:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <HAL_SPI_MspInit+0x80>)
 8000ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ebe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec6:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <HAL_SPI_MspInit+0x80>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eca:	4a10      	ldr	r2, [pc, #64]	; (8000f0c <HAL_SPI_MspInit+0x80>)
 8000ecc:	f043 0304 	orr.w	r3, r3, #4
 8000ed0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <HAL_SPI_MspInit+0x80>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed6:	f003 0304 	and.w	r3, r3, #4
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000ede:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eec:	2300      	movs	r3, #0
 8000eee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ef0:	2306      	movs	r3, #6
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4805      	ldr	r0, [pc, #20]	; (8000f10 <HAL_SPI_MspInit+0x84>)
 8000efc:	f002 fd96 	bl	8003a2c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000f00:	bf00      	nop
 8000f02:	3728      	adds	r7, #40	; 0x28
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40003c00 	.word	0x40003c00
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	48000800 	.word	0x48000800

08000f14 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000f18:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000f1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f22:	6093      	str	r3, [r2, #8]
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	40007000 	.word	0x40007000

08000f34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3a:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <HAL_MspInit+0x44>)
 8000f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f3e:	4a0e      	ldr	r2, [pc, #56]	; (8000f78 <HAL_MspInit+0x44>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	6613      	str	r3, [r2, #96]	; 0x60
 8000f46:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <HAL_MspInit+0x44>)
 8000f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f52:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <HAL_MspInit+0x44>)
 8000f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f56:	4a08      	ldr	r2, [pc, #32]	; (8000f78 <HAL_MspInit+0x44>)
 8000f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f5c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <HAL_MspInit+0x44>)
 8000f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f66:	603b      	str	r3, [r7, #0]
 8000f68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8000f6a:	f7ff ffd3 	bl	8000f14 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40021000 	.word	0x40021000

08000f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <HardFault_Handler+0x4>

08000f90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <MemManage_Handler+0x4>

08000f96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f9a:	e7fe      	b.n	8000f9a <BusFault_Handler+0x4>

08000f9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <UsageFault_Handler+0x4>

08000fa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd0:	f000 fc62 	bl	8001898 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

//	if(HAL_GPIO_ReadPin(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin))
//	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN3");
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <EXTI0_IRQHandler+0x20>)
 8000fde:	4a07      	ldr	r2, [pc, #28]	; (8000ffc <EXTI0_IRQHandler+0x24>)
 8000fe0:	6810      	ldr	r0, [r2, #0]
 8000fe2:	6018      	str	r0, [r3, #0]
 8000fe4:	7912      	ldrb	r2, [r2, #4]
 8000fe6:	711a      	strb	r2, [r3, #4]
 		printf("BTN3_EXTI0_Pin\n");
 8000fe8:	4805      	ldr	r0, [pc, #20]	; (8001000 <EXTI0_IRQHandler+0x28>)
 8000fea:	f006 f85d 	bl	80070a8 <puts>
//	}

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000fee:	2001      	movs	r0, #1
 8000ff0:	f002 fece 	bl	8003d90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	200000ac 	.word	0x200000ac
 8000ffc:	08008248 	.word	0x08008248
 8001000:	08008250 	.word	0x08008250

08001004 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

//	if(HAL_GPIO_ReadPin(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin))
//	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN4");
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <EXTI1_IRQHandler+0x20>)
 800100a:	4a07      	ldr	r2, [pc, #28]	; (8001028 <EXTI1_IRQHandler+0x24>)
 800100c:	6810      	ldr	r0, [r2, #0]
 800100e:	6018      	str	r0, [r3, #0]
 8001010:	7912      	ldrb	r2, [r2, #4]
 8001012:	711a      	strb	r2, [r3, #4]
		printf("BTN4_EXTI1_Pin\n");
 8001014:	4805      	ldr	r0, [pc, #20]	; (800102c <EXTI1_IRQHandler+0x28>)
 8001016:	f006 f847 	bl	80070a8 <puts>
//	}

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800101a:	2002      	movs	r0, #2
 800101c:	f002 feb8 	bl	8003d90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	200000ac 	.word	0x200000ac
 8001028:	08008260 	.word	0x08008260
 800102c:	08008268 	.word	0x08008268

08001030 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */


		snprintf(control_pressed, sizeof(control_pressed), "ENC_BTN");
 8001034:	4a06      	ldr	r2, [pc, #24]	; (8001050 <EXTI2_IRQHandler+0x20>)
 8001036:	4b07      	ldr	r3, [pc, #28]	; (8001054 <EXTI2_IRQHandler+0x24>)
 8001038:	cb03      	ldmia	r3!, {r0, r1}
 800103a:	6010      	str	r0, [r2, #0]
 800103c:	6051      	str	r1, [r2, #4]
		printf("ENC_EXTI2_Pin\n");
 800103e:	4806      	ldr	r0, [pc, #24]	; (8001058 <EXTI2_IRQHandler+0x28>)
 8001040:	f006 f832 	bl	80070a8 <puts>


  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001044:	2004      	movs	r0, #4
 8001046:	f002 fea3 	bl	8003d90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	200000ac 	.word	0x200000ac
 8001054:	08008278 	.word	0x08008278
 8001058:	08008280 	.word	0x08008280

0800105c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	//printf("Test\n");
	//printf("%lu\n", trigger_input[0]);
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001060:	4802      	ldr	r0, [pc, #8]	; (800106c <DMA1_Channel1_IRQHandler+0x10>)
 8001062:	f002 fbd1 	bl	8003808 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000124 	.word	0x20000124

08001070 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	snprintf(control_pressed, sizeof(control_pressed), " ");
 8001074:	4a05      	ldr	r2, [pc, #20]	; (800108c <TIM1_UP_TIM16_IRQHandler+0x1c>)
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <TIM1_UP_TIM16_IRQHandler+0x20>)
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	8013      	strh	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800107c:	4805      	ldr	r0, [pc, #20]	; (8001094 <TIM1_UP_TIM16_IRQHandler+0x24>)
 800107e:	f004 fb9d 	bl	80057bc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8001082:	4805      	ldr	r0, [pc, #20]	; (8001098 <TIM1_UP_TIM16_IRQHandler+0x28>)
 8001084:	f004 fb9a 	bl	80057bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200000ac 	.word	0x200000ac
 8001090:	08008290 	.word	0x08008290
 8001094:	200002e0 	.word	0x200002e0
 8001098:	20000378 	.word	0x20000378

0800109c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	update_dc_bias_sweep();
 80010a0:	f7ff fb7a 	bl	8000798 <update_dc_bias_sweep>
	if((TIM1->CNT < last_enc_value) || (TIM1->CNT > last_enc_value))
 80010a4:	4b11      	ldr	r3, [pc, #68]	; (80010ec <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 80010a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a8:	4a11      	ldr	r2, [pc, #68]	; (80010f0 <TIM1_TRG_COM_TIM17_IRQHandler+0x54>)
 80010aa:	8812      	ldrh	r2, [r2, #0]
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d305      	bcc.n	80010bc <TIM1_TRG_COM_TIM17_IRQHandler+0x20>
 80010b0:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 80010b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b4:	4a0e      	ldr	r2, [pc, #56]	; (80010f0 <TIM1_TRG_COM_TIM17_IRQHandler+0x54>)
 80010b6:	8812      	ldrh	r2, [r2, #0]
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d90a      	bls.n	80010d2 <TIM1_TRG_COM_TIM17_IRQHandler+0x36>
	{
		printf("%lu\n",TIM1->CNT);
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 80010be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c0:	4619      	mov	r1, r3
 80010c2:	480c      	ldr	r0, [pc, #48]	; (80010f4 <TIM1_TRG_COM_TIM17_IRQHandler+0x58>)
 80010c4:	f005 ff7c 	bl	8006fc0 <iprintf>
		new_enc_value = TIM1->CNT;
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 80010ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <TIM1_TRG_COM_TIM17_IRQHandler+0x5c>)
 80010d0:	801a      	strh	r2, [r3, #0]
	}


	last_enc_value = TIM1->CNT;
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 80010d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <TIM1_TRG_COM_TIM17_IRQHandler+0x54>)
 80010da:	801a      	strh	r2, [r3, #0]
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010dc:	4807      	ldr	r0, [pc, #28]	; (80010fc <TIM1_TRG_COM_TIM17_IRQHandler+0x60>)
 80010de:	f004 fb6d 	bl	80057bc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 80010e2:	4807      	ldr	r0, [pc, #28]	; (8001100 <TIM1_TRG_COM_TIM17_IRQHandler+0x64>)
 80010e4:	f004 fb6a 	bl	80057bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40012c00 	.word	0x40012c00
 80010f0:	2000009c 	.word	0x2000009c
 80010f4:	08008294 	.word	0x08008294
 80010f8:	2000009e 	.word	0x2000009e
 80010fc:	200002e0 	.word	0x200002e0
 8001100:	20000294 	.word	0x20000294

08001104 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001108:	4802      	ldr	r0, [pc, #8]	; (8001114 <TIM2_IRQHandler+0x10>)
 800110a:	f004 fb57 	bl	80057bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	2000032c 	.word	0x2000032c

08001118 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	if(HAL_GPIO_ReadPin(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin))
 800111c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001120:	4814      	ldr	r0, [pc, #80]	; (8001174 <EXTI15_10_IRQHandler+0x5c>)
 8001122:	f002 fe05 	bl	8003d30 <HAL_GPIO_ReadPin>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d008      	beq.n	800113e <EXTI15_10_IRQHandler+0x26>
	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN1");
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <EXTI15_10_IRQHandler+0x60>)
 800112e:	4a13      	ldr	r2, [pc, #76]	; (800117c <EXTI15_10_IRQHandler+0x64>)
 8001130:	6810      	ldr	r0, [r2, #0]
 8001132:	6018      	str	r0, [r3, #0]
 8001134:	7912      	ldrb	r2, [r2, #4]
 8001136:	711a      	strb	r2, [r3, #4]
		printf("BTN1_EXTI14_Pin\n");
 8001138:	4811      	ldr	r0, [pc, #68]	; (8001180 <EXTI15_10_IRQHandler+0x68>)
 800113a:	f005 ffb5 	bl	80070a8 <puts>
	}
	if(HAL_GPIO_ReadPin(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin))
 800113e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001142:	480c      	ldr	r0, [pc, #48]	; (8001174 <EXTI15_10_IRQHandler+0x5c>)
 8001144:	f002 fdf4 	bl	8003d30 <HAL_GPIO_ReadPin>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d008      	beq.n	8001160 <EXTI15_10_IRQHandler+0x48>
	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN2");
 800114e:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <EXTI15_10_IRQHandler+0x60>)
 8001150:	4a0c      	ldr	r2, [pc, #48]	; (8001184 <EXTI15_10_IRQHandler+0x6c>)
 8001152:	6810      	ldr	r0, [r2, #0]
 8001154:	6018      	str	r0, [r3, #0]
 8001156:	7912      	ldrb	r2, [r2, #4]
 8001158:	711a      	strb	r2, [r3, #4]
		printf("BTN2_EXTI15_Pin\n");
 800115a:	480b      	ldr	r0, [pc, #44]	; (8001188 <EXTI15_10_IRQHandler+0x70>)
 800115c:	f005 ffa4 	bl	80070a8 <puts>
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001160:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001164:	f002 fe14 	bl	8003d90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001168:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800116c:	f002 fe10 	bl	8003d90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}
 8001174:	48000800 	.word	0x48000800
 8001178:	200000ac 	.word	0x200000ac
 800117c:	0800829c 	.word	0x0800829c
 8001180:	080082a4 	.word	0x080082a4
 8001184:	080082b4 	.word	0x080082b4
 8001188:	080082bc 	.word	0x080082bc

0800118c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
 800119c:	e00a      	b.n	80011b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800119e:	f3af 8000 	nop.w
 80011a2:	4601      	mov	r1, r0
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	1c5a      	adds	r2, r3, #1
 80011a8:	60ba      	str	r2, [r7, #8]
 80011aa:	b2ca      	uxtb	r2, r1
 80011ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	3301      	adds	r3, #1
 80011b2:	617b      	str	r3, [r7, #20]
 80011b4:	697a      	ldr	r2, [r7, #20]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	dbf0      	blt.n	800119e <_read+0x12>
	}

return len;
 80011bc:	687b      	ldr	r3, [r7, #4]
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3718      	adds	r7, #24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80011c6:	b480      	push	{r7}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
	return -1;
 80011ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011de:	b480      	push	{r7}
 80011e0:	b083      	sub	sp, #12
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
 80011e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011ee:	605a      	str	r2, [r3, #4]
	return 0;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <_isatty>:

int _isatty(int file)
{
 80011fe:	b480      	push	{r7}
 8001200:	b083      	sub	sp, #12
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
	return 1;
 8001206:	2301      	movs	r3, #1
}
 8001208:	4618      	mov	r0, r3
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
	return 0;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3714      	adds	r7, #20
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
	...

08001230 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <_sbrk+0x50>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d102      	bne.n	8001246 <_sbrk+0x16>
		heap_end = &end;
 8001240:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <_sbrk+0x50>)
 8001242:	4a10      	ldr	r2, [pc, #64]	; (8001284 <_sbrk+0x54>)
 8001244:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <_sbrk+0x50>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <_sbrk+0x50>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4413      	add	r3, r2
 8001254:	466a      	mov	r2, sp
 8001256:	4293      	cmp	r3, r2
 8001258:	d907      	bls.n	800126a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800125a:	f005 fe7f 	bl	8006f5c <__errno>
 800125e:	4602      	mov	r2, r0
 8001260:	230c      	movs	r3, #12
 8001262:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001264:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001268:	e006      	b.n	8001278 <_sbrk+0x48>
	}

	heap_end += incr;
 800126a:	4b05      	ldr	r3, [pc, #20]	; (8001280 <_sbrk+0x50>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4413      	add	r3, r2
 8001272:	4a03      	ldr	r2, [pc, #12]	; (8001280 <_sbrk+0x50>)
 8001274:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001276:	68fb      	ldr	r3, [r7, #12]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	200000a0 	.word	0x200000a0
 8001284:	200003d0 	.word	0x200003d0

08001288 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800128c:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <SystemInit+0x28>)
 800128e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001292:	4a07      	ldr	r2, [pc, #28]	; (80012b0 <SystemInit+0x28>)
 8001294:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001298:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800129c:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <SystemInit+0x28>)
 800129e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012a2:	609a      	str	r2, [r3, #8]
#endif
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b09a      	sub	sp, #104	; 0x68
 80012b8:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80012ba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80012be:	2224      	movs	r2, #36	; 0x24
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f005 fe74 	bl	8006fb0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	2234      	movs	r2, #52	; 0x34
 80012d8:	2100      	movs	r1, #0
 80012da:	4618      	mov	r0, r3
 80012dc:	f005 fe68 	bl	8006fb0 <memset>

  htim1.Instance = TIM1;
 80012e0:	4b2a      	ldr	r3, [pc, #168]	; (800138c <MX_TIM1_Init+0xd8>)
 80012e2:	4a2b      	ldr	r2, [pc, #172]	; (8001390 <MX_TIM1_Init+0xdc>)
 80012e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012e6:	4b29      	ldr	r3, [pc, #164]	; (800138c <MX_TIM1_Init+0xd8>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 80012ec:	4b27      	ldr	r3, [pc, #156]	; (800138c <MX_TIM1_Init+0xd8>)
 80012ee:	2240      	movs	r2, #64	; 0x40
 80012f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 80012f2:	4b26      	ldr	r3, [pc, #152]	; (800138c <MX_TIM1_Init+0xd8>)
 80012f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fa:	4b24      	ldr	r3, [pc, #144]	; (800138c <MX_TIM1_Init+0xd8>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001300:	4b22      	ldr	r3, [pc, #136]	; (800138c <MX_TIM1_Init+0xd8>)
 8001302:	2200      	movs	r2, #0
 8001304:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001306:	4b21      	ldr	r3, [pc, #132]	; (800138c <MX_TIM1_Init+0xd8>)
 8001308:	2200      	movs	r2, #0
 800130a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800130c:	2303      	movs	r3, #3
 800130e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001310:	2300      	movs	r3, #0
 8001312:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001314:	2301      	movs	r3, #1
 8001316:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001318:	2300      	movs	r3, #0
 800131a:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001320:	2300      	movs	r3, #0
 8001322:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001324:	2301      	movs	r3, #1
 8001326:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001328:	2300      	movs	r3, #0
 800132a:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001330:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001334:	4619      	mov	r1, r3
 8001336:	4815      	ldr	r0, [pc, #84]	; (800138c <MX_TIM1_Init+0xd8>)
 8001338:	f004 f99a 	bl	8005670 <HAL_TIM_Encoder_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001342:	f7ff fd28 	bl	8000d96 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001346:	2300      	movs	r3, #0
 8001348:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800134a:	2300      	movs	r3, #0
 800134c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134e:	2300      	movs	r3, #0
 8001350:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001352:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001356:	4619      	mov	r1, r3
 8001358:	480c      	ldr	r0, [pc, #48]	; (800138c <MX_TIM1_Init+0xd8>)
 800135a:	f004 ff13 	bl	8006184 <HAL_TIMEx_MasterConfigSynchronization>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8001364:	f7ff fd17 	bl	8000d96 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001368:	2300      	movs	r3, #0
 800136a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800136c:	2300      	movs	r3, #0
 800136e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001370:	1d3b      	adds	r3, r7, #4
 8001372:	4619      	mov	r1, r3
 8001374:	4805      	ldr	r0, [pc, #20]	; (800138c <MX_TIM1_Init+0xd8>)
 8001376:	f004 ff9b 	bl	80062b0 <HAL_TIMEx_ConfigBreakDeadTime>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8001380:	f7ff fd09 	bl	8000d96 <Error_Handler>
  }

}
 8001384:	bf00      	nop
 8001386:	3768      	adds	r7, #104	; 0x68
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	200002e0 	.word	0x200002e0
 8001390:	40012c00 	.word	0x40012c00

08001394 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08c      	sub	sp, #48	; 0x30
 8001398:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800139a:	f107 0320 	add.w	r3, r7, #32
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80013a8:	f107 030c 	add.w	r3, r7, #12
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b8:	463b      	mov	r3, r7
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 80013c2:	4b28      	ldr	r3, [pc, #160]	; (8001464 <MX_TIM2_Init+0xd0>)
 80013c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2047;
 80013ca:	4b26      	ldr	r3, [pc, #152]	; (8001464 <MX_TIM2_Init+0xd0>)
 80013cc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80013d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d2:	4b24      	ldr	r3, [pc, #144]	; (8001464 <MX_TIM2_Init+0xd0>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 80013d8:	4b22      	ldr	r3, [pc, #136]	; (8001464 <MX_TIM2_Init+0xd0>)
 80013da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e0:	4b20      	ldr	r3, [pc, #128]	; (8001464 <MX_TIM2_Init+0xd0>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e6:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <MX_TIM2_Init+0xd0>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013ec:	481d      	ldr	r0, [pc, #116]	; (8001464 <MX_TIM2_Init+0xd0>)
 80013ee:	f004 f884 	bl	80054fa <HAL_TIM_Base_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80013f8:	f7ff fccd 	bl	8000d96 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001400:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001402:	f107 0320 	add.w	r3, r7, #32
 8001406:	4619      	mov	r1, r3
 8001408:	4816      	ldr	r0, [pc, #88]	; (8001464 <MX_TIM2_Init+0xd0>)
 800140a:	f004 fb57 	bl	8005abc <HAL_TIM_ConfigClockSource>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001414:	f7ff fcbf 	bl	8000d96 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8001418:	2305      	movs	r3, #5
 800141a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800141c:	2350      	movs	r3, #80	; 0x50
 800141e:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001428:	f107 030c 	add.w	r3, r7, #12
 800142c:	4619      	mov	r1, r3
 800142e:	480d      	ldr	r0, [pc, #52]	; (8001464 <MX_TIM2_Init+0xd0>)
 8001430:	f004 fc34 	bl	8005c9c <HAL_TIM_SlaveConfigSynchro>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 800143a:	f7ff fcac 	bl	8000d96 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800143e:	2300      	movs	r3, #0
 8001440:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001442:	2300      	movs	r3, #0
 8001444:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001446:	463b      	mov	r3, r7
 8001448:	4619      	mov	r1, r3
 800144a:	4806      	ldr	r0, [pc, #24]	; (8001464 <MX_TIM2_Init+0xd0>)
 800144c:	f004 fe9a 	bl	8006184 <HAL_TIMEx_MasterConfigSynchronization>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8001456:	f7ff fc9e 	bl	8000d96 <Error_Handler>
  }

}
 800145a:	bf00      	nop
 800145c:	3730      	adds	r7, #48	; 0x30
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	2000032c 	.word	0x2000032c

08001468 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b094      	sub	sp, #80	; 0x50
 800146c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800146e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800147c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001488:	463b      	mov	r3, r7
 800148a:	2234      	movs	r2, #52	; 0x34
 800148c:	2100      	movs	r1, #0
 800148e:	4618      	mov	r0, r3
 8001490:	f005 fd8e 	bl	8006fb0 <memset>

  htim8.Instance = TIM8;
 8001494:	4b26      	ldr	r3, [pc, #152]	; (8001530 <MX_TIM8_Init+0xc8>)
 8001496:	4a27      	ldr	r2, [pc, #156]	; (8001534 <MX_TIM8_Init+0xcc>)
 8001498:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800149a:	4b25      	ldr	r3, [pc, #148]	; (8001530 <MX_TIM8_Init+0xc8>)
 800149c:	2200      	movs	r2, #0
 800149e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a0:	4b23      	ldr	r3, [pc, #140]	; (8001530 <MX_TIM8_Init+0xc8>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 80014a6:	4b22      	ldr	r3, [pc, #136]	; (8001530 <MX_TIM8_Init+0xc8>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ac:	4b20      	ldr	r3, [pc, #128]	; (8001530 <MX_TIM8_Init+0xc8>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80014b2:	4b1f      	ldr	r3, [pc, #124]	; (8001530 <MX_TIM8_Init+0xc8>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b8:	4b1d      	ldr	r3, [pc, #116]	; (8001530 <MX_TIM8_Init+0xc8>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80014be:	481c      	ldr	r0, [pc, #112]	; (8001530 <MX_TIM8_Init+0xc8>)
 80014c0:	f004 f81b 	bl	80054fa <HAL_TIM_Base_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 80014ca:	f7ff fc64 	bl	8000d96 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d2:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80014d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014d8:	4619      	mov	r1, r3
 80014da:	4815      	ldr	r0, [pc, #84]	; (8001530 <MX_TIM8_Init+0xc8>)
 80014dc:	f004 faee 	bl	8005abc <HAL_TIM_ConfigClockSource>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80014e6:	f7ff fc56 	bl	8000d96 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014ea:	2320      	movs	r3, #32
 80014ec:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014ee:	2300      	movs	r3, #0
 80014f0:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f2:	2300      	movs	r3, #0
 80014f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80014f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014fa:	4619      	mov	r1, r3
 80014fc:	480c      	ldr	r0, [pc, #48]	; (8001530 <MX_TIM8_Init+0xc8>)
 80014fe:	f004 fe41 	bl	8006184 <HAL_TIMEx_MasterConfigSynchronization>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001508:	f7ff fc45 	bl	8000d96 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800150c:	2300      	movs	r3, #0
 800150e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001510:	2300      	movs	r3, #0
 8001512:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001514:	463b      	mov	r3, r7
 8001516:	4619      	mov	r1, r3
 8001518:	4805      	ldr	r0, [pc, #20]	; (8001530 <MX_TIM8_Init+0xc8>)
 800151a:	f004 fec9 	bl	80062b0 <HAL_TIMEx_ConfigBreakDeadTime>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8001524:	f7ff fc37 	bl	8000d96 <Error_Handler>
  }

}
 8001528:	bf00      	nop
 800152a:	3750      	adds	r7, #80	; 0x50
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000248 	.word	0x20000248
 8001534:	40013400 	.word	0x40013400

08001538 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 800153c:	4b0f      	ldr	r3, [pc, #60]	; (800157c <MX_TIM16_Init+0x44>)
 800153e:	4a10      	ldr	r2, [pc, #64]	; (8001580 <MX_TIM16_Init+0x48>)
 8001540:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001542:	4b0e      	ldr	r3, [pc, #56]	; (800157c <MX_TIM16_Init+0x44>)
 8001544:	2200      	movs	r2, #0
 8001546:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001548:	4b0c      	ldr	r3, [pc, #48]	; (800157c <MX_TIM16_Init+0x44>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 8191;
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <MX_TIM16_Init+0x44>)
 8001550:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8001554:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001556:	4b09      	ldr	r3, [pc, #36]	; (800157c <MX_TIM16_Init+0x44>)
 8001558:	2200      	movs	r2, #0
 800155a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800155c:	4b07      	ldr	r3, [pc, #28]	; (800157c <MX_TIM16_Init+0x44>)
 800155e:	2200      	movs	r2, #0
 8001560:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <MX_TIM16_Init+0x44>)
 8001564:	2200      	movs	r2, #0
 8001566:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001568:	4804      	ldr	r0, [pc, #16]	; (800157c <MX_TIM16_Init+0x44>)
 800156a:	f003 ffc6 	bl	80054fa <HAL_TIM_Base_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001574:	f7ff fc0f 	bl	8000d96 <Error_Handler>
  }

}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000378 	.word	0x20000378
 8001580:	40014400 	.word	0x40014400

08001584 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8001588:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <MX_TIM17_Init+0x44>)
 800158a:	4a10      	ldr	r2, [pc, #64]	; (80015cc <MX_TIM17_Init+0x48>)
 800158c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 2047;
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <MX_TIM17_Init+0x44>)
 8001590:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001594:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001596:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <MX_TIM17_Init+0x44>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 64;
 800159c:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <MX_TIM17_Init+0x44>)
 800159e:	2240      	movs	r2, #64	; 0x40
 80015a0:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a2:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <MX_TIM17_Init+0x44>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80015a8:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <MX_TIM17_Init+0x44>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ae:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <MX_TIM17_Init+0x44>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80015b4:	4804      	ldr	r0, [pc, #16]	; (80015c8 <MX_TIM17_Init+0x44>)
 80015b6:	f003 ffa0 	bl	80054fa <HAL_TIM_Base_Init>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80015c0:	f7ff fbe9 	bl	8000d96 <Error_Handler>
  }

}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000294 	.word	0x20000294
 80015cc:	40014800 	.word	0x40014800

080015d0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08a      	sub	sp, #40	; 0x28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a1f      	ldr	r2, [pc, #124]	; (800166c <HAL_TIM_Encoder_MspInit+0x9c>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d137      	bne.n	8001662 <HAL_TIM_Encoder_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015f2:	4b1f      	ldr	r3, [pc, #124]	; (8001670 <HAL_TIM_Encoder_MspInit+0xa0>)
 80015f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015f6:	4a1e      	ldr	r2, [pc, #120]	; (8001670 <HAL_TIM_Encoder_MspInit+0xa0>)
 80015f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015fc:	6613      	str	r3, [r2, #96]	; 0x60
 80015fe:	4b1c      	ldr	r3, [pc, #112]	; (8001670 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001602:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001606:	613b      	str	r3, [r7, #16]
 8001608:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800160a:	4b19      	ldr	r3, [pc, #100]	; (8001670 <HAL_TIM_Encoder_MspInit+0xa0>)
 800160c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160e:	4a18      	ldr	r2, [pc, #96]	; (8001670 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001610:	f043 0304 	orr.w	r3, r3, #4
 8001614:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001616:	4b16      	ldr	r3, [pc, #88]	; (8001670 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161a:	f003 0304 	and.w	r3, r3, #4
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001622:	2303      	movs	r3, #3
 8001624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	2302      	movs	r3, #2
 8001628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162e:	2300      	movs	r3, #0
 8001630:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001632:	2302      	movs	r3, #2
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001636:	f107 0314 	add.w	r3, r7, #20
 800163a:	4619      	mov	r1, r3
 800163c:	480d      	ldr	r0, [pc, #52]	; (8001674 <HAL_TIM_Encoder_MspInit+0xa4>)
 800163e:	f002 f9f5 	bl	8003a2c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8001642:	2200      	movs	r2, #0
 8001644:	2101      	movs	r1, #1
 8001646:	2019      	movs	r0, #25
 8001648:	f001 fd81 	bl	800314e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800164c:	2019      	movs	r0, #25
 800164e:	f001 fd98 	bl	8003182 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2101      	movs	r1, #1
 8001656:	201a      	movs	r0, #26
 8001658:	f001 fd79 	bl	800314e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800165c:	201a      	movs	r0, #26
 800165e:	f001 fd90 	bl	8003182 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001662:	bf00      	nop
 8001664:	3728      	adds	r7, #40	; 0x28
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40012c00 	.word	0x40012c00
 8001670:	40021000 	.word	0x40021000
 8001674:	48000800 	.word	0x48000800

08001678 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08c      	sub	sp, #48	; 0x30
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	f107 031c 	add.w	r3, r7, #28
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001698:	d131      	bne.n	80016fe <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800169a:	4b3d      	ldr	r3, [pc, #244]	; (8001790 <HAL_TIM_Base_MspInit+0x118>)
 800169c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169e:	4a3c      	ldr	r2, [pc, #240]	; (8001790 <HAL_TIM_Base_MspInit+0x118>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6593      	str	r3, [r2, #88]	; 0x58
 80016a6:	4b3a      	ldr	r3, [pc, #232]	; (8001790 <HAL_TIM_Base_MspInit+0x118>)
 80016a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	61bb      	str	r3, [r7, #24]
 80016b0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b2:	4b37      	ldr	r3, [pc, #220]	; (8001790 <HAL_TIM_Base_MspInit+0x118>)
 80016b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b6:	4a36      	ldr	r2, [pc, #216]	; (8001790 <HAL_TIM_Base_MspInit+0x118>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016be:	4b34      	ldr	r3, [pc, #208]	; (8001790 <HAL_TIM_Base_MspInit+0x118>)
 80016c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016ca:	2301      	movs	r3, #1
 80016cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ce:	2302      	movs	r3, #2
 80016d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d6:	2300      	movs	r3, #0
 80016d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016da:	2301      	movs	r3, #1
 80016dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016de:	f107 031c 	add.w	r3, r7, #28
 80016e2:	4619      	mov	r1, r3
 80016e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e8:	f002 f9a0 	bl	8003a2c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80016ec:	2200      	movs	r2, #0
 80016ee:	2101      	movs	r1, #1
 80016f0:	201c      	movs	r0, #28
 80016f2:	f001 fd2c 	bl	800314e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016f6:	201c      	movs	r0, #28
 80016f8:	f001 fd43 	bl	8003182 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80016fc:	e044      	b.n	8001788 <HAL_TIM_Base_MspInit+0x110>
  else if(tim_baseHandle->Instance==TIM8)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a24      	ldr	r2, [pc, #144]	; (8001794 <HAL_TIM_Base_MspInit+0x11c>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d10c      	bne.n	8001722 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001708:	4b21      	ldr	r3, [pc, #132]	; (8001790 <HAL_TIM_Base_MspInit+0x118>)
 800170a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800170c:	4a20      	ldr	r2, [pc, #128]	; (8001790 <HAL_TIM_Base_MspInit+0x118>)
 800170e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001712:	6613      	str	r3, [r2, #96]	; 0x60
 8001714:	4b1e      	ldr	r3, [pc, #120]	; (8001790 <HAL_TIM_Base_MspInit+0x118>)
 8001716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001718:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	693b      	ldr	r3, [r7, #16]
}
 8001720:	e032      	b.n	8001788 <HAL_TIM_Base_MspInit+0x110>
  else if(tim_baseHandle->Instance==TIM16)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a1c      	ldr	r2, [pc, #112]	; (8001798 <HAL_TIM_Base_MspInit+0x120>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d114      	bne.n	8001756 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800172c:	4b18      	ldr	r3, [pc, #96]	; (8001790 <HAL_TIM_Base_MspInit+0x118>)
 800172e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001730:	4a17      	ldr	r2, [pc, #92]	; (8001790 <HAL_TIM_Base_MspInit+0x118>)
 8001732:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001736:	6613      	str	r3, [r2, #96]	; 0x60
 8001738:	4b15      	ldr	r3, [pc, #84]	; (8001790 <HAL_TIM_Base_MspInit+0x118>)
 800173a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800173c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8001744:	2200      	movs	r2, #0
 8001746:	2101      	movs	r1, #1
 8001748:	2019      	movs	r0, #25
 800174a:	f001 fd00 	bl	800314e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800174e:	2019      	movs	r0, #25
 8001750:	f001 fd17 	bl	8003182 <HAL_NVIC_EnableIRQ>
}
 8001754:	e018      	b.n	8001788 <HAL_TIM_Base_MspInit+0x110>
  else if(tim_baseHandle->Instance==TIM17)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a10      	ldr	r2, [pc, #64]	; (800179c <HAL_TIM_Base_MspInit+0x124>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d113      	bne.n	8001788 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001760:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <HAL_TIM_Base_MspInit+0x118>)
 8001762:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001764:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <HAL_TIM_Base_MspInit+0x118>)
 8001766:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800176a:	6613      	str	r3, [r2, #96]	; 0x60
 800176c:	4b08      	ldr	r3, [pc, #32]	; (8001790 <HAL_TIM_Base_MspInit+0x118>)
 800176e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001770:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8001778:	2200      	movs	r2, #0
 800177a:	2101      	movs	r1, #1
 800177c:	201a      	movs	r0, #26
 800177e:	f001 fce6 	bl	800314e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001782:	201a      	movs	r0, #26
 8001784:	f001 fcfd 	bl	8003182 <HAL_NVIC_EnableIRQ>
}
 8001788:	bf00      	nop
 800178a:	3730      	adds	r7, #48	; 0x30
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40021000 	.word	0x40021000
 8001794:	40013400 	.word	0x40013400
 8001798:	40014400 	.word	0x40014400
 800179c:	40014800 	.word	0x40014800

080017a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017a0:	480d      	ldr	r0, [pc, #52]	; (80017d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017a2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017a4:	480d      	ldr	r0, [pc, #52]	; (80017dc <LoopForever+0x6>)
  ldr r1, =_edata
 80017a6:	490e      	ldr	r1, [pc, #56]	; (80017e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017a8:	4a0e      	ldr	r2, [pc, #56]	; (80017e4 <LoopForever+0xe>)
  movs r3, #0
 80017aa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80017ac:	e002      	b.n	80017b4 <LoopCopyDataInit>

080017ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017b2:	3304      	adds	r3, #4

080017b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b8:	d3f9      	bcc.n	80017ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ba:	4a0b      	ldr	r2, [pc, #44]	; (80017e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017bc:	4c0b      	ldr	r4, [pc, #44]	; (80017ec <LoopForever+0x16>)
  movs r3, #0
 80017be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c0:	e001      	b.n	80017c6 <LoopFillZerobss>

080017c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c4:	3204      	adds	r2, #4

080017c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c8:	d3fb      	bcc.n	80017c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017ca:	f7ff fd5d 	bl	8001288 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ce:	f005 fbcb 	bl	8006f68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017d2:	f7ff f9c3 	bl	8000b5c <main>

080017d6 <LoopForever>:

LoopForever:
    b LoopForever
 80017d6:	e7fe      	b.n	80017d6 <LoopForever>
  ldr   r0, =_estack
 80017d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017e0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80017e4:	080085bc 	.word	0x080085bc
  ldr r2, =_sbss
 80017e8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80017ec:	200003cc 	.word	0x200003cc

080017f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017f0:	e7fe      	b.n	80017f0 <ADC1_2_IRQHandler>

080017f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017f8:	2300      	movs	r3, #0
 80017fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017fc:	2003      	movs	r0, #3
 80017fe:	f001 fc9b 	bl	8003138 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001802:	2000      	movs	r0, #0
 8001804:	f000 f80e 	bl	8001824 <HAL_InitTick>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d002      	beq.n	8001814 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	71fb      	strb	r3, [r7, #7]
 8001812:	e001      	b.n	8001818 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001814:	f7ff fb8e 	bl	8000f34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001818:	79fb      	ldrb	r3, [r7, #7]

}
 800181a:	4618      	mov	r0, r3
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
	...

08001824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800182c:	2300      	movs	r3, #0
 800182e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001830:	4b16      	ldr	r3, [pc, #88]	; (800188c <HAL_InitTick+0x68>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d022      	beq.n	800187e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001838:	4b15      	ldr	r3, [pc, #84]	; (8001890 <HAL_InitTick+0x6c>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4b13      	ldr	r3, [pc, #76]	; (800188c <HAL_InitTick+0x68>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001844:	fbb1 f3f3 	udiv	r3, r1, r3
 8001848:	fbb2 f3f3 	udiv	r3, r2, r3
 800184c:	4618      	mov	r0, r3
 800184e:	f001 fca6 	bl	800319e <HAL_SYSTICK_Config>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d10f      	bne.n	8001878 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b0f      	cmp	r3, #15
 800185c:	d809      	bhi.n	8001872 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800185e:	2200      	movs	r2, #0
 8001860:	6879      	ldr	r1, [r7, #4]
 8001862:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001866:	f001 fc72 	bl	800314e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800186a:	4a0a      	ldr	r2, [pc, #40]	; (8001894 <HAL_InitTick+0x70>)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	e007      	b.n	8001882 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	73fb      	strb	r3, [r7, #15]
 8001876:	e004      	b.n	8001882 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	73fb      	strb	r3, [r7, #15]
 800187c:	e001      	b.n	8001882 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001882:	7bfb      	ldrb	r3, [r7, #15]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	2000000c 	.word	0x2000000c
 8001890:	20000004 	.word	0x20000004
 8001894:	20000008 	.word	0x20000008

08001898 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800189c:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <HAL_IncTick+0x1c>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <HAL_IncTick+0x20>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4413      	add	r3, r2
 80018a6:	4a03      	ldr	r2, [pc, #12]	; (80018b4 <HAL_IncTick+0x1c>)
 80018a8:	6013      	str	r3, [r2, #0]
}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	200003c4 	.word	0x200003c4
 80018b8:	2000000c 	.word	0x2000000c

080018bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  return uwTick;
 80018c0:	4b03      	ldr	r3, [pc, #12]	; (80018d0 <HAL_GetTick+0x14>)
 80018c2:	681b      	ldr	r3, [r3, #0]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	200003c4 	.word	0x200003c4

080018d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018dc:	f7ff ffee 	bl	80018bc <HAL_GetTick>
 80018e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018ec:	d004      	beq.n	80018f8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ee:	4b09      	ldr	r3, [pc, #36]	; (8001914 <HAL_Delay+0x40>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	4413      	add	r3, r2
 80018f6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018f8:	bf00      	nop
 80018fa:	f7ff ffdf 	bl	80018bc <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	68fa      	ldr	r2, [r7, #12]
 8001906:	429a      	cmp	r2, r3
 8001908:	d8f7      	bhi.n	80018fa <HAL_Delay+0x26>
  {
  }
}
 800190a:	bf00      	nop
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	2000000c 	.word	0x2000000c

08001918 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	431a      	orrs	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	609a      	str	r2, [r3, #8]
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
 8001946:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	431a      	orrs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	609a      	str	r2, [r3, #8]
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001974:	4618      	mov	r0, r3
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001980:	b490      	push	{r4, r7}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
 800198c:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	3360      	adds	r3, #96	; 0x60
 8001992:	461a      	mov	r2, r3
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800199c:	6822      	ldr	r2, [r4, #0]
 800199e:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <LL_ADC_SetOffset+0x40>)
 80019a0:	4013      	ands	r3, r2
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	430a      	orrs	r2, r1
 80019ac:	4313      	orrs	r3, r2
 80019ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80019b2:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80019b4:	bf00      	nop
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc90      	pop	{r4, r7}
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	03fff000 	.word	0x03fff000

080019c4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80019c4:	b490      	push	{r4, r7}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3360      	adds	r3, #96	; 0x60
 80019d2:	461a      	mov	r2, r3
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80019dc:	6823      	ldr	r3, [r4, #0]
 80019de:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc90      	pop	{r4, r7}
 80019ea:	4770      	bx	lr

080019ec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80019ec:	b490      	push	{r4, r7}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	3360      	adds	r3, #96	; 0x60
 80019fc:	461a      	mov	r2, r3
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001a06:	6823      	ldr	r3, [r4, #0]
 8001a08:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a12:	bf00      	nop
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc90      	pop	{r4, r7}
 8001a1a:	4770      	bx	lr

08001a1c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001a1c:	b490      	push	{r4, r7}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	3360      	adds	r3, #96	; 0x60
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001a36:	6823      	ldr	r3, [r4, #0]
 8001a38:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc90      	pop	{r4, r7}
 8001a4a:	4770      	bx	lr

08001a4c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001a4c:	b490      	push	{r4, r7}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	3360      	adds	r3, #96	; 0x60
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4413      	add	r3, r2
 8001a64:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001a66:	6823      	ldr	r3, [r4, #0]
 8001a68:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001a72:	bf00      	nop
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc90      	pop	{r4, r7}
 8001a7a:	4770      	bx	lr

08001a7c <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	431a      	orrs	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	615a      	str	r2, [r3, #20]
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001aa2:	b490      	push	{r4, r7}
 8001aa4:	b084      	sub	sp, #16
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	60f8      	str	r0, [r7, #12]
 8001aaa:	60b9      	str	r1, [r7, #8]
 8001aac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	3330      	adds	r3, #48	; 0x30
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	0a1b      	lsrs	r3, r3, #8
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	f003 030c 	and.w	r3, r3, #12
 8001abe:	4413      	add	r3, r2
 8001ac0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001ac2:	6822      	ldr	r2, [r4, #0]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	f003 031f 	and.w	r3, r3, #31
 8001aca:	211f      	movs	r1, #31
 8001acc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	401a      	ands	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	0e9b      	lsrs	r3, r3, #26
 8001ad8:	f003 011f 	and.w	r1, r3, #31
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	f003 031f 	and.w	r3, r3, #31
 8001ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001aea:	bf00      	nop
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc90      	pop	{r4, r7}
 8001af2:	4770      	bx	lr

08001af4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001af4:	b490      	push	{r4, r7}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	3314      	adds	r3, #20
 8001b04:	461a      	mov	r2, r3
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	0e5b      	lsrs	r3, r3, #25
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	4413      	add	r3, r2
 8001b12:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001b14:	6822      	ldr	r2, [r4, #0]
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	0d1b      	lsrs	r3, r3, #20
 8001b1a:	f003 031f 	and.w	r3, r3, #31
 8001b1e:	2107      	movs	r1, #7
 8001b20:	fa01 f303 	lsl.w	r3, r1, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	401a      	ands	r2, r3
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	0d1b      	lsrs	r3, r3, #20
 8001b2c:	f003 031f 	and.w	r3, r3, #31
 8001b30:	6879      	ldr	r1, [r7, #4]
 8001b32:	fa01 f303 	lsl.w	r3, r1, r3
 8001b36:	4313      	orrs	r3, r2
 8001b38:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b3a:	bf00      	nop
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc90      	pop	{r4, r7}
 8001b42:	4770      	bx	lr

08001b44 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	401a      	ands	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f003 0318 	and.w	r3, r3, #24
 8001b66:	4908      	ldr	r1, [pc, #32]	; (8001b88 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b68:	40d9      	lsrs	r1, r3
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	400b      	ands	r3, r1
 8001b6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b72:	431a      	orrs	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b7a:	bf00      	nop
 8001b7c:	3714      	adds	r7, #20
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	0007ffff 	.word	0x0007ffff

08001b8c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001b9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	6093      	str	r3, [r2, #8]
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bc4:	d101      	bne.n	8001bca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001be8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c14:	d101      	bne.n	8001c1a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c16:	2301      	movs	r3, #1
 8001c18:	e000      	b.n	8001c1c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d101      	bne.n	8001c40 <LL_ADC_IsEnabled+0x18>
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e000      	b.n	8001c42 <LL_ADC_IsEnabled+0x1a>
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 0304 	and.w	r3, r3, #4
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	d101      	bne.n	8001c66 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c62:	2301      	movs	r3, #1
 8001c64:	e000      	b.n	8001c68 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 0308 	and.w	r3, r3, #8
 8001c84:	2b08      	cmp	r3, #8
 8001c86:	d101      	bne.n	8001c8c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e000      	b.n	8001c8e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
	...

08001c9c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c9c:	b590      	push	{r4, r7, lr}
 8001c9e:	b089      	sub	sp, #36	; 0x24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e1ad      	b.n	8002012 <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d109      	bne.n	8001cd8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f7fe fb73 	bl	80003b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff ff67 	bl	8001bb0 <LL_ADC_IsDeepPowerDownEnabled>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d004      	beq.n	8001cf2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff ff4d 	bl	8001b8c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff ff82 	bl	8001c00 <LL_ADC_IsInternalRegulatorEnabled>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d113      	bne.n	8001d2a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff ff66 	bl	8001bd8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001d0c:	4b9e      	ldr	r3, [pc, #632]	; (8001f88 <HAL_ADC_Init+0x2ec>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	099b      	lsrs	r3, r3, #6
 8001d12:	4a9e      	ldr	r2, [pc, #632]	; (8001f8c <HAL_ADC_Init+0x2f0>)
 8001d14:	fba2 2303 	umull	r2, r3, r2, r3
 8001d18:	099b      	lsrs	r3, r3, #6
 8001d1a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d1c:	e002      	b.n	8001d24 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	3b01      	subs	r3, #1
 8001d22:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1f9      	bne.n	8001d1e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff ff66 	bl	8001c00 <LL_ADC_IsInternalRegulatorEnabled>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d10d      	bne.n	8001d56 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3e:	f043 0210 	orr.w	r2, r3, #16
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d4a:	f043 0201 	orr.w	r2, r3, #1
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff ff77 	bl	8001c4e <LL_ADC_REG_IsConversionOngoing>
 8001d60:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d66:	f003 0310 	and.w	r3, r3, #16
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f040 8148 	bne.w	8002000 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f040 8144 	bne.w	8002000 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d80:	f043 0202 	orr.w	r2, r3, #2
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ff4b 	bl	8001c28 <LL_ADC_IsEnabled>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d141      	bne.n	8001e1c <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001da0:	d004      	beq.n	8001dac <HAL_ADC_Init+0x110>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a7a      	ldr	r2, [pc, #488]	; (8001f90 <HAL_ADC_Init+0x2f4>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d10f      	bne.n	8001dcc <HAL_ADC_Init+0x130>
 8001dac:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001db0:	f7ff ff3a 	bl	8001c28 <LL_ADC_IsEnabled>
 8001db4:	4604      	mov	r4, r0
 8001db6:	4876      	ldr	r0, [pc, #472]	; (8001f90 <HAL_ADC_Init+0x2f4>)
 8001db8:	f7ff ff36 	bl	8001c28 <LL_ADC_IsEnabled>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	4323      	orrs	r3, r4
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	bf0c      	ite	eq
 8001dc4:	2301      	moveq	r3, #1
 8001dc6:	2300      	movne	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	e012      	b.n	8001df2 <HAL_ADC_Init+0x156>
 8001dcc:	4871      	ldr	r0, [pc, #452]	; (8001f94 <HAL_ADC_Init+0x2f8>)
 8001dce:	f7ff ff2b 	bl	8001c28 <LL_ADC_IsEnabled>
 8001dd2:	4604      	mov	r4, r0
 8001dd4:	4870      	ldr	r0, [pc, #448]	; (8001f98 <HAL_ADC_Init+0x2fc>)
 8001dd6:	f7ff ff27 	bl	8001c28 <LL_ADC_IsEnabled>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	431c      	orrs	r4, r3
 8001dde:	486f      	ldr	r0, [pc, #444]	; (8001f9c <HAL_ADC_Init+0x300>)
 8001de0:	f7ff ff22 	bl	8001c28 <LL_ADC_IsEnabled>
 8001de4:	4603      	mov	r3, r0
 8001de6:	4323      	orrs	r3, r4
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	bf0c      	ite	eq
 8001dec:	2301      	moveq	r3, #1
 8001dee:	2300      	movne	r3, #0
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d012      	beq.n	8001e1c <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001dfe:	d004      	beq.n	8001e0a <HAL_ADC_Init+0x16e>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a62      	ldr	r2, [pc, #392]	; (8001f90 <HAL_ADC_Init+0x2f4>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d101      	bne.n	8001e0e <HAL_ADC_Init+0x172>
 8001e0a:	4a65      	ldr	r2, [pc, #404]	; (8001fa0 <HAL_ADC_Init+0x304>)
 8001e0c:	e000      	b.n	8001e10 <HAL_ADC_Init+0x174>
 8001e0e:	4a65      	ldr	r2, [pc, #404]	; (8001fa4 <HAL_ADC_Init+0x308>)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	4619      	mov	r1, r3
 8001e16:	4610      	mov	r0, r2
 8001e18:	f7ff fd7e 	bl	8001918 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	7f5b      	ldrb	r3, [r3, #29]
 8001e20:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e26:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001e2c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001e32:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e3a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d106      	bne.n	8001e58 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	045b      	lsls	r3, r3, #17
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d009      	beq.n	8001e74 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e64:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68da      	ldr	r2, [r3, #12]
 8001e7a:	4b4b      	ldr	r3, [pc, #300]	; (8001fa8 <HAL_ADC_Init+0x30c>)
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	6812      	ldr	r2, [r2, #0]
 8001e82:	69b9      	ldr	r1, [r7, #24]
 8001e84:	430b      	orrs	r3, r1
 8001e86:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff fed3 	bl	8001c4e <LL_ADC_REG_IsConversionOngoing>
 8001ea8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff fee0 	bl	8001c74 <LL_ADC_INJ_IsConversionOngoing>
 8001eb4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d17f      	bne.n	8001fbc <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d17c      	bne.n	8001fbc <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ec6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ece:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ede:	f023 0302 	bic.w	r3, r3, #2
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	6812      	ldr	r2, [r2, #0]
 8001ee6:	69b9      	ldr	r1, [r7, #24]
 8001ee8:	430b      	orrs	r3, r1
 8001eea:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d017      	beq.n	8001f24 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	691a      	ldr	r2, [r3, #16]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001f02:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001f0c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f10:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	6911      	ldr	r1, [r2, #16]
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	430b      	orrs	r3, r1
 8001f1e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001f22:	e013      	b.n	8001f4c <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	691a      	ldr	r2, [r3, #16]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f32:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	6812      	ldr	r2, [r2, #0]
 8001f40:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f48:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d12a      	bne.n	8001fac <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001f60:	f023 0304 	bic.w	r3, r3, #4
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f6c:	4311      	orrs	r1, r2
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001f72:	4311      	orrs	r1, r2
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f042 0201 	orr.w	r2, r2, #1
 8001f84:	611a      	str	r2, [r3, #16]
 8001f86:	e019      	b.n	8001fbc <HAL_ADC_Init+0x320>
 8001f88:	20000004 	.word	0x20000004
 8001f8c:	053e2d63 	.word	0x053e2d63
 8001f90:	50000100 	.word	0x50000100
 8001f94:	50000400 	.word	0x50000400
 8001f98:	50000500 	.word	0x50000500
 8001f9c:	50000600 	.word	0x50000600
 8001fa0:	50000300 	.word	0x50000300
 8001fa4:	50000700 	.word	0x50000700
 8001fa8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	691a      	ldr	r2, [r3, #16]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 0201 	bic.w	r2, r2, #1
 8001fba:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	695b      	ldr	r3, [r3, #20]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d10c      	bne.n	8001fde <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	f023 010f 	bic.w	r1, r3, #15
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	1e5a      	subs	r2, r3, #1
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	631a      	str	r2, [r3, #48]	; 0x30
 8001fdc:	e007      	b.n	8001fee <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 020f 	bic.w	r2, r2, #15
 8001fec:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff2:	f023 0303 	bic.w	r3, r3, #3
 8001ff6:	f043 0201 	orr.w	r2, r3, #1
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ffe:	e007      	b.n	8002010 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002004:	f043 0210 	orr.w	r2, r3, #16
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002010:	7ffb      	ldrb	r3, [r7, #31]
}
 8002012:	4618      	mov	r0, r3
 8002014:	3724      	adds	r7, #36	; 0x24
 8002016:	46bd      	mov	sp, r7
 8002018:	bd90      	pop	{r4, r7, pc}
 800201a:	bf00      	nop

0800201c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b0a6      	sub	sp, #152	; 0x98
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002026:	2300      	movs	r3, #0
 8002028:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800202c:	2300      	movs	r3, #0
 800202e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002036:	2b01      	cmp	r3, #1
 8002038:	d101      	bne.n	800203e <HAL_ADC_ConfigChannel+0x22>
 800203a:	2302      	movs	r3, #2
 800203c:	e38e      	b.n	800275c <HAL_ADC_ConfigChannel+0x740>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff fdff 	bl	8001c4e <LL_ADC_REG_IsConversionOngoing>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	f040 836f 	bne.w	8002736 <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6818      	ldr	r0, [r3, #0]
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	6859      	ldr	r1, [r3, #4]
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	461a      	mov	r2, r3
 8002066:	f7ff fd1c 	bl	8001aa2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff fded 	bl	8001c4e <LL_ADC_REG_IsConversionOngoing>
 8002074:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff fdf9 	bl	8001c74 <LL_ADC_INJ_IsConversionOngoing>
 8002082:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002086:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800208a:	2b00      	cmp	r3, #0
 800208c:	f040 817b 	bne.w	8002386 <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002090:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002094:	2b00      	cmp	r3, #0
 8002096:	f040 8176 	bne.w	8002386 <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020a2:	d10f      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6818      	ldr	r0, [r3, #0]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2200      	movs	r2, #0
 80020ae:	4619      	mov	r1, r3
 80020b0:	f7ff fd20 	bl	8001af4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff fcdd 	bl	8001a7c <LL_ADC_SetSamplingTimeCommonConfig>
 80020c2:	e00e      	b.n	80020e2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6818      	ldr	r0, [r3, #0]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	6819      	ldr	r1, [r3, #0]
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	461a      	mov	r2, r3
 80020d2:	f7ff fd0f 	bl	8001af4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2100      	movs	r1, #0
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff fccd 	bl	8001a7c <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	695a      	ldr	r2, [r3, #20]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	08db      	lsrs	r3, r3, #3
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	2b04      	cmp	r3, #4
 8002102:	d022      	beq.n	800214a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6818      	ldr	r0, [r3, #0]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	6919      	ldr	r1, [r3, #16]
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002114:	f7ff fc34 	bl	8001980 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6818      	ldr	r0, [r3, #0]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	6919      	ldr	r1, [r3, #16]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	461a      	mov	r2, r3
 8002126:	f7ff fc79 	bl	8001a1c <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6818      	ldr	r0, [r3, #0]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	6919      	ldr	r1, [r3, #16]
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	7f1b      	ldrb	r3, [r3, #28]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d102      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x124>
 800213a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800213e:	e000      	b.n	8002142 <HAL_ADC_ConfigChannel+0x126>
 8002140:	2300      	movs	r3, #0
 8002142:	461a      	mov	r2, r3
 8002144:	f7ff fc82 	bl	8001a4c <LL_ADC_SetOffsetSaturation>
 8002148:	e11d      	b.n	8002386 <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2100      	movs	r1, #0
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff fc37 	bl	80019c4 <LL_ADC_GetOffsetChannel>
 8002156:	4603      	mov	r3, r0
 8002158:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800215c:	2b00      	cmp	r3, #0
 800215e:	d10a      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x15a>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2100      	movs	r1, #0
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff fc2c 	bl	80019c4 <LL_ADC_GetOffsetChannel>
 800216c:	4603      	mov	r3, r0
 800216e:	0e9b      	lsrs	r3, r3, #26
 8002170:	f003 021f 	and.w	r2, r3, #31
 8002174:	e012      	b.n	800219c <HAL_ADC_ConfigChannel+0x180>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2100      	movs	r1, #0
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff fc21 	bl	80019c4 <LL_ADC_GetOffsetChannel>
 8002182:	4603      	mov	r3, r0
 8002184:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002188:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800218c:	fa93 f3a3 	rbit	r3, r3
 8002190:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002192:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002194:	fab3 f383 	clz	r3, r3
 8002198:	b2db      	uxtb	r3, r3
 800219a:	461a      	mov	r2, r3
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d105      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x198>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	0e9b      	lsrs	r3, r3, #26
 80021ae:	f003 031f 	and.w	r3, r3, #31
 80021b2:	e00a      	b.n	80021ca <HAL_ADC_ConfigChannel+0x1ae>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021bc:	fa93 f3a3 	rbit	r3, r3
 80021c0:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 80021c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021c4:	fab3 f383 	clz	r3, r3
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d106      	bne.n	80021dc <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2200      	movs	r2, #0
 80021d4:	2100      	movs	r1, #0
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff fc08 	bl	80019ec <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2101      	movs	r1, #1
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff fbee 	bl	80019c4 <LL_ADC_GetOffsetChannel>
 80021e8:	4603      	mov	r3, r0
 80021ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d10a      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x1ec>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2101      	movs	r1, #1
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff fbe3 	bl	80019c4 <LL_ADC_GetOffsetChannel>
 80021fe:	4603      	mov	r3, r0
 8002200:	0e9b      	lsrs	r3, r3, #26
 8002202:	f003 021f 	and.w	r2, r3, #31
 8002206:	e010      	b.n	800222a <HAL_ADC_ConfigChannel+0x20e>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2101      	movs	r1, #1
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff fbd8 	bl	80019c4 <LL_ADC_GetOffsetChannel>
 8002214:	4603      	mov	r3, r0
 8002216:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002218:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800221a:	fa93 f3a3 	rbit	r3, r3
 800221e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002222:	fab3 f383 	clz	r3, r3
 8002226:	b2db      	uxtb	r3, r3
 8002228:	461a      	mov	r2, r3
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002232:	2b00      	cmp	r3, #0
 8002234:	d105      	bne.n	8002242 <HAL_ADC_ConfigChannel+0x226>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	0e9b      	lsrs	r3, r3, #26
 800223c:	f003 031f 	and.w	r3, r3, #31
 8002240:	e00a      	b.n	8002258 <HAL_ADC_ConfigChannel+0x23c>
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002248:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800224a:	fa93 f3a3 	rbit	r3, r3
 800224e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002250:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002252:	fab3 f383 	clz	r3, r3
 8002256:	b2db      	uxtb	r3, r3
 8002258:	429a      	cmp	r2, r3
 800225a:	d106      	bne.n	800226a <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2200      	movs	r2, #0
 8002262:	2101      	movs	r1, #1
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff fbc1 	bl	80019ec <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2102      	movs	r1, #2
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fba7 	bl	80019c4 <LL_ADC_GetOffsetChannel>
 8002276:	4603      	mov	r3, r0
 8002278:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10a      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x27a>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2102      	movs	r1, #2
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff fb9c 	bl	80019c4 <LL_ADC_GetOffsetChannel>
 800228c:	4603      	mov	r3, r0
 800228e:	0e9b      	lsrs	r3, r3, #26
 8002290:	f003 021f 	and.w	r2, r3, #31
 8002294:	e010      	b.n	80022b8 <HAL_ADC_ConfigChannel+0x29c>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2102      	movs	r1, #2
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff fb91 	bl	80019c4 <LL_ADC_GetOffsetChannel>
 80022a2:	4603      	mov	r3, r0
 80022a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022a8:	fa93 f3a3 	rbit	r3, r3
 80022ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 80022ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022b0:	fab3 f383 	clz	r3, r3
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	461a      	mov	r2, r3
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d105      	bne.n	80022d0 <HAL_ADC_ConfigChannel+0x2b4>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	0e9b      	lsrs	r3, r3, #26
 80022ca:	f003 031f 	and.w	r3, r3, #31
 80022ce:	e00a      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x2ca>
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022d8:	fa93 f3a3 	rbit	r3, r3
 80022dc:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80022de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022e0:	fab3 f383 	clz	r3, r3
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d106      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2200      	movs	r2, #0
 80022f0:	2102      	movs	r1, #2
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff fb7a 	bl	80019ec <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2103      	movs	r1, #3
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff fb60 	bl	80019c4 <LL_ADC_GetOffsetChannel>
 8002304:	4603      	mov	r3, r0
 8002306:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10a      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x308>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2103      	movs	r1, #3
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff fb55 	bl	80019c4 <LL_ADC_GetOffsetChannel>
 800231a:	4603      	mov	r3, r0
 800231c:	0e9b      	lsrs	r3, r3, #26
 800231e:	f003 021f 	and.w	r2, r3, #31
 8002322:	e010      	b.n	8002346 <HAL_ADC_ConfigChannel+0x32a>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2103      	movs	r1, #3
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff fb4a 	bl	80019c4 <LL_ADC_GetOffsetChannel>
 8002330:	4603      	mov	r3, r0
 8002332:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002336:	fa93 f3a3 	rbit	r3, r3
 800233a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800233c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800233e:	fab3 f383 	clz	r3, r3
 8002342:	b2db      	uxtb	r3, r3
 8002344:	461a      	mov	r2, r3
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800234e:	2b00      	cmp	r3, #0
 8002350:	d105      	bne.n	800235e <HAL_ADC_ConfigChannel+0x342>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	0e9b      	lsrs	r3, r3, #26
 8002358:	f003 031f 	and.w	r3, r3, #31
 800235c:	e00a      	b.n	8002374 <HAL_ADC_ConfigChannel+0x358>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002364:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002366:	fa93 f3a3 	rbit	r3, r3
 800236a:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 800236c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800236e:	fab3 f383 	clz	r3, r3
 8002372:	b2db      	uxtb	r3, r3
 8002374:	429a      	cmp	r2, r3
 8002376:	d106      	bne.n	8002386 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2200      	movs	r2, #0
 800237e:	2103      	movs	r1, #3
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff fb33 	bl	80019ec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff fc4c 	bl	8001c28 <LL_ADC_IsEnabled>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	f040 810c 	bne.w	80025b0 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6818      	ldr	r0, [r3, #0]
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	6819      	ldr	r1, [r3, #0]
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	461a      	mov	r2, r3
 80023a6:	f7ff fbcd 	bl	8001b44 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	4aaf      	ldr	r2, [pc, #700]	; (800266c <HAL_ADC_ConfigChannel+0x650>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	f040 80fd 	bne.w	80025b0 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10b      	bne.n	80023de <HAL_ADC_ConfigChannel+0x3c2>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	0e9b      	lsrs	r3, r3, #26
 80023cc:	3301      	adds	r3, #1
 80023ce:	f003 031f 	and.w	r3, r3, #31
 80023d2:	2b09      	cmp	r3, #9
 80023d4:	bf94      	ite	ls
 80023d6:	2301      	movls	r3, #1
 80023d8:	2300      	movhi	r3, #0
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	e012      	b.n	8002404 <HAL_ADC_ConfigChannel+0x3e8>
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023e6:	fa93 f3a3 	rbit	r3, r3
 80023ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80023ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ee:	fab3 f383 	clz	r3, r3
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	3301      	adds	r3, #1
 80023f6:	f003 031f 	and.w	r3, r3, #31
 80023fa:	2b09      	cmp	r3, #9
 80023fc:	bf94      	ite	ls
 80023fe:	2301      	movls	r3, #1
 8002400:	2300      	movhi	r3, #0
 8002402:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002404:	2b00      	cmp	r3, #0
 8002406:	d064      	beq.n	80024d2 <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002410:	2b00      	cmp	r3, #0
 8002412:	d107      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x408>
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	0e9b      	lsrs	r3, r3, #26
 800241a:	3301      	adds	r3, #1
 800241c:	069b      	lsls	r3, r3, #26
 800241e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002422:	e00e      	b.n	8002442 <HAL_ADC_ConfigChannel+0x426>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800242c:	fa93 f3a3 	rbit	r3, r3
 8002430:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002434:	fab3 f383 	clz	r3, r3
 8002438:	b2db      	uxtb	r3, r3
 800243a:	3301      	adds	r3, #1
 800243c:	069b      	lsls	r3, r3, #26
 800243e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800244a:	2b00      	cmp	r3, #0
 800244c:	d109      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x446>
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	0e9b      	lsrs	r3, r3, #26
 8002454:	3301      	adds	r3, #1
 8002456:	f003 031f 	and.w	r3, r3, #31
 800245a:	2101      	movs	r1, #1
 800245c:	fa01 f303 	lsl.w	r3, r1, r3
 8002460:	e010      	b.n	8002484 <HAL_ADC_ConfigChannel+0x468>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800246a:	fa93 f3a3 	rbit	r3, r3
 800246e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002472:	fab3 f383 	clz	r3, r3
 8002476:	b2db      	uxtb	r3, r3
 8002478:	3301      	adds	r3, #1
 800247a:	f003 031f 	and.w	r3, r3, #31
 800247e:	2101      	movs	r1, #1
 8002480:	fa01 f303 	lsl.w	r3, r1, r3
 8002484:	ea42 0103 	orr.w	r1, r2, r3
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10a      	bne.n	80024aa <HAL_ADC_ConfigChannel+0x48e>
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	0e9b      	lsrs	r3, r3, #26
 800249a:	3301      	adds	r3, #1
 800249c:	f003 021f 	and.w	r2, r3, #31
 80024a0:	4613      	mov	r3, r2
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	4413      	add	r3, r2
 80024a6:	051b      	lsls	r3, r3, #20
 80024a8:	e011      	b.n	80024ce <HAL_ADC_ConfigChannel+0x4b2>
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b2:	fa93 f3a3 	rbit	r3, r3
 80024b6:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	fab3 f383 	clz	r3, r3
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	3301      	adds	r3, #1
 80024c2:	f003 021f 	and.w	r2, r3, #31
 80024c6:	4613      	mov	r3, r2
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	4413      	add	r3, r2
 80024cc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024ce:	430b      	orrs	r3, r1
 80024d0:	e069      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d107      	bne.n	80024ee <HAL_ADC_ConfigChannel+0x4d2>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	0e9b      	lsrs	r3, r3, #26
 80024e4:	3301      	adds	r3, #1
 80024e6:	069b      	lsls	r3, r3, #26
 80024e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024ec:	e00e      	b.n	800250c <HAL_ADC_ConfigChannel+0x4f0>
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f4:	6a3b      	ldr	r3, [r7, #32]
 80024f6:	fa93 f3a3 	rbit	r3, r3
 80024fa:	61fb      	str	r3, [r7, #28]
  return result;
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	fab3 f383 	clz	r3, r3
 8002502:	b2db      	uxtb	r3, r3
 8002504:	3301      	adds	r3, #1
 8002506:	069b      	lsls	r3, r3, #26
 8002508:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002514:	2b00      	cmp	r3, #0
 8002516:	d109      	bne.n	800252c <HAL_ADC_ConfigChannel+0x510>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	0e9b      	lsrs	r3, r3, #26
 800251e:	3301      	adds	r3, #1
 8002520:	f003 031f 	and.w	r3, r3, #31
 8002524:	2101      	movs	r1, #1
 8002526:	fa01 f303 	lsl.w	r3, r1, r3
 800252a:	e010      	b.n	800254e <HAL_ADC_ConfigChannel+0x532>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	fa93 f3a3 	rbit	r3, r3
 8002538:	617b      	str	r3, [r7, #20]
  return result;
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	fab3 f383 	clz	r3, r3
 8002540:	b2db      	uxtb	r3, r3
 8002542:	3301      	adds	r3, #1
 8002544:	f003 031f 	and.w	r3, r3, #31
 8002548:	2101      	movs	r1, #1
 800254a:	fa01 f303 	lsl.w	r3, r1, r3
 800254e:	ea42 0103 	orr.w	r1, r2, r3
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10d      	bne.n	800257a <HAL_ADC_ConfigChannel+0x55e>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	0e9b      	lsrs	r3, r3, #26
 8002564:	3301      	adds	r3, #1
 8002566:	f003 021f 	and.w	r2, r3, #31
 800256a:	4613      	mov	r3, r2
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	4413      	add	r3, r2
 8002570:	3b1e      	subs	r3, #30
 8002572:	051b      	lsls	r3, r3, #20
 8002574:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002578:	e014      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x588>
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	fa93 f3a3 	rbit	r3, r3
 8002586:	60fb      	str	r3, [r7, #12]
  return result;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	fab3 f383 	clz	r3, r3
 800258e:	b2db      	uxtb	r3, r3
 8002590:	3301      	adds	r3, #1
 8002592:	f003 021f 	and.w	r2, r3, #31
 8002596:	4613      	mov	r3, r2
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	4413      	add	r3, r2
 800259c:	3b1e      	subs	r3, #30
 800259e:	051b      	lsls	r3, r3, #20
 80025a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025a4:	430b      	orrs	r3, r1
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	6892      	ldr	r2, [r2, #8]
 80025aa:	4619      	mov	r1, r3
 80025ac:	f7ff faa2 	bl	8001af4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	4b2e      	ldr	r3, [pc, #184]	; (8002670 <HAL_ADC_ConfigChannel+0x654>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 80c9 	beq.w	8002750 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025c6:	d004      	beq.n	80025d2 <HAL_ADC_ConfigChannel+0x5b6>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a29      	ldr	r2, [pc, #164]	; (8002674 <HAL_ADC_ConfigChannel+0x658>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d101      	bne.n	80025d6 <HAL_ADC_ConfigChannel+0x5ba>
 80025d2:	4b29      	ldr	r3, [pc, #164]	; (8002678 <HAL_ADC_ConfigChannel+0x65c>)
 80025d4:	e000      	b.n	80025d8 <HAL_ADC_ConfigChannel+0x5bc>
 80025d6:	4b29      	ldr	r3, [pc, #164]	; (800267c <HAL_ADC_ConfigChannel+0x660>)
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff f9c3 	bl	8001964 <LL_ADC_GetCommonPathInternalCh>
 80025de:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a26      	ldr	r2, [pc, #152]	; (8002680 <HAL_ADC_ConfigChannel+0x664>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d004      	beq.n	80025f6 <HAL_ADC_ConfigChannel+0x5da>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a24      	ldr	r2, [pc, #144]	; (8002684 <HAL_ADC_ConfigChannel+0x668>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d14e      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d148      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800260a:	d005      	beq.n	8002618 <HAL_ADC_ConfigChannel+0x5fc>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a1d      	ldr	r2, [pc, #116]	; (8002688 <HAL_ADC_ConfigChannel+0x66c>)
 8002612:	4293      	cmp	r3, r2
 8002614:	f040 8099 	bne.w	800274a <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002620:	d004      	beq.n	800262c <HAL_ADC_ConfigChannel+0x610>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a13      	ldr	r2, [pc, #76]	; (8002674 <HAL_ADC_ConfigChannel+0x658>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d101      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x614>
 800262c:	4a12      	ldr	r2, [pc, #72]	; (8002678 <HAL_ADC_ConfigChannel+0x65c>)
 800262e:	e000      	b.n	8002632 <HAL_ADC_ConfigChannel+0x616>
 8002630:	4a12      	ldr	r2, [pc, #72]	; (800267c <HAL_ADC_ConfigChannel+0x660>)
 8002632:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002636:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800263a:	4619      	mov	r1, r3
 800263c:	4610      	mov	r0, r2
 800263e:	f7ff f97e 	bl	800193e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002642:	4b12      	ldr	r3, [pc, #72]	; (800268c <HAL_ADC_ConfigChannel+0x670>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	099b      	lsrs	r3, r3, #6
 8002648:	4a11      	ldr	r2, [pc, #68]	; (8002690 <HAL_ADC_ConfigChannel+0x674>)
 800264a:	fba2 2303 	umull	r2, r3, r2, r3
 800264e:	099a      	lsrs	r2, r3, #6
 8002650:	4613      	mov	r3, r2
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	4413      	add	r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800265a:	e002      	b.n	8002662 <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	3b01      	subs	r3, #1
 8002660:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1f9      	bne.n	800265c <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002668:	e06f      	b.n	800274a <HAL_ADC_ConfigChannel+0x72e>
 800266a:	bf00      	nop
 800266c:	407f0000 	.word	0x407f0000
 8002670:	80080000 	.word	0x80080000
 8002674:	50000100 	.word	0x50000100
 8002678:	50000300 	.word	0x50000300
 800267c:	50000700 	.word	0x50000700
 8002680:	c3210000 	.word	0xc3210000
 8002684:	90c00010 	.word	0x90c00010
 8002688:	50000600 	.word	0x50000600
 800268c:	20000004 	.word	0x20000004
 8002690:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a32      	ldr	r2, [pc, #200]	; (8002764 <HAL_ADC_ConfigChannel+0x748>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d125      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x6ce>
 800269e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d11f      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a2e      	ldr	r2, [pc, #184]	; (8002768 <HAL_ADC_ConfigChannel+0x74c>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d104      	bne.n	80026be <HAL_ADC_ConfigChannel+0x6a2>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a2c      	ldr	r2, [pc, #176]	; (800276c <HAL_ADC_ConfigChannel+0x750>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d047      	beq.n	800274e <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026c6:	d004      	beq.n	80026d2 <HAL_ADC_ConfigChannel+0x6b6>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a26      	ldr	r2, [pc, #152]	; (8002768 <HAL_ADC_ConfigChannel+0x74c>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d101      	bne.n	80026d6 <HAL_ADC_ConfigChannel+0x6ba>
 80026d2:	4a27      	ldr	r2, [pc, #156]	; (8002770 <HAL_ADC_ConfigChannel+0x754>)
 80026d4:	e000      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x6bc>
 80026d6:	4a27      	ldr	r2, [pc, #156]	; (8002774 <HAL_ADC_ConfigChannel+0x758>)
 80026d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026e0:	4619      	mov	r1, r3
 80026e2:	4610      	mov	r0, r2
 80026e4:	f7ff f92b 	bl	800193e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026e8:	e031      	b.n	800274e <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a22      	ldr	r2, [pc, #136]	; (8002778 <HAL_ADC_ConfigChannel+0x75c>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d12d      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80026f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d127      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a18      	ldr	r2, [pc, #96]	; (8002768 <HAL_ADC_ConfigChannel+0x74c>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d022      	beq.n	8002750 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002712:	d004      	beq.n	800271e <HAL_ADC_ConfigChannel+0x702>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a13      	ldr	r2, [pc, #76]	; (8002768 <HAL_ADC_ConfigChannel+0x74c>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d101      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x706>
 800271e:	4a14      	ldr	r2, [pc, #80]	; (8002770 <HAL_ADC_ConfigChannel+0x754>)
 8002720:	e000      	b.n	8002724 <HAL_ADC_ConfigChannel+0x708>
 8002722:	4a14      	ldr	r2, [pc, #80]	; (8002774 <HAL_ADC_ConfigChannel+0x758>)
 8002724:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002728:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800272c:	4619      	mov	r1, r3
 800272e:	4610      	mov	r0, r2
 8002730:	f7ff f905 	bl	800193e <LL_ADC_SetCommonPathInternalCh>
 8002734:	e00c      	b.n	8002750 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800273a:	f043 0220 	orr.w	r2, r3, #32
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8002748:	e002      	b.n	8002750 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800274a:	bf00      	nop
 800274c:	e000      	b.n	8002750 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800274e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002758:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 800275c:	4618      	mov	r0, r3
 800275e:	3798      	adds	r7, #152	; 0x98
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	c7520000 	.word	0xc7520000
 8002768:	50000100 	.word	0x50000100
 800276c:	50000500 	.word	0x50000500
 8002770:	50000300 	.word	0x50000300
 8002774:	50000700 	.word	0x50000700
 8002778:	cb840000 	.word	0xcb840000

0800277c <LL_ADC_IsEnabled>:
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b01      	cmp	r3, #1
 800278e:	d101      	bne.n	8002794 <LL_ADC_IsEnabled+0x18>
 8002790:	2301      	movs	r3, #1
 8002792:	e000      	b.n	8002796 <LL_ADC_IsEnabled+0x1a>
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <LL_ADC_REG_IsConversionOngoing>:
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 0304 	and.w	r3, r3, #4
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	d101      	bne.n	80027ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80027b6:	2301      	movs	r3, #1
 80027b8:	e000      	b.n	80027bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80027c8:	b590      	push	{r4, r7, lr}
 80027ca:	b0a1      	sub	sp, #132	; 0x84
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027d2:	2300      	movs	r3, #0
 80027d4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d101      	bne.n	80027e6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80027e2:	2302      	movs	r3, #2
 80027e4:	e0e3      	b.n	80029ae <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027f6:	d102      	bne.n	80027fe <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80027f8:	4b6f      	ldr	r3, [pc, #444]	; (80029b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80027fa:	60bb      	str	r3, [r7, #8]
 80027fc:	e009      	b.n	8002812 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a6e      	ldr	r2, [pc, #440]	; (80029bc <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d102      	bne.n	800280e <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8002808:	4b6d      	ldr	r3, [pc, #436]	; (80029c0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800280a:	60bb      	str	r3, [r7, #8]
 800280c:	e001      	b.n	8002812 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800280e:	2300      	movs	r3, #0
 8002810:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d10b      	bne.n	8002830 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281c:	f043 0220 	orr.w	r2, r3, #32
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e0be      	b.n	80029ae <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff ffb5 	bl	80027a2 <LL_ADC_REG_IsConversionOngoing>
 8002838:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff ffaf 	bl	80027a2 <LL_ADC_REG_IsConversionOngoing>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	f040 80a0 	bne.w	800298c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800284c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800284e:	2b00      	cmp	r3, #0
 8002850:	f040 809c 	bne.w	800298c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800285c:	d004      	beq.n	8002868 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a55      	ldr	r2, [pc, #340]	; (80029b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d101      	bne.n	800286c <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8002868:	4b56      	ldr	r3, [pc, #344]	; (80029c4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800286a:	e000      	b.n	800286e <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 800286c:	4b56      	ldr	r3, [pc, #344]	; (80029c8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800286e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d04b      	beq.n	8002910 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002878:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	6859      	ldr	r1, [r3, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800288a:	035b      	lsls	r3, r3, #13
 800288c:	430b      	orrs	r3, r1
 800288e:	431a      	orrs	r2, r3
 8002890:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002892:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800289c:	d004      	beq.n	80028a8 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a45      	ldr	r2, [pc, #276]	; (80029b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d10f      	bne.n	80028c8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80028a8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80028ac:	f7ff ff66 	bl	800277c <LL_ADC_IsEnabled>
 80028b0:	4604      	mov	r4, r0
 80028b2:	4841      	ldr	r0, [pc, #260]	; (80029b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80028b4:	f7ff ff62 	bl	800277c <LL_ADC_IsEnabled>
 80028b8:	4603      	mov	r3, r0
 80028ba:	4323      	orrs	r3, r4
 80028bc:	2b00      	cmp	r3, #0
 80028be:	bf0c      	ite	eq
 80028c0:	2301      	moveq	r3, #1
 80028c2:	2300      	movne	r3, #0
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	e012      	b.n	80028ee <HAL_ADCEx_MultiModeConfigChannel+0x126>
 80028c8:	483c      	ldr	r0, [pc, #240]	; (80029bc <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80028ca:	f7ff ff57 	bl	800277c <LL_ADC_IsEnabled>
 80028ce:	4604      	mov	r4, r0
 80028d0:	483b      	ldr	r0, [pc, #236]	; (80029c0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80028d2:	f7ff ff53 	bl	800277c <LL_ADC_IsEnabled>
 80028d6:	4603      	mov	r3, r0
 80028d8:	431c      	orrs	r4, r3
 80028da:	483c      	ldr	r0, [pc, #240]	; (80029cc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80028dc:	f7ff ff4e 	bl	800277c <LL_ADC_IsEnabled>
 80028e0:	4603      	mov	r3, r0
 80028e2:	4323      	orrs	r3, r4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	bf0c      	ite	eq
 80028e8:	2301      	moveq	r3, #1
 80028ea:	2300      	movne	r3, #0
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d056      	beq.n	80029a0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80028f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80028fa:	f023 030f 	bic.w	r3, r3, #15
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	6811      	ldr	r1, [r2, #0]
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	6892      	ldr	r2, [r2, #8]
 8002906:	430a      	orrs	r2, r1
 8002908:	431a      	orrs	r2, r3
 800290a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800290c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800290e:	e047      	b.n	80029a0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002910:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002918:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800291a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002924:	d004      	beq.n	8002930 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a23      	ldr	r2, [pc, #140]	; (80029b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d10f      	bne.n	8002950 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002930:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002934:	f7ff ff22 	bl	800277c <LL_ADC_IsEnabled>
 8002938:	4604      	mov	r4, r0
 800293a:	481f      	ldr	r0, [pc, #124]	; (80029b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800293c:	f7ff ff1e 	bl	800277c <LL_ADC_IsEnabled>
 8002940:	4603      	mov	r3, r0
 8002942:	4323      	orrs	r3, r4
 8002944:	2b00      	cmp	r3, #0
 8002946:	bf0c      	ite	eq
 8002948:	2301      	moveq	r3, #1
 800294a:	2300      	movne	r3, #0
 800294c:	b2db      	uxtb	r3, r3
 800294e:	e012      	b.n	8002976 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8002950:	481a      	ldr	r0, [pc, #104]	; (80029bc <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8002952:	f7ff ff13 	bl	800277c <LL_ADC_IsEnabled>
 8002956:	4604      	mov	r4, r0
 8002958:	4819      	ldr	r0, [pc, #100]	; (80029c0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800295a:	f7ff ff0f 	bl	800277c <LL_ADC_IsEnabled>
 800295e:	4603      	mov	r3, r0
 8002960:	431c      	orrs	r4, r3
 8002962:	481a      	ldr	r0, [pc, #104]	; (80029cc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002964:	f7ff ff0a 	bl	800277c <LL_ADC_IsEnabled>
 8002968:	4603      	mov	r3, r0
 800296a:	4323      	orrs	r3, r4
 800296c:	2b00      	cmp	r3, #0
 800296e:	bf0c      	ite	eq
 8002970:	2301      	moveq	r3, #1
 8002972:	2300      	movne	r3, #0
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d012      	beq.n	80029a0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800297a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002982:	f023 030f 	bic.w	r3, r3, #15
 8002986:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002988:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800298a:	e009      	b.n	80029a0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002990:	f043 0220 	orr.w	r2, r3, #32
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800299e:	e000      	b.n	80029a2 <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029a0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80029aa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3784      	adds	r7, #132	; 0x84
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd90      	pop	{r4, r7, pc}
 80029b6:	bf00      	nop
 80029b8:	50000100 	.word	0x50000100
 80029bc:	50000400 	.word	0x50000400
 80029c0:	50000500 	.word	0x50000500
 80029c4:	50000300 	.word	0x50000300
 80029c8:	50000700 	.word	0x50000700
 80029cc:	50000600 	.word	0x50000600

080029d0 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80029d8:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <LL_EXTI_EnableIT_0_31+0x20>)
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	4904      	ldr	r1, [pc, #16]	; (80029f0 <LL_EXTI_EnableIT_0_31+0x20>)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	600b      	str	r3, [r1, #0]
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	40010400 	.word	0x40010400

080029f4 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80029fc:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <LL_EXTI_EnableIT_32_63+0x20>)
 80029fe:	6a1a      	ldr	r2, [r3, #32]
 8002a00:	4904      	ldr	r1, [pc, #16]	; (8002a14 <LL_EXTI_EnableIT_32_63+0x20>)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	620b      	str	r3, [r1, #32]
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	40010400 	.word	0x40010400

08002a18 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002a20:	4b06      	ldr	r3, [pc, #24]	; (8002a3c <LL_EXTI_DisableIT_0_31+0x24>)
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	43db      	mvns	r3, r3
 8002a28:	4904      	ldr	r1, [pc, #16]	; (8002a3c <LL_EXTI_DisableIT_0_31+0x24>)
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	600b      	str	r3, [r1, #0]
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	40010400 	.word	0x40010400

08002a40 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8002a48:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <LL_EXTI_DisableIT_32_63+0x24>)
 8002a4a:	6a1a      	ldr	r2, [r3, #32]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	43db      	mvns	r3, r3
 8002a50:	4904      	ldr	r1, [pc, #16]	; (8002a64 <LL_EXTI_DisableIT_32_63+0x24>)
 8002a52:	4013      	ands	r3, r2
 8002a54:	620b      	str	r3, [r1, #32]
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	40010400 	.word	0x40010400

08002a68 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8002a70:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	4904      	ldr	r1, [pc, #16]	; (8002a88 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	604b      	str	r3, [r1, #4]

}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	40010400 	.word	0x40010400

08002a8c <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8002a94:	4b05      	ldr	r3, [pc, #20]	; (8002aac <LL_EXTI_EnableEvent_32_63+0x20>)
 8002a96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a98:	4904      	ldr	r1, [pc, #16]	; (8002aac <LL_EXTI_EnableEvent_32_63+0x20>)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	40010400 	.word	0x40010400

08002ab0 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002ab8:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	4904      	ldr	r1, [pc, #16]	; (8002ad4 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	604b      	str	r3, [r1, #4]
}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	40010400 	.word	0x40010400

08002ad8 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8002ae0:	4b06      	ldr	r3, [pc, #24]	; (8002afc <LL_EXTI_DisableEvent_32_63+0x24>)
 8002ae2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	4904      	ldr	r1, [pc, #16]	; (8002afc <LL_EXTI_DisableEvent_32_63+0x24>)
 8002aea:	4013      	ands	r3, r2
 8002aec:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	40010400 	.word	0x40010400

08002b00 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002b08:	4b05      	ldr	r3, [pc, #20]	; (8002b20 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	4904      	ldr	r1, [pc, #16]	; (8002b20 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	608b      	str	r3, [r1, #8]

}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	40010400 	.word	0x40010400

08002b24 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8002b2c:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002b2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b30:	4904      	ldr	r1, [pc, #16]	; (8002b44 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	40010400 	.word	0x40010400

08002b48 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8002b50:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	43db      	mvns	r3, r3
 8002b58:	4904      	ldr	r1, [pc, #16]	; (8002b6c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	608b      	str	r3, [r1, #8]

}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	40010400 	.word	0x40010400

08002b70 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8002b78:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002b7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	4904      	ldr	r1, [pc, #16]	; (8002b94 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002b82:	4013      	ands	r3, r2
 8002b84:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	40010400 	.word	0x40010400

08002b98 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8002ba0:	4b05      	ldr	r3, [pc, #20]	; (8002bb8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002ba2:	68da      	ldr	r2, [r3, #12]
 8002ba4:	4904      	ldr	r1, [pc, #16]	; (8002bb8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	60cb      	str	r3, [r1, #12]
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	40010400 	.word	0x40010400

08002bbc <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8002bc4:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bc8:	4904      	ldr	r1, [pc, #16]	; (8002bdc <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	40010400 	.word	0x40010400

08002be0 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8002be8:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002bea:	68da      	ldr	r2, [r3, #12]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	4904      	ldr	r1, [pc, #16]	; (8002c04 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	60cb      	str	r3, [r1, #12]
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	40010400 	.word	0x40010400

08002c08 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8002c10:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	43db      	mvns	r3, r3
 8002c18:	4904      	ldr	r1, [pc, #16]	; (8002c2c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	40010400 	.word	0x40010400

08002c30 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8002c38:	4a04      	ldr	r2, [pc, #16]	; (8002c4c <LL_EXTI_ClearFlag_0_31+0x1c>)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6153      	str	r3, [r2, #20]
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	40010400 	.word	0x40010400

08002c50 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8002c58:	4a04      	ldr	r2, [pc, #16]	; (8002c6c <LL_EXTI_ClearFlag_32_63+0x1c>)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6353      	str	r3, [r2, #52]	; 0x34
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	40010400 	.word	0x40010400

08002c70 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b088      	sub	sp, #32
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d102      	bne.n	8002c8c <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	77fb      	strb	r3, [r7, #31]
 8002c8a:	e180      	b.n	8002f8e <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c9a:	d102      	bne.n	8002ca2 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	77fb      	strb	r3, [r7, #31]
 8002ca0:	e175      	b.n	8002f8e <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	7f5b      	ldrb	r3, [r3, #29]
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d108      	bne.n	8002cbe <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7fd fc0d 	bl	80004d8 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cc8:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	4b98      	ldr	r3, [pc, #608]	; (8002f50 <HAL_COMP_Init+0x2e0>)
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	6812      	ldr	r2, [r2, #0]
 8002cf6:	6979      	ldr	r1, [r7, #20]
 8002cf8:	430b      	orrs	r3, r1
 8002cfa:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d015      	beq.n	8002d36 <HAL_COMP_Init+0xc6>
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d112      	bne.n	8002d36 <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002d10:	4b90      	ldr	r3, [pc, #576]	; (8002f54 <HAL_COMP_Init+0x2e4>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	099b      	lsrs	r3, r3, #6
 8002d16:	4a90      	ldr	r2, [pc, #576]	; (8002f58 <HAL_COMP_Init+0x2e8>)
 8002d18:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1c:	099a      	lsrs	r2, r3, #6
 8002d1e:	4613      	mov	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8002d28:	e002      	b.n	8002d30 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1f9      	bne.n	8002d2a <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a88      	ldr	r2, [pc, #544]	; (8002f5c <HAL_COMP_Init+0x2ec>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d028      	beq.n	8002d92 <HAL_COMP_Init+0x122>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a86      	ldr	r2, [pc, #536]	; (8002f60 <HAL_COMP_Init+0x2f0>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d020      	beq.n	8002d8c <HAL_COMP_Init+0x11c>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a85      	ldr	r2, [pc, #532]	; (8002f64 <HAL_COMP_Init+0x2f4>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d018      	beq.n	8002d86 <HAL_COMP_Init+0x116>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a83      	ldr	r2, [pc, #524]	; (8002f68 <HAL_COMP_Init+0x2f8>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d010      	beq.n	8002d80 <HAL_COMP_Init+0x110>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a82      	ldr	r2, [pc, #520]	; (8002f6c <HAL_COMP_Init+0x2fc>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d008      	beq.n	8002d7a <HAL_COMP_Init+0x10a>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a80      	ldr	r2, [pc, #512]	; (8002f70 <HAL_COMP_Init+0x300>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d101      	bne.n	8002d76 <HAL_COMP_Init+0x106>
 8002d72:	2301      	movs	r3, #1
 8002d74:	e00f      	b.n	8002d96 <HAL_COMP_Init+0x126>
 8002d76:	2302      	movs	r3, #2
 8002d78:	e00d      	b.n	8002d96 <HAL_COMP_Init+0x126>
 8002d7a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002d7e:	e00a      	b.n	8002d96 <HAL_COMP_Init+0x126>
 8002d80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d84:	e007      	b.n	8002d96 <HAL_COMP_Init+0x126>
 8002d86:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002d8a:	e004      	b.n	8002d96 <HAL_COMP_Init+0x126>
 8002d8c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d90:	e001      	b.n	8002d96 <HAL_COMP_Init+0x126>
 8002d92:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d96:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	f003 0303 	and.w	r3, r3, #3
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 80b6 	beq.w	8002f12 <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	f003 0310 	and.w	r3, r3, #16
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d011      	beq.n	8002dd6 <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a6e      	ldr	r2, [pc, #440]	; (8002f70 <HAL_COMP_Init+0x300>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d004      	beq.n	8002dc6 <HAL_COMP_Init+0x156>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a6c      	ldr	r2, [pc, #432]	; (8002f74 <HAL_COMP_Init+0x304>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d103      	bne.n	8002dce <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8002dc6:	6938      	ldr	r0, [r7, #16]
 8002dc8:	f7ff feac 	bl	8002b24 <LL_EXTI_EnableRisingTrig_32_63>
 8002dcc:	e014      	b.n	8002df8 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8002dce:	6938      	ldr	r0, [r7, #16]
 8002dd0:	f7ff fe96 	bl	8002b00 <LL_EXTI_EnableRisingTrig_0_31>
 8002dd4:	e010      	b.n	8002df8 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a65      	ldr	r2, [pc, #404]	; (8002f70 <HAL_COMP_Init+0x300>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d004      	beq.n	8002dea <HAL_COMP_Init+0x17a>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a63      	ldr	r2, [pc, #396]	; (8002f74 <HAL_COMP_Init+0x304>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d103      	bne.n	8002df2 <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8002dea:	6938      	ldr	r0, [r7, #16]
 8002dec:	f7ff fec0 	bl	8002b70 <LL_EXTI_DisableRisingTrig_32_63>
 8002df0:	e002      	b.n	8002df8 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8002df2:	6938      	ldr	r0, [r7, #16]
 8002df4:	f7ff fea8 	bl	8002b48 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	f003 0320 	and.w	r3, r3, #32
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d011      	beq.n	8002e28 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a59      	ldr	r2, [pc, #356]	; (8002f70 <HAL_COMP_Init+0x300>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d004      	beq.n	8002e18 <HAL_COMP_Init+0x1a8>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a58      	ldr	r2, [pc, #352]	; (8002f74 <HAL_COMP_Init+0x304>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d103      	bne.n	8002e20 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8002e18:	6938      	ldr	r0, [r7, #16]
 8002e1a:	f7ff fecf 	bl	8002bbc <LL_EXTI_EnableFallingTrig_32_63>
 8002e1e:	e014      	b.n	8002e4a <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8002e20:	6938      	ldr	r0, [r7, #16]
 8002e22:	f7ff feb9 	bl	8002b98 <LL_EXTI_EnableFallingTrig_0_31>
 8002e26:	e010      	b.n	8002e4a <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a50      	ldr	r2, [pc, #320]	; (8002f70 <HAL_COMP_Init+0x300>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d004      	beq.n	8002e3c <HAL_COMP_Init+0x1cc>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a4f      	ldr	r2, [pc, #316]	; (8002f74 <HAL_COMP_Init+0x304>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d103      	bne.n	8002e44 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8002e3c:	6938      	ldr	r0, [r7, #16]
 8002e3e:	f7ff fee3 	bl	8002c08 <LL_EXTI_DisableFallingTrig_32_63>
 8002e42:	e002      	b.n	8002e4a <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8002e44:	6938      	ldr	r0, [r7, #16]
 8002e46:	f7ff fecb 	bl	8002be0 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a48      	ldr	r2, [pc, #288]	; (8002f70 <HAL_COMP_Init+0x300>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d004      	beq.n	8002e5e <HAL_COMP_Init+0x1ee>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a46      	ldr	r2, [pc, #280]	; (8002f74 <HAL_COMP_Init+0x304>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d103      	bne.n	8002e66 <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8002e5e:	6938      	ldr	r0, [r7, #16]
 8002e60:	f7ff fef6 	bl	8002c50 <LL_EXTI_ClearFlag_32_63>
 8002e64:	e002      	b.n	8002e6c <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8002e66:	6938      	ldr	r0, [r7, #16]
 8002e68:	f7ff fee2 	bl	8002c30 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d011      	beq.n	8002e9c <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a3c      	ldr	r2, [pc, #240]	; (8002f70 <HAL_COMP_Init+0x300>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d004      	beq.n	8002e8c <HAL_COMP_Init+0x21c>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a3b      	ldr	r2, [pc, #236]	; (8002f74 <HAL_COMP_Init+0x304>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d103      	bne.n	8002e94 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8002e8c:	6938      	ldr	r0, [r7, #16]
 8002e8e:	f7ff fdfd 	bl	8002a8c <LL_EXTI_EnableEvent_32_63>
 8002e92:	e014      	b.n	8002ebe <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8002e94:	6938      	ldr	r0, [r7, #16]
 8002e96:	f7ff fde7 	bl	8002a68 <LL_EXTI_EnableEvent_0_31>
 8002e9a:	e010      	b.n	8002ebe <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a33      	ldr	r2, [pc, #204]	; (8002f70 <HAL_COMP_Init+0x300>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d004      	beq.n	8002eb0 <HAL_COMP_Init+0x240>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a32      	ldr	r2, [pc, #200]	; (8002f74 <HAL_COMP_Init+0x304>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d103      	bne.n	8002eb8 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8002eb0:	6938      	ldr	r0, [r7, #16]
 8002eb2:	f7ff fe11 	bl	8002ad8 <LL_EXTI_DisableEvent_32_63>
 8002eb6:	e002      	b.n	8002ebe <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8002eb8:	6938      	ldr	r0, [r7, #16]
 8002eba:	f7ff fdf9 	bl	8002ab0 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d011      	beq.n	8002eee <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a28      	ldr	r2, [pc, #160]	; (8002f70 <HAL_COMP_Init+0x300>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d004      	beq.n	8002ede <HAL_COMP_Init+0x26e>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a26      	ldr	r2, [pc, #152]	; (8002f74 <HAL_COMP_Init+0x304>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d103      	bne.n	8002ee6 <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8002ede:	6938      	ldr	r0, [r7, #16]
 8002ee0:	f7ff fd88 	bl	80029f4 <LL_EXTI_EnableIT_32_63>
 8002ee4:	e04b      	b.n	8002f7e <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8002ee6:	6938      	ldr	r0, [r7, #16]
 8002ee8:	f7ff fd72 	bl	80029d0 <LL_EXTI_EnableIT_0_31>
 8002eec:	e047      	b.n	8002f7e <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a1f      	ldr	r2, [pc, #124]	; (8002f70 <HAL_COMP_Init+0x300>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d004      	beq.n	8002f02 <HAL_COMP_Init+0x292>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a1d      	ldr	r2, [pc, #116]	; (8002f74 <HAL_COMP_Init+0x304>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d103      	bne.n	8002f0a <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8002f02:	6938      	ldr	r0, [r7, #16]
 8002f04:	f7ff fd9c 	bl	8002a40 <LL_EXTI_DisableIT_32_63>
 8002f08:	e039      	b.n	8002f7e <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8002f0a:	6938      	ldr	r0, [r7, #16]
 8002f0c:	f7ff fd84 	bl	8002a18 <LL_EXTI_DisableIT_0_31>
 8002f10:	e035      	b.n	8002f7e <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a16      	ldr	r2, [pc, #88]	; (8002f70 <HAL_COMP_Init+0x300>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d004      	beq.n	8002f26 <HAL_COMP_Init+0x2b6>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a14      	ldr	r2, [pc, #80]	; (8002f74 <HAL_COMP_Init+0x304>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d103      	bne.n	8002f2e <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8002f26:	6938      	ldr	r0, [r7, #16]
 8002f28:	f7ff fdd6 	bl	8002ad8 <LL_EXTI_DisableEvent_32_63>
 8002f2c:	e002      	b.n	8002f34 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8002f2e:	6938      	ldr	r0, [r7, #16]
 8002f30:	f7ff fdbe 	bl	8002ab0 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a0d      	ldr	r2, [pc, #52]	; (8002f70 <HAL_COMP_Init+0x300>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d004      	beq.n	8002f48 <HAL_COMP_Init+0x2d8>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a0c      	ldr	r2, [pc, #48]	; (8002f74 <HAL_COMP_Init+0x304>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d117      	bne.n	8002f78 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8002f48:	6938      	ldr	r0, [r7, #16]
 8002f4a:	f7ff fd79 	bl	8002a40 <LL_EXTI_DisableIT_32_63>
 8002f4e:	e016      	b.n	8002f7e <HAL_COMP_Init+0x30e>
 8002f50:	ff007e0f 	.word	0xff007e0f
 8002f54:	20000004 	.word	0x20000004
 8002f58:	053e2d63 	.word	0x053e2d63
 8002f5c:	40010200 	.word	0x40010200
 8002f60:	40010204 	.word	0x40010204
 8002f64:	40010208 	.word	0x40010208
 8002f68:	4001020c 	.word	0x4001020c
 8002f6c:	40010210 	.word	0x40010210
 8002f70:	40010214 	.word	0x40010214
 8002f74:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8002f78:	6938      	ldr	r0, [r7, #16]
 8002f7a:	f7ff fd4d 	bl	8002a18 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	7f5b      	ldrb	r3, [r3, #29]
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d102      	bne.n	8002f8e <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8002f8e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3720      	adds	r7, #32
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <__NVIC_SetPriorityGrouping>:
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fa8:	4b0c      	ldr	r3, [pc, #48]	; (8002fdc <__NVIC_SetPriorityGrouping+0x44>)
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fca:	4a04      	ldr	r2, [pc, #16]	; (8002fdc <__NVIC_SetPriorityGrouping+0x44>)
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	60d3      	str	r3, [r2, #12]
}
 8002fd0:	bf00      	nop
 8002fd2:	3714      	adds	r7, #20
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	e000ed00 	.word	0xe000ed00

08002fe0 <__NVIC_GetPriorityGrouping>:
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fe4:	4b04      	ldr	r3, [pc, #16]	; (8002ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	0a1b      	lsrs	r3, r3, #8
 8002fea:	f003 0307 	and.w	r3, r3, #7
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	e000ed00 	.word	0xe000ed00

08002ffc <__NVIC_EnableIRQ>:
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	4603      	mov	r3, r0
 8003004:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300a:	2b00      	cmp	r3, #0
 800300c:	db0b      	blt.n	8003026 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800300e:	79fb      	ldrb	r3, [r7, #7]
 8003010:	f003 021f 	and.w	r2, r3, #31
 8003014:	4907      	ldr	r1, [pc, #28]	; (8003034 <__NVIC_EnableIRQ+0x38>)
 8003016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301a:	095b      	lsrs	r3, r3, #5
 800301c:	2001      	movs	r0, #1
 800301e:	fa00 f202 	lsl.w	r2, r0, r2
 8003022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	e000e100 	.word	0xe000e100

08003038 <__NVIC_SetPriority>:
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	4603      	mov	r3, r0
 8003040:	6039      	str	r1, [r7, #0]
 8003042:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003048:	2b00      	cmp	r3, #0
 800304a:	db0a      	blt.n	8003062 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	b2da      	uxtb	r2, r3
 8003050:	490c      	ldr	r1, [pc, #48]	; (8003084 <__NVIC_SetPriority+0x4c>)
 8003052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003056:	0112      	lsls	r2, r2, #4
 8003058:	b2d2      	uxtb	r2, r2
 800305a:	440b      	add	r3, r1
 800305c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003060:	e00a      	b.n	8003078 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	b2da      	uxtb	r2, r3
 8003066:	4908      	ldr	r1, [pc, #32]	; (8003088 <__NVIC_SetPriority+0x50>)
 8003068:	79fb      	ldrb	r3, [r7, #7]
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	3b04      	subs	r3, #4
 8003070:	0112      	lsls	r2, r2, #4
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	440b      	add	r3, r1
 8003076:	761a      	strb	r2, [r3, #24]
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	e000e100 	.word	0xe000e100
 8003088:	e000ed00 	.word	0xe000ed00

0800308c <NVIC_EncodePriority>:
{
 800308c:	b480      	push	{r7}
 800308e:	b089      	sub	sp, #36	; 0x24
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	f1c3 0307 	rsb	r3, r3, #7
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	bf28      	it	cs
 80030aa:	2304      	movcs	r3, #4
 80030ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	3304      	adds	r3, #4
 80030b2:	2b06      	cmp	r3, #6
 80030b4:	d902      	bls.n	80030bc <NVIC_EncodePriority+0x30>
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	3b03      	subs	r3, #3
 80030ba:	e000      	b.n	80030be <NVIC_EncodePriority+0x32>
 80030bc:	2300      	movs	r3, #0
 80030be:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	43da      	mvns	r2, r3
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	401a      	ands	r2, r3
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	fa01 f303 	lsl.w	r3, r1, r3
 80030de:	43d9      	mvns	r1, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030e4:	4313      	orrs	r3, r2
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3724      	adds	r7, #36	; 0x24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
	...

080030f4 <SysTick_Config>:
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3b01      	subs	r3, #1
 8003100:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003104:	d301      	bcc.n	800310a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003106:	2301      	movs	r3, #1
 8003108:	e00f      	b.n	800312a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800310a:	4a0a      	ldr	r2, [pc, #40]	; (8003134 <SysTick_Config+0x40>)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3b01      	subs	r3, #1
 8003110:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003112:	210f      	movs	r1, #15
 8003114:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003118:	f7ff ff8e 	bl	8003038 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800311c:	4b05      	ldr	r3, [pc, #20]	; (8003134 <SysTick_Config+0x40>)
 800311e:	2200      	movs	r2, #0
 8003120:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003122:	4b04      	ldr	r3, [pc, #16]	; (8003134 <SysTick_Config+0x40>)
 8003124:	2207      	movs	r2, #7
 8003126:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	e000e010 	.word	0xe000e010

08003138 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f7ff ff29 	bl	8002f98 <__NVIC_SetPriorityGrouping>
}
 8003146:	bf00      	nop
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b086      	sub	sp, #24
 8003152:	af00      	add	r7, sp, #0
 8003154:	4603      	mov	r3, r0
 8003156:	60b9      	str	r1, [r7, #8]
 8003158:	607a      	str	r2, [r7, #4]
 800315a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800315c:	f7ff ff40 	bl	8002fe0 <__NVIC_GetPriorityGrouping>
 8003160:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	68b9      	ldr	r1, [r7, #8]
 8003166:	6978      	ldr	r0, [r7, #20]
 8003168:	f7ff ff90 	bl	800308c <NVIC_EncodePriority>
 800316c:	4602      	mov	r2, r0
 800316e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003172:	4611      	mov	r1, r2
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff ff5f 	bl	8003038 <__NVIC_SetPriority>
}
 800317a:	bf00      	nop
 800317c:	3718      	adds	r7, #24
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b082      	sub	sp, #8
 8003186:	af00      	add	r7, sp, #0
 8003188:	4603      	mov	r3, r0
 800318a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800318c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff ff33 	bl	8002ffc <__NVIC_EnableIRQ>
}
 8003196:	bf00      	nop
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b082      	sub	sp, #8
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7ff ffa4 	bl	80030f4 <SysTick_Config>
 80031ac:	4603      	mov	r3, r0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b082      	sub	sp, #8
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e014      	b.n	80031f2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	791b      	ldrb	r3, [r3, #4]
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d105      	bne.n	80031de <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f7fd fa47 	bl	800066c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2202      	movs	r2, #2
 80031e2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b082      	sub	sp, #8
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
 8003202:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	795b      	ldrb	r3, [r3, #5]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d101      	bne.n	8003210 <HAL_DAC_Start+0x16>
 800320c:	2302      	movs	r3, #2
 800320e:	e043      	b.n	8003298 <HAL_DAC_Start+0x9e>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2202      	movs	r2, #2
 800321a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6819      	ldr	r1, [r3, #0]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	f003 0310 	and.w	r3, r3, #16
 8003228:	2201      	movs	r2, #1
 800322a:	409a      	lsls	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	430a      	orrs	r2, r1
 8003232:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8003234:	2001      	movs	r0, #1
 8003236:	f7fe fb4d 	bl	80018d4 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10f      	bne.n	8003260 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800324a:	2b02      	cmp	r3, #2
 800324c:	d11d      	bne.n	800328a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f042 0201 	orr.w	r2, r2, #1
 800325c:	605a      	str	r2, [r3, #4]
 800325e:	e014      	b.n	800328a <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	f003 0310 	and.w	r3, r3, #16
 8003270:	2102      	movs	r1, #2
 8003272:	fa01 f303 	lsl.w	r3, r1, r3
 8003276:	429a      	cmp	r2, r3
 8003278:	d107      	bne.n	800328a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f042 0202 	orr.w	r2, r2, #2
 8003288:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3708      	adds	r7, #8
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b087      	sub	sp, #28
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
 80032ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80032ae:	2300      	movs	r3, #0
 80032b0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d105      	bne.n	80032d0 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4413      	add	r3, r2
 80032ca:	3308      	adds	r3, #8
 80032cc:	617b      	str	r3, [r7, #20]
 80032ce:	e004      	b.n	80032da <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4413      	add	r3, r2
 80032d6:	3314      	adds	r3, #20
 80032d8:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	461a      	mov	r2, r3
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	371c      	adds	r7, #28
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08a      	sub	sp, #40	; 0x28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80032fc:	2300      	movs	r3, #0
 80032fe:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	795b      	ldrb	r3, [r3, #5]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d101      	bne.n	800330c <HAL_DAC_ConfigChannel+0x1c>
 8003308:	2302      	movs	r3, #2
 800330a:	e194      	b.n	8003636 <HAL_DAC_ConfigChannel+0x346>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2201      	movs	r2, #1
 8003310:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2202      	movs	r2, #2
 8003316:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	2b04      	cmp	r3, #4
 800331e:	d174      	bne.n	800340a <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d137      	bne.n	8003396 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8003326:	f7fe fac9 	bl	80018bc <HAL_GetTick>
 800332a:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800332c:	e011      	b.n	8003352 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800332e:	f7fe fac5 	bl	80018bc <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	2b01      	cmp	r3, #1
 800333a:	d90a      	bls.n	8003352 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	f043 0208 	orr.w	r2, r3, #8
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2203      	movs	r2, #3
 800334c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e171      	b.n	8003636 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003358:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1e6      	bne.n	800332e <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8003360:	2001      	movs	r0, #1
 8003362:	f7fe fab7 	bl	80018d4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800336e:	641a      	str	r2, [r3, #64]	; 0x40
 8003370:	e01e      	b.n	80033b0 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003372:	f7fe faa3 	bl	80018bc <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b01      	cmp	r3, #1
 800337e:	d90a      	bls.n	8003396 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	f043 0208 	orr.w	r2, r3, #8
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2203      	movs	r2, #3
 8003390:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e14f      	b.n	8003636 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800339c:	2b00      	cmp	r3, #0
 800339e:	dbe8      	blt.n	8003372 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80033a0:	2001      	movs	r0, #1
 80033a2:	f7fe fa97 	bl	80018d4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033ae:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f003 0310 	and.w	r3, r3, #16
 80033bc:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80033c0:	fa01 f303 	lsl.w	r3, r1, r3
 80033c4:	43db      	mvns	r3, r3
 80033c6:	ea02 0103 	and.w	r1, r2, r3
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f003 0310 	and.w	r3, r3, #16
 80033d4:	409a      	lsls	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f003 0310 	and.w	r3, r3, #16
 80033ea:	21ff      	movs	r1, #255	; 0xff
 80033ec:	fa01 f303 	lsl.w	r3, r1, r3
 80033f0:	43db      	mvns	r3, r3
 80033f2:	ea02 0103 	and.w	r1, r2, r3
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f003 0310 	and.w	r3, r3, #16
 8003400:	409a      	lsls	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d11d      	bne.n	800344e <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003418:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f003 0310 	and.w	r3, r3, #16
 8003420:	221f      	movs	r2, #31
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	43db      	mvns	r3, r3
 8003428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800342a:	4013      	ands	r3, r2
 800342c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f003 0310 	and.w	r3, r3, #16
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003442:	4313      	orrs	r3, r2
 8003444:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800344c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003454:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f003 0310 	and.w	r3, r3, #16
 800345c:	2207      	movs	r2, #7
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	43db      	mvns	r3, r3
 8003464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003466:	4013      	ands	r3, r2
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d002      	beq.n	800347c <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 8003476:	2300      	movs	r3, #0
 8003478:	623b      	str	r3, [r7, #32]
 800347a:	e011      	b.n	80034a0 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d002      	beq.n	800348e <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003488:	2301      	movs	r3, #1
 800348a:	623b      	str	r3, [r7, #32]
 800348c:	e008      	b.n	80034a0 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d102      	bne.n	800349c <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003496:	2301      	movs	r3, #1
 8003498:	623b      	str	r3, [r7, #32]
 800349a:	e001      	b.n	80034a0 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800349c:	2300      	movs	r3, #0
 800349e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	6a3a      	ldr	r2, [r7, #32]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f003 0310 	and.w	r3, r3, #16
 80034b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	43db      	mvns	r3, r3
 80034c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c2:	4013      	ands	r3, r2
 80034c4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	791b      	ldrb	r3, [r3, #4]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d102      	bne.n	80034d4 <HAL_DAC_ConfigChannel+0x1e4>
 80034ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034d2:	e000      	b.n	80034d6 <HAL_DAC_ConfigChannel+0x1e6>
 80034d4:	2300      	movs	r3, #0
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	4313      	orrs	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f003 0310 	and.w	r3, r3, #16
 80034e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034e6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ea:	43db      	mvns	r3, r3
 80034ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ee:	4013      	ands	r3, r2
 80034f0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	795b      	ldrb	r3, [r3, #5]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d102      	bne.n	8003500 <HAL_DAC_ConfigChannel+0x210>
 80034fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034fe:	e000      	b.n	8003502 <HAL_DAC_ConfigChannel+0x212>
 8003500:	2300      	movs	r3, #0
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	4313      	orrs	r3, r2
 8003506:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800350e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2b02      	cmp	r3, #2
 8003516:	d114      	bne.n	8003542 <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003518:	f001 f9b8 	bl	800488c <HAL_RCC_GetHCLKFreq>
 800351c:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	4a47      	ldr	r2, [pc, #284]	; (8003640 <HAL_DAC_ConfigChannel+0x350>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d904      	bls.n	8003530 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003528:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800352c:	627b      	str	r3, [r7, #36]	; 0x24
 800352e:	e00d      	b.n	800354c <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	4a44      	ldr	r2, [pc, #272]	; (8003644 <HAL_DAC_ConfigChannel+0x354>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d909      	bls.n	800354c <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800353e:	627b      	str	r3, [r7, #36]	; 0x24
 8003540:	e004      	b.n	800354c <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003548:	4313      	orrs	r3, r2
 800354a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f003 0310 	and.w	r3, r3, #16
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800355a:	4313      	orrs	r3, r2
 800355c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003564:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6819      	ldr	r1, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f003 0310 	and.w	r3, r3, #16
 8003572:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003576:	fa02 f303 	lsl.w	r3, r2, r3
 800357a:	43da      	mvns	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	400a      	ands	r2, r1
 8003582:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f003 0310 	and.w	r3, r3, #16
 8003592:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003596:	fa02 f303 	lsl.w	r3, r2, r3
 800359a:	43db      	mvns	r3, r3
 800359c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800359e:	4013      	ands	r3, r2
 80035a0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f003 0310 	and.w	r3, r3, #16
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b6:	4313      	orrs	r3, r2
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6819      	ldr	r1, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f003 0310 	and.w	r3, r3, #16
 80035ce:	22c0      	movs	r2, #192	; 0xc0
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	43da      	mvns	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	400a      	ands	r2, r1
 80035dc:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	089b      	lsrs	r3, r3, #2
 80035e4:	f003 030f 	and.w	r3, r3, #15
 80035e8:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	089b      	lsrs	r3, r3, #2
 80035f0:	021b      	lsls	r3, r3, #8
 80035f2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f003 0310 	and.w	r3, r3, #16
 8003608:	f640 710f 	movw	r1, #3855	; 0xf0f
 800360c:	fa01 f303 	lsl.w	r3, r1, r3
 8003610:	43db      	mvns	r3, r3
 8003612:	ea02 0103 	and.w	r1, r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f003 0310 	and.w	r3, r3, #16
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	409a      	lsls	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2201      	movs	r2, #1
 800362c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3728      	adds	r7, #40	; 0x28
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	09896800 	.word	0x09896800
 8003644:	04c4b400 	.word	0x04c4b400

08003648 <HAL_DACEx_TriangleWaveGenerate>:
  *            @arg DAC_TRIANGLEAMPLITUDE_2047: Select max triangle amplitude of 2047
  *            @arg DAC_TRIANGLEAMPLITUDE_4095: Select max triangle amplitude of 4095
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_TriangleWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	795b      	ldrb	r3, [r3, #5]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d101      	bne.n	8003660 <HAL_DACEx_TriangleWaveGenerate+0x18>
 800365c:	2302      	movs	r3, #2
 800365e:	e024      	b.n	80036aa <HAL_DACEx_TriangleWaveGenerate+0x62>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2201      	movs	r2, #1
 8003664:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2202      	movs	r2, #2
 800366a:	711a      	strb	r2, [r3, #4]

  /* Enable the triangle wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL), (DAC_CR_WAVE1_1 | Amplitude) << (Channel & 0x10UL));
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	f003 0310 	and.w	r3, r3, #16
 8003678:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 800367c:	fa01 f303 	lsl.w	r3, r1, r3
 8003680:	43db      	mvns	r3, r3
 8003682:	ea02 0103 	and.w	r1, r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	f003 0310 	and.w	r3, r3, #16
 8003692:	409a      	lsls	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2201      	movs	r2, #1
 80036a0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
	...

080036b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e08d      	b.n	80037e6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	461a      	mov	r2, r3
 80036d0:	4b47      	ldr	r3, [pc, #284]	; (80037f0 <HAL_DMA_Init+0x138>)
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d80f      	bhi.n	80036f6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	461a      	mov	r2, r3
 80036dc:	4b45      	ldr	r3, [pc, #276]	; (80037f4 <HAL_DMA_Init+0x13c>)
 80036de:	4413      	add	r3, r2
 80036e0:	4a45      	ldr	r2, [pc, #276]	; (80037f8 <HAL_DMA_Init+0x140>)
 80036e2:	fba2 2303 	umull	r2, r3, r2, r3
 80036e6:	091b      	lsrs	r3, r3, #4
 80036e8:	009a      	lsls	r2, r3, #2
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a42      	ldr	r2, [pc, #264]	; (80037fc <HAL_DMA_Init+0x144>)
 80036f2:	641a      	str	r2, [r3, #64]	; 0x40
 80036f4:	e00e      	b.n	8003714 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	461a      	mov	r2, r3
 80036fc:	4b40      	ldr	r3, [pc, #256]	; (8003800 <HAL_DMA_Init+0x148>)
 80036fe:	4413      	add	r3, r2
 8003700:	4a3d      	ldr	r2, [pc, #244]	; (80037f8 <HAL_DMA_Init+0x140>)
 8003702:	fba2 2303 	umull	r2, r3, r2, r3
 8003706:	091b      	lsrs	r3, r3, #4
 8003708:	009a      	lsls	r2, r3, #2
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a3c      	ldr	r2, [pc, #240]	; (8003804 <HAL_DMA_Init+0x14c>)
 8003712:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2202      	movs	r2, #2
 8003718:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800372a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800372e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003738:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003744:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003750:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	4313      	orrs	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f8fe 	bl	8003968 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003774:	d102      	bne.n	800377c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003784:	b2d2      	uxtb	r2, r2
 8003786:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003790:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d010      	beq.n	80037bc <HAL_DMA_Init+0x104>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b04      	cmp	r3, #4
 80037a0:	d80c      	bhi.n	80037bc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f91e 	bl	80039e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80037b8:	605a      	str	r2, [r3, #4]
 80037ba:	e008      	b.n	80037ce <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	40020407 	.word	0x40020407
 80037f4:	bffdfff8 	.word	0xbffdfff8
 80037f8:	cccccccd 	.word	0xcccccccd
 80037fc:	40020000 	.word	0x40020000
 8003800:	bffdfbf8 	.word	0xbffdfbf8
 8003804:	40020400 	.word	0x40020400

08003808 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003824:	f003 031f 	and.w	r3, r3, #31
 8003828:	2204      	movs	r2, #4
 800382a:	409a      	lsls	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4013      	ands	r3, r2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d026      	beq.n	8003882 <HAL_DMA_IRQHandler+0x7a>
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	f003 0304 	and.w	r3, r3, #4
 800383a:	2b00      	cmp	r3, #0
 800383c:	d021      	beq.n	8003882 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0320 	and.w	r3, r3, #32
 8003848:	2b00      	cmp	r3, #0
 800384a:	d107      	bne.n	800385c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 0204 	bic.w	r2, r2, #4
 800385a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003860:	f003 021f 	and.w	r2, r3, #31
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003868:	2104      	movs	r1, #4
 800386a:	fa01 f202 	lsl.w	r2, r1, r2
 800386e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003874:	2b00      	cmp	r3, #0
 8003876:	d071      	beq.n	800395c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003880:	e06c      	b.n	800395c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003886:	f003 031f 	and.w	r3, r3, #31
 800388a:	2202      	movs	r2, #2
 800388c:	409a      	lsls	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	4013      	ands	r3, r2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d02e      	beq.n	80038f4 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d029      	beq.n	80038f4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0320 	and.w	r3, r3, #32
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10b      	bne.n	80038c6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 020a 	bic.w	r2, r2, #10
 80038bc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ca:	f003 021f 	and.w	r2, r3, #31
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	2102      	movs	r1, #2
 80038d4:	fa01 f202 	lsl.w	r2, r1, r2
 80038d8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d038      	beq.n	800395c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80038f2:	e033      	b.n	800395c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f8:	f003 031f 	and.w	r3, r3, #31
 80038fc:	2208      	movs	r2, #8
 80038fe:	409a      	lsls	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	4013      	ands	r3, r2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d02a      	beq.n	800395e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	f003 0308 	and.w	r3, r3, #8
 800390e:	2b00      	cmp	r3, #0
 8003910:	d025      	beq.n	800395e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 020e 	bic.w	r2, r2, #14
 8003920:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003926:	f003 021f 	and.w	r2, r3, #31
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	2101      	movs	r1, #1
 8003930:	fa01 f202 	lsl.w	r2, r1, r2
 8003934:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003950:	2b00      	cmp	r3, #0
 8003952:	d004      	beq.n	800395e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800395c:	bf00      	nop
 800395e:	bf00      	nop
}
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
	...

08003968 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003968:	b480      	push	{r7}
 800396a:	b087      	sub	sp, #28
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	461a      	mov	r2, r3
 8003976:	4b16      	ldr	r3, [pc, #88]	; (80039d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003978:	429a      	cmp	r2, r3
 800397a:	d802      	bhi.n	8003982 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800397c:	4b15      	ldr	r3, [pc, #84]	; (80039d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800397e:	617b      	str	r3, [r7, #20]
 8003980:	e001      	b.n	8003986 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003982:	4b15      	ldr	r3, [pc, #84]	; (80039d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003984:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	b2db      	uxtb	r3, r3
 8003990:	3b08      	subs	r3, #8
 8003992:	4a12      	ldr	r2, [pc, #72]	; (80039dc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003994:	fba2 2303 	umull	r2, r3, r2, r3
 8003998:	091b      	lsrs	r3, r3, #4
 800399a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a0:	089b      	lsrs	r3, r3, #2
 80039a2:	009a      	lsls	r2, r3, #2
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	4413      	add	r3, r2
 80039a8:	461a      	mov	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a0b      	ldr	r2, [pc, #44]	; (80039e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80039b2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f003 031f 	and.w	r3, r3, #31
 80039ba:	2201      	movs	r2, #1
 80039bc:	409a      	lsls	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80039c2:	bf00      	nop
 80039c4:	371c      	adds	r7, #28
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	40020407 	.word	0x40020407
 80039d4:	40020800 	.word	0x40020800
 80039d8:	40020820 	.word	0x40020820
 80039dc:	cccccccd 	.word	0xcccccccd
 80039e0:	40020880 	.word	0x40020880

080039e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	4b0b      	ldr	r3, [pc, #44]	; (8003a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80039f8:	4413      	add	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	461a      	mov	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a08      	ldr	r2, [pc, #32]	; (8003a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003a06:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	f003 031f 	and.w	r3, r3, #31
 8003a10:	2201      	movs	r2, #1
 8003a12:	409a      	lsls	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003a18:	bf00      	nop
 8003a1a:	3714      	adds	r7, #20
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	1000823f 	.word	0x1000823f
 8003a28:	40020940 	.word	0x40020940

08003a2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b087      	sub	sp, #28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003a36:	2300      	movs	r3, #0
 8003a38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003a3a:	e15a      	b.n	8003cf2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	2101      	movs	r1, #1
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	fa01 f303 	lsl.w	r3, r1, r3
 8003a48:	4013      	ands	r3, r2
 8003a4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 814c 	beq.w	8003cec <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d00b      	beq.n	8003a74 <HAL_GPIO_Init+0x48>
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d007      	beq.n	8003a74 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a68:	2b11      	cmp	r3, #17
 8003a6a:	d003      	beq.n	8003a74 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	2b12      	cmp	r3, #18
 8003a72:	d130      	bne.n	8003ad6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	2203      	movs	r2, #3
 8003a80:	fa02 f303 	lsl.w	r3, r2, r3
 8003a84:	43db      	mvns	r3, r3
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	68da      	ldr	r2, [r3, #12]
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003aaa:	2201      	movs	r2, #1
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab2:	43db      	mvns	r3, r3
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	091b      	lsrs	r3, r3, #4
 8003ac0:	f003 0201 	and.w	r2, r3, #1
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	005b      	lsls	r3, r3, #1
 8003ae0:	2203      	movs	r2, #3
 8003ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae6:	43db      	mvns	r3, r3
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	4013      	ands	r3, r2
 8003aec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	689a      	ldr	r2, [r3, #8]
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	fa02 f303 	lsl.w	r3, r2, r3
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d003      	beq.n	8003b16 <HAL_GPIO_Init+0xea>
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	2b12      	cmp	r3, #18
 8003b14:	d123      	bne.n	8003b5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	08da      	lsrs	r2, r3, #3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	3208      	adds	r2, #8
 8003b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	f003 0307 	and.w	r3, r3, #7
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	220f      	movs	r2, #15
 8003b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b32:	43db      	mvns	r3, r3
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	4013      	ands	r3, r2
 8003b38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	691a      	ldr	r2, [r3, #16]
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	08da      	lsrs	r2, r3, #3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	3208      	adds	r2, #8
 8003b58:	6939      	ldr	r1, [r7, #16]
 8003b5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	005b      	lsls	r3, r3, #1
 8003b68:	2203      	movs	r2, #3
 8003b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6e:	43db      	mvns	r3, r3
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	4013      	ands	r3, r2
 8003b74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f003 0203 	and.w	r2, r3, #3
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	fa02 f303 	lsl.w	r3, r2, r3
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f000 80a6 	beq.w	8003cec <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ba0:	4b5b      	ldr	r3, [pc, #364]	; (8003d10 <HAL_GPIO_Init+0x2e4>)
 8003ba2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ba4:	4a5a      	ldr	r2, [pc, #360]	; (8003d10 <HAL_GPIO_Init+0x2e4>)
 8003ba6:	f043 0301 	orr.w	r3, r3, #1
 8003baa:	6613      	str	r3, [r2, #96]	; 0x60
 8003bac:	4b58      	ldr	r3, [pc, #352]	; (8003d10 <HAL_GPIO_Init+0x2e4>)
 8003bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	60bb      	str	r3, [r7, #8]
 8003bb6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bb8:	4a56      	ldr	r2, [pc, #344]	; (8003d14 <HAL_GPIO_Init+0x2e8>)
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	089b      	lsrs	r3, r3, #2
 8003bbe:	3302      	adds	r3, #2
 8003bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f003 0303 	and.w	r3, r3, #3
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	220f      	movs	r2, #15
 8003bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd4:	43db      	mvns	r3, r3
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003be2:	d01f      	beq.n	8003c24 <HAL_GPIO_Init+0x1f8>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a4c      	ldr	r2, [pc, #304]	; (8003d18 <HAL_GPIO_Init+0x2ec>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d019      	beq.n	8003c20 <HAL_GPIO_Init+0x1f4>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a4b      	ldr	r2, [pc, #300]	; (8003d1c <HAL_GPIO_Init+0x2f0>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d013      	beq.n	8003c1c <HAL_GPIO_Init+0x1f0>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a4a      	ldr	r2, [pc, #296]	; (8003d20 <HAL_GPIO_Init+0x2f4>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d00d      	beq.n	8003c18 <HAL_GPIO_Init+0x1ec>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a49      	ldr	r2, [pc, #292]	; (8003d24 <HAL_GPIO_Init+0x2f8>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d007      	beq.n	8003c14 <HAL_GPIO_Init+0x1e8>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a48      	ldr	r2, [pc, #288]	; (8003d28 <HAL_GPIO_Init+0x2fc>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d101      	bne.n	8003c10 <HAL_GPIO_Init+0x1e4>
 8003c0c:	2305      	movs	r3, #5
 8003c0e:	e00a      	b.n	8003c26 <HAL_GPIO_Init+0x1fa>
 8003c10:	2306      	movs	r3, #6
 8003c12:	e008      	b.n	8003c26 <HAL_GPIO_Init+0x1fa>
 8003c14:	2304      	movs	r3, #4
 8003c16:	e006      	b.n	8003c26 <HAL_GPIO_Init+0x1fa>
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e004      	b.n	8003c26 <HAL_GPIO_Init+0x1fa>
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	e002      	b.n	8003c26 <HAL_GPIO_Init+0x1fa>
 8003c20:	2301      	movs	r3, #1
 8003c22:	e000      	b.n	8003c26 <HAL_GPIO_Init+0x1fa>
 8003c24:	2300      	movs	r3, #0
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	f002 0203 	and.w	r2, r2, #3
 8003c2c:	0092      	lsls	r2, r2, #2
 8003c2e:	4093      	lsls	r3, r2
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c36:	4937      	ldr	r1, [pc, #220]	; (8003d14 <HAL_GPIO_Init+0x2e8>)
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	089b      	lsrs	r3, r3, #2
 8003c3c:	3302      	adds	r3, #2
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003c44:	4b39      	ldr	r3, [pc, #228]	; (8003d2c <HAL_GPIO_Init+0x300>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	43db      	mvns	r3, r3
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	4013      	ands	r3, r2
 8003c52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d003      	beq.n	8003c68 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c68:	4a30      	ldr	r2, [pc, #192]	; (8003d2c <HAL_GPIO_Init+0x300>)
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003c6e:	4b2f      	ldr	r3, [pc, #188]	; (8003d2c <HAL_GPIO_Init+0x300>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	43db      	mvns	r3, r3
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d003      	beq.n	8003c92 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c92:	4a26      	ldr	r2, [pc, #152]	; (8003d2c <HAL_GPIO_Init+0x300>)
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c98:	4b24      	ldr	r3, [pc, #144]	; (8003d2c <HAL_GPIO_Init+0x300>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	43db      	mvns	r3, r3
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d003      	beq.n	8003cbc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003cbc:	4a1b      	ldr	r2, [pc, #108]	; (8003d2c <HAL_GPIO_Init+0x300>)
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003cc2:	4b1a      	ldr	r3, [pc, #104]	; (8003d2c <HAL_GPIO_Init+0x300>)
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	43db      	mvns	r3, r3
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ce6:	4a11      	ldr	r2, [pc, #68]	; (8003d2c <HAL_GPIO_Init+0x300>)
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f47f ae9d 	bne.w	8003a3c <HAL_GPIO_Init+0x10>
  }
}
 8003d02:	bf00      	nop
 8003d04:	371c      	adds	r7, #28
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	40021000 	.word	0x40021000
 8003d14:	40010000 	.word	0x40010000
 8003d18:	48000400 	.word	0x48000400
 8003d1c:	48000800 	.word	0x48000800
 8003d20:	48000c00 	.word	0x48000c00
 8003d24:	48001000 	.word	0x48001000
 8003d28:	48001400 	.word	0x48001400
 8003d2c:	40010400 	.word	0x40010400

08003d30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	691a      	ldr	r2, [r3, #16]
 8003d40:	887b      	ldrh	r3, [r7, #2]
 8003d42:	4013      	ands	r3, r2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d002      	beq.n	8003d4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	73fb      	strb	r3, [r7, #15]
 8003d4c:	e001      	b.n	8003d52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3714      	adds	r7, #20
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	807b      	strh	r3, [r7, #2]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d70:	787b      	ldrb	r3, [r7, #1]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d76:	887a      	ldrh	r2, [r7, #2]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d7c:	e002      	b.n	8003d84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d7e:	887a      	ldrh	r2, [r7, #2]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	4603      	mov	r3, r0
 8003d98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003d9a:	4b08      	ldr	r3, [pc, #32]	; (8003dbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d9c:	695a      	ldr	r2, [r3, #20]
 8003d9e:	88fb      	ldrh	r3, [r7, #6]
 8003da0:	4013      	ands	r3, r2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d006      	beq.n	8003db4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003da6:	4a05      	ldr	r2, [pc, #20]	; (8003dbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003da8:	88fb      	ldrh	r3, [r7, #6]
 8003daa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003dac:	88fb      	ldrh	r3, [r7, #6]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 f806 	bl	8003dc0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003db4:	bf00      	nop
 8003db6:	3708      	adds	r7, #8
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	40010400 	.word	0x40010400

08003dc0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003dca:	bf00      	nop
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
	...

08003dd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d141      	bne.n	8003e6a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003de6:	4b4b      	ldr	r3, [pc, #300]	; (8003f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df2:	d131      	bne.n	8003e58 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003df4:	4b47      	ldr	r3, [pc, #284]	; (8003f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dfa:	4a46      	ldr	r2, [pc, #280]	; (8003f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e04:	4b43      	ldr	r3, [pc, #268]	; (8003f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e0c:	4a41      	ldr	r2, [pc, #260]	; (8003f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e14:	4b40      	ldr	r3, [pc, #256]	; (8003f18 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2232      	movs	r2, #50	; 0x32
 8003e1a:	fb02 f303 	mul.w	r3, r2, r3
 8003e1e:	4a3f      	ldr	r2, [pc, #252]	; (8003f1c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e20:	fba2 2303 	umull	r2, r3, r2, r3
 8003e24:	0c9b      	lsrs	r3, r3, #18
 8003e26:	3301      	adds	r3, #1
 8003e28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e2a:	e002      	b.n	8003e32 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e32:	4b38      	ldr	r3, [pc, #224]	; (8003f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e3e:	d102      	bne.n	8003e46 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1f2      	bne.n	8003e2c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e46:	4b33      	ldr	r3, [pc, #204]	; (8003f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e52:	d158      	bne.n	8003f06 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e057      	b.n	8003f08 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e58:	4b2e      	ldr	r3, [pc, #184]	; (8003f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e5e:	4a2d      	ldr	r2, [pc, #180]	; (8003f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003e68:	e04d      	b.n	8003f06 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e70:	d141      	bne.n	8003ef6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e72:	4b28      	ldr	r3, [pc, #160]	; (8003f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e7e:	d131      	bne.n	8003ee4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e80:	4b24      	ldr	r3, [pc, #144]	; (8003f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e86:	4a23      	ldr	r2, [pc, #140]	; (8003f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e90:	4b20      	ldr	r3, [pc, #128]	; (8003f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e98:	4a1e      	ldr	r2, [pc, #120]	; (8003f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e9e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ea0:	4b1d      	ldr	r3, [pc, #116]	; (8003f18 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2232      	movs	r2, #50	; 0x32
 8003ea6:	fb02 f303 	mul.w	r3, r2, r3
 8003eaa:	4a1c      	ldr	r2, [pc, #112]	; (8003f1c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003eac:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb0:	0c9b      	lsrs	r3, r3, #18
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003eb6:	e002      	b.n	8003ebe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ebe:	4b15      	ldr	r3, [pc, #84]	; (8003f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eca:	d102      	bne.n	8003ed2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1f2      	bne.n	8003eb8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ed2:	4b10      	ldr	r3, [pc, #64]	; (8003f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ede:	d112      	bne.n	8003f06 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e011      	b.n	8003f08 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ee4:	4b0b      	ldr	r3, [pc, #44]	; (8003f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003eea:	4a0a      	ldr	r2, [pc, #40]	; (8003f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ef0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003ef4:	e007      	b.n	8003f06 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ef6:	4b07      	ldr	r3, [pc, #28]	; (8003f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003efe:	4a05      	ldr	r2, [pc, #20]	; (8003f14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f04:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3714      	adds	r7, #20
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr
 8003f14:	40007000 	.word	0x40007000
 8003f18:	20000004 	.word	0x20000004
 8003f1c:	431bde83 	.word	0x431bde83

08003f20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b088      	sub	sp, #32
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e308      	b.n	8004544 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d075      	beq.n	800402a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f3e:	4ba3      	ldr	r3, [pc, #652]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f003 030c 	and.w	r3, r3, #12
 8003f46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f48:	4ba0      	ldr	r3, [pc, #640]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	f003 0303 	and.w	r3, r3, #3
 8003f50:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	2b0c      	cmp	r3, #12
 8003f56:	d102      	bne.n	8003f5e <HAL_RCC_OscConfig+0x3e>
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	2b03      	cmp	r3, #3
 8003f5c:	d002      	beq.n	8003f64 <HAL_RCC_OscConfig+0x44>
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	2b08      	cmp	r3, #8
 8003f62:	d10b      	bne.n	8003f7c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f64:	4b99      	ldr	r3, [pc, #612]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d05b      	beq.n	8004028 <HAL_RCC_OscConfig+0x108>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d157      	bne.n	8004028 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e2e3      	b.n	8004544 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f84:	d106      	bne.n	8003f94 <HAL_RCC_OscConfig+0x74>
 8003f86:	4b91      	ldr	r3, [pc, #580]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a90      	ldr	r2, [pc, #576]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8003f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f90:	6013      	str	r3, [r2, #0]
 8003f92:	e01d      	b.n	8003fd0 <HAL_RCC_OscConfig+0xb0>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f9c:	d10c      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x98>
 8003f9e:	4b8b      	ldr	r3, [pc, #556]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a8a      	ldr	r2, [pc, #552]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8003fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fa8:	6013      	str	r3, [r2, #0]
 8003faa:	4b88      	ldr	r3, [pc, #544]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a87      	ldr	r2, [pc, #540]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8003fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb4:	6013      	str	r3, [r2, #0]
 8003fb6:	e00b      	b.n	8003fd0 <HAL_RCC_OscConfig+0xb0>
 8003fb8:	4b84      	ldr	r3, [pc, #528]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a83      	ldr	r2, [pc, #524]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8003fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fc2:	6013      	str	r3, [r2, #0]
 8003fc4:	4b81      	ldr	r3, [pc, #516]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a80      	ldr	r2, [pc, #512]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8003fca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d013      	beq.n	8004000 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd8:	f7fd fc70 	bl	80018bc <HAL_GetTick>
 8003fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fde:	e008      	b.n	8003ff2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fe0:	f7fd fc6c 	bl	80018bc <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b64      	cmp	r3, #100	; 0x64
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e2a8      	b.n	8004544 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ff2:	4b76      	ldr	r3, [pc, #472]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0f0      	beq.n	8003fe0 <HAL_RCC_OscConfig+0xc0>
 8003ffe:	e014      	b.n	800402a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004000:	f7fd fc5c 	bl	80018bc <HAL_GetTick>
 8004004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004006:	e008      	b.n	800401a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004008:	f7fd fc58 	bl	80018bc <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b64      	cmp	r3, #100	; 0x64
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e294      	b.n	8004544 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800401a:	4b6c      	ldr	r3, [pc, #432]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1f0      	bne.n	8004008 <HAL_RCC_OscConfig+0xe8>
 8004026:	e000      	b.n	800402a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d075      	beq.n	8004122 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004036:	4b65      	ldr	r3, [pc, #404]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f003 030c 	and.w	r3, r3, #12
 800403e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004040:	4b62      	ldr	r3, [pc, #392]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f003 0303 	and.w	r3, r3, #3
 8004048:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	2b0c      	cmp	r3, #12
 800404e:	d102      	bne.n	8004056 <HAL_RCC_OscConfig+0x136>
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	2b02      	cmp	r3, #2
 8004054:	d002      	beq.n	800405c <HAL_RCC_OscConfig+0x13c>
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	2b04      	cmp	r3, #4
 800405a:	d11f      	bne.n	800409c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800405c:	4b5b      	ldr	r3, [pc, #364]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004064:	2b00      	cmp	r3, #0
 8004066:	d005      	beq.n	8004074 <HAL_RCC_OscConfig+0x154>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e267      	b.n	8004544 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004074:	4b55      	ldr	r3, [pc, #340]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	061b      	lsls	r3, r3, #24
 8004082:	4952      	ldr	r1, [pc, #328]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8004084:	4313      	orrs	r3, r2
 8004086:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004088:	4b51      	ldr	r3, [pc, #324]	; (80041d0 <HAL_RCC_OscConfig+0x2b0>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4618      	mov	r0, r3
 800408e:	f7fd fbc9 	bl	8001824 <HAL_InitTick>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d043      	beq.n	8004120 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e253      	b.n	8004544 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d023      	beq.n	80040ec <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040a4:	4b49      	ldr	r3, [pc, #292]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a48      	ldr	r2, [pc, #288]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 80040aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b0:	f7fd fc04 	bl	80018bc <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040b8:	f7fd fc00 	bl	80018bc <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e23c      	b.n	8004544 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040ca:	4b40      	ldr	r3, [pc, #256]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d0f0      	beq.n	80040b8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d6:	4b3d      	ldr	r3, [pc, #244]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	061b      	lsls	r3, r3, #24
 80040e4:	4939      	ldr	r1, [pc, #228]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	604b      	str	r3, [r1, #4]
 80040ea:	e01a      	b.n	8004122 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ec:	4b37      	ldr	r3, [pc, #220]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a36      	ldr	r2, [pc, #216]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 80040f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f8:	f7fd fbe0 	bl	80018bc <HAL_GetTick>
 80040fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040fe:	e008      	b.n	8004112 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004100:	f7fd fbdc 	bl	80018bc <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b02      	cmp	r3, #2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e218      	b.n	8004544 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004112:	4b2e      	ldr	r3, [pc, #184]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1f0      	bne.n	8004100 <HAL_RCC_OscConfig+0x1e0>
 800411e:	e000      	b.n	8004122 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004120:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0308 	and.w	r3, r3, #8
 800412a:	2b00      	cmp	r3, #0
 800412c:	d03c      	beq.n	80041a8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d01c      	beq.n	8004170 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004136:	4b25      	ldr	r3, [pc, #148]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8004138:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800413c:	4a23      	ldr	r2, [pc, #140]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 800413e:	f043 0301 	orr.w	r3, r3, #1
 8004142:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004146:	f7fd fbb9 	bl	80018bc <HAL_GetTick>
 800414a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800414c:	e008      	b.n	8004160 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800414e:	f7fd fbb5 	bl	80018bc <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d901      	bls.n	8004160 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e1f1      	b.n	8004544 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004160:	4b1a      	ldr	r3, [pc, #104]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8004162:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d0ef      	beq.n	800414e <HAL_RCC_OscConfig+0x22e>
 800416e:	e01b      	b.n	80041a8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004170:	4b16      	ldr	r3, [pc, #88]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8004172:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004176:	4a15      	ldr	r2, [pc, #84]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 8004178:	f023 0301 	bic.w	r3, r3, #1
 800417c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004180:	f7fd fb9c 	bl	80018bc <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004188:	f7fd fb98 	bl	80018bc <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e1d4      	b.n	8004544 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800419a:	4b0c      	ldr	r3, [pc, #48]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 800419c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1ef      	bne.n	8004188 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 80ab 	beq.w	800430c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041b6:	2300      	movs	r3, #0
 80041b8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041ba:	4b04      	ldr	r3, [pc, #16]	; (80041cc <HAL_RCC_OscConfig+0x2ac>)
 80041bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d106      	bne.n	80041d4 <HAL_RCC_OscConfig+0x2b4>
 80041c6:	2301      	movs	r3, #1
 80041c8:	e005      	b.n	80041d6 <HAL_RCC_OscConfig+0x2b6>
 80041ca:	bf00      	nop
 80041cc:	40021000 	.word	0x40021000
 80041d0:	20000008 	.word	0x20000008
 80041d4:	2300      	movs	r3, #0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00d      	beq.n	80041f6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041da:	4baf      	ldr	r3, [pc, #700]	; (8004498 <HAL_RCC_OscConfig+0x578>)
 80041dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041de:	4aae      	ldr	r2, [pc, #696]	; (8004498 <HAL_RCC_OscConfig+0x578>)
 80041e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041e4:	6593      	str	r3, [r2, #88]	; 0x58
 80041e6:	4bac      	ldr	r3, [pc, #688]	; (8004498 <HAL_RCC_OscConfig+0x578>)
 80041e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ee:	60fb      	str	r3, [r7, #12]
 80041f0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80041f2:	2301      	movs	r3, #1
 80041f4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041f6:	4ba9      	ldr	r3, [pc, #676]	; (800449c <HAL_RCC_OscConfig+0x57c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d118      	bne.n	8004234 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004202:	4ba6      	ldr	r3, [pc, #664]	; (800449c <HAL_RCC_OscConfig+0x57c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4aa5      	ldr	r2, [pc, #660]	; (800449c <HAL_RCC_OscConfig+0x57c>)
 8004208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800420c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800420e:	f7fd fb55 	bl	80018bc <HAL_GetTick>
 8004212:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004214:	e008      	b.n	8004228 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004216:	f7fd fb51 	bl	80018bc <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	2b02      	cmp	r3, #2
 8004222:	d901      	bls.n	8004228 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e18d      	b.n	8004544 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004228:	4b9c      	ldr	r3, [pc, #624]	; (800449c <HAL_RCC_OscConfig+0x57c>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004230:	2b00      	cmp	r3, #0
 8004232:	d0f0      	beq.n	8004216 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d108      	bne.n	800424e <HAL_RCC_OscConfig+0x32e>
 800423c:	4b96      	ldr	r3, [pc, #600]	; (8004498 <HAL_RCC_OscConfig+0x578>)
 800423e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004242:	4a95      	ldr	r2, [pc, #596]	; (8004498 <HAL_RCC_OscConfig+0x578>)
 8004244:	f043 0301 	orr.w	r3, r3, #1
 8004248:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800424c:	e024      	b.n	8004298 <HAL_RCC_OscConfig+0x378>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	2b05      	cmp	r3, #5
 8004254:	d110      	bne.n	8004278 <HAL_RCC_OscConfig+0x358>
 8004256:	4b90      	ldr	r3, [pc, #576]	; (8004498 <HAL_RCC_OscConfig+0x578>)
 8004258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800425c:	4a8e      	ldr	r2, [pc, #568]	; (8004498 <HAL_RCC_OscConfig+0x578>)
 800425e:	f043 0304 	orr.w	r3, r3, #4
 8004262:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004266:	4b8c      	ldr	r3, [pc, #560]	; (8004498 <HAL_RCC_OscConfig+0x578>)
 8004268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800426c:	4a8a      	ldr	r2, [pc, #552]	; (8004498 <HAL_RCC_OscConfig+0x578>)
 800426e:	f043 0301 	orr.w	r3, r3, #1
 8004272:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004276:	e00f      	b.n	8004298 <HAL_RCC_OscConfig+0x378>
 8004278:	4b87      	ldr	r3, [pc, #540]	; (8004498 <HAL_RCC_OscConfig+0x578>)
 800427a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800427e:	4a86      	ldr	r2, [pc, #536]	; (8004498 <HAL_RCC_OscConfig+0x578>)
 8004280:	f023 0301 	bic.w	r3, r3, #1
 8004284:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004288:	4b83      	ldr	r3, [pc, #524]	; (8004498 <HAL_RCC_OscConfig+0x578>)
 800428a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428e:	4a82      	ldr	r2, [pc, #520]	; (8004498 <HAL_RCC_OscConfig+0x578>)
 8004290:	f023 0304 	bic.w	r3, r3, #4
 8004294:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d016      	beq.n	80042ce <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a0:	f7fd fb0c 	bl	80018bc <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042a6:	e00a      	b.n	80042be <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042a8:	f7fd fb08 	bl	80018bc <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d901      	bls.n	80042be <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e142      	b.n	8004544 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042be:	4b76      	ldr	r3, [pc, #472]	; (8004498 <HAL_RCC_OscConfig+0x578>)
 80042c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d0ed      	beq.n	80042a8 <HAL_RCC_OscConfig+0x388>
 80042cc:	e015      	b.n	80042fa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ce:	f7fd faf5 	bl	80018bc <HAL_GetTick>
 80042d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042d4:	e00a      	b.n	80042ec <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042d6:	f7fd faf1 	bl	80018bc <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d901      	bls.n	80042ec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e12b      	b.n	8004544 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042ec:	4b6a      	ldr	r3, [pc, #424]	; (8004498 <HAL_RCC_OscConfig+0x578>)
 80042ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1ed      	bne.n	80042d6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80042fa:	7ffb      	ldrb	r3, [r7, #31]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d105      	bne.n	800430c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004300:	4b65      	ldr	r3, [pc, #404]	; (8004498 <HAL_RCC_OscConfig+0x578>)
 8004302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004304:	4a64      	ldr	r2, [pc, #400]	; (8004498 <HAL_RCC_OscConfig+0x578>)
 8004306:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800430a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0320 	and.w	r3, r3, #32
 8004314:	2b00      	cmp	r3, #0
 8004316:	d03c      	beq.n	8004392 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d01c      	beq.n	800435a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004320:	4b5d      	ldr	r3, [pc, #372]	; (8004498 <HAL_RCC_OscConfig+0x578>)
 8004322:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004326:	4a5c      	ldr	r2, [pc, #368]	; (8004498 <HAL_RCC_OscConfig+0x578>)
 8004328:	f043 0301 	orr.w	r3, r3, #1
 800432c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004330:	f7fd fac4 	bl	80018bc <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004338:	f7fd fac0 	bl	80018bc <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e0fc      	b.n	8004544 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800434a:	4b53      	ldr	r3, [pc, #332]	; (8004498 <HAL_RCC_OscConfig+0x578>)
 800434c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d0ef      	beq.n	8004338 <HAL_RCC_OscConfig+0x418>
 8004358:	e01b      	b.n	8004392 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800435a:	4b4f      	ldr	r3, [pc, #316]	; (8004498 <HAL_RCC_OscConfig+0x578>)
 800435c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004360:	4a4d      	ldr	r2, [pc, #308]	; (8004498 <HAL_RCC_OscConfig+0x578>)
 8004362:	f023 0301 	bic.w	r3, r3, #1
 8004366:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800436a:	f7fd faa7 	bl	80018bc <HAL_GetTick>
 800436e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004370:	e008      	b.n	8004384 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004372:	f7fd faa3 	bl	80018bc <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	2b02      	cmp	r3, #2
 800437e:	d901      	bls.n	8004384 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e0df      	b.n	8004544 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004384:	4b44      	ldr	r3, [pc, #272]	; (8004498 <HAL_RCC_OscConfig+0x578>)
 8004386:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1ef      	bne.n	8004372 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	69db      	ldr	r3, [r3, #28]
 8004396:	2b00      	cmp	r3, #0
 8004398:	f000 80d3 	beq.w	8004542 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800439c:	4b3e      	ldr	r3, [pc, #248]	; (8004498 <HAL_RCC_OscConfig+0x578>)
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f003 030c 	and.w	r3, r3, #12
 80043a4:	2b0c      	cmp	r3, #12
 80043a6:	f000 808d 	beq.w	80044c4 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	69db      	ldr	r3, [r3, #28]
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d15a      	bne.n	8004468 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043b2:	4b39      	ldr	r3, [pc, #228]	; (8004498 <HAL_RCC_OscConfig+0x578>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a38      	ldr	r2, [pc, #224]	; (8004498 <HAL_RCC_OscConfig+0x578>)
 80043b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043be:	f7fd fa7d 	bl	80018bc <HAL_GetTick>
 80043c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043c4:	e008      	b.n	80043d8 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c6:	f7fd fa79 	bl	80018bc <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d901      	bls.n	80043d8 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e0b5      	b.n	8004544 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043d8:	4b2f      	ldr	r3, [pc, #188]	; (8004498 <HAL_RCC_OscConfig+0x578>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1f0      	bne.n	80043c6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043e4:	4b2c      	ldr	r3, [pc, #176]	; (8004498 <HAL_RCC_OscConfig+0x578>)
 80043e6:	68da      	ldr	r2, [r3, #12]
 80043e8:	4b2d      	ldr	r3, [pc, #180]	; (80044a0 <HAL_RCC_OscConfig+0x580>)
 80043ea:	4013      	ands	r3, r2
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	6a11      	ldr	r1, [r2, #32]
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043f4:	3a01      	subs	r2, #1
 80043f6:	0112      	lsls	r2, r2, #4
 80043f8:	4311      	orrs	r1, r2
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80043fe:	0212      	lsls	r2, r2, #8
 8004400:	4311      	orrs	r1, r2
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004406:	0852      	lsrs	r2, r2, #1
 8004408:	3a01      	subs	r2, #1
 800440a:	0552      	lsls	r2, r2, #21
 800440c:	4311      	orrs	r1, r2
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004412:	0852      	lsrs	r2, r2, #1
 8004414:	3a01      	subs	r2, #1
 8004416:	0652      	lsls	r2, r2, #25
 8004418:	4311      	orrs	r1, r2
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800441e:	06d2      	lsls	r2, r2, #27
 8004420:	430a      	orrs	r2, r1
 8004422:	491d      	ldr	r1, [pc, #116]	; (8004498 <HAL_RCC_OscConfig+0x578>)
 8004424:	4313      	orrs	r3, r2
 8004426:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004428:	4b1b      	ldr	r3, [pc, #108]	; (8004498 <HAL_RCC_OscConfig+0x578>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a1a      	ldr	r2, [pc, #104]	; (8004498 <HAL_RCC_OscConfig+0x578>)
 800442e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004432:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004434:	4b18      	ldr	r3, [pc, #96]	; (8004498 <HAL_RCC_OscConfig+0x578>)
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	4a17      	ldr	r2, [pc, #92]	; (8004498 <HAL_RCC_OscConfig+0x578>)
 800443a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800443e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004440:	f7fd fa3c 	bl	80018bc <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004448:	f7fd fa38 	bl	80018bc <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e074      	b.n	8004544 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800445a:	4b0f      	ldr	r3, [pc, #60]	; (8004498 <HAL_RCC_OscConfig+0x578>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d0f0      	beq.n	8004448 <HAL_RCC_OscConfig+0x528>
 8004466:	e06c      	b.n	8004542 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004468:	4b0b      	ldr	r3, [pc, #44]	; (8004498 <HAL_RCC_OscConfig+0x578>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a0a      	ldr	r2, [pc, #40]	; (8004498 <HAL_RCC_OscConfig+0x578>)
 800446e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004472:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004474:	4b08      	ldr	r3, [pc, #32]	; (8004498 <HAL_RCC_OscConfig+0x578>)
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	4a07      	ldr	r2, [pc, #28]	; (8004498 <HAL_RCC_OscConfig+0x578>)
 800447a:	f023 0303 	bic.w	r3, r3, #3
 800447e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004480:	4b05      	ldr	r3, [pc, #20]	; (8004498 <HAL_RCC_OscConfig+0x578>)
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	4a04      	ldr	r2, [pc, #16]	; (8004498 <HAL_RCC_OscConfig+0x578>)
 8004486:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800448a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800448e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004490:	f7fd fa14 	bl	80018bc <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004496:	e00e      	b.n	80044b6 <HAL_RCC_OscConfig+0x596>
 8004498:	40021000 	.word	0x40021000
 800449c:	40007000 	.word	0x40007000
 80044a0:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044a4:	f7fd fa0a 	bl	80018bc <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e046      	b.n	8004544 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044b6:	4b25      	ldr	r3, [pc, #148]	; (800454c <HAL_RCC_OscConfig+0x62c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1f0      	bne.n	80044a4 <HAL_RCC_OscConfig+0x584>
 80044c2:	e03e      	b.n	8004542 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	69db      	ldr	r3, [r3, #28]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d101      	bne.n	80044d0 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e039      	b.n	8004544 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80044d0:	4b1e      	ldr	r3, [pc, #120]	; (800454c <HAL_RCC_OscConfig+0x62c>)
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f003 0203 	and.w	r2, r3, #3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d12c      	bne.n	800453e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ee:	3b01      	subs	r3, #1
 80044f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d123      	bne.n	800453e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004500:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004502:	429a      	cmp	r2, r3
 8004504:	d11b      	bne.n	800453e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004510:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004512:	429a      	cmp	r2, r3
 8004514:	d113      	bne.n	800453e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004520:	085b      	lsrs	r3, r3, #1
 8004522:	3b01      	subs	r3, #1
 8004524:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004526:	429a      	cmp	r2, r3
 8004528:	d109      	bne.n	800453e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004534:	085b      	lsrs	r3, r3, #1
 8004536:	3b01      	subs	r3, #1
 8004538:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800453a:	429a      	cmp	r2, r3
 800453c:	d001      	beq.n	8004542 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e000      	b.n	8004544 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3720      	adds	r7, #32
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	40021000 	.word	0x40021000

08004550 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800455a:	2300      	movs	r3, #0
 800455c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d101      	bne.n	8004568 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e11e      	b.n	80047a6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004568:	4b91      	ldr	r3, [pc, #580]	; (80047b0 <HAL_RCC_ClockConfig+0x260>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 030f 	and.w	r3, r3, #15
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	429a      	cmp	r2, r3
 8004574:	d910      	bls.n	8004598 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004576:	4b8e      	ldr	r3, [pc, #568]	; (80047b0 <HAL_RCC_ClockConfig+0x260>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f023 020f 	bic.w	r2, r3, #15
 800457e:	498c      	ldr	r1, [pc, #560]	; (80047b0 <HAL_RCC_ClockConfig+0x260>)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	4313      	orrs	r3, r2
 8004584:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004586:	4b8a      	ldr	r3, [pc, #552]	; (80047b0 <HAL_RCC_ClockConfig+0x260>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 030f 	and.w	r3, r3, #15
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	429a      	cmp	r2, r3
 8004592:	d001      	beq.n	8004598 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e106      	b.n	80047a6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d073      	beq.n	800468c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	2b03      	cmp	r3, #3
 80045aa:	d129      	bne.n	8004600 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045ac:	4b81      	ldr	r3, [pc, #516]	; (80047b4 <HAL_RCC_ClockConfig+0x264>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d101      	bne.n	80045bc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e0f4      	b.n	80047a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80045bc:	f000 f972 	bl	80048a4 <RCC_GetSysClockFreqFromPLLSource>
 80045c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	4a7c      	ldr	r2, [pc, #496]	; (80047b8 <HAL_RCC_ClockConfig+0x268>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d93f      	bls.n	800464a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80045ca:	4b7a      	ldr	r3, [pc, #488]	; (80047b4 <HAL_RCC_ClockConfig+0x264>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d009      	beq.n	80045ea <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d033      	beq.n	800464a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d12f      	bne.n	800464a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80045ea:	4b72      	ldr	r3, [pc, #456]	; (80047b4 <HAL_RCC_ClockConfig+0x264>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045f2:	4a70      	ldr	r2, [pc, #448]	; (80047b4 <HAL_RCC_ClockConfig+0x264>)
 80045f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045f8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80045fa:	2380      	movs	r3, #128	; 0x80
 80045fc:	617b      	str	r3, [r7, #20]
 80045fe:	e024      	b.n	800464a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	2b02      	cmp	r3, #2
 8004606:	d107      	bne.n	8004618 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004608:	4b6a      	ldr	r3, [pc, #424]	; (80047b4 <HAL_RCC_ClockConfig+0x264>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d109      	bne.n	8004628 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e0c6      	b.n	80047a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004618:	4b66      	ldr	r3, [pc, #408]	; (80047b4 <HAL_RCC_ClockConfig+0x264>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004620:	2b00      	cmp	r3, #0
 8004622:	d101      	bne.n	8004628 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e0be      	b.n	80047a6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004628:	f000 f8ce 	bl	80047c8 <HAL_RCC_GetSysClockFreq>
 800462c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	4a61      	ldr	r2, [pc, #388]	; (80047b8 <HAL_RCC_ClockConfig+0x268>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d909      	bls.n	800464a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004636:	4b5f      	ldr	r3, [pc, #380]	; (80047b4 <HAL_RCC_ClockConfig+0x264>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800463e:	4a5d      	ldr	r2, [pc, #372]	; (80047b4 <HAL_RCC_ClockConfig+0x264>)
 8004640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004644:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004646:	2380      	movs	r3, #128	; 0x80
 8004648:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800464a:	4b5a      	ldr	r3, [pc, #360]	; (80047b4 <HAL_RCC_ClockConfig+0x264>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f023 0203 	bic.w	r2, r3, #3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	4957      	ldr	r1, [pc, #348]	; (80047b4 <HAL_RCC_ClockConfig+0x264>)
 8004658:	4313      	orrs	r3, r2
 800465a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800465c:	f7fd f92e 	bl	80018bc <HAL_GetTick>
 8004660:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004662:	e00a      	b.n	800467a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004664:	f7fd f92a 	bl	80018bc <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004672:	4293      	cmp	r3, r2
 8004674:	d901      	bls.n	800467a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e095      	b.n	80047a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800467a:	4b4e      	ldr	r3, [pc, #312]	; (80047b4 <HAL_RCC_ClockConfig+0x264>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f003 020c 	and.w	r2, r3, #12
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	429a      	cmp	r2, r3
 800468a:	d1eb      	bne.n	8004664 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d023      	beq.n	80046e0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0304 	and.w	r3, r3, #4
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d005      	beq.n	80046b0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046a4:	4b43      	ldr	r3, [pc, #268]	; (80047b4 <HAL_RCC_ClockConfig+0x264>)
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	4a42      	ldr	r2, [pc, #264]	; (80047b4 <HAL_RCC_ClockConfig+0x264>)
 80046aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80046ae:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0308 	and.w	r3, r3, #8
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d007      	beq.n	80046cc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80046bc:	4b3d      	ldr	r3, [pc, #244]	; (80047b4 <HAL_RCC_ClockConfig+0x264>)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80046c4:	4a3b      	ldr	r2, [pc, #236]	; (80047b4 <HAL_RCC_ClockConfig+0x264>)
 80046c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80046ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046cc:	4b39      	ldr	r3, [pc, #228]	; (80047b4 <HAL_RCC_ClockConfig+0x264>)
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	4936      	ldr	r1, [pc, #216]	; (80047b4 <HAL_RCC_ClockConfig+0x264>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	608b      	str	r3, [r1, #8]
 80046de:	e008      	b.n	80046f2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	2b80      	cmp	r3, #128	; 0x80
 80046e4:	d105      	bne.n	80046f2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80046e6:	4b33      	ldr	r3, [pc, #204]	; (80047b4 <HAL_RCC_ClockConfig+0x264>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	4a32      	ldr	r2, [pc, #200]	; (80047b4 <HAL_RCC_ClockConfig+0x264>)
 80046ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046f0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046f2:	4b2f      	ldr	r3, [pc, #188]	; (80047b0 <HAL_RCC_ClockConfig+0x260>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 030f 	and.w	r3, r3, #15
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d21d      	bcs.n	800473c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004700:	4b2b      	ldr	r3, [pc, #172]	; (80047b0 <HAL_RCC_ClockConfig+0x260>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f023 020f 	bic.w	r2, r3, #15
 8004708:	4929      	ldr	r1, [pc, #164]	; (80047b0 <HAL_RCC_ClockConfig+0x260>)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	4313      	orrs	r3, r2
 800470e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004710:	f7fd f8d4 	bl	80018bc <HAL_GetTick>
 8004714:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004716:	e00a      	b.n	800472e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004718:	f7fd f8d0 	bl	80018bc <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	f241 3288 	movw	r2, #5000	; 0x1388
 8004726:	4293      	cmp	r3, r2
 8004728:	d901      	bls.n	800472e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e03b      	b.n	80047a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800472e:	4b20      	ldr	r3, [pc, #128]	; (80047b0 <HAL_RCC_ClockConfig+0x260>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 030f 	and.w	r3, r3, #15
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	429a      	cmp	r2, r3
 800473a:	d1ed      	bne.n	8004718 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0304 	and.w	r3, r3, #4
 8004744:	2b00      	cmp	r3, #0
 8004746:	d008      	beq.n	800475a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004748:	4b1a      	ldr	r3, [pc, #104]	; (80047b4 <HAL_RCC_ClockConfig+0x264>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	4917      	ldr	r1, [pc, #92]	; (80047b4 <HAL_RCC_ClockConfig+0x264>)
 8004756:	4313      	orrs	r3, r2
 8004758:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0308 	and.w	r3, r3, #8
 8004762:	2b00      	cmp	r3, #0
 8004764:	d009      	beq.n	800477a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004766:	4b13      	ldr	r3, [pc, #76]	; (80047b4 <HAL_RCC_ClockConfig+0x264>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	490f      	ldr	r1, [pc, #60]	; (80047b4 <HAL_RCC_ClockConfig+0x264>)
 8004776:	4313      	orrs	r3, r2
 8004778:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800477a:	f000 f825 	bl	80047c8 <HAL_RCC_GetSysClockFreq>
 800477e:	4601      	mov	r1, r0
 8004780:	4b0c      	ldr	r3, [pc, #48]	; (80047b4 <HAL_RCC_ClockConfig+0x264>)
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	091b      	lsrs	r3, r3, #4
 8004786:	f003 030f 	and.w	r3, r3, #15
 800478a:	4a0c      	ldr	r2, [pc, #48]	; (80047bc <HAL_RCC_ClockConfig+0x26c>)
 800478c:	5cd3      	ldrb	r3, [r2, r3]
 800478e:	f003 031f 	and.w	r3, r3, #31
 8004792:	fa21 f303 	lsr.w	r3, r1, r3
 8004796:	4a0a      	ldr	r2, [pc, #40]	; (80047c0 <HAL_RCC_ClockConfig+0x270>)
 8004798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800479a:	4b0a      	ldr	r3, [pc, #40]	; (80047c4 <HAL_RCC_ClockConfig+0x274>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4618      	mov	r0, r3
 80047a0:	f7fd f840 	bl	8001824 <HAL_InitTick>
 80047a4:	4603      	mov	r3, r0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3718      	adds	r7, #24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	40022000 	.word	0x40022000
 80047b4:	40021000 	.word	0x40021000
 80047b8:	04c4b400 	.word	0x04c4b400
 80047bc:	080082cc 	.word	0x080082cc
 80047c0:	20000004 	.word	0x20000004
 80047c4:	20000008 	.word	0x20000008

080047c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b087      	sub	sp, #28
 80047cc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80047ce:	4b2c      	ldr	r3, [pc, #176]	; (8004880 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f003 030c 	and.w	r3, r3, #12
 80047d6:	2b04      	cmp	r3, #4
 80047d8:	d102      	bne.n	80047e0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80047da:	4b2a      	ldr	r3, [pc, #168]	; (8004884 <HAL_RCC_GetSysClockFreq+0xbc>)
 80047dc:	613b      	str	r3, [r7, #16]
 80047de:	e047      	b.n	8004870 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80047e0:	4b27      	ldr	r3, [pc, #156]	; (8004880 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f003 030c 	and.w	r3, r3, #12
 80047e8:	2b08      	cmp	r3, #8
 80047ea:	d102      	bne.n	80047f2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047ec:	4b26      	ldr	r3, [pc, #152]	; (8004888 <HAL_RCC_GetSysClockFreq+0xc0>)
 80047ee:	613b      	str	r3, [r7, #16]
 80047f0:	e03e      	b.n	8004870 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80047f2:	4b23      	ldr	r3, [pc, #140]	; (8004880 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f003 030c 	and.w	r3, r3, #12
 80047fa:	2b0c      	cmp	r3, #12
 80047fc:	d136      	bne.n	800486c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047fe:	4b20      	ldr	r3, [pc, #128]	; (8004880 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	f003 0303 	and.w	r3, r3, #3
 8004806:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004808:	4b1d      	ldr	r3, [pc, #116]	; (8004880 <HAL_RCC_GetSysClockFreq+0xb8>)
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	091b      	lsrs	r3, r3, #4
 800480e:	f003 030f 	and.w	r3, r3, #15
 8004812:	3301      	adds	r3, #1
 8004814:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2b03      	cmp	r3, #3
 800481a:	d10c      	bne.n	8004836 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800481c:	4a1a      	ldr	r2, [pc, #104]	; (8004888 <HAL_RCC_GetSysClockFreq+0xc0>)
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	fbb2 f3f3 	udiv	r3, r2, r3
 8004824:	4a16      	ldr	r2, [pc, #88]	; (8004880 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004826:	68d2      	ldr	r2, [r2, #12]
 8004828:	0a12      	lsrs	r2, r2, #8
 800482a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800482e:	fb02 f303 	mul.w	r3, r2, r3
 8004832:	617b      	str	r3, [r7, #20]
      break;
 8004834:	e00c      	b.n	8004850 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004836:	4a13      	ldr	r2, [pc, #76]	; (8004884 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	fbb2 f3f3 	udiv	r3, r2, r3
 800483e:	4a10      	ldr	r2, [pc, #64]	; (8004880 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004840:	68d2      	ldr	r2, [r2, #12]
 8004842:	0a12      	lsrs	r2, r2, #8
 8004844:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004848:	fb02 f303 	mul.w	r3, r2, r3
 800484c:	617b      	str	r3, [r7, #20]
      break;
 800484e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004850:	4b0b      	ldr	r3, [pc, #44]	; (8004880 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	0e5b      	lsrs	r3, r3, #25
 8004856:	f003 0303 	and.w	r3, r3, #3
 800485a:	3301      	adds	r3, #1
 800485c:	005b      	lsls	r3, r3, #1
 800485e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	fbb2 f3f3 	udiv	r3, r2, r3
 8004868:	613b      	str	r3, [r7, #16]
 800486a:	e001      	b.n	8004870 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800486c:	2300      	movs	r3, #0
 800486e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004870:	693b      	ldr	r3, [r7, #16]
}
 8004872:	4618      	mov	r0, r3
 8004874:	371c      	adds	r7, #28
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	40021000 	.word	0x40021000
 8004884:	00f42400 	.word	0x00f42400
 8004888:	007a1200 	.word	0x007a1200

0800488c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004890:	4b03      	ldr	r3, [pc, #12]	; (80048a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004892:	681b      	ldr	r3, [r3, #0]
}
 8004894:	4618      	mov	r0, r3
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	20000004 	.word	0x20000004

080048a4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b087      	sub	sp, #28
 80048a8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048aa:	4b1e      	ldr	r3, [pc, #120]	; (8004924 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	f003 0303 	and.w	r3, r3, #3
 80048b2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048b4:	4b1b      	ldr	r3, [pc, #108]	; (8004924 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	091b      	lsrs	r3, r3, #4
 80048ba:	f003 030f 	and.w	r3, r3, #15
 80048be:	3301      	adds	r3, #1
 80048c0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	2b03      	cmp	r3, #3
 80048c6:	d10c      	bne.n	80048e2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048c8:	4a17      	ldr	r2, [pc, #92]	; (8004928 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d0:	4a14      	ldr	r2, [pc, #80]	; (8004924 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048d2:	68d2      	ldr	r2, [r2, #12]
 80048d4:	0a12      	lsrs	r2, r2, #8
 80048d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048da:	fb02 f303 	mul.w	r3, r2, r3
 80048de:	617b      	str	r3, [r7, #20]
    break;
 80048e0:	e00c      	b.n	80048fc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048e2:	4a12      	ldr	r2, [pc, #72]	; (800492c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ea:	4a0e      	ldr	r2, [pc, #56]	; (8004924 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048ec:	68d2      	ldr	r2, [r2, #12]
 80048ee:	0a12      	lsrs	r2, r2, #8
 80048f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048f4:	fb02 f303 	mul.w	r3, r2, r3
 80048f8:	617b      	str	r3, [r7, #20]
    break;
 80048fa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048fc:	4b09      	ldr	r3, [pc, #36]	; (8004924 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	0e5b      	lsrs	r3, r3, #25
 8004902:	f003 0303 	and.w	r3, r3, #3
 8004906:	3301      	adds	r3, #1
 8004908:	005b      	lsls	r3, r3, #1
 800490a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	fbb2 f3f3 	udiv	r3, r2, r3
 8004914:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004916:	687b      	ldr	r3, [r7, #4]
}
 8004918:	4618      	mov	r0, r3
 800491a:	371c      	adds	r7, #28
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr
 8004924:	40021000 	.word	0x40021000
 8004928:	007a1200 	.word	0x007a1200
 800492c:	00f42400 	.word	0x00f42400

08004930 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b086      	sub	sp, #24
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004938:	2300      	movs	r3, #0
 800493a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800493c:	2300      	movs	r3, #0
 800493e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 8098 	beq.w	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800494e:	2300      	movs	r3, #0
 8004950:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004952:	4b43      	ldr	r3, [pc, #268]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d10d      	bne.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800495e:	4b40      	ldr	r3, [pc, #256]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004962:	4a3f      	ldr	r2, [pc, #252]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004968:	6593      	str	r3, [r2, #88]	; 0x58
 800496a:	4b3d      	ldr	r3, [pc, #244]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800496c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004972:	60bb      	str	r3, [r7, #8]
 8004974:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004976:	2301      	movs	r3, #1
 8004978:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800497a:	4b3a      	ldr	r3, [pc, #232]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a39      	ldr	r2, [pc, #228]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004984:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004986:	f7fc ff99 	bl	80018bc <HAL_GetTick>
 800498a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800498c:	e009      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800498e:	f7fc ff95 	bl	80018bc <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	2b02      	cmp	r3, #2
 800499a:	d902      	bls.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	74fb      	strb	r3, [r7, #19]
        break;
 80049a0:	e005      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049a2:	4b30      	ldr	r3, [pc, #192]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0ef      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80049ae:	7cfb      	ldrb	r3, [r7, #19]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d159      	bne.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049b4:	4b2a      	ldr	r3, [pc, #168]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049be:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d01e      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d019      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049d0:	4b23      	ldr	r3, [pc, #140]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049dc:	4b20      	ldr	r3, [pc, #128]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e2:	4a1f      	ldr	r2, [pc, #124]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049ec:	4b1c      	ldr	r3, [pc, #112]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f2:	4a1b      	ldr	r2, [pc, #108]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049fc:	4a18      	ldr	r2, [pc, #96]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d016      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0e:	f7fc ff55 	bl	80018bc <HAL_GetTick>
 8004a12:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a14:	e00b      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a16:	f7fc ff51 	bl	80018bc <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d902      	bls.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	74fb      	strb	r3, [r7, #19]
            break;
 8004a2c:	e006      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a2e:	4b0c      	ldr	r3, [pc, #48]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d0ec      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004a3c:	7cfb      	ldrb	r3, [r7, #19]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10b      	bne.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a42:	4b07      	ldr	r3, [pc, #28]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a50:	4903      	ldr	r1, [pc, #12]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a58:	e008      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a5a:	7cfb      	ldrb	r3, [r7, #19]
 8004a5c:	74bb      	strb	r3, [r7, #18]
 8004a5e:	e005      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004a60:	40021000 	.word	0x40021000
 8004a64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a68:	7cfb      	ldrb	r3, [r7, #19]
 8004a6a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a6c:	7c7b      	ldrb	r3, [r7, #17]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d105      	bne.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a72:	4baf      	ldr	r3, [pc, #700]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a76:	4aae      	ldr	r2, [pc, #696]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004a78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a7c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00a      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a8a:	4ba9      	ldr	r3, [pc, #676]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a90:	f023 0203 	bic.w	r2, r3, #3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	49a5      	ldr	r1, [pc, #660]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0302 	and.w	r3, r3, #2
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00a      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004aac:	4ba0      	ldr	r3, [pc, #640]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab2:	f023 020c 	bic.w	r2, r3, #12
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	499d      	ldr	r1, [pc, #628]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0304 	and.w	r3, r3, #4
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00a      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ace:	4b98      	ldr	r3, [pc, #608]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	4994      	ldr	r1, [pc, #592]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0308 	and.w	r3, r3, #8
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00a      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004af0:	4b8f      	ldr	r3, [pc, #572]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	498c      	ldr	r1, [pc, #560]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0310 	and.w	r3, r3, #16
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00a      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b12:	4b87      	ldr	r3, [pc, #540]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	695b      	ldr	r3, [r3, #20]
 8004b20:	4983      	ldr	r1, [pc, #524]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0320 	and.w	r3, r3, #32
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00a      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b34:	4b7e      	ldr	r3, [pc, #504]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	497b      	ldr	r1, [pc, #492]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00a      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b56:	4b76      	ldr	r3, [pc, #472]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	69db      	ldr	r3, [r3, #28]
 8004b64:	4972      	ldr	r1, [pc, #456]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00a      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b78:	4b6d      	ldr	r3, [pc, #436]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	496a      	ldr	r1, [pc, #424]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00a      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b9a:	4b65      	ldr	r3, [pc, #404]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba8:	4961      	ldr	r1, [pc, #388]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00a      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004bbc:	4b5c      	ldr	r3, [pc, #368]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004bbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bc2:	f023 0203 	bic.w	r2, r3, #3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bca:	4959      	ldr	r1, [pc, #356]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00a      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bde:	4b54      	ldr	r3, [pc, #336]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bec:	4950      	ldr	r1, [pc, #320]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d015      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c00:	4b4b      	ldr	r3, [pc, #300]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0e:	4948      	ldr	r1, [pc, #288]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c1e:	d105      	bne.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c20:	4b43      	ldr	r3, [pc, #268]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	4a42      	ldr	r2, [pc, #264]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004c26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c2a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d015      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c38:	4b3d      	ldr	r3, [pc, #244]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c3e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c46:	493a      	ldr	r1, [pc, #232]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c56:	d105      	bne.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c58:	4b35      	ldr	r3, [pc, #212]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	4a34      	ldr	r2, [pc, #208]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004c5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c62:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d015      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c70:	4b2f      	ldr	r3, [pc, #188]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c76:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7e:	492c      	ldr	r1, [pc, #176]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c8e:	d105      	bne.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c90:	4b27      	ldr	r3, [pc, #156]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	4a26      	ldr	r2, [pc, #152]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004c96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c9a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d015      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ca8:	4b21      	ldr	r3, [pc, #132]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb6:	491e      	ldr	r1, [pc, #120]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cc6:	d105      	bne.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cc8:	4b19      	ldr	r3, [pc, #100]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	4a18      	ldr	r2, [pc, #96]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004cce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cd2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d015      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ce0:	4b13      	ldr	r3, [pc, #76]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cee:	4910      	ldr	r1, [pc, #64]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cfe:	d105      	bne.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d00:	4b0b      	ldr	r3, [pc, #44]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	4a0a      	ldr	r2, [pc, #40]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004d06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d0a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d018      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004d18:	4b05      	ldr	r3, [pc, #20]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d26:	4902      	ldr	r1, [pc, #8]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004d2e:	e001      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004d30:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d3c:	d105      	bne.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004d3e:	4b21      	ldr	r3, [pc, #132]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	4a20      	ldr	r2, [pc, #128]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d48:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d015      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004d56:	4b1b      	ldr	r3, [pc, #108]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d64:	4917      	ldr	r1, [pc, #92]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d74:	d105      	bne.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004d76:	4b13      	ldr	r3, [pc, #76]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	4a12      	ldr	r2, [pc, #72]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d80:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d015      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004d8e:	4b0d      	ldr	r3, [pc, #52]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004d90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d9c:	4909      	ldr	r1, [pc, #36]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004da8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dac:	d105      	bne.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dae:	4b05      	ldr	r3, [pc, #20]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	4a04      	ldr	r2, [pc, #16]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004db4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004db8:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004dba:	7cbb      	ldrb	r3, [r7, #18]
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3718      	adds	r7, #24
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	40021000 	.word	0x40021000

08004dc8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e027      	b.n	8004e2a <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	7a5b      	ldrb	r3, [r3, #9]
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d105      	bne.n	8004df0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f7fb fff0 	bl	8000dd0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2202      	movs	r2, #2
 8004df4:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f023 0108 	bic.w	r1, r3, #8
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f042 0204 	orr.w	r2, r2, #4
 8004e1a:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b084      	sub	sp, #16
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
 8004e3a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	7a1b      	ldrb	r3, [r3, #8]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d101      	bne.n	8004e4c <HAL_RNG_GenerateRandomNumber+0x1a>
 8004e48:	2302      	movs	r3, #2
 8004e4a:	e03d      	b.n	8004ec8 <HAL_RNG_GenerateRandomNumber+0x96>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	7a5b      	ldrb	r3, [r3, #9]
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d12c      	bne.n	8004eb6 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	725a      	strb	r2, [r3, #9]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e62:	f7fc fd2b 	bl	80018bc <HAL_GetTick>
 8004e66:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004e68:	e011      	b.n	8004e8e <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004e6a:	f7fc fd27 	bl	80018bc <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d90a      	bls.n	8004e8e <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2202      	movs	r2, #2
 8004e82:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	721a      	strb	r2, [r3, #8]
        return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e01c      	b.n	8004ec8 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f003 0301 	and.w	r3, r3, #1
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d1e6      	bne.n	8004e6a <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689a      	ldr	r2, [r3, #8]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	611a      	str	r2, [r3, #16]
    *random32bit = hrng->RandomNumber;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	691a      	ldr	r2, [r3, #16]
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	725a      	strb	r2, [r3, #9]
 8004eb4:	e004      	b.n	8004ec0 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2204      	movs	r2, #4
 8004eba:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	721a      	strb	r2, [r3, #8]

  return status;
 8004ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e084      	b.n	8004fec <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d106      	bne.n	8004f02 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f7fb ffc5 	bl	8000e8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2202      	movs	r2, #2
 8004f06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f18:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f22:	d902      	bls.n	8004f2a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004f24:	2300      	movs	r3, #0
 8004f26:	60fb      	str	r3, [r7, #12]
 8004f28:	e002      	b.n	8004f30 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004f2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f2e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004f38:	d007      	beq.n	8004f4a <HAL_SPI_Init+0x7a>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f42:	d002      	beq.n	8004f4a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d10b      	bne.n	8004f6a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f5a:	d903      	bls.n	8004f64 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2202      	movs	r2, #2
 8004f60:	631a      	str	r2, [r3, #48]	; 0x30
 8004f62:	e002      	b.n	8004f6a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685a      	ldr	r2, [r3, #4]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	431a      	orrs	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	431a      	orrs	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f88:	431a      	orrs	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	69db      	ldr	r3, [r3, #28]
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a1b      	ldr	r3, [r3, #32]
 8004f94:	ea42 0103 	orr.w	r1, r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	0c1b      	lsrs	r3, r3, #16
 8004faa:	f003 0204 	and.w	r2, r3, #4
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb2:	431a      	orrs	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	ea42 0103 	orr.w	r1, r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	69da      	ldr	r2, [r3, #28]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fda:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004fea:	2300      	movs	r3, #0
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3710      	adds	r7, #16
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b088      	sub	sp, #32
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	603b      	str	r3, [r7, #0]
 8005000:	4613      	mov	r3, r2
 8005002:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005004:	2300      	movs	r3, #0
 8005006:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800500e:	2b01      	cmp	r3, #1
 8005010:	d101      	bne.n	8005016 <HAL_SPI_Transmit+0x22>
 8005012:	2302      	movs	r3, #2
 8005014:	e150      	b.n	80052b8 <HAL_SPI_Transmit+0x2c4>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800501e:	f7fc fc4d 	bl	80018bc <HAL_GetTick>
 8005022:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005024:	88fb      	ldrh	r3, [r7, #6]
 8005026:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800502e:	b2db      	uxtb	r3, r3
 8005030:	2b01      	cmp	r3, #1
 8005032:	d002      	beq.n	800503a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005034:	2302      	movs	r3, #2
 8005036:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005038:	e135      	b.n	80052a6 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d002      	beq.n	8005046 <HAL_SPI_Transmit+0x52>
 8005040:	88fb      	ldrh	r3, [r7, #6]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d102      	bne.n	800504c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	77fb      	strb	r3, [r7, #31]
    goto error;
 800504a:	e12c      	b.n	80052a6 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2203      	movs	r2, #3
 8005050:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	88fa      	ldrh	r2, [r7, #6]
 8005064:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	88fa      	ldrh	r2, [r7, #6]
 800506a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005096:	d107      	bne.n	80050a8 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050a6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b2:	2b40      	cmp	r3, #64	; 0x40
 80050b4:	d007      	beq.n	80050c6 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050ce:	d94b      	bls.n	8005168 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d002      	beq.n	80050de <HAL_SPI_Transmit+0xea>
 80050d8:	8afb      	ldrh	r3, [r7, #22]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d13e      	bne.n	800515c <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e2:	881a      	ldrh	r2, [r3, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ee:	1c9a      	adds	r2, r3, #2
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	3b01      	subs	r3, #1
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005102:	e02b      	b.n	800515c <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b02      	cmp	r3, #2
 8005110:	d112      	bne.n	8005138 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005116:	881a      	ldrh	r2, [r3, #0]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005122:	1c9a      	adds	r2, r3, #2
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800512c:	b29b      	uxth	r3, r3
 800512e:	3b01      	subs	r3, #1
 8005130:	b29a      	uxth	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005136:	e011      	b.n	800515c <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005138:	f7fc fbc0 	bl	80018bc <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	683a      	ldr	r2, [r7, #0]
 8005144:	429a      	cmp	r2, r3
 8005146:	d803      	bhi.n	8005150 <HAL_SPI_Transmit+0x15c>
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800514e:	d102      	bne.n	8005156 <HAL_SPI_Transmit+0x162>
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d102      	bne.n	800515c <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	77fb      	strb	r3, [r7, #31]
          goto error;
 800515a:	e0a4      	b.n	80052a6 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005160:	b29b      	uxth	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1ce      	bne.n	8005104 <HAL_SPI_Transmit+0x110>
 8005166:	e07c      	b.n	8005262 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d002      	beq.n	8005176 <HAL_SPI_Transmit+0x182>
 8005170:	8afb      	ldrh	r3, [r7, #22]
 8005172:	2b01      	cmp	r3, #1
 8005174:	d170      	bne.n	8005258 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800517a:	b29b      	uxth	r3, r3
 800517c:	2b01      	cmp	r3, #1
 800517e:	d912      	bls.n	80051a6 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005184:	881a      	ldrh	r2, [r3, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005190:	1c9a      	adds	r2, r3, #2
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800519a:	b29b      	uxth	r3, r3
 800519c:	3b02      	subs	r3, #2
 800519e:	b29a      	uxth	r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051a4:	e058      	b.n	8005258 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	330c      	adds	r3, #12
 80051b0:	7812      	ldrb	r2, [r2, #0]
 80051b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b8:	1c5a      	adds	r2, r3, #1
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	3b01      	subs	r3, #1
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80051cc:	e044      	b.n	8005258 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d12b      	bne.n	8005234 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d912      	bls.n	800520c <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ea:	881a      	ldrh	r2, [r3, #0]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f6:	1c9a      	adds	r2, r3, #2
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005200:	b29b      	uxth	r3, r3
 8005202:	3b02      	subs	r3, #2
 8005204:	b29a      	uxth	r2, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	87da      	strh	r2, [r3, #62]	; 0x3e
 800520a:	e025      	b.n	8005258 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	330c      	adds	r3, #12
 8005216:	7812      	ldrb	r2, [r2, #0]
 8005218:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521e:	1c5a      	adds	r2, r3, #1
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005228:	b29b      	uxth	r3, r3
 800522a:	3b01      	subs	r3, #1
 800522c:	b29a      	uxth	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005232:	e011      	b.n	8005258 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005234:	f7fc fb42 	bl	80018bc <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	683a      	ldr	r2, [r7, #0]
 8005240:	429a      	cmp	r2, r3
 8005242:	d803      	bhi.n	800524c <HAL_SPI_Transmit+0x258>
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800524a:	d102      	bne.n	8005252 <HAL_SPI_Transmit+0x25e>
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d102      	bne.n	8005258 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005256:	e026      	b.n	80052a6 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800525c:	b29b      	uxth	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d1b5      	bne.n	80051ce <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005262:	69ba      	ldr	r2, [r7, #24]
 8005264:	6839      	ldr	r1, [r7, #0]
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	f000 f901 	bl	800546e <SPI_EndRxTxTransaction>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d002      	beq.n	8005278 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2220      	movs	r2, #32
 8005276:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d10a      	bne.n	8005296 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005280:	2300      	movs	r3, #0
 8005282:	613b      	str	r3, [r7, #16]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	613b      	str	r3, [r7, #16]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	613b      	str	r3, [r7, #16]
 8005294:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800529a:	2b00      	cmp	r3, #0
 800529c:	d002      	beq.n	80052a4 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	77fb      	strb	r3, [r7, #31]
 80052a2:	e000      	b.n	80052a6 <HAL_SPI_Transmit+0x2b2>
  }

error:
 80052a4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80052b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3720      	adds	r7, #32
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	603b      	str	r3, [r7, #0]
 80052cc:	4613      	mov	r3, r2
 80052ce:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052d0:	e04c      	b.n	800536c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052d8:	d048      	beq.n	800536c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80052da:	f7fc faef 	bl	80018bc <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d902      	bls.n	80052f0 <SPI_WaitFlagStateUntilTimeout+0x30>
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d13d      	bne.n	800536c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80052fe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005308:	d111      	bne.n	800532e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005312:	d004      	beq.n	800531e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800531c:	d107      	bne.n	800532e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800532c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005336:	d10f      	bne.n	8005358 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005346:	601a      	str	r2, [r3, #0]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005356:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e00f      	b.n	800538c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	689a      	ldr	r2, [r3, #8]
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	4013      	ands	r3, r2
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	429a      	cmp	r2, r3
 800537a:	bf0c      	ite	eq
 800537c:	2301      	moveq	r3, #1
 800537e:	2300      	movne	r3, #0
 8005380:	b2db      	uxtb	r3, r3
 8005382:	461a      	mov	r2, r3
 8005384:	79fb      	ldrb	r3, [r7, #7]
 8005386:	429a      	cmp	r2, r3
 8005388:	d1a3      	bne.n	80052d2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
 80053a0:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80053a2:	e057      	b.n	8005454 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80053aa:	d106      	bne.n	80053ba <SPI_WaitFifoStateUntilTimeout+0x26>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d103      	bne.n	80053ba <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	330c      	adds	r3, #12
 80053b8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053c0:	d048      	beq.n	8005454 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80053c2:	f7fc fa7b 	bl	80018bc <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	683a      	ldr	r2, [r7, #0]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d902      	bls.n	80053d8 <SPI_WaitFifoStateUntilTimeout+0x44>
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d13d      	bne.n	8005454 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80053e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053f0:	d111      	bne.n	8005416 <SPI_WaitFifoStateUntilTimeout+0x82>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053fa:	d004      	beq.n	8005406 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005404:	d107      	bne.n	8005416 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005414:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800541e:	d10f      	bne.n	8005440 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800542e:	601a      	str	r2, [r3, #0]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800543e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e008      	b.n	8005466 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	689a      	ldr	r2, [r3, #8]
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	4013      	ands	r3, r2
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	429a      	cmp	r2, r3
 8005462:	d19f      	bne.n	80053a4 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b086      	sub	sp, #24
 8005472:	af02      	add	r7, sp, #8
 8005474:	60f8      	str	r0, [r7, #12]
 8005476:	60b9      	str	r1, [r7, #8]
 8005478:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	9300      	str	r3, [sp, #0]
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2200      	movs	r2, #0
 8005482:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f7ff ff84 	bl	8005394 <SPI_WaitFifoStateUntilTimeout>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d007      	beq.n	80054a2 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005496:	f043 0220 	orr.w	r2, r3, #32
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e027      	b.n	80054f2 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	9300      	str	r3, [sp, #0]
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	2200      	movs	r2, #0
 80054aa:	2180      	movs	r1, #128	; 0x80
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f7ff ff07 	bl	80052c0 <SPI_WaitFlagStateUntilTimeout>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d007      	beq.n	80054c8 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054bc:	f043 0220 	orr.w	r2, r3, #32
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80054c4:	2303      	movs	r3, #3
 80054c6:	e014      	b.n	80054f2 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	9300      	str	r3, [sp, #0]
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f7ff ff5d 	bl	8005394 <SPI_WaitFifoStateUntilTimeout>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d007      	beq.n	80054f0 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054e4:	f043 0220 	orr.w	r2, r3, #32
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e000      	b.n	80054f2 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b082      	sub	sp, #8
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d101      	bne.n	800550c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e049      	b.n	80055a0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005512:	b2db      	uxtb	r3, r3
 8005514:	2b00      	cmp	r3, #0
 8005516:	d106      	bne.n	8005526 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f7fc f8a9 	bl	8001678 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2202      	movs	r2, #2
 800552a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	3304      	adds	r3, #4
 8005536:	4619      	mov	r1, r3
 8005538:	4610      	mov	r0, r2
 800553a:	f000 fc23 	bl	8005d84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2201      	movs	r2, #1
 8005542:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2201      	movs	r2, #1
 800554a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2201      	movs	r2, #1
 8005552:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d001      	beq.n	80055c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e019      	b.n	80055f4 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2202      	movs	r2, #2
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689a      	ldr	r2, [r3, #8]
 80055ce:	4b0c      	ldr	r3, [pc, #48]	; (8005600 <HAL_TIM_Base_Start+0x58>)
 80055d0:	4013      	ands	r3, r2
 80055d2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2b06      	cmp	r3, #6
 80055d8:	d00b      	beq.n	80055f2 <HAL_TIM_Base_Start+0x4a>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055e0:	d007      	beq.n	80055f2 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f042 0201 	orr.w	r2, r2, #1
 80055f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3714      	adds	r7, #20
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr
 8005600:	00010007 	.word	0x00010007

08005604 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005612:	b2db      	uxtb	r3, r3
 8005614:	2b01      	cmp	r3, #1
 8005616:	d001      	beq.n	800561c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e021      	b.n	8005660 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2202      	movs	r2, #2
 8005620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68da      	ldr	r2, [r3, #12]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f042 0201 	orr.w	r2, r2, #1
 8005632:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689a      	ldr	r2, [r3, #8]
 800563a:	4b0c      	ldr	r3, [pc, #48]	; (800566c <HAL_TIM_Base_Start_IT+0x68>)
 800563c:	4013      	ands	r3, r2
 800563e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2b06      	cmp	r3, #6
 8005644:	d00b      	beq.n	800565e <HAL_TIM_Base_Start_IT+0x5a>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800564c:	d007      	beq.n	800565e <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f042 0201 	orr.w	r2, r2, #1
 800565c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3714      	adds	r7, #20
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	00010007 	.word	0x00010007

08005670 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b086      	sub	sp, #24
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d101      	bne.n	8005684 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e097      	b.n	80057b4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2b00      	cmp	r3, #0
 800568e:	d106      	bne.n	800569e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f7fb ff99 	bl	80015d0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2202      	movs	r2, #2
 80056a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	6812      	ldr	r2, [r2, #0]
 80056b0:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80056b4:	f023 0307 	bic.w	r3, r3, #7
 80056b8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	3304      	adds	r3, #4
 80056c2:	4619      	mov	r1, r3
 80056c4:	4610      	mov	r0, r2
 80056c6:	f000 fb5d 	bl	8005d84 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	6a1b      	ldr	r3, [r3, #32]
 80056e0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	697a      	ldr	r2, [r7, #20]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056f2:	f023 0303 	bic.w	r3, r3, #3
 80056f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	689a      	ldr	r2, [r3, #8]
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	699b      	ldr	r3, [r3, #24]
 8005700:	021b      	lsls	r3, r3, #8
 8005702:	4313      	orrs	r3, r2
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	4313      	orrs	r3, r2
 8005708:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005710:	f023 030c 	bic.w	r3, r3, #12
 8005714:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800571c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005720:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	68da      	ldr	r2, [r3, #12]
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	69db      	ldr	r3, [r3, #28]
 800572a:	021b      	lsls	r3, r3, #8
 800572c:	4313      	orrs	r3, r2
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	4313      	orrs	r3, r2
 8005732:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	011a      	lsls	r2, r3, #4
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	6a1b      	ldr	r3, [r3, #32]
 800573e:	031b      	lsls	r3, r3, #12
 8005740:	4313      	orrs	r3, r2
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	4313      	orrs	r3, r2
 8005746:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800574e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005756:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	685a      	ldr	r2, [r3, #4]
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	695b      	ldr	r3, [r3, #20]
 8005760:	011b      	lsls	r3, r3, #4
 8005762:	4313      	orrs	r3, r2
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	4313      	orrs	r3, r2
 8005768:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3718      	adds	r7, #24
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d122      	bne.n	8005818 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	f003 0302 	and.w	r3, r3, #2
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d11b      	bne.n	8005818 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f06f 0202 	mvn.w	r2, #2
 80057e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2201      	movs	r2, #1
 80057ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	f003 0303 	and.w	r3, r3, #3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d003      	beq.n	8005806 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 faa2 	bl	8005d48 <HAL_TIM_IC_CaptureCallback>
 8005804:	e005      	b.n	8005812 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 fa94 	bl	8005d34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 faa5 	bl	8005d5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	f003 0304 	and.w	r3, r3, #4
 8005822:	2b04      	cmp	r3, #4
 8005824:	d122      	bne.n	800586c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	f003 0304 	and.w	r3, r3, #4
 8005830:	2b04      	cmp	r3, #4
 8005832:	d11b      	bne.n	800586c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f06f 0204 	mvn.w	r2, #4
 800583c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2202      	movs	r2, #2
 8005842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800584e:	2b00      	cmp	r3, #0
 8005850:	d003      	beq.n	800585a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 fa78 	bl	8005d48 <HAL_TIM_IC_CaptureCallback>
 8005858:	e005      	b.n	8005866 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 fa6a 	bl	8005d34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 fa7b 	bl	8005d5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	f003 0308 	and.w	r3, r3, #8
 8005876:	2b08      	cmp	r3, #8
 8005878:	d122      	bne.n	80058c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	f003 0308 	and.w	r3, r3, #8
 8005884:	2b08      	cmp	r3, #8
 8005886:	d11b      	bne.n	80058c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f06f 0208 	mvn.w	r2, #8
 8005890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2204      	movs	r2, #4
 8005896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	69db      	ldr	r3, [r3, #28]
 800589e:	f003 0303 	and.w	r3, r3, #3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d003      	beq.n	80058ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 fa4e 	bl	8005d48 <HAL_TIM_IC_CaptureCallback>
 80058ac:	e005      	b.n	80058ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 fa40 	bl	8005d34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 fa51 	bl	8005d5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	f003 0310 	and.w	r3, r3, #16
 80058ca:	2b10      	cmp	r3, #16
 80058cc:	d122      	bne.n	8005914 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	f003 0310 	and.w	r3, r3, #16
 80058d8:	2b10      	cmp	r3, #16
 80058da:	d11b      	bne.n	8005914 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f06f 0210 	mvn.w	r2, #16
 80058e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2208      	movs	r2, #8
 80058ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	69db      	ldr	r3, [r3, #28]
 80058f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d003      	beq.n	8005902 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 fa24 	bl	8005d48 <HAL_TIM_IC_CaptureCallback>
 8005900:	e005      	b.n	800590e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 fa16 	bl	8005d34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 fa27 	bl	8005d5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b01      	cmp	r3, #1
 8005920:	d10e      	bne.n	8005940 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	f003 0301 	and.w	r3, r3, #1
 800592c:	2b01      	cmp	r3, #1
 800592e:	d107      	bne.n	8005940 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f06f 0201 	mvn.w	r2, #1
 8005938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 f9f0 	bl	8005d20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800594a:	2b80      	cmp	r3, #128	; 0x80
 800594c:	d10e      	bne.n	800596c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005958:	2b80      	cmp	r3, #128	; 0x80
 800595a:	d107      	bne.n	800596c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fd5e 	bl	8006428 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800597a:	d10e      	bne.n	800599a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005986:	2b80      	cmp	r3, #128	; 0x80
 8005988:	d107      	bne.n	800599a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 fd51 	bl	800643c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	691b      	ldr	r3, [r3, #16]
 80059a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a4:	2b40      	cmp	r3, #64	; 0x40
 80059a6:	d10e      	bne.n	80059c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b2:	2b40      	cmp	r3, #64	; 0x40
 80059b4:	d107      	bne.n	80059c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 f9d5 	bl	8005d70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	f003 0320 	and.w	r3, r3, #32
 80059d0:	2b20      	cmp	r3, #32
 80059d2:	d10e      	bne.n	80059f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	f003 0320 	and.w	r3, r3, #32
 80059de:	2b20      	cmp	r3, #32
 80059e0:	d107      	bne.n	80059f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f06f 0220 	mvn.w	r2, #32
 80059ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 fd11 	bl	8006414 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a00:	d10f      	bne.n	8005a22 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a10:	d107      	bne.n	8005a22 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005a1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 fd17 	bl	8006450 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a30:	d10f      	bne.n	8005a52 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a40:	d107      	bne.n	8005a52 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005a4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 fd09 	bl	8006464 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a60:	d10f      	bne.n	8005a82 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a70:	d107      	bne.n	8005a82 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005a7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 fcfb 	bl	8006478 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a90:	d10f      	bne.n	8005ab2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a9c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005aa0:	d107      	bne.n	8005ab2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005aaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 fced 	bl	800648c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ab2:	bf00      	nop
 8005ab4:	3708      	adds	r7, #8
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
	...

08005abc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d101      	bne.n	8005ad4 <HAL_TIM_ConfigClockSource+0x18>
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	e0d2      	b.n	8005c7a <HAL_TIM_ConfigClockSource+0x1be>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005af2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005af6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005afe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b10:	f000 80a9 	beq.w	8005c66 <HAL_TIM_ConfigClockSource+0x1aa>
 8005b14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b18:	d81a      	bhi.n	8005b50 <HAL_TIM_ConfigClockSource+0x94>
 8005b1a:	2b30      	cmp	r3, #48	; 0x30
 8005b1c:	f000 809a 	beq.w	8005c54 <HAL_TIM_ConfigClockSource+0x198>
 8005b20:	2b30      	cmp	r3, #48	; 0x30
 8005b22:	d809      	bhi.n	8005b38 <HAL_TIM_ConfigClockSource+0x7c>
 8005b24:	2b10      	cmp	r3, #16
 8005b26:	f000 8095 	beq.w	8005c54 <HAL_TIM_ConfigClockSource+0x198>
 8005b2a:	2b20      	cmp	r3, #32
 8005b2c:	f000 8092 	beq.w	8005c54 <HAL_TIM_ConfigClockSource+0x198>
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f000 808f 	beq.w	8005c54 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005b36:	e097      	b.n	8005c68 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8005b38:	2b50      	cmp	r3, #80	; 0x50
 8005b3a:	d05b      	beq.n	8005bf4 <HAL_TIM_ConfigClockSource+0x138>
 8005b3c:	2b50      	cmp	r3, #80	; 0x50
 8005b3e:	d802      	bhi.n	8005b46 <HAL_TIM_ConfigClockSource+0x8a>
 8005b40:	2b40      	cmp	r3, #64	; 0x40
 8005b42:	d077      	beq.n	8005c34 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005b44:	e090      	b.n	8005c68 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8005b46:	2b60      	cmp	r3, #96	; 0x60
 8005b48:	d064      	beq.n	8005c14 <HAL_TIM_ConfigClockSource+0x158>
 8005b4a:	2b70      	cmp	r3, #112	; 0x70
 8005b4c:	d028      	beq.n	8005ba0 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 8005b4e:	e08b      	b.n	8005c68 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8005b50:	4a4c      	ldr	r2, [pc, #304]	; (8005c84 <HAL_TIM_ConfigClockSource+0x1c8>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d07e      	beq.n	8005c54 <HAL_TIM_ConfigClockSource+0x198>
 8005b56:	4a4b      	ldr	r2, [pc, #300]	; (8005c84 <HAL_TIM_ConfigClockSource+0x1c8>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d810      	bhi.n	8005b7e <HAL_TIM_ConfigClockSource+0xc2>
 8005b5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b60:	d078      	beq.n	8005c54 <HAL_TIM_ConfigClockSource+0x198>
 8005b62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b66:	d803      	bhi.n	8005b70 <HAL_TIM_ConfigClockSource+0xb4>
 8005b68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b6c:	d02f      	beq.n	8005bce <HAL_TIM_ConfigClockSource+0x112>
      break;
 8005b6e:	e07b      	b.n	8005c68 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8005b70:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005b74:	d06e      	beq.n	8005c54 <HAL_TIM_ConfigClockSource+0x198>
 8005b76:	4a44      	ldr	r2, [pc, #272]	; (8005c88 <HAL_TIM_ConfigClockSource+0x1cc>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d06b      	beq.n	8005c54 <HAL_TIM_ConfigClockSource+0x198>
      break;
 8005b7c:	e074      	b.n	8005c68 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8005b7e:	4a43      	ldr	r2, [pc, #268]	; (8005c8c <HAL_TIM_ConfigClockSource+0x1d0>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d067      	beq.n	8005c54 <HAL_TIM_ConfigClockSource+0x198>
 8005b84:	4a41      	ldr	r2, [pc, #260]	; (8005c8c <HAL_TIM_ConfigClockSource+0x1d0>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d803      	bhi.n	8005b92 <HAL_TIM_ConfigClockSource+0xd6>
 8005b8a:	4a41      	ldr	r2, [pc, #260]	; (8005c90 <HAL_TIM_ConfigClockSource+0x1d4>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d061      	beq.n	8005c54 <HAL_TIM_ConfigClockSource+0x198>
      break;
 8005b90:	e06a      	b.n	8005c68 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8005b92:	4a40      	ldr	r2, [pc, #256]	; (8005c94 <HAL_TIM_ConfigClockSource+0x1d8>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d05d      	beq.n	8005c54 <HAL_TIM_ConfigClockSource+0x198>
 8005b98:	4a3f      	ldr	r2, [pc, #252]	; (8005c98 <HAL_TIM_ConfigClockSource+0x1dc>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d05a      	beq.n	8005c54 <HAL_TIM_ConfigClockSource+0x198>
      break;
 8005b9e:	e063      	b.n	8005c68 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6818      	ldr	r0, [r3, #0]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	6899      	ldr	r1, [r3, #8]
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	685a      	ldr	r2, [r3, #4]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	f000 fac8 	bl	8006144 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005bc2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	609a      	str	r2, [r3, #8]
      break;
 8005bcc:	e04c      	b.n	8005c68 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6818      	ldr	r0, [r3, #0]
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	6899      	ldr	r1, [r3, #8]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	685a      	ldr	r2, [r3, #4]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	f000 fab1 	bl	8006144 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	689a      	ldr	r2, [r3, #8]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bf0:	609a      	str	r2, [r3, #8]
      break;
 8005bf2:	e039      	b.n	8005c68 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6818      	ldr	r0, [r3, #0]
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	6859      	ldr	r1, [r3, #4]
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	461a      	mov	r2, r3
 8005c02:	f000 fa23 	bl	800604c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2150      	movs	r1, #80	; 0x50
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f000 fa7c 	bl	800610a <TIM_ITRx_SetConfig>
      break;
 8005c12:	e029      	b.n	8005c68 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6818      	ldr	r0, [r3, #0]
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	6859      	ldr	r1, [r3, #4]
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	461a      	mov	r2, r3
 8005c22:	f000 fa42 	bl	80060aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2160      	movs	r1, #96	; 0x60
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f000 fa6c 	bl	800610a <TIM_ITRx_SetConfig>
      break;
 8005c32:	e019      	b.n	8005c68 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6818      	ldr	r0, [r3, #0]
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	6859      	ldr	r1, [r3, #4]
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	461a      	mov	r2, r3
 8005c42:	f000 fa03 	bl	800604c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2140      	movs	r1, #64	; 0x40
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f000 fa5c 	bl	800610a <TIM_ITRx_SetConfig>
      break;
 8005c52:	e009      	b.n	8005c68 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	4610      	mov	r0, r2
 8005c60:	f000 fa53 	bl	800610a <TIM_ITRx_SetConfig>
      break;
 8005c64:	e000      	b.n	8005c68 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 8005c66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	00100030 	.word	0x00100030
 8005c88:	00100020 	.word	0x00100020
 8005c8c:	00100050 	.word	0x00100050
 8005c90:	00100040 	.word	0x00100040
 8005c94:	00100060 	.word	0x00100060
 8005c98:	00100070 	.word	0x00100070

08005c9c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d101      	bne.n	8005cb4 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	e031      	b.n	8005d18 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005cc4:	6839      	ldr	r1, [r7, #0]
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f904 	bl	8005ed4 <TIM_SlaveTimer_SetConfig>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d009      	beq.n	8005ce6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e018      	b.n	8005d18 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68da      	ldr	r2, [r3, #12]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cf4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68da      	ldr	r2, [r3, #12]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005d04:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3708      	adds	r7, #8
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005d28:	bf00      	nop
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d64:	bf00      	nop
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d78:	bf00      	nop
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a46      	ldr	r2, [pc, #280]	; (8005eb0 <TIM_Base_SetConfig+0x12c>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d017      	beq.n	8005dcc <TIM_Base_SetConfig+0x48>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005da2:	d013      	beq.n	8005dcc <TIM_Base_SetConfig+0x48>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a43      	ldr	r2, [pc, #268]	; (8005eb4 <TIM_Base_SetConfig+0x130>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d00f      	beq.n	8005dcc <TIM_Base_SetConfig+0x48>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a42      	ldr	r2, [pc, #264]	; (8005eb8 <TIM_Base_SetConfig+0x134>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d00b      	beq.n	8005dcc <TIM_Base_SetConfig+0x48>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a41      	ldr	r2, [pc, #260]	; (8005ebc <TIM_Base_SetConfig+0x138>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d007      	beq.n	8005dcc <TIM_Base_SetConfig+0x48>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a40      	ldr	r2, [pc, #256]	; (8005ec0 <TIM_Base_SetConfig+0x13c>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d003      	beq.n	8005dcc <TIM_Base_SetConfig+0x48>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a3f      	ldr	r2, [pc, #252]	; (8005ec4 <TIM_Base_SetConfig+0x140>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d108      	bne.n	8005dde <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a33      	ldr	r2, [pc, #204]	; (8005eb0 <TIM_Base_SetConfig+0x12c>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d023      	beq.n	8005e2e <TIM_Base_SetConfig+0xaa>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dec:	d01f      	beq.n	8005e2e <TIM_Base_SetConfig+0xaa>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a30      	ldr	r2, [pc, #192]	; (8005eb4 <TIM_Base_SetConfig+0x130>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d01b      	beq.n	8005e2e <TIM_Base_SetConfig+0xaa>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a2f      	ldr	r2, [pc, #188]	; (8005eb8 <TIM_Base_SetConfig+0x134>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d017      	beq.n	8005e2e <TIM_Base_SetConfig+0xaa>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a2e      	ldr	r2, [pc, #184]	; (8005ebc <TIM_Base_SetConfig+0x138>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d013      	beq.n	8005e2e <TIM_Base_SetConfig+0xaa>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a2d      	ldr	r2, [pc, #180]	; (8005ec0 <TIM_Base_SetConfig+0x13c>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d00f      	beq.n	8005e2e <TIM_Base_SetConfig+0xaa>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a2d      	ldr	r2, [pc, #180]	; (8005ec8 <TIM_Base_SetConfig+0x144>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d00b      	beq.n	8005e2e <TIM_Base_SetConfig+0xaa>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a2c      	ldr	r2, [pc, #176]	; (8005ecc <TIM_Base_SetConfig+0x148>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d007      	beq.n	8005e2e <TIM_Base_SetConfig+0xaa>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a2b      	ldr	r2, [pc, #172]	; (8005ed0 <TIM_Base_SetConfig+0x14c>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d003      	beq.n	8005e2e <TIM_Base_SetConfig+0xaa>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a26      	ldr	r2, [pc, #152]	; (8005ec4 <TIM_Base_SetConfig+0x140>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d108      	bne.n	8005e40 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	689a      	ldr	r2, [r3, #8]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a12      	ldr	r2, [pc, #72]	; (8005eb0 <TIM_Base_SetConfig+0x12c>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d013      	beq.n	8005e94 <TIM_Base_SetConfig+0x110>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a14      	ldr	r2, [pc, #80]	; (8005ec0 <TIM_Base_SetConfig+0x13c>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d00f      	beq.n	8005e94 <TIM_Base_SetConfig+0x110>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a14      	ldr	r2, [pc, #80]	; (8005ec8 <TIM_Base_SetConfig+0x144>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d00b      	beq.n	8005e94 <TIM_Base_SetConfig+0x110>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a13      	ldr	r2, [pc, #76]	; (8005ecc <TIM_Base_SetConfig+0x148>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d007      	beq.n	8005e94 <TIM_Base_SetConfig+0x110>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a12      	ldr	r2, [pc, #72]	; (8005ed0 <TIM_Base_SetConfig+0x14c>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d003      	beq.n	8005e94 <TIM_Base_SetConfig+0x110>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a0d      	ldr	r2, [pc, #52]	; (8005ec4 <TIM_Base_SetConfig+0x140>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d103      	bne.n	8005e9c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	691a      	ldr	r2, [r3, #16]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	615a      	str	r2, [r3, #20]
}
 8005ea2:	bf00      	nop
 8005ea4:	3714      	adds	r7, #20
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	40012c00 	.word	0x40012c00
 8005eb4:	40000400 	.word	0x40000400
 8005eb8:	40000800 	.word	0x40000800
 8005ebc:	40000c00 	.word	0x40000c00
 8005ec0:	40013400 	.word	0x40013400
 8005ec4:	40015000 	.word	0x40015000
 8005ec8:	40014000 	.word	0x40014000
 8005ecc:	40014400 	.word	0x40014400
 8005ed0:	40014800 	.word	0x40014800

08005ed4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b086      	sub	sp, #24
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005eec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ef0:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f02:	f023 0307 	bic.w	r3, r3, #7
 8005f06:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	2b70      	cmp	r3, #112	; 0x70
 8005f20:	d034      	beq.n	8005f8c <TIM_SlaveTimer_SetConfig+0xb8>
 8005f22:	2b70      	cmp	r3, #112	; 0x70
 8005f24:	d811      	bhi.n	8005f4a <TIM_SlaveTimer_SetConfig+0x76>
 8005f26:	2b30      	cmp	r3, #48	; 0x30
 8005f28:	d07d      	beq.n	8006026 <TIM_SlaveTimer_SetConfig+0x152>
 8005f2a:	2b30      	cmp	r3, #48	; 0x30
 8005f2c:	d806      	bhi.n	8005f3c <TIM_SlaveTimer_SetConfig+0x68>
 8005f2e:	2b10      	cmp	r3, #16
 8005f30:	d079      	beq.n	8006026 <TIM_SlaveTimer_SetConfig+0x152>
 8005f32:	2b20      	cmp	r3, #32
 8005f34:	d077      	beq.n	8006026 <TIM_SlaveTimer_SetConfig+0x152>
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d075      	beq.n	8006026 <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 8005f3a:	e075      	b.n	8006028 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8005f3c:	2b50      	cmp	r3, #80	; 0x50
 8005f3e:	d05e      	beq.n	8005ffe <TIM_SlaveTimer_SetConfig+0x12a>
 8005f40:	2b60      	cmp	r3, #96	; 0x60
 8005f42:	d066      	beq.n	8006012 <TIM_SlaveTimer_SetConfig+0x13e>
 8005f44:	2b40      	cmp	r3, #64	; 0x40
 8005f46:	d02c      	beq.n	8005fa2 <TIM_SlaveTimer_SetConfig+0xce>
      break;
 8005f48:	e06e      	b.n	8006028 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8005f4a:	4a3a      	ldr	r2, [pc, #232]	; (8006034 <TIM_SlaveTimer_SetConfig+0x160>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d06a      	beq.n	8006026 <TIM_SlaveTimer_SetConfig+0x152>
 8005f50:	4a38      	ldr	r2, [pc, #224]	; (8006034 <TIM_SlaveTimer_SetConfig+0x160>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d809      	bhi.n	8005f6a <TIM_SlaveTimer_SetConfig+0x96>
 8005f56:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005f5a:	d064      	beq.n	8006026 <TIM_SlaveTimer_SetConfig+0x152>
 8005f5c:	4a36      	ldr	r2, [pc, #216]	; (8006038 <TIM_SlaveTimer_SetConfig+0x164>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d061      	beq.n	8006026 <TIM_SlaveTimer_SetConfig+0x152>
 8005f62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f66:	d05e      	beq.n	8006026 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8005f68:	e05e      	b.n	8006028 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8005f6a:	4a34      	ldr	r2, [pc, #208]	; (800603c <TIM_SlaveTimer_SetConfig+0x168>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d05a      	beq.n	8006026 <TIM_SlaveTimer_SetConfig+0x152>
 8005f70:	4a32      	ldr	r2, [pc, #200]	; (800603c <TIM_SlaveTimer_SetConfig+0x168>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d803      	bhi.n	8005f7e <TIM_SlaveTimer_SetConfig+0xaa>
 8005f76:	4a32      	ldr	r2, [pc, #200]	; (8006040 <TIM_SlaveTimer_SetConfig+0x16c>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d054      	beq.n	8006026 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8005f7c:	e054      	b.n	8006028 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8005f7e:	4a31      	ldr	r2, [pc, #196]	; (8006044 <TIM_SlaveTimer_SetConfig+0x170>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d050      	beq.n	8006026 <TIM_SlaveTimer_SetConfig+0x152>
 8005f84:	4a30      	ldr	r2, [pc, #192]	; (8006048 <TIM_SlaveTimer_SetConfig+0x174>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d04d      	beq.n	8006026 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8005f8a:	e04d      	b.n	8006028 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6818      	ldr	r0, [r3, #0]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	68d9      	ldr	r1, [r3, #12]
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	689a      	ldr	r2, [r3, #8]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	f000 f8d2 	bl	8006144 <TIM_ETR_SetConfig>
      break;
 8005fa0:	e042      	b.n	8006028 <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2b05      	cmp	r3, #5
 8005fa8:	d004      	beq.n	8005fb4 <TIM_SlaveTimer_SetConfig+0xe0>
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8005fb2:	d101      	bne.n	8005fb8 <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e038      	b.n	800602a <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6a1b      	ldr	r3, [r3, #32]
 8005fbe:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	6a1a      	ldr	r2, [r3, #32]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f022 0201 	bic.w	r2, r2, #1
 8005fce:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fde:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	011b      	lsls	r3, r3, #4
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	621a      	str	r2, [r3, #32]
      break;
 8005ffc:	e014      	b.n	8006028 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6818      	ldr	r0, [r3, #0]
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	6899      	ldr	r1, [r3, #8]
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	461a      	mov	r2, r3
 800600c:	f000 f81e 	bl	800604c <TIM_TI1_ConfigInputStage>
      break;
 8006010:	e00a      	b.n	8006028 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6818      	ldr	r0, [r3, #0]
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	6899      	ldr	r1, [r3, #8]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	461a      	mov	r2, r3
 8006020:	f000 f843 	bl	80060aa <TIM_TI2_ConfigInputStage>
      break;
 8006024:	e000      	b.n	8006028 <TIM_SlaveTimer_SetConfig+0x154>
      break;
 8006026:	bf00      	nop
  }
  return HAL_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3718      	adds	r7, #24
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	00100030 	.word	0x00100030
 8006038:	00100020 	.word	0x00100020
 800603c:	00100050 	.word	0x00100050
 8006040:	00100040 	.word	0x00100040
 8006044:	00100060 	.word	0x00100060
 8006048:	00100070 	.word	0x00100070

0800604c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800604c:	b480      	push	{r7}
 800604e:	b087      	sub	sp, #28
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6a1b      	ldr	r3, [r3, #32]
 800605c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	f023 0201 	bic.w	r2, r3, #1
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006076:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	011b      	lsls	r3, r3, #4
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	4313      	orrs	r3, r2
 8006080:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	f023 030a 	bic.w	r3, r3, #10
 8006088:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	4313      	orrs	r3, r2
 8006090:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	621a      	str	r2, [r3, #32]
}
 800609e:	bf00      	nop
 80060a0:	371c      	adds	r7, #28
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060aa:	b480      	push	{r7}
 80060ac:	b087      	sub	sp, #28
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	60f8      	str	r0, [r7, #12]
 80060b2:	60b9      	str	r1, [r7, #8]
 80060b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	f023 0210 	bic.w	r2, r3, #16
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6a1b      	ldr	r3, [r3, #32]
 80060cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	031b      	lsls	r3, r3, #12
 80060da:	697a      	ldr	r2, [r7, #20]
 80060dc:	4313      	orrs	r3, r2
 80060de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	011b      	lsls	r3, r3, #4
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	697a      	ldr	r2, [r7, #20]
 80060f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	693a      	ldr	r2, [r7, #16]
 80060fc:	621a      	str	r2, [r3, #32]
}
 80060fe:	bf00      	nop
 8006100:	371c      	adds	r7, #28
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr

0800610a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800610a:	b480      	push	{r7}
 800610c:	b085      	sub	sp, #20
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
 8006112:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006124:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006126:	683a      	ldr	r2, [r7, #0]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	4313      	orrs	r3, r2
 800612c:	f043 0307 	orr.w	r3, r3, #7
 8006130:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	609a      	str	r2, [r3, #8]
}
 8006138:	bf00      	nop
 800613a:	3714      	adds	r7, #20
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006144:	b480      	push	{r7}
 8006146:	b087      	sub	sp, #28
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
 8006150:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800615e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	021a      	lsls	r2, r3, #8
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	431a      	orrs	r2, r3
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	4313      	orrs	r3, r2
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	4313      	orrs	r3, r2
 8006170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	697a      	ldr	r2, [r7, #20]
 8006176:	609a      	str	r2, [r3, #8]
}
 8006178:	bf00      	nop
 800617a:	371c      	adds	r7, #28
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006184:	b480      	push	{r7}
 8006186:	b085      	sub	sp, #20
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006194:	2b01      	cmp	r3, #1
 8006196:	d101      	bne.n	800619c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006198:	2302      	movs	r3, #2
 800619a:	e074      	b.n	8006286 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2202      	movs	r2, #2
 80061a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a34      	ldr	r2, [pc, #208]	; (8006294 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d009      	beq.n	80061da <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a33      	ldr	r2, [pc, #204]	; (8006298 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d004      	beq.n	80061da <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a31      	ldr	r2, [pc, #196]	; (800629c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d108      	bne.n	80061ec <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80061e0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80061f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	4313      	orrs	r3, r2
 8006200:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a21      	ldr	r2, [pc, #132]	; (8006294 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d022      	beq.n	800625a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800621c:	d01d      	beq.n	800625a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a1f      	ldr	r2, [pc, #124]	; (80062a0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d018      	beq.n	800625a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a1d      	ldr	r2, [pc, #116]	; (80062a4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d013      	beq.n	800625a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a1c      	ldr	r2, [pc, #112]	; (80062a8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d00e      	beq.n	800625a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a15      	ldr	r2, [pc, #84]	; (8006298 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d009      	beq.n	800625a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a18      	ldr	r2, [pc, #96]	; (80062ac <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d004      	beq.n	800625a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a11      	ldr	r2, [pc, #68]	; (800629c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d10c      	bne.n	8006274 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006260:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	68ba      	ldr	r2, [r7, #8]
 8006268:	4313      	orrs	r3, r2
 800626a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68ba      	ldr	r2, [r7, #8]
 8006272:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3714      	adds	r7, #20
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	40012c00 	.word	0x40012c00
 8006298:	40013400 	.word	0x40013400
 800629c:	40015000 	.word	0x40015000
 80062a0:	40000400 	.word	0x40000400
 80062a4:	40000800 	.word	0x40000800
 80062a8:	40000c00 	.word	0x40000c00
 80062ac:	40014000 	.word	0x40014000

080062b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b085      	sub	sp, #20
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80062ba:	2300      	movs	r3, #0
 80062bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d101      	bne.n	80062cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80062c8:	2302      	movs	r3, #2
 80062ca:	e096      	b.n	80063fa <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	4313      	orrs	r3, r2
 80062e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4313      	orrs	r3, r2
 800630a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	4313      	orrs	r3, r2
 8006318:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	695b      	ldr	r3, [r3, #20]
 8006324:	4313      	orrs	r3, r2
 8006326:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006332:	4313      	orrs	r3, r2
 8006334:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	699b      	ldr	r3, [r3, #24]
 8006340:	041b      	lsls	r3, r3, #16
 8006342:	4313      	orrs	r3, r2
 8006344:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a2f      	ldr	r2, [pc, #188]	; (8006408 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d009      	beq.n	8006364 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a2d      	ldr	r2, [pc, #180]	; (800640c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d004      	beq.n	8006364 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a2c      	ldr	r2, [pc, #176]	; (8006410 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d106      	bne.n	8006372 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	69db      	ldr	r3, [r3, #28]
 800636e:	4313      	orrs	r3, r2
 8006370:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a24      	ldr	r2, [pc, #144]	; (8006408 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d009      	beq.n	8006390 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a22      	ldr	r2, [pc, #136]	; (800640c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d004      	beq.n	8006390 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a21      	ldr	r2, [pc, #132]	; (8006410 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d12b      	bne.n	80063e8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800639a:	051b      	lsls	r3, r3, #20
 800639c:	4313      	orrs	r3, r2
 800639e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	6a1b      	ldr	r3, [r3, #32]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b8:	4313      	orrs	r3, r2
 80063ba:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a11      	ldr	r2, [pc, #68]	; (8006408 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d009      	beq.n	80063da <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a10      	ldr	r2, [pc, #64]	; (800640c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d004      	beq.n	80063da <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a0e      	ldr	r2, [pc, #56]	; (8006410 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d106      	bne.n	80063e8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e4:	4313      	orrs	r3, r2
 80063e6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3714      	adds	r7, #20
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	40012c00 	.word	0x40012c00
 800640c:	40013400 	.word	0x40013400
 8006410:	40015000 	.word	0x40015000

08006414 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006444:	bf00      	nop
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006458:	bf00      	nop
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800646c:	bf00      	nop
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006480:	bf00      	nop
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006494:	bf00      	nop
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 80064a0:	b590      	push	{r4, r7, lr}
 80064a2:	b08b      	sub	sp, #44	; 0x2c
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	4604      	mov	r4, r0
 80064a8:	4608      	mov	r0, r1
 80064aa:	4611      	mov	r1, r2
 80064ac:	461a      	mov	r2, r3
 80064ae:	4623      	mov	r3, r4
 80064b0:	80fb      	strh	r3, [r7, #6]
 80064b2:	4603      	mov	r3, r0
 80064b4:	80bb      	strh	r3, [r7, #4]
 80064b6:	460b      	mov	r3, r1
 80064b8:	807b      	strh	r3, [r7, #2]
 80064ba:	4613      	mov	r3, r2
 80064bc:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 80064be:	887b      	ldrh	r3, [r7, #2]
 80064c0:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 80064c2:	2300      	movs	r3, #0
 80064c4:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 80064c6:	887b      	ldrh	r3, [r7, #2]
 80064c8:	005b      	lsls	r3, r3, #1
 80064ca:	f1c3 0301 	rsb	r3, r3, #1
 80064ce:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 80064d0:	2300      	movs	r3, #0
 80064d2:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 80064d4:	2300      	movs	r3, #0
 80064d6:	617b      	str	r3, [r7, #20]

    while (x >= y)
 80064d8:	e061      	b.n	800659e <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 80064da:	88fa      	ldrh	r2, [r7, #6]
 80064dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	613b      	str	r3, [r7, #16]
 80064e2:	e018      	b.n	8006516 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	b298      	uxth	r0, r3
 80064e8:	6a3b      	ldr	r3, [r7, #32]
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	88bb      	ldrh	r3, [r7, #4]
 80064ee:	4413      	add	r3, r2
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	883a      	ldrh	r2, [r7, #0]
 80064f4:	4619      	mov	r1, r3
 80064f6:	f000 fc0b 	bl	8006d10 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	b298      	uxth	r0, r3
 80064fe:	6a3b      	ldr	r3, [r7, #32]
 8006500:	b29b      	uxth	r3, r3
 8006502:	88ba      	ldrh	r2, [r7, #4]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	b29b      	uxth	r3, r3
 8006508:	883a      	ldrh	r2, [r7, #0]
 800650a:	4619      	mov	r1, r3
 800650c:	f000 fc00 	bl	8006d10 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	3301      	adds	r3, #1
 8006514:	613b      	str	r3, [r7, #16]
 8006516:	88fa      	ldrh	r2, [r7, #6]
 8006518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651a:	4413      	add	r3, r2
 800651c:	693a      	ldr	r2, [r7, #16]
 800651e:	429a      	cmp	r2, r3
 8006520:	dde0      	ble.n	80064e4 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 8006522:	88fa      	ldrh	r2, [r7, #6]
 8006524:	6a3b      	ldr	r3, [r7, #32]
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	60fb      	str	r3, [r7, #12]
 800652a:	e018      	b.n	800655e <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	b298      	uxth	r0, r3
 8006530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006532:	b29a      	uxth	r2, r3
 8006534:	88bb      	ldrh	r3, [r7, #4]
 8006536:	4413      	add	r3, r2
 8006538:	b29b      	uxth	r3, r3
 800653a:	883a      	ldrh	r2, [r7, #0]
 800653c:	4619      	mov	r1, r3
 800653e:	f000 fbe7 	bl	8006d10 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	b298      	uxth	r0, r3
 8006546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006548:	b29b      	uxth	r3, r3
 800654a:	88ba      	ldrh	r2, [r7, #4]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	b29b      	uxth	r3, r3
 8006550:	883a      	ldrh	r2, [r7, #0]
 8006552:	4619      	mov	r1, r3
 8006554:	f000 fbdc 	bl	8006d10 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	3301      	adds	r3, #1
 800655c:	60fb      	str	r3, [r7, #12]
 800655e:	88fa      	ldrh	r2, [r7, #6]
 8006560:	6a3b      	ldr	r3, [r7, #32]
 8006562:	4413      	add	r3, r2
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	429a      	cmp	r2, r3
 8006568:	dde0      	ble.n	800652c <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 800656a:	6a3b      	ldr	r3, [r7, #32]
 800656c:	3301      	adds	r3, #1
 800656e:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8006570:	697a      	ldr	r2, [r7, #20]
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	4413      	add	r3, r2
 8006576:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	3302      	adds	r3, #2
 800657c:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	005a      	lsls	r2, r3, #1
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	4413      	add	r3, r2
 8006586:	2b00      	cmp	r3, #0
 8006588:	dd09      	ble.n	800659e <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 800658a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658c:	3b01      	subs	r3, #1
 800658e:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 8006590:	697a      	ldr	r2, [r7, #20]
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	4413      	add	r3, r2
 8006596:	617b      	str	r3, [r7, #20]
            xChange += 2;
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	3302      	adds	r3, #2
 800659c:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 800659e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065a0:	6a3b      	ldr	r3, [r7, #32]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	da99      	bge.n	80064da <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 80065a6:	bf00      	nop
 80065a8:	372c      	adds	r7, #44	; 0x2c
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd90      	pop	{r4, r7, pc}
	...

080065b0 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 80065b0:	b590      	push	{r4, r7, lr}
 80065b2:	b089      	sub	sp, #36	; 0x24
 80065b4:	af02      	add	r7, sp, #8
 80065b6:	4604      	mov	r4, r0
 80065b8:	4608      	mov	r0, r1
 80065ba:	4611      	mov	r1, r2
 80065bc:	461a      	mov	r2, r3
 80065be:	4623      	mov	r3, r4
 80065c0:	71fb      	strb	r3, [r7, #7]
 80065c2:	4603      	mov	r3, r0
 80065c4:	71bb      	strb	r3, [r7, #6]
 80065c6:	460b      	mov	r3, r1
 80065c8:	717b      	strb	r3, [r7, #5]
 80065ca:	4613      	mov	r3, r2
 80065cc:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 80065ce:	79fb      	ldrb	r3, [r7, #7]
 80065d0:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 80065d2:	7dfb      	ldrb	r3, [r7, #23]
 80065d4:	2b1f      	cmp	r3, #31
 80065d6:	d802      	bhi.n	80065de <ILI9341_Draw_Char+0x2e>
        Character = 0;
 80065d8:	2300      	movs	r3, #0
 80065da:	71fb      	strb	r3, [r7, #7]
 80065dc:	e002      	b.n	80065e4 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 80065de:	7dfb      	ldrb	r3, [r7, #23]
 80065e0:	3b20      	subs	r3, #32
 80065e2:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80065e4:	2300      	movs	r3, #0
 80065e6:	753b      	strb	r3, [r7, #20]
 80065e8:	e012      	b.n	8006610 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 80065ea:	7dfa      	ldrb	r2, [r7, #23]
 80065ec:	7d38      	ldrb	r0, [r7, #20]
 80065ee:	7d39      	ldrb	r1, [r7, #20]
 80065f0:	4c3b      	ldr	r4, [pc, #236]	; (80066e0 <ILI9341_Draw_Char+0x130>)
 80065f2:	4613      	mov	r3, r2
 80065f4:	005b      	lsls	r3, r3, #1
 80065f6:	4413      	add	r3, r2
 80065f8:	005b      	lsls	r3, r3, #1
 80065fa:	4423      	add	r3, r4
 80065fc:	4403      	add	r3, r0
 80065fe:	781a      	ldrb	r2, [r3, #0]
 8006600:	f107 0318 	add.w	r3, r7, #24
 8006604:	440b      	add	r3, r1
 8006606:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800660a:	7d3b      	ldrb	r3, [r7, #20]
 800660c:	3301      	adds	r3, #1
 800660e:	753b      	strb	r3, [r7, #20]
 8006610:	7d3b      	ldrb	r3, [r7, #20]
 8006612:	2b05      	cmp	r3, #5
 8006614:	d9e9      	bls.n	80065ea <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8006616:	79bb      	ldrb	r3, [r7, #6]
 8006618:	b298      	uxth	r0, r3
 800661a:	797b      	ldrb	r3, [r7, #5]
 800661c:	b299      	uxth	r1, r3
 800661e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006620:	461a      	mov	r2, r3
 8006622:	0052      	lsls	r2, r2, #1
 8006624:	4413      	add	r3, r2
 8006626:	005b      	lsls	r3, r3, #1
 8006628:	b29a      	uxth	r2, r3
 800662a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800662c:	00db      	lsls	r3, r3, #3
 800662e:	b29c      	uxth	r4, r3
 8006630:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006632:	9300      	str	r3, [sp, #0]
 8006634:	4623      	mov	r3, r4
 8006636:	f000 fc33 	bl	8006ea0 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 800663a:	2300      	movs	r3, #0
 800663c:	757b      	strb	r3, [r7, #21]
 800663e:	e048      	b.n	80066d2 <ILI9341_Draw_Char+0x122>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8006640:	2300      	movs	r3, #0
 8006642:	75bb      	strb	r3, [r7, #22]
 8006644:	e03f      	b.n	80066c6 <ILI9341_Draw_Char+0x116>
            if (temp[j] & (1<<i)) {			
 8006646:	7d7b      	ldrb	r3, [r7, #21]
 8006648:	f107 0218 	add.w	r2, r7, #24
 800664c:	4413      	add	r3, r2
 800664e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8006652:	461a      	mov	r2, r3
 8006654:	7dbb      	ldrb	r3, [r7, #22]
 8006656:	fa42 f303 	asr.w	r3, r2, r3
 800665a:	f003 0301 	and.w	r3, r3, #1
 800665e:	2b00      	cmp	r3, #0
 8006660:	d02e      	beq.n	80066c0 <ILI9341_Draw_Char+0x110>
							if(Size == 1)
 8006662:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006664:	2b01      	cmp	r3, #1
 8006666:	d110      	bne.n	800668a <ILI9341_Draw_Char+0xda>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8006668:	79bb      	ldrb	r3, [r7, #6]
 800666a:	b29a      	uxth	r2, r3
 800666c:	7d7b      	ldrb	r3, [r7, #21]
 800666e:	b29b      	uxth	r3, r3
 8006670:	4413      	add	r3, r2
 8006672:	b298      	uxth	r0, r3
 8006674:	797b      	ldrb	r3, [r7, #5]
 8006676:	b29a      	uxth	r2, r3
 8006678:	7dbb      	ldrb	r3, [r7, #22]
 800667a:	b29b      	uxth	r3, r3
 800667c:	4413      	add	r3, r2
 800667e:	b29b      	uxth	r3, r3
 8006680:	887a      	ldrh	r2, [r7, #2]
 8006682:	4619      	mov	r1, r3
 8006684:	f000 fb44 	bl	8006d10 <ILI9341_Draw_Pixel>
 8006688:	e01a      	b.n	80066c0 <ILI9341_Draw_Char+0x110>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 800668a:	79bb      	ldrb	r3, [r7, #6]
 800668c:	b29a      	uxth	r2, r3
 800668e:	7d7b      	ldrb	r3, [r7, #21]
 8006690:	b29b      	uxth	r3, r3
 8006692:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8006694:	fb11 f303 	smulbb	r3, r1, r3
 8006698:	b29b      	uxth	r3, r3
 800669a:	4413      	add	r3, r2
 800669c:	b298      	uxth	r0, r3
 800669e:	797b      	ldrb	r3, [r7, #5]
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	7dbb      	ldrb	r3, [r7, #22]
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80066a8:	fb11 f303 	smulbb	r3, r1, r3
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	4413      	add	r3, r2
 80066b0:	b299      	uxth	r1, r3
 80066b2:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 80066b4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80066b6:	887b      	ldrh	r3, [r7, #2]
 80066b8:	9300      	str	r3, [sp, #0]
 80066ba:	4623      	mov	r3, r4
 80066bc:	f000 fbf0 	bl	8006ea0 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80066c0:	7dbb      	ldrb	r3, [r7, #22]
 80066c2:	3301      	adds	r3, #1
 80066c4:	75bb      	strb	r3, [r7, #22]
 80066c6:	7dbb      	ldrb	r3, [r7, #22]
 80066c8:	2b07      	cmp	r3, #7
 80066ca:	d9bc      	bls.n	8006646 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 80066cc:	7d7b      	ldrb	r3, [r7, #21]
 80066ce:	3301      	adds	r3, #1
 80066d0:	757b      	strb	r3, [r7, #21]
 80066d2:	7d7b      	ldrb	r3, [r7, #21]
 80066d4:	2b05      	cmp	r3, #5
 80066d6:	d9b3      	bls.n	8006640 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 80066d8:	bf00      	nop
 80066da:	371c      	adds	r7, #28
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd90      	pop	{r4, r7, pc}
 80066e0:	080082dc 	.word	0x080082dc

080066e4 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80066e4:	b590      	push	{r4, r7, lr}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af02      	add	r7, sp, #8
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	4608      	mov	r0, r1
 80066ee:	4611      	mov	r1, r2
 80066f0:	461a      	mov	r2, r3
 80066f2:	4603      	mov	r3, r0
 80066f4:	70fb      	strb	r3, [r7, #3]
 80066f6:	460b      	mov	r3, r1
 80066f8:	70bb      	strb	r3, [r7, #2]
 80066fa:	4613      	mov	r3, r2
 80066fc:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 80066fe:	e017      	b.n	8006730 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	1c5a      	adds	r2, r3, #1
 8006704:	607a      	str	r2, [r7, #4]
 8006706:	7818      	ldrb	r0, [r3, #0]
 8006708:	883c      	ldrh	r4, [r7, #0]
 800670a:	78ba      	ldrb	r2, [r7, #2]
 800670c:	78f9      	ldrb	r1, [r7, #3]
 800670e:	8bbb      	ldrh	r3, [r7, #28]
 8006710:	9301      	str	r3, [sp, #4]
 8006712:	8b3b      	ldrh	r3, [r7, #24]
 8006714:	9300      	str	r3, [sp, #0]
 8006716:	4623      	mov	r3, r4
 8006718:	f7ff ff4a 	bl	80065b0 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 800671c:	8b3b      	ldrh	r3, [r7, #24]
 800671e:	b2db      	uxtb	r3, r3
 8006720:	461a      	mov	r2, r3
 8006722:	0052      	lsls	r2, r2, #1
 8006724:	4413      	add	r3, r2
 8006726:	005b      	lsls	r3, r3, #1
 8006728:	b2da      	uxtb	r2, r3
 800672a:	78fb      	ldrb	r3, [r7, #3]
 800672c:	4413      	add	r3, r2
 800672e:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d1e3      	bne.n	8006700 <ILI9341_Draw_Text+0x1c>
    }
}
 8006738:	bf00      	nop
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	bd90      	pop	{r4, r7, pc}

08006740 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{																							//GPIO INIT
 8006740:	b580      	push	{r7, lr}
 8006742:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8006744:	2200      	movs	r2, #0
 8006746:	2180      	movs	r1, #128	; 0x80
 8006748:	4802      	ldr	r0, [pc, #8]	; (8006754 <ILI9341_SPI_Init+0x14>)
 800674a:	f7fd fb09 	bl	8003d60 <HAL_GPIO_WritePin>
}
 800674e:	bf00      	nop
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	48000400 	.word	0x48000400

08006758 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	4603      	mov	r3, r0
 8006760:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8006762:	1df9      	adds	r1, r7, #7
 8006764:	2301      	movs	r3, #1
 8006766:	2201      	movs	r2, #1
 8006768:	4803      	ldr	r0, [pc, #12]	; (8006778 <ILI9341_SPI_Send+0x20>)
 800676a:	f7fe fc43 	bl	8004ff4 <HAL_SPI_Transmit>
}
 800676e:	bf00      	nop
 8006770:	3708      	adds	r7, #8
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	200001e4 	.word	0x200001e4

0800677c <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	4603      	mov	r3, r0
 8006784:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8006786:	2200      	movs	r2, #0
 8006788:	2180      	movs	r1, #128	; 0x80
 800678a:	480a      	ldr	r0, [pc, #40]	; (80067b4 <ILI9341_Write_Command+0x38>)
 800678c:	f7fd fae8 	bl	8003d60 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8006790:	2200      	movs	r2, #0
 8006792:	2140      	movs	r1, #64	; 0x40
 8006794:	4807      	ldr	r0, [pc, #28]	; (80067b4 <ILI9341_Write_Command+0x38>)
 8006796:	f7fd fae3 	bl	8003d60 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 800679a:	79fb      	ldrb	r3, [r7, #7]
 800679c:	4618      	mov	r0, r3
 800679e:	f7ff ffdb 	bl	8006758 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80067a2:	2201      	movs	r2, #1
 80067a4:	2180      	movs	r1, #128	; 0x80
 80067a6:	4803      	ldr	r0, [pc, #12]	; (80067b4 <ILI9341_Write_Command+0x38>)
 80067a8:	f7fd fada 	bl	8003d60 <HAL_GPIO_WritePin>
}
 80067ac:	bf00      	nop
 80067ae:	3708      	adds	r7, #8
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	48000400 	.word	0x48000400

080067b8 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
 80067be:	4603      	mov	r3, r0
 80067c0:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80067c2:	2201      	movs	r2, #1
 80067c4:	2140      	movs	r1, #64	; 0x40
 80067c6:	480a      	ldr	r0, [pc, #40]	; (80067f0 <ILI9341_Write_Data+0x38>)
 80067c8:	f7fd faca 	bl	8003d60 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80067cc:	2200      	movs	r2, #0
 80067ce:	2180      	movs	r1, #128	; 0x80
 80067d0:	4807      	ldr	r0, [pc, #28]	; (80067f0 <ILI9341_Write_Data+0x38>)
 80067d2:	f7fd fac5 	bl	8003d60 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 80067d6:	79fb      	ldrb	r3, [r7, #7]
 80067d8:	4618      	mov	r0, r3
 80067da:	f7ff ffbd 	bl	8006758 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80067de:	2201      	movs	r2, #1
 80067e0:	2180      	movs	r1, #128	; 0x80
 80067e2:	4803      	ldr	r0, [pc, #12]	; (80067f0 <ILI9341_Write_Data+0x38>)
 80067e4:	f7fd fabc 	bl	8003d60 <HAL_GPIO_WritePin>
}
 80067e8:	bf00      	nop
 80067ea:	3708      	adds	r7, #8
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	48000400 	.word	0x48000400

080067f4 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80067f4:	b590      	push	{r4, r7, lr}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	4604      	mov	r4, r0
 80067fc:	4608      	mov	r0, r1
 80067fe:	4611      	mov	r1, r2
 8006800:	461a      	mov	r2, r3
 8006802:	4623      	mov	r3, r4
 8006804:	80fb      	strh	r3, [r7, #6]
 8006806:	4603      	mov	r3, r0
 8006808:	80bb      	strh	r3, [r7, #4]
 800680a:	460b      	mov	r3, r1
 800680c:	807b      	strh	r3, [r7, #2]
 800680e:	4613      	mov	r3, r2
 8006810:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8006812:	202a      	movs	r0, #42	; 0x2a
 8006814:	f7ff ffb2 	bl	800677c <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8006818:	88fb      	ldrh	r3, [r7, #6]
 800681a:	0a1b      	lsrs	r3, r3, #8
 800681c:	b29b      	uxth	r3, r3
 800681e:	b2db      	uxtb	r3, r3
 8006820:	4618      	mov	r0, r3
 8006822:	f7ff ffc9 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8006826:	88fb      	ldrh	r3, [r7, #6]
 8006828:	b2db      	uxtb	r3, r3
 800682a:	4618      	mov	r0, r3
 800682c:	f7ff ffc4 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8006830:	887b      	ldrh	r3, [r7, #2]
 8006832:	0a1b      	lsrs	r3, r3, #8
 8006834:	b29b      	uxth	r3, r3
 8006836:	b2db      	uxtb	r3, r3
 8006838:	4618      	mov	r0, r3
 800683a:	f7ff ffbd 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 800683e:	887b      	ldrh	r3, [r7, #2]
 8006840:	b2db      	uxtb	r3, r3
 8006842:	4618      	mov	r0, r3
 8006844:	f7ff ffb8 	bl	80067b8 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8006848:	202b      	movs	r0, #43	; 0x2b
 800684a:	f7ff ff97 	bl	800677c <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 800684e:	88bb      	ldrh	r3, [r7, #4]
 8006850:	0a1b      	lsrs	r3, r3, #8
 8006852:	b29b      	uxth	r3, r3
 8006854:	b2db      	uxtb	r3, r3
 8006856:	4618      	mov	r0, r3
 8006858:	f7ff ffae 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 800685c:	88bb      	ldrh	r3, [r7, #4]
 800685e:	b2db      	uxtb	r3, r3
 8006860:	4618      	mov	r0, r3
 8006862:	f7ff ffa9 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8006866:	883b      	ldrh	r3, [r7, #0]
 8006868:	0a1b      	lsrs	r3, r3, #8
 800686a:	b29b      	uxth	r3, r3
 800686c:	b2db      	uxtb	r3, r3
 800686e:	4618      	mov	r0, r3
 8006870:	f7ff ffa2 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8006874:	883b      	ldrh	r3, [r7, #0]
 8006876:	b2db      	uxtb	r3, r3
 8006878:	4618      	mov	r0, r3
 800687a:	f7ff ff9d 	bl	80067b8 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 800687e:	202c      	movs	r0, #44	; 0x2c
 8006880:	f7ff ff7c 	bl	800677c <ILI9341_Write_Command>
}
 8006884:	bf00      	nop
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	bd90      	pop	{r4, r7, pc}

0800688c <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8006890:	2200      	movs	r2, #0
 8006892:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006896:	480b      	ldr	r0, [pc, #44]	; (80068c4 <ILI9341_Reset+0x38>)
 8006898:	f7fd fa62 	bl	8003d60 <HAL_GPIO_WritePin>
HAL_Delay(200);
 800689c:	20c8      	movs	r0, #200	; 0xc8
 800689e:	f7fb f819 	bl	80018d4 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80068a2:	2200      	movs	r2, #0
 80068a4:	2180      	movs	r1, #128	; 0x80
 80068a6:	4807      	ldr	r0, [pc, #28]	; (80068c4 <ILI9341_Reset+0x38>)
 80068a8:	f7fd fa5a 	bl	8003d60 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80068ac:	20c8      	movs	r0, #200	; 0xc8
 80068ae:	f7fb f811 	bl	80018d4 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 80068b2:	2201      	movs	r2, #1
 80068b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80068b8:	4802      	ldr	r0, [pc, #8]	; (80068c4 <ILI9341_Reset+0x38>)
 80068ba:	f7fd fa51 	bl	8003d60 <HAL_GPIO_WritePin>
}
 80068be:	bf00      	nop
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	48000400 	.word	0x48000400

080068c8 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	4603      	mov	r3, r0
 80068d0:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 80068d2:	79fb      	ldrb	r3, [r7, #7]
 80068d4:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 80068d6:	2036      	movs	r0, #54	; 0x36
 80068d8:	f7ff ff50 	bl	800677c <ILI9341_Write_Command>
//HAL_Delay(1);
	
switch(screen_rotation) 
 80068dc:	7bfb      	ldrb	r3, [r7, #15]
 80068de:	2b03      	cmp	r3, #3
 80068e0:	d836      	bhi.n	8006950 <ILI9341_Set_Rotation+0x88>
 80068e2:	a201      	add	r2, pc, #4	; (adr r2, 80068e8 <ILI9341_Set_Rotation+0x20>)
 80068e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e8:	080068f9 	.word	0x080068f9
 80068ec:	0800690f 	.word	0x0800690f
 80068f0:	08006925 	.word	0x08006925
 80068f4:	0800693b 	.word	0x0800693b
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 80068f8:	2048      	movs	r0, #72	; 0x48
 80068fa:	f7ff ff5d 	bl	80067b8 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 80068fe:	4b17      	ldr	r3, [pc, #92]	; (800695c <ILI9341_Set_Rotation+0x94>)
 8006900:	22f0      	movs	r2, #240	; 0xf0
 8006902:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8006904:	4b16      	ldr	r3, [pc, #88]	; (8006960 <ILI9341_Set_Rotation+0x98>)
 8006906:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800690a:	801a      	strh	r2, [r3, #0]
			break;
 800690c:	e021      	b.n	8006952 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 800690e:	2028      	movs	r0, #40	; 0x28
 8006910:	f7ff ff52 	bl	80067b8 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8006914:	4b11      	ldr	r3, [pc, #68]	; (800695c <ILI9341_Set_Rotation+0x94>)
 8006916:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800691a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800691c:	4b10      	ldr	r3, [pc, #64]	; (8006960 <ILI9341_Set_Rotation+0x98>)
 800691e:	22f0      	movs	r2, #240	; 0xf0
 8006920:	801a      	strh	r2, [r3, #0]
			break;
 8006922:	e016      	b.n	8006952 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8006924:	2088      	movs	r0, #136	; 0x88
 8006926:	f7ff ff47 	bl	80067b8 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 800692a:	4b0c      	ldr	r3, [pc, #48]	; (800695c <ILI9341_Set_Rotation+0x94>)
 800692c:	22f0      	movs	r2, #240	; 0xf0
 800692e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8006930:	4b0b      	ldr	r3, [pc, #44]	; (8006960 <ILI9341_Set_Rotation+0x98>)
 8006932:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006936:	801a      	strh	r2, [r3, #0]
			break;
 8006938:	e00b      	b.n	8006952 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 800693a:	20e8      	movs	r0, #232	; 0xe8
 800693c:	f7ff ff3c 	bl	80067b8 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8006940:	4b06      	ldr	r3, [pc, #24]	; (800695c <ILI9341_Set_Rotation+0x94>)
 8006942:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006946:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8006948:	4b05      	ldr	r3, [pc, #20]	; (8006960 <ILI9341_Set_Rotation+0x98>)
 800694a:	22f0      	movs	r2, #240	; 0xf0
 800694c:	801a      	strh	r2, [r3, #0]
			break;
 800694e:	e000      	b.n	8006952 <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8006950:	bf00      	nop
	}
}
 8006952:	bf00      	nop
 8006954:	3710      	adds	r7, #16
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	20000012 	.word	0x20000012
 8006960:	20000010 	.word	0x20000010

08006964 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8006968:	2201      	movs	r2, #1
 800696a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800696e:	4802      	ldr	r0, [pc, #8]	; (8006978 <ILI9341_Enable+0x14>)
 8006970:	f7fd f9f6 	bl	8003d60 <HAL_GPIO_WritePin>
}
 8006974:	bf00      	nop
 8006976:	bd80      	pop	{r7, pc}
 8006978:	48000400 	.word	0x48000400

0800697c <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8006980:	f7ff fff0 	bl	8006964 <ILI9341_Enable>
ILI9341_SPI_Init();
 8006984:	f7ff fedc 	bl	8006740 <ILI9341_SPI_Init>
ILI9341_Reset();
 8006988:	f7ff ff80 	bl	800688c <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 800698c:	2001      	movs	r0, #1
 800698e:	f7ff fef5 	bl	800677c <ILI9341_Write_Command>
HAL_Delay(2000);
 8006992:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006996:	f7fa ff9d 	bl	80018d4 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 800699a:	20cb      	movs	r0, #203	; 0xcb
 800699c:	f7ff feee 	bl	800677c <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 80069a0:	2039      	movs	r0, #57	; 0x39
 80069a2:	f7ff ff09 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 80069a6:	202c      	movs	r0, #44	; 0x2c
 80069a8:	f7ff ff06 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80069ac:	2000      	movs	r0, #0
 80069ae:	f7ff ff03 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 80069b2:	2034      	movs	r0, #52	; 0x34
 80069b4:	f7ff ff00 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 80069b8:	2002      	movs	r0, #2
 80069ba:	f7ff fefd 	bl	80067b8 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 80069be:	20cf      	movs	r0, #207	; 0xcf
 80069c0:	f7ff fedc 	bl	800677c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80069c4:	2000      	movs	r0, #0
 80069c6:	f7ff fef7 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80069ca:	20c1      	movs	r0, #193	; 0xc1
 80069cc:	f7ff fef4 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80069d0:	2030      	movs	r0, #48	; 0x30
 80069d2:	f7ff fef1 	bl	80067b8 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 80069d6:	20e8      	movs	r0, #232	; 0xe8
 80069d8:	f7ff fed0 	bl	800677c <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80069dc:	2085      	movs	r0, #133	; 0x85
 80069de:	f7ff feeb 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80069e2:	2000      	movs	r0, #0
 80069e4:	f7ff fee8 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 80069e8:	2078      	movs	r0, #120	; 0x78
 80069ea:	f7ff fee5 	bl	80067b8 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 80069ee:	20ea      	movs	r0, #234	; 0xea
 80069f0:	f7ff fec4 	bl	800677c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80069f4:	2000      	movs	r0, #0
 80069f6:	f7ff fedf 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80069fa:	2000      	movs	r0, #0
 80069fc:	f7ff fedc 	bl	80067b8 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8006a00:	20ed      	movs	r0, #237	; 0xed
 8006a02:	f7ff febb 	bl	800677c <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8006a06:	2064      	movs	r0, #100	; 0x64
 8006a08:	f7ff fed6 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8006a0c:	2003      	movs	r0, #3
 8006a0e:	f7ff fed3 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8006a12:	2012      	movs	r0, #18
 8006a14:	f7ff fed0 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8006a18:	2081      	movs	r0, #129	; 0x81
 8006a1a:	f7ff fecd 	bl	80067b8 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8006a1e:	20f7      	movs	r0, #247	; 0xf7
 8006a20:	f7ff feac 	bl	800677c <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8006a24:	2020      	movs	r0, #32
 8006a26:	f7ff fec7 	bl	80067b8 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8006a2a:	20c0      	movs	r0, #192	; 0xc0
 8006a2c:	f7ff fea6 	bl	800677c <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8006a30:	2023      	movs	r0, #35	; 0x23
 8006a32:	f7ff fec1 	bl	80067b8 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8006a36:	20c1      	movs	r0, #193	; 0xc1
 8006a38:	f7ff fea0 	bl	800677c <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8006a3c:	2010      	movs	r0, #16
 8006a3e:	f7ff febb 	bl	80067b8 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8006a42:	20c5      	movs	r0, #197	; 0xc5
 8006a44:	f7ff fe9a 	bl	800677c <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8006a48:	203e      	movs	r0, #62	; 0x3e
 8006a4a:	f7ff feb5 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8006a4e:	2028      	movs	r0, #40	; 0x28
 8006a50:	f7ff feb2 	bl	80067b8 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8006a54:	20c7      	movs	r0, #199	; 0xc7
 8006a56:	f7ff fe91 	bl	800677c <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8006a5a:	2086      	movs	r0, #134	; 0x86
 8006a5c:	f7ff feac 	bl	80067b8 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8006a60:	2036      	movs	r0, #54	; 0x36
 8006a62:	f7ff fe8b 	bl	800677c <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8006a66:	2048      	movs	r0, #72	; 0x48
 8006a68:	f7ff fea6 	bl	80067b8 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8006a6c:	203a      	movs	r0, #58	; 0x3a
 8006a6e:	f7ff fe85 	bl	800677c <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8006a72:	2055      	movs	r0, #85	; 0x55
 8006a74:	f7ff fea0 	bl	80067b8 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8006a78:	20b1      	movs	r0, #177	; 0xb1
 8006a7a:	f7ff fe7f 	bl	800677c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8006a7e:	2000      	movs	r0, #0
 8006a80:	f7ff fe9a 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8006a84:	2018      	movs	r0, #24
 8006a86:	f7ff fe97 	bl	80067b8 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8006a8a:	20b6      	movs	r0, #182	; 0xb6
 8006a8c:	f7ff fe76 	bl	800677c <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8006a90:	2008      	movs	r0, #8
 8006a92:	f7ff fe91 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8006a96:	2082      	movs	r0, #130	; 0x82
 8006a98:	f7ff fe8e 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8006a9c:	2027      	movs	r0, #39	; 0x27
 8006a9e:	f7ff fe8b 	bl	80067b8 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8006aa2:	20f2      	movs	r0, #242	; 0xf2
 8006aa4:	f7ff fe6a 	bl	800677c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8006aa8:	2000      	movs	r0, #0
 8006aaa:	f7ff fe85 	bl	80067b8 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8006aae:	2026      	movs	r0, #38	; 0x26
 8006ab0:	f7ff fe64 	bl	800677c <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8006ab4:	2001      	movs	r0, #1
 8006ab6:	f7ff fe7f 	bl	80067b8 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8006aba:	20e0      	movs	r0, #224	; 0xe0
 8006abc:	f7ff fe5e 	bl	800677c <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8006ac0:	200f      	movs	r0, #15
 8006ac2:	f7ff fe79 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8006ac6:	2031      	movs	r0, #49	; 0x31
 8006ac8:	f7ff fe76 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8006acc:	202b      	movs	r0, #43	; 0x2b
 8006ace:	f7ff fe73 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8006ad2:	200c      	movs	r0, #12
 8006ad4:	f7ff fe70 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8006ad8:	200e      	movs	r0, #14
 8006ada:	f7ff fe6d 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8006ade:	2008      	movs	r0, #8
 8006ae0:	f7ff fe6a 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8006ae4:	204e      	movs	r0, #78	; 0x4e
 8006ae6:	f7ff fe67 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8006aea:	20f1      	movs	r0, #241	; 0xf1
 8006aec:	f7ff fe64 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8006af0:	2037      	movs	r0, #55	; 0x37
 8006af2:	f7ff fe61 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8006af6:	2007      	movs	r0, #7
 8006af8:	f7ff fe5e 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8006afc:	2010      	movs	r0, #16
 8006afe:	f7ff fe5b 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8006b02:	2003      	movs	r0, #3
 8006b04:	f7ff fe58 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8006b08:	200e      	movs	r0, #14
 8006b0a:	f7ff fe55 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8006b0e:	2009      	movs	r0, #9
 8006b10:	f7ff fe52 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8006b14:	2000      	movs	r0, #0
 8006b16:	f7ff fe4f 	bl	80067b8 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8006b1a:	20e1      	movs	r0, #225	; 0xe1
 8006b1c:	f7ff fe2e 	bl	800677c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8006b20:	2000      	movs	r0, #0
 8006b22:	f7ff fe49 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8006b26:	200e      	movs	r0, #14
 8006b28:	f7ff fe46 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8006b2c:	2014      	movs	r0, #20
 8006b2e:	f7ff fe43 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8006b32:	2003      	movs	r0, #3
 8006b34:	f7ff fe40 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8006b38:	2011      	movs	r0, #17
 8006b3a:	f7ff fe3d 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8006b3e:	2007      	movs	r0, #7
 8006b40:	f7ff fe3a 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8006b44:	2031      	movs	r0, #49	; 0x31
 8006b46:	f7ff fe37 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8006b4a:	20c1      	movs	r0, #193	; 0xc1
 8006b4c:	f7ff fe34 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8006b50:	2048      	movs	r0, #72	; 0x48
 8006b52:	f7ff fe31 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8006b56:	2008      	movs	r0, #8
 8006b58:	f7ff fe2e 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8006b5c:	200f      	movs	r0, #15
 8006b5e:	f7ff fe2b 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8006b62:	200c      	movs	r0, #12
 8006b64:	f7ff fe28 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8006b68:	2031      	movs	r0, #49	; 0x31
 8006b6a:	f7ff fe25 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8006b6e:	2036      	movs	r0, #54	; 0x36
 8006b70:	f7ff fe22 	bl	80067b8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8006b74:	200f      	movs	r0, #15
 8006b76:	f7ff fe1f 	bl	80067b8 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8006b7a:	2011      	movs	r0, #17
 8006b7c:	f7ff fdfe 	bl	800677c <ILI9341_Write_Command>
HAL_Delay(240);
 8006b80:	20f0      	movs	r0, #240	; 0xf0
 8006b82:	f7fa fea7 	bl	80018d4 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8006b86:	2029      	movs	r0, #41	; 0x29
 8006b88:	f7ff fdf8 	bl	800677c <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8006b8c:	2000      	movs	r0, #0
 8006b8e:	f7ff fe9b 	bl	80068c8 <ILI9341_Set_Rotation>
}
 8006b92:	bf00      	nop
 8006b94:	bd80      	pop	{r7, pc}
	...

08006b98 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8006b98:	b5b0      	push	{r4, r5, r7, lr}
 8006b9a:	b08c      	sub	sp, #48	; 0x30
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	6039      	str	r1, [r7, #0]
 8006ba2:	80fb      	strh	r3, [r7, #6]
 8006ba4:	466b      	mov	r3, sp
 8006ba6:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	005b      	lsls	r3, r3, #1
 8006bb0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006bb4:	d202      	bcs.n	8006bbc <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8006bba:	e002      	b.n	8006bc2 <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8006bbc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006bc0:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	2140      	movs	r1, #64	; 0x40
 8006bc6:	483d      	ldr	r0, [pc, #244]	; (8006cbc <ILI9341_Draw_Colour_Burst+0x124>)
 8006bc8:	f7fd f8ca 	bl	8003d60 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8006bcc:	2200      	movs	r2, #0
 8006bce:	2180      	movs	r1, #128	; 0x80
 8006bd0:	483a      	ldr	r0, [pc, #232]	; (8006cbc <ILI9341_Draw_Colour_Burst+0x124>)
 8006bd2:	f7fd f8c5 	bl	8003d60 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8006bd6:	88fb      	ldrh	r3, [r7, #6]
 8006bd8:	0a1b      	lsrs	r3, r3, #8
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8006be0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006be2:	4603      	mov	r3, r0
 8006be4:	3b01      	subs	r3, #1
 8006be6:	61fb      	str	r3, [r7, #28]
 8006be8:	4601      	mov	r1, r0
 8006bea:	f04f 0200 	mov.w	r2, #0
 8006bee:	f04f 0300 	mov.w	r3, #0
 8006bf2:	f04f 0400 	mov.w	r4, #0
 8006bf6:	00d4      	lsls	r4, r2, #3
 8006bf8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8006bfc:	00cb      	lsls	r3, r1, #3
 8006bfe:	4601      	mov	r1, r0
 8006c00:	f04f 0200 	mov.w	r2, #0
 8006c04:	f04f 0300 	mov.w	r3, #0
 8006c08:	f04f 0400 	mov.w	r4, #0
 8006c0c:	00d4      	lsls	r4, r2, #3
 8006c0e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8006c12:	00cb      	lsls	r3, r1, #3
 8006c14:	1dc3      	adds	r3, r0, #7
 8006c16:	08db      	lsrs	r3, r3, #3
 8006c18:	00db      	lsls	r3, r3, #3
 8006c1a:	ebad 0d03 	sub.w	sp, sp, r3
 8006c1e:	466b      	mov	r3, sp
 8006c20:	3300      	adds	r3, #0
 8006c22:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8006c24:	2300      	movs	r3, #0
 8006c26:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c28:	e00e      	b.n	8006c48 <ILI9341_Draw_Colour_Burst+0xb0>
	{
		burst_buffer[j] = 	chifted;
 8006c2a:	69ba      	ldr	r2, [r7, #24]
 8006c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2e:	4413      	add	r3, r2
 8006c30:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8006c34:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8006c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c38:	3301      	adds	r3, #1
 8006c3a:	88fa      	ldrh	r2, [r7, #6]
 8006c3c:	b2d1      	uxtb	r1, r2
 8006c3e:	69ba      	ldr	r2, [r7, #24]
 8006c40:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8006c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c44:	3302      	adds	r3, #2
 8006c46:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d3ec      	bcc.n	8006c2a <ILI9341_Draw_Colour_Burst+0x92>
	}

uint32_t Sending_Size = Size*2;
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	005b      	lsls	r3, r3, #1
 8006c54:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c5e:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c64:	fbb3 f2f2 	udiv	r2, r3, r2
 8006c68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c6a:	fb01 f202 	mul.w	r2, r1, r2
 8006c6e:	1a9b      	subs	r3, r3, r2
 8006c70:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d010      	beq.n	8006c9a <ILI9341_Draw_Colour_Burst+0x102>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8006c78:	2300      	movs	r3, #0
 8006c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c7c:	e009      	b.n	8006c92 <ILI9341_Draw_Colour_Burst+0xfa>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8006c7e:	69b9      	ldr	r1, [r7, #24]
 8006c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	230a      	movs	r3, #10
 8006c86:	480e      	ldr	r0, [pc, #56]	; (8006cc0 <ILI9341_Draw_Colour_Burst+0x128>)
 8006c88:	f7fe f9b4 	bl	8004ff4 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8006c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8e:	3301      	adds	r3, #1
 8006c90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d3f1      	bcc.n	8006c7e <ILI9341_Draw_Colour_Burst+0xe6>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8006c9a:	69b9      	ldr	r1, [r7, #24]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	b29a      	uxth	r2, r3
 8006ca0:	230a      	movs	r3, #10
 8006ca2:	4807      	ldr	r0, [pc, #28]	; (8006cc0 <ILI9341_Draw_Colour_Burst+0x128>)
 8006ca4:	f7fe f9a6 	bl	8004ff4 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8006ca8:	2201      	movs	r2, #1
 8006caa:	2180      	movs	r1, #128	; 0x80
 8006cac:	4803      	ldr	r0, [pc, #12]	; (8006cbc <ILI9341_Draw_Colour_Burst+0x124>)
 8006cae:	f7fd f857 	bl	8003d60 <HAL_GPIO_WritePin>
 8006cb2:	46ad      	mov	sp, r5
}
 8006cb4:	bf00      	nop
 8006cb6:	3730      	adds	r7, #48	; 0x30
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bdb0      	pop	{r4, r5, r7, pc}
 8006cbc:	48000400 	.word	0x48000400
 8006cc0:	200001e4 	.word	0x200001e4

08006cc4 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	4603      	mov	r3, r0
 8006ccc:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8006cce:	4b0e      	ldr	r3, [pc, #56]	; (8006d08 <ILI9341_Fill_Screen+0x44>)
 8006cd0:	881b      	ldrh	r3, [r3, #0]
 8006cd2:	b29a      	uxth	r2, r3
 8006cd4:	4b0d      	ldr	r3, [pc, #52]	; (8006d0c <ILI9341_Fill_Screen+0x48>)
 8006cd6:	881b      	ldrh	r3, [r3, #0]
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	2100      	movs	r1, #0
 8006cdc:	2000      	movs	r0, #0
 8006cde:	f7ff fd89 	bl	80067f4 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8006ce2:	4b09      	ldr	r3, [pc, #36]	; (8006d08 <ILI9341_Fill_Screen+0x44>)
 8006ce4:	881b      	ldrh	r3, [r3, #0]
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	461a      	mov	r2, r3
 8006cea:	4b08      	ldr	r3, [pc, #32]	; (8006d0c <ILI9341_Fill_Screen+0x48>)
 8006cec:	881b      	ldrh	r3, [r3, #0]
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	fb03 f302 	mul.w	r3, r3, r2
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	88fb      	ldrh	r3, [r7, #6]
 8006cf8:	4611      	mov	r1, r2
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7ff ff4c 	bl	8006b98 <ILI9341_Draw_Colour_Burst>
}
 8006d00:	bf00      	nop
 8006d02:	3708      	adds	r7, #8
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	20000012 	.word	0x20000012
 8006d0c:	20000010 	.word	0x20000010

08006d10 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b086      	sub	sp, #24
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	4603      	mov	r3, r0
 8006d18:	80fb      	strh	r3, [r7, #6]
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	80bb      	strh	r3, [r7, #4]
 8006d1e:	4613      	mov	r3, r2
 8006d20:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8006d22:	4b5b      	ldr	r3, [pc, #364]	; (8006e90 <ILI9341_Draw_Pixel+0x180>)
 8006d24:	881b      	ldrh	r3, [r3, #0]
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	88fa      	ldrh	r2, [r7, #6]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	f080 80ac 	bcs.w	8006e88 <ILI9341_Draw_Pixel+0x178>
 8006d30:	4b58      	ldr	r3, [pc, #352]	; (8006e94 <ILI9341_Draw_Pixel+0x184>)
 8006d32:	881b      	ldrh	r3, [r3, #0]
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	88ba      	ldrh	r2, [r7, #4]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	f080 80a5 	bcs.w	8006e88 <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8006d3e:	2200      	movs	r2, #0
 8006d40:	2140      	movs	r1, #64	; 0x40
 8006d42:	4855      	ldr	r0, [pc, #340]	; (8006e98 <ILI9341_Draw_Pixel+0x188>)
 8006d44:	f7fd f80c 	bl	8003d60 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8006d48:	2200      	movs	r2, #0
 8006d4a:	2180      	movs	r1, #128	; 0x80
 8006d4c:	4852      	ldr	r0, [pc, #328]	; (8006e98 <ILI9341_Draw_Pixel+0x188>)
 8006d4e:	f7fd f807 	bl	8003d60 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8006d52:	202a      	movs	r0, #42	; 0x2a
 8006d54:	f7ff fd00 	bl	8006758 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8006d58:	2201      	movs	r2, #1
 8006d5a:	2140      	movs	r1, #64	; 0x40
 8006d5c:	484e      	ldr	r0, [pc, #312]	; (8006e98 <ILI9341_Draw_Pixel+0x188>)
 8006d5e:	f7fc ffff 	bl	8003d60 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8006d62:	2201      	movs	r2, #1
 8006d64:	2180      	movs	r1, #128	; 0x80
 8006d66:	484c      	ldr	r0, [pc, #304]	; (8006e98 <ILI9341_Draw_Pixel+0x188>)
 8006d68:	f7fc fffa 	bl	8003d60 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	2180      	movs	r1, #128	; 0x80
 8006d70:	4849      	ldr	r0, [pc, #292]	; (8006e98 <ILI9341_Draw_Pixel+0x188>)
 8006d72:	f7fc fff5 	bl	8003d60 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8006d76:	88fb      	ldrh	r3, [r7, #6]
 8006d78:	0a1b      	lsrs	r3, r3, #8
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	753b      	strb	r3, [r7, #20]
 8006d80:	88fb      	ldrh	r3, [r7, #6]
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	757b      	strb	r3, [r7, #21]
 8006d86:	88fb      	ldrh	r3, [r7, #6]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	121b      	asrs	r3, r3, #8
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	75bb      	strb	r3, [r7, #22]
 8006d90:	88fb      	ldrh	r3, [r7, #6]
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	3301      	adds	r3, #1
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8006d9a:	f107 0114 	add.w	r1, r7, #20
 8006d9e:	2301      	movs	r3, #1
 8006da0:	2204      	movs	r2, #4
 8006da2:	483e      	ldr	r0, [pc, #248]	; (8006e9c <ILI9341_Draw_Pixel+0x18c>)
 8006da4:	f7fe f926 	bl	8004ff4 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8006da8:	2201      	movs	r2, #1
 8006daa:	2180      	movs	r1, #128	; 0x80
 8006dac:	483a      	ldr	r0, [pc, #232]	; (8006e98 <ILI9341_Draw_Pixel+0x188>)
 8006dae:	f7fc ffd7 	bl	8003d60 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8006db2:	2200      	movs	r2, #0
 8006db4:	2140      	movs	r1, #64	; 0x40
 8006db6:	4838      	ldr	r0, [pc, #224]	; (8006e98 <ILI9341_Draw_Pixel+0x188>)
 8006db8:	f7fc ffd2 	bl	8003d60 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	2180      	movs	r1, #128	; 0x80
 8006dc0:	4835      	ldr	r0, [pc, #212]	; (8006e98 <ILI9341_Draw_Pixel+0x188>)
 8006dc2:	f7fc ffcd 	bl	8003d60 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8006dc6:	202b      	movs	r0, #43	; 0x2b
 8006dc8:	f7ff fcc6 	bl	8006758 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8006dcc:	2201      	movs	r2, #1
 8006dce:	2140      	movs	r1, #64	; 0x40
 8006dd0:	4831      	ldr	r0, [pc, #196]	; (8006e98 <ILI9341_Draw_Pixel+0x188>)
 8006dd2:	f7fc ffc5 	bl	8003d60 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	2180      	movs	r1, #128	; 0x80
 8006dda:	482f      	ldr	r0, [pc, #188]	; (8006e98 <ILI9341_Draw_Pixel+0x188>)
 8006ddc:	f7fc ffc0 	bl	8003d60 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8006de0:	2200      	movs	r2, #0
 8006de2:	2180      	movs	r1, #128	; 0x80
 8006de4:	482c      	ldr	r0, [pc, #176]	; (8006e98 <ILI9341_Draw_Pixel+0x188>)
 8006de6:	f7fc ffbb 	bl	8003d60 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8006dea:	88bb      	ldrh	r3, [r7, #4]
 8006dec:	0a1b      	lsrs	r3, r3, #8
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	743b      	strb	r3, [r7, #16]
 8006df4:	88bb      	ldrh	r3, [r7, #4]
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	747b      	strb	r3, [r7, #17]
 8006dfa:	88bb      	ldrh	r3, [r7, #4]
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	121b      	asrs	r3, r3, #8
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	74bb      	strb	r3, [r7, #18]
 8006e04:	88bb      	ldrh	r3, [r7, #4]
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	3301      	adds	r3, #1
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8006e0e:	f107 0110 	add.w	r1, r7, #16
 8006e12:	2301      	movs	r3, #1
 8006e14:	2204      	movs	r2, #4
 8006e16:	4821      	ldr	r0, [pc, #132]	; (8006e9c <ILI9341_Draw_Pixel+0x18c>)
 8006e18:	f7fe f8ec 	bl	8004ff4 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	2180      	movs	r1, #128	; 0x80
 8006e20:	481d      	ldr	r0, [pc, #116]	; (8006e98 <ILI9341_Draw_Pixel+0x188>)
 8006e22:	f7fc ff9d 	bl	8003d60 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8006e26:	2200      	movs	r2, #0
 8006e28:	2140      	movs	r1, #64	; 0x40
 8006e2a:	481b      	ldr	r0, [pc, #108]	; (8006e98 <ILI9341_Draw_Pixel+0x188>)
 8006e2c:	f7fc ff98 	bl	8003d60 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8006e30:	2200      	movs	r2, #0
 8006e32:	2180      	movs	r1, #128	; 0x80
 8006e34:	4818      	ldr	r0, [pc, #96]	; (8006e98 <ILI9341_Draw_Pixel+0x188>)
 8006e36:	f7fc ff93 	bl	8003d60 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8006e3a:	202c      	movs	r0, #44	; 0x2c
 8006e3c:	f7ff fc8c 	bl	8006758 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8006e40:	2201      	movs	r2, #1
 8006e42:	2140      	movs	r1, #64	; 0x40
 8006e44:	4814      	ldr	r0, [pc, #80]	; (8006e98 <ILI9341_Draw_Pixel+0x188>)
 8006e46:	f7fc ff8b 	bl	8003d60 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	2180      	movs	r1, #128	; 0x80
 8006e4e:	4812      	ldr	r0, [pc, #72]	; (8006e98 <ILI9341_Draw_Pixel+0x188>)
 8006e50:	f7fc ff86 	bl	8003d60 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8006e54:	2200      	movs	r2, #0
 8006e56:	2180      	movs	r1, #128	; 0x80
 8006e58:	480f      	ldr	r0, [pc, #60]	; (8006e98 <ILI9341_Draw_Pixel+0x188>)
 8006e5a:	f7fc ff81 	bl	8003d60 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8006e5e:	887b      	ldrh	r3, [r7, #2]
 8006e60:	0a1b      	lsrs	r3, r3, #8
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	733b      	strb	r3, [r7, #12]
 8006e68:	887b      	ldrh	r3, [r7, #2]
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8006e6e:	f107 010c 	add.w	r1, r7, #12
 8006e72:	2301      	movs	r3, #1
 8006e74:	2202      	movs	r2, #2
 8006e76:	4809      	ldr	r0, [pc, #36]	; (8006e9c <ILI9341_Draw_Pixel+0x18c>)
 8006e78:	f7fe f8bc 	bl	8004ff4 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	2180      	movs	r1, #128	; 0x80
 8006e80:	4805      	ldr	r0, [pc, #20]	; (8006e98 <ILI9341_Draw_Pixel+0x188>)
 8006e82:	f7fc ff6d 	bl	8003d60 <HAL_GPIO_WritePin>
 8006e86:	e000      	b.n	8006e8a <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8006e88:	bf00      	nop
	
}
 8006e8a:	3718      	adds	r7, #24
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	20000012 	.word	0x20000012
 8006e94:	20000010 	.word	0x20000010
 8006e98:	48000400 	.word	0x48000400
 8006e9c:	200001e4 	.word	0x200001e4

08006ea0 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8006ea0:	b590      	push	{r4, r7, lr}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	4604      	mov	r4, r0
 8006ea8:	4608      	mov	r0, r1
 8006eaa:	4611      	mov	r1, r2
 8006eac:	461a      	mov	r2, r3
 8006eae:	4623      	mov	r3, r4
 8006eb0:	80fb      	strh	r3, [r7, #6]
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	80bb      	strh	r3, [r7, #4]
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	807b      	strh	r3, [r7, #2]
 8006eba:	4613      	mov	r3, r2
 8006ebc:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8006ebe:	4b25      	ldr	r3, [pc, #148]	; (8006f54 <ILI9341_Draw_Rectangle+0xb4>)
 8006ec0:	881b      	ldrh	r3, [r3, #0]
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	88fa      	ldrh	r2, [r7, #6]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d23f      	bcs.n	8006f4a <ILI9341_Draw_Rectangle+0xaa>
 8006eca:	4b23      	ldr	r3, [pc, #140]	; (8006f58 <ILI9341_Draw_Rectangle+0xb8>)
 8006ecc:	881b      	ldrh	r3, [r3, #0]
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	88ba      	ldrh	r2, [r7, #4]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d239      	bcs.n	8006f4a <ILI9341_Draw_Rectangle+0xaa>
if((X+Width-1)>=LCD_WIDTH)
 8006ed6:	88fa      	ldrh	r2, [r7, #6]
 8006ed8:	887b      	ldrh	r3, [r7, #2]
 8006eda:	4413      	add	r3, r2
 8006edc:	3b01      	subs	r3, #1
 8006ede:	4a1d      	ldr	r2, [pc, #116]	; (8006f54 <ILI9341_Draw_Rectangle+0xb4>)
 8006ee0:	8812      	ldrh	r2, [r2, #0]
 8006ee2:	b292      	uxth	r2, r2
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	db05      	blt.n	8006ef4 <ILI9341_Draw_Rectangle+0x54>
	{
		Width=LCD_WIDTH-X;
 8006ee8:	4b1a      	ldr	r3, [pc, #104]	; (8006f54 <ILI9341_Draw_Rectangle+0xb4>)
 8006eea:	881b      	ldrh	r3, [r3, #0]
 8006eec:	b29a      	uxth	r2, r3
 8006eee:	88fb      	ldrh	r3, [r7, #6]
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8006ef4:	88ba      	ldrh	r2, [r7, #4]
 8006ef6:	883b      	ldrh	r3, [r7, #0]
 8006ef8:	4413      	add	r3, r2
 8006efa:	3b01      	subs	r3, #1
 8006efc:	4a16      	ldr	r2, [pc, #88]	; (8006f58 <ILI9341_Draw_Rectangle+0xb8>)
 8006efe:	8812      	ldrh	r2, [r2, #0]
 8006f00:	b292      	uxth	r2, r2
 8006f02:	4293      	cmp	r3, r2
 8006f04:	db05      	blt.n	8006f12 <ILI9341_Draw_Rectangle+0x72>
	{
		Height=LCD_HEIGHT-Y;
 8006f06:	4b14      	ldr	r3, [pc, #80]	; (8006f58 <ILI9341_Draw_Rectangle+0xb8>)
 8006f08:	881b      	ldrh	r3, [r3, #0]
 8006f0a:	b29a      	uxth	r2, r3
 8006f0c:	88bb      	ldrh	r3, [r7, #4]
 8006f0e:	1ad3      	subs	r3, r2, r3
 8006f10:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8006f12:	88fa      	ldrh	r2, [r7, #6]
 8006f14:	887b      	ldrh	r3, [r7, #2]
 8006f16:	4413      	add	r3, r2
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	b29c      	uxth	r4, r3
 8006f1e:	88ba      	ldrh	r2, [r7, #4]
 8006f20:	883b      	ldrh	r3, [r7, #0]
 8006f22:	4413      	add	r3, r2
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	3b01      	subs	r3, #1
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	88b9      	ldrh	r1, [r7, #4]
 8006f2c:	88f8      	ldrh	r0, [r7, #6]
 8006f2e:	4622      	mov	r2, r4
 8006f30:	f7ff fc60 	bl	80067f4 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8006f34:	883b      	ldrh	r3, [r7, #0]
 8006f36:	887a      	ldrh	r2, [r7, #2]
 8006f38:	fb02 f303 	mul.w	r3, r2, r3
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	8b3b      	ldrh	r3, [r7, #24]
 8006f40:	4611      	mov	r1, r2
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7ff fe28 	bl	8006b98 <ILI9341_Draw_Colour_Burst>
 8006f48:	e000      	b.n	8006f4c <ILI9341_Draw_Rectangle+0xac>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8006f4a:	bf00      	nop
}
 8006f4c:	370c      	adds	r7, #12
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd90      	pop	{r4, r7, pc}
 8006f52:	bf00      	nop
 8006f54:	20000012 	.word	0x20000012
 8006f58:	20000010 	.word	0x20000010

08006f5c <__errno>:
 8006f5c:	4b01      	ldr	r3, [pc, #4]	; (8006f64 <__errno+0x8>)
 8006f5e:	6818      	ldr	r0, [r3, #0]
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	20000014 	.word	0x20000014

08006f68 <__libc_init_array>:
 8006f68:	b570      	push	{r4, r5, r6, lr}
 8006f6a:	4e0d      	ldr	r6, [pc, #52]	; (8006fa0 <__libc_init_array+0x38>)
 8006f6c:	4c0d      	ldr	r4, [pc, #52]	; (8006fa4 <__libc_init_array+0x3c>)
 8006f6e:	1ba4      	subs	r4, r4, r6
 8006f70:	10a4      	asrs	r4, r4, #2
 8006f72:	2500      	movs	r5, #0
 8006f74:	42a5      	cmp	r5, r4
 8006f76:	d109      	bne.n	8006f8c <__libc_init_array+0x24>
 8006f78:	4e0b      	ldr	r6, [pc, #44]	; (8006fa8 <__libc_init_array+0x40>)
 8006f7a:	4c0c      	ldr	r4, [pc, #48]	; (8006fac <__libc_init_array+0x44>)
 8006f7c:	f001 f940 	bl	8008200 <_init>
 8006f80:	1ba4      	subs	r4, r4, r6
 8006f82:	10a4      	asrs	r4, r4, #2
 8006f84:	2500      	movs	r5, #0
 8006f86:	42a5      	cmp	r5, r4
 8006f88:	d105      	bne.n	8006f96 <__libc_init_array+0x2e>
 8006f8a:	bd70      	pop	{r4, r5, r6, pc}
 8006f8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f90:	4798      	blx	r3
 8006f92:	3501      	adds	r5, #1
 8006f94:	e7ee      	b.n	8006f74 <__libc_init_array+0xc>
 8006f96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f9a:	4798      	blx	r3
 8006f9c:	3501      	adds	r5, #1
 8006f9e:	e7f2      	b.n	8006f86 <__libc_init_array+0x1e>
 8006fa0:	080085b4 	.word	0x080085b4
 8006fa4:	080085b4 	.word	0x080085b4
 8006fa8:	080085b4 	.word	0x080085b4
 8006fac:	080085b8 	.word	0x080085b8

08006fb0 <memset>:
 8006fb0:	4402      	add	r2, r0
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d100      	bne.n	8006fba <memset+0xa>
 8006fb8:	4770      	bx	lr
 8006fba:	f803 1b01 	strb.w	r1, [r3], #1
 8006fbe:	e7f9      	b.n	8006fb4 <memset+0x4>

08006fc0 <iprintf>:
 8006fc0:	b40f      	push	{r0, r1, r2, r3}
 8006fc2:	4b0a      	ldr	r3, [pc, #40]	; (8006fec <iprintf+0x2c>)
 8006fc4:	b513      	push	{r0, r1, r4, lr}
 8006fc6:	681c      	ldr	r4, [r3, #0]
 8006fc8:	b124      	cbz	r4, 8006fd4 <iprintf+0x14>
 8006fca:	69a3      	ldr	r3, [r4, #24]
 8006fcc:	b913      	cbnz	r3, 8006fd4 <iprintf+0x14>
 8006fce:	4620      	mov	r0, r4
 8006fd0:	f000 fa56 	bl	8007480 <__sinit>
 8006fd4:	ab05      	add	r3, sp, #20
 8006fd6:	9a04      	ldr	r2, [sp, #16]
 8006fd8:	68a1      	ldr	r1, [r4, #8]
 8006fda:	9301      	str	r3, [sp, #4]
 8006fdc:	4620      	mov	r0, r4
 8006fde:	f000 fd61 	bl	8007aa4 <_vfiprintf_r>
 8006fe2:	b002      	add	sp, #8
 8006fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fe8:	b004      	add	sp, #16
 8006fea:	4770      	bx	lr
 8006fec:	20000014 	.word	0x20000014

08006ff0 <_puts_r>:
 8006ff0:	b570      	push	{r4, r5, r6, lr}
 8006ff2:	460e      	mov	r6, r1
 8006ff4:	4605      	mov	r5, r0
 8006ff6:	b118      	cbz	r0, 8007000 <_puts_r+0x10>
 8006ff8:	6983      	ldr	r3, [r0, #24]
 8006ffa:	b90b      	cbnz	r3, 8007000 <_puts_r+0x10>
 8006ffc:	f000 fa40 	bl	8007480 <__sinit>
 8007000:	69ab      	ldr	r3, [r5, #24]
 8007002:	68ac      	ldr	r4, [r5, #8]
 8007004:	b913      	cbnz	r3, 800700c <_puts_r+0x1c>
 8007006:	4628      	mov	r0, r5
 8007008:	f000 fa3a 	bl	8007480 <__sinit>
 800700c:	4b23      	ldr	r3, [pc, #140]	; (800709c <_puts_r+0xac>)
 800700e:	429c      	cmp	r4, r3
 8007010:	d117      	bne.n	8007042 <_puts_r+0x52>
 8007012:	686c      	ldr	r4, [r5, #4]
 8007014:	89a3      	ldrh	r3, [r4, #12]
 8007016:	071b      	lsls	r3, r3, #28
 8007018:	d51d      	bpl.n	8007056 <_puts_r+0x66>
 800701a:	6923      	ldr	r3, [r4, #16]
 800701c:	b1db      	cbz	r3, 8007056 <_puts_r+0x66>
 800701e:	3e01      	subs	r6, #1
 8007020:	68a3      	ldr	r3, [r4, #8]
 8007022:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007026:	3b01      	subs	r3, #1
 8007028:	60a3      	str	r3, [r4, #8]
 800702a:	b9e9      	cbnz	r1, 8007068 <_puts_r+0x78>
 800702c:	2b00      	cmp	r3, #0
 800702e:	da2e      	bge.n	800708e <_puts_r+0x9e>
 8007030:	4622      	mov	r2, r4
 8007032:	210a      	movs	r1, #10
 8007034:	4628      	mov	r0, r5
 8007036:	f000 f873 	bl	8007120 <__swbuf_r>
 800703a:	3001      	adds	r0, #1
 800703c:	d011      	beq.n	8007062 <_puts_r+0x72>
 800703e:	200a      	movs	r0, #10
 8007040:	e011      	b.n	8007066 <_puts_r+0x76>
 8007042:	4b17      	ldr	r3, [pc, #92]	; (80070a0 <_puts_r+0xb0>)
 8007044:	429c      	cmp	r4, r3
 8007046:	d101      	bne.n	800704c <_puts_r+0x5c>
 8007048:	68ac      	ldr	r4, [r5, #8]
 800704a:	e7e3      	b.n	8007014 <_puts_r+0x24>
 800704c:	4b15      	ldr	r3, [pc, #84]	; (80070a4 <_puts_r+0xb4>)
 800704e:	429c      	cmp	r4, r3
 8007050:	bf08      	it	eq
 8007052:	68ec      	ldreq	r4, [r5, #12]
 8007054:	e7de      	b.n	8007014 <_puts_r+0x24>
 8007056:	4621      	mov	r1, r4
 8007058:	4628      	mov	r0, r5
 800705a:	f000 f8b3 	bl	80071c4 <__swsetup_r>
 800705e:	2800      	cmp	r0, #0
 8007060:	d0dd      	beq.n	800701e <_puts_r+0x2e>
 8007062:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007066:	bd70      	pop	{r4, r5, r6, pc}
 8007068:	2b00      	cmp	r3, #0
 800706a:	da04      	bge.n	8007076 <_puts_r+0x86>
 800706c:	69a2      	ldr	r2, [r4, #24]
 800706e:	429a      	cmp	r2, r3
 8007070:	dc06      	bgt.n	8007080 <_puts_r+0x90>
 8007072:	290a      	cmp	r1, #10
 8007074:	d004      	beq.n	8007080 <_puts_r+0x90>
 8007076:	6823      	ldr	r3, [r4, #0]
 8007078:	1c5a      	adds	r2, r3, #1
 800707a:	6022      	str	r2, [r4, #0]
 800707c:	7019      	strb	r1, [r3, #0]
 800707e:	e7cf      	b.n	8007020 <_puts_r+0x30>
 8007080:	4622      	mov	r2, r4
 8007082:	4628      	mov	r0, r5
 8007084:	f000 f84c 	bl	8007120 <__swbuf_r>
 8007088:	3001      	adds	r0, #1
 800708a:	d1c9      	bne.n	8007020 <_puts_r+0x30>
 800708c:	e7e9      	b.n	8007062 <_puts_r+0x72>
 800708e:	6823      	ldr	r3, [r4, #0]
 8007090:	200a      	movs	r0, #10
 8007092:	1c5a      	adds	r2, r3, #1
 8007094:	6022      	str	r2, [r4, #0]
 8007096:	7018      	strb	r0, [r3, #0]
 8007098:	e7e5      	b.n	8007066 <_puts_r+0x76>
 800709a:	bf00      	nop
 800709c:	08008540 	.word	0x08008540
 80070a0:	08008560 	.word	0x08008560
 80070a4:	08008520 	.word	0x08008520

080070a8 <puts>:
 80070a8:	4b02      	ldr	r3, [pc, #8]	; (80070b4 <puts+0xc>)
 80070aa:	4601      	mov	r1, r0
 80070ac:	6818      	ldr	r0, [r3, #0]
 80070ae:	f7ff bf9f 	b.w	8006ff0 <_puts_r>
 80070b2:	bf00      	nop
 80070b4:	20000014 	.word	0x20000014

080070b8 <sniprintf>:
 80070b8:	b40c      	push	{r2, r3}
 80070ba:	b530      	push	{r4, r5, lr}
 80070bc:	4b17      	ldr	r3, [pc, #92]	; (800711c <sniprintf+0x64>)
 80070be:	1e0c      	subs	r4, r1, #0
 80070c0:	b09d      	sub	sp, #116	; 0x74
 80070c2:	681d      	ldr	r5, [r3, #0]
 80070c4:	da08      	bge.n	80070d8 <sniprintf+0x20>
 80070c6:	238b      	movs	r3, #139	; 0x8b
 80070c8:	602b      	str	r3, [r5, #0]
 80070ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070ce:	b01d      	add	sp, #116	; 0x74
 80070d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80070d4:	b002      	add	sp, #8
 80070d6:	4770      	bx	lr
 80070d8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80070dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80070e0:	bf14      	ite	ne
 80070e2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80070e6:	4623      	moveq	r3, r4
 80070e8:	9304      	str	r3, [sp, #16]
 80070ea:	9307      	str	r3, [sp, #28]
 80070ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80070f0:	9002      	str	r0, [sp, #8]
 80070f2:	9006      	str	r0, [sp, #24]
 80070f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80070f8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80070fa:	ab21      	add	r3, sp, #132	; 0x84
 80070fc:	a902      	add	r1, sp, #8
 80070fe:	4628      	mov	r0, r5
 8007100:	9301      	str	r3, [sp, #4]
 8007102:	f000 fbad 	bl	8007860 <_svfiprintf_r>
 8007106:	1c43      	adds	r3, r0, #1
 8007108:	bfbc      	itt	lt
 800710a:	238b      	movlt	r3, #139	; 0x8b
 800710c:	602b      	strlt	r3, [r5, #0]
 800710e:	2c00      	cmp	r4, #0
 8007110:	d0dd      	beq.n	80070ce <sniprintf+0x16>
 8007112:	9b02      	ldr	r3, [sp, #8]
 8007114:	2200      	movs	r2, #0
 8007116:	701a      	strb	r2, [r3, #0]
 8007118:	e7d9      	b.n	80070ce <sniprintf+0x16>
 800711a:	bf00      	nop
 800711c:	20000014 	.word	0x20000014

08007120 <__swbuf_r>:
 8007120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007122:	460e      	mov	r6, r1
 8007124:	4614      	mov	r4, r2
 8007126:	4605      	mov	r5, r0
 8007128:	b118      	cbz	r0, 8007132 <__swbuf_r+0x12>
 800712a:	6983      	ldr	r3, [r0, #24]
 800712c:	b90b      	cbnz	r3, 8007132 <__swbuf_r+0x12>
 800712e:	f000 f9a7 	bl	8007480 <__sinit>
 8007132:	4b21      	ldr	r3, [pc, #132]	; (80071b8 <__swbuf_r+0x98>)
 8007134:	429c      	cmp	r4, r3
 8007136:	d12a      	bne.n	800718e <__swbuf_r+0x6e>
 8007138:	686c      	ldr	r4, [r5, #4]
 800713a:	69a3      	ldr	r3, [r4, #24]
 800713c:	60a3      	str	r3, [r4, #8]
 800713e:	89a3      	ldrh	r3, [r4, #12]
 8007140:	071a      	lsls	r2, r3, #28
 8007142:	d52e      	bpl.n	80071a2 <__swbuf_r+0x82>
 8007144:	6923      	ldr	r3, [r4, #16]
 8007146:	b363      	cbz	r3, 80071a2 <__swbuf_r+0x82>
 8007148:	6923      	ldr	r3, [r4, #16]
 800714a:	6820      	ldr	r0, [r4, #0]
 800714c:	1ac0      	subs	r0, r0, r3
 800714e:	6963      	ldr	r3, [r4, #20]
 8007150:	b2f6      	uxtb	r6, r6
 8007152:	4283      	cmp	r3, r0
 8007154:	4637      	mov	r7, r6
 8007156:	dc04      	bgt.n	8007162 <__swbuf_r+0x42>
 8007158:	4621      	mov	r1, r4
 800715a:	4628      	mov	r0, r5
 800715c:	f000 f926 	bl	80073ac <_fflush_r>
 8007160:	bb28      	cbnz	r0, 80071ae <__swbuf_r+0x8e>
 8007162:	68a3      	ldr	r3, [r4, #8]
 8007164:	3b01      	subs	r3, #1
 8007166:	60a3      	str	r3, [r4, #8]
 8007168:	6823      	ldr	r3, [r4, #0]
 800716a:	1c5a      	adds	r2, r3, #1
 800716c:	6022      	str	r2, [r4, #0]
 800716e:	701e      	strb	r6, [r3, #0]
 8007170:	6963      	ldr	r3, [r4, #20]
 8007172:	3001      	adds	r0, #1
 8007174:	4283      	cmp	r3, r0
 8007176:	d004      	beq.n	8007182 <__swbuf_r+0x62>
 8007178:	89a3      	ldrh	r3, [r4, #12]
 800717a:	07db      	lsls	r3, r3, #31
 800717c:	d519      	bpl.n	80071b2 <__swbuf_r+0x92>
 800717e:	2e0a      	cmp	r6, #10
 8007180:	d117      	bne.n	80071b2 <__swbuf_r+0x92>
 8007182:	4621      	mov	r1, r4
 8007184:	4628      	mov	r0, r5
 8007186:	f000 f911 	bl	80073ac <_fflush_r>
 800718a:	b190      	cbz	r0, 80071b2 <__swbuf_r+0x92>
 800718c:	e00f      	b.n	80071ae <__swbuf_r+0x8e>
 800718e:	4b0b      	ldr	r3, [pc, #44]	; (80071bc <__swbuf_r+0x9c>)
 8007190:	429c      	cmp	r4, r3
 8007192:	d101      	bne.n	8007198 <__swbuf_r+0x78>
 8007194:	68ac      	ldr	r4, [r5, #8]
 8007196:	e7d0      	b.n	800713a <__swbuf_r+0x1a>
 8007198:	4b09      	ldr	r3, [pc, #36]	; (80071c0 <__swbuf_r+0xa0>)
 800719a:	429c      	cmp	r4, r3
 800719c:	bf08      	it	eq
 800719e:	68ec      	ldreq	r4, [r5, #12]
 80071a0:	e7cb      	b.n	800713a <__swbuf_r+0x1a>
 80071a2:	4621      	mov	r1, r4
 80071a4:	4628      	mov	r0, r5
 80071a6:	f000 f80d 	bl	80071c4 <__swsetup_r>
 80071aa:	2800      	cmp	r0, #0
 80071ac:	d0cc      	beq.n	8007148 <__swbuf_r+0x28>
 80071ae:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80071b2:	4638      	mov	r0, r7
 80071b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071b6:	bf00      	nop
 80071b8:	08008540 	.word	0x08008540
 80071bc:	08008560 	.word	0x08008560
 80071c0:	08008520 	.word	0x08008520

080071c4 <__swsetup_r>:
 80071c4:	4b32      	ldr	r3, [pc, #200]	; (8007290 <__swsetup_r+0xcc>)
 80071c6:	b570      	push	{r4, r5, r6, lr}
 80071c8:	681d      	ldr	r5, [r3, #0]
 80071ca:	4606      	mov	r6, r0
 80071cc:	460c      	mov	r4, r1
 80071ce:	b125      	cbz	r5, 80071da <__swsetup_r+0x16>
 80071d0:	69ab      	ldr	r3, [r5, #24]
 80071d2:	b913      	cbnz	r3, 80071da <__swsetup_r+0x16>
 80071d4:	4628      	mov	r0, r5
 80071d6:	f000 f953 	bl	8007480 <__sinit>
 80071da:	4b2e      	ldr	r3, [pc, #184]	; (8007294 <__swsetup_r+0xd0>)
 80071dc:	429c      	cmp	r4, r3
 80071de:	d10f      	bne.n	8007200 <__swsetup_r+0x3c>
 80071e0:	686c      	ldr	r4, [r5, #4]
 80071e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	0715      	lsls	r5, r2, #28
 80071ea:	d42c      	bmi.n	8007246 <__swsetup_r+0x82>
 80071ec:	06d0      	lsls	r0, r2, #27
 80071ee:	d411      	bmi.n	8007214 <__swsetup_r+0x50>
 80071f0:	2209      	movs	r2, #9
 80071f2:	6032      	str	r2, [r6, #0]
 80071f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071f8:	81a3      	strh	r3, [r4, #12]
 80071fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071fe:	e03e      	b.n	800727e <__swsetup_r+0xba>
 8007200:	4b25      	ldr	r3, [pc, #148]	; (8007298 <__swsetup_r+0xd4>)
 8007202:	429c      	cmp	r4, r3
 8007204:	d101      	bne.n	800720a <__swsetup_r+0x46>
 8007206:	68ac      	ldr	r4, [r5, #8]
 8007208:	e7eb      	b.n	80071e2 <__swsetup_r+0x1e>
 800720a:	4b24      	ldr	r3, [pc, #144]	; (800729c <__swsetup_r+0xd8>)
 800720c:	429c      	cmp	r4, r3
 800720e:	bf08      	it	eq
 8007210:	68ec      	ldreq	r4, [r5, #12]
 8007212:	e7e6      	b.n	80071e2 <__swsetup_r+0x1e>
 8007214:	0751      	lsls	r1, r2, #29
 8007216:	d512      	bpl.n	800723e <__swsetup_r+0x7a>
 8007218:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800721a:	b141      	cbz	r1, 800722e <__swsetup_r+0x6a>
 800721c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007220:	4299      	cmp	r1, r3
 8007222:	d002      	beq.n	800722a <__swsetup_r+0x66>
 8007224:	4630      	mov	r0, r6
 8007226:	f000 fa19 	bl	800765c <_free_r>
 800722a:	2300      	movs	r3, #0
 800722c:	6363      	str	r3, [r4, #52]	; 0x34
 800722e:	89a3      	ldrh	r3, [r4, #12]
 8007230:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007234:	81a3      	strh	r3, [r4, #12]
 8007236:	2300      	movs	r3, #0
 8007238:	6063      	str	r3, [r4, #4]
 800723a:	6923      	ldr	r3, [r4, #16]
 800723c:	6023      	str	r3, [r4, #0]
 800723e:	89a3      	ldrh	r3, [r4, #12]
 8007240:	f043 0308 	orr.w	r3, r3, #8
 8007244:	81a3      	strh	r3, [r4, #12]
 8007246:	6923      	ldr	r3, [r4, #16]
 8007248:	b94b      	cbnz	r3, 800725e <__swsetup_r+0x9a>
 800724a:	89a3      	ldrh	r3, [r4, #12]
 800724c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007254:	d003      	beq.n	800725e <__swsetup_r+0x9a>
 8007256:	4621      	mov	r1, r4
 8007258:	4630      	mov	r0, r6
 800725a:	f000 f9bf 	bl	80075dc <__smakebuf_r>
 800725e:	89a2      	ldrh	r2, [r4, #12]
 8007260:	f012 0301 	ands.w	r3, r2, #1
 8007264:	d00c      	beq.n	8007280 <__swsetup_r+0xbc>
 8007266:	2300      	movs	r3, #0
 8007268:	60a3      	str	r3, [r4, #8]
 800726a:	6963      	ldr	r3, [r4, #20]
 800726c:	425b      	negs	r3, r3
 800726e:	61a3      	str	r3, [r4, #24]
 8007270:	6923      	ldr	r3, [r4, #16]
 8007272:	b953      	cbnz	r3, 800728a <__swsetup_r+0xc6>
 8007274:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007278:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800727c:	d1ba      	bne.n	80071f4 <__swsetup_r+0x30>
 800727e:	bd70      	pop	{r4, r5, r6, pc}
 8007280:	0792      	lsls	r2, r2, #30
 8007282:	bf58      	it	pl
 8007284:	6963      	ldrpl	r3, [r4, #20]
 8007286:	60a3      	str	r3, [r4, #8]
 8007288:	e7f2      	b.n	8007270 <__swsetup_r+0xac>
 800728a:	2000      	movs	r0, #0
 800728c:	e7f7      	b.n	800727e <__swsetup_r+0xba>
 800728e:	bf00      	nop
 8007290:	20000014 	.word	0x20000014
 8007294:	08008540 	.word	0x08008540
 8007298:	08008560 	.word	0x08008560
 800729c:	08008520 	.word	0x08008520

080072a0 <__sflush_r>:
 80072a0:	898a      	ldrh	r2, [r1, #12]
 80072a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072a6:	4605      	mov	r5, r0
 80072a8:	0710      	lsls	r0, r2, #28
 80072aa:	460c      	mov	r4, r1
 80072ac:	d458      	bmi.n	8007360 <__sflush_r+0xc0>
 80072ae:	684b      	ldr	r3, [r1, #4]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	dc05      	bgt.n	80072c0 <__sflush_r+0x20>
 80072b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	dc02      	bgt.n	80072c0 <__sflush_r+0x20>
 80072ba:	2000      	movs	r0, #0
 80072bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072c2:	2e00      	cmp	r6, #0
 80072c4:	d0f9      	beq.n	80072ba <__sflush_r+0x1a>
 80072c6:	2300      	movs	r3, #0
 80072c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80072cc:	682f      	ldr	r7, [r5, #0]
 80072ce:	6a21      	ldr	r1, [r4, #32]
 80072d0:	602b      	str	r3, [r5, #0]
 80072d2:	d032      	beq.n	800733a <__sflush_r+0x9a>
 80072d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80072d6:	89a3      	ldrh	r3, [r4, #12]
 80072d8:	075a      	lsls	r2, r3, #29
 80072da:	d505      	bpl.n	80072e8 <__sflush_r+0x48>
 80072dc:	6863      	ldr	r3, [r4, #4]
 80072de:	1ac0      	subs	r0, r0, r3
 80072e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80072e2:	b10b      	cbz	r3, 80072e8 <__sflush_r+0x48>
 80072e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80072e6:	1ac0      	subs	r0, r0, r3
 80072e8:	2300      	movs	r3, #0
 80072ea:	4602      	mov	r2, r0
 80072ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072ee:	6a21      	ldr	r1, [r4, #32]
 80072f0:	4628      	mov	r0, r5
 80072f2:	47b0      	blx	r6
 80072f4:	1c43      	adds	r3, r0, #1
 80072f6:	89a3      	ldrh	r3, [r4, #12]
 80072f8:	d106      	bne.n	8007308 <__sflush_r+0x68>
 80072fa:	6829      	ldr	r1, [r5, #0]
 80072fc:	291d      	cmp	r1, #29
 80072fe:	d848      	bhi.n	8007392 <__sflush_r+0xf2>
 8007300:	4a29      	ldr	r2, [pc, #164]	; (80073a8 <__sflush_r+0x108>)
 8007302:	40ca      	lsrs	r2, r1
 8007304:	07d6      	lsls	r6, r2, #31
 8007306:	d544      	bpl.n	8007392 <__sflush_r+0xf2>
 8007308:	2200      	movs	r2, #0
 800730a:	6062      	str	r2, [r4, #4]
 800730c:	04d9      	lsls	r1, r3, #19
 800730e:	6922      	ldr	r2, [r4, #16]
 8007310:	6022      	str	r2, [r4, #0]
 8007312:	d504      	bpl.n	800731e <__sflush_r+0x7e>
 8007314:	1c42      	adds	r2, r0, #1
 8007316:	d101      	bne.n	800731c <__sflush_r+0x7c>
 8007318:	682b      	ldr	r3, [r5, #0]
 800731a:	b903      	cbnz	r3, 800731e <__sflush_r+0x7e>
 800731c:	6560      	str	r0, [r4, #84]	; 0x54
 800731e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007320:	602f      	str	r7, [r5, #0]
 8007322:	2900      	cmp	r1, #0
 8007324:	d0c9      	beq.n	80072ba <__sflush_r+0x1a>
 8007326:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800732a:	4299      	cmp	r1, r3
 800732c:	d002      	beq.n	8007334 <__sflush_r+0x94>
 800732e:	4628      	mov	r0, r5
 8007330:	f000 f994 	bl	800765c <_free_r>
 8007334:	2000      	movs	r0, #0
 8007336:	6360      	str	r0, [r4, #52]	; 0x34
 8007338:	e7c0      	b.n	80072bc <__sflush_r+0x1c>
 800733a:	2301      	movs	r3, #1
 800733c:	4628      	mov	r0, r5
 800733e:	47b0      	blx	r6
 8007340:	1c41      	adds	r1, r0, #1
 8007342:	d1c8      	bne.n	80072d6 <__sflush_r+0x36>
 8007344:	682b      	ldr	r3, [r5, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d0c5      	beq.n	80072d6 <__sflush_r+0x36>
 800734a:	2b1d      	cmp	r3, #29
 800734c:	d001      	beq.n	8007352 <__sflush_r+0xb2>
 800734e:	2b16      	cmp	r3, #22
 8007350:	d101      	bne.n	8007356 <__sflush_r+0xb6>
 8007352:	602f      	str	r7, [r5, #0]
 8007354:	e7b1      	b.n	80072ba <__sflush_r+0x1a>
 8007356:	89a3      	ldrh	r3, [r4, #12]
 8007358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800735c:	81a3      	strh	r3, [r4, #12]
 800735e:	e7ad      	b.n	80072bc <__sflush_r+0x1c>
 8007360:	690f      	ldr	r7, [r1, #16]
 8007362:	2f00      	cmp	r7, #0
 8007364:	d0a9      	beq.n	80072ba <__sflush_r+0x1a>
 8007366:	0793      	lsls	r3, r2, #30
 8007368:	680e      	ldr	r6, [r1, #0]
 800736a:	bf08      	it	eq
 800736c:	694b      	ldreq	r3, [r1, #20]
 800736e:	600f      	str	r7, [r1, #0]
 8007370:	bf18      	it	ne
 8007372:	2300      	movne	r3, #0
 8007374:	eba6 0807 	sub.w	r8, r6, r7
 8007378:	608b      	str	r3, [r1, #8]
 800737a:	f1b8 0f00 	cmp.w	r8, #0
 800737e:	dd9c      	ble.n	80072ba <__sflush_r+0x1a>
 8007380:	4643      	mov	r3, r8
 8007382:	463a      	mov	r2, r7
 8007384:	6a21      	ldr	r1, [r4, #32]
 8007386:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007388:	4628      	mov	r0, r5
 800738a:	47b0      	blx	r6
 800738c:	2800      	cmp	r0, #0
 800738e:	dc06      	bgt.n	800739e <__sflush_r+0xfe>
 8007390:	89a3      	ldrh	r3, [r4, #12]
 8007392:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007396:	81a3      	strh	r3, [r4, #12]
 8007398:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800739c:	e78e      	b.n	80072bc <__sflush_r+0x1c>
 800739e:	4407      	add	r7, r0
 80073a0:	eba8 0800 	sub.w	r8, r8, r0
 80073a4:	e7e9      	b.n	800737a <__sflush_r+0xda>
 80073a6:	bf00      	nop
 80073a8:	20400001 	.word	0x20400001

080073ac <_fflush_r>:
 80073ac:	b538      	push	{r3, r4, r5, lr}
 80073ae:	690b      	ldr	r3, [r1, #16]
 80073b0:	4605      	mov	r5, r0
 80073b2:	460c      	mov	r4, r1
 80073b4:	b1db      	cbz	r3, 80073ee <_fflush_r+0x42>
 80073b6:	b118      	cbz	r0, 80073c0 <_fflush_r+0x14>
 80073b8:	6983      	ldr	r3, [r0, #24]
 80073ba:	b90b      	cbnz	r3, 80073c0 <_fflush_r+0x14>
 80073bc:	f000 f860 	bl	8007480 <__sinit>
 80073c0:	4b0c      	ldr	r3, [pc, #48]	; (80073f4 <_fflush_r+0x48>)
 80073c2:	429c      	cmp	r4, r3
 80073c4:	d109      	bne.n	80073da <_fflush_r+0x2e>
 80073c6:	686c      	ldr	r4, [r5, #4]
 80073c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073cc:	b17b      	cbz	r3, 80073ee <_fflush_r+0x42>
 80073ce:	4621      	mov	r1, r4
 80073d0:	4628      	mov	r0, r5
 80073d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073d6:	f7ff bf63 	b.w	80072a0 <__sflush_r>
 80073da:	4b07      	ldr	r3, [pc, #28]	; (80073f8 <_fflush_r+0x4c>)
 80073dc:	429c      	cmp	r4, r3
 80073de:	d101      	bne.n	80073e4 <_fflush_r+0x38>
 80073e0:	68ac      	ldr	r4, [r5, #8]
 80073e2:	e7f1      	b.n	80073c8 <_fflush_r+0x1c>
 80073e4:	4b05      	ldr	r3, [pc, #20]	; (80073fc <_fflush_r+0x50>)
 80073e6:	429c      	cmp	r4, r3
 80073e8:	bf08      	it	eq
 80073ea:	68ec      	ldreq	r4, [r5, #12]
 80073ec:	e7ec      	b.n	80073c8 <_fflush_r+0x1c>
 80073ee:	2000      	movs	r0, #0
 80073f0:	bd38      	pop	{r3, r4, r5, pc}
 80073f2:	bf00      	nop
 80073f4:	08008540 	.word	0x08008540
 80073f8:	08008560 	.word	0x08008560
 80073fc:	08008520 	.word	0x08008520

08007400 <std>:
 8007400:	2300      	movs	r3, #0
 8007402:	b510      	push	{r4, lr}
 8007404:	4604      	mov	r4, r0
 8007406:	e9c0 3300 	strd	r3, r3, [r0]
 800740a:	6083      	str	r3, [r0, #8]
 800740c:	8181      	strh	r1, [r0, #12]
 800740e:	6643      	str	r3, [r0, #100]	; 0x64
 8007410:	81c2      	strh	r2, [r0, #14]
 8007412:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007416:	6183      	str	r3, [r0, #24]
 8007418:	4619      	mov	r1, r3
 800741a:	2208      	movs	r2, #8
 800741c:	305c      	adds	r0, #92	; 0x5c
 800741e:	f7ff fdc7 	bl	8006fb0 <memset>
 8007422:	4b05      	ldr	r3, [pc, #20]	; (8007438 <std+0x38>)
 8007424:	6263      	str	r3, [r4, #36]	; 0x24
 8007426:	4b05      	ldr	r3, [pc, #20]	; (800743c <std+0x3c>)
 8007428:	62a3      	str	r3, [r4, #40]	; 0x28
 800742a:	4b05      	ldr	r3, [pc, #20]	; (8007440 <std+0x40>)
 800742c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800742e:	4b05      	ldr	r3, [pc, #20]	; (8007444 <std+0x44>)
 8007430:	6224      	str	r4, [r4, #32]
 8007432:	6323      	str	r3, [r4, #48]	; 0x30
 8007434:	bd10      	pop	{r4, pc}
 8007436:	bf00      	nop
 8007438:	08008001 	.word	0x08008001
 800743c:	08008023 	.word	0x08008023
 8007440:	0800805b 	.word	0x0800805b
 8007444:	0800807f 	.word	0x0800807f

08007448 <_cleanup_r>:
 8007448:	4901      	ldr	r1, [pc, #4]	; (8007450 <_cleanup_r+0x8>)
 800744a:	f000 b885 	b.w	8007558 <_fwalk_reent>
 800744e:	bf00      	nop
 8007450:	080073ad 	.word	0x080073ad

08007454 <__sfmoreglue>:
 8007454:	b570      	push	{r4, r5, r6, lr}
 8007456:	1e4a      	subs	r2, r1, #1
 8007458:	2568      	movs	r5, #104	; 0x68
 800745a:	4355      	muls	r5, r2
 800745c:	460e      	mov	r6, r1
 800745e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007462:	f000 f949 	bl	80076f8 <_malloc_r>
 8007466:	4604      	mov	r4, r0
 8007468:	b140      	cbz	r0, 800747c <__sfmoreglue+0x28>
 800746a:	2100      	movs	r1, #0
 800746c:	e9c0 1600 	strd	r1, r6, [r0]
 8007470:	300c      	adds	r0, #12
 8007472:	60a0      	str	r0, [r4, #8]
 8007474:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007478:	f7ff fd9a 	bl	8006fb0 <memset>
 800747c:	4620      	mov	r0, r4
 800747e:	bd70      	pop	{r4, r5, r6, pc}

08007480 <__sinit>:
 8007480:	6983      	ldr	r3, [r0, #24]
 8007482:	b510      	push	{r4, lr}
 8007484:	4604      	mov	r4, r0
 8007486:	bb33      	cbnz	r3, 80074d6 <__sinit+0x56>
 8007488:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800748c:	6503      	str	r3, [r0, #80]	; 0x50
 800748e:	4b12      	ldr	r3, [pc, #72]	; (80074d8 <__sinit+0x58>)
 8007490:	4a12      	ldr	r2, [pc, #72]	; (80074dc <__sinit+0x5c>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	6282      	str	r2, [r0, #40]	; 0x28
 8007496:	4298      	cmp	r0, r3
 8007498:	bf04      	itt	eq
 800749a:	2301      	moveq	r3, #1
 800749c:	6183      	streq	r3, [r0, #24]
 800749e:	f000 f81f 	bl	80074e0 <__sfp>
 80074a2:	6060      	str	r0, [r4, #4]
 80074a4:	4620      	mov	r0, r4
 80074a6:	f000 f81b 	bl	80074e0 <__sfp>
 80074aa:	60a0      	str	r0, [r4, #8]
 80074ac:	4620      	mov	r0, r4
 80074ae:	f000 f817 	bl	80074e0 <__sfp>
 80074b2:	2200      	movs	r2, #0
 80074b4:	60e0      	str	r0, [r4, #12]
 80074b6:	2104      	movs	r1, #4
 80074b8:	6860      	ldr	r0, [r4, #4]
 80074ba:	f7ff ffa1 	bl	8007400 <std>
 80074be:	2201      	movs	r2, #1
 80074c0:	2109      	movs	r1, #9
 80074c2:	68a0      	ldr	r0, [r4, #8]
 80074c4:	f7ff ff9c 	bl	8007400 <std>
 80074c8:	2202      	movs	r2, #2
 80074ca:	2112      	movs	r1, #18
 80074cc:	68e0      	ldr	r0, [r4, #12]
 80074ce:	f7ff ff97 	bl	8007400 <std>
 80074d2:	2301      	movs	r3, #1
 80074d4:	61a3      	str	r3, [r4, #24]
 80074d6:	bd10      	pop	{r4, pc}
 80074d8:	0800851c 	.word	0x0800851c
 80074dc:	08007449 	.word	0x08007449

080074e0 <__sfp>:
 80074e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074e2:	4b1b      	ldr	r3, [pc, #108]	; (8007550 <__sfp+0x70>)
 80074e4:	681e      	ldr	r6, [r3, #0]
 80074e6:	69b3      	ldr	r3, [r6, #24]
 80074e8:	4607      	mov	r7, r0
 80074ea:	b913      	cbnz	r3, 80074f2 <__sfp+0x12>
 80074ec:	4630      	mov	r0, r6
 80074ee:	f7ff ffc7 	bl	8007480 <__sinit>
 80074f2:	3648      	adds	r6, #72	; 0x48
 80074f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80074f8:	3b01      	subs	r3, #1
 80074fa:	d503      	bpl.n	8007504 <__sfp+0x24>
 80074fc:	6833      	ldr	r3, [r6, #0]
 80074fe:	b133      	cbz	r3, 800750e <__sfp+0x2e>
 8007500:	6836      	ldr	r6, [r6, #0]
 8007502:	e7f7      	b.n	80074f4 <__sfp+0x14>
 8007504:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007508:	b16d      	cbz	r5, 8007526 <__sfp+0x46>
 800750a:	3468      	adds	r4, #104	; 0x68
 800750c:	e7f4      	b.n	80074f8 <__sfp+0x18>
 800750e:	2104      	movs	r1, #4
 8007510:	4638      	mov	r0, r7
 8007512:	f7ff ff9f 	bl	8007454 <__sfmoreglue>
 8007516:	6030      	str	r0, [r6, #0]
 8007518:	2800      	cmp	r0, #0
 800751a:	d1f1      	bne.n	8007500 <__sfp+0x20>
 800751c:	230c      	movs	r3, #12
 800751e:	603b      	str	r3, [r7, #0]
 8007520:	4604      	mov	r4, r0
 8007522:	4620      	mov	r0, r4
 8007524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007526:	4b0b      	ldr	r3, [pc, #44]	; (8007554 <__sfp+0x74>)
 8007528:	6665      	str	r5, [r4, #100]	; 0x64
 800752a:	e9c4 5500 	strd	r5, r5, [r4]
 800752e:	60a5      	str	r5, [r4, #8]
 8007530:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007534:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007538:	2208      	movs	r2, #8
 800753a:	4629      	mov	r1, r5
 800753c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007540:	f7ff fd36 	bl	8006fb0 <memset>
 8007544:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007548:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800754c:	e7e9      	b.n	8007522 <__sfp+0x42>
 800754e:	bf00      	nop
 8007550:	0800851c 	.word	0x0800851c
 8007554:	ffff0001 	.word	0xffff0001

08007558 <_fwalk_reent>:
 8007558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800755c:	4680      	mov	r8, r0
 800755e:	4689      	mov	r9, r1
 8007560:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007564:	2600      	movs	r6, #0
 8007566:	b914      	cbnz	r4, 800756e <_fwalk_reent+0x16>
 8007568:	4630      	mov	r0, r6
 800756a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800756e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007572:	3f01      	subs	r7, #1
 8007574:	d501      	bpl.n	800757a <_fwalk_reent+0x22>
 8007576:	6824      	ldr	r4, [r4, #0]
 8007578:	e7f5      	b.n	8007566 <_fwalk_reent+0xe>
 800757a:	89ab      	ldrh	r3, [r5, #12]
 800757c:	2b01      	cmp	r3, #1
 800757e:	d907      	bls.n	8007590 <_fwalk_reent+0x38>
 8007580:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007584:	3301      	adds	r3, #1
 8007586:	d003      	beq.n	8007590 <_fwalk_reent+0x38>
 8007588:	4629      	mov	r1, r5
 800758a:	4640      	mov	r0, r8
 800758c:	47c8      	blx	r9
 800758e:	4306      	orrs	r6, r0
 8007590:	3568      	adds	r5, #104	; 0x68
 8007592:	e7ee      	b.n	8007572 <_fwalk_reent+0x1a>

08007594 <__swhatbuf_r>:
 8007594:	b570      	push	{r4, r5, r6, lr}
 8007596:	460e      	mov	r6, r1
 8007598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800759c:	2900      	cmp	r1, #0
 800759e:	b096      	sub	sp, #88	; 0x58
 80075a0:	4614      	mov	r4, r2
 80075a2:	461d      	mov	r5, r3
 80075a4:	da07      	bge.n	80075b6 <__swhatbuf_r+0x22>
 80075a6:	2300      	movs	r3, #0
 80075a8:	602b      	str	r3, [r5, #0]
 80075aa:	89b3      	ldrh	r3, [r6, #12]
 80075ac:	061a      	lsls	r2, r3, #24
 80075ae:	d410      	bmi.n	80075d2 <__swhatbuf_r+0x3e>
 80075b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075b4:	e00e      	b.n	80075d4 <__swhatbuf_r+0x40>
 80075b6:	466a      	mov	r2, sp
 80075b8:	f000 fd88 	bl	80080cc <_fstat_r>
 80075bc:	2800      	cmp	r0, #0
 80075be:	dbf2      	blt.n	80075a6 <__swhatbuf_r+0x12>
 80075c0:	9a01      	ldr	r2, [sp, #4]
 80075c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80075c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80075ca:	425a      	negs	r2, r3
 80075cc:	415a      	adcs	r2, r3
 80075ce:	602a      	str	r2, [r5, #0]
 80075d0:	e7ee      	b.n	80075b0 <__swhatbuf_r+0x1c>
 80075d2:	2340      	movs	r3, #64	; 0x40
 80075d4:	2000      	movs	r0, #0
 80075d6:	6023      	str	r3, [r4, #0]
 80075d8:	b016      	add	sp, #88	; 0x58
 80075da:	bd70      	pop	{r4, r5, r6, pc}

080075dc <__smakebuf_r>:
 80075dc:	898b      	ldrh	r3, [r1, #12]
 80075de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80075e0:	079d      	lsls	r5, r3, #30
 80075e2:	4606      	mov	r6, r0
 80075e4:	460c      	mov	r4, r1
 80075e6:	d507      	bpl.n	80075f8 <__smakebuf_r+0x1c>
 80075e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80075ec:	6023      	str	r3, [r4, #0]
 80075ee:	6123      	str	r3, [r4, #16]
 80075f0:	2301      	movs	r3, #1
 80075f2:	6163      	str	r3, [r4, #20]
 80075f4:	b002      	add	sp, #8
 80075f6:	bd70      	pop	{r4, r5, r6, pc}
 80075f8:	ab01      	add	r3, sp, #4
 80075fa:	466a      	mov	r2, sp
 80075fc:	f7ff ffca 	bl	8007594 <__swhatbuf_r>
 8007600:	9900      	ldr	r1, [sp, #0]
 8007602:	4605      	mov	r5, r0
 8007604:	4630      	mov	r0, r6
 8007606:	f000 f877 	bl	80076f8 <_malloc_r>
 800760a:	b948      	cbnz	r0, 8007620 <__smakebuf_r+0x44>
 800760c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007610:	059a      	lsls	r2, r3, #22
 8007612:	d4ef      	bmi.n	80075f4 <__smakebuf_r+0x18>
 8007614:	f023 0303 	bic.w	r3, r3, #3
 8007618:	f043 0302 	orr.w	r3, r3, #2
 800761c:	81a3      	strh	r3, [r4, #12]
 800761e:	e7e3      	b.n	80075e8 <__smakebuf_r+0xc>
 8007620:	4b0d      	ldr	r3, [pc, #52]	; (8007658 <__smakebuf_r+0x7c>)
 8007622:	62b3      	str	r3, [r6, #40]	; 0x28
 8007624:	89a3      	ldrh	r3, [r4, #12]
 8007626:	6020      	str	r0, [r4, #0]
 8007628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800762c:	81a3      	strh	r3, [r4, #12]
 800762e:	9b00      	ldr	r3, [sp, #0]
 8007630:	6163      	str	r3, [r4, #20]
 8007632:	9b01      	ldr	r3, [sp, #4]
 8007634:	6120      	str	r0, [r4, #16]
 8007636:	b15b      	cbz	r3, 8007650 <__smakebuf_r+0x74>
 8007638:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800763c:	4630      	mov	r0, r6
 800763e:	f000 fd57 	bl	80080f0 <_isatty_r>
 8007642:	b128      	cbz	r0, 8007650 <__smakebuf_r+0x74>
 8007644:	89a3      	ldrh	r3, [r4, #12]
 8007646:	f023 0303 	bic.w	r3, r3, #3
 800764a:	f043 0301 	orr.w	r3, r3, #1
 800764e:	81a3      	strh	r3, [r4, #12]
 8007650:	89a3      	ldrh	r3, [r4, #12]
 8007652:	431d      	orrs	r5, r3
 8007654:	81a5      	strh	r5, [r4, #12]
 8007656:	e7cd      	b.n	80075f4 <__smakebuf_r+0x18>
 8007658:	08007449 	.word	0x08007449

0800765c <_free_r>:
 800765c:	b538      	push	{r3, r4, r5, lr}
 800765e:	4605      	mov	r5, r0
 8007660:	2900      	cmp	r1, #0
 8007662:	d045      	beq.n	80076f0 <_free_r+0x94>
 8007664:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007668:	1f0c      	subs	r4, r1, #4
 800766a:	2b00      	cmp	r3, #0
 800766c:	bfb8      	it	lt
 800766e:	18e4      	addlt	r4, r4, r3
 8007670:	f000 fd84 	bl	800817c <__malloc_lock>
 8007674:	4a1f      	ldr	r2, [pc, #124]	; (80076f4 <_free_r+0x98>)
 8007676:	6813      	ldr	r3, [r2, #0]
 8007678:	4610      	mov	r0, r2
 800767a:	b933      	cbnz	r3, 800768a <_free_r+0x2e>
 800767c:	6063      	str	r3, [r4, #4]
 800767e:	6014      	str	r4, [r2, #0]
 8007680:	4628      	mov	r0, r5
 8007682:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007686:	f000 bd7a 	b.w	800817e <__malloc_unlock>
 800768a:	42a3      	cmp	r3, r4
 800768c:	d90c      	bls.n	80076a8 <_free_r+0x4c>
 800768e:	6821      	ldr	r1, [r4, #0]
 8007690:	1862      	adds	r2, r4, r1
 8007692:	4293      	cmp	r3, r2
 8007694:	bf04      	itt	eq
 8007696:	681a      	ldreq	r2, [r3, #0]
 8007698:	685b      	ldreq	r3, [r3, #4]
 800769a:	6063      	str	r3, [r4, #4]
 800769c:	bf04      	itt	eq
 800769e:	1852      	addeq	r2, r2, r1
 80076a0:	6022      	streq	r2, [r4, #0]
 80076a2:	6004      	str	r4, [r0, #0]
 80076a4:	e7ec      	b.n	8007680 <_free_r+0x24>
 80076a6:	4613      	mov	r3, r2
 80076a8:	685a      	ldr	r2, [r3, #4]
 80076aa:	b10a      	cbz	r2, 80076b0 <_free_r+0x54>
 80076ac:	42a2      	cmp	r2, r4
 80076ae:	d9fa      	bls.n	80076a6 <_free_r+0x4a>
 80076b0:	6819      	ldr	r1, [r3, #0]
 80076b2:	1858      	adds	r0, r3, r1
 80076b4:	42a0      	cmp	r0, r4
 80076b6:	d10b      	bne.n	80076d0 <_free_r+0x74>
 80076b8:	6820      	ldr	r0, [r4, #0]
 80076ba:	4401      	add	r1, r0
 80076bc:	1858      	adds	r0, r3, r1
 80076be:	4282      	cmp	r2, r0
 80076c0:	6019      	str	r1, [r3, #0]
 80076c2:	d1dd      	bne.n	8007680 <_free_r+0x24>
 80076c4:	6810      	ldr	r0, [r2, #0]
 80076c6:	6852      	ldr	r2, [r2, #4]
 80076c8:	605a      	str	r2, [r3, #4]
 80076ca:	4401      	add	r1, r0
 80076cc:	6019      	str	r1, [r3, #0]
 80076ce:	e7d7      	b.n	8007680 <_free_r+0x24>
 80076d0:	d902      	bls.n	80076d8 <_free_r+0x7c>
 80076d2:	230c      	movs	r3, #12
 80076d4:	602b      	str	r3, [r5, #0]
 80076d6:	e7d3      	b.n	8007680 <_free_r+0x24>
 80076d8:	6820      	ldr	r0, [r4, #0]
 80076da:	1821      	adds	r1, r4, r0
 80076dc:	428a      	cmp	r2, r1
 80076de:	bf04      	itt	eq
 80076e0:	6811      	ldreq	r1, [r2, #0]
 80076e2:	6852      	ldreq	r2, [r2, #4]
 80076e4:	6062      	str	r2, [r4, #4]
 80076e6:	bf04      	itt	eq
 80076e8:	1809      	addeq	r1, r1, r0
 80076ea:	6021      	streq	r1, [r4, #0]
 80076ec:	605c      	str	r4, [r3, #4]
 80076ee:	e7c7      	b.n	8007680 <_free_r+0x24>
 80076f0:	bd38      	pop	{r3, r4, r5, pc}
 80076f2:	bf00      	nop
 80076f4:	200000a4 	.word	0x200000a4

080076f8 <_malloc_r>:
 80076f8:	b570      	push	{r4, r5, r6, lr}
 80076fa:	1ccd      	adds	r5, r1, #3
 80076fc:	f025 0503 	bic.w	r5, r5, #3
 8007700:	3508      	adds	r5, #8
 8007702:	2d0c      	cmp	r5, #12
 8007704:	bf38      	it	cc
 8007706:	250c      	movcc	r5, #12
 8007708:	2d00      	cmp	r5, #0
 800770a:	4606      	mov	r6, r0
 800770c:	db01      	blt.n	8007712 <_malloc_r+0x1a>
 800770e:	42a9      	cmp	r1, r5
 8007710:	d903      	bls.n	800771a <_malloc_r+0x22>
 8007712:	230c      	movs	r3, #12
 8007714:	6033      	str	r3, [r6, #0]
 8007716:	2000      	movs	r0, #0
 8007718:	bd70      	pop	{r4, r5, r6, pc}
 800771a:	f000 fd2f 	bl	800817c <__malloc_lock>
 800771e:	4a21      	ldr	r2, [pc, #132]	; (80077a4 <_malloc_r+0xac>)
 8007720:	6814      	ldr	r4, [r2, #0]
 8007722:	4621      	mov	r1, r4
 8007724:	b991      	cbnz	r1, 800774c <_malloc_r+0x54>
 8007726:	4c20      	ldr	r4, [pc, #128]	; (80077a8 <_malloc_r+0xb0>)
 8007728:	6823      	ldr	r3, [r4, #0]
 800772a:	b91b      	cbnz	r3, 8007734 <_malloc_r+0x3c>
 800772c:	4630      	mov	r0, r6
 800772e:	f000 fc57 	bl	8007fe0 <_sbrk_r>
 8007732:	6020      	str	r0, [r4, #0]
 8007734:	4629      	mov	r1, r5
 8007736:	4630      	mov	r0, r6
 8007738:	f000 fc52 	bl	8007fe0 <_sbrk_r>
 800773c:	1c43      	adds	r3, r0, #1
 800773e:	d124      	bne.n	800778a <_malloc_r+0x92>
 8007740:	230c      	movs	r3, #12
 8007742:	6033      	str	r3, [r6, #0]
 8007744:	4630      	mov	r0, r6
 8007746:	f000 fd1a 	bl	800817e <__malloc_unlock>
 800774a:	e7e4      	b.n	8007716 <_malloc_r+0x1e>
 800774c:	680b      	ldr	r3, [r1, #0]
 800774e:	1b5b      	subs	r3, r3, r5
 8007750:	d418      	bmi.n	8007784 <_malloc_r+0x8c>
 8007752:	2b0b      	cmp	r3, #11
 8007754:	d90f      	bls.n	8007776 <_malloc_r+0x7e>
 8007756:	600b      	str	r3, [r1, #0]
 8007758:	50cd      	str	r5, [r1, r3]
 800775a:	18cc      	adds	r4, r1, r3
 800775c:	4630      	mov	r0, r6
 800775e:	f000 fd0e 	bl	800817e <__malloc_unlock>
 8007762:	f104 000b 	add.w	r0, r4, #11
 8007766:	1d23      	adds	r3, r4, #4
 8007768:	f020 0007 	bic.w	r0, r0, #7
 800776c:	1ac3      	subs	r3, r0, r3
 800776e:	d0d3      	beq.n	8007718 <_malloc_r+0x20>
 8007770:	425a      	negs	r2, r3
 8007772:	50e2      	str	r2, [r4, r3]
 8007774:	e7d0      	b.n	8007718 <_malloc_r+0x20>
 8007776:	428c      	cmp	r4, r1
 8007778:	684b      	ldr	r3, [r1, #4]
 800777a:	bf16      	itet	ne
 800777c:	6063      	strne	r3, [r4, #4]
 800777e:	6013      	streq	r3, [r2, #0]
 8007780:	460c      	movne	r4, r1
 8007782:	e7eb      	b.n	800775c <_malloc_r+0x64>
 8007784:	460c      	mov	r4, r1
 8007786:	6849      	ldr	r1, [r1, #4]
 8007788:	e7cc      	b.n	8007724 <_malloc_r+0x2c>
 800778a:	1cc4      	adds	r4, r0, #3
 800778c:	f024 0403 	bic.w	r4, r4, #3
 8007790:	42a0      	cmp	r0, r4
 8007792:	d005      	beq.n	80077a0 <_malloc_r+0xa8>
 8007794:	1a21      	subs	r1, r4, r0
 8007796:	4630      	mov	r0, r6
 8007798:	f000 fc22 	bl	8007fe0 <_sbrk_r>
 800779c:	3001      	adds	r0, #1
 800779e:	d0cf      	beq.n	8007740 <_malloc_r+0x48>
 80077a0:	6025      	str	r5, [r4, #0]
 80077a2:	e7db      	b.n	800775c <_malloc_r+0x64>
 80077a4:	200000a4 	.word	0x200000a4
 80077a8:	200000a8 	.word	0x200000a8

080077ac <__ssputs_r>:
 80077ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077b0:	688e      	ldr	r6, [r1, #8]
 80077b2:	429e      	cmp	r6, r3
 80077b4:	4682      	mov	sl, r0
 80077b6:	460c      	mov	r4, r1
 80077b8:	4690      	mov	r8, r2
 80077ba:	4699      	mov	r9, r3
 80077bc:	d837      	bhi.n	800782e <__ssputs_r+0x82>
 80077be:	898a      	ldrh	r2, [r1, #12]
 80077c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80077c4:	d031      	beq.n	800782a <__ssputs_r+0x7e>
 80077c6:	6825      	ldr	r5, [r4, #0]
 80077c8:	6909      	ldr	r1, [r1, #16]
 80077ca:	1a6f      	subs	r7, r5, r1
 80077cc:	6965      	ldr	r5, [r4, #20]
 80077ce:	2302      	movs	r3, #2
 80077d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80077d4:	fb95 f5f3 	sdiv	r5, r5, r3
 80077d8:	f109 0301 	add.w	r3, r9, #1
 80077dc:	443b      	add	r3, r7
 80077de:	429d      	cmp	r5, r3
 80077e0:	bf38      	it	cc
 80077e2:	461d      	movcc	r5, r3
 80077e4:	0553      	lsls	r3, r2, #21
 80077e6:	d530      	bpl.n	800784a <__ssputs_r+0x9e>
 80077e8:	4629      	mov	r1, r5
 80077ea:	f7ff ff85 	bl	80076f8 <_malloc_r>
 80077ee:	4606      	mov	r6, r0
 80077f0:	b950      	cbnz	r0, 8007808 <__ssputs_r+0x5c>
 80077f2:	230c      	movs	r3, #12
 80077f4:	f8ca 3000 	str.w	r3, [sl]
 80077f8:	89a3      	ldrh	r3, [r4, #12]
 80077fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077fe:	81a3      	strh	r3, [r4, #12]
 8007800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007808:	463a      	mov	r2, r7
 800780a:	6921      	ldr	r1, [r4, #16]
 800780c:	f000 fc92 	bl	8008134 <memcpy>
 8007810:	89a3      	ldrh	r3, [r4, #12]
 8007812:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800781a:	81a3      	strh	r3, [r4, #12]
 800781c:	6126      	str	r6, [r4, #16]
 800781e:	6165      	str	r5, [r4, #20]
 8007820:	443e      	add	r6, r7
 8007822:	1bed      	subs	r5, r5, r7
 8007824:	6026      	str	r6, [r4, #0]
 8007826:	60a5      	str	r5, [r4, #8]
 8007828:	464e      	mov	r6, r9
 800782a:	454e      	cmp	r6, r9
 800782c:	d900      	bls.n	8007830 <__ssputs_r+0x84>
 800782e:	464e      	mov	r6, r9
 8007830:	4632      	mov	r2, r6
 8007832:	4641      	mov	r1, r8
 8007834:	6820      	ldr	r0, [r4, #0]
 8007836:	f000 fc88 	bl	800814a <memmove>
 800783a:	68a3      	ldr	r3, [r4, #8]
 800783c:	1b9b      	subs	r3, r3, r6
 800783e:	60a3      	str	r3, [r4, #8]
 8007840:	6823      	ldr	r3, [r4, #0]
 8007842:	441e      	add	r6, r3
 8007844:	6026      	str	r6, [r4, #0]
 8007846:	2000      	movs	r0, #0
 8007848:	e7dc      	b.n	8007804 <__ssputs_r+0x58>
 800784a:	462a      	mov	r2, r5
 800784c:	f000 fc98 	bl	8008180 <_realloc_r>
 8007850:	4606      	mov	r6, r0
 8007852:	2800      	cmp	r0, #0
 8007854:	d1e2      	bne.n	800781c <__ssputs_r+0x70>
 8007856:	6921      	ldr	r1, [r4, #16]
 8007858:	4650      	mov	r0, sl
 800785a:	f7ff feff 	bl	800765c <_free_r>
 800785e:	e7c8      	b.n	80077f2 <__ssputs_r+0x46>

08007860 <_svfiprintf_r>:
 8007860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007864:	461d      	mov	r5, r3
 8007866:	898b      	ldrh	r3, [r1, #12]
 8007868:	061f      	lsls	r7, r3, #24
 800786a:	b09d      	sub	sp, #116	; 0x74
 800786c:	4680      	mov	r8, r0
 800786e:	460c      	mov	r4, r1
 8007870:	4616      	mov	r6, r2
 8007872:	d50f      	bpl.n	8007894 <_svfiprintf_r+0x34>
 8007874:	690b      	ldr	r3, [r1, #16]
 8007876:	b96b      	cbnz	r3, 8007894 <_svfiprintf_r+0x34>
 8007878:	2140      	movs	r1, #64	; 0x40
 800787a:	f7ff ff3d 	bl	80076f8 <_malloc_r>
 800787e:	6020      	str	r0, [r4, #0]
 8007880:	6120      	str	r0, [r4, #16]
 8007882:	b928      	cbnz	r0, 8007890 <_svfiprintf_r+0x30>
 8007884:	230c      	movs	r3, #12
 8007886:	f8c8 3000 	str.w	r3, [r8]
 800788a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800788e:	e0c8      	b.n	8007a22 <_svfiprintf_r+0x1c2>
 8007890:	2340      	movs	r3, #64	; 0x40
 8007892:	6163      	str	r3, [r4, #20]
 8007894:	2300      	movs	r3, #0
 8007896:	9309      	str	r3, [sp, #36]	; 0x24
 8007898:	2320      	movs	r3, #32
 800789a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800789e:	2330      	movs	r3, #48	; 0x30
 80078a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078a4:	9503      	str	r5, [sp, #12]
 80078a6:	f04f 0b01 	mov.w	fp, #1
 80078aa:	4637      	mov	r7, r6
 80078ac:	463d      	mov	r5, r7
 80078ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 80078b2:	b10b      	cbz	r3, 80078b8 <_svfiprintf_r+0x58>
 80078b4:	2b25      	cmp	r3, #37	; 0x25
 80078b6:	d13e      	bne.n	8007936 <_svfiprintf_r+0xd6>
 80078b8:	ebb7 0a06 	subs.w	sl, r7, r6
 80078bc:	d00b      	beq.n	80078d6 <_svfiprintf_r+0x76>
 80078be:	4653      	mov	r3, sl
 80078c0:	4632      	mov	r2, r6
 80078c2:	4621      	mov	r1, r4
 80078c4:	4640      	mov	r0, r8
 80078c6:	f7ff ff71 	bl	80077ac <__ssputs_r>
 80078ca:	3001      	adds	r0, #1
 80078cc:	f000 80a4 	beq.w	8007a18 <_svfiprintf_r+0x1b8>
 80078d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078d2:	4453      	add	r3, sl
 80078d4:	9309      	str	r3, [sp, #36]	; 0x24
 80078d6:	783b      	ldrb	r3, [r7, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	f000 809d 	beq.w	8007a18 <_svfiprintf_r+0x1b8>
 80078de:	2300      	movs	r3, #0
 80078e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80078e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078e8:	9304      	str	r3, [sp, #16]
 80078ea:	9307      	str	r3, [sp, #28]
 80078ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078f0:	931a      	str	r3, [sp, #104]	; 0x68
 80078f2:	462f      	mov	r7, r5
 80078f4:	2205      	movs	r2, #5
 80078f6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80078fa:	4850      	ldr	r0, [pc, #320]	; (8007a3c <_svfiprintf_r+0x1dc>)
 80078fc:	f7f8 fc90 	bl	8000220 <memchr>
 8007900:	9b04      	ldr	r3, [sp, #16]
 8007902:	b9d0      	cbnz	r0, 800793a <_svfiprintf_r+0xda>
 8007904:	06d9      	lsls	r1, r3, #27
 8007906:	bf44      	itt	mi
 8007908:	2220      	movmi	r2, #32
 800790a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800790e:	071a      	lsls	r2, r3, #28
 8007910:	bf44      	itt	mi
 8007912:	222b      	movmi	r2, #43	; 0x2b
 8007914:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007918:	782a      	ldrb	r2, [r5, #0]
 800791a:	2a2a      	cmp	r2, #42	; 0x2a
 800791c:	d015      	beq.n	800794a <_svfiprintf_r+0xea>
 800791e:	9a07      	ldr	r2, [sp, #28]
 8007920:	462f      	mov	r7, r5
 8007922:	2000      	movs	r0, #0
 8007924:	250a      	movs	r5, #10
 8007926:	4639      	mov	r1, r7
 8007928:	f811 3b01 	ldrb.w	r3, [r1], #1
 800792c:	3b30      	subs	r3, #48	; 0x30
 800792e:	2b09      	cmp	r3, #9
 8007930:	d94d      	bls.n	80079ce <_svfiprintf_r+0x16e>
 8007932:	b1b8      	cbz	r0, 8007964 <_svfiprintf_r+0x104>
 8007934:	e00f      	b.n	8007956 <_svfiprintf_r+0xf6>
 8007936:	462f      	mov	r7, r5
 8007938:	e7b8      	b.n	80078ac <_svfiprintf_r+0x4c>
 800793a:	4a40      	ldr	r2, [pc, #256]	; (8007a3c <_svfiprintf_r+0x1dc>)
 800793c:	1a80      	subs	r0, r0, r2
 800793e:	fa0b f000 	lsl.w	r0, fp, r0
 8007942:	4318      	orrs	r0, r3
 8007944:	9004      	str	r0, [sp, #16]
 8007946:	463d      	mov	r5, r7
 8007948:	e7d3      	b.n	80078f2 <_svfiprintf_r+0x92>
 800794a:	9a03      	ldr	r2, [sp, #12]
 800794c:	1d11      	adds	r1, r2, #4
 800794e:	6812      	ldr	r2, [r2, #0]
 8007950:	9103      	str	r1, [sp, #12]
 8007952:	2a00      	cmp	r2, #0
 8007954:	db01      	blt.n	800795a <_svfiprintf_r+0xfa>
 8007956:	9207      	str	r2, [sp, #28]
 8007958:	e004      	b.n	8007964 <_svfiprintf_r+0x104>
 800795a:	4252      	negs	r2, r2
 800795c:	f043 0302 	orr.w	r3, r3, #2
 8007960:	9207      	str	r2, [sp, #28]
 8007962:	9304      	str	r3, [sp, #16]
 8007964:	783b      	ldrb	r3, [r7, #0]
 8007966:	2b2e      	cmp	r3, #46	; 0x2e
 8007968:	d10c      	bne.n	8007984 <_svfiprintf_r+0x124>
 800796a:	787b      	ldrb	r3, [r7, #1]
 800796c:	2b2a      	cmp	r3, #42	; 0x2a
 800796e:	d133      	bne.n	80079d8 <_svfiprintf_r+0x178>
 8007970:	9b03      	ldr	r3, [sp, #12]
 8007972:	1d1a      	adds	r2, r3, #4
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	9203      	str	r2, [sp, #12]
 8007978:	2b00      	cmp	r3, #0
 800797a:	bfb8      	it	lt
 800797c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007980:	3702      	adds	r7, #2
 8007982:	9305      	str	r3, [sp, #20]
 8007984:	4d2e      	ldr	r5, [pc, #184]	; (8007a40 <_svfiprintf_r+0x1e0>)
 8007986:	7839      	ldrb	r1, [r7, #0]
 8007988:	2203      	movs	r2, #3
 800798a:	4628      	mov	r0, r5
 800798c:	f7f8 fc48 	bl	8000220 <memchr>
 8007990:	b138      	cbz	r0, 80079a2 <_svfiprintf_r+0x142>
 8007992:	2340      	movs	r3, #64	; 0x40
 8007994:	1b40      	subs	r0, r0, r5
 8007996:	fa03 f000 	lsl.w	r0, r3, r0
 800799a:	9b04      	ldr	r3, [sp, #16]
 800799c:	4303      	orrs	r3, r0
 800799e:	3701      	adds	r7, #1
 80079a0:	9304      	str	r3, [sp, #16]
 80079a2:	7839      	ldrb	r1, [r7, #0]
 80079a4:	4827      	ldr	r0, [pc, #156]	; (8007a44 <_svfiprintf_r+0x1e4>)
 80079a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079aa:	2206      	movs	r2, #6
 80079ac:	1c7e      	adds	r6, r7, #1
 80079ae:	f7f8 fc37 	bl	8000220 <memchr>
 80079b2:	2800      	cmp	r0, #0
 80079b4:	d038      	beq.n	8007a28 <_svfiprintf_r+0x1c8>
 80079b6:	4b24      	ldr	r3, [pc, #144]	; (8007a48 <_svfiprintf_r+0x1e8>)
 80079b8:	bb13      	cbnz	r3, 8007a00 <_svfiprintf_r+0x1a0>
 80079ba:	9b03      	ldr	r3, [sp, #12]
 80079bc:	3307      	adds	r3, #7
 80079be:	f023 0307 	bic.w	r3, r3, #7
 80079c2:	3308      	adds	r3, #8
 80079c4:	9303      	str	r3, [sp, #12]
 80079c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079c8:	444b      	add	r3, r9
 80079ca:	9309      	str	r3, [sp, #36]	; 0x24
 80079cc:	e76d      	b.n	80078aa <_svfiprintf_r+0x4a>
 80079ce:	fb05 3202 	mla	r2, r5, r2, r3
 80079d2:	2001      	movs	r0, #1
 80079d4:	460f      	mov	r7, r1
 80079d6:	e7a6      	b.n	8007926 <_svfiprintf_r+0xc6>
 80079d8:	2300      	movs	r3, #0
 80079da:	3701      	adds	r7, #1
 80079dc:	9305      	str	r3, [sp, #20]
 80079de:	4619      	mov	r1, r3
 80079e0:	250a      	movs	r5, #10
 80079e2:	4638      	mov	r0, r7
 80079e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079e8:	3a30      	subs	r2, #48	; 0x30
 80079ea:	2a09      	cmp	r2, #9
 80079ec:	d903      	bls.n	80079f6 <_svfiprintf_r+0x196>
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d0c8      	beq.n	8007984 <_svfiprintf_r+0x124>
 80079f2:	9105      	str	r1, [sp, #20]
 80079f4:	e7c6      	b.n	8007984 <_svfiprintf_r+0x124>
 80079f6:	fb05 2101 	mla	r1, r5, r1, r2
 80079fa:	2301      	movs	r3, #1
 80079fc:	4607      	mov	r7, r0
 80079fe:	e7f0      	b.n	80079e2 <_svfiprintf_r+0x182>
 8007a00:	ab03      	add	r3, sp, #12
 8007a02:	9300      	str	r3, [sp, #0]
 8007a04:	4622      	mov	r2, r4
 8007a06:	4b11      	ldr	r3, [pc, #68]	; (8007a4c <_svfiprintf_r+0x1ec>)
 8007a08:	a904      	add	r1, sp, #16
 8007a0a:	4640      	mov	r0, r8
 8007a0c:	f3af 8000 	nop.w
 8007a10:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007a14:	4681      	mov	r9, r0
 8007a16:	d1d6      	bne.n	80079c6 <_svfiprintf_r+0x166>
 8007a18:	89a3      	ldrh	r3, [r4, #12]
 8007a1a:	065b      	lsls	r3, r3, #25
 8007a1c:	f53f af35 	bmi.w	800788a <_svfiprintf_r+0x2a>
 8007a20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a22:	b01d      	add	sp, #116	; 0x74
 8007a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a28:	ab03      	add	r3, sp, #12
 8007a2a:	9300      	str	r3, [sp, #0]
 8007a2c:	4622      	mov	r2, r4
 8007a2e:	4b07      	ldr	r3, [pc, #28]	; (8007a4c <_svfiprintf_r+0x1ec>)
 8007a30:	a904      	add	r1, sp, #16
 8007a32:	4640      	mov	r0, r8
 8007a34:	f000 f9c2 	bl	8007dbc <_printf_i>
 8007a38:	e7ea      	b.n	8007a10 <_svfiprintf_r+0x1b0>
 8007a3a:	bf00      	nop
 8007a3c:	08008580 	.word	0x08008580
 8007a40:	08008586 	.word	0x08008586
 8007a44:	0800858a 	.word	0x0800858a
 8007a48:	00000000 	.word	0x00000000
 8007a4c:	080077ad 	.word	0x080077ad

08007a50 <__sfputc_r>:
 8007a50:	6893      	ldr	r3, [r2, #8]
 8007a52:	3b01      	subs	r3, #1
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	b410      	push	{r4}
 8007a58:	6093      	str	r3, [r2, #8]
 8007a5a:	da08      	bge.n	8007a6e <__sfputc_r+0x1e>
 8007a5c:	6994      	ldr	r4, [r2, #24]
 8007a5e:	42a3      	cmp	r3, r4
 8007a60:	db01      	blt.n	8007a66 <__sfputc_r+0x16>
 8007a62:	290a      	cmp	r1, #10
 8007a64:	d103      	bne.n	8007a6e <__sfputc_r+0x1e>
 8007a66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a6a:	f7ff bb59 	b.w	8007120 <__swbuf_r>
 8007a6e:	6813      	ldr	r3, [r2, #0]
 8007a70:	1c58      	adds	r0, r3, #1
 8007a72:	6010      	str	r0, [r2, #0]
 8007a74:	7019      	strb	r1, [r3, #0]
 8007a76:	4608      	mov	r0, r1
 8007a78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a7c:	4770      	bx	lr

08007a7e <__sfputs_r>:
 8007a7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a80:	4606      	mov	r6, r0
 8007a82:	460f      	mov	r7, r1
 8007a84:	4614      	mov	r4, r2
 8007a86:	18d5      	adds	r5, r2, r3
 8007a88:	42ac      	cmp	r4, r5
 8007a8a:	d101      	bne.n	8007a90 <__sfputs_r+0x12>
 8007a8c:	2000      	movs	r0, #0
 8007a8e:	e007      	b.n	8007aa0 <__sfputs_r+0x22>
 8007a90:	463a      	mov	r2, r7
 8007a92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a96:	4630      	mov	r0, r6
 8007a98:	f7ff ffda 	bl	8007a50 <__sfputc_r>
 8007a9c:	1c43      	adds	r3, r0, #1
 8007a9e:	d1f3      	bne.n	8007a88 <__sfputs_r+0xa>
 8007aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007aa4 <_vfiprintf_r>:
 8007aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aa8:	460c      	mov	r4, r1
 8007aaa:	b09d      	sub	sp, #116	; 0x74
 8007aac:	4617      	mov	r7, r2
 8007aae:	461d      	mov	r5, r3
 8007ab0:	4606      	mov	r6, r0
 8007ab2:	b118      	cbz	r0, 8007abc <_vfiprintf_r+0x18>
 8007ab4:	6983      	ldr	r3, [r0, #24]
 8007ab6:	b90b      	cbnz	r3, 8007abc <_vfiprintf_r+0x18>
 8007ab8:	f7ff fce2 	bl	8007480 <__sinit>
 8007abc:	4b7c      	ldr	r3, [pc, #496]	; (8007cb0 <_vfiprintf_r+0x20c>)
 8007abe:	429c      	cmp	r4, r3
 8007ac0:	d158      	bne.n	8007b74 <_vfiprintf_r+0xd0>
 8007ac2:	6874      	ldr	r4, [r6, #4]
 8007ac4:	89a3      	ldrh	r3, [r4, #12]
 8007ac6:	0718      	lsls	r0, r3, #28
 8007ac8:	d55e      	bpl.n	8007b88 <_vfiprintf_r+0xe4>
 8007aca:	6923      	ldr	r3, [r4, #16]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d05b      	beq.n	8007b88 <_vfiprintf_r+0xe4>
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	9309      	str	r3, [sp, #36]	; 0x24
 8007ad4:	2320      	movs	r3, #32
 8007ad6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ada:	2330      	movs	r3, #48	; 0x30
 8007adc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ae0:	9503      	str	r5, [sp, #12]
 8007ae2:	f04f 0b01 	mov.w	fp, #1
 8007ae6:	46b8      	mov	r8, r7
 8007ae8:	4645      	mov	r5, r8
 8007aea:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007aee:	b10b      	cbz	r3, 8007af4 <_vfiprintf_r+0x50>
 8007af0:	2b25      	cmp	r3, #37	; 0x25
 8007af2:	d154      	bne.n	8007b9e <_vfiprintf_r+0xfa>
 8007af4:	ebb8 0a07 	subs.w	sl, r8, r7
 8007af8:	d00b      	beq.n	8007b12 <_vfiprintf_r+0x6e>
 8007afa:	4653      	mov	r3, sl
 8007afc:	463a      	mov	r2, r7
 8007afe:	4621      	mov	r1, r4
 8007b00:	4630      	mov	r0, r6
 8007b02:	f7ff ffbc 	bl	8007a7e <__sfputs_r>
 8007b06:	3001      	adds	r0, #1
 8007b08:	f000 80c2 	beq.w	8007c90 <_vfiprintf_r+0x1ec>
 8007b0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b0e:	4453      	add	r3, sl
 8007b10:	9309      	str	r3, [sp, #36]	; 0x24
 8007b12:	f898 3000 	ldrb.w	r3, [r8]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	f000 80ba 	beq.w	8007c90 <_vfiprintf_r+0x1ec>
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b26:	9304      	str	r3, [sp, #16]
 8007b28:	9307      	str	r3, [sp, #28]
 8007b2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b2e:	931a      	str	r3, [sp, #104]	; 0x68
 8007b30:	46a8      	mov	r8, r5
 8007b32:	2205      	movs	r2, #5
 8007b34:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007b38:	485e      	ldr	r0, [pc, #376]	; (8007cb4 <_vfiprintf_r+0x210>)
 8007b3a:	f7f8 fb71 	bl	8000220 <memchr>
 8007b3e:	9b04      	ldr	r3, [sp, #16]
 8007b40:	bb78      	cbnz	r0, 8007ba2 <_vfiprintf_r+0xfe>
 8007b42:	06d9      	lsls	r1, r3, #27
 8007b44:	bf44      	itt	mi
 8007b46:	2220      	movmi	r2, #32
 8007b48:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007b4c:	071a      	lsls	r2, r3, #28
 8007b4e:	bf44      	itt	mi
 8007b50:	222b      	movmi	r2, #43	; 0x2b
 8007b52:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007b56:	782a      	ldrb	r2, [r5, #0]
 8007b58:	2a2a      	cmp	r2, #42	; 0x2a
 8007b5a:	d02a      	beq.n	8007bb2 <_vfiprintf_r+0x10e>
 8007b5c:	9a07      	ldr	r2, [sp, #28]
 8007b5e:	46a8      	mov	r8, r5
 8007b60:	2000      	movs	r0, #0
 8007b62:	250a      	movs	r5, #10
 8007b64:	4641      	mov	r1, r8
 8007b66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b6a:	3b30      	subs	r3, #48	; 0x30
 8007b6c:	2b09      	cmp	r3, #9
 8007b6e:	d969      	bls.n	8007c44 <_vfiprintf_r+0x1a0>
 8007b70:	b360      	cbz	r0, 8007bcc <_vfiprintf_r+0x128>
 8007b72:	e024      	b.n	8007bbe <_vfiprintf_r+0x11a>
 8007b74:	4b50      	ldr	r3, [pc, #320]	; (8007cb8 <_vfiprintf_r+0x214>)
 8007b76:	429c      	cmp	r4, r3
 8007b78:	d101      	bne.n	8007b7e <_vfiprintf_r+0xda>
 8007b7a:	68b4      	ldr	r4, [r6, #8]
 8007b7c:	e7a2      	b.n	8007ac4 <_vfiprintf_r+0x20>
 8007b7e:	4b4f      	ldr	r3, [pc, #316]	; (8007cbc <_vfiprintf_r+0x218>)
 8007b80:	429c      	cmp	r4, r3
 8007b82:	bf08      	it	eq
 8007b84:	68f4      	ldreq	r4, [r6, #12]
 8007b86:	e79d      	b.n	8007ac4 <_vfiprintf_r+0x20>
 8007b88:	4621      	mov	r1, r4
 8007b8a:	4630      	mov	r0, r6
 8007b8c:	f7ff fb1a 	bl	80071c4 <__swsetup_r>
 8007b90:	2800      	cmp	r0, #0
 8007b92:	d09d      	beq.n	8007ad0 <_vfiprintf_r+0x2c>
 8007b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b98:	b01d      	add	sp, #116	; 0x74
 8007b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b9e:	46a8      	mov	r8, r5
 8007ba0:	e7a2      	b.n	8007ae8 <_vfiprintf_r+0x44>
 8007ba2:	4a44      	ldr	r2, [pc, #272]	; (8007cb4 <_vfiprintf_r+0x210>)
 8007ba4:	1a80      	subs	r0, r0, r2
 8007ba6:	fa0b f000 	lsl.w	r0, fp, r0
 8007baa:	4318      	orrs	r0, r3
 8007bac:	9004      	str	r0, [sp, #16]
 8007bae:	4645      	mov	r5, r8
 8007bb0:	e7be      	b.n	8007b30 <_vfiprintf_r+0x8c>
 8007bb2:	9a03      	ldr	r2, [sp, #12]
 8007bb4:	1d11      	adds	r1, r2, #4
 8007bb6:	6812      	ldr	r2, [r2, #0]
 8007bb8:	9103      	str	r1, [sp, #12]
 8007bba:	2a00      	cmp	r2, #0
 8007bbc:	db01      	blt.n	8007bc2 <_vfiprintf_r+0x11e>
 8007bbe:	9207      	str	r2, [sp, #28]
 8007bc0:	e004      	b.n	8007bcc <_vfiprintf_r+0x128>
 8007bc2:	4252      	negs	r2, r2
 8007bc4:	f043 0302 	orr.w	r3, r3, #2
 8007bc8:	9207      	str	r2, [sp, #28]
 8007bca:	9304      	str	r3, [sp, #16]
 8007bcc:	f898 3000 	ldrb.w	r3, [r8]
 8007bd0:	2b2e      	cmp	r3, #46	; 0x2e
 8007bd2:	d10e      	bne.n	8007bf2 <_vfiprintf_r+0x14e>
 8007bd4:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007bd8:	2b2a      	cmp	r3, #42	; 0x2a
 8007bda:	d138      	bne.n	8007c4e <_vfiprintf_r+0x1aa>
 8007bdc:	9b03      	ldr	r3, [sp, #12]
 8007bde:	1d1a      	adds	r2, r3, #4
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	9203      	str	r2, [sp, #12]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	bfb8      	it	lt
 8007be8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007bec:	f108 0802 	add.w	r8, r8, #2
 8007bf0:	9305      	str	r3, [sp, #20]
 8007bf2:	4d33      	ldr	r5, [pc, #204]	; (8007cc0 <_vfiprintf_r+0x21c>)
 8007bf4:	f898 1000 	ldrb.w	r1, [r8]
 8007bf8:	2203      	movs	r2, #3
 8007bfa:	4628      	mov	r0, r5
 8007bfc:	f7f8 fb10 	bl	8000220 <memchr>
 8007c00:	b140      	cbz	r0, 8007c14 <_vfiprintf_r+0x170>
 8007c02:	2340      	movs	r3, #64	; 0x40
 8007c04:	1b40      	subs	r0, r0, r5
 8007c06:	fa03 f000 	lsl.w	r0, r3, r0
 8007c0a:	9b04      	ldr	r3, [sp, #16]
 8007c0c:	4303      	orrs	r3, r0
 8007c0e:	f108 0801 	add.w	r8, r8, #1
 8007c12:	9304      	str	r3, [sp, #16]
 8007c14:	f898 1000 	ldrb.w	r1, [r8]
 8007c18:	482a      	ldr	r0, [pc, #168]	; (8007cc4 <_vfiprintf_r+0x220>)
 8007c1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c1e:	2206      	movs	r2, #6
 8007c20:	f108 0701 	add.w	r7, r8, #1
 8007c24:	f7f8 fafc 	bl	8000220 <memchr>
 8007c28:	2800      	cmp	r0, #0
 8007c2a:	d037      	beq.n	8007c9c <_vfiprintf_r+0x1f8>
 8007c2c:	4b26      	ldr	r3, [pc, #152]	; (8007cc8 <_vfiprintf_r+0x224>)
 8007c2e:	bb1b      	cbnz	r3, 8007c78 <_vfiprintf_r+0x1d4>
 8007c30:	9b03      	ldr	r3, [sp, #12]
 8007c32:	3307      	adds	r3, #7
 8007c34:	f023 0307 	bic.w	r3, r3, #7
 8007c38:	3308      	adds	r3, #8
 8007c3a:	9303      	str	r3, [sp, #12]
 8007c3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c3e:	444b      	add	r3, r9
 8007c40:	9309      	str	r3, [sp, #36]	; 0x24
 8007c42:	e750      	b.n	8007ae6 <_vfiprintf_r+0x42>
 8007c44:	fb05 3202 	mla	r2, r5, r2, r3
 8007c48:	2001      	movs	r0, #1
 8007c4a:	4688      	mov	r8, r1
 8007c4c:	e78a      	b.n	8007b64 <_vfiprintf_r+0xc0>
 8007c4e:	2300      	movs	r3, #0
 8007c50:	f108 0801 	add.w	r8, r8, #1
 8007c54:	9305      	str	r3, [sp, #20]
 8007c56:	4619      	mov	r1, r3
 8007c58:	250a      	movs	r5, #10
 8007c5a:	4640      	mov	r0, r8
 8007c5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c60:	3a30      	subs	r2, #48	; 0x30
 8007c62:	2a09      	cmp	r2, #9
 8007c64:	d903      	bls.n	8007c6e <_vfiprintf_r+0x1ca>
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d0c3      	beq.n	8007bf2 <_vfiprintf_r+0x14e>
 8007c6a:	9105      	str	r1, [sp, #20]
 8007c6c:	e7c1      	b.n	8007bf2 <_vfiprintf_r+0x14e>
 8007c6e:	fb05 2101 	mla	r1, r5, r1, r2
 8007c72:	2301      	movs	r3, #1
 8007c74:	4680      	mov	r8, r0
 8007c76:	e7f0      	b.n	8007c5a <_vfiprintf_r+0x1b6>
 8007c78:	ab03      	add	r3, sp, #12
 8007c7a:	9300      	str	r3, [sp, #0]
 8007c7c:	4622      	mov	r2, r4
 8007c7e:	4b13      	ldr	r3, [pc, #76]	; (8007ccc <_vfiprintf_r+0x228>)
 8007c80:	a904      	add	r1, sp, #16
 8007c82:	4630      	mov	r0, r6
 8007c84:	f3af 8000 	nop.w
 8007c88:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007c8c:	4681      	mov	r9, r0
 8007c8e:	d1d5      	bne.n	8007c3c <_vfiprintf_r+0x198>
 8007c90:	89a3      	ldrh	r3, [r4, #12]
 8007c92:	065b      	lsls	r3, r3, #25
 8007c94:	f53f af7e 	bmi.w	8007b94 <_vfiprintf_r+0xf0>
 8007c98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c9a:	e77d      	b.n	8007b98 <_vfiprintf_r+0xf4>
 8007c9c:	ab03      	add	r3, sp, #12
 8007c9e:	9300      	str	r3, [sp, #0]
 8007ca0:	4622      	mov	r2, r4
 8007ca2:	4b0a      	ldr	r3, [pc, #40]	; (8007ccc <_vfiprintf_r+0x228>)
 8007ca4:	a904      	add	r1, sp, #16
 8007ca6:	4630      	mov	r0, r6
 8007ca8:	f000 f888 	bl	8007dbc <_printf_i>
 8007cac:	e7ec      	b.n	8007c88 <_vfiprintf_r+0x1e4>
 8007cae:	bf00      	nop
 8007cb0:	08008540 	.word	0x08008540
 8007cb4:	08008580 	.word	0x08008580
 8007cb8:	08008560 	.word	0x08008560
 8007cbc:	08008520 	.word	0x08008520
 8007cc0:	08008586 	.word	0x08008586
 8007cc4:	0800858a 	.word	0x0800858a
 8007cc8:	00000000 	.word	0x00000000
 8007ccc:	08007a7f 	.word	0x08007a7f

08007cd0 <_printf_common>:
 8007cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cd4:	4691      	mov	r9, r2
 8007cd6:	461f      	mov	r7, r3
 8007cd8:	688a      	ldr	r2, [r1, #8]
 8007cda:	690b      	ldr	r3, [r1, #16]
 8007cdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	bfb8      	it	lt
 8007ce4:	4613      	movlt	r3, r2
 8007ce6:	f8c9 3000 	str.w	r3, [r9]
 8007cea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007cee:	4606      	mov	r6, r0
 8007cf0:	460c      	mov	r4, r1
 8007cf2:	b112      	cbz	r2, 8007cfa <_printf_common+0x2a>
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	f8c9 3000 	str.w	r3, [r9]
 8007cfa:	6823      	ldr	r3, [r4, #0]
 8007cfc:	0699      	lsls	r1, r3, #26
 8007cfe:	bf42      	ittt	mi
 8007d00:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007d04:	3302      	addmi	r3, #2
 8007d06:	f8c9 3000 	strmi.w	r3, [r9]
 8007d0a:	6825      	ldr	r5, [r4, #0]
 8007d0c:	f015 0506 	ands.w	r5, r5, #6
 8007d10:	d107      	bne.n	8007d22 <_printf_common+0x52>
 8007d12:	f104 0a19 	add.w	sl, r4, #25
 8007d16:	68e3      	ldr	r3, [r4, #12]
 8007d18:	f8d9 2000 	ldr.w	r2, [r9]
 8007d1c:	1a9b      	subs	r3, r3, r2
 8007d1e:	42ab      	cmp	r3, r5
 8007d20:	dc28      	bgt.n	8007d74 <_printf_common+0xa4>
 8007d22:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007d26:	6822      	ldr	r2, [r4, #0]
 8007d28:	3300      	adds	r3, #0
 8007d2a:	bf18      	it	ne
 8007d2c:	2301      	movne	r3, #1
 8007d2e:	0692      	lsls	r2, r2, #26
 8007d30:	d42d      	bmi.n	8007d8e <_printf_common+0xbe>
 8007d32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d36:	4639      	mov	r1, r7
 8007d38:	4630      	mov	r0, r6
 8007d3a:	47c0      	blx	r8
 8007d3c:	3001      	adds	r0, #1
 8007d3e:	d020      	beq.n	8007d82 <_printf_common+0xb2>
 8007d40:	6823      	ldr	r3, [r4, #0]
 8007d42:	68e5      	ldr	r5, [r4, #12]
 8007d44:	f8d9 2000 	ldr.w	r2, [r9]
 8007d48:	f003 0306 	and.w	r3, r3, #6
 8007d4c:	2b04      	cmp	r3, #4
 8007d4e:	bf08      	it	eq
 8007d50:	1aad      	subeq	r5, r5, r2
 8007d52:	68a3      	ldr	r3, [r4, #8]
 8007d54:	6922      	ldr	r2, [r4, #16]
 8007d56:	bf0c      	ite	eq
 8007d58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d5c:	2500      	movne	r5, #0
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	bfc4      	itt	gt
 8007d62:	1a9b      	subgt	r3, r3, r2
 8007d64:	18ed      	addgt	r5, r5, r3
 8007d66:	f04f 0900 	mov.w	r9, #0
 8007d6a:	341a      	adds	r4, #26
 8007d6c:	454d      	cmp	r5, r9
 8007d6e:	d11a      	bne.n	8007da6 <_printf_common+0xd6>
 8007d70:	2000      	movs	r0, #0
 8007d72:	e008      	b.n	8007d86 <_printf_common+0xb6>
 8007d74:	2301      	movs	r3, #1
 8007d76:	4652      	mov	r2, sl
 8007d78:	4639      	mov	r1, r7
 8007d7a:	4630      	mov	r0, r6
 8007d7c:	47c0      	blx	r8
 8007d7e:	3001      	adds	r0, #1
 8007d80:	d103      	bne.n	8007d8a <_printf_common+0xba>
 8007d82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d8a:	3501      	adds	r5, #1
 8007d8c:	e7c3      	b.n	8007d16 <_printf_common+0x46>
 8007d8e:	18e1      	adds	r1, r4, r3
 8007d90:	1c5a      	adds	r2, r3, #1
 8007d92:	2030      	movs	r0, #48	; 0x30
 8007d94:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d98:	4422      	add	r2, r4
 8007d9a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d9e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007da2:	3302      	adds	r3, #2
 8007da4:	e7c5      	b.n	8007d32 <_printf_common+0x62>
 8007da6:	2301      	movs	r3, #1
 8007da8:	4622      	mov	r2, r4
 8007daa:	4639      	mov	r1, r7
 8007dac:	4630      	mov	r0, r6
 8007dae:	47c0      	blx	r8
 8007db0:	3001      	adds	r0, #1
 8007db2:	d0e6      	beq.n	8007d82 <_printf_common+0xb2>
 8007db4:	f109 0901 	add.w	r9, r9, #1
 8007db8:	e7d8      	b.n	8007d6c <_printf_common+0x9c>
	...

08007dbc <_printf_i>:
 8007dbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007dc0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007dc4:	460c      	mov	r4, r1
 8007dc6:	7e09      	ldrb	r1, [r1, #24]
 8007dc8:	b085      	sub	sp, #20
 8007dca:	296e      	cmp	r1, #110	; 0x6e
 8007dcc:	4617      	mov	r7, r2
 8007dce:	4606      	mov	r6, r0
 8007dd0:	4698      	mov	r8, r3
 8007dd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007dd4:	f000 80b3 	beq.w	8007f3e <_printf_i+0x182>
 8007dd8:	d822      	bhi.n	8007e20 <_printf_i+0x64>
 8007dda:	2963      	cmp	r1, #99	; 0x63
 8007ddc:	d036      	beq.n	8007e4c <_printf_i+0x90>
 8007dde:	d80a      	bhi.n	8007df6 <_printf_i+0x3a>
 8007de0:	2900      	cmp	r1, #0
 8007de2:	f000 80b9 	beq.w	8007f58 <_printf_i+0x19c>
 8007de6:	2958      	cmp	r1, #88	; 0x58
 8007de8:	f000 8083 	beq.w	8007ef2 <_printf_i+0x136>
 8007dec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007df0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007df4:	e032      	b.n	8007e5c <_printf_i+0xa0>
 8007df6:	2964      	cmp	r1, #100	; 0x64
 8007df8:	d001      	beq.n	8007dfe <_printf_i+0x42>
 8007dfa:	2969      	cmp	r1, #105	; 0x69
 8007dfc:	d1f6      	bne.n	8007dec <_printf_i+0x30>
 8007dfe:	6820      	ldr	r0, [r4, #0]
 8007e00:	6813      	ldr	r3, [r2, #0]
 8007e02:	0605      	lsls	r5, r0, #24
 8007e04:	f103 0104 	add.w	r1, r3, #4
 8007e08:	d52a      	bpl.n	8007e60 <_printf_i+0xa4>
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	6011      	str	r1, [r2, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	da03      	bge.n	8007e1a <_printf_i+0x5e>
 8007e12:	222d      	movs	r2, #45	; 0x2d
 8007e14:	425b      	negs	r3, r3
 8007e16:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007e1a:	486f      	ldr	r0, [pc, #444]	; (8007fd8 <_printf_i+0x21c>)
 8007e1c:	220a      	movs	r2, #10
 8007e1e:	e039      	b.n	8007e94 <_printf_i+0xd8>
 8007e20:	2973      	cmp	r1, #115	; 0x73
 8007e22:	f000 809d 	beq.w	8007f60 <_printf_i+0x1a4>
 8007e26:	d808      	bhi.n	8007e3a <_printf_i+0x7e>
 8007e28:	296f      	cmp	r1, #111	; 0x6f
 8007e2a:	d020      	beq.n	8007e6e <_printf_i+0xb2>
 8007e2c:	2970      	cmp	r1, #112	; 0x70
 8007e2e:	d1dd      	bne.n	8007dec <_printf_i+0x30>
 8007e30:	6823      	ldr	r3, [r4, #0]
 8007e32:	f043 0320 	orr.w	r3, r3, #32
 8007e36:	6023      	str	r3, [r4, #0]
 8007e38:	e003      	b.n	8007e42 <_printf_i+0x86>
 8007e3a:	2975      	cmp	r1, #117	; 0x75
 8007e3c:	d017      	beq.n	8007e6e <_printf_i+0xb2>
 8007e3e:	2978      	cmp	r1, #120	; 0x78
 8007e40:	d1d4      	bne.n	8007dec <_printf_i+0x30>
 8007e42:	2378      	movs	r3, #120	; 0x78
 8007e44:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007e48:	4864      	ldr	r0, [pc, #400]	; (8007fdc <_printf_i+0x220>)
 8007e4a:	e055      	b.n	8007ef8 <_printf_i+0x13c>
 8007e4c:	6813      	ldr	r3, [r2, #0]
 8007e4e:	1d19      	adds	r1, r3, #4
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	6011      	str	r1, [r2, #0]
 8007e54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e08c      	b.n	8007f7a <_printf_i+0x1be>
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	6011      	str	r1, [r2, #0]
 8007e64:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007e68:	bf18      	it	ne
 8007e6a:	b21b      	sxthne	r3, r3
 8007e6c:	e7cf      	b.n	8007e0e <_printf_i+0x52>
 8007e6e:	6813      	ldr	r3, [r2, #0]
 8007e70:	6825      	ldr	r5, [r4, #0]
 8007e72:	1d18      	adds	r0, r3, #4
 8007e74:	6010      	str	r0, [r2, #0]
 8007e76:	0628      	lsls	r0, r5, #24
 8007e78:	d501      	bpl.n	8007e7e <_printf_i+0xc2>
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	e002      	b.n	8007e84 <_printf_i+0xc8>
 8007e7e:	0668      	lsls	r0, r5, #25
 8007e80:	d5fb      	bpl.n	8007e7a <_printf_i+0xbe>
 8007e82:	881b      	ldrh	r3, [r3, #0]
 8007e84:	4854      	ldr	r0, [pc, #336]	; (8007fd8 <_printf_i+0x21c>)
 8007e86:	296f      	cmp	r1, #111	; 0x6f
 8007e88:	bf14      	ite	ne
 8007e8a:	220a      	movne	r2, #10
 8007e8c:	2208      	moveq	r2, #8
 8007e8e:	2100      	movs	r1, #0
 8007e90:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e94:	6865      	ldr	r5, [r4, #4]
 8007e96:	60a5      	str	r5, [r4, #8]
 8007e98:	2d00      	cmp	r5, #0
 8007e9a:	f2c0 8095 	blt.w	8007fc8 <_printf_i+0x20c>
 8007e9e:	6821      	ldr	r1, [r4, #0]
 8007ea0:	f021 0104 	bic.w	r1, r1, #4
 8007ea4:	6021      	str	r1, [r4, #0]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d13d      	bne.n	8007f26 <_printf_i+0x16a>
 8007eaa:	2d00      	cmp	r5, #0
 8007eac:	f040 808e 	bne.w	8007fcc <_printf_i+0x210>
 8007eb0:	4665      	mov	r5, ip
 8007eb2:	2a08      	cmp	r2, #8
 8007eb4:	d10b      	bne.n	8007ece <_printf_i+0x112>
 8007eb6:	6823      	ldr	r3, [r4, #0]
 8007eb8:	07db      	lsls	r3, r3, #31
 8007eba:	d508      	bpl.n	8007ece <_printf_i+0x112>
 8007ebc:	6923      	ldr	r3, [r4, #16]
 8007ebe:	6862      	ldr	r2, [r4, #4]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	bfde      	ittt	le
 8007ec4:	2330      	movle	r3, #48	; 0x30
 8007ec6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007eca:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007ece:	ebac 0305 	sub.w	r3, ip, r5
 8007ed2:	6123      	str	r3, [r4, #16]
 8007ed4:	f8cd 8000 	str.w	r8, [sp]
 8007ed8:	463b      	mov	r3, r7
 8007eda:	aa03      	add	r2, sp, #12
 8007edc:	4621      	mov	r1, r4
 8007ede:	4630      	mov	r0, r6
 8007ee0:	f7ff fef6 	bl	8007cd0 <_printf_common>
 8007ee4:	3001      	adds	r0, #1
 8007ee6:	d14d      	bne.n	8007f84 <_printf_i+0x1c8>
 8007ee8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007eec:	b005      	add	sp, #20
 8007eee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ef2:	4839      	ldr	r0, [pc, #228]	; (8007fd8 <_printf_i+0x21c>)
 8007ef4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007ef8:	6813      	ldr	r3, [r2, #0]
 8007efa:	6821      	ldr	r1, [r4, #0]
 8007efc:	1d1d      	adds	r5, r3, #4
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	6015      	str	r5, [r2, #0]
 8007f02:	060a      	lsls	r2, r1, #24
 8007f04:	d50b      	bpl.n	8007f1e <_printf_i+0x162>
 8007f06:	07ca      	lsls	r2, r1, #31
 8007f08:	bf44      	itt	mi
 8007f0a:	f041 0120 	orrmi.w	r1, r1, #32
 8007f0e:	6021      	strmi	r1, [r4, #0]
 8007f10:	b91b      	cbnz	r3, 8007f1a <_printf_i+0x15e>
 8007f12:	6822      	ldr	r2, [r4, #0]
 8007f14:	f022 0220 	bic.w	r2, r2, #32
 8007f18:	6022      	str	r2, [r4, #0]
 8007f1a:	2210      	movs	r2, #16
 8007f1c:	e7b7      	b.n	8007e8e <_printf_i+0xd2>
 8007f1e:	064d      	lsls	r5, r1, #25
 8007f20:	bf48      	it	mi
 8007f22:	b29b      	uxthmi	r3, r3
 8007f24:	e7ef      	b.n	8007f06 <_printf_i+0x14a>
 8007f26:	4665      	mov	r5, ip
 8007f28:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f2c:	fb02 3311 	mls	r3, r2, r1, r3
 8007f30:	5cc3      	ldrb	r3, [r0, r3]
 8007f32:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007f36:	460b      	mov	r3, r1
 8007f38:	2900      	cmp	r1, #0
 8007f3a:	d1f5      	bne.n	8007f28 <_printf_i+0x16c>
 8007f3c:	e7b9      	b.n	8007eb2 <_printf_i+0xf6>
 8007f3e:	6813      	ldr	r3, [r2, #0]
 8007f40:	6825      	ldr	r5, [r4, #0]
 8007f42:	6961      	ldr	r1, [r4, #20]
 8007f44:	1d18      	adds	r0, r3, #4
 8007f46:	6010      	str	r0, [r2, #0]
 8007f48:	0628      	lsls	r0, r5, #24
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	d501      	bpl.n	8007f52 <_printf_i+0x196>
 8007f4e:	6019      	str	r1, [r3, #0]
 8007f50:	e002      	b.n	8007f58 <_printf_i+0x19c>
 8007f52:	066a      	lsls	r2, r5, #25
 8007f54:	d5fb      	bpl.n	8007f4e <_printf_i+0x192>
 8007f56:	8019      	strh	r1, [r3, #0]
 8007f58:	2300      	movs	r3, #0
 8007f5a:	6123      	str	r3, [r4, #16]
 8007f5c:	4665      	mov	r5, ip
 8007f5e:	e7b9      	b.n	8007ed4 <_printf_i+0x118>
 8007f60:	6813      	ldr	r3, [r2, #0]
 8007f62:	1d19      	adds	r1, r3, #4
 8007f64:	6011      	str	r1, [r2, #0]
 8007f66:	681d      	ldr	r5, [r3, #0]
 8007f68:	6862      	ldr	r2, [r4, #4]
 8007f6a:	2100      	movs	r1, #0
 8007f6c:	4628      	mov	r0, r5
 8007f6e:	f7f8 f957 	bl	8000220 <memchr>
 8007f72:	b108      	cbz	r0, 8007f78 <_printf_i+0x1bc>
 8007f74:	1b40      	subs	r0, r0, r5
 8007f76:	6060      	str	r0, [r4, #4]
 8007f78:	6863      	ldr	r3, [r4, #4]
 8007f7a:	6123      	str	r3, [r4, #16]
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f82:	e7a7      	b.n	8007ed4 <_printf_i+0x118>
 8007f84:	6923      	ldr	r3, [r4, #16]
 8007f86:	462a      	mov	r2, r5
 8007f88:	4639      	mov	r1, r7
 8007f8a:	4630      	mov	r0, r6
 8007f8c:	47c0      	blx	r8
 8007f8e:	3001      	adds	r0, #1
 8007f90:	d0aa      	beq.n	8007ee8 <_printf_i+0x12c>
 8007f92:	6823      	ldr	r3, [r4, #0]
 8007f94:	079b      	lsls	r3, r3, #30
 8007f96:	d413      	bmi.n	8007fc0 <_printf_i+0x204>
 8007f98:	68e0      	ldr	r0, [r4, #12]
 8007f9a:	9b03      	ldr	r3, [sp, #12]
 8007f9c:	4298      	cmp	r0, r3
 8007f9e:	bfb8      	it	lt
 8007fa0:	4618      	movlt	r0, r3
 8007fa2:	e7a3      	b.n	8007eec <_printf_i+0x130>
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	464a      	mov	r2, r9
 8007fa8:	4639      	mov	r1, r7
 8007faa:	4630      	mov	r0, r6
 8007fac:	47c0      	blx	r8
 8007fae:	3001      	adds	r0, #1
 8007fb0:	d09a      	beq.n	8007ee8 <_printf_i+0x12c>
 8007fb2:	3501      	adds	r5, #1
 8007fb4:	68e3      	ldr	r3, [r4, #12]
 8007fb6:	9a03      	ldr	r2, [sp, #12]
 8007fb8:	1a9b      	subs	r3, r3, r2
 8007fba:	42ab      	cmp	r3, r5
 8007fbc:	dcf2      	bgt.n	8007fa4 <_printf_i+0x1e8>
 8007fbe:	e7eb      	b.n	8007f98 <_printf_i+0x1dc>
 8007fc0:	2500      	movs	r5, #0
 8007fc2:	f104 0919 	add.w	r9, r4, #25
 8007fc6:	e7f5      	b.n	8007fb4 <_printf_i+0x1f8>
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d1ac      	bne.n	8007f26 <_printf_i+0x16a>
 8007fcc:	7803      	ldrb	r3, [r0, #0]
 8007fce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007fd2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fd6:	e76c      	b.n	8007eb2 <_printf_i+0xf6>
 8007fd8:	08008591 	.word	0x08008591
 8007fdc:	080085a2 	.word	0x080085a2

08007fe0 <_sbrk_r>:
 8007fe0:	b538      	push	{r3, r4, r5, lr}
 8007fe2:	4c06      	ldr	r4, [pc, #24]	; (8007ffc <_sbrk_r+0x1c>)
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	4605      	mov	r5, r0
 8007fe8:	4608      	mov	r0, r1
 8007fea:	6023      	str	r3, [r4, #0]
 8007fec:	f7f9 f920 	bl	8001230 <_sbrk>
 8007ff0:	1c43      	adds	r3, r0, #1
 8007ff2:	d102      	bne.n	8007ffa <_sbrk_r+0x1a>
 8007ff4:	6823      	ldr	r3, [r4, #0]
 8007ff6:	b103      	cbz	r3, 8007ffa <_sbrk_r+0x1a>
 8007ff8:	602b      	str	r3, [r5, #0]
 8007ffa:	bd38      	pop	{r3, r4, r5, pc}
 8007ffc:	200003c8 	.word	0x200003c8

08008000 <__sread>:
 8008000:	b510      	push	{r4, lr}
 8008002:	460c      	mov	r4, r1
 8008004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008008:	f000 f8e0 	bl	80081cc <_read_r>
 800800c:	2800      	cmp	r0, #0
 800800e:	bfab      	itete	ge
 8008010:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008012:	89a3      	ldrhlt	r3, [r4, #12]
 8008014:	181b      	addge	r3, r3, r0
 8008016:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800801a:	bfac      	ite	ge
 800801c:	6563      	strge	r3, [r4, #84]	; 0x54
 800801e:	81a3      	strhlt	r3, [r4, #12]
 8008020:	bd10      	pop	{r4, pc}

08008022 <__swrite>:
 8008022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008026:	461f      	mov	r7, r3
 8008028:	898b      	ldrh	r3, [r1, #12]
 800802a:	05db      	lsls	r3, r3, #23
 800802c:	4605      	mov	r5, r0
 800802e:	460c      	mov	r4, r1
 8008030:	4616      	mov	r6, r2
 8008032:	d505      	bpl.n	8008040 <__swrite+0x1e>
 8008034:	2302      	movs	r3, #2
 8008036:	2200      	movs	r2, #0
 8008038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800803c:	f000 f868 	bl	8008110 <_lseek_r>
 8008040:	89a3      	ldrh	r3, [r4, #12]
 8008042:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008046:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800804a:	81a3      	strh	r3, [r4, #12]
 800804c:	4632      	mov	r2, r6
 800804e:	463b      	mov	r3, r7
 8008050:	4628      	mov	r0, r5
 8008052:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008056:	f000 b817 	b.w	8008088 <_write_r>

0800805a <__sseek>:
 800805a:	b510      	push	{r4, lr}
 800805c:	460c      	mov	r4, r1
 800805e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008062:	f000 f855 	bl	8008110 <_lseek_r>
 8008066:	1c43      	adds	r3, r0, #1
 8008068:	89a3      	ldrh	r3, [r4, #12]
 800806a:	bf15      	itete	ne
 800806c:	6560      	strne	r0, [r4, #84]	; 0x54
 800806e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008072:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008076:	81a3      	strheq	r3, [r4, #12]
 8008078:	bf18      	it	ne
 800807a:	81a3      	strhne	r3, [r4, #12]
 800807c:	bd10      	pop	{r4, pc}

0800807e <__sclose>:
 800807e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008082:	f000 b813 	b.w	80080ac <_close_r>
	...

08008088 <_write_r>:
 8008088:	b538      	push	{r3, r4, r5, lr}
 800808a:	4c07      	ldr	r4, [pc, #28]	; (80080a8 <_write_r+0x20>)
 800808c:	4605      	mov	r5, r0
 800808e:	4608      	mov	r0, r1
 8008090:	4611      	mov	r1, r2
 8008092:	2200      	movs	r2, #0
 8008094:	6022      	str	r2, [r4, #0]
 8008096:	461a      	mov	r2, r3
 8008098:	f7f8 fccf 	bl	8000a3a <_write>
 800809c:	1c43      	adds	r3, r0, #1
 800809e:	d102      	bne.n	80080a6 <_write_r+0x1e>
 80080a0:	6823      	ldr	r3, [r4, #0]
 80080a2:	b103      	cbz	r3, 80080a6 <_write_r+0x1e>
 80080a4:	602b      	str	r3, [r5, #0]
 80080a6:	bd38      	pop	{r3, r4, r5, pc}
 80080a8:	200003c8 	.word	0x200003c8

080080ac <_close_r>:
 80080ac:	b538      	push	{r3, r4, r5, lr}
 80080ae:	4c06      	ldr	r4, [pc, #24]	; (80080c8 <_close_r+0x1c>)
 80080b0:	2300      	movs	r3, #0
 80080b2:	4605      	mov	r5, r0
 80080b4:	4608      	mov	r0, r1
 80080b6:	6023      	str	r3, [r4, #0]
 80080b8:	f7f9 f885 	bl	80011c6 <_close>
 80080bc:	1c43      	adds	r3, r0, #1
 80080be:	d102      	bne.n	80080c6 <_close_r+0x1a>
 80080c0:	6823      	ldr	r3, [r4, #0]
 80080c2:	b103      	cbz	r3, 80080c6 <_close_r+0x1a>
 80080c4:	602b      	str	r3, [r5, #0]
 80080c6:	bd38      	pop	{r3, r4, r5, pc}
 80080c8:	200003c8 	.word	0x200003c8

080080cc <_fstat_r>:
 80080cc:	b538      	push	{r3, r4, r5, lr}
 80080ce:	4c07      	ldr	r4, [pc, #28]	; (80080ec <_fstat_r+0x20>)
 80080d0:	2300      	movs	r3, #0
 80080d2:	4605      	mov	r5, r0
 80080d4:	4608      	mov	r0, r1
 80080d6:	4611      	mov	r1, r2
 80080d8:	6023      	str	r3, [r4, #0]
 80080da:	f7f9 f880 	bl	80011de <_fstat>
 80080de:	1c43      	adds	r3, r0, #1
 80080e0:	d102      	bne.n	80080e8 <_fstat_r+0x1c>
 80080e2:	6823      	ldr	r3, [r4, #0]
 80080e4:	b103      	cbz	r3, 80080e8 <_fstat_r+0x1c>
 80080e6:	602b      	str	r3, [r5, #0]
 80080e8:	bd38      	pop	{r3, r4, r5, pc}
 80080ea:	bf00      	nop
 80080ec:	200003c8 	.word	0x200003c8

080080f0 <_isatty_r>:
 80080f0:	b538      	push	{r3, r4, r5, lr}
 80080f2:	4c06      	ldr	r4, [pc, #24]	; (800810c <_isatty_r+0x1c>)
 80080f4:	2300      	movs	r3, #0
 80080f6:	4605      	mov	r5, r0
 80080f8:	4608      	mov	r0, r1
 80080fa:	6023      	str	r3, [r4, #0]
 80080fc:	f7f9 f87f 	bl	80011fe <_isatty>
 8008100:	1c43      	adds	r3, r0, #1
 8008102:	d102      	bne.n	800810a <_isatty_r+0x1a>
 8008104:	6823      	ldr	r3, [r4, #0]
 8008106:	b103      	cbz	r3, 800810a <_isatty_r+0x1a>
 8008108:	602b      	str	r3, [r5, #0]
 800810a:	bd38      	pop	{r3, r4, r5, pc}
 800810c:	200003c8 	.word	0x200003c8

08008110 <_lseek_r>:
 8008110:	b538      	push	{r3, r4, r5, lr}
 8008112:	4c07      	ldr	r4, [pc, #28]	; (8008130 <_lseek_r+0x20>)
 8008114:	4605      	mov	r5, r0
 8008116:	4608      	mov	r0, r1
 8008118:	4611      	mov	r1, r2
 800811a:	2200      	movs	r2, #0
 800811c:	6022      	str	r2, [r4, #0]
 800811e:	461a      	mov	r2, r3
 8008120:	f7f9 f878 	bl	8001214 <_lseek>
 8008124:	1c43      	adds	r3, r0, #1
 8008126:	d102      	bne.n	800812e <_lseek_r+0x1e>
 8008128:	6823      	ldr	r3, [r4, #0]
 800812a:	b103      	cbz	r3, 800812e <_lseek_r+0x1e>
 800812c:	602b      	str	r3, [r5, #0]
 800812e:	bd38      	pop	{r3, r4, r5, pc}
 8008130:	200003c8 	.word	0x200003c8

08008134 <memcpy>:
 8008134:	b510      	push	{r4, lr}
 8008136:	1e43      	subs	r3, r0, #1
 8008138:	440a      	add	r2, r1
 800813a:	4291      	cmp	r1, r2
 800813c:	d100      	bne.n	8008140 <memcpy+0xc>
 800813e:	bd10      	pop	{r4, pc}
 8008140:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008144:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008148:	e7f7      	b.n	800813a <memcpy+0x6>

0800814a <memmove>:
 800814a:	4288      	cmp	r0, r1
 800814c:	b510      	push	{r4, lr}
 800814e:	eb01 0302 	add.w	r3, r1, r2
 8008152:	d807      	bhi.n	8008164 <memmove+0x1a>
 8008154:	1e42      	subs	r2, r0, #1
 8008156:	4299      	cmp	r1, r3
 8008158:	d00a      	beq.n	8008170 <memmove+0x26>
 800815a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800815e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008162:	e7f8      	b.n	8008156 <memmove+0xc>
 8008164:	4283      	cmp	r3, r0
 8008166:	d9f5      	bls.n	8008154 <memmove+0xa>
 8008168:	1881      	adds	r1, r0, r2
 800816a:	1ad2      	subs	r2, r2, r3
 800816c:	42d3      	cmn	r3, r2
 800816e:	d100      	bne.n	8008172 <memmove+0x28>
 8008170:	bd10      	pop	{r4, pc}
 8008172:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008176:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800817a:	e7f7      	b.n	800816c <memmove+0x22>

0800817c <__malloc_lock>:
 800817c:	4770      	bx	lr

0800817e <__malloc_unlock>:
 800817e:	4770      	bx	lr

08008180 <_realloc_r>:
 8008180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008182:	4607      	mov	r7, r0
 8008184:	4614      	mov	r4, r2
 8008186:	460e      	mov	r6, r1
 8008188:	b921      	cbnz	r1, 8008194 <_realloc_r+0x14>
 800818a:	4611      	mov	r1, r2
 800818c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008190:	f7ff bab2 	b.w	80076f8 <_malloc_r>
 8008194:	b922      	cbnz	r2, 80081a0 <_realloc_r+0x20>
 8008196:	f7ff fa61 	bl	800765c <_free_r>
 800819a:	4625      	mov	r5, r4
 800819c:	4628      	mov	r0, r5
 800819e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081a0:	f000 f826 	bl	80081f0 <_malloc_usable_size_r>
 80081a4:	42a0      	cmp	r0, r4
 80081a6:	d20f      	bcs.n	80081c8 <_realloc_r+0x48>
 80081a8:	4621      	mov	r1, r4
 80081aa:	4638      	mov	r0, r7
 80081ac:	f7ff faa4 	bl	80076f8 <_malloc_r>
 80081b0:	4605      	mov	r5, r0
 80081b2:	2800      	cmp	r0, #0
 80081b4:	d0f2      	beq.n	800819c <_realloc_r+0x1c>
 80081b6:	4631      	mov	r1, r6
 80081b8:	4622      	mov	r2, r4
 80081ba:	f7ff ffbb 	bl	8008134 <memcpy>
 80081be:	4631      	mov	r1, r6
 80081c0:	4638      	mov	r0, r7
 80081c2:	f7ff fa4b 	bl	800765c <_free_r>
 80081c6:	e7e9      	b.n	800819c <_realloc_r+0x1c>
 80081c8:	4635      	mov	r5, r6
 80081ca:	e7e7      	b.n	800819c <_realloc_r+0x1c>

080081cc <_read_r>:
 80081cc:	b538      	push	{r3, r4, r5, lr}
 80081ce:	4c07      	ldr	r4, [pc, #28]	; (80081ec <_read_r+0x20>)
 80081d0:	4605      	mov	r5, r0
 80081d2:	4608      	mov	r0, r1
 80081d4:	4611      	mov	r1, r2
 80081d6:	2200      	movs	r2, #0
 80081d8:	6022      	str	r2, [r4, #0]
 80081da:	461a      	mov	r2, r3
 80081dc:	f7f8 ffd6 	bl	800118c <_read>
 80081e0:	1c43      	adds	r3, r0, #1
 80081e2:	d102      	bne.n	80081ea <_read_r+0x1e>
 80081e4:	6823      	ldr	r3, [r4, #0]
 80081e6:	b103      	cbz	r3, 80081ea <_read_r+0x1e>
 80081e8:	602b      	str	r3, [r5, #0]
 80081ea:	bd38      	pop	{r3, r4, r5, pc}
 80081ec:	200003c8 	.word	0x200003c8

080081f0 <_malloc_usable_size_r>:
 80081f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081f4:	1f18      	subs	r0, r3, #4
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	bfbc      	itt	lt
 80081fa:	580b      	ldrlt	r3, [r1, r0]
 80081fc:	18c0      	addlt	r0, r0, r3
 80081fe:	4770      	bx	lr

08008200 <_init>:
 8008200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008202:	bf00      	nop
 8008204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008206:	bc08      	pop	{r3}
 8008208:	469e      	mov	lr, r3
 800820a:	4770      	bx	lr

0800820c <_fini>:
 800820c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800820e:	bf00      	nop
 8008210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008212:	bc08      	pop	{r3}
 8008214:	469e      	mov	lr, r3
 8008216:	4770      	bx	lr
