
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009150  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000430  08009330  08009330  00019330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009760  08009760  00020444  2**0
                  CONTENTS
  4 .ARM          00000000  08009760  08009760  00020444  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009760  08009760  00020444  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009760  08009760  00019760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009764  08009764  00019764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000444  20000000  08009768  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000498  20000444  08009bac  00020444  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008dc  08009bac  000208dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020444  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023013  00000000  00000000  00020474  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004856  00000000  00000000  00043487  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b78  00000000  00000000  00047ce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001930  00000000  00000000  00049858  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ed17  00000000  00000000  0004b188  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ac48  00000000  00000000  00079e9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00123a2b  00000000  00000000  00094ae7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b8512  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007934  00000000  00000000  001b8590  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000444 	.word	0x20000444
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009318 	.word	0x08009318

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000448 	.word	0x20000448
 800021c:	08009318 	.word	0x08009318

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <DM_RefreshBackgroundLayout>:
 * Call this only once during init.
 *
 *
 */
void DM_RefreshBackgroundLayout()
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af04      	add	r7, sp, #16
	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[0],
 80002c6:	4b1d      	ldr	r3, [pc, #116]	; (800033c <DM_RefreshBackgroundLayout+0x7c>)
 80002c8:	8818      	ldrh	r0, [r3, #0]
 80002ca:	2300      	movs	r3, #0
 80002cc:	9302      	str	r3, [sp, #8]
 80002ce:	2302      	movs	r3, #2
 80002d0:	9301      	str	r3, [sp, #4]
 80002d2:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80002d6:	9300      	str	r3, [sp, #0]
 80002d8:	2332      	movs	r3, #50	; 0x32
 80002da:	2250      	movs	r2, #80	; 0x50
 80002dc:	21c8      	movs	r1, #200	; 0xc8
 80002de:	f007 fa09 	bl	80076f4 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKCYAN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[1],
 80002e2:	4b16      	ldr	r3, [pc, #88]	; (800033c <DM_RefreshBackgroundLayout+0x7c>)
 80002e4:	8858      	ldrh	r0, [r3, #2]
 80002e6:	2300      	movs	r3, #0
 80002e8:	9302      	str	r3, [sp, #8]
 80002ea:	2302      	movs	r3, #2
 80002ec:	9301      	str	r3, [sp, #4]
 80002ee:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80002f2:	9300      	str	r3, [sp, #0]
 80002f4:	2332      	movs	r3, #50	; 0x32
 80002f6:	2250      	movs	r2, #80	; 0x50
 80002f8:	21c8      	movs	r1, #200	; 0xc8
 80002fa:	f007 f9fb 	bl	80076f4 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKGREEN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[2],
 80002fe:	4b0f      	ldr	r3, [pc, #60]	; (800033c <DM_RefreshBackgroundLayout+0x7c>)
 8000300:	8898      	ldrh	r0, [r3, #4]
 8000302:	2300      	movs	r3, #0
 8000304:	9302      	str	r3, [sp, #8]
 8000306:	2302      	movs	r3, #2
 8000308:	9301      	str	r3, [sp, #4]
 800030a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800030e:	9300      	str	r3, [sp, #0]
 8000310:	2332      	movs	r3, #50	; 0x32
 8000312:	2250      	movs	r2, #80	; 0x50
 8000314:	21c8      	movs	r1, #200	; 0xc8
 8000316:	f007 f9ed 	bl	80076f4 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													YELLOW,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[3],
 800031a:	4b08      	ldr	r3, [pc, #32]	; (800033c <DM_RefreshBackgroundLayout+0x7c>)
 800031c:	88d8      	ldrh	r0, [r3, #6]
 800031e:	2300      	movs	r3, #0
 8000320:	9302      	str	r3, [sp, #8]
 8000322:	2302      	movs	r3, #2
 8000324:	9301      	str	r3, [sp, #4]
 8000326:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800032a:	9300      	str	r3, [sp, #0]
 800032c:	2332      	movs	r3, #50	; 0x32
 800032e:	2250      	movs	r2, #80	; 0x50
 8000330:	21c8      	movs	r1, #200	; 0xc8
 8000332:	f007 f9df 	bl	80076f4 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_WIDTH,
													BTN_HEIGHT,
													RED,
													BORDER_SIZE,
													BLACK);
}
 8000336:	bf00      	nop
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}
 800033c:	20000000 	.word	0x20000000

08000340 <DM_Init>:
 *
 *
 *
 */
void DM_Init()
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af02      	add	r7, sp, #8
	  ILI9341_Init();
 8000346:	f007 fc9d 	bl	8007c84 <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 800034a:	2003      	movs	r0, #3
 800034c:	f007 fc3c 	bl	8007bc8 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 8000350:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000354:	f007 fe4c 	bl	8007ff0 <ILI9341_Fill_Screen>
	  ILI9341_Draw_Text("Initialising", 10, 10, BLACK, 1, WHITE);
 8000358:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800035c:	9301      	str	r3, [sp, #4]
 800035e:	2301      	movs	r3, #1
 8000360:	9300      	str	r3, [sp, #0]
 8000362:	2300      	movs	r3, #0
 8000364:	220a      	movs	r2, #10
 8000366:	210a      	movs	r1, #10
 8000368:	4805      	ldr	r0, [pc, #20]	; (8000380 <DM_Init+0x40>)
 800036a:	f007 fb2d 	bl	80079c8 <ILI9341_Draw_Text>
	  DM_RefreshBackgroundLayout();
 800036e:	f7ff ffa7 	bl	80002c0 <DM_RefreshBackgroundLayout>
	  printf("Init Completed\n");
 8000372:	4804      	ldr	r0, [pc, #16]	; (8000384 <DM_Init+0x44>)
 8000374:	f008 f8fc 	bl	8008570 <puts>
}
 8000378:	bf00      	nop
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	08009330 	.word	0x08009330
 8000384:	08009340 	.word	0x08009340

08000388 <DM_UpdateDisplay>:
 *
 *
 */

void DM_UpdateDisplay()
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af02      	add	r7, sp, #8
		//ILI9341_Draw_Text(tmp, STRINGREG[0].x, STRINGREG[0].y, BLACK, STRINGREG[0].size, DARKCYAN);
		ILI9341_Draw_Text(tmp, 10, 210, BLACK, 2, DARKCYAN);
	}
*/

	ILI9341_Draw_Text("FUNC", 10, 210, BLACK, 2, DARKCYAN);
 800038e:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8000392:	9301      	str	r3, [sp, #4]
 8000394:	2302      	movs	r3, #2
 8000396:	9300      	str	r3, [sp, #0]
 8000398:	2300      	movs	r3, #0
 800039a:	22d2      	movs	r2, #210	; 0xd2
 800039c:	210a      	movs	r1, #10
 800039e:	4814      	ldr	r0, [pc, #80]	; (80003f0 <DM_UpdateDisplay+0x68>)
 80003a0:	f007 fb12 	bl	80079c8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FREQ", 100, 210, BLACK, 2, DARKGREEN);
 80003a4:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80003a8:	9301      	str	r3, [sp, #4]
 80003aa:	2302      	movs	r3, #2
 80003ac:	9300      	str	r3, [sp, #0]
 80003ae:	2300      	movs	r3, #0
 80003b0:	22d2      	movs	r2, #210	; 0xd2
 80003b2:	2164      	movs	r1, #100	; 0x64
 80003b4:	480f      	ldr	r0, [pc, #60]	; (80003f4 <DM_UpdateDisplay+0x6c>)
 80003b6:	f007 fb07 	bl	80079c8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("AMPL", 175, 210, BLACK, 2, YELLOW);
 80003ba:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80003be:	9301      	str	r3, [sp, #4]
 80003c0:	2302      	movs	r3, #2
 80003c2:	9300      	str	r3, [sp, #0]
 80003c4:	2300      	movs	r3, #0
 80003c6:	22d2      	movs	r2, #210	; 0xd2
 80003c8:	21af      	movs	r1, #175	; 0xaf
 80003ca:	480b      	ldr	r0, [pc, #44]	; (80003f8 <DM_UpdateDisplay+0x70>)
 80003cc:	f007 fafc 	bl	80079c8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("BIAS", 260, 210, BLACK, 2, RED);
 80003d0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80003d4:	9301      	str	r3, [sp, #4]
 80003d6:	2302      	movs	r3, #2
 80003d8:	9300      	str	r3, [sp, #0]
 80003da:	2300      	movs	r3, #0
 80003dc:	22d2      	movs	r2, #210	; 0xd2
 80003de:	f44f 7182 	mov.w	r1, #260	; 0x104
 80003e2:	4806      	ldr	r0, [pc, #24]	; (80003fc <DM_UpdateDisplay+0x74>)
 80003e4:	f007 faf0 	bl	80079c8 <ILI9341_Draw_Text>


}
 80003e8:	bf00      	nop
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	080093b0 	.word	0x080093b0
 80003f4:	080093b8 	.word	0x080093b8
 80003f8:	080093c0 	.word	0x080093c0
 80003fc:	080093c8 	.word	0x080093c8

08000400 <EM_SetNewEvent>:
/*
 *
 * 		Set by NVIC interrupt handlers
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	4603      	mov	r3, r0
 8000408:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 800040a:	4a04      	ldr	r2, [pc, #16]	; (800041c <EM_SetNewEvent+0x1c>)
 800040c:	79fb      	ldrb	r3, [r7, #7]
 800040e:	7013      	strb	r3, [r2, #0]
}
 8000410:	bf00      	nop
 8000412:	370c      	adds	r7, #12
 8000414:	46bd      	mov	sp, r7
 8000416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041a:	4770      	bx	lr
 800041c:	20000482 	.word	0x20000482

08000420 <_ClearEvent>:

void _ClearEvent()
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
	eNewEvent = Idle_Event;
 8000424:	4b03      	ldr	r3, [pc, #12]	; (8000434 <_ClearEvent+0x14>)
 8000426:	2200      	movs	r2, #0
 8000428:	701a      	strb	r2, [r3, #0]
}
 800042a:	bf00      	nop
 800042c:	46bd      	mov	sp, r7
 800042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000432:	4770      	bx	lr
 8000434:	20000482 	.word	0x20000482

08000438 <_FuncAdjustHandler>:

eSystemState _FuncAdjustHandler(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
	printf("FunctionAdjust Event captured\n");
 800043c:	4803      	ldr	r0, [pc, #12]	; (800044c <_FuncAdjustHandler+0x14>)
 800043e:	f008 f897 	bl	8008570 <puts>
	_ClearEvent();
 8000442:	f7ff ffed 	bl	8000420 <_ClearEvent>
	return Idle_State;
 8000446:	2300      	movs	r3, #0
}
 8000448:	4618      	mov	r0, r3
 800044a:	bd80      	pop	{r7, pc}
 800044c:	080093d4 	.word	0x080093d4

08000450 <_FreqAdjustHandler>:

eSystemState _FreqAdjustHandler(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
	printf("FreqAdjust Event captured\n");
 8000454:	4803      	ldr	r0, [pc, #12]	; (8000464 <_FreqAdjustHandler+0x14>)
 8000456:	f008 f88b 	bl	8008570 <puts>
	_ClearEvent();
 800045a:	f7ff ffe1 	bl	8000420 <_ClearEvent>
	return Idle_State;
 800045e:	2300      	movs	r3, #0
}
 8000460:	4618      	mov	r0, r3
 8000462:	bd80      	pop	{r7, pc}
 8000464:	080093f4 	.word	0x080093f4

08000468 <_AmplAdjustHandler>:

eSystemState _AmplAdjustHandler(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
	printf("AmplitudeAdjust Event captured\n");
 800046c:	4803      	ldr	r0, [pc, #12]	; (800047c <_AmplAdjustHandler+0x14>)
 800046e:	f008 f87f 	bl	8008570 <puts>
	_ClearEvent();
 8000472:	f7ff ffd5 	bl	8000420 <_ClearEvent>
	return Idle_State;
 8000476:	2300      	movs	r3, #0
}
 8000478:	4618      	mov	r0, r3
 800047a:	bd80      	pop	{r7, pc}
 800047c:	08009410 	.word	0x08009410

08000480 <_BiasAdjustHandler>:

eSystemState _BiasAdjustHandler(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
	printf("BiasAdjust Event captured\n");
 8000484:	4803      	ldr	r0, [pc, #12]	; (8000494 <_BiasAdjustHandler+0x14>)
 8000486:	f008 f873 	bl	8008570 <puts>
	_ClearEvent();
 800048a:	f7ff ffc9 	bl	8000420 <_ClearEvent>
	return Idle_State;
 800048e:	2300      	movs	r3, #0
}
 8000490:	4618      	mov	r0, r3
 8000492:	bd80      	pop	{r7, pc}
 8000494:	08009430 	.word	0x08009430

08000498 <_AdjustConfirmedHandler>:

eSystemState _AdjustConfirmedHandler(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
	printf("AdjustConfirmed Event captured\n");
 800049c:	4803      	ldr	r0, [pc, #12]	; (80004ac <_AdjustConfirmedHandler+0x14>)
 800049e:	f008 f867 	bl	8008570 <puts>
	_ClearEvent();
 80004a2:	f7ff ffbd 	bl	8000420 <_ClearEvent>
	return Idle_State;
 80004a6:	2300      	movs	r3, #0
}
 80004a8:	4618      	mov	r0, r3
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	0800944c 	.word	0x0800944c

080004b0 <EM_ProcessEvent>:



void EM_ProcessEvent()
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0

	switch(eNextState)
 80004b4:	4b1c      	ldr	r3, [pc, #112]	; (8000528 <EM_ProcessEvent+0x78>)
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d000      	beq.n	80004be <EM_ProcessEvent+0xe>
		case Bias_Select_state:

			break;
*/
		default:
			break;
 80004bc:	e032      	b.n	8000524 <EM_ProcessEvent+0x74>
			if(eNewEvent == Func_Select_Event)
 80004be:	4b1b      	ldr	r3, [pc, #108]	; (800052c <EM_ProcessEvent+0x7c>)
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	2b01      	cmp	r3, #1
 80004c4:	d105      	bne.n	80004d2 <EM_ProcessEvent+0x22>
				eNextState = _FuncAdjustHandler();
 80004c6:	f7ff ffb7 	bl	8000438 <_FuncAdjustHandler>
 80004ca:	4603      	mov	r3, r0
 80004cc:	461a      	mov	r2, r3
 80004ce:	4b16      	ldr	r3, [pc, #88]	; (8000528 <EM_ProcessEvent+0x78>)
 80004d0:	701a      	strb	r2, [r3, #0]
			if(eNewEvent == Freq_Select_Event)
 80004d2:	4b16      	ldr	r3, [pc, #88]	; (800052c <EM_ProcessEvent+0x7c>)
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	2b02      	cmp	r3, #2
 80004d8:	d105      	bne.n	80004e6 <EM_ProcessEvent+0x36>
				eNextState = _FreqAdjustHandler();
 80004da:	f7ff ffb9 	bl	8000450 <_FreqAdjustHandler>
 80004de:	4603      	mov	r3, r0
 80004e0:	461a      	mov	r2, r3
 80004e2:	4b11      	ldr	r3, [pc, #68]	; (8000528 <EM_ProcessEvent+0x78>)
 80004e4:	701a      	strb	r2, [r3, #0]
			if(eNewEvent == Ampl_Select_Event)
 80004e6:	4b11      	ldr	r3, [pc, #68]	; (800052c <EM_ProcessEvent+0x7c>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2b03      	cmp	r3, #3
 80004ec:	d105      	bne.n	80004fa <EM_ProcessEvent+0x4a>
				eNextState = _AmplAdjustHandler();
 80004ee:	f7ff ffbb 	bl	8000468 <_AmplAdjustHandler>
 80004f2:	4603      	mov	r3, r0
 80004f4:	461a      	mov	r2, r3
 80004f6:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <EM_ProcessEvent+0x78>)
 80004f8:	701a      	strb	r2, [r3, #0]
			if(eNewEvent == Bias_Select_Event)
 80004fa:	4b0c      	ldr	r3, [pc, #48]	; (800052c <EM_ProcessEvent+0x7c>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	2b04      	cmp	r3, #4
 8000500:	d105      	bne.n	800050e <EM_ProcessEvent+0x5e>
				eNextState = _BiasAdjustHandler();
 8000502:	f7ff ffbd 	bl	8000480 <_BiasAdjustHandler>
 8000506:	4603      	mov	r3, r0
 8000508:	461a      	mov	r2, r3
 800050a:	4b07      	ldr	r3, [pc, #28]	; (8000528 <EM_ProcessEvent+0x78>)
 800050c:	701a      	strb	r2, [r3, #0]
			if(eNewEvent == Adjust_Confirmed_Event)
 800050e:	4b07      	ldr	r3, [pc, #28]	; (800052c <EM_ProcessEvent+0x7c>)
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	2b05      	cmp	r3, #5
 8000514:	d105      	bne.n	8000522 <EM_ProcessEvent+0x72>
				eNextState = _AdjustConfirmedHandler();
 8000516:	f7ff ffbf 	bl	8000498 <_AdjustConfirmedHandler>
 800051a:	4603      	mov	r3, r0
 800051c:	461a      	mov	r2, r3
 800051e:	4b02      	ldr	r3, [pc, #8]	; (8000528 <EM_ProcessEvent+0x78>)
 8000520:	701a      	strb	r2, [r3, #0]
			break;
 8000522:	bf00      	nop
	}

}
 8000524:	bf00      	nop
 8000526:	bd80      	pop	{r7, pc}
 8000528:	20000460 	.word	0x20000460
 800052c:	20000482 	.word	0x20000482

08000530 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b08c      	sub	sp, #48	; 0x30
 8000534:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8000536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	2220      	movs	r2, #32
 8000546:	2100      	movs	r1, #0
 8000548:	4618      	mov	r0, r3
 800054a:	f007 ff95 	bl	8008478 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 800054e:	4b32      	ldr	r3, [pc, #200]	; (8000618 <MX_ADC1_Init+0xe8>)
 8000550:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000554:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000556:	4b30      	ldr	r3, [pc, #192]	; (8000618 <MX_ADC1_Init+0xe8>)
 8000558:	2200      	movs	r2, #0
 800055a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800055c:	4b2e      	ldr	r3, [pc, #184]	; (8000618 <MX_ADC1_Init+0xe8>)
 800055e:	2200      	movs	r2, #0
 8000560:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000562:	4b2d      	ldr	r3, [pc, #180]	; (8000618 <MX_ADC1_Init+0xe8>)
 8000564:	2200      	movs	r2, #0
 8000566:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000568:	4b2b      	ldr	r3, [pc, #172]	; (8000618 <MX_ADC1_Init+0xe8>)
 800056a:	2200      	movs	r2, #0
 800056c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800056e:	4b2a      	ldr	r3, [pc, #168]	; (8000618 <MX_ADC1_Init+0xe8>)
 8000570:	2200      	movs	r2, #0
 8000572:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000574:	4b28      	ldr	r3, [pc, #160]	; (8000618 <MX_ADC1_Init+0xe8>)
 8000576:	2204      	movs	r2, #4
 8000578:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800057a:	4b27      	ldr	r3, [pc, #156]	; (8000618 <MX_ADC1_Init+0xe8>)
 800057c:	2200      	movs	r2, #0
 800057e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000580:	4b25      	ldr	r3, [pc, #148]	; (8000618 <MX_ADC1_Init+0xe8>)
 8000582:	2201      	movs	r2, #1
 8000584:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000586:	4b24      	ldr	r3, [pc, #144]	; (8000618 <MX_ADC1_Init+0xe8>)
 8000588:	2201      	movs	r2, #1
 800058a:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800058c:	4b22      	ldr	r3, [pc, #136]	; (8000618 <MX_ADC1_Init+0xe8>)
 800058e:	2200      	movs	r2, #0
 8000590:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000594:	4b20      	ldr	r3, [pc, #128]	; (8000618 <MX_ADC1_Init+0xe8>)
 8000596:	2200      	movs	r2, #0
 8000598:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800059a:	4b1f      	ldr	r3, [pc, #124]	; (8000618 <MX_ADC1_Init+0xe8>)
 800059c:	2200      	movs	r2, #0
 800059e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005a0:	4b1d      	ldr	r3, [pc, #116]	; (8000618 <MX_ADC1_Init+0xe8>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80005a8:	4b1b      	ldr	r3, [pc, #108]	; (8000618 <MX_ADC1_Init+0xe8>)
 80005aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005ae:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80005b0:	4b19      	ldr	r3, [pc, #100]	; (8000618 <MX_ADC1_Init+0xe8>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005b8:	4817      	ldr	r0, [pc, #92]	; (8000618 <MX_ADC1_Init+0xe8>)
 80005ba:	f001 ffc5 	bl	8002548 <HAL_ADC_Init>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80005c4:	f000 ff30 	bl	8001428 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005c8:	2300      	movs	r3, #0
 80005ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005d0:	4619      	mov	r1, r3
 80005d2:	4811      	ldr	r0, [pc, #68]	; (8000618 <MX_ADC1_Init+0xe8>)
 80005d4:	f002 fd4e 	bl	8003074 <HAL_ADCEx_MultiModeConfigChannel>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80005de:	f000 ff23 	bl	8001428 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80005e2:	4b0e      	ldr	r3, [pc, #56]	; (800061c <MX_ADC1_Init+0xec>)
 80005e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005e6:	2306      	movs	r3, #6
 80005e8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005ee:	237f      	movs	r3, #127	; 0x7f
 80005f0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005f2:	2304      	movs	r3, #4
 80005f4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	4619      	mov	r1, r3
 80005fe:	4806      	ldr	r0, [pc, #24]	; (8000618 <MX_ADC1_Init+0xe8>)
 8000600:	f002 f962 	bl	80028c8 <HAL_ADC_ConfigChannel>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800060a:	f000 ff0d 	bl	8001428 <Error_Handler>
  }

}
 800060e:	bf00      	nop
 8000610:	3730      	adds	r7, #48	; 0x30
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000484 	.word	0x20000484
 800061c:	0c900008 	.word	0x0c900008

08000620 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b08a      	sub	sp, #40	; 0x28
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000628:	f107 0314 	add.w	r3, r7, #20
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000640:	d14f      	bne.n	80006e2 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000642:	4b2a      	ldr	r3, [pc, #168]	; (80006ec <HAL_ADC_MspInit+0xcc>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000646:	4a29      	ldr	r2, [pc, #164]	; (80006ec <HAL_ADC_MspInit+0xcc>)
 8000648:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800064c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800064e:	4b27      	ldr	r3, [pc, #156]	; (80006ec <HAL_ADC_MspInit+0xcc>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000652:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000656:	613b      	str	r3, [r7, #16]
 8000658:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800065a:	4b24      	ldr	r3, [pc, #144]	; (80006ec <HAL_ADC_MspInit+0xcc>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065e:	4a23      	ldr	r2, [pc, #140]	; (80006ec <HAL_ADC_MspInit+0xcc>)
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000666:	4b21      	ldr	r3, [pc, #132]	; (80006ec <HAL_ADC_MspInit+0xcc>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000672:	2304      	movs	r3, #4
 8000674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000676:	2303      	movs	r3, #3
 8000678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	4619      	mov	r1, r3
 8000684:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000688:	f004 f810 	bl	80046ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800068c:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <HAL_ADC_MspInit+0xd0>)
 800068e:	4a19      	ldr	r2, [pc, #100]	; (80006f4 <HAL_ADC_MspInit+0xd4>)
 8000690:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <HAL_ADC_MspInit+0xd0>)
 8000694:	2205      	movs	r2, #5
 8000696:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000698:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <HAL_ADC_MspInit+0xd0>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800069e:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <HAL_ADC_MspInit+0xd0>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <HAL_ADC_MspInit+0xd0>)
 80006a6:	2280      	movs	r2, #128	; 0x80
 80006a8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <HAL_ADC_MspInit+0xd0>)
 80006ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006b0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <HAL_ADC_MspInit+0xd0>)
 80006b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006b8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006ba:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <HAL_ADC_MspInit+0xd0>)
 80006bc:	2220      	movs	r2, #32
 80006be:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006c0:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <HAL_ADC_MspInit+0xd0>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006c6:	480a      	ldr	r0, [pc, #40]	; (80006f0 <HAL_ADC_MspInit+0xd0>)
 80006c8:	f003 fd7e 	bl	80041c8 <HAL_DMA_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 80006d2:	f000 fea9 	bl	8001428 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4a05      	ldr	r2, [pc, #20]	; (80006f0 <HAL_ADC_MspInit+0xd0>)
 80006da:	655a      	str	r2, [r3, #84]	; 0x54
 80006dc:	4a04      	ldr	r2, [pc, #16]	; (80006f0 <HAL_ADC_MspInit+0xd0>)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006e2:	bf00      	nop
 80006e4:	3728      	adds	r7, #40	; 0x28
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40021000 	.word	0x40021000
 80006f0:	200004f0 	.word	0x200004f0
 80006f4:	40020008 	.word	0x40020008

080006f8 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_COMP1_Init+0x44>)
 80006fe:	4a10      	ldr	r2, [pc, #64]	; (8000740 <MX_COMP1_Init+0x48>)
 8000700:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_COMP1_Init+0x44>)
 8000704:	2200      	movs	r2, #0
 8000706:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_COMP1_Init+0x44>)
 800070a:	4a0e      	ldr	r2, [pc, #56]	; (8000744 <MX_COMP1_Init+0x4c>)
 800070c:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800070e:	4b0b      	ldr	r3, [pc, #44]	; (800073c <MX_COMP1_Init+0x44>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_COMP1_Init+0x44>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <MX_COMP1_Init+0x44>)
 800071c:	2200      	movs	r2, #0
 800071e:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_COMP1_Init+0x44>)
 8000722:	2200      	movs	r2, #0
 8000724:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000726:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_COMP1_Init+0x44>)
 8000728:	f002 fef8 	bl	800351c <HAL_COMP_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 8000732:	f000 fe79 	bl	8001428 <Error_Handler>
  }

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000550 	.word	0x20000550
 8000740:	40010200 	.word	0x40010200
 8000744:	00800030 	.word	0x00800030

08000748 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b088      	sub	sp, #32
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a0f      	ldr	r2, [pc, #60]	; (80007a4 <HAL_COMP_MspInit+0x5c>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d118      	bne.n	800079c <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <HAL_COMP_MspInit+0x60>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	4a0e      	ldr	r2, [pc, #56]	; (80007a8 <HAL_COMP_MspInit+0x60>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <HAL_COMP_MspInit+0x60>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000782:	2302      	movs	r3, #2
 8000784:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000786:	2303      	movs	r3, #3
 8000788:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	4619      	mov	r1, r3
 8000794:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000798:	f003 ff88 	bl	80046ac <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 800079c:	bf00      	nop
 800079e:	3720      	adds	r7, #32
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40010200 	.word	0x40010200
 80007a8:	40021000 	.word	0x40021000

080007ac <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08c      	sub	sp, #48	; 0x30
 80007b0:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80007b2:	463b      	mov	r3, r7
 80007b4:	2230      	movs	r2, #48	; 0x30
 80007b6:	2100      	movs	r1, #0
 80007b8:	4618      	mov	r0, r3
 80007ba:	f007 fe5d 	bl	8008478 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 80007be:	4b1e      	ldr	r3, [pc, #120]	; (8000838 <MX_DAC1_Init+0x8c>)
 80007c0:	4a1e      	ldr	r2, [pc, #120]	; (800083c <MX_DAC1_Init+0x90>)
 80007c2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80007c4:	481c      	ldr	r0, [pc, #112]	; (8000838 <MX_DAC1_Init+0x8c>)
 80007c6:	f003 f94c 	bl	8003a62 <HAL_DAC_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80007d0:	f000 fe2a 	bl	8001428 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80007d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007d8:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80007da:	2300      	movs	r3, #0
 80007dc:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80007de:	2300      	movs	r3, #0
 80007e0:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80007e6:	2306      	movs	r3, #6
 80007e8:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80007f2:	2301      	movs	r3, #1
 80007f4:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007fa:	463b      	mov	r3, r7
 80007fc:	2200      	movs	r2, #0
 80007fe:	4619      	mov	r1, r3
 8000800:	480d      	ldr	r0, [pc, #52]	; (8000838 <MX_DAC1_Init+0x8c>)
 8000802:	f003 faab 	bl	8003d5c <HAL_DAC_ConfigChannel>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 800080c:	f000 fe0c 	bl	8001428 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000810:	2300      	movs	r3, #0
 8000812:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000814:	2301      	movs	r3, #1
 8000816:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000818:	463b      	mov	r3, r7
 800081a:	2210      	movs	r2, #16
 800081c:	4619      	mov	r1, r3
 800081e:	4806      	ldr	r0, [pc, #24]	; (8000838 <MX_DAC1_Init+0x8c>)
 8000820:	f003 fa9c 	bl	8003d5c <HAL_DAC_ConfigChannel>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 800082a:	f000 fdfd 	bl	8001428 <Error_Handler>
  }

}
 800082e:	bf00      	nop
 8000830:	3730      	adds	r7, #48	; 0x30
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000588 	.word	0x20000588
 800083c:	50000800 	.word	0x50000800

08000840 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08c      	sub	sp, #48	; 0x30
 8000844:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000846:	463b      	mov	r3, r7
 8000848:	2230      	movs	r2, #48	; 0x30
 800084a:	2100      	movs	r1, #0
 800084c:	4618      	mov	r0, r3
 800084e:	f007 fe13 	bl	8008478 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 8000852:	4b16      	ldr	r3, [pc, #88]	; (80008ac <MX_DAC2_Init+0x6c>)
 8000854:	4a16      	ldr	r2, [pc, #88]	; (80008b0 <MX_DAC2_Init+0x70>)
 8000856:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8000858:	4814      	ldr	r0, [pc, #80]	; (80008ac <MX_DAC2_Init+0x6c>)
 800085a:	f003 f902 	bl	8003a62 <HAL_DAC_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8000864:	f000 fde0 	bl	8001428 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8000868:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800086c:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800086e:	2300      	movs	r3, #0
 8000870:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000872:	2300      	movs	r3, #0
 8000874:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 800087a:	2306      	movs	r3, #6
 800087c:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000886:	2301      	movs	r3, #1
 8000888:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800088a:	2300      	movs	r3, #0
 800088c:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800088e:	463b      	mov	r3, r7
 8000890:	2200      	movs	r2, #0
 8000892:	4619      	mov	r1, r3
 8000894:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_DAC2_Init+0x6c>)
 8000896:	f003 fa61 	bl	8003d5c <HAL_DAC_ConfigChannel>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 80008a0:	f000 fdc2 	bl	8001428 <Error_Handler>
  }

}
 80008a4:	bf00      	nop
 80008a6:	3730      	adds	r7, #48	; 0x30
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000574 	.word	0x20000574
 80008b0:	50000c00 	.word	0x50000c00

080008b4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08c      	sub	sp, #48	; 0x30
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a56      	ldr	r2, [pc, #344]	; (8000a2c <HAL_DAC_MspInit+0x178>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d150      	bne.n	8000978 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80008d6:	4b56      	ldr	r3, [pc, #344]	; (8000a30 <HAL_DAC_MspInit+0x17c>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	4a55      	ldr	r2, [pc, #340]	; (8000a30 <HAL_DAC_MspInit+0x17c>)
 80008dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e2:	4b53      	ldr	r3, [pc, #332]	; (8000a30 <HAL_DAC_MspInit+0x17c>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008ea:	61bb      	str	r3, [r7, #24]
 80008ec:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	4b50      	ldr	r3, [pc, #320]	; (8000a30 <HAL_DAC_MspInit+0x17c>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	4a4f      	ldr	r2, [pc, #316]	; (8000a30 <HAL_DAC_MspInit+0x17c>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fa:	4b4d      	ldr	r3, [pc, #308]	; (8000a30 <HAL_DAC_MspInit+0x17c>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	617b      	str	r3, [r7, #20]
 8000904:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000906:	2330      	movs	r3, #48	; 0x30
 8000908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800090a:	2303      	movs	r3, #3
 800090c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091c:	f003 fec6 	bl	80046ac <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8000920:	4b44      	ldr	r3, [pc, #272]	; (8000a34 <HAL_DAC_MspInit+0x180>)
 8000922:	4a45      	ldr	r2, [pc, #276]	; (8000a38 <HAL_DAC_MspInit+0x184>)
 8000924:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8000926:	4b43      	ldr	r3, [pc, #268]	; (8000a34 <HAL_DAC_MspInit+0x180>)
 8000928:	2206      	movs	r2, #6
 800092a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800092c:	4b41      	ldr	r3, [pc, #260]	; (8000a34 <HAL_DAC_MspInit+0x180>)
 800092e:	2210      	movs	r2, #16
 8000930:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000932:	4b40      	ldr	r3, [pc, #256]	; (8000a34 <HAL_DAC_MspInit+0x180>)
 8000934:	2200      	movs	r2, #0
 8000936:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000938:	4b3e      	ldr	r3, [pc, #248]	; (8000a34 <HAL_DAC_MspInit+0x180>)
 800093a:	2280      	movs	r2, #128	; 0x80
 800093c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800093e:	4b3d      	ldr	r3, [pc, #244]	; (8000a34 <HAL_DAC_MspInit+0x180>)
 8000940:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000944:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000946:	4b3b      	ldr	r3, [pc, #236]	; (8000a34 <HAL_DAC_MspInit+0x180>)
 8000948:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800094c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800094e:	4b39      	ldr	r3, [pc, #228]	; (8000a34 <HAL_DAC_MspInit+0x180>)
 8000950:	2220      	movs	r2, #32
 8000952:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000954:	4b37      	ldr	r3, [pc, #220]	; (8000a34 <HAL_DAC_MspInit+0x180>)
 8000956:	2200      	movs	r2, #0
 8000958:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800095a:	4836      	ldr	r0, [pc, #216]	; (8000a34 <HAL_DAC_MspInit+0x180>)
 800095c:	f003 fc34 	bl	80041c8 <HAL_DMA_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8000966:	f000 fd5f 	bl	8001428 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4a31      	ldr	r2, [pc, #196]	; (8000a34 <HAL_DAC_MspInit+0x180>)
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	4a30      	ldr	r2, [pc, #192]	; (8000a34 <HAL_DAC_MspInit+0x180>)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 8000976:	e054      	b.n	8000a22 <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a2f      	ldr	r2, [pc, #188]	; (8000a3c <HAL_DAC_MspInit+0x188>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d14f      	bne.n	8000a22 <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8000982:	4b2b      	ldr	r3, [pc, #172]	; (8000a30 <HAL_DAC_MspInit+0x17c>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	4a2a      	ldr	r2, [pc, #168]	; (8000a30 <HAL_DAC_MspInit+0x17c>)
 8000988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800098c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800098e:	4b28      	ldr	r3, [pc, #160]	; (8000a30 <HAL_DAC_MspInit+0x17c>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	4b25      	ldr	r3, [pc, #148]	; (8000a30 <HAL_DAC_MspInit+0x17c>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099e:	4a24      	ldr	r2, [pc, #144]	; (8000a30 <HAL_DAC_MspInit+0x17c>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a6:	4b22      	ldr	r3, [pc, #136]	; (8000a30 <HAL_DAC_MspInit+0x17c>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009b2:	2340      	movs	r3, #64	; 0x40
 80009b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009b6:	2303      	movs	r3, #3
 80009b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c8:	f003 fe70 	bl	80046ac <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 80009cc:	4b1c      	ldr	r3, [pc, #112]	; (8000a40 <HAL_DAC_MspInit+0x18c>)
 80009ce:	4a1d      	ldr	r2, [pc, #116]	; (8000a44 <HAL_DAC_MspInit+0x190>)
 80009d0:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 80009d2:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <HAL_DAC_MspInit+0x18c>)
 80009d4:	2229      	movs	r2, #41	; 0x29
 80009d6:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009d8:	4b19      	ldr	r3, [pc, #100]	; (8000a40 <HAL_DAC_MspInit+0x18c>)
 80009da:	2210      	movs	r2, #16
 80009dc:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80009de:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <HAL_DAC_MspInit+0x18c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80009e4:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <HAL_DAC_MspInit+0x18c>)
 80009e6:	2280      	movs	r2, #128	; 0x80
 80009e8:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009ea:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <HAL_DAC_MspInit+0x18c>)
 80009ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009f0:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009f2:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <HAL_DAC_MspInit+0x18c>)
 80009f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009f8:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 80009fa:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <HAL_DAC_MspInit+0x18c>)
 80009fc:	2220      	movs	r2, #32
 80009fe:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000a00:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <HAL_DAC_MspInit+0x18c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8000a06:	480e      	ldr	r0, [pc, #56]	; (8000a40 <HAL_DAC_MspInit+0x18c>)
 8000a08:	f003 fbde 	bl	80041c8 <HAL_DMA_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <HAL_DAC_MspInit+0x162>
      Error_Handler();
 8000a12:	f000 fd09 	bl	8001428 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a09      	ldr	r2, [pc, #36]	; (8000a40 <HAL_DAC_MspInit+0x18c>)
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	4a08      	ldr	r2, [pc, #32]	; (8000a40 <HAL_DAC_MspInit+0x18c>)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000a22:	bf00      	nop
 8000a24:	3730      	adds	r7, #48	; 0x30
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	50000800 	.word	0x50000800
 8000a30:	40021000 	.word	0x40021000
 8000a34:	2000059c 	.word	0x2000059c
 8000a38:	4002001c 	.word	0x4002001c
 8000a3c:	50000c00 	.word	0x50000c00
 8000a40:	200005fc 	.word	0x200005fc
 8000a44:	40020030 	.word	0x40020030

08000a48 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000a4e:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <MX_DMA_Init+0x70>)
 8000a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a52:	4a19      	ldr	r2, [pc, #100]	; (8000ab8 <MX_DMA_Init+0x70>)
 8000a54:	f043 0304 	orr.w	r3, r3, #4
 8000a58:	6493      	str	r3, [r2, #72]	; 0x48
 8000a5a:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <MX_DMA_Init+0x70>)
 8000a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a5e:	f003 0304 	and.w	r3, r3, #4
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a66:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <MX_DMA_Init+0x70>)
 8000a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a6a:	4a13      	ldr	r2, [pc, #76]	; (8000ab8 <MX_DMA_Init+0x70>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6493      	str	r3, [r2, #72]	; 0x48
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <MX_DMA_Init+0x70>)
 8000a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2101      	movs	r1, #1
 8000a82:	200b      	movs	r0, #11
 8000a84:	f002 ffb9 	bl	80039fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a88:	200b      	movs	r0, #11
 8000a8a:	f002 ffd0 	bl	8003a2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2100      	movs	r1, #0
 8000a92:	200c      	movs	r0, #12
 8000a94:	f002 ffb1 	bl	80039fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000a98:	200c      	movs	r0, #12
 8000a9a:	f002 ffc8 	bl	8003a2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	200d      	movs	r0, #13
 8000aa4:	f002 ffa9 	bl	80039fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000aa8:	200d      	movs	r0, #13
 8000aaa:	f002 ffc0 	bl	8003a2e <HAL_NVIC_EnableIRQ>

}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40021000 	.word	0x40021000

08000abc <update_dc_bias_sweep>:
uint16_t dcbias = 0;
int dcbias_dir = 1;
int dcinverted = 0;

void update_dc_bias_sweep()
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	  // up=1, down=0
	  (dcbias_dir) ? (dcbias++) : (dcbias--);
 8000ac0:	4b20      	ldr	r3, [pc, #128]	; (8000b44 <update_dc_bias_sweep+0x88>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d006      	beq.n	8000ad6 <update_dc_bias_sweep+0x1a>
 8000ac8:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <update_dc_bias_sweep+0x8c>)
 8000aca:	881b      	ldrh	r3, [r3, #0]
 8000acc:	3301      	adds	r3, #1
 8000ace:	b29a      	uxth	r2, r3
 8000ad0:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <update_dc_bias_sweep+0x8c>)
 8000ad2:	801a      	strh	r2, [r3, #0]
 8000ad4:	e005      	b.n	8000ae2 <update_dc_bias_sweep+0x26>
 8000ad6:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <update_dc_bias_sweep+0x8c>)
 8000ad8:	881b      	ldrh	r3, [r3, #0]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	b29a      	uxth	r2, r3
 8000ade:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <update_dc_bias_sweep+0x8c>)
 8000ae0:	801a      	strh	r2, [r3, #0]

	  // invert the bias signal at zero crossing
	  if(dcbias < 1) {
 8000ae2:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <update_dc_bias_sweep+0x8c>)
 8000ae4:	881b      	ldrh	r3, [r3, #0]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d10a      	bne.n	8000b00 <update_dc_bias_sweep+0x44>
		(dcinverted) ? (dcinverted=0) : (dcinverted=1);
 8000aea:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <update_dc_bias_sweep+0x90>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d003      	beq.n	8000afa <update_dc_bias_sweep+0x3e>
 8000af2:	4b16      	ldr	r3, [pc, #88]	; (8000b4c <update_dc_bias_sweep+0x90>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	e002      	b.n	8000b00 <update_dc_bias_sweep+0x44>
 8000afa:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <update_dc_bias_sweep+0x90>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	601a      	str	r2, [r3, #0]
	  }

	  // change direction if dac limits are reached
	  if(dcbias < 1) 	{ dcbias_dir = 1; }
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <update_dc_bias_sweep+0x8c>)
 8000b02:	881b      	ldrh	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d102      	bne.n	8000b0e <update_dc_bias_sweep+0x52>
 8000b08:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <update_dc_bias_sweep+0x88>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	601a      	str	r2, [r3, #0]
	  if(dcbias > 4095) { dcbias_dir = 0; }
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <update_dc_bias_sweep+0x8c>)
 8000b10:	881b      	ldrh	r3, [r3, #0]
 8000b12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b16:	d302      	bcc.n	8000b1e <update_dc_bias_sweep+0x62>
 8000b18:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <update_dc_bias_sweep+0x88>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]


	  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, dcinverted);
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <update_dc_bias_sweep+0x90>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	461a      	mov	r2, r3
 8000b26:	2108      	movs	r1, #8
 8000b28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b2c:	f003 ff58 	bl	80049e0 <HAL_GPIO_WritePin>
	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, dcbias);
 8000b30:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <update_dc_bias_sweep+0x8c>)
 8000b32:	881b      	ldrh	r3, [r3, #0]
 8000b34:	2200      	movs	r2, #0
 8000b36:	2110      	movs	r1, #16
 8000b38:	4805      	ldr	r0, [pc, #20]	; (8000b50 <update_dc_bias_sweep+0x94>)
 8000b3a:	f003 f8c9 	bl	8003cd0 <HAL_DAC_SetValue>
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000008 	.word	0x20000008
 8000b48:	20000462 	.word	0x20000462
 8000b4c:	20000464 	.word	0x20000464
 8000b50:	20000588 	.word	0x20000588

08000b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b58:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <__NVIC_GetPriorityGrouping+0x18>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	0a1b      	lsrs	r3, r3, #8
 8000b5e:	f003 0307 	and.w	r3, r3, #7
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	db0b      	blt.n	8000b9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	f003 021f 	and.w	r2, r3, #31
 8000b88:	4907      	ldr	r1, [pc, #28]	; (8000ba8 <__NVIC_EnableIRQ+0x38>)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	095b      	lsrs	r3, r3, #5
 8000b90:	2001      	movs	r0, #1
 8000b92:	fa00 f202 	lsl.w	r2, r0, r2
 8000b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000e100 	.word	0xe000e100

08000bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	6039      	str	r1, [r7, #0]
 8000bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	db0a      	blt.n	8000bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	b2da      	uxtb	r2, r3
 8000bc4:	490c      	ldr	r1, [pc, #48]	; (8000bf8 <__NVIC_SetPriority+0x4c>)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	0112      	lsls	r2, r2, #4
 8000bcc:	b2d2      	uxtb	r2, r2
 8000bce:	440b      	add	r3, r1
 8000bd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd4:	e00a      	b.n	8000bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	4908      	ldr	r1, [pc, #32]	; (8000bfc <__NVIC_SetPriority+0x50>)
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	f003 030f 	and.w	r3, r3, #15
 8000be2:	3b04      	subs	r3, #4
 8000be4:	0112      	lsls	r2, r2, #4
 8000be6:	b2d2      	uxtb	r2, r2
 8000be8:	440b      	add	r3, r1
 8000bea:	761a      	strb	r2, [r3, #24]
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000e100 	.word	0xe000e100
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b089      	sub	sp, #36	; 0x24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	f003 0307 	and.w	r3, r3, #7
 8000c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c14:	69fb      	ldr	r3, [r7, #28]
 8000c16:	f1c3 0307 	rsb	r3, r3, #7
 8000c1a:	2b04      	cmp	r3, #4
 8000c1c:	bf28      	it	cs
 8000c1e:	2304      	movcs	r3, #4
 8000c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3304      	adds	r3, #4
 8000c26:	2b06      	cmp	r3, #6
 8000c28:	d902      	bls.n	8000c30 <NVIC_EncodePriority+0x30>
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	3b03      	subs	r3, #3
 8000c2e:	e000      	b.n	8000c32 <NVIC_EncodePriority+0x32>
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	43da      	mvns	r2, r3
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	401a      	ands	r2, r3
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c52:	43d9      	mvns	r1, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c58:	4313      	orrs	r3, r2
         );
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3724      	adds	r7, #36	; 0x24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
	...

08000c68 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 8000c72:	4a14      	ldr	r2, [pc, #80]	; (8000cc4 <LL_SYSCFG_SetEXTISource+0x5c>)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	f003 0303 	and.w	r3, r3, #3
 8000c7a:	3302      	adds	r3, #2
 8000c7c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	0c1b      	lsrs	r3, r3, #16
 8000c84:	43db      	mvns	r3, r3
 8000c86:	ea02 0103 	and.w	r1, r2, r3
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	0c1b      	lsrs	r3, r3, #16
 8000c8e:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	fa93 f3a3 	rbit	r3, r3
 8000c96:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	fab3 f383 	clz	r3, r3
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	f003 031f 	and.w	r3, r3, #31
 8000ca4:	687a      	ldr	r2, [r7, #4]
 8000ca6:	409a      	lsls	r2, r3
 8000ca8:	4806      	ldr	r0, [pc, #24]	; (8000cc4 <LL_SYSCFG_SetEXTISource+0x5c>)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	f003 0303 	and.w	r3, r3, #3
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	3302      	adds	r3, #2
 8000cb4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000cb8:	bf00      	nop
 8000cba:	3714      	adds	r7, #20
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	40010000 	.word	0x40010000

08000cc8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b089      	sub	sp, #36	; 0x24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	fa93 f3a3 	rbit	r3, r3
 8000ce2:	613b      	str	r3, [r7, #16]
  return result;
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	fab3 f383 	clz	r3, r3
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	2103      	movs	r1, #3
 8000cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	401a      	ands	r2, r3
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	fa93 f3a3 	rbit	r3, r3
 8000d02:	61bb      	str	r3, [r7, #24]
  return result;
 8000d04:	69bb      	ldr	r3, [r7, #24]
 8000d06:	fab3 f383 	clz	r3, r3
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	6879      	ldr	r1, [r7, #4]
 8000d10:	fa01 f303 	lsl.w	r3, r1, r3
 8000d14:	431a      	orrs	r2, r3
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	601a      	str	r2, [r3, #0]
}
 8000d1a:	bf00      	nop
 8000d1c:	3724      	adds	r7, #36	; 0x24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000d26:	b480      	push	{r7}
 8000d28:	b089      	sub	sp, #36	; 0x24
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	60f8      	str	r0, [r7, #12]
 8000d2e:	60b9      	str	r1, [r7, #8]
 8000d30:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	68da      	ldr	r2, [r3, #12]
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	fa93 f3a3 	rbit	r3, r3
 8000d40:	613b      	str	r3, [r7, #16]
  return result;
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	fab3 f383 	clz	r3, r3
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	2103      	movs	r1, #3
 8000d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	401a      	ands	r2, r3
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	fa93 f3a3 	rbit	r3, r3
 8000d60:	61bb      	str	r3, [r7, #24]
  return result;
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	fab3 f383 	clz	r3, r3
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	6879      	ldr	r1, [r7, #4]
 8000d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d72:	431a      	orrs	r2, r3
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	60da      	str	r2, [r3, #12]
}
 8000d78:	bf00      	nop
 8000d7a:	3724      	adds	r7, #36	; 0x24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	683a      	ldr	r2, [r7, #0]
 8000d92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000daa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000dac:	4907      	ldr	r1, [pc, #28]	; (8000dcc <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000db6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
}
 8000dc0:	bf00      	nop
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08a      	sub	sp, #40	; 0x28
 8000dd4:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000dd6:	f107 031c 	add.w	r3, r7, #28
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
 8000df0:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000df2:	2004      	movs	r0, #4
 8000df4:	f7ff ffd4 	bl	8000da0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8000df8:	2020      	movs	r0, #32
 8000dfa:	f7ff ffd1 	bl	8000da0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000dfe:	2001      	movs	r0, #1
 8000e00:	f7ff ffce 	bl	8000da0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000e04:	2002      	movs	r0, #2
 8000e06:	f7ff ffcb 	bl	8000da0 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 8000e0a:	2108      	movs	r1, #8
 8000e0c:	48d3      	ldr	r0, [pc, #844]	; (800115c <MX_GPIO_Init+0x38c>)
 8000e0e:	f7ff ffb9 	bl	8000d84 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 8000e12:	2108      	movs	r1, #8
 8000e14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e18:	f7ff ffb4 	bl	8000d84 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 8000e1c:	2110      	movs	r1, #16
 8000e1e:	48cf      	ldr	r0, [pc, #828]	; (800115c <MX_GPIO_Init+0x38c>)
 8000e20:	f7ff ffb0 	bl	8000d84 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 8000e24:	2120      	movs	r1, #32
 8000e26:	48cd      	ldr	r0, [pc, #820]	; (800115c <MX_GPIO_Init+0x38c>)
 8000e28:	f7ff ffac 	bl	8000d84 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	48cc      	ldr	r0, [pc, #816]	; (8001160 <MX_GPIO_Init+0x390>)
 8000e30:	f7ff ffa8 	bl	8000d84 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 8000e34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e38:	48c8      	ldr	r0, [pc, #800]	; (800115c <MX_GPIO_Init+0x38c>)
 8000e3a:	f7ff ffa3 	bl	8000d84 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 8000e3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e42:	48c6      	ldr	r0, [pc, #792]	; (800115c <MX_GPIO_Init+0x38c>)
 8000e44:	f7ff ff9e 	bl	8000d84 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 8000e48:	2140      	movs	r1, #64	; 0x40
 8000e4a:	48c5      	ldr	r0, [pc, #788]	; (8001160 <MX_GPIO_Init+0x390>)
 8000e4c:	f7ff ff9a 	bl	8000d84 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 8000e50:	2180      	movs	r1, #128	; 0x80
 8000e52:	48c3      	ldr	r0, [pc, #780]	; (8001160 <MX_GPIO_Init+0x390>)
 8000e54:	f7ff ff96 	bl	8000d84 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 8000e58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e5c:	48c0      	ldr	r0, [pc, #768]	; (8001160 <MX_GPIO_Init+0x390>)
 8000e5e:	f7ff ff91 	bl	8000d84 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 8000e62:	49c0      	ldr	r1, [pc, #768]	; (8001164 <MX_GPIO_Init+0x394>)
 8000e64:	2002      	movs	r0, #2
 8000e66:	f7ff feff 	bl	8000c68 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 8000e6a:	49bf      	ldr	r1, [pc, #764]	; (8001168 <MX_GPIO_Init+0x398>)
 8000e6c:	2002      	movs	r0, #2
 8000e6e:	f7ff fefb 	bl	8000c68 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 8000e72:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8000e76:	2005      	movs	r0, #5
 8000e78:	f7ff fef6 	bl	8000c68 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 8000e7c:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8000e80:	2005      	movs	r0, #5
 8000e82:	f7ff fef1 	bl	8000c68 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 8000e86:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8000e8a:	2002      	movs	r0, #2
 8000e8c:	f7ff feec 	bl	8000c68 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8000e90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e94:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000e96:	2301      	movs	r3, #1
 8000e98:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000ea8:	f107 031c 	add.w	r3, r7, #28
 8000eac:	4618      	mov	r0, r3
 8000eae:	f006 f9bf 	bl	8007230 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8000eb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000eb6:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000eca:	f107 031c 	add.w	r3, r7, #28
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f006 f9ae 	bl	8007230 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000eea:	f107 031c 	add.w	r3, r7, #28
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f006 f99e 	bl	8007230 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000efe:	2300      	movs	r3, #0
 8000f00:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000f04:	2302      	movs	r3, #2
 8000f06:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000f0a:	f107 031c 	add.w	r3, r7, #28
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f006 f98e 	bl	8007230 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8000f14:	2304      	movs	r3, #4
 8000f16:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000f24:	2302      	movs	r3, #2
 8000f26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000f2a:	f107 031c 	add.w	r3, r7, #28
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f006 f97e 	bl	8007230 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 8000f34:	2201      	movs	r2, #1
 8000f36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f3a:	4888      	ldr	r0, [pc, #544]	; (800115c <MX_GPIO_Init+0x38c>)
 8000f3c:	f7ff fef3 	bl	8000d26 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 8000f40:	2201      	movs	r2, #1
 8000f42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f46:	4885      	ldr	r0, [pc, #532]	; (800115c <MX_GPIO_Init+0x38c>)
 8000f48:	f7ff feed 	bl	8000d26 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	2101      	movs	r1, #1
 8000f50:	4886      	ldr	r0, [pc, #536]	; (800116c <MX_GPIO_Init+0x39c>)
 8000f52:	f7ff fee8 	bl	8000d26 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 8000f56:	2201      	movs	r2, #1
 8000f58:	2102      	movs	r1, #2
 8000f5a:	4884      	ldr	r0, [pc, #528]	; (800116c <MX_GPIO_Init+0x39c>)
 8000f5c:	f7ff fee3 	bl	8000d26 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 8000f60:	2201      	movs	r2, #1
 8000f62:	2104      	movs	r1, #4
 8000f64:	487d      	ldr	r0, [pc, #500]	; (800115c <MX_GPIO_Init+0x38c>)
 8000f66:	f7ff fede 	bl	8000d26 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f70:	487a      	ldr	r0, [pc, #488]	; (800115c <MX_GPIO_Init+0x38c>)
 8000f72:	f7ff fea9 	bl	8000cc8 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 8000f76:	2200      	movs	r2, #0
 8000f78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f7c:	4877      	ldr	r0, [pc, #476]	; (800115c <MX_GPIO_Init+0x38c>)
 8000f7e:	f7ff fea3 	bl	8000cc8 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2101      	movs	r1, #1
 8000f86:	4879      	ldr	r0, [pc, #484]	; (800116c <MX_GPIO_Init+0x39c>)
 8000f88:	f7ff fe9e 	bl	8000cc8 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2102      	movs	r1, #2
 8000f90:	4876      	ldr	r0, [pc, #472]	; (800116c <MX_GPIO_Init+0x39c>)
 8000f92:	f7ff fe99 	bl	8000cc8 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2104      	movs	r1, #4
 8000f9a:	4870      	ldr	r0, [pc, #448]	; (800115c <MX_GPIO_Init+0x38c>)
 8000f9c:	f7ff fe94 	bl	8000cc8 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8000fa0:	2308      	movs	r3, #8
 8000fa2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4868      	ldr	r0, [pc, #416]	; (800115c <MX_GPIO_Init+0x38c>)
 8000fba:	f006 fb2c 	bl	8007616 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 8000fbe:	2308      	movs	r3, #8
 8000fc0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 8000fd2:	1d3b      	adds	r3, r7, #4
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fda:	f006 fb1c 	bl	8007616 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 8000fde:	2310      	movs	r3, #16
 8000fe0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 8000ff2:	1d3b      	adds	r3, r7, #4
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4859      	ldr	r0, [pc, #356]	; (800115c <MX_GPIO_Init+0x38c>)
 8000ff8:	f006 fb0d 	bl	8007616 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 8000ffc:	2320      	movs	r3, #32
 8000ffe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001000:	2301      	movs	r3, #1
 8001002:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	4619      	mov	r1, r3
 8001014:	4851      	ldr	r0, [pc, #324]	; (800115c <MX_GPIO_Init+0x38c>)
 8001016:	f006 fafe 	bl	8007616 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 800101a:	2301      	movs	r3, #1
 800101c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800101e:	2301      	movs	r3, #1
 8001020:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	4619      	mov	r1, r3
 8001032:	484b      	ldr	r0, [pc, #300]	; (8001160 <MX_GPIO_Init+0x390>)
 8001034:	f006 faef 	bl	8007616 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8001038:	f44f 7380 	mov.w	r3, #256	; 0x100
 800103c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800103e:	2301      	movs	r3, #1
 8001040:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	4619      	mov	r1, r3
 8001052:	4842      	ldr	r0, [pc, #264]	; (800115c <MX_GPIO_Init+0x38c>)
 8001054:	f006 fadf 	bl	8007616 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 8001058:	f44f 7300 	mov.w	r3, #512	; 0x200
 800105c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800105e:	2301      	movs	r3, #1
 8001060:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	4619      	mov	r1, r3
 8001072:	483a      	ldr	r0, [pc, #232]	; (800115c <MX_GPIO_Init+0x38c>)
 8001074:	f006 facf 	bl	8007616 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 8001078:	2340      	movs	r3, #64	; 0x40
 800107a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800107c:	2301      	movs	r3, #1
 800107e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001080:	2303      	movs	r3, #3
 8001082:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	4619      	mov	r1, r3
 8001090:	4833      	ldr	r0, [pc, #204]	; (8001160 <MX_GPIO_Init+0x390>)
 8001092:	f006 fac0 	bl	8007616 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 8001096:	2380      	movs	r3, #128	; 0x80
 8001098:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800109a:	2301      	movs	r3, #1
 800109c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800109e:	2303      	movs	r3, #3
 80010a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	4619      	mov	r1, r3
 80010ae:	482c      	ldr	r0, [pc, #176]	; (8001160 <MX_GPIO_Init+0x390>)
 80010b0:	f006 fab1 	bl	8007616 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 80010b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80010ba:	2301      	movs	r3, #1
 80010bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80010be:	2303      	movs	r3, #3
 80010c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	4619      	mov	r1, r3
 80010ce:	4824      	ldr	r0, [pc, #144]	; (8001160 <MX_GPIO_Init+0x390>)
 80010d0:	f006 faa1 	bl	8007616 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80010d4:	f7ff fd3e 	bl	8000b54 <__NVIC_GetPriorityGrouping>
 80010d8:	4603      	mov	r3, r0
 80010da:	2200      	movs	r2, #0
 80010dc:	2100      	movs	r1, #0
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fd8e 	bl	8000c00 <NVIC_EncodePriority>
 80010e4:	4603      	mov	r3, r0
 80010e6:	4619      	mov	r1, r3
 80010e8:	2006      	movs	r0, #6
 80010ea:	f7ff fd5f 	bl	8000bac <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 80010ee:	2006      	movs	r0, #6
 80010f0:	f7ff fd3e 	bl	8000b70 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80010f4:	f7ff fd2e 	bl	8000b54 <__NVIC_GetPriorityGrouping>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2200      	movs	r2, #0
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fd7e 	bl	8000c00 <NVIC_EncodePriority>
 8001104:	4603      	mov	r3, r0
 8001106:	4619      	mov	r1, r3
 8001108:	2007      	movs	r0, #7
 800110a:	f7ff fd4f 	bl	8000bac <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 800110e:	2007      	movs	r0, #7
 8001110:	f7ff fd2e 	bl	8000b70 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001114:	f7ff fd1e 	bl	8000b54 <__NVIC_GetPriorityGrouping>
 8001118:	4603      	mov	r3, r0
 800111a:	2200      	movs	r2, #0
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff fd6e 	bl	8000c00 <NVIC_EncodePriority>
 8001124:	4603      	mov	r3, r0
 8001126:	4619      	mov	r1, r3
 8001128:	2008      	movs	r0, #8
 800112a:	f7ff fd3f 	bl	8000bac <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 800112e:	2008      	movs	r0, #8
 8001130:	f7ff fd1e 	bl	8000b70 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001134:	f7ff fd0e 	bl	8000b54 <__NVIC_GetPriorityGrouping>
 8001138:	4603      	mov	r3, r0
 800113a:	2200      	movs	r2, #0
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff fd5e 	bl	8000c00 <NVIC_EncodePriority>
 8001144:	4603      	mov	r3, r0
 8001146:	4619      	mov	r1, r3
 8001148:	2028      	movs	r0, #40	; 0x28
 800114a:	f7ff fd2f 	bl	8000bac <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 800114e:	2028      	movs	r0, #40	; 0x28
 8001150:	f7ff fd0e 	bl	8000b70 <__NVIC_EnableIRQ>

}
 8001154:	bf00      	nop
 8001156:	3728      	adds	r7, #40	; 0x28
 8001158:	46bd      	mov	sp, r7
 800115a:	e009      	b.n	8001170 <MX_GPIO_Init+0x3a0>
 800115c:	48000800 	.word	0x48000800
 8001160:	48000400 	.word	0x48000400
 8001164:	0f000003 	.word	0x0f000003
 8001168:	f0000003 	.word	0xf0000003
 800116c:	48001400 	.word	0x48001400
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop

08001174 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800117c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001180:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	2b00      	cmp	r3, #0
 800118a:	d013      	beq.n	80011b4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800118c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001190:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001194:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001198:	2b00      	cmp	r3, #0
 800119a:	d00b      	beq.n	80011b4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800119c:	e000      	b.n	80011a0 <ITM_SendChar+0x2c>
    {
      __NOP();
 800119e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80011a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d0f9      	beq.n	800119e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80011aa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	b2d2      	uxtb	r2, r2
 80011b2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80011b4:	687b      	ldr	r3, [r7, #4]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b086      	sub	sp, #24
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	60f8      	str	r0, [r7, #12]
 80011ca:	60b9      	str	r1, [r7, #8]
 80011cc:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
 80011d6:	e009      	b.n	80011ec <_write+0x2a>
    ITM_SendChar((*ptr++));
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	1c5a      	adds	r2, r3, #1
 80011dc:	60ba      	str	r2, [r7, #8]
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ffc7 	bl	8001174 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	3301      	adds	r3, #1
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	697a      	ldr	r2, [r7, #20]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	dbf1      	blt.n	80011d8 <_write+0x16>
  return len;
 80011f4:	687b      	ldr	r3, [r7, #4]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3718      	adds	r7, #24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001206:	f000 ff4a 	bl	800209e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800120a:	f000 f89f 	bl	800134c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800120e:	f7ff fddf 	bl	8000dd0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001212:	f7ff fc19 	bl	8000a48 <MX_DMA_Init>
  MX_DAC1_Init();
 8001216:	f7ff fac9 	bl	80007ac <MX_DAC1_Init>
  MX_DAC2_Init();
 800121a:	f7ff fb11 	bl	8000840 <MX_DAC2_Init>
  MX_ADC1_Init();
 800121e:	f7ff f987 	bl	8000530 <MX_ADC1_Init>
  MX_COMP1_Init();
 8001222:	f7ff fa69 	bl	80006f8 <MX_COMP1_Init>
  MX_TIM2_Init();
 8001226:	f000 fc31 	bl	8001a8c <MX_TIM2_Init>
  MX_TIM17_Init();
 800122a:	f000 fdc9 	bl	8001dc0 <MX_TIM17_Init>
  MX_SPI3_Init();
 800122e:	f000 f939 	bl	80014a4 <MX_SPI3_Init>
  MX_RNG_Init();
 8001232:	f000 f929 	bl	8001488 <MX_RNG_Init>
  MX_TIM1_Init();
 8001236:	f000 fbb9 	bl	80019ac <MX_TIM1_Init>
  MX_TIM8_Init();
 800123a:	f000 fce1 	bl	8001c00 <MX_TIM8_Init>
  MX_TIM16_Init();
 800123e:	f000 fd99 	bl	8001d74 <MX_TIM16_Init>
  MX_TIM15_Init();
 8001242:	f000 fd45 	bl	8001cd0 <MX_TIM15_Init>
  MX_TIM5_Init();
 8001246:	f000 fc8b 	bl	8001b60 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  // main signal function output (external)
  HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 800124a:	2300      	movs	r3, #0
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	2378      	movs	r3, #120	; 0x78
 8001250:	4a31      	ldr	r2, [pc, #196]	; (8001318 <main+0x118>)
 8001252:	2100      	movs	r1, #0
 8001254:	4831      	ldr	r0, [pc, #196]	; (800131c <main+0x11c>)
 8001256:	f002 fc79 	bl	8003b4c <HAL_DAC_Start_DMA>
  //TIM8->ARR = sin1_max_arr;

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 800125a:	2110      	movs	r1, #16
 800125c:	482f      	ldr	r0, [pc, #188]	; (800131c <main+0x11c>)
 800125e:	f002 fc22 	bl	8003aa6 <HAL_DAC_Start>
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
  HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, triangle_data_table, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 8001262:	2300      	movs	r3, #0
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	2378      	movs	r3, #120	; 0x78
 8001268:	4a2d      	ldr	r2, [pc, #180]	; (8001320 <main+0x120>)
 800126a:	2100      	movs	r1, #0
 800126c:	482d      	ldr	r0, [pc, #180]	; (8001324 <main+0x124>)
 800126e:	f002 fc6d 	bl	8003b4c <HAL_DAC_Start_DMA>

  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);
#ifndef DISABLE_ALL_TIMERS
  // single clock to run all DAC channels. TODO add independent clocks
  HAL_TIM_Base_Start(&htim8);
 8001272:	482d      	ldr	r0, [pc, #180]	; (8001328 <main+0x128>)
 8001274:	f004 ff30 	bl	80060d8 <HAL_TIM_Base_Start>
#endif //DISABLE_ALL_TIMERS

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 8001278:	2201      	movs	r2, #1
 800127a:	2108      	movs	r1, #8
 800127c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001280:	f003 fbae 	bl	80049e0 <HAL_GPIO_WritePin>

  // PGA gain
  HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8001284:	2201      	movs	r2, #1
 8001286:	2101      	movs	r1, #1
 8001288:	4828      	ldr	r0, [pc, #160]	; (800132c <main+0x12c>)
 800128a:	f003 fba9 	bl	80049e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 800128e:	2201      	movs	r2, #1
 8001290:	2120      	movs	r1, #32
 8001292:	4827      	ldr	r0, [pc, #156]	; (8001330 <main+0x130>)
 8001294:	f003 fba4 	bl	80049e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8001298:	2201      	movs	r2, #1
 800129a:	2110      	movs	r1, #16
 800129c:	4824      	ldr	r0, [pc, #144]	; (8001330 <main+0x130>)
 800129e:	f003 fb9f 	bl	80049e0 <HAL_GPIO_WritePin>

#ifndef DISABLE_ALL_TIMERS
  // start test routine (update_dc_bias_sweep())
  HAL_TIM_Base_Start_IT(&htim17);
 80012a2:	4824      	ldr	r0, [pc, #144]	; (8001334 <main+0x134>)
 80012a4:	f004 ff46 	bl	8006134 <HAL_TIM_Base_Start_IT>
#endif	//DISABLE_ALL_TIMERS


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 80012a8:	2200      	movs	r2, #0
 80012aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012ae:	4820      	ldr	r0, [pc, #128]	; (8001330 <main+0x130>)
 80012b0:	f003 fb96 	bl	80049e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 80012b4:	2200      	movs	r2, #0
 80012b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012ba:	481d      	ldr	r0, [pc, #116]	; (8001330 <main+0x130>)
 80012bc:	f003 fb90 	bl	80049e0 <HAL_GPIO_WritePin>

#ifdef TIM_TRIGGER_MODE
  // input capture on in TIM2 slave-mode TF1FP1

  // set HW switch to direct ext. trigger input to TIM pin
  HAL_GPIO_WritePin(TRIGMODE_GPIO_Port, TRIGMODE_Pin, GPIO_PIN_SET);
 80012c0:	2201      	movs	r2, #1
 80012c2:	2108      	movs	r1, #8
 80012c4:	481a      	ldr	r0, [pc, #104]	; (8001330 <main+0x130>)
 80012c6:	f003 fb8b 	bl	80049e0 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);	// TS5A3357 Pin6
  //HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); // TS5A3357 Pin5

  // clear slave mode select reg
  TIM2->SMCR &= ~(TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2);
 80012ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012d4:	f023 0307 	bic.w	r3, r3, #7
 80012d8:	6093      	str	r3, [r2, #8]

  // slave mode
  //TIM2->SMCR |= TIM_SMCR_SMS_2;						// SLAVE MODE: RESET
  TIM2->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_2;	// SLAVE MODE: GATED
 80012da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012e4:	f043 0305 	orr.w	r3, r3, #5
 80012e8:	6093      	str	r3, [r2, #8]
  //TIM2->SMCR |= TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;	// SLAVE MODE: TRIGGER

#ifndef DISABLE_ALL_TIMERS
  HAL_TIM_Base_Start_IT(&htim2);
 80012ea:	4813      	ldr	r0, [pc, #76]	; (8001338 <main+0x138>)
 80012ec:	f004 ff22 	bl	8006134 <HAL_TIM_Base_Start_IT>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);
 80012f0:	4812      	ldr	r0, [pc, #72]	; (800133c <main+0x13c>)
 80012f2:	f004 fef1 	bl	80060d8 <HAL_TIM_Base_Start>

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 80012f6:	4b12      	ldr	r3, [pc, #72]	; (8001340 <main+0x140>)
 80012f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012fc:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 80012fe:	4b10      	ldr	r3, [pc, #64]	; (8001340 <main+0x140>)
 8001300:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001304:	62da      	str	r2, [r3, #44]	; 0x2c



  // TFT lib enable
  DM_Init();
 8001306:	f7ff f81b 	bl	8000340 <DM_Init>
  //DM_RegisterStrings();

  HAL_TIM_Base_Start_IT(&htim15);
 800130a:	480e      	ldr	r0, [pc, #56]	; (8001344 <main+0x144>)
 800130c:	f004 ff12 	bl	8006134 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim5);
 8001310:	480d      	ldr	r0, [pc, #52]	; (8001348 <main+0x148>)
 8001312:	f004 fee1 	bl	80060d8 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001316:	e7fe      	b.n	8001316 <main+0x116>
 8001318:	2000000c 	.word	0x2000000c
 800131c:	20000588 	.word	0x20000588
 8001320:	200001ec 	.word	0x200001ec
 8001324:	20000574 	.word	0x20000574
 8001328:	200006c0 	.word	0x200006c0
 800132c:	48000400 	.word	0x48000400
 8001330:	48000800 	.word	0x48000800
 8001334:	20000758 	.word	0x20000758
 8001338:	2000083c 	.word	0x2000083c
 800133c:	200007f0 	.word	0x200007f0
 8001340:	40001000 	.word	0x40001000
 8001344:	2000070c 	.word	0x2000070c
 8001348:	200007a4 	.word	0x200007a4

0800134c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b0a8      	sub	sp, #160	; 0xa0
 8001350:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001352:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001356:	2238      	movs	r2, #56	; 0x38
 8001358:	2100      	movs	r1, #0
 800135a:	4618      	mov	r0, r3
 800135c:	f007 f88c 	bl	8008478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001360:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001370:	463b      	mov	r3, r7
 8001372:	2254      	movs	r2, #84	; 0x54
 8001374:	2100      	movs	r1, #0
 8001376:	4618      	mov	r0, r3
 8001378:	f007 f87e 	bl	8008478 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800137c:	2000      	movs	r0, #0
 800137e:	f003 fb47 	bl	8004a10 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8001382:	2322      	movs	r3, #34	; 0x22
 8001384:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001386:	f44f 7380 	mov.w	r3, #256	; 0x100
 800138a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800138c:	2340      	movs	r3, #64	; 0x40
 800138e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001390:	2301      	movs	r3, #1
 8001392:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001396:	2302      	movs	r3, #2
 8001398:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800139c:	2302      	movs	r3, #2
 800139e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80013a2:	2302      	movs	r3, #2
 80013a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 80013a8:	232a      	movs	r3, #42	; 0x2a
 80013aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013ae:	2302      	movs	r3, #2
 80013b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80013b4:	2304      	movs	r3, #4
 80013b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013ba:	2302      	movs	r3, #2
 80013bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80013c4:	4618      	mov	r0, r3
 80013c6:	f003 fbc7 	bl	8004b58 <HAL_RCC_OscConfig>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80013d0:	f000 f82a 	bl	8001428 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d4:	230f      	movs	r3, #15
 80013d6:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d8:	2303      	movs	r3, #3
 80013da:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013dc:	2300      	movs	r3, #0
 80013de:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013e0:	2300      	movs	r3, #0
 80013e2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013e4:	2300      	movs	r3, #0
 80013e6:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 80013e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013ec:	2108      	movs	r1, #8
 80013ee:	4618      	mov	r0, r3
 80013f0:	f003 feca 	bl	8005188 <HAL_RCC_ClockConfig>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80013fa:	f000 f815 	bl	8001428 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 80013fe:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001402:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8001404:	2300      	movs	r3, #0
 8001406:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001408:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800140c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800140e:	463b      	mov	r3, r7
 8001410:	4618      	mov	r0, r3
 8001412:	f004 f8a9 	bl	8005568 <HAL_RCCEx_PeriphCLKConfig>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800141c:	f000 f804 	bl	8001428 <Error_Handler>
  }
}
 8001420:	bf00      	nop
 8001422:	37a0      	adds	r7, #160	; 0xa0
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 8001436:	b480      	push	{r7}
 8001438:	b083      	sub	sp, #12
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f043 0204 	orr.w	r2, r3, #4
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	601a      	str	r2, [r3, #0]
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
	...

08001458 <LL_AHB2_GRP1_EnableClock>:
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001460:	4b08      	ldr	r3, [pc, #32]	; (8001484 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001462:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001464:	4907      	ldr	r1, [pc, #28]	; (8001484 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4313      	orrs	r3, r2
 800146a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800146c:	4b05      	ldr	r3, [pc, #20]	; (8001484 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800146e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4013      	ands	r3, r2
 8001474:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001476:	68fb      	ldr	r3, [r7, #12]
}
 8001478:	bf00      	nop
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	40021000 	.word	0x40021000

08001488 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 800148c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001490:	f7ff ffe2 	bl	8001458 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 8001494:	4802      	ldr	r0, [pc, #8]	; (80014a0 <MX_RNG_Init+0x18>)
 8001496:	f7ff ffce 	bl	8001436 <LL_RNG_Enable>

}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	50060800 	.word	0x50060800

080014a4 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 80014a8:	4b1b      	ldr	r3, [pc, #108]	; (8001518 <MX_SPI3_Init+0x74>)
 80014aa:	4a1c      	ldr	r2, [pc, #112]	; (800151c <MX_SPI3_Init+0x78>)
 80014ac:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80014ae:	4b1a      	ldr	r3, [pc, #104]	; (8001518 <MX_SPI3_Init+0x74>)
 80014b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014b4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80014b6:	4b18      	ldr	r3, [pc, #96]	; (8001518 <MX_SPI3_Init+0x74>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80014bc:	4b16      	ldr	r3, [pc, #88]	; (8001518 <MX_SPI3_Init+0x74>)
 80014be:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80014c2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014c4:	4b14      	ldr	r3, [pc, #80]	; (8001518 <MX_SPI3_Init+0x74>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014ca:	4b13      	ldr	r3, [pc, #76]	; (8001518 <MX_SPI3_Init+0x74>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <MX_SPI3_Init+0x74>)
 80014d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014d6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80014d8:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <MX_SPI3_Init+0x74>)
 80014da:	2210      	movs	r2, #16
 80014dc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014de:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <MX_SPI3_Init+0x74>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <MX_SPI3_Init+0x74>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014ea:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <MX_SPI3_Init+0x74>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80014f0:	4b09      	ldr	r3, [pc, #36]	; (8001518 <MX_SPI3_Init+0x74>)
 80014f2:	2207      	movs	r2, #7
 80014f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014f6:	4b08      	ldr	r3, [pc, #32]	; (8001518 <MX_SPI3_Init+0x74>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <MX_SPI3_Init+0x74>)
 80014fe:	2208      	movs	r2, #8
 8001500:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001502:	4805      	ldr	r0, [pc, #20]	; (8001518 <MX_SPI3_Init+0x74>)
 8001504:	f004 fa7c 	bl	8005a00 <HAL_SPI_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800150e:	f7ff ff8b 	bl	8001428 <Error_Handler>
  }

}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	2000065c 	.word	0x2000065c
 800151c:	40003c00 	.word	0x40003c00

08001520 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08a      	sub	sp, #40	; 0x28
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a17      	ldr	r2, [pc, #92]	; (800159c <HAL_SPI_MspInit+0x7c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d128      	bne.n	8001594 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001542:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <HAL_SPI_MspInit+0x80>)
 8001544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001546:	4a16      	ldr	r2, [pc, #88]	; (80015a0 <HAL_SPI_MspInit+0x80>)
 8001548:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800154c:	6593      	str	r3, [r2, #88]	; 0x58
 800154e:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <HAL_SPI_MspInit+0x80>)
 8001550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001552:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800155a:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <HAL_SPI_MspInit+0x80>)
 800155c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155e:	4a10      	ldr	r2, [pc, #64]	; (80015a0 <HAL_SPI_MspInit+0x80>)
 8001560:	f043 0304 	orr.w	r3, r3, #4
 8001564:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001566:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <HAL_SPI_MspInit+0x80>)
 8001568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156a:	f003 0304 	and.w	r3, r3, #4
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001572:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001578:	2302      	movs	r3, #2
 800157a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	2300      	movs	r3, #0
 8001582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001584:	2306      	movs	r3, #6
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	4619      	mov	r1, r3
 800158e:	4805      	ldr	r0, [pc, #20]	; (80015a4 <HAL_SPI_MspInit+0x84>)
 8001590:	f003 f88c 	bl	80046ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001594:	bf00      	nop
 8001596:	3728      	adds	r7, #40	; 0x28
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40003c00 	.word	0x40003c00
 80015a0:	40021000 	.word	0x40021000
 80015a4:	48000800 	.word	0x48000800

080015a8 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80015ac:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	4a04      	ldr	r2, [pc, #16]	; (80015c4 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80015b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b6:	6093      	str	r3, [r2, #8]
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	40007000 	.word	0x40007000

080015c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ce:	4b0f      	ldr	r3, [pc, #60]	; (800160c <HAL_MspInit+0x44>)
 80015d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015d2:	4a0e      	ldr	r2, [pc, #56]	; (800160c <HAL_MspInit+0x44>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6613      	str	r3, [r2, #96]	; 0x60
 80015da:	4b0c      	ldr	r3, [pc, #48]	; (800160c <HAL_MspInit+0x44>)
 80015dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	607b      	str	r3, [r7, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e6:	4b09      	ldr	r3, [pc, #36]	; (800160c <HAL_MspInit+0x44>)
 80015e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ea:	4a08      	ldr	r2, [pc, #32]	; (800160c <HAL_MspInit+0x44>)
 80015ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f0:	6593      	str	r3, [r2, #88]	; 0x58
 80015f2:	4b06      	ldr	r3, [pc, #24]	; (800160c <HAL_MspInit+0x44>)
 80015f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fa:	603b      	str	r3, [r7, #0]
 80015fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 80015fe:	f7ff ffd3 	bl	80015a8 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40021000 	.word	0x40021000

08001610 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8001618:	4b07      	ldr	r3, [pc, #28]	; (8001638 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800161a:	695a      	ldr	r2, [r3, #20]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4013      	ands	r3, r2
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	429a      	cmp	r2, r3
 8001624:	d101      	bne.n	800162a <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8001626:	2301      	movs	r3, #1
 8001628:	e000      	b.n	800162c <LL_EXTI_IsActiveFlag_0_31+0x1c>
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	40010400 	.word	0x40010400

0800163c <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001644:	4a04      	ldr	r2, [pc, #16]	; (8001658 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6153      	str	r3, [r2, #20]
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	40010400 	.word	0x40010400

0800165c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800166e:	e7fe      	b.n	800166e <HardFault_Handler+0x4>

08001670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001674:	e7fe      	b.n	8001674 <MemManage_Handler+0x4>

08001676 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800167a:	e7fe      	b.n	800167a <BusFault_Handler+0x4>

0800167c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001680:	e7fe      	b.n	8001680 <UsageFault_Handler+0x4>

08001682 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016b0:	f000 fd48 	bl	8002144 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

//	if(HAL_GPIO_ReadPin(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin))
//	{
		//snprintf(control_pressed, sizeof(control_pressed), "BTN3");
		EM_SetNewEvent(Bias_Select_Event);
 80016bc:	2004      	movs	r0, #4
 80016be:	f7fe fe9f 	bl	8000400 <EM_SetNewEvent>
 		//printf("BTN3_EXTI0_Pin\n");
//	}

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 80016c2:	2001      	movs	r0, #1
 80016c4:	f7ff ffa4 	bl	8001610 <LL_EXTI_IsActiveFlag_0_31>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d002      	beq.n	80016d4 <EXTI0_IRQHandler+0x1c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 80016ce:	2001      	movs	r0, #1
 80016d0:	f7ff ffb4 	bl	800163c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0

//	if(HAL_GPIO_ReadPin(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin))
//	{
		//snprintf(control_pressed, sizeof(control_pressed), "BTN4");
		//printf("BTN4_EXTI1_Pin\n");
		EM_SetNewEvent(Freq_Select_Event);
 80016dc:	2002      	movs	r0, #2
 80016de:	f7fe fe8f 	bl	8000400 <EM_SetNewEvent>
//	}

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 80016e2:	2002      	movs	r0, #2
 80016e4:	f7ff ff94 	bl	8001610 <LL_EXTI_IsActiveFlag_0_31>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d002      	beq.n	80016f4 <EXTI1_IRQHandler+0x1c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 80016ee:	2002      	movs	r0, #2
 80016f0:	f7ff ffa4 	bl	800163c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */


		//snprintf(control_pressed, sizeof(control_pressed), "ENC_BTN");
		//printf("ENC_EXTI2_Pin\n");
		EM_SetNewEvent(Adjust_Confirmed_Event);
 80016fc:	2005      	movs	r0, #5
 80016fe:	f7fe fe7f 	bl	8000400 <EM_SetNewEvent>


  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8001702:	2004      	movs	r0, #4
 8001704:	f7ff ff84 	bl	8001610 <LL_EXTI_IsActiveFlag_0_31>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d002      	beq.n	8001714 <EXTI2_IRQHandler+0x1c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 800170e:	2004      	movs	r0, #4
 8001710:	f7ff ff94 	bl	800163c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001714:	bf00      	nop
 8001716:	bd80      	pop	{r7, pc}

08001718 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	//printf("Test\n");
	//printf("%lu\n", trigger_input[0]);
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800171c:	4802      	ldr	r0, [pc, #8]	; (8001728 <DMA1_Channel1_IRQHandler+0x10>)
 800171e:	f002 fe76 	bl	800440e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	200004f0 	.word	0x200004f0

0800172c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001730:	4802      	ldr	r0, [pc, #8]	; (800173c <DMA1_Channel2_IRQHandler+0x10>)
 8001732:	f002 fe6c 	bl	800440e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	2000059c 	.word	0x2000059c

08001740 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8001744:	4802      	ldr	r0, [pc, #8]	; (8001750 <DMA1_Channel3_IRQHandler+0x10>)
 8001746:	f002 fe62 	bl	800440e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200005fc 	.word	0x200005fc

08001754 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	DM_UpdateDisplay();
 8001758:	f7fe fe16 	bl	8000388 <DM_UpdateDisplay>
	EM_ProcessEvent();
 800175c:	f7fe fea8 	bl	80004b0 <EM_ProcessEvent>
  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001760:	4803      	ldr	r0, [pc, #12]	; (8001770 <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 8001762:	f004 fdc3 	bl	80062ec <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8001766:	4803      	ldr	r0, [pc, #12]	; (8001774 <TIM1_BRK_TIM15_IRQHandler+0x20>)
 8001768:	f004 fdc0 	bl	80062ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}
 8001770:	200007f0 	.word	0x200007f0
 8001774:	2000070c 	.word	0x2000070c

08001778 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	snprintf(control_pressed, sizeof(control_pressed), " ");
 800177c:	4a05      	ldr	r2, [pc, #20]	; (8001794 <TIM1_UP_TIM16_IRQHandler+0x1c>)
 800177e:	4b06      	ldr	r3, [pc, #24]	; (8001798 <TIM1_UP_TIM16_IRQHandler+0x20>)
 8001780:	881b      	ldrh	r3, [r3, #0]
 8001782:	8013      	strh	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001784:	4805      	ldr	r0, [pc, #20]	; (800179c <TIM1_UP_TIM16_IRQHandler+0x24>)
 8001786:	f004 fdb1 	bl	80062ec <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800178a:	4805      	ldr	r0, [pc, #20]	; (80017a0 <TIM1_UP_TIM16_IRQHandler+0x28>)
 800178c:	f004 fdae 	bl	80062ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000478 	.word	0x20000478
 8001798:	0800946c 	.word	0x0800946c
 800179c:	200007f0 	.word	0x200007f0
 80017a0:	20000888 	.word	0x20000888

080017a4 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	update_dc_bias_sweep();
 80017a8:	f7ff f988 	bl	8000abc <update_dc_bias_sweep>
	if((TIM1->CNT < last_enc_value) || (TIM1->CNT > last_enc_value))
 80017ac:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 80017ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b0:	4a11      	ldr	r2, [pc, #68]	; (80017f8 <TIM1_TRG_COM_TIM17_IRQHandler+0x54>)
 80017b2:	8812      	ldrh	r2, [r2, #0]
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d305      	bcc.n	80017c4 <TIM1_TRG_COM_TIM17_IRQHandler+0x20>
 80017b8:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 80017ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017bc:	4a0e      	ldr	r2, [pc, #56]	; (80017f8 <TIM1_TRG_COM_TIM17_IRQHandler+0x54>)
 80017be:	8812      	ldrh	r2, [r2, #0]
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d90a      	bls.n	80017da <TIM1_TRG_COM_TIM17_IRQHandler+0x36>
	{
		printf("%lu\n",TIM1->CNT);
 80017c4:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 80017c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c8:	4619      	mov	r1, r3
 80017ca:	480c      	ldr	r0, [pc, #48]	; (80017fc <TIM1_TRG_COM_TIM17_IRQHandler+0x58>)
 80017cc:	f006 fe5c 	bl	8008488 <iprintf>
		new_enc_value = TIM1->CNT;
 80017d0:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 80017d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <TIM1_TRG_COM_TIM17_IRQHandler+0x5c>)
 80017d8:	801a      	strh	r2, [r3, #0]
	}


	last_enc_value = TIM1->CNT;
 80017da:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 80017dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017de:	b29a      	uxth	r2, r3
 80017e0:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <TIM1_TRG_COM_TIM17_IRQHandler+0x54>)
 80017e2:	801a      	strh	r2, [r3, #0]


  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017e4:	4807      	ldr	r0, [pc, #28]	; (8001804 <TIM1_TRG_COM_TIM17_IRQHandler+0x60>)
 80017e6:	f004 fd81 	bl	80062ec <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 80017ea:	4807      	ldr	r0, [pc, #28]	; (8001808 <TIM1_TRG_COM_TIM17_IRQHandler+0x64>)
 80017ec:	f004 fd7e 	bl	80062ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40012c00 	.word	0x40012c00
 80017f8:	20000468 	.word	0x20000468
 80017fc:	08009470 	.word	0x08009470
 8001800:	2000046a 	.word	0x2000046a
 8001804:	200007f0 	.word	0x200007f0
 8001808:	20000758 	.word	0x20000758

0800180c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001810:	4802      	ldr	r0, [pc, #8]	; (800181c <TIM2_IRQHandler+0x10>)
 8001812:	f004 fd6b 	bl	80062ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	2000083c 	.word	0x2000083c

08001820 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	if(HAL_GPIO_ReadPin(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin))
 8001824:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001828:	4815      	ldr	r0, [pc, #84]	; (8001880 <EXTI15_10_IRQHandler+0x60>)
 800182a:	f003 f8c1 	bl	80049b0 <HAL_GPIO_ReadPin>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d002      	beq.n	800183a <EXTI15_10_IRQHandler+0x1a>
	{
		EM_SetNewEvent(Ampl_Select_Event);
 8001834:	2003      	movs	r0, #3
 8001836:	f7fe fde3 	bl	8000400 <EM_SetNewEvent>
		//snprintf(control_pressed, sizeof(control_pressed), "BTN1");
		//printf("BTN1_EXTI14_Pin\n");
	}
	if(HAL_GPIO_ReadPin(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin))
 800183a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800183e:	4810      	ldr	r0, [pc, #64]	; (8001880 <EXTI15_10_IRQHandler+0x60>)
 8001840:	f003 f8b6 	bl	80049b0 <HAL_GPIO_ReadPin>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d002      	beq.n	8001850 <EXTI15_10_IRQHandler+0x30>
	{
		EM_SetNewEvent(Func_Select_Event);
 800184a:	2001      	movs	r0, #1
 800184c:	f7fe fdd8 	bl	8000400 <EM_SetNewEvent>
		//snprintf(control_pressed, sizeof(control_pressed), "BTN2");
		//printf("BTN2_EXTI15_Pin\n");
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8001850:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001854:	f7ff fedc 	bl	8001610 <LL_EXTI_IsActiveFlag_0_31>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <EXTI15_10_IRQHandler+0x46>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 800185e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001862:	f7ff feeb 	bl	800163c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8001866:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800186a:	f7ff fed1 	bl	8001610 <LL_EXTI_IsActiveFlag_0_31>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d003      	beq.n	800187c <EXTI15_10_IRQHandler+0x5c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8001874:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001878:	f7ff fee0 	bl	800163c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}
 8001880:	48000800 	.word	0x48000800

08001884 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	e00a      	b.n	80018ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001896:	f3af 8000 	nop.w
 800189a:	4601      	mov	r1, r0
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	1c5a      	adds	r2, r3, #1
 80018a0:	60ba      	str	r2, [r7, #8]
 80018a2:	b2ca      	uxtb	r2, r1
 80018a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	3301      	adds	r3, #1
 80018aa:	617b      	str	r3, [r7, #20]
 80018ac:	697a      	ldr	r2, [r7, #20]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	dbf0      	blt.n	8001896 <_read+0x12>
	}

return len;
 80018b4:	687b      	ldr	r3, [r7, #4]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3718      	adds	r7, #24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <_close>:
	}
	return len;
}

int _close(int file)
{
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
	return -1;
 80018c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018d6:	b480      	push	{r7}
 80018d8:	b083      	sub	sp, #12
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
 80018de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018e6:	605a      	str	r2, [r3, #4]
	return 0;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <_isatty>:

int _isatty(int file)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
	return 1;
 80018fe:	2301      	movs	r3, #1
}
 8001900:	4618      	mov	r0, r3
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
	return 0;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
	...

08001928 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001930:	4b11      	ldr	r3, [pc, #68]	; (8001978 <_sbrk+0x50>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d102      	bne.n	800193e <_sbrk+0x16>
		heap_end = &end;
 8001938:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <_sbrk+0x50>)
 800193a:	4a10      	ldr	r2, [pc, #64]	; (800197c <_sbrk+0x54>)
 800193c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800193e:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <_sbrk+0x50>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001944:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <_sbrk+0x50>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4413      	add	r3, r2
 800194c:	466a      	mov	r2, sp
 800194e:	4293      	cmp	r3, r2
 8001950:	d907      	bls.n	8001962 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001952:	f006 fd67 	bl	8008424 <__errno>
 8001956:	4602      	mov	r2, r0
 8001958:	230c      	movs	r3, #12
 800195a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800195c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001960:	e006      	b.n	8001970 <_sbrk+0x48>
	}

	heap_end += incr;
 8001962:	4b05      	ldr	r3, [pc, #20]	; (8001978 <_sbrk+0x50>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4413      	add	r3, r2
 800196a:	4a03      	ldr	r2, [pc, #12]	; (8001978 <_sbrk+0x50>)
 800196c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800196e:	68fb      	ldr	r3, [r7, #12]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	2000046c 	.word	0x2000046c
 800197c:	200008e0 	.word	0x200008e0

08001980 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001984:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <SystemInit+0x28>)
 8001986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800198a:	4a07      	ldr	r2, [pc, #28]	; (80019a8 <SystemInit+0x28>)
 800198c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001990:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001994:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <SystemInit+0x28>)
 8001996:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800199a:	609a      	str	r2, [r3, #8]
#endif
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b09a      	sub	sp, #104	; 0x68
 80019b0:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80019b2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80019b6:	2224      	movs	r2, #36	; 0x24
 80019b8:	2100      	movs	r1, #0
 80019ba:	4618      	mov	r0, r3
 80019bc:	f006 fd5c 	bl	8008478 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019cc:	1d3b      	adds	r3, r7, #4
 80019ce:	2234      	movs	r2, #52	; 0x34
 80019d0:	2100      	movs	r1, #0
 80019d2:	4618      	mov	r0, r3
 80019d4:	f006 fd50 	bl	8008478 <memset>

  htim1.Instance = TIM1;
 80019d8:	4b2a      	ldr	r3, [pc, #168]	; (8001a84 <MX_TIM1_Init+0xd8>)
 80019da:	4a2b      	ldr	r2, [pc, #172]	; (8001a88 <MX_TIM1_Init+0xdc>)
 80019dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80019de:	4b29      	ldr	r3, [pc, #164]	; (8001a84 <MX_TIM1_Init+0xd8>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 80019e4:	4b27      	ldr	r3, [pc, #156]	; (8001a84 <MX_TIM1_Init+0xd8>)
 80019e6:	2240      	movs	r2, #64	; 0x40
 80019e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 80019ea:	4b26      	ldr	r3, [pc, #152]	; (8001a84 <MX_TIM1_Init+0xd8>)
 80019ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f2:	4b24      	ldr	r3, [pc, #144]	; (8001a84 <MX_TIM1_Init+0xd8>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019f8:	4b22      	ldr	r3, [pc, #136]	; (8001a84 <MX_TIM1_Init+0xd8>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019fe:	4b21      	ldr	r3, [pc, #132]	; (8001a84 <MX_TIM1_Init+0xd8>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a04:	2303      	movs	r3, #3
 8001a06:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a10:	2300      	movs	r3, #0
 8001a12:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a20:	2300      	movs	r3, #0
 8001a22:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001a28:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4815      	ldr	r0, [pc, #84]	; (8001a84 <MX_TIM1_Init+0xd8>)
 8001a30:	f004 fbb6 	bl	80061a0 <HAL_TIM_Encoder_Init>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001a3a:	f7ff fcf5 	bl	8001428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a42:	2300      	movs	r3, #0
 8001a44:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a46:	2300      	movs	r3, #0
 8001a48:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a4a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a4e:	4619      	mov	r1, r3
 8001a50:	480c      	ldr	r0, [pc, #48]	; (8001a84 <MX_TIM1_Init+0xd8>)
 8001a52:	f005 f92f 	bl	8006cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8001a5c:	f7ff fce4 	bl	8001428 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001a60:	2300      	movs	r3, #0
 8001a62:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001a64:	2300      	movs	r3, #0
 8001a66:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a68:	1d3b      	adds	r3, r7, #4
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4805      	ldr	r0, [pc, #20]	; (8001a84 <MX_TIM1_Init+0xd8>)
 8001a6e:	f005 f9b7 	bl	8006de0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8001a78:	f7ff fcd6 	bl	8001428 <Error_Handler>
  }

}
 8001a7c:	bf00      	nop
 8001a7e:	3768      	adds	r7, #104	; 0x68
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	200007f0 	.word	0x200007f0
 8001a88:	40012c00 	.word	0x40012c00

08001a8c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08c      	sub	sp, #48	; 0x30
 8001a90:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a92:	f107 0320 	add.w	r3, r7, #32
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	605a      	str	r2, [r3, #4]
 8001a9c:	609a      	str	r2, [r3, #8]
 8001a9e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001aa0:	f107 030c 	add.w	r3, r7, #12
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ab0:	463b      	mov	r3, r7
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
 8001ab8:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8001aba:	4b28      	ldr	r3, [pc, #160]	; (8001b5c <MX_TIM2_Init+0xd0>)
 8001abc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ac0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2047;
 8001ac2:	4b26      	ldr	r3, [pc, #152]	; (8001b5c <MX_TIM2_Init+0xd0>)
 8001ac4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001ac8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aca:	4b24      	ldr	r3, [pc, #144]	; (8001b5c <MX_TIM2_Init+0xd0>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 8001ad0:	4b22      	ldr	r3, [pc, #136]	; (8001b5c <MX_TIM2_Init+0xd0>)
 8001ad2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ad6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ad8:	4b20      	ldr	r3, [pc, #128]	; (8001b5c <MX_TIM2_Init+0xd0>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ade:	4b1f      	ldr	r3, [pc, #124]	; (8001b5c <MX_TIM2_Init+0xd0>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ae4:	481d      	ldr	r0, [pc, #116]	; (8001b5c <MX_TIM2_Init+0xd0>)
 8001ae6:	f004 faa0 	bl	800602a <HAL_TIM_Base_Init>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001af0:	f7ff fc9a 	bl	8001428 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001af8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001afa:	f107 0320 	add.w	r3, r7, #32
 8001afe:	4619      	mov	r1, r3
 8001b00:	4816      	ldr	r0, [pc, #88]	; (8001b5c <MX_TIM2_Init+0xd0>)
 8001b02:	f004 fd73 	bl	80065ec <HAL_TIM_ConfigClockSource>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001b0c:	f7ff fc8c 	bl	8001428 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8001b10:	2305      	movs	r3, #5
 8001b12:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001b14:	2350      	movs	r3, #80	; 0x50
 8001b16:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001b20:	f107 030c 	add.w	r3, r7, #12
 8001b24:	4619      	mov	r1, r3
 8001b26:	480d      	ldr	r0, [pc, #52]	; (8001b5c <MX_TIM2_Init+0xd0>)
 8001b28:	f004 fe50 	bl	80067cc <HAL_TIM_SlaveConfigSynchro>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8001b32:	f7ff fc79 	bl	8001428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b36:	2300      	movs	r3, #0
 8001b38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b3e:	463b      	mov	r3, r7
 8001b40:	4619      	mov	r1, r3
 8001b42:	4806      	ldr	r0, [pc, #24]	; (8001b5c <MX_TIM2_Init+0xd0>)
 8001b44:	f005 f8b6 	bl	8006cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8001b4e:	f7ff fc6b 	bl	8001428 <Error_Handler>
  }

}
 8001b52:	bf00      	nop
 8001b54:	3730      	adds	r7, #48	; 0x30
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	2000083c 	.word	0x2000083c

08001b60 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b088      	sub	sp, #32
 8001b64:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b66:	f107 0310 	add.w	r3, r7, #16
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	605a      	str	r2, [r3, #4]
 8001b70:	609a      	str	r2, [r3, #8]
 8001b72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b74:	1d3b      	adds	r3, r7, #4
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 8001b7e:	4b1e      	ldr	r3, [pc, #120]	; (8001bf8 <MX_TIM5_Init+0x98>)
 8001b80:	4a1e      	ldr	r2, [pc, #120]	; (8001bfc <MX_TIM5_Init+0x9c>)
 8001b82:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 65535;
 8001b84:	4b1c      	ldr	r3, [pc, #112]	; (8001bf8 <MX_TIM5_Init+0x98>)
 8001b86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b8a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b8c:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <MX_TIM5_Init+0x98>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001b92:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <MX_TIM5_Init+0x98>)
 8001b94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b98:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001b9a:	4b17      	ldr	r3, [pc, #92]	; (8001bf8 <MX_TIM5_Init+0x98>)
 8001b9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ba0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ba2:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <MX_TIM5_Init+0x98>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001ba8:	4813      	ldr	r0, [pc, #76]	; (8001bf8 <MX_TIM5_Init+0x98>)
 8001baa:	f004 fa3e 	bl	800602a <HAL_TIM_Base_Init>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001bb4:	f7ff fc38 	bl	8001428 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bbc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001bbe:	f107 0310 	add.w	r3, r7, #16
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	480c      	ldr	r0, [pc, #48]	; (8001bf8 <MX_TIM5_Init+0x98>)
 8001bc6:	f004 fd11 	bl	80065ec <HAL_TIM_ConfigClockSource>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8001bd0:	f7ff fc2a 	bl	8001428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001bdc:	1d3b      	adds	r3, r7, #4
 8001bde:	4619      	mov	r1, r3
 8001be0:	4805      	ldr	r0, [pc, #20]	; (8001bf8 <MX_TIM5_Init+0x98>)
 8001be2:	f005 f867 	bl	8006cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8001bec:	f7ff fc1c 	bl	8001428 <Error_Handler>
  }

}
 8001bf0:	bf00      	nop
 8001bf2:	3720      	adds	r7, #32
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	200007a4 	.word	0x200007a4
 8001bfc:	40000c00 	.word	0x40000c00

08001c00 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b094      	sub	sp, #80	; 0x50
 8001c04:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c06:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	605a      	str	r2, [r3, #4]
 8001c10:	609a      	str	r2, [r3, #8]
 8001c12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c14:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c20:	463b      	mov	r3, r7
 8001c22:	2234      	movs	r2, #52	; 0x34
 8001c24:	2100      	movs	r1, #0
 8001c26:	4618      	mov	r0, r3
 8001c28:	f006 fc26 	bl	8008478 <memset>

  htim8.Instance = TIM8;
 8001c2c:	4b26      	ldr	r3, [pc, #152]	; (8001cc8 <MX_TIM8_Init+0xc8>)
 8001c2e:	4a27      	ldr	r2, [pc, #156]	; (8001ccc <MX_TIM8_Init+0xcc>)
 8001c30:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001c32:	4b25      	ldr	r3, [pc, #148]	; (8001cc8 <MX_TIM8_Init+0xc8>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c38:	4b23      	ldr	r3, [pc, #140]	; (8001cc8 <MX_TIM8_Init+0xc8>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 8001c3e:	4b22      	ldr	r3, [pc, #136]	; (8001cc8 <MX_TIM8_Init+0xc8>)
 8001c40:	2201      	movs	r2, #1
 8001c42:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c44:	4b20      	ldr	r3, [pc, #128]	; (8001cc8 <MX_TIM8_Init+0xc8>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001c4a:	4b1f      	ldr	r3, [pc, #124]	; (8001cc8 <MX_TIM8_Init+0xc8>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c50:	4b1d      	ldr	r3, [pc, #116]	; (8001cc8 <MX_TIM8_Init+0xc8>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001c56:	481c      	ldr	r0, [pc, #112]	; (8001cc8 <MX_TIM8_Init+0xc8>)
 8001c58:	f004 f9e7 	bl	800602a <HAL_TIM_Base_Init>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8001c62:	f7ff fbe1 	bl	8001428 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c6a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001c6c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c70:	4619      	mov	r1, r3
 8001c72:	4815      	ldr	r0, [pc, #84]	; (8001cc8 <MX_TIM8_Init+0xc8>)
 8001c74:	f004 fcba 	bl	80065ec <HAL_TIM_ConfigClockSource>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001c7e:	f7ff fbd3 	bl	8001428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001c82:	2320      	movs	r3, #32
 8001c84:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c86:	2300      	movs	r3, #0
 8001c88:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001c8e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c92:	4619      	mov	r1, r3
 8001c94:	480c      	ldr	r0, [pc, #48]	; (8001cc8 <MX_TIM8_Init+0xc8>)
 8001c96:	f005 f80d 	bl	8006cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001ca0:	f7ff fbc2 	bl	8001428 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001cac:	463b      	mov	r3, r7
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4805      	ldr	r0, [pc, #20]	; (8001cc8 <MX_TIM8_Init+0xc8>)
 8001cb2:	f005 f895 	bl	8006de0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8001cbc:	f7ff fbb4 	bl	8001428 <Error_Handler>
  }

}
 8001cc0:	bf00      	nop
 8001cc2:	3750      	adds	r7, #80	; 0x50
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	200006c0 	.word	0x200006c0
 8001ccc:	40013400 	.word	0x40013400

08001cd0 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b088      	sub	sp, #32
 8001cd4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cd6:	f107 0310 	add.w	r3, r7, #16
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	605a      	str	r2, [r3, #4]
 8001ce0:	609a      	str	r2, [r3, #8]
 8001ce2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ce4:	1d3b      	adds	r3, r7, #4
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	605a      	str	r2, [r3, #4]
 8001cec:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 8001cee:	4b1f      	ldr	r3, [pc, #124]	; (8001d6c <MX_TIM15_Init+0x9c>)
 8001cf0:	4a1f      	ldr	r2, [pc, #124]	; (8001d70 <MX_TIM15_Init+0xa0>)
 8001cf2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 8001cf4:	4b1d      	ldr	r3, [pc, #116]	; (8001d6c <MX_TIM15_Init+0x9c>)
 8001cf6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cfa:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cfc:	4b1b      	ldr	r3, [pc, #108]	; (8001d6c <MX_TIM15_Init+0x9c>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 8001d02:	4b1a      	ldr	r3, [pc, #104]	; (8001d6c <MX_TIM15_Init+0x9c>)
 8001d04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d08:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d0a:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <MX_TIM15_Init+0x9c>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001d10:	4b16      	ldr	r3, [pc, #88]	; (8001d6c <MX_TIM15_Init+0x9c>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d16:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <MX_TIM15_Init+0x9c>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001d1c:	4813      	ldr	r0, [pc, #76]	; (8001d6c <MX_TIM15_Init+0x9c>)
 8001d1e:	f004 f984 	bl	800602a <HAL_TIM_Base_Init>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8001d28:	f7ff fb7e 	bl	8001428 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d30:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001d32:	f107 0310 	add.w	r3, r7, #16
 8001d36:	4619      	mov	r1, r3
 8001d38:	480c      	ldr	r0, [pc, #48]	; (8001d6c <MX_TIM15_Init+0x9c>)
 8001d3a:	f004 fc57 	bl	80065ec <HAL_TIM_ConfigClockSource>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8001d44:	f7ff fb70 	bl	8001428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001d50:	1d3b      	adds	r3, r7, #4
 8001d52:	4619      	mov	r1, r3
 8001d54:	4805      	ldr	r0, [pc, #20]	; (8001d6c <MX_TIM15_Init+0x9c>)
 8001d56:	f004 ffad 	bl	8006cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8001d60:	f7ff fb62 	bl	8001428 <Error_Handler>
  }

}
 8001d64:	bf00      	nop
 8001d66:	3720      	adds	r7, #32
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	2000070c 	.word	0x2000070c
 8001d70:	40014000 	.word	0x40014000

08001d74 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8001d78:	4b0f      	ldr	r3, [pc, #60]	; (8001db8 <MX_TIM16_Init+0x44>)
 8001d7a:	4a10      	ldr	r2, [pc, #64]	; (8001dbc <MX_TIM16_Init+0x48>)
 8001d7c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	; (8001db8 <MX_TIM16_Init+0x44>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d84:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <MX_TIM16_Init+0x44>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 8191;
 8001d8a:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <MX_TIM16_Init+0x44>)
 8001d8c:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8001d90:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d92:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <MX_TIM16_Init+0x44>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001d98:	4b07      	ldr	r3, [pc, #28]	; (8001db8 <MX_TIM16_Init+0x44>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d9e:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <MX_TIM16_Init+0x44>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001da4:	4804      	ldr	r0, [pc, #16]	; (8001db8 <MX_TIM16_Init+0x44>)
 8001da6:	f004 f940 	bl	800602a <HAL_TIM_Base_Init>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001db0:	f7ff fb3a 	bl	8001428 <Error_Handler>
  }

}
 8001db4:	bf00      	nop
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20000888 	.word	0x20000888
 8001dbc:	40014400 	.word	0x40014400

08001dc0 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8001dc4:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <MX_TIM17_Init+0x44>)
 8001dc6:	4a10      	ldr	r2, [pc, #64]	; (8001e08 <MX_TIM17_Init+0x48>)
 8001dc8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1023;
 8001dca:	4b0e      	ldr	r3, [pc, #56]	; (8001e04 <MX_TIM17_Init+0x44>)
 8001dcc:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001dd0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd2:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <MX_TIM17_Init+0x44>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 64;
 8001dd8:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <MX_TIM17_Init+0x44>)
 8001dda:	2240      	movs	r2, #64	; 0x40
 8001ddc:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dde:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <MX_TIM17_Init+0x44>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001de4:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <MX_TIM17_Init+0x44>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dea:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <MX_TIM17_Init+0x44>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001df0:	4804      	ldr	r0, [pc, #16]	; (8001e04 <MX_TIM17_Init+0x44>)
 8001df2:	f004 f91a 	bl	800602a <HAL_TIM_Base_Init>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8001dfc:	f7ff fb14 	bl	8001428 <Error_Handler>
  }

}
 8001e00:	bf00      	nop
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20000758 	.word	0x20000758
 8001e08:	40014800 	.word	0x40014800

08001e0c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08a      	sub	sp, #40	; 0x28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e14:	f107 0314 	add.w	r3, r7, #20
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a23      	ldr	r2, [pc, #140]	; (8001eb8 <HAL_TIM_Encoder_MspInit+0xac>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d13f      	bne.n	8001eae <HAL_TIM_Encoder_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e2e:	4b23      	ldr	r3, [pc, #140]	; (8001ebc <HAL_TIM_Encoder_MspInit+0xb0>)
 8001e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e32:	4a22      	ldr	r2, [pc, #136]	; (8001ebc <HAL_TIM_Encoder_MspInit+0xb0>)
 8001e34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e38:	6613      	str	r3, [r2, #96]	; 0x60
 8001e3a:	4b20      	ldr	r3, [pc, #128]	; (8001ebc <HAL_TIM_Encoder_MspInit+0xb0>)
 8001e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e42:	613b      	str	r3, [r7, #16]
 8001e44:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e46:	4b1d      	ldr	r3, [pc, #116]	; (8001ebc <HAL_TIM_Encoder_MspInit+0xb0>)
 8001e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4a:	4a1c      	ldr	r2, [pc, #112]	; (8001ebc <HAL_TIM_Encoder_MspInit+0xb0>)
 8001e4c:	f043 0304 	orr.w	r3, r3, #4
 8001e50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e52:	4b1a      	ldr	r3, [pc, #104]	; (8001ebc <HAL_TIM_Encoder_MspInit+0xb0>)
 8001e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e56:	f003 0304 	and.w	r3, r3, #4
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e62:	2302      	movs	r3, #2
 8001e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e72:	f107 0314 	add.w	r3, r7, #20
 8001e76:	4619      	mov	r1, r3
 8001e78:	4811      	ldr	r0, [pc, #68]	; (8001ec0 <HAL_TIM_Encoder_MspInit+0xb4>)
 8001e7a:	f002 fc17 	bl	80046ac <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 1, 0);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2101      	movs	r1, #1
 8001e82:	2018      	movs	r0, #24
 8001e84:	f001 fdb9 	bl	80039fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001e88:	2018      	movs	r0, #24
 8001e8a:	f001 fdd0 	bl	8003a2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2101      	movs	r1, #1
 8001e92:	2019      	movs	r0, #25
 8001e94:	f001 fdb1 	bl	80039fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001e98:	2019      	movs	r0, #25
 8001e9a:	f001 fdc8 	bl	8003a2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	201a      	movs	r0, #26
 8001ea4:	f001 fda9 	bl	80039fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001ea8:	201a      	movs	r0, #26
 8001eaa:	f001 fdc0 	bl	8003a2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001eae:	bf00      	nop
 8001eb0:	3728      	adds	r7, #40	; 0x28
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40012c00 	.word	0x40012c00
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	48000800 	.word	0x48000800

08001ec4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08e      	sub	sp, #56	; 0x38
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ecc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	60da      	str	r2, [r3, #12]
 8001eda:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ee4:	d131      	bne.n	8001f4a <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ee6:	4b53      	ldr	r3, [pc, #332]	; (8002034 <HAL_TIM_Base_MspInit+0x170>)
 8001ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eea:	4a52      	ldr	r2, [pc, #328]	; (8002034 <HAL_TIM_Base_MspInit+0x170>)
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ef2:	4b50      	ldr	r3, [pc, #320]	; (8002034 <HAL_TIM_Base_MspInit+0x170>)
 8001ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	623b      	str	r3, [r7, #32]
 8001efc:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efe:	4b4d      	ldr	r3, [pc, #308]	; (8002034 <HAL_TIM_Base_MspInit+0x170>)
 8001f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f02:	4a4c      	ldr	r2, [pc, #304]	; (8002034 <HAL_TIM_Base_MspInit+0x170>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f0a:	4b4a      	ldr	r3, [pc, #296]	; (8002034 <HAL_TIM_Base_MspInit+0x170>)
 8001f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	61fb      	str	r3, [r7, #28]
 8001f14:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f16:	2301      	movs	r3, #1
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f22:	2300      	movs	r3, #0
 8001f24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f26:	2301      	movs	r3, #1
 8001f28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f2e:	4619      	mov	r1, r3
 8001f30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f34:	f002 fbba 	bl	80046ac <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001f38:	2200      	movs	r2, #0
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	201c      	movs	r0, #28
 8001f3e:	f001 fd5c 	bl	80039fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f42:	201c      	movs	r0, #28
 8001f44:	f001 fd73 	bl	8003a2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001f48:	e070      	b.n	800202c <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM5)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a3a      	ldr	r2, [pc, #232]	; (8002038 <HAL_TIM_Base_MspInit+0x174>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d10c      	bne.n	8001f6e <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001f54:	4b37      	ldr	r3, [pc, #220]	; (8002034 <HAL_TIM_Base_MspInit+0x170>)
 8001f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f58:	4a36      	ldr	r2, [pc, #216]	; (8002034 <HAL_TIM_Base_MspInit+0x170>)
 8001f5a:	f043 0308 	orr.w	r3, r3, #8
 8001f5e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f60:	4b34      	ldr	r3, [pc, #208]	; (8002034 <HAL_TIM_Base_MspInit+0x170>)
 8001f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f64:	f003 0308 	and.w	r3, r3, #8
 8001f68:	61bb      	str	r3, [r7, #24]
 8001f6a:	69bb      	ldr	r3, [r7, #24]
}
 8001f6c:	e05e      	b.n	800202c <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM8)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a32      	ldr	r2, [pc, #200]	; (800203c <HAL_TIM_Base_MspInit+0x178>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d10c      	bne.n	8001f92 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001f78:	4b2e      	ldr	r3, [pc, #184]	; (8002034 <HAL_TIM_Base_MspInit+0x170>)
 8001f7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f7c:	4a2d      	ldr	r2, [pc, #180]	; (8002034 <HAL_TIM_Base_MspInit+0x170>)
 8001f7e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f82:	6613      	str	r3, [r2, #96]	; 0x60
 8001f84:	4b2b      	ldr	r3, [pc, #172]	; (8002034 <HAL_TIM_Base_MspInit+0x170>)
 8001f86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f8c:	617b      	str	r3, [r7, #20]
 8001f8e:	697b      	ldr	r3, [r7, #20]
}
 8001f90:	e04c      	b.n	800202c <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM15)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a2a      	ldr	r2, [pc, #168]	; (8002040 <HAL_TIM_Base_MspInit+0x17c>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d114      	bne.n	8001fc6 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001f9c:	4b25      	ldr	r3, [pc, #148]	; (8002034 <HAL_TIM_Base_MspInit+0x170>)
 8001f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fa0:	4a24      	ldr	r2, [pc, #144]	; (8002034 <HAL_TIM_Base_MspInit+0x170>)
 8001fa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa6:	6613      	str	r3, [r2, #96]	; 0x60
 8001fa8:	4b22      	ldr	r3, [pc, #136]	; (8002034 <HAL_TIM_Base_MspInit+0x170>)
 8001faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 1, 0);
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	2018      	movs	r0, #24
 8001fba:	f001 fd1e 	bl	80039fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001fbe:	2018      	movs	r0, #24
 8001fc0:	f001 fd35 	bl	8003a2e <HAL_NVIC_EnableIRQ>
}
 8001fc4:	e032      	b.n	800202c <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM16)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a1e      	ldr	r2, [pc, #120]	; (8002044 <HAL_TIM_Base_MspInit+0x180>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d114      	bne.n	8001ffa <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001fd0:	4b18      	ldr	r3, [pc, #96]	; (8002034 <HAL_TIM_Base_MspInit+0x170>)
 8001fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fd4:	4a17      	ldr	r2, [pc, #92]	; (8002034 <HAL_TIM_Base_MspInit+0x170>)
 8001fd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fda:	6613      	str	r3, [r2, #96]	; 0x60
 8001fdc:	4b15      	ldr	r3, [pc, #84]	; (8002034 <HAL_TIM_Base_MspInit+0x170>)
 8001fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8001fe8:	2200      	movs	r2, #0
 8001fea:	2101      	movs	r1, #1
 8001fec:	2019      	movs	r0, #25
 8001fee:	f001 fd04 	bl	80039fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001ff2:	2019      	movs	r0, #25
 8001ff4:	f001 fd1b 	bl	8003a2e <HAL_NVIC_EnableIRQ>
}
 8001ff8:	e018      	b.n	800202c <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM17)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a12      	ldr	r2, [pc, #72]	; (8002048 <HAL_TIM_Base_MspInit+0x184>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d113      	bne.n	800202c <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002004:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <HAL_TIM_Base_MspInit+0x170>)
 8002006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002008:	4a0a      	ldr	r2, [pc, #40]	; (8002034 <HAL_TIM_Base_MspInit+0x170>)
 800200a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800200e:	6613      	str	r3, [r2, #96]	; 0x60
 8002010:	4b08      	ldr	r3, [pc, #32]	; (8002034 <HAL_TIM_Base_MspInit+0x170>)
 8002012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002014:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002018:	60bb      	str	r3, [r7, #8]
 800201a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800201c:	2200      	movs	r2, #0
 800201e:	2100      	movs	r1, #0
 8002020:	201a      	movs	r0, #26
 8002022:	f001 fcea 	bl	80039fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002026:	201a      	movs	r0, #26
 8002028:	f001 fd01 	bl	8003a2e <HAL_NVIC_EnableIRQ>
}
 800202c:	bf00      	nop
 800202e:	3738      	adds	r7, #56	; 0x38
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40021000 	.word	0x40021000
 8002038:	40000c00 	.word	0x40000c00
 800203c:	40013400 	.word	0x40013400
 8002040:	40014000 	.word	0x40014000
 8002044:	40014400 	.word	0x40014400
 8002048:	40014800 	.word	0x40014800

0800204c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800204c:	480d      	ldr	r0, [pc, #52]	; (8002084 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800204e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002050:	480d      	ldr	r0, [pc, #52]	; (8002088 <LoopForever+0x6>)
  ldr r1, =_edata
 8002052:	490e      	ldr	r1, [pc, #56]	; (800208c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002054:	4a0e      	ldr	r2, [pc, #56]	; (8002090 <LoopForever+0xe>)
  movs r3, #0
 8002056:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002058:	e002      	b.n	8002060 <LoopCopyDataInit>

0800205a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800205a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800205c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800205e:	3304      	adds	r3, #4

08002060 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002060:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002062:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002064:	d3f9      	bcc.n	800205a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002066:	4a0b      	ldr	r2, [pc, #44]	; (8002094 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002068:	4c0b      	ldr	r4, [pc, #44]	; (8002098 <LoopForever+0x16>)
  movs r3, #0
 800206a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800206c:	e001      	b.n	8002072 <LoopFillZerobss>

0800206e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800206e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002070:	3204      	adds	r2, #4

08002072 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002072:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002074:	d3fb      	bcc.n	800206e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002076:	f7ff fc83 	bl	8001980 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800207a:	f006 f9d9 	bl	8008430 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800207e:	f7ff f8bf 	bl	8001200 <main>

08002082 <LoopForever>:

LoopForever:
    b LoopForever
 8002082:	e7fe      	b.n	8002082 <LoopForever>
  ldr   r0, =_estack
 8002084:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002088:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800208c:	20000444 	.word	0x20000444
  ldr r2, =_sidata
 8002090:	08009768 	.word	0x08009768
  ldr r2, =_sbss
 8002094:	20000444 	.word	0x20000444
  ldr r4, =_ebss
 8002098:	200008dc 	.word	0x200008dc

0800209c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800209c:	e7fe      	b.n	800209c <ADC1_2_IRQHandler>

0800209e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020a4:	2300      	movs	r3, #0
 80020a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020a8:	2003      	movs	r0, #3
 80020aa:	f001 fc9b 	bl	80039e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020ae:	2000      	movs	r0, #0
 80020b0:	f000 f80e 	bl	80020d0 <HAL_InitTick>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d002      	beq.n	80020c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	71fb      	strb	r3, [r7, #7]
 80020be:	e001      	b.n	80020c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020c0:	f7ff fa82 	bl	80015c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020c4:	79fb      	ldrb	r3, [r7, #7]

}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
	...

080020d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80020d8:	2300      	movs	r3, #0
 80020da:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80020dc:	4b16      	ldr	r3, [pc, #88]	; (8002138 <HAL_InitTick+0x68>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d022      	beq.n	800212a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80020e4:	4b15      	ldr	r3, [pc, #84]	; (800213c <HAL_InitTick+0x6c>)
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	4b13      	ldr	r3, [pc, #76]	; (8002138 <HAL_InitTick+0x68>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80020f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80020f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f8:	4618      	mov	r0, r3
 80020fa:	f001 fca6 	bl	8003a4a <HAL_SYSTICK_Config>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d10f      	bne.n	8002124 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b0f      	cmp	r3, #15
 8002108:	d809      	bhi.n	800211e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800210a:	2200      	movs	r2, #0
 800210c:	6879      	ldr	r1, [r7, #4]
 800210e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002112:	f001 fc72 	bl	80039fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002116:	4a0a      	ldr	r2, [pc, #40]	; (8002140 <HAL_InitTick+0x70>)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6013      	str	r3, [r2, #0]
 800211c:	e007      	b.n	800212e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	73fb      	strb	r3, [r7, #15]
 8002122:	e004      	b.n	800212e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	73fb      	strb	r3, [r7, #15]
 8002128:	e001      	b.n	800212e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800212e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	200003d4 	.word	0x200003d4
 800213c:	200003cc 	.word	0x200003cc
 8002140:	200003d0 	.word	0x200003d0

08002144 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002148:	4b05      	ldr	r3, [pc, #20]	; (8002160 <HAL_IncTick+0x1c>)
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	4b05      	ldr	r3, [pc, #20]	; (8002164 <HAL_IncTick+0x20>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4413      	add	r3, r2
 8002152:	4a03      	ldr	r2, [pc, #12]	; (8002160 <HAL_IncTick+0x1c>)
 8002154:	6013      	str	r3, [r2, #0]
}
 8002156:	bf00      	nop
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	200008d4 	.word	0x200008d4
 8002164:	200003d4 	.word	0x200003d4

08002168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  return uwTick;
 800216c:	4b03      	ldr	r3, [pc, #12]	; (800217c <HAL_GetTick+0x14>)
 800216e:	681b      	ldr	r3, [r3, #0]
}
 8002170:	4618      	mov	r0, r3
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	200008d4 	.word	0x200008d4

08002180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002188:	f7ff ffee 	bl	8002168 <HAL_GetTick>
 800218c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002198:	d004      	beq.n	80021a4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800219a:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <HAL_Delay+0x40>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	4413      	add	r3, r2
 80021a2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021a4:	bf00      	nop
 80021a6:	f7ff ffdf 	bl	8002168 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d8f7      	bhi.n	80021a6 <HAL_Delay+0x26>
  {
  }
}
 80021b6:	bf00      	nop
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	200003d4 	.word	0x200003d4

080021c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	431a      	orrs	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	609a      	str	r2, [r3, #8]
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	431a      	orrs	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	609a      	str	r2, [r3, #8]
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002220:	4618      	mov	r0, r3
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800222c:	b490      	push	{r4, r7}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
 8002238:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	3360      	adds	r3, #96	; 0x60
 800223e:	461a      	mov	r2, r3
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002248:	6822      	ldr	r2, [r4, #0]
 800224a:	4b08      	ldr	r3, [pc, #32]	; (800226c <LL_ADC_SetOffset+0x40>)
 800224c:	4013      	ands	r3, r2
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	4313      	orrs	r3, r2
 800225a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800225e:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002260:	bf00      	nop
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bc90      	pop	{r4, r7}
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	03fff000 	.word	0x03fff000

08002270 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002270:	b490      	push	{r4, r7}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3360      	adds	r3, #96	; 0x60
 800227e:	461a      	mov	r2, r3
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002288:	6823      	ldr	r3, [r4, #0]
 800228a:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800228e:	4618      	mov	r0, r3
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bc90      	pop	{r4, r7}
 8002296:	4770      	bx	lr

08002298 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002298:	b490      	push	{r4, r7}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	3360      	adds	r3, #96	; 0x60
 80022a8:	461a      	mov	r2, r3
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4413      	add	r3, r2
 80022b0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80022b2:	6823      	ldr	r3, [r4, #0]
 80022b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80022be:	bf00      	nop
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc90      	pop	{r4, r7}
 80022c6:	4770      	bx	lr

080022c8 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80022c8:	b490      	push	{r4, r7}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	3360      	adds	r3, #96	; 0x60
 80022d8:	461a      	mov	r2, r3
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80022e2:	6823      	ldr	r3, [r4, #0]
 80022e4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80022ee:	bf00      	nop
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc90      	pop	{r4, r7}
 80022f6:	4770      	bx	lr

080022f8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80022f8:	b490      	push	{r4, r7}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	3360      	adds	r3, #96	; 0x60
 8002308:	461a      	mov	r2, r3
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4413      	add	r3, r2
 8002310:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002312:	6823      	ldr	r3, [r4, #0]
 8002314:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4313      	orrs	r3, r2
 800231c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800231e:	bf00      	nop
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bc90      	pop	{r4, r7}
 8002326:	4770      	bx	lr

08002328 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	431a      	orrs	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	615a      	str	r2, [r3, #20]
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800234e:	b490      	push	{r4, r7}
 8002350:	b084      	sub	sp, #16
 8002352:	af00      	add	r7, sp, #0
 8002354:	60f8      	str	r0, [r7, #12]
 8002356:	60b9      	str	r1, [r7, #8]
 8002358:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	3330      	adds	r3, #48	; 0x30
 800235e:	461a      	mov	r2, r3
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	0a1b      	lsrs	r3, r3, #8
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	f003 030c 	and.w	r3, r3, #12
 800236a:	4413      	add	r3, r2
 800236c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800236e:	6822      	ldr	r2, [r4, #0]
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	f003 031f 	and.w	r3, r3, #31
 8002376:	211f      	movs	r1, #31
 8002378:	fa01 f303 	lsl.w	r3, r1, r3
 800237c:	43db      	mvns	r3, r3
 800237e:	401a      	ands	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	0e9b      	lsrs	r3, r3, #26
 8002384:	f003 011f 	and.w	r1, r3, #31
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	f003 031f 	and.w	r3, r3, #31
 800238e:	fa01 f303 	lsl.w	r3, r1, r3
 8002392:	4313      	orrs	r3, r2
 8002394:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002396:	bf00      	nop
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bc90      	pop	{r4, r7}
 800239e:	4770      	bx	lr

080023a0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80023a0:	b490      	push	{r4, r7}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	3314      	adds	r3, #20
 80023b0:	461a      	mov	r2, r3
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	0e5b      	lsrs	r3, r3, #25
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	4413      	add	r3, r2
 80023be:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80023c0:	6822      	ldr	r2, [r4, #0]
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	0d1b      	lsrs	r3, r3, #20
 80023c6:	f003 031f 	and.w	r3, r3, #31
 80023ca:	2107      	movs	r1, #7
 80023cc:	fa01 f303 	lsl.w	r3, r1, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	401a      	ands	r2, r3
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	0d1b      	lsrs	r3, r3, #20
 80023d8:	f003 031f 	and.w	r3, r3, #31
 80023dc:	6879      	ldr	r1, [r7, #4]
 80023de:	fa01 f303 	lsl.w	r3, r1, r3
 80023e2:	4313      	orrs	r3, r2
 80023e4:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80023e6:	bf00      	nop
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc90      	pop	{r4, r7}
 80023ee:	4770      	bx	lr

080023f0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002408:	43db      	mvns	r3, r3
 800240a:	401a      	ands	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f003 0318 	and.w	r3, r3, #24
 8002412:	4908      	ldr	r1, [pc, #32]	; (8002434 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002414:	40d9      	lsrs	r1, r3
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	400b      	ands	r3, r1
 800241a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800241e:	431a      	orrs	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002426:	bf00      	nop
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	0007ffff 	.word	0x0007ffff

08002438 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002448:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6093      	str	r3, [r2, #8]
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800246c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002470:	d101      	bne.n	8002476 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002472:	2301      	movs	r3, #1
 8002474:	e000      	b.n	8002478 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002494:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002498:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024c0:	d101      	bne.n	80024c6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80024c2:	2301      	movs	r3, #1
 80024c4:	e000      	b.n	80024c8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d101      	bne.n	80024ec <LL_ADC_IsEnabled+0x18>
 80024e8:	2301      	movs	r3, #1
 80024ea:	e000      	b.n	80024ee <LL_ADC_IsEnabled+0x1a>
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f003 0304 	and.w	r3, r3, #4
 800250a:	2b04      	cmp	r3, #4
 800250c:	d101      	bne.n	8002512 <LL_ADC_REG_IsConversionOngoing+0x18>
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 0308 	and.w	r3, r3, #8
 8002530:	2b08      	cmp	r3, #8
 8002532:	d101      	bne.n	8002538 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002534:	2301      	movs	r3, #1
 8002536:	e000      	b.n	800253a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
	...

08002548 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002548:	b590      	push	{r4, r7, lr}
 800254a:	b089      	sub	sp, #36	; 0x24
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002550:	2300      	movs	r3, #0
 8002552:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002554:	2300      	movs	r3, #0
 8002556:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e1ad      	b.n	80028be <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256c:	2b00      	cmp	r3, #0
 800256e:	d109      	bne.n	8002584 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f7fe f855 	bl	8000620 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff ff67 	bl	800245c <LL_ADC_IsDeepPowerDownEnabled>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d004      	beq.n	800259e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff ff4d 	bl	8002438 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff ff82 	bl	80024ac <LL_ADC_IsInternalRegulatorEnabled>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d113      	bne.n	80025d6 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff ff66 	bl	8002484 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80025b8:	4b9e      	ldr	r3, [pc, #632]	; (8002834 <HAL_ADC_Init+0x2ec>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	099b      	lsrs	r3, r3, #6
 80025be:	4a9e      	ldr	r2, [pc, #632]	; (8002838 <HAL_ADC_Init+0x2f0>)
 80025c0:	fba2 2303 	umull	r2, r3, r2, r3
 80025c4:	099b      	lsrs	r3, r3, #6
 80025c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80025c8:	e002      	b.n	80025d0 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	3b01      	subs	r3, #1
 80025ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f9      	bne.n	80025ca <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff ff66 	bl	80024ac <LL_ADC_IsInternalRegulatorEnabled>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10d      	bne.n	8002602 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ea:	f043 0210 	orr.w	r2, r3, #16
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025f6:	f043 0201 	orr.w	r2, r3, #1
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff ff77 	bl	80024fa <LL_ADC_REG_IsConversionOngoing>
 800260c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002612:	f003 0310 	and.w	r3, r3, #16
 8002616:	2b00      	cmp	r3, #0
 8002618:	f040 8148 	bne.w	80028ac <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	2b00      	cmp	r3, #0
 8002620:	f040 8144 	bne.w	80028ac <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002628:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800262c:	f043 0202 	orr.w	r2, r3, #2
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff ff4b 	bl	80024d4 <LL_ADC_IsEnabled>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d141      	bne.n	80026c8 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800264c:	d004      	beq.n	8002658 <HAL_ADC_Init+0x110>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a7a      	ldr	r2, [pc, #488]	; (800283c <HAL_ADC_Init+0x2f4>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d10f      	bne.n	8002678 <HAL_ADC_Init+0x130>
 8002658:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800265c:	f7ff ff3a 	bl	80024d4 <LL_ADC_IsEnabled>
 8002660:	4604      	mov	r4, r0
 8002662:	4876      	ldr	r0, [pc, #472]	; (800283c <HAL_ADC_Init+0x2f4>)
 8002664:	f7ff ff36 	bl	80024d4 <LL_ADC_IsEnabled>
 8002668:	4603      	mov	r3, r0
 800266a:	4323      	orrs	r3, r4
 800266c:	2b00      	cmp	r3, #0
 800266e:	bf0c      	ite	eq
 8002670:	2301      	moveq	r3, #1
 8002672:	2300      	movne	r3, #0
 8002674:	b2db      	uxtb	r3, r3
 8002676:	e012      	b.n	800269e <HAL_ADC_Init+0x156>
 8002678:	4871      	ldr	r0, [pc, #452]	; (8002840 <HAL_ADC_Init+0x2f8>)
 800267a:	f7ff ff2b 	bl	80024d4 <LL_ADC_IsEnabled>
 800267e:	4604      	mov	r4, r0
 8002680:	4870      	ldr	r0, [pc, #448]	; (8002844 <HAL_ADC_Init+0x2fc>)
 8002682:	f7ff ff27 	bl	80024d4 <LL_ADC_IsEnabled>
 8002686:	4603      	mov	r3, r0
 8002688:	431c      	orrs	r4, r3
 800268a:	486f      	ldr	r0, [pc, #444]	; (8002848 <HAL_ADC_Init+0x300>)
 800268c:	f7ff ff22 	bl	80024d4 <LL_ADC_IsEnabled>
 8002690:	4603      	mov	r3, r0
 8002692:	4323      	orrs	r3, r4
 8002694:	2b00      	cmp	r3, #0
 8002696:	bf0c      	ite	eq
 8002698:	2301      	moveq	r3, #1
 800269a:	2300      	movne	r3, #0
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d012      	beq.n	80026c8 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026aa:	d004      	beq.n	80026b6 <HAL_ADC_Init+0x16e>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a62      	ldr	r2, [pc, #392]	; (800283c <HAL_ADC_Init+0x2f4>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d101      	bne.n	80026ba <HAL_ADC_Init+0x172>
 80026b6:	4a65      	ldr	r2, [pc, #404]	; (800284c <HAL_ADC_Init+0x304>)
 80026b8:	e000      	b.n	80026bc <HAL_ADC_Init+0x174>
 80026ba:	4a65      	ldr	r2, [pc, #404]	; (8002850 <HAL_ADC_Init+0x308>)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	4619      	mov	r1, r3
 80026c2:	4610      	mov	r0, r2
 80026c4:	f7ff fd7e 	bl	80021c4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	7f5b      	ldrb	r3, [r3, #29]
 80026cc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026d2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80026d8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80026de:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026e6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026e8:	4313      	orrs	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d106      	bne.n	8002704 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fa:	3b01      	subs	r3, #1
 80026fc:	045b      	lsls	r3, r3, #17
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4313      	orrs	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002708:	2b00      	cmp	r3, #0
 800270a:	d009      	beq.n	8002720 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002710:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002718:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4313      	orrs	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68da      	ldr	r2, [r3, #12]
 8002726:	4b4b      	ldr	r3, [pc, #300]	; (8002854 <HAL_ADC_Init+0x30c>)
 8002728:	4013      	ands	r3, r2
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6812      	ldr	r2, [r2, #0]
 800272e:	69b9      	ldr	r1, [r7, #24]
 8002730:	430b      	orrs	r3, r1
 8002732:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	430a      	orrs	r2, r1
 8002748:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff fed3 	bl	80024fa <LL_ADC_REG_IsConversionOngoing>
 8002754:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff fee0 	bl	8002520 <LL_ADC_INJ_IsConversionOngoing>
 8002760:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d17f      	bne.n	8002868 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d17c      	bne.n	8002868 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002772:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800277a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800277c:	4313      	orrs	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800278a:	f023 0302 	bic.w	r3, r3, #2
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	6812      	ldr	r2, [r2, #0]
 8002792:	69b9      	ldr	r1, [r7, #24]
 8002794:	430b      	orrs	r3, r1
 8002796:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d017      	beq.n	80027d0 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691a      	ldr	r2, [r3, #16]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80027ae:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80027b8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80027bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6911      	ldr	r1, [r2, #16]
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	6812      	ldr	r2, [r2, #0]
 80027c8:	430b      	orrs	r3, r1
 80027ca:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80027ce:	e013      	b.n	80027f8 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	691a      	ldr	r2, [r3, #16]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80027de:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	6812      	ldr	r2, [r2, #0]
 80027ec:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80027f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027f4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d12a      	bne.n	8002858 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800280c:	f023 0304 	bic.w	r3, r3, #4
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002818:	4311      	orrs	r1, r2
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800281e:	4311      	orrs	r1, r2
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002824:	430a      	orrs	r2, r1
 8002826:	431a      	orrs	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f042 0201 	orr.w	r2, r2, #1
 8002830:	611a      	str	r2, [r3, #16]
 8002832:	e019      	b.n	8002868 <HAL_ADC_Init+0x320>
 8002834:	200003cc 	.word	0x200003cc
 8002838:	053e2d63 	.word	0x053e2d63
 800283c:	50000100 	.word	0x50000100
 8002840:	50000400 	.word	0x50000400
 8002844:	50000500 	.word	0x50000500
 8002848:	50000600 	.word	0x50000600
 800284c:	50000300 	.word	0x50000300
 8002850:	50000700 	.word	0x50000700
 8002854:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	691a      	ldr	r2, [r3, #16]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0201 	bic.w	r2, r2, #1
 8002866:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d10c      	bne.n	800288a <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	f023 010f 	bic.w	r1, r3, #15
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	1e5a      	subs	r2, r3, #1
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	430a      	orrs	r2, r1
 8002886:	631a      	str	r2, [r3, #48]	; 0x30
 8002888:	e007      	b.n	800289a <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 020f 	bic.w	r2, r2, #15
 8002898:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289e:	f023 0303 	bic.w	r3, r3, #3
 80028a2:	f043 0201 	orr.w	r2, r3, #1
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80028aa:	e007      	b.n	80028bc <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b0:	f043 0210 	orr.w	r2, r3, #16
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80028bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3724      	adds	r7, #36	; 0x24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd90      	pop	{r4, r7, pc}
 80028c6:	bf00      	nop

080028c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b0a6      	sub	sp, #152	; 0x98
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028d2:	2300      	movs	r3, #0
 80028d4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80028d8:	2300      	movs	r3, #0
 80028da:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d101      	bne.n	80028ea <HAL_ADC_ConfigChannel+0x22>
 80028e6:	2302      	movs	r3, #2
 80028e8:	e38e      	b.n	8003008 <HAL_ADC_ConfigChannel+0x740>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff fdff 	bl	80024fa <LL_ADC_REG_IsConversionOngoing>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f040 836f 	bne.w	8002fe2 <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6818      	ldr	r0, [r3, #0]
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	6859      	ldr	r1, [r3, #4]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	461a      	mov	r2, r3
 8002912:	f7ff fd1c 	bl	800234e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff fded 	bl	80024fa <LL_ADC_REG_IsConversionOngoing>
 8002920:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff fdf9 	bl	8002520 <LL_ADC_INJ_IsConversionOngoing>
 800292e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002932:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002936:	2b00      	cmp	r3, #0
 8002938:	f040 817b 	bne.w	8002c32 <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800293c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002940:	2b00      	cmp	r3, #0
 8002942:	f040 8176 	bne.w	8002c32 <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800294e:	d10f      	bne.n	8002970 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6818      	ldr	r0, [r3, #0]
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2200      	movs	r2, #0
 800295a:	4619      	mov	r1, r3
 800295c:	f7ff fd20 	bl	80023a0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff fcdd 	bl	8002328 <LL_ADC_SetSamplingTimeCommonConfig>
 800296e:	e00e      	b.n	800298e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6818      	ldr	r0, [r3, #0]
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	6819      	ldr	r1, [r3, #0]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	461a      	mov	r2, r3
 800297e:	f7ff fd0f 	bl	80023a0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2100      	movs	r1, #0
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff fccd 	bl	8002328 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	695a      	ldr	r2, [r3, #20]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	08db      	lsrs	r3, r3, #3
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	2b04      	cmp	r3, #4
 80029ae:	d022      	beq.n	80029f6 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6818      	ldr	r0, [r3, #0]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	6919      	ldr	r1, [r3, #16]
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029c0:	f7ff fc34 	bl	800222c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6818      	ldr	r0, [r3, #0]
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	6919      	ldr	r1, [r3, #16]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	461a      	mov	r2, r3
 80029d2:	f7ff fc79 	bl	80022c8 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6818      	ldr	r0, [r3, #0]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	6919      	ldr	r1, [r3, #16]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	7f1b      	ldrb	r3, [r3, #28]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d102      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x124>
 80029e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029ea:	e000      	b.n	80029ee <HAL_ADC_ConfigChannel+0x126>
 80029ec:	2300      	movs	r3, #0
 80029ee:	461a      	mov	r2, r3
 80029f0:	f7ff fc82 	bl	80022f8 <LL_ADC_SetOffsetSaturation>
 80029f4:	e11d      	b.n	8002c32 <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2100      	movs	r1, #0
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff fc37 	bl	8002270 <LL_ADC_GetOffsetChannel>
 8002a02:	4603      	mov	r3, r0
 8002a04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10a      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x15a>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2100      	movs	r1, #0
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff fc2c 	bl	8002270 <LL_ADC_GetOffsetChannel>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	0e9b      	lsrs	r3, r3, #26
 8002a1c:	f003 021f 	and.w	r2, r3, #31
 8002a20:	e012      	b.n	8002a48 <HAL_ADC_ConfigChannel+0x180>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2100      	movs	r1, #0
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff fc21 	bl	8002270 <LL_ADC_GetOffsetChannel>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a38:	fa93 f3a3 	rbit	r3, r3
 8002a3c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002a3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a40:	fab3 f383 	clz	r3, r3
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	461a      	mov	r2, r3
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d105      	bne.n	8002a60 <HAL_ADC_ConfigChannel+0x198>
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	0e9b      	lsrs	r3, r3, #26
 8002a5a:	f003 031f 	and.w	r3, r3, #31
 8002a5e:	e00a      	b.n	8002a76 <HAL_ADC_ConfigChannel+0x1ae>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a68:	fa93 f3a3 	rbit	r3, r3
 8002a6c:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8002a6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a70:	fab3 f383 	clz	r3, r3
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d106      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	2100      	movs	r1, #0
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff fc08 	bl	8002298 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff fbee 	bl	8002270 <LL_ADC_GetOffsetChannel>
 8002a94:	4603      	mov	r3, r0
 8002a96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10a      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x1ec>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff fbe3 	bl	8002270 <LL_ADC_GetOffsetChannel>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	0e9b      	lsrs	r3, r3, #26
 8002aae:	f003 021f 	and.w	r2, r3, #31
 8002ab2:	e010      	b.n	8002ad6 <HAL_ADC_ConfigChannel+0x20e>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2101      	movs	r1, #1
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff fbd8 	bl	8002270 <LL_ADC_GetOffsetChannel>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ac6:	fa93 f3a3 	rbit	r3, r3
 8002aca:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002acc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ace:	fab3 f383 	clz	r3, r3
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d105      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x226>
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	0e9b      	lsrs	r3, r3, #26
 8002ae8:	f003 031f 	and.w	r3, r3, #31
 8002aec:	e00a      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x23c>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002af6:	fa93 f3a3 	rbit	r3, r3
 8002afa:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002afc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002afe:	fab3 f383 	clz	r3, r3
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d106      	bne.n	8002b16 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	2101      	movs	r1, #1
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff fbc1 	bl	8002298 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2102      	movs	r1, #2
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff fba7 	bl	8002270 <LL_ADC_GetOffsetChannel>
 8002b22:	4603      	mov	r3, r0
 8002b24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10a      	bne.n	8002b42 <HAL_ADC_ConfigChannel+0x27a>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2102      	movs	r1, #2
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7ff fb9c 	bl	8002270 <LL_ADC_GetOffsetChannel>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	0e9b      	lsrs	r3, r3, #26
 8002b3c:	f003 021f 	and.w	r2, r3, #31
 8002b40:	e010      	b.n	8002b64 <HAL_ADC_ConfigChannel+0x29c>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2102      	movs	r1, #2
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff fb91 	bl	8002270 <LL_ADC_GetOffsetChannel>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b54:	fa93 f3a3 	rbit	r3, r3
 8002b58:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8002b5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b5c:	fab3 f383 	clz	r3, r3
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	461a      	mov	r2, r3
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d105      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x2b4>
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	0e9b      	lsrs	r3, r3, #26
 8002b76:	f003 031f 	and.w	r3, r3, #31
 8002b7a:	e00a      	b.n	8002b92 <HAL_ADC_ConfigChannel+0x2ca>
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b84:	fa93 f3a3 	rbit	r3, r3
 8002b88:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002b8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b8c:	fab3 f383 	clz	r3, r3
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d106      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	2102      	movs	r1, #2
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff fb7a 	bl	8002298 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2103      	movs	r1, #3
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7ff fb60 	bl	8002270 <LL_ADC_GetOffsetChannel>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10a      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x308>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2103      	movs	r1, #3
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff fb55 	bl	8002270 <LL_ADC_GetOffsetChannel>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	0e9b      	lsrs	r3, r3, #26
 8002bca:	f003 021f 	and.w	r2, r3, #31
 8002bce:	e010      	b.n	8002bf2 <HAL_ADC_ConfigChannel+0x32a>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2103      	movs	r1, #3
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff fb4a 	bl	8002270 <LL_ADC_GetOffsetChannel>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002be2:	fa93 f3a3 	rbit	r3, r3
 8002be6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bea:	fab3 f383 	clz	r3, r3
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d105      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x342>
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	0e9b      	lsrs	r3, r3, #26
 8002c04:	f003 031f 	and.w	r3, r3, #31
 8002c08:	e00a      	b.n	8002c20 <HAL_ADC_ConfigChannel+0x358>
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c12:	fa93 f3a3 	rbit	r3, r3
 8002c16:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8002c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c1a:	fab3 f383 	clz	r3, r3
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d106      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	2103      	movs	r1, #3
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff fb33 	bl	8002298 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7ff fc4c 	bl	80024d4 <LL_ADC_IsEnabled>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f040 810c 	bne.w	8002e5c <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6818      	ldr	r0, [r3, #0]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	6819      	ldr	r1, [r3, #0]
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	461a      	mov	r2, r3
 8002c52:	f7ff fbcd 	bl	80023f0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	4aaf      	ldr	r2, [pc, #700]	; (8002f18 <HAL_ADC_ConfigChannel+0x650>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	f040 80fd 	bne.w	8002e5c <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10b      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x3c2>
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	0e9b      	lsrs	r3, r3, #26
 8002c78:	3301      	adds	r3, #1
 8002c7a:	f003 031f 	and.w	r3, r3, #31
 8002c7e:	2b09      	cmp	r3, #9
 8002c80:	bf94      	ite	ls
 8002c82:	2301      	movls	r3, #1
 8002c84:	2300      	movhi	r3, #0
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	e012      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x3e8>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c92:	fa93 f3a3 	rbit	r3, r3
 8002c96:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c9a:	fab3 f383 	clz	r3, r3
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	f003 031f 	and.w	r3, r3, #31
 8002ca6:	2b09      	cmp	r3, #9
 8002ca8:	bf94      	ite	ls
 8002caa:	2301      	movls	r3, #1
 8002cac:	2300      	movhi	r3, #0
 8002cae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d064      	beq.n	8002d7e <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d107      	bne.n	8002cd0 <HAL_ADC_ConfigChannel+0x408>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	0e9b      	lsrs	r3, r3, #26
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	069b      	lsls	r3, r3, #26
 8002cca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cce:	e00e      	b.n	8002cee <HAL_ADC_ConfigChannel+0x426>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd8:	fa93 f3a3 	rbit	r3, r3
 8002cdc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce0:	fab3 f383 	clz	r3, r3
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	069b      	lsls	r3, r3, #26
 8002cea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d109      	bne.n	8002d0e <HAL_ADC_ConfigChannel+0x446>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	0e9b      	lsrs	r3, r3, #26
 8002d00:	3301      	adds	r3, #1
 8002d02:	f003 031f 	and.w	r3, r3, #31
 8002d06:	2101      	movs	r1, #1
 8002d08:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0c:	e010      	b.n	8002d30 <HAL_ADC_ConfigChannel+0x468>
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d16:	fa93 f3a3 	rbit	r3, r3
 8002d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1e:	fab3 f383 	clz	r3, r3
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	3301      	adds	r3, #1
 8002d26:	f003 031f 	and.w	r3, r3, #31
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d30:	ea42 0103 	orr.w	r1, r2, r3
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10a      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x48e>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	0e9b      	lsrs	r3, r3, #26
 8002d46:	3301      	adds	r3, #1
 8002d48:	f003 021f 	and.w	r2, r3, #31
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	4413      	add	r3, r2
 8002d52:	051b      	lsls	r3, r3, #20
 8002d54:	e011      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x4b2>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5e:	fa93 f3a3 	rbit	r3, r3
 8002d62:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	fab3 f383 	clz	r3, r3
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	f003 021f 	and.w	r2, r3, #31
 8002d72:	4613      	mov	r3, r2
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	4413      	add	r3, r2
 8002d78:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d7a:	430b      	orrs	r3, r1
 8002d7c:	e069      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d107      	bne.n	8002d9a <HAL_ADC_ConfigChannel+0x4d2>
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	0e9b      	lsrs	r3, r3, #26
 8002d90:	3301      	adds	r3, #1
 8002d92:	069b      	lsls	r3, r3, #26
 8002d94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d98:	e00e      	b.n	8002db8 <HAL_ADC_ConfigChannel+0x4f0>
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da0:	6a3b      	ldr	r3, [r7, #32]
 8002da2:	fa93 f3a3 	rbit	r3, r3
 8002da6:	61fb      	str	r3, [r7, #28]
  return result;
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	fab3 f383 	clz	r3, r3
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	3301      	adds	r3, #1
 8002db2:	069b      	lsls	r3, r3, #26
 8002db4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d109      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x510>
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	0e9b      	lsrs	r3, r3, #26
 8002dca:	3301      	adds	r3, #1
 8002dcc:	f003 031f 	and.w	r3, r3, #31
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd6:	e010      	b.n	8002dfa <HAL_ADC_ConfigChannel+0x532>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	fa93 f3a3 	rbit	r3, r3
 8002de4:	617b      	str	r3, [r7, #20]
  return result;
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	fab3 f383 	clz	r3, r3
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	3301      	adds	r3, #1
 8002df0:	f003 031f 	and.w	r3, r3, #31
 8002df4:	2101      	movs	r1, #1
 8002df6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dfa:	ea42 0103 	orr.w	r1, r2, r3
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10d      	bne.n	8002e26 <HAL_ADC_ConfigChannel+0x55e>
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	0e9b      	lsrs	r3, r3, #26
 8002e10:	3301      	adds	r3, #1
 8002e12:	f003 021f 	and.w	r2, r3, #31
 8002e16:	4613      	mov	r3, r2
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	4413      	add	r3, r2
 8002e1c:	3b1e      	subs	r3, #30
 8002e1e:	051b      	lsls	r3, r3, #20
 8002e20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e24:	e014      	b.n	8002e50 <HAL_ADC_ConfigChannel+0x588>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	fa93 f3a3 	rbit	r3, r3
 8002e32:	60fb      	str	r3, [r7, #12]
  return result;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	fab3 f383 	clz	r3, r3
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	f003 021f 	and.w	r2, r3, #31
 8002e42:	4613      	mov	r3, r2
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	4413      	add	r3, r2
 8002e48:	3b1e      	subs	r3, #30
 8002e4a:	051b      	lsls	r3, r3, #20
 8002e4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e50:	430b      	orrs	r3, r1
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	6892      	ldr	r2, [r2, #8]
 8002e56:	4619      	mov	r1, r3
 8002e58:	f7ff faa2 	bl	80023a0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	4b2e      	ldr	r3, [pc, #184]	; (8002f1c <HAL_ADC_ConfigChannel+0x654>)
 8002e62:	4013      	ands	r3, r2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f000 80c9 	beq.w	8002ffc <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e72:	d004      	beq.n	8002e7e <HAL_ADC_ConfigChannel+0x5b6>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a29      	ldr	r2, [pc, #164]	; (8002f20 <HAL_ADC_ConfigChannel+0x658>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d101      	bne.n	8002e82 <HAL_ADC_ConfigChannel+0x5ba>
 8002e7e:	4b29      	ldr	r3, [pc, #164]	; (8002f24 <HAL_ADC_ConfigChannel+0x65c>)
 8002e80:	e000      	b.n	8002e84 <HAL_ADC_ConfigChannel+0x5bc>
 8002e82:	4b29      	ldr	r3, [pc, #164]	; (8002f28 <HAL_ADC_ConfigChannel+0x660>)
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff f9c3 	bl	8002210 <LL_ADC_GetCommonPathInternalCh>
 8002e8a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a26      	ldr	r2, [pc, #152]	; (8002f2c <HAL_ADC_ConfigChannel+0x664>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d004      	beq.n	8002ea2 <HAL_ADC_ConfigChannel+0x5da>
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a24      	ldr	r2, [pc, #144]	; (8002f30 <HAL_ADC_ConfigChannel+0x668>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d14e      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ea2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ea6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d148      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002eb6:	d005      	beq.n	8002ec4 <HAL_ADC_ConfigChannel+0x5fc>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a1d      	ldr	r2, [pc, #116]	; (8002f34 <HAL_ADC_ConfigChannel+0x66c>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	f040 8099 	bne.w	8002ff6 <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ecc:	d004      	beq.n	8002ed8 <HAL_ADC_ConfigChannel+0x610>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a13      	ldr	r2, [pc, #76]	; (8002f20 <HAL_ADC_ConfigChannel+0x658>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d101      	bne.n	8002edc <HAL_ADC_ConfigChannel+0x614>
 8002ed8:	4a12      	ldr	r2, [pc, #72]	; (8002f24 <HAL_ADC_ConfigChannel+0x65c>)
 8002eda:	e000      	b.n	8002ede <HAL_ADC_ConfigChannel+0x616>
 8002edc:	4a12      	ldr	r2, [pc, #72]	; (8002f28 <HAL_ADC_ConfigChannel+0x660>)
 8002ede:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ee2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4610      	mov	r0, r2
 8002eea:	f7ff f97e 	bl	80021ea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002eee:	4b12      	ldr	r3, [pc, #72]	; (8002f38 <HAL_ADC_ConfigChannel+0x670>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	099b      	lsrs	r3, r3, #6
 8002ef4:	4a11      	ldr	r2, [pc, #68]	; (8002f3c <HAL_ADC_ConfigChannel+0x674>)
 8002ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8002efa:	099a      	lsrs	r2, r3, #6
 8002efc:	4613      	mov	r3, r2
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	4413      	add	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002f06:	e002      	b.n	8002f0e <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1f9      	bne.n	8002f08 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f14:	e06f      	b.n	8002ff6 <HAL_ADC_ConfigChannel+0x72e>
 8002f16:	bf00      	nop
 8002f18:	407f0000 	.word	0x407f0000
 8002f1c:	80080000 	.word	0x80080000
 8002f20:	50000100 	.word	0x50000100
 8002f24:	50000300 	.word	0x50000300
 8002f28:	50000700 	.word	0x50000700
 8002f2c:	c3210000 	.word	0xc3210000
 8002f30:	90c00010 	.word	0x90c00010
 8002f34:	50000600 	.word	0x50000600
 8002f38:	200003cc 	.word	0x200003cc
 8002f3c:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a32      	ldr	r2, [pc, #200]	; (8003010 <HAL_ADC_ConfigChannel+0x748>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d125      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x6ce>
 8002f4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d11f      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a2e      	ldr	r2, [pc, #184]	; (8003014 <HAL_ADC_ConfigChannel+0x74c>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d104      	bne.n	8002f6a <HAL_ADC_ConfigChannel+0x6a2>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a2c      	ldr	r2, [pc, #176]	; (8003018 <HAL_ADC_ConfigChannel+0x750>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d047      	beq.n	8002ffa <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f72:	d004      	beq.n	8002f7e <HAL_ADC_ConfigChannel+0x6b6>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a26      	ldr	r2, [pc, #152]	; (8003014 <HAL_ADC_ConfigChannel+0x74c>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d101      	bne.n	8002f82 <HAL_ADC_ConfigChannel+0x6ba>
 8002f7e:	4a27      	ldr	r2, [pc, #156]	; (800301c <HAL_ADC_ConfigChannel+0x754>)
 8002f80:	e000      	b.n	8002f84 <HAL_ADC_ConfigChannel+0x6bc>
 8002f82:	4a27      	ldr	r2, [pc, #156]	; (8003020 <HAL_ADC_ConfigChannel+0x758>)
 8002f84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4610      	mov	r0, r2
 8002f90:	f7ff f92b 	bl	80021ea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f94:	e031      	b.n	8002ffa <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a22      	ldr	r2, [pc, #136]	; (8003024 <HAL_ADC_ConfigChannel+0x75c>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d12d      	bne.n	8002ffc <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002fa0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d127      	bne.n	8002ffc <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a18      	ldr	r2, [pc, #96]	; (8003014 <HAL_ADC_ConfigChannel+0x74c>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d022      	beq.n	8002ffc <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fbe:	d004      	beq.n	8002fca <HAL_ADC_ConfigChannel+0x702>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a13      	ldr	r2, [pc, #76]	; (8003014 <HAL_ADC_ConfigChannel+0x74c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d101      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x706>
 8002fca:	4a14      	ldr	r2, [pc, #80]	; (800301c <HAL_ADC_ConfigChannel+0x754>)
 8002fcc:	e000      	b.n	8002fd0 <HAL_ADC_ConfigChannel+0x708>
 8002fce:	4a14      	ldr	r2, [pc, #80]	; (8003020 <HAL_ADC_ConfigChannel+0x758>)
 8002fd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fd4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4610      	mov	r0, r2
 8002fdc:	f7ff f905 	bl	80021ea <LL_ADC_SetCommonPathInternalCh>
 8002fe0:	e00c      	b.n	8002ffc <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe6:	f043 0220 	orr.w	r2, r3, #32
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8002ff4:	e002      	b.n	8002ffc <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ff6:	bf00      	nop
 8002ff8:	e000      	b.n	8002ffc <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ffa:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003004:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8003008:	4618      	mov	r0, r3
 800300a:	3798      	adds	r7, #152	; 0x98
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	c7520000 	.word	0xc7520000
 8003014:	50000100 	.word	0x50000100
 8003018:	50000500 	.word	0x50000500
 800301c:	50000300 	.word	0x50000300
 8003020:	50000700 	.word	0x50000700
 8003024:	cb840000 	.word	0xcb840000

08003028 <LL_ADC_IsEnabled>:
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b01      	cmp	r3, #1
 800303a:	d101      	bne.n	8003040 <LL_ADC_IsEnabled+0x18>
 800303c:	2301      	movs	r3, #1
 800303e:	e000      	b.n	8003042 <LL_ADC_IsEnabled+0x1a>
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr

0800304e <LL_ADC_REG_IsConversionOngoing>:
{
 800304e:	b480      	push	{r7}
 8003050:	b083      	sub	sp, #12
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 0304 	and.w	r3, r3, #4
 800305e:	2b04      	cmp	r3, #4
 8003060:	d101      	bne.n	8003066 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003062:	2301      	movs	r3, #1
 8003064:	e000      	b.n	8003068 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003074:	b590      	push	{r4, r7, lr}
 8003076:	b0a1      	sub	sp, #132	; 0x84
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800307e:	2300      	movs	r3, #0
 8003080:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800308a:	2b01      	cmp	r3, #1
 800308c:	d101      	bne.n	8003092 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800308e:	2302      	movs	r3, #2
 8003090:	e0e3      	b.n	800325a <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030a2:	d102      	bne.n	80030aa <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80030a4:	4b6f      	ldr	r3, [pc, #444]	; (8003264 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80030a6:	60bb      	str	r3, [r7, #8]
 80030a8:	e009      	b.n	80030be <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a6e      	ldr	r2, [pc, #440]	; (8003268 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d102      	bne.n	80030ba <HAL_ADCEx_MultiModeConfigChannel+0x46>
 80030b4:	4b6d      	ldr	r3, [pc, #436]	; (800326c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80030b6:	60bb      	str	r3, [r7, #8]
 80030b8:	e001      	b.n	80030be <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80030ba:	2300      	movs	r3, #0
 80030bc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10b      	bne.n	80030dc <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c8:	f043 0220 	orr.w	r2, r3, #32
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e0be      	b.n	800325a <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff ffb5 	bl	800304e <LL_ADC_REG_IsConversionOngoing>
 80030e4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7ff ffaf 	bl	800304e <LL_ADC_REG_IsConversionOngoing>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f040 80a0 	bne.w	8003238 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80030f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f040 809c 	bne.w	8003238 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003108:	d004      	beq.n	8003114 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a55      	ldr	r2, [pc, #340]	; (8003264 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d101      	bne.n	8003118 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8003114:	4b56      	ldr	r3, [pc, #344]	; (8003270 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003116:	e000      	b.n	800311a <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8003118:	4b56      	ldr	r3, [pc, #344]	; (8003274 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800311a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d04b      	beq.n	80031bc <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003124:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	6859      	ldr	r1, [r3, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003136:	035b      	lsls	r3, r3, #13
 8003138:	430b      	orrs	r3, r1
 800313a:	431a      	orrs	r2, r3
 800313c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800313e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003148:	d004      	beq.n	8003154 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a45      	ldr	r2, [pc, #276]	; (8003264 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d10f      	bne.n	8003174 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8003154:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003158:	f7ff ff66 	bl	8003028 <LL_ADC_IsEnabled>
 800315c:	4604      	mov	r4, r0
 800315e:	4841      	ldr	r0, [pc, #260]	; (8003264 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003160:	f7ff ff62 	bl	8003028 <LL_ADC_IsEnabled>
 8003164:	4603      	mov	r3, r0
 8003166:	4323      	orrs	r3, r4
 8003168:	2b00      	cmp	r3, #0
 800316a:	bf0c      	ite	eq
 800316c:	2301      	moveq	r3, #1
 800316e:	2300      	movne	r3, #0
 8003170:	b2db      	uxtb	r3, r3
 8003172:	e012      	b.n	800319a <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8003174:	483c      	ldr	r0, [pc, #240]	; (8003268 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8003176:	f7ff ff57 	bl	8003028 <LL_ADC_IsEnabled>
 800317a:	4604      	mov	r4, r0
 800317c:	483b      	ldr	r0, [pc, #236]	; (800326c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800317e:	f7ff ff53 	bl	8003028 <LL_ADC_IsEnabled>
 8003182:	4603      	mov	r3, r0
 8003184:	431c      	orrs	r4, r3
 8003186:	483c      	ldr	r0, [pc, #240]	; (8003278 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003188:	f7ff ff4e 	bl	8003028 <LL_ADC_IsEnabled>
 800318c:	4603      	mov	r3, r0
 800318e:	4323      	orrs	r3, r4
 8003190:	2b00      	cmp	r3, #0
 8003192:	bf0c      	ite	eq
 8003194:	2301      	moveq	r3, #1
 8003196:	2300      	movne	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d056      	beq.n	800324c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800319e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80031a6:	f023 030f 	bic.w	r3, r3, #15
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	6811      	ldr	r1, [r2, #0]
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	6892      	ldr	r2, [r2, #8]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	431a      	orrs	r2, r3
 80031b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031b8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80031ba:	e047      	b.n	800324c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80031bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031c6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031d0:	d004      	beq.n	80031dc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a23      	ldr	r2, [pc, #140]	; (8003264 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d10f      	bne.n	80031fc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80031dc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80031e0:	f7ff ff22 	bl	8003028 <LL_ADC_IsEnabled>
 80031e4:	4604      	mov	r4, r0
 80031e6:	481f      	ldr	r0, [pc, #124]	; (8003264 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80031e8:	f7ff ff1e 	bl	8003028 <LL_ADC_IsEnabled>
 80031ec:	4603      	mov	r3, r0
 80031ee:	4323      	orrs	r3, r4
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	bf0c      	ite	eq
 80031f4:	2301      	moveq	r3, #1
 80031f6:	2300      	movne	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	e012      	b.n	8003222 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 80031fc:	481a      	ldr	r0, [pc, #104]	; (8003268 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80031fe:	f7ff ff13 	bl	8003028 <LL_ADC_IsEnabled>
 8003202:	4604      	mov	r4, r0
 8003204:	4819      	ldr	r0, [pc, #100]	; (800326c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003206:	f7ff ff0f 	bl	8003028 <LL_ADC_IsEnabled>
 800320a:	4603      	mov	r3, r0
 800320c:	431c      	orrs	r4, r3
 800320e:	481a      	ldr	r0, [pc, #104]	; (8003278 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003210:	f7ff ff0a 	bl	8003028 <LL_ADC_IsEnabled>
 8003214:	4603      	mov	r3, r0
 8003216:	4323      	orrs	r3, r4
 8003218:	2b00      	cmp	r3, #0
 800321a:	bf0c      	ite	eq
 800321c:	2301      	moveq	r3, #1
 800321e:	2300      	movne	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d012      	beq.n	800324c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003226:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800322e:	f023 030f 	bic.w	r3, r3, #15
 8003232:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003234:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003236:	e009      	b.n	800324c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323c:	f043 0220 	orr.w	r2, r3, #32
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800324a:	e000      	b.n	800324e <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800324c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003256:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800325a:	4618      	mov	r0, r3
 800325c:	3784      	adds	r7, #132	; 0x84
 800325e:	46bd      	mov	sp, r7
 8003260:	bd90      	pop	{r4, r7, pc}
 8003262:	bf00      	nop
 8003264:	50000100 	.word	0x50000100
 8003268:	50000400 	.word	0x50000400
 800326c:	50000500 	.word	0x50000500
 8003270:	50000300 	.word	0x50000300
 8003274:	50000700 	.word	0x50000700
 8003278:	50000600 	.word	0x50000600

0800327c <LL_EXTI_EnableIT_0_31>:
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003284:	4b05      	ldr	r3, [pc, #20]	; (800329c <LL_EXTI_EnableIT_0_31+0x20>)
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	4904      	ldr	r1, [pc, #16]	; (800329c <LL_EXTI_EnableIT_0_31+0x20>)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4313      	orrs	r3, r2
 800328e:	600b      	str	r3, [r1, #0]
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	40010400 	.word	0x40010400

080032a0 <LL_EXTI_EnableIT_32_63>:
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80032a8:	4b05      	ldr	r3, [pc, #20]	; (80032c0 <LL_EXTI_EnableIT_32_63+0x20>)
 80032aa:	6a1a      	ldr	r2, [r3, #32]
 80032ac:	4904      	ldr	r1, [pc, #16]	; (80032c0 <LL_EXTI_EnableIT_32_63+0x20>)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	620b      	str	r3, [r1, #32]
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	40010400 	.word	0x40010400

080032c4 <LL_EXTI_DisableIT_0_31>:
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80032cc:	4b06      	ldr	r3, [pc, #24]	; (80032e8 <LL_EXTI_DisableIT_0_31+0x24>)
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	43db      	mvns	r3, r3
 80032d4:	4904      	ldr	r1, [pc, #16]	; (80032e8 <LL_EXTI_DisableIT_0_31+0x24>)
 80032d6:	4013      	ands	r3, r2
 80032d8:	600b      	str	r3, [r1, #0]
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	40010400 	.word	0x40010400

080032ec <LL_EXTI_DisableIT_32_63>:
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80032f4:	4b06      	ldr	r3, [pc, #24]	; (8003310 <LL_EXTI_DisableIT_32_63+0x24>)
 80032f6:	6a1a      	ldr	r2, [r3, #32]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	43db      	mvns	r3, r3
 80032fc:	4904      	ldr	r1, [pc, #16]	; (8003310 <LL_EXTI_DisableIT_32_63+0x24>)
 80032fe:	4013      	ands	r3, r2
 8003300:	620b      	str	r3, [r1, #32]
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	40010400 	.word	0x40010400

08003314 <LL_EXTI_EnableEvent_0_31>:
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800331c:	4b05      	ldr	r3, [pc, #20]	; (8003334 <LL_EXTI_EnableEvent_0_31+0x20>)
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	4904      	ldr	r1, [pc, #16]	; (8003334 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4313      	orrs	r3, r2
 8003326:	604b      	str	r3, [r1, #4]
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	40010400 	.word	0x40010400

08003338 <LL_EXTI_EnableEvent_32_63>:
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8003340:	4b05      	ldr	r3, [pc, #20]	; (8003358 <LL_EXTI_EnableEvent_32_63+0x20>)
 8003342:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003344:	4904      	ldr	r1, [pc, #16]	; (8003358 <LL_EXTI_EnableEvent_32_63+0x20>)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4313      	orrs	r3, r2
 800334a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	40010400 	.word	0x40010400

0800335c <LL_EXTI_DisableEvent_0_31>:
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8003364:	4b06      	ldr	r3, [pc, #24]	; (8003380 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003366:	685a      	ldr	r2, [r3, #4]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	43db      	mvns	r3, r3
 800336c:	4904      	ldr	r1, [pc, #16]	; (8003380 <LL_EXTI_DisableEvent_0_31+0x24>)
 800336e:	4013      	ands	r3, r2
 8003370:	604b      	str	r3, [r1, #4]
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	40010400 	.word	0x40010400

08003384 <LL_EXTI_DisableEvent_32_63>:
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800338c:	4b06      	ldr	r3, [pc, #24]	; (80033a8 <LL_EXTI_DisableEvent_32_63+0x24>)
 800338e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	43db      	mvns	r3, r3
 8003394:	4904      	ldr	r1, [pc, #16]	; (80033a8 <LL_EXTI_DisableEvent_32_63+0x24>)
 8003396:	4013      	ands	r3, r2
 8003398:	624b      	str	r3, [r1, #36]	; 0x24
}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	40010400 	.word	0x40010400

080033ac <LL_EXTI_EnableRisingTrig_0_31>:
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80033b4:	4b05      	ldr	r3, [pc, #20]	; (80033cc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	4904      	ldr	r1, [pc, #16]	; (80033cc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4313      	orrs	r3, r2
 80033be:	608b      	str	r3, [r1, #8]
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr
 80033cc:	40010400 	.word	0x40010400

080033d0 <LL_EXTI_EnableRisingTrig_32_63>:
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80033d8:	4b05      	ldr	r3, [pc, #20]	; (80033f0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80033da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033dc:	4904      	ldr	r1, [pc, #16]	; (80033f0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	628b      	str	r3, [r1, #40]	; 0x28
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr
 80033f0:	40010400 	.word	0x40010400

080033f4 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80033fc:	4b06      	ldr	r3, [pc, #24]	; (8003418 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	43db      	mvns	r3, r3
 8003404:	4904      	ldr	r1, [pc, #16]	; (8003418 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003406:	4013      	ands	r3, r2
 8003408:	608b      	str	r3, [r1, #8]
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	40010400 	.word	0x40010400

0800341c <LL_EXTI_DisableRisingTrig_32_63>:
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8003424:	4b06      	ldr	r3, [pc, #24]	; (8003440 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8003426:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	43db      	mvns	r3, r3
 800342c:	4904      	ldr	r1, [pc, #16]	; (8003440 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800342e:	4013      	ands	r3, r2
 8003430:	628b      	str	r3, [r1, #40]	; 0x28
}
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	40010400 	.word	0x40010400

08003444 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800344c:	4b05      	ldr	r3, [pc, #20]	; (8003464 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800344e:	68da      	ldr	r2, [r3, #12]
 8003450:	4904      	ldr	r1, [pc, #16]	; (8003464 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4313      	orrs	r3, r2
 8003456:	60cb      	str	r3, [r1, #12]
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	40010400 	.word	0x40010400

08003468 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8003470:	4b05      	ldr	r3, [pc, #20]	; (8003488 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8003472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003474:	4904      	ldr	r1, [pc, #16]	; (8003488 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4313      	orrs	r3, r2
 800347a:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	40010400 	.word	0x40010400

0800348c <LL_EXTI_DisableFallingTrig_0_31>:
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8003494:	4b06      	ldr	r3, [pc, #24]	; (80034b0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003496:	68da      	ldr	r2, [r3, #12]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	43db      	mvns	r3, r3
 800349c:	4904      	ldr	r1, [pc, #16]	; (80034b0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800349e:	4013      	ands	r3, r2
 80034a0:	60cb      	str	r3, [r1, #12]
}
 80034a2:	bf00      	nop
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	40010400 	.word	0x40010400

080034b4 <LL_EXTI_DisableFallingTrig_32_63>:
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80034bc:	4b06      	ldr	r3, [pc, #24]	; (80034d8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80034be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	43db      	mvns	r3, r3
 80034c4:	4904      	ldr	r1, [pc, #16]	; (80034d8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80034c6:	4013      	ands	r3, r2
 80034c8:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80034ca:	bf00      	nop
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	40010400 	.word	0x40010400

080034dc <LL_EXTI_ClearFlag_0_31>:
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80034e4:	4a04      	ldr	r2, [pc, #16]	; (80034f8 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6153      	str	r3, [r2, #20]
}
 80034ea:	bf00      	nop
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	40010400 	.word	0x40010400

080034fc <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8003504:	4a04      	ldr	r2, [pc, #16]	; (8003518 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6353      	str	r3, [r2, #52]	; 0x34
}
 800350a:	bf00      	nop
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	40010400 	.word	0x40010400

0800351c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b088      	sub	sp, #32
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8003524:	2300      	movs	r3, #0
 8003526:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8003528:	2300      	movs	r3, #0
 800352a:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d102      	bne.n	8003538 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	77fb      	strb	r3, [r7, #31]
 8003536:	e180      	b.n	800383a <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003542:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003546:	d102      	bne.n	800354e <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	77fb      	strb	r3, [r7, #31]
 800354c:	e175      	b.n	800383a <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	7f5b      	ldrb	r3, [r3, #29]
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b00      	cmp	r3, #0
 8003556:	d108      	bne.n	800356a <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f7fd f8ef 	bl	8000748 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003574:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8003590:	4313      	orrs	r3, r2
 8003592:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	4b98      	ldr	r3, [pc, #608]	; (80037fc <HAL_COMP_Init+0x2e0>)
 800359c:	4013      	ands	r3, r2
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	6812      	ldr	r2, [r2, #0]
 80035a2:	6979      	ldr	r1, [r7, #20]
 80035a4:	430b      	orrs	r3, r1
 80035a6:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d015      	beq.n	80035e2 <HAL_COMP_Init+0xc6>
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d112      	bne.n	80035e2 <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80035bc:	4b90      	ldr	r3, [pc, #576]	; (8003800 <HAL_COMP_Init+0x2e4>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	099b      	lsrs	r3, r3, #6
 80035c2:	4a90      	ldr	r2, [pc, #576]	; (8003804 <HAL_COMP_Init+0x2e8>)
 80035c4:	fba2 2303 	umull	r2, r3, r2, r3
 80035c8:	099a      	lsrs	r2, r3, #6
 80035ca:	4613      	mov	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4413      	add	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80035d4:	e002      	b.n	80035dc <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	3b01      	subs	r3, #1
 80035da:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1f9      	bne.n	80035d6 <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a88      	ldr	r2, [pc, #544]	; (8003808 <HAL_COMP_Init+0x2ec>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d028      	beq.n	800363e <HAL_COMP_Init+0x122>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a86      	ldr	r2, [pc, #536]	; (800380c <HAL_COMP_Init+0x2f0>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d020      	beq.n	8003638 <HAL_COMP_Init+0x11c>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a85      	ldr	r2, [pc, #532]	; (8003810 <HAL_COMP_Init+0x2f4>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d018      	beq.n	8003632 <HAL_COMP_Init+0x116>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a83      	ldr	r2, [pc, #524]	; (8003814 <HAL_COMP_Init+0x2f8>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d010      	beq.n	800362c <HAL_COMP_Init+0x110>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a82      	ldr	r2, [pc, #520]	; (8003818 <HAL_COMP_Init+0x2fc>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d008      	beq.n	8003626 <HAL_COMP_Init+0x10a>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a80      	ldr	r2, [pc, #512]	; (800381c <HAL_COMP_Init+0x300>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d101      	bne.n	8003622 <HAL_COMP_Init+0x106>
 800361e:	2301      	movs	r3, #1
 8003620:	e00f      	b.n	8003642 <HAL_COMP_Init+0x126>
 8003622:	2302      	movs	r3, #2
 8003624:	e00d      	b.n	8003642 <HAL_COMP_Init+0x126>
 8003626:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800362a:	e00a      	b.n	8003642 <HAL_COMP_Init+0x126>
 800362c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003630:	e007      	b.n	8003642 <HAL_COMP_Init+0x126>
 8003632:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003636:	e004      	b.n	8003642 <HAL_COMP_Init+0x126>
 8003638:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800363c:	e001      	b.n	8003642 <HAL_COMP_Init+0x126>
 800363e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003642:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	f003 0303 	and.w	r3, r3, #3
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 80b6 	beq.w	80037be <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	f003 0310 	and.w	r3, r3, #16
 800365a:	2b00      	cmp	r3, #0
 800365c:	d011      	beq.n	8003682 <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a6e      	ldr	r2, [pc, #440]	; (800381c <HAL_COMP_Init+0x300>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d004      	beq.n	8003672 <HAL_COMP_Init+0x156>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a6c      	ldr	r2, [pc, #432]	; (8003820 <HAL_COMP_Init+0x304>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d103      	bne.n	800367a <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8003672:	6938      	ldr	r0, [r7, #16]
 8003674:	f7ff feac 	bl	80033d0 <LL_EXTI_EnableRisingTrig_32_63>
 8003678:	e014      	b.n	80036a4 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800367a:	6938      	ldr	r0, [r7, #16]
 800367c:	f7ff fe96 	bl	80033ac <LL_EXTI_EnableRisingTrig_0_31>
 8003680:	e010      	b.n	80036a4 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a65      	ldr	r2, [pc, #404]	; (800381c <HAL_COMP_Init+0x300>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d004      	beq.n	8003696 <HAL_COMP_Init+0x17a>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a63      	ldr	r2, [pc, #396]	; (8003820 <HAL_COMP_Init+0x304>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d103      	bne.n	800369e <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8003696:	6938      	ldr	r0, [r7, #16]
 8003698:	f7ff fec0 	bl	800341c <LL_EXTI_DisableRisingTrig_32_63>
 800369c:	e002      	b.n	80036a4 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800369e:	6938      	ldr	r0, [r7, #16]
 80036a0:	f7ff fea8 	bl	80033f4 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	f003 0320 	and.w	r3, r3, #32
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d011      	beq.n	80036d4 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a59      	ldr	r2, [pc, #356]	; (800381c <HAL_COMP_Init+0x300>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d004      	beq.n	80036c4 <HAL_COMP_Init+0x1a8>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a58      	ldr	r2, [pc, #352]	; (8003820 <HAL_COMP_Init+0x304>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d103      	bne.n	80036cc <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 80036c4:	6938      	ldr	r0, [r7, #16]
 80036c6:	f7ff fecf 	bl	8003468 <LL_EXTI_EnableFallingTrig_32_63>
 80036ca:	e014      	b.n	80036f6 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80036cc:	6938      	ldr	r0, [r7, #16]
 80036ce:	f7ff feb9 	bl	8003444 <LL_EXTI_EnableFallingTrig_0_31>
 80036d2:	e010      	b.n	80036f6 <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a50      	ldr	r2, [pc, #320]	; (800381c <HAL_COMP_Init+0x300>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d004      	beq.n	80036e8 <HAL_COMP_Init+0x1cc>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a4f      	ldr	r2, [pc, #316]	; (8003820 <HAL_COMP_Init+0x304>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d103      	bne.n	80036f0 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 80036e8:	6938      	ldr	r0, [r7, #16]
 80036ea:	f7ff fee3 	bl	80034b4 <LL_EXTI_DisableFallingTrig_32_63>
 80036ee:	e002      	b.n	80036f6 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80036f0:	6938      	ldr	r0, [r7, #16]
 80036f2:	f7ff fecb 	bl	800348c <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a48      	ldr	r2, [pc, #288]	; (800381c <HAL_COMP_Init+0x300>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d004      	beq.n	800370a <HAL_COMP_Init+0x1ee>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a46      	ldr	r2, [pc, #280]	; (8003820 <HAL_COMP_Init+0x304>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d103      	bne.n	8003712 <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 800370a:	6938      	ldr	r0, [r7, #16]
 800370c:	f7ff fef6 	bl	80034fc <LL_EXTI_ClearFlag_32_63>
 8003710:	e002      	b.n	8003718 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8003712:	6938      	ldr	r0, [r7, #16]
 8003714:	f7ff fee2 	bl	80034dc <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d011      	beq.n	8003748 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a3c      	ldr	r2, [pc, #240]	; (800381c <HAL_COMP_Init+0x300>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d004      	beq.n	8003738 <HAL_COMP_Init+0x21c>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a3b      	ldr	r2, [pc, #236]	; (8003820 <HAL_COMP_Init+0x304>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d103      	bne.n	8003740 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8003738:	6938      	ldr	r0, [r7, #16]
 800373a:	f7ff fdfd 	bl	8003338 <LL_EXTI_EnableEvent_32_63>
 800373e:	e014      	b.n	800376a <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8003740:	6938      	ldr	r0, [r7, #16]
 8003742:	f7ff fde7 	bl	8003314 <LL_EXTI_EnableEvent_0_31>
 8003746:	e010      	b.n	800376a <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a33      	ldr	r2, [pc, #204]	; (800381c <HAL_COMP_Init+0x300>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d004      	beq.n	800375c <HAL_COMP_Init+0x240>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a32      	ldr	r2, [pc, #200]	; (8003820 <HAL_COMP_Init+0x304>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d103      	bne.n	8003764 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 800375c:	6938      	ldr	r0, [r7, #16]
 800375e:	f7ff fe11 	bl	8003384 <LL_EXTI_DisableEvent_32_63>
 8003762:	e002      	b.n	800376a <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8003764:	6938      	ldr	r0, [r7, #16]
 8003766:	f7ff fdf9 	bl	800335c <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d011      	beq.n	800379a <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a28      	ldr	r2, [pc, #160]	; (800381c <HAL_COMP_Init+0x300>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d004      	beq.n	800378a <HAL_COMP_Init+0x26e>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a26      	ldr	r2, [pc, #152]	; (8003820 <HAL_COMP_Init+0x304>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d103      	bne.n	8003792 <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 800378a:	6938      	ldr	r0, [r7, #16]
 800378c:	f7ff fd88 	bl	80032a0 <LL_EXTI_EnableIT_32_63>
 8003790:	e04b      	b.n	800382a <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8003792:	6938      	ldr	r0, [r7, #16]
 8003794:	f7ff fd72 	bl	800327c <LL_EXTI_EnableIT_0_31>
 8003798:	e047      	b.n	800382a <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a1f      	ldr	r2, [pc, #124]	; (800381c <HAL_COMP_Init+0x300>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d004      	beq.n	80037ae <HAL_COMP_Init+0x292>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a1d      	ldr	r2, [pc, #116]	; (8003820 <HAL_COMP_Init+0x304>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d103      	bne.n	80037b6 <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 80037ae:	6938      	ldr	r0, [r7, #16]
 80037b0:	f7ff fd9c 	bl	80032ec <LL_EXTI_DisableIT_32_63>
 80037b4:	e039      	b.n	800382a <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 80037b6:	6938      	ldr	r0, [r7, #16]
 80037b8:	f7ff fd84 	bl	80032c4 <LL_EXTI_DisableIT_0_31>
 80037bc:	e035      	b.n	800382a <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a16      	ldr	r2, [pc, #88]	; (800381c <HAL_COMP_Init+0x300>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d004      	beq.n	80037d2 <HAL_COMP_Init+0x2b6>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a14      	ldr	r2, [pc, #80]	; (8003820 <HAL_COMP_Init+0x304>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d103      	bne.n	80037da <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 80037d2:	6938      	ldr	r0, [r7, #16]
 80037d4:	f7ff fdd6 	bl	8003384 <LL_EXTI_DisableEvent_32_63>
 80037d8:	e002      	b.n	80037e0 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80037da:	6938      	ldr	r0, [r7, #16]
 80037dc:	f7ff fdbe 	bl	800335c <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a0d      	ldr	r2, [pc, #52]	; (800381c <HAL_COMP_Init+0x300>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d004      	beq.n	80037f4 <HAL_COMP_Init+0x2d8>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a0c      	ldr	r2, [pc, #48]	; (8003820 <HAL_COMP_Init+0x304>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d117      	bne.n	8003824 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 80037f4:	6938      	ldr	r0, [r7, #16]
 80037f6:	f7ff fd79 	bl	80032ec <LL_EXTI_DisableIT_32_63>
 80037fa:	e016      	b.n	800382a <HAL_COMP_Init+0x30e>
 80037fc:	ff007e0f 	.word	0xff007e0f
 8003800:	200003cc 	.word	0x200003cc
 8003804:	053e2d63 	.word	0x053e2d63
 8003808:	40010200 	.word	0x40010200
 800380c:	40010204 	.word	0x40010204
 8003810:	40010208 	.word	0x40010208
 8003814:	4001020c 	.word	0x4001020c
 8003818:	40010210 	.word	0x40010210
 800381c:	40010214 	.word	0x40010214
 8003820:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8003824:	6938      	ldr	r0, [r7, #16]
 8003826:	f7ff fd4d 	bl	80032c4 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	7f5b      	ldrb	r3, [r3, #29]
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b00      	cmp	r3, #0
 8003832:	d102      	bne.n	800383a <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 800383a:	7ffb      	ldrb	r3, [r7, #31]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3720      	adds	r7, #32
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <__NVIC_SetPriorityGrouping>:
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003854:	4b0c      	ldr	r3, [pc, #48]	; (8003888 <__NVIC_SetPriorityGrouping+0x44>)
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003860:	4013      	ands	r3, r2
 8003862:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800386c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003876:	4a04      	ldr	r2, [pc, #16]	; (8003888 <__NVIC_SetPriorityGrouping+0x44>)
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	60d3      	str	r3, [r2, #12]
}
 800387c:	bf00      	nop
 800387e:	3714      	adds	r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr
 8003888:	e000ed00 	.word	0xe000ed00

0800388c <__NVIC_GetPriorityGrouping>:
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003890:	4b04      	ldr	r3, [pc, #16]	; (80038a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	0a1b      	lsrs	r3, r3, #8
 8003896:	f003 0307 	and.w	r3, r3, #7
}
 800389a:	4618      	mov	r0, r3
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	e000ed00 	.word	0xe000ed00

080038a8 <__NVIC_EnableIRQ>:
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	4603      	mov	r3, r0
 80038b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	db0b      	blt.n	80038d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038ba:	79fb      	ldrb	r3, [r7, #7]
 80038bc:	f003 021f 	and.w	r2, r3, #31
 80038c0:	4907      	ldr	r1, [pc, #28]	; (80038e0 <__NVIC_EnableIRQ+0x38>)
 80038c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c6:	095b      	lsrs	r3, r3, #5
 80038c8:	2001      	movs	r0, #1
 80038ca:	fa00 f202 	lsl.w	r2, r0, r2
 80038ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80038d2:	bf00      	nop
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	e000e100 	.word	0xe000e100

080038e4 <__NVIC_SetPriority>:
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	4603      	mov	r3, r0
 80038ec:	6039      	str	r1, [r7, #0]
 80038ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	db0a      	blt.n	800390e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	b2da      	uxtb	r2, r3
 80038fc:	490c      	ldr	r1, [pc, #48]	; (8003930 <__NVIC_SetPriority+0x4c>)
 80038fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003902:	0112      	lsls	r2, r2, #4
 8003904:	b2d2      	uxtb	r2, r2
 8003906:	440b      	add	r3, r1
 8003908:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800390c:	e00a      	b.n	8003924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	b2da      	uxtb	r2, r3
 8003912:	4908      	ldr	r1, [pc, #32]	; (8003934 <__NVIC_SetPriority+0x50>)
 8003914:	79fb      	ldrb	r3, [r7, #7]
 8003916:	f003 030f 	and.w	r3, r3, #15
 800391a:	3b04      	subs	r3, #4
 800391c:	0112      	lsls	r2, r2, #4
 800391e:	b2d2      	uxtb	r2, r2
 8003920:	440b      	add	r3, r1
 8003922:	761a      	strb	r2, [r3, #24]
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr
 8003930:	e000e100 	.word	0xe000e100
 8003934:	e000ed00 	.word	0xe000ed00

08003938 <NVIC_EncodePriority>:
{
 8003938:	b480      	push	{r7}
 800393a:	b089      	sub	sp, #36	; 0x24
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f003 0307 	and.w	r3, r3, #7
 800394a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	f1c3 0307 	rsb	r3, r3, #7
 8003952:	2b04      	cmp	r3, #4
 8003954:	bf28      	it	cs
 8003956:	2304      	movcs	r3, #4
 8003958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	3304      	adds	r3, #4
 800395e:	2b06      	cmp	r3, #6
 8003960:	d902      	bls.n	8003968 <NVIC_EncodePriority+0x30>
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	3b03      	subs	r3, #3
 8003966:	e000      	b.n	800396a <NVIC_EncodePriority+0x32>
 8003968:	2300      	movs	r3, #0
 800396a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800396c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	fa02 f303 	lsl.w	r3, r2, r3
 8003976:	43da      	mvns	r2, r3
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	401a      	ands	r2, r3
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003980:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	fa01 f303 	lsl.w	r3, r1, r3
 800398a:	43d9      	mvns	r1, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003990:	4313      	orrs	r3, r2
}
 8003992:	4618      	mov	r0, r3
 8003994:	3724      	adds	r7, #36	; 0x24
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
	...

080039a0 <SysTick_Config>:
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3b01      	subs	r3, #1
 80039ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039b0:	d301      	bcc.n	80039b6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80039b2:	2301      	movs	r3, #1
 80039b4:	e00f      	b.n	80039d6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039b6:	4a0a      	ldr	r2, [pc, #40]	; (80039e0 <SysTick_Config+0x40>)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3b01      	subs	r3, #1
 80039bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039be:	210f      	movs	r1, #15
 80039c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039c4:	f7ff ff8e 	bl	80038e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039c8:	4b05      	ldr	r3, [pc, #20]	; (80039e0 <SysTick_Config+0x40>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039ce:	4b04      	ldr	r3, [pc, #16]	; (80039e0 <SysTick_Config+0x40>)
 80039d0:	2207      	movs	r2, #7
 80039d2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	e000e010 	.word	0xe000e010

080039e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f7ff ff29 	bl	8003844 <__NVIC_SetPriorityGrouping>
}
 80039f2:	bf00      	nop
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b086      	sub	sp, #24
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	4603      	mov	r3, r0
 8003a02:	60b9      	str	r1, [r7, #8]
 8003a04:	607a      	str	r2, [r7, #4]
 8003a06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a08:	f7ff ff40 	bl	800388c <__NVIC_GetPriorityGrouping>
 8003a0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	68b9      	ldr	r1, [r7, #8]
 8003a12:	6978      	ldr	r0, [r7, #20]
 8003a14:	f7ff ff90 	bl	8003938 <NVIC_EncodePriority>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a1e:	4611      	mov	r1, r2
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff ff5f 	bl	80038e4 <__NVIC_SetPriority>
}
 8003a26:	bf00      	nop
 8003a28:	3718      	adds	r7, #24
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b082      	sub	sp, #8
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	4603      	mov	r3, r0
 8003a36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7ff ff33 	bl	80038a8 <__NVIC_EnableIRQ>
}
 8003a42:	bf00      	nop
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b082      	sub	sp, #8
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7ff ffa4 	bl	80039a0 <SysTick_Config>
 8003a58:	4603      	mov	r3, r0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b082      	sub	sp, #8
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e014      	b.n	8003a9e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	791b      	ldrb	r3, [r3, #4]
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d105      	bne.n	8003a8a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f7fc ff15 	bl	80008b4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2202      	movs	r2, #2
 8003a8e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b082      	sub	sp, #8
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
 8003aae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	795b      	ldrb	r3, [r3, #5]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d101      	bne.n	8003abc <HAL_DAC_Start+0x16>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	e043      	b.n	8003b44 <HAL_DAC_Start+0x9e>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2202      	movs	r2, #2
 8003ac6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6819      	ldr	r1, [r3, #0]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	f003 0310 	and.w	r3, r3, #16
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	409a      	lsls	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	430a      	orrs	r2, r1
 8003ade:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8003ae0:	2001      	movs	r0, #1
 8003ae2:	f7fe fb4d 	bl	8002180 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10f      	bne.n	8003b0c <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d11d      	bne.n	8003b36 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	685a      	ldr	r2, [r3, #4]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f042 0201 	orr.w	r2, r2, #1
 8003b08:	605a      	str	r2, [r3, #4]
 8003b0a:	e014      	b.n	8003b36 <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	f003 0310 	and.w	r3, r3, #16
 8003b1c:	2102      	movs	r1, #2
 8003b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d107      	bne.n	8003b36 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f042 0202 	orr.w	r2, r2, #2
 8003b34:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
 8003b58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	795b      	ldrb	r3, [r3, #5]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d101      	bne.n	8003b6a <HAL_DAC_Start_DMA+0x1e>
 8003b66:	2302      	movs	r3, #2
 8003b68:	e0a1      	b.n	8003cae <HAL_DAC_Start_DMA+0x162>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2202      	movs	r2, #2
 8003b74:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d12a      	bne.n	8003bd2 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	4a4d      	ldr	r2, [pc, #308]	; (8003cb8 <HAL_DAC_Start_DMA+0x16c>)
 8003b82:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	4a4c      	ldr	r2, [pc, #304]	; (8003cbc <HAL_DAC_Start_DMA+0x170>)
 8003b8a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	4a4b      	ldr	r2, [pc, #300]	; (8003cc0 <HAL_DAC_Start_DMA+0x174>)
 8003b92:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ba2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003ba4:	6a3b      	ldr	r3, [r7, #32]
 8003ba6:	2b04      	cmp	r3, #4
 8003ba8:	d009      	beq.n	8003bbe <HAL_DAC_Start_DMA+0x72>
 8003baa:	2b08      	cmp	r3, #8
 8003bac:	d00c      	beq.n	8003bc8 <HAL_DAC_Start_DMA+0x7c>
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d000      	beq.n	8003bb4 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003bb2:	e039      	b.n	8003c28 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	3308      	adds	r3, #8
 8003bba:	613b      	str	r3, [r7, #16]
        break;
 8003bbc:	e034      	b.n	8003c28 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	330c      	adds	r3, #12
 8003bc4:	613b      	str	r3, [r7, #16]
        break;
 8003bc6:	e02f      	b.n	8003c28 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	3310      	adds	r3, #16
 8003bce:	613b      	str	r3, [r7, #16]
        break;
 8003bd0:	e02a      	b.n	8003c28 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	4a3b      	ldr	r2, [pc, #236]	; (8003cc4 <HAL_DAC_Start_DMA+0x178>)
 8003bd8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	4a3a      	ldr	r2, [pc, #232]	; (8003cc8 <HAL_DAC_Start_DMA+0x17c>)
 8003be0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	4a39      	ldr	r2, [pc, #228]	; (8003ccc <HAL_DAC_Start_DMA+0x180>)
 8003be8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003bf8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003bfa:	6a3b      	ldr	r3, [r7, #32]
 8003bfc:	2b04      	cmp	r3, #4
 8003bfe:	d009      	beq.n	8003c14 <HAL_DAC_Start_DMA+0xc8>
 8003c00:	2b08      	cmp	r3, #8
 8003c02:	d00c      	beq.n	8003c1e <HAL_DAC_Start_DMA+0xd2>
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d000      	beq.n	8003c0a <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003c08:	e00e      	b.n	8003c28 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	3314      	adds	r3, #20
 8003c10:	613b      	str	r3, [r7, #16]
        break;
 8003c12:	e009      	b.n	8003c28 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	3318      	adds	r3, #24
 8003c1a:	613b      	str	r3, [r7, #16]
        break;
 8003c1c:	e004      	b.n	8003c28 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	331c      	adds	r3, #28
 8003c24:	613b      	str	r3, [r7, #16]
        break;
 8003c26:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d111      	bne.n	8003c52 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c3c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6898      	ldr	r0, [r3, #8]
 8003c42:	6879      	ldr	r1, [r7, #4]
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	f000 fb66 	bl	8004318 <HAL_DMA_Start_IT>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	75fb      	strb	r3, [r7, #23]
 8003c50:	e010      	b.n	8003c74 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003c60:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	68d8      	ldr	r0, [r3, #12]
 8003c66:	6879      	ldr	r1, [r7, #4]
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	f000 fb54 	bl	8004318 <HAL_DMA_Start_IT>
 8003c70:	4603      	mov	r3, r0
 8003c72:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003c7a:	7dfb      	ldrb	r3, [r7, #23]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10f      	bne.n	8003ca0 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6819      	ldr	r1, [r3, #0]
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	f003 0310 	and.w	r3, r3, #16
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	409a      	lsls	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	430a      	orrs	r2, r1
 8003c96:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8003c98:	2001      	movs	r0, #1
 8003c9a:	f7fe fa71 	bl	8002180 <HAL_Delay>
 8003c9e:	e005      	b.n	8003cac <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	f043 0204 	orr.w	r2, r3, #4
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3718      	adds	r7, #24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	080040b5 	.word	0x080040b5
 8003cbc:	080040d7 	.word	0x080040d7
 8003cc0:	080040f3 	.word	0x080040f3
 8003cc4:	0800415d 	.word	0x0800415d
 8003cc8:	0800417f 	.word	0x0800417f
 8003ccc:	0800419b 	.word	0x0800419b

08003cd0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b087      	sub	sp, #28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
 8003cdc:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d105      	bne.n	8003d00 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	3308      	adds	r3, #8
 8003cfc:	617b      	str	r3, [r7, #20]
 8003cfe:	e004      	b.n	8003d0a <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4413      	add	r3, r2
 8003d06:	3314      	adds	r3, #20
 8003d08:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	371c      	adds	r7, #28
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b08a      	sub	sp, #40	; 0x28
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	795b      	ldrb	r3, [r3, #5]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d101      	bne.n	8003d78 <HAL_DAC_ConfigChannel+0x1c>
 8003d74:	2302      	movs	r3, #2
 8003d76:	e194      	b.n	80040a2 <HAL_DAC_ConfigChannel+0x346>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2202      	movs	r2, #2
 8003d82:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	2b04      	cmp	r3, #4
 8003d8a:	d174      	bne.n	8003e76 <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d137      	bne.n	8003e02 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8003d92:	f7fe f9e9 	bl	8002168 <HAL_GetTick>
 8003d96:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003d98:	e011      	b.n	8003dbe <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003d9a:	f7fe f9e5 	bl	8002168 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d90a      	bls.n	8003dbe <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	f043 0208 	orr.w	r2, r3, #8
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2203      	movs	r2, #3
 8003db8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e171      	b.n	80040a2 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1e6      	bne.n	8003d9a <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8003dcc:	2001      	movs	r0, #1
 8003dce:	f7fe f9d7 	bl	8002180 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dda:	641a      	str	r2, [r3, #64]	; 0x40
 8003ddc:	e01e      	b.n	8003e1c <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003dde:	f7fe f9c3 	bl	8002168 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d90a      	bls.n	8003e02 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	f043 0208 	orr.w	r2, r3, #8
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2203      	movs	r2, #3
 8003dfc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e14f      	b.n	80040a2 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	dbe8      	blt.n	8003dde <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8003e0c:	2001      	movs	r0, #1
 8003e0e:	f7fe f9b7 	bl	8002180 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68ba      	ldr	r2, [r7, #8]
 8003e18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e1a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f003 0310 	and.w	r3, r3, #16
 8003e28:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e30:	43db      	mvns	r3, r3
 8003e32:	ea02 0103 	and.w	r1, r2, r3
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f003 0310 	and.w	r3, r3, #16
 8003e40:	409a      	lsls	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f003 0310 	and.w	r3, r3, #16
 8003e56:	21ff      	movs	r1, #255	; 0xff
 8003e58:	fa01 f303 	lsl.w	r3, r1, r3
 8003e5c:	43db      	mvns	r3, r3
 8003e5e:	ea02 0103 	and.w	r1, r2, r3
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f003 0310 	and.w	r3, r3, #16
 8003e6c:	409a      	lsls	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	69db      	ldr	r3, [r3, #28]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d11d      	bne.n	8003eba <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e84:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f003 0310 	and.w	r3, r3, #16
 8003e8c:	221f      	movs	r2, #31
 8003e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e92:	43db      	mvns	r3, r3
 8003e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e96:	4013      	ands	r3, r2
 8003e98:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f003 0310 	and.w	r3, r3, #16
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eb8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f003 0310 	and.w	r3, r3, #16
 8003ec8:	2207      	movs	r2, #7
 8003eca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ece:	43db      	mvns	r3, r3
 8003ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d002      	beq.n	8003ee8 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	623b      	str	r3, [r7, #32]
 8003ee6:	e011      	b.n	8003f0c <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d002      	beq.n	8003efa <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	623b      	str	r3, [r7, #32]
 8003ef8:	e008      	b.n	8003f0c <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d102      	bne.n	8003f08 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003f02:	2301      	movs	r3, #1
 8003f04:	623b      	str	r3, [r7, #32]
 8003f06:	e001      	b.n	8003f0c <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	689a      	ldr	r2, [r3, #8]
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	6a3a      	ldr	r2, [r7, #32]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f003 0310 	and.w	r3, r3, #16
 8003f22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f26:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2a:	43db      	mvns	r3, r3
 8003f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f2e:	4013      	ands	r3, r2
 8003f30:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	791b      	ldrb	r3, [r3, #4]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d102      	bne.n	8003f40 <HAL_DAC_ConfigChannel+0x1e4>
 8003f3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f3e:	e000      	b.n	8003f42 <HAL_DAC_ConfigChannel+0x1e6>
 8003f40:	2300      	movs	r3, #0
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f003 0310 	and.w	r3, r3, #16
 8003f4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f52:	fa02 f303 	lsl.w	r3, r2, r3
 8003f56:	43db      	mvns	r3, r3
 8003f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	795b      	ldrb	r3, [r3, #5]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d102      	bne.n	8003f6c <HAL_DAC_ConfigChannel+0x210>
 8003f66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f6a:	e000      	b.n	8003f6e <HAL_DAC_ConfigChannel+0x212>
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f76:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003f7a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d114      	bne.n	8003fae <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003f84:	f001 fa9e 	bl	80054c4 <HAL_RCC_GetHCLKFreq>
 8003f88:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	4a47      	ldr	r2, [pc, #284]	; (80040ac <HAL_DAC_ConfigChannel+0x350>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d904      	bls.n	8003f9c <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f98:	627b      	str	r3, [r7, #36]	; 0x24
 8003f9a:	e00d      	b.n	8003fb8 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	4a44      	ldr	r2, [pc, #272]	; (80040b0 <HAL_DAC_ConfigChannel+0x354>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d909      	bls.n	8003fb8 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003faa:	627b      	str	r3, [r7, #36]	; 0x24
 8003fac:	e004      	b.n	8003fb8 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f003 0310 	and.w	r3, r3, #16
 8003fbe:	69ba      	ldr	r2, [r7, #24]
 8003fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fd0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	6819      	ldr	r1, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f003 0310 	and.w	r3, r3, #16
 8003fde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe6:	43da      	mvns	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	400a      	ands	r2, r1
 8003fee:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f003 0310 	and.w	r3, r3, #16
 8003ffe:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004002:	fa02 f303 	lsl.w	r3, r2, r3
 8004006:	43db      	mvns	r3, r3
 8004008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800400a:	4013      	ands	r3, r2
 800400c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f003 0310 	and.w	r3, r3, #16
 800401a:	69ba      	ldr	r2, [r7, #24]
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004022:	4313      	orrs	r3, r2
 8004024:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800402c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6819      	ldr	r1, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f003 0310 	and.w	r3, r3, #16
 800403a:	22c0      	movs	r2, #192	; 0xc0
 800403c:	fa02 f303 	lsl.w	r3, r2, r3
 8004040:	43da      	mvns	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	400a      	ands	r2, r1
 8004048:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	089b      	lsrs	r3, r3, #2
 8004050:	f003 030f 	and.w	r3, r3, #15
 8004054:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	089b      	lsrs	r3, r3, #2
 800405c:	021b      	lsls	r3, r3, #8
 800405e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004062:	69ba      	ldr	r2, [r7, #24]
 8004064:	4313      	orrs	r3, r2
 8004066:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f003 0310 	and.w	r3, r3, #16
 8004074:	f640 710f 	movw	r1, #3855	; 0xf0f
 8004078:	fa01 f303 	lsl.w	r3, r1, r3
 800407c:	43db      	mvns	r3, r3
 800407e:	ea02 0103 	and.w	r1, r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f003 0310 	and.w	r3, r3, #16
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	409a      	lsls	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2201      	movs	r2, #1
 8004098:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3728      	adds	r7, #40	; 0x28
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	09896800 	.word	0x09896800
 80040b0:	04c4b400 	.word	0x04c4b400

080040b4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f7ff fe2c 	bl	8003d20 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2201      	movs	r2, #1
 80040cc:	711a      	strb	r2, [r3, #4]
}
 80040ce:	bf00      	nop
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b084      	sub	sp, #16
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f7ff fe25 	bl	8003d34 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80040ea:	bf00      	nop
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b084      	sub	sp, #16
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	f043 0204 	orr.w	r2, r3, #4
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f7ff fe1b 	bl	8003d48 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2201      	movs	r2, #1
 8004116:	711a      	strb	r2, [r3, #4]
}
 8004118:	bf00      	nop
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004168:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f7ff ffd8 	bl	8004120 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2201      	movs	r2, #1
 8004174:	711a      	strb	r2, [r3, #4]
}
 8004176:	bf00      	nop
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b084      	sub	sp, #16
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f7ff ffd1 	bl	8004134 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004192:	bf00      	nop
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b084      	sub	sp, #16
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	f043 0204 	orr.w	r2, r3, #4
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f7ff ffc7 	bl	8004148 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2201      	movs	r2, #1
 80041be:	711a      	strb	r2, [r3, #4]
}
 80041c0:	bf00      	nop
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e08d      	b.n	80042f6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	461a      	mov	r2, r3
 80041e0:	4b47      	ldr	r3, [pc, #284]	; (8004300 <HAL_DMA_Init+0x138>)
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d80f      	bhi.n	8004206 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	461a      	mov	r2, r3
 80041ec:	4b45      	ldr	r3, [pc, #276]	; (8004304 <HAL_DMA_Init+0x13c>)
 80041ee:	4413      	add	r3, r2
 80041f0:	4a45      	ldr	r2, [pc, #276]	; (8004308 <HAL_DMA_Init+0x140>)
 80041f2:	fba2 2303 	umull	r2, r3, r2, r3
 80041f6:	091b      	lsrs	r3, r3, #4
 80041f8:	009a      	lsls	r2, r3, #2
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a42      	ldr	r2, [pc, #264]	; (800430c <HAL_DMA_Init+0x144>)
 8004202:	641a      	str	r2, [r3, #64]	; 0x40
 8004204:	e00e      	b.n	8004224 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	461a      	mov	r2, r3
 800420c:	4b40      	ldr	r3, [pc, #256]	; (8004310 <HAL_DMA_Init+0x148>)
 800420e:	4413      	add	r3, r2
 8004210:	4a3d      	ldr	r2, [pc, #244]	; (8004308 <HAL_DMA_Init+0x140>)
 8004212:	fba2 2303 	umull	r2, r3, r2, r3
 8004216:	091b      	lsrs	r3, r3, #4
 8004218:	009a      	lsls	r2, r3, #2
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a3c      	ldr	r2, [pc, #240]	; (8004314 <HAL_DMA_Init+0x14c>)
 8004222:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2202      	movs	r2, #2
 8004228:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800423a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800423e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004248:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004254:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004260:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	4313      	orrs	r3, r2
 800426c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f9b6 	bl	80045e8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004284:	d102      	bne.n	800428c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004294:	b2d2      	uxtb	r2, r2
 8004296:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80042a0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d010      	beq.n	80042cc <HAL_DMA_Init+0x104>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2b04      	cmp	r3, #4
 80042b0:	d80c      	bhi.n	80042cc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 f9d6 	bl	8004664 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042bc:	2200      	movs	r2, #0
 80042be:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80042c8:	605a      	str	r2, [r3, #4]
 80042ca:	e008      	b.n	80042de <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	40020407 	.word	0x40020407
 8004304:	bffdfff8 	.word	0xbffdfff8
 8004308:	cccccccd 	.word	0xcccccccd
 800430c:	40020000 	.word	0x40020000
 8004310:	bffdfbf8 	.word	0xbffdfbf8
 8004314:	40020400 	.word	0x40020400

08004318 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
 8004324:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004326:	2300      	movs	r3, #0
 8004328:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004330:	2b01      	cmp	r3, #1
 8004332:	d101      	bne.n	8004338 <HAL_DMA_Start_IT+0x20>
 8004334:	2302      	movs	r3, #2
 8004336:	e066      	b.n	8004406 <HAL_DMA_Start_IT+0xee>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b01      	cmp	r3, #1
 800434a:	d155      	bne.n	80043f8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2202      	movs	r2, #2
 8004350:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 0201 	bic.w	r2, r2, #1
 8004368:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	68b9      	ldr	r1, [r7, #8]
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f000 f8fb 	bl	800456c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437a:	2b00      	cmp	r3, #0
 800437c:	d008      	beq.n	8004390 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f042 020e 	orr.w	r2, r2, #14
 800438c:	601a      	str	r2, [r3, #0]
 800438e:	e00f      	b.n	80043b0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f022 0204 	bic.w	r2, r2, #4
 800439e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f042 020a 	orr.w	r2, r2, #10
 80043ae:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d007      	beq.n	80043ce <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043cc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d007      	beq.n	80043e6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043e4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f042 0201 	orr.w	r2, r2, #1
 80043f4:	601a      	str	r2, [r3, #0]
 80043f6:	e005      	b.n	8004404 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004400:	2302      	movs	r3, #2
 8004402:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004404:	7dfb      	ldrb	r3, [r7, #23]
}
 8004406:	4618      	mov	r0, r3
 8004408:	3718      	adds	r7, #24
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b084      	sub	sp, #16
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800442a:	f003 031f 	and.w	r3, r3, #31
 800442e:	2204      	movs	r2, #4
 8004430:	409a      	lsls	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	4013      	ands	r3, r2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d026      	beq.n	8004488 <HAL_DMA_IRQHandler+0x7a>
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	2b00      	cmp	r3, #0
 8004442:	d021      	beq.n	8004488 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0320 	and.w	r3, r3, #32
 800444e:	2b00      	cmp	r3, #0
 8004450:	d107      	bne.n	8004462 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f022 0204 	bic.w	r2, r2, #4
 8004460:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004466:	f003 021f 	and.w	r2, r3, #31
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	2104      	movs	r1, #4
 8004470:	fa01 f202 	lsl.w	r2, r1, r2
 8004474:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447a:	2b00      	cmp	r3, #0
 800447c:	d071      	beq.n	8004562 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004486:	e06c      	b.n	8004562 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448c:	f003 031f 	and.w	r3, r3, #31
 8004490:	2202      	movs	r2, #2
 8004492:	409a      	lsls	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4013      	ands	r3, r2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d02e      	beq.n	80044fa <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d029      	beq.n	80044fa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0320 	and.w	r3, r3, #32
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10b      	bne.n	80044cc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f022 020a 	bic.w	r2, r2, #10
 80044c2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d0:	f003 021f 	and.w	r2, r3, #31
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d8:	2102      	movs	r1, #2
 80044da:	fa01 f202 	lsl.w	r2, r1, r2
 80044de:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d038      	beq.n	8004562 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80044f8:	e033      	b.n	8004562 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044fe:	f003 031f 	and.w	r3, r3, #31
 8004502:	2208      	movs	r2, #8
 8004504:	409a      	lsls	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	4013      	ands	r3, r2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d02a      	beq.n	8004564 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	f003 0308 	and.w	r3, r3, #8
 8004514:	2b00      	cmp	r3, #0
 8004516:	d025      	beq.n	8004564 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 020e 	bic.w	r2, r2, #14
 8004526:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452c:	f003 021f 	and.w	r2, r3, #31
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004534:	2101      	movs	r1, #1
 8004536:	fa01 f202 	lsl.w	r2, r1, r2
 800453a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004556:	2b00      	cmp	r3, #0
 8004558:	d004      	beq.n	8004564 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004562:	bf00      	nop
 8004564:	bf00      	nop
}
 8004566:	3710      	adds	r7, #16
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
 8004578:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004582:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004588:	2b00      	cmp	r3, #0
 800458a:	d004      	beq.n	8004596 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004594:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800459a:	f003 021f 	and.w	r2, r3, #31
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	2101      	movs	r1, #1
 80045a4:	fa01 f202 	lsl.w	r2, r1, r2
 80045a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	2b10      	cmp	r3, #16
 80045b8:	d108      	bne.n	80045cc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68ba      	ldr	r2, [r7, #8]
 80045c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80045ca:	e007      	b.n	80045dc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68ba      	ldr	r2, [r7, #8]
 80045d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	60da      	str	r2, [r3, #12]
}
 80045dc:	bf00      	nop
 80045de:	3714      	adds	r7, #20
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b087      	sub	sp, #28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	461a      	mov	r2, r3
 80045f6:	4b16      	ldr	r3, [pc, #88]	; (8004650 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d802      	bhi.n	8004602 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80045fc:	4b15      	ldr	r3, [pc, #84]	; (8004654 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80045fe:	617b      	str	r3, [r7, #20]
 8004600:	e001      	b.n	8004606 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004602:	4b15      	ldr	r3, [pc, #84]	; (8004658 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004604:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	b2db      	uxtb	r3, r3
 8004610:	3b08      	subs	r3, #8
 8004612:	4a12      	ldr	r2, [pc, #72]	; (800465c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004614:	fba2 2303 	umull	r2, r3, r2, r3
 8004618:	091b      	lsrs	r3, r3, #4
 800461a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004620:	089b      	lsrs	r3, r3, #2
 8004622:	009a      	lsls	r2, r3, #2
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	4413      	add	r3, r2
 8004628:	461a      	mov	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a0b      	ldr	r2, [pc, #44]	; (8004660 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004632:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f003 031f 	and.w	r3, r3, #31
 800463a:	2201      	movs	r2, #1
 800463c:	409a      	lsls	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004642:	bf00      	nop
 8004644:	371c      	adds	r7, #28
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	40020407 	.word	0x40020407
 8004654:	40020800 	.word	0x40020800
 8004658:	40020820 	.word	0x40020820
 800465c:	cccccccd 	.word	0xcccccccd
 8004660:	40020880 	.word	0x40020880

08004664 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	b2db      	uxtb	r3, r3
 8004672:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	4b0b      	ldr	r3, [pc, #44]	; (80046a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004678:	4413      	add	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	461a      	mov	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a08      	ldr	r2, [pc, #32]	; (80046a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004686:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	3b01      	subs	r3, #1
 800468c:	f003 031f 	and.w	r3, r3, #31
 8004690:	2201      	movs	r2, #1
 8004692:	409a      	lsls	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004698:	bf00      	nop
 800469a:	3714      	adds	r7, #20
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr
 80046a4:	1000823f 	.word	0x1000823f
 80046a8:	40020940 	.word	0x40020940

080046ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b087      	sub	sp, #28
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80046ba:	e15a      	b.n	8004972 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	2101      	movs	r1, #1
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	fa01 f303 	lsl.w	r3, r1, r3
 80046c8:	4013      	ands	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 814c 	beq.w	800496c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d00b      	beq.n	80046f4 <HAL_GPIO_Init+0x48>
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d007      	beq.n	80046f4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80046e8:	2b11      	cmp	r3, #17
 80046ea:	d003      	beq.n	80046f4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	2b12      	cmp	r3, #18
 80046f2:	d130      	bne.n	8004756 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	2203      	movs	r2, #3
 8004700:	fa02 f303 	lsl.w	r3, r2, r3
 8004704:	43db      	mvns	r3, r3
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	4013      	ands	r3, r2
 800470a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	005b      	lsls	r3, r3, #1
 8004714:	fa02 f303 	lsl.w	r3, r2, r3
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	4313      	orrs	r3, r2
 800471c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800472a:	2201      	movs	r2, #1
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	fa02 f303 	lsl.w	r3, r2, r3
 8004732:	43db      	mvns	r3, r3
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	4013      	ands	r3, r2
 8004738:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	091b      	lsrs	r3, r3, #4
 8004740:	f003 0201 	and.w	r2, r3, #1
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	fa02 f303 	lsl.w	r3, r2, r3
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	4313      	orrs	r3, r2
 800474e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	005b      	lsls	r3, r3, #1
 8004760:	2203      	movs	r2, #3
 8004762:	fa02 f303 	lsl.w	r3, r2, r3
 8004766:	43db      	mvns	r3, r3
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	4013      	ands	r3, r2
 800476c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	689a      	ldr	r2, [r3, #8]
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	005b      	lsls	r3, r3, #1
 8004776:	fa02 f303 	lsl.w	r3, r2, r3
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	4313      	orrs	r3, r2
 800477e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	2b02      	cmp	r3, #2
 800478c:	d003      	beq.n	8004796 <HAL_GPIO_Init+0xea>
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	2b12      	cmp	r3, #18
 8004794:	d123      	bne.n	80047de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	08da      	lsrs	r2, r3, #3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	3208      	adds	r2, #8
 800479e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	f003 0307 	and.w	r3, r3, #7
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	220f      	movs	r2, #15
 80047ae:	fa02 f303 	lsl.w	r3, r2, r3
 80047b2:	43db      	mvns	r3, r3
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	4013      	ands	r3, r2
 80047b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	691a      	ldr	r2, [r3, #16]
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f003 0307 	and.w	r3, r3, #7
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	08da      	lsrs	r2, r3, #3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	3208      	adds	r2, #8
 80047d8:	6939      	ldr	r1, [r7, #16]
 80047da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	005b      	lsls	r3, r3, #1
 80047e8:	2203      	movs	r2, #3
 80047ea:	fa02 f303 	lsl.w	r3, r2, r3
 80047ee:	43db      	mvns	r3, r3
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	4013      	ands	r3, r2
 80047f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f003 0203 	and.w	r2, r3, #3
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	fa02 f303 	lsl.w	r3, r2, r3
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	4313      	orrs	r3, r2
 800480a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800481a:	2b00      	cmp	r3, #0
 800481c:	f000 80a6 	beq.w	800496c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004820:	4b5b      	ldr	r3, [pc, #364]	; (8004990 <HAL_GPIO_Init+0x2e4>)
 8004822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004824:	4a5a      	ldr	r2, [pc, #360]	; (8004990 <HAL_GPIO_Init+0x2e4>)
 8004826:	f043 0301 	orr.w	r3, r3, #1
 800482a:	6613      	str	r3, [r2, #96]	; 0x60
 800482c:	4b58      	ldr	r3, [pc, #352]	; (8004990 <HAL_GPIO_Init+0x2e4>)
 800482e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	60bb      	str	r3, [r7, #8]
 8004836:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004838:	4a56      	ldr	r2, [pc, #344]	; (8004994 <HAL_GPIO_Init+0x2e8>)
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	089b      	lsrs	r3, r3, #2
 800483e:	3302      	adds	r3, #2
 8004840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004844:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f003 0303 	and.w	r3, r3, #3
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	220f      	movs	r2, #15
 8004850:	fa02 f303 	lsl.w	r3, r2, r3
 8004854:	43db      	mvns	r3, r3
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	4013      	ands	r3, r2
 800485a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004862:	d01f      	beq.n	80048a4 <HAL_GPIO_Init+0x1f8>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a4c      	ldr	r2, [pc, #304]	; (8004998 <HAL_GPIO_Init+0x2ec>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d019      	beq.n	80048a0 <HAL_GPIO_Init+0x1f4>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a4b      	ldr	r2, [pc, #300]	; (800499c <HAL_GPIO_Init+0x2f0>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d013      	beq.n	800489c <HAL_GPIO_Init+0x1f0>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a4a      	ldr	r2, [pc, #296]	; (80049a0 <HAL_GPIO_Init+0x2f4>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d00d      	beq.n	8004898 <HAL_GPIO_Init+0x1ec>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a49      	ldr	r2, [pc, #292]	; (80049a4 <HAL_GPIO_Init+0x2f8>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d007      	beq.n	8004894 <HAL_GPIO_Init+0x1e8>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a48      	ldr	r2, [pc, #288]	; (80049a8 <HAL_GPIO_Init+0x2fc>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d101      	bne.n	8004890 <HAL_GPIO_Init+0x1e4>
 800488c:	2305      	movs	r3, #5
 800488e:	e00a      	b.n	80048a6 <HAL_GPIO_Init+0x1fa>
 8004890:	2306      	movs	r3, #6
 8004892:	e008      	b.n	80048a6 <HAL_GPIO_Init+0x1fa>
 8004894:	2304      	movs	r3, #4
 8004896:	e006      	b.n	80048a6 <HAL_GPIO_Init+0x1fa>
 8004898:	2303      	movs	r3, #3
 800489a:	e004      	b.n	80048a6 <HAL_GPIO_Init+0x1fa>
 800489c:	2302      	movs	r3, #2
 800489e:	e002      	b.n	80048a6 <HAL_GPIO_Init+0x1fa>
 80048a0:	2301      	movs	r3, #1
 80048a2:	e000      	b.n	80048a6 <HAL_GPIO_Init+0x1fa>
 80048a4:	2300      	movs	r3, #0
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	f002 0203 	and.w	r2, r2, #3
 80048ac:	0092      	lsls	r2, r2, #2
 80048ae:	4093      	lsls	r3, r2
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048b6:	4937      	ldr	r1, [pc, #220]	; (8004994 <HAL_GPIO_Init+0x2e8>)
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	089b      	lsrs	r3, r3, #2
 80048bc:	3302      	adds	r3, #2
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80048c4:	4b39      	ldr	r3, [pc, #228]	; (80049ac <HAL_GPIO_Init+0x300>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	43db      	mvns	r3, r3
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	4013      	ands	r3, r2
 80048d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d003      	beq.n	80048e8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80048e8:	4a30      	ldr	r2, [pc, #192]	; (80049ac <HAL_GPIO_Init+0x300>)
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80048ee:	4b2f      	ldr	r3, [pc, #188]	; (80049ac <HAL_GPIO_Init+0x300>)
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	43db      	mvns	r3, r3
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	4013      	ands	r3, r2
 80048fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d003      	beq.n	8004912 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4313      	orrs	r3, r2
 8004910:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004912:	4a26      	ldr	r2, [pc, #152]	; (80049ac <HAL_GPIO_Init+0x300>)
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004918:	4b24      	ldr	r3, [pc, #144]	; (80049ac <HAL_GPIO_Init+0x300>)
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	43db      	mvns	r3, r3
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	4013      	ands	r3, r2
 8004926:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d003      	beq.n	800493c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	4313      	orrs	r3, r2
 800493a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800493c:	4a1b      	ldr	r2, [pc, #108]	; (80049ac <HAL_GPIO_Init+0x300>)
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004942:	4b1a      	ldr	r3, [pc, #104]	; (80049ac <HAL_GPIO_Init+0x300>)
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	43db      	mvns	r3, r3
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	4013      	ands	r3, r2
 8004950:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d003      	beq.n	8004966 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	4313      	orrs	r3, r2
 8004964:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004966:	4a11      	ldr	r2, [pc, #68]	; (80049ac <HAL_GPIO_Init+0x300>)
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	3301      	adds	r3, #1
 8004970:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	fa22 f303 	lsr.w	r3, r2, r3
 800497c:	2b00      	cmp	r3, #0
 800497e:	f47f ae9d 	bne.w	80046bc <HAL_GPIO_Init+0x10>
  }
}
 8004982:	bf00      	nop
 8004984:	371c      	adds	r7, #28
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	40021000 	.word	0x40021000
 8004994:	40010000 	.word	0x40010000
 8004998:	48000400 	.word	0x48000400
 800499c:	48000800 	.word	0x48000800
 80049a0:	48000c00 	.word	0x48000c00
 80049a4:	48001000 	.word	0x48001000
 80049a8:	48001400 	.word	0x48001400
 80049ac:	40010400 	.word	0x40010400

080049b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	460b      	mov	r3, r1
 80049ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	691a      	ldr	r2, [r3, #16]
 80049c0:	887b      	ldrh	r3, [r7, #2]
 80049c2:	4013      	ands	r3, r2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d002      	beq.n	80049ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80049c8:	2301      	movs	r3, #1
 80049ca:	73fb      	strb	r3, [r7, #15]
 80049cc:	e001      	b.n	80049d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049ce:	2300      	movs	r3, #0
 80049d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80049d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3714      	adds	r7, #20
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	460b      	mov	r3, r1
 80049ea:	807b      	strh	r3, [r7, #2]
 80049ec:	4613      	mov	r3, r2
 80049ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049f0:	787b      	ldrb	r3, [r7, #1]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d003      	beq.n	80049fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80049f6:	887a      	ldrh	r2, [r7, #2]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80049fc:	e002      	b.n	8004a04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80049fe:	887a      	ldrh	r2, [r7, #2]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d141      	bne.n	8004aa2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a1e:	4b4b      	ldr	r3, [pc, #300]	; (8004b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a2a:	d131      	bne.n	8004a90 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a2c:	4b47      	ldr	r3, [pc, #284]	; (8004b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a32:	4a46      	ldr	r2, [pc, #280]	; (8004b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a3c:	4b43      	ldr	r3, [pc, #268]	; (8004b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a44:	4a41      	ldr	r2, [pc, #260]	; (8004b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a4a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a4c:	4b40      	ldr	r3, [pc, #256]	; (8004b50 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2232      	movs	r2, #50	; 0x32
 8004a52:	fb02 f303 	mul.w	r3, r2, r3
 8004a56:	4a3f      	ldr	r2, [pc, #252]	; (8004b54 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004a58:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5c:	0c9b      	lsrs	r3, r3, #18
 8004a5e:	3301      	adds	r3, #1
 8004a60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a62:	e002      	b.n	8004a6a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	3b01      	subs	r3, #1
 8004a68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a6a:	4b38      	ldr	r3, [pc, #224]	; (8004b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a76:	d102      	bne.n	8004a7e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1f2      	bne.n	8004a64 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a7e:	4b33      	ldr	r3, [pc, #204]	; (8004b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a8a:	d158      	bne.n	8004b3e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e057      	b.n	8004b40 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a90:	4b2e      	ldr	r3, [pc, #184]	; (8004b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a96:	4a2d      	ldr	r2, [pc, #180]	; (8004b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004aa0:	e04d      	b.n	8004b3e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aa8:	d141      	bne.n	8004b2e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004aaa:	4b28      	ldr	r3, [pc, #160]	; (8004b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ab6:	d131      	bne.n	8004b1c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ab8:	4b24      	ldr	r3, [pc, #144]	; (8004b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004abe:	4a23      	ldr	r2, [pc, #140]	; (8004b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ac4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ac8:	4b20      	ldr	r3, [pc, #128]	; (8004b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ad0:	4a1e      	ldr	r2, [pc, #120]	; (8004b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ad2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ad6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ad8:	4b1d      	ldr	r3, [pc, #116]	; (8004b50 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2232      	movs	r2, #50	; 0x32
 8004ade:	fb02 f303 	mul.w	r3, r2, r3
 8004ae2:	4a1c      	ldr	r2, [pc, #112]	; (8004b54 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae8:	0c9b      	lsrs	r3, r3, #18
 8004aea:	3301      	adds	r3, #1
 8004aec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004aee:	e002      	b.n	8004af6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	3b01      	subs	r3, #1
 8004af4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004af6:	4b15      	ldr	r3, [pc, #84]	; (8004b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004afe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b02:	d102      	bne.n	8004b0a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1f2      	bne.n	8004af0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b0a:	4b10      	ldr	r3, [pc, #64]	; (8004b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b16:	d112      	bne.n	8004b3e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e011      	b.n	8004b40 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b1c:	4b0b      	ldr	r3, [pc, #44]	; (8004b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b22:	4a0a      	ldr	r2, [pc, #40]	; (8004b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004b2c:	e007      	b.n	8004b3e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004b2e:	4b07      	ldr	r3, [pc, #28]	; (8004b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b36:	4a05      	ldr	r2, [pc, #20]	; (8004b4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b3c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3714      	adds	r7, #20
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr
 8004b4c:	40007000 	.word	0x40007000
 8004b50:	200003cc 	.word	0x200003cc
 8004b54:	431bde83 	.word	0x431bde83

08004b58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b088      	sub	sp, #32
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e308      	b.n	800517c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d075      	beq.n	8004c62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b76:	4ba3      	ldr	r3, [pc, #652]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f003 030c 	and.w	r3, r3, #12
 8004b7e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b80:	4ba0      	ldr	r3, [pc, #640]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	f003 0303 	and.w	r3, r3, #3
 8004b88:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	2b0c      	cmp	r3, #12
 8004b8e:	d102      	bne.n	8004b96 <HAL_RCC_OscConfig+0x3e>
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	2b03      	cmp	r3, #3
 8004b94:	d002      	beq.n	8004b9c <HAL_RCC_OscConfig+0x44>
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	2b08      	cmp	r3, #8
 8004b9a:	d10b      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b9c:	4b99      	ldr	r3, [pc, #612]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d05b      	beq.n	8004c60 <HAL_RCC_OscConfig+0x108>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d157      	bne.n	8004c60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e2e3      	b.n	800517c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bbc:	d106      	bne.n	8004bcc <HAL_RCC_OscConfig+0x74>
 8004bbe:	4b91      	ldr	r3, [pc, #580]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a90      	ldr	r2, [pc, #576]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bc8:	6013      	str	r3, [r2, #0]
 8004bca:	e01d      	b.n	8004c08 <HAL_RCC_OscConfig+0xb0>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bd4:	d10c      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x98>
 8004bd6:	4b8b      	ldr	r3, [pc, #556]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a8a      	ldr	r2, [pc, #552]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004bdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004be0:	6013      	str	r3, [r2, #0]
 8004be2:	4b88      	ldr	r3, [pc, #544]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a87      	ldr	r2, [pc, #540]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bec:	6013      	str	r3, [r2, #0]
 8004bee:	e00b      	b.n	8004c08 <HAL_RCC_OscConfig+0xb0>
 8004bf0:	4b84      	ldr	r3, [pc, #528]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a83      	ldr	r2, [pc, #524]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004bf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bfa:	6013      	str	r3, [r2, #0]
 8004bfc:	4b81      	ldr	r3, [pc, #516]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a80      	ldr	r2, [pc, #512]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004c02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d013      	beq.n	8004c38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c10:	f7fd faaa 	bl	8002168 <HAL_GetTick>
 8004c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c16:	e008      	b.n	8004c2a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c18:	f7fd faa6 	bl	8002168 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b64      	cmp	r3, #100	; 0x64
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e2a8      	b.n	800517c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c2a:	4b76      	ldr	r3, [pc, #472]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d0f0      	beq.n	8004c18 <HAL_RCC_OscConfig+0xc0>
 8004c36:	e014      	b.n	8004c62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c38:	f7fd fa96 	bl	8002168 <HAL_GetTick>
 8004c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c3e:	e008      	b.n	8004c52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c40:	f7fd fa92 	bl	8002168 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b64      	cmp	r3, #100	; 0x64
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e294      	b.n	800517c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c52:	4b6c      	ldr	r3, [pc, #432]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1f0      	bne.n	8004c40 <HAL_RCC_OscConfig+0xe8>
 8004c5e:	e000      	b.n	8004c62 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d075      	beq.n	8004d5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c6e:	4b65      	ldr	r3, [pc, #404]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f003 030c 	and.w	r3, r3, #12
 8004c76:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c78:	4b62      	ldr	r3, [pc, #392]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	f003 0303 	and.w	r3, r3, #3
 8004c80:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	2b0c      	cmp	r3, #12
 8004c86:	d102      	bne.n	8004c8e <HAL_RCC_OscConfig+0x136>
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d002      	beq.n	8004c94 <HAL_RCC_OscConfig+0x13c>
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	2b04      	cmp	r3, #4
 8004c92:	d11f      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c94:	4b5b      	ldr	r3, [pc, #364]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d005      	beq.n	8004cac <HAL_RCC_OscConfig+0x154>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d101      	bne.n	8004cac <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e267      	b.n	800517c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cac:	4b55      	ldr	r3, [pc, #340]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	061b      	lsls	r3, r3, #24
 8004cba:	4952      	ldr	r1, [pc, #328]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004cc0:	4b51      	ldr	r3, [pc, #324]	; (8004e08 <HAL_RCC_OscConfig+0x2b0>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7fd fa03 	bl	80020d0 <HAL_InitTick>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d043      	beq.n	8004d58 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e253      	b.n	800517c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d023      	beq.n	8004d24 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cdc:	4b49      	ldr	r3, [pc, #292]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a48      	ldr	r2, [pc, #288]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ce6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce8:	f7fd fa3e 	bl	8002168 <HAL_GetTick>
 8004cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cee:	e008      	b.n	8004d02 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cf0:	f7fd fa3a 	bl	8002168 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e23c      	b.n	800517c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d02:	4b40      	ldr	r3, [pc, #256]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d0f0      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d0e:	4b3d      	ldr	r3, [pc, #244]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	061b      	lsls	r3, r3, #24
 8004d1c:	4939      	ldr	r1, [pc, #228]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	604b      	str	r3, [r1, #4]
 8004d22:	e01a      	b.n	8004d5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d24:	4b37      	ldr	r3, [pc, #220]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a36      	ldr	r2, [pc, #216]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004d2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d30:	f7fd fa1a 	bl	8002168 <HAL_GetTick>
 8004d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d36:	e008      	b.n	8004d4a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d38:	f7fd fa16 	bl	8002168 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d901      	bls.n	8004d4a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e218      	b.n	800517c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d4a:	4b2e      	ldr	r3, [pc, #184]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1f0      	bne.n	8004d38 <HAL_RCC_OscConfig+0x1e0>
 8004d56:	e000      	b.n	8004d5a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d58:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0308 	and.w	r3, r3, #8
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d03c      	beq.n	8004de0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d01c      	beq.n	8004da8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d6e:	4b25      	ldr	r3, [pc, #148]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004d70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d74:	4a23      	ldr	r2, [pc, #140]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004d76:	f043 0301 	orr.w	r3, r3, #1
 8004d7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d7e:	f7fd f9f3 	bl	8002168 <HAL_GetTick>
 8004d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d84:	e008      	b.n	8004d98 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d86:	f7fd f9ef 	bl	8002168 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d901      	bls.n	8004d98 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e1f1      	b.n	800517c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d98:	4b1a      	ldr	r3, [pc, #104]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d9e:	f003 0302 	and.w	r3, r3, #2
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d0ef      	beq.n	8004d86 <HAL_RCC_OscConfig+0x22e>
 8004da6:	e01b      	b.n	8004de0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004da8:	4b16      	ldr	r3, [pc, #88]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dae:	4a15      	ldr	r2, [pc, #84]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004db0:	f023 0301 	bic.w	r3, r3, #1
 8004db4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004db8:	f7fd f9d6 	bl	8002168 <HAL_GetTick>
 8004dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004dbe:	e008      	b.n	8004dd2 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dc0:	f7fd f9d2 	bl	8002168 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e1d4      	b.n	800517c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004dd2:	4b0c      	ldr	r3, [pc, #48]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004dd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d1ef      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 80ab 	beq.w	8004f44 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dee:	2300      	movs	r3, #0
 8004df0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004df2:	4b04      	ldr	r3, [pc, #16]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d106      	bne.n	8004e0c <HAL_RCC_OscConfig+0x2b4>
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e005      	b.n	8004e0e <HAL_RCC_OscConfig+0x2b6>
 8004e02:	bf00      	nop
 8004e04:	40021000 	.word	0x40021000
 8004e08:	200003d0 	.word	0x200003d0
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00d      	beq.n	8004e2e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e12:	4baf      	ldr	r3, [pc, #700]	; (80050d0 <HAL_RCC_OscConfig+0x578>)
 8004e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e16:	4aae      	ldr	r2, [pc, #696]	; (80050d0 <HAL_RCC_OscConfig+0x578>)
 8004e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e1c:	6593      	str	r3, [r2, #88]	; 0x58
 8004e1e:	4bac      	ldr	r3, [pc, #688]	; (80050d0 <HAL_RCC_OscConfig+0x578>)
 8004e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e26:	60fb      	str	r3, [r7, #12]
 8004e28:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e2e:	4ba9      	ldr	r3, [pc, #676]	; (80050d4 <HAL_RCC_OscConfig+0x57c>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d118      	bne.n	8004e6c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e3a:	4ba6      	ldr	r3, [pc, #664]	; (80050d4 <HAL_RCC_OscConfig+0x57c>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4aa5      	ldr	r2, [pc, #660]	; (80050d4 <HAL_RCC_OscConfig+0x57c>)
 8004e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e46:	f7fd f98f 	bl	8002168 <HAL_GetTick>
 8004e4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e4c:	e008      	b.n	8004e60 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e4e:	f7fd f98b 	bl	8002168 <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d901      	bls.n	8004e60 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e18d      	b.n	800517c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e60:	4b9c      	ldr	r3, [pc, #624]	; (80050d4 <HAL_RCC_OscConfig+0x57c>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d0f0      	beq.n	8004e4e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d108      	bne.n	8004e86 <HAL_RCC_OscConfig+0x32e>
 8004e74:	4b96      	ldr	r3, [pc, #600]	; (80050d0 <HAL_RCC_OscConfig+0x578>)
 8004e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e7a:	4a95      	ldr	r2, [pc, #596]	; (80050d0 <HAL_RCC_OscConfig+0x578>)
 8004e7c:	f043 0301 	orr.w	r3, r3, #1
 8004e80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e84:	e024      	b.n	8004ed0 <HAL_RCC_OscConfig+0x378>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	2b05      	cmp	r3, #5
 8004e8c:	d110      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x358>
 8004e8e:	4b90      	ldr	r3, [pc, #576]	; (80050d0 <HAL_RCC_OscConfig+0x578>)
 8004e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e94:	4a8e      	ldr	r2, [pc, #568]	; (80050d0 <HAL_RCC_OscConfig+0x578>)
 8004e96:	f043 0304 	orr.w	r3, r3, #4
 8004e9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e9e:	4b8c      	ldr	r3, [pc, #560]	; (80050d0 <HAL_RCC_OscConfig+0x578>)
 8004ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea4:	4a8a      	ldr	r2, [pc, #552]	; (80050d0 <HAL_RCC_OscConfig+0x578>)
 8004ea6:	f043 0301 	orr.w	r3, r3, #1
 8004eaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004eae:	e00f      	b.n	8004ed0 <HAL_RCC_OscConfig+0x378>
 8004eb0:	4b87      	ldr	r3, [pc, #540]	; (80050d0 <HAL_RCC_OscConfig+0x578>)
 8004eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb6:	4a86      	ldr	r2, [pc, #536]	; (80050d0 <HAL_RCC_OscConfig+0x578>)
 8004eb8:	f023 0301 	bic.w	r3, r3, #1
 8004ebc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ec0:	4b83      	ldr	r3, [pc, #524]	; (80050d0 <HAL_RCC_OscConfig+0x578>)
 8004ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ec6:	4a82      	ldr	r2, [pc, #520]	; (80050d0 <HAL_RCC_OscConfig+0x578>)
 8004ec8:	f023 0304 	bic.w	r3, r3, #4
 8004ecc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d016      	beq.n	8004f06 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed8:	f7fd f946 	bl	8002168 <HAL_GetTick>
 8004edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ede:	e00a      	b.n	8004ef6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ee0:	f7fd f942 	bl	8002168 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d901      	bls.n	8004ef6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e142      	b.n	800517c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ef6:	4b76      	ldr	r3, [pc, #472]	; (80050d0 <HAL_RCC_OscConfig+0x578>)
 8004ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d0ed      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x388>
 8004f04:	e015      	b.n	8004f32 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f06:	f7fd f92f 	bl	8002168 <HAL_GetTick>
 8004f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f0c:	e00a      	b.n	8004f24 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f0e:	f7fd f92b 	bl	8002168 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d901      	bls.n	8004f24 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e12b      	b.n	800517c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f24:	4b6a      	ldr	r3, [pc, #424]	; (80050d0 <HAL_RCC_OscConfig+0x578>)
 8004f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1ed      	bne.n	8004f0e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f32:	7ffb      	ldrb	r3, [r7, #31]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d105      	bne.n	8004f44 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f38:	4b65      	ldr	r3, [pc, #404]	; (80050d0 <HAL_RCC_OscConfig+0x578>)
 8004f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f3c:	4a64      	ldr	r2, [pc, #400]	; (80050d0 <HAL_RCC_OscConfig+0x578>)
 8004f3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f42:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0320 	and.w	r3, r3, #32
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d03c      	beq.n	8004fca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d01c      	beq.n	8004f92 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f58:	4b5d      	ldr	r3, [pc, #372]	; (80050d0 <HAL_RCC_OscConfig+0x578>)
 8004f5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f5e:	4a5c      	ldr	r2, [pc, #368]	; (80050d0 <HAL_RCC_OscConfig+0x578>)
 8004f60:	f043 0301 	orr.w	r3, r3, #1
 8004f64:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f68:	f7fd f8fe 	bl	8002168 <HAL_GetTick>
 8004f6c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f6e:	e008      	b.n	8004f82 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f70:	f7fd f8fa 	bl	8002168 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e0fc      	b.n	800517c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f82:	4b53      	ldr	r3, [pc, #332]	; (80050d0 <HAL_RCC_OscConfig+0x578>)
 8004f84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f88:	f003 0302 	and.w	r3, r3, #2
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d0ef      	beq.n	8004f70 <HAL_RCC_OscConfig+0x418>
 8004f90:	e01b      	b.n	8004fca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f92:	4b4f      	ldr	r3, [pc, #316]	; (80050d0 <HAL_RCC_OscConfig+0x578>)
 8004f94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f98:	4a4d      	ldr	r2, [pc, #308]	; (80050d0 <HAL_RCC_OscConfig+0x578>)
 8004f9a:	f023 0301 	bic.w	r3, r3, #1
 8004f9e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fa2:	f7fd f8e1 	bl	8002168 <HAL_GetTick>
 8004fa6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004fa8:	e008      	b.n	8004fbc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004faa:	f7fd f8dd 	bl	8002168 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d901      	bls.n	8004fbc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e0df      	b.n	800517c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004fbc:	4b44      	ldr	r3, [pc, #272]	; (80050d0 <HAL_RCC_OscConfig+0x578>)
 8004fbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1ef      	bne.n	8004faa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	69db      	ldr	r3, [r3, #28]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f000 80d3 	beq.w	800517a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fd4:	4b3e      	ldr	r3, [pc, #248]	; (80050d0 <HAL_RCC_OscConfig+0x578>)
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f003 030c 	and.w	r3, r3, #12
 8004fdc:	2b0c      	cmp	r3, #12
 8004fde:	f000 808d 	beq.w	80050fc <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	69db      	ldr	r3, [r3, #28]
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d15a      	bne.n	80050a0 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fea:	4b39      	ldr	r3, [pc, #228]	; (80050d0 <HAL_RCC_OscConfig+0x578>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a38      	ldr	r2, [pc, #224]	; (80050d0 <HAL_RCC_OscConfig+0x578>)
 8004ff0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ff4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff6:	f7fd f8b7 	bl	8002168 <HAL_GetTick>
 8004ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ffc:	e008      	b.n	8005010 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ffe:	f7fd f8b3 	bl	8002168 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	2b02      	cmp	r3, #2
 800500a:	d901      	bls.n	8005010 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e0b5      	b.n	800517c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005010:	4b2f      	ldr	r3, [pc, #188]	; (80050d0 <HAL_RCC_OscConfig+0x578>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1f0      	bne.n	8004ffe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800501c:	4b2c      	ldr	r3, [pc, #176]	; (80050d0 <HAL_RCC_OscConfig+0x578>)
 800501e:	68da      	ldr	r2, [r3, #12]
 8005020:	4b2d      	ldr	r3, [pc, #180]	; (80050d8 <HAL_RCC_OscConfig+0x580>)
 8005022:	4013      	ands	r3, r2
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	6a11      	ldr	r1, [r2, #32]
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800502c:	3a01      	subs	r2, #1
 800502e:	0112      	lsls	r2, r2, #4
 8005030:	4311      	orrs	r1, r2
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005036:	0212      	lsls	r2, r2, #8
 8005038:	4311      	orrs	r1, r2
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800503e:	0852      	lsrs	r2, r2, #1
 8005040:	3a01      	subs	r2, #1
 8005042:	0552      	lsls	r2, r2, #21
 8005044:	4311      	orrs	r1, r2
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800504a:	0852      	lsrs	r2, r2, #1
 800504c:	3a01      	subs	r2, #1
 800504e:	0652      	lsls	r2, r2, #25
 8005050:	4311      	orrs	r1, r2
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005056:	06d2      	lsls	r2, r2, #27
 8005058:	430a      	orrs	r2, r1
 800505a:	491d      	ldr	r1, [pc, #116]	; (80050d0 <HAL_RCC_OscConfig+0x578>)
 800505c:	4313      	orrs	r3, r2
 800505e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005060:	4b1b      	ldr	r3, [pc, #108]	; (80050d0 <HAL_RCC_OscConfig+0x578>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a1a      	ldr	r2, [pc, #104]	; (80050d0 <HAL_RCC_OscConfig+0x578>)
 8005066:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800506a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800506c:	4b18      	ldr	r3, [pc, #96]	; (80050d0 <HAL_RCC_OscConfig+0x578>)
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	4a17      	ldr	r2, [pc, #92]	; (80050d0 <HAL_RCC_OscConfig+0x578>)
 8005072:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005076:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005078:	f7fd f876 	bl	8002168 <HAL_GetTick>
 800507c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800507e:	e008      	b.n	8005092 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005080:	f7fd f872 	bl	8002168 <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	2b02      	cmp	r3, #2
 800508c:	d901      	bls.n	8005092 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e074      	b.n	800517c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005092:	4b0f      	ldr	r3, [pc, #60]	; (80050d0 <HAL_RCC_OscConfig+0x578>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d0f0      	beq.n	8005080 <HAL_RCC_OscConfig+0x528>
 800509e:	e06c      	b.n	800517a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050a0:	4b0b      	ldr	r3, [pc, #44]	; (80050d0 <HAL_RCC_OscConfig+0x578>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a0a      	ldr	r2, [pc, #40]	; (80050d0 <HAL_RCC_OscConfig+0x578>)
 80050a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050aa:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80050ac:	4b08      	ldr	r3, [pc, #32]	; (80050d0 <HAL_RCC_OscConfig+0x578>)
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	4a07      	ldr	r2, [pc, #28]	; (80050d0 <HAL_RCC_OscConfig+0x578>)
 80050b2:	f023 0303 	bic.w	r3, r3, #3
 80050b6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80050b8:	4b05      	ldr	r3, [pc, #20]	; (80050d0 <HAL_RCC_OscConfig+0x578>)
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	4a04      	ldr	r2, [pc, #16]	; (80050d0 <HAL_RCC_OscConfig+0x578>)
 80050be:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80050c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c8:	f7fd f84e 	bl	8002168 <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050ce:	e00e      	b.n	80050ee <HAL_RCC_OscConfig+0x596>
 80050d0:	40021000 	.word	0x40021000
 80050d4:	40007000 	.word	0x40007000
 80050d8:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050dc:	f7fd f844 	bl	8002168 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d901      	bls.n	80050ee <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e046      	b.n	800517c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050ee:	4b25      	ldr	r3, [pc, #148]	; (8005184 <HAL_RCC_OscConfig+0x62c>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1f0      	bne.n	80050dc <HAL_RCC_OscConfig+0x584>
 80050fa:	e03e      	b.n	800517a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d101      	bne.n	8005108 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e039      	b.n	800517c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005108:	4b1e      	ldr	r3, [pc, #120]	; (8005184 <HAL_RCC_OscConfig+0x62c>)
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f003 0203 	and.w	r2, r3, #3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a1b      	ldr	r3, [r3, #32]
 8005118:	429a      	cmp	r2, r3
 800511a:	d12c      	bne.n	8005176 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005126:	3b01      	subs	r3, #1
 8005128:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800512a:	429a      	cmp	r2, r3
 800512c:	d123      	bne.n	8005176 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005138:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800513a:	429a      	cmp	r2, r3
 800513c:	d11b      	bne.n	8005176 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005148:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800514a:	429a      	cmp	r2, r3
 800514c:	d113      	bne.n	8005176 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005158:	085b      	lsrs	r3, r3, #1
 800515a:	3b01      	subs	r3, #1
 800515c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800515e:	429a      	cmp	r2, r3
 8005160:	d109      	bne.n	8005176 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800516c:	085b      	lsrs	r3, r3, #1
 800516e:	3b01      	subs	r3, #1
 8005170:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005172:	429a      	cmp	r2, r3
 8005174:	d001      	beq.n	800517a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e000      	b.n	800517c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3720      	adds	r7, #32
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	40021000 	.word	0x40021000

08005188 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005192:	2300      	movs	r3, #0
 8005194:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d101      	bne.n	80051a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e11e      	b.n	80053de <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051a0:	4b91      	ldr	r3, [pc, #580]	; (80053e8 <HAL_RCC_ClockConfig+0x260>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 030f 	and.w	r3, r3, #15
 80051a8:	683a      	ldr	r2, [r7, #0]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d910      	bls.n	80051d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ae:	4b8e      	ldr	r3, [pc, #568]	; (80053e8 <HAL_RCC_ClockConfig+0x260>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f023 020f 	bic.w	r2, r3, #15
 80051b6:	498c      	ldr	r1, [pc, #560]	; (80053e8 <HAL_RCC_ClockConfig+0x260>)
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051be:	4b8a      	ldr	r3, [pc, #552]	; (80053e8 <HAL_RCC_ClockConfig+0x260>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 030f 	and.w	r3, r3, #15
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d001      	beq.n	80051d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e106      	b.n	80053de <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0301 	and.w	r3, r3, #1
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d073      	beq.n	80052c4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	2b03      	cmp	r3, #3
 80051e2:	d129      	bne.n	8005238 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051e4:	4b81      	ldr	r3, [pc, #516]	; (80053ec <HAL_RCC_ClockConfig+0x264>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d101      	bne.n	80051f4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e0f4      	b.n	80053de <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80051f4:	f000 f972 	bl	80054dc <RCC_GetSysClockFreqFromPLLSource>
 80051f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	4a7c      	ldr	r2, [pc, #496]	; (80053f0 <HAL_RCC_ClockConfig+0x268>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d93f      	bls.n	8005282 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005202:	4b7a      	ldr	r3, [pc, #488]	; (80053ec <HAL_RCC_ClockConfig+0x264>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d009      	beq.n	8005222 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005216:	2b00      	cmp	r3, #0
 8005218:	d033      	beq.n	8005282 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800521e:	2b00      	cmp	r3, #0
 8005220:	d12f      	bne.n	8005282 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005222:	4b72      	ldr	r3, [pc, #456]	; (80053ec <HAL_RCC_ClockConfig+0x264>)
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800522a:	4a70      	ldr	r2, [pc, #448]	; (80053ec <HAL_RCC_ClockConfig+0x264>)
 800522c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005230:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005232:	2380      	movs	r3, #128	; 0x80
 8005234:	617b      	str	r3, [r7, #20]
 8005236:	e024      	b.n	8005282 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	2b02      	cmp	r3, #2
 800523e:	d107      	bne.n	8005250 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005240:	4b6a      	ldr	r3, [pc, #424]	; (80053ec <HAL_RCC_ClockConfig+0x264>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d109      	bne.n	8005260 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e0c6      	b.n	80053de <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005250:	4b66      	ldr	r3, [pc, #408]	; (80053ec <HAL_RCC_ClockConfig+0x264>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e0be      	b.n	80053de <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005260:	f000 f8ce 	bl	8005400 <HAL_RCC_GetSysClockFreq>
 8005264:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	4a61      	ldr	r2, [pc, #388]	; (80053f0 <HAL_RCC_ClockConfig+0x268>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d909      	bls.n	8005282 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800526e:	4b5f      	ldr	r3, [pc, #380]	; (80053ec <HAL_RCC_ClockConfig+0x264>)
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005276:	4a5d      	ldr	r2, [pc, #372]	; (80053ec <HAL_RCC_ClockConfig+0x264>)
 8005278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800527c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800527e:	2380      	movs	r3, #128	; 0x80
 8005280:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005282:	4b5a      	ldr	r3, [pc, #360]	; (80053ec <HAL_RCC_ClockConfig+0x264>)
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f023 0203 	bic.w	r2, r3, #3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	4957      	ldr	r1, [pc, #348]	; (80053ec <HAL_RCC_ClockConfig+0x264>)
 8005290:	4313      	orrs	r3, r2
 8005292:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005294:	f7fc ff68 	bl	8002168 <HAL_GetTick>
 8005298:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800529a:	e00a      	b.n	80052b2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800529c:	f7fc ff64 	bl	8002168 <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d901      	bls.n	80052b2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e095      	b.n	80053de <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052b2:	4b4e      	ldr	r3, [pc, #312]	; (80053ec <HAL_RCC_ClockConfig+0x264>)
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f003 020c 	and.w	r2, r3, #12
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d1eb      	bne.n	800529c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0302 	and.w	r3, r3, #2
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d023      	beq.n	8005318 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0304 	and.w	r3, r3, #4
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d005      	beq.n	80052e8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052dc:	4b43      	ldr	r3, [pc, #268]	; (80053ec <HAL_RCC_ClockConfig+0x264>)
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	4a42      	ldr	r2, [pc, #264]	; (80053ec <HAL_RCC_ClockConfig+0x264>)
 80052e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80052e6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0308 	and.w	r3, r3, #8
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d007      	beq.n	8005304 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80052f4:	4b3d      	ldr	r3, [pc, #244]	; (80053ec <HAL_RCC_ClockConfig+0x264>)
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80052fc:	4a3b      	ldr	r2, [pc, #236]	; (80053ec <HAL_RCC_ClockConfig+0x264>)
 80052fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005302:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005304:	4b39      	ldr	r3, [pc, #228]	; (80053ec <HAL_RCC_ClockConfig+0x264>)
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	4936      	ldr	r1, [pc, #216]	; (80053ec <HAL_RCC_ClockConfig+0x264>)
 8005312:	4313      	orrs	r3, r2
 8005314:	608b      	str	r3, [r1, #8]
 8005316:	e008      	b.n	800532a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	2b80      	cmp	r3, #128	; 0x80
 800531c:	d105      	bne.n	800532a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800531e:	4b33      	ldr	r3, [pc, #204]	; (80053ec <HAL_RCC_ClockConfig+0x264>)
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	4a32      	ldr	r2, [pc, #200]	; (80053ec <HAL_RCC_ClockConfig+0x264>)
 8005324:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005328:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800532a:	4b2f      	ldr	r3, [pc, #188]	; (80053e8 <HAL_RCC_ClockConfig+0x260>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 030f 	and.w	r3, r3, #15
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	429a      	cmp	r2, r3
 8005336:	d21d      	bcs.n	8005374 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005338:	4b2b      	ldr	r3, [pc, #172]	; (80053e8 <HAL_RCC_ClockConfig+0x260>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f023 020f 	bic.w	r2, r3, #15
 8005340:	4929      	ldr	r1, [pc, #164]	; (80053e8 <HAL_RCC_ClockConfig+0x260>)
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	4313      	orrs	r3, r2
 8005346:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005348:	f7fc ff0e 	bl	8002168 <HAL_GetTick>
 800534c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800534e:	e00a      	b.n	8005366 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005350:	f7fc ff0a 	bl	8002168 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	f241 3288 	movw	r2, #5000	; 0x1388
 800535e:	4293      	cmp	r3, r2
 8005360:	d901      	bls.n	8005366 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e03b      	b.n	80053de <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005366:	4b20      	ldr	r3, [pc, #128]	; (80053e8 <HAL_RCC_ClockConfig+0x260>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 030f 	and.w	r3, r3, #15
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	429a      	cmp	r2, r3
 8005372:	d1ed      	bne.n	8005350 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0304 	and.w	r3, r3, #4
 800537c:	2b00      	cmp	r3, #0
 800537e:	d008      	beq.n	8005392 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005380:	4b1a      	ldr	r3, [pc, #104]	; (80053ec <HAL_RCC_ClockConfig+0x264>)
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	4917      	ldr	r1, [pc, #92]	; (80053ec <HAL_RCC_ClockConfig+0x264>)
 800538e:	4313      	orrs	r3, r2
 8005390:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0308 	and.w	r3, r3, #8
 800539a:	2b00      	cmp	r3, #0
 800539c:	d009      	beq.n	80053b2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800539e:	4b13      	ldr	r3, [pc, #76]	; (80053ec <HAL_RCC_ClockConfig+0x264>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	00db      	lsls	r3, r3, #3
 80053ac:	490f      	ldr	r1, [pc, #60]	; (80053ec <HAL_RCC_ClockConfig+0x264>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80053b2:	f000 f825 	bl	8005400 <HAL_RCC_GetSysClockFreq>
 80053b6:	4601      	mov	r1, r0
 80053b8:	4b0c      	ldr	r3, [pc, #48]	; (80053ec <HAL_RCC_ClockConfig+0x264>)
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	091b      	lsrs	r3, r3, #4
 80053be:	f003 030f 	and.w	r3, r3, #15
 80053c2:	4a0c      	ldr	r2, [pc, #48]	; (80053f4 <HAL_RCC_ClockConfig+0x26c>)
 80053c4:	5cd3      	ldrb	r3, [r2, r3]
 80053c6:	f003 031f 	and.w	r3, r3, #31
 80053ca:	fa21 f303 	lsr.w	r3, r1, r3
 80053ce:	4a0a      	ldr	r2, [pc, #40]	; (80053f8 <HAL_RCC_ClockConfig+0x270>)
 80053d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80053d2:	4b0a      	ldr	r3, [pc, #40]	; (80053fc <HAL_RCC_ClockConfig+0x274>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7fc fe7a 	bl	80020d0 <HAL_InitTick>
 80053dc:	4603      	mov	r3, r0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3718      	adds	r7, #24
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	40022000 	.word	0x40022000
 80053ec:	40021000 	.word	0x40021000
 80053f0:	04c4b400 	.word	0x04c4b400
 80053f4:	08009478 	.word	0x08009478
 80053f8:	200003cc 	.word	0x200003cc
 80053fc:	200003d0 	.word	0x200003d0

08005400 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005400:	b480      	push	{r7}
 8005402:	b087      	sub	sp, #28
 8005404:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005406:	4b2c      	ldr	r3, [pc, #176]	; (80054b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f003 030c 	and.w	r3, r3, #12
 800540e:	2b04      	cmp	r3, #4
 8005410:	d102      	bne.n	8005418 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005412:	4b2a      	ldr	r3, [pc, #168]	; (80054bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005414:	613b      	str	r3, [r7, #16]
 8005416:	e047      	b.n	80054a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005418:	4b27      	ldr	r3, [pc, #156]	; (80054b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f003 030c 	and.w	r3, r3, #12
 8005420:	2b08      	cmp	r3, #8
 8005422:	d102      	bne.n	800542a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005424:	4b26      	ldr	r3, [pc, #152]	; (80054c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005426:	613b      	str	r3, [r7, #16]
 8005428:	e03e      	b.n	80054a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800542a:	4b23      	ldr	r3, [pc, #140]	; (80054b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f003 030c 	and.w	r3, r3, #12
 8005432:	2b0c      	cmp	r3, #12
 8005434:	d136      	bne.n	80054a4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005436:	4b20      	ldr	r3, [pc, #128]	; (80054b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	f003 0303 	and.w	r3, r3, #3
 800543e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005440:	4b1d      	ldr	r3, [pc, #116]	; (80054b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	091b      	lsrs	r3, r3, #4
 8005446:	f003 030f 	and.w	r3, r3, #15
 800544a:	3301      	adds	r3, #1
 800544c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2b03      	cmp	r3, #3
 8005452:	d10c      	bne.n	800546e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005454:	4a1a      	ldr	r2, [pc, #104]	; (80054c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	fbb2 f3f3 	udiv	r3, r2, r3
 800545c:	4a16      	ldr	r2, [pc, #88]	; (80054b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800545e:	68d2      	ldr	r2, [r2, #12]
 8005460:	0a12      	lsrs	r2, r2, #8
 8005462:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005466:	fb02 f303 	mul.w	r3, r2, r3
 800546a:	617b      	str	r3, [r7, #20]
      break;
 800546c:	e00c      	b.n	8005488 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800546e:	4a13      	ldr	r2, [pc, #76]	; (80054bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	fbb2 f3f3 	udiv	r3, r2, r3
 8005476:	4a10      	ldr	r2, [pc, #64]	; (80054b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005478:	68d2      	ldr	r2, [r2, #12]
 800547a:	0a12      	lsrs	r2, r2, #8
 800547c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005480:	fb02 f303 	mul.w	r3, r2, r3
 8005484:	617b      	str	r3, [r7, #20]
      break;
 8005486:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005488:	4b0b      	ldr	r3, [pc, #44]	; (80054b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	0e5b      	lsrs	r3, r3, #25
 800548e:	f003 0303 	and.w	r3, r3, #3
 8005492:	3301      	adds	r3, #1
 8005494:	005b      	lsls	r3, r3, #1
 8005496:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a0:	613b      	str	r3, [r7, #16]
 80054a2:	e001      	b.n	80054a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80054a4:	2300      	movs	r3, #0
 80054a6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80054a8:	693b      	ldr	r3, [r7, #16]
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	371c      	adds	r7, #28
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	40021000 	.word	0x40021000
 80054bc:	00f42400 	.word	0x00f42400
 80054c0:	007a1200 	.word	0x007a1200

080054c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054c4:	b480      	push	{r7}
 80054c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054c8:	4b03      	ldr	r3, [pc, #12]	; (80054d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80054ca:	681b      	ldr	r3, [r3, #0]
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	200003cc 	.word	0x200003cc

080054dc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80054dc:	b480      	push	{r7}
 80054de:	b087      	sub	sp, #28
 80054e0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80054e2:	4b1e      	ldr	r3, [pc, #120]	; (800555c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	f003 0303 	and.w	r3, r3, #3
 80054ea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054ec:	4b1b      	ldr	r3, [pc, #108]	; (800555c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	091b      	lsrs	r3, r3, #4
 80054f2:	f003 030f 	and.w	r3, r3, #15
 80054f6:	3301      	adds	r3, #1
 80054f8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	2b03      	cmp	r3, #3
 80054fe:	d10c      	bne.n	800551a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005500:	4a17      	ldr	r2, [pc, #92]	; (8005560 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	fbb2 f3f3 	udiv	r3, r2, r3
 8005508:	4a14      	ldr	r2, [pc, #80]	; (800555c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800550a:	68d2      	ldr	r2, [r2, #12]
 800550c:	0a12      	lsrs	r2, r2, #8
 800550e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005512:	fb02 f303 	mul.w	r3, r2, r3
 8005516:	617b      	str	r3, [r7, #20]
    break;
 8005518:	e00c      	b.n	8005534 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800551a:	4a12      	ldr	r2, [pc, #72]	; (8005564 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005522:	4a0e      	ldr	r2, [pc, #56]	; (800555c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005524:	68d2      	ldr	r2, [r2, #12]
 8005526:	0a12      	lsrs	r2, r2, #8
 8005528:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800552c:	fb02 f303 	mul.w	r3, r2, r3
 8005530:	617b      	str	r3, [r7, #20]
    break;
 8005532:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005534:	4b09      	ldr	r3, [pc, #36]	; (800555c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	0e5b      	lsrs	r3, r3, #25
 800553a:	f003 0303 	and.w	r3, r3, #3
 800553e:	3301      	adds	r3, #1
 8005540:	005b      	lsls	r3, r3, #1
 8005542:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	fbb2 f3f3 	udiv	r3, r2, r3
 800554c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800554e:	687b      	ldr	r3, [r7, #4]
}
 8005550:	4618      	mov	r0, r3
 8005552:	371c      	adds	r7, #28
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr
 800555c:	40021000 	.word	0x40021000
 8005560:	007a1200 	.word	0x007a1200
 8005564:	00f42400 	.word	0x00f42400

08005568 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b086      	sub	sp, #24
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005570:	2300      	movs	r3, #0
 8005572:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005574:	2300      	movs	r3, #0
 8005576:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005580:	2b00      	cmp	r3, #0
 8005582:	f000 8098 	beq.w	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005586:	2300      	movs	r3, #0
 8005588:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800558a:	4b43      	ldr	r3, [pc, #268]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800558c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800558e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10d      	bne.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005596:	4b40      	ldr	r3, [pc, #256]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800559a:	4a3f      	ldr	r2, [pc, #252]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800559c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055a0:	6593      	str	r3, [r2, #88]	; 0x58
 80055a2:	4b3d      	ldr	r3, [pc, #244]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055aa:	60bb      	str	r3, [r7, #8]
 80055ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055ae:	2301      	movs	r3, #1
 80055b0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055b2:	4b3a      	ldr	r3, [pc, #232]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a39      	ldr	r2, [pc, #228]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80055b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055be:	f7fc fdd3 	bl	8002168 <HAL_GetTick>
 80055c2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055c4:	e009      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055c6:	f7fc fdcf 	bl	8002168 <HAL_GetTick>
 80055ca:	4602      	mov	r2, r0
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d902      	bls.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	74fb      	strb	r3, [r7, #19]
        break;
 80055d8:	e005      	b.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055da:	4b30      	ldr	r3, [pc, #192]	; (800569c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d0ef      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80055e6:	7cfb      	ldrb	r3, [r7, #19]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d159      	bne.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80055ec:	4b2a      	ldr	r3, [pc, #168]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055f6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d01e      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	429a      	cmp	r2, r3
 8005606:	d019      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005608:	4b23      	ldr	r3, [pc, #140]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800560a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800560e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005612:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005614:	4b20      	ldr	r3, [pc, #128]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800561a:	4a1f      	ldr	r2, [pc, #124]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800561c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005620:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005624:	4b1c      	ldr	r3, [pc, #112]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800562a:	4a1b      	ldr	r2, [pc, #108]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800562c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005630:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005634:	4a18      	ldr	r2, [pc, #96]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	2b00      	cmp	r3, #0
 8005644:	d016      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005646:	f7fc fd8f 	bl	8002168 <HAL_GetTick>
 800564a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800564c:	e00b      	b.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800564e:	f7fc fd8b 	bl	8002168 <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	f241 3288 	movw	r2, #5000	; 0x1388
 800565c:	4293      	cmp	r3, r2
 800565e:	d902      	bls.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	74fb      	strb	r3, [r7, #19]
            break;
 8005664:	e006      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005666:	4b0c      	ldr	r3, [pc, #48]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800566c:	f003 0302 	and.w	r3, r3, #2
 8005670:	2b00      	cmp	r3, #0
 8005672:	d0ec      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005674:	7cfb      	ldrb	r3, [r7, #19]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10b      	bne.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800567a:	4b07      	ldr	r3, [pc, #28]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800567c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005680:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005688:	4903      	ldr	r1, [pc, #12]	; (8005698 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800568a:	4313      	orrs	r3, r2
 800568c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005690:	e008      	b.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005692:	7cfb      	ldrb	r3, [r7, #19]
 8005694:	74bb      	strb	r3, [r7, #18]
 8005696:	e005      	b.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005698:	40021000 	.word	0x40021000
 800569c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056a0:	7cfb      	ldrb	r3, [r7, #19]
 80056a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056a4:	7c7b      	ldrb	r3, [r7, #17]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d105      	bne.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056aa:	4baf      	ldr	r3, [pc, #700]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ae:	4aae      	ldr	r2, [pc, #696]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00a      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056c2:	4ba9      	ldr	r3, [pc, #676]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056c8:	f023 0203 	bic.w	r2, r3, #3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	49a5      	ldr	r1, [pc, #660]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0302 	and.w	r3, r3, #2
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d00a      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80056e4:	4ba0      	ldr	r3, [pc, #640]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ea:	f023 020c 	bic.w	r2, r3, #12
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	499d      	ldr	r1, [pc, #628]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0304 	and.w	r3, r3, #4
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00a      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005706:	4b98      	ldr	r3, [pc, #608]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800570c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	4994      	ldr	r1, [pc, #592]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005716:	4313      	orrs	r3, r2
 8005718:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0308 	and.w	r3, r3, #8
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00a      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005728:	4b8f      	ldr	r3, [pc, #572]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800572a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800572e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	498c      	ldr	r1, [pc, #560]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005738:	4313      	orrs	r3, r2
 800573a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0310 	and.w	r3, r3, #16
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00a      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800574a:	4b87      	ldr	r3, [pc, #540]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800574c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005750:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	4983      	ldr	r1, [pc, #524]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800575a:	4313      	orrs	r3, r2
 800575c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0320 	and.w	r3, r3, #32
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00a      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800576c:	4b7e      	ldr	r3, [pc, #504]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800576e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005772:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	497b      	ldr	r1, [pc, #492]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800577c:	4313      	orrs	r3, r2
 800577e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00a      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800578e:	4b76      	ldr	r3, [pc, #472]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005794:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	69db      	ldr	r3, [r3, #28]
 800579c:	4972      	ldr	r1, [pc, #456]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00a      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80057b0:	4b6d      	ldr	r3, [pc, #436]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	496a      	ldr	r1, [pc, #424]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00a      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057d2:	4b65      	ldr	r3, [pc, #404]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e0:	4961      	ldr	r1, [pc, #388]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00a      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80057f4:	4b5c      	ldr	r3, [pc, #368]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057fa:	f023 0203 	bic.w	r2, r3, #3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005802:	4959      	ldr	r1, [pc, #356]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005804:	4313      	orrs	r3, r2
 8005806:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00a      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005816:	4b54      	ldr	r3, [pc, #336]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800581c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005824:	4950      	ldr	r1, [pc, #320]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005826:	4313      	orrs	r3, r2
 8005828:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005834:	2b00      	cmp	r3, #0
 8005836:	d015      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005838:	4b4b      	ldr	r3, [pc, #300]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800583a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800583e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005846:	4948      	ldr	r1, [pc, #288]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005848:	4313      	orrs	r3, r2
 800584a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005852:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005856:	d105      	bne.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005858:	4b43      	ldr	r3, [pc, #268]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	4a42      	ldr	r2, [pc, #264]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800585e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005862:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800586c:	2b00      	cmp	r3, #0
 800586e:	d015      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005870:	4b3d      	ldr	r3, [pc, #244]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005876:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800587e:	493a      	ldr	r1, [pc, #232]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005880:	4313      	orrs	r3, r2
 8005882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800588a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800588e:	d105      	bne.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005890:	4b35      	ldr	r3, [pc, #212]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	4a34      	ldr	r2, [pc, #208]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005896:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800589a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d015      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80058a8:	4b2f      	ldr	r3, [pc, #188]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80058aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b6:	492c      	ldr	r1, [pc, #176]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058c6:	d105      	bne.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058c8:	4b27      	ldr	r3, [pc, #156]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	4a26      	ldr	r2, [pc, #152]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80058ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058d2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d015      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058e0:	4b21      	ldr	r3, [pc, #132]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80058e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ee:	491e      	ldr	r1, [pc, #120]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058fe:	d105      	bne.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005900:	4b19      	ldr	r3, [pc, #100]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	4a18      	ldr	r2, [pc, #96]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005906:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800590a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d015      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005918:	4b13      	ldr	r3, [pc, #76]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800591a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800591e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005926:	4910      	ldr	r1, [pc, #64]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005928:	4313      	orrs	r3, r2
 800592a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005932:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005936:	d105      	bne.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005938:	4b0b      	ldr	r3, [pc, #44]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	4a0a      	ldr	r2, [pc, #40]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800593e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005942:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d018      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005950:	4b05      	ldr	r3, [pc, #20]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005956:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800595e:	4902      	ldr	r1, [pc, #8]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005960:	4313      	orrs	r3, r2
 8005962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005966:	e001      	b.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005968:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005970:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005974:	d105      	bne.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005976:	4b21      	ldr	r3, [pc, #132]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	4a20      	ldr	r2, [pc, #128]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800597c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005980:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d015      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800598e:	4b1b      	ldr	r3, [pc, #108]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005994:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800599c:	4917      	ldr	r1, [pc, #92]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ac:	d105      	bne.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80059ae:	4b13      	ldr	r3, [pc, #76]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	4a12      	ldr	r2, [pc, #72]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80059b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059b8:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d015      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80059c6:	4b0d      	ldr	r3, [pc, #52]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80059c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059d4:	4909      	ldr	r1, [pc, #36]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059e4:	d105      	bne.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059e6:	4b05      	ldr	r3, [pc, #20]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	4a04      	ldr	r2, [pc, #16]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80059ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059f0:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80059f2:	7cbb      	ldrb	r3, [r7, #18]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3718      	adds	r7, #24
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	40021000 	.word	0x40021000

08005a00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d101      	bne.n	8005a12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e084      	b.n	8005b1c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d106      	bne.n	8005a32 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f7fb fd77 	bl	8001520 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2202      	movs	r2, #2
 8005a36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a48:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a52:	d902      	bls.n	8005a5a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a54:	2300      	movs	r3, #0
 8005a56:	60fb      	str	r3, [r7, #12]
 8005a58:	e002      	b.n	8005a60 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005a5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a5e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005a68:	d007      	beq.n	8005a7a <HAL_SPI_Init+0x7a>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a72:	d002      	beq.n	8005a7a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10b      	bne.n	8005a9a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a8a:	d903      	bls.n	8005a94 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2202      	movs	r2, #2
 8005a90:	631a      	str	r2, [r3, #48]	; 0x30
 8005a92:	e002      	b.n	8005a9a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	431a      	orrs	r2, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	431a      	orrs	r2, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ab8:	431a      	orrs	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	431a      	orrs	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a1b      	ldr	r3, [r3, #32]
 8005ac4:	ea42 0103 	orr.w	r1, r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	0c1b      	lsrs	r3, r3, #16
 8005ada:	f003 0204 	and.w	r2, r3, #4
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae2:	431a      	orrs	r2, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae8:	431a      	orrs	r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	ea42 0103 	orr.w	r1, r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	430a      	orrs	r2, r1
 8005afa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	69da      	ldr	r2, [r3, #28]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b0a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2201      	movs	r2, #1
 8005b16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3710      	adds	r7, #16
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b088      	sub	sp, #32
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	603b      	str	r3, [r7, #0]
 8005b30:	4613      	mov	r3, r2
 8005b32:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b34:	2300      	movs	r3, #0
 8005b36:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d101      	bne.n	8005b46 <HAL_SPI_Transmit+0x22>
 8005b42:	2302      	movs	r3, #2
 8005b44:	e150      	b.n	8005de8 <HAL_SPI_Transmit+0x2c4>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b4e:	f7fc fb0b 	bl	8002168 <HAL_GetTick>
 8005b52:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005b54:	88fb      	ldrh	r3, [r7, #6]
 8005b56:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d002      	beq.n	8005b6a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005b64:	2302      	movs	r3, #2
 8005b66:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b68:	e135      	b.n	8005dd6 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d002      	beq.n	8005b76 <HAL_SPI_Transmit+0x52>
 8005b70:	88fb      	ldrh	r3, [r7, #6]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d102      	bne.n	8005b7c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b7a:	e12c      	b.n	8005dd6 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2203      	movs	r2, #3
 8005b80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	68ba      	ldr	r2, [r7, #8]
 8005b8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	88fa      	ldrh	r2, [r7, #6]
 8005b94:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	88fa      	ldrh	r2, [r7, #6]
 8005b9a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bc6:	d107      	bne.n	8005bd8 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bd6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be2:	2b40      	cmp	r3, #64	; 0x40
 8005be4:	d007      	beq.n	8005bf6 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bf4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005bfe:	d94b      	bls.n	8005c98 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d002      	beq.n	8005c0e <HAL_SPI_Transmit+0xea>
 8005c08:	8afb      	ldrh	r3, [r7, #22]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d13e      	bne.n	8005c8c <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c12:	881a      	ldrh	r2, [r3, #0]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1e:	1c9a      	adds	r2, r3, #2
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005c32:	e02b      	b.n	8005c8c <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f003 0302 	and.w	r3, r3, #2
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d112      	bne.n	8005c68 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c46:	881a      	ldrh	r2, [r3, #0]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c52:	1c9a      	adds	r2, r3, #2
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c66:	e011      	b.n	8005c8c <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c68:	f7fc fa7e 	bl	8002168 <HAL_GetTick>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	683a      	ldr	r2, [r7, #0]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d803      	bhi.n	8005c80 <HAL_SPI_Transmit+0x15c>
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c7e:	d102      	bne.n	8005c86 <HAL_SPI_Transmit+0x162>
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d102      	bne.n	8005c8c <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005c8a:	e0a4      	b.n	8005dd6 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1ce      	bne.n	8005c34 <HAL_SPI_Transmit+0x110>
 8005c96:	e07c      	b.n	8005d92 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d002      	beq.n	8005ca6 <HAL_SPI_Transmit+0x182>
 8005ca0:	8afb      	ldrh	r3, [r7, #22]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d170      	bne.n	8005d88 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d912      	bls.n	8005cd6 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb4:	881a      	ldrh	r2, [r3, #0]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc0:	1c9a      	adds	r2, r3, #2
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	3b02      	subs	r3, #2
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005cd4:	e058      	b.n	8005d88 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	330c      	adds	r3, #12
 8005ce0:	7812      	ldrb	r2, [r2, #0]
 8005ce2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce8:	1c5a      	adds	r2, r3, #1
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005cfc:	e044      	b.n	8005d88 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f003 0302 	and.w	r3, r3, #2
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d12b      	bne.n	8005d64 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d912      	bls.n	8005d3c <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1a:	881a      	ldrh	r2, [r3, #0]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d26:	1c9a      	adds	r2, r3, #2
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	3b02      	subs	r3, #2
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d3a:	e025      	b.n	8005d88 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	330c      	adds	r3, #12
 8005d46:	7812      	ldrb	r2, [r2, #0]
 8005d48:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4e:	1c5a      	adds	r2, r3, #1
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d62:	e011      	b.n	8005d88 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d64:	f7fc fa00 	bl	8002168 <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	683a      	ldr	r2, [r7, #0]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d803      	bhi.n	8005d7c <HAL_SPI_Transmit+0x258>
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d7a:	d102      	bne.n	8005d82 <HAL_SPI_Transmit+0x25e>
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d102      	bne.n	8005d88 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005d86:	e026      	b.n	8005dd6 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1b5      	bne.n	8005cfe <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d92:	69ba      	ldr	r2, [r7, #24]
 8005d94:	6839      	ldr	r1, [r7, #0]
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f000 f901 	bl	8005f9e <SPI_EndRxTxTransaction>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d002      	beq.n	8005da8 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2220      	movs	r2, #32
 8005da6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d10a      	bne.n	8005dc6 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005db0:	2300      	movs	r3, #0
 8005db2:	613b      	str	r3, [r7, #16]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	613b      	str	r3, [r7, #16]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	613b      	str	r3, [r7, #16]
 8005dc4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d002      	beq.n	8005dd4 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	77fb      	strb	r3, [r7, #31]
 8005dd2:	e000      	b.n	8005dd6 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8005dd4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005de6:	7ffb      	ldrb	r3, [r7, #31]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3720      	adds	r7, #32
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	603b      	str	r3, [r7, #0]
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e00:	e04c      	b.n	8005e9c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e08:	d048      	beq.n	8005e9c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005e0a:	f7fc f9ad 	bl	8002168 <HAL_GetTick>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	1ad3      	subs	r3, r2, r3
 8005e14:	683a      	ldr	r2, [r7, #0]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d902      	bls.n	8005e20 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d13d      	bne.n	8005e9c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	685a      	ldr	r2, [r3, #4]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e2e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e38:	d111      	bne.n	8005e5e <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e42:	d004      	beq.n	8005e4e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e4c:	d107      	bne.n	8005e5e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e5c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e66:	d10f      	bne.n	8005e88 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e76:	601a      	str	r2, [r3, #0]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e86:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e00f      	b.n	8005ebc <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	689a      	ldr	r2, [r3, #8]
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	bf0c      	ite	eq
 8005eac:	2301      	moveq	r3, #1
 8005eae:	2300      	movne	r3, #0
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	79fb      	ldrb	r3, [r7, #7]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d1a3      	bne.n	8005e02 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3710      	adds	r7, #16
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
 8005ed0:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8005ed2:	e057      	b.n	8005f84 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005eda:	d106      	bne.n	8005eea <SPI_WaitFifoStateUntilTimeout+0x26>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d103      	bne.n	8005eea <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	330c      	adds	r3, #12
 8005ee8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ef0:	d048      	beq.n	8005f84 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005ef2:	f7fc f939 	bl	8002168 <HAL_GetTick>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	683a      	ldr	r2, [r7, #0]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d902      	bls.n	8005f08 <SPI_WaitFifoStateUntilTimeout+0x44>
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d13d      	bne.n	8005f84 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	685a      	ldr	r2, [r3, #4]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005f16:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f20:	d111      	bne.n	8005f46 <SPI_WaitFifoStateUntilTimeout+0x82>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f2a:	d004      	beq.n	8005f36 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f34:	d107      	bne.n	8005f46 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f44:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f4e:	d10f      	bne.n	8005f70 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f5e:	601a      	str	r2, [r3, #0]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f6e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005f80:	2303      	movs	r3, #3
 8005f82:	e008      	b.n	8005f96 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	689a      	ldr	r2, [r3, #8]
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d19f      	bne.n	8005ed4 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b086      	sub	sp, #24
 8005fa2:	af02      	add	r7, sp, #8
 8005fa4:	60f8      	str	r0, [r7, #12]
 8005fa6:	60b9      	str	r1, [r7, #8]
 8005fa8:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	9300      	str	r3, [sp, #0]
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	f7ff ff84 	bl	8005ec4 <SPI_WaitFifoStateUntilTimeout>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d007      	beq.n	8005fd2 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fc6:	f043 0220 	orr.w	r2, r3, #32
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e027      	b.n	8006022 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	9300      	str	r3, [sp, #0]
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	2180      	movs	r1, #128	; 0x80
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f7ff ff07 	bl	8005df0 <SPI_WaitFlagStateUntilTimeout>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d007      	beq.n	8005ff8 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fec:	f043 0220 	orr.w	r2, r3, #32
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e014      	b.n	8006022 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	9300      	str	r3, [sp, #0]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f7ff ff5d 	bl	8005ec4 <SPI_WaitFifoStateUntilTimeout>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d007      	beq.n	8006020 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006014:	f043 0220 	orr.w	r2, r3, #32
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800601c:	2303      	movs	r3, #3
 800601e:	e000      	b.n	8006022 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3710      	adds	r7, #16
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b082      	sub	sp, #8
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d101      	bne.n	800603c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e049      	b.n	80060d0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006042:	b2db      	uxtb	r3, r3
 8006044:	2b00      	cmp	r3, #0
 8006046:	d106      	bne.n	8006056 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f7fb ff37 	bl	8001ec4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2202      	movs	r2, #2
 800605a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	3304      	adds	r3, #4
 8006066:	4619      	mov	r1, r3
 8006068:	4610      	mov	r0, r2
 800606a:	f000 fc23 	bl	80068b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2201      	movs	r2, #1
 800607a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2201      	movs	r2, #1
 8006082:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2201      	movs	r2, #1
 80060a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3708      	adds	r7, #8
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80060d8:	b480      	push	{r7}
 80060da:	b085      	sub	sp, #20
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d001      	beq.n	80060f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e019      	b.n	8006124 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2202      	movs	r2, #2
 80060f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	689a      	ldr	r2, [r3, #8]
 80060fe:	4b0c      	ldr	r3, [pc, #48]	; (8006130 <HAL_TIM_Base_Start+0x58>)
 8006100:	4013      	ands	r3, r2
 8006102:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2b06      	cmp	r3, #6
 8006108:	d00b      	beq.n	8006122 <HAL_TIM_Base_Start+0x4a>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006110:	d007      	beq.n	8006122 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f042 0201 	orr.w	r2, r2, #1
 8006120:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3714      	adds	r7, #20
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr
 8006130:	00010007 	.word	0x00010007

08006134 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006142:	b2db      	uxtb	r3, r3
 8006144:	2b01      	cmp	r3, #1
 8006146:	d001      	beq.n	800614c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e021      	b.n	8006190 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2202      	movs	r2, #2
 8006150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68da      	ldr	r2, [r3, #12]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f042 0201 	orr.w	r2, r2, #1
 8006162:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	689a      	ldr	r2, [r3, #8]
 800616a:	4b0c      	ldr	r3, [pc, #48]	; (800619c <HAL_TIM_Base_Start_IT+0x68>)
 800616c:	4013      	ands	r3, r2
 800616e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2b06      	cmp	r3, #6
 8006174:	d00b      	beq.n	800618e <HAL_TIM_Base_Start_IT+0x5a>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800617c:	d007      	beq.n	800618e <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f042 0201 	orr.w	r2, r2, #1
 800618c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	3714      	adds	r7, #20
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr
 800619c:	00010007 	.word	0x00010007

080061a0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b086      	sub	sp, #24
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d101      	bne.n	80061b4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e097      	b.n	80062e4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d106      	bne.n	80061ce <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f7fb fe1f 	bl	8001e0c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2202      	movs	r2, #2
 80061d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	6812      	ldr	r2, [r2, #0]
 80061e0:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80061e4:	f023 0307 	bic.w	r3, r3, #7
 80061e8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	3304      	adds	r3, #4
 80061f2:	4619      	mov	r1, r3
 80061f4:	4610      	mov	r0, r2
 80061f6:	f000 fb5d 	bl	80068b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	6a1b      	ldr	r3, [r3, #32]
 8006210:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	4313      	orrs	r3, r2
 800621a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006222:	f023 0303 	bic.w	r3, r3, #3
 8006226:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	689a      	ldr	r2, [r3, #8]
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	699b      	ldr	r3, [r3, #24]
 8006230:	021b      	lsls	r3, r3, #8
 8006232:	4313      	orrs	r3, r2
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	4313      	orrs	r3, r2
 8006238:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006240:	f023 030c 	bic.w	r3, r3, #12
 8006244:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800624c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006250:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	68da      	ldr	r2, [r3, #12]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	69db      	ldr	r3, [r3, #28]
 800625a:	021b      	lsls	r3, r3, #8
 800625c:	4313      	orrs	r3, r2
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	4313      	orrs	r3, r2
 8006262:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	011a      	lsls	r2, r3, #4
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	031b      	lsls	r3, r3, #12
 8006270:	4313      	orrs	r3, r2
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	4313      	orrs	r3, r2
 8006276:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800627e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006286:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	685a      	ldr	r2, [r3, #4]
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	695b      	ldr	r3, [r3, #20]
 8006290:	011b      	lsls	r3, r3, #4
 8006292:	4313      	orrs	r3, r2
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	4313      	orrs	r3, r2
 8006298:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	697a      	ldr	r2, [r7, #20]
 80062a0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	693a      	ldr	r2, [r7, #16]
 80062a8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2201      	movs	r2, #1
 80062be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2201      	movs	r2, #1
 80062c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2201      	movs	r2, #1
 80062de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3718      	adds	r7, #24
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	f003 0302 	and.w	r3, r3, #2
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d122      	bne.n	8006348 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	f003 0302 	and.w	r3, r3, #2
 800630c:	2b02      	cmp	r3, #2
 800630e:	d11b      	bne.n	8006348 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f06f 0202 	mvn.w	r2, #2
 8006318:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2201      	movs	r2, #1
 800631e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	f003 0303 	and.w	r3, r3, #3
 800632a:	2b00      	cmp	r3, #0
 800632c:	d003      	beq.n	8006336 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 faa2 	bl	8006878 <HAL_TIM_IC_CaptureCallback>
 8006334:	e005      	b.n	8006342 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 fa94 	bl	8006864 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 faa5 	bl	800688c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	f003 0304 	and.w	r3, r3, #4
 8006352:	2b04      	cmp	r3, #4
 8006354:	d122      	bne.n	800639c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	f003 0304 	and.w	r3, r3, #4
 8006360:	2b04      	cmp	r3, #4
 8006362:	d11b      	bne.n	800639c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f06f 0204 	mvn.w	r2, #4
 800636c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2202      	movs	r2, #2
 8006372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800637e:	2b00      	cmp	r3, #0
 8006380:	d003      	beq.n	800638a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 fa78 	bl	8006878 <HAL_TIM_IC_CaptureCallback>
 8006388:	e005      	b.n	8006396 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 fa6a 	bl	8006864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 fa7b 	bl	800688c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	f003 0308 	and.w	r3, r3, #8
 80063a6:	2b08      	cmp	r3, #8
 80063a8:	d122      	bne.n	80063f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	f003 0308 	and.w	r3, r3, #8
 80063b4:	2b08      	cmp	r3, #8
 80063b6:	d11b      	bne.n	80063f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f06f 0208 	mvn.w	r2, #8
 80063c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2204      	movs	r2, #4
 80063c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	69db      	ldr	r3, [r3, #28]
 80063ce:	f003 0303 	and.w	r3, r3, #3
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d003      	beq.n	80063de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 fa4e 	bl	8006878 <HAL_TIM_IC_CaptureCallback>
 80063dc:	e005      	b.n	80063ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 fa40 	bl	8006864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 fa51 	bl	800688c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	f003 0310 	and.w	r3, r3, #16
 80063fa:	2b10      	cmp	r3, #16
 80063fc:	d122      	bne.n	8006444 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	f003 0310 	and.w	r3, r3, #16
 8006408:	2b10      	cmp	r3, #16
 800640a:	d11b      	bne.n	8006444 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f06f 0210 	mvn.w	r2, #16
 8006414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2208      	movs	r2, #8
 800641a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	69db      	ldr	r3, [r3, #28]
 8006422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006426:	2b00      	cmp	r3, #0
 8006428:	d003      	beq.n	8006432 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 fa24 	bl	8006878 <HAL_TIM_IC_CaptureCallback>
 8006430:	e005      	b.n	800643e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 fa16 	bl	8006864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 fa27 	bl	800688c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	f003 0301 	and.w	r3, r3, #1
 800644e:	2b01      	cmp	r3, #1
 8006450:	d10e      	bne.n	8006470 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	f003 0301 	and.w	r3, r3, #1
 800645c:	2b01      	cmp	r3, #1
 800645e:	d107      	bne.n	8006470 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f06f 0201 	mvn.w	r2, #1
 8006468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f9f0 	bl	8006850 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800647a:	2b80      	cmp	r3, #128	; 0x80
 800647c:	d10e      	bne.n	800649c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006488:	2b80      	cmp	r3, #128	; 0x80
 800648a:	d107      	bne.n	800649c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 fd5e 	bl	8006f58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064aa:	d10e      	bne.n	80064ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064b6:	2b80      	cmp	r3, #128	; 0x80
 80064b8:	d107      	bne.n	80064ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80064c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 fd51 	bl	8006f6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d4:	2b40      	cmp	r3, #64	; 0x40
 80064d6:	d10e      	bne.n	80064f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e2:	2b40      	cmp	r3, #64	; 0x40
 80064e4:	d107      	bne.n	80064f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80064ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 f9d5 	bl	80068a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	f003 0320 	and.w	r3, r3, #32
 8006500:	2b20      	cmp	r3, #32
 8006502:	d10e      	bne.n	8006522 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	f003 0320 	and.w	r3, r3, #32
 800650e:	2b20      	cmp	r3, #32
 8006510:	d107      	bne.n	8006522 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f06f 0220 	mvn.w	r2, #32
 800651a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 fd11 	bl	8006f44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800652c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006530:	d10f      	bne.n	8006552 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800653c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006540:	d107      	bne.n	8006552 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800654a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 fd17 	bl	8006f80 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800655c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006560:	d10f      	bne.n	8006582 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800656c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006570:	d107      	bne.n	8006582 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800657a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 fd09 	bl	8006f94 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800658c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006590:	d10f      	bne.n	80065b2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800659c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065a0:	d107      	bne.n	80065b2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80065aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 fcfb 	bl	8006fa8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80065c0:	d10f      	bne.n	80065e2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80065d0:	d107      	bne.n	80065e2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80065da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 fced 	bl	8006fbc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065e2:	bf00      	nop
 80065e4:	3708      	adds	r7, #8
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
	...

080065ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d101      	bne.n	8006604 <HAL_TIM_ConfigClockSource+0x18>
 8006600:	2302      	movs	r3, #2
 8006602:	e0d2      	b.n	80067aa <HAL_TIM_ConfigClockSource+0x1be>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2202      	movs	r2, #2
 8006610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006622:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006626:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800662e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006640:	f000 80a9 	beq.w	8006796 <HAL_TIM_ConfigClockSource+0x1aa>
 8006644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006648:	d81a      	bhi.n	8006680 <HAL_TIM_ConfigClockSource+0x94>
 800664a:	2b30      	cmp	r3, #48	; 0x30
 800664c:	f000 809a 	beq.w	8006784 <HAL_TIM_ConfigClockSource+0x198>
 8006650:	2b30      	cmp	r3, #48	; 0x30
 8006652:	d809      	bhi.n	8006668 <HAL_TIM_ConfigClockSource+0x7c>
 8006654:	2b10      	cmp	r3, #16
 8006656:	f000 8095 	beq.w	8006784 <HAL_TIM_ConfigClockSource+0x198>
 800665a:	2b20      	cmp	r3, #32
 800665c:	f000 8092 	beq.w	8006784 <HAL_TIM_ConfigClockSource+0x198>
 8006660:	2b00      	cmp	r3, #0
 8006662:	f000 808f 	beq.w	8006784 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006666:	e097      	b.n	8006798 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8006668:	2b50      	cmp	r3, #80	; 0x50
 800666a:	d05b      	beq.n	8006724 <HAL_TIM_ConfigClockSource+0x138>
 800666c:	2b50      	cmp	r3, #80	; 0x50
 800666e:	d802      	bhi.n	8006676 <HAL_TIM_ConfigClockSource+0x8a>
 8006670:	2b40      	cmp	r3, #64	; 0x40
 8006672:	d077      	beq.n	8006764 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006674:	e090      	b.n	8006798 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8006676:	2b60      	cmp	r3, #96	; 0x60
 8006678:	d064      	beq.n	8006744 <HAL_TIM_ConfigClockSource+0x158>
 800667a:	2b70      	cmp	r3, #112	; 0x70
 800667c:	d028      	beq.n	80066d0 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800667e:	e08b      	b.n	8006798 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8006680:	4a4c      	ldr	r2, [pc, #304]	; (80067b4 <HAL_TIM_ConfigClockSource+0x1c8>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d07e      	beq.n	8006784 <HAL_TIM_ConfigClockSource+0x198>
 8006686:	4a4b      	ldr	r2, [pc, #300]	; (80067b4 <HAL_TIM_ConfigClockSource+0x1c8>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d810      	bhi.n	80066ae <HAL_TIM_ConfigClockSource+0xc2>
 800668c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006690:	d078      	beq.n	8006784 <HAL_TIM_ConfigClockSource+0x198>
 8006692:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006696:	d803      	bhi.n	80066a0 <HAL_TIM_ConfigClockSource+0xb4>
 8006698:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800669c:	d02f      	beq.n	80066fe <HAL_TIM_ConfigClockSource+0x112>
      break;
 800669e:	e07b      	b.n	8006798 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80066a0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80066a4:	d06e      	beq.n	8006784 <HAL_TIM_ConfigClockSource+0x198>
 80066a6:	4a44      	ldr	r2, [pc, #272]	; (80067b8 <HAL_TIM_ConfigClockSource+0x1cc>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d06b      	beq.n	8006784 <HAL_TIM_ConfigClockSource+0x198>
      break;
 80066ac:	e074      	b.n	8006798 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80066ae:	4a43      	ldr	r2, [pc, #268]	; (80067bc <HAL_TIM_ConfigClockSource+0x1d0>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d067      	beq.n	8006784 <HAL_TIM_ConfigClockSource+0x198>
 80066b4:	4a41      	ldr	r2, [pc, #260]	; (80067bc <HAL_TIM_ConfigClockSource+0x1d0>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d803      	bhi.n	80066c2 <HAL_TIM_ConfigClockSource+0xd6>
 80066ba:	4a41      	ldr	r2, [pc, #260]	; (80067c0 <HAL_TIM_ConfigClockSource+0x1d4>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d061      	beq.n	8006784 <HAL_TIM_ConfigClockSource+0x198>
      break;
 80066c0:	e06a      	b.n	8006798 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80066c2:	4a40      	ldr	r2, [pc, #256]	; (80067c4 <HAL_TIM_ConfigClockSource+0x1d8>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d05d      	beq.n	8006784 <HAL_TIM_ConfigClockSource+0x198>
 80066c8:	4a3f      	ldr	r2, [pc, #252]	; (80067c8 <HAL_TIM_ConfigClockSource+0x1dc>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d05a      	beq.n	8006784 <HAL_TIM_ConfigClockSource+0x198>
      break;
 80066ce:	e063      	b.n	8006798 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6818      	ldr	r0, [r3, #0]
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	6899      	ldr	r1, [r3, #8]
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	685a      	ldr	r2, [r3, #4]
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	f000 fac8 	bl	8006c74 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80066f2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	609a      	str	r2, [r3, #8]
      break;
 80066fc:	e04c      	b.n	8006798 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6818      	ldr	r0, [r3, #0]
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	6899      	ldr	r1, [r3, #8]
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	685a      	ldr	r2, [r3, #4]
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	f000 fab1 	bl	8006c74 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	689a      	ldr	r2, [r3, #8]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006720:	609a      	str	r2, [r3, #8]
      break;
 8006722:	e039      	b.n	8006798 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6818      	ldr	r0, [r3, #0]
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	6859      	ldr	r1, [r3, #4]
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	461a      	mov	r2, r3
 8006732:	f000 fa23 	bl	8006b7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2150      	movs	r1, #80	; 0x50
 800673c:	4618      	mov	r0, r3
 800673e:	f000 fa7c 	bl	8006c3a <TIM_ITRx_SetConfig>
      break;
 8006742:	e029      	b.n	8006798 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6818      	ldr	r0, [r3, #0]
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	6859      	ldr	r1, [r3, #4]
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	461a      	mov	r2, r3
 8006752:	f000 fa42 	bl	8006bda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2160      	movs	r1, #96	; 0x60
 800675c:	4618      	mov	r0, r3
 800675e:	f000 fa6c 	bl	8006c3a <TIM_ITRx_SetConfig>
      break;
 8006762:	e019      	b.n	8006798 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6818      	ldr	r0, [r3, #0]
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	6859      	ldr	r1, [r3, #4]
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	461a      	mov	r2, r3
 8006772:	f000 fa03 	bl	8006b7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2140      	movs	r1, #64	; 0x40
 800677c:	4618      	mov	r0, r3
 800677e:	f000 fa5c 	bl	8006c3a <TIM_ITRx_SetConfig>
      break;
 8006782:	e009      	b.n	8006798 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4619      	mov	r1, r3
 800678e:	4610      	mov	r0, r2
 8006790:	f000 fa53 	bl	8006c3a <TIM_ITRx_SetConfig>
      break;
 8006794:	e000      	b.n	8006798 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 8006796:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	00100030 	.word	0x00100030
 80067b8:	00100020 	.word	0x00100020
 80067bc:	00100050 	.word	0x00100050
 80067c0:	00100040 	.word	0x00100040
 80067c4:	00100060 	.word	0x00100060
 80067c8:	00100070 	.word	0x00100070

080067cc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d101      	bne.n	80067e4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80067e0:	2302      	movs	r3, #2
 80067e2:	e031      	b.n	8006848 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2202      	movs	r2, #2
 80067f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80067f4:	6839      	ldr	r1, [r7, #0]
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 f904 	bl	8006a04 <TIM_SlaveTimer_SetConfig>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d009      	beq.n	8006816 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2201      	movs	r2, #1
 8006806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e018      	b.n	8006848 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	68da      	ldr	r2, [r3, #12]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006824:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68da      	ldr	r2, [r3, #12]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006834:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2201      	movs	r2, #1
 800683a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3708      	adds	r7, #8
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006858:	bf00      	nop
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800686c:	bf00      	nop
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006880:	bf00      	nop
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006894:	bf00      	nop
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a46      	ldr	r2, [pc, #280]	; (80069e0 <TIM_Base_SetConfig+0x12c>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d017      	beq.n	80068fc <TIM_Base_SetConfig+0x48>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068d2:	d013      	beq.n	80068fc <TIM_Base_SetConfig+0x48>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a43      	ldr	r2, [pc, #268]	; (80069e4 <TIM_Base_SetConfig+0x130>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d00f      	beq.n	80068fc <TIM_Base_SetConfig+0x48>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a42      	ldr	r2, [pc, #264]	; (80069e8 <TIM_Base_SetConfig+0x134>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d00b      	beq.n	80068fc <TIM_Base_SetConfig+0x48>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a41      	ldr	r2, [pc, #260]	; (80069ec <TIM_Base_SetConfig+0x138>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d007      	beq.n	80068fc <TIM_Base_SetConfig+0x48>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a40      	ldr	r2, [pc, #256]	; (80069f0 <TIM_Base_SetConfig+0x13c>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d003      	beq.n	80068fc <TIM_Base_SetConfig+0x48>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a3f      	ldr	r2, [pc, #252]	; (80069f4 <TIM_Base_SetConfig+0x140>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d108      	bne.n	800690e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006902:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	4313      	orrs	r3, r2
 800690c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a33      	ldr	r2, [pc, #204]	; (80069e0 <TIM_Base_SetConfig+0x12c>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d023      	beq.n	800695e <TIM_Base_SetConfig+0xaa>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800691c:	d01f      	beq.n	800695e <TIM_Base_SetConfig+0xaa>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a30      	ldr	r2, [pc, #192]	; (80069e4 <TIM_Base_SetConfig+0x130>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d01b      	beq.n	800695e <TIM_Base_SetConfig+0xaa>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a2f      	ldr	r2, [pc, #188]	; (80069e8 <TIM_Base_SetConfig+0x134>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d017      	beq.n	800695e <TIM_Base_SetConfig+0xaa>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a2e      	ldr	r2, [pc, #184]	; (80069ec <TIM_Base_SetConfig+0x138>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d013      	beq.n	800695e <TIM_Base_SetConfig+0xaa>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a2d      	ldr	r2, [pc, #180]	; (80069f0 <TIM_Base_SetConfig+0x13c>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d00f      	beq.n	800695e <TIM_Base_SetConfig+0xaa>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a2d      	ldr	r2, [pc, #180]	; (80069f8 <TIM_Base_SetConfig+0x144>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d00b      	beq.n	800695e <TIM_Base_SetConfig+0xaa>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a2c      	ldr	r2, [pc, #176]	; (80069fc <TIM_Base_SetConfig+0x148>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d007      	beq.n	800695e <TIM_Base_SetConfig+0xaa>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a2b      	ldr	r2, [pc, #172]	; (8006a00 <TIM_Base_SetConfig+0x14c>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d003      	beq.n	800695e <TIM_Base_SetConfig+0xaa>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a26      	ldr	r2, [pc, #152]	; (80069f4 <TIM_Base_SetConfig+0x140>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d108      	bne.n	8006970 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	68fa      	ldr	r2, [r7, #12]
 800696c:	4313      	orrs	r3, r2
 800696e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	4313      	orrs	r3, r2
 800697c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	689a      	ldr	r2, [r3, #8]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a12      	ldr	r2, [pc, #72]	; (80069e0 <TIM_Base_SetConfig+0x12c>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d013      	beq.n	80069c4 <TIM_Base_SetConfig+0x110>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a14      	ldr	r2, [pc, #80]	; (80069f0 <TIM_Base_SetConfig+0x13c>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d00f      	beq.n	80069c4 <TIM_Base_SetConfig+0x110>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a14      	ldr	r2, [pc, #80]	; (80069f8 <TIM_Base_SetConfig+0x144>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d00b      	beq.n	80069c4 <TIM_Base_SetConfig+0x110>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a13      	ldr	r2, [pc, #76]	; (80069fc <TIM_Base_SetConfig+0x148>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d007      	beq.n	80069c4 <TIM_Base_SetConfig+0x110>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a12      	ldr	r2, [pc, #72]	; (8006a00 <TIM_Base_SetConfig+0x14c>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d003      	beq.n	80069c4 <TIM_Base_SetConfig+0x110>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a0d      	ldr	r2, [pc, #52]	; (80069f4 <TIM_Base_SetConfig+0x140>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d103      	bne.n	80069cc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	691a      	ldr	r2, [r3, #16]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	615a      	str	r2, [r3, #20]
}
 80069d2:	bf00      	nop
 80069d4:	3714      	adds	r7, #20
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	40012c00 	.word	0x40012c00
 80069e4:	40000400 	.word	0x40000400
 80069e8:	40000800 	.word	0x40000800
 80069ec:	40000c00 	.word	0x40000c00
 80069f0:	40013400 	.word	0x40013400
 80069f4:	40015000 	.word	0x40015000
 80069f8:	40014000 	.word	0x40014000
 80069fc:	40014400 	.word	0x40014400
 8006a00:	40014800 	.word	0x40014800

08006a04 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b086      	sub	sp, #24
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a20:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	697a      	ldr	r2, [r7, #20]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a32:	f023 0307 	bic.w	r3, r3, #7
 8006a36:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	697a      	ldr	r2, [r7, #20]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	2b70      	cmp	r3, #112	; 0x70
 8006a50:	d034      	beq.n	8006abc <TIM_SlaveTimer_SetConfig+0xb8>
 8006a52:	2b70      	cmp	r3, #112	; 0x70
 8006a54:	d811      	bhi.n	8006a7a <TIM_SlaveTimer_SetConfig+0x76>
 8006a56:	2b30      	cmp	r3, #48	; 0x30
 8006a58:	d07d      	beq.n	8006b56 <TIM_SlaveTimer_SetConfig+0x152>
 8006a5a:	2b30      	cmp	r3, #48	; 0x30
 8006a5c:	d806      	bhi.n	8006a6c <TIM_SlaveTimer_SetConfig+0x68>
 8006a5e:	2b10      	cmp	r3, #16
 8006a60:	d079      	beq.n	8006b56 <TIM_SlaveTimer_SetConfig+0x152>
 8006a62:	2b20      	cmp	r3, #32
 8006a64:	d077      	beq.n	8006b56 <TIM_SlaveTimer_SetConfig+0x152>
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d075      	beq.n	8006b56 <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 8006a6a:	e075      	b.n	8006b58 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8006a6c:	2b50      	cmp	r3, #80	; 0x50
 8006a6e:	d05e      	beq.n	8006b2e <TIM_SlaveTimer_SetConfig+0x12a>
 8006a70:	2b60      	cmp	r3, #96	; 0x60
 8006a72:	d066      	beq.n	8006b42 <TIM_SlaveTimer_SetConfig+0x13e>
 8006a74:	2b40      	cmp	r3, #64	; 0x40
 8006a76:	d02c      	beq.n	8006ad2 <TIM_SlaveTimer_SetConfig+0xce>
      break;
 8006a78:	e06e      	b.n	8006b58 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8006a7a:	4a3a      	ldr	r2, [pc, #232]	; (8006b64 <TIM_SlaveTimer_SetConfig+0x160>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d06a      	beq.n	8006b56 <TIM_SlaveTimer_SetConfig+0x152>
 8006a80:	4a38      	ldr	r2, [pc, #224]	; (8006b64 <TIM_SlaveTimer_SetConfig+0x160>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d809      	bhi.n	8006a9a <TIM_SlaveTimer_SetConfig+0x96>
 8006a86:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006a8a:	d064      	beq.n	8006b56 <TIM_SlaveTimer_SetConfig+0x152>
 8006a8c:	4a36      	ldr	r2, [pc, #216]	; (8006b68 <TIM_SlaveTimer_SetConfig+0x164>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d061      	beq.n	8006b56 <TIM_SlaveTimer_SetConfig+0x152>
 8006a92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a96:	d05e      	beq.n	8006b56 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8006a98:	e05e      	b.n	8006b58 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8006a9a:	4a34      	ldr	r2, [pc, #208]	; (8006b6c <TIM_SlaveTimer_SetConfig+0x168>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d05a      	beq.n	8006b56 <TIM_SlaveTimer_SetConfig+0x152>
 8006aa0:	4a32      	ldr	r2, [pc, #200]	; (8006b6c <TIM_SlaveTimer_SetConfig+0x168>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d803      	bhi.n	8006aae <TIM_SlaveTimer_SetConfig+0xaa>
 8006aa6:	4a32      	ldr	r2, [pc, #200]	; (8006b70 <TIM_SlaveTimer_SetConfig+0x16c>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d054      	beq.n	8006b56 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8006aac:	e054      	b.n	8006b58 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8006aae:	4a31      	ldr	r2, [pc, #196]	; (8006b74 <TIM_SlaveTimer_SetConfig+0x170>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d050      	beq.n	8006b56 <TIM_SlaveTimer_SetConfig+0x152>
 8006ab4:	4a30      	ldr	r2, [pc, #192]	; (8006b78 <TIM_SlaveTimer_SetConfig+0x174>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d04d      	beq.n	8006b56 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8006aba:	e04d      	b.n	8006b58 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6818      	ldr	r0, [r3, #0]
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	68d9      	ldr	r1, [r3, #12]
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	689a      	ldr	r2, [r3, #8]
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	f000 f8d2 	bl	8006c74 <TIM_ETR_SetConfig>
      break;
 8006ad0:	e042      	b.n	8006b58 <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2b05      	cmp	r3, #5
 8006ad8:	d004      	beq.n	8006ae4 <TIM_SlaveTimer_SetConfig+0xe0>
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8006ae2:	d101      	bne.n	8006ae8 <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e038      	b.n	8006b5a <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	6a1b      	ldr	r3, [r3, #32]
 8006aee:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	6a1a      	ldr	r2, [r3, #32]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f022 0201 	bic.w	r2, r2, #1
 8006afe:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b0e:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	011b      	lsls	r3, r3, #4
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	693a      	ldr	r2, [r7, #16]
 8006b2a:	621a      	str	r2, [r3, #32]
      break;
 8006b2c:	e014      	b.n	8006b58 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6818      	ldr	r0, [r3, #0]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	6899      	ldr	r1, [r3, #8]
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	f000 f81e 	bl	8006b7c <TIM_TI1_ConfigInputStage>
      break;
 8006b40:	e00a      	b.n	8006b58 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6818      	ldr	r0, [r3, #0]
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	6899      	ldr	r1, [r3, #8]
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	461a      	mov	r2, r3
 8006b50:	f000 f843 	bl	8006bda <TIM_TI2_ConfigInputStage>
      break;
 8006b54:	e000      	b.n	8006b58 <TIM_SlaveTimer_SetConfig+0x154>
      break;
 8006b56:	bf00      	nop
  }
  return HAL_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3718      	adds	r7, #24
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	00100030 	.word	0x00100030
 8006b68:	00100020 	.word	0x00100020
 8006b6c:	00100050 	.word	0x00100050
 8006b70:	00100040 	.word	0x00100040
 8006b74:	00100060 	.word	0x00100060
 8006b78:	00100070 	.word	0x00100070

08006b7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b087      	sub	sp, #28
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6a1b      	ldr	r3, [r3, #32]
 8006b8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	f023 0201 	bic.w	r2, r3, #1
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	699b      	ldr	r3, [r3, #24]
 8006b9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ba6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	011b      	lsls	r3, r3, #4
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	f023 030a 	bic.w	r3, r3, #10
 8006bb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bba:	697a      	ldr	r2, [r7, #20]
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	693a      	ldr	r2, [r7, #16]
 8006bc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	697a      	ldr	r2, [r7, #20]
 8006bcc:	621a      	str	r2, [r3, #32]
}
 8006bce:	bf00      	nop
 8006bd0:	371c      	adds	r7, #28
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr

08006bda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bda:	b480      	push	{r7}
 8006bdc:	b087      	sub	sp, #28
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	60f8      	str	r0, [r7, #12]
 8006be2:	60b9      	str	r1, [r7, #8]
 8006be4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6a1b      	ldr	r3, [r3, #32]
 8006bea:	f023 0210 	bic.w	r2, r3, #16
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	699b      	ldr	r3, [r3, #24]
 8006bf6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6a1b      	ldr	r3, [r3, #32]
 8006bfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	031b      	lsls	r3, r3, #12
 8006c0a:	697a      	ldr	r2, [r7, #20]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	011b      	lsls	r3, r3, #4
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	697a      	ldr	r2, [r7, #20]
 8006c26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	693a      	ldr	r2, [r7, #16]
 8006c2c:	621a      	str	r2, [r3, #32]
}
 8006c2e:	bf00      	nop
 8006c30:	371c      	adds	r7, #28
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b085      	sub	sp, #20
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
 8006c42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c56:	683a      	ldr	r2, [r7, #0]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	f043 0307 	orr.w	r3, r3, #7
 8006c60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	68fa      	ldr	r2, [r7, #12]
 8006c66:	609a      	str	r2, [r3, #8]
}
 8006c68:	bf00      	nop
 8006c6a:	3714      	adds	r7, #20
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b087      	sub	sp, #28
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	607a      	str	r2, [r7, #4]
 8006c80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	021a      	lsls	r2, r3, #8
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	431a      	orrs	r2, r3
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	697a      	ldr	r2, [r7, #20]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	697a      	ldr	r2, [r7, #20]
 8006ca6:	609a      	str	r2, [r3, #8]
}
 8006ca8:	bf00      	nop
 8006caa:	371c      	adds	r7, #28
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d101      	bne.n	8006ccc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cc8:	2302      	movs	r3, #2
 8006cca:	e074      	b.n	8006db6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a34      	ldr	r2, [pc, #208]	; (8006dc4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d009      	beq.n	8006d0a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a33      	ldr	r2, [pc, #204]	; (8006dc8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d004      	beq.n	8006d0a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a31      	ldr	r2, [pc, #196]	; (8006dcc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d108      	bne.n	8006d1c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006d10:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a21      	ldr	r2, [pc, #132]	; (8006dc4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d022      	beq.n	8006d8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d4c:	d01d      	beq.n	8006d8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a1f      	ldr	r2, [pc, #124]	; (8006dd0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d018      	beq.n	8006d8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a1d      	ldr	r2, [pc, #116]	; (8006dd4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d013      	beq.n	8006d8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a1c      	ldr	r2, [pc, #112]	; (8006dd8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d00e      	beq.n	8006d8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a15      	ldr	r2, [pc, #84]	; (8006dc8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d009      	beq.n	8006d8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a18      	ldr	r2, [pc, #96]	; (8006ddc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d004      	beq.n	8006d8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a11      	ldr	r2, [pc, #68]	; (8006dcc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d10c      	bne.n	8006da4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	68ba      	ldr	r2, [r7, #8]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	68ba      	ldr	r2, [r7, #8]
 8006da2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3714      	adds	r7, #20
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	40012c00 	.word	0x40012c00
 8006dc8:	40013400 	.word	0x40013400
 8006dcc:	40015000 	.word	0x40015000
 8006dd0:	40000400 	.word	0x40000400
 8006dd4:	40000800 	.word	0x40000800
 8006dd8:	40000c00 	.word	0x40000c00
 8006ddc:	40014000 	.word	0x40014000

08006de0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006dea:	2300      	movs	r3, #0
 8006dec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d101      	bne.n	8006dfc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006df8:	2302      	movs	r3, #2
 8006dfa:	e096      	b.n	8006f2a <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e62:	4313      	orrs	r3, r2
 8006e64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	699b      	ldr	r3, [r3, #24]
 8006e70:	041b      	lsls	r3, r3, #16
 8006e72:	4313      	orrs	r3, r2
 8006e74:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a2f      	ldr	r2, [pc, #188]	; (8006f38 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d009      	beq.n	8006e94 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a2d      	ldr	r2, [pc, #180]	; (8006f3c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d004      	beq.n	8006e94 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a2c      	ldr	r2, [pc, #176]	; (8006f40 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d106      	bne.n	8006ea2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	69db      	ldr	r3, [r3, #28]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a24      	ldr	r2, [pc, #144]	; (8006f38 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d009      	beq.n	8006ec0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a22      	ldr	r2, [pc, #136]	; (8006f3c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d004      	beq.n	8006ec0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a21      	ldr	r2, [pc, #132]	; (8006f40 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d12b      	bne.n	8006f18 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eca:	051b      	lsls	r3, r3, #20
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	6a1b      	ldr	r3, [r3, #32]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a11      	ldr	r2, [pc, #68]	; (8006f38 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d009      	beq.n	8006f0a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a10      	ldr	r2, [pc, #64]	; (8006f3c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d004      	beq.n	8006f0a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a0e      	ldr	r2, [pc, #56]	; (8006f40 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d106      	bne.n	8006f18 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f14:	4313      	orrs	r3, r2
 8006f16:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3714      	adds	r7, #20
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop
 8006f38:	40012c00 	.word	0x40012c00
 8006f3c:	40013400 	.word	0x40013400
 8006f40:	40015000 	.word	0x40015000

08006f44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f4c:	bf00      	nop
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f60:	bf00      	nop
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006f74:	bf00      	nop
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006f88:	bf00      	nop
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006f9c:	bf00      	nop
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006fc4:	bf00      	nop
 8006fc6:	370c      	adds	r7, #12
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <LL_EXTI_EnableIT_0_31>:
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8006fd8:	4b05      	ldr	r3, [pc, #20]	; (8006ff0 <LL_EXTI_EnableIT_0_31+0x20>)
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	4904      	ldr	r1, [pc, #16]	; (8006ff0 <LL_EXTI_EnableIT_0_31+0x20>)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	600b      	str	r3, [r1, #0]
}
 8006fe4:	bf00      	nop
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr
 8006ff0:	40010400 	.word	0x40010400

08006ff4 <LL_EXTI_EnableIT_32_63>:
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006ffc:	4b05      	ldr	r3, [pc, #20]	; (8007014 <LL_EXTI_EnableIT_32_63+0x20>)
 8006ffe:	6a1a      	ldr	r2, [r3, #32]
 8007000:	4904      	ldr	r1, [pc, #16]	; (8007014 <LL_EXTI_EnableIT_32_63+0x20>)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4313      	orrs	r3, r2
 8007006:	620b      	str	r3, [r1, #32]
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr
 8007014:	40010400 	.word	0x40010400

08007018 <LL_EXTI_DisableIT_0_31>:
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8007020:	4b06      	ldr	r3, [pc, #24]	; (800703c <LL_EXTI_DisableIT_0_31+0x24>)
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	43db      	mvns	r3, r3
 8007028:	4904      	ldr	r1, [pc, #16]	; (800703c <LL_EXTI_DisableIT_0_31+0x24>)
 800702a:	4013      	ands	r3, r2
 800702c:	600b      	str	r3, [r1, #0]
}
 800702e:	bf00      	nop
 8007030:	370c      	adds	r7, #12
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	40010400 	.word	0x40010400

08007040 <LL_EXTI_DisableIT_32_63>:
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8007048:	4b06      	ldr	r3, [pc, #24]	; (8007064 <LL_EXTI_DisableIT_32_63+0x24>)
 800704a:	6a1a      	ldr	r2, [r3, #32]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	43db      	mvns	r3, r3
 8007050:	4904      	ldr	r1, [pc, #16]	; (8007064 <LL_EXTI_DisableIT_32_63+0x24>)
 8007052:	4013      	ands	r3, r2
 8007054:	620b      	str	r3, [r1, #32]
}
 8007056:	bf00      	nop
 8007058:	370c      	adds	r7, #12
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr
 8007062:	bf00      	nop
 8007064:	40010400 	.word	0x40010400

08007068 <LL_EXTI_EnableEvent_0_31>:
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8007070:	4b05      	ldr	r3, [pc, #20]	; (8007088 <LL_EXTI_EnableEvent_0_31+0x20>)
 8007072:	685a      	ldr	r2, [r3, #4]
 8007074:	4904      	ldr	r1, [pc, #16]	; (8007088 <LL_EXTI_EnableEvent_0_31+0x20>)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4313      	orrs	r3, r2
 800707a:	604b      	str	r3, [r1, #4]
}
 800707c:	bf00      	nop
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr
 8007088:	40010400 	.word	0x40010400

0800708c <LL_EXTI_EnableEvent_32_63>:
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8007094:	4b05      	ldr	r3, [pc, #20]	; (80070ac <LL_EXTI_EnableEvent_32_63+0x20>)
 8007096:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007098:	4904      	ldr	r1, [pc, #16]	; (80070ac <LL_EXTI_EnableEvent_32_63+0x20>)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4313      	orrs	r3, r2
 800709e:	624b      	str	r3, [r1, #36]	; 0x24
}
 80070a0:	bf00      	nop
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr
 80070ac:	40010400 	.word	0x40010400

080070b0 <LL_EXTI_DisableEvent_0_31>:
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80070b8:	4b06      	ldr	r3, [pc, #24]	; (80070d4 <LL_EXTI_DisableEvent_0_31+0x24>)
 80070ba:	685a      	ldr	r2, [r3, #4]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	43db      	mvns	r3, r3
 80070c0:	4904      	ldr	r1, [pc, #16]	; (80070d4 <LL_EXTI_DisableEvent_0_31+0x24>)
 80070c2:	4013      	ands	r3, r2
 80070c4:	604b      	str	r3, [r1, #4]
}
 80070c6:	bf00      	nop
 80070c8:	370c      	adds	r7, #12
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	40010400 	.word	0x40010400

080070d8 <LL_EXTI_DisableEvent_32_63>:
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80070e0:	4b06      	ldr	r3, [pc, #24]	; (80070fc <LL_EXTI_DisableEvent_32_63+0x24>)
 80070e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	43db      	mvns	r3, r3
 80070e8:	4904      	ldr	r1, [pc, #16]	; (80070fc <LL_EXTI_DisableEvent_32_63+0x24>)
 80070ea:	4013      	ands	r3, r2
 80070ec:	624b      	str	r3, [r1, #36]	; 0x24
}
 80070ee:	bf00      	nop
 80070f0:	370c      	adds	r7, #12
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	40010400 	.word	0x40010400

08007100 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8007108:	4b05      	ldr	r3, [pc, #20]	; (8007120 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800710a:	689a      	ldr	r2, [r3, #8]
 800710c:	4904      	ldr	r1, [pc, #16]	; (8007120 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4313      	orrs	r3, r2
 8007112:	608b      	str	r3, [r1, #8]
}
 8007114:	bf00      	nop
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	40010400 	.word	0x40010400

08007124 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800712c:	4b05      	ldr	r3, [pc, #20]	; (8007144 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800712e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007130:	4904      	ldr	r1, [pc, #16]	; (8007144 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4313      	orrs	r3, r2
 8007136:	628b      	str	r3, [r1, #40]	; 0x28
}
 8007138:	bf00      	nop
 800713a:	370c      	adds	r7, #12
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr
 8007144:	40010400 	.word	0x40010400

08007148 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8007150:	4b06      	ldr	r3, [pc, #24]	; (800716c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007152:	689a      	ldr	r2, [r3, #8]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	43db      	mvns	r3, r3
 8007158:	4904      	ldr	r1, [pc, #16]	; (800716c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800715a:	4013      	ands	r3, r2
 800715c:	608b      	str	r3, [r1, #8]
}
 800715e:	bf00      	nop
 8007160:	370c      	adds	r7, #12
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	40010400 	.word	0x40010400

08007170 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8007178:	4b06      	ldr	r3, [pc, #24]	; (8007194 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800717a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	43db      	mvns	r3, r3
 8007180:	4904      	ldr	r1, [pc, #16]	; (8007194 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8007182:	4013      	ands	r3, r2
 8007184:	628b      	str	r3, [r1, #40]	; 0x28
}
 8007186:	bf00      	nop
 8007188:	370c      	adds	r7, #12
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	40010400 	.word	0x40010400

08007198 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80071a0:	4b05      	ldr	r3, [pc, #20]	; (80071b8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80071a2:	68da      	ldr	r2, [r3, #12]
 80071a4:	4904      	ldr	r1, [pc, #16]	; (80071b8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	60cb      	str	r3, [r1, #12]
}
 80071ac:	bf00      	nop
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr
 80071b8:	40010400 	.word	0x40010400

080071bc <LL_EXTI_EnableFallingTrig_32_63>:
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80071c4:	4b05      	ldr	r3, [pc, #20]	; (80071dc <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80071c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071c8:	4904      	ldr	r1, [pc, #16]	; (80071dc <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80071d0:	bf00      	nop
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr
 80071dc:	40010400 	.word	0x40010400

080071e0 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80071e8:	4b06      	ldr	r3, [pc, #24]	; (8007204 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80071ea:	68da      	ldr	r2, [r3, #12]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	43db      	mvns	r3, r3
 80071f0:	4904      	ldr	r1, [pc, #16]	; (8007204 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80071f2:	4013      	ands	r3, r2
 80071f4:	60cb      	str	r3, [r1, #12]
}
 80071f6:	bf00      	nop
 80071f8:	370c      	adds	r7, #12
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop
 8007204:	40010400 	.word	0x40010400

08007208 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8007210:	4b06      	ldr	r3, [pc, #24]	; (800722c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8007212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	43db      	mvns	r3, r3
 8007218:	4904      	ldr	r1, [pc, #16]	; (800722c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800721a:	4013      	ands	r3, r2
 800721c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800721e:	bf00      	nop
 8007220:	370c      	adds	r7, #12
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	40010400 	.word	0x40010400

08007230 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8007238:	2300      	movs	r3, #0
 800723a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	7a1b      	ldrb	r3, [r3, #8]
 8007240:	2b00      	cmp	r3, #0
 8007242:	f000 80c8 	beq.w	80073d6 <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d05d      	beq.n	800730a <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	7a5b      	ldrb	r3, [r3, #9]
 8007252:	2b01      	cmp	r3, #1
 8007254:	d00e      	beq.n	8007274 <LL_EXTI_Init+0x44>
 8007256:	2b02      	cmp	r3, #2
 8007258:	d017      	beq.n	800728a <LL_EXTI_Init+0x5a>
 800725a:	2b00      	cmp	r3, #0
 800725c:	d120      	bne.n	80072a0 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4618      	mov	r0, r3
 8007264:	f7ff ff24 	bl	80070b0 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4618      	mov	r0, r3
 800726e:	f7ff feaf 	bl	8006fd0 <LL_EXTI_EnableIT_0_31>
          break;
 8007272:	e018      	b.n	80072a6 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4618      	mov	r0, r3
 800727a:	f7ff fecd 	bl	8007018 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4618      	mov	r0, r3
 8007284:	f7ff fef0 	bl	8007068 <LL_EXTI_EnableEvent_0_31>
          break;
 8007288:	e00d      	b.n	80072a6 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4618      	mov	r0, r3
 8007290:	f7ff fe9e 	bl	8006fd0 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4618      	mov	r0, r3
 800729a:	f7ff fee5 	bl	8007068 <LL_EXTI_EnableEvent_0_31>
          break;
 800729e:	e002      	b.n	80072a6 <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 80072a0:	2301      	movs	r3, #1
 80072a2:	60fb      	str	r3, [r7, #12]
          break;
 80072a4:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	7a9b      	ldrb	r3, [r3, #10]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d02d      	beq.n	800730a <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	7a9b      	ldrb	r3, [r3, #10]
 80072b2:	2b02      	cmp	r3, #2
 80072b4:	d00e      	beq.n	80072d4 <LL_EXTI_Init+0xa4>
 80072b6:	2b03      	cmp	r3, #3
 80072b8:	d017      	beq.n	80072ea <LL_EXTI_Init+0xba>
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d120      	bne.n	8007300 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7ff ff8c 	bl	80071e0 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4618      	mov	r0, r3
 80072ce:	f7ff ff17 	bl	8007100 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80072d2:	e01b      	b.n	800730c <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4618      	mov	r0, r3
 80072da:	f7ff ff35 	bl	8007148 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4618      	mov	r0, r3
 80072e4:	f7ff ff58 	bl	8007198 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80072e8:	e010      	b.n	800730c <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7ff ff06 	bl	8007100 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7ff ff4d 	bl	8007198 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80072fe:	e005      	b.n	800730c <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f043 0302 	orr.w	r3, r3, #2
 8007306:	60fb      	str	r3, [r7, #12]
            break;
 8007308:	e000      	b.n	800730c <LL_EXTI_Init+0xdc>
        }
      }
 800730a:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d075      	beq.n	8007400 <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	7a5b      	ldrb	r3, [r3, #9]
 8007318:	2b01      	cmp	r3, #1
 800731a:	d00e      	beq.n	800733a <LL_EXTI_Init+0x10a>
 800731c:	2b02      	cmp	r3, #2
 800731e:	d017      	beq.n	8007350 <LL_EXTI_Init+0x120>
 8007320:	2b00      	cmp	r3, #0
 8007322:	d120      	bne.n	8007366 <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	4618      	mov	r0, r3
 800732a:	f7ff fed5 	bl	80070d8 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	4618      	mov	r0, r3
 8007334:	f7ff fe5e 	bl	8006ff4 <LL_EXTI_EnableIT_32_63>
          break;
 8007338:	e01a      	b.n	8007370 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	4618      	mov	r0, r3
 8007340:	f7ff fe7e 	bl	8007040 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	4618      	mov	r0, r3
 800734a:	f7ff fe9f 	bl	800708c <LL_EXTI_EnableEvent_32_63>
          break;
 800734e:	e00f      	b.n	8007370 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	4618      	mov	r0, r3
 8007356:	f7ff fe4d 	bl	8006ff4 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	4618      	mov	r0, r3
 8007360:	f7ff fe94 	bl	800708c <LL_EXTI_EnableEvent_32_63>
          break;
 8007364:	e004      	b.n	8007370 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f043 0304 	orr.w	r3, r3, #4
 800736c:	60fb      	str	r3, [r7, #12]
          break;
 800736e:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	7a9b      	ldrb	r3, [r3, #10]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d043      	beq.n	8007400 <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	7a9b      	ldrb	r3, [r3, #10]
 800737c:	2b02      	cmp	r3, #2
 800737e:	d00e      	beq.n	800739e <LL_EXTI_Init+0x16e>
 8007380:	2b03      	cmp	r3, #3
 8007382:	d017      	beq.n	80073b4 <LL_EXTI_Init+0x184>
 8007384:	2b01      	cmp	r3, #1
 8007386:	d120      	bne.n	80073ca <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	4618      	mov	r0, r3
 800738e:	f7ff ff3b 	bl	8007208 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	4618      	mov	r0, r3
 8007398:	f7ff fec4 	bl	8007124 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800739c:	e031      	b.n	8007402 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	4618      	mov	r0, r3
 80073a4:	f7ff fee4 	bl	8007170 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	4618      	mov	r0, r3
 80073ae:	f7ff ff05 	bl	80071bc <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80073b2:	e026      	b.n	8007402 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7ff feb3 	bl	8007124 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7ff fefa 	bl	80071bc <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80073c8:	e01b      	b.n	8007402 <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f043 0305 	orr.w	r3, r3, #5
 80073d0:	60fb      	str	r3, [r7, #12]
            break;
 80073d2:	bf00      	nop
 80073d4:	e015      	b.n	8007402 <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4618      	mov	r0, r3
 80073dc:	f7ff fe1c 	bl	8007018 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7ff fe63 	bl	80070b0 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7ff fe26 	bl	8007040 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	4618      	mov	r0, r3
 80073fa:	f7ff fe6d 	bl	80070d8 <LL_EXTI_DisableEvent_32_63>
 80073fe:	e000      	b.n	8007402 <LL_EXTI_Init+0x1d2>
      }
 8007400:	bf00      	nop
  }

  return status;
 8007402:	68fb      	ldr	r3, [r7, #12]
}
 8007404:	4618      	mov	r0, r3
 8007406:	3710      	adds	r7, #16
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <LL_GPIO_SetPinMode>:
{
 800740c:	b480      	push	{r7}
 800740e:	b089      	sub	sp, #36	; 0x24
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	fa93 f3a3 	rbit	r3, r3
 8007426:	613b      	str	r3, [r7, #16]
  return result;
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	fab3 f383 	clz	r3, r3
 800742e:	b2db      	uxtb	r3, r3
 8007430:	005b      	lsls	r3, r3, #1
 8007432:	2103      	movs	r1, #3
 8007434:	fa01 f303 	lsl.w	r3, r1, r3
 8007438:	43db      	mvns	r3, r3
 800743a:	401a      	ands	r2, r3
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	fa93 f3a3 	rbit	r3, r3
 8007446:	61bb      	str	r3, [r7, #24]
  return result;
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	fab3 f383 	clz	r3, r3
 800744e:	b2db      	uxtb	r3, r3
 8007450:	005b      	lsls	r3, r3, #1
 8007452:	6879      	ldr	r1, [r7, #4]
 8007454:	fa01 f303 	lsl.w	r3, r1, r3
 8007458:	431a      	orrs	r2, r3
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	601a      	str	r2, [r3, #0]
}
 800745e:	bf00      	nop
 8007460:	3724      	adds	r7, #36	; 0x24
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr

0800746a <LL_GPIO_SetPinOutputType>:
{
 800746a:	b480      	push	{r7}
 800746c:	b085      	sub	sp, #20
 800746e:	af00      	add	r7, sp, #0
 8007470:	60f8      	str	r0, [r7, #12]
 8007472:	60b9      	str	r1, [r7, #8]
 8007474:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	685a      	ldr	r2, [r3, #4]
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	43db      	mvns	r3, r3
 800747e:	401a      	ands	r2, r3
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	6879      	ldr	r1, [r7, #4]
 8007484:	fb01 f303 	mul.w	r3, r1, r3
 8007488:	431a      	orrs	r2, r3
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	605a      	str	r2, [r3, #4]
}
 800748e:	bf00      	nop
 8007490:	3714      	adds	r7, #20
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr

0800749a <LL_GPIO_SetPinSpeed>:
{
 800749a:	b480      	push	{r7}
 800749c:	b089      	sub	sp, #36	; 0x24
 800749e:	af00      	add	r7, sp, #0
 80074a0:	60f8      	str	r0, [r7, #12]
 80074a2:	60b9      	str	r1, [r7, #8]
 80074a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	689a      	ldr	r2, [r3, #8]
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	fa93 f3a3 	rbit	r3, r3
 80074b4:	613b      	str	r3, [r7, #16]
  return result;
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	fab3 f383 	clz	r3, r3
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	005b      	lsls	r3, r3, #1
 80074c0:	2103      	movs	r1, #3
 80074c2:	fa01 f303 	lsl.w	r3, r1, r3
 80074c6:	43db      	mvns	r3, r3
 80074c8:	401a      	ands	r2, r3
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	fa93 f3a3 	rbit	r3, r3
 80074d4:	61bb      	str	r3, [r7, #24]
  return result;
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	fab3 f383 	clz	r3, r3
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	005b      	lsls	r3, r3, #1
 80074e0:	6879      	ldr	r1, [r7, #4]
 80074e2:	fa01 f303 	lsl.w	r3, r1, r3
 80074e6:	431a      	orrs	r2, r3
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	609a      	str	r2, [r3, #8]
}
 80074ec:	bf00      	nop
 80074ee:	3724      	adds	r7, #36	; 0x24
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <LL_GPIO_SetPinPull>:
{
 80074f8:	b480      	push	{r7}
 80074fa:	b089      	sub	sp, #36	; 0x24
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	68da      	ldr	r2, [r3, #12]
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	fa93 f3a3 	rbit	r3, r3
 8007512:	613b      	str	r3, [r7, #16]
  return result;
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	fab3 f383 	clz	r3, r3
 800751a:	b2db      	uxtb	r3, r3
 800751c:	005b      	lsls	r3, r3, #1
 800751e:	2103      	movs	r1, #3
 8007520:	fa01 f303 	lsl.w	r3, r1, r3
 8007524:	43db      	mvns	r3, r3
 8007526:	401a      	ands	r2, r3
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	fa93 f3a3 	rbit	r3, r3
 8007532:	61bb      	str	r3, [r7, #24]
  return result;
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	fab3 f383 	clz	r3, r3
 800753a:	b2db      	uxtb	r3, r3
 800753c:	005b      	lsls	r3, r3, #1
 800753e:	6879      	ldr	r1, [r7, #4]
 8007540:	fa01 f303 	lsl.w	r3, r1, r3
 8007544:	431a      	orrs	r2, r3
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	60da      	str	r2, [r3, #12]
}
 800754a:	bf00      	nop
 800754c:	3724      	adds	r7, #36	; 0x24
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr

08007556 <LL_GPIO_SetAFPin_0_7>:
{
 8007556:	b480      	push	{r7}
 8007558:	b089      	sub	sp, #36	; 0x24
 800755a:	af00      	add	r7, sp, #0
 800755c:	60f8      	str	r0, [r7, #12]
 800755e:	60b9      	str	r1, [r7, #8]
 8007560:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6a1a      	ldr	r2, [r3, #32]
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	fa93 f3a3 	rbit	r3, r3
 8007570:	613b      	str	r3, [r7, #16]
  return result;
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	fab3 f383 	clz	r3, r3
 8007578:	b2db      	uxtb	r3, r3
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	210f      	movs	r1, #15
 800757e:	fa01 f303 	lsl.w	r3, r1, r3
 8007582:	43db      	mvns	r3, r3
 8007584:	401a      	ands	r2, r3
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	fa93 f3a3 	rbit	r3, r3
 8007590:	61bb      	str	r3, [r7, #24]
  return result;
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	fab3 f383 	clz	r3, r3
 8007598:	b2db      	uxtb	r3, r3
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	6879      	ldr	r1, [r7, #4]
 800759e:	fa01 f303 	lsl.w	r3, r1, r3
 80075a2:	431a      	orrs	r2, r3
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	621a      	str	r2, [r3, #32]
}
 80075a8:	bf00      	nop
 80075aa:	3724      	adds	r7, #36	; 0x24
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <LL_GPIO_SetAFPin_8_15>:
{
 80075b4:	b480      	push	{r7}
 80075b6:	b089      	sub	sp, #36	; 0x24
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	0a1b      	lsrs	r3, r3, #8
 80075c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	fa93 f3a3 	rbit	r3, r3
 80075d0:	613b      	str	r3, [r7, #16]
  return result;
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	fab3 f383 	clz	r3, r3
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	210f      	movs	r1, #15
 80075de:	fa01 f303 	lsl.w	r3, r1, r3
 80075e2:	43db      	mvns	r3, r3
 80075e4:	401a      	ands	r2, r3
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	0a1b      	lsrs	r3, r3, #8
 80075ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	fa93 f3a3 	rbit	r3, r3
 80075f2:	61bb      	str	r3, [r7, #24]
  return result;
 80075f4:	69bb      	ldr	r3, [r7, #24]
 80075f6:	fab3 f383 	clz	r3, r3
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	6879      	ldr	r1, [r7, #4]
 8007600:	fa01 f303 	lsl.w	r3, r1, r3
 8007604:	431a      	orrs	r2, r3
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	625a      	str	r2, [r3, #36]	; 0x24
}
 800760a:	bf00      	nop
 800760c:	3724      	adds	r7, #36	; 0x24
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr

08007616 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8007616:	b580      	push	{r7, lr}
 8007618:	b086      	sub	sp, #24
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
 800761e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	fa93 f3a3 	rbit	r3, r3
 800762c:	60bb      	str	r3, [r7, #8]
  return result;
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	fab3 f383 	clz	r3, r3
 8007634:	b2db      	uxtb	r3, r3
 8007636:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007638:	e040      	b.n	80076bc <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	2101      	movs	r1, #1
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	fa01 f303 	lsl.w	r3, r1, r3
 8007646:	4013      	ands	r3, r2
 8007648:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d032      	beq.n	80076b6 <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	461a      	mov	r2, r3
 8007656:	6939      	ldr	r1, [r7, #16]
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f7ff fed7 	bl	800740c <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	2b01      	cmp	r3, #1
 8007664:	d003      	beq.n	800766e <LL_GPIO_Init+0x58>
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	2b02      	cmp	r3, #2
 800766c:	d106      	bne.n	800767c <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	461a      	mov	r2, r3
 8007674:	6939      	ldr	r1, [r7, #16]
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f7ff ff0f 	bl	800749a <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	691b      	ldr	r3, [r3, #16]
 8007680:	461a      	mov	r2, r3
 8007682:	6939      	ldr	r1, [r7, #16]
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f7ff ff37 	bl	80074f8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	2b02      	cmp	r3, #2
 8007690:	d111      	bne.n	80076b6 <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	2bff      	cmp	r3, #255	; 0xff
 8007696:	d807      	bhi.n	80076a8 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	695b      	ldr	r3, [r3, #20]
 800769c:	461a      	mov	r2, r3
 800769e:	6939      	ldr	r1, [r7, #16]
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f7ff ff58 	bl	8007556 <LL_GPIO_SetAFPin_0_7>
 80076a6:	e006      	b.n	80076b6 <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	695b      	ldr	r3, [r3, #20]
 80076ac:	461a      	mov	r2, r3
 80076ae:	6939      	ldr	r1, [r7, #16]
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f7ff ff7f 	bl	80075b4 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	3301      	adds	r3, #1
 80076ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	fa22 f303 	lsr.w	r3, r2, r3
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d1b7      	bne.n	800763a <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d003      	beq.n	80076da <LL_GPIO_Init+0xc4>
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	2b02      	cmp	r3, #2
 80076d8:	d107      	bne.n	80076ea <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	6819      	ldr	r1, [r3, #0]
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	461a      	mov	r2, r3
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f7ff fec0 	bl	800746a <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80076ea:	2300      	movs	r3, #0
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3718      	adds	r7, #24
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 */

void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint8_t border_colour)
{
 80076f4:	b590      	push	{r4, r7, lr}
 80076f6:	b087      	sub	sp, #28
 80076f8:	af02      	add	r7, sp, #8
 80076fa:	4604      	mov	r4, r0
 80076fc:	4608      	mov	r0, r1
 80076fe:	4611      	mov	r1, r2
 8007700:	461a      	mov	r2, r3
 8007702:	4623      	mov	r3, r4
 8007704:	80fb      	strh	r3, [r7, #6]
 8007706:	4603      	mov	r3, r0
 8007708:	80bb      	strh	r3, [r7, #4]
 800770a:	460b      	mov	r3, r1
 800770c:	807b      	strh	r3, [r7, #2]
 800770e:	4613      	mov	r3, r2
 8007710:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 8007712:	2300      	movs	r3, #0
 8007714:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 8007716:	7bfa      	ldrb	r2, [r7, #15]
 8007718:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800771c:	429a      	cmp	r2, r3
 800771e:	d93a      	bls.n	8007796 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa2>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 8007720:	88ba      	ldrh	r2, [r7, #4]
 8007722:	7bfb      	ldrb	r3, [r7, #15]
 8007724:	441a      	add	r2, r3
 8007726:	88b9      	ldrh	r1, [r7, #4]
 8007728:	883b      	ldrh	r3, [r7, #0]
 800772a:	4419      	add	r1, r3
 800772c:	7bfb      	ldrb	r3, [r7, #15]
 800772e:	1acb      	subs	r3, r1, r3
 8007730:	429a      	cmp	r2, r3
 8007732:	f000 8090 	beq.w	8007856 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
 8007736:	88fa      	ldrh	r2, [r7, #6]
 8007738:	7bfb      	ldrb	r3, [r7, #15]
 800773a:	441a      	add	r2, r3
 800773c:	88f9      	ldrh	r1, [r7, #6]
 800773e:	887b      	ldrh	r3, [r7, #2]
 8007740:	4419      	add	r1, r3
 8007742:	7bfb      	ldrb	r3, [r7, #15]
 8007744:	1acb      	subs	r3, r1, r3
 8007746:	429a      	cmp	r2, r3
 8007748:	f000 8085 	beq.w	8007856 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 800774c:	7bfb      	ldrb	r3, [r7, #15]
 800774e:	b29a      	uxth	r2, r3
 8007750:	88fb      	ldrh	r3, [r7, #6]
 8007752:	4413      	add	r3, r2
 8007754:	b298      	uxth	r0, r3
 8007756:	7bfb      	ldrb	r3, [r7, #15]
 8007758:	b29a      	uxth	r2, r3
 800775a:	88bb      	ldrh	r3, [r7, #4]
 800775c:	4413      	add	r3, r2
 800775e:	b299      	uxth	r1, r3
 8007760:	7bfb      	ldrb	r3, [r7, #15]
 8007762:	b29b      	uxth	r3, r3
 8007764:	005b      	lsls	r3, r3, #1
 8007766:	b29b      	uxth	r3, r3
 8007768:	887a      	ldrh	r2, [r7, #2]
 800776a:	1ad3      	subs	r3, r2, r3
 800776c:	b29b      	uxth	r3, r3
 800776e:	3301      	adds	r3, #1
 8007770:	b29c      	uxth	r4, r3
 8007772:	7bfb      	ldrb	r3, [r7, #15]
 8007774:	b29b      	uxth	r3, r3
 8007776:	005b      	lsls	r3, r3, #1
 8007778:	b29b      	uxth	r3, r3
 800777a:	883a      	ldrh	r2, [r7, #0]
 800777c:	1ad3      	subs	r3, r2, r3
 800777e:	b29b      	uxth	r3, r3
 8007780:	3301      	adds	r3, #1
 8007782:	b29a      	uxth	r2, r3
 8007784:	2304      	movs	r3, #4
 8007786:	9301      	str	r3, [sp, #4]
 8007788:	8c3b      	ldrh	r3, [r7, #32]
 800778a:	9300      	str	r3, [sp, #0]
 800778c:	4613      	mov	r3, r2
 800778e:	4622      	mov	r2, r4
 8007790:	f000 fd32 	bl	80081f8 <ILI9341_Draw_Rectangle>
				goto finish;
 8007794:	e060      	b.n	8007858 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x164>
			}
		}

		// Horizontal lines
		ILI9341_Draw_Horizontal_Line(	x + b,
 8007796:	7bfb      	ldrb	r3, [r7, #15]
 8007798:	b29a      	uxth	r2, r3
 800779a:	88fb      	ldrh	r3, [r7, #6]
 800779c:	4413      	add	r3, r2
 800779e:	b298      	uxth	r0, r3
 80077a0:	7bfb      	ldrb	r3, [r7, #15]
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	88bb      	ldrh	r3, [r7, #4]
 80077a6:	4413      	add	r3, r2
 80077a8:	b299      	uxth	r1, r3
 80077aa:	7bfb      	ldrb	r3, [r7, #15]
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	005b      	lsls	r3, r3, #1
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	887a      	ldrh	r2, [r7, #2]
 80077b4:	1ad3      	subs	r3, r2, r3
 80077b6:	b29a      	uxth	r2, r3
 80077b8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80077bc:	b29b      	uxth	r3, r3
 80077be:	f000 fda1 	bl	8008304 <ILI9341_Draw_Horizontal_Line>
										y + b,
										w - (2*b),
										border_colour);

		ILI9341_Draw_Horizontal_Line(	x + b,
 80077c2:	7bfb      	ldrb	r3, [r7, #15]
 80077c4:	b29a      	uxth	r2, r3
 80077c6:	88fb      	ldrh	r3, [r7, #6]
 80077c8:	4413      	add	r3, r2
 80077ca:	b298      	uxth	r0, r3
										(y + h) - b,
 80077cc:	88ba      	ldrh	r2, [r7, #4]
 80077ce:	883b      	ldrh	r3, [r7, #0]
 80077d0:	4413      	add	r3, r2
 80077d2:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 80077d4:	7bfb      	ldrb	r3, [r7, #15]
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	1ad3      	subs	r3, r2, r3
 80077da:	b299      	uxth	r1, r3
 80077dc:	7bfb      	ldrb	r3, [r7, #15]
 80077de:	b29b      	uxth	r3, r3
 80077e0:	887a      	ldrh	r2, [r7, #2]
 80077e2:	1ad3      	subs	r3, r2, r3
 80077e4:	b29a      	uxth	r2, r3
 80077e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	f000 fd8a 	bl	8008304 <ILI9341_Draw_Horizontal_Line>
										w - (b),
										border_colour);


		// Vertical lines
		ILI9341_Draw_Vertical_Line(		x + b,
 80077f0:	7bfb      	ldrb	r3, [r7, #15]
 80077f2:	b29a      	uxth	r2, r3
 80077f4:	88fb      	ldrh	r3, [r7, #6]
 80077f6:	4413      	add	r3, r2
 80077f8:	b298      	uxth	r0, r3
 80077fa:	7bfb      	ldrb	r3, [r7, #15]
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	88bb      	ldrh	r3, [r7, #4]
 8007800:	4413      	add	r3, r2
 8007802:	b299      	uxth	r1, r3
 8007804:	7bfb      	ldrb	r3, [r7, #15]
 8007806:	b29b      	uxth	r3, r3
 8007808:	005b      	lsls	r3, r3, #1
 800780a:	b29b      	uxth	r3, r3
 800780c:	883a      	ldrh	r2, [r7, #0]
 800780e:	1ad3      	subs	r3, r2, r3
 8007810:	b29a      	uxth	r2, r3
 8007812:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007816:	b29b      	uxth	r3, r3
 8007818:	f000 fdbc 	bl	8008394 <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);

		ILI9341_Draw_Vertical_Line(		(x + w) - b,
 800781c:	88fa      	ldrh	r2, [r7, #6]
 800781e:	887b      	ldrh	r3, [r7, #2]
 8007820:	4413      	add	r3, r2
 8007822:	b29a      	uxth	r2, r3
 8007824:	7bfb      	ldrb	r3, [r7, #15]
 8007826:	b29b      	uxth	r3, r3
 8007828:	1ad3      	subs	r3, r2, r3
 800782a:	b298      	uxth	r0, r3
 800782c:	7bfb      	ldrb	r3, [r7, #15]
 800782e:	b29a      	uxth	r2, r3
 8007830:	88bb      	ldrh	r3, [r7, #4]
 8007832:	4413      	add	r3, r2
 8007834:	b299      	uxth	r1, r3
 8007836:	7bfb      	ldrb	r3, [r7, #15]
 8007838:	b29b      	uxth	r3, r3
 800783a:	005b      	lsls	r3, r3, #1
 800783c:	b29b      	uxth	r3, r3
 800783e:	883a      	ldrh	r2, [r7, #0]
 8007840:	1ad3      	subs	r3, r2, r3
 8007842:	b29a      	uxth	r2, r3
 8007844:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007848:	b29b      	uxth	r3, r3
 800784a:	f000 fda3 	bl	8008394 <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 800784e:	7bfb      	ldrb	r3, [r7, #15]
 8007850:	3301      	adds	r3, #1
 8007852:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 8007854:	e75f      	b.n	8007716 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 8007856:	bf00      	nop
	// done
	return;
 8007858:	bf00      	nop
}
 800785a:	3714      	adds	r7, #20
 800785c:	46bd      	mov	sp, r7
 800785e:	bd90      	pop	{r4, r7, pc}

08007860 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8007860:	b590      	push	{r4, r7, lr}
 8007862:	b089      	sub	sp, #36	; 0x24
 8007864:	af02      	add	r7, sp, #8
 8007866:	4604      	mov	r4, r0
 8007868:	4608      	mov	r0, r1
 800786a:	4611      	mov	r1, r2
 800786c:	461a      	mov	r2, r3
 800786e:	4623      	mov	r3, r4
 8007870:	71fb      	strb	r3, [r7, #7]
 8007872:	4603      	mov	r3, r0
 8007874:	80bb      	strh	r3, [r7, #4]
 8007876:	460b      	mov	r3, r1
 8007878:	807b      	strh	r3, [r7, #2]
 800787a:	4613      	mov	r3, r2
 800787c:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 800787e:	79fb      	ldrb	r3, [r7, #7]
 8007880:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 8007882:	7dfb      	ldrb	r3, [r7, #23]
 8007884:	2b1f      	cmp	r3, #31
 8007886:	d802      	bhi.n	800788e <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 8007888:	2300      	movs	r3, #0
 800788a:	71fb      	strb	r3, [r7, #7]
 800788c:	e002      	b.n	8007894 <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 800788e:	7dfb      	ldrb	r3, [r7, #23]
 8007890:	3b20      	subs	r3, #32
 8007892:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8007894:	2300      	movs	r3, #0
 8007896:	753b      	strb	r3, [r7, #20]
 8007898:	e012      	b.n	80078c0 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 800789a:	7dfa      	ldrb	r2, [r7, #23]
 800789c:	7d38      	ldrb	r0, [r7, #20]
 800789e:	7d39      	ldrb	r1, [r7, #20]
 80078a0:	4c48      	ldr	r4, [pc, #288]	; (80079c4 <ILI9341_Draw_Char+0x164>)
 80078a2:	4613      	mov	r3, r2
 80078a4:	005b      	lsls	r3, r3, #1
 80078a6:	4413      	add	r3, r2
 80078a8:	005b      	lsls	r3, r3, #1
 80078aa:	4423      	add	r3, r4
 80078ac:	4403      	add	r3, r0
 80078ae:	781a      	ldrb	r2, [r3, #0]
 80078b0:	f107 0318 	add.w	r3, r7, #24
 80078b4:	440b      	add	r3, r1
 80078b6:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80078ba:	7d3b      	ldrb	r3, [r7, #20]
 80078bc:	3301      	adds	r3, #1
 80078be:	753b      	strb	r3, [r7, #20]
 80078c0:	7d3b      	ldrb	r3, [r7, #20]
 80078c2:	2b05      	cmp	r3, #5
 80078c4:	d9e9      	bls.n	800789a <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 80078c6:	2300      	movs	r3, #0
 80078c8:	757b      	strb	r3, [r7, #21]
 80078ca:	e074      	b.n	80079b6 <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 80078cc:	2300      	movs	r3, #0
 80078ce:	75bb      	strb	r3, [r7, #22]
 80078d0:	e06b      	b.n	80079aa <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 80078d2:	7d7b      	ldrb	r3, [r7, #21]
 80078d4:	f107 0218 	add.w	r2, r7, #24
 80078d8:	4413      	add	r3, r2
 80078da:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80078de:	461a      	mov	r2, r3
 80078e0:	7dbb      	ldrb	r3, [r7, #22]
 80078e2:	fa42 f303 	asr.w	r3, r2, r3
 80078e6:	f003 0301 	and.w	r3, r3, #1
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d02d      	beq.n	800794a <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 80078ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d10e      	bne.n	8007912 <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 80078f4:	7d7b      	ldrb	r3, [r7, #21]
 80078f6:	b29a      	uxth	r2, r3
 80078f8:	88bb      	ldrh	r3, [r7, #4]
 80078fa:	4413      	add	r3, r2
 80078fc:	b298      	uxth	r0, r3
 80078fe:	7dbb      	ldrb	r3, [r7, #22]
 8007900:	b29a      	uxth	r2, r3
 8007902:	887b      	ldrh	r3, [r7, #2]
 8007904:	4413      	add	r3, r2
 8007906:	b29b      	uxth	r3, r3
 8007908:	883a      	ldrh	r2, [r7, #0]
 800790a:	4619      	mov	r1, r3
 800790c:	f000 fb9a 	bl	8008044 <ILI9341_Draw_Pixel>
 8007910:	e048      	b.n	80079a4 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 8007912:	7d7b      	ldrb	r3, [r7, #21]
 8007914:	b29b      	uxth	r3, r3
 8007916:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007918:	fb12 f303 	smulbb	r3, r2, r3
 800791c:	b29a      	uxth	r2, r3
 800791e:	88bb      	ldrh	r3, [r7, #4]
 8007920:	4413      	add	r3, r2
 8007922:	b298      	uxth	r0, r3
 8007924:	7dbb      	ldrb	r3, [r7, #22]
 8007926:	b29b      	uxth	r3, r3
 8007928:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800792a:	fb12 f303 	smulbb	r3, r2, r3
 800792e:	b29a      	uxth	r2, r3
 8007930:	887b      	ldrh	r3, [r7, #2]
 8007932:	4413      	add	r3, r2
 8007934:	b299      	uxth	r1, r3
 8007936:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8007938:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800793a:	2301      	movs	r3, #1
 800793c:	9301      	str	r3, [sp, #4]
 800793e:	883b      	ldrh	r3, [r7, #0]
 8007940:	9300      	str	r3, [sp, #0]
 8007942:	4623      	mov	r3, r4
 8007944:	f000 fc58 	bl	80081f8 <ILI9341_Draw_Rectangle>
 8007948:	e02c      	b.n	80079a4 <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 800794a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800794c:	2b01      	cmp	r3, #1
 800794e:	d10e      	bne.n	800796e <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 8007950:	7d7b      	ldrb	r3, [r7, #21]
 8007952:	b29a      	uxth	r2, r3
 8007954:	88bb      	ldrh	r3, [r7, #4]
 8007956:	4413      	add	r3, r2
 8007958:	b298      	uxth	r0, r3
 800795a:	7dbb      	ldrb	r3, [r7, #22]
 800795c:	b29a      	uxth	r2, r3
 800795e:	887b      	ldrh	r3, [r7, #2]
 8007960:	4413      	add	r3, r2
 8007962:	b29b      	uxth	r3, r3
 8007964:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8007966:	4619      	mov	r1, r3
 8007968:	f000 fb6c 	bl	8008044 <ILI9341_Draw_Pixel>
 800796c:	e01a      	b.n	80079a4 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 800796e:	7d7b      	ldrb	r3, [r7, #21]
 8007970:	b29b      	uxth	r3, r3
 8007972:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007974:	fb12 f303 	smulbb	r3, r2, r3
 8007978:	b29a      	uxth	r2, r3
 800797a:	88bb      	ldrh	r3, [r7, #4]
 800797c:	4413      	add	r3, r2
 800797e:	b298      	uxth	r0, r3
 8007980:	7dbb      	ldrb	r3, [r7, #22]
 8007982:	b29b      	uxth	r3, r3
 8007984:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007986:	fb12 f303 	smulbb	r3, r2, r3
 800798a:	b29a      	uxth	r2, r3
 800798c:	887b      	ldrh	r3, [r7, #2]
 800798e:	4413      	add	r3, r2
 8007990:	b299      	uxth	r1, r3
 8007992:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8007994:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007996:	2301      	movs	r3, #1
 8007998:	9301      	str	r3, [sp, #4]
 800799a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800799c:	9300      	str	r3, [sp, #0]
 800799e:	4623      	mov	r3, r4
 80079a0:	f000 fc2a 	bl	80081f8 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 80079a4:	7dbb      	ldrb	r3, [r7, #22]
 80079a6:	3301      	adds	r3, #1
 80079a8:	75bb      	strb	r3, [r7, #22]
 80079aa:	7dbb      	ldrb	r3, [r7, #22]
 80079ac:	2b07      	cmp	r3, #7
 80079ae:	d990      	bls.n	80078d2 <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 80079b0:	7d7b      	ldrb	r3, [r7, #21]
 80079b2:	3301      	adds	r3, #1
 80079b4:	757b      	strb	r3, [r7, #21]
 80079b6:	7d7b      	ldrb	r3, [r7, #21]
 80079b8:	2b05      	cmp	r3, #5
 80079ba:	d987      	bls.n	80078cc <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 80079bc:	bf00      	nop
 80079be:	371c      	adds	r7, #28
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd90      	pop	{r4, r7, pc}
 80079c4:	08009488 	.word	0x08009488

080079c8 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 80079c8:	b590      	push	{r4, r7, lr}
 80079ca:	b087      	sub	sp, #28
 80079cc:	af02      	add	r7, sp, #8
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	4608      	mov	r0, r1
 80079d2:	4611      	mov	r1, r2
 80079d4:	461a      	mov	r2, r3
 80079d6:	4603      	mov	r3, r0
 80079d8:	817b      	strh	r3, [r7, #10]
 80079da:	460b      	mov	r3, r1
 80079dc:	813b      	strh	r3, [r7, #8]
 80079de:	4613      	mov	r3, r2
 80079e0:	80fb      	strh	r3, [r7, #6]
    /*if(size & 1)
    {
    	size = ((size >> 1) * 2);
    }*/

    while (*Text) {
 80079e2:	e016      	b.n	8007a12 <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	1c5a      	adds	r2, r3, #1
 80079e8:	60fa      	str	r2, [r7, #12]
 80079ea:	7818      	ldrb	r0, [r3, #0]
 80079ec:	88fc      	ldrh	r4, [r7, #6]
 80079ee:	893a      	ldrh	r2, [r7, #8]
 80079f0:	8979      	ldrh	r1, [r7, #10]
 80079f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079f4:	9301      	str	r3, [sp, #4]
 80079f6:	8c3b      	ldrh	r3, [r7, #32]
 80079f8:	9300      	str	r3, [sp, #0]
 80079fa:	4623      	mov	r3, r4
 80079fc:	f7ff ff30 	bl	8007860 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 8007a00:	8c3b      	ldrh	r3, [r7, #32]
 8007a02:	461a      	mov	r2, r3
 8007a04:	0052      	lsls	r2, r2, #1
 8007a06:	4413      	add	r3, r2
 8007a08:	005b      	lsls	r3, r3, #1
 8007a0a:	b29a      	uxth	r2, r3
 8007a0c:	897b      	ldrh	r3, [r7, #10]
 8007a0e:	4413      	add	r3, r2
 8007a10:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d1e4      	bne.n	80079e4 <ILI9341_Draw_Text+0x1c>
    }


}
 8007a1a:	bf00      	nop
 8007a1c:	3714      	adds	r7, #20
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd90      	pop	{r4, r7, pc}
	...

08007a24 <ILI9341_SPI_Init>:



/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8007a24:	b480      	push	{r7}
 8007a26:	af00      	add	r7, sp, #0

	//GPIO INIT
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007a28:	4b05      	ldr	r3, [pc, #20]	; (8007a40 <ILI9341_SPI_Init+0x1c>)
 8007a2a:	695b      	ldr	r3, [r3, #20]
 8007a2c:	4a04      	ldr	r2, [pc, #16]	; (8007a40 <ILI9341_SPI_Init+0x1c>)
 8007a2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a32:	6153      	str	r3, [r2, #20]
}
 8007a34:	bf00      	nop
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr
 8007a3e:	bf00      	nop
 8007a40:	48000400 	.word	0x48000400

08007a44 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef res;

		if( ((res = HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1)) != HAL_OK) )
 8007a4e:	1df9      	adds	r1, r7, #7
 8007a50:	2301      	movs	r3, #1
 8007a52:	2201      	movs	r2, #1
 8007a54:	4804      	ldr	r0, [pc, #16]	; (8007a68 <ILI9341_SPI_Send+0x24>)
 8007a56:	f7fe f865 	bl	8005b24 <HAL_SPI_Transmit>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	73fb      	strb	r3, [r7, #15]
		{
			//printf("HAL_SPI_Transmit Error #%u, ", res);
		}


}
 8007a5e:	bf00      	nop
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop
 8007a68:	2000065c 	.word	0x2000065c

08007a6c <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	4603      	mov	r3, r0
 8007a74:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007a76:	4b0d      	ldr	r3, [pc, #52]	; (8007aac <ILI9341_Write_Command+0x40>)
 8007a78:	695b      	ldr	r3, [r3, #20]
 8007a7a:	4a0c      	ldr	r2, [pc, #48]	; (8007aac <ILI9341_Write_Command+0x40>)
 8007a7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a80:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8007a82:	4b0a      	ldr	r3, [pc, #40]	; (8007aac <ILI9341_Write_Command+0x40>)
 8007a84:	695b      	ldr	r3, [r3, #20]
 8007a86:	4a09      	ldr	r2, [pc, #36]	; (8007aac <ILI9341_Write_Command+0x40>)
 8007a88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a8c:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(Command);
 8007a8e:	79fb      	ldrb	r3, [r7, #7]
 8007a90:	4618      	mov	r0, r3
 8007a92:	f7ff ffd7 	bl	8007a44 <ILI9341_SPI_Send>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8007a96:	4b05      	ldr	r3, [pc, #20]	; (8007aac <ILI9341_Write_Command+0x40>)
 8007a98:	695b      	ldr	r3, [r3, #20]
 8007a9a:	4a04      	ldr	r2, [pc, #16]	; (8007aac <ILI9341_Write_Command+0x40>)
 8007a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aa0:	6153      	str	r3, [r2, #20]
}
 8007aa2:	bf00      	nop
 8007aa4:	3708      	adds	r7, #8
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	48000400 	.word	0x48000400

08007ab0 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8007aba:	4b0d      	ldr	r3, [pc, #52]	; (8007af0 <ILI9341_Write_Data+0x40>)
 8007abc:	695b      	ldr	r3, [r3, #20]
 8007abe:	4a0c      	ldr	r2, [pc, #48]	; (8007af0 <ILI9341_Write_Data+0x40>)
 8007ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ac4:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007ac6:	4b0a      	ldr	r3, [pc, #40]	; (8007af0 <ILI9341_Write_Data+0x40>)
 8007ac8:	695b      	ldr	r3, [r3, #20]
 8007aca:	4a09      	ldr	r2, [pc, #36]	; (8007af0 <ILI9341_Write_Data+0x40>)
 8007acc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ad0:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(Data);
 8007ad2:	79fb      	ldrb	r3, [r7, #7]
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f7ff ffb5 	bl	8007a44 <ILI9341_SPI_Send>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007ada:	4b05      	ldr	r3, [pc, #20]	; (8007af0 <ILI9341_Write_Data+0x40>)
 8007adc:	695b      	ldr	r3, [r3, #20]
 8007ade:	4a04      	ldr	r2, [pc, #16]	; (8007af0 <ILI9341_Write_Data+0x40>)
 8007ae0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ae4:	6153      	str	r3, [r2, #20]
}
 8007ae6:	bf00      	nop
 8007ae8:	3708      	adds	r7, #8
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	48000400 	.word	0x48000400

08007af4 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8007af4:	b590      	push	{r4, r7, lr}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	4604      	mov	r4, r0
 8007afc:	4608      	mov	r0, r1
 8007afe:	4611      	mov	r1, r2
 8007b00:	461a      	mov	r2, r3
 8007b02:	4623      	mov	r3, r4
 8007b04:	80fb      	strh	r3, [r7, #6]
 8007b06:	4603      	mov	r3, r0
 8007b08:	80bb      	strh	r3, [r7, #4]
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	807b      	strh	r3, [r7, #2]
 8007b0e:	4613      	mov	r3, r2
 8007b10:	803b      	strh	r3, [r7, #0]
	ILI9341_Write_Command(0x2A);
 8007b12:	202a      	movs	r0, #42	; 0x2a
 8007b14:	f7ff ffaa 	bl	8007a6c <ILI9341_Write_Command>
	ILI9341_Write_Data(X1>>8);
 8007b18:	88fb      	ldrh	r3, [r7, #6]
 8007b1a:	0a1b      	lsrs	r3, r3, #8
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	4618      	mov	r0, r3
 8007b22:	f7ff ffc5 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(X1);
 8007b26:	88fb      	ldrh	r3, [r7, #6]
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f7ff ffc0 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(X2>>8);
 8007b30:	887b      	ldrh	r3, [r7, #2]
 8007b32:	0a1b      	lsrs	r3, r3, #8
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f7ff ffb9 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(X2);
 8007b3e:	887b      	ldrh	r3, [r7, #2]
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7ff ffb4 	bl	8007ab0 <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2B);
 8007b48:	202b      	movs	r0, #43	; 0x2b
 8007b4a:	f7ff ff8f 	bl	8007a6c <ILI9341_Write_Command>
	ILI9341_Write_Data(Y1>>8);
 8007b4e:	88bb      	ldrh	r3, [r7, #4]
 8007b50:	0a1b      	lsrs	r3, r3, #8
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7ff ffaa 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y1);
 8007b5c:	88bb      	ldrh	r3, [r7, #4]
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7ff ffa5 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2>>8);
 8007b66:	883b      	ldrh	r3, [r7, #0]
 8007b68:	0a1b      	lsrs	r3, r3, #8
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7ff ff9e 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2);
 8007b74:	883b      	ldrh	r3, [r7, #0]
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f7ff ff99 	bl	8007ab0 <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2C);
 8007b7e:	202c      	movs	r0, #44	; 0x2c
 8007b80:	f7ff ff74 	bl	8007a6c <ILI9341_Write_Command>
}
 8007b84:	bf00      	nop
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd90      	pop	{r4, r7, pc}

08007b8c <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 8007b90:	4b0c      	ldr	r3, [pc, #48]	; (8007bc4 <ILI9341_Reset+0x38>)
 8007b92:	695b      	ldr	r3, [r3, #20]
 8007b94:	4a0b      	ldr	r2, [pc, #44]	; (8007bc4 <ILI9341_Reset+0x38>)
 8007b96:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b9a:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 8007b9c:	20c8      	movs	r0, #200	; 0xc8
 8007b9e:	f7fa faef 	bl	8002180 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007ba2:	4b08      	ldr	r3, [pc, #32]	; (8007bc4 <ILI9341_Reset+0x38>)
 8007ba4:	695b      	ldr	r3, [r3, #20]
 8007ba6:	4a07      	ldr	r2, [pc, #28]	; (8007bc4 <ILI9341_Reset+0x38>)
 8007ba8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bac:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 8007bae:	20c8      	movs	r0, #200	; 0xc8
 8007bb0:	f7fa fae6 	bl	8002180 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8007bb4:	4b03      	ldr	r3, [pc, #12]	; (8007bc4 <ILI9341_Reset+0x38>)
 8007bb6:	695b      	ldr	r3, [r3, #20]
 8007bb8:	4a02      	ldr	r2, [pc, #8]	; (8007bc4 <ILI9341_Reset+0x38>)
 8007bba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007bbe:	6153      	str	r3, [r2, #20]
}
 8007bc0:	bf00      	nop
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	48000400 	.word	0x48000400

08007bc8 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	4603      	mov	r3, r0
 8007bd0:	71fb      	strb	r3, [r7, #7]
	
	uint8_t screen_rotation = Rotation;
 8007bd2:	79fb      	ldrb	r3, [r7, #7]
 8007bd4:	73fb      	strb	r3, [r7, #15]
	
	ILI9341_Write_Command(0x36);
 8007bd6:	2036      	movs	r0, #54	; 0x36
 8007bd8:	f7ff ff48 	bl	8007a6c <ILI9341_Write_Command>
	//HAL_Delay(1);

	switch(screen_rotation)
 8007bdc:	7bfb      	ldrb	r3, [r7, #15]
 8007bde:	2b03      	cmp	r3, #3
 8007be0:	d836      	bhi.n	8007c50 <ILI9341_Set_Rotation+0x88>
 8007be2:	a201      	add	r2, pc, #4	; (adr r2, 8007be8 <ILI9341_Set_Rotation+0x20>)
 8007be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be8:	08007bf9 	.word	0x08007bf9
 8007bec:	08007c0f 	.word	0x08007c0f
 8007bf0:	08007c25 	.word	0x08007c25
 8007bf4:	08007c3b 	.word	0x08007c3b
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8007bf8:	2048      	movs	r0, #72	; 0x48
 8007bfa:	f7ff ff59 	bl	8007ab0 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8007bfe:	4b17      	ldr	r3, [pc, #92]	; (8007c5c <ILI9341_Set_Rotation+0x94>)
 8007c00:	22f0      	movs	r2, #240	; 0xf0
 8007c02:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8007c04:	4b16      	ldr	r3, [pc, #88]	; (8007c60 <ILI9341_Set_Rotation+0x98>)
 8007c06:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007c0a:	801a      	strh	r2, [r3, #0]
			break;
 8007c0c:	e021      	b.n	8007c52 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8007c0e:	2028      	movs	r0, #40	; 0x28
 8007c10:	f7ff ff4e 	bl	8007ab0 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8007c14:	4b11      	ldr	r3, [pc, #68]	; (8007c5c <ILI9341_Set_Rotation+0x94>)
 8007c16:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007c1a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8007c1c:	4b10      	ldr	r3, [pc, #64]	; (8007c60 <ILI9341_Set_Rotation+0x98>)
 8007c1e:	22f0      	movs	r2, #240	; 0xf0
 8007c20:	801a      	strh	r2, [r3, #0]
			break;
 8007c22:	e016      	b.n	8007c52 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8007c24:	2088      	movs	r0, #136	; 0x88
 8007c26:	f7ff ff43 	bl	8007ab0 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8007c2a:	4b0c      	ldr	r3, [pc, #48]	; (8007c5c <ILI9341_Set_Rotation+0x94>)
 8007c2c:	22f0      	movs	r2, #240	; 0xf0
 8007c2e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8007c30:	4b0b      	ldr	r3, [pc, #44]	; (8007c60 <ILI9341_Set_Rotation+0x98>)
 8007c32:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007c36:	801a      	strh	r2, [r3, #0]
			break;
 8007c38:	e00b      	b.n	8007c52 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8007c3a:	20e8      	movs	r0, #232	; 0xe8
 8007c3c:	f7ff ff38 	bl	8007ab0 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8007c40:	4b06      	ldr	r3, [pc, #24]	; (8007c5c <ILI9341_Set_Rotation+0x94>)
 8007c42:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007c46:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8007c48:	4b05      	ldr	r3, [pc, #20]	; (8007c60 <ILI9341_Set_Rotation+0x98>)
 8007c4a:	22f0      	movs	r2, #240	; 0xf0
 8007c4c:	801a      	strh	r2, [r3, #0]
			break;
 8007c4e:	e000      	b.n	8007c52 <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8007c50:	bf00      	nop
	}
}
 8007c52:	bf00      	nop
 8007c54:	3710      	adds	r7, #16
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	200003da 	.word	0x200003da
 8007c60:	200003d8 	.word	0x200003d8

08007c64 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8007c64:	b480      	push	{r7}
 8007c66:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8007c68:	4b05      	ldr	r3, [pc, #20]	; (8007c80 <ILI9341_Enable+0x1c>)
 8007c6a:	695b      	ldr	r3, [r3, #20]
 8007c6c:	4a04      	ldr	r2, [pc, #16]	; (8007c80 <ILI9341_Enable+0x1c>)
 8007c6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007c72:	6153      	str	r3, [r2, #20]
}
 8007c74:	bf00      	nop
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr
 8007c7e:	bf00      	nop
 8007c80:	48000400 	.word	0x48000400

08007c84 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	af00      	add	r7, sp, #0

	ILI9341_Enable();
 8007c88:	f7ff ffec 	bl	8007c64 <ILI9341_Enable>
	ILI9341_SPI_Init();
 8007c8c:	f7ff feca 	bl	8007a24 <ILI9341_SPI_Init>
	ILI9341_Reset();
 8007c90:	f7ff ff7c 	bl	8007b8c <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_Write_Command(0x01);
 8007c94:	2001      	movs	r0, #1
 8007c96:	f7ff fee9 	bl	8007a6c <ILI9341_Write_Command>
	HAL_Delay(2000);
 8007c9a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007c9e:	f7fa fa6f 	bl	8002180 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_Write_Command(0xCB);
 8007ca2:	20cb      	movs	r0, #203	; 0xcb
 8007ca4:	f7ff fee2 	bl	8007a6c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x39);
 8007ca8:	2039      	movs	r0, #57	; 0x39
 8007caa:	f7ff ff01 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2C);
 8007cae:	202c      	movs	r0, #44	; 0x2c
 8007cb0:	f7ff fefe 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8007cb4:	2000      	movs	r0, #0
 8007cb6:	f7ff fefb 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x34);
 8007cba:	2034      	movs	r0, #52	; 0x34
 8007cbc:	f7ff fef8 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x02);
 8007cc0:	2002      	movs	r0, #2
 8007cc2:	f7ff fef5 	bl	8007ab0 <ILI9341_Write_Data>

	//POWER CONTROL B
	ILI9341_Write_Command(0xCF);
 8007cc6:	20cf      	movs	r0, #207	; 0xcf
 8007cc8:	f7ff fed0 	bl	8007a6c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8007ccc:	2000      	movs	r0, #0
 8007cce:	f7ff feef 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 8007cd2:	20c1      	movs	r0, #193	; 0xc1
 8007cd4:	f7ff feec 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x30);
 8007cd8:	2030      	movs	r0, #48	; 0x30
 8007cda:	f7ff fee9 	bl	8007ab0 <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL A
	ILI9341_Write_Command(0xE8);
 8007cde:	20e8      	movs	r0, #232	; 0xe8
 8007ce0:	f7ff fec4 	bl	8007a6c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x85);
 8007ce4:	2085      	movs	r0, #133	; 0x85
 8007ce6:	f7ff fee3 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8007cea:	2000      	movs	r0, #0
 8007cec:	f7ff fee0 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x78);
 8007cf0:	2078      	movs	r0, #120	; 0x78
 8007cf2:	f7ff fedd 	bl	8007ab0 <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL B
	ILI9341_Write_Command(0xEA);
 8007cf6:	20ea      	movs	r0, #234	; 0xea
 8007cf8:	f7ff feb8 	bl	8007a6c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8007cfc:	2000      	movs	r0, #0
 8007cfe:	f7ff fed7 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8007d02:	2000      	movs	r0, #0
 8007d04:	f7ff fed4 	bl	8007ab0 <ILI9341_Write_Data>

	//POWER ON SEQUENCE CONTROL
	ILI9341_Write_Command(0xED);
 8007d08:	20ed      	movs	r0, #237	; 0xed
 8007d0a:	f7ff feaf 	bl	8007a6c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x64);
 8007d0e:	2064      	movs	r0, #100	; 0x64
 8007d10:	f7ff fece 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8007d14:	2003      	movs	r0, #3
 8007d16:	f7ff fecb 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x12);
 8007d1a:	2012      	movs	r0, #18
 8007d1c:	f7ff fec8 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x81);
 8007d20:	2081      	movs	r0, #129	; 0x81
 8007d22:	f7ff fec5 	bl	8007ab0 <ILI9341_Write_Data>

	//PUMP RATIO CONTROL
	ILI9341_Write_Command(0xF7);
 8007d26:	20f7      	movs	r0, #247	; 0xf7
 8007d28:	f7ff fea0 	bl	8007a6c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x20);
 8007d2c:	2020      	movs	r0, #32
 8007d2e:	f7ff febf 	bl	8007ab0 <ILI9341_Write_Data>

	//POWER CONTROL,VRH[5:0]
	ILI9341_Write_Command(0xC0);
 8007d32:	20c0      	movs	r0, #192	; 0xc0
 8007d34:	f7ff fe9a 	bl	8007a6c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x23);
 8007d38:	2023      	movs	r0, #35	; 0x23
 8007d3a:	f7ff feb9 	bl	8007ab0 <ILI9341_Write_Data>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_Write_Command(0xC1);
 8007d3e:	20c1      	movs	r0, #193	; 0xc1
 8007d40:	f7ff fe94 	bl	8007a6c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x10);
 8007d44:	2010      	movs	r0, #16
 8007d46:	f7ff feb3 	bl	8007ab0 <ILI9341_Write_Data>

	//VCM CONTROL
	ILI9341_Write_Command(0xC5);
 8007d4a:	20c5      	movs	r0, #197	; 0xc5
 8007d4c:	f7ff fe8e 	bl	8007a6c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x3E);
 8007d50:	203e      	movs	r0, #62	; 0x3e
 8007d52:	f7ff fead 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x28);
 8007d56:	2028      	movs	r0, #40	; 0x28
 8007d58:	f7ff feaa 	bl	8007ab0 <ILI9341_Write_Data>

	//VCM CONTROL 2
	ILI9341_Write_Command(0xC7);
 8007d5c:	20c7      	movs	r0, #199	; 0xc7
 8007d5e:	f7ff fe85 	bl	8007a6c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x86);
 8007d62:	2086      	movs	r0, #134	; 0x86
 8007d64:	f7ff fea4 	bl	8007ab0 <ILI9341_Write_Data>

	//MEMORY ACCESS CONTROL
	ILI9341_Write_Command(0x36);
 8007d68:	2036      	movs	r0, #54	; 0x36
 8007d6a:	f7ff fe7f 	bl	8007a6c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x48);
 8007d6e:	2048      	movs	r0, #72	; 0x48
 8007d70:	f7ff fe9e 	bl	8007ab0 <ILI9341_Write_Data>


	//PIXEL FORMAT
	ILI9341_Write_Command(0x3A);
 8007d74:	203a      	movs	r0, #58	; 0x3a
 8007d76:	f7ff fe79 	bl	8007a6c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x55);
 8007d7a:	2055      	movs	r0, #85	; 0x55
 8007d7c:	f7ff fe98 	bl	8007ab0 <ILI9341_Write_Data>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_Write_Command(0xB1);
 8007d80:	20b1      	movs	r0, #177	; 0xb1
 8007d82:	f7ff fe73 	bl	8007a6c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8007d86:	2000      	movs	r0, #0
 8007d88:	f7ff fe92 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x18);
 8007d8c:	2018      	movs	r0, #24
 8007d8e:	f7ff fe8f 	bl	8007ab0 <ILI9341_Write_Data>

	//DISPLAY FUNCTION CONTROL
	ILI9341_Write_Command(0xB6);
 8007d92:	20b6      	movs	r0, #182	; 0xb6
 8007d94:	f7ff fe6a 	bl	8007a6c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x08);
 8007d98:	2008      	movs	r0, #8
 8007d9a:	f7ff fe89 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x82);
 8007d9e:	2082      	movs	r0, #130	; 0x82
 8007da0:	f7ff fe86 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x27);
 8007da4:	2027      	movs	r0, #39	; 0x27
 8007da6:	f7ff fe83 	bl	8007ab0 <ILI9341_Write_Data>


	//3GAMMA FUNCTION DISABLE
	ILI9341_Write_Command(0xF2);
 8007daa:	20f2      	movs	r0, #242	; 0xf2
 8007dac:	f7ff fe5e 	bl	8007a6c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8007db0:	2000      	movs	r0, #0
 8007db2:	f7ff fe7d 	bl	8007ab0 <ILI9341_Write_Data>

	//GAMMA CURVE SELECTED
	ILI9341_Write_Command(0x26);
 8007db6:	2026      	movs	r0, #38	; 0x26
 8007db8:	f7ff fe58 	bl	8007a6c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x01);
 8007dbc:	2001      	movs	r0, #1
 8007dbe:	f7ff fe77 	bl	8007ab0 <ILI9341_Write_Data>

	//POSITIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE0);
 8007dc2:	20e0      	movs	r0, #224	; 0xe0
 8007dc4:	f7ff fe52 	bl	8007a6c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x0F);
 8007dc8:	200f      	movs	r0, #15
 8007dca:	f7ff fe71 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8007dce:	2031      	movs	r0, #49	; 0x31
 8007dd0:	f7ff fe6e 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2B);
 8007dd4:	202b      	movs	r0, #43	; 0x2b
 8007dd6:	f7ff fe6b 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8007dda:	200c      	movs	r0, #12
 8007ddc:	f7ff fe68 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8007de0:	200e      	movs	r0, #14
 8007de2:	f7ff fe65 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 8007de6:	2008      	movs	r0, #8
 8007de8:	f7ff fe62 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x4E);
 8007dec:	204e      	movs	r0, #78	; 0x4e
 8007dee:	f7ff fe5f 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xF1);
 8007df2:	20f1      	movs	r0, #241	; 0xf1
 8007df4:	f7ff fe5c 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x37);
 8007df8:	2037      	movs	r0, #55	; 0x37
 8007dfa:	f7ff fe59 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 8007dfe:	2007      	movs	r0, #7
 8007e00:	f7ff fe56 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x10);
 8007e04:	2010      	movs	r0, #16
 8007e06:	f7ff fe53 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8007e0a:	2003      	movs	r0, #3
 8007e0c:	f7ff fe50 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8007e10:	200e      	movs	r0, #14
 8007e12:	f7ff fe4d 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x09);
 8007e16:	2009      	movs	r0, #9
 8007e18:	f7ff fe4a 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8007e1c:	2000      	movs	r0, #0
 8007e1e:	f7ff fe47 	bl	8007ab0 <ILI9341_Write_Data>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE1);
 8007e22:	20e1      	movs	r0, #225	; 0xe1
 8007e24:	f7ff fe22 	bl	8007a6c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8007e28:	2000      	movs	r0, #0
 8007e2a:	f7ff fe41 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8007e2e:	200e      	movs	r0, #14
 8007e30:	f7ff fe3e 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x14);
 8007e34:	2014      	movs	r0, #20
 8007e36:	f7ff fe3b 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8007e3a:	2003      	movs	r0, #3
 8007e3c:	f7ff fe38 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x11);
 8007e40:	2011      	movs	r0, #17
 8007e42:	f7ff fe35 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 8007e46:	2007      	movs	r0, #7
 8007e48:	f7ff fe32 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8007e4c:	2031      	movs	r0, #49	; 0x31
 8007e4e:	f7ff fe2f 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 8007e52:	20c1      	movs	r0, #193	; 0xc1
 8007e54:	f7ff fe2c 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x48);
 8007e58:	2048      	movs	r0, #72	; 0x48
 8007e5a:	f7ff fe29 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 8007e5e:	2008      	movs	r0, #8
 8007e60:	f7ff fe26 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8007e64:	200f      	movs	r0, #15
 8007e66:	f7ff fe23 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8007e6a:	200c      	movs	r0, #12
 8007e6c:	f7ff fe20 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8007e70:	2031      	movs	r0, #49	; 0x31
 8007e72:	f7ff fe1d 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x36);
 8007e76:	2036      	movs	r0, #54	; 0x36
 8007e78:	f7ff fe1a 	bl	8007ab0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8007e7c:	200f      	movs	r0, #15
 8007e7e:	f7ff fe17 	bl	8007ab0 <ILI9341_Write_Data>

	//EXIT SLEEP
	ILI9341_Write_Command(0x11);
 8007e82:	2011      	movs	r0, #17
 8007e84:	f7ff fdf2 	bl	8007a6c <ILI9341_Write_Command>
	HAL_Delay(240);
 8007e88:	20f0      	movs	r0, #240	; 0xf0
 8007e8a:	f7fa f979 	bl	8002180 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_Write_Command(0x29);
 8007e8e:	2029      	movs	r0, #41	; 0x29
 8007e90:	f7ff fdec 	bl	8007a6c <ILI9341_Write_Command>
	
	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8007e94:	2000      	movs	r0, #0
 8007e96:	f7ff fe97 	bl	8007bc8 <ILI9341_Set_Rotation>
}
 8007e9a:	bf00      	nop
 8007e9c:	bd80      	pop	{r7, pc}
	...

08007ea0 <ILI9341_Draw_colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_colour_Burst(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 8007ea0:	b5b0      	push	{r4, r5, r7, lr}
 8007ea2:	b08e      	sub	sp, #56	; 0x38
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	607b      	str	r3, [r7, #4]
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	81fb      	strh	r3, [r7, #14]
 8007eac:	460b      	mov	r3, r1
 8007eae:	81bb      	strh	r3, [r7, #12]
 8007eb0:	4613      	mov	r3, r2
 8007eb2:	817b      	strh	r3, [r7, #10]
 8007eb4:	466b      	mov	r3, sp
 8007eb6:	461d      	mov	r5, r3

	// 	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
	// 	each CHUNK is broken down into smaller BLOCKS


	uint32_t buffer_size = 0;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	005b      	lsls	r3, r3, #1
 8007ec0:	4a48      	ldr	r2, [pc, #288]	; (8007fe4 <ILI9341_Draw_colour_Burst+0x144>)
 8007ec2:	8812      	ldrh	r2, [r2, #0]
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d202      	bcs.n	8007ece <ILI9341_Draw_colour_Burst+0x2e>
	{
		buffer_size = chunk_size;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ecc:	e002      	b.n	8007ed4 <ILI9341_Draw_colour_Burst+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 8007ece:	4b45      	ldr	r3, [pc, #276]	; (8007fe4 <ILI9341_Draw_colour_Burst+0x144>)
 8007ed0:	881b      	ldrh	r3, [r3, #0]
 8007ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
	}




	unsigned char chifted = 	colour>>8;;
 8007ed4:	897b      	ldrh	r3, [r7, #10]
 8007ed6:	0a1b      	lsrs	r3, r3, #8
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	unsigned char burst_buffer[buffer_size];
 8007ede:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	61fb      	str	r3, [r7, #28]
 8007ee6:	4601      	mov	r1, r0
 8007ee8:	f04f 0200 	mov.w	r2, #0
 8007eec:	f04f 0300 	mov.w	r3, #0
 8007ef0:	f04f 0400 	mov.w	r4, #0
 8007ef4:	00d4      	lsls	r4, r2, #3
 8007ef6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8007efa:	00cb      	lsls	r3, r1, #3
 8007efc:	4601      	mov	r1, r0
 8007efe:	f04f 0200 	mov.w	r2, #0
 8007f02:	f04f 0300 	mov.w	r3, #0
 8007f06:	f04f 0400 	mov.w	r4, #0
 8007f0a:	00d4      	lsls	r4, r2, #3
 8007f0c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8007f10:	00cb      	lsls	r3, r1, #3
 8007f12:	1dc3      	adds	r3, r0, #7
 8007f14:	08db      	lsrs	r3, r3, #3
 8007f16:	00db      	lsls	r3, r3, #3
 8007f18:	ebad 0d03 	sub.w	sp, sp, r3
 8007f1c:	466b      	mov	r3, sp
 8007f1e:	3300      	adds	r3, #0
 8007f20:	61bb      	str	r3, [r7, #24]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8007f22:	2300      	movs	r3, #0
 8007f24:	633b      	str	r3, [r7, #48]	; 0x30
 8007f26:	e00e      	b.n	8007f46 <ILI9341_Draw_colour_Burst+0xa6>
	{

			burst_buffer[j] = 	chifted;
 8007f28:	69ba      	ldr	r2, [r7, #24]
 8007f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f2c:	4413      	add	r3, r2
 8007f2e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8007f32:	701a      	strb	r2, [r3, #0]

			burst_buffer[j+1] = colour;
 8007f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f36:	3301      	adds	r3, #1
 8007f38:	897a      	ldrh	r2, [r7, #10]
 8007f3a:	b2d1      	uxtb	r1, r2
 8007f3c:	69ba      	ldr	r2, [r7, #24]
 8007f3e:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8007f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f42:	3302      	adds	r3, #2
 8007f44:	633b      	str	r3, [r7, #48]	; 0x30
 8007f46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d3ec      	bcc.n	8007f28 <ILI9341_Draw_colour_Burst+0x88>


	}
	
	uint32_t Sending_size = chunk_size*2;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	005b      	lsls	r3, r3, #1
 8007f52:	617b      	str	r3, [r7, #20]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 8007f54:	2301      	movs	r3, #1
 8007f56:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d00d      	beq.n	8007f7e <ILI9341_Draw_colour_Burst+0xde>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 8007f62:	697a      	ldr	r2, [r7, #20]
 8007f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f6a:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f70:	fbb3 f2f2 	udiv	r2, r3, r2
 8007f74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f76:	fb01 f202 	mul.w	r2, r1, r2
 8007f7a:	1a9b      	subs	r3, r3, r2
 8007f7c:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8007f7e:	4b1a      	ldr	r3, [pc, #104]	; (8007fe8 <ILI9341_Draw_colour_Burst+0x148>)
 8007f80:	695b      	ldr	r3, [r3, #20]
 8007f82:	4a19      	ldr	r2, [pc, #100]	; (8007fe8 <ILI9341_Draw_colour_Burst+0x148>)
 8007f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f88:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007f8a:	4b17      	ldr	r3, [pc, #92]	; (8007fe8 <ILI9341_Draw_colour_Burst+0x148>)
 8007f8c:	695b      	ldr	r3, [r3, #20]
 8007f8e:	4a16      	ldr	r2, [pc, #88]	; (8007fe8 <ILI9341_Draw_colour_Burst+0x148>)
 8007f90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f94:	6153      	str	r3, [r2, #20]

	if(Sending_in_Block != 0)
 8007f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d010      	beq.n	8007fbe <ILI9341_Draw_colour_Burst+0x11e>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8007fa0:	e009      	b.n	8007fb6 <ILI9341_Draw_colour_Burst+0x116>
		{

			HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, buffer_size, 2);
 8007fa2:	69b9      	ldr	r1, [r7, #24]
 8007fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa6:	b29a      	uxth	r2, r3
 8007fa8:	2302      	movs	r3, #2
 8007faa:	4810      	ldr	r0, [pc, #64]	; (8007fec <ILI9341_Draw_colour_Burst+0x14c>)
 8007fac:	f7fd fdba 	bl	8005b24 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8007fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8007fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d3f1      	bcc.n	8007fa2 <ILI9341_Draw_colour_Burst+0x102>
		}
	}

	//REMAINDER!
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 2);
 8007fbe:	69b9      	ldr	r1, [r7, #24]
 8007fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc2:	b29a      	uxth	r2, r3
 8007fc4:	2302      	movs	r3, #2
 8007fc6:	4809      	ldr	r0, [pc, #36]	; (8007fec <ILI9341_Draw_colour_Burst+0x14c>)
 8007fc8:	f7fd fdac 	bl	8005b24 <HAL_SPI_Transmit>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8007fcc:	4b06      	ldr	r3, [pc, #24]	; (8007fe8 <ILI9341_Draw_colour_Burst+0x148>)
 8007fce:	695b      	ldr	r3, [r3, #20]
 8007fd0:	4a05      	ldr	r2, [pc, #20]	; (8007fe8 <ILI9341_Draw_colour_Burst+0x148>)
 8007fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fd6:	6153      	str	r3, [r2, #20]
 8007fd8:	46ad      	mov	sp, r5


}
 8007fda:	bf00      	nop
 8007fdc:	3738      	adds	r7, #56	; 0x38
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bdb0      	pop	{r4, r5, r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	200003dc 	.word	0x200003dc
 8007fe8:	48000400 	.word	0x48000400
 8007fec:	2000065c 	.word	0x2000065c

08007ff0 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends height*width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t colour)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af02      	add	r7, sp, #8
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);
 8007ffa:	4b10      	ldr	r3, [pc, #64]	; (800803c <ILI9341_Fill_Screen+0x4c>)
 8007ffc:	881b      	ldrh	r3, [r3, #0]
 8007ffe:	b29a      	uxth	r2, r3
 8008000:	4b0f      	ldr	r3, [pc, #60]	; (8008040 <ILI9341_Fill_Screen+0x50>)
 8008002:	881b      	ldrh	r3, [r3, #0]
 8008004:	b29b      	uxth	r3, r3
 8008006:	2100      	movs	r1, #0
 8008008:	2000      	movs	r0, #0
 800800a:	f7ff fd73 	bl	8007af4 <ILI9341_Set_Address>
	ILI9341_Draw_colour_Burst(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 800800e:	4b0b      	ldr	r3, [pc, #44]	; (800803c <ILI9341_Fill_Screen+0x4c>)
 8008010:	881b      	ldrh	r3, [r3, #0]
 8008012:	b29b      	uxth	r3, r3
 8008014:	461a      	mov	r2, r3
 8008016:	4b0a      	ldr	r3, [pc, #40]	; (8008040 <ILI9341_Fill_Screen+0x50>)
 8008018:	881b      	ldrh	r3, [r3, #0]
 800801a:	b29b      	uxth	r3, r3
 800801c:	fb03 f302 	mul.w	r3, r3, r2
 8008020:	4619      	mov	r1, r3
 8008022:	88fa      	ldrh	r2, [r7, #6]
 8008024:	2304      	movs	r3, #4
 8008026:	9300      	str	r3, [sp, #0]
 8008028:	460b      	mov	r3, r1
 800802a:	2100      	movs	r1, #0
 800802c:	2000      	movs	r0, #0
 800802e:	f7ff ff37 	bl	8007ea0 <ILI9341_Draw_colour_Burst>
}
 8008032:	bf00      	nop
 8008034:	3708      	adds	r7, #8
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	200003da 	.word	0x200003da
 8008040:	200003d8 	.word	0x200003d8

08008044 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t colour)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b086      	sub	sp, #24
 8008048:	af00      	add	r7, sp, #0
 800804a:	4603      	mov	r3, r0
 800804c:	80fb      	strh	r3, [r7, #6]
 800804e:	460b      	mov	r3, r1
 8008050:	80bb      	strh	r3, [r7, #4]
 8008052:	4613      	mov	r3, r2
 8008054:	807b      	strh	r3, [r7, #2]
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8008056:	4b64      	ldr	r3, [pc, #400]	; (80081e8 <ILI9341_Draw_Pixel+0x1a4>)
 8008058:	881b      	ldrh	r3, [r3, #0]
 800805a:	b29b      	uxth	r3, r3
 800805c:	88fa      	ldrh	r2, [r7, #6]
 800805e:	429a      	cmp	r2, r3
 8008060:	f080 80be 	bcs.w	80081e0 <ILI9341_Draw_Pixel+0x19c>
 8008064:	4b61      	ldr	r3, [pc, #388]	; (80081ec <ILI9341_Draw_Pixel+0x1a8>)
 8008066:	881b      	ldrh	r3, [r3, #0]
 8008068:	b29b      	uxth	r3, r3
 800806a:	88ba      	ldrh	r2, [r7, #4]
 800806c:	429a      	cmp	r2, r3
 800806e:	f080 80b7 	bcs.w	80081e0 <ILI9341_Draw_Pixel+0x19c>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8008072:	4b5f      	ldr	r3, [pc, #380]	; (80081f0 <ILI9341_Draw_Pixel+0x1ac>)
 8008074:	695b      	ldr	r3, [r3, #20]
 8008076:	4a5e      	ldr	r2, [pc, #376]	; (80081f0 <ILI9341_Draw_Pixel+0x1ac>)
 8008078:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800807c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800807e:	4b5c      	ldr	r3, [pc, #368]	; (80081f0 <ILI9341_Draw_Pixel+0x1ac>)
 8008080:	695b      	ldr	r3, [r3, #20]
 8008082:	4a5b      	ldr	r2, [pc, #364]	; (80081f0 <ILI9341_Draw_Pixel+0x1ac>)
 8008084:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008088:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(0x2A);
 800808a:	202a      	movs	r0, #42	; 0x2a
 800808c:	f7ff fcda 	bl	8007a44 <ILI9341_SPI_Send>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8008090:	4b57      	ldr	r3, [pc, #348]	; (80081f0 <ILI9341_Draw_Pixel+0x1ac>)
 8008092:	695b      	ldr	r3, [r3, #20]
 8008094:	4a56      	ldr	r2, [pc, #344]	; (80081f0 <ILI9341_Draw_Pixel+0x1ac>)
 8008096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800809a:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800809c:	4b54      	ldr	r3, [pc, #336]	; (80081f0 <ILI9341_Draw_Pixel+0x1ac>)
 800809e:	695b      	ldr	r3, [r3, #20]
 80080a0:	4a53      	ldr	r2, [pc, #332]	; (80081f0 <ILI9341_Draw_Pixel+0x1ac>)
 80080a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080a6:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80080a8:	4b51      	ldr	r3, [pc, #324]	; (80081f0 <ILI9341_Draw_Pixel+0x1ac>)
 80080aa:	695b      	ldr	r3, [r3, #20]
 80080ac:	4a50      	ldr	r2, [pc, #320]	; (80081f0 <ILI9341_Draw_Pixel+0x1ac>)
 80080ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080b2:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 80080b4:	88fb      	ldrh	r3, [r7, #6]
 80080b6:	0a1b      	lsrs	r3, r3, #8
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	753b      	strb	r3, [r7, #20]
 80080be:	88fb      	ldrh	r3, [r7, #6]
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	757b      	strb	r3, [r7, #21]
 80080c4:	88fb      	ldrh	r3, [r7, #6]
 80080c6:	3301      	adds	r3, #1
 80080c8:	121b      	asrs	r3, r3, #8
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	75bb      	strb	r3, [r7, #22]
 80080ce:	88fb      	ldrh	r3, [r7, #6]
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	3301      	adds	r3, #1
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 80080d8:	f107 0114 	add.w	r1, r7, #20
 80080dc:	2301      	movs	r3, #1
 80080de:	2204      	movs	r2, #4
 80080e0:	4844      	ldr	r0, [pc, #272]	; (80081f4 <ILI9341_Draw_Pixel+0x1b0>)
 80080e2:	f7fd fd1f 	bl	8005b24 <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80080e6:	4b42      	ldr	r3, [pc, #264]	; (80081f0 <ILI9341_Draw_Pixel+0x1ac>)
 80080e8:	695b      	ldr	r3, [r3, #20]
 80080ea:	4a41      	ldr	r2, [pc, #260]	; (80081f0 <ILI9341_Draw_Pixel+0x1ac>)
 80080ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080f0:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 80080f2:	4b3f      	ldr	r3, [pc, #252]	; (80081f0 <ILI9341_Draw_Pixel+0x1ac>)
 80080f4:	695b      	ldr	r3, [r3, #20]
 80080f6:	4a3e      	ldr	r2, [pc, #248]	; (80081f0 <ILI9341_Draw_Pixel+0x1ac>)
 80080f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080fc:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80080fe:	4b3c      	ldr	r3, [pc, #240]	; (80081f0 <ILI9341_Draw_Pixel+0x1ac>)
 8008100:	695b      	ldr	r3, [r3, #20]
 8008102:	4a3b      	ldr	r2, [pc, #236]	; (80081f0 <ILI9341_Draw_Pixel+0x1ac>)
 8008104:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008108:	6153      	str	r3, [r2, #20]

	ILI9341_SPI_Send(0x2B);
 800810a:	202b      	movs	r0, #43	; 0x2b
 800810c:	f7ff fc9a 	bl	8007a44 <ILI9341_SPI_Send>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8008110:	4b37      	ldr	r3, [pc, #220]	; (80081f0 <ILI9341_Draw_Pixel+0x1ac>)
 8008112:	695b      	ldr	r3, [r3, #20]
 8008114:	4a36      	ldr	r2, [pc, #216]	; (80081f0 <ILI9341_Draw_Pixel+0x1ac>)
 8008116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800811a:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800811c:	4b34      	ldr	r3, [pc, #208]	; (80081f0 <ILI9341_Draw_Pixel+0x1ac>)
 800811e:	695b      	ldr	r3, [r3, #20]
 8008120:	4a33      	ldr	r2, [pc, #204]	; (80081f0 <ILI9341_Draw_Pixel+0x1ac>)
 8008122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008126:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008128:	4b31      	ldr	r3, [pc, #196]	; (80081f0 <ILI9341_Draw_Pixel+0x1ac>)
 800812a:	695b      	ldr	r3, [r3, #20]
 800812c:	4a30      	ldr	r2, [pc, #192]	; (80081f0 <ILI9341_Draw_Pixel+0x1ac>)
 800812e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008132:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8008134:	88bb      	ldrh	r3, [r7, #4]
 8008136:	0a1b      	lsrs	r3, r3, #8
 8008138:	b29b      	uxth	r3, r3
 800813a:	b2db      	uxtb	r3, r3
 800813c:	743b      	strb	r3, [r7, #16]
 800813e:	88bb      	ldrh	r3, [r7, #4]
 8008140:	b2db      	uxtb	r3, r3
 8008142:	747b      	strb	r3, [r7, #17]
 8008144:	88bb      	ldrh	r3, [r7, #4]
 8008146:	3301      	adds	r3, #1
 8008148:	121b      	asrs	r3, r3, #8
 800814a:	b2db      	uxtb	r3, r3
 800814c:	74bb      	strb	r3, [r7, #18]
 800814e:	88bb      	ldrh	r3, [r7, #4]
 8008150:	b2db      	uxtb	r3, r3
 8008152:	3301      	adds	r3, #1
 8008154:	b2db      	uxtb	r3, r3
 8008156:	74fb      	strb	r3, [r7, #19]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8008158:	f107 0110 	add.w	r1, r7, #16
 800815c:	2301      	movs	r3, #1
 800815e:	2204      	movs	r2, #4
 8008160:	4824      	ldr	r0, [pc, #144]	; (80081f4 <ILI9341_Draw_Pixel+0x1b0>)
 8008162:	f7fd fcdf 	bl	8005b24 <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008166:	4b22      	ldr	r3, [pc, #136]	; (80081f0 <ILI9341_Draw_Pixel+0x1ac>)
 8008168:	695b      	ldr	r3, [r3, #20]
 800816a:	4a21      	ldr	r2, [pc, #132]	; (80081f0 <ILI9341_Draw_Pixel+0x1ac>)
 800816c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008170:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8008172:	4b1f      	ldr	r3, [pc, #124]	; (80081f0 <ILI9341_Draw_Pixel+0x1ac>)
 8008174:	695b      	ldr	r3, [r3, #20]
 8008176:	4a1e      	ldr	r2, [pc, #120]	; (80081f0 <ILI9341_Draw_Pixel+0x1ac>)
 8008178:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800817c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800817e:	4b1c      	ldr	r3, [pc, #112]	; (80081f0 <ILI9341_Draw_Pixel+0x1ac>)
 8008180:	695b      	ldr	r3, [r3, #20]
 8008182:	4a1b      	ldr	r2, [pc, #108]	; (80081f0 <ILI9341_Draw_Pixel+0x1ac>)
 8008184:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008188:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(0x2C);
 800818a:	202c      	movs	r0, #44	; 0x2c
 800818c:	f7ff fc5a 	bl	8007a44 <ILI9341_SPI_Send>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8008190:	4b17      	ldr	r3, [pc, #92]	; (80081f0 <ILI9341_Draw_Pixel+0x1ac>)
 8008192:	695b      	ldr	r3, [r3, #20]
 8008194:	4a16      	ldr	r2, [pc, #88]	; (80081f0 <ILI9341_Draw_Pixel+0x1ac>)
 8008196:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800819a:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800819c:	4b14      	ldr	r3, [pc, #80]	; (80081f0 <ILI9341_Draw_Pixel+0x1ac>)
 800819e:	695b      	ldr	r3, [r3, #20]
 80081a0:	4a13      	ldr	r2, [pc, #76]	; (80081f0 <ILI9341_Draw_Pixel+0x1ac>)
 80081a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081a6:	6153      	str	r3, [r2, #20]
	
	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80081a8:	4b11      	ldr	r3, [pc, #68]	; (80081f0 <ILI9341_Draw_Pixel+0x1ac>)
 80081aa:	695b      	ldr	r3, [r3, #20]
 80081ac:	4a10      	ldr	r2, [pc, #64]	; (80081f0 <ILI9341_Draw_Pixel+0x1ac>)
 80081ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081b2:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 80081b4:	887b      	ldrh	r3, [r7, #2]
 80081b6:	0a1b      	lsrs	r3, r3, #8
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	733b      	strb	r3, [r7, #12]
 80081be:	887b      	ldrh	r3, [r7, #2]
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 80081c4:	f107 010c 	add.w	r1, r7, #12
 80081c8:	2301      	movs	r3, #1
 80081ca:	2202      	movs	r2, #2
 80081cc:	4809      	ldr	r0, [pc, #36]	; (80081f4 <ILI9341_Draw_Pixel+0x1b0>)
 80081ce:	f7fd fca9 	bl	8005b24 <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80081d2:	4b07      	ldr	r3, [pc, #28]	; (80081f0 <ILI9341_Draw_Pixel+0x1ac>)
 80081d4:	695b      	ldr	r3, [r3, #20]
 80081d6:	4a06      	ldr	r2, [pc, #24]	; (80081f0 <ILI9341_Draw_Pixel+0x1ac>)
 80081d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081dc:	6153      	str	r3, [r2, #20]
 80081de:	e000      	b.n	80081e2 <ILI9341_Draw_Pixel+0x19e>
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80081e0:	bf00      	nop

	
}
 80081e2:	3718      	adds	r7, #24
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}
 80081e8:	200003da 	.word	0x200003da
 80081ec:	200003d8 	.word	0x200003d8
 80081f0:	48000400 	.word	0x48000400
 80081f4:	2000065c 	.word	0x2000065c

080081f8 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 80081f8:	b590      	push	{r4, r7, lr}
 80081fa:	b087      	sub	sp, #28
 80081fc:	af02      	add	r7, sp, #8
 80081fe:	4604      	mov	r4, r0
 8008200:	4608      	mov	r0, r1
 8008202:	4611      	mov	r1, r2
 8008204:	461a      	mov	r2, r3
 8008206:	4623      	mov	r3, r4
 8008208:	80fb      	strh	r3, [r7, #6]
 800820a:	4603      	mov	r3, r0
 800820c:	80bb      	strh	r3, [r7, #4]
 800820e:	460b      	mov	r3, r1
 8008210:	807b      	strh	r3, [r7, #2]
 8008212:	4613      	mov	r3, r2
 8008214:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8008216:	4b39      	ldr	r3, [pc, #228]	; (80082fc <ILI9341_Draw_Rectangle+0x104>)
 8008218:	881b      	ldrh	r3, [r3, #0]
 800821a:	b29b      	uxth	r3, r3
 800821c:	88fa      	ldrh	r2, [r7, #6]
 800821e:	429a      	cmp	r2, r3
 8008220:	d268      	bcs.n	80082f4 <ILI9341_Draw_Rectangle+0xfc>
 8008222:	4b37      	ldr	r3, [pc, #220]	; (8008300 <ILI9341_Draw_Rectangle+0x108>)
 8008224:	881b      	ldrh	r3, [r3, #0]
 8008226:	b29b      	uxth	r3, r3
 8008228:	88ba      	ldrh	r2, [r7, #4]
 800822a:	429a      	cmp	r2, r3
 800822c:	d262      	bcs.n	80082f4 <ILI9341_Draw_Rectangle+0xfc>
	if((xpos+width-1)>=LCD_WIDTH)
 800822e:	88fa      	ldrh	r2, [r7, #6]
 8008230:	887b      	ldrh	r3, [r7, #2]
 8008232:	4413      	add	r3, r2
 8008234:	3b01      	subs	r3, #1
 8008236:	4a31      	ldr	r2, [pc, #196]	; (80082fc <ILI9341_Draw_Rectangle+0x104>)
 8008238:	8812      	ldrh	r2, [r2, #0]
 800823a:	b292      	uxth	r2, r2
 800823c:	4293      	cmp	r3, r2
 800823e:	db05      	blt.n	800824c <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 8008240:	4b2e      	ldr	r3, [pc, #184]	; (80082fc <ILI9341_Draw_Rectangle+0x104>)
 8008242:	881b      	ldrh	r3, [r3, #0]
 8008244:	b29a      	uxth	r2, r3
 8008246:	88fb      	ldrh	r3, [r7, #6]
 8008248:	1ad3      	subs	r3, r2, r3
 800824a:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 800824c:	88ba      	ldrh	r2, [r7, #4]
 800824e:	883b      	ldrh	r3, [r7, #0]
 8008250:	4413      	add	r3, r2
 8008252:	3b01      	subs	r3, #1
 8008254:	4a2a      	ldr	r2, [pc, #168]	; (8008300 <ILI9341_Draw_Rectangle+0x108>)
 8008256:	8812      	ldrh	r2, [r2, #0]
 8008258:	b292      	uxth	r2, r2
 800825a:	4293      	cmp	r3, r2
 800825c:	db05      	blt.n	800826a <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 800825e:	4b28      	ldr	r3, [pc, #160]	; (8008300 <ILI9341_Draw_Rectangle+0x108>)
 8008260:	881b      	ldrh	r3, [r3, #0]
 8008262:	b29a      	uxth	r2, r3
 8008264:	88bb      	ldrh	r3, [r7, #4]
 8008266:	1ad3      	subs	r3, r2, r3
 8008268:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Address(xpos,
						ypos,
						(xpos + width) - 1,
 800826a:	88fa      	ldrh	r2, [r7, #6]
 800826c:	887b      	ldrh	r3, [r7, #2]
 800826e:	4413      	add	r3, r2
 8008270:	b29b      	uxth	r3, r3
	ILI9341_Set_Address(xpos,
 8008272:	3b01      	subs	r3, #1
 8008274:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 8008276:	88ba      	ldrh	r2, [r7, #4]
 8008278:	883b      	ldrh	r3, [r7, #0]
 800827a:	4413      	add	r3, r2
 800827c:	b29b      	uxth	r3, r3
	ILI9341_Set_Address(xpos,
 800827e:	3b01      	subs	r3, #1
 8008280:	b29b      	uxth	r3, r3
 8008282:	88b9      	ldrh	r1, [r7, #4]
 8008284:	88f8      	ldrh	r0, [r7, #6]
 8008286:	4622      	mov	r2, r4
 8008288:	f7ff fc34 	bl	8007af4 <ILI9341_Set_Address>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep ILI9341_Draw_colour_Burst() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 800828c:	883a      	ldrh	r2, [r7, #0]
 800828e:	887b      	ldrh	r3, [r7, #2]
 8008290:	fb12 f303 	smulbb	r3, r2, r3
 8008294:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 8008296:	2300      	movs	r3, #0
 8008298:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 800829a:	89fb      	ldrh	r3, [r7, #14]
 800829c:	f003 0301 	and.w	r3, r3, #1
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d009      	beq.n	80082b8 <ILI9341_Draw_Rectangle+0xc0>
 80082a4:	89fb      	ldrh	r3, [r7, #14]
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d906      	bls.n	80082b8 <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 80082aa:	2301      	movs	r3, #1
 80082ac:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 80082ae:	89fb      	ldrh	r3, [r7, #14]
 80082b0:	085b      	lsrs	r3, r3, #1
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	005b      	lsls	r3, r3, #1
 80082b6:	81fb      	strh	r3, [r7, #14]
	}

	ILI9341_Draw_colour_Burst(	xpos,
 80082b8:	89fc      	ldrh	r4, [r7, #14]
 80082ba:	8c3a      	ldrh	r2, [r7, #32]
 80082bc:	88b9      	ldrh	r1, [r7, #4]
 80082be:	88f8      	ldrh	r0, [r7, #6]
 80082c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80082c4:	9300      	str	r3, [sp, #0]
 80082c6:	4623      	mov	r3, r4
 80082c8:	f7ff fdea 	bl	8007ea0 <ILI9341_Draw_colour_Burst>
								colour,
								size,
								chunk_type);

	// add the truncated pixel now
	if(truncated)
 80082cc:	7b7b      	ldrb	r3, [r7, #13]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d011      	beq.n	80082f6 <ILI9341_Draw_Rectangle+0xfe>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 80082d2:	88fa      	ldrh	r2, [r7, #6]
 80082d4:	887b      	ldrh	r3, [r7, #2]
 80082d6:	4413      	add	r3, r2
 80082d8:	b29b      	uxth	r3, r3
 80082da:	3b01      	subs	r3, #1
 80082dc:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 80082de:	88ba      	ldrh	r2, [r7, #4]
 80082e0:	883b      	ldrh	r3, [r7, #0]
 80082e2:	4413      	add	r3, r2
 80082e4:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 80082e6:	3b01      	subs	r3, #1
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	8c3a      	ldrh	r2, [r7, #32]
 80082ec:	4619      	mov	r1, r3
 80082ee:	f7ff fea9 	bl	8008044 <ILI9341_Draw_Pixel>
 80082f2:	e000      	b.n	80082f6 <ILI9341_Draw_Rectangle+0xfe>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 80082f4:	bf00      	nop
							colour);
	}
}
 80082f6:	3714      	adds	r7, #20
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd90      	pop	{r4, r7, pc}
 80082fc:	200003da 	.word	0x200003da
 8008300:	200003d8 	.word	0x200003d8

08008304 <ILI9341_Draw_Horizontal_Line>:
 *
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 8008304:	b590      	push	{r4, r7, lr}
 8008306:	b085      	sub	sp, #20
 8008308:	af02      	add	r7, sp, #8
 800830a:	4604      	mov	r4, r0
 800830c:	4608      	mov	r0, r1
 800830e:	4611      	mov	r1, r2
 8008310:	461a      	mov	r2, r3
 8008312:	4623      	mov	r3, r4
 8008314:	80fb      	strh	r3, [r7, #6]
 8008316:	4603      	mov	r3, r0
 8008318:	80bb      	strh	r3, [r7, #4]
 800831a:	460b      	mov	r3, r1
 800831c:	807b      	strh	r3, [r7, #2]
 800831e:	4613      	mov	r3, r2
 8008320:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8008322:	4b1a      	ldr	r3, [pc, #104]	; (800838c <ILI9341_Draw_Horizontal_Line+0x88>)
 8008324:	881b      	ldrh	r3, [r3, #0]
 8008326:	b29b      	uxth	r3, r3
 8008328:	88fa      	ldrh	r2, [r7, #6]
 800832a:	429a      	cmp	r2, r3
 800832c:	d229      	bcs.n	8008382 <ILI9341_Draw_Horizontal_Line+0x7e>
 800832e:	4b18      	ldr	r3, [pc, #96]	; (8008390 <ILI9341_Draw_Horizontal_Line+0x8c>)
 8008330:	881b      	ldrh	r3, [r3, #0]
 8008332:	b29b      	uxth	r3, r3
 8008334:	88ba      	ldrh	r2, [r7, #4]
 8008336:	429a      	cmp	r2, r3
 8008338:	d223      	bcs.n	8008382 <ILI9341_Draw_Horizontal_Line+0x7e>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 800833a:	88fa      	ldrh	r2, [r7, #6]
 800833c:	887b      	ldrh	r3, [r7, #2]
 800833e:	4413      	add	r3, r2
 8008340:	3b01      	subs	r3, #1
 8008342:	4a12      	ldr	r2, [pc, #72]	; (800838c <ILI9341_Draw_Horizontal_Line+0x88>)
 8008344:	8812      	ldrh	r2, [r2, #0]
 8008346:	b292      	uxth	r2, r2
 8008348:	4293      	cmp	r3, r2
 800834a:	db05      	blt.n	8008358 <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 800834c:	4b0f      	ldr	r3, [pc, #60]	; (800838c <ILI9341_Draw_Horizontal_Line+0x88>)
 800834e:	881b      	ldrh	r3, [r3, #0]
 8008350:	b29a      	uxth	r2, r3
 8008352:	88fb      	ldrh	r3, [r7, #6]
 8008354:	1ad3      	subs	r3, r2, r3
 8008356:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Address(	xpos,
							ypos,
							(xpos + width) - 1,
 8008358:	88fa      	ldrh	r2, [r7, #6]
 800835a:	887b      	ldrh	r3, [r7, #2]
 800835c:	4413      	add	r3, r2
 800835e:	b29b      	uxth	r3, r3
	ILI9341_Set_Address(	xpos,
 8008360:	3b01      	subs	r3, #1
 8008362:	b29a      	uxth	r2, r3
 8008364:	88bb      	ldrh	r3, [r7, #4]
 8008366:	88b9      	ldrh	r1, [r7, #4]
 8008368:	88f8      	ldrh	r0, [r7, #6]
 800836a:	f7ff fbc3 	bl	8007af4 <ILI9341_Set_Address>
							ypos);

	ILI9341_Draw_colour_Burst(xpos, ypos, colour, width, LINE_CHUNK);
 800836e:	887c      	ldrh	r4, [r7, #2]
 8008370:	883a      	ldrh	r2, [r7, #0]
 8008372:	88b9      	ldrh	r1, [r7, #4]
 8008374:	88f8      	ldrh	r0, [r7, #6]
 8008376:	2303      	movs	r3, #3
 8008378:	9300      	str	r3, [sp, #0]
 800837a:	4623      	mov	r3, r4
 800837c:	f7ff fd90 	bl	8007ea0 <ILI9341_Draw_colour_Burst>
 8008380:	e000      	b.n	8008384 <ILI9341_Draw_Horizontal_Line+0x80>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8008382:	bf00      	nop
}
 8008384:	370c      	adds	r7, #12
 8008386:	46bd      	mov	sp, r7
 8008388:	bd90      	pop	{r4, r7, pc}
 800838a:	bf00      	nop
 800838c:	200003da 	.word	0x200003da
 8008390:	200003d8 	.word	0x200003d8

08008394 <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 8008394:	b590      	push	{r4, r7, lr}
 8008396:	b085      	sub	sp, #20
 8008398:	af02      	add	r7, sp, #8
 800839a:	4604      	mov	r4, r0
 800839c:	4608      	mov	r0, r1
 800839e:	4611      	mov	r1, r2
 80083a0:	461a      	mov	r2, r3
 80083a2:	4623      	mov	r3, r4
 80083a4:	80fb      	strh	r3, [r7, #6]
 80083a6:	4603      	mov	r3, r0
 80083a8:	80bb      	strh	r3, [r7, #4]
 80083aa:	460b      	mov	r3, r1
 80083ac:	807b      	strh	r3, [r7, #2]
 80083ae:	4613      	mov	r3, r2
 80083b0:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 80083b2:	4b1a      	ldr	r3, [pc, #104]	; (800841c <ILI9341_Draw_Vertical_Line+0x88>)
 80083b4:	881b      	ldrh	r3, [r3, #0]
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	88fa      	ldrh	r2, [r7, #6]
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d229      	bcs.n	8008412 <ILI9341_Draw_Vertical_Line+0x7e>
 80083be:	4b18      	ldr	r3, [pc, #96]	; (8008420 <ILI9341_Draw_Vertical_Line+0x8c>)
 80083c0:	881b      	ldrh	r3, [r3, #0]
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	88ba      	ldrh	r2, [r7, #4]
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d223      	bcs.n	8008412 <ILI9341_Draw_Vertical_Line+0x7e>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 80083ca:	88ba      	ldrh	r2, [r7, #4]
 80083cc:	887b      	ldrh	r3, [r7, #2]
 80083ce:	4413      	add	r3, r2
 80083d0:	3b01      	subs	r3, #1
 80083d2:	4a13      	ldr	r2, [pc, #76]	; (8008420 <ILI9341_Draw_Vertical_Line+0x8c>)
 80083d4:	8812      	ldrh	r2, [r2, #0]
 80083d6:	b292      	uxth	r2, r2
 80083d8:	4293      	cmp	r3, r2
 80083da:	db05      	blt.n	80083e8 <ILI9341_Draw_Vertical_Line+0x54>
		{
			height= LCD_HEIGHT - ypos;
 80083dc:	4b10      	ldr	r3, [pc, #64]	; (8008420 <ILI9341_Draw_Vertical_Line+0x8c>)
 80083de:	881b      	ldrh	r3, [r3, #0]
 80083e0:	b29a      	uxth	r2, r3
 80083e2:	88bb      	ldrh	r3, [r7, #4]
 80083e4:	1ad3      	subs	r3, r2, r3
 80083e6:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Address(xpos, ypos, xpos, (ypos + height) - 1);
 80083e8:	88ba      	ldrh	r2, [r7, #4]
 80083ea:	887b      	ldrh	r3, [r7, #2]
 80083ec:	4413      	add	r3, r2
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	3b01      	subs	r3, #1
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	88fa      	ldrh	r2, [r7, #6]
 80083f6:	88b9      	ldrh	r1, [r7, #4]
 80083f8:	88f8      	ldrh	r0, [r7, #6]
 80083fa:	f7ff fb7b 	bl	8007af4 <ILI9341_Set_Address>
	ILI9341_Draw_colour_Burst(xpos, ypos, colour, height, LINE_CHUNK);
 80083fe:	887c      	ldrh	r4, [r7, #2]
 8008400:	883a      	ldrh	r2, [r7, #0]
 8008402:	88b9      	ldrh	r1, [r7, #4]
 8008404:	88f8      	ldrh	r0, [r7, #6]
 8008406:	2303      	movs	r3, #3
 8008408:	9300      	str	r3, [sp, #0]
 800840a:	4623      	mov	r3, r4
 800840c:	f7ff fd48 	bl	8007ea0 <ILI9341_Draw_colour_Burst>
 8008410:	e000      	b.n	8008414 <ILI9341_Draw_Vertical_Line+0x80>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 8008412:	bf00      	nop
}
 8008414:	370c      	adds	r7, #12
 8008416:	46bd      	mov	sp, r7
 8008418:	bd90      	pop	{r4, r7, pc}
 800841a:	bf00      	nop
 800841c:	200003da 	.word	0x200003da
 8008420:	200003d8 	.word	0x200003d8

08008424 <__errno>:
 8008424:	4b01      	ldr	r3, [pc, #4]	; (800842c <__errno+0x8>)
 8008426:	6818      	ldr	r0, [r3, #0]
 8008428:	4770      	bx	lr
 800842a:	bf00      	nop
 800842c:	200003e0 	.word	0x200003e0

08008430 <__libc_init_array>:
 8008430:	b570      	push	{r4, r5, r6, lr}
 8008432:	4e0d      	ldr	r6, [pc, #52]	; (8008468 <__libc_init_array+0x38>)
 8008434:	4c0d      	ldr	r4, [pc, #52]	; (800846c <__libc_init_array+0x3c>)
 8008436:	1ba4      	subs	r4, r4, r6
 8008438:	10a4      	asrs	r4, r4, #2
 800843a:	2500      	movs	r5, #0
 800843c:	42a5      	cmp	r5, r4
 800843e:	d109      	bne.n	8008454 <__libc_init_array+0x24>
 8008440:	4e0b      	ldr	r6, [pc, #44]	; (8008470 <__libc_init_array+0x40>)
 8008442:	4c0c      	ldr	r4, [pc, #48]	; (8008474 <__libc_init_array+0x44>)
 8008444:	f000 ff68 	bl	8009318 <_init>
 8008448:	1ba4      	subs	r4, r4, r6
 800844a:	10a4      	asrs	r4, r4, #2
 800844c:	2500      	movs	r5, #0
 800844e:	42a5      	cmp	r5, r4
 8008450:	d105      	bne.n	800845e <__libc_init_array+0x2e>
 8008452:	bd70      	pop	{r4, r5, r6, pc}
 8008454:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008458:	4798      	blx	r3
 800845a:	3501      	adds	r5, #1
 800845c:	e7ee      	b.n	800843c <__libc_init_array+0xc>
 800845e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008462:	4798      	blx	r3
 8008464:	3501      	adds	r5, #1
 8008466:	e7f2      	b.n	800844e <__libc_init_array+0x1e>
 8008468:	08009760 	.word	0x08009760
 800846c:	08009760 	.word	0x08009760
 8008470:	08009760 	.word	0x08009760
 8008474:	08009764 	.word	0x08009764

08008478 <memset>:
 8008478:	4402      	add	r2, r0
 800847a:	4603      	mov	r3, r0
 800847c:	4293      	cmp	r3, r2
 800847e:	d100      	bne.n	8008482 <memset+0xa>
 8008480:	4770      	bx	lr
 8008482:	f803 1b01 	strb.w	r1, [r3], #1
 8008486:	e7f9      	b.n	800847c <memset+0x4>

08008488 <iprintf>:
 8008488:	b40f      	push	{r0, r1, r2, r3}
 800848a:	4b0a      	ldr	r3, [pc, #40]	; (80084b4 <iprintf+0x2c>)
 800848c:	b513      	push	{r0, r1, r4, lr}
 800848e:	681c      	ldr	r4, [r3, #0]
 8008490:	b124      	cbz	r4, 800849c <iprintf+0x14>
 8008492:	69a3      	ldr	r3, [r4, #24]
 8008494:	b913      	cbnz	r3, 800849c <iprintf+0x14>
 8008496:	4620      	mov	r0, r4
 8008498:	f000 fa22 	bl	80088e0 <__sinit>
 800849c:	ab05      	add	r3, sp, #20
 800849e:	9a04      	ldr	r2, [sp, #16]
 80084a0:	68a1      	ldr	r1, [r4, #8]
 80084a2:	9301      	str	r3, [sp, #4]
 80084a4:	4620      	mov	r0, r4
 80084a6:	f000 fbdb 	bl	8008c60 <_vfiprintf_r>
 80084aa:	b002      	add	sp, #8
 80084ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084b0:	b004      	add	sp, #16
 80084b2:	4770      	bx	lr
 80084b4:	200003e0 	.word	0x200003e0

080084b8 <_puts_r>:
 80084b8:	b570      	push	{r4, r5, r6, lr}
 80084ba:	460e      	mov	r6, r1
 80084bc:	4605      	mov	r5, r0
 80084be:	b118      	cbz	r0, 80084c8 <_puts_r+0x10>
 80084c0:	6983      	ldr	r3, [r0, #24]
 80084c2:	b90b      	cbnz	r3, 80084c8 <_puts_r+0x10>
 80084c4:	f000 fa0c 	bl	80088e0 <__sinit>
 80084c8:	69ab      	ldr	r3, [r5, #24]
 80084ca:	68ac      	ldr	r4, [r5, #8]
 80084cc:	b913      	cbnz	r3, 80084d4 <_puts_r+0x1c>
 80084ce:	4628      	mov	r0, r5
 80084d0:	f000 fa06 	bl	80088e0 <__sinit>
 80084d4:	4b23      	ldr	r3, [pc, #140]	; (8008564 <_puts_r+0xac>)
 80084d6:	429c      	cmp	r4, r3
 80084d8:	d117      	bne.n	800850a <_puts_r+0x52>
 80084da:	686c      	ldr	r4, [r5, #4]
 80084dc:	89a3      	ldrh	r3, [r4, #12]
 80084de:	071b      	lsls	r3, r3, #28
 80084e0:	d51d      	bpl.n	800851e <_puts_r+0x66>
 80084e2:	6923      	ldr	r3, [r4, #16]
 80084e4:	b1db      	cbz	r3, 800851e <_puts_r+0x66>
 80084e6:	3e01      	subs	r6, #1
 80084e8:	68a3      	ldr	r3, [r4, #8]
 80084ea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80084ee:	3b01      	subs	r3, #1
 80084f0:	60a3      	str	r3, [r4, #8]
 80084f2:	b9e9      	cbnz	r1, 8008530 <_puts_r+0x78>
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	da2e      	bge.n	8008556 <_puts_r+0x9e>
 80084f8:	4622      	mov	r2, r4
 80084fa:	210a      	movs	r1, #10
 80084fc:	4628      	mov	r0, r5
 80084fe:	f000 f83f 	bl	8008580 <__swbuf_r>
 8008502:	3001      	adds	r0, #1
 8008504:	d011      	beq.n	800852a <_puts_r+0x72>
 8008506:	200a      	movs	r0, #10
 8008508:	e011      	b.n	800852e <_puts_r+0x76>
 800850a:	4b17      	ldr	r3, [pc, #92]	; (8008568 <_puts_r+0xb0>)
 800850c:	429c      	cmp	r4, r3
 800850e:	d101      	bne.n	8008514 <_puts_r+0x5c>
 8008510:	68ac      	ldr	r4, [r5, #8]
 8008512:	e7e3      	b.n	80084dc <_puts_r+0x24>
 8008514:	4b15      	ldr	r3, [pc, #84]	; (800856c <_puts_r+0xb4>)
 8008516:	429c      	cmp	r4, r3
 8008518:	bf08      	it	eq
 800851a:	68ec      	ldreq	r4, [r5, #12]
 800851c:	e7de      	b.n	80084dc <_puts_r+0x24>
 800851e:	4621      	mov	r1, r4
 8008520:	4628      	mov	r0, r5
 8008522:	f000 f87f 	bl	8008624 <__swsetup_r>
 8008526:	2800      	cmp	r0, #0
 8008528:	d0dd      	beq.n	80084e6 <_puts_r+0x2e>
 800852a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800852e:	bd70      	pop	{r4, r5, r6, pc}
 8008530:	2b00      	cmp	r3, #0
 8008532:	da04      	bge.n	800853e <_puts_r+0x86>
 8008534:	69a2      	ldr	r2, [r4, #24]
 8008536:	429a      	cmp	r2, r3
 8008538:	dc06      	bgt.n	8008548 <_puts_r+0x90>
 800853a:	290a      	cmp	r1, #10
 800853c:	d004      	beq.n	8008548 <_puts_r+0x90>
 800853e:	6823      	ldr	r3, [r4, #0]
 8008540:	1c5a      	adds	r2, r3, #1
 8008542:	6022      	str	r2, [r4, #0]
 8008544:	7019      	strb	r1, [r3, #0]
 8008546:	e7cf      	b.n	80084e8 <_puts_r+0x30>
 8008548:	4622      	mov	r2, r4
 800854a:	4628      	mov	r0, r5
 800854c:	f000 f818 	bl	8008580 <__swbuf_r>
 8008550:	3001      	adds	r0, #1
 8008552:	d1c9      	bne.n	80084e8 <_puts_r+0x30>
 8008554:	e7e9      	b.n	800852a <_puts_r+0x72>
 8008556:	6823      	ldr	r3, [r4, #0]
 8008558:	200a      	movs	r0, #10
 800855a:	1c5a      	adds	r2, r3, #1
 800855c:	6022      	str	r2, [r4, #0]
 800855e:	7018      	strb	r0, [r3, #0]
 8008560:	e7e5      	b.n	800852e <_puts_r+0x76>
 8008562:	bf00      	nop
 8008564:	080096ec 	.word	0x080096ec
 8008568:	0800970c 	.word	0x0800970c
 800856c:	080096cc 	.word	0x080096cc

08008570 <puts>:
 8008570:	4b02      	ldr	r3, [pc, #8]	; (800857c <puts+0xc>)
 8008572:	4601      	mov	r1, r0
 8008574:	6818      	ldr	r0, [r3, #0]
 8008576:	f7ff bf9f 	b.w	80084b8 <_puts_r>
 800857a:	bf00      	nop
 800857c:	200003e0 	.word	0x200003e0

08008580 <__swbuf_r>:
 8008580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008582:	460e      	mov	r6, r1
 8008584:	4614      	mov	r4, r2
 8008586:	4605      	mov	r5, r0
 8008588:	b118      	cbz	r0, 8008592 <__swbuf_r+0x12>
 800858a:	6983      	ldr	r3, [r0, #24]
 800858c:	b90b      	cbnz	r3, 8008592 <__swbuf_r+0x12>
 800858e:	f000 f9a7 	bl	80088e0 <__sinit>
 8008592:	4b21      	ldr	r3, [pc, #132]	; (8008618 <__swbuf_r+0x98>)
 8008594:	429c      	cmp	r4, r3
 8008596:	d12a      	bne.n	80085ee <__swbuf_r+0x6e>
 8008598:	686c      	ldr	r4, [r5, #4]
 800859a:	69a3      	ldr	r3, [r4, #24]
 800859c:	60a3      	str	r3, [r4, #8]
 800859e:	89a3      	ldrh	r3, [r4, #12]
 80085a0:	071a      	lsls	r2, r3, #28
 80085a2:	d52e      	bpl.n	8008602 <__swbuf_r+0x82>
 80085a4:	6923      	ldr	r3, [r4, #16]
 80085a6:	b363      	cbz	r3, 8008602 <__swbuf_r+0x82>
 80085a8:	6923      	ldr	r3, [r4, #16]
 80085aa:	6820      	ldr	r0, [r4, #0]
 80085ac:	1ac0      	subs	r0, r0, r3
 80085ae:	6963      	ldr	r3, [r4, #20]
 80085b0:	b2f6      	uxtb	r6, r6
 80085b2:	4283      	cmp	r3, r0
 80085b4:	4637      	mov	r7, r6
 80085b6:	dc04      	bgt.n	80085c2 <__swbuf_r+0x42>
 80085b8:	4621      	mov	r1, r4
 80085ba:	4628      	mov	r0, r5
 80085bc:	f000 f926 	bl	800880c <_fflush_r>
 80085c0:	bb28      	cbnz	r0, 800860e <__swbuf_r+0x8e>
 80085c2:	68a3      	ldr	r3, [r4, #8]
 80085c4:	3b01      	subs	r3, #1
 80085c6:	60a3      	str	r3, [r4, #8]
 80085c8:	6823      	ldr	r3, [r4, #0]
 80085ca:	1c5a      	adds	r2, r3, #1
 80085cc:	6022      	str	r2, [r4, #0]
 80085ce:	701e      	strb	r6, [r3, #0]
 80085d0:	6963      	ldr	r3, [r4, #20]
 80085d2:	3001      	adds	r0, #1
 80085d4:	4283      	cmp	r3, r0
 80085d6:	d004      	beq.n	80085e2 <__swbuf_r+0x62>
 80085d8:	89a3      	ldrh	r3, [r4, #12]
 80085da:	07db      	lsls	r3, r3, #31
 80085dc:	d519      	bpl.n	8008612 <__swbuf_r+0x92>
 80085de:	2e0a      	cmp	r6, #10
 80085e0:	d117      	bne.n	8008612 <__swbuf_r+0x92>
 80085e2:	4621      	mov	r1, r4
 80085e4:	4628      	mov	r0, r5
 80085e6:	f000 f911 	bl	800880c <_fflush_r>
 80085ea:	b190      	cbz	r0, 8008612 <__swbuf_r+0x92>
 80085ec:	e00f      	b.n	800860e <__swbuf_r+0x8e>
 80085ee:	4b0b      	ldr	r3, [pc, #44]	; (800861c <__swbuf_r+0x9c>)
 80085f0:	429c      	cmp	r4, r3
 80085f2:	d101      	bne.n	80085f8 <__swbuf_r+0x78>
 80085f4:	68ac      	ldr	r4, [r5, #8]
 80085f6:	e7d0      	b.n	800859a <__swbuf_r+0x1a>
 80085f8:	4b09      	ldr	r3, [pc, #36]	; (8008620 <__swbuf_r+0xa0>)
 80085fa:	429c      	cmp	r4, r3
 80085fc:	bf08      	it	eq
 80085fe:	68ec      	ldreq	r4, [r5, #12]
 8008600:	e7cb      	b.n	800859a <__swbuf_r+0x1a>
 8008602:	4621      	mov	r1, r4
 8008604:	4628      	mov	r0, r5
 8008606:	f000 f80d 	bl	8008624 <__swsetup_r>
 800860a:	2800      	cmp	r0, #0
 800860c:	d0cc      	beq.n	80085a8 <__swbuf_r+0x28>
 800860e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008612:	4638      	mov	r0, r7
 8008614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008616:	bf00      	nop
 8008618:	080096ec 	.word	0x080096ec
 800861c:	0800970c 	.word	0x0800970c
 8008620:	080096cc 	.word	0x080096cc

08008624 <__swsetup_r>:
 8008624:	4b32      	ldr	r3, [pc, #200]	; (80086f0 <__swsetup_r+0xcc>)
 8008626:	b570      	push	{r4, r5, r6, lr}
 8008628:	681d      	ldr	r5, [r3, #0]
 800862a:	4606      	mov	r6, r0
 800862c:	460c      	mov	r4, r1
 800862e:	b125      	cbz	r5, 800863a <__swsetup_r+0x16>
 8008630:	69ab      	ldr	r3, [r5, #24]
 8008632:	b913      	cbnz	r3, 800863a <__swsetup_r+0x16>
 8008634:	4628      	mov	r0, r5
 8008636:	f000 f953 	bl	80088e0 <__sinit>
 800863a:	4b2e      	ldr	r3, [pc, #184]	; (80086f4 <__swsetup_r+0xd0>)
 800863c:	429c      	cmp	r4, r3
 800863e:	d10f      	bne.n	8008660 <__swsetup_r+0x3c>
 8008640:	686c      	ldr	r4, [r5, #4]
 8008642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008646:	b29a      	uxth	r2, r3
 8008648:	0715      	lsls	r5, r2, #28
 800864a:	d42c      	bmi.n	80086a6 <__swsetup_r+0x82>
 800864c:	06d0      	lsls	r0, r2, #27
 800864e:	d411      	bmi.n	8008674 <__swsetup_r+0x50>
 8008650:	2209      	movs	r2, #9
 8008652:	6032      	str	r2, [r6, #0]
 8008654:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008658:	81a3      	strh	r3, [r4, #12]
 800865a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800865e:	e03e      	b.n	80086de <__swsetup_r+0xba>
 8008660:	4b25      	ldr	r3, [pc, #148]	; (80086f8 <__swsetup_r+0xd4>)
 8008662:	429c      	cmp	r4, r3
 8008664:	d101      	bne.n	800866a <__swsetup_r+0x46>
 8008666:	68ac      	ldr	r4, [r5, #8]
 8008668:	e7eb      	b.n	8008642 <__swsetup_r+0x1e>
 800866a:	4b24      	ldr	r3, [pc, #144]	; (80086fc <__swsetup_r+0xd8>)
 800866c:	429c      	cmp	r4, r3
 800866e:	bf08      	it	eq
 8008670:	68ec      	ldreq	r4, [r5, #12]
 8008672:	e7e6      	b.n	8008642 <__swsetup_r+0x1e>
 8008674:	0751      	lsls	r1, r2, #29
 8008676:	d512      	bpl.n	800869e <__swsetup_r+0x7a>
 8008678:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800867a:	b141      	cbz	r1, 800868e <__swsetup_r+0x6a>
 800867c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008680:	4299      	cmp	r1, r3
 8008682:	d002      	beq.n	800868a <__swsetup_r+0x66>
 8008684:	4630      	mov	r0, r6
 8008686:	f000 fa19 	bl	8008abc <_free_r>
 800868a:	2300      	movs	r3, #0
 800868c:	6363      	str	r3, [r4, #52]	; 0x34
 800868e:	89a3      	ldrh	r3, [r4, #12]
 8008690:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008694:	81a3      	strh	r3, [r4, #12]
 8008696:	2300      	movs	r3, #0
 8008698:	6063      	str	r3, [r4, #4]
 800869a:	6923      	ldr	r3, [r4, #16]
 800869c:	6023      	str	r3, [r4, #0]
 800869e:	89a3      	ldrh	r3, [r4, #12]
 80086a0:	f043 0308 	orr.w	r3, r3, #8
 80086a4:	81a3      	strh	r3, [r4, #12]
 80086a6:	6923      	ldr	r3, [r4, #16]
 80086a8:	b94b      	cbnz	r3, 80086be <__swsetup_r+0x9a>
 80086aa:	89a3      	ldrh	r3, [r4, #12]
 80086ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80086b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086b4:	d003      	beq.n	80086be <__swsetup_r+0x9a>
 80086b6:	4621      	mov	r1, r4
 80086b8:	4630      	mov	r0, r6
 80086ba:	f000 f9bf 	bl	8008a3c <__smakebuf_r>
 80086be:	89a2      	ldrh	r2, [r4, #12]
 80086c0:	f012 0301 	ands.w	r3, r2, #1
 80086c4:	d00c      	beq.n	80086e0 <__swsetup_r+0xbc>
 80086c6:	2300      	movs	r3, #0
 80086c8:	60a3      	str	r3, [r4, #8]
 80086ca:	6963      	ldr	r3, [r4, #20]
 80086cc:	425b      	negs	r3, r3
 80086ce:	61a3      	str	r3, [r4, #24]
 80086d0:	6923      	ldr	r3, [r4, #16]
 80086d2:	b953      	cbnz	r3, 80086ea <__swsetup_r+0xc6>
 80086d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086d8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80086dc:	d1ba      	bne.n	8008654 <__swsetup_r+0x30>
 80086de:	bd70      	pop	{r4, r5, r6, pc}
 80086e0:	0792      	lsls	r2, r2, #30
 80086e2:	bf58      	it	pl
 80086e4:	6963      	ldrpl	r3, [r4, #20]
 80086e6:	60a3      	str	r3, [r4, #8]
 80086e8:	e7f2      	b.n	80086d0 <__swsetup_r+0xac>
 80086ea:	2000      	movs	r0, #0
 80086ec:	e7f7      	b.n	80086de <__swsetup_r+0xba>
 80086ee:	bf00      	nop
 80086f0:	200003e0 	.word	0x200003e0
 80086f4:	080096ec 	.word	0x080096ec
 80086f8:	0800970c 	.word	0x0800970c
 80086fc:	080096cc 	.word	0x080096cc

08008700 <__sflush_r>:
 8008700:	898a      	ldrh	r2, [r1, #12]
 8008702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008706:	4605      	mov	r5, r0
 8008708:	0710      	lsls	r0, r2, #28
 800870a:	460c      	mov	r4, r1
 800870c:	d458      	bmi.n	80087c0 <__sflush_r+0xc0>
 800870e:	684b      	ldr	r3, [r1, #4]
 8008710:	2b00      	cmp	r3, #0
 8008712:	dc05      	bgt.n	8008720 <__sflush_r+0x20>
 8008714:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008716:	2b00      	cmp	r3, #0
 8008718:	dc02      	bgt.n	8008720 <__sflush_r+0x20>
 800871a:	2000      	movs	r0, #0
 800871c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008720:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008722:	2e00      	cmp	r6, #0
 8008724:	d0f9      	beq.n	800871a <__sflush_r+0x1a>
 8008726:	2300      	movs	r3, #0
 8008728:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800872c:	682f      	ldr	r7, [r5, #0]
 800872e:	6a21      	ldr	r1, [r4, #32]
 8008730:	602b      	str	r3, [r5, #0]
 8008732:	d032      	beq.n	800879a <__sflush_r+0x9a>
 8008734:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008736:	89a3      	ldrh	r3, [r4, #12]
 8008738:	075a      	lsls	r2, r3, #29
 800873a:	d505      	bpl.n	8008748 <__sflush_r+0x48>
 800873c:	6863      	ldr	r3, [r4, #4]
 800873e:	1ac0      	subs	r0, r0, r3
 8008740:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008742:	b10b      	cbz	r3, 8008748 <__sflush_r+0x48>
 8008744:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008746:	1ac0      	subs	r0, r0, r3
 8008748:	2300      	movs	r3, #0
 800874a:	4602      	mov	r2, r0
 800874c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800874e:	6a21      	ldr	r1, [r4, #32]
 8008750:	4628      	mov	r0, r5
 8008752:	47b0      	blx	r6
 8008754:	1c43      	adds	r3, r0, #1
 8008756:	89a3      	ldrh	r3, [r4, #12]
 8008758:	d106      	bne.n	8008768 <__sflush_r+0x68>
 800875a:	6829      	ldr	r1, [r5, #0]
 800875c:	291d      	cmp	r1, #29
 800875e:	d848      	bhi.n	80087f2 <__sflush_r+0xf2>
 8008760:	4a29      	ldr	r2, [pc, #164]	; (8008808 <__sflush_r+0x108>)
 8008762:	40ca      	lsrs	r2, r1
 8008764:	07d6      	lsls	r6, r2, #31
 8008766:	d544      	bpl.n	80087f2 <__sflush_r+0xf2>
 8008768:	2200      	movs	r2, #0
 800876a:	6062      	str	r2, [r4, #4]
 800876c:	04d9      	lsls	r1, r3, #19
 800876e:	6922      	ldr	r2, [r4, #16]
 8008770:	6022      	str	r2, [r4, #0]
 8008772:	d504      	bpl.n	800877e <__sflush_r+0x7e>
 8008774:	1c42      	adds	r2, r0, #1
 8008776:	d101      	bne.n	800877c <__sflush_r+0x7c>
 8008778:	682b      	ldr	r3, [r5, #0]
 800877a:	b903      	cbnz	r3, 800877e <__sflush_r+0x7e>
 800877c:	6560      	str	r0, [r4, #84]	; 0x54
 800877e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008780:	602f      	str	r7, [r5, #0]
 8008782:	2900      	cmp	r1, #0
 8008784:	d0c9      	beq.n	800871a <__sflush_r+0x1a>
 8008786:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800878a:	4299      	cmp	r1, r3
 800878c:	d002      	beq.n	8008794 <__sflush_r+0x94>
 800878e:	4628      	mov	r0, r5
 8008790:	f000 f994 	bl	8008abc <_free_r>
 8008794:	2000      	movs	r0, #0
 8008796:	6360      	str	r0, [r4, #52]	; 0x34
 8008798:	e7c0      	b.n	800871c <__sflush_r+0x1c>
 800879a:	2301      	movs	r3, #1
 800879c:	4628      	mov	r0, r5
 800879e:	47b0      	blx	r6
 80087a0:	1c41      	adds	r1, r0, #1
 80087a2:	d1c8      	bne.n	8008736 <__sflush_r+0x36>
 80087a4:	682b      	ldr	r3, [r5, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d0c5      	beq.n	8008736 <__sflush_r+0x36>
 80087aa:	2b1d      	cmp	r3, #29
 80087ac:	d001      	beq.n	80087b2 <__sflush_r+0xb2>
 80087ae:	2b16      	cmp	r3, #22
 80087b0:	d101      	bne.n	80087b6 <__sflush_r+0xb6>
 80087b2:	602f      	str	r7, [r5, #0]
 80087b4:	e7b1      	b.n	800871a <__sflush_r+0x1a>
 80087b6:	89a3      	ldrh	r3, [r4, #12]
 80087b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087bc:	81a3      	strh	r3, [r4, #12]
 80087be:	e7ad      	b.n	800871c <__sflush_r+0x1c>
 80087c0:	690f      	ldr	r7, [r1, #16]
 80087c2:	2f00      	cmp	r7, #0
 80087c4:	d0a9      	beq.n	800871a <__sflush_r+0x1a>
 80087c6:	0793      	lsls	r3, r2, #30
 80087c8:	680e      	ldr	r6, [r1, #0]
 80087ca:	bf08      	it	eq
 80087cc:	694b      	ldreq	r3, [r1, #20]
 80087ce:	600f      	str	r7, [r1, #0]
 80087d0:	bf18      	it	ne
 80087d2:	2300      	movne	r3, #0
 80087d4:	eba6 0807 	sub.w	r8, r6, r7
 80087d8:	608b      	str	r3, [r1, #8]
 80087da:	f1b8 0f00 	cmp.w	r8, #0
 80087de:	dd9c      	ble.n	800871a <__sflush_r+0x1a>
 80087e0:	4643      	mov	r3, r8
 80087e2:	463a      	mov	r2, r7
 80087e4:	6a21      	ldr	r1, [r4, #32]
 80087e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80087e8:	4628      	mov	r0, r5
 80087ea:	47b0      	blx	r6
 80087ec:	2800      	cmp	r0, #0
 80087ee:	dc06      	bgt.n	80087fe <__sflush_r+0xfe>
 80087f0:	89a3      	ldrh	r3, [r4, #12]
 80087f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087f6:	81a3      	strh	r3, [r4, #12]
 80087f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087fc:	e78e      	b.n	800871c <__sflush_r+0x1c>
 80087fe:	4407      	add	r7, r0
 8008800:	eba8 0800 	sub.w	r8, r8, r0
 8008804:	e7e9      	b.n	80087da <__sflush_r+0xda>
 8008806:	bf00      	nop
 8008808:	20400001 	.word	0x20400001

0800880c <_fflush_r>:
 800880c:	b538      	push	{r3, r4, r5, lr}
 800880e:	690b      	ldr	r3, [r1, #16]
 8008810:	4605      	mov	r5, r0
 8008812:	460c      	mov	r4, r1
 8008814:	b1db      	cbz	r3, 800884e <_fflush_r+0x42>
 8008816:	b118      	cbz	r0, 8008820 <_fflush_r+0x14>
 8008818:	6983      	ldr	r3, [r0, #24]
 800881a:	b90b      	cbnz	r3, 8008820 <_fflush_r+0x14>
 800881c:	f000 f860 	bl	80088e0 <__sinit>
 8008820:	4b0c      	ldr	r3, [pc, #48]	; (8008854 <_fflush_r+0x48>)
 8008822:	429c      	cmp	r4, r3
 8008824:	d109      	bne.n	800883a <_fflush_r+0x2e>
 8008826:	686c      	ldr	r4, [r5, #4]
 8008828:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800882c:	b17b      	cbz	r3, 800884e <_fflush_r+0x42>
 800882e:	4621      	mov	r1, r4
 8008830:	4628      	mov	r0, r5
 8008832:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008836:	f7ff bf63 	b.w	8008700 <__sflush_r>
 800883a:	4b07      	ldr	r3, [pc, #28]	; (8008858 <_fflush_r+0x4c>)
 800883c:	429c      	cmp	r4, r3
 800883e:	d101      	bne.n	8008844 <_fflush_r+0x38>
 8008840:	68ac      	ldr	r4, [r5, #8]
 8008842:	e7f1      	b.n	8008828 <_fflush_r+0x1c>
 8008844:	4b05      	ldr	r3, [pc, #20]	; (800885c <_fflush_r+0x50>)
 8008846:	429c      	cmp	r4, r3
 8008848:	bf08      	it	eq
 800884a:	68ec      	ldreq	r4, [r5, #12]
 800884c:	e7ec      	b.n	8008828 <_fflush_r+0x1c>
 800884e:	2000      	movs	r0, #0
 8008850:	bd38      	pop	{r3, r4, r5, pc}
 8008852:	bf00      	nop
 8008854:	080096ec 	.word	0x080096ec
 8008858:	0800970c 	.word	0x0800970c
 800885c:	080096cc 	.word	0x080096cc

08008860 <std>:
 8008860:	2300      	movs	r3, #0
 8008862:	b510      	push	{r4, lr}
 8008864:	4604      	mov	r4, r0
 8008866:	e9c0 3300 	strd	r3, r3, [r0]
 800886a:	6083      	str	r3, [r0, #8]
 800886c:	8181      	strh	r1, [r0, #12]
 800886e:	6643      	str	r3, [r0, #100]	; 0x64
 8008870:	81c2      	strh	r2, [r0, #14]
 8008872:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008876:	6183      	str	r3, [r0, #24]
 8008878:	4619      	mov	r1, r3
 800887a:	2208      	movs	r2, #8
 800887c:	305c      	adds	r0, #92	; 0x5c
 800887e:	f7ff fdfb 	bl	8008478 <memset>
 8008882:	4b05      	ldr	r3, [pc, #20]	; (8008898 <std+0x38>)
 8008884:	6263      	str	r3, [r4, #36]	; 0x24
 8008886:	4b05      	ldr	r3, [pc, #20]	; (800889c <std+0x3c>)
 8008888:	62a3      	str	r3, [r4, #40]	; 0x28
 800888a:	4b05      	ldr	r3, [pc, #20]	; (80088a0 <std+0x40>)
 800888c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800888e:	4b05      	ldr	r3, [pc, #20]	; (80088a4 <std+0x44>)
 8008890:	6224      	str	r4, [r4, #32]
 8008892:	6323      	str	r3, [r4, #48]	; 0x30
 8008894:	bd10      	pop	{r4, pc}
 8008896:	bf00      	nop
 8008898:	080091bd 	.word	0x080091bd
 800889c:	080091df 	.word	0x080091df
 80088a0:	08009217 	.word	0x08009217
 80088a4:	0800923b 	.word	0x0800923b

080088a8 <_cleanup_r>:
 80088a8:	4901      	ldr	r1, [pc, #4]	; (80088b0 <_cleanup_r+0x8>)
 80088aa:	f000 b885 	b.w	80089b8 <_fwalk_reent>
 80088ae:	bf00      	nop
 80088b0:	0800880d 	.word	0x0800880d

080088b4 <__sfmoreglue>:
 80088b4:	b570      	push	{r4, r5, r6, lr}
 80088b6:	1e4a      	subs	r2, r1, #1
 80088b8:	2568      	movs	r5, #104	; 0x68
 80088ba:	4355      	muls	r5, r2
 80088bc:	460e      	mov	r6, r1
 80088be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80088c2:	f000 f949 	bl	8008b58 <_malloc_r>
 80088c6:	4604      	mov	r4, r0
 80088c8:	b140      	cbz	r0, 80088dc <__sfmoreglue+0x28>
 80088ca:	2100      	movs	r1, #0
 80088cc:	e9c0 1600 	strd	r1, r6, [r0]
 80088d0:	300c      	adds	r0, #12
 80088d2:	60a0      	str	r0, [r4, #8]
 80088d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80088d8:	f7ff fdce 	bl	8008478 <memset>
 80088dc:	4620      	mov	r0, r4
 80088de:	bd70      	pop	{r4, r5, r6, pc}

080088e0 <__sinit>:
 80088e0:	6983      	ldr	r3, [r0, #24]
 80088e2:	b510      	push	{r4, lr}
 80088e4:	4604      	mov	r4, r0
 80088e6:	bb33      	cbnz	r3, 8008936 <__sinit+0x56>
 80088e8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80088ec:	6503      	str	r3, [r0, #80]	; 0x50
 80088ee:	4b12      	ldr	r3, [pc, #72]	; (8008938 <__sinit+0x58>)
 80088f0:	4a12      	ldr	r2, [pc, #72]	; (800893c <__sinit+0x5c>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	6282      	str	r2, [r0, #40]	; 0x28
 80088f6:	4298      	cmp	r0, r3
 80088f8:	bf04      	itt	eq
 80088fa:	2301      	moveq	r3, #1
 80088fc:	6183      	streq	r3, [r0, #24]
 80088fe:	f000 f81f 	bl	8008940 <__sfp>
 8008902:	6060      	str	r0, [r4, #4]
 8008904:	4620      	mov	r0, r4
 8008906:	f000 f81b 	bl	8008940 <__sfp>
 800890a:	60a0      	str	r0, [r4, #8]
 800890c:	4620      	mov	r0, r4
 800890e:	f000 f817 	bl	8008940 <__sfp>
 8008912:	2200      	movs	r2, #0
 8008914:	60e0      	str	r0, [r4, #12]
 8008916:	2104      	movs	r1, #4
 8008918:	6860      	ldr	r0, [r4, #4]
 800891a:	f7ff ffa1 	bl	8008860 <std>
 800891e:	2201      	movs	r2, #1
 8008920:	2109      	movs	r1, #9
 8008922:	68a0      	ldr	r0, [r4, #8]
 8008924:	f7ff ff9c 	bl	8008860 <std>
 8008928:	2202      	movs	r2, #2
 800892a:	2112      	movs	r1, #18
 800892c:	68e0      	ldr	r0, [r4, #12]
 800892e:	f7ff ff97 	bl	8008860 <std>
 8008932:	2301      	movs	r3, #1
 8008934:	61a3      	str	r3, [r4, #24]
 8008936:	bd10      	pop	{r4, pc}
 8008938:	080096c8 	.word	0x080096c8
 800893c:	080088a9 	.word	0x080088a9

08008940 <__sfp>:
 8008940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008942:	4b1b      	ldr	r3, [pc, #108]	; (80089b0 <__sfp+0x70>)
 8008944:	681e      	ldr	r6, [r3, #0]
 8008946:	69b3      	ldr	r3, [r6, #24]
 8008948:	4607      	mov	r7, r0
 800894a:	b913      	cbnz	r3, 8008952 <__sfp+0x12>
 800894c:	4630      	mov	r0, r6
 800894e:	f7ff ffc7 	bl	80088e0 <__sinit>
 8008952:	3648      	adds	r6, #72	; 0x48
 8008954:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008958:	3b01      	subs	r3, #1
 800895a:	d503      	bpl.n	8008964 <__sfp+0x24>
 800895c:	6833      	ldr	r3, [r6, #0]
 800895e:	b133      	cbz	r3, 800896e <__sfp+0x2e>
 8008960:	6836      	ldr	r6, [r6, #0]
 8008962:	e7f7      	b.n	8008954 <__sfp+0x14>
 8008964:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008968:	b16d      	cbz	r5, 8008986 <__sfp+0x46>
 800896a:	3468      	adds	r4, #104	; 0x68
 800896c:	e7f4      	b.n	8008958 <__sfp+0x18>
 800896e:	2104      	movs	r1, #4
 8008970:	4638      	mov	r0, r7
 8008972:	f7ff ff9f 	bl	80088b4 <__sfmoreglue>
 8008976:	6030      	str	r0, [r6, #0]
 8008978:	2800      	cmp	r0, #0
 800897a:	d1f1      	bne.n	8008960 <__sfp+0x20>
 800897c:	230c      	movs	r3, #12
 800897e:	603b      	str	r3, [r7, #0]
 8008980:	4604      	mov	r4, r0
 8008982:	4620      	mov	r0, r4
 8008984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008986:	4b0b      	ldr	r3, [pc, #44]	; (80089b4 <__sfp+0x74>)
 8008988:	6665      	str	r5, [r4, #100]	; 0x64
 800898a:	e9c4 5500 	strd	r5, r5, [r4]
 800898e:	60a5      	str	r5, [r4, #8]
 8008990:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008994:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008998:	2208      	movs	r2, #8
 800899a:	4629      	mov	r1, r5
 800899c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80089a0:	f7ff fd6a 	bl	8008478 <memset>
 80089a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80089a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80089ac:	e7e9      	b.n	8008982 <__sfp+0x42>
 80089ae:	bf00      	nop
 80089b0:	080096c8 	.word	0x080096c8
 80089b4:	ffff0001 	.word	0xffff0001

080089b8 <_fwalk_reent>:
 80089b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089bc:	4680      	mov	r8, r0
 80089be:	4689      	mov	r9, r1
 80089c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80089c4:	2600      	movs	r6, #0
 80089c6:	b914      	cbnz	r4, 80089ce <_fwalk_reent+0x16>
 80089c8:	4630      	mov	r0, r6
 80089ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089ce:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80089d2:	3f01      	subs	r7, #1
 80089d4:	d501      	bpl.n	80089da <_fwalk_reent+0x22>
 80089d6:	6824      	ldr	r4, [r4, #0]
 80089d8:	e7f5      	b.n	80089c6 <_fwalk_reent+0xe>
 80089da:	89ab      	ldrh	r3, [r5, #12]
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d907      	bls.n	80089f0 <_fwalk_reent+0x38>
 80089e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80089e4:	3301      	adds	r3, #1
 80089e6:	d003      	beq.n	80089f0 <_fwalk_reent+0x38>
 80089e8:	4629      	mov	r1, r5
 80089ea:	4640      	mov	r0, r8
 80089ec:	47c8      	blx	r9
 80089ee:	4306      	orrs	r6, r0
 80089f0:	3568      	adds	r5, #104	; 0x68
 80089f2:	e7ee      	b.n	80089d2 <_fwalk_reent+0x1a>

080089f4 <__swhatbuf_r>:
 80089f4:	b570      	push	{r4, r5, r6, lr}
 80089f6:	460e      	mov	r6, r1
 80089f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089fc:	2900      	cmp	r1, #0
 80089fe:	b096      	sub	sp, #88	; 0x58
 8008a00:	4614      	mov	r4, r2
 8008a02:	461d      	mov	r5, r3
 8008a04:	da07      	bge.n	8008a16 <__swhatbuf_r+0x22>
 8008a06:	2300      	movs	r3, #0
 8008a08:	602b      	str	r3, [r5, #0]
 8008a0a:	89b3      	ldrh	r3, [r6, #12]
 8008a0c:	061a      	lsls	r2, r3, #24
 8008a0e:	d410      	bmi.n	8008a32 <__swhatbuf_r+0x3e>
 8008a10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a14:	e00e      	b.n	8008a34 <__swhatbuf_r+0x40>
 8008a16:	466a      	mov	r2, sp
 8008a18:	f000 fc36 	bl	8009288 <_fstat_r>
 8008a1c:	2800      	cmp	r0, #0
 8008a1e:	dbf2      	blt.n	8008a06 <__swhatbuf_r+0x12>
 8008a20:	9a01      	ldr	r2, [sp, #4]
 8008a22:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008a26:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008a2a:	425a      	negs	r2, r3
 8008a2c:	415a      	adcs	r2, r3
 8008a2e:	602a      	str	r2, [r5, #0]
 8008a30:	e7ee      	b.n	8008a10 <__swhatbuf_r+0x1c>
 8008a32:	2340      	movs	r3, #64	; 0x40
 8008a34:	2000      	movs	r0, #0
 8008a36:	6023      	str	r3, [r4, #0]
 8008a38:	b016      	add	sp, #88	; 0x58
 8008a3a:	bd70      	pop	{r4, r5, r6, pc}

08008a3c <__smakebuf_r>:
 8008a3c:	898b      	ldrh	r3, [r1, #12]
 8008a3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a40:	079d      	lsls	r5, r3, #30
 8008a42:	4606      	mov	r6, r0
 8008a44:	460c      	mov	r4, r1
 8008a46:	d507      	bpl.n	8008a58 <__smakebuf_r+0x1c>
 8008a48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008a4c:	6023      	str	r3, [r4, #0]
 8008a4e:	6123      	str	r3, [r4, #16]
 8008a50:	2301      	movs	r3, #1
 8008a52:	6163      	str	r3, [r4, #20]
 8008a54:	b002      	add	sp, #8
 8008a56:	bd70      	pop	{r4, r5, r6, pc}
 8008a58:	ab01      	add	r3, sp, #4
 8008a5a:	466a      	mov	r2, sp
 8008a5c:	f7ff ffca 	bl	80089f4 <__swhatbuf_r>
 8008a60:	9900      	ldr	r1, [sp, #0]
 8008a62:	4605      	mov	r5, r0
 8008a64:	4630      	mov	r0, r6
 8008a66:	f000 f877 	bl	8008b58 <_malloc_r>
 8008a6a:	b948      	cbnz	r0, 8008a80 <__smakebuf_r+0x44>
 8008a6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a70:	059a      	lsls	r2, r3, #22
 8008a72:	d4ef      	bmi.n	8008a54 <__smakebuf_r+0x18>
 8008a74:	f023 0303 	bic.w	r3, r3, #3
 8008a78:	f043 0302 	orr.w	r3, r3, #2
 8008a7c:	81a3      	strh	r3, [r4, #12]
 8008a7e:	e7e3      	b.n	8008a48 <__smakebuf_r+0xc>
 8008a80:	4b0d      	ldr	r3, [pc, #52]	; (8008ab8 <__smakebuf_r+0x7c>)
 8008a82:	62b3      	str	r3, [r6, #40]	; 0x28
 8008a84:	89a3      	ldrh	r3, [r4, #12]
 8008a86:	6020      	str	r0, [r4, #0]
 8008a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a8c:	81a3      	strh	r3, [r4, #12]
 8008a8e:	9b00      	ldr	r3, [sp, #0]
 8008a90:	6163      	str	r3, [r4, #20]
 8008a92:	9b01      	ldr	r3, [sp, #4]
 8008a94:	6120      	str	r0, [r4, #16]
 8008a96:	b15b      	cbz	r3, 8008ab0 <__smakebuf_r+0x74>
 8008a98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a9c:	4630      	mov	r0, r6
 8008a9e:	f000 fc05 	bl	80092ac <_isatty_r>
 8008aa2:	b128      	cbz	r0, 8008ab0 <__smakebuf_r+0x74>
 8008aa4:	89a3      	ldrh	r3, [r4, #12]
 8008aa6:	f023 0303 	bic.w	r3, r3, #3
 8008aaa:	f043 0301 	orr.w	r3, r3, #1
 8008aae:	81a3      	strh	r3, [r4, #12]
 8008ab0:	89a3      	ldrh	r3, [r4, #12]
 8008ab2:	431d      	orrs	r5, r3
 8008ab4:	81a5      	strh	r5, [r4, #12]
 8008ab6:	e7cd      	b.n	8008a54 <__smakebuf_r+0x18>
 8008ab8:	080088a9 	.word	0x080088a9

08008abc <_free_r>:
 8008abc:	b538      	push	{r3, r4, r5, lr}
 8008abe:	4605      	mov	r5, r0
 8008ac0:	2900      	cmp	r1, #0
 8008ac2:	d045      	beq.n	8008b50 <_free_r+0x94>
 8008ac4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ac8:	1f0c      	subs	r4, r1, #4
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	bfb8      	it	lt
 8008ace:	18e4      	addlt	r4, r4, r3
 8008ad0:	f000 fc0e 	bl	80092f0 <__malloc_lock>
 8008ad4:	4a1f      	ldr	r2, [pc, #124]	; (8008b54 <_free_r+0x98>)
 8008ad6:	6813      	ldr	r3, [r2, #0]
 8008ad8:	4610      	mov	r0, r2
 8008ada:	b933      	cbnz	r3, 8008aea <_free_r+0x2e>
 8008adc:	6063      	str	r3, [r4, #4]
 8008ade:	6014      	str	r4, [r2, #0]
 8008ae0:	4628      	mov	r0, r5
 8008ae2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ae6:	f000 bc04 	b.w	80092f2 <__malloc_unlock>
 8008aea:	42a3      	cmp	r3, r4
 8008aec:	d90c      	bls.n	8008b08 <_free_r+0x4c>
 8008aee:	6821      	ldr	r1, [r4, #0]
 8008af0:	1862      	adds	r2, r4, r1
 8008af2:	4293      	cmp	r3, r2
 8008af4:	bf04      	itt	eq
 8008af6:	681a      	ldreq	r2, [r3, #0]
 8008af8:	685b      	ldreq	r3, [r3, #4]
 8008afa:	6063      	str	r3, [r4, #4]
 8008afc:	bf04      	itt	eq
 8008afe:	1852      	addeq	r2, r2, r1
 8008b00:	6022      	streq	r2, [r4, #0]
 8008b02:	6004      	str	r4, [r0, #0]
 8008b04:	e7ec      	b.n	8008ae0 <_free_r+0x24>
 8008b06:	4613      	mov	r3, r2
 8008b08:	685a      	ldr	r2, [r3, #4]
 8008b0a:	b10a      	cbz	r2, 8008b10 <_free_r+0x54>
 8008b0c:	42a2      	cmp	r2, r4
 8008b0e:	d9fa      	bls.n	8008b06 <_free_r+0x4a>
 8008b10:	6819      	ldr	r1, [r3, #0]
 8008b12:	1858      	adds	r0, r3, r1
 8008b14:	42a0      	cmp	r0, r4
 8008b16:	d10b      	bne.n	8008b30 <_free_r+0x74>
 8008b18:	6820      	ldr	r0, [r4, #0]
 8008b1a:	4401      	add	r1, r0
 8008b1c:	1858      	adds	r0, r3, r1
 8008b1e:	4282      	cmp	r2, r0
 8008b20:	6019      	str	r1, [r3, #0]
 8008b22:	d1dd      	bne.n	8008ae0 <_free_r+0x24>
 8008b24:	6810      	ldr	r0, [r2, #0]
 8008b26:	6852      	ldr	r2, [r2, #4]
 8008b28:	605a      	str	r2, [r3, #4]
 8008b2a:	4401      	add	r1, r0
 8008b2c:	6019      	str	r1, [r3, #0]
 8008b2e:	e7d7      	b.n	8008ae0 <_free_r+0x24>
 8008b30:	d902      	bls.n	8008b38 <_free_r+0x7c>
 8008b32:	230c      	movs	r3, #12
 8008b34:	602b      	str	r3, [r5, #0]
 8008b36:	e7d3      	b.n	8008ae0 <_free_r+0x24>
 8008b38:	6820      	ldr	r0, [r4, #0]
 8008b3a:	1821      	adds	r1, r4, r0
 8008b3c:	428a      	cmp	r2, r1
 8008b3e:	bf04      	itt	eq
 8008b40:	6811      	ldreq	r1, [r2, #0]
 8008b42:	6852      	ldreq	r2, [r2, #4]
 8008b44:	6062      	str	r2, [r4, #4]
 8008b46:	bf04      	itt	eq
 8008b48:	1809      	addeq	r1, r1, r0
 8008b4a:	6021      	streq	r1, [r4, #0]
 8008b4c:	605c      	str	r4, [r3, #4]
 8008b4e:	e7c7      	b.n	8008ae0 <_free_r+0x24>
 8008b50:	bd38      	pop	{r3, r4, r5, pc}
 8008b52:	bf00      	nop
 8008b54:	20000470 	.word	0x20000470

08008b58 <_malloc_r>:
 8008b58:	b570      	push	{r4, r5, r6, lr}
 8008b5a:	1ccd      	adds	r5, r1, #3
 8008b5c:	f025 0503 	bic.w	r5, r5, #3
 8008b60:	3508      	adds	r5, #8
 8008b62:	2d0c      	cmp	r5, #12
 8008b64:	bf38      	it	cc
 8008b66:	250c      	movcc	r5, #12
 8008b68:	2d00      	cmp	r5, #0
 8008b6a:	4606      	mov	r6, r0
 8008b6c:	db01      	blt.n	8008b72 <_malloc_r+0x1a>
 8008b6e:	42a9      	cmp	r1, r5
 8008b70:	d903      	bls.n	8008b7a <_malloc_r+0x22>
 8008b72:	230c      	movs	r3, #12
 8008b74:	6033      	str	r3, [r6, #0]
 8008b76:	2000      	movs	r0, #0
 8008b78:	bd70      	pop	{r4, r5, r6, pc}
 8008b7a:	f000 fbb9 	bl	80092f0 <__malloc_lock>
 8008b7e:	4a21      	ldr	r2, [pc, #132]	; (8008c04 <_malloc_r+0xac>)
 8008b80:	6814      	ldr	r4, [r2, #0]
 8008b82:	4621      	mov	r1, r4
 8008b84:	b991      	cbnz	r1, 8008bac <_malloc_r+0x54>
 8008b86:	4c20      	ldr	r4, [pc, #128]	; (8008c08 <_malloc_r+0xb0>)
 8008b88:	6823      	ldr	r3, [r4, #0]
 8008b8a:	b91b      	cbnz	r3, 8008b94 <_malloc_r+0x3c>
 8008b8c:	4630      	mov	r0, r6
 8008b8e:	f000 fb05 	bl	800919c <_sbrk_r>
 8008b92:	6020      	str	r0, [r4, #0]
 8008b94:	4629      	mov	r1, r5
 8008b96:	4630      	mov	r0, r6
 8008b98:	f000 fb00 	bl	800919c <_sbrk_r>
 8008b9c:	1c43      	adds	r3, r0, #1
 8008b9e:	d124      	bne.n	8008bea <_malloc_r+0x92>
 8008ba0:	230c      	movs	r3, #12
 8008ba2:	6033      	str	r3, [r6, #0]
 8008ba4:	4630      	mov	r0, r6
 8008ba6:	f000 fba4 	bl	80092f2 <__malloc_unlock>
 8008baa:	e7e4      	b.n	8008b76 <_malloc_r+0x1e>
 8008bac:	680b      	ldr	r3, [r1, #0]
 8008bae:	1b5b      	subs	r3, r3, r5
 8008bb0:	d418      	bmi.n	8008be4 <_malloc_r+0x8c>
 8008bb2:	2b0b      	cmp	r3, #11
 8008bb4:	d90f      	bls.n	8008bd6 <_malloc_r+0x7e>
 8008bb6:	600b      	str	r3, [r1, #0]
 8008bb8:	50cd      	str	r5, [r1, r3]
 8008bba:	18cc      	adds	r4, r1, r3
 8008bbc:	4630      	mov	r0, r6
 8008bbe:	f000 fb98 	bl	80092f2 <__malloc_unlock>
 8008bc2:	f104 000b 	add.w	r0, r4, #11
 8008bc6:	1d23      	adds	r3, r4, #4
 8008bc8:	f020 0007 	bic.w	r0, r0, #7
 8008bcc:	1ac3      	subs	r3, r0, r3
 8008bce:	d0d3      	beq.n	8008b78 <_malloc_r+0x20>
 8008bd0:	425a      	negs	r2, r3
 8008bd2:	50e2      	str	r2, [r4, r3]
 8008bd4:	e7d0      	b.n	8008b78 <_malloc_r+0x20>
 8008bd6:	428c      	cmp	r4, r1
 8008bd8:	684b      	ldr	r3, [r1, #4]
 8008bda:	bf16      	itet	ne
 8008bdc:	6063      	strne	r3, [r4, #4]
 8008bde:	6013      	streq	r3, [r2, #0]
 8008be0:	460c      	movne	r4, r1
 8008be2:	e7eb      	b.n	8008bbc <_malloc_r+0x64>
 8008be4:	460c      	mov	r4, r1
 8008be6:	6849      	ldr	r1, [r1, #4]
 8008be8:	e7cc      	b.n	8008b84 <_malloc_r+0x2c>
 8008bea:	1cc4      	adds	r4, r0, #3
 8008bec:	f024 0403 	bic.w	r4, r4, #3
 8008bf0:	42a0      	cmp	r0, r4
 8008bf2:	d005      	beq.n	8008c00 <_malloc_r+0xa8>
 8008bf4:	1a21      	subs	r1, r4, r0
 8008bf6:	4630      	mov	r0, r6
 8008bf8:	f000 fad0 	bl	800919c <_sbrk_r>
 8008bfc:	3001      	adds	r0, #1
 8008bfe:	d0cf      	beq.n	8008ba0 <_malloc_r+0x48>
 8008c00:	6025      	str	r5, [r4, #0]
 8008c02:	e7db      	b.n	8008bbc <_malloc_r+0x64>
 8008c04:	20000470 	.word	0x20000470
 8008c08:	20000474 	.word	0x20000474

08008c0c <__sfputc_r>:
 8008c0c:	6893      	ldr	r3, [r2, #8]
 8008c0e:	3b01      	subs	r3, #1
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	b410      	push	{r4}
 8008c14:	6093      	str	r3, [r2, #8]
 8008c16:	da08      	bge.n	8008c2a <__sfputc_r+0x1e>
 8008c18:	6994      	ldr	r4, [r2, #24]
 8008c1a:	42a3      	cmp	r3, r4
 8008c1c:	db01      	blt.n	8008c22 <__sfputc_r+0x16>
 8008c1e:	290a      	cmp	r1, #10
 8008c20:	d103      	bne.n	8008c2a <__sfputc_r+0x1e>
 8008c22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c26:	f7ff bcab 	b.w	8008580 <__swbuf_r>
 8008c2a:	6813      	ldr	r3, [r2, #0]
 8008c2c:	1c58      	adds	r0, r3, #1
 8008c2e:	6010      	str	r0, [r2, #0]
 8008c30:	7019      	strb	r1, [r3, #0]
 8008c32:	4608      	mov	r0, r1
 8008c34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c38:	4770      	bx	lr

08008c3a <__sfputs_r>:
 8008c3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c3c:	4606      	mov	r6, r0
 8008c3e:	460f      	mov	r7, r1
 8008c40:	4614      	mov	r4, r2
 8008c42:	18d5      	adds	r5, r2, r3
 8008c44:	42ac      	cmp	r4, r5
 8008c46:	d101      	bne.n	8008c4c <__sfputs_r+0x12>
 8008c48:	2000      	movs	r0, #0
 8008c4a:	e007      	b.n	8008c5c <__sfputs_r+0x22>
 8008c4c:	463a      	mov	r2, r7
 8008c4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c52:	4630      	mov	r0, r6
 8008c54:	f7ff ffda 	bl	8008c0c <__sfputc_r>
 8008c58:	1c43      	adds	r3, r0, #1
 8008c5a:	d1f3      	bne.n	8008c44 <__sfputs_r+0xa>
 8008c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008c60 <_vfiprintf_r>:
 8008c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c64:	460c      	mov	r4, r1
 8008c66:	b09d      	sub	sp, #116	; 0x74
 8008c68:	4617      	mov	r7, r2
 8008c6a:	461d      	mov	r5, r3
 8008c6c:	4606      	mov	r6, r0
 8008c6e:	b118      	cbz	r0, 8008c78 <_vfiprintf_r+0x18>
 8008c70:	6983      	ldr	r3, [r0, #24]
 8008c72:	b90b      	cbnz	r3, 8008c78 <_vfiprintf_r+0x18>
 8008c74:	f7ff fe34 	bl	80088e0 <__sinit>
 8008c78:	4b7c      	ldr	r3, [pc, #496]	; (8008e6c <_vfiprintf_r+0x20c>)
 8008c7a:	429c      	cmp	r4, r3
 8008c7c:	d158      	bne.n	8008d30 <_vfiprintf_r+0xd0>
 8008c7e:	6874      	ldr	r4, [r6, #4]
 8008c80:	89a3      	ldrh	r3, [r4, #12]
 8008c82:	0718      	lsls	r0, r3, #28
 8008c84:	d55e      	bpl.n	8008d44 <_vfiprintf_r+0xe4>
 8008c86:	6923      	ldr	r3, [r4, #16]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d05b      	beq.n	8008d44 <_vfiprintf_r+0xe4>
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c90:	2320      	movs	r3, #32
 8008c92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c96:	2330      	movs	r3, #48	; 0x30
 8008c98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c9c:	9503      	str	r5, [sp, #12]
 8008c9e:	f04f 0b01 	mov.w	fp, #1
 8008ca2:	46b8      	mov	r8, r7
 8008ca4:	4645      	mov	r5, r8
 8008ca6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008caa:	b10b      	cbz	r3, 8008cb0 <_vfiprintf_r+0x50>
 8008cac:	2b25      	cmp	r3, #37	; 0x25
 8008cae:	d154      	bne.n	8008d5a <_vfiprintf_r+0xfa>
 8008cb0:	ebb8 0a07 	subs.w	sl, r8, r7
 8008cb4:	d00b      	beq.n	8008cce <_vfiprintf_r+0x6e>
 8008cb6:	4653      	mov	r3, sl
 8008cb8:	463a      	mov	r2, r7
 8008cba:	4621      	mov	r1, r4
 8008cbc:	4630      	mov	r0, r6
 8008cbe:	f7ff ffbc 	bl	8008c3a <__sfputs_r>
 8008cc2:	3001      	adds	r0, #1
 8008cc4:	f000 80c2 	beq.w	8008e4c <_vfiprintf_r+0x1ec>
 8008cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cca:	4453      	add	r3, sl
 8008ccc:	9309      	str	r3, [sp, #36]	; 0x24
 8008cce:	f898 3000 	ldrb.w	r3, [r8]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	f000 80ba 	beq.w	8008e4c <_vfiprintf_r+0x1ec>
 8008cd8:	2300      	movs	r3, #0
 8008cda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008cde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ce2:	9304      	str	r3, [sp, #16]
 8008ce4:	9307      	str	r3, [sp, #28]
 8008ce6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008cea:	931a      	str	r3, [sp, #104]	; 0x68
 8008cec:	46a8      	mov	r8, r5
 8008cee:	2205      	movs	r2, #5
 8008cf0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008cf4:	485e      	ldr	r0, [pc, #376]	; (8008e70 <_vfiprintf_r+0x210>)
 8008cf6:	f7f7 fa93 	bl	8000220 <memchr>
 8008cfa:	9b04      	ldr	r3, [sp, #16]
 8008cfc:	bb78      	cbnz	r0, 8008d5e <_vfiprintf_r+0xfe>
 8008cfe:	06d9      	lsls	r1, r3, #27
 8008d00:	bf44      	itt	mi
 8008d02:	2220      	movmi	r2, #32
 8008d04:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008d08:	071a      	lsls	r2, r3, #28
 8008d0a:	bf44      	itt	mi
 8008d0c:	222b      	movmi	r2, #43	; 0x2b
 8008d0e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008d12:	782a      	ldrb	r2, [r5, #0]
 8008d14:	2a2a      	cmp	r2, #42	; 0x2a
 8008d16:	d02a      	beq.n	8008d6e <_vfiprintf_r+0x10e>
 8008d18:	9a07      	ldr	r2, [sp, #28]
 8008d1a:	46a8      	mov	r8, r5
 8008d1c:	2000      	movs	r0, #0
 8008d1e:	250a      	movs	r5, #10
 8008d20:	4641      	mov	r1, r8
 8008d22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d26:	3b30      	subs	r3, #48	; 0x30
 8008d28:	2b09      	cmp	r3, #9
 8008d2a:	d969      	bls.n	8008e00 <_vfiprintf_r+0x1a0>
 8008d2c:	b360      	cbz	r0, 8008d88 <_vfiprintf_r+0x128>
 8008d2e:	e024      	b.n	8008d7a <_vfiprintf_r+0x11a>
 8008d30:	4b50      	ldr	r3, [pc, #320]	; (8008e74 <_vfiprintf_r+0x214>)
 8008d32:	429c      	cmp	r4, r3
 8008d34:	d101      	bne.n	8008d3a <_vfiprintf_r+0xda>
 8008d36:	68b4      	ldr	r4, [r6, #8]
 8008d38:	e7a2      	b.n	8008c80 <_vfiprintf_r+0x20>
 8008d3a:	4b4f      	ldr	r3, [pc, #316]	; (8008e78 <_vfiprintf_r+0x218>)
 8008d3c:	429c      	cmp	r4, r3
 8008d3e:	bf08      	it	eq
 8008d40:	68f4      	ldreq	r4, [r6, #12]
 8008d42:	e79d      	b.n	8008c80 <_vfiprintf_r+0x20>
 8008d44:	4621      	mov	r1, r4
 8008d46:	4630      	mov	r0, r6
 8008d48:	f7ff fc6c 	bl	8008624 <__swsetup_r>
 8008d4c:	2800      	cmp	r0, #0
 8008d4e:	d09d      	beq.n	8008c8c <_vfiprintf_r+0x2c>
 8008d50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d54:	b01d      	add	sp, #116	; 0x74
 8008d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d5a:	46a8      	mov	r8, r5
 8008d5c:	e7a2      	b.n	8008ca4 <_vfiprintf_r+0x44>
 8008d5e:	4a44      	ldr	r2, [pc, #272]	; (8008e70 <_vfiprintf_r+0x210>)
 8008d60:	1a80      	subs	r0, r0, r2
 8008d62:	fa0b f000 	lsl.w	r0, fp, r0
 8008d66:	4318      	orrs	r0, r3
 8008d68:	9004      	str	r0, [sp, #16]
 8008d6a:	4645      	mov	r5, r8
 8008d6c:	e7be      	b.n	8008cec <_vfiprintf_r+0x8c>
 8008d6e:	9a03      	ldr	r2, [sp, #12]
 8008d70:	1d11      	adds	r1, r2, #4
 8008d72:	6812      	ldr	r2, [r2, #0]
 8008d74:	9103      	str	r1, [sp, #12]
 8008d76:	2a00      	cmp	r2, #0
 8008d78:	db01      	blt.n	8008d7e <_vfiprintf_r+0x11e>
 8008d7a:	9207      	str	r2, [sp, #28]
 8008d7c:	e004      	b.n	8008d88 <_vfiprintf_r+0x128>
 8008d7e:	4252      	negs	r2, r2
 8008d80:	f043 0302 	orr.w	r3, r3, #2
 8008d84:	9207      	str	r2, [sp, #28]
 8008d86:	9304      	str	r3, [sp, #16]
 8008d88:	f898 3000 	ldrb.w	r3, [r8]
 8008d8c:	2b2e      	cmp	r3, #46	; 0x2e
 8008d8e:	d10e      	bne.n	8008dae <_vfiprintf_r+0x14e>
 8008d90:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008d94:	2b2a      	cmp	r3, #42	; 0x2a
 8008d96:	d138      	bne.n	8008e0a <_vfiprintf_r+0x1aa>
 8008d98:	9b03      	ldr	r3, [sp, #12]
 8008d9a:	1d1a      	adds	r2, r3, #4
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	9203      	str	r2, [sp, #12]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	bfb8      	it	lt
 8008da4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008da8:	f108 0802 	add.w	r8, r8, #2
 8008dac:	9305      	str	r3, [sp, #20]
 8008dae:	4d33      	ldr	r5, [pc, #204]	; (8008e7c <_vfiprintf_r+0x21c>)
 8008db0:	f898 1000 	ldrb.w	r1, [r8]
 8008db4:	2203      	movs	r2, #3
 8008db6:	4628      	mov	r0, r5
 8008db8:	f7f7 fa32 	bl	8000220 <memchr>
 8008dbc:	b140      	cbz	r0, 8008dd0 <_vfiprintf_r+0x170>
 8008dbe:	2340      	movs	r3, #64	; 0x40
 8008dc0:	1b40      	subs	r0, r0, r5
 8008dc2:	fa03 f000 	lsl.w	r0, r3, r0
 8008dc6:	9b04      	ldr	r3, [sp, #16]
 8008dc8:	4303      	orrs	r3, r0
 8008dca:	f108 0801 	add.w	r8, r8, #1
 8008dce:	9304      	str	r3, [sp, #16]
 8008dd0:	f898 1000 	ldrb.w	r1, [r8]
 8008dd4:	482a      	ldr	r0, [pc, #168]	; (8008e80 <_vfiprintf_r+0x220>)
 8008dd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008dda:	2206      	movs	r2, #6
 8008ddc:	f108 0701 	add.w	r7, r8, #1
 8008de0:	f7f7 fa1e 	bl	8000220 <memchr>
 8008de4:	2800      	cmp	r0, #0
 8008de6:	d037      	beq.n	8008e58 <_vfiprintf_r+0x1f8>
 8008de8:	4b26      	ldr	r3, [pc, #152]	; (8008e84 <_vfiprintf_r+0x224>)
 8008dea:	bb1b      	cbnz	r3, 8008e34 <_vfiprintf_r+0x1d4>
 8008dec:	9b03      	ldr	r3, [sp, #12]
 8008dee:	3307      	adds	r3, #7
 8008df0:	f023 0307 	bic.w	r3, r3, #7
 8008df4:	3308      	adds	r3, #8
 8008df6:	9303      	str	r3, [sp, #12]
 8008df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dfa:	444b      	add	r3, r9
 8008dfc:	9309      	str	r3, [sp, #36]	; 0x24
 8008dfe:	e750      	b.n	8008ca2 <_vfiprintf_r+0x42>
 8008e00:	fb05 3202 	mla	r2, r5, r2, r3
 8008e04:	2001      	movs	r0, #1
 8008e06:	4688      	mov	r8, r1
 8008e08:	e78a      	b.n	8008d20 <_vfiprintf_r+0xc0>
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	f108 0801 	add.w	r8, r8, #1
 8008e10:	9305      	str	r3, [sp, #20]
 8008e12:	4619      	mov	r1, r3
 8008e14:	250a      	movs	r5, #10
 8008e16:	4640      	mov	r0, r8
 8008e18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e1c:	3a30      	subs	r2, #48	; 0x30
 8008e1e:	2a09      	cmp	r2, #9
 8008e20:	d903      	bls.n	8008e2a <_vfiprintf_r+0x1ca>
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d0c3      	beq.n	8008dae <_vfiprintf_r+0x14e>
 8008e26:	9105      	str	r1, [sp, #20]
 8008e28:	e7c1      	b.n	8008dae <_vfiprintf_r+0x14e>
 8008e2a:	fb05 2101 	mla	r1, r5, r1, r2
 8008e2e:	2301      	movs	r3, #1
 8008e30:	4680      	mov	r8, r0
 8008e32:	e7f0      	b.n	8008e16 <_vfiprintf_r+0x1b6>
 8008e34:	ab03      	add	r3, sp, #12
 8008e36:	9300      	str	r3, [sp, #0]
 8008e38:	4622      	mov	r2, r4
 8008e3a:	4b13      	ldr	r3, [pc, #76]	; (8008e88 <_vfiprintf_r+0x228>)
 8008e3c:	a904      	add	r1, sp, #16
 8008e3e:	4630      	mov	r0, r6
 8008e40:	f3af 8000 	nop.w
 8008e44:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008e48:	4681      	mov	r9, r0
 8008e4a:	d1d5      	bne.n	8008df8 <_vfiprintf_r+0x198>
 8008e4c:	89a3      	ldrh	r3, [r4, #12]
 8008e4e:	065b      	lsls	r3, r3, #25
 8008e50:	f53f af7e 	bmi.w	8008d50 <_vfiprintf_r+0xf0>
 8008e54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e56:	e77d      	b.n	8008d54 <_vfiprintf_r+0xf4>
 8008e58:	ab03      	add	r3, sp, #12
 8008e5a:	9300      	str	r3, [sp, #0]
 8008e5c:	4622      	mov	r2, r4
 8008e5e:	4b0a      	ldr	r3, [pc, #40]	; (8008e88 <_vfiprintf_r+0x228>)
 8008e60:	a904      	add	r1, sp, #16
 8008e62:	4630      	mov	r0, r6
 8008e64:	f000 f888 	bl	8008f78 <_printf_i>
 8008e68:	e7ec      	b.n	8008e44 <_vfiprintf_r+0x1e4>
 8008e6a:	bf00      	nop
 8008e6c:	080096ec 	.word	0x080096ec
 8008e70:	0800972c 	.word	0x0800972c
 8008e74:	0800970c 	.word	0x0800970c
 8008e78:	080096cc 	.word	0x080096cc
 8008e7c:	08009732 	.word	0x08009732
 8008e80:	08009736 	.word	0x08009736
 8008e84:	00000000 	.word	0x00000000
 8008e88:	08008c3b 	.word	0x08008c3b

08008e8c <_printf_common>:
 8008e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e90:	4691      	mov	r9, r2
 8008e92:	461f      	mov	r7, r3
 8008e94:	688a      	ldr	r2, [r1, #8]
 8008e96:	690b      	ldr	r3, [r1, #16]
 8008e98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	bfb8      	it	lt
 8008ea0:	4613      	movlt	r3, r2
 8008ea2:	f8c9 3000 	str.w	r3, [r9]
 8008ea6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008eaa:	4606      	mov	r6, r0
 8008eac:	460c      	mov	r4, r1
 8008eae:	b112      	cbz	r2, 8008eb6 <_printf_common+0x2a>
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	f8c9 3000 	str.w	r3, [r9]
 8008eb6:	6823      	ldr	r3, [r4, #0]
 8008eb8:	0699      	lsls	r1, r3, #26
 8008eba:	bf42      	ittt	mi
 8008ebc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008ec0:	3302      	addmi	r3, #2
 8008ec2:	f8c9 3000 	strmi.w	r3, [r9]
 8008ec6:	6825      	ldr	r5, [r4, #0]
 8008ec8:	f015 0506 	ands.w	r5, r5, #6
 8008ecc:	d107      	bne.n	8008ede <_printf_common+0x52>
 8008ece:	f104 0a19 	add.w	sl, r4, #25
 8008ed2:	68e3      	ldr	r3, [r4, #12]
 8008ed4:	f8d9 2000 	ldr.w	r2, [r9]
 8008ed8:	1a9b      	subs	r3, r3, r2
 8008eda:	42ab      	cmp	r3, r5
 8008edc:	dc28      	bgt.n	8008f30 <_printf_common+0xa4>
 8008ede:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008ee2:	6822      	ldr	r2, [r4, #0]
 8008ee4:	3300      	adds	r3, #0
 8008ee6:	bf18      	it	ne
 8008ee8:	2301      	movne	r3, #1
 8008eea:	0692      	lsls	r2, r2, #26
 8008eec:	d42d      	bmi.n	8008f4a <_printf_common+0xbe>
 8008eee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ef2:	4639      	mov	r1, r7
 8008ef4:	4630      	mov	r0, r6
 8008ef6:	47c0      	blx	r8
 8008ef8:	3001      	adds	r0, #1
 8008efa:	d020      	beq.n	8008f3e <_printf_common+0xb2>
 8008efc:	6823      	ldr	r3, [r4, #0]
 8008efe:	68e5      	ldr	r5, [r4, #12]
 8008f00:	f8d9 2000 	ldr.w	r2, [r9]
 8008f04:	f003 0306 	and.w	r3, r3, #6
 8008f08:	2b04      	cmp	r3, #4
 8008f0a:	bf08      	it	eq
 8008f0c:	1aad      	subeq	r5, r5, r2
 8008f0e:	68a3      	ldr	r3, [r4, #8]
 8008f10:	6922      	ldr	r2, [r4, #16]
 8008f12:	bf0c      	ite	eq
 8008f14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f18:	2500      	movne	r5, #0
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	bfc4      	itt	gt
 8008f1e:	1a9b      	subgt	r3, r3, r2
 8008f20:	18ed      	addgt	r5, r5, r3
 8008f22:	f04f 0900 	mov.w	r9, #0
 8008f26:	341a      	adds	r4, #26
 8008f28:	454d      	cmp	r5, r9
 8008f2a:	d11a      	bne.n	8008f62 <_printf_common+0xd6>
 8008f2c:	2000      	movs	r0, #0
 8008f2e:	e008      	b.n	8008f42 <_printf_common+0xb6>
 8008f30:	2301      	movs	r3, #1
 8008f32:	4652      	mov	r2, sl
 8008f34:	4639      	mov	r1, r7
 8008f36:	4630      	mov	r0, r6
 8008f38:	47c0      	blx	r8
 8008f3a:	3001      	adds	r0, #1
 8008f3c:	d103      	bne.n	8008f46 <_printf_common+0xba>
 8008f3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f46:	3501      	adds	r5, #1
 8008f48:	e7c3      	b.n	8008ed2 <_printf_common+0x46>
 8008f4a:	18e1      	adds	r1, r4, r3
 8008f4c:	1c5a      	adds	r2, r3, #1
 8008f4e:	2030      	movs	r0, #48	; 0x30
 8008f50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f54:	4422      	add	r2, r4
 8008f56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f5e:	3302      	adds	r3, #2
 8008f60:	e7c5      	b.n	8008eee <_printf_common+0x62>
 8008f62:	2301      	movs	r3, #1
 8008f64:	4622      	mov	r2, r4
 8008f66:	4639      	mov	r1, r7
 8008f68:	4630      	mov	r0, r6
 8008f6a:	47c0      	blx	r8
 8008f6c:	3001      	adds	r0, #1
 8008f6e:	d0e6      	beq.n	8008f3e <_printf_common+0xb2>
 8008f70:	f109 0901 	add.w	r9, r9, #1
 8008f74:	e7d8      	b.n	8008f28 <_printf_common+0x9c>
	...

08008f78 <_printf_i>:
 8008f78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f7c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008f80:	460c      	mov	r4, r1
 8008f82:	7e09      	ldrb	r1, [r1, #24]
 8008f84:	b085      	sub	sp, #20
 8008f86:	296e      	cmp	r1, #110	; 0x6e
 8008f88:	4617      	mov	r7, r2
 8008f8a:	4606      	mov	r6, r0
 8008f8c:	4698      	mov	r8, r3
 8008f8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f90:	f000 80b3 	beq.w	80090fa <_printf_i+0x182>
 8008f94:	d822      	bhi.n	8008fdc <_printf_i+0x64>
 8008f96:	2963      	cmp	r1, #99	; 0x63
 8008f98:	d036      	beq.n	8009008 <_printf_i+0x90>
 8008f9a:	d80a      	bhi.n	8008fb2 <_printf_i+0x3a>
 8008f9c:	2900      	cmp	r1, #0
 8008f9e:	f000 80b9 	beq.w	8009114 <_printf_i+0x19c>
 8008fa2:	2958      	cmp	r1, #88	; 0x58
 8008fa4:	f000 8083 	beq.w	80090ae <_printf_i+0x136>
 8008fa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008fb0:	e032      	b.n	8009018 <_printf_i+0xa0>
 8008fb2:	2964      	cmp	r1, #100	; 0x64
 8008fb4:	d001      	beq.n	8008fba <_printf_i+0x42>
 8008fb6:	2969      	cmp	r1, #105	; 0x69
 8008fb8:	d1f6      	bne.n	8008fa8 <_printf_i+0x30>
 8008fba:	6820      	ldr	r0, [r4, #0]
 8008fbc:	6813      	ldr	r3, [r2, #0]
 8008fbe:	0605      	lsls	r5, r0, #24
 8008fc0:	f103 0104 	add.w	r1, r3, #4
 8008fc4:	d52a      	bpl.n	800901c <_printf_i+0xa4>
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	6011      	str	r1, [r2, #0]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	da03      	bge.n	8008fd6 <_printf_i+0x5e>
 8008fce:	222d      	movs	r2, #45	; 0x2d
 8008fd0:	425b      	negs	r3, r3
 8008fd2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008fd6:	486f      	ldr	r0, [pc, #444]	; (8009194 <_printf_i+0x21c>)
 8008fd8:	220a      	movs	r2, #10
 8008fda:	e039      	b.n	8009050 <_printf_i+0xd8>
 8008fdc:	2973      	cmp	r1, #115	; 0x73
 8008fde:	f000 809d 	beq.w	800911c <_printf_i+0x1a4>
 8008fe2:	d808      	bhi.n	8008ff6 <_printf_i+0x7e>
 8008fe4:	296f      	cmp	r1, #111	; 0x6f
 8008fe6:	d020      	beq.n	800902a <_printf_i+0xb2>
 8008fe8:	2970      	cmp	r1, #112	; 0x70
 8008fea:	d1dd      	bne.n	8008fa8 <_printf_i+0x30>
 8008fec:	6823      	ldr	r3, [r4, #0]
 8008fee:	f043 0320 	orr.w	r3, r3, #32
 8008ff2:	6023      	str	r3, [r4, #0]
 8008ff4:	e003      	b.n	8008ffe <_printf_i+0x86>
 8008ff6:	2975      	cmp	r1, #117	; 0x75
 8008ff8:	d017      	beq.n	800902a <_printf_i+0xb2>
 8008ffa:	2978      	cmp	r1, #120	; 0x78
 8008ffc:	d1d4      	bne.n	8008fa8 <_printf_i+0x30>
 8008ffe:	2378      	movs	r3, #120	; 0x78
 8009000:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009004:	4864      	ldr	r0, [pc, #400]	; (8009198 <_printf_i+0x220>)
 8009006:	e055      	b.n	80090b4 <_printf_i+0x13c>
 8009008:	6813      	ldr	r3, [r2, #0]
 800900a:	1d19      	adds	r1, r3, #4
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	6011      	str	r1, [r2, #0]
 8009010:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009014:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009018:	2301      	movs	r3, #1
 800901a:	e08c      	b.n	8009136 <_printf_i+0x1be>
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	6011      	str	r1, [r2, #0]
 8009020:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009024:	bf18      	it	ne
 8009026:	b21b      	sxthne	r3, r3
 8009028:	e7cf      	b.n	8008fca <_printf_i+0x52>
 800902a:	6813      	ldr	r3, [r2, #0]
 800902c:	6825      	ldr	r5, [r4, #0]
 800902e:	1d18      	adds	r0, r3, #4
 8009030:	6010      	str	r0, [r2, #0]
 8009032:	0628      	lsls	r0, r5, #24
 8009034:	d501      	bpl.n	800903a <_printf_i+0xc2>
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	e002      	b.n	8009040 <_printf_i+0xc8>
 800903a:	0668      	lsls	r0, r5, #25
 800903c:	d5fb      	bpl.n	8009036 <_printf_i+0xbe>
 800903e:	881b      	ldrh	r3, [r3, #0]
 8009040:	4854      	ldr	r0, [pc, #336]	; (8009194 <_printf_i+0x21c>)
 8009042:	296f      	cmp	r1, #111	; 0x6f
 8009044:	bf14      	ite	ne
 8009046:	220a      	movne	r2, #10
 8009048:	2208      	moveq	r2, #8
 800904a:	2100      	movs	r1, #0
 800904c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009050:	6865      	ldr	r5, [r4, #4]
 8009052:	60a5      	str	r5, [r4, #8]
 8009054:	2d00      	cmp	r5, #0
 8009056:	f2c0 8095 	blt.w	8009184 <_printf_i+0x20c>
 800905a:	6821      	ldr	r1, [r4, #0]
 800905c:	f021 0104 	bic.w	r1, r1, #4
 8009060:	6021      	str	r1, [r4, #0]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d13d      	bne.n	80090e2 <_printf_i+0x16a>
 8009066:	2d00      	cmp	r5, #0
 8009068:	f040 808e 	bne.w	8009188 <_printf_i+0x210>
 800906c:	4665      	mov	r5, ip
 800906e:	2a08      	cmp	r2, #8
 8009070:	d10b      	bne.n	800908a <_printf_i+0x112>
 8009072:	6823      	ldr	r3, [r4, #0]
 8009074:	07db      	lsls	r3, r3, #31
 8009076:	d508      	bpl.n	800908a <_printf_i+0x112>
 8009078:	6923      	ldr	r3, [r4, #16]
 800907a:	6862      	ldr	r2, [r4, #4]
 800907c:	429a      	cmp	r2, r3
 800907e:	bfde      	ittt	le
 8009080:	2330      	movle	r3, #48	; 0x30
 8009082:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009086:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800908a:	ebac 0305 	sub.w	r3, ip, r5
 800908e:	6123      	str	r3, [r4, #16]
 8009090:	f8cd 8000 	str.w	r8, [sp]
 8009094:	463b      	mov	r3, r7
 8009096:	aa03      	add	r2, sp, #12
 8009098:	4621      	mov	r1, r4
 800909a:	4630      	mov	r0, r6
 800909c:	f7ff fef6 	bl	8008e8c <_printf_common>
 80090a0:	3001      	adds	r0, #1
 80090a2:	d14d      	bne.n	8009140 <_printf_i+0x1c8>
 80090a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090a8:	b005      	add	sp, #20
 80090aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090ae:	4839      	ldr	r0, [pc, #228]	; (8009194 <_printf_i+0x21c>)
 80090b0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80090b4:	6813      	ldr	r3, [r2, #0]
 80090b6:	6821      	ldr	r1, [r4, #0]
 80090b8:	1d1d      	adds	r5, r3, #4
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	6015      	str	r5, [r2, #0]
 80090be:	060a      	lsls	r2, r1, #24
 80090c0:	d50b      	bpl.n	80090da <_printf_i+0x162>
 80090c2:	07ca      	lsls	r2, r1, #31
 80090c4:	bf44      	itt	mi
 80090c6:	f041 0120 	orrmi.w	r1, r1, #32
 80090ca:	6021      	strmi	r1, [r4, #0]
 80090cc:	b91b      	cbnz	r3, 80090d6 <_printf_i+0x15e>
 80090ce:	6822      	ldr	r2, [r4, #0]
 80090d0:	f022 0220 	bic.w	r2, r2, #32
 80090d4:	6022      	str	r2, [r4, #0]
 80090d6:	2210      	movs	r2, #16
 80090d8:	e7b7      	b.n	800904a <_printf_i+0xd2>
 80090da:	064d      	lsls	r5, r1, #25
 80090dc:	bf48      	it	mi
 80090de:	b29b      	uxthmi	r3, r3
 80090e0:	e7ef      	b.n	80090c2 <_printf_i+0x14a>
 80090e2:	4665      	mov	r5, ip
 80090e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80090e8:	fb02 3311 	mls	r3, r2, r1, r3
 80090ec:	5cc3      	ldrb	r3, [r0, r3]
 80090ee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80090f2:	460b      	mov	r3, r1
 80090f4:	2900      	cmp	r1, #0
 80090f6:	d1f5      	bne.n	80090e4 <_printf_i+0x16c>
 80090f8:	e7b9      	b.n	800906e <_printf_i+0xf6>
 80090fa:	6813      	ldr	r3, [r2, #0]
 80090fc:	6825      	ldr	r5, [r4, #0]
 80090fe:	6961      	ldr	r1, [r4, #20]
 8009100:	1d18      	adds	r0, r3, #4
 8009102:	6010      	str	r0, [r2, #0]
 8009104:	0628      	lsls	r0, r5, #24
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	d501      	bpl.n	800910e <_printf_i+0x196>
 800910a:	6019      	str	r1, [r3, #0]
 800910c:	e002      	b.n	8009114 <_printf_i+0x19c>
 800910e:	066a      	lsls	r2, r5, #25
 8009110:	d5fb      	bpl.n	800910a <_printf_i+0x192>
 8009112:	8019      	strh	r1, [r3, #0]
 8009114:	2300      	movs	r3, #0
 8009116:	6123      	str	r3, [r4, #16]
 8009118:	4665      	mov	r5, ip
 800911a:	e7b9      	b.n	8009090 <_printf_i+0x118>
 800911c:	6813      	ldr	r3, [r2, #0]
 800911e:	1d19      	adds	r1, r3, #4
 8009120:	6011      	str	r1, [r2, #0]
 8009122:	681d      	ldr	r5, [r3, #0]
 8009124:	6862      	ldr	r2, [r4, #4]
 8009126:	2100      	movs	r1, #0
 8009128:	4628      	mov	r0, r5
 800912a:	f7f7 f879 	bl	8000220 <memchr>
 800912e:	b108      	cbz	r0, 8009134 <_printf_i+0x1bc>
 8009130:	1b40      	subs	r0, r0, r5
 8009132:	6060      	str	r0, [r4, #4]
 8009134:	6863      	ldr	r3, [r4, #4]
 8009136:	6123      	str	r3, [r4, #16]
 8009138:	2300      	movs	r3, #0
 800913a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800913e:	e7a7      	b.n	8009090 <_printf_i+0x118>
 8009140:	6923      	ldr	r3, [r4, #16]
 8009142:	462a      	mov	r2, r5
 8009144:	4639      	mov	r1, r7
 8009146:	4630      	mov	r0, r6
 8009148:	47c0      	blx	r8
 800914a:	3001      	adds	r0, #1
 800914c:	d0aa      	beq.n	80090a4 <_printf_i+0x12c>
 800914e:	6823      	ldr	r3, [r4, #0]
 8009150:	079b      	lsls	r3, r3, #30
 8009152:	d413      	bmi.n	800917c <_printf_i+0x204>
 8009154:	68e0      	ldr	r0, [r4, #12]
 8009156:	9b03      	ldr	r3, [sp, #12]
 8009158:	4298      	cmp	r0, r3
 800915a:	bfb8      	it	lt
 800915c:	4618      	movlt	r0, r3
 800915e:	e7a3      	b.n	80090a8 <_printf_i+0x130>
 8009160:	2301      	movs	r3, #1
 8009162:	464a      	mov	r2, r9
 8009164:	4639      	mov	r1, r7
 8009166:	4630      	mov	r0, r6
 8009168:	47c0      	blx	r8
 800916a:	3001      	adds	r0, #1
 800916c:	d09a      	beq.n	80090a4 <_printf_i+0x12c>
 800916e:	3501      	adds	r5, #1
 8009170:	68e3      	ldr	r3, [r4, #12]
 8009172:	9a03      	ldr	r2, [sp, #12]
 8009174:	1a9b      	subs	r3, r3, r2
 8009176:	42ab      	cmp	r3, r5
 8009178:	dcf2      	bgt.n	8009160 <_printf_i+0x1e8>
 800917a:	e7eb      	b.n	8009154 <_printf_i+0x1dc>
 800917c:	2500      	movs	r5, #0
 800917e:	f104 0919 	add.w	r9, r4, #25
 8009182:	e7f5      	b.n	8009170 <_printf_i+0x1f8>
 8009184:	2b00      	cmp	r3, #0
 8009186:	d1ac      	bne.n	80090e2 <_printf_i+0x16a>
 8009188:	7803      	ldrb	r3, [r0, #0]
 800918a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800918e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009192:	e76c      	b.n	800906e <_printf_i+0xf6>
 8009194:	0800973d 	.word	0x0800973d
 8009198:	0800974e 	.word	0x0800974e

0800919c <_sbrk_r>:
 800919c:	b538      	push	{r3, r4, r5, lr}
 800919e:	4c06      	ldr	r4, [pc, #24]	; (80091b8 <_sbrk_r+0x1c>)
 80091a0:	2300      	movs	r3, #0
 80091a2:	4605      	mov	r5, r0
 80091a4:	4608      	mov	r0, r1
 80091a6:	6023      	str	r3, [r4, #0]
 80091a8:	f7f8 fbbe 	bl	8001928 <_sbrk>
 80091ac:	1c43      	adds	r3, r0, #1
 80091ae:	d102      	bne.n	80091b6 <_sbrk_r+0x1a>
 80091b0:	6823      	ldr	r3, [r4, #0]
 80091b2:	b103      	cbz	r3, 80091b6 <_sbrk_r+0x1a>
 80091b4:	602b      	str	r3, [r5, #0]
 80091b6:	bd38      	pop	{r3, r4, r5, pc}
 80091b8:	200008d8 	.word	0x200008d8

080091bc <__sread>:
 80091bc:	b510      	push	{r4, lr}
 80091be:	460c      	mov	r4, r1
 80091c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091c4:	f000 f896 	bl	80092f4 <_read_r>
 80091c8:	2800      	cmp	r0, #0
 80091ca:	bfab      	itete	ge
 80091cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80091ce:	89a3      	ldrhlt	r3, [r4, #12]
 80091d0:	181b      	addge	r3, r3, r0
 80091d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80091d6:	bfac      	ite	ge
 80091d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80091da:	81a3      	strhlt	r3, [r4, #12]
 80091dc:	bd10      	pop	{r4, pc}

080091de <__swrite>:
 80091de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091e2:	461f      	mov	r7, r3
 80091e4:	898b      	ldrh	r3, [r1, #12]
 80091e6:	05db      	lsls	r3, r3, #23
 80091e8:	4605      	mov	r5, r0
 80091ea:	460c      	mov	r4, r1
 80091ec:	4616      	mov	r6, r2
 80091ee:	d505      	bpl.n	80091fc <__swrite+0x1e>
 80091f0:	2302      	movs	r3, #2
 80091f2:	2200      	movs	r2, #0
 80091f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091f8:	f000 f868 	bl	80092cc <_lseek_r>
 80091fc:	89a3      	ldrh	r3, [r4, #12]
 80091fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009202:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009206:	81a3      	strh	r3, [r4, #12]
 8009208:	4632      	mov	r2, r6
 800920a:	463b      	mov	r3, r7
 800920c:	4628      	mov	r0, r5
 800920e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009212:	f000 b817 	b.w	8009244 <_write_r>

08009216 <__sseek>:
 8009216:	b510      	push	{r4, lr}
 8009218:	460c      	mov	r4, r1
 800921a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800921e:	f000 f855 	bl	80092cc <_lseek_r>
 8009222:	1c43      	adds	r3, r0, #1
 8009224:	89a3      	ldrh	r3, [r4, #12]
 8009226:	bf15      	itete	ne
 8009228:	6560      	strne	r0, [r4, #84]	; 0x54
 800922a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800922e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009232:	81a3      	strheq	r3, [r4, #12]
 8009234:	bf18      	it	ne
 8009236:	81a3      	strhne	r3, [r4, #12]
 8009238:	bd10      	pop	{r4, pc}

0800923a <__sclose>:
 800923a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800923e:	f000 b813 	b.w	8009268 <_close_r>
	...

08009244 <_write_r>:
 8009244:	b538      	push	{r3, r4, r5, lr}
 8009246:	4c07      	ldr	r4, [pc, #28]	; (8009264 <_write_r+0x20>)
 8009248:	4605      	mov	r5, r0
 800924a:	4608      	mov	r0, r1
 800924c:	4611      	mov	r1, r2
 800924e:	2200      	movs	r2, #0
 8009250:	6022      	str	r2, [r4, #0]
 8009252:	461a      	mov	r2, r3
 8009254:	f7f7 ffb5 	bl	80011c2 <_write>
 8009258:	1c43      	adds	r3, r0, #1
 800925a:	d102      	bne.n	8009262 <_write_r+0x1e>
 800925c:	6823      	ldr	r3, [r4, #0]
 800925e:	b103      	cbz	r3, 8009262 <_write_r+0x1e>
 8009260:	602b      	str	r3, [r5, #0]
 8009262:	bd38      	pop	{r3, r4, r5, pc}
 8009264:	200008d8 	.word	0x200008d8

08009268 <_close_r>:
 8009268:	b538      	push	{r3, r4, r5, lr}
 800926a:	4c06      	ldr	r4, [pc, #24]	; (8009284 <_close_r+0x1c>)
 800926c:	2300      	movs	r3, #0
 800926e:	4605      	mov	r5, r0
 8009270:	4608      	mov	r0, r1
 8009272:	6023      	str	r3, [r4, #0]
 8009274:	f7f8 fb23 	bl	80018be <_close>
 8009278:	1c43      	adds	r3, r0, #1
 800927a:	d102      	bne.n	8009282 <_close_r+0x1a>
 800927c:	6823      	ldr	r3, [r4, #0]
 800927e:	b103      	cbz	r3, 8009282 <_close_r+0x1a>
 8009280:	602b      	str	r3, [r5, #0]
 8009282:	bd38      	pop	{r3, r4, r5, pc}
 8009284:	200008d8 	.word	0x200008d8

08009288 <_fstat_r>:
 8009288:	b538      	push	{r3, r4, r5, lr}
 800928a:	4c07      	ldr	r4, [pc, #28]	; (80092a8 <_fstat_r+0x20>)
 800928c:	2300      	movs	r3, #0
 800928e:	4605      	mov	r5, r0
 8009290:	4608      	mov	r0, r1
 8009292:	4611      	mov	r1, r2
 8009294:	6023      	str	r3, [r4, #0]
 8009296:	f7f8 fb1e 	bl	80018d6 <_fstat>
 800929a:	1c43      	adds	r3, r0, #1
 800929c:	d102      	bne.n	80092a4 <_fstat_r+0x1c>
 800929e:	6823      	ldr	r3, [r4, #0]
 80092a0:	b103      	cbz	r3, 80092a4 <_fstat_r+0x1c>
 80092a2:	602b      	str	r3, [r5, #0]
 80092a4:	bd38      	pop	{r3, r4, r5, pc}
 80092a6:	bf00      	nop
 80092a8:	200008d8 	.word	0x200008d8

080092ac <_isatty_r>:
 80092ac:	b538      	push	{r3, r4, r5, lr}
 80092ae:	4c06      	ldr	r4, [pc, #24]	; (80092c8 <_isatty_r+0x1c>)
 80092b0:	2300      	movs	r3, #0
 80092b2:	4605      	mov	r5, r0
 80092b4:	4608      	mov	r0, r1
 80092b6:	6023      	str	r3, [r4, #0]
 80092b8:	f7f8 fb1d 	bl	80018f6 <_isatty>
 80092bc:	1c43      	adds	r3, r0, #1
 80092be:	d102      	bne.n	80092c6 <_isatty_r+0x1a>
 80092c0:	6823      	ldr	r3, [r4, #0]
 80092c2:	b103      	cbz	r3, 80092c6 <_isatty_r+0x1a>
 80092c4:	602b      	str	r3, [r5, #0]
 80092c6:	bd38      	pop	{r3, r4, r5, pc}
 80092c8:	200008d8 	.word	0x200008d8

080092cc <_lseek_r>:
 80092cc:	b538      	push	{r3, r4, r5, lr}
 80092ce:	4c07      	ldr	r4, [pc, #28]	; (80092ec <_lseek_r+0x20>)
 80092d0:	4605      	mov	r5, r0
 80092d2:	4608      	mov	r0, r1
 80092d4:	4611      	mov	r1, r2
 80092d6:	2200      	movs	r2, #0
 80092d8:	6022      	str	r2, [r4, #0]
 80092da:	461a      	mov	r2, r3
 80092dc:	f7f8 fb16 	bl	800190c <_lseek>
 80092e0:	1c43      	adds	r3, r0, #1
 80092e2:	d102      	bne.n	80092ea <_lseek_r+0x1e>
 80092e4:	6823      	ldr	r3, [r4, #0]
 80092e6:	b103      	cbz	r3, 80092ea <_lseek_r+0x1e>
 80092e8:	602b      	str	r3, [r5, #0]
 80092ea:	bd38      	pop	{r3, r4, r5, pc}
 80092ec:	200008d8 	.word	0x200008d8

080092f0 <__malloc_lock>:
 80092f0:	4770      	bx	lr

080092f2 <__malloc_unlock>:
 80092f2:	4770      	bx	lr

080092f4 <_read_r>:
 80092f4:	b538      	push	{r3, r4, r5, lr}
 80092f6:	4c07      	ldr	r4, [pc, #28]	; (8009314 <_read_r+0x20>)
 80092f8:	4605      	mov	r5, r0
 80092fa:	4608      	mov	r0, r1
 80092fc:	4611      	mov	r1, r2
 80092fe:	2200      	movs	r2, #0
 8009300:	6022      	str	r2, [r4, #0]
 8009302:	461a      	mov	r2, r3
 8009304:	f7f8 fabe 	bl	8001884 <_read>
 8009308:	1c43      	adds	r3, r0, #1
 800930a:	d102      	bne.n	8009312 <_read_r+0x1e>
 800930c:	6823      	ldr	r3, [r4, #0]
 800930e:	b103      	cbz	r3, 8009312 <_read_r+0x1e>
 8009310:	602b      	str	r3, [r5, #0]
 8009312:	bd38      	pop	{r3, r4, r5, pc}
 8009314:	200008d8 	.word	0x200008d8

08009318 <_init>:
 8009318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800931a:	bf00      	nop
 800931c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800931e:	bc08      	pop	{r3}
 8009320:	469e      	mov	lr, r3
 8009322:	4770      	bx	lr

08009324 <_fini>:
 8009324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009326:	bf00      	nop
 8009328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800932a:	bc08      	pop	{r3}
 800932c:	469e      	mov	lr, r3
 800932e:	4770      	bx	lr
